#include <iostream>
#include <bitset>
#include <cmath>
using namespace std;

const int N = 5e6 + 2;
int val[N];
bitset<N> is;
int cnt[N];
long long pref[N];

const long long to = sqrt(N) + 1;

void precalc() {
  for (int i = 0; i < N; i++) {
    val[i] = i;
  }
  for (int i = 2; i * i < N; i++) {
    if (is[i])
      continue;
    for (int j = i * i; j < N; j += i) {
      is[j] = 1;
      while (val[j] % i == 0) {
        val[j] /= i;
        cnt[j]++;
      }
    }
  }
  for (int i = 0; i < N; i++) {
    cnt[i] += (val[i] != 1);
  }
  for (int i = 1; i < N; i++) {
    pref[i] = pref[i - 1] + cnt[i];
  }
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  precalc();
  int t;
  scanf("%d", &t);
  while (t--) {
    int a, b;
    scanf("%d%d", &a, &b);
    printf("%lld\n", pref[a] - pref[b]);
  }
  return 0;
}