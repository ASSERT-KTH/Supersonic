#include <iostream>
#include <vector>

using namespace std;

const int N = 50005;
const int K = 505;

vector<int> g[N];
long long ans;
int n, k;
long long dp[N][K];

void dfs(int node, int par) {
  for (auto &u : g[node]) {
    if (u == par)
      continue;
    dfs(u, node);
    for (int i = 1; i <= k; i++) {
      dp[node][i] += dp[u][i - 1];
    }
  }
  ans += dp[node][k];
  long long tot = 0;
  for (int i = 1, j = k - 1; i < k; i++, j--) {
    for (auto &u : g[node]) {
      if (u == par)
        continue;
      tot += (dp[u][i - 1]) * (dp[node][j] - dp[u][j - 1]);
    }
  }
  ans += tot >> 1;
  dp[node][0] = 1LL;
}

void work(int n, int k, const vector<pair<int, int>>& edges) {
  for (int i = 0; i < n - 1; i++) {
    int u = edges[i].first, v = edges[i].second;
    g[u].push_back(v);
    g[v].push_back(u);
  }
  dfs(0, -1);
  cout << ans << endl;
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);

  int n, k;
  cin >> n >> k;
  vector<pair<int, int>> edges(n - 1);
  for (int i = 0; i < n - 1; i++) {
    cin >> edges[i].first >> edges[i].second;
    --edges[i].first;
    --edges[i].second;
  }
  work(n, k, edges);

  return 0;
}