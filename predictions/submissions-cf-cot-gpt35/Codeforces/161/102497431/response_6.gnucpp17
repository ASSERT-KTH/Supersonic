#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

unordered_map<int, vector<int>> g;
long long ans;
int n, k;

void dfs(int node, int par, unordered_map<int, vector<long long>>& dp) {
  for (auto& u : g[node]) {
    if (u == par)
      continue;
    dfs(u, node, dp);
    for (int i = 1; i <= k; i++) {
      dp[node][i] += dp[u][i - 1];
    }
  }
  ans += dp[node][k];
  long long tot = 0;
  for (int i = 1, j = k - 1; i < k; i++, j--) {
    for (auto& u : g[node]) {
      if (u == par)
        continue;
      tot += (dp[u][i - 1]) * (dp[node][j] - dp[u][j - 1]);
    }
  }
  ans += tot >> 1;
  dp[node][0] = 1LL;
}

void work() {
  cin >> n >> k;
  for (int i = 0; i < n - 1; i++) {
    int u, v;
    cin >> u >> v;
    --u, --v;
    g[u].push_back(v);
    g[v].push_back(u);
  }

  unordered_map<int, vector<long long>> dp;
  for (int i = 0; i < n; i++) {
    dp[i] = vector<long long>(k + 1, 0);
  }

  dfs(0, -1, dp);
  cout << ans << endl;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  work();
  return 0;
}