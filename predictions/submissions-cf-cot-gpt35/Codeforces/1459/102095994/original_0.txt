Optimization Steps:
1. Remove unnecessary header files.
2. Remove unused macros.
3. Remove unnecessary variable declarations.
4. Remove unused code.
5. Optimize the loop conditions.
6. Optimize the use of the `accumulate` function.
7. Optimize the use of the `accumulate` function.
8. Optimize the use of the `max` function.
9. Optimize the use of the `min` function.
10. Optimize the precision of the output.

Optimized Code:
```cpp
#include <algorithm>
#include <iostream>
#include <vector>
#define double long double
#define int long long int
using namespace std;

const int N = 2e2 + 10;

void solve() {
  int n;
  cin >> n;
  vector<int> a(n + 1), b(n + 1);
  for (int i = 1; i <= n; i++) {
    cin >> a[i] >> b[i];
  }
  double total = accumulate(b.begin(), b.end(), 0.0);
  vector<vector<double>> dp(N * N, vector<double>(N, -1e18));
  dp[0][0] = 0;
  double ans = -1e18;
  int cap = 0;
  for (int i = 1; i <= n; i++) {
    auto &tmp = dp;
    cap += a[i];
    for (int c = 100 * 100 + 10; c >= 1; c--) {
      for (int k = n; k >= 1; k--) {
        if (c >= a[i]) {
          tmp[c][k] = max(dp[c - a[i]][k - 1] + b[i], dp[c][k]);
        }
      }
    }
  }
  for (int k = 1; k <= n; k++) {
    ans = -1e18;
    auto &tmp = dp;
    for (int c = 1; c <= 100 * 100 + 10; c++) {
      ans = max(min(tmp[c][k] + (total - tmp[c][k]) / 2.0, (double)c), ans);
    }
    cout << fixed << setprecision(20) << ans << " ";
  }
}

int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  solve();
  return 0;
}
```
