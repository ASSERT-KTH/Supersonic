Step 1: Remove unnecessary headers

The program includes many unnecessary headers like `<algorithm>`, `<bitset>`, `<cctype>`, `<climits>`, `<cmath>`, `<cstdio>`, `<cstring>`, `<iterator>`, `<map>`, `<numeric>`, `<queue>`, `<set>`, `<stack>`, and `<stdlib.h>`. These headers are not used in the program and can be removed to reduce the compilation time and memory usage.

Step 2: Remove unnecessary typedefs and macros

The program defines several typedefs and macros that are not used. These can be safely removed to simplify the code.

Step 3: Optimize memory usage

The program uses a 2D vector `vvi dp(N * N, vi(N, -inf))` to store the dynamic programming table. However, the table size is much larger than necessary. We can optimize the memory usage by reducing the size of the table to `vvi dp(N, vi(N, -inf))`.

Step 4: Optimize the inner loop

The inner loop `per(c, 100 * 100 + 10, 1) per(k, n, 1)` iterates over the entire range of `c` and `k` in reverse order. This can be optimized by starting the loop from the maximum possible value of `c` and `k` and breaking the loop when `c` is less than `a[i]`.

Step 5: Simplify the calculation of `ans`

The calculation of `ans` can be simplified by removing the unnecessary variable `tmp` and calculating the minimum value directly in the loop.

Step 6: Remove unnecessary code

The code after `solve()` function is not used and can be safely removed.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <iomanip>

using namespace std;

const int N = 2e2 + 10;
const int inf = 1e18 + 10;

void solve() {
  int n;
  cin >> n;
  vector<int> a(n + 1), b(n + 1);
  for (int i = 1; i <= n; i++) {
    cin >> a[i] >> b[i];
  }
  double total = accumulate(b.begin() + 1, b.end(), 0.0);
  vector<vector<double>> dp(N, vector<double>(N, -inf));
  dp[0][0] = 0;
  for (int i = 1; i <= n; i++) {
    int cap = 0;
    for (int c = 100 * 100 + 10; c >= 1 && c >= a[i]; c--) {
      for (int k = n; k >= 1; k--) {
        dp[c][k] = max(dp[c - a[i]][k - 1] + b[i], dp[c][k]);
      }
    }
  }
  for (int k = 1; k <= n; k++) {
    double ans = -inf;
    for (int c = 1; c <= 100 * 100 + 10; c++) {
      ans = max(min(dp[c][k] + (total - dp[c][k]) / 2.0, (double)c), ans);
    }
    cout << fixed << setprecision(20) << ans << " ";
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  solve();
  return 0;
}
```
