Optimization step by step:

1. Remove unnecessary header files: `#include <bits/stdc++.h>` is not needed as it includes a large number of header files, which can slow down compilation time.

2. Avoid using variable-length arrays: Instead of using `int arr[n]`, use `vector<int> arr(n)`. Variable-length arrays are not part of the C++ standard and can cause unexpected behavior.

3. Use `reserve` function for `vector`: Since the size of `arr` is known in advance, we can use `arr.reserve(n)` to allocate memory for `n` elements. This can prevent reallocations and improve performance.

4. Use `reserve` function for `vector` in the optimized code: Since the size of `arr` is known in advance, we can use `arr.reserve(n)` to allocate memory for `n` elements. This can prevent reallocations and improve performance.

5. Use `std::ios_base::sync_with_stdio(false)` to improve input/output speed: By default, C++ streams are synchronized with C-style I/O functions, which can reduce performance. By disabling synchronization using `std::ios_base::sync_with_stdio(false)`, we can improve the input/output speed.

6. Use `cin.tie(NULL)` to improve input/output speed: By default, `cin` is tied to `cout`, which can reduce performance. By untieing `cin` using `cin.tie(NULL)`, we can improve the input/output speed.

7. Use `emplace_back` instead of `push_back` to avoid unnecessary copy operations: Instead of using `arr.push_back(value)`, use `arr.emplace_back(value)` to construct the element in-place, avoiding unnecessary copy operations.

8. Avoid unnecessary `abs` function call: Since `sum` is always negative, we can remove the `abs` function call and simply output `-sum`.

Optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, m;
  cin >> n >> m;
  vector<int> arr;
  arr.reserve(n);
  for (int i = 0; i < n; i++) {
    int value;
    cin >> value;
    arr.emplace_back(value);
  }
  sort(arr.begin(), arr.end());
  
  int sum = 0;
  for (int i = 0; i < m; i++) {
    if (arr[i] < 0)
      sum += arr[i];
    else
      break;
  }
  
  cout << -sum << endl;
  return 0;
}
```