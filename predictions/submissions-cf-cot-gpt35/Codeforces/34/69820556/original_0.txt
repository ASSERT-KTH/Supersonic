To optimize the given C/C++ program, we can make the following modifications:

1. Instead of using the `bits/stdc++.h` header, we can include only the necessary headers: `<algorithm>` for `sort()`, `<iostream>` for input/output, and `<cstdlib>` for the `abs()` function.

2. We can replace the variable-length array `int arr[n]` with a `vector<int>` to avoid potential stack overflow issues.

3. Instead of using the `sort()` function from the `<algorithm>` header, we can use `partial_sort()` to only partially sort the array up to the `m`-th element.

4. We can remove the unnecessary `using namespace std;` statement.

Here is the optimized C++ program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
#include <cstdlib>

int main() {
  int n, m;
  std::cin >> n >> m;
  
  std::vector<int> arr(n);
  for (int i = 0; i < n; i++) {
    std::cin >> arr[i];
  }
  
  std::partial_sort(arr.begin(), arr.begin() + m, arr.end());
  
  int sum = 0;
  for (int i = 0; i < m; i++) {
    if (arr[i] < 0)
      sum += arr[i];
    else
      break;
  }
  
  std::cout << std::abs(sum) << std::endl;
  return 0;
}
```

These modifications optimize the program by reducing memory usage and improving the runtime by only partially sorting the array up to the `m`-th element instead of sorting the entire array.