To optimize the given program, we can make the following changes:

1. Remove unnecessary header files: The program includes `<bits/stdc++.h>` and `<array>` header files, which are not used in the program. We can remove them.

2. Use `vector` instead of array: Instead of using a fixed-size array, we can use a `vector` to dynamically allocate memory for the input array. This will help in reducing memory usage.

3. Use a `partial_sort` algorithm: Instead of sorting the entire array using `sort`, we can use the `partial_sort` algorithm to only sort the first `m` elements. This will reduce the running time of the program as we only need to find the sum of the negative elements in the first `m` elements.

Here is the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

int main() {
  int n, m;
  cin >> n >> m;
  
  vector<int> arr(n);
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }
  
  partial_sort(arr.begin(), arr.begin() + m, arr.end());
  
  int sum = 0;
  for (int i = 0; i < m; i++) {
    if (arr[i] < 0)
      sum += arr[i];
    else
      break;
  }
  
  cout << abs(sum) << endl;
  
  return 0;
}
```

Explanation of optimizations:

1. By removing unnecessary header files, we can reduce the compilation time and improve the readability of the code.

2. Using a `vector` instead of a fixed-size array allows us to dynamically allocate memory for the input array. This reduces memory usage and allows us to handle variable input sizes.

3. Instead of sorting the entire array, we use the `partial_sort` algorithm to sort only the first `m` elements. This reduces the running time of the program as we only need to find the sum of the negative elements in the sorted portion.