Optimization Steps:
1. Avoid unnecessary header inclusions: The inclusion of `<bits/stdc++.h>` is not necessary and can be removed.
2. Remove unnecessary namespace: The `using namespace std;` statement can be removed to avoid namespace pollution.
3. Avoid using variable-length arrays: Instead of using `int arr[n]`, use `vector<int> arr(n)` to dynamically allocate memory for the array. This will improve memory usage.
4. Optimize the sorting process: Instead of using the generic `sort` function, use `partial_sort` to sort only the necessary elements up to `m`. This will improve the running time.
5. Simplify the sum calculation: Instead of using an if-else statement to calculate the sum, use a single loop to iterate through the array and calculate the sum. This will simplify the code and improve the running time.
6. Avoid unnecessary absolute value calculation: Since the sum is guaranteed to be negative, there is no need to calculate the absolute value. Simply output the negative sum.

Optimized Code:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>

int main() {
  int n, m;
  std::cin >> n >> m;
  std::vector<int> arr(n);
  for (int i = 0; i < n; i++) {
    std::cin >> arr[i];
  }
  std::partial_sort(arr.begin(), arr.begin() + m, arr.end());
  int sum = 0;
  for (int i = 0; i < m; i++) {
    sum += arr[i];
  }
  std::cout << sum << std::endl;
  return 0;
}
```