The given program can be optimized in the following steps:

1. Remove unnecessary header files: The program includes several unnecessary header files such as `<array>`, `<bits/stdc++.h>`, and `<string>`. These can be removed.

2. Avoid using `using namespace std;`: It is generally considered a good practice to avoid using `using namespace std;` directive in the global scope. Instead, use the `std::` prefix for the standard library classes and functions.

3. Use `vector<int>` instead of `int arr[n]`: Instead of using a fixed-size array `arr[n]`, we can use a `vector<int>` to dynamically store the input elements. This eliminates the need to specify a fixed size for the array.

4. Use `std::accumulate` instead of a loop: Instead of using a loop to calculate the sum of negative elements, we can use the `std::accumulate` algorithm from the `<numeric>` header to calculate the sum directly.

5. Eliminate unnecessary `abs` function: Since we are only interested in the absolute value of the sum, we can remove the `abs` function call and use the positive value of the sum directly.

Here is the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>

int main() {
  int n, m;
  std::cin >> n >> m;
  
  std::vector<int> arr(n);
  for (int i = 0; i < n; i++) {
    std::cin >> arr[i];
  }
  
  std::sort(arr.begin(), arr.end());
  
  int sum = std::accumulate(arr.begin(), arr.begin() + std::min(m, n), 0, 
                            [](int acc, int val) { return (val < 0) ? acc + val : acc; });
  
  std::cout << -sum << std::endl;
  
  return 0;
}
```