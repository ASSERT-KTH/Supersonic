Optimization step by step:

1. Remove unnecessary includes: The code includes unnecessary headers such as `<bits/stdc++.h>`, `<array>`, `<string>`, and `<vector>`. We can remove these includes to improve compilation time and reduce clutter.

2. Use `std::vector` instead of C-style array: The code currently uses a C-style array `arr` to store the input values. Instead, we can use a `std::vector` which provides dynamic resizing and better memory management.

3. Use `std::partial_sort` instead of `std::sort`: Since we only need the smallest `m` elements from the array, we can use `std::partial_sort` to sort only the first `m` elements. This will be more efficient than sorting the entire array.

4. Avoid unnecessary `abs` call: The code currently calls `abs(sum)` to get the absolute value of `sum`. However, since `sum` is guaranteed to be negative, we can simply negate it without calling `abs`.

Optimized code:

```cpp
#include <iostream>
#include <algorithm>
#include <vector>

int main() {
  int n, m;
  std::cin >> n >> m;
  
  std::vector<int> arr(n);
  for (int i = 0; i < n; i++) {
    std::cin >> arr[i];
  }
  
  std::partial_sort(arr.begin(), arr.begin() + m, arr.end());
  
  int sum = 0;
  for (int i = 0; i < m; i++) {
    sum += arr[i];
  }
  
  std::cout << -sum << std::endl;
  return 0;
}
```