Step 1: Remove unnecessary headers

The `<bits/stdc++.h>` header includes a large number of other headers, which can slow down compilation time. Since we only need a few specific headers, we should remove this line and include the necessary headers individually.

Step 2: Replace arrays with vectors

Using `std::array` or C-style arrays can be less efficient than using `std::vector` in terms of memory usage and performance. We can replace the array `arr` with a vector.

Step 3: Optimize the loop

The loop that calculates the sum can be optimized by breaking out of the loop as soon as a positive number is encountered. This can save unnecessary iterations and improve the running time.

Step 4: Use `unsigned int` instead of `int` for non-negative values

Since we are only interested in the absolute value of the sum, we can use `unsigned int` instead of `int` for the `sum` variable to save memory.

Here is the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>

int main() {
  int n, m;
  std::cin >> n >> m;

  std::vector<int> arr(n);
  for (int i = 0; i < n; i++) {
    std::cin >> arr[i];
  }

  std::sort(arr.begin(), arr.end());

  unsigned int sum = 0;
  for (int i = 0; i < m; i++) {
    if (arr[i] >= 0)
      break;

    sum += arr[i];
  }

  std::cout << abs(sum) << std::endl;

  return 0;
}
```