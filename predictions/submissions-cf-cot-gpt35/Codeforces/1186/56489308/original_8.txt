Explanation of the optimization steps:

1. Remove unnecessary headers: The `#include <bits/stdc++.h>` header is not necessary for this program. We can remove it.

2. Remove unnecessary typedefs: The typedefs `typedef long long ll` and `typedef pair<int, int> pi` are not used in the program. We can remove them.

3. Avoid unnecessary precision setting: The line `cout.precision(20);` sets the precision of the output stream to 20 decimal places. This is not necessary for the program. We can remove it.

4. Avoid unnecessary use of `ios_base::sync_with_stdio(false);` and `cin.tie(NULL);`: These lines are used to disable synchronization between C and C++ standard streams, but they are not necessary for this program. We can remove them.

5. Avoid unnecessary double comparison: The line `if (abs(floor(a[i]) - a[i]) < tol)` compares a double value with a tolerance. Instead, we can use the `std::remainder` function to calculate the remainder of the division and compare it with zero. This is a more accurate way to check if a double value is close to an integer. We can modify the condition to `if (std::remainder(a[i], 1.0) < tol)`.

6. Avoid unnecessary use of `llround`: The line `ll rem = llround(tot);` converts a double value to a long long value. Instead, we can directly cast the double value to a long long value using static_cast. We can modify the line to `ll rem = static_cast<ll>(tot);`.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <cmath>

int main() {
  int n;
  std::cin >> n;
  std::vector<double> a(n);
  double tol = 1.e-7;
  int ent = 0;
  double tot = 0.;
  for (int i = 0; i < n; i++) {
    std::cin >> a[i];
    if (std::remainder(a[i], 1.0) < tol) {
      ent++;
    }
    tot += std::floor(a[i]);
  }
  long long rem = static_cast<long long>(tot);
  std::cerr << "rem " << rem << std::endl;
  for (int i = 0; i < n; i++) {
    if (rem < 0 and std::remainder(a[i], 1.0) > tol) {
      std::cout << std::round(std::floor(a[i])) + 1 << "\n";
      rem++;
    } else {
      std::cout << std::round(std::floor(a[i])) << "\n";
    }
  }
}
```