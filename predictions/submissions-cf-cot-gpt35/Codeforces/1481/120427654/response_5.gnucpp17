#include <iostream>
#include <vector>
#include <map>
using std::cin;
using std::cout;
using std::vector;
using std::map;

const int NMAX = 100001;

vector<int> v[NMAX];
vector<int> lvl[NMAX];
vector<int> levelecu[NMAX];
vector<int> sol;
char cul[NMAX];

void DFS(int node, int p, int level) {
  lvl[level].push_back(node);
  for (auto x : v[node]) {
    if (x == p)
      continue;
    DFS(x, node, level + 1);
  }
}

int main() {
  int n, x, i;
  cin >> n >> x;

  for (i = 2; i <= n; i++) {
    cin >> x;
    v[x].push_back(i);
    v[i].push_back(x);
  }

  DFS(1, 0, 1);

  int a = x;
  int b = n - x;

  for (i = 1; i <= n; i++) {
    if (lvl[i].size() == 0)
      continue;
    levelecu[lvl[i].size()].push_back(i);
  }

  vector<int> alvl;

  for (auto& level : levelecu) {
    for (auto x : level) {
      int sz = lvl[x].size();
      if (sz <= a) {
        a -= sz;
        for (auto y : lvl[x])
          cul[y] = 'a';
      } else if (sz <= b) {
        b -= sz;
        for (auto y : lvl[x])
          cul[y] = 'b';
      } else {
        for (auto y : lvl[x]) {
          if (a > b && cul[y] != 'a' && cul[y] != 'b') {
            cul[y] = 'a';
            a--;
          } else if (b >= a && cul[y] != 'a' && cul[y] != 'b') {
            cul[y] = 'b';
            b--;
          }
        }
      }
      alvl.push_back(x);
    }
  }

  int depth = alvl.size();

  for (auto x : alvl) {
    for (auto y : lvl[x]) {
      if (cul[y] != 'a')
        cul[y] = 'b';
    }
  }

  cout << depth << "\n";
  for (int i = 1; i <= n; i++) {
    cout << cul[i];
  }

  return 0;
}