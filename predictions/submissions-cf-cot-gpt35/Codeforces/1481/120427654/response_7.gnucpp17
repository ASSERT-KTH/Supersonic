#include <iostream>
#include <vector>
#include <map>
using namespace std;

const int NMAX = 100001;

int dp[NMAX][NMAX];
int cnt[NMAX];
vector<int> lvl[NMAX];
vector<int> v[NMAX];
vector<int> levelecu[NMAX];
map<int, int> mp;
map<int, int> l;
int depth;
char cul[NMAX];

void DFS(int node, int p, int level) {
  lvl[level].push_back(node);
  depth = max(depth, level);
  for (auto x : v[node]) {
    if (x == p)
      continue;
    DFS(x, node, level + 1);
  }
}

int main() {
  int n, x;
  cin >> n >> x;
  int nodes_with_color_a = x;
  int nodes_with_color_b = n - x;
  for (int i = 2; i <= n; i++) {
    cin >> x;
    v[x].push_back(i);
    v[i].push_back(x);
  }
  for (int i = 1; i <= n; i++) {
    cnt[i] = v[i].size() - (i != 1);
  }
  DFS(1, 0, 1);
  for (int i = 1; i <= n; i++) {
    if (lvl[i].size() == 0)
      continue;
    levelecu[lvl[i].size()].push_back(i);
    mp[lvl[i].size()]++;
  }
  int c = 0;
  dp[0][0] = 1;
  for (auto x : mp) {
    ++c;
    int current_level = x.first;
    int frequency = x.second;
    for (int i = 0; i < current_level; i++) {
      l[i] = -1;
    }
    for (int i = 0; i <= nodes_with_color_a; i++) {
      if (dp[c - 1][i])
        l[i % current_level] = i;
      int rest = i % current_level;
      if (l[rest] != -1 && (i - l[rest]) / current_level <= frequency) {
        dp[c][i] = 1;
      }
    }
  }
  if (dp[c][nodes_with_color_a]) {
    int cant = nodes_with_color_a;
    vector<int> sol;
    while (c > 0) {
      int current_level = c;
      c--;
      while (!dp[c][cant]) {
        cant -= current_level;
        sol.push_back(current_level);
      }
    }
    vector<int> alvl;
    for (auto x : sol) {
      alvl.push_back(levelecu[x].back());
      levelecu[x].pop_back();
    }
    for (auto x : alvl) {
      for (auto y : lvl[x]) {
        cul[y] = 'a';
      }
    }
    cout << depth << '\n';
    for (int i = 1; i <= n; i++) {
      if (cul[i] != 'a')
        cul[i] = 'b';
      cout << cul[i];
    }
    return 0;
  }
  for (int i = 1; i <= n; i++) {
    if (lvl[i].size() == 0)
      continue;
    int sz = lvl[i].size();
    if (sz <= nodes_with_color_a) {
      nodes_with_color_a -= sz;
      for (auto x : lvl[i])
        cul[x] = 'a';
      continue;
    }
    if (sz <= nodes_with_color_b) {
      nodes_with_color_b -= sz;
      for (auto x : lvl[i])
        cul[x] = 'b';
      continue;
    }
    if (nodes_with_color_a > nodes_with_color_b) {
      for (auto x : lvl[i]) {
        if (cnt[x] > 0) {
          cul[x] = 'a';
          nodes_with_color_a--;
        }
      }
      for (auto x : lvl[i]) {
        if (nodes_with_color_a && cul[x] != 'a') {
          cul[x] = 'a';
          nodes_with_color_a--;
        }
      }
      for (auto x : lvl[i]) {
        if (cul[x] != 'a') {
          cul[x] = 'b';
          nodes_with_color_b--;
        }
      }
    } else {
      for (auto x : lvl[i]) {
        if (cnt[x] > 0) {
          cul[x] = 'b';
          nodes_with_color_b--;
        }
      }
      for (auto x : lvl[i]) {
        if (nodes_with_color_b && cul[x] != 'b') {
          cul[x] = 'b';
          nodes_with_color_b--;
        }
      }
      for (auto x : lvl[i]) {
        if (cul[x] != 'b') {
          cul[x] = 'a';
          nodes_with_color_a--;
        }
      }
    }
  }
  cout << depth + 1 << '\n';
  for (int i = 1; i <= n; i++) {
    cout << cul[i];
  }
  return 0;
}