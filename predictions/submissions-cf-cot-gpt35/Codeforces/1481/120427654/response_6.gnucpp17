#include <iostream>
#include <vector>
#include <map>
using namespace std;

const int NMAX = 100001;
int dp[NMAX];
int cnt[NMAX];
vector<int> lvl[NMAX];
vector<int> v[NMAX];
vector<int> levelecu[NMAX];
int depth;
char cul[NMAX];

void DFS(int node, int p, int level) {
  lvl[level].push_back(node);
  depth = max(depth, level);
  for (auto x : v[node]) {
    if (x == p)
      continue;
    DFS(x, node, level + 1);
  }
}

int main() {
  int n, x, i;
  cin >> n >> x;
  int a = x;
  int b = n - x;
  for (i = 2; i <= n; i++) {
    cin >> x;
    v[x].push_back(i);
    v[i].push_back(x);
  }
  for (i = 1; i <= n; i++) {
    cnt[i] = v[i].size() - (i != 1);
  }
  DFS(1, 0, 1);
  for (i = 1; i <= n; i++) {
    if (lvl[i].size() == 0)
      continue;
    levelecu[lvl[i].size()].push_back(i);
  }
  int c = 0;
  dp[0] = 1;
  for (i = 1; i <= n; i++) {
    if (lvl[i].size() == 0)
      continue;
    c++;
    int val = lvl[i].size();
    int freq = levelecu[val].size();
    for (int j = a; j >= 0; j--) {
      if (dp[j]) {
        int rest = j % val;
        if (j - rest + val * freq <= a) {
          dp[j - rest + val * freq] = 1;
        }
      }
    }
  }
  if (dp[a]) {
    int cant = a;
    vector<int> sol;
    for (i = depth; i >= 1; i--) {
      for (auto x : levelecu[i]) {
        if (cant >= i && dp[cant - i]) {
          cant -= i;
          sol.push_back(i);
        }
      }
    }
    for (auto x : sol) {
      for (auto y : lvl[levelecu[x].back()]) {
        cul[y] = 'a';
      }
      levelecu[x].pop_back();
    }
    cout << depth << "\n";
    for (int i = 1; i <= n; i++) {
      if (cul[i] != 'a')
        cul[i] = 'b';
      cout << cul[i];
    }
    return 0;
  }
  for (i = depth; i >= 1; i--) {
    for (auto x : levelecu[i]) {
      if (x == 1)
        continue;
      if (cnt[x] > 0 && a > 0) {
        cul[x] = 'a';
        a--;
      } else if (b > 0) {
        cul[x] = 'b';
        b--;
      }
    }
  }
  cout << depth + 1 << "\n";
  for (int i = 1; i <= n; i++) {
    cout << cul[i];
  }
  return 0;
}