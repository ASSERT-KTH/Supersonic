#include <iostream>
#include <vector>
#include <map>
using namespace std;

const int NMAX = 100001;

vector<int> v[NMAX];
vector<int> lvl[NMAX];
vector<int> levelecu[NMAX];
map<int, int> mp;

int depth = 0;
char cul[NMAX];

void DFS(int node, int p, int level) {
    lvl[level].push_back(node);
    depth = max(depth, level);
    for (auto x : v[node]) {
        if (x == p)
            continue;
        DFS(x, node, level + 1);
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n, x;
    cin >> n >> x;
    int a = x;
    int b = n - x;

    for (int i = 2; i <= n; i++) {
        cin >> x;
        v[x].push_back(i);
        v[i].push_back(x);
    }

    DFS(1, 0, 1);

    for (int i = 1; i <= n; i++) {
        if (lvl[i].size() == 0)
            continue;
        levelecu[lvl[i].size()].push_back(i);
        mp[lvl[i].size()]++;
    }

    vector<int> dp(a + 1, 0);
    dp[0] = 1;

    for (auto x : mp) {
        int val = x.first;
        int freq = x.second;
        for (int i = a; i >= 0; i--) {
            if (dp[i]) {
                for (int j = 1; j <= freq && i + j * val <= a; j++) {
                    dp[i + j * val] = 1;
                }
            }
        }
    }

    if (dp[a]) {
        int cant = a;
        vector<int> sol;
        for (auto it = mp.rbegin(); it != mp.rend(); ++it) {
            int r = it->first;
            while (!dp[cant]) {
                cant -= r;
                sol.push_back(r);
            }
        }

        vector<int> alvl;
        for (auto x : sol) {
            alvl.push_back(levelecu[x].back());
            levelecu[x].pop_back();
        }

        for (auto x : alvl) {
            for (auto y : lvl[x]) {
                cul[y] = 'a';
            }
        }

        cout << depth << "\n";
        for (int i = 1; i <= n; i++) {
            if (cul[i] != 'a')
                cul[i] = 'b';
            cout << cul[i];
        }

        return 0;
    }

    for (int i = 1; i <= n; i++) {
        if (lvl[i].size() == 0)
            continue;
        int sz = lvl[i].size();
        if (sz <= a) {
            a -= sz;
            for (auto x : lvl[i])
                cul[x] = 'a';
        } else if (sz <= b) {
            b -= sz;
            for (auto x : lvl[i])
                cul[x] = 'b';
        } else if (a > b) {
            for (auto x : lvl[i]) {
                if (v[x].size() > 0) {
                    cul[x] = 'a';
                    a--;
                }
            }
            for (auto x : lvl[i]) {
                if (a && cul[x] != 'a') {
                    cul[x] = 'a';
                    a--;
                }
            }
            for (auto x : lvl[i]) {
                if (cul[x] != 'a') {
                    cul[x] = 'b';
                    b--;
                }
            }
        } else {
            for (auto x : lvl[i]) {
                if (v[x].size() > 0) {
                    cul[x] = 'b';
                    b--;
                }
            }
            for (auto x : lvl[i]) {
                if (b && cul[x] != 'b') {
                    cul[x] = 'b';
                    b--;
                }
            }
            for (auto x : lvl[i]) {
                if (cul[x] != 'b') {
                    cul[x] = 'a';
                    a--;
                }
            }
        }
    }

    cout << depth + 1 << "\n";
    for (int i = 1; i <= n; i++) {
        cout << cul[i];
    }

    return 0;
}