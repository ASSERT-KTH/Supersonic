The given C/C++ program calculates the k-th number greater than x, such that the number has exactly p distinct prime factors. It does this by iterating through all numbers from x+1 to maxn (1.8e7), and for each number, calculating the number of distinct prime factors using the `fac()` function and then checking if it is equal to p.

To optimize the program, we can make the following modifications:

1. Remove the unnecessary `#include <bits/stdc++.h>`. This includes a large number of standard library headers, which can increase the compilation time and memory usage. Instead, include only the necessary headers, such as `<iostream>` and `<vector>`.

2. Change the type of `maxn` from `const int` to `const long long`. This allows us to store larger values, as `1.8e7` is outside the range of `int`.

3. Change the type of `pr` from `bool` to `vector<bool>`. This reduces the memory usage, as `vector<bool>` uses a bitset implementation which packs the boolean values tightly in memory.

4. Remove the unnecessary `memset(pr, true, sizeof(pr));` and `pr[0] = pr[1] = false;`. The `vector<bool>` constructor already initializes all elements to false.

5. Use `emplace_back()` instead of `push_back()` when adding elements to `pint`. This can improve performance by avoiding unnecessary copies or moves.

6. Use `cin` and `cout` instead of `scanf()` and `printf()`. Using `cin` and `cout` is generally faster and safer, and they can be used interchangeably with the standard input/output streams.

7. Remove the unnecessary `return 0;` statement at the end of the `main()` function. The `main()` function will automatically return 0 if no other return statement is specified.

Here is the optimized C/C++ program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const long long maxn = 18000000;
vector<bool> pr(maxn + 100);
vector<long long> pint, f;

void fac(int x) {
  f.clear();
  for (auto i : pint) {
    if (x % i != 0)
      continue;
    if (i * i > x)
      break;
    f.emplace_back(i);
    while (x % i == 0)
      x /= i;
  }
  if (x != 1)
    f.emplace_back(x);
}

int solve(int val) {
  int ret = 0;
  int lim = 1 << f.size();
  for (int j = 1; j < lim; j++) {
    int tp = 1, ct = 0;
    for (int i = 0; i < (int)f.size(); i++) {
      if ((j >> i) & 1) {
        tp *= f[i];
        ct++;
      }
    }
    ret += (ct % 2 ? 1 : -1) * val / tp;
  }
  return val - ret;
}

int main() {
  pr[0] = pr[1] = false;
  for (int i = 2; i <= maxn; i++)
    if (pr[i])
      for (int j = 2; j * i <= maxn; j++)
        pr[i * j] = false;
  for (int i = 2; i <= maxn; i++)
    if (pr[i])
      pint.emplace_back(i);
  int cas, x, p, k;
  cin >> cas;
  while (cas--) {
    cin >> x >> p >> k;
    fac(p);
    int a1 = solve(x), L = x + 1, R = maxn, ans = 0;
    while (L <= R) {
      int mid = (L + R) / 2;
      int val = solve(mid) - a1;
      if (val >= k)
        R = mid - 1, ans = mid;
      else
        L = mid + 1;
    }
    cout << ans << endl;
  }
}
```