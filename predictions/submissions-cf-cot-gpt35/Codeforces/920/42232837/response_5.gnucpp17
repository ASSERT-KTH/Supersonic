#include <iostream>
#include <vector>
#include <bitset>
using namespace std;

const int maxn = 1.8e7;
bitset<maxn + 100> pr;
vector<int> pint;

void sieve() {
  pr.set();
  pr[0] = pr[1] = 0;
  for (int i = 2; i * i <= maxn; i++) {
    if (pr[i]) {
      for (int j = i * i; j <= maxn; j += i)
        pr[j] = 0;
    }
  }
  for (int i = 2; i <= maxn; i++) {
    if (pr[i])
      pint.push_back(i);
  }
}

vector<int> factors(int x) {
  vector<int> f;
  for (int i : pint) {
    if (x % i != 0)
      continue;
    if (i * i > x)
      break;
    f.push_back(i);
    while (x % i == 0)
      x /= i;
  }
  if (x != 1)
    f.push_back(x);
  return f;
}

int solve(int x, vector<int>& f) {
  int ret = 0;
  int lim = 1 << f.size();
  for (int j = 1; j < lim; j++) {
    int tp = 1, ct = 0;
    for (int i = 0; i < (int)f.size(); i++) {
      if ((j >> i) & 1) {
        tp *= f[i];
        ct++;
      }
    }
    ret += (ct % 2 ? 1 : -1) * x / tp;
  }
  return x - ret;
}

int main() {
  sieve();
  int cas;
  cin >> cas;
  while (cas--) {
    int x, p, k;
    cin >> x >> p >> k;
    vector<int> f = factors(p);
    int a1 = solve(x, f);
    int L = x + 1, R = maxn, ans = 0;
    while (L <= R) {
      int mid = (L + R) / 2;
      int val = solve(mid, f) - a1;
      if (val >= k)
        R = mid - 1, ans = mid;
      else
        L = mid + 1;
    }
    cout << ans << endl;
  }
  return 0;
}