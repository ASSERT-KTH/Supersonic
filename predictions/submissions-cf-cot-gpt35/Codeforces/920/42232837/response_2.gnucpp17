#include <bits/stdc++.h>
using namespace std;
const int maxn = 1.8e7;
bool pr[maxn + 100];
int pint[maxn + 100];
void fac(int x, vector<int>& f) {
  f.clear();
  for (int i = 0; i < pint[0] && pint[i] * pint[i] <= x; i++) {
    if (x % pint[i] != 0)
      continue;
    f.push_back(pint[i]);
    while (x % pint[i] == 0)
      x /= pint[i];
  }
  if (x != 1)
    f.push_back(x);
}
int solve(int val, const vector<int>& f) {
  int ret = 0;
  int lim = 1 << f.size();
  for (int j = 1; j < lim; j++) {
    int tp = 1, ct = 0;
    for (int i = 0; i < (int)f.size(); i++) {
      if ((j >> i) & 1) {
        tp *= f[i];
        ct++;
      }
    }
    ret += (ct % 2 ? 1 : -1) * val / tp;
  }
  return val - ret;
}
int cas, x, p, k;
int main() {
  memset(pr, true, sizeof(pr));
  pr[0] = pr[1] = false;
  int cnt = 0;
  for (int i = 2; i <= maxn; i++) {
    if (pr[i])
      pint[cnt++] = i;
    for (int j = 0; j < cnt && pint[j] * i <= maxn; j++) {
      pr[pint[j] * i] = false;
      if (i % pint[j] == 0)
        break;
    }
  }
  cin >> cas;
  while (cas--) {
    scanf("%d%d%d", &x, &p, &k);
    vector<int> f;
    fac(p, f);
    int a1 = solve(x, f), L = x + 1, R = maxn, ans = 0;
    while (L <= R) {
      int mid = (L + R) / 2;
      int val = solve(mid, f) - a1;
      if (val >= k)
        R = mid - 1, ans = mid;
      else
        L = mid + 1;
    }
    printf("%d\n", ans);
  }
  return 0;
}