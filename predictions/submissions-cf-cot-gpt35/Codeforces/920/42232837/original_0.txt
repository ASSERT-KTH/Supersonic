To optimize the given program, we can make the following modifications:

1. Remove unnecessary includes:
   - The `#include <bits/stdc++.h>` includes a lot of standard library headers, which can slow down the compilation process. We can remove it and include only the necessary headers.

2. Use a more efficient prime sieve:
   - The current prime sieve implementation is not efficient. We can optimize it by using the Sieve of Eratosthenes algorithm, which has a time complexity of O(n log log n). This will reduce the time taken to generate the prime numbers.

3. Avoid unnecessary vector copies:
   - In the `fac` function, the `f` vector is cleared before each iteration of the loop. This is unnecessary and can be removed. Instead, we can initialize the `f` vector outside the loop and clear it only when necessary.

4. Use bit manipulation instead of division and modulus:
   - In the `solve` function, the inner loop uses division and modulus operations to check if a bit is set in a bitmask. This can be replaced with bit manipulation operations, which are generally faster.

5. Use a more efficient loop termination condition:
   - In the `solve` function, the outer loop terminates when `j < lim`. Instead of calculating `lim` in each iteration, we can calculate it once and store it in a variable.

6. Use integer division instead of floating-point division:
   - In the `solve` function, the line `ret += (ct % 2 ? 1 : -1) * val / tp;` performs a floating-point division. We can use integer division instead, since we are only interested in the quotient.

7. Use `cin` and `cout` instead of `scanf` and `printf`:
   - In the `main` function, the program uses `scanf` and `printf` for input and output. Using `cin` and `cout` from the `<iostream>` header is generally faster and more convenient.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

const int maxn = 1.8e7;
bool pr[maxn + 100];
vector<int> pint, f;

void sieve() {
  memset(pr, true, sizeof(pr));
  pr[0] = pr[1] = false;
  for (int i = 2; i * i <= maxn; i++) {
    if (pr[i]) {
      for (int j = i * i; j <= maxn; j += i) {
        pr[j] = false;
      }
    }
  }
  for (int i = 2; i <= maxn; i++) {
    if (pr[i]) {
      pint.push_back(i);
    }
  }
}

void fac(int x) {
  f.clear();
  for (auto i : pint) {
    if (x % i != 0) {
      continue;
    }
    if (i * i > x) {
      break;
    }
    f.push_back(i);
    while (x % i == 0) {
      x /= i;
    }
  }
  if (x != 1) {
    f.push_back(x);
  }
}

int solve(int val) {
  int ret = 0;
  int lim = 1 << f.size();
  for (int j = 1; j < lim; j++) {
    int tp = 1, ct = 0;
    for (int i = 0, bit = j; bit != 0; i++, bit >>= 1) {
      if (bit & 1) {
        tp *= f[i];
        ct++;
      }
    }
    ret += (ct % 2 ? 1 : -1) * (val / tp);
  }
  return val - ret;
}

int main() {
  sieve();
  int cas, x, p, k;
  cin >> cas;
  while (cas--) {
    cin >> x >> p >> k;
    fac(p);
    int a1 = solve(x), L = x + 1, R = maxn, ans = 0;
    while (L <= R) {
      int mid = (L + R) / 2;
      int val = solve(mid) - a1;
      if (val >= k) {
        R = mid - 1;
        ans = mid;
      } else {
        L = mid + 1;
      }
    }
    cout << ans << endl;
  }
  return 0;
}
```