#include <bits/stdc++.h>
using namespace std;
const int maxn = 1.8e7;
bool pr[maxn + 100];

int solve(int val, vector<int>& pint) {
  int ret = 0;
  int lim = 1 << pint.size();
  for (int j = 1; j < lim; j++) {
    int tp = 1, ct = 0;
    for (int i = 0; i < (int)pint.size(); i++) {
      if ((j >> i) & 1) {
        tp *= pint[i];
        ct++;
      }
    }
    ret += (ct % 2 ? 1 : -1) * val / tp;
  }
  return val - ret;
}

int main() {
  memset(pr, true, sizeof(pr));
  pr[0] = pr[1] = false;

  for (int i = 2; i * i <= maxn; i++) {
    if (pr[i]) {
      for (int j = i * i; j <= maxn; j += i) {
        pr[j] = false;
      }
    }
  }

  vector<int> pint;
  for (int i = 2; i <= maxn; i++) {
    if (pr[i]) {
      pint.push_back(i);
    }
  }

  int cas, x, p, k;
  scanf("%d", &cas);
  while (cas--) {
    scanf("%d%d%d", &x, &p, &k);
    
    vector<int> f;
    for (auto i : pint) {
      if (p % i != 0)
        continue;
      if (i * i > p)
        break;
      f.push_back(i);
      while (p % i == 0)
        p /= i;
    }
    if (p != 1)
      f.push_back(p);

    int a1 = solve(x, f), L = x + 1, R = maxn, ans = 0;
    while (L <= R) {
      int mid = (L + R) / 2;
      int val = solve(mid, f) - a1;
      if (val >= k)
        R = mid - 1, ans = mid;
      else
        L = mid + 1;
    }
    printf("%d\n", ans);
  }
  return 0;
}