The given program is finding the k-th number greater than x such that the number has exactly p distinct prime factors.

To optimize the program, we can make the following changes:

1. Remove the unnecessary `#include <bits/stdc++.h>` and `using namespace std;` statements. These statements include unnecessary headers and pollute the global namespace.

2. Change the `const int maxn = 1.8e7;` to a smaller value. Since the program is finding the k-th number greater than x, we can limit the search space to a smaller range.

3. Remove the unused `pr` array and `memset(pr, true, sizeof(pr));` statement. The `pr` array is not used in the program.

4. Remove the unnecessary check `if (pr[i])` in the second for loop. The prime numbers have already been filtered in the first for loop.

5. Replace the `cin` and `scanf` with `std::cin` and `std::scanf` respectively. This is to avoid using the `using namespace std;` statement and explicitly specify the namespace.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

std::vector<long long> pint, f;

void fac(int x) {
  f.clear();
  for (auto i : pint) {
    if (x % i != 0)
      continue;
    if (i * i > x)
      break;
    f.push_back(i);
    while (x % i == 0)
      x /= i;
  }
  if (x != 1)
    f.push_back(x);
}

int solve(int val) {
  int ret = 0;
  int lim = 1 << f.size();
  for (int j = 1; j < lim; j++) {
    int tp = 1, ct = 0;
    for (int i = 0; i < (int)f.size(); i++) {
      if ((j >> i) & 1) {
        tp *= f[i];
        ct++;
      }
    }
    ret += (ct % 2 ? 1 : -1) * val / tp;
  }
  return val - ret;
}

int main() {
  const int maxn = 100000;
  
  for (int i = 2; i <= maxn; i++) {
    bool is_prime = true;
    for (int j = 2; j * j <= i; j++) {
      if (i % j == 0) {
        is_prime = false;
        break;
      }
    }
    if (is_prime)
      pint.push_back(i);
  }

  int cas, x, p, k;
  std::cin >> cas;
  while (cas--) {
    std::scanf("%d%d%d", &x, &p, &k);
    fac(p);
    int a1 = solve(x), L = x + 1, R = maxn, ans = 0;
    while (L <= R) {
      int mid = (L + R) / 2;
      int val = solve(mid) - a1;
      if (val >= k)
        R = mid - 1, ans = mid;
      else
        L = mid + 1;
    }
    std::printf("%d\n", ans);
  }
  return 0;
}
```