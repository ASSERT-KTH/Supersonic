To optimize the given program, we can make the following modifications:

1. Remove unnecessary includes: The program includes the `<bits/stdc++.h>` header, which is not a standard C++ header and includes a large number of unnecessary headers. We can remove it and only include the necessary headers.

2. Use `bool` array instead of `memset`: The program uses `memset` to initialize the `pr` array, which is unnecessary. We can directly declare `pr` as a `bool` array and initialize it to `true`. This avoids the overhead of calling `memset`.

3. Use a more efficient prime sieve: The program uses a simple sieve algorithm to generate prime numbers. However, this algorithm is not efficient for large values of `maxn`. We can use the Sieve of Eratosthenes algorithm, which has a time complexity of O(n log log n), instead of O(n^2).

4. Use `cin` and `cout` instead of `scanf` and `printf`: The program uses `scanf` and `printf` for input and output, respectively. However, `cin` and `cout` are generally faster and safer to use. We can replace `scanf` and `printf` with `cin` and `cout`, respectively.

5. Use bitwise operations instead of division and modulo: The program uses division and modulo operations to check if a number is divisible by another number. However, bitwise operations can be faster for checking divisibility by powers of 2. We can replace `x % i != 0` with `x & (i - 1) != 0`, and `x % i == 0` with `x & (i - 1) == 0`.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const int maxn = 1.8e7;
vector<bool> pr(maxn + 100, true);
vector<long long> pint, f;

void fac(int x) {
  f.clear();
  for (auto i : pint) {
    if (x & (i - 1) != 0)
      continue;
    if (i * i > x)
      break;
    f.push_back(i);
    while (x & (i - 1) == 0)
      x /= i;
  }
  if (x != 1)
    f.push_back(x);
}

int solve(int val) {
  int ret = 0;
  int lim = 1 << f.size();
  for (int j = 1; j < lim; j++) {
    int tp = 1, ct = 0;
    for (int i = 0; i < (int)f.size(); i++) {
      if ((j >> i) & 1) {
        tp *= f[i];
        ct++;
      }
    }
    ret += (ct % 2 ? 1 : -1) * val / tp;
  }
  return val - ret;
}

int main() {
  pr[0] = pr[1] = false;
  for (int i = 2; i <= maxn; i++)
    if (pr[i])
      for (int j = 2; j * i <= maxn; j++)
        pr[i * j] = false;
  for (int i = 2; i <= maxn; i++)
    if (pr[i])
      pint.push_back(i);

  int cas, x, p, k;
  cin >> cas;
  while (cas--) {
    cin >> x >> p >> k;
    fac(p);
    int a1 = solve(x), L = x + 1, R = maxn, ans = 0;
    while (L <= R) {
      int mid = (L + R) / 2;
      int val = solve(mid) - a1;
      if (val >= k)
        R = mid - 1, ans = mid;
      else
        L = mid + 1;
    }
    cout << ans << endl;
  }
  return 0;
}
```