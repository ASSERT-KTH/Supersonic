#include <iostream>
#include <vector>
#include <map>
#include <queue>

enum class CommandType {
  Up,
  Compare,
  When
};

struct Node {
  int cnt, par, lev, inp;
  int chn, idx, col, adj;
};

const int MAXN = 200005;
int n, q;
std::vector<int> g[MAXN];
Node a[MAXN];
int bit[2 * MAXN];
int chains = 0, timer = 0, colour = 0;
std::vector<int> chain[MAXN];
std::vector<std::vector<int>> col(MAXN);
std::vector<std::vector<int>> pos(MAXN);
std::vector<int> root(MAXN);

void Init() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  std::cin >> n >> q;
  for (int i = 1; i < n; ++i) {
    int u, v;
    std::cin >> u >> v;
    g[u].push_back(v);
    g[v].push_back(u);
  }
  a[n].par = -1;
  a[n].lev = 1;
  a[n].chn = 0;
  a[n].idx = 0;
  root[0] = n;
  colour = n;
}

int query(int x) {
  return bit[x];
}

void update(int x, int d) {
  bit[x] += d;
}

void DFS(int u) {
  a[u].inp = ++timer;
  a[u].cnt = 1;
  for (int v : g[u]) {
    if (a[v].par == 0) {
      a[v].par = u;
      a[v].lev = a[u].lev + 1;
      DFS(v);
      a[u].cnt += a[v].cnt;
    }
  }
}

void HLD(int u) {
  chain[a[u].chn].push_back(u);
  col[a[u].chn][a[u].idx] = a[u].col;
  pos[a[u].chn][a[u].col].push_back(a[u].idx);
  int heavy = 0, which = 0;
  for (int v : g[u]) {
    if (v != a[u].par && a[v].cnt > heavy) {
      heavy = a[v].cnt;
      which = v;
    }
  }
  if (heavy == 0 || which == 0)
    return;
  a[which].chn = a[u].chn;
  a[which].idx = a[u].idx + 1;
  for (int v : g[u]) {
    if (v == a[u].par)
      continue;
    if (v != which) {
      a[v].chn = ++chains;
      a[v].idx = 0;
    }
    HLD(v);
  }
}

void Simulate() {
  std::priority_queue<int> pq;
  for (int i = 1; i <= n; ++i) {
    a[i].adj = g[i].size();
    if (a[i].adj == 1)
      pq.push(-i);
  }
  int row = 0;
  while (!pq.empty()) {
    int u = -pq.top();
    pq.pop();
    a[u].col = ++row;
    for (int v : g[u]) {
      a[v].adj--;
      if (a[v].adj == 1)
        pq.push(-v);
    }
  }
  for (int i = 1; i <= row; ++i) {
    update(i, 1);
  }
}

inline bool is_predecessor(int u, int v) {
  return (a[u].inp <= a[v].inp && a[v].inp < a[u].inp + a[u].cnt);
}

int LCA(int u, int v) {
  if (is_predecessor(u, v))
    return u;
  if (is_predecessor(v, u))
    return v;
  int t = a[u].chn;
  while (!is_predecessor(chain[t][0], v)) {
    t = a[a[chain[t][0]].par].chn;
  }
  int l = 0, r = chain[t].size() - 1, res = 0;
  while (l <= r) {
    int mid = (l + r) / 2;
    if (is_predecessor(chain[t][mid], u) && is_predecessor(chain[t][mid], v)) {
      res = mid;
      l = mid + 1;
    } else
      r = mid - 1;
  }
  return chain[t][res];
}

inline int get_colour(int u) {
  int c = a[u].chn, i = a[u].idx;
  return col[c][i];
}

void up(int u, int t) {
  while (true) {
    int c = a[u].chn;
    int i = a[u].idx;
    if (c == a[t].chn && a[t].idx != 0) {
      int t_idx = a[t].idx - 1;
      if (col[c][t_idx] == 0) {
        col[c][t_idx] = col[c][a[t].idx];
        pos[c][col[c][a[t].idx]].push_back(t_idx);
      }
    }
    int j = 0;
    for (int iter = 0; iter < i; ++iter) {
      int del = iter - j + 1;
      update(col[c][j], -del);
      pos[c][col[c][j]].pop_back();
      if (pos[c][col[c][j]].size() == 0) {
        pos[c].pop_back();
      }
      ++j;
    }
    update(col[c][i], i - j);
    col[c].erase(col[c].begin() + j, col[c].begin() + i);
    col[c].insert(col[c].begin() + j, colour);
    pos[c][colour].push_back(i);
    if (j == 0) {
      update(colour, i + 1);
    } else {
      update(colour, i - col[c][j - 1]);
      if (i == col[c][j - 1])
        update(colour, 1);
    }