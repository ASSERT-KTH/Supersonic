#include <iostream>
#include <vector>
#include <map>
#include <set>

using namespace std;

const int MAXN = 200005;

struct node {
    int cnt, par, lev, inp;
    int chn, idx, col, adj;
};

void Init(int& n, int& q, vector<int>* g, node* a, int* root, int* bit, vector<int>* chain, map<int, int>* col, map<int, set<int>>* pos) {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cin >> n >> q;
    g = new vector<int>[n + 1];
    for (int i = 1; i < n; ++i) {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    a[n].par = -1;
    a[n].lev = 1;
    a[n].chn = 0;
    a[n].idx = 0;
    root[0] = n;
}

int query(int x, int* bit) {
    int res = 0;
    for (int i = x; i >= 1; i -= i & (-i)) {
        res += bit[i];
    }
    return res;
}

void update(int x, int d, int* bit) {
    for (int i = x; i < 2 * MAXN; i += i & (-i)) {
        bit[i] += d;
    }
}

void DFS(int u, node* a, vector<int>* g, int& timer) {
    a[u].inp = ++timer;
    a[u].cnt = 1;
    for (int v : g[u]) {
        if (a[v].par == 0) {
            a[v].par = u;
            a[v].lev = a[u].lev + 1;
            DFS(v, a, g, timer);
            a[u].cnt += a[v].cnt;
        }
    }
}

void HLD(int u, node* a, vector<int>* g, vector<int>* chain, map<int, int>* col, map<int, set<int>>* pos, int& chains) {
    chain[a[u].chn].push_back(u);
    (*col)[a[u].chn][a[u].idx] = a[u].col;
    (*pos)[a[u].chn][a[u].col].insert(a[u].idx);
    int heavy = 0, which = 0;
    for (int v : g[u]) {
        if (v != a[u].par and a[v].cnt > heavy) {
            heavy = a[v].cnt;
            which = v;
        }
    }
    if (heavy == 0 or which == 0)
        return;
    a[which].chn = a[u].chn;
    a[which].idx = a[u].idx + 1;
    for (int v : g[u]) {
        if (v == a[u].par)
            continue;
        if (v != which) {
            a[v].chn = ++chains;
            a[v].idx = 0;
        }
        HLD(v, a, g, chain, col, pos, chains);
    }
}

void Simulate(int n, node* a, vector<int>* g, int* root, int* bit, map<int, int>* col) {
    int chains = 0, timer = 0, colour = 0;
    vector<int>* chain = new vector<int>[n + 1];
    map<int, int>* col = new map<int, int>[n + 1];
    map<int, set<int>>* pos = new map<int, set<int>>[n + 1];

    priority_queue<int> pq;
    for (int i = 1; i <= n; ++i) {
        a[i].adj = g[i].size();
        if (a[i].adj == 1)
            pq.push(-i);
    }
    int row = 0;
    while (!pq.empty()) {
        int u = -pq.top();
        pq.pop();
        a[u].col = ++row;
        for (int v : g[u]) {
            a[v].adj--;
            if (a[v].adj == 1)
                pq.push(-v);
        }
    }
    for (int i = 1; i <= row; ++i) {
        update(i, 1, bit);
    }

    DFS(n, a, g, timer);
    HLD(n, a, g, chain, col, pos, chains);

    for (int i = 1; i <= q; ++i) {
        string s;
        cin >> s;
        if (s == "up") {
            int u;
            cin >> u;
            int t = LCA(u, root[colour - n], a, chain);
            colour++;
            if (u != t)
                up(u, t, a, chain, col, pos, bit);
            if (root[colour - n - 1] != t)
                up(root[colour - n - 1], t, a, chain, col, pos, bit);
            root[colour - n] = u;
        }
        if (s == "compare") {
            int u, v;
            cin >> u >> v;
            if (when(u, a, chain, col, pos, bit) < when(v, a, chain, col, pos, bit)) {
                cout << u << endl;
            } else {
                cout << v << endl;
            }
        }
        if (s == "when") {
            int u;
            cin >> u;
            cout << when(u, a, chain, col, pos, bit) << endl;
        }
    }

    delete[] chain;
    delete[] col;
    delete[] pos;
}

int main() {
    int n, q;
    vector<int>* g = nullptr;
    node* a = new node[MAXN];
    int* root = new int[MAXN];
    int* bit = new int[2 * MAXN];

    Init(n, q, g, a, root, bit, chain, col, pos);
    Simulate(n, a, g, root, bit, col);

    delete[] g;
    delete[] a;
    delete[] root;
    delete[] bit;

    return 0;
}