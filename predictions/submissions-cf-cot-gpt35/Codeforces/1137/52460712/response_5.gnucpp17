#include <iostream>
#include <vector>
#include <algorithm>

const int M = 100000 + 10;
const int N = 50 * M;

int n, m, d;
bool open[M][50 + 5];
std::vector<int> e[N], escc[N];
int nscc, idscc[N], dfn[N], lowlink[N], clo;
int stk[N], top;
int ops[N];
int dp[N];
bool vis[N];

void dfscc(int k) {
  dfn[k] = lowlink[k] = ++clo;
  stk[top++] = k;

  for (int i = 0; i < e[k].size(); ++i) {
    int p = e[k][i];
    if (dfn[p] == 0) {
      dfscc(p);
      lowlink[k] = std::min(lowlink[k], lowlink[p]);
    } else if (dfn[p] > 0) {
      lowlink[k] = std::min(lowlink[k], dfn[p]);
    }
  }

  if (lowlink[k] == dfn[k]) {
    ++nscc;
    while (top > 0 && stk[top - 1] != k) {
      instk[stk[top - 1]] = false;
      idscc[stk[top - 1]] = nscc;
      --top;
    }
    instk[k] = false;
    idscc[k] = nscc;
    --top;
  }
}

void getSCC(int n) {
  for (int k = 1; k <= n; ++k) {
    if (dfn[k] == 0) {
      dfscc(k);
    }
  }

  for (int k = 1; k <= n; ++k) {
    for (int i = 0; i < e[k].size(); ++i) {
      int p = e[k][i];
      if (idscc[k] != idscc[p]) {
        escc[idscc[k]].push_back(idscc[p]);
      }
    }
  }
}

int main() {
  std::cin >> n >> m >> d;

  for (int i = 1; i <= m; ++i) {
    int u, v;
    std::cin >> u >> v;
    for (int j = 1; j <= d; ++j) {
      e[(u - 1) * d + j].push_back((v - 1) * d + j % d + 1);
    }
  }

  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= d; ++j) {
      char c;
      std::cin >> c;
      open[i][j] = c - '0';
    }
  }

  getSCC(n * d);

  for (int i = 1; i <= n; ++i) {
    std::vector<int> tmp;
    for (int j = 1; j <= d; ++j) {
      if (open[i][j]) {
        tmp.push_back(idscc[(i - 1) * d + j]);
      }
    }
    std::sort(tmp.begin(), tmp.end());
    tmp.erase(std::unique(tmp.begin(), tmp.end()), tmp.end());
    for (int j = 0; j < tmp.size(); ++j) {
      ++ops[tmp[j]];
    }
  }

  std::cout << dfsdp(idscc[(1 - 1) * d + 1]) << std::endl;

  return 0;
}