#include <algorithm>
#include <bitset>
#include <cassert>
#include <cstdio>
#include <cstring>
using namespace std;

const int M = 100000 + 10;
const int N = 50 * M;
const int MAX_N = 50 * M + 1;
const int MAX_D = 51;

bitset<MAX_N> open[MAX_N];
int e[MAX_N][MAX_D];
int escc[MAX_N][MAX_D];
int nscc, idscc[MAX_N], dfn[MAX_N], lowlink[MAX_N], clo;
int stk[MAX_N], top;
int dp[MAX_N];
int ops[MAX_N];
bool vis[MAX_N];

inline void dn(int& x, int y) {
  if (y < x)
    x = y;
}

void dfscc(int k) {
  dfn[k] = lowlink[k] = ++clo;
  stk[top++] = k;
  
  for (int p = 1; p <= e[k][0]; ++p) {
    int v = e[k][p];
    if (!dfn[v]) {
      dfscc(v);
      dn(lowlink[k], lowlink[v]);
    } else if (!idscc[v]) {
      dn(lowlink[k], dfn[v]);
    }
  }
  
  if (lowlink[k] == dfn[k]) {
    ++nscc;
    int v;
    do {
      v = stk[--top];
      idscc[v] = nscc;
    } while (v != k);
  }
}

void getSCC(int n) {
  for (int k = 1; k <= n; ++k) {
    if (!dfn[k]) {
      dfscc(k);
    }
  }
  
  for (int k = 1; k <= n; ++k) {
    for (int p = 1; p <= e[k][0]; ++p) {
      int v = e[k][p];
      if (idscc[k] != idscc[v]) {
        escc[idscc[k]][++escc[idscc[k]][0]] = idscc[v];
      }
    }
  }
}

int dfsdp(int k) {
  if (vis[k])
    return dp[k];

  vis[k] = true;
  for (int p = 1; p <= escc[k][0]; ++p) {
    int v = escc[k][p];
    dp[k] = max(dp[k], dfsdp(v));
  }
  dp[k] += ops[k];

  return dp[k];
}

int main() {
  char str[M];
  int n, m, d;
  scanf("%d%d%d", &n, &m, &d);
  
  for (int i = 1; i <= m; ++i) {
    int u, v;
    scanf("%d%d", &u, &v);
    e[u][++e[u][0]] = v;
  }
  
  for (int i = 1; i <= n; ++i) {
    scanf("%s", str);
    for (int j = 0; j < d; ++j) {
      open[i].set(j, str[j] - '0');
    }
  }
  
  getSCC(n * d);
  
  for (int i = 1; i <= n; ++i) {
    int tmp[MAX_D], ntmp = 0;
    for (int j = 0; j < d; ++j) {
      if (open[i].test(j)) {
        tmp[ntmp++] = idscc[i * d + j + 1];
      }
    }
    
    if (ntmp > 1) {
      sort(tmp, tmp + ntmp);
      ntmp = unique(tmp, tmp + ntmp) - tmp;
    }
    
    for (int j = 0; j < ntmp; ++j) {
      ++ops[tmp[j]];
    }
  }
  
  printf("%d", dfsdp(idscc[1]));

  return 0;
}