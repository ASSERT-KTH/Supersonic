#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;

const int M = 100010, N = 50 * M;

constexpr void dn(int &x, int y) {
  if (y < x)
    x = y;
}

int n, m, d;
bool open[M][55];
int id(int u, int t) { return (u - 1) * d + t; }
int e[N], ne[N], h[N], idx;
int nscc, idscc[N], dfn[N], lowlink[N], clo;
int stk[N], top;
bool instk[N];

void add_edge(int u, int v) {
  e[idx] = v;
  ne[idx] = h[u];
  h[u] = idx++;
}

void dfscc(int k) {
  dfn[k] = lowlink[k] = ++clo;
  stk[top++] = k;
  instk[k] = true;
  for (int i = h[k]; i != -1; i = ne[i]) {
    int p = e[i];
    if (!dfn[p]) {
      dfscc(p);
      dn(lowlink[k], lowlink[p]);
    } else if (instk[p]) {
      dn(lowlink[k], dfn[p]);
    }
  }
  if (lowlink[k] == dfn[k]) {
    ++nscc;
    while (top && stk[top - 1] != k) {
      instk[stk[top - 1]] = false;
      idscc[stk[--top]] = nscc;
    }
    instk[stk[--top]] = false;
    idscc[k] = nscc;
  }
}

void getSCC(int n) {
  memset(dfn, 0, sizeof(dfn));
  memset(instk, 0, sizeof(instk));
  clo = top = nscc = 0;
  for (int k = 1; k <= n; ++k) {
    if (!dfn[k]) {
      dfscc(k);
    }
  }
}

int ops[N];
int dp[N];
bool vis[N];

int dfsdp(int k) {
  if (vis[k]) {
    return dp[k];
  }
  for (int i = h[k]; i != -1; i = ne[i]) {
    int p = e[i];
    dp[k] = max(dp[k], dfsdp(p));
  }
  dp[k] += ops[k];
  vis[k] = true;
  return dp[k];
}

int main() {
  scanf("%d%d%d", &n, &m, &d);
  
  memset(h, -1, sizeof(h));
  idx = 0;
  
  for (int i = 1; i <= m; ++i) {
    int u, v;
    scanf("%d%d", &u, &v);
    for (int j = 1; j <= d; ++j) {
      add_edge(id(u, j), id(v, j % d + 1));
    }
  }
  
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= d; ++j) {
      char c;
      scanf(" %c", &c);
      open[i][j] = c - '0';
    }
  }
  
  getSCC(n * d);
  
  for (int i = 1; i <= n; ++i) {
    int tmp[55], ntmp = 0;
    for (int j = 1; j <= d; ++j) {
      if (open[i][j]) {
        tmp[ntmp++] = idscc[id(i, j)];
      }
    }
    sort(tmp, tmp + ntmp);
    ntmp = unique(tmp, tmp + ntmp) - tmp;
    for (int j = 0; j < ntmp; ++j) {
      ++ops[tmp[j]];
    }
  }
  
  printf("%d", dfsdp(idscc[id(1, 1)]));
  
  return 0;
}