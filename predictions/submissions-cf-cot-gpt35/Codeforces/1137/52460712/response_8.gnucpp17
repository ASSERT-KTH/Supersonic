#include <cstdio>

const int M = 100000 + 10;
const int N = 50 * M;

inline void dn(int& x, int y) {
  if (y < x)
    x = y;
}

int n, m, d;
bool open[M][50 + 5];
int id(int u, int t) { return (u - 1) * d + t; }

int e[N][N], escc[N][N];
int nscc, idscc[N], dfn[N], lowlink[N], clo;
int stk[N], top;
bool instk[N];

void dfscc(int k) {
  dfn[k] = lowlink[k] = ++clo;
  instk[stk[top++] = k] = true;
  for (int p = 0; p < top; ++p) {
    if (!dfn[p])
      dfscc(p), dn(lowlink[k], lowlink[p]);
    else if (instk[p])
      dn(lowlink[k], dfn[p]);
  }
  if (lowlink[k] == dfn[k]) {
    ++nscc;
    while (top && stk[top] != k) {
      instk[stk[--top]] = false;
      idscc[stk[top]] = nscc;
    }
  }
}

void getSCC(int n) {
  for (int k = 1; k <= n; ++k)
    if (!dfn[k])
      dfscc(k);
  for (int k = 1; k <= n; ++k) {
    for (int p = 0; p < top; ++p) {
      if (idscc[k] != idscc[p])
        escc[idscc[k]][p] = idscc[p];
    }
  }
}

int ops[N];
int vis[N];
int dp[N];

int dfsdp(int k) {
  if (vis[k])
    return dp[k];
  for (int p = 0; p < top; ++p)
    dp[k] = max(dp[k], dfsdp(p));
  dp[k] += ops[k];
  vis[k] = 1;
  return dp[k];
}

int main() {
  scanf("%d%d%d", &n, &m, &d);
  for (int i = 1; i <= m; ++i) {
    int u, v;
    scanf("%d%d", &u, &v);
    for (int j = 1; j <= d; ++j)
      e[id(u, j)][id(v, j % d + 1)] = 1;
  }
  for (int i = 1; i <= n; ++i)
    for (int j = 1; j <= d; ++j)
      open[i][j] = getchar() - '0';
  getSCC(n * d);
  for (int i = 1; i <= n; ++i) {
    int tmp[50], ntmp = 0;
    for (int j = 1; j <= d; ++j)
      if (open[i][j])
        tmp[ntmp++] = idscc[id(i, j)];
    sort(tmp, tmp + ntmp);
    ntmp = unique(tmp, tmp + ntmp) - tmp;
    for (int j = 0; j < ntmp; ++j)
      ++ops[tmp[j]];
  }
  printf("%d", dfsdp(idscc[id(1, 1)]));
  return 0;
}