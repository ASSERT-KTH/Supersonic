#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  int tc = 1, i, j, k;
  while (tc--) {
    int a, b;
    cin >> a >> b;
    vector<pair<int, int>> v(a);
    vector<pair<int, int>> dif(a);
    vector<int> pre(a);
    vector<int> suf(a);
    vector<vector<int>> del(a + 1);

    for (i = 0; i < a; i++) {
      cin >> v[i].first >> v[i].second;
      dif[i] = {v[i].second - v[i].first, i};
    }

    sort(dif.begin(), dif.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
      return a.first < b.first;
    });

    pre[0] = v[dif[0].second].first;
    for (i = 1; i < a; i++) {
      pre[i] = pre[i - 1] + v[dif[i].second].first;
    }

    suf[a - 1] = v[dif[a - 1].second].second;
    for (i = a - 2; i >= 0; i--) {
      suf[i] = suf[i + 1] + v[dif[i].second].second;
    }

    for (i = 0; i < b; i++) {
      int x, y;
      cin >> x >> y;
      int k = v[x - 1].second - v[x - 1].first;
      int m = v[y - 1].second - v[y - 1].first;
      if (m <= k) {
        del[x].push_back(v[x - 1].first + v[y - 1].second);
        del[y].push_back(v[x - 1].first + v[y - 1].second);
      } else {
        del[x].push_back(v[x - 1].second + v[y - 1].first);
        del[y].push_back(v[x - 1].second + v[y - 1].first);
      }

      if (del[x].size() > 1) {
        del[x].back() += del[x][del[x].size() - 2];
      }

      if (del[y].size() > 1) {
        del[y].back() += del[y][del[y].size() - 2];
      }
    }

    for (i = 0; i < a; i++) {
      int ans = 0;
      int k = v[i].second - v[i].first;
      auto it = upper_bound(dif.begin(), dif.end(), make_pair(k, numeric_limits<int>::max()));
      int idx = it - dif.begin();

      if (idx - 1 >= 0) {
        ans = suf[idx - 1] + ((idx - 1) * v[i].first) - v[i].second;
      }

      if (idx < a) {
        ans += pre[idx] + (a - idx) * v[i].second;
      }

      if (!del[i + 1].empty()) {
        ans -= del[i + 1].back();
      }

      cout << ans << endl;
    }
  }
}