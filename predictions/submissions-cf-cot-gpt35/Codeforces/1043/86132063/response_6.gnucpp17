#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int tc = 1, i, j, k;
  while (tc--) {
    int a, b;
    cin >> a >> b;
    vector<pair<int, int>> dif;
    vector<int> pre, suf;
    vector<pair<int, int>> v;
    int x, y;
    dif.reserve(a);
    pre.reserve(a);
    suf.reserve(a);
    v.reserve(a);
    for (i = 0; i < a; i++) {
      cin >> x >> y;
      v.emplace_back(x, y);
      dif.emplace_back(y - x, i);
    }
    sort(dif.begin(), dif.end());
    suf.push_back(v[dif[0].second].second);
    for (i = 1; i < a; i++) {
      suf.push_back(suf[i - 1] + v[dif[i].second].second);
    }
    pre.push_back(v[dif[a - 1].second].first);
    for (i = a - 2; i >= 0; i--) {
      pre.push_back(pre[a - i - 2] + v[dif[i].second].first);
    }
    reverse(pre.begin(), pre.end());
    vector<vector<int>> del(a + 1);
    del.reserve(a + 1);
    for (i = 0; i < b; i++) {
      cin >> x >> y;
      k = v[x - 1].second - v[x - 1].first;
      int m = v[y - 1].second - v[y - 1].first;
      if (m <= k) {
        del[x].emplace_back(v[x - 1].first + v[y - 1].second);
        del[y].emplace_back(v[x - 1].first + v[y - 1].second);
      } else {
        del[x].emplace_back(v[x - 1].second + v[y - 1].first);
        del[y].emplace_back(v[x - 1].second + v[y - 1].first);
      }
      k = del[x].size();
      if (k > 1)
        del[x][k - 1] += del[x][k - 2];
      k = del[y].size();
      if (k > 1) {
        del[y][k - 1] += del[y][k - 2];
      }
    }
    for (i = 0; i < a; i++) {
      int ans = 0;
      k = v[i].second - v[i].first;
      auto it = upper_bound(dif.begin(), dif.end(), make_pair(k, numeric_limits<int>::max()));
      if (it != dif.begin()) {
        int idx = it - dif.begin() - 1;
        ans = suf[idx] + (idx * v[i].first) - v[i].second;
      }
      if (it != dif.end()) {
        int idx = it - dif.begin();
        ans += pre[idx] + ((a - idx) * v[i].second);
      }
      if (!del[i + 1].empty()) {
        ans -= del[i + 1].back();
      }
      cout << ans << endl;
    }
  }
  return 0;
}