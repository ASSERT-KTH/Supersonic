#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  int tc = 1, i, j, k;
  while (tc--) {
    int a, b;
    std::cin >> a >> b;
    std::vector<std::pair<int, int>> v(a);
    std::vector<int> del[a + 1], suf(a), pre(a);

    for (i = 0; i < a; i++) {
      std::cin >> v[i].first >> v[i].second;
    }

    std::sort(v.begin(), v.end(), [](const auto& lhs, const auto& rhs) {
      return (lhs.second - lhs.first) < (rhs.second - rhs.first);
    });

    for (i = 0; i < a; i++) {
      suf[i] = v[i].second;
      if (i > 0) {
        suf[i] += suf[i - 1];
      }
    }

    for (i = a - 1; i >= 0; i--) {
      pre[i] = v[i].first;
      if (i < a - 1) {
        pre[i] += pre[i + 1];
      }
    }

    for (i = 0; i < b; i++) {
      int x, y;
      std::cin >> x >> y;
      k = v[x - 1].second - v[x - 1].first;
      int m = v[y - 1].second - v[y - 1].first;
      if (m <= k) {
        del[x].push_back(v[x - 1].first + v[y - 1].second);
        del[y].push_back(v[x - 1].first + v[y - 1].second);
      } else {
        del[x].push_back(v[x - 1].second + v[y - 1].first);
        del[y].push_back(v[x - 1].second + v[y - 1].first);
      }
      k = del[x].size();
      if (k > 1) {
        del[x][k - 1] += del[x][k - 2];
      }
      k = del[y].size();
      if (k > 1) {
        del[y][k - 1] += del[y][k - 2];
      }
    }

    for (i = 0; i < a; i++) {
      int ans = 0;
      k = v[i].second - v[i].first;
      int low = 0, high = a - 1;
      while (low <= high) {
        int mid = (low + high) / 2;
        if (v[mid].second - v[mid].first <= k) {
          ans = suf[mid] + (mid * v[i].first) - v[i].second;
          low = mid + 1;
        } else {
          high = mid - 1;
        }
      }
      if (low < a) {
        ans += pre[low] + ((a - low) * v[i].second);
      }
      if (!del[i + 1].empty()) {
        ans -= del[i + 1].back();
      }
      std::cout << ans << std::endl;
    }
  }

  return 0;
}