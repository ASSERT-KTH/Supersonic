#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  int tc = 1, i, j, k;
  while (tc--) {
    int a, b;
    std::cin >> a >> b;
    std::vector<std::pair<int, int>> dif;
    dif.reserve(a);
    std::vector<int> pre, suf;
    pre.reserve(a);
    suf.reserve(a);
    std::vector<std::pair<int, int>> v;
    v.reserve(a);
    int x, y;
    for (i = 0; i < a; i++) {
      std::cin >> x >> y;
      v.emplace_back(x, y);
      dif.emplace_back(y - x, i);
    }
    std::sort(dif.begin(), dif.end());
    for (i = 0; i < a; i++) {
      k = dif[i].second;
      suf.push_back(v[k].second);
      if (i)
        suf[i] += suf[i - 1];
    }
    for (i = a - 1; i >= 0; i--) {
      k = dif[i].second;
      pre.push_back(v[k].first);
    }
    for (i = 1; i < a; i++)
      pre[i] += pre[i - 1];
    std::reverse(pre.begin(), pre.end());
    for (i = 0; i < b; i++) {
      std::cin >> x >> y;
      k = v[x - 1].second - v[x - 1].first;
      int m = v[y - 1].second - v[y - 1].first;
      if (m <= k) {
        del[x].emplace_back(v[x - 1].first + v[y - 1].second);
        del[y].emplace_back(v[x - 1].first + v[y - 1].second);
      } else
        del[x].emplace_back(v[x - 1].second + v[y - 1].first),
            del[y].emplace_back(v[x - 1].second + v[y - 1].first);
      k = del[x].size();
      if (k > 1LL)
        del[x][k - 1] += del[x][k - 2];
      k = del[y].size();
      if (k > 1LL) {
        del[y][k - 1] += del[y][k - 2];
      }
    }
    for (i = 0; i < a; i++) {
      int ans = 0;
      k = v[i].second - v[i].first;
      k = std::upper_bound(dif.begin(), dif.end(), std::make_pair(k, INT_MAX)) - dif.begin();
      if (k - 1 >= 0)
        ans = suf[k - 1] + ((k - 1) * v[i].first) - v[i].second;
      if (k < a) {
        ans += pre[k] + (a - k) * v[i].second;
      }
      if (del[i + 1].size())
        ans -= del[i + 1].back();
      std::cout << ans << std::endl;
    }
  }

  return 0;
}