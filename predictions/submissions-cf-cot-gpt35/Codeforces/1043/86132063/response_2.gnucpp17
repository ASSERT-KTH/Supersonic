#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int tc = 1, i, j, k;
  while (tc--) {
    int a, b;
    cin >> a >> b;
    vector<pair<int, int>> v(a);
    vector<pair<int, int>> dif(a);
    vector<int> suf(a);
    vector<int> pre(a);
    vector<vector<int>> del(a + 1);

    for (i = 0; i < a; i++) {
      cin >> v[i].first >> v[i].second;
      dif[i] = {v[i].second - v[i].first, i};
    }

    sort(dif.begin(), dif.end(), greater<pair<int, int>>());

    for (i = 0; i < a; i++) {
      k = dif[i].second;
      suf[i] = v[k].second;
      if (i > 0)
        suf[i] += suf[i - 1];
    }

    for (i = a - 1; i >= 0; i--) {
      k = dif[i].second;
      pre[i] = v[k].first;
      if (i < a - 1)
        pre[i] += pre[i + 1];
    }

    for (i = 0; i < b; i++) {
      int x, y;
      cin >> x >> y;
      k = v[x - 1].second - v[x - 1].first;
      int m = v[y - 1].second - v[y - 1].first;
      if (m <= k) {
        del[x].push_back(v[x - 1].first + v[y - 1].second);
        del[y].push_back(v[x - 1].first + v[y - 1].second);
      } else {
        del[x].push_back(v[x - 1].second + v[y - 1].first);
        del[y].push_back(v[x - 1].second + v[y - 1].first);
      }
      k = del[x].size();
      if (k > 1)
        del[x][k - 1] += del[x][k - 2];
      k = del[y].size();
      if (k > 1)
        del[y][k - 1] += del[y][k - 2];
    }

    for (i = 0; i < a; i++) {
      int ans = 0;
      k = v[i].second - v[i].first;
      auto it = lower_bound(dif.begin(), dif.end(), make_pair(k, -1LL), greater<pair<int, int>>());
      if (it != dif.end()) {
        int idx = it - dif.begin();
        ans = suf[idx] + (idx * v[i].first) - v[i].second;
      }
      if (it != dif.begin()) {
        int idx = it - dif.begin() - 1;
        ans += pre[idx] + ((a - idx - 1) * v[i].second);
      }
      if (!del[i + 1].empty())
        ans -= del[i + 1].back();
      cout << ans << endl;
    }
  }
}