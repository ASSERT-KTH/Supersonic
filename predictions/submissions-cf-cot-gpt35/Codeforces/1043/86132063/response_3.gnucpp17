#include <iostream>
#include <algorithm>
#include <vector>
#include <utility>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  int tc = 1, i, j, k;
  while (tc--) {
    int a, b;
    std::cin >> a >> b;

    std::vector<std::pair<int, int>> v(a);
    std::vector<std::pair<int, int>> dif(a);
    std::vector<int> del[mx];

    for (i = 0; i < a; i++) {
      std::cin >> v[i].first >> v[i].second;
      dif[i] = {v[i].second - v[i].first, i};
    }

    std::stable_sort(dif.begin(), dif.end());

    std::vector<int> suf(a), pre(a);
    suf[0] = v[dif[0].second].second;
    for (i = 1; i < a; i++) {
      suf[i] = suf[i - 1] + v[dif[i].second].second;
    }

    pre[a - 1] = v[dif[a - 1].second].first;
    for (i = a - 2; i >= 0; i--) {
      pre[i] = pre[i + 1] + v[dif[i].second].first;
    }

    for (i = 0; i < b; i++) {
      int x, y;
      std::cin >> x >> y;

      k = v[x - 1].second - v[x - 1].first;
      int m = v[y - 1].second - v[y - 1].first;

      if (m <= k) {
        del[x].push_back(v[x - 1].first + v[y - 1].second);
        del[y].push_back(v[x - 1].first + v[y - 1].second);
      } else {
        del[x].push_back(v[x - 1].second + v[y - 1].first);
        del[y].push_back(v[x - 1].second + v[y - 1].first);
      }

      k = del[x].size();
      if (k > 1LL) {
        del[x][k - 1] += del[x][k - 2];
      }

      k = del[y].size();
      if (k > 1LL) {
        del[y][k - 1] += del[y][k - 2];
      }
    }

    for (i = 0; i < a; i++) {
      int ans = 0;
      k = v[i].second - v[i].first;
      k = std::lower_bound(dif.begin(), dif.end(), std::make_pair(k, std::numeric_limits<int>::max())) - dif.begin();

      if (k - 1 >= 0) {
        ans = suf[k - 1] + ((k - 1) * v[i].first) - v[i].second;
      }

      if (k < a) {
        ans += pre[k] + (a - k) * v[i].second;
      }

      if (!del[i + 1].empty()) {
        ans -= del[i + 1].back();
      }

      std::cout << ans << '\n';
    }
  }

  return 0;
}