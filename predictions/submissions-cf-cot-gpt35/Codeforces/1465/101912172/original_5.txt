Step 1: Remove unnecessary includes and macro definitions.

The program includes the `<bits/stdc++.h>` header which is not standard and includes a large number of headers. This can increase the compilation time and unnecessary increase the memory usage. We can remove this and include only the necessary headers.

Step 2: Remove unnecessary function definitions.

The program defines several unnecessary functions such as `si`, `sl`, `ss`, `sd`, `sf`, `pnl`, `deb`, `deb2`, `pb`, `mp`, `tr`, `end_routine`. These functions are not used in the program and can be removed.

Step 3: Simplify the check function.

The check function can be simplified by directly checking if the number is divisible by each digit. We don't need to convert the number to a string and check each character.

Step 4: Remove unnecessary variable declarations.

The program declares several unnecessary variables such as `i`, `t`, `s`. These variables are not used in the program and can be removed.

Step 5: Remove unnecessary container typedefs.

The program defines several unnecessary typedefs for containers such as `vi`, `vl`, `vpii`, `vpl`, `vvi`, `vvl`. These typedefs are not used in the program and can be removed.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

bool check(long long n) {
  long long temp = n;
  while (temp > 0) {
    int digit = temp % 10;
    if (digit == 0 || n % digit != 0) {
      return false;
    }
    temp /= 10;
  }
  return true;
}

void solve() {
  long long n;
  cin >> n;
  while (true) {
    if (check(n)) {
      cout << n << endl;
      break;
    } else {
      n++;
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;
  while (t--) {
    solve();
  }
  return 0;
}
```