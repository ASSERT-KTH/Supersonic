#include <iostream>
#include <vector>
using namespace std;

const int MOD = 1e9 + 7;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n, x;
  cin >> n >> x;
  
  vector<int> v(n);
  for (int i = 0; i < n; i++)
    cin >> v[i];
  
  vector<int> prefixSum(n);
  prefixSum[0] = v[0];
  for (int i = 1; i < n; i++)
    prefixSum[i] = prefixSum[i - 1] + v[i];
  
  int sumOfNumbers = prefixSum.back();
  long long sumOfSquares = 1LL * sumOfNumbers * sumOfNumbers;
  for (int num : v)
    sumOfSquares -= 1LL * num * num;

  int ans = 0;
  int s = 0, e = 0;
  int days = 0, sums = 0;
  
  while (e < n) {
    days += v[e];
    sums += prefixSum[e];
    e++;
    
    while (days > x) {
      if (days - v[s] < x)
        break;
      days -= v[s];
      sums -= prefixSum[s];
      s++;
    }
    
    int diff = max(days - x, 0);
    ans = max(ans, sums - diff);
  }
  
  cout << ans;
  return 0;
}