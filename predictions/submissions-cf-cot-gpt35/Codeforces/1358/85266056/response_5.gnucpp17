#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

long long getSum(long long n) {
  return n * (n + 1) >> 1;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  long long n, x;
  cin >> n >> x;

  vector<long long> v(n);
  for (long long &x : v)
    cin >> x;

  for (long long i = 0; i < n; i++) {
    v.push_back(v[i]);
  }

  n *= 2;

  vector<long long> prefix_sum(n);
  partial_sum(v.begin(), v.end(), prefix_sum.begin());

  vector<long long> z(n);
  for (long long i = 0; i < n; i++) {
    z[i] = getSum(v[i]);
  }
  partial_sum(z.begin(), z.end(), z.begin());

  long long ans = 0;
  int s = 0, e = 0;
  long long days = 0, sums = 0;

  while (e < v.size()) {
    days += v[e];
    sums += z[e];
    e++;

    while (days > x) {
      long long diff = days - x;
      days -= v[s];
      sums -= z[s];
      s++;
      ans = max(ans, sums - getSum(diff));
    }
  }

  cout << ans;

  return 0;
}