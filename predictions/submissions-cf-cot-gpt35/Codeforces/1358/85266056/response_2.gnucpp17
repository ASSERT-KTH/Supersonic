#include <iostream>
#include <vector>
using namespace std;

long long getSum(long long n) { return n * (n + 1) / 2; }

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  long long n, x;
  cin >> n >> x;

  vector<long long> v(n);
  for (long long i = 0; i < n; i++) {
    cin >> v[i];
  }

  long long m = 2 * n;
  vector<long long> z(m);
  
  long long totalSum = accumulate(v.begin(), v.end(), 0LL);
  long long totalSumOfSquares = 0;
  for (long long i = 0; i < m; i++) {
    z[i] = v[i % n] * (v[i % n] + 1) / 2;
    totalSumOfSquares += z[i];
    if (i > 0) {
      z[i] += z[i - 1];
    }
  }

  long long ans = 0;
  long long days = 0, sums = 0;
  int s = 0, e = 0;
  
  while (e < n) {
    days += v[e];
    sums += getSum(v[e]);
    e++;
    while (days > x) {
      if (days <= x) {
        break;
      }
      days -= v[s];
      sums -= getSum(v[s]);
      s++;
    }
    long long diff = max(days - x, 0LL);
    ans = max(ans, sums - getSum(diff));
  }
  
  cout << ans;
  return 0;
}