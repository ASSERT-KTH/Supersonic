#include <iostream>
#include <vector>
using namespace std;

long long gcd(long long a, long long b) {
  while (b != 0) {
    long long temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}

int bsearch(int l, int h, int a[], int key) {
  while (l <= h) {
    int m = (l + h) / 2;
    if (a[m] == key) {
      return m;
    } else if (a[m] < key) {
      l = m + 1;
    } else {
      h = m - 1;
    }
  }
  return -1;
}

long long bin(long long a, long long b, long long m) {
  a = a % m;
  long long res = 1;
  while (b > 0) {
    if (b & 1) {
      res = res * a % m;
    }
    a = a * a % m;
    b = b >> 1;
  }
  return res;
}

long long ncr(int n, int r) {
  long long res = 1;
  for (int i = 0; i < r; i++) {
    res = res * (n - i);
    res = res / (i + 1);
  }
  return res;
}

int find(int i, vector<int>& p) {
  if (p[i] != i) {
    p[i] = find(p[i], p);
  }
  return p[i];
}

void join(int u, int v, vector<int>& p) {
  int x = find(u, p);
  int y = find(v, p);
  p[x] = p[y];
}

void dfs(int x, vector<int> ad[], vector<int>& vis, int cat[], int& m, int& cc,
         vector<int>& ans, int flag) {
  vis[x] = 1;
  if (cat[x - 1] == 1) {
    cc++;
    m = max(m, cc);
  } else {
    cc = 0;
    m = max(m, cc);
  }
  if (ad[x].size() == 1 && x != 1) {
    ans.push_back(m);
  }
  for (int i = 0; i < ad[x].size(); i++) {
    if (vis[ad[x][i]] == 0) {
      dfs(ad[x][i], ad, vis, cat, m, cc, ans, cat[x - 1]);
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, m;
  cin >> n >> m;
  int cat[n];
  for (int i = 0; i < n; i++) {
    cin >> cat[i];
  }
  int an = 0;
  vector<int> ad[n + 1];
  for (int i = 0; i < n - 1; i++) {
    int x, y;
    cin >> x >> y;
    ad[x].push_back(y);
    ad[y].push_back(x);
  }
  vector<int> vis(n + 1, 0);
  vector<int> ans;
  int cc = 0;
  int max_cc = 0;
  dfs(1, ad, vis, cat, max_cc, cc, ans, cat[0]);
  for (int i = 0; i < ans.size(); i++) {
    if (ans[i] <= m) {
      ++an;
    }
  }
  cout << an << endl;
  return 0;
}