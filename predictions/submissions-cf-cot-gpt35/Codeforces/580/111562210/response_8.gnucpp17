#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

long long gcd(long long a, long long b) {
  while (b != 0) {
    long long temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}

int bsearch(int l, int h, int a[], int key) {
  int* it = std::lower_bound(a + l, a + h + 1, key);
  if (it != a + h + 1 && *it == key) {
    return it - a;
  }
  return -1;
}

long long bin(long long a, long long b, long long m) {
  a = a % m;
  long long res = 1;
  while (b > 0) {
    if (b & 1) {
      res = (res * a) % m;
    }
    a = (a * a) % m;
    b = b >> 1;
  }
  return res;
}

int ncr(int n, int r) {
  long long res = 1;
  for (int i = 0; i < r; i++) {
    res *= (n - i);
    res /= (i + 1);
  }
  return res;
}

int find(int i, std::vector<int>& p) {
  if (p[i] != i) {
    p[i] = find(p[i], p);
  }
  return p[i];
}

void join(int u, int v, std::vector<int>& p) {
  int x = find(u, p);
  int y = find(v, p);
  p[x] = p[y];
}

void dfs(int x, std::vector<std::vector<int>>& ad, std::vector<int>& vis, int cat[], int& m, int& cc, std::vector<int>& ans, int flag) {
  vis[x] = 1;
  if (flag) {
    if (cat[x - 1] == 1) {
      cc++;
      m = std::max(m, cc);
    } else {
      m = std::max(m, cc);
      cc = 0;
    }
  } else {
    if (cat[x - 1] == 1) {
      cc++;
      m = std::max(m, cc);
    } else {
      cc = 0;
      m = std::max(m, cc);
    }
  }
  if (ad[x].size() == 1 && x != 1) {
    ans.push_back(m);
  }
  for (int i = 0; i < ad[x].size(); i++) {
    if (vis[ad[x][i]] == 0) {
      dfs(ad[x][i], ad, vis, cat, m, cc, ans, cat[x - 1]);
    }
  }
}

int main() {
  std::ios::sync_with_stdio(false);
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  int n, m;
  std::cin >> n >> m;
  int cat[n];
  for (int i = 0; i < n; i++) {
    std::cin >> cat[i];
  }
  int an = 0;
  if (n == 2) {
    if (cat[1] == 0 || cat[0] + cat[1] <= m) {
      an++;
    }
    std::printf("%d\n", an);
    return 0;
  }
  std::vector<std::vector<int>> ad(n + 1);
  for (int i = 0; i < n - 1; i++) {
    int x, y;
    std::cin >> x >> y;
    ad[x].push_back(y);
    ad[y].push_back(x);
  }
  std::vector<int> vis(n + 1, 0);
  std::vector<int> ans;
  int m_val = 0;
  int cc_val = 0;
  dfs(1, ad, vis, cat, m_val, cc_val, ans, cat[0]);
  for (int i = 0; i < ans.size(); i++) {
    if (ans[i] <= m) {
      ++an;
    }
  }
  std::printf("%d\n", an);
  return 0;
}