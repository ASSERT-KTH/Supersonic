#include <cstdio>
#include <unordered_map>
#include <vector>

int gcd(int a, int b) {
  if (b == 0) {
    return a;
  }
  return gcd(b, a % b);
}

int main() {
  int n;
  scanf("%d", &n);

  std::vector<int> a(n);
  for (int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
  }

  std::vector<std::vector<int>> st(n, std::vector<int>(20));
  for (int i = 0; i < n; i++) {
    st[i][0] = a[i];
  }

  for (int nowP = 1; nowP < 20; nowP++) {
    for (int i = 0; i + (1 << nowP) <= n; i++) {
      st[i][nowP] = gcd(st[i][nowP - 1], st[i + (1 << (nowP - 1))][nowP - 1]);
    }
  }

  int q;
  scanf("%d", &q);

  std::unordered_map<int, long long> ans;
  ans.reserve(n); // Preallocate memory for ans

  std::vector<int> get_log(2 * n);
  get_log[1] = 0;
  for (int i = 2; i < 2 * n; i++) {
    get_log[i] = get_log[i - 1];
    while ((1 << get_log[i]) <= i) {
      get_log[i]++;
    }
    get_log[i]--;
  }

  while (q--) {
    int x;
    scanf("%d", &x);

    long long res = 0;
    for (int L = 0; L < n; L++) {
      int now_ind = L;
      int now_gcd = a[L];

      while (now_ind < n) {
        int r = n;
        int m = now_ind;

        while (r - m > 1) {
          int l = m;
          m = (l + r) / 2;
          int g = st[L][get_log[m - L + 1]];
          if (g < now_gcd) {
            r = m;
          } else {
            l = m;
          }
        }

        res += r - now_ind;
        now_ind = r;
        now_gcd = gcd(now_gcd, a[now_ind]);
      }
    }

    ans[x] = res;
    printf("%lld\n", ans[x]);
  }

  return 0;
}