#include <cstdio>
#include <iostream>
#include <unordered_map>
#include <vector>

int gcd(int a, int b) {
  if (b == 0) {
    return a;
  }
  return gcd(b, a % b);
}

int main() {
  std::vector<int> a;
  std::unordered_map<int, long long> ans;

  int n;
  std::scanf("%d", &n);
  a.resize(n);
  for (int i = 0; i < n; i++) {
    std::scanf("%d", &a[i]);
  }

  std::vector<std::vector<int>> st;
  st.resize(n, std::vector<int>(20));

  for (int i = 0; i < n; i++) {
    st[i][0] = a[i];
  }

  std::vector<int> get_log;
  get_log.resize(200001);
  get_log[1] = 0;
  for (int i = 2; i < 200001; i++) {
    get_log[i] = get_log[i - 1];
    while ((1 << get_log[i]) <= i) {
      get_log[i]++;
    }
    get_log[i]--;
  }

  for (int nowP = 1; nowP < 20; nowP++) {
    for (int i = 0; i + (1 << nowP) <= n; i++) {
      st[i][nowP] = gcd(st[i][nowP - 1], st[i + (1 << (nowP - 1))][nowP - 1]);
    }
  }

  for (int L = 0; L < n; L++) {
    int prev_ind = L;
    int now_ind = L;
    while (now_ind < n) {
      int now_gcd = st[L][get_log[now_ind - L + 1]];
      int l = now_ind;
      int r = n;
      while (r > l + 1) {
        int m = (l + r) / 2;
        int x = st[L][get_log[m - L + 1]];
        if (x < now_gcd) {
          r = m;
        } else {
          l = m;
        }
      }
      ans[now_gcd] += r - prev_ind;
      now_ind = r;
      prev_ind = r;
    }
  }

  int q;
  std::scanf("%d", &q);
  while (q--) {
    int x;
    std::scanf("%d", &x);
    std::printf("%lld\n", ans[x]);
  }

  return 0;
}