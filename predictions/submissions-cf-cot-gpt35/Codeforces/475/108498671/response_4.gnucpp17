#include <iostream>
#include <cmath>
using namespace std;

int gcd(int a, int b) {
  while (b != 0) {
    int temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}

int main() {
  int n;
  cin >> n;

  int q;
  cin >> q;

  int a[100100];
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }

  int log_n = log2(n) + 1;
  int st[100100][log_n];
  for (int i = 0; i < n; i++) {
    st[i][0] = a[i];
  }

  for (int nowP = 1; nowP < log_n; nowP++) {
    for (int i = 0; i + (1LL << nowP) <= n; i++) {
      st[i][nowP] = gcd(st[i][nowP - 1], st[i + (1LL << (nowP - 1))][nowP - 1]);
    }
  }

  long long ans[100100] = {0};

  for (int L = 0; L < n; L++) {
    int prev_ind = L;
    int now_ind = L;
    while (now_ind < n) {
      int now_gcd = gcd(st[L][0], st[now_ind + 1][0]);
      int l = now_ind;
      int r = n;
      while (r - l > 1) {
        int m = (l + r) / 2;
        int x = gcd(st[L][0], st[m + 1][0]);
        if (x < now_gcd)
          r = m;
        else
          l = m;
      }
      ans[now_gcd] += r - prev_ind;
      now_ind = r;
      prev_ind = r;
    }
  }

  while (q--) {
    int x;
    cin >> x;
    cout << ans[x] << endl;
  }

  return 0;
}