#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <cmath>
using namespace std;

int gcd(int a, int b) {
  if (b == 0) {
    return a;
  }
  return gcd(b, a % b);
}

const int MAX_N = 100100;
const int MAX_GCD = 1000000001;

int n;
int q;
long long ans[MAX_GCD];
int a[MAX_N];
int st[MAX_N][20];
int get_log[MAX_N];

int get(int l, int r) {
  int sz = get_log[r - l];
  return gcd(st[l][sz], st[r - (1LL << sz)][sz]);
}

int main() {
  get_log[1] = 0;
  for (int i = 2; i < MAX_N; i++) {
    get_log[i] = log2(i);
  }

  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }

  for (int i = 0; i < n; i++) {
    st[i][0] = a[i];
  }

  for (int nowP = 1; nowP < 20; nowP++) {
    for (int i = 0; i + (1LL << nowP) <= n; i++) {
      st[i][nowP] = gcd(st[i][nowP - 1], st[i + (1LL << (nowP - 1))][nowP - 1]);
    }
  }

  for (int L = 0; L < n; L++) {
    int prev_ind = L;
    int now_ind = L;
    while (now_ind < n) {
      int now_gcd = get(L, now_ind + 1);
      int l = now_ind;
      int r = n;
      while (l < r) {
        int m = (l + r) / 2;
        int x = get(L, m + 1);
        if (x < now_gcd)
          r = m;
        else
          l = m + 1;
      }
      ans[now_gcd] += r - prev_ind;
      now_ind = r;
      prev_ind = r;
    }
  }

  cin >> q;
  while (q--) {
    int x;
    cin >> x;
    cout << ans[x] << endl;
  }
  return 0;
}