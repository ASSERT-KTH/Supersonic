#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,avx,avx2")
#include <bits/stdc++.h>
using namespace std;

#define fastio                                                                 \
  ios_base::sync_with_stdio(false);                                            \
  cin.tie(NULL);                                                               \
  cout.tie(NULL);

#define int long long

#define ld long double

#define all(v) v.begin(), v.end()

#define pb emplace_back

#define mp make_pair

#define F first

#define S second

#define mod 1000000007

#define inf 1000000000000000

#define infty 1000000000000000000LL

#define md 998244353

#define PI acos(-1.0)

#define endl "\n"

int l[1001][1001] = {};

void initialize() {
  l[0][0] = 1;
  for (int i = 1; i < 1001; i++) {
    l[i][0] = 1;
    for (int j = 1; j < i + 1; j++) {
      l[i][j] = (l[i - 1][j - 1] + l[i - 1][j]);
    }
  }
}

int nCr(int n, int r) { return l[n][r]; }

void solve() {
  string a, b;
  cin >> a >> b;
  int apos = count(a.begin(), a.end(), '+') - count(a.begin(), a.end(), '-');
  int amb = count(b.begin(), b.end(), '?');
  int diff = 0;
  int r = count(b.begin(), b.end(), '+') - count(b.begin(), b.end(), '-');
  diff = apos - r;
  if (amb == 0 and diff == 0) {
    cout << 1 << endl;
    return;
  } else if (amb == 0 and diff != 0) {
    cout << 0 << endl;
    return;
  }
  int u = (amb + diff) / 2;
  int v = amb - u;
  if ((amb + diff) & 1 or (u < 0 or v < 0)) {
    cout << 0 << endl;
    return;
  }
  int q = 1 << amb;
  int p = nCr(amb, u);
  cout << p / q << endl;
}

int32_t main() {
  initialize();
  fastio cout << setprecision(15) << fixed;
  int t = 1;
  for (int i = 1; i <= t; i++) {
    solve();
  }
  return 0;
}