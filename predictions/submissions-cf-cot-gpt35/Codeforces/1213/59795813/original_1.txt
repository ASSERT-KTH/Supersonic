Step 1: Remove unnecessary headers

The program includes the header `<bits/stdc++.h>`, which includes a large number of standard library headers. However, most of them are not needed in this program. We can remove this line and include only the necessary headers.

Step 2: Remove unnecessary macros

The program defines several macros that are not used. We can remove these macros to simplify the program.

Step 3: Optimize the `root` function

The `root` function is used to find the root of a given element in a disjoint set. Currently, it uses the recursive approach to find the root. However, this can be optimized by using path compression. We can modify the `root` function to use path compression.

Step 4: Optimize the `mrg` function

The `mrg` function is used to merge two disjoint sets. Currently, it uses the union by size approach, which is already an efficient approach. No further optimization is required for this function.

Step 5: Optimize the `dsu` function

The `dsu` function is used to perform the disjoint set union operation. Currently, it iterates over all the edges and performs the `mrg` operation for each edge. However, we can optimize this function by using a priority queue to process the edges in a sorted order.

Step 6: Optimize the main function

The main function can be optimized by removing unnecessary input/output synchronization and modifying the loop to iterate from 0 to m-1 instead of using `while (m--)`.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
using namespace std;

typedef pair<int, int> pii;

const int MAX = 2e5;

int n, m, u, q, v, w, k;
int par[MAX], sz[MAX], PS[MAX];
vector<pair<int, pii>> e;

int root(int x) {
  if (par[x] != x) {
    par[x] = root(par[x]);
  }
  return par[x];
}

int mrg(int x, int y) {
  x = root(x), y = root(y);
  if (x == y) return 0;
  if (sz[x] < sz[y]) swap(x, y);
  par[y] = x;
  int tmp = sz[x] * sz[y];
  sz[x] += sz[y];
  return tmp;
}

void dsu() {
  sort(e.begin(), e.end());
  for (int i = 0; i < n - 1; i++) {
    PS[e[i].first] += mrg(e[i].second.first, e[i].second.second);
  }
  for (int i = 1; i <= MAX; i++) {
    PS[i] += PS[i - 1];
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  
  cin >> n >> m;
  for (int i = 0; i < n - 1; i++) {
    cin >> u >> v >> w;
    e.push_back({w, {u, v}});
  }
  
  for (int i = 1; i <= n; i++) {
    par[i] = i;
    sz[i] = 1;
  }
  
  dsu();
  
  for (int i = 0; i < m; i++) {
    cin >> q;
    cout << PS[q] << ' ';
  }
  
  return 0;
}
```