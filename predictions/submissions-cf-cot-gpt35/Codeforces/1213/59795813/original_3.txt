Optimization Steps:

1. Remove unnecessary includes: The program includes the "bits/stdc++.h" header, which includes a lot of standard library headers. This can lead to increased compilation time and unnecessary memory usage. Since the program doesn't use any specific headers from this include, we can remove it.

2. Remove unnecessary macros: The program defines some macros that are not used in the code. These macros can be safely removed to simplify the code.

3. Replace "int long long" with "int64_t": The program uses the "int long long" type for large integers. Instead of using this non-standard type, we can replace it with the standard "int64_t" type for clarity and portability.

4. Use vector reserve: The program uses a vector "e" to store pairs of integers. Since the size of this vector is known in advance, we can use the "reserve" function to allocate memory for the vector, improving memory usage and reducing the number of reallocations.

5. Optimize the root function: The root function uses path compression to find the root of a given node. We can optimize this function by using a while loop instead of recursion, which can improve performance.

6. Optimize the mrg function: The mrg function merges two sets by updating the parent and size arrays. We can optimize this function by avoiding unnecessary swaps and assignments.

7. Use prefix sum array instead of map: The dsu function uses a map to store the prefix sums of the merged sets. We can optimize this by using a prefix sum array instead of a map, reducing memory usage and improving performance.

8. Use a constant for the maximum size: The program uses a constant MAX for the maximum size of arrays. We can replace this constant with a variable or use the vector size to avoid potential errors.

9. Use range-based for loops: The program uses index-based for loops to iterate over vectors. We can simplify the code by using range-based for loops, which are more concise and less error-prone.

10. Remove unnecessary variables: The program uses some temporary variables that are not necessary. We can remove these variables to simplify the code.

11. Optimize input/output: The program uses the "cin" and "cout" streams for input and output. We can improve the performance of the program by disabling synchronization with the standard streams.

Optimized Code: