#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
using namespace std;

typedef pair<int, int> pii;

const int MAX = 2e5;

int n, m, u, q, v, w, k;
int par[MAX], sz[MAX], PS[MAX];
vector<pair<int, pii>> e;

int root(int x) {
  if (par[x] != x) {
    par[x] = root(par[x]);
  }
  return par[x];
}

int mrg(int x, int y) {
  x = root(x), y = root(y);
  if (x == y) return 0;
  if (sz[x] < sz[y]) swap(x, y);
  par[y] = x;
  int tmp = sz[x] * sz[y];
  sz[x] += sz[y];
  return tmp;
}

void dsu() {
  sort(e.begin(), e.end());
  for (int i = 0; i < n - 1; i++) {
    PS[e[i].first] += mrg(e[i].second.first, e[i].second.second);
  }
  for (int i = 1; i <= MAX; i++) {
    PS[i] += PS[i - 1];
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  
  cin >> n >> m;
  for (int i = 0; i < n - 1; i++) {
    cin >> u >> v >> w;
    e.push_back({w, {u, v}});
  }
  
  for (int i = 1; i <= n; i++) {
    par[i] = i;
    sz[i] = 1;
  }
  
  dsu();
  
  for (int i = 0; i < m; i++) {
    cin >> q;
    cout << PS[q] << ' ';
  }
  
  return 0;
}