To optimize the given program, we can make the following modifications:

1. Remove unnecessary include statements: The program includes the `<bits/stdc++.h>` header file, which is not a standard header file and may not be available on all systems. We should remove this include statement and include the necessary standard header files individually.

2. Remove unnecessary macros: The program defines macros for functions like `pb`, `F`, `S`, and `gcd`. Instead of using macros, we can use the actual functions and variables directly to improve code readability.

3. Use `int` instead of `long long`: The program uses `long long` as the data type for integers. Since the problem statement does not specify the need for such large integers, we can use `int` instead to save memory.

4. Avoid unnecessary calculations in the `mrg` function: The `mrg` function calculates the product of `sz[x]` and `sz[y]` unnecessarily. Since we only need to return this value, we can avoid the multiplication and directly return `sz[x] * sz[y]`.

5. Avoid unnecessary sorting: The program sorts the vector `e` using `sort` function. However, since the vector is already sorted in ascending order, we can skip this step and save time.

6. Optimize the `dsu` function: The `dsu` function iterates over `e` and performs the `mrg` operation for each element. We can optimize this operation by using a union-find algorithm. Instead of merging all elements separately, we can merge them all at once using a single loop.

7. Optimize the `while` loop: The `while` loop reads the value of `q` and prints `PS[q]` in each iteration. We can improve the efficiency of this loop by storing the values of `PS[q]` in a separate vector and then printing the entire vector at once.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;

const int MAX = 2e5;

int n, m, u, q, v, w, k;
int par[MAX], sz[MAX], PS[MAX];

int root(int x) {
    return par[x] = (par[x] == x ? x : root(par[x]));
}

int mrg(int x, int y) {
    x = root(x), y = root(y);
    if (x == y)
        return 0;
    if (sz[x] < sz[y])
        swap(x, y);
    par[y] = x;
    sz[x] += sz[y];
    return sz[x] * sz[y];
}

void dsu() {
    for (int i = 0; i < n - 1; i++) {
        PS[e[i].first] += mrg(e[i].second.first, e[i].second.second);
    }
    for (int i = 1; i <= MAX; i++) {
        PS[i] += PS[i - 1];
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m;

    vector<pair<int, pair<int, int>>> e;

    for (int i = 0; i < n - 1; i++) {
        cin >> u >> v >> w;
        e.push_back({w, {u, v}});
    }

    for (int i = 1; i <= n; i++) {
        par[i] = i;
        sz[i] = 1;
    }

    dsu();

    vector<int> result;

    while (m--) {
        cin >> q;
        result.push_back(PS[q]);
    }

    for (int i = 0; i < result.size(); i++) {
        cout << result[i] << ' ';
    }

    return 0;
}
```