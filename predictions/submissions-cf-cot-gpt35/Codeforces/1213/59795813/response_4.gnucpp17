#include <iostream>
#include <vector>
#include <map>
using namespace std;

const int MAX = 2e5;

int n, m, u, q, v, w;
int par[MAX], sz[MAX], PS[MAX];
vector<pair<int, pair<int, int>>> e;

int root(int x) {
    if (par[x] == x)
        return x;
    return par[x] = root(par[x]);
}

int mrg(int x, int y) {
    x = root(x);
    y = root(y);
    if (x == y)
        return 0;
    if (sz[x] < sz[y])
        swap(x, y);
    par[y] = x;
    sz[x] += sz[y];
    return sz[x] * sz[y];
}

void dsu() {
    for (auto edge : e)
        PS[edge.first] += mrg(edge.second.first, edge.second.second);
    for (int i = 1; i <= MAX; i++)
        PS[i] += PS[i - 1];
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m;
    for (int i = 0; i < n - 1; i++) {
        cin >> u >> v >> w;
        e.push_back({w, {u, v}});
    }

    for (int i = 1; i <= n; i++)
        par[i] = i, sz[i] = 1;

    dsu();

    while (m--) {
        cin >> q;
        cout << PS[q] << ' ';
    }

    return 0;
}