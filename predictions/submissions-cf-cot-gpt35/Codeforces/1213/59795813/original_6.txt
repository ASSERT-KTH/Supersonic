Step 1: Remove unnecessary header file includes.
- The program includes the `<bits/stdc++.h>` header file, which is not necessary and can be removed.

Step 2: Remove unnecessary macros.
- The program defines macros like `pb`, `F`, `S`, `gcd`, and `int` which are not used. These macros can be removed.

Step 3: Optimize the `root` function.
- The `root` function uses path compression by assigning the root of `x` to `par[x]`. However, it also assigns the result of this operation to `par[x]`, which is not necessary. We can remove the assignment and simply return `par[x]` as the root.

Step 4: Optimize the `mrg` function.
- The `mrg` function swaps `x` and `y` if `sz[x] < sz[y]`. However, this swap operation is not necessary for the algorithm to work correctly. We can remove the swap operation and update the rest of the code accordingly.

Step 5: Optimize the `dsu` function.
- The `dsu` function uses a loop to iterate over the edges and call `mrg` function. However, the loop can be optimized by using range-based for loop instead of indexing.

Step 6: Optimize the main function.
- The main function can be optimized by removing the unnecessary calls to `ios_base::sync_with_stdio(false)`, `cin.tie(0)`, and `cout.tie(0)`. These calls are not necessary for this program.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
using namespace std;

typedef pair<int, int> pii;

const int MAX = 2e5;

int n, m;
int u, v, w;
int par[MAX], sz[MAX], PS[MAX];
vector<pair<int, pii>> e;

int root(int x) {
  return par[x] == x ? x : root(par[x]);
}

int mrg(int x, int y) {
  x = root(x), y = root(y);
  if (x == y)
    return 0;
  par[y] = x;
  int tmp = sz[x] * sz[y];
  sz[x] += sz[y];
  return tmp;
}

void dsu() {
  for (auto edge : e) {
    PS[edge.first] += mrg(edge.second.first, edge.second.second);
  }
  for (int i = 1; i <= MAX; i++)
    PS[i] += PS[i - 1];
}

int main() {
  cin >> n >> m;
  for (int i = 0; i < n - 1; i++) {
    cin >> u >> v >> w;
    e.push_back({w, {u, v}});
  }
  sort(e.begin(), e.end());
  for (int i = 1; i <= n; i++)
    par[i] = i, sz[i] = 1;
  dsu();
  while (m--) {
    cin >> u;
    cout << PS[u] << ' ';
  }
  return 0;
}
```