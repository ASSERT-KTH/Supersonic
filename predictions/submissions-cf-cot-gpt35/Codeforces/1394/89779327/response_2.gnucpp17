#include <iostream>
#include <vector>
#include <unordered_set>
#include <algorithm>

const int N = 200200;
const int mod = 1e9 + 7;

void rec(int i, int k, int& res, int& all, std::vector<std::vector<std::pair<int, int>>>& v, std::vector<std::vector<std::pair<int, int>>>& g, std::vector<std::vector<int>>& ban, std::vector<std::vector<int>>& cnt, std::vector<std::vector<int>>& sv, std::vector<int>& used, std::vector<std::vector<bool>>& slf) {
    if (i == k + 1) {
        res += 1;
        return;
    }

    for (int j = 0; j < i; j++) {
        if (used[i] & (1 << j) || slf[i][j])
            continue;
        for (int h = i + 1; h <= k; h++) {
            sv[i][h] = used[h];
            used[h] |= ban[i][j][h];
        }
        all += cnt[i][j];
        rec(i + 1, k, res, all, v, g, ban, cnt, sv, used, slf);
        all -= cnt[i][j];
        for (int h = i + 1; h <= k; h++) {
            used[h] = sv[i][h];
        }
    }
}

int main() {
    std::ios_base::sync_with_stdio(0);
    int n, m, k;
    std::cin >> n >> m >> k;

    std::vector<std::vector<std::pair<int, int>>> v(N), g(N);
    std::vector<std::vector<int>> ban(10, std::vector<int>(10, std::vector<int>(10, 0)));
    std::vector<std::vector<int>> cnt(10, std::vector<int>(10, 0));
    std::vector<std::vector<int>> sv(10, std::vector<int>(10, 0));
    std::vector<int> used(10, 0);
    std::vector<std::vector<bool>> slf(10, std::vector<bool>(10, false));

    for (int i = 1; i <= m; i++) {
        int x, y, z;
        std::cin >> x >> y >> z;
        v[x].emplace_back(z, y);
    }

    for (int i = 1; i <= n; i++) {
        std::stable_sort(v[i].begin(), v[i].end());
        for (const auto& p : v[i]) {
            g[p.second].emplace_back(v[i].size(), p.first);
        }
    }

    std::vector<std::pair<int, int>> ng;
    for (int i = 1; i <= n; i++) {
        if (g[i].empty()) {
            std::cout << 0 << "\n";
            return 0;
        }

        std::stable_sort(g[i].begin(), g[i].end());
        ng.clear();
        ng.push_back(g[i][0]);
        for (int j = 1; j < g[i].size(); j++) {
            if (g[i][j] == g[i][j - 1]) {
                slf[g[i][j].first][g[i][j].second] = true;
            } else {
                ng.push_back(g[i][j]);
            }
        }
        g[i] = ng;

        for (int j = 0; j < g[i].size(); j++) {
            cnt[g[i][j].first][g[i][j].second] += 1;
            for (int h = 0; h < g[i].size(); h++) {
                if (h != j) {
                    ban[g[i][j].first][g[i][j].second][g[i][h].first] |= (1 << g[i][h].second);
                }
            }
        }
    }

    int res = 0, all = 0;
    rec(1, k, res, all, v, g, ban, cnt, sv, used, slf);
    std::cout << res << "\n";

    return 0;
}