#include <iostream>
#include <vector>
using namespace std;

const int N = 200200;
const int mod = 1e9 + 7;

int k;
int ban[10][10][10], slf[10][10];
int used[10], cnt[10][10];
int res;
vector<pair<int, int>> v[N], g[N];
int sv[10][10];

void rec(int i) {
  if (i == k + 1) {
    res += 1;
    return;
  }
  for (int j = 0; j < i; j++) {
    if (used[i] & (1 << j) || slf[i][j])
      continue;
    for (int h = i + 1; h <= k; h++) {
      sv[i][h] = used[h];
      used[h] |= ban[i][j][h];
    }
    rec(i + 1);
    for (int h = i + 1; h <= k; h++) {
      used[h] = sv[i][h];
    }
  }
}

int main() {
  ios_base::sync_with_stdio(0);
  
  int n, m;
  cin >> n >> m >> k;

  // Initialize arrays
  for (int i = 0; i < 10; i++) {
    for (int j = 0; j < 10; j++) {
      for (int h = 0; h < 10; h++) {
        ban[i][j][h] = 0;
      }
      slf[i][j] = 0;
      cnt[i][j] = 0;
    }
    used[i] = 0;
  }

  // Read input
  for (int i = 1; i <= m; i++) {
    int x, y, z;
    cin >> x >> y >> z;
    v[x].push_back({z, y});
  }

  // Optimize vector operations
  for (int i = 1; i <= n; i++) {
    int size = v[i].size();
    for (int j = 0; j < size; j++) {
      g[v[i][j].second].push_back({size, j});
    }
  }

  // Counting sort
  for (int i = 1; i <= n; i++) {
    int size = g[i].size();
    int count[101] = {0};
    for (int j = 0; j < size; j++) {
      count[g[i][j].first]++;
    }
    for (int j = 1; j <= 100; j++) {
      count[j] += count[j - 1];
    }
    vector<pair<int, int>> sorted(size);
    for (int j = size - 1; j >= 0; j--) {
      sorted[--count[g[i][j].first]] = g[i][j];
    }
    g[i] = sorted;
  }

  // Process g vectors
  for (int i = 1; i <= n; i++) {
    if (g[i].empty()) {
      cout << 0 << "\n";
      return 0;
    }
    int size = g[i].size();
    vector<pair<int, int>> newG;
    newG.push_back(g[i][0]);
    for (int j = 1; j < size; j++) {
      if (g[i][j] == g[i][j - 1]) {
        slf[g[i][j].first][g[i][j].second] = true;
      } else {
        newG.push_back(g[i][j]);
      }
    }
    g[i] = newG;
    for (int j = 0; j < size; j++) {
      cnt[g[i][j].first][g[i][j].second] += 1;
      for (int h = 0; h < size; h++) {
        if (h != j) {
          ban[g[i][j].first][g[i][j].second][g[i][h].first] |= (1 << g[i][h].second);
        }
      }
    }
  }

  // Recursively calculate result
  rec(1);

  cout << res << "\n";

  return 0;
}