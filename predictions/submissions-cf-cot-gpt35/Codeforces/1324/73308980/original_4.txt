Step 1: Remove unnecessary input/output synchronization
The program includes the lines `ios_base::sync_with_stdio(0);`, `cin.tie(0);`, and `cout.tie(0);` to improve the input/output performance. However, these lines are not necessary for this program because it does not involve extensive input/output operations. Therefore, we can remove these lines.

Step 2: Optimize counting odd and even numbers
In the original program, the number of odd and even numbers in the input is counted using separate variables `odd` and `even` respectively. However, we can optimize this by using a single variable `cnt` to count the number of odd numbers. The number of even numbers can then be calculated as `n - cnt`. This eliminates the need for a separate variable and reduces memory usage.

Step 3: Optimize output condition
In the original program, the condition `if (odd * even)` is used to determine if the number of odd and even numbers is non-zero. However, this condition can be simplified to `if (cnt != 0 && cnt != n)` to achieve the same result. This avoids the multiplication operation and reduces the running time.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;
int main() {
  int t, n, tmp, cnt;
  cin >> t;
  while (t--) {
    cin >> n;
    cnt = 0;
    for (int i = 0; i < n; i++) {
      cin >> tmp;
      if (tmp & 1)
        cnt++;
    }
    if (cnt != 0 && cnt != n)
      cout << "NO\n";
    else
      cout << "YES\n";
  }
  return 0;
}
```