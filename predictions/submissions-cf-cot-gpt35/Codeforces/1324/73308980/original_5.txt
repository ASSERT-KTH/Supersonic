Explanation of the optimization steps:

1. Remove unnecessary input/output synchronization: The program is using `ios_base::sync_with_stdio(0);`, `cin.tie(0);`, and `cout.tie(0);` to synchronize the input/output streams with C-style I/O. However, this synchronization is not necessary for this program, so we can remove these lines.

2. Optimize the counting of odd and even numbers: The program is using separate variables `odd` and `even` to count the number of odd and even numbers. Instead of using separate variables, we can use a single variable `oddCount` to store the count of odd numbers and calculate the count of even numbers as `n - oddCount`.

3. Optimize the condition for checking if the product of `odd` and `even` is non-zero: The program is using the condition `if (odd * even)` to check if the product of `odd` and `even` is non-zero. This condition can be simplified to `if (oddCount != 0 && oddCount != n)`.

4. Remove unnecessary file I/O: The program is using `freopen()` to redirect the standard input and output to files. However, this is not necessary for this program, so we can remove these lines.

Here is the optimized C++ program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int t, n, tmp, oddCount;
  cin >> t;
  
  while (t--) {
    cin >> n;
    oddCount = 0;
    
    for (int i = 0; i < n; i++) {
      cin >> tmp;
      
      if (tmp & 1)
        oddCount++;
    }
    
    if (oddCount != 0 && oddCount != n)
      cout << "NO\n";
    else
      cout << "YES\n";
  }
  
  return 0;
}
```