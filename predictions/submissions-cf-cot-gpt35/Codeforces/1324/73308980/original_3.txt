Explanation of the optimization steps:

1. Remove unnecessary includes: The program only uses the `iostream` library, so we can remove the unused `#include` statements.

2. Remove unnecessary namespace: The program does not use any specific features from the `std` namespace, so we can remove the `using namespace std` statement.

3. Use `'\n'` instead of `std::endl`: The `std::endl` function also flushes the output stream, which can decrease performance. We can use the newline character `'\n'` instead to improve performance.

4. Remove unnecessary input/output optimizations: The `ios_base::sync_with_stdio(0)`, `cin.tie(0)`, and `cout.tie(0)` statements are used to synchronize the C++ input/output streams with the C standard library streams, but they are not necessary for this program. We can remove these statements to improve performance.

5. Optimize the counting of odd and even numbers: Instead of using separate variables `odd` and `even` to count odd and even numbers, we can use a single variable `count` to keep track of the difference between the number of odd and even numbers. If the `count` is non-zero, then the answer is "NO". Otherwise, the answer is "YES".

6. Remove unnecessary file I/O operations: The code includes file I/O operations to read from "input.txt" and write to "output.txt". Since the problem statement does not mention any file I/O, we can remove these operations to simplify the program.

Optimized program:

```cpp
#include <iostream>

int main() {
  int t, n, tmp, count;
  std::cin >> t;
  while (t--) {
    std::cin >> n;
    count = 0;
    for (int i = 0; i < n; i++) {
      std::cin >> tmp;
      if (tmp & 1)
        count++;
      else
        count--;
    }
    if (count)
      std::cout << "NO\n";
    else
      std::cout << "YES\n";
  }
  return 0;
}
```