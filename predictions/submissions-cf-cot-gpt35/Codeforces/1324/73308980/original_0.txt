Explanation of the optimization steps:

1. Remove unnecessary headers: The `<iostream>` header is the only one needed for this program, so we can remove the unused `<cstdio>` header.

2. Remove unused variables: The variables `odd` and `even` are only used within the loop, so we can move their declarations inside the loop.

3. Simplify the logic: Instead of counting odd and even numbers separately, we can use a single variable `count` to keep track of the count of odd numbers. We can then calculate the count of even numbers by subtracting `count` from `n`.

4. Remove unnecessary I/O manipulations: The `ios_base::sync_with_stdio(0)` and the `cin.tie(0)` calls are unnecessary for this program, so we can remove them.

5. Optimize input/output: Instead of using `cin` and `cout` for every input and output, we can use `scanf` and `printf`, which are faster for large inputs/outputs.

6. Simplify output logic: Instead of checking if `odd * even` is non-zero and then printing "NO" or "YES" accordingly, we can directly check if `count` or `n - count` is zero and print "NO" or "YES" accordingly.

Optimized code:

```cpp
#include <iostream>

int main() {
  int t, n, tmp;
  scanf("%d", &t);
  while (t--) {
    scanf("%d", &n);
    int count = 0;
    for (int i = 0; i < n; i++) {
      scanf("%d", &tmp);
      if (tmp & 1)
        count++;
    }
    if (count == 0 || count == n)
      printf("YES\n");
    else
      printf("NO\n");
  }
  return 0;
}
```