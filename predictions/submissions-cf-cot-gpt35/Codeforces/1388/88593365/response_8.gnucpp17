The given C/C++ program can be optimized in the following steps:

1. Remove unnecessary includes: The program includes unnecessary headers that are not used in the code. We can remove the following lines:
   ```cpp
   #include <bits/stdc++.h>
   #include <ext/pb_ds/assoc_container.hpp>
   #include <ext/pb_ds/tree_policy.hpp>
   ```

2. Remove unnecessary typedefs: The program defines unnecessary typedefs for `ll`, `pii`, and `pll` types. We can remove the following lines:
   ```cpp
   typedef long long ll;
   typedef pair<int, int> pii;
   typedef pair<ll, ll> pll;
   ```

3. Remove unnecessary macros: The program defines several macros that are not used in the code. We can remove the following lines:
   ```cpp
   #define CS custom_hash
   #define vi vector
   #define loop(i, a, b) for (ll i = a; i < b; i++)
   #define For(i, n) for (int i = 0; i < (ll)n; i++)
   #define Rev(i, n) for (int i = n - 1; i >= 0; i--)
   #define Rep(i, n) for (int i = 1; i <= n; ++i)
   #define pb push_back
   #define em emplace_back
   #define all(v) (v).begin(), (v).end()
   #define mems(x, y) memset(x, y, sizeof(x))
   #define sz(x) (int)(x).size()
   #define mp(a, b) make_pair(a, b)
   #define pf(n)                                                                  \
     {                                                                            \
       cout << n << "\n";                                                         \
       return;                                                                    \
     }
   #define po(n) cout << n << "\n "
   #define ar array
   #define endl "\n"
   #define PI acos(-1)
   #define umap unordered_map
   #define gmap gp_hash_table
   #define F_OR(i, a, b, s)                                                       \
     for (int i = (a); ((s) > 0 ? i < (b) : i > (b)); i += (s))
   #define F_OR1(e) F_OR(i, 0, e, 1)
   #define F_OR2(i, e) F_OR(i, 0, e, 1)
   #define F_OR3(i, b, e) F_OR(i, b, e, 1)
   #define F_OR4(i, b, e, s) F_OR(i, b, e, s)
   #define GET5(a, b, c, d, e, ...) e
   #define F_ORC(...) GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1)
   #define FOR(...) F_ORC(__VA_ARGS__)(__VA_ARGS__)
   #define EACH(x, a) for (auto &x : a)
   ```

4. Remove unnecessary debug and print functions: The program defines several debug and print functions that are not used in the code. We can remove the following lines:
   ```cpp
   void __print(int x) { cerr << x; }
   void __print(long x) { cerr << x; }
   void __print(long long x) { cerr << x; }
   void __print(unsigned x) { cerr << x; }
   void __print(unsigned long x) { cerr << x; }
   void __print(unsigned long long x) { cerr << x; }
   void __print(float x) { cerr << x; }
   void __print(double x) { cerr << x; }
   void __print(long double x) { cerr << x; }
   void __print(char x) { cerr << '\'' << x << '\''; }
   void __print(const char *x) { cerr << '\"' << x << '\"'; }
   void __print(const string &x) { cerr << '\"' << x << '\"'; }
   void __print(bool x) { cerr << (x ? "true" : "false"); }
   template <typename T, typename V> void __print(const pair<T, V> &x) {
     cerr << '{';
     __print(x.first);
     cerr << ',';
     __print(x.second);
     cerr << '}';
   }
   template <typename T> void __print(const T &x) {
     int f = 0;
     cerr << '{';
     for (auto &i : x)
       cerr << (f++ ? "," : ""), __print(i);
     cerr << "}";
   }
   void _print() { cerr << "]\n"; }
   template <typename T, typename... V> void _print(T t, V... v) {
     __print(t);
     if (sizeof...(v))
       cerr << ", ";
     _print(v...);
   }
   template <typename T, typename V> void mdebug(map<T, vi<V>> m) {
     for (auto x : m) {
       cerr << x.F << " : [ ";
       for (auto c : x.S)
         cerr << c << " ";
       cerr << "]" << endl;
     }
   }
   #define debug(x...)                                                            \
     cerr << "[" << #x << "] = [";                                                \
     _print(x)
   #define debug(x...)                                                            \
     cerr << "[" << #x << "] = [";                                                \
     _print(x)
   template <class T>
   using oset =
       tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>
   ```

5. Remove unnecessary template functions: The program defines several template functions for reading and converting data types to strings. We can remove the following lines:
   ```cpp
   template <class A> void read(vi<A> &v);
   template <class A, size_t S> void read(ar<A, S> &a);
   template <class T> void read(T &x) { cin >> x; }
   void read(double &d) {
     string t;
     read(t);
     d = stod(t);
   }
   void read(long double &d) {
     string t;
     read(t);
     d = stold(t);
   }
   template <class H, class... T> void read(H &h, T &... t) {
     read(h);
     read(t...);
   }
   template <class A> void read(vi<A> &x) {
     EACH(a, x)
     read(a);
   }
   template <class A, size_t S> void read(array<A, S> &x) {
     EACH(a, x)
     read(a);
   }
   string to_string(char c) { return string(1, c); }
   string to_string(bool b) { return b ? "true" : "false"; }
   string to_string(const char *s) { return string(s); }
   string to_string(string s) { return s; }
   string to_string(vi<bool> v) {
     string res;
     FOR(sz(v))
     res += char('0' + v[i]);
     return res;
   }
   template <size_t S> string to_string(bitset<S> b) {
     string res;
     FOR(S)
     res += char('0' + b[i]);
     return res;
   }
   template <class T> string to_string(T v) {
     bool f = 1;
     string res;
     EACH(x, v) {
       if (!f)
         res += ' ';
       f = 0;
       res += to_string(x);
     }
     return res;
   }
   template <class A> void pff(A x) { cout << to_string(x); }
   template <class H, class... T> void pff(const H &h, const T &... t) {
     pff(h);
     pff(t...);
   }
   void print() { pff("\n"); }