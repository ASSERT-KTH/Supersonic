#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

void solve() {
  int n;
  cin >> n;
  vector<int> a(n), b(n);
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  for (int i = 0; i < n; i++) {
    cin >> b[i];
  }
  vector<vector<int>> adj(n), adj2(n);
  vector<pair<int, int>> e;
  for (int i = 0; i < n; i++) {
    if (b[i] != -1) {
      e.push_back({i, b[i] - 1});
      adj[i].push_back(b[i] - 1);
      adj2[b[i] - 1].push_back(i);
    }
  }

  vector<int> d(n);
  queue<int> qu;
  for (int i = 0; i < n; i++) {
    d[i] = adj2[i].size();
    if (d[i] == 0) {
      qu.push(i);
    }
  }
  
  vector<int> ans;
  while (!qu.empty()) {
    int u = qu.front();
    qu.pop();
    for (int v : adj[u]) {
      --d[v];
      if (d[v] == 0) {
        qu.push(v);
      }
    }
    ans.push_back(u);
  }
  
  if (ans.size() < n) {
    ans.clear();
  }

  int res = 0;
  vector<int> res1, rest;
  for (int x : ans) {
    if (a[x] > 0) {
      res1.push_back(x);
      res += a[x];
      if (b[x] >= 0) {
        a[b[x] - 1] += a[x];
      }
    } else {
      rest.push_back(x);
    }
  }
  reverse(rest.begin(), rest.end());
  for (int x : rest) {
    res += a[x];
    res1.push_back(x);
  }
  
  cout << res << endl;
  for (int i = 0; i < res1.size(); i++) {
    cout << res1[i] + 1 << " ";
  }
  cout << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int T = 1;
  for (int _ = 0; _ < T; _++) {
    solve();
  }
  return 0;
}