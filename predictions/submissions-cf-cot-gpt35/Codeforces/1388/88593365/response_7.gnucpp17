#include <iostream>
#include <vector>
#include <queue>
using namespace std;

struct digraph {
  int n;
  vector<vector<int>> adj;
  digraph(int _n, vector<array<int, 2>>& e) {
    n = _n;
    adj = vector<vector<int>>(n);
    for (auto& a : e) {
      adj[a[0]].push_back(a[1]);
    }
  }
  vector<int> toposort() {
    vector<int> ans;
    vector<int> d(n, 0);
    for (int u = 0; u < n; u++) {
      for (int v : adj[u]) {
        d[v]++;
      }
    }
    queue<int> qu;
    for (int u = 0; u < n; u++) {
      if (d[u] == 0) {
        qu.push(u);
      }
    }
    while (!qu.empty()) {
      int u = qu.front();
      qu.pop();
      ans.push_back(u);
      for (int v : adj[u]) {
        d[v]--;
        if (d[v] == 0) {
          qu.push(v);
        }
      }
    }
    if (ans.size() < n) {
      ans.clear();
    }
    return ans;
  }
};

void solve() {
  int n;
  cin >> n;
  vector<int> a(n), b(n);
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  for (int i = 0; i < n; i++) {
    cin >> b[i];
  }
  vector<array<int, 2>> e;
  for (int i = 0; i < n; i++) {
    if (b[i] != -1) {
      e.push_back({i, b[i] - 1});
    }
  }
  digraph g(n, e);
  int ans = 0;
  vector<int> ans1, d;
  for (int i = 0; i < n; i++) {
    int x = i;