#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>

using namespace std;

void solve() {
  int n;
  cin >> n;
  vector<int> a(n), b(n);
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  for (int i = 0; i < n; i++) {
    cin >> b[i];
  }
  
  vector<vector<int>> adj(n), adj2(n);
  vector<int> d(n);
  
  for (int i = 0; i < n; i++) {
    if (b[i] != -1) {
      adj[i].push_back(b[i] - 1);
      adj2[b[i] - 1].push_back(i);
      d[b[i] - 1]++;
    }
  }
  
  stack<int> s;
  for (int i = 0; i < n; i++) {
    if (d[i] == 0) {
      s.push(i);
    }
  }
  
  vector<int> ans1, d;
  int ans = 0;
  
  while (!s.empty()) {
    int u = s.top();
    s.pop();
    
    if (a[u] > 0) {
      ans1.push_back(u);
      ans += a[u];
      
      if (b[u] != -1) {
        a[b[u] - 1] += a[u];
      }
    } else {
      d.push_back(u);
    }
    
    for (int v : adj[u]) {
      d[v]--;
      if (d[v] == 0) {
        s.push(v);
      }
    }
  }
  
  reverse(d.begin(), d.end());
  ans1.insert(ans1.end(), d.begin(), d.end());
  
  cout << ans << endl;
  for (int i = 0; i < n; i++) {
    cout << ans1[i] + 1 << " ";
  }
  cout << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int T = 1;
  while (T--) {
    solve();
  }
  
  return 0;
}