#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;

vector<string> split(const string& s, char c) {
  vector<string> v;
  size_t start = 0, end;
  while ((end = s.find(c, start)) != string::npos) {
    v.emplace_back(s.substr(start, end - start));
    start = end + 1;
  }
  v.emplace_back(s.substr(start));
  return v;
}

template <class T1, class T2>
ostream& operator<<(ostream& os, const pair<T1, T2>& p) {
  os << '{' << p.first << ", " << p.second << '}';
  return os;
}

template <typename C, typename T = decay_t<decltype(*begin(declval<C>()))>,
          typename enable_if<!is_same<C, string>::value>::type* = nullptr>
ostream& operator<<(ostream& os, const C& container) {
  os << '[';
  auto it = container.begin();
  if (it != container.end()) {
    os << *it;
    ++it;
  }
  for (; it != container.end(); ++it) {
    os << ", " << *it;
  }
  os << ']';
  return os;
}

void test_cases() {
  int n, m;
  cin >> n >> m;
  vector<pair<int, vector<int>>> a(m);
  map<int, int> fr;
  for (int i = 0; i < m; i++) {
    a[i].first = i;
    int x;
    cin >> x;
    a[i].second.resize(x);
    for (auto& x : a[i].second) {
      cin >> x;
      fr[x]++;
      fr[x] = min(fr[x], m / 2);
    }
  }
  sort(a.begin(), a.end(), [&](const auto& a, const auto& b) {
    return a.second.size() < b.second.size();
  });
  vector<int> res(m, -1);
  for (const auto& [idx, v] : a) {
    int mn = 1e18;
    for (int x : v) {
      if (fr[x] > 0) {
        mn = min(mn, fr[x]);
      }
    }
    if (mn == 1e18) {
      cout << "NO\n";
      return;
    }
    int per = -1;
    for (int x : v) {
      if (mn == fr[x]) {
        per = x;
        break;
      }
    }
    res[idx] = per;
    fr[per]--;
  }
  cout << "YES\n";
  for (int i = 0; i < m; i++) {
    cout << res[i] << " ";
  }
  cout << "\n";
}

int main() {
  int tt = 1;
  cin >> tt;
  for (int T = 1; T <= tt; T++) {
    cout << endl << "Case #" << T << ":\n";
    test_cases();
  }
  return 0;
}