#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma comment(linker, "/stack:200000000")

#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;

const int MAXN = 301;
int spf[MAXN];
vector<int> fac;

void sieve() {
    spf[1] = 1;
    for (int i = 2; i < MAXN; i += 2)
        spf[i] = 2;
    for (int i = 3; i < MAXN; i += 2)
        spf[i] = i;
    for (int i = 3; i * i < MAXN; i += 2) {
        if (spf[i] == i) {
            for (int j = i * i; j < MAXN; j += i) {
                if (spf[j] == j)
                    spf[j] = i;
            }
        }
    }
}

map<int, int> getfactor(int a) {
    map<int, int> m;
    while (a > 1) {
        m[spf[a]]++;
        a /= spf[a];
    }
    return m;
}

int power(int x, int y, int p) {
    int res = 1;
    while (y > 0) {
        if (y & 1)
            res = (res * x) % p;
        y = y >> 1;
        x = (x * x) % p;
    }
    return res;
}

int gcd(int a, int b) {
    while (a != 0) {
        int temp = a;
        a = b % a;
        b = temp;
    }
    return b;
}

int inverse(int a, int p) {
    int m0 = p;
    int y = 0, x = 1;

    if (p == 1)
        return 0;

    while (a > 1) {
        int q = a / p;
        int t = p;

        p = a % p;
        a = t;
        t = y;

        y = x - q * y;
        x = t;
    }

    if (x < 0)
        x += m0;

    return x;
}

void calculate_factorials(int n, int p) {
    fac.resize(n + 1);
    fac[0] = 1;
    for (int i = 1; i <= n; i++)
        fac[i] = (fac[i - 1] * i) % p;
}

int ncr(int n, int r, int p) {
    if (r > n)
        return 0;
    int result = (fac[n] * inverse(fac[r], p)) % p;
    result = (result * inverse(fac[n - r], p)) % p;
    return result;
}

void solve() {
    int n, k;
    cin >> n >> k;
    string s;
    cin >> s;
    int m = 2 * n;

    vector<int> dp(m + 1, 1e18);
    vector<int> lazy(m + 1, 1e18);

    for (int i = 1; i <= n; i++) {
        if (i == 1)
            dp[i] = i;
        else
            dp[i] = dp[i - 1] + i;

        if (i <= k + 1 && s[i - 1] == '1')
            lazy[i + 1] = i;
        else if (s[i - 1] == '1' && i >= k + 2) {
            int gg = dp[i - k - 1];
            lazy[i - k] = gg + i;
        }
    }

    cout << dp[n] << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    sieve();
    calculate_factorials(2000000, mod);

    solve();

    return 0;
}