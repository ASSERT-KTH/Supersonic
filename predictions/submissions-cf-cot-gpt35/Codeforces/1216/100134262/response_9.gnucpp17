#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;

const int MAXN = 301;
int spf[MAXN];
int dp[4000000], lazy[4000000];

void sieve() {
    memset(spf, 0, sizeof(spf));
    for (int i = 2; i < MAXN; i++) {
        if (spf[i] == 0) {
            spf[i] = i;
            for (int j = i * i; j < MAXN; j += i) {
                if (spf[j] == 0)
                    spf[j] = i;
            }
        }
    }
}

int power(int x, int y, int p) {
    int res = 1;
    while (y > 0) {
        if (y & 1)
            res = (res * x) % p;
        y = y >> 1;
        x = (x * x) % p;
    }
    return res;
}

int gcd(int a, int b) {
    if (a == 0)
        return b;
    return gcd(b % a, a);
}

int inverse(int a, int p) {
    return power(a, p - 2, p);
}

int ncr(int n, int r, int p) {
    if (r > n)
        return 0;
    if (r == 0)
        return 1;
    int num = 1, den = 1;
    for (int i = 0; i < r; i++) {
        num = (num * (n - i)) % p;
        den = (den * (i + 1)) % p;
    }
    return (num * inverse(den, p)) % p;
}

void push(int id, int l, int r) {
    if (lazy[id] != 1e18) {
        dp[id] = min(dp[id], lazy[id]);
        if (l != r) {
            lazy[id << 1] = min(lazy[id << 1], lazy[id]);
            lazy[id << 1 | 1] = min(lazy[id << 1 | 1], lazy[id]);
        }
        lazy[id] = 1e18;
    }
}

void upd(int id, int l, int r, int lq, int rq, int val) {
    push(id, l, r);
    if (l > r || l > rq || r < lq)
        return;
    if (lq <= l and r <= rq) {
        lazy[id] = min(lazy[id], val);
        push(id, l, r);
        return;
    }
    int mid = (l + r) >> 1;
    upd(id << 1, l, mid, lq, rq, val);
    upd(id << 1 | 1, mid + 1, r, lq, rq, val);
    dp[id] = min(dp[id << 1], dp[id << 1 | 1]);
}

int get(int id, int l, int r, int lq, int rq) {
    push(id, l, r);
    if (l > r || l > rq || r < lq)
        return 1e18;
    if (lq <= l and r <= rq)
        return dp[id];
    int mid = (l + r) >> 1;
    return min(get(id << 1, l, mid, lq, rq),
               get(id << 1 | 1, mid + 1, r, lq, rq));
}

void solve() {
    memset(dp, 0, sizeof(dp));
    memset(lazy, 0, sizeof(lazy));
    int n, k;
    cin >> n >> k;
    string s;
    cin >> s;
    int m = 2 * n;
    for (int i = 1; i <= n; i++) {
        if (i == 1)
            upd(1, 1, m, i, i, i);
        else
            upd(1, 1, m, i, i, get(1, 1, m, i - 1, i - 1) + i);
        if (i <= k + 1 && s[i - 1] == '1')
            upd(1, 1, m, i + 1, i + k, i);
        else if (s[i - 1] == '1' && i >= k + 2) {
            int gg = get(1, 1, m, i - k - 1, i);
            upd(1, 1, m, i - k, i + k, gg + i);
        }
    }
    cout << get(1, 1, m, n, n) << endl;
}

int main() {
    int test = 1;
    while (test--) {
        solve();
    }
    return 0;
}