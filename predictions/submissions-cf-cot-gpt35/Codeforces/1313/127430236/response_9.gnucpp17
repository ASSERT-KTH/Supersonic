#include <iostream>
#include <cstring>
#define int long long

const int N = 5e5 + 9;
int a[N], node[4 * N], l[N], r[N], res[N];

void update(int id, int l, int r, int pos, int x) {
  if (l > pos || r < pos)
    return;
  if (l == r) {
    node[id] = x;
    return;
  }
  int mid = (l + r) / 2;
  update(id * 2, l, mid, pos, x);
  update(id * 2 + 1, mid + 1, r, pos, x);
  node[id] = std::min(node[id * 2], node[id * 2 + 1]);
}

int find(int id, int l, int r, int tr, int ph, int x) {
  if (tr > ph || l > ph || r < tr || node[id] > x)
    return 0;
  if (l == r)
    return r;
  int mid = (l + r) / 2;
  if (l >= tr && r <= ph) {
    if (node[id] > x)
      return 0;
    if (node[id * 2 + 1] <= x)
      return find(id * 2 + 1, mid + 1, r, tr, ph, x);
    else
      return find(id * 2, l, mid, tr, ph, x);
  }
  return std::max(find(id * 2, l, mid, tr, ph, x),
             find(id * 2 + 1, mid + 1, r, tr, ph, x));
}

int32_t main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(0);
  int n;
  std::cin >> n;
  for (int i = 1; i <= n; i++)
    std::cin >> a[i];

  int minn = a[1];
  l[1] = 0;
  for (int i = 2; i <= n; i++) {
    if (minn > a[i]) {
      minn = a[i];
      l[i] = 0;
    } else {
      l[i] = l[i - 1] + a[i] * (i - find(1, 1, n, 1, i - 1, a[i]));
    }
    update(1, 1, n, i, a[i]);
  }

  minn = a[n];
  r[n] = 0;
  for (int i = n - 1; i >= 1; i--) {
    if (minn > a[i]) {
      minn = a[i];
      r[i] = 0;
    } else {
      r[i] = r[i + 1] + a[i] * (find(1, 1, n, i + 1, n, a[i]) - i);
    }
    update(1, 1, n, i, a[i]);
  }

  int sum = 0, pos;
  for (int i = 1; i <= n; i++) {
    if (sum < l[i] + r[n - i + 1] - a[i]) {
      sum = l[i] + r[n - i + 1] - a[i];
      pos = i;
    }
  }

  minn = a[pos];
  res[pos] = a[pos];
  for (int i = pos - 1; i >= 1; i--) {
    minn = std::min(minn, a[i]);
    res[i] = minn;
  }

  minn = a[pos];
  for (int i = pos + 1; i <= n; i++) {
    minn = std::min(minn, a[i]);
    res[i] = minn;
  }

  for (int i = 1; i <= n; i++)
    std::cout << res[i] << " ";
  
  return 0;
}