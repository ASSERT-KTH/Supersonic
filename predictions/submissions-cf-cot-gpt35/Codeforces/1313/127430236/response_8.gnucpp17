#include <iostream>
#include <algorithm>

typedef long long int ll;
const int N = 5e5 + 9;
int a[N], node[4 * N], l[N], r[N], res[N];

void update(int id, int l, int r, int pos, int x) {
  while (l != r) {
    int mid = (l + r) / 2;
    if (pos <= mid) {
      id = id * 2;
      r = mid;
    } else {
      id = id * 2 + 1;
      l = mid + 1;
    }
  }
  node[id] = x;
}

int find(int id, int l, int r, int tr, int ph, int x) {
  if (l > ph || r < tr || node[id] > x)
    return 0;
  
  while (l != r) {
    int mid = (l + r) / 2;
    if (node[id * 2] <= x) {
      id = id * 2 + 1;
      l = mid + 1;
    } else {
      id = id * 2;
      r = mid;
    }
  }
  
  return r;
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(0);

  int n;
  std::cin >> n;

  for (int i = 1; i <= n; i++)
    std::cin >> a[i];

  int id = 0;
  for (int i = 1; i <= n; i++) {
    id = find(1, 1, n, 1, i - 1, a[i]);
    update(1, 1, n, i, a[i]);
    l[i] = l[id] + a[i] * (i - id);
  }

  std::reverse(a + 1, a + 1 + n);

  for (int i = 1; i <= n; i++) {
    id = find(1, 1, n, 1, i - 1, a[i]);
    update(1, 1, n, i, a[i]);
    r[i] = r[id] + a[i] * (i - id);
  }

  std::reverse(a + 1, a + 1 + n);

  int sum = 0, pos;

  for (int i = 1; i <= n; i++) {
    int currentSum = l[i] + r[n - i + 1] - a[i];
    if (currentSum > sum) {
      sum = currentSum;
      pos = i;
    }
  }

  int minn = a[pos];
  res[pos] = a[pos];

  for (int i = pos - 1; i >= 1; i--) {
    minn = std::min(minn, a[i]);
    res[i] = minn;
  }

  minn = a[pos];

  for (int i = pos + 1; i <= n; i++) {
    minn = std::min(minn, a[i]);
    res[i] = minn;
  }

  for (int i = 1; i <= n; i++)
    std::cout << res[i] << " ";

  return 0;
}