#include <iostream>
#include <cstring>
using namespace std;

const int N = 5e5 + 9;
int a[N], node[4 * N], l[N], r[N], res[N];

void update(int id, int l, int r, int pos, int x) {
  if (l > pos || r < pos)
    return;
  if (l == r) {
    node[id] = x;
    return;
  }
  int mid = (l + r) >> 1;
  update(id * 2, l, mid, pos, x);
  update(id * 2 + 1, mid + 1, r, pos, x);
  node[id] = min(node[id * 2], node[id * 2 + 1]);
}

int find(int id, int l, int r, int tr, int ph, int x) {
  if (tr > ph || l > ph || r < tr || node[id] > x)
    return 0;
  if (l == r)
    return r;
  int mid = (l + r) >> 1;
  if (node[id * 2 + 1] <= x)
    return find(id * 2 + 1, mid + 1, r, tr, ph, x);
  else
    return find(id * 2, l, mid, tr, ph, x);
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  
  int n;
  cin >> n;
  for (int i = 1; i <= n; ++i)
    cin >> a[i];
  
  int id = 0;
  for (int i = 1; i <= n; ++i) {
    id = find(1, 1, n, 1, i - 1, a[i]);
    update(1, 1, n, i, a[i]);
    l[i] = l[id] + a[i] * (i - id);
  }
  
  fill(node, node + 4 * N, 0);
  reverse(a + 1, a + 1 + n);
  for (int i = 1; i <= n; ++i) {
    id = find(1, 1, n, 1, i - 1, a[i]);
    update(1, 1, n, i, a[i]);
    r[i] = r[id] + a[i] * (i - id);
  }
  
  reverse(a + 1, a + 1 + n);
  int sum = 0, pos;
  for (int i = 1; i <= n; ++i)
    if (sum < l[i] + r[n - i + 1] - a[i]) {
      sum = l[i] + r[n - i + 1] - a[i];
      pos = i;
    }
  
  int minn = a[pos];
  res[pos] = a[pos];
  for (int i = pos - 1; i >= 1; --i) {
    minn = min(minn, a[i]);
    res[i] = minn;
  }
  
  minn = a[pos];
  for (int i = pos + 1; i <= n; ++i) {
    minn = min(minn, a[i]);
    res[i] = minn;
  }
  
  for (int i = 1; i <= n; ++i)
    cout << res[i] << " ";
  
  return 0;
}