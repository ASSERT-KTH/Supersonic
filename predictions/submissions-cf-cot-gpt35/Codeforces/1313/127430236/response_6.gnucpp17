#include <iostream>
using namespace std;

const int N = 5e5 + 9;
int a[N], node[4 * N];

void update(int id, int l, int r, int pos, int x) {
  if (l > pos || r < pos)
    return;
  if (l == r) {
    node[id] = x;
    return;
  }
  int mid = (l + r) / 2;
  update(id * 2, l, mid, pos, x);
  update(id * 2 + 1, mid + 1, r, pos, x);
  node[id] = min(node[id * 2], node[id * 2 + 1]);
}

int find(int id, int l, int r, int tr, int ph, int x) {
  while (tr <= ph && l <= ph && r >= tr && node[id] <= x) {
    if (l == r)
      return r;
    int mid = (l + r) / 2;
    if (node[id * 2 + 1] <= x) {
      id = id * 2 + 1;
      l = mid + 1;
    } else {
      id = id * 2;
      r = mid;
    }
  }
  return 0;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  
  int n;
  cin >> n;
  
  for (int i = 1; i <= n; i++)
    cin >> a[i];
  
  int id;
  int l[n+1], r[n+1], res[n+1];
  
  id = 0;
  for (int i = 1; i <= n; i++) {
    id = find(1, 1, n, 1, i - 1, a[i]);
    update(1, 1, n, i, a[i]);
    l[i] = l[id] + a[i] * (i - id);
  }
  
  for (int i = 1; i <= n; i++)
    node[i] = 0;
  
  id = 0;
  for (int i = n; i >= 1; i--) {
    id = find(1, 1, n, 1, n - i, a[i]);
    update(1, 1, n, i, a[i]);
    r[i] = r[id] + a[i] * (id - i);
  }
  
  int sum = 0, pos;
  for (int i = 1; i <= n; i++) {
    int current_sum = l[i] + r[n - i + 1] - a[i];
    if (current_sum > sum) {
      sum = current_sum;
      pos = i;
    }
  }
  
  int minn = a[pos];
  res[pos] = a[pos];
  
  for (int i = pos - 1; i >= 1; i--) {
    minn = min(minn, a[i]);
    res[i] = minn;
  }
  
  minn = a[pos];
  
  for (int i = pos + 1; i <= n; i++) {
    minn = min(minn, a[i]);
    res[i] = minn;
  }
  
  for (int i = 1; i <= n; i++)
    cout << res[i] << " ";
  
  return 0;
}