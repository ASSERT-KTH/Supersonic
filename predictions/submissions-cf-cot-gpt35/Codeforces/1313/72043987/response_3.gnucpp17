#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  long long n, m, k;
  cin >> n >> m >> k;
  
  vector<pair<long long, long long>> t(2 * n);
  for (int i = 0; i < n; ++i) {
    long long l, r;
    cin >> l >> r;
    t[2 * i] = {l, 1};
    t[2 * i + 1] = {r + 1, -1};
  }
  sort(t.begin(), t.end());
  
  vector<long long> states(1 << k, 0);
  long long sz = 0;
  long long pp = t[0].first, np;
  
  for (int i = 0; i < 2 * n; ++i) {
    np = t[i].first;
    
    if (t[i].second == -1) {
      --sz;
      for (int b = 0; b < (1 << sz); ++b) {
        long long exp1 = ((b >> sz) << (sz + 1)) + (b % (1 << sz));
        long long exp2 = exp1 + (1 << sz);
        states[b] = max(states[exp1] + (__builtin_popcount(exp1) % 2) * (np - pp),
                        states[exp2] + (__builtin_popcount(exp2) % 2) * (np - pp));
      }
    } else {
      for (int b = 0; b < (1 << sz); ++b) {
        states[b + (1 << sz)] = states[b] + (__builtin_popcount(b) % 2) * (np - pp);
      }
      ++sz;
    }
    pp = np;
  }
  
  cout << states[0] << " ";
  
  return 0;
}