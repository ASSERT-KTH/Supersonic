#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

typedef long long ll;

void solve() {}

const int MAX_N = 100000;
const int MAX_K = 20;

void printvec(const vector<ll>& v) {
  for (auto x : v) {
    cout << x << " ";
  }
  cout << endl;
}

bool cmp(const vector<ll>& a, const vector<ll>& b) {
  return a[0] < b[0];
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  ll n, m, k;
  scanf("%lld %lld %lld", &n, &m, &k);
  vector<vector<ll>> t(2 * n, vector<ll>(3));
  for (int i = 0; i < n; ++i) {
    ll l, r;
    scanf("%lld %lld", &l, &r);
    t[2 * i] = {l, 1, i};
    t[2 * i + 1] = {r + 1, -1, i};
  }
  sort(t.begin(), t.end(), cmp);

  vector<ll> states(1 << k, 0);
  vector<ll> newstates(1 << k, 0);
  ll sz = 0;
  ll pi = t[0][2], ni;
  ll pp = t[0][0], np;
  vector<ll> streams;
  for (int i = 0; i < 2 * n; ++i) {
    ni = t[i][2];
    np = t[i][0];
    if (t[i][1] == -1) {
      --sz;
      ll gi = 0;
      while (streams[gi] != ni) {
        ++gi;
      }
      for (int b = 0; b < (1 << sz); ++b) {
        ll exp1 = ((b >> gi) << (gi + 1)) + (b % (1 << gi));
        ll exp2 = exp1 + (1 << gi);
        newstates[b] =
            max(states[exp1] + (__builtin_popcount(exp1) % 2) * (np - pp),
                states[exp2] + (__builtin_popcount(exp2) % 2) * (np - pp));
      }
      states = newstates;
      streams.erase(streams.begin() + gi);
    } else {
      streams.push_back(ni);
      for (int b = 0; b < (1 << sz); ++b) {
        newstates[b] = states[b] + (__builtin_popcount(b) % 2) * (np - pp);
        newstates[b + (1 << sz)] =
            states[b] + (__builtin_popcount(b) % 2) * (np - pp);
      }
      states = newstates;
      ++sz;
    }
    pi = ni;
    pp = np;
  }
  printf("%lld ", states[0]);
}