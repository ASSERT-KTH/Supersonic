#include <iostream>
#include <vector>
using namespace std;

#define rep(i, n) for (int i = 0; i < n; ++i)

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n, m, k;
  cin >> n >> m >> k;
  
  vector<pair<int, int>> t(n);
  rep(i, n) {
    int l, r;
    cin >> l >> r;
    t[i] = {l, r};
  }
  
  vector<int> states(1 << k, 0);
  vector<int> newstates(1 << k, 0);
  int sz = 0;
  int pi = t[0].second, ni;
  int pp = t[0].first, np;
  vector<int> streams;
  
  rep(i, n) {
    ni = i;
    np = t[i].first;
    
    if (i > 0 && np != pp) {
      rep(b, 1 << sz) {
        int exp1 = ((b >> ni) << (ni + 1)) + (b % (1 << ni));
        int exp2 = exp1 + (1 << ni);
        
        newstates[b] = max(states[exp1] + (__builtin_popcount(exp1) % 2) * (np - pp),
                           states[exp2] + (__builtin_popcount(exp2) % 2) * (np - pp));
      }
      
      states = newstates;
    }
    
    if (t[i].second == -1) {
      --sz;
      int gi = 0;
      while (streams[gi] != ni) {
        ++gi;
      }
      
      streams.erase(streams.begin() + gi);
    } else {
      streams.push_back(ni);
      rep(b, 1 << sz) {
        newstates[b] = states[b] + (__builtin_popcount(b) % 2) * (np - pp);
        newstates[b + (1 << sz)] = states[b] + (__builtin_popcount(b) % 2) * (np - pp);
      }
      
      states = newstates;
      ++sz;
    }
    
    pi = ni;
    pp = np;
  }
  
  cout << states[0] << " ";
  
  return 0;
}