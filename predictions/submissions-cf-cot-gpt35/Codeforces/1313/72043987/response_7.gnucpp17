#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

#define rep(i, n) for (int i = 0; i < n; ++i)

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, m, k;
  cin >> n >> m >> k;

  vector<vector<int>> t(2 * n, vector<int>(3));

  rep(i, n) {
    int l, r;
    cin >> l >> r;
    t[2 * i] = {l, 1, i};
    t[2 * i + 1] = {r + 1, -1, i};
  }

  sort(t.begin(), t.end());

  vector<int> states(1 << k, 0);
  vector<int> newstates(1 << k, 0);
  int sz = 0;
  int pi = t[0][2], ni;
  int pp = t[0][0], np;
  vector<int> streams;

  rep(i, 2 * n) {
    ni = t[i][2];
    np = t[i][0];

    if (t[i][1] == -1) {
      --sz;
      int gi = 0;
      while (streams[gi] != ni) {
        ++gi;
      }

      rep(b, 1 << sz) {
        int exp1 = ((b >> gi) << (gi + 1)) + (b % (1 << gi));
        int exp2 = exp1 + (1 << gi);

        newstates[b] = max(states[exp1] + ((exp1 & (1 << gi)) ? (np - pp) : 0),
                           states[exp2] + ((exp2 & (1 << gi)) ? (np - pp) : 0));
      }

      states.swap(newstates);
      streams.erase(streams.begin() + gi);
    } else {
      streams.push_back(ni);

      rep(b, 1 << sz) {
        newstates[b] = states[b] + ((b & (1 << sz)) ? (np - pp) : 0);
        newstates[b + (1 << sz)] = states[b] + ((b & (1 << sz)) ? (np - pp) : 0);
      }

      states.swap(newstates);
      ++sz;
    }

    pi = ni;
    pp = np;
  }

  cout << states[0] << " ";

  return 0;
}