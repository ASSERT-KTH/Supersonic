#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <bitset>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  long long n, m, k;
  cin >> n >> m >> k;

  vector<vector<long long>> t(2 * n, vector<long long>(3));
  for (int i = 0; i < n; ++i) {
    long long l, r;
    cin >> l >> r;
    t[2 * i] = {l, 1, i};
    t[2 * i + 1] = {r + 1, -1, i};
  }

  sort(t.begin(), t.end());

  vector<long long> states(1 << k, 0);
  set<long long> streams;
  long long sz = 0;
  long long pi = t[0][2], ni;
  long long pp = t[0][0], np;

  for (int i = 0; i < 2 * n; ++i) {
    ni = t[i][2];
    np = t[i][0];

    if (t[i][1] == -1) {
      --sz;
      auto it = streams.find(ni);
      int gi = distance(streams.begin(), it);

      for (int b = 0; b < (1 << sz); ++b) {
        long long exp1 = ((b >> gi) << (gi + 1)) + (b % (1 << gi));
        long long exp2 = exp1 + (1 << gi);
        states[b] = max(states[exp1] + (bitset<32>(exp1).count() % 2) * (np - pp),
                        states[exp2] + (bitset<32>(exp2).count() % 2) * (np - pp));
      }

      streams.erase(it);
    } else {
      streams.insert(ni);

      for (int b = 0; b < (1 << sz); ++b) {
        states[b] += (bitset<32>(b).count() % 2) * (np - pp);
        states[b + (1 << sz)] += (bitset<32>(b).count() % 2) * (np - pp);
      }

      ++sz;
    }

    pi = ni;
    pp = np;
  }

  cout << states[0] << " ";

  return 0;
}