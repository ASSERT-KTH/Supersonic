Step 1: Remove unnecessary headers

The program includes several unnecessary headers that are not used in the code. We can remove these headers to improve compilation time and reduce memory usage.

Step 2: Remove unnecessary macros and functions

The program defines several macros and functions that are not used. We can remove these definitions to simplify the code and improve runtime performance.

Step 3: Optimize the dfs function

The dfs function is used to perform a depth-first search on the graph. However, it is currently implemented using recursion, which can be inefficient for large graphs. We can optimize the dfs function by implementing it iteratively using a stack to store the nodes to be visited.

Step 4: Optimize the bfs function

The bfs function is used to perform a breadth-first search on the graph. However, it is currently implemented using a queue, which can be inefficient for large graphs. We can optimize the bfs function by using a deque instead of a queue, which allows for efficient insertion and deletion at both ends.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const int N = 3e5 + 5;
vector<int> graph[N];
int par[N];
int n;
vector<int> vec;

void dfs() {
    stack<int> st;
    vector<bool> visited(n + 1, false);
    vector<int> dist(n + 1, 0);
    int maxDist = 0;
    int maxNode = 1;
    
    st.push(1);
    visited[1] = true;
    
    while (!st.empty()) {
        int u = st.top();
        st.pop();
        
        for (int v : graph[u]) {
            if (!visited[v]) {
                visited[v] = true;
                dist[v] = dist[u] + 1;
                
                if (dist[v] > maxDist) {
                    maxDist = dist[v];
                    maxNode = v;
                }
                
                st.push(v);
            }
        }
    }
    
    int v = maxNode;
    while (v != 1) {
        vec.push_back(v);
        v = par[v];
    }
    
    vec.push_back(1);
}

void bfs() {
    deque<int> Q;
    vector<int> d(n + 1, -1);
    
    for (int v : vec) {
        d[v] = 0;
        Q.push_back(v);
    }
    
    while (!Q.empty()) {
        int u = Q.front();
        Q.pop_front();
        
        for (int v : graph[u]) {
            if (d[v] == -1) {
                d[v] = d[u] + 1;
                Q.push_back(v);
            }
        }
    }
    
    int maxDist = 0;
    int maxNode = 1;
    
    for (int i = 1; i <= n; i++) {
        if (d[i] > maxDist) {
            maxDist = d[i];
            maxNode = i;
        }
    }
    
    cout << vec.size() - 1 + maxDist << endl;
    cout << vec[0] << " " << maxNode << " " << vec.back() << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    cin >> n;
    
    for (int i = 1; i < n; i++) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    
    dfs();
    
    if (vec.size() == n) {
        cout << n - 1 << endl;
        cout << vec[0] << " " << vec[1] << " " << vec.back() << endl;
    } else {
        bfs();
    }
    
    return 0;
}
```