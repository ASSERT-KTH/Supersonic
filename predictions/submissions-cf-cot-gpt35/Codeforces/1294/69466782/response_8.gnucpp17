#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const int N = 3e5 + 5;
vector<int> graph[N];
int par[N];
int n;
vector<int> vec;

int dfs(int u, int p = -1, int dist = 0) {
  par[u] = p;
  int maxDist = dist;
  for (auto v : graph[u]) {
    if (v == p)
      continue;
    maxDist = max(maxDist, dfs(v, u, dist + 1));
  }
  return maxDist;
}

void bfs() {
  queue<int> Q;
  vector<int> d(n + 1, -1);
  d[vec[0]] = 0;
  Q.push(vec[0]);
  while (!Q.empty()) {
    int u = Q.front();
    Q.pop();
    for (auto v : graph[u]) {
      if (d[v] == -1) {
        d[v] = d[u] + 1;
        Q.push(v);
      }
    }
  }
  int maxDist = 0;
  int maxDistNode = vec[0];
  for (int i = 1; i < vec.size(); i++) {
    if (d[vec[i]] > maxDist) {
      maxDist = d[vec[i]];
      maxDistNode = vec[i];
    }
  }
  cout << vec.size() - 1 + maxDist << endl;
  cout << vec[0] << " " << maxDistNode << " " << vec.back() << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  
  cin >> n;
  for (int i = 1; i < n; i++) {
    int u, v;
    cin >> u >> v;
    graph[u].push_back(v);
    graph[v].push_back(u);
  }
  int da = dfs(1);
  int df = dfs(da);
  int v = df;
  while (v != da) {
    vec.push_back(v);
    v = par[v];
  }
  vec.push_back(da);
  if (vec.size() == n) {
    cout << n - 1 << endl;
    cout << vec[0] << " " << vec[1] << " " << vec.back() << endl;
  } else {
    bfs();
  }
  return 0;
}