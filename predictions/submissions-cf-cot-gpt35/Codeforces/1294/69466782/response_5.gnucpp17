#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const int N = 3e5 + 5;
vector<int> graph[N];
int par[N];
int n;
vector<int> vec;

pair<int, int> dfs(int u) {
    par[u] = -1;
    int dist = 0;
    pair<int, int> result = make_pair(dist, u);
    
    stack<pair<int, int>> s;
    s.push(make_pair(u, dist));
    
    while (!s.empty()) {
        u = s.top().first;
        dist = s.top().second;
        s.pop();
        
        if (dist > result.first) {
            result = make_pair(dist, u);
        }
        
        for (int v : graph[u]) {
            if (v == par[u]) {
                continue;
            }
            par[v] = u;
            s.push(make_pair(v, dist + 1));
        }
    }
    
    return result;
}

void bfs() {
    int i = 0, j = vec.size() - 1;
    
    while (i < j) {
        int d1 = 0, d2 = 0;
        
        for (int v : graph[vec[i]]) {
            if (v != par[vec[i]]) {
                d1++;
            }
        }
        
        for (int v : graph[vec[j]]) {
            if (v != par[vec[j]]) {
                d2++;
            }
        }
        
        if (d1 > d2) {
            i++;
        } else {
            j--;
        }
    }
    
    cout << vec[0] << " " << vec[i] << " " << vec.back() << endl;
}

int main() {
    cin >> n;
    
    for (int i = 1; i < n; i++) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    
    auto da = dfs(1);
    auto df = dfs(da.second);
    int v = df.second;
    
    while (v != da.second) {
        vec.push_back(v);
        v = par[v];
    }
    
    vec.push_back(da.second);
    
    if (vec.size() == n) {
        cout << vec[0] << " " << vec[1] << " " << vec.back() << endl;
    } else {
        bfs();
    }
    
    return 0;
}