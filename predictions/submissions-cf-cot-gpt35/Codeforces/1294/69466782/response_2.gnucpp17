#include <iostream>
#include <vector>
#include <queue>
using namespace std;

typedef long long ll;

const ll mod = 1e9 + 7;

struct Node {
    int parent;
    int dist;
};

void dfs(const vector<vector<int>>& graph, vector<Node>& nodes, int u, int p) {
    nodes[u].parent = p;
    for (int v : graph[u]) {
        if (v == p) {
            continue;
        }
        nodes[v].dist = nodes[u].dist + 1;
        dfs(graph, nodes, v, u);
    }
}

void bfs(const vector<vector<int>>& graph, const vector<Node>& nodes, const vector<int>& vec, int n) {
    deque<int> Q;
    vector<int> d(n + 1, -1);
    for (int v : vec) {
        d[v] = 0;
        Q.push_back(v);
    }
    int ret = -1;
    int ret_node = -1;
    while (!Q.empty()) {
        int u = Q.front();
        Q.pop_front();
        for (int v : graph[u]) {
            if (d[v] == -1) {
                d[v] = d[u] + 1;
                Q.push_back(v);
                if (d[v] > ret) {
                    ret = d[v];
                    ret_node = v;
                }
            }
        }
    }
    cout << vec.size() - 1 + ret << endl;
    cout << vec[0] << " " << ret_node << " " << vec.back() << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int n;
    cin >> n;
    vector<vector<int>> graph(n + 1);
    for (int i = 1; i < n; i++) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }

    vector<Node> nodes(n + 1);
    dfs(graph, nodes, 1, -1);

    int max_dist = -1;
    int max_node = -1;
    for (int i = 1; i <= n; i++) {
        if (nodes[i].dist > max_dist) {
            max_dist = nodes[i].dist;
            max_node = i;
        }
    }

    vector<int> vec;
    int v = max_node;
    while (v != -1) {
        vec.push_back(v);
        v = nodes[v].parent;
    }

    if (vec.size() == n) {
        cout << n - 1 << endl;
        cout << vec[0] << " " << vec[1] << " " << vec.back() << endl;
    } else {
        bfs(graph, nodes, vec, n);
    }

    return 0;
}