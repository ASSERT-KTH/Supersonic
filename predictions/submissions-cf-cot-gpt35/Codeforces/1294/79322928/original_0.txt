To optimize the given program, we can make the following modifications:

1. Remove unnecessary header files: The program includes `<algorithm>`, `<bits/stdc++.h>`, and `<vector>` header files, but none of them are actually used in the program. We can remove these unnecessary header files.

2. Remove unnecessary defines: The program defines `ll`, `M`, `D`, and `PI`, but none of them are actually used in the program. We can remove these unnecessary defines.

3. Remove unnecessary `sortbysec` function: The `sortbysec` function is defined but not used in the program. We can remove this unnecessary function.

4. Remove unnecessary `tests` variable: The `tests` variable is initialized to 1 and decremented in a while loop, but the loop condition is always false. We can remove this unnecessary variable and the while loop.

5. Use a `vector` instead of an array: The program uses an array `a` to store frequency counts. We can use a `vector` instead, which will allow us to dynamically resize the vector as needed.

6. Use a `deque` instead of a `set`: The program uses a set `s` to store the available numbers. However, removing elements from a set has a time complexity of O(log n). We can use a `deque` instead, which will allow us to remove elements from the front of the deque in O(1) time complexity.

7. Avoid calculating modulus twice: The program calculates `y % x` twice, once to access the index of `a` and once to calculate `z`. We can calculate `y % x` once and store it in a variable to avoid redundant calculations.

8. Print the result without flushing the output stream: The program uses `cout` to print the result and then immediately flushes the output stream using `endl`. Flushing the output stream after every print statement can significantly slow down the program. We can remove the `endl` and flush the output stream only once after the loop.

Here is the optimized program:

```cpp
#include <iostream>
#include <deque>
#include <vector>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int q, x;
  cin >> q >> x;

  vector<int> a(x, 0);
  deque<int> s;

  for (int i = 0; i < max(2 * q, q + 100); i++)
    s.push_back(i);

  while (q-- > 0) {
    int y;
    cin >> y;

    int mod = y % x;
    int z = a[mod] * x + mod;

    s.erase(s.begin());
    a[mod]++;

    cout << s.front() << "\n";
  }

  cout << flush;

  return 0;
}
```

By making these optimizations, we have improved the running time and memory usage of the original program.