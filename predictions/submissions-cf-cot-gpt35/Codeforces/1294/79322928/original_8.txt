The given program can be optimized in the following steps:

1. Remove unnecessary header files: The program includes `<bits/stdc++.h>` and `<algorithm>` header files which are not required. We can remove them.

2. Remove unused macros: The macros `M`, `D`, and `PI` are defined but not used in the program. We can remove them.

3. Remove unnecessary function: The function `sortbysec` is defined but not used in the program. We can remove it.

4. Avoid unnecessary set initialization: The set `s` is initialized with a range of elements from 0 to `max(2 * q, q + 100)` which is not required. We can remove this initialization and initialize `s` as an empty set.

5. Avoid unnecessary array initialization: The array `a` is initialized with all elements as 0. However, only the elements corresponding to `y % x` will be accessed. We can remove this initialization and initialize `a` as an empty array.

6. Avoid unnecessary set erase operation: After calculating `z`, the element `z` is erased from the set `s`. Since `z` is calculated based on `y % x`, it will always be a unique element in the set. Therefore, we can avoid the erase operation.

7. Avoid unnecessary set access: The minimum element in set `s` is accessed using `*(s.begin())` for every iteration. We can optimize this by maintaining a separate variable `minElement` to store the minimum element and update it whenever necessary.

8. Remove unused variable: The variable `x` is read from input but not used in the program. We can remove it.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <set>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int tests = 1;
  while (tests-- > 0) {
    int q;
    cin >> q;

    set<int> s;
    int a[100000] = {0};
    int minElement = 0;

    while (q-- > 0) {
      int y;
      cin >> y;

      int z = a[y % 100000] * 100000 + y % 100000;
      a[y % 100000]++;

      if (z == minElement) {
        while (s.count(minElement) > 0) {
          minElement++;
        }
      }

      cout << minElement << endl;
    }
  }

  return 0;
}
```

This optimized version of the program removes unnecessary code and improves the running time and memory usage.