Optimization Steps:

1. Remove unnecessary include statements: The program includes `<algorithm>` and `<bits/stdc++.h>` which are not used in the code. We can remove them to improve compilation time.

2. Remove unused macros: The macros `M`, `D`, and `PI` are defined but not used in the code. We can remove them to reduce memory usage.

3. Remove unnecessary sorting function: The `sortbysec` function is defined but not used in the code. We can remove it to improve runtime.

4. Use `vector` instead of fixed-size array: The array `a` is defined as `int a[x] = {0};`. Since the value of `x` is not known at compile time, we can use a `vector` instead of a fixed-size array to dynamically allocate memory.

5. Avoid unnecessary set operations: The set `s` is initialized with values from 0 to `max(2 * q, q + 100)`. However, we only need to insert values from 0 to `x-1`. We can optimize this by initializing the set with values from 0 to `x-1` and then extending it if necessary.

6. Avoid unnecessary set erase operations: In each iteration of the `while` loop, the program erases an element from the set `s` using `s.erase(z)`. However, since we already know the minimum value in the set (`*(s.begin())`), we can avoid the erase operation and directly print the minimum value.

Optimized code:

```cpp
#include <iostream>
#include <vector>
#include <set>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int tests = 1;
  while (tests-- > 0) {
    int q, x;
    cin >> q >> x;
    
    vector<int> a(x, 0);
    set<int> s;
    for (int i = 0; i < x; i++)
      s.insert(i);
    
    int min_val = 0;
    for (int i = 0; i < q; i++) {
      int y;
      cin >> y;
      int z = a[y % x] * x + y % x;
      a[y % x]++;
      
      if (z == min_val) {
        while (a[min_val % x] > 0) {
          a[min_val % x]--;
          min_val++;
        }
      }
      
      cout << min_val << endl;
    }
  }
  
  return 0;
}
```

Explanation:

1. Removed unnecessary include statements: `<algorithm>` and `<bits/stdc++.h>` were not used in the code, so they were removed.

2. Removed unused macros: The macros `M`, `D`, and `PI` were defined but not used, so they were removed.

3. Removed unnecessary sorting function: The `sortbysec` function was defined but not used, so it was removed.

4. Used `vector` instead of fixed-size array: The array `a` was replaced with a `vector<int>` that dynamically allocates memory based on the value of `x`.

5. Avoided unnecessary set operations: The set `s` was initialized with values from 0 to `x-1` instead of `max(2 * q, q + 100)`.

6. Avoided unnecessary set erase operations: Instead of erasing an element from the set `s`, the minimum value (`min_val`) is directly updated based on the value of `y % x`. If `z` is equal to `min_val`, the program checks if there are any previous values in `a` that need to be cleared to update `min_val`.