The given program calculates the minimum number of moves required to reach a certain value `x` using the formula `moves * (moves + 1) / 2`.

To optimize the program, we can make the following modifications:

1. Remove unnecessary header files: The program includes `<bits/stdc++.h>` and `<iostream>` header files which are not used. We can remove them to improve compilation time and memory usage.

2. Remove unused macros: The program defines several macros like `ll`, `ull`, `ui`, `vi`, etc. which are not used in the program. We can remove these unused macros to simplify the code.

3. Simplify the loop condition: The program uses `while (1)` as the loop condition. Instead, we can use a more readable condition like `while (moves * (moves + 1) / 2 < x)`.

4. Avoid unnecessary calculations: The program calculates `moves * (moves + 1) / 2` twice in the loop condition and once outside the loop. We can avoid this by calculating it once and storing it in a variable.

5. Avoid unnecessary comparison: The program checks if `moves * (moves + 1) / 2` is equal to `x + 1` outside the loop. We can avoid this check by modifying the loop condition to `while (moves * (moves + 1) / 2 <= x)`.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

#define fio                                                                    \
  ios_base::sync_with_stdio(false);                                            \
  cin.tie(NULL);                                                               \
  cout.tie(NULL)

int main() {
  fio;
  int t;
  cin >> t;
  while (t--) {
    long long x;
    cin >> x;
    long long moves = 0;
    long long sum = 0;
    while (sum <= x) {
      moves++;
      sum += moves;
    }
    cout << moves << endl;
  }
}
```