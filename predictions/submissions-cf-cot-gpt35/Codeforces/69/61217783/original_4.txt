Optimization Steps:
1. Remove unnecessary includes: The program is only using `iostream`, so we can remove the `using namespace std` line as it is not needed.
2. Optimize input reading: We can optimize the input reading by using `scanf` instead of `cin`. This is because `scanf` is generally faster for reading integers.
3. Optimize variable initialization: Instead of initializing `sum_x`, `sum_y`, and `sum_z` to 0, we can initialize them as `unsigned int` variables. This is because the sum of positive integers will always be positive, so we can use an unsigned type to optimize memory usage.
4. Optimize loop condition: Instead of using `i < n` as the loop condition, we can change it to `i != n`. This is because comparing for inequality (`!=`) is generally faster than comparing for less than (`<`).
5. Optimize the if statement: Instead of having multiple conditions in the if statement, we can combine them into a single condition using the logical AND (`&&`) operator. This will reduce the number of comparisons needed.

Optimized code:

```cpp
#include <iostream>

int main() {
  unsigned int n;
  std::cin >> n;
  unsigned int sum_x = 0, sum_y = 0, sum_z = 0;
  for (unsigned int i = 0; i != n; i++) {
    unsigned int x, y, z;
    scanf("%u %u %u", &x, &y, &z);
    sum_x += x;
    sum_y += y;
    sum_z += z;
  }
  if (sum_x == 0 && sum_y == 0 && sum_z == 0) {
    std::cout << "YES";
  } else {
    std::cout << "NO";
  }
  return 0;
}
```

By implementing these optimizations, we have improved the efficiency of the program in terms of running time and memory usage.