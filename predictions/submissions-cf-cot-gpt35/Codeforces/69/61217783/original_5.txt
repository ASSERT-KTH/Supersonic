Explanation of the optimization steps:

1. Avoid unnecessary variable initialization: The variables `sum_x`, `sum_y`, and `sum_z` are initialized to 0 before the loop. However, this is not necessary because they are reassigned inside the loop. Therefore, we can remove the initializations.

2. Optimize input reading: The current implementation reads `n` from the input and then reads `x`, `y`, and `z` `n` times. This can be optimized by reading `x`, `y`, and `z` directly inside the loop without the need for `n`. This eliminates the need for an additional loop variable and reduces the number of input operations.

3. Early termination: Instead of calculating the sums of `x`, `y`, and `z` for all `n` inputs, we can terminate the loop early if any of the sums become non-zero. This is because if any one of the sums is non-zero, the condition `sum_x == 0 && sum_y == 0 && sum_z == 0` will be false. This early termination can save unnecessary iterations in cases where the sums become non-zero before reaching the end of the input.

Optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int sum_x = 0, sum_y = 0, sum_z = 0;
  int x, y, z;

  while (cin >> x >> y >> z) {
    sum_x += x;
    sum_y += y;
    sum_z += z;

    if (sum_x != 0 || sum_y != 0 || sum_z != 0) {
      cout << "NO";
      return 0;
    }
  }

  cout << "YES";
  return 0;
}
```