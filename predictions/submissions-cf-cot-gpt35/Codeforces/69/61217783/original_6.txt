Explanation:
1. The original program reads an integer `n` from the user, and then reads `n` triplets of integers `(x, y, z)` from the user.
2. It calculates the sum of `x`, `y`, and `z` separately for all the `n` triplets.
3. Finally, it checks if the sum of `x`, `y`, and `z` is zero for all the `n` triplets, and prints "YES" if it is, or "NO" otherwise.

Optimization:
1. Instead of reading `n` triplets one by one, we can optimize the program by calculating the sum of `x`, `y`, and `z` on the fly while reading the triplets.
2. We only need to store the cumulative sum of `x`, `y`, and `z` without storing each individual value.
3. We can stop reading the triplets as soon as we find a non-zero sum of `x`, `y`, and `z`.
4. If we encounter a non-zero sum during the reading process, we can immediately print "NO" and exit the program.

Optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int n;
  cin >> n;
  
  int sum_x = 0, sum_y = 0, sum_z = 0;
  bool isZeroSum = true;
  
  for (int i = 0; i < n; i++) {
    int x, y, z;
    cin >> x >> y >> z;
    
    sum_x += x;
    sum_y += y;
    sum_z += z;
    
    if (sum_x != 0 || sum_y != 0 || sum_z != 0) {
      isZeroSum = false;
      break;
    }
  }
  
  if (isZeroSum) {
    cout << "YES";
  } else {
    cout << "NO";
  }
  
  return 0;
}
```

In the optimized program, we added a boolean variable `isZeroSum` to keep track of whether the sum of `x`, `y`, and `z` is zero for all the triplets. We break out of the loop as soon as we find a non-zero sum, and print the result accordingly.