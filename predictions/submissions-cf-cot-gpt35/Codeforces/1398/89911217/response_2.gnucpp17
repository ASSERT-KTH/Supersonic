#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int N = 210;
int len[3];
vector<int> v[3];
int dp[N][N][N];

int solve(int& idx0, int& idx1, int& idx2) {
  if (idx0 >= len[0] and idx1 >= len[1] and idx2 >= len[2]) {
    return 0;
  }
  int& ans = dp[idx0][idx1][idx2];
  if (ans != -1) {
    return ans;
  }
  ans = 0;
  if (idx0 < len[0] and idx1 < len[1]) {
    ans = max(ans, v[0][idx0] * v[1][idx1] + solve(++idx0, ++idx1, idx2));
    --idx0;
    --idx1;
  }
  if (idx0 < len[0] and idx2 < len[2]) {
    ans = max(ans, v[0][idx0] * v[2][idx2] + solve(++idx0, idx1, ++idx2));
    --idx0;
    --idx2;
  }
  if (idx1 < len[1] and idx2 < len[2]) {
    ans = max(ans, v[1][idx1] * v[2][idx2] + solve(idx0, ++idx1, ++idx2));
    --idx1;
    --idx2;
  }
  ans = max({ans, solve(++idx0, idx1, idx2), solve(idx0, ++idx1, idx2), solve(idx0, idx1, ++idx2)});
  --idx0;
  --idx1;
  --idx2;
  return ans;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  for (int i = 0; i < 3; ++i) {
    cin >> len[i];
    v[i].resize(len[i]);
  }
  for (int i = 0; i < 3; ++i) {
    for (int j = 0; j < len[i]; ++j) {
      cin >> v[i][j];
    }
    sort(v[i].rbegin(), v[i].rend());
  }
  
  for (int i = 0; i < N; ++i) {
    for (int j = 0; j < N; ++j) {
      for (int k = 0; k < N; ++k) {
        dp[i][j][k] = -1;
      }
    }
  }
  
  int idx0 = 0, idx1 = 0, idx2 = 0;
  cout << solve(idx0, idx1, idx2);

  return 0;
}