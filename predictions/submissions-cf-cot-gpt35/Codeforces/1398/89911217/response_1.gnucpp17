#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int N = 210;
vector<int> v[3];
vector<vector<vector<int>>> dp;

int solve(int idx0, int idx1, int idx2) {
  if (idx0 >= v[0].size() && idx1 >= v[1].size() && idx2 >= v[2].size()) {
    return 0;
  }
  int &ans = dp[idx0][idx1][idx2];
  if (ans != -1) {
    return ans;
  }
  ans = 0;
  if (idx0 < v[0].size() && idx1 < v[1].size()) {
    ans = max(ans, v[0][idx0] * v[1][idx1] + solve(idx0 + 1, idx1 + 1, idx2));
  }
  if (idx0 < v[0].size() && idx2 < v[2].size()) {
    ans = max(ans, v[0][idx0] * v[2][idx2] + solve(idx0 + 1, idx1, idx2 + 1));
  }
  if (idx1 < v[1].size() && idx2 < v[2].size()) {
    ans = max(ans, v[1][idx1] * v[2][idx2] + solve(idx0, idx1 + 1, idx2 + 1));
  }
  ans = max(ans, solve(idx0 + 1, idx1, idx2));
  ans = max(ans, solve(idx0, idx1 + 1, idx2));
  ans = max(ans, solve(idx0, idx1, idx2 + 1));
  return ans;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  for (int i = 0; i < 3; ++i) {
    int len;
    cin >> len;
    v[i].reserve(len);
    for (int j = 0; j < len; ++j) {
      int val;
      cin >> val;
      v[i].push_back(val);
    }
    sort(v[i].begin(), v[i].end(), greater<int>());
  }

  dp.resize(v[0].size() + 1, vector<vector<int>>(v[1].size() + 1, vector<int>(v[2].size() + 1, -1)));

  cout << solve(0, 0, 0) << '\n';

  return 0;
}