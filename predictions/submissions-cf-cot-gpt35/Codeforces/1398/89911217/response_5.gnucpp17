#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>

const int N = 210;

int solve(int len0, int len1, int len2, const std::vector<int>& v0, const std::vector<int>& v1, const std::vector<int>& v2) {
  int dp[N];
  std::memset(dp, 0, sizeof(dp));

  for (int idx0 = len0 - 1; idx0 >= 0; --idx0) {
    for (int idx1 = len1 - 1; idx1 >= 0; --idx1) {
      for (int idx2 = len2 - 1; idx2 >= 0; --idx2) {
        int ans = 0;
        if (idx0 < len0 && idx1 < len1) {
          ans = std::max(ans, v0[idx0] * v1[idx1] + dp[(idx0 + 1) * N * N + (idx1 + 1) * N + idx2]);
        }
        if (idx0 < len0 && idx2 < len2) {
          ans = std::max(ans, v0[idx0] * v2[idx2] + dp[(idx0 + 1) * N * N + idx1 * N + (idx2 + 1)]);
        }
        if (idx1 < len1 && idx2 < len2) {
          ans = std::max(ans, v1[idx1] * v2[idx2] + dp[idx0 * N * N + (idx1 + 1) * N + (idx2 + 1)]);
        }
        ans = std::max(ans, dp[(idx0 + 1) * N * N + idx1 * N + idx2]);
        ans = std::max(ans, dp[idx0 * N * N + (idx1 + 1) * N + idx2]);
        ans = std::max(ans, dp[idx0 * N * N + idx1 * N + (idx2 + 1)]);
        dp[idx0 * N * N + idx1 * N + idx2] = ans;
      }
    }
  }

  return dp[0];
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  int len[3];
  for (int i = 0; i < 3; ++i) {
    std::cin >> len[i];
  }

  std::vector<int> v[3];
  for (int i = 0; i < 3; ++i) {
    v[i].reserve(len[i]);
    for (int j = 0; j < len[i]; ++j) {
      int val;
      std::cin >> val;
      v[i].push_back(val);
    }
    std::sort(v[i].rbegin(), v[i].rend());
  }

  std::cout << solve(len[0], len[1], len[2], v[0], v[1], v[2]);

  return 0;
}