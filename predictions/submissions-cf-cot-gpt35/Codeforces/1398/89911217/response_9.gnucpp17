#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int N = 210;
int len[3];
vector<int> v[3];
int red, green, blue;
int dp[N][N][N];

int solve() {
    int ans = 0;
    for (int idx0 = len[0]; idx0 >= 0; idx0--) {
        for (int idx1 = len[1]; idx1 >= 0; idx1--) {
            for (int idx2 = len[2]; idx2 >= 0; idx2--) {
                if (idx0 == len[0] && idx1 == len[1] && idx2 == len[2]) {
                    dp[idx0][idx1][idx2] = 0;
                } else {
                    dp[idx0][idx1][idx2] = 0;
                    if (idx0 < len[0] && idx1 < len[1]) {
                        dp[idx0][idx1][idx2] = max(dp[idx0][idx1][idx2], v[0][idx0] * v[1][idx1] + dp[idx0 + 1][idx1 + 1][idx2]);
                    }
                    if (idx0 < len[0] && idx2 < len[2]) {
                        dp[idx0][idx1][idx2] = max(dp[idx0][idx1][idx2], v[0][idx0] * v[2][idx2] + dp[idx0 + 1][idx1][idx2 + 1]);
                    }
                    if (idx1 < len[1] && idx2 < len[2]) {
                        dp[idx0][idx1][idx2] = max(dp[idx0][idx1][idx2], v[1][idx1] * v[2][idx2] + dp[idx0][idx1 + 1][idx2 + 1]);
                    }
                    dp[idx0][idx1][idx2] = max(dp[idx0][idx1][idx2], dp[idx0 + 1][idx1][idx2]);
                    dp[idx0][idx1][idx2] = max(dp[idx0][idx1][idx2], dp[idx0][idx1 + 1][idx2]);
                    dp[idx0][idx1][idx2] = max(dp[idx0][idx1][idx2], dp[idx0][idx1][idx2 + 1]);
                }
                ans = max(ans, dp[idx0][idx1][idx2]);
            }
        }
    }
    return ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    for (int i = 0; i < 3; ++i) {
        cin >> len[i];
        v[i].resize(len[i]);
    }
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < len[i]; ++j) {
            cin >> v[i][j];
        }
        sort(v[i].begin(), v[i].begin() + len[i], greater<int>());
    }
    cout << solve();

    return 0;
}