#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>

const int N = 210;
int len[3];
std::vector<int> v[3];
int dp[N][N][N];

int solve(int idx0, int idx1, int idx2) {
  if (idx0 >= v[0].size() && idx1 >= v[1].size() && idx2 >= v[2].size()) {
    return 0;
  }
  int& ans = dp[idx0][idx1][idx2];
  if (ans != -1) {
    return ans;
  }
  ans = 0;
  if (idx0 < v[0].size() && idx1 < v[1].size()) {
    ans = std::max(ans, v[0][idx0] * v[1][idx1] + solve(idx0 + 1, idx1 + 1, idx2));
  }
  if (idx0 < v[0].size() && idx2 < v[2].size()) {
    ans = std::max(ans, v[0][idx0] * v[2][idx2] + solve(idx0 + 1, idx1, idx2 + 1));
  }
  if (idx1 < v[1].size() && idx2 < v[2].size()) {
    ans = std::max(ans, v[1][idx1] * v[2][idx2] + solve(idx0, idx1 + 1, idx2 + 1));
  }
  ans = std::max({ans, solve(idx0 + 1, idx1, idx2), solve(idx0, idx1 + 1, idx2), solve(idx0, idx1, idx2 + 1)});
  return ans;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  for (int i = 0; i < 3; ++i) {
    std::cin >> len[i];
    v[i].resize(len[i]);
    for (int j = 0; j < len[i]; ++j) {
      std::cin >> v[i][j];
    }
    std::sort(v[i].rbegin(), v[i].rend());
  }

  std::memset(dp, -1, sizeof dp);
  std::cout << solve(0, 0, 0);

  return 0;
}