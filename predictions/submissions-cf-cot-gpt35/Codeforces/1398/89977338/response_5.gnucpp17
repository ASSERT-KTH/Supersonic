#include <iostream>
#include <cmath>
#include <vector>
#include <array>
#include <bitset>
#include <unordered_map>
#include <unordered_set>

using namespace std;

typedef long long ll;

void SieveOfEratosthenes(unordered_set<int>& pr) {
    const int MAXN = 1 << 20;
    array<int, MAXN + 1> lp;
    for (int i = 2; i <= MAXN; i++) {
        if (lp[i] == 0) {
            lp[i] = i;
            pr.insert(i);
        }
        for (int p : pr) {
            if (p > lp[i] || i * p > MAXN) {
                break;
            }
            lp[i * p] = p;
        }
    }
}

void div_rec(vector<ll>& r, int k, ll c) {
    if (k == 0) {
        r.push_back(c);
        return;
    }
    div_rec(r, k - 1, c);
    c *= k;
    div_rec(r, k - 1, c);
}

typedef ll tf;
typedef array<tf, 2 * OFFSET + 1> poly;

array<poly, 2> multiply(poly& l, poly& r) {
    const int OFFSET = x;
    int n = l.size() + r.size() + 1;
    int m = 1, cnt = 0;
    while (m <= n) {
        m += m;
        cnt++;
    }
    array<int, 2 * OFFSET + 9> R;
    for (int i = 0; i < m; i++) {
        R[i] = 0;
        for (int j = 0; j < cnt; j++) {
            R[i] = (R[i] << 1) | ((i >> j) & 1);
        }
    }
    array<complex<double>, 2 * OFFSET + 9> cp1, cp2;
    for (int i = 0; i < m; i++) {
        cp1[i] = 0;
        cp2[i] = 0;
    }
    for (int i = 0; i < l.size(); i++) {
        cp1[i] = l[i];
    }
    for (int i = 0; i < r.size(); i++) {
        cp2[i] = r[i];
    }
    for (int i = 0; i < m; i++) {
        cp1[i] *= cp2[i];
    }
    for (int i = 0; i < m; i++) {
        cp1[i] /= m;
    }
    array<poly, 2> res;
    n -= 2;
    for (int i = 0; i < n; i++) {
        res[0][i] = (tf)floor(cp1[i].real() + 0.5);
    }
    return res;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    unordered_set<int> pr;
    SieveOfEratosthenes(pr);

    int n, x, y;
    cin >> n >> x >> y;

    int OFFSET = x;
    poly l, r;
    for (int i = 0; i < n + 1; i++) {
        int X;
        cin >> X;
        l[X + OFFSET]++;
        r[-X + OFFSET]++;
    }

    array<poly, 2> p = multiply(l, r);
    bitset<2 * OFFSET> can;
    for (int i = 0; i < 2 * OFFSET; i++) {
        if (i + 2 * OFFSET < p[0].size() && p[0][i + 2 * OFFSET]) {
            can[i] = true;
        }
    }

    int q;
    cin >> q;

    array<int, MAXN + 1> res;
    res.fill(-1);

    for (int _ = 0; _ < q + 1; _++) {
        int X;
        cin >> X;
        if (!pr.count(X)) {
            int it = X;
            array<pair<int, int>, MAXN + 1> aux;
            int idx = 0;
            while (it != 1) {
                if (idx == 0 || aux[idx - 1].first != pr.count(it)) {
                    aux[idx++] = {pr.count(it), 1};
                } else {
                    aux[idx - 1].second++;
                }
                it /= pr.count(it);
            }
            vector<ll> g;
            div_rec(g, idx - 1, 1);
            for (int i : g) {
                ll need = i - 2 * y;
                if (need > 0 && need % 2 == 0 && can[need / 2]) {
                    res[_] = max(res[_], i);
                }
            }
        }
    }

    for (int i = 0; i < q; i++) {
        cout << res[i] << " ";
    }
    cout << "\n";

    return 0;
}