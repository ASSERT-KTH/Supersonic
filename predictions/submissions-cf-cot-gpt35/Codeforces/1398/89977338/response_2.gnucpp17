#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define int ll
typedef pair<int, int> ii;
#define db(x) cout << #x << " = " << x << "\n";
#define fore(i, a, b) for (int i = a, ggdem = b; i < ggdem; i++)
#define FIN                                                                    \
  ios::sync_with_stdio(false);                                                 \
  cin.tie(0);                                                                  \
  cout.tie(0)
#define SZ(a) ((int)(a).size())
#define ALL(a) a.begin(), a.end()
#define mset(a, b) memset(a, b, sizeof(a));
#define pb push_back
#define fst first
#define snd second
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
const int MAXN = 1 << 20;
int n, x, y, lp[MAXN + 1], res[MAXN];
bool can[MAXN];
vector<int> pr;
void SieveOfEratosthenes() {
  for (int i = 2; i <= MAXN; i++) {
    if (lp[i] == 0)
      lp[i] = i, pr.pb(i);
    for (int j = 0; j < SZ(pr) && pr[j] <= lp[i] && i * pr[j] <= MAXN; ++j)
      lp[i * pr[j]] = pr[j];
  }
}
void div_rec(vector<ll> &r, vector<pair<ll, int>> &f, int k, ll c) {
  if (k == f.size()) {
    r.pb(c);
    return;
  }
  fore(i, 0, f[k].snd + 1) div_rec(r, f, k + 1, c), c *= f[k].fst;
}
typedef ll tf;
typedef vector<tf> poly;
struct CD {
  double r, i;
  CD(double r = 0, double i = 0) : r(r), i(i) {}
  double real() const { return r; }
  void operator/=(const int c) { r /= c, i /= c; }
};
CD operator*(const CD &a, const CD &b) {
  return CD(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r);
}
CD operator+(const CD &a, const CD &b) { return CD(a.r + b.r, a.i + b.i); }
CD operator-(const CD &a, const CD &b) { return CD(a.r - b.r, a.i - b.i); }
const double pi = acos(-1.0);
CD cp1[MAXN + 9], cp2[MAXN + 9];
int R[MAXN + 9];
void fft(CD *a, int n, bool inv) {
  if (n == 1)
    return;
  CD a0[n / 2], a1[n / 2];
  for (int i = 0, j = 0; i < n; i += 2, j++) {
    a0[j] = a[i];
    a1[j] = a[i + 1];
  }
  fft(a0, n / 2, inv);
  fft(a1, n / 2, inv);
  double ang = 2 * pi / n * (inv ? -1 : 1);
  CD w(1), wn(cos(ang), sin(ang));
  for (int i = 0; i < n / 2; i++) {
    CD u = a0[i], v = w * a1[i];
    a[i] = u + v;
    a[i + n / 2] = u - v;
    w = w * wn;
  }
  if (inv) {
    for (int i = 0; i < n; i++)
      a[i] /= 2;
  }
}
poly multiply(poly &p1, poly &p2) {
  int n = p1.size() + p2.size() - 1;
  int m = 1;
  while (m < n)
    m *= 2;
  fore(i, 0, m) {
    cp1[i] = i < p1.size() ? p1[i] : 0;
    cp2[i] = i < p2.size() ? p2[i] : 0;
  }
  fft(cp1, m, false);
  fft(cp2, m, false);
  fore(i, 0, m) cp1[i] = cp1[i] * cp2[i];
  fft(cp1, m, true);
  poly res(n);
  fore(i, 0, n) res[i] = (tf)floor(cp1[i].real() + 0.5);
  return res;
}
vector<int> g[MAXN];
main() {
  FIN;
  SieveOfEratosthenes();
  cin >> n >> x >> y;
  int OFFSET = x;
  poly l(2 * OFFSET + 1), r(2 * OFFSET + 1);
  fore(i, 0, n + 1) {
    int X;
    cin >> X;
    l[X + OFFSET]++;
    r[-X + OFFSET]++;
  }
  poly p = multiply(l, r);
  fore(i, 0, 2 * OFFSET) if (i + 2 * OFFSET < SZ(p) && p[i + 2 * OFFSET])
      can[i] = 1;
  int q;
  cin >> q;
  memset(res, -1, sizeof(res));
  fore(_, 0, q + 1) {
    int X;
    cin >> X;
    if (!SZ(g[X])) {
      int it = X;
      vector<ii> aux;
      while (it != 1) {
        if (!SZ(aux) || aux.back().fst != lp[it])
          aux.pb({lp[it], 1});
        else
          aux.back().snd++;
        it /= lp[it];
      }
      div_rec(g[X], aux, 0, 1);
    }
    for (int i : g[X]) {
      ll need = i - 2 * y;
      if (need <= 0 || need % 2)
        continue;
      if (can[need / 2])
        res[_] = max(res[_], i);
    }
  }
  fore(i, 0, q) cout << res[i] << " \n"[i == q - 1];
}