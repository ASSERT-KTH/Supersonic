The given program has a time complexity of O(n) and a space complexity of O(n), where n is the length of the string.

To optimize the program, we can eliminate the use of the `map<int, int> cnt` and use a simple integer variable `cnt` to keep track of the count. This will reduce the space complexity from O(n) to O(1).

We can also remove the unnecessary includes and macros to simplify the code.

Here is the optimized program:

```cpp
#include <iostream>
#include <string>
using namespace std;

bool isPrime(int n) {
  if (n <= 1)
    return false;
  if (n <= 3)
    return true;
  if (n % 2 == 0 || n % 3 == 0)
    return false;
  for (int i = 5; i * i <= n; i = i + 6)
    if (n % i == 0 || n % (i + 2) == 0)
      return false;
  return true;
}

void solve() {
  int n;
  cin >> n;
  string s;
  cin >> s;
  int cnt = 0;
  int pre = 0;
  int ans = 0;
  for (int i = 0; i < n; i++) {
    int d = s[i] - '0';
    pre += d;
    ans += cnt - i;
    cnt++;
  }
  cout << ans << endl;
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
  return 0;
}
```
The optimized code removes unnecessary includes and macros, replaces the map with a simple integer variable, and simplifies the input/output code.