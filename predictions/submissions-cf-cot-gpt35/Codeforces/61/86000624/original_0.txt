The given program can be optimized in the following steps:
1. Remove the unnecessary inclusion of the `<bits/stdc++.h>` header file.
2. Remove the `using namespace std;` statement and use the `std::` prefix for standard library functions and objects.
3. Use `int` instead of `long long` for the `seen` array, as the maximum value of `n` is not specified.
4. Use a `vector<bool>` instead of an array for the `seen` flag, as `vector<bool>` uses a bitset representation and saves memory compared to an array of `int`.
5. Remove the `sum` variable and calculate the sum of weights directly in the `while` loop.
6. Initialize the `big` variable to zero instead of -1, as it is guaranteed to be non-negative.
7. Remove unnecessary calls to `make_pair()` by using the `std::make_pair` function directly in the `push()` function of the queue.
8. Use a `std::deque` instead of a `std::queue` to improve the performance of popping elements from the front.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <deque>
#include <utility>

const int maxn = 100005;

int main() {
  int n;
  std::cin >> n;
  
  std::vector<std::pair<int, int>> adj[maxn];
  
  for (int i = 0; i < n - 1; i++) {
    int x, y, w;
    std::cin >> x >> y >> w;
    adj[x - 1].push_back(std::make_pair(y - 1, w));
    adj[y - 1].push_back(std::make_pair(x - 1, w));
  }
  
  std::deque<std::pair<int, int>> q;
  std::vector<bool> seen(n + 1, false);
  
  q.push_back(std::make_pair(0, 0));
  seen[0] = true;
  
  int big = 0;
  int sum = 0;
  
  while (!q.empty()) {
    std::pair<int, int> s = q.front();
    q.pop_front();
    
    big = std::max(big, s.second);
    sum += s.second;
    
    for (auto t : adj[s.first]) {
      if (!seen[t.first]) {
        seen[t.first] = true;
        q.push_back(std::make_pair(t.first, s.second + t.second));
      }
    }
  }
  
  std::cout << (2 * sum) - big << std::endl;
  
  return 0;
}
```