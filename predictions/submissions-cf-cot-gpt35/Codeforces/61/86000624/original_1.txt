Optimization steps:

1. Remove unnecessary include statements: The program includes `<bits/stdc++.h>` which includes a lot of unnecessary header files. We can remove it and include only the necessary headers.

2. Use `typedef` instead of `#define`: Instead of using `#define int long long` to define the type `int` as `long long`, we can use `typedef` to achieve the same result.

3. Use `reserve` to allocate memory for the adjacency list: Before the loop, we can use the `reserve` function to preallocate memory for the adjacency list. This will improve memory usage and reduce the number of memory allocations.

4. Use an array instead of a vector for the 'seen' array: Since the size of the array is known at compile-time, we can use a regular array instead of a vector for the 'seen' array. This will improve memory usage and access time.

5. Use a reference to avoid unnecessary copying: In the for-loop where we iterate over the adjacency list, we can use a reference instead of copying the value of each element. This will improve performance by avoiding unnecessary object copying.

6. Use a reference instead of using the 'first' and 'second' member functions: Instead of using the member functions `first` and `second` to access the elements of the pair, we can use a reference to improve performance.

7. Use `emplace` instead of `make_pair`: Instead of using `make_pair` to create a pair and then push it into the queue, we can use `emplace` to directly construct the pair in the queue. This will avoid creating unnecessary temporary objects.

8. Use `reserve` for the queue: Before the loop, we can use the `reserve` function to preallocate memory for the queue. This will improve performance by reducing the number of memory allocations.

9. Use `front` and `pop` on the same line: Instead of calling `q.front()` and then `q.pop()` on separate lines, we can combine them into a single line to improve performance.

10. Use a variable instead of repeatedly accessing `adj[s.first]`: Instead of repeatedly accessing `adj[s.first]` in the for-loop, we can store it in a variable to improve performance.

Optimized code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

typedef long long ll;

const int maxn = 100005;

vector<pair<int, int>> adj[maxn];

int main() {
  int n;
  cin >> n;
  ll sum = 0;
  
  adj[0].reserve(n-1);
  
  for (int i = 0; i < n - 1; i++) {
    int x, y, w;
    cin >> x >> y >> w;
    adj[x - 1].emplace_back(y - 1, w);
    adj[y - 1].emplace_back(x - 1, w);
    sum += w;
  }
  
  queue<pair<int, int>> q;
  int seen[maxn] = {};
  q.reserve(n);
  
  q.emplace(0, 0);
  seen[0] = 1;
  int big = -1;
  
  while (!q.empty()) {
    auto& s = q.front();
    q.pop();
    big = max(big, s.second);
    const auto& adj_s = adj[s.first];
    for (const auto& t : adj_s) {
      if (!seen[t.first]) {
        seen[t.first] = 1;
        q.emplace(t.first, s.second + t.second);
      }
    }
  }
  
  cout << (2 * sum) - big << endl;
}
```