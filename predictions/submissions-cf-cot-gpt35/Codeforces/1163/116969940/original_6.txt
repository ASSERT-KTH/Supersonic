To optimize the given C/C++ program, I would make the following modifications:

1. Remove unnecessary includes: The program includes the `<bits/stdc++.h>` header, which is not a standard C/C++ header. Instead, I would include only the necessary standard headers such as `<iostream>`, `<map>`, `<set>`, and `<cstring>`. This reduces unnecessary code and potential conflicts.

2. Remove unused macros: The program defines macros such as `pb`, `ld`, `ll`, `lld`, `print`, `println`, `show`, and `debug`, but they are not used anywhere in the code. I would remove these macros to improve code readability.

3. Remove unnecessary clock handling: The program includes a `Time()` function that calculates the time taken by the program using the `clock()` function. Since the program does not require timing information, I would remove this function.

4. Use `unordered_map` instead of `map`: The program uses a `map<int, int>` to store the count of occurrences of each element. However, the use of `unordered_map` can provide faster lookup and insertion times in most cases. I would replace `map<int, int>` with `unordered_map<int, int>`.

5. Use `unordered_set` instead of `set`: Similar to the previous optimization, the program uses a `set<int>` to store distinct elements. Replacing it with an `unordered_set<int>` can improve performance. I would replace `set<int>` with `unordered_set<int>`.

6. Use an array instead of a `multiset`: The program uses a `multiset<int>` to store the counts of occurrences of each element. However, a simple array `int mp[100005]` can be used instead, as the size of the array is known in advance. This eliminates the need for the `multiset` and the associated operations such as `find` and `erase`.

7. Avoid unnecessary calculations: The program performs multiple calculations to determine the maximum count of occurrences and the corresponding elements. However, these calculations can be simplified by maintaining two variables `maxCount` and `secondMaxCount` to track the maximum and second maximum counts. The corresponding elements can be obtained directly from the `unordered_map`.

8. Simplify the conditions for updating `ans`: The program has multiple conditions to update the value of `ans`. However, these conditions can be simplified by considering the properties of the maximum and second maximum counts. I would simplify the conditions to update `ans` accordingly.

9. Optimize I/O operations: The program uses `cout` and `cin` for input and output, which can be slower than other I/O operations. To optimize I/O, I would use `printf` and `scanf` instead.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <cstring>

using namespace std;

const int mxN = 1e5 + 5;

void solve() {
  int n;
  scanf("%d", &n);
  
  int mp[mxN] = {0};
  int ans = 0;
  unordered_map<int, int> cnt;
  unordered_set<int> cst;
  
  for (int i = 0; i < n; ++i) {
    int x;
    scanf("%d", &x);
    
    if (mp[x]) {
      cnt[mp[x]]--;
    }
    mp[x]++;
    cnt[mp[x]]++;
    cst.insert(x);
    
    int f = mp[x];
    int w = cnt[f];
    
    if (w > 0) {
      int y = cnt[w];
      
      if (cst.size() == 1 || max(w, y) == i + 1 || f * w + y == i + 1) {
        ans = i;
      }
    }
  }
  
  ans++;
  printf("%d\n", ans);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  solve();
  
  return 0;
}
```

This optimized program reduces unnecessary code, uses more efficient data structures, simplifies conditions, and improves I/O operations for better performance.