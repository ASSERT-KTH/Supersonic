#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

const int MAX_N = 100005;

void solve() {
  int n;
  cin >> n;
  
  vector<int> freq(MAX_N, 0);
  vector<int> sortedFreq;
  int ans = 0;
  int distinctElements = 0;
  
  for (int i = 0; i < n; ++i) {
    int x;
    cin >> x;
    
    if (freq[x]) {
      sortedFreq.erase(find(sortedFreq.begin(), sortedFreq.end(), freq[x]));
      freq[x]--;
      sortedFreq.push_back(freq[x]);
      sort(sortedFreq.begin(), sortedFreq.end());
    }
    
    freq[x]++;
    sortedFreq.push_back(freq[x]);
    sort(sortedFreq.begin(), sortedFreq.end());
    
    int f = sortedFreq[0];
    int s = sortedFreq[sortedFreq.size() - 1];
    
    if (f == 1 && distinctElements == 1) {
      ans = i;
    }
    
    if (f * freq[f] + s * freq[s] == i + 1) {
      if (freq[s] == 1) {
        if (s == 1 || s - 1 == f) {
          ans = i;
        }
      } else if (freq[f] == 1) {
        if (f == 1 || f - 1 == s) {
          ans = i;
        }
      } else if (freq[s] == 1 && freq[f] == 1) {
        if (max(f, s) - 1 == min(f, s) || min(f, s) == 1) {
          ans = i;
        }
      }
    }
    
    distinctElements++;
  }
  
  ans++;
  cout << ans << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  solve();
  
  return 0;
}