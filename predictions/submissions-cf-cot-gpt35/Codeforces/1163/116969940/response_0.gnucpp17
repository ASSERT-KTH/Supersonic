#include <iostream>
#include <unordered_map>
#include <unordered_set>
using namespace std;

void solve() {
  int n;
  cin >> n;
  unordered_multiset<int> st;
  unordered_map<int, int> mp;
  int ans = 0;
  unordered_map<int, int> cnt;
  unordered_set<int> cst;
  for (int i = 0; i < n; ++i) {
    int x;
    cin >> x;
    if (mp.count(x)) {
      auto idx = st.find(mp[x]);
      cnt[mp[x]]--;
      st.erase(idx);
    }
    mp[x]++;
    cnt[mp[x]]++;
    cst.insert(x);
    st.insert(mp[x]);
    int f = *st.begin();
    auto sec = st.upper_bound(f);
    if (sec == st.end())
      sec--;
    int s = *sec;
    int w = cnt[f], y = cnt[s];
    if (cst.size() == 1)
      ans = i;
    if (max(w, y) == i + 1 && f == 1)
      ans = i;
    if (f * w + s * y == i + 1) {
      if (y == 1) {
        if (s == 1 || s - 1 == f)
          ans = i;
      } else if (w == 1) {
        if (f == 1 || f - 1 == s)
          ans = i;
      } else if (y == 1 && w == 1) {
        if (max(f, s) - 1 == min(f, s) || min(f, s) == 1)
          ans = i;
      }
    }
  }
  ans++;
  cout << ans << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  solve();
  return 0;
}