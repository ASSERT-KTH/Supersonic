#include <iostream>
#include <map>
#include <set>

using namespace std;

void solve() {
  int n;
  cin >> n;

  map<int, int> mp;
  set<int> cst;

  int ans = 0;

  for (int i = 0; i < n; ++i) {
    int x;
    cin >> x;

    if (mp[x]) {
      auto it = cst.find(mp[x]);
      mp[x]--;
      cst.erase(it);
    }

    mp[x]++;
    cst.insert(x);

    auto it = cst.begin();
    int f = mp[*it];
    ++it;
    int s = mp[*it];

    if (cst.size() == 1)
      ans = i;
    if (max(f, s) == i + 1 && mp[*cst.begin()] == 1)
      ans = i;
    if (f * mp[f] + s * mp[s] == i + 1) {
      if (s == 1) {
        if (mp[*it] == 1 || mp[*it] - 1 == f)
          ans = i;
      } else if (f == 1) {
        if (mp[*cst.begin()] == 1 || mp[*cst.begin()] - 1 == s)
          ans = i;
      } else if (s == 1 && f == 1) {
        if (max(mp[*cst.begin()], mp[*it]) - 1 == min(mp[*cst.begin()], mp[*it]) || min(mp[*cst.begin()], mp[*it]) == 1)
          ans = i;
      }
    }
  }

  ans++;
  cout << ans << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  solve();

  return 0;
}