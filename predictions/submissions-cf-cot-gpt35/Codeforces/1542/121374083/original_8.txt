Step 1: Remove unnecessary header files.

The program includes the header `<bits/stdc++.h>`, which includes a lot of other header files. This can increase the compile time and may include unnecessary header files. It is recommended to include only the necessary header files.

Step 2: Remove unnecessary macro definitions.

The program includes a lot of macro definitions, such as `startt`, `vint`, `all(v)`, `sz(a)`, etc. These macro definitions can make the code harder to read and understand. It is better to remove unnecessary macro definitions and use standard C++ functions and data types directly.

Step 3: Optimize the loop condition.

In the `solve()` function, there is a while loop that checks the condition `temp <= n`. Since `temp` is multiplied by `a` in each iteration, it will eventually exceed `n`. So, we can optimize the loop condition by changing it to `temp * a <= n`.

Step 4: Simplify the logic.

The `solve()` function has a lot of if-else statements and conditions. We can simplify the logic by removing unnecessary conditions and merging similar conditions.

Step 5: Remove unused variables.

The program declares variables `t` and `tc` in the `main()` function but never uses them. We can remove these variables to improve memory usage.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

void solve() {
  long long n, a, b;
  cin >> n >> a >> b;
  
  if (n % b == 1 || n % b == a || b == 1) {
    cout << "YES" << endl;
    return;
  }
  
  if (a == 1) {
    cout << (n % b == 1 ? "YES" : "NO") << endl;
    return;
  }
  
  long long temp = 1;
  while (temp * a <= n) {
    if (temp * a == n || (n - temp) % b == 0) {
      cout << "YES" << endl;
      return;
    }
    temp *= a;
  }
  
  cout << "NO" << endl;
}

int main() {
  int t;
  cin >> t;
  
  for (int i = 0; i < t; i++) {
    solve();
  }
  
  return 0;
}
```