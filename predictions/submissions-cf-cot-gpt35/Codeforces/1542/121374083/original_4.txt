Optimization Steps:
1. Remove unnecessary header file inclusion `#include <bits/stdc++.h>`. Instead, include only the required header files.
2. Remove unnecessary macro definitions. Macros are generally not recommended in C++ and can lead to unexpected behavior. Instead, use constant variables or const variables.
3. Remove unnecessary typedefs. Instead, use the actual type names directly.
4. Avoid using `using namespace std;` to avoid polluting the global namespace.
5. Avoid using macros for commonly used operations like `vector<int>` and `size()`. Instead, use the actual code.
6. Avoid using `endl` which flushes the output buffer. Instead, use `"\n"` for a newline character.
7. Remove unnecessary checks in the if-else conditions. Simplify the logic.
8. Optimize the loop to check if `n` can be obtained by multiplying `a`.
9. Remove unnecessary variables and simplify the logic.

Optimized code:

```cpp
#include <iostream>
#include <vector>

const int MOD = 1000000007;

void solve() {
  long long n, a, b;
  std::cin >> n >> a >> b;
  
  bool possible = false;
  if (n % b == 1 || n % b == a || b == 1) {
    possible = true;
  } else if (a != 1) {
    long long temp = a;
    while (temp <= n) {
      if ((n - temp) % b == 0) {
        possible = true;
        break;
      }
      temp *= a;
    }
  }
  
  std::cout << (possible ? "YES\n" : "NO\n");
}

int main() {
  int t = 1;
  std::cin >> t;
  
  for (int tc = 1; tc <= t; tc++) {
    solve();
  }
  
  return 0;
}
```
