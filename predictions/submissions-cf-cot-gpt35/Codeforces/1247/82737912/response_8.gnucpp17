#include <iostream>
#include <vector>
using namespace std;

const int mod = 1000000007;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n, m;
  cin >> n >> m;

  vector<string> arr(n);
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }

  vector<vector<vector<long long>>> dp(n + 1,
                                       vector<vector<long long>>(m + 1,
                                                                 vector<long long>(2, 0)));

  for (int i = n - 1; i >= 0; i--) {
    for (int j = m - 1; j >= 0; j--) {
      if (i == n - 1 || j == m - 1) {
        if (i == n - 1 && j == m - 1) {
          dp[i][j][0] = dp[i][j][1] = (arr[i][j] == 'R' ? 0 : 1);
        } else if (arr[i][j] != 'R') {
          dp[i][j][0] = dp[i + 1][j][0] + dp[i][j + 1][1];
          dp[i][j][0] %= mod;
          dp[i][j][1] = dp[i][j][0];
        }
      } else {
        long long val1 = dp[i + 1][j + 1][1][0] - dp[n - (i + 1)][j + 1][1][0] +
                         dp[i + 1][j + 1][1][1] - dp[i + 1][m - (j + 1)][1][1];
        long long val2 = dp[i + 1][j + 1][1][0] - dp[n - (i + 1)][j + 1][1][0] +
                         dp[i + 1][j + 1][1][1] - dp[i + 1][m - (j + 1) + 1][1][1];

        dp[i][j][0] = (val1 + 2 * mod) % mod;
        dp[i][j][1] = (val2 + 2 * mod) % mod;
      }

      dp[i][j][0] = (dp[i][j][0] + dp[i + 1][j][1][0]) % mod;
      dp[i][j][1] = (dp[i][j][1] + dp[i][j + 1][1][1]) % mod;
    }
  }

  cout << dp[0][0][0][1] << endl;

  return 0;
}