The given program has several areas that can be optimized:

1. Remove unnecessary headers: The program includes the `<bits/stdc++.h>` and `<iostream>` headers, which are not necessary for the program. We can remove these headers.

2. Remove unused macros: The program defines several macros that are not used in the code. We can remove these macros to simplify the code.

3. Remove unnecessary function parameters: The `inarr` and `outarr` macros take parameters that are not used in the code. We can remove these parameters.

4. Remove unused variables: The program declares several variables that are not used in the code. We can remove these variables to reduce memory usage.

5. Optimize loops: The program uses nested loops to iterate over the arrays. We can optimize these loops to reduce redundant calculations.

6. Remove unnecessary calculations: The program performs some unnecessary calculations in the loops. We can remove these calculations to improve performance.

7. Remove unnecessary modulo operations: The program uses modulo operations unnecessarily in some places. We can remove these modulo operations to improve performance.

8. Simplify conditions: The program uses complex conditions in some places. We can simplify these conditions to improve readability and performance.

Based on these optimization steps, here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const int MOD = 1000000007;

void solve() {
  int n, m;
  cin >> n >> m;
  vector<string> arr(n);
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }

  vector<vector<vector<long long>>> dp(n, vector<vector<long long>>(m, vector<long long>(2)));
  vector<vector<vector<long long>>> cum(n + 1, vector<vector<long long>>(m + 1, vector<long long>(2)));

  for (int i = n - 1; i >= 0; i--) {
    for (int j = 0; j < m; j++) {
      cum[i][j][0] = cum[i + 1][j][0];
      if (arr[i][j] == 'R') {
        cum[i][j][0]++;
      }
    }
  }

  for (int j = m - 1; j >= 0; j--) {
    for (int i = 0; i < n; i++) {
      cum[i][j][1] = cum[i][j + 1][1];
      if (arr[i][j] == 'R') {
        cum[i][j][1]++;
      }
    }
  }

  for (int i = n - 1; i >= 0; i--) {
    for (int j = m - 1; j >= 0; j--) {
      if (i == n - 1 || j == m - 1) {
        if (i == n - 1 && j == m - 1) {
          dp[i][j][0] = dp[i][j][1] = (arr[i][j] == 'R' ? 0 : 1);
        } else if (arr[i][j] != 'R') {
          dp[i][j][0] = dp[i + 1][j][0] + dp[i][j + 1][0];
          dp[i][j][0] %= MOD;
          dp[i][j][1] = dp[i][j][0];
        }
      } else {
        dp[i][j][0] = (dp[i + 1][j + 1][1] - dp[n - cum[i][j][0] + (arr[i][j] == 'R')][j + 1][1] + dp[i + 1][j + 1][1] - dp[i + 1][m - cum[i][j][1]][1] + 2 * MOD) % MOD;
        dp[i][j][1] = (dp[i + 1][j + 1][1] - dp[n - cum[i][j][0]][j + 1][1] + dp[i + 1][j + 1][1] - dp[i + 1][m - cum[i][j][1] + (arr[i][j] == 'R')][1] + 2 * MOD) % MOD;
      }
      dp[i][j][1] += dp[i + 1][j][1] + dp[i][j][0];
      dp[i][j][1] %= MOD;
    }
  }

  cout << dp[0][0][1] << endl;
}

int main(void) {
  solve();
  return 0;
}
```

This optimized program removes unnecessary headers, macros, and variables. It also simplifies the loops and conditions, removes unnecessary calculations and modulo operations, and improves overall readability and performance.