To optimize the given program, we can make the following modifications:

1. Remove unnecessary includes:
   - The `#include <bits/stdc++.h>` include is not necessary and can be removed.
   - The `<iostream>` include is redundant since it is already included in `<bits/stdc++.h>`. We can remove it.

2. Remove unnecessary macros:
   - The `#define pb push_back` macro is not used in the program and can be removed.
   - The `#define ve vector` macro is not used in the program and can be removed.
   - The `#define fi first` macro is not used in the program and can be removed.
   - The `#define se second` macro is not used in the program and can be removed.
   - The `#define pa pair` macro is not used in the program and can be removed.
   - The `#define ld long double` macro is not used in the program and can be removed.
   - The `#define __ freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);` macro is not used in the program and can be removed.
   - The `#define pii pair<int, int>` macro is not used in the program and can be removed.
   - The `#define pll pair<ll, ll>` macro is not used in the program and can be removed.
   - The `#define setvector(vname, value, size)` macro is not used in the program and can be removed.
   - The `#define deci fixed << setprecision(9)` macro is not used in the program and can be removed.

3. Replace `endl` with `'\n'`:
   - The `endl` constant is used in the program to output a newline character. However, it also flushes the output buffer, which can be an unnecessary overhead. We can replace `endl` with `'\n'` to only output a newline character without flushing the buffer.

4. Remove unused variables:
   - The `int32_t tes` variable is declared but not used in the program. We can remove it.

5. Avoid unnecessary vector initialization:
   - The `ve<string> arr(2e3 + 1)` vector is initialized with a size of `2e3 + 1`, but it is not necessary since the size can be determined dynamically based on the input. We can remove the initialization.

6. Optimize exponentiation function:
   - The `power` function is used to calculate exponentiation, but it can be optimized using the binary exponentiation algorithm. We can replace the `power` function with an optimized version.

7. Remove unnecessary loop macros:
   - The `fr` and `frn` loop macros are defined but not used in the program. We can remove them.

8. Simplify loop conditions:
   - The loop conditions `fr(i, 0, n)` and `frn(i, n - 1, -1)` can be simplified to `for (int i = 0; i < n; i++)` and `for (int i = n - 1; i >= 0; i--)` respectively.

After applying these optimizations, here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

#define ll long long int
#define mod 1000000007

ll power(ll x, ll y) {
  ll res = 1ll;
  while (y > 0) {
    if (y & 1)
      res = res * x % mod;
    y >>= 1;
    x = x * x % mod;
  }
  return res;
}

void solve() {
  ll n, m;
  cin >> n >> m;
  vector<string> arr(n);
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }

  vector<vector<vector<ll>>> cum(n + 1, vector<vector<ll>>(m + 1, vector<ll>(2, 0)));
  vector<vector<vector<vector<ll>>>> dp(n + 1, vector<vector<vector<ll>>>(m + 1, vector<vector<ll>>(2, vector<ll>(2, 0))));

  for (int i = n - 1; i >= 0; i--) {
    for (int j = 0; j < m; j++) {
      cum[i][j][0] = cum[i + 1][j][0];
      if (arr[i][j] == 'R')
        cum[i][j][0]++;
    }
  }

  for (int j = m - 1; j >= 0; j--) {
    for (int i = 0; i < n; i++) {
      cum[i][j][1] = cum[i][j + 1][1];
      if (arr[i][j] == 'R')
        cum[i][j][1]++;
    }
  }

  for (int i = n - 1; i >= 0; i--) {
    for (int j = m - 1; j >= 0; j--) {
      if (i == n - 1 || j == m - 1) {
        if (i == n - 1 && j == m - 1)
          dp[i][j][0][0] = dp[i][j][0][1] = arr[i][j] == 'R' ? 0 : 1;
        else if (arr[i][j] != 'R')
          dp[i][j][0][0] = dp[i][j][0][1] =
              (dp[i + 1][j][0][0] + dp[i][j + 1][0][1]) % mod;
      } else {
        dp[i][j][0][0] =
            (dp[i + 1][j + 1][1][0] -
             dp[n - cum[i][j][0] + (arr[i][j] == 'R' ? 1 : 0)][j + 1][1][0] +
             dp[i + 1][j + 1][1][1] - dp[i + 1][m - cum[i][j][1]][1][1] +
             (2ll * mod)) %
            mod;
        dp[i][j][0][1] =
            (dp[i + 1][j + 1][1][0] - dp[n - cum[i][j][0]][j + 1][1][0] +
             dp[i + 1][j + 1][1][1] -
             dp[i + 1][m - cum[i][j][1] + (arr[i][j] == 'R' ? 1 : 0)][1][1] +
             (2ll * mod)) %
            mod;
      }
      dp[i][j][1][0] = (dp[i + 1][j][1][0] + dp[i][j][0][0]) % mod;
      dp[i][j][1][1] = (dp[i][j + 1][1][1] + dp[i][j][0][1]) % mod;
    }
  }

  cout << dp[0][0][0][1] << '\n';
}

int main(void) {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  solve();

  return 0;
}
```