#include <iostream>
#include <vector>
using namespace std;

const int mod = 1000000007;

void solve() {
  int n, m;
  cin >> n >> m;
  vector<string> arr(n);
  for (int i = 0; i < n; i++)
    cin >> arr[i];

  vector<vector<int>> cum(n, vector<int>(m, 0));
  for (int i = n - 1; i >= 0; i--) {
    for (int j = 0; j < m; j++) {
      cum[i][j] = cum[i + 1][j];
      if (arr[i][j] == 'R')
        cum[i][j]++;
    }
  }

  vector<vector<vector<vector<int>>>> dp(
      n, vector<vector<vector<int>>>(m, vector<vector<int>>(2, vector<int>(2, 0))));

  for (int i = n - 1; i >= 0; i--) {
    for (int j = m - 1; j >= 0; j--) {
      if (i == n - 1 || j == m - 1) {
        if (i == n - 1 && j == m - 1)
          dp[i][j][0][0] = dp[i][j][0][1] = arr[i][j] == 'R' ? 0 : 1;
        else if (arr[i][j] != 'R')
          dp[i][j][0][0] = dp[i][j][0][1] =
              (dp[i + 1][j][0][0] + dp[i][j + 1][0][1]) % mod;
      } else {
        dp[i][j][0][0] =
            (dp[i + 1][j + 1][1][0] -
             dp[n - cum[i][j]][j + 1][1][0] +
             dp[i + 1][j + 1][1][1] - dp[i + 1][m - cum[i][j]][1][1] +
             (2 * mod)) %
            mod;
        dp[i][j][0][1] =
            (dp[i + 1][j + 1][1][0] - dp[n - cum[i][j]][j + 1][1][0] +
             dp[i + 1][j + 1][1][1] -
             dp[i + 1][m - cum[i][j] + (arr[i][j] == 'R' ? 1 : 0)][1][1] +
             (2 * mod)) %
            mod;
      }
      dp[i][j][1][0] = (dp[i + 1][j][1][0] + dp[i][j][0][0]) % mod;
      dp[i][j][1][1] = (dp[i][j + 1][1][1] + dp[i][j][0][1]) % mod;
    }
  }

  cout << dp[0][0][0][1] << '\n';
}

int main() {
  int tes = 1;
  while (tes--) {
    solve();
  }
}