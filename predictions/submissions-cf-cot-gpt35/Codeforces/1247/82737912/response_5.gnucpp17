#include <iostream>
#include <vector>
#include <cmath>

const int mod = 1000000007;

void solve() {
    int n, m;
    std::cin >> n >> m;
    std::vector<std::string> arr(n);
    for (int i = 0; i < n; i++) {
        std::cin >> arr[i];
    }

    std::vector<std::vector<std::vector<std::vector<long long>>>> dp(
        n + 1,
        std::vector<std::vector<std::vector<long long>>>(
            m + 1,
            std::vector<std::vector<long long>>(
                2,
                std::vector<long long>(2, 0)
            )
        )
    );

    for (int i = n - 1; i >= 0; i--) {
        for (int j = m - 1; j >= 0; j--) {
            if (i == n - 1 || j == m - 1) {
                if (i == n - 1 && j == m - 1) {
                    dp[i][j][0][0] = dp[i][j][0][1] = (arr[i][j] == 'R' ? 0 : 1);
                } else if (arr[i][j] != 'R') {
                    dp[i][j][0][0] = dp[i][j][0][1] =
                        (dp[i + 1][j][0][0] + dp[i][j + 1][0][1]) % mod;
                }
            } else {
                dp[i][j][0][0] =
                    (dp[i + 1][j + 1][1][0] -
                     dp[n - i][j + 1][1][0] +
                     dp[i + 1][j + 1][1][1] -
                     dp[i + 1][m - j][1][1] +
                     (2ll * mod)) %
                    mod;
                dp[i][j][0][1] =
                    (dp[i + 1][j + 1][1][0] - dp[n - i][j + 1][1][0] +
                     dp[i + 1][j + 1][1][1] -
                     dp[i + 1][m - j + (arr[i][j] == 'R' ? 1 : 0)][1][1] +
                     (2ll * mod)) %
                    mod;
            }
            dp[i][j][1][0] = (dp[i + 1][j][1][0] + dp[i][j][0][0]) % mod;
            dp[i][j][1][1] = (dp[i][j + 1][1][1] + dp[i][j][0][1]) % mod;
        }
    }

    std::cout << dp[0][0][0][1] << std::endl;
}

int main() {
    solve();
    return 0;
}