#include <iostream>
#include <vector>
#include <set>

bool dfs(int i, std::vector<int>& visited, std::vector<int>& being_visited,
         std::vector<int>& TS, const std::vector<std::vector<int>>& g) {
  if (visited[i]) {
    return false;
  } else if (being_visited[i]) {
    return true;
  } else {
    being_visited[i] = 1;
    for (auto j : g[i]) {
      if (dfs(j, visited, being_visited, TS, g))
        return true;
    }
  }
  being_visited[i] = 0;
  visited[i] = 1;
  TS.push_back(i);
  return false;
}

void solve() {
  int n, m;
  std::cin >> n >> m;
  std::vector<int> visited(n + 1, 0), being_visited(n + 1, 0), TS;
  std::vector<std::vector<int>> g(n + 1);
  std::vector<std::set<int>> G(n + 1);
  for (int i = 0; i < m; ++i) {
    int t, x, y;
    std::cin >> t >> x >> y;
    if (t)
      g[x].push_back(y);
    G[x].insert(y);
    G[y].insert(x);
  }
  for (int i = 1; i <= n; ++i) {
    bool ch = true;
    if (g[i].size() == 0 && G[i].size() > 0) {
      for (auto j : G[i]) {
        ch &= (!G[j].count(i));
      }
    } else {
      ch = false;
    }
    if (ch) {
      for (auto j : G[i]) {
        g[i].push_back(j);
      }
    }
  }
  auto havecycle = [&]() {
    for (int i = 1; i <= n; ++i) {
      if (!visited[i]) {
        if (dfs(i, visited, being_visited, TS, g)) {
          return true;
        }
      }
    }
    return false;
  };
  if (havecycle()) {
    puts("NO");
    return;
  }
  puts("YES");
  for (int i = 1; i <= n; ++i) {
    for (auto j : G[i]) {
      if (TS[j] < TS[i])
        printf("%lld %lld\n", j, i);
    }
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  int t = 1;
  std::cin >> t;
  while (t--) {
    solve();
  }

  return 0;
}