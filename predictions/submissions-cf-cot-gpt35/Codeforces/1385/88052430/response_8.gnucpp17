#include <iostream>
#include <vector>
#include <array>
#include <map>

using namespace std;

bool dfs(int i, array<bool, 100001>& visited, array<bool, 100001>& being_visited,
         vector<int>& TS, vector<vector<int>>& g) {
  if (visited[i]) {
    return false;
  } else if (being_visited[i]) {
    return true;
  } else {
    being_visited[i] = true;
    for (auto j : g[i]) {
      if (dfs(j, visited, being_visited, TS, g)) {
        return true;
      }
    }
  }
  being_visited[i] = false;
  visited[i] = true;
  TS.push_back(i);
  return false;
}

void solve() {
  int n, m;
  cin >> n >> m;
  
  array<bool, 100001> visited{}, being_visited{};
  vector<int> TS;
  vector<vector<int>> g(n + 1);
  vector<vector<int>> G(n + 1);
  
  for (int i = 0; i < m; ++i) {
    int t, x, y;
    cin >> t >> x >> y;
    if (t) {
      g[x].push_back(y);
    }
    G[x].push_back(y);
    G[y].push_back(x);
  }
  
  for (int i = 1; i <= n; ++i) {
    bool ch = true;
    if (g[i].empty() && !G[i].empty()) {
      for (auto j : G[i]) {
        ch &= (find(G[j].begin(), G[j].end(), i) == G[j].end());
      }
    } else {
      ch = false;
    }
    if (ch) {
      for (auto j : G[i]) {
        g[i].push_back(j);
      }
    }
  }
  
  auto havecycle = [&]() {
    for (int i = 1; i <= n; ++i) {
      if (!visited[i]) {
        if (dfs(i, visited, being_visited, TS, g)) {
          return true;
        }
      }
    }
    return false;
  };
  
  if (havecycle()) {
    cout << "NO" << endl;
    return;
  }
  
  vector<int> position(n + 1);
  for (int i = 0; i < n; ++i) {
    position[TS[i]] = i;
  }
  
  cout << "YES" << endl;
  for (int i = 1; i <= n; ++i) {
    for (auto j : G[i]) {
      if (position[j] < position[i]) {
        cout << j << " " << i << endl;
      }
    }
  }
}

int main() {
  int t = 1;
  for (cin >> t; t--; solve())
    ;
}