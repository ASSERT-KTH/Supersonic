#include <iostream>
#include <vector>
#include <unordered_set>
#include <unordered_map>
using namespace std;

bool dfs(int i, vector<bool>& visited, vector<bool>& being_visited,
         vector<int>& TS, vector<vector<int>>& g) {
  if (visited[i]) {
    return false;
  } else if (being_visited[i]) {
    return true;
  } else {
    being_visited[i] = true;
    for (const auto& j : g[i]) {
      if (dfs(j, visited, being_visited, TS, g))
        return true;
    }
  }
  being_visited[i] = false;
  visited[i] = true;
  TS.emplace_back(i);
  return false;
}

void solve() {
  int n, m;
  cin >> n >> m;
  vector<bool> visited(n + 1, false), being_visited(n + 1, false);
  vector<int> TS;
  vector<vector<int>> g(n + 1);
  vector<vector<int>> G(n + 1);
  for (int i = 0; i < m; ++i) {
    int t, x, y;
    cin >> t >> x >> y;
    if (t)
      g[x].emplace_back(y);
    G[x].emplace_back(y);
    G[y].emplace_back(x);
  }
  for (int i = 1; i <= n; ++i) {
    bool ch = true;
    if (g[i].empty() && !G[i].empty()) {
      for (const auto& j : G[i]) {
        ch &= (!G[j].count(i));
      }
    } else {
      ch = false;
    }
    if (ch) {
      for (const auto& j : G[i]) {
        g[i].emplace_back(j);
      }
    }
  }
  auto havecycle = [&]() {
    for (int i = 1; i <= n; ++i) {
      if (!visited[i]) {
        if (dfs(i, visited, being_visited, TS, g)) {
          return true;
        }
      }
    }
    return false;
  };
  if (havecycle()) {
    cout << "NO\n";
    return;
  }
  reverse(TS.begin(), TS.end());
  unordered_map<int, int> map;
  for (int i = 0; i < n; ++i) map[TS[i]] = i;
  cout << "YES\n";
  for (int i = 1; i <= n; ++i) {
    for (const auto& j : G[i]) {
      if (map[j] < map[i])
        cout << j << " " << i << "\n";
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t = 1;
  for (cin >> t; t--; solve())
    ;
  return 0;
}