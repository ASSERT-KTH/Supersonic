Step 1: Remove unnecessary headers and namespaces.
- The program includes unnecessary headers and namespaces that are not used in the code. We can remove them to improve the compilation time and reduce memory usage.

Step 2: Remove unused macros.
- The program defines several macros that are not used in the code. We can remove them to simplify the code and reduce memory usage.

Step 3: Optimize the `havecycle` function.
- The `havecycle` function is used to check if there is a cycle in the graph. It uses a depth-first search (DFS) algorithm to detect cycles.
- We can optimize this function by using a boolean flag instead of a vector `visited` to keep track of visited nodes. This will reduce memory usage.
- We can also remove the `being_visited` vector as it is not necessary for cycle detection.
- Instead of using a vector `TS` to store the topological sort, we can directly print the edges in reverse order to achieve the same result.

Step 4: Optimize the construction of the graph.
- The program constructs the graph `g` and the adjacency set `G` based on the input edges.
- We can optimize this process by directly adding the edges to `g` instead of checking for a special condition and then adding them later.
- This will simplify the code and reduce memory usage.

Step 5: Optimize the printing of the edges.
- The program prints the edges of the topological sort in reverse order by using a map to map each node to its position in the topological sort.
- We can optimize this process by directly printing the edges in reverse order based on the position of each node in the topological sort.

Based on these optimizations, here is the optimized C++ program:

```cpp
#include <iostream>
#include <vector>
#include <set>
#include <map>
using namespace std;

bool dfs(int i, vector<bool>& visited, vector<vector<int>>& g, vector<pair<int,int>>& edges) {
    if (visited[i]) {
        return false;
    }
    visited[i] = true;
    for (auto j : g[i]) {
        if (dfs(j, visited, g, edges))
            return true;
    }
    edges.push_back({i, i + 1});
    return false;
}

void solve() {
    int n, m;
    cin >> n >> m;
    vector<bool> visited(n + 1, false);
    vector<vector<int>> g(n + 1);
    vector<pair<int,int>> edges;
    for (int i = 0; i < m; i++) {
        int t, x, y;
        cin >> t >> x >> y;
        if (t)
            g[x].push_back(y);
        g[y].push_back(x);
    }
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            if (dfs(i, visited, g, edges)) {
                cout << "NO" << endl;
                return;
            }
        }
    }
    cout << "YES" << endl;
    for (int i = edges.size() - 1; i >= 0; i--) {
        cout << edges[i].first << " " << edges[i].second << endl;
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int t;
    cin >> t;
    for (int i = 0; i < t; i++) {
        solve();
    }
    return 0;
}
```

Note: The optimized program may have a slightly different order of edges compared to the original program due to the removal of the topological sort vector.