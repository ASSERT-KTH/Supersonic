#include <iostream>
#include <vector>
#include <map>
using namespace std;

bool dfs(int i, vector<int> &visited, vector<int> &being_visited,
         vector<int> &TS, vector<vector<int>> &g) {
  if (visited[i]) {
    return false;
  } else if (being_visited[i]) {
    return true;
  } else {
    being_visited[i] = 1;
    for (auto j : g[i]) {
      if (dfs(j, visited, being_visited, TS, g))
        return true;
    }
  }
  being_visited[i] = 0;
  visited[i] = 1;
  TS.emplace_back(i);
  return false;
}

bool havecycle(vector<int> &visited, vector<int> &being_visited,
               vector<int> &TS, vector<vector<int>> &g) {
  int n = g.size() - 1;
  for (int i = 1; i <= n; i++) {
    if (!visited[i]) {
      if (dfs(i, visited, being_visited, TS, g)) {
        return true;
      }
    }
  }
  return false;
}

void solve() {
  int n, m;
  cin >> n >> m;
  vector<int> visited(n + 1, 0), being_visited(n + 1, 0), TS;
  vector<vector<int>> g(n + 1);
  // vector<set<int>> G(n + 1); // Remove the use of set
  for (int i = 0; i < m; i++) {
    int t, x, y;
    cin >> t >> x >> y;
    if (t)
      g[x].emplace_back(y);
    // G[x].insert(y); // Remove the use of set
    // G[y].insert(x); // Remove the use of set
  }
  for (int i = 1; i <= n; i++) {
    bool ch = true;
    if (g[i].empty() && !G[i].empty()) {
      for (auto j : G[i]) {
        ch &= (!G[j].count(i));
      }
    } else {
      ch = false;
    }
    if (ch) {
      for (auto j : G[i]) {
        g[i].emplace_back(j);
      }
    }
  }
  if (havecycle(visited, being_visited, TS, g)) {
    cout << "NO" << endl;
    return;
  }
  reverse(TS.begin(), TS.end());
  map<int, int> map;
  for (int i = 0; i < n; i++) map[TS[i]] = i;
  cout << "YES" << endl;
  for (int i = 1; i <= n; i++) {
    for (auto j : g[i]) {
      if (map[j] < map[i])
        cout << j << " " << i << endl;
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  for (int i = 0; i < t; i++) {
    solve();
  }
  return 0;
}