#include <iostream>
#include <vector>
#include <set>
#include <map>
using namespace std;

bool dfs(int i, vector<bool>& visited, vector<vector<int>>& g, vector<pair<int,int>>& edges) {
    if (visited[i]) {
        return false;
    }
    visited[i] = true;
    for (auto j : g[i]) {
        if (dfs(j, visited, g, edges))
            return true;
    }
    edges.push_back({i, i + 1});
    return false;
}

void solve() {
    int n, m;
    cin >> n >> m;
    vector<bool> visited(n + 1, false);
    vector<vector<int>> g(n + 1);
    vector<pair<int,int>> edges;
    for (int i = 0; i < m; i++) {
        int t, x, y;
        cin >> t >> x >> y;
        if (t)
            g[x].push_back(y);
        g[y].push_back(x);
    }
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            if (dfs(i, visited, g, edges)) {
                cout << "NO" << endl;
                return;
            }
        }
    }
    cout << "YES" << endl;
    for (int i = edges.size() - 1; i >= 0; i--) {
        cout << edges[i].first << " " << edges[i].second << endl;
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int t;
    cin >> t;
    for (int i = 0; i < t; i++) {
        solve();
    }
    return 0;
}