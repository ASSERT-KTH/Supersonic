#include <iostream>
#include <vector>

using namespace std;

inline void is(int& n) {
    int sign = 1;
    n = 0;
    char c = getchar();
    while (c < '0' || c > '9') {
        if (c == '-')
            sign = -1;
        c = getchar();
    }
    while (c >= '0' && c <= '9')
        n = (n << 3) + (n << 1) + c - '0', c = getchar();
    n = n * sign;
}

inline void compute(int n, int m) {
    vector<vector<int>> g(n + 1);
    vector<int> topo_order(n + 1);
    vector<bool> visited(n + 1, false);
    vector<pair<int, int>> directed_edges, undirected_edges;
    vector<int> ts;
    bool possible = true;

    for (int i = 0; i < m; i++) {
        int t, u, v;
        is(t);
        is(u);
        is(v);
        if (t == 0) {
            undirected_edges.emplace_back(u, v);
        } else {
            directed_edges.emplace_back(u, v);
            g[u].push_back(v);
        }
    }

    function<void(int)> dfs = [&](int node) {
        visited[node] = true;
        for (int next : g[node]) {
            if (!visited[next]) {
                dfs(next);
            }
        }
        ts.push_back(node);
    };

    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            dfs(i);
        }
    }

    int order = 0;
    for (int i = n - 1; i >= 0; i--) {
        topo_order[ts[i]] = order++;
    }

    for (auto& e : directed_edges) {
        if (topo_order[e.first] > topo_order[e.second]) {
            possible = false;
            break;
        }
    }

    if (!possible) {
        cout << "NO" << endl;
        return;
    }

    cout << "YES" << endl;
    for (auto& p : directed_edges) {
        cout << p.first << " " << p.second << endl;
    }
    for (auto& p : undirected_edges) {
        if (topo_order[p.first] < topo_order[p.second]) {
            cout << p.first << " " << p.second << endl;
        } else {
            cout << p.second << " " << p.first << endl;
        }
    }
}

void read_and_query() {
    int n, m;
    is(n);
    is(m);
    compute(n, m);
}

int main() {
    int t;
    is(t);
    while (t--) {
        read_and_query();
    }
    return 0;
}