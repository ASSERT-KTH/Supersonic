The given program is a C++ program that reads a number `t` from the input, which represents the number of test cases. For each test case, it reads two numbers `n` and `m`, followed by `m` lines of input. Each line contains three numbers `t`, `u`, and `v`. If `t` is 0, it means the edge between `u` and `v` is undirected, otherwise it is directed. The program then computes some values based on the input and prints the result.

To optimize the program for running time and memory usage, we can make the following modifications:

1. Remove unnecessary header files: The program includes the `<bits/stdc++.h>` header file, which includes all the standard header files. However, this can increase compilation time and memory usage. Instead, we can include only the necessary header files.

2. Remove unnecessary typedefs: The program defines `LL` and `ULL` as `long long int` and `unsigned long long`, respectively. However, these typedefs are not used in the program. We can remove them to reduce memory usage.

3. Use `'\n'` instead of `endl`: The program uses `endl` to print a new line, which also flushes the output buffer. However, flushing the output buffer can be slow. We can use `'\n'` instead to improve performance.

4. Avoid using `vector<bool>`: The program uses a `vector<bool>` to keep track of visited nodes. However, `vector<bool>` is specialized and can have performance issues. We can use a `vector<int>` instead and store `0` or `1` to represent visited or unvisited nodes.

5. Avoid using `pb` macro: The program uses a `pb` macro to push elements into a vector. However, using a macro can lead to unexpected behavior. We can replace it with the `push_back` function.

6. Avoid using `free`: The program uses `free` to deallocate memory allocated with `calloc`. However, in C++, it is better to use `delete` instead. We can replace `free(topo_order)` with `delete[] topo_order`.

7. Avoid using unnecessary loop variables: The program uses loop variables in the `print` and `pb` macros, but they are not used. We can remove them to improve readability.

After making these modifications, the optimized program is as follows:

```cpp
#include <iostream>
#include <vector>

using namespace std;

const int len = 200001;
vector<int> g[len];
vector<pair<int, int>> directed_edges, undirected_edges;
vector<int> ts;
int *topo_order;
bool possible;

void dfs(int node, vector<int> &visited) {
  visited[node] = 1;
  for (int next : g[node]) {
    if (!visited[next]) {
      dfs(next, visited);
    }
  }
  ts.push_back(node);
}

void compute(int n, int m) {
  vector<int> visited(n + 1, 0);
  for (int i = 1; i <= n; i++) {
    if (!visited[i]) {
      dfs(i, visited);
    }
  }
  int order = 0;
  for (int i = n - 1; i >= 0; i--) {
    topo_order[ts[i]] = order++;
  }
  for (auto &e : directed_edges) {
    if (topo_order[e.first] > topo_order[e.second]) {
      possible = false;
      break;
    }
  }
  if (!possible) {
    cout << "NO\n";
    return;
  }
  cout << "YES\n";
  for (auto &p : directed_edges) {
    cout << p.first << " " << p.second << "\n";
  }
  for (auto &p : undirected_edges) {
    if (topo_order[p.first] < topo_order[p.second]) {
      cout << p.first << " " << p.second << "\n";
    } else {
      cout << p.second << " " << p.first << "\n";
    }
  }
  delete[] topo_order;
}

void read_and_query() {
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < n + 1; i++) {
    g[i].clear();
  }
  int t, u, v;
  directed_edges.clear();
  undirected_edges.clear();
  ts.clear();
  topo_order = new int[n + 1];
  possible = true;
  for (int i = 0; i < m; i++) {
    cin >> t >> u >> v;
    if (t == 0) {
      undirected_edges.push_back({u, v});
    } else {
      directed_edges.push_back({u, v});
      g[u].push_back(v);
    }
  }
  compute(n, m);
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    read_and_query();
  }
  return 0;
}
```

These modifications optimize the program for running time and memory usage.