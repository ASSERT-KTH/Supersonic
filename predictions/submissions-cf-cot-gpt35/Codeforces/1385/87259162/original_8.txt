The given program can be optimized in the following steps:

1. Remove unnecessary headers: The program includes the `<bits/stdc++.h>` header, which includes a large number of headers. This can increase the compilation time and memory usage. We can remove this header and include only the necessary headers.

2. Remove unnecessary typedefs: The program defines typedefs for `long long int` and `unsigned long long`. These typedefs are not used in the program and can be removed.

3. Replace macros with inline functions: The program uses macros for some common operations like iterating over a range and printing an array. These macros can be replaced with inline functions to improve type safety and avoid potential issues.

4. Optimize input/output functions: The program uses custom input/output functions like `gx()` and `px()`, which read and write characters one by one. These functions can be replaced with the standard input/output functions like `scanf()` and `printf()`, which are faster and more efficient.

5. Use a vector instead of an array: The program uses a dynamically allocated array `topo_order` to store the topological order. We can use a `vector` instead, which automatically manages the memory and provides a more convenient interface.

6. Avoid unnecessary copying: The program uses the `pb()` macro to append elements to a vector. This macro copies the element into the vector. We can use the `emplace_back()` function instead, which avoids unnecessary copying by constructing the element directly in the vector.

7. Use range-based for loops: The program uses traditional `for` loops to iterate over vectors. We can use range-based `for` loops instead, which provide a cleaner and more concise syntax.

8. Remove unnecessary memory allocation: The program calls `free()` to deallocate the memory allocated for `topo_order`. Since we are using a vector instead of an array, we don't need to manually deallocate the memory.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const int len = 200001;
vector<int> g[len];
vector<pair<int, int>> directed_edges, undirected_edges;
vector<int> ts;
vector<int> topo_order;
bool possible;

void dfs(int node, vector<bool>& visited) {
    visited[node] = true;
    for (int next : g[node]) {
        if (!visited[next]) {
            dfs(next, visited);
        }
    }
    ts.emplace_back(node);
}

void compute(int n, int m) {
    vector<bool> visited(n + 1, false);
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            dfs(i, visited);
        }
    }
    int order = 0;
    for (int i = n - 1; i >= 0; i--) {
        topo_order[ts[i]] = order++;
    }
    for (auto& e : directed_edges) {
        if (topo_order[e.first] > topo_order[e.second]) {
            possible = false;
            break;
        }
    }
    if (!possible) {
        cout << "NO" << endl;
        return;
    }
    cout << "YES" << endl;
    for (auto& p : directed_edges) {
        cout << p.first << " " << p.second << endl;
    }
    for (auto& p : undirected_edges) {
        if (topo_order[p.first] < topo_order[p.second]) {
            cout << p.first << " " << p.second << endl;
        } else {
            cout << p.second << " " << p.first << endl;
        }
    }
}

void read_and_query() {
    int n, m;
    cin >> n >> m;
    for (int i = 0; i <= n; i++) {
        g[i].clear();
    }
    int t, u, v;
    directed_edges.clear();
    undirected_edges.clear();
    ts.clear();
    topo_order.clear();
    topo_order.resize(n + 1);
    possible = true;
    for (int i = 0; i < m; i++) {
        cin >> t >> u >> v;
        if (t == 0) {
            undirected_edges.emplace_back(u, v);
        } else {
            directed_edges.emplace_back(u, v);
            g[u].emplace_back(v);
        }
    }
    compute(n, m);
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        read_and_query();
    }
    return 0;
}
```