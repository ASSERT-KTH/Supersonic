#include <iostream>
#include <vector>

const int len = 200001;
std::vector<int> g[len];
std::vector<std::pair<int, int>> directed_edges, undirected_edges;
std::vector<int> ts;
std::vector<int> topo_order;
bool possible;

void dfs(int node, std::vector<bool>& visited) {
  visited[node] = true;
  for (int next : g[node]) {
    if (!visited[next]) {
      dfs(next, visited);
    }
  }
  ts.emplace_back(node);
}

void compute(int n, int m) {
  std::vector<bool> visited(n + 1, false);
  for (int i = 1; i <= n; i++) {
    if (!visited[i]) {
      dfs(i, visited);
    }
  }
  int order = 0;
  for (int i = n - 1; i >= 0; i--) {
    topo_order[ts[i]] = order++;
  }
  for (auto& e : directed_edges) {
    if (topo_order[e.first] > topo_order[e.second]) {
      possible = false;
      break;
    }
  }
  std::cout << (possible ? "YES" : "NO") << std::endl;
  for (auto& p : directed_edges) {
    std::cout << p.first << " " << p.second << std::endl;
  }
  for (auto& p : undirected_edges) {
    if (topo_order[p.first] < topo_order[p.second]) {
      std::cout << p.first << " " << p.second << std::endl;
    } else {
      std::cout << p.second << " " << p.first << std::endl;
    }
  }
}

int main() {
  int t;
  std::cin >> t;
  while (t--) {
    int n, m;
    std::cin >> n >> m;
    for (int i = 0; i <= n; i++) {
      g[i].clear();
    }
    directed_edges.clear();
    undirected_edges.clear();
    ts.clear();
    possible = true;
    topo_order.resize(n + 1);
    for (int i = 0; i < m; i++) {
      int t, u, v;
      std::cin >> t >> u >> v;
      if (t == 0) {
        undirected_edges.emplace_back(u, v);
      } else {
        directed_edges.emplace_back(u, v);
        g[u].emplace_back(v);
      }
    }
    compute(n, m);
  }
  return 0;
}