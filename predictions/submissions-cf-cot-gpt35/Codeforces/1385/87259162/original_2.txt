The given program can be optimized in several ways:

1. Remove unnecessary includes: The program includes the entire `<bits/stdc++.h>` header, which is not necessary and can slow down the compilation process. Instead, we should include only the required headers.

2. Remove unnecessary typedefs: The program includes typedefs for `LL` and `ULL` which are not used. We can remove these typedefs.

3. Remove unnecessary macros: The program includes macros for `FORb`, `FORe`, `print`, `pb`, `ins`, `gx`, `px`, `ps`, and `pn`, which are not used. We can remove these macros.

4. Optimize integer input functions: The program includes two functions `is` and `lis` for integer input, which can be optimized to improve performance.

5. Optimize string input functions: The program includes two functions `ss` and `ws` for string input, which can be optimized to improve performance.

6. Use `cout` instead of `printf`: The program uses `printf` for output, we can replace it with `cout` for better readability.

7. Avoid dynamic memory allocation: The program dynamically allocates memory for `topo_order` using `calloc`. We can avoid this dynamic memory allocation by using a `vector` instead.

8. Avoid unnecessary vector copies: The program makes unnecessary copies of vectors `directed_edges`, `undirected_edges`, and `ts`. We can avoid these copies by passing the vectors as references.

9. Use `reserve` for vector capacity: The program can use `reserve` function to pre-allocate memory for vectors to avoid unnecessary reallocations.

10. Remove unnecessary `free`: The program uses `free` to deallocate memory allocated by `calloc`. Since we are using vectors, we don't need to manually deallocate memory.

Based on these optimizations, here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const int len = 200001;
vector<int> g[len];
vector<pair<int, int>> directed_edges, undirected_edges;
vector<int> ts;

bool possible;

void dfs(int node, vector<bool>& visited) {
    visited[node] = true;
    for (int next : g[node]) {
        if (!visited[next]) {
            dfs(next, visited);
        }
    }
    ts.push_back(node);
}

void compute(int n, int m) {
    vector<bool> visited(n + 1, false);
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            dfs(i, visited);
        }
    }
    int order = 0;
    for (int i = n - 1; i >= 0; i--) {
        order++;
    }
    for (auto& e : directed_edges) {
        if (ts[e.first] > ts[e.second]) {
            possible = false;
            break;
        }
    }
    if (!possible) {
        cout << "NO" << endl;
        return;
    }
    cout << "YES" << endl;
    for (auto& p : directed_edges) {
        cout << p.first << " " << p.second << endl;
    }
    for (auto& p : undirected_edges) {
        if (ts[p.first] < ts[p.second]) {
            cout << p.first << " " << p.second << endl;
        } else {
            cout << p.second << " " << p.first << endl;
        }
    }
}

void read_and_query() {
    int n, m;
    cin >> n >> m;
    for (int i = 0; i <= n; i++) {
        g[i].clear();
    }
    int t, u, v;
    directed_edges.clear();
    undirected_edges.clear();
    ts.clear();
    possible = true;
    for (int i = 0; i < m; i++) {
        cin >> t >> u >> v;
        if (t == 0) {
            undirected_edges.push_back({u, v});
        } else {
            directed_edges.push_back({u, v});
            g[u].push_back(v);
        }
    }
    compute(n, m);
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        read_and_query();
    }
    return 0;
}
```