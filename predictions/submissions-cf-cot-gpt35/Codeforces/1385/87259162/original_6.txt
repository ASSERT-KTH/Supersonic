Step 1: Remove unnecessary includes and using statements

The program includes the `<bits/stdc++.h>` header, which is not recommended because it includes a large number of headers that may not be needed. Instead, we can include only the necessary headers for the program. Similarly, we can remove the "using namespace std;" statement and use the std:: prefix for the standard library functions and types.

Step 2: Replace macros with const variables

The program uses macros for constants and loops. We can replace these macros with const variables and standard for loops for better code readability and maintainability.

Step 3: Optimize input/output functions

The program uses custom input/output functions that are not efficient. We can replace these functions with the standard input/output functions from the iostream library (cin, cout).

Step 4: Use vectors instead of arrays for storing edges

The program uses arrays to store directed_edges, undirected_edges, and ts. We can use vectors instead, which are more efficient and flexible.

Step 5: Optimize the compute function

The compute function has some unnecessary checks and duplicate code. We can simplify the logic and remove the unnecessary checks for better performance.

Step 6: Remove unnecessary memory allocation

The program uses the calloc function to allocate memory for topo_order. We can use a vector instead, which will automatically manage memory and improve performance.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

const int len = 200001;
std::vector<int> g[len];
std::vector<std::pair<int, int>> directed_edges, undirected_edges;
std::vector<int> ts;
std::vector<int> topo_order;
bool possible;

void dfs(int node, std::vector<bool>& visited) {
  visited[node] = true;
  for (int next : g[node]) {
    if (!visited[next]) {
      dfs(next, visited);
    }
  }
  ts.push_back(node);
}

void compute(int n, int m) {
  std::vector<bool> visited(n + 1, false);
  for (int i = 1; i <= n; i++) {
    if (!visited[i]) {
      dfs(i, visited);
    }
  }
  int order = 0;
  for (int i = n - 1; i >= 0; i--) {
    topo_order[ts[i]] = order++;
  }
  for (const auto& e : directed_edges) {
    if (topo_order[e.first] > topo_order[e.second]) {
      possible = false;
      break;
    }
  }
  if (!possible) {
    std::cout << "NO" << std::endl;
    return;
  }
  std::cout << "YES" << std::endl;
  for (const auto& p : directed_edges) {
    std::cout << p.first << " " << p.second << std::endl;
  }
  for (const auto& p : undirected_edges) {
    if (topo_order[p.first] < topo_order[p.second]) {
      std::cout << p.first << " " << p.second << std::endl;
    } else {
      std::cout << p.second << " " << p.first << std::endl;
    }
  }
}

void read_and_query() {
  int n, m;
  std::cin >> n >> m;
  for (int i = 0; i < n + 1; i++) {
    g[i].clear();
  }
  int t, u, v;
  directed_edges.clear();
  undirected_edges.clear();
  ts.clear();
  topo_order.resize(n + 1);
  possible = true;
  for (int i = 0; i < m; i++) {
    std::cin >> t >> u >> v;
    if (t == 0) {
      undirected_edges.push_back({u, v});
    } else {
      directed_edges.push_back({u, v});
      g[u].push_back(v);
    }
  }
  compute(n, m);
}

int main() {
  int t;
  std::cin >> t;
  while (t--) {
    read_and_query();
  }
  return 0;
}
```