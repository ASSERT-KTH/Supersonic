The given program can be optimized by making the following modifications:

1. Remove unnecessary header file inclusion: The program includes the `<bits/stdc++.h>` header file, which includes all standard library headers. This can be replaced with the specific headers that are actually required by the program.

2. Avoid using macros: The program uses macros for various purposes, such as loops and printing. Macros can lead to code duplication and can be error-prone. It is better to replace them with inline functions or regular code.

3. Optimize input/output functions: The program uses custom input/output functions that read/write characters one by one. This can be time-consuming. It is better to use standard input/output functions, such as `scanf` and `printf`, which are faster.

4. Use `std::vector` instead of raw arrays: The program uses raw arrays for storing graph edges and other data. Using `std::vector` can provide better memory management and avoid potential buffer overflows.

5. Avoid unnecessary memory allocation: The program allocates memory for `topo_order` using `calloc`. Instead, a `std::vector<int>` can be used, which automatically manages memory.

6. Avoid unnecessary copying of data: The program copies the directed and undirected edges into separate vectors. Instead, the program can directly iterate over the original input and process accordingly.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

void dfs(int node, vector<bool>& visited, vector<vector<int>>& g, vector<int>& ts) {
    visited[node] = true;
    for (int next : g[node]) {
        if (!visited[next]) {
            dfs(next, visited, g, ts);
        }
    }
    ts.push_back(node);
}

void compute(vector<vector<int>>& g, vector<pair<int, int>>& directed_edges, vector<pair<int, int>>& undirected_edges) {
    int n = g.size() - 1;
    vector<bool> visited(n + 1, false);
    vector<int> ts;
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            dfs(i, visited, g, ts);
        }
    }
    vector<int> topo_order(n + 1);
    int order = 0;
    for (int i = n - 1; i >= 0; i--) {
        topo_order[ts[i]] = order++;
    }
    bool possible = true;
    for (auto& e : directed_edges) {
        if (topo_order[e.first] > topo_order[e.second]) {
            possible = false;
            break;
        }
    }
    if (!possible) {
        cout << "NO" << endl;
        return;
    }
    cout << "YES" << endl;
    for (auto& p : directed_edges) {
        cout << p.first << " " << p.second << endl;
    }
    for (auto& p : undirected_edges) {
        if (topo_order[p.first] < topo_order[p.second]) {
            cout << p.first << " " << p.second << endl;
        } else {
            cout << p.second << " " << p.first << endl;
        }
    }
}

void read_and_query() {
    int n, m;
    cin >> n >> m;
    vector<vector<int>> g(n + 1);
    vector<pair<int, int>> directed_edges, undirected_edges;
    for (int i = 0; i < m; i++) {
        int t, u, v;
        cin >> t >> u >> v;
        if (t == 0) {
            undirected_edges.push_back({u, v});
        } else {
            directed_edges.push_back({u, v});
            g[u].push_back(v);
        }
    }
    compute(g, directed_edges, undirected_edges);
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        read_and_query();
    }
    return 0;
}
```

Explanation of optimizations:

1. Removed unnecessary header file inclusion.
2. Replaced macros with regular code.
3. Replaced custom input/output functions with standard input/output functions.
4. Used `std::vector` instead of raw arrays.
5. Removed unnecessary memory allocation and copying of data.