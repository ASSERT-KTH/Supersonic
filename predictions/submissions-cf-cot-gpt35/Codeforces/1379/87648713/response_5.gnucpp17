#include <iostream>
#include <string>
using namespace std;

string p = "abacaba";

int counts(string s) {
  int c = 0;
  int n = s.size();
  int m = p.size();
  int pi[m];
  
  // Preprocess the pattern using KMP algorithm
  pi[0] = 0;
  int j = 0;
  for (int i = 1; i < m; i++) {
    if (p[i] == p[j]) {
      j++;
    } else {
      while (j > 0) {
        j = pi[j - 1];
        if (p[i] == p[j]) {
          j++;
          break;
        }
      }
    }
    pi[i] = j;
  }
  
  // Count occurrences of the pattern in s
  j = 0;
  for (int i = 0; i < n; i++) {
    if (s[i] == p[j]) {
      j++;
      if (j == m) {
        c++;
        j = pi[j - 1];
      }
    } else if (j > 0) {
      j = pi[j - 1];
      i--;
    }
  }
  
  return c;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int t;
  cin >> t;
  
  while (t--) {
    int n;
    cin >> n;
    
    string s;
    cin >> s;
    
    bool found = false;
    for (int i = 0; i <= n - p.size(); i++) {
      string ss = s;
      
      bool possible = true;
      for (int j = 0; j < p.size(); j++) {
        if (ss[i + j] != p[j] && ss[i + j] != '?') {
          possible = false;
          break;
        } else {
          ss[i + j] = p[j];
        }
      }
      
      if (possible && counts(ss) == 1) {
        for (int i = 0; i < n; i++) {
          if (ss[i] == '?')
            ss[i] = 'd';
        }
        
        cout << "YES" << endl;
        cout << ss << endl;
        found = true;
        break;
      }
    }
    
    if (!found)
      cout << "NO" << endl;
  }
  
  return 0;
}