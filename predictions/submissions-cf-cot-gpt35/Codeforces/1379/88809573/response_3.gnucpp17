#include <algorithm>
#include <cstdio>

const int maxn = 2e5 + 10;

struct node {
  long long a, b;
} f[maxn];

long long A[maxn], suf[maxn];

int main() {
  int q;
  scanf("%d", &q);
  
  while (q--) {
    int n, m;
    scanf("%d%d", &n, &m);
    
    for (int i = 1; i <= m; i++) {
      scanf("%lld %lld", &f[i].a, &f[i].b);
      A[i] = f[i].a;
    }
    
    std::partial_sort(A + 1, A + 1 + m, A + 1 + n);
    
    suf[m + 1] = 0;
    for (int i = m; i >= 1; i--)
      suf[i] = suf[i + 1] + A[i];
    
    long long ans = suf[m - n + 1];
    
    for (int i = 1; i <= m; i++) {
      long long temp = 0;
      int pos = std::lower_bound(A + 1, A + 1 + m, f[i].b) - A;
      
      if (pos <= m - n + 1)
        continue;
      
      temp += suf[pos];
      int num = n - (m - pos + 1);
      
      if (f[i].a < f[i].b)
        temp += f[i].a, num--;
      
      temp += num * f[i].b;
      
      ans = std::max(ans, temp);
    }
    
    printf("%lld\n", ans);
  }
  
  return 0;
}