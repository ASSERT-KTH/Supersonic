Step 1: Eliminate unnecessary includes
- The program includes several unnecessary header files. We can remove the following includes since they are not used in the program: `cmath`, `cstdio`, `cstring`, `iostream`, `map`, `queue`, `set`, `stack`, and `string`.

Step 2: Remove unused macros
- The program defines macros `pb`, `mp`, `fi`, `se`, `mul_mod`, and `add_mod`, but they are not used in the program. We can remove these macros to simplify the code.

Step 3: Use `std::vector` instead of arrays
- The program uses arrays `A`, `B`, and `suf` to store elements. We can replace these arrays with `std::vector` to simplify the code and avoid potential memory issues.

Step 4: Optimize sorting
- The program sorts array `A` using `std::sort` before using it for binary search. Instead of sorting the entire array, we can use `std::partial_sort` to only sort the necessary elements for the binary search.

Step 5: Use `std::lower_bound` once
- The program uses `std::lower_bound` multiple times in a loop. We can optimize this by storing the result of `std::lower_bound` in a variable and reuse it in the loop.

Step 6: Optimize calculation of `temp`
- The calculation of `temp` can be simplified by using a single formula instead of multiple separate calculations.

Here is the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>

typedef long long ll;

const int maxn = 2e5 + 10;
int q;

struct node {
  ll a, b;
};

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);

  std::cin >> q;
  while (q--) {
    int n, m;
    std::cin >> n >> m;

    std::vector<node> f(m + 1);
    std::vector<ll> A(m + 1), suf(m + 1);

    for (int i = 1; i <= m; i++) {
      std::cin >> f[i].a >> f[i].b;
      A[i] = f[i].a;
    }

    std::partial_sort(A.begin() + 1, A.begin() + 1 + m, A.begin() + 1 + n);

    ll sum = 0;
    for (int i = m; i >= 1; i--) {
      suf[i] = suf[i + 1] + A[i];
      if (i >= m - n + 1) {
        sum += A[i];
      }
    }

    ll ans = sum;
    for (int i = 1; i <= m; i++) {
      ll temp = sum;
      int pos = std::lower_bound(A.begin() + 1, A.begin() + 1 + m, f[i].b) - A.begin();
      if (pos > m - n + 1) {
        temp += suf[pos] - A[pos] + (n - (m - pos + 1)) * f[i].b;
        if (f[i].a < f[i].b) {
          temp += f[i].a;
        }
        ans = std::max(ans, temp);
      }
    }

    std::cout << ans << '\n';
  }

  return 0;
}
```

Explanation of optimizations:
- By removing unnecessary includes and macros, the code becomes cleaner and easier to read.
- Using `std::vector` instead of arrays simplifies memory management and avoids potential memory issues.
- By using `std::partial_sort` instead of `std::sort`, we only sort the necessary elements for the binary search, resulting in improved performance.
- By storing the result of `std::lower_bound` in a variable and reusing it, we avoid unnecessary repeated calculations.
- By simplifying the calculation of `temp` using a single formula, we improve code readability and reduce the number of operations.