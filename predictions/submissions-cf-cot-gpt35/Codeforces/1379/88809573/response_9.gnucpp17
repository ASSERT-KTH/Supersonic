#include <algorithm>
#include <iostream>
#include <vector>

typedef long long ll;

const int maxn = 2e5 + 10;
int q;

struct node {
  ll a, b;
};

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);

  std::cin >> q;
  while (q--) {
    int n, m;
    std::cin >> n >> m;

    std::vector<node> f(m + 1);
    std::vector<ll> A(m + 1), suf(m + 1);

    for (int i = 1; i <= m; i++) {
      std::cin >> f[i].a >> f[i].b;
      A[i] = f[i].a;
    }

    std::partial_sort(A.begin() + 1, A.begin() + 1 + m, A.begin() + 1 + n);

    ll sum = 0;
    for (int i = m; i >= 1; i--) {
      suf[i] = suf[i + 1] + A[i];
      if (i >= m - n + 1) {
        sum += A[i];
      }
    }

    ll ans = sum;
    for (int i = 1; i <= m; i++) {
      ll temp = sum;
      int pos = std::lower_bound(A.begin() + 1, A.begin() + 1 + m, f[i].b) - A.begin();
      if (pos > m - n + 1) {
        temp += suf[pos] - A[pos] + (n - (m - pos + 1)) * f[i].b;
        if (f[i].a < f[i].b) {
          temp += f[i].a;
        }
        ans = std::max(ans, temp);
      }
    }

    std::cout << ans << '\n';
  }

  return 0;
}