#include <algorithm>
#include <iostream>
#include <cstring>
using namespace std;

const int maxn = 2e5 + 10;

struct node {
  long long a, b;
} f[maxn];

long long A[maxn], suf[maxn];

int main() {
  int q;
  cin >> q;
  while (q--) {
    int n, m;
    cin >> n >> m;
    for (int i = 1; i <= m; i++) {
      cin >> f[i].a >> f[i].b;
      A[i] = f[i].a;
    }

    partial_sort(A + 1, A + 1 + m - n, A + 1 + m);

    memset(suf, 0, sizeof(suf));
    for (int i = m - n + 1; i <= m; i++) {
      suf[i] = suf[i + 1] + A[i];
    }

    long long ans = suf[m - n + 1];
    for (int i = 1; i <= m; i++) {
      int pos = lower_bound(A + 1 + m - n + 1, A + 1 + m, f[i].b) - A;
      if (pos <= m) {
        long long temp = suf[pos];
        int num = n - (m - pos);
        if (f[i].a < f[i].b) {
          temp += f[i].a;
          num--;
        }
        temp += num * f[i].b;
        ans = max(ans, temp);
      }
    }

    cout << ans << endl;
  }

  return 0;
}