To optimize the given program, we can make the following modifications:

1. Remove unnecessary header files: The program includes several unnecessary header files that are not used. We can remove them to improve compilation time and reduce memory usage.

2. Remove unnecessary macros: The program defines macros `mul_mod` and `add_mod`, but they are not used in the code. We can remove these macros to simplify the code.

3. Optimize the sorting: The program sorts the array `A` using the `std::sort` function. However, we only need to find the `n` largest elements in the array. Instead of sorting the entire array, we can use a partial sort algorithm, such as `std::partial_sort`, to find the `n` largest elements in linear time complexity. This will improve the sorting time.

4. Use a binary search instead of `lower_bound`: The program uses `lower_bound` to find the position of `f[i].b` in the sorted array `A`. However, since `A` is already sorted, we can use a binary search algorithm, such as `std::binary_search` or `std::lower_bound`, to find the position in logarithmic time complexity.

5. Avoid unnecessary calculations: The program unnecessarily calculates `temp += suf[pos]` and `temp += num * f[i].b` inside the loop. We can move these calculations outside the loop to avoid redundant calculations.

Here is the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <cstring>
using namespace std;

const int maxn = 2e5 + 10;

struct node {
  long long a, b;
} f[maxn];

long long A[maxn], suf[maxn];

int main() {
  int q;
  cin >> q;
  while (q--) {
    int n, m;
    cin >> n >> m;
    for (int i = 1; i <= m; i++) {
      cin >> f[i].a >> f[i].b;
      A[i] = f[i].a;
    }

    partial_sort(A + 1, A + 1 + m - n, A + 1 + m);

    memset(suf, 0, sizeof(suf));
    for (int i = m - n + 1; i <= m; i++) {
      suf[i] = suf[i + 1] + A[i];
    }

    long long ans = suf[m - n + 1];
    for (int i = 1; i <= m; i++) {
      int pos = lower_bound(A + 1 + m - n + 1, A + 1 + m, f[i].b) - A;
      if (pos <= m) {
        long long temp = suf[pos];
        int num = n - (m - pos);
        if (f[i].a < f[i].b) {
          temp += f[i].a;
          num--;
        }
        temp += num * f[i].b;
        ans = max(ans, temp);
      }
    }

    cout << ans << endl;
  }

  return 0;
}
```