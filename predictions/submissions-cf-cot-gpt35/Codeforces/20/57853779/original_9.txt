To optimize the given program, I would propose the following steps:

1. Remove unnecessary include statements: The program includes the entire `<bits/stdc++.h>` library, which is not recommended and can slow down the compilation process. We can remove it and include only the necessary headers.

2. Use `reserve()` function for the adjacency list: Since we know the maximum number of vertices, `maxn`, we can use the `reserve()` function to allocate the required memory for the adjacency list. This will prevent unnecessary reallocations and improve memory usage.

3. Use `emplace_back()` instead of `push_back()`: Instead of using `push_back()` to add elements to the adjacency list, we can use `emplace_back()` which constructs the element directly in-place, avoiding unnecessary copies or moves. This can improve performance.

4. Use a `vector` instead of `priority_queue`: Instead of using a `priority_queue` to store the vertices, we can use a `vector` and manually sort it using `std::sort()` before each iteration of the Dijkstra's algorithm. This can be more efficient in terms of memory usage and running time.

5. Avoid using `reverse()` function: Instead of using `reverse()` function to reverse the path vector, we can directly push the elements in the correct order while building the path. This can save an additional step and improve performance.

Here is the optimized program incorporating these steps:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const long long INF = 1e18;
const int maxn = 100005;

int main() {
  int n, m;
  cin >> n >> m;
  
  if (m == 0) {
    cout << "-1" << endl;
    return 0;
  }
  
  vector<pair<int, int>> adj[maxn];
  adj->reserve(m * 2); // Step 2: Reserve memory for adjacency list
  
  for (int i = 0; i < m; i++) {
    int a, b, w;
    cin >> a >> b >> w;
    adj[a].emplace_back(b, w); // Step 3: Use emplace_back() instead of push_back()
    adj[b].emplace_back(a, w); // Step 3: Use emplace_back() instead of push_back()
  }
  
  int x = 1;
  vector<bool> processed(maxn, false);
  vector<int> distance(maxn, INF);
  vector<int> p(maxn, -1);
  distance[x] = 0;
  
  vector<int> q; // Step 4: Use vector instead of priority_queue
  q.reserve(maxn);
  
  q.push_back(x);
  while (!q.empty()) {
    int a = q.back();
    q.pop_back();
    
    if (processed[a]) {
      continue;
    }
    
    processed[a] = true;
    
    for (auto u : adj[a]) {
      int b = u.first, w = u.second;
      if (distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        p[b] = a;
        q.push_back(b);
      }
    }
    
    std::sort(q.begin(), q.end(), [&](int i, int j) { // Step 4: Manually sort the vector
      return distance[i] < distance[j];
    });
  }
  
  if (p[n] == -1) {
    cout << "-1" << endl;
    return 0;
  }
  
  vector<int> path;
  path.reserve(n); // Reserve memory for path vector
  
  for (int v = n; v != x; v = p[v]) {
    path.push_back(v); // Step 5: Push elements in the correct order
  }
  
  path.push_back(x);
  
  for (auto i : path) {
    cout << i << ' ';
  }
  
  cout << endl;
}
```

This optimized program should have improved running time and memory usage compared to the original program.