#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

const long long INF = 1e18;
const int maxn = 100005;

int main() {
    int n, m;
    cin >> n >> m;
    if (m == 0) {
        cout << "-1" << endl;
        return 0;
    }

    vector<vector<pair<int, int>>> adj(maxn);
    adj.reserve(maxn);

    for (int i = 0; i < m; i++) {
        int a, b, w;
        cin >> a >> b >> w;
        adj[a].emplace_back(b, w);
        adj[b].emplace_back(a, w);
    }

    int x = 1;
    vector<bool> processed(maxn, false);
    vector<int> distance(maxn, INF);
    vector<int> p(maxn, -1);
    distance[x] = 0;

    using pii = pair<int, int>;
    auto cmp = [](const pii& a, const pii& b) {
        return a.first > b.first;
    };
    priority_queue<pii, vector<pii>, decltype(cmp)> q(cmp);
    q.emplace(0, x);

    while (!q.empty()) {
        int a = q.top().second;
        q.pop();
        if (processed[a])
            continue;
        processed[a] = true;
        for (const auto& [b, w] : adj[a]) {
            if (distance[a] + w < distance[b]) {
                distance[b] = distance[a] + w;
                p[b] = a;
                q.emplace(-distance[b], b);
            }
        }
    }

    if (p[n] == -1) {
        cout << "-1" << endl;
        return 0;
    }

    vector<int> path;
    path.reserve(maxn);
    for (int v = n; v != x; v = p[v]) {
        path.push_back(v);
    }
    path.push_back(x);
    reverse(path.begin(), path.end());

    for (const auto& i : path)
        cout << i << ' ';
    cout << endl;
}