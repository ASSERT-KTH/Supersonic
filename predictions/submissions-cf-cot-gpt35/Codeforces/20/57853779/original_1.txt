To optimize the given program, we can make the following improvements:

1. Remove unnecessary headers: The program includes the `<bits/stdc++.h>` header, which is not standard and includes a lot of unnecessary headers. We can remove it and include only the necessary headers, such as `<iostream>` and `<vector>`.

2. Use a smaller data type for the adjacency list: The program uses a `vector<pair<int, int>>` for the adjacency list, where the first `int` represents the neighbor and the second `int` represents the weight. However, the problem statement does not specify the range of the weights. If the weights are guaranteed to be small, we can use a smaller data type like `int` or `short` instead of `long long` to save memory.

3. Use a priority queue with a custom comparator: The program uses a priority queue to store the nodes with the minimum distance. By default, the priority queue uses a max heap, which means the elements with the highest priority (largest distance) are at the top. However, we want the elements with the lowest distance to be at the top. To achieve this, we can use a priority queue with a custom comparator that compares the distances in reverse order.

4. Use a smaller container for the `processed` vector: The program uses a `vector<bool>` to store whether a node has been processed or not. However, the `vector<bool>` specialization is not memory-efficient, as it stores each boolean value in a separate bit. We can use a `vector<char>` instead, which uses a byte for each boolean value.

5. Remove unnecessary values from `p` vector: The program initializes the `p` vector with `-1` for all nodes, but only updates the values for the nodes that are reachable from the start node. We can optimize this by only initializing the vector for the reachable nodes.

6. Use a smaller container for the `path` vector: The program uses a `vector<int>` to store the path from the start node to the end node. Since the start node is always 1, we can save memory by using a `vector<short>` instead of `vector<int>`.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

const int INF = 1e18;
const int maxn = 100005;

int main() {
  int n, m;
  std::cin >> n >> m;
  
  if (m == 0) {
    std::cout << "-1" << std::endl;
    return 0;
  }
  
  std::vector<std::vector<std::pair<int, int>>> adj(maxn);
  
  for (int i = 0; i < m; i++) {
    int a, b, w;
    std::cin >> a >> b >> w;
    adj[a].push_back({b, w});
    adj[b].push_back({a, w});
  }
  
  int x = 1;
  
  std::vector<char> processed(maxn, false);
  std::vector<int> distance(maxn, INF);
  
  std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, std::greater<std::pair<int, int>>> q;
  
  distance[x] = 0;
  q.push({0, x});
  
  while (!q.empty()) {
    int a = q.top().second;
    q.pop();
    
    if (processed[a])
      continue;
    
    processed[a] = true;
    
    for (auto u : adj[a]) {
      int b = u.first, w = u.second;
      
      if (distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        q.push({distance[b], b});
      }
    }
  }
  
  if (distance[n] == INF) {
    std::cout << "-1" << std::endl;
    return 0;
  }
  
  std::vector<short> path;
  for (int v = n; v != x; v = p[v]) {
    path.push_back(v);
  }
  path.push_back(x);
  std::reverse(path.begin(), path.end());
  
  for (auto i : path)
    std::cout << i << ' ';
  
  std::cout << std::endl;
}
```