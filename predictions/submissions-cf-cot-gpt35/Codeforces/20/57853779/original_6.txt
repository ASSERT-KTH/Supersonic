Step 1: Remove unnecessary headers
- The program includes the header `<bits/stdc++.h>` which is not necessary and includes a lot of unnecessary headers. We can remove this line.

Step 2: Optimize data structures
- The program currently uses `vector<pair<int, int>>` for the adjacency list, `vector<bool>` for processed nodes, and `vector<int>` for distances and parents. 
- We can optimize the memory usage by using `vector<vector<pair<int, int>>>` for the adjacency list, `vector<char>` for processed nodes, and `vector<int>` for distances and parents. 
- Using `vector<char>` instead of `vector<bool>` will reduce memory usage as `vector<bool>` uses 1 bit per element, whereas `vector<char>` uses 1 byte per element.

Step 3: Use a faster input/output method
- The program currently uses `cin` and `cout` for input/output operations. These operations can be slow for large inputs/outputs. We can use `scanf` and `printf` instead, which are faster.

Step 4: Avoid unnecessary comparisons
- The program checks if `m == 0` before reading the edges. However, this check is not necessary as the `for` loop will not execute if `m == 0`. We can remove this check.

Step 5: Optimize reverse operation
- The program uses `reverse` to reverse the path vector. However, we can avoid this operation by modifying the loop that constructs the path vector. We can start iterating from `x` and push the elements in reverse order, eliminating the need for the reverse operation.

Step 6: Optimize the priority queue
- The program uses a `priority_queue` to store nodes based on their distances. However, the current implementation uses a negative distance value to achieve a max-heap behavior. This can be optimized by using a min-heap and storing the distances as negative values. This eliminates the need for negating the distance values.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

const int INF = 1e18;
const int maxn = 100005;

int main() {
  int n, m;
  scanf("%d %d", &n, &m);
  vector<vector<pair<int, int>>> adj(maxn);
  for (int i = 0; i < m; i++) {
    int a, b, w;
    scanf("%d %d %d", &a, &b, &w);
    adj[a].push_back({b, w});
    adj[b].push_back({a, w});
  }
  int x = 1;
  vector<char> processed(maxn, false);
  vector<int> distance(maxn, INF);
  vector<int> p(maxn, -1);
  distance[x] = 0;
  using pii = pair<int, int>;
  priority_queue<pii, vector<pii>, greater<pii>> q;
  q.push({0, x});
  while (!q.empty()) {
    int a = q.top().second;
    q.pop();
    if (processed[a])
      continue;
    processed[a] = true;
    for (auto u : adj[a]) {
      int b = u.first, w = u.second;
      if (distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        p[b] = a;
        q.push({distance[b], b});
      }
    }
  }
  if (p[n] == -1) {
    printf("-1\n");
    return 0;
  }
  vector<int> path;
  for (int v = n; v != x; v = p[v]) {
    path.push_back(v);
  }
  path.push_back(x);
  for (int i = path.size() - 1; i >= 0; i--) {
    printf("%d ", path[i]);
  }
  printf("\n");
  return 0;
}
```