#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const long long INF = 1e18;
const int maxn = 100005;

int main() {
  int n, m;
  cin >> n >> m;
  
  if (m == 0) {
    cout << "-1" << endl;
    return 0;
  }
  
  vector<pair<int, int>> adj[maxn];
  adj->reserve(m * 2); // Step 2: Reserve memory for adjacency list
  
  for (int i = 0; i < m; i++) {
    int a, b, w;
    cin >> a >> b >> w;
    adj[a].emplace_back(b, w); // Step 3: Use emplace_back() instead of push_back()
    adj[b].emplace_back(a, w); // Step 3: Use emplace_back() instead of push_back()
  }
  
  int x = 1;
  vector<bool> processed(maxn, false);
  vector<int> distance(maxn, INF);
  vector<int> p(maxn, -1);
  distance[x] = 0;
  
  vector<int> q; // Step 4: Use vector instead of priority_queue
  q.reserve(maxn);
  
  q.push_back(x);
  while (!q.empty()) {
    int a = q.back();
    q.pop_back();
    
    if (processed[a]) {
      continue;
    }
    
    processed[a] = true;
    
    for (auto u : adj[a]) {
      int b = u.first, w = u.second;
      if (distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        p[b] = a;
        q.push_back(b);
      }
    }
    
    std::sort(q.begin(), q.end(), [&](int i, int j) { // Step 4: Manually sort the vector
      return distance[i] < distance[j];
    });
  }
  
  if (p[n] == -1) {
    cout << "-1" << endl;
    return 0;
  }
  
  vector<int> path;
  path.reserve(n); // Reserve memory for path vector
  
  for (int v = n; v != x; v = p[v]) {
    path.push_back(v); // Step 5: Push elements in the correct order
  }
  
  path.push_back(x);
  
  for (auto i : path) {
    cout << i << ' ';
  }
  
  cout << endl;
}