#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

const int INF = 1e18;
const int maxn = 100005;

int main() {
  int n, m;
  std::cin >> n >> m;
  
  if (m == 0) {
    std::cout << "-1" << std::endl;
    return 0;
  }
  
  std::vector<std::vector<std::pair<int, int>>> adj(maxn);
  
  for (int i = 0; i < m; i++) {
    int a, b, w;
    std::cin >> a >> b >> w;
    adj[a].push_back({b, w});
    adj[b].push_back({a, w});
  }
  
  int x = 1;
  
  std::vector<char> processed(maxn, false);
  std::vector<int> distance(maxn, INF);
  
  std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, std::greater<std::pair<int, int>>> q;
  
  distance[x] = 0;
  q.push({0, x});
  
  while (!q.empty()) {
    int a = q.top().second;
    q.pop();
    
    if (processed[a])
      continue;
    
    processed[a] = true;
    
    for (auto u : adj[a]) {
      int b = u.first, w = u.second;
      
      if (distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        q.push({distance[b], b});
      }
    }
  }
  
  if (distance[n] == INF) {
    std::cout << "-1" << std::endl;
    return 0;
  }
  
  std::vector<short> path;
  for (int v = n; v != x; v = p[v]) {
    path.push_back(v);
  }
  path.push_back(x);
  std::reverse(path.begin(), path.end());
  
  for (auto i : path)
    std::cout << i << ' ';
  
  std::cout << std::endl;
}