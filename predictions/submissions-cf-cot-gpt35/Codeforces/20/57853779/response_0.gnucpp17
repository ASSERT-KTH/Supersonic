#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

int main() {
  int32_t n, m;
  cin >> n >> m;
  if (m == 0) {
    cout << "-1" << endl;
    return 0;
  }
  const int32_t INF = 1e18;
  const int32_t maxn = 100005;
  vector<vector<pair<int32_t, int32_t>>> adj(maxn);
  for (int32_t i = 0; i < m; i++) {
    int32_t a, b, w;
    cin >> a >> b >> w;
    adj[a].push_back({b, w});
    adj[b].push_back({a, w});
  }
  int32_t x = 1;
  vector<bool> processed(maxn, false);
  vector<int32_t> distance(maxn, INF);
  vector<int32_t> p(maxn, -1);
  distance[x] = 0;
  using pii = pair<int32_t, int32_t>;
  priority_queue<pii, vector<pii>, greater<pii>> q;
  q.push({0, x});
  while (!q.empty()) {
    int32_t a = q.top().second;
    q.pop();
    if (processed[a])
      continue;
    processed[a] = true;
    for (auto u : adj[a]) {
      int32_t b = u.first, w = u.second;
      if (distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        p[b] = a;
        q.push({distance[b], b});
      }
    }
  }
  if (p[n] == -1) {
    cout << "-1" << endl;
    return 0;
  }
  vector<int32_t> path;
  for (int32_t v = n; v != x; v = p[v]) {
    path.push_back(v);
  }
  path.push_back(x);
  reverse(path.begin(), path.end());
  for (auto i : path)
    cout << i << ' ';
  cout << endl;
}