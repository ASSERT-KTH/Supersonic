#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const int INF = 1e18;
const int maxn = 100005;

int main() {
  int n, m;
  cin >> n >> m;
  if (m == 0) {
    cout << "-1" << endl;
    return 0;
  }
  
  vector<vector<pair<int, int>>> adj(n + 1);
  
  for (int i = 0; i < m; i++) {
    int a, b, w;
    cin >> a >> b >> w;
    adj[a].push_back({b, w});
    adj[b].push_back({a, w});
  }
  
  int x = 1;
  
  vector<bool> processed(n + 1, false);
  int distance[maxn];
  int p[maxn];
  
  fill(distance, distance + n + 1, INF);
  fill(p, p + n + 1, -1);
  
  distance[x] = 0;
  using pii = pair<int, int>;
  
  vector<pii> q;
  q.push_back({0, x});
  
  while (!q.empty()) {
    int a = q[0].second;
    pop_heap(q.begin(), q.end());
    q.pop_back();
    
    if (processed[a])
      continue;
    processed[a] = true;
    
    for (auto u : adj[a]) {
      int b = u.first, w = u.second;
      if (distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        p[b] = a;
        q.push_back({-distance[b], b});
        push_heap(q.begin(), q.end());
      }
    }
  }
  
  if (p[n] == -1) {
    cout << "-1" << endl;
    return 0;
  }
  
  vector<int> path;
  
  for (int v = n; v != x; v = p[v]) {
    path.push_back(v);
  }
  
  path.push_back(x);
  
  for (auto it = path.rbegin(); it != path.rend(); ++it) {
    cout << *it << ' ';
  }
  
  cout << endl;
}