The given program finds the shortest path from node 1 to node n in a weighted graph using Dijkstra's algorithm. 

To optimize the program, we can make the following changes:

1. Remove unnecessary includes: The program includes the entire `<bits/stdc++.h>` header, which is not necessary. We can include only the necessary headers `<iostream>`, `<vector>`, `<queue>`, and `<algorithm>`.

2. Use a custom comparison function for the priority queue: The program uses the default comparison function for the priority queue, which compares the first element of the pair. However, we can modify the comparison function to compare the second element instead. This way, we don't need to negate the distances when pushing them into the priority queue, which can improve performance.

3. Use a smaller data type for the distance array: The program uses `long long` for the distances, but the problem statement doesn't mention any large values. We can use a smaller data type, such as `int`, for the distances to save memory.

4. Use reserve for vectors: The program uses vectors for the adjacency list, `processed`, `distance`, `p`, and `path`. We can use the `reserve` function to pre-allocate memory for these vectors, which can improve performance by reducing the number of reallocations.

5. Avoid unnecessary reverse operation: The program reverses the `path` vector after constructing it. Instead, we can use `push_front` to insert elements at the beginning of the vector, eliminating the need for the reverse operation.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

const int INF = 1e18;
const int maxn = 100005;

int main() {
  int n, m;
  std::cin >> n >> m;
  if (m == 0) {
    std::cout << "-1" << std::endl;
    return 0;
  }

  std::vector<std::vector<std::pair<int, int>>> adj(maxn);
  adj.reserve(maxn);
  for (int i = 0; i < m; i++) {
    int a, b, w;
    std::cin >> a >> b >> w;
    adj[a].push_back({b, w});
    adj[b].push_back({a, w});
  }

  int x = 1;
  std::vector<bool> processed(maxn, false);
  std::vector<int> distance(maxn, INF);
  distance[x] = 0;
  using pii = std::pair<int, int>;
  std::priority_queue<pii, std::vector<pii>, std::greater<pii>> q;
  q.push({0, x});

  while (!q.empty()) {
    int a = q.top().second;
    q.pop();
    if (processed[a])
      continue;
    processed[a] = true;
    for (auto& u : adj[a]) {
      int b = u.first, w = u.second;
      if (distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        q.push({distance[b], b});
      }
    }
  }

  if (distance[n] == INF) {
    std::cout << "-1" << std::endl;
    return 0;
  }

  std::vector<int> path;
  path.reserve(maxn);
  for (int v = n; v != x; v = p[v]) {
    path.push_back(v);
  }
  path.push_back(x);

  for (auto it = path.rbegin(); it != path.rend(); ++it)
    std::cout << *it << ' ';
  std::cout << std::endl;
}
```