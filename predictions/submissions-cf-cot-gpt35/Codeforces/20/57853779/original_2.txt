Step 1: Remove unnecessary header files

The program includes the header file `<bits/stdc++.h>`, which includes a lot of standard C++ header files. However, most of these header files are not used in the program. We can remove this line and include only the necessary header files.

Step 2: Remove unnecessary constant

The program defines a constant `INF` with a value of `1e18`. This constant is not used in the program, so we can remove this line.

Step 3: Optimize vector initialization

The program initializes three vectors `processed`, `distance`, and `p` with default values. However, these vectors are only used for indices ranging from 1 to `maxn`, so we can optimize the initialization by specifying the size of the vectors as `maxn + 1` instead of `maxn`. This way, we can avoid unnecessary memory allocation and improve memory usage.

Step 4: Use `emplace_back` instead of `push_back`

The program uses `push_back` to add elements to the vectors `adj[a]` and `path`. However, `emplace_back` can be used instead to construct the element in-place, which can be more efficient in terms of memory allocation and copying. We can modify these lines to use `emplace_back` instead.

Step 5: Optimize the priority queue

The program uses a priority queue to keep track of the minimum distance. However, the implementation of the priority queue using `std::priority_queue` does not allow efficient updating of the priority of an element. This results in duplicate elements in the priority queue, which can lead to unnecessary iterations and increase the running time. To optimize this, we can use a `std::set` instead of a priority queue to store the distances and the corresponding vertices. This way, we can efficiently update the distances and avoid duplicate elements in the set.

Optimized Program:

```cpp
#include <iostream>
#include <vector>
#include <set>
#include <algorithm>

#define int long long

const int maxn = 100005;

int32_t main() {
  int n, m;
  std::cin >> n >> m;
  if (m == 0) {
    std::cout << "-1" << std::endl;
    return 0;
  }
  std::vector<std::pair<int, int>> adj[maxn + 1];
  for (int i = 0; i < m; i++) {
    int a, b, w;
    std::cin >> a >> b >> w;
    adj[a].emplace_back(b, w);
    adj[b].emplace_back(a, w);
  }
  int x = 1;
  std::vector<bool> processed(maxn + 1, false);
  std::vector<int> distance(maxn + 1, std::numeric_limits<int>::max());
  std::vector<int> p(maxn + 1, -1);
  distance[x] = 0;
  using pii = std::pair<int, int>;
  std::set<pii> q;
  q.emplace(0, x);
  while (!q.empty()) {
    int a = q.begin()->second;
    q.erase(q.begin());
    if (processed[a])
      continue;
    processed[a] = true;
    for (auto u : adj[a]) {
      int b = u.first, w = u.second;
      if (distance[a] + w < distance[b]) {
        q.erase({distance[b], b});
        distance[b] = distance[a] + w;
        p[b] = a;
        q.emplace(distance[b], b);
      }
    }
  }
  if (p[n] == -1) {
    std::cout << "-1" << std::endl;
    return 0;
  }
  std::vector<int> path;
  for (int v = n; v != x; v = p[v]) {
    path.emplace_back(v);
  }
  path.emplace_back(x);
  std::reverse(path.begin(), path.end());
  for (auto i : path)
    std::cout << i << ' ';
  std::cout << std::endl;
}
```
