Step 1: Remove unnecessary header inclusion
The `<bits/stdc++.h>` header includes a lot of unnecessary headers, which can slow down the compilation time. We can remove it and include only the necessary headers.

Step 2: Remove unnecessary macros
The `INF` and `maxn` macros are not used in the code. We can remove them.

Step 3: Optimize the vector initialization
The vectors `processed`, `distance`, and `p` are initialized with a size of `maxn`. However, the actual size needed is `n+1`, where `n` is the input value. We can optimize the vector initialization by initializing them with the correct size.

Step 4: Optimize the vector resizing
The `path` vector is initially empty and elements are pushed back one by one. This can cause unnecessary reallocations and copies when the vector needs to be resized. We can optimize this by reserving the required size in advance.

Step 5: Optimize the priority queue comparison
The priority queue is currently using the default comparison operator for `pii` (pair of int). However, we can optimize the comparison by using a custom comparison function that compares the second element of the pairs.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

int main() {
  int n, m;
  cin >> n >> m;
  if (m == 0) {
    cout << "-1" << endl;
    return 0;
  }
  vector<vector<pair<int, int>>> adj(n+1);
  for (int i = 0; i < m; i++) {
    int a, b, w;
    cin >> a >> b >> w;
    adj[a].push_back({b, w});
    adj[b].push_back({a, w});
  }
  int x = 1;
  vector<bool> processed(n+1, false);
  vector<int> distance(n+1, INT_MAX);
  vector<int> p(n+1, -1);
  distance[x] = 0;
  using pii = pair<int, int>;
  auto cmp = [](const pii& a, const pii& b) {
    return a.second > b.second;
  };
  priority_queue<pii, vector<pii>, decltype(cmp)> q(cmp);
  q.push({0, x});
  while (!q.empty()) {
    int a = q.top().second;
    q.pop();
    if (processed[a])
      continue;
    processed[a] = true;
    for (auto u : adj[a]) {
      int b = u.first, w = u.second;
      if (distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        p[b] = a;
        q.push({-distance[b], b});
      }
    }
  }
  if (p[n] == -1) {
    cout << "-1" << endl;
    return 0;
  }
  vector<int> path;
  path.reserve(n+1);
  for (int v = n; v != x; v = p[v]) {
    path.push_back(v);
  }
  path.push_back(x);
  reverse(path.begin(), path.end());
  for (auto i : path)
    cout << i << ' ';
  cout << endl;
}
```