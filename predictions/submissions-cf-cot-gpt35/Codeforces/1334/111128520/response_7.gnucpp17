#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

#define ll long long int

int power(ll x, ll n, const ll P) {
  if (x == 0)
    return 0;
  if (n == 0 || x == 1)
    return 1LL;
  x %= P;
  int res = 1;
  while (n > 0) {
    if (n & 1)
      res = (ll)res * x % P;
    x = (ll)x * x % P;
    n /= 2;
  }
  return res;
}

ll gcd(const ll a, const ll b) {
  if (b == 0)
    return a;
  return __gcd(b, a % b);
}

ll lcm(const ll a, const ll b) {
  return std::lcm(a, b);
}

void solve() {
  int n;
  cin >> n;
  vector<pair<ll, ll>> v(n);
  for(int i = 0; i < n; i++) {
    cin >> v[i].first >> v[i].second;
  }
  
  if (n == 2) {
    cout << min(v[0].first + max(0LL, v[1].first - v[0].second),
                v[1].first + max(0LL, v[0].first - v[1].second))
         << "\n";
    return;
  }
  
  ll cnt = 0, curr = v[0].first;
  for (int i = 0; i < n; i++) {
    cnt += curr;
    curr = max(0LL, v[(i + 1) % n].first - v[i].second);
  }
  
  ll ans = cnt;
  for (int i = 1; i < n; i++) {
    cnt += v[i].first - max(0LL, v[i].first - v[(i - 1 + n) % n].second);
    cnt += max(0LL, v[(i - 1 + n) % n].first - v[(i - 2 + n) % n].second);
    cnt -= v[(i - 1 + n) % n].first;
    ans = min(ans, cnt);
  }
  
  cout << ans << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

  int tc = 1;
  cin >> tc;
  
  while (tc--) {
    solve();
  }
  
  return 0;
}