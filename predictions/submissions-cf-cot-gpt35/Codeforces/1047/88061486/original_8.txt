The first optimization we can make is to remove unnecessary header files. The program currently includes `<algorithm>`, `<cmath>`, `<cstdio>`, `<cstring>`, `<ctime>`, `<iostream>`, `<queue>`, and `<stack>`. However, only `<cstdio>` and `<iostream>` are used in the program. Therefore, we can remove the other header files to reduce memory usage.

The second optimization we can make is to remove the `#define` statements. In this program, `maxn` and `M` are defined, but they are not used. We can remove these `#define` statements to make the code cleaner.

The third optimization we can make is to remove the recursive `Gcd` function and replace it with a non-recursive one. The recursive function can be slow and consume a lot of memory when the input numbers are large. We can replace it with the `std::gcd` function from the `<numeric>` header, which is more efficient.

The fourth optimization we can make is to use a more efficient algorithm for counting the occurrences of each number. The current implementation uses an array `num` of size `M` to store the count of each number. However, the maximum value of `t` is `maxx`, so we can reduce the size of `num` to `maxx`. This will reduce memory usage.

The fifth optimization we can make is to remove unnecessary variables and simplify the code. For example, the variable `t` is used to store the count of each number, but it is not necessary. We can directly update `cnt` in the loop. Additionally, the `vis` array is used to mark numbers that have already been counted, but it is not necessary. We can simplify the loop by skipping numbers that have already been counted.

Here is the optimized program:

```cpp
#include <cstdio>
#include <numeric>

int main() {
  int n, g;
  scanf("%d", &n);
  
  int a[n];
  for (int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
    if (i == 1) {
      g = std::gcd(a[0], a[1]);
    } else if (i > 1) {
      g = std::gcd(g, a[i]);
    }
  }
  
  int maxx = 0;
  int num[maxx + 1] = {0};
  for (int i = 0; i < n; i++) {
    int t = a[i] / g;
    num[t]++;
    if (t > maxx) {
      maxx = t;
    }
  }
  
  int cnt = 0;
  for (int i = 2; i <= maxx; i++) {
    if (num[i] == 0) {
      continue;
    }
    cnt += num[i];
    for (int j = i + i; j <= maxx; j += i) {
      num[j] = 0;
    }
  }
  
  if (cnt == 0) {
    printf("-1\n");
  } else {
    printf("%d\n", n - cnt);
  }
  
  return 0;
}
```