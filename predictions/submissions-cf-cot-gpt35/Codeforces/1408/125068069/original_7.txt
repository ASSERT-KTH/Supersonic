Step 1: Remove unnecessary includes
- The program includes `<bits/stdc++.h>` and `<cstdio>`, but these headers are not used in the program. We can remove them.

Step 2: Remove unnecessary macros
- The program defines several macros that are not used in the program. We can remove them.

Step 3: Remove unnecessary typedefs
- The program defines several typedefs that are not used in the program. We can remove them.

Step 4: Remove unnecessary using namespace std
- The program uses the `using namespace std` directive, but it is unnecessary and considered bad practice. We can remove it.

Step 5: Simplify variable declarations
- The program uses a mix of C-style and C++-style variable declarations. We can simplify them to use consistent C++-style declarations.

Step 6: Simplify loop conditions
- The program uses a while loop with a condition `l <= r`. We can simplify this condition to `l < r`.

Step 7: Remove unnecessary type casting
- The program uses a static cast to convert `ln` to a `long double` type. Since `ln` is already declared as a `long double`, this cast is unnecessary and can be removed.

Step 8: Simplify arithmetic expressions
- The program uses complex arithmetic expressions in the while loop. We can simplify these expressions to improve readability.

Step 9: Remove unnecessary precision specifier
- The program uses `printf` with a precision specifier `%.14Lf` to print the result. Since the precision is not specified in the problem, we can remove this specifier.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

void SHIT_HERE_WE_GO_AGAIN() {
  int n, ln;
  std::cin >> n >> ln;
  std::vector<int> flag(n);
  for (int i = 0; i < n; i++)
    std::cin >> flag[i];
  int v1 = 1, v2 = 1, l = 0, r = n - 1;
  long double p1 = 0, p2 = ln, ans = 0;
  while (l < r) {
    if ((flag[l] - p1) / v1 < (p2 - flag[r]) / v2) {
      long double t = (flag[l] - p1) / v1;
      p1 = flag[l];
      v1++;
      l++;
      p2 -= v2 * t;
      ans += t;
    } else if ((flag[l] - p1) / v1 > (p2 - flag[r]) / v2) {
      long double t = (p2 - flag[r]) / v2;
      p2 = flag[r];
      v2++;
      r--;
      p1 += v1 * t;
      ans += t;
    } else {
      long double t = (flag[l] - p1) / v1;
      p1 = flag[l];
      p2 = flag[r];
      v1++;
      v2++;
      l++;
      r--;
      ans += t;
    }
  }
  ans += (p2 - p1) / (v1 + v2);
  std::cout << ans << std::endl;
}

int main() {
  int t = 1;
  std::cin >> t;
  while (t--) {
    SHIT_HERE_WE_GO_AGAIN();
  }
  return 0;
}
```