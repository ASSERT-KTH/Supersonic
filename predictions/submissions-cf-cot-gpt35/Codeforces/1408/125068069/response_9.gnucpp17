#include <iostream>
#include <vector>

using namespace std;

void solve() {
  int n, ln;
  cin >> n >> ln;
  vector<int> flag(n);
  for (int i = 0; i < n; i++)
    cin >> flag[i];
  int velocity1 = 1, velocity2 = 1, left = 0, right = n - 1;
  long double position1 = 0, position2 = static_cast<long double>(ln), answer = 0;
  while (left <= right) {
    if ((flag[left] - position1) / velocity1 < (position2 - flag[right]) / velocity2) {
      long double t = (flag[left] - position1) / velocity1;
      position1 = flag[left];
      velocity1++;
      left++;
      position2 -= velocity2 * t;
      answer += t;
    } else if ((flag[left] - position1) / velocity1 > (position2 - flag[right]) / velocity2) {
      long double t = (position2 - flag[right]) / velocity2;
      position2 = flag[right];
      velocity2++;
      right--;
      position1 += velocity1 * t;
      answer += t;
    } else {
      long double t = (flag[left] - position1) / velocity1;
      position1 = flag[left];
      position2 = flag[right];
      velocity1++;
      velocity2++;
      left++;
      right--;
      answer += t;
    }
  }
  answer += (position2 - position1) / (velocity1 + velocity2);
  printf("%.14Lf\n", answer);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
}