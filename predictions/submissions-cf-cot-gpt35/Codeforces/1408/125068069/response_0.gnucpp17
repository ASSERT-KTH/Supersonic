#include <iostream>
#include <vector>
#include <algorithm>
#include <iomanip>

void solve() {
  int n, ln;
  std::cin >> n >> ln;
  std::vector<int> flag(n);
  for (int i = 0; i < n; i++)
    std::cin >> flag[i];
  int v1 = 1, v2 = 1, l = 0, r = n - 1;
  long double p1 = 0, p2 = static_cast<long double>(ln), ans = 0;
  while (l <= r) {
    if ((flag[l] - p1) / v1 < (p2 - flag[r]) / v2) {
      long double t = (flag[l] - p1) / v1;
      p1 = flag[l];
      v1++;
      l++;
      p2 -= v2 * t;
      ans += t;
    } else if ((flag[l] - p1) / v1 > (p2 - flag[r]) / v2) {
      long double t = (p2 - flag[r]) / v2;
      p2 = flag[r];
      v2++;
      r--;
      p1 += v1 * t;
      ans += t;
    } else {
      long double t = (flag[l] - p1) / v1;
      p1 = flag[l];
      p2 = flag[r];
      v1++;
      v2++;
      l++;
      r--;
      ans += t;
    }
  }
  ans += (p2 - p1) / (v1 + v2);
  std::cout << std::fixed << std::setprecision(14) << ans << std::endl;
}

int main() {
  int t;
  std::cin >> t;
  while (t--) {
    solve();
  }
  return 0;
}