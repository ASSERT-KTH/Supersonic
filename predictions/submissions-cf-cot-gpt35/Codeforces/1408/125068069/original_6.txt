The given program is a solution to a coding problem, but it is not optimized in terms of running time and memory usage. Here are the steps to optimize the program:

1. Remove unnecessary header files: The program includes `<bits/stdc++.h>` and `<cstdio>` header files, which are not necessary for this program. We can remove them.

2. Avoid using namespace std: The program uses `using namespace std`, which imports the entire `std` namespace. This can lead to naming conflicts and can also increase compile time. Instead, we can use the `std::` prefix for the required standard library functions and objects.

3. Avoid using macros: The program defines many macros for common operations, such as `nline`, `mp`, `pb`, `ff`, etc. Instead of using macros, we can use inline functions or constants for these purposes.

4. Avoid unnecessary type aliases: The program defines multiple type aliases, such as `pii`, `si`, `spii`, etc. These aliases are not used in the program and can be removed.

5. Avoid unnecessary vector initialization: The program initializes the `flag` vector with size `n` but does not use it. We can remove this initialization.

6. Avoid unnecessary type conversions: The program uses `static_cast<long double>(ln)` to convert `ln` to `long double`. However, `ln` is already of type `long double`, so this conversion is unnecessary.

7. Simplify the while loop condition: The while loop condition can be simplified by removing the unnecessary parentheses and combining the conditions using the `&&` operator.

8. Use prefix increment/decrement operators: The program uses postfix increment/decrement operators (`v1++`, `v2++`, `l++`, `r--`) inside the while loop. Using prefix increment/decrement operators can be more efficient in some cases.

9. Remove unnecessary variable initialization: The variables `v1` and `v2` are initialized with the value `1`, but they are immediately modified inside the while loop. We can remove the initialization.

10. Use `std::cout` instead of `printf`: The program uses `printf` to print the result. We can use `std::cout` instead, which is more idiomatic in C++.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

void solve() {
  int n, ln;
  std::cin >> n >> ln;
  std::vector<int> flag(n);
  for (int i = 0; i < n; i++)
    std::cin >> flag[i];
  int v1 = 1, v2 = 1, l = 0, r = n - 1;
  long double p1 = 0, p2 = ln, ans = 0;
  while (l <= r) {
    if ((flag[l] - p1) / v1 < (p2 - flag[r]) / v2) {
      long double t = (flag[l] - p1) / v1;
      p1 = flag[l];
      ++v1;
      ++l;
      p2 -= v2 * t;
      ans += t;
    } else if ((flag[l] - p1) / v1 > (p2 - flag[r]) / v2) {
      long double t = (p2 - flag[r]) / v2;
      p2 = flag[r];
      ++v2;
      --r;
      p1 += v1 * t;
      ans += t;
    } else {
      long double t = (flag[l] - p1) / v1;
      p1 = flag[l];
      p2 = flag[r];
      ++v1;
      ++v2;
      ++l;
      --r;
      ans += t;
    }
  }
  ans += (p2 - p1) / (v1 + v2);
  std::cout << std::fixed;
  std::cout.precision(14);
  std::cout << ans << '\n';
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);

  int t;
  std::cin >> t;
  while (t--) {
    solve();
  }

  return 0;
}
```

This optimized program removes unnecessary macros, aliases, and header files, simplifies the code, and improves readability. It should have better running time and memory usage compared to the original program.