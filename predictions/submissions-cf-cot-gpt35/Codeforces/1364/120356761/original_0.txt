The given code can be optimized in the following steps:

1. Remove unnecessary headers: The `#include <bits/stdc++.h>` header includes a large number of standard library headers. It is better to include only the necessary headers to reduce compilation time and memory usage.

2. Remove unnecessary macros: The `fon` macro is used to iterate over the elements of the vector `a`. However, it is unnecessary and can be replaced with a simple `for` loop.

3. Remove unnecessary variable declarations: Variables `j` and `k` are declared but not used in the code. They can be safely removed.

4. Optimize the sum calculation: Instead of calculating the sum of the vector `a` in a separate loop, we can calculate it while reading the input elements.

5. Optimize the position calculation: The position calculation can be simplified by finding the first and last non-zero elements of the vector `a` using two separate loops. We can then calculate the minimum distance between these elements and subtract it from the total number of elements `n` to get the desired result.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  int t;
  cin >> t;
  while (t--) {
    int n, x;
    cin >> n >> x;
    vector<int> a(n);
    int sum = 0;
    int firstNonZero = -1, lastNonZero = -1;
    for (int i = 0; i < n; i++) {
      cin >> a[i];
      a[i] %= x;
      sum += a[i];
      if (a[i] && firstNonZero == -1) {
        firstNonZero = i;
      }
      if (a[i]) {
        lastNonZero = i;
      }
    }
    if (sum % x) {
      cout << n << endl;
      continue;
    }
    int pos = 0;
    if (firstNonZero != -1) {
      pos = min(firstNonZero + 1, n - lastNonZero);
    }
    if (!pos) {
      pos--;
    }
    cout << n - pos << endl;
  }
}
```