Optimization:

1. Remove unnecessary includes: The program includes the entire `<bits/stdc++.h>` library, which is not necessary. We can remove it and include only the necessary standard libraries.

2. Avoid using macros: The program uses macros to define common operations like iterating over an array or vector. Instead of macros, we can use loops and functions, which are more readable and efficient.

3. Minimize the number of variables: The program uses a large number of variables that are not necessary. We can reduce the number of variables to improve memory usage.

4. Avoid unnecessary calculations: The program calculates the sum of the array elements multiple times, which is unnecessary. We can calculate the sum once and reuse it.

5. Use more descriptive variable names: The program uses single-letter variable names, which can make the code harder to understand. We can use more descriptive variable names to improve readability.

Optimized code:

```c++
#include <iostream>
#include <vector>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  int t;
  cin >> t;
  while (t--) {
    int n, x;
    cin >> n >> x;
    vector<int> a(n);
    for (int i = 0; i < n; i++) {
      cin >> a[i];
      a[i] %= x;
    }
    int sum = 0;
    for (int i = 0; i < n; i++) {
      sum += a[i];
    }
    if (sum % x) {
      cout << n << endl;
      continue;
    }
    int pos = 0;
    for (int i = 0; i < n; i++) {
      if (a[i]) {
        break;
      }
    pos = i + 1;
    }
    for (int i = n - 1; i >= 0; i--) {
      if (a[i]) {
        break;
      }
    pos = min(pos, n - i);
    }
    if (!pos) {
      pos--;
    }
    cout << n - pos << endl;
  }
}
```