Step 1: Remove unnecessary includes and macros.

The program includes unnecessary headers and defines unnecessary macros. We can remove them to improve the readability of the code.

```cpp
#include <iostream>
#include <vector>
using namespace std;
```

Step 2: Optimize the input/output operations.

The program uses `cin` and `cout` for input and output operations. These operations can be slow, especially when there are a large number of input/output operations. We can optimize this by using `scanf` and `printf` instead.

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int t;
    scanf("%d", &t);
    while (t--) {
        int n;
        scanf("%d", &n);
        vector<int> a(n);
        for (int i = 0; i < n; i++) {
            scanf("%d", &a[i]);
        }
        vector<int> v;
        for (int i = 0; i < n; i++) {
            if (i == 0 || i == n - 1 || (a[i - 1] < a[i]) != (a[i] < a[i + 1])) {
                v.push_back(a[i]);
            }
        }
        printf("%d\n", v.size());
        for (int i = 0; i < v.size(); i++) {
            printf("%d ", v[i]);
        }
        printf("\n");
    }
    return 0;
}
```

This optimized program uses `scanf` and `printf` for input/output operations, which are faster than `cin` and `cout`.

Explanation:

1. Removed unnecessary includes and macros to improve readability.
2. Replaced `cin` and `cout` with `scanf` and `printf` for faster input/output operations.