Step 1: Remove unnecessary includes and define statements

The program includes unnecessary header files and defines statements. These should be removed to optimize the program.

Step 2: Remove unnecessary global variables

The program has several unnecessary global variables such as `ev`, `od`, `tt`, `vis`, `edge`, `l`, `c2`, `ok`, and `chid`. These variables are not being used and should be removed to optimize the program.

Step 3: Optimize the dfs function

The dfs function is currently implemented using recursion, which can be inefficient for large inputs. We can optimize it by using an iterative approach instead.

Step 4: Optimize the main function

The main function can be optimized by removing unnecessary variables and improving the efficiency of the loop.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    int t;
    cin >> t;
    
    while (t--) {
        int n;
        cin >> n;
        
        vector<int> a(n);
        
        for (int i = 0; i < n; i++) {
            cin >> a[i];
        }
        
        vector<int> v;
        
        for (int i = 0; i < n; i++) {
            if (i == 0 || i == n - 1 || (a[i - 1] < a[i]) != (a[i] < a[i + 1])) {
                v.push_back(a[i]);
            }
        }
        
        cout << v.size() << endl;
        
        for (auto it : v) {
            cout << it << " ";
        }
        
        cout << endl;
    }
    
    return 0;
}
```