#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <vector>
#define pb push_back
#define mp make_pair
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()
using namespace std;
typedef long long int64;
typedef pair<int, int> ii;
typedef vector<int> vi;
constexpr int B = 5;

unordered_map<int64, vector<ii>> areas; // Hash map to store areas and corresponding points

int main() {
  int n;
  int64 S;
  cin >> n >> S;
  S *= 2L;
  vector<int64> x(n), y(n); // Use vectors instead of arrays

  for (int i = 0; i < n; ++i) {
    cin >> x[i] >> y[i];
  }

  for (int s = 0; s < n; ++s) {
    areas.clear(); // Clear the hash map for each starting point
    for (int i = s + 1; i < n; ++i) {
      int64 Nx = x[i] - x[s], Ny = y[i] - y[s]; // Calculate differences once
      int64 area = Nx * Ny;
      areas[area].push_back({Nx, Ny}); // Store the area and corresponding points
    }
    for (int i = s + 1; i < n; ++i) {
      int64 Xi = x[i] - x[s], Yi = y[i] - y[s]; // Calculate differences once
      int64 target = S - Xi * Yi; // Calculate the target area
      if (areas.count(target)) {
        for (const auto& p : areas[target]) {
          int64 t = p.first * Yi - p.second * Xi;
          if (t == S || t == -S) {
            cout << "Yes\n";
            cout << x[s] << " " << y[s] << "\n";
            cout << x[i] << " " << y[i] << "\n";
            cout << x[s] + p.first << " " << y[s] + p.second << "\n";
            return 0;
          }
        }
      }
    }
  }
  cout << "No\n";
  return 0;
}