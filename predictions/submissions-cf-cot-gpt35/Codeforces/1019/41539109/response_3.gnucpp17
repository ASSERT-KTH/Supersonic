#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct POINT {
  int x, y;
  POINT(int x, int y) : x(x), y(y) {}
  POINT operator+(const POINT &t) const { return POINT(x + t.x, y + t.y); }
  POINT operator-(const POINT &t) const { return POINT(x - t.x, y - t.y); }
  POINT operator!() const { return POINT(-y, x); }
};

inline int dot(const POINT &a, const POINT &b) {
  return a.x * b.x + a.y * b.y;
}

inline int cross(const POINT &a, const POINT &b) {
  return a.x * b.y - a.y * b.x;
}

inline int cross(const POINT &a, const POINT &b, const POINT &c) {
  return cross(a - c, b - c);
}

inline bool halfPlane(const POINT &p) {
  return p.y < 0;
}

inline bool angSortCmp(const POINT &a, const POINT &b) {
  bool ha = halfPlane(a);
  bool hb = halfPlane(b);
  return ha < hb || (ha == hb && cross(a, b) > 0);
}

const int N = 2000;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int n;
  long long S;
  cin >> n >> S;
  S *= 2;

  vector<POINT> tab(n);
  for (int i = 0; i < n; ++i)
    cin >> tab[i].x >> tab[i].y;

  sort(tab.begin(), tab.end(), [](const POINT &a, const POINT &b) -> bool {
    return a.x < b.x || (a.x == b.x && a.y > b.y);
  });

  for (int i = 0; i < n; ++i) {
    for (int j = i + 1; j < n; ++j) {
      POINT wek = !(tab[j] - tab[i]);
      int p = i;
      int q = j;

      int l = 1;
      int r = n;
      while (l <= r) {
        int s = (l + r) / 2;
        int ww = cross(tab[q], tab[p], tab[s]);
        if (ww == S) {
          cout << "Yes" << endl;
          cout << tab[p].x << ' ' << tab[p].y << endl;
          cout << tab[q].x << ' ' << tab[q].y << endl;
          cout << tab[s].x << ' ' << tab[s].y << endl;
          return 0;
        }
        if (ww > S)
          r = s - 1;
        else
          l = s + 1;
      }

      l = 1;
      r = n;
      while (l <= r) {
        int s = (l + r) / 2;
        int ww = cross(tab[q], tab[p], tab[s]);
        if (ww == -S) {
          cout << "Yes" << endl;
          cout << tab[p].x << ' ' << tab[p].y << endl;
          cout << tab[q].x << ' ' << tab[q].y << endl;
          cout << tab[s].x << ' ' << tab[s].y << endl;
          return 0;
        }
        if (ww > -S)
          r = s - 1;
        else
          l = s + 1;
      }
    }
  }

  cout << "No" << endl;
  return 0;
}