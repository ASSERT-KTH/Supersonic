#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct POINT {
  int x, y;
  POINT(int x, int y) : x(x), y(y) {}
  POINT operator+(const POINT &t) const { return POINT(x + t.x, y + t.y); }
  POINT operator-(const POINT &t) const { return POINT(x - t.x, y - t.y); }
  POINT operator!() const { return POINT(-y, x); }
};

inline long long cross(const POINT &a, const POINT &b, const POINT &c) {
  return (a.x - c.x) * (b.y - c.y) - (a.y - c.y) * (b.x - c.x);
}

inline bool halfPlane(const POINT &p) {
  return p.y < 0 || (p.y == 0 && p.x < 0);
}

inline bool angSortCmp(const POINT &a, const POINT &b) {
  bool ha = halfPlane(a);
  bool hb = halfPlane(b);
  if (ha != hb)
    return ha < hb;
  return cross(a, b) > 0;
}

const int N = 2000;
int n;
long long S;
POINT tab[N + 7];
int poz[N + 7];

struct kierunek {
  POINT wek;
  int p, q;
};

void quicksort(POINT* arr, int low, int high) {
  if (low < high) {
    int pivot = low;
    int i = low + 1;
    int j = high;
    while (i <= j) {
      if (angSortCmp(arr[i], arr[pivot]) && !angSortCmp(arr[j], arr[pivot])) {
        swap(arr[i++], arr[j--]);
      }
      if (!angSortCmp(arr[i], arr[pivot])) i++;
      if (angSortCmp(arr[j], arr[pivot])) j--;
    }
    swap(arr[pivot], arr[j]);
    quicksort(arr, low, j - 1);
    quicksort(arr, j + 1, high);
  }
}

int main() {
  ios_base::sync_with_stdio(0);
  cin >> n >> S;
  S *= 2;
  for (int i = 1; i <= n; ++i)
    cin >> tab[i].x >> tab[i].y;
  quicksort(tab + 1, 1, n);
  for (int i = 1; i <= n; ++i) {
    poz[i] = i;
  }
  vector<kierunek> kol((n * (n - 1)) / 2);
  int it = 0;
  for (int i = 1; i <= n; ++i) {
    for (int j = i + 1; j <= n; ++j) {
      kol[it].wek = !(tab[j] - tab[i]);
      kol[it].p = i;
      kol[it].q = j;
      it++;
    }
  }
  sort(kol.begin(), kol.end(), [](const kierunek &a, const kierunek &b) -> bool {
    return angSortCmp(a.wek, b.wek);
  });
  for (kierunek u : kol) {
    int p = u.p;
    int q = u.q;
    swap(tab[poz[p]], tab[poz[q]]);
    swap(poz[p], poz[q]);
    int l = 1;
    int r = n;
    while (l <= r) {
      int s = (l + r) / 2;
      long long ww = cross(tab[q], tab[p], tab[s]);
      if (ww == S) {
        cout << "Yes" << endl;
        cout << tab[p].x << ' ' << tab[p].y << endl;
        cout << tab[q].x << ' ' << tab[q].y << endl;
        cout << tab[s].x << ' ' << tab[s].y << endl;
        exit(0);
      }
      if (ww > S)
        r = s - 1;
      else
        l = s + 1;
    }
    l = 1;
    r = n;
    while (l <= r) {
      int s = (l + r) / 2;
      long long ww = cross(tab[q], tab[p], tab[s]);
      if (ww == -S) {
        cout << "Yes" << endl;
        cout << tab[p].x << ' ' << tab[p].y << endl;
        cout << tab[q].x << ' ' << tab[q].y << endl;
        cout << tab[s].x << ' ' << tab[s].y << endl;
        exit(0);
      }
      if (ww > -S)
        r = s - 1;
      else
        l = s + 1;
    }
  }
  cout << "No" << endl;
  return 0;
}