#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    
    int t;
    cin >> t;
    
    while (t--) {
        int n;
        cin >> n;
        
        vector<int> ar;
        ar.reserve(n);
        
        for (int i = 0; i < n; ++i) {
            int num;
            cin >> num;
            ar.emplace_back(num);
        }
        
        vector<vector<long long>> dp(3, vector<long long>(n + 1, 0));
        
        for (int i = 0; i < n; ++i) {
            dp[0][i + 1] = dp[0][i] + (ar[i] % 2 == 0 ? ar[i] : 0);
            
            if (i + 2 <= n)
                dp[1][i + 2] = max(dp[0][i], dp[1][i]) + ar[i + 1];
            
            dp[2][i + 1] = max({ dp[0][i], dp[1][i], dp[2][i], dp[2][i + 1] }) + (ar[i] % 2 == 0 ? ar[i] : 0);
        }
        
        cout << *max_element(dp[0].begin(), dp[0].end()) << endl;
    }
    
    return 0;
}