#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    int t;
    cin >> t;
    
    while (t--) {
        int n;
        cin >> n;
        
        vector<int> ar(n);
        for (int i = 0; i < n; ++i) {
            cin >> ar[i];
        }
        
        vector<long long> dp(n + 1, 0);
        
        for (int i = 0; i < n - 1; ++i) {
            dp[i + 1] = dp[i] + (i & 1 ? 0 : ar[i]);
            dp[i + 2] = max(dp[i], dp[i + 1]) + ar[(i % 2 == 0 ? i + 1 : i)];
            dp[i + 1] = max({dp[i], dp[i + 1], dp[i + 2]}) + (i & 1 ? 0 : ar[i]);
        }
        
        cout << max({dp[n], dp[n - 1], dp[n - 2]}) << endl;
    }
    
    return 0;
}