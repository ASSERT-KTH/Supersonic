#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("-ffloat-store")

#include <cstdio>
#include <vector>
#include <algorithm>

void addLine(std::vector<std::pair<int, int>>& c, std::pair<int, int> z) {
    int n = c.size();
    while (n > 1) {
        auto x = c[n - 2], y = c[n - 1];
        if ((x.second - y.second) * (z.first - y.first) >= (y.second - z.second) * (y.first - x.first))
            break;
        c.pop_back();
        n--;
    }
    c.push_back(z);
}

int main() {
    int n;
    scanf("%d", &n);
    
    std::vector<int> a(n + 1);
    for (int i = 1; i <= n; i++) {
        int in;
        scanf("%d", &in);
        a[i] = in + a[i - 1];
    }

    std::vector<std::pair<int, int>> c;
    std::vector<int> dd(n + 1, 0);
    for (int i = n; i >= 1; i--) {
        addLine(c, {-i, a[i]});
        int l = 0, r = c.size();
        while (r - l > 1) {
            int mi = (l + r) / 2;
            if (c[mi].first * (c[mi].second - c[mi - 1].second) +
                c[mi].second * (c[mi - 1].first - c[mi].first) >=
                a[i - 1] * (c[mi - 1].first - c[mi].first) -
                (c[mi].second - c[mi - 1].second) * (i - 1))
                l = mi;
            else
                r = mi;
        }
        dd[i] = -c[l].first;
    }

    int i = 1;
    while (i <= n) {
        int j = dd[i];
        double m = (a[j] - a[i - 1]) / (double)(j - i + 1);
        while (i <= j) {
            printf("%.9lf\n", m);
            i++;
        }
    }

    return 0;
}