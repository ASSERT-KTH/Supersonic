#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("-ffloat-store")
#include <iostream>
#include <vector>
using namespace std;

typedef long long int lli;

void aryanc403() {
#ifdef ARYANC403
    cerr << "Time Taken : " << (float)(clock()) / CLOCKS_PER_SEC << "\n";
#endif
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    lli n;
    cin >> n;
    vector<lli> a(n + 1);
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
        a[i] += a[i - 1];
    }

    vector<pair<lli, lli>> c;
    vector<lli> dd(n + 1, 0);
    for (int i = n; i >= 1; --i) {
        pair<lli, lli> z = {-i, a[i]};
        int m = c.size();
        while (m > 1) {
            pair<lli, lli> x = c[m - 2], y = c[m - 1];
            if ((x.second - y.second) * (z.first - y.first) >= (y.second - z.second) * (y.first - x.first))
                break;
            c.pop_back();
            m--;
        }
        c.emplace_back(z);
        int l = 0, r = c.size();
        while (r - l > 1) {
            int mi = (l + r) / 2;
            if (c[mi].first * (c[mi].second - c[mi - 1].second) + c[mi].second * (c[mi - 1].first - c[mi].first) >=
                a[i - 1] * (c[mi - 1].first - c[mi].first) - (c[mi].second - c[mi - 1].second) * (i - 1))
                l = mi;
            else
                r = mi;
        }
        dd[i] = -c[l].first;
    }

    int i = 1;
    while (i <= n) {
        int j = dd[i];
        lli m = (a[j] - a[i - 1]) / (j - i + 1);
        while (i <= j) {
            cout << m << endl;
            i++;
        }
    }

    aryanc403();
    return 0;
}