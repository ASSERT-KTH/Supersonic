Step 1: Remove unnecessary includes and preprocessor directives

The program includes unnecessary headers and uses unnecessary preprocessor directives. We can remove them to simplify the code.

Step 2: Remove unnecessary macros

The program defines macros that are not used. We can remove them to simplify the code.

Step 3: Simplify variable declarations

The program declares variables that are not used. We can remove them to simplify the code.

Step 4: Optimize the add and del functions

The add and del functions are currently implemented using map, which has a time complexity of O(log n) for insertion and deletion. We can optimize these functions by using unordered_map instead, which has an average time complexity of O(1) for insertion and deletion.

Step 5: Optimize the addLine function

The addLine function is currently implemented using a while loop and vector operations, which can be slow for large input sizes. We can optimize this function by using a deque instead of a vector. Deque allows for efficient insertion and deletion at both ends, which is required in this case.

Step 6: Optimize the main function

The main function can be optimized by removing unnecessary variable declarations and using cout instead of printf for output.

Here is the optimized program:

```
#include <iostream>
#include <vector>
#include <deque>
#include <iomanip>

using namespace std;

typedef long long int lli;
typedef double mytype;
typedef pair<lli, lli> ii;
typedef vector<ii> vii;
typedef vector<lli> vi;

void add(unordered_map<lli, lli> &m, lli x, lli cnt = 1) {
  auto jt = m.find(x);
  if (jt == m.end())
    m.insert({x, cnt});
  else
    jt->second += cnt;
}

void del(unordered_map<lli, lli> &m, lli x, lli cnt = 1) {
  auto jt = m.find(x);
  if (jt->second <= cnt)
    m.erase(jt);
  else
    jt->second -= cnt;
}

void addLine(deque<ii> &c, ii z) {
  while (c.size() > 1) {
    ii x = c[c.size() - 2], y = c[c.size() - 1];
    if ((x.second - y.second) * (z.first - y.first) >= (y.second - z.second) * (y.first - x.first))
      break;
    c.pop_back();
  }
  c.push_back(z);
}

int main(void) {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cout << std::fixed << std::setprecision(10);

  int n;
  cin >> n;
  vi a(n + 1, 0);
  for (int i = 1; i <= n; ++i) {
    cin >> a[i];
    a[i] += a[i - 1];
  }
  vii c;
  vi dd(n + 1, 0);
  for (int i = n; i >= 1; --i) {
    addLine(c, {-i, a[i]});
    int l = 0, r = c.size();
    while (r - l > 1) {
      int mi = (l + r) / 2;
      if (c[mi].first * (c[mi].second - c[mi - 1].second) +
              c[mi].second * (c[mi - 1].first - c[mi].first) >=
          a[i - 1] * (c[mi - 1].first - c[mi].first) -
              (c[mi].second - c[mi - 1].second) * (i - 1))
        l = mi;
      else
        r = mi;
    }
    dd[i] = -c[l].first;
  }
  int i = 1;
  while (i <= n) {
    int j = dd[i];
    const mytype m = (a[j] - a[i - 1]) / (mytype)(j - i + 1);
    while (i <= j) {
      cout << m << endl;
      i++;
    }
  }

  return 0;
}
```