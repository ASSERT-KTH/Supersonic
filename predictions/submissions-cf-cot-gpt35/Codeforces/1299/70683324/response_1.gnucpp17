#include <bits/stdc++.h>
using namespace std;

typedef long long int lli;
typedef double mytype;
typedef pair<lli, lli> ii;
typedef vector<ii> vii;
typedef vector<lli> vi;

void add(map<lli, lli>& m, lli x, lli cnt = 1) {
    auto jt = m.find(x);
    if (jt == m.end())
        m.emplace(x, cnt);
    else
        jt->second += cnt;
}

void del(map<lli, lli>& m, lli x, lli cnt = 1) {
    auto jt = m.find(x);
    if (jt->second <= cnt)
        m.erase(jt);
    else
        jt->second -= cnt;
}

void addLine(vii& c, ii z) {
    lli n = c.size();
    while (n > 1) {
        ii x = c[n - 2], y = c[n - 1];
        if ((x.second - y.second) * (z.first - y.first) >= (y.second - z.second) * (y.first - x.first))
            break;
        c.pop_back();
        n--;
    }
    c.emplace_back(z);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    lli n, i, in;
    cin >> n;

    vi a;
    a.reserve(n + 1);
    a.emplace_back(0);

    for (i = 1; i <= n; ++i) {
        cin >> in;
        a.emplace_back(in + a.back());
    }

    vii c;
    vi dd(n + 1, 0);

    for (i = n; i >= 1; --i) {
        addLine(c, {-i, a[i]});
        lli l = 0, r = c.size();
        while (r - l > 1) {
            lli mi = (l + r) / 2;
            if (c[mi].first * (c[mi].second - c[mi - 1].second) +
                c[mi].second * (c[mi - 1].first - c[mi].first) >=
                a[i - 1] * (c[mi - 1].first - c[mi].first) -
                (c[mi].second - c[mi - 1].second) * (i - 1))
                l = mi;
            else
                r = mi;
        }
        dd[i] = -c[l].first;
    }

    i = 1;
    while (i <= n) {
        lli j = dd[i];
        const mytype m = (a[j] - a[i - 1]) / (mytype)(j - i + 1);
        while (i <= j) {
            cout << fixed << setprecision(10) << m << '\n';
            i++;
        }
    }

    return 0;
}