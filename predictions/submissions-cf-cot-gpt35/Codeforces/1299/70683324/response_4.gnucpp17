#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("-ffloat-store")

#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <iomanip>

using namespace std;

const int maxN = 1000000;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cout << fixed << setprecision(10);

  int n;
  scanf("%d", &n);

  vector<int> a(n + 1);
  for (int i = 1; i <= n; ++i) {
    scanf("%d", &a[i]);
    a[i] += a[i - 1];
  }

  vector<int> dd(n + 1, 0);
  vector<pair<int, int>> c;
  for (int i = n; i >= 1; --i) {
    pair<int, int> z = {-i, a[i]};
    while (!c.empty() && (c.back().first - z.first) * (z.second - c.back().second) >= (c.back().second - z.second) * (c.back().first - z.first)) {
      c.pop_back();
    }
    c.push_back(z);

    int l = 0, r = c.size();
    while (r - l > 1) {
      int mi = (l + r) / 2;
      if (c[mi].first * (c[mi].second - c[mi - 1].second) + c[mi].second * (c[mi - 1].first - c[mi].first) >= a[i - 1] * (c[mi - 1].first - c[mi].first) - (c[mi].second - c[mi - 1].second) * (i - 1)) {
        l = mi;
      } else {
        r = mi;
      }
    }

    dd[i] = -c[l].first;
  }

  int i = 1;
  while (i <= n) {
    int j = dd[i];
    double m = (a[j] - a[i - 1]) / static_cast<double>(j - i + 1);
    while (i <= j) {
      printf("%.9lf\n", m);
      i++;
    }
  }

  return 0;
}