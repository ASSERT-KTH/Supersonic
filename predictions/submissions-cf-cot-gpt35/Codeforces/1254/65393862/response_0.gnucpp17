#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

const int MOD = 998244353;

struct mod_int {
    int val;
    
    mod_int(long long v = 0) {
        if (v < 0)
            v = v % MOD + MOD;
        if (v >= MOD)
            v %= MOD;
        val = v;
    }
    
    explicit operator int() const {
        return val;
    }
    
    mod_int& operator+=(const mod_int& other) {
        val += other.val;
        if (val >= MOD)
            val -= MOD;
        return *this;
    }
    
    mod_int& operator-=(const mod_int& other) {
        val -= other.val;
        if (val < 0)
            val += MOD;
        return *this;
    }
    
    mod_int& operator*=(const mod_int& other) {
        val = (int)((long long)val * other.val % MOD);
        return *this;
    }
    
    mod_int& operator/=(const mod_int& other) {
        return *this *= other.inv();
    }
    
    friend mod_int operator+(const mod_int& a, const mod_int& b) {
        return mod_int(a) += b;
    }
    
    friend mod_int operator-(const mod_int& a, const mod_int& b) {
        return mod_int(a) -= b;
    }
    
    friend mod_int operator*(const mod_int& a, const mod_int& b) {
        return mod_int(a) *= b;
    }
    
    friend mod_int operator/(const mod_int& a, const mod_int& b) {
        return mod_int(a) /= b;
    }
    
    mod_int inv() const {
        int g = MOD, r = val, x = 0, y = 1;
        while (r != 0) {
            int q = g / r;
            g %= r;
            swap(g, r);
            x -= q * y;
            swap(x, y);
        }
        return mod_int(x < 0 ? x + MOD : x);
    }
    
    friend ostream& operator<<(ostream& stream, const mod_int& m) {
        return stream << m.val;
    }
};

template <typename T, bool maximum_mode = false>
struct RMQ {
    int n = 0, levels = 0;
    vector<T> values;
    vector<vector<int>> range_low;
    
    RMQ(const vector<T>& _values = {}) {
        if (!_values.empty())
            build(_values);
    }
    
    static int largest_bit(int x) {
        return 31 - __builtin_clz(x);
    }
    
    int better_index(int a, int b) const {
        return (values[a] < values[b]) ^ maximum_mode ? a : b;
    }
    
    void build(const vector<T>& _values) {
        values = _values;
        n = values.size();
        levels = largest_bit(n) + 1;
        range_low.resize(levels);
        for (int k = 0; k < levels; k++)
            range_low[k].resize(n - (1 << k) + 1);
        for (int i = 0; i < n; i++)
            range_low[0][i] = i;
        for (int k = 1; k < levels; k++)
            for (int i = 0; i <= n - (1 << k); i++)
                range_low[k][i] = better_index(range_low[k - 1][i],
                                               range_low[k - 1][i + (1 << (k - 1))]);
    }
    
    int query_index(int a, int b) const {
        assert(0 <= a && a < b && b <= n);
        int level = largest_bit(b - a);
        return better_index(range_low[level][a],
                            range_low[level][b - (1 << level)]);
    }
    
    T query_value(int a, int b) const {
        return values[query_index(a, b)];
    }
};

struct LCA {
    int n = 0;
    vector<vector<int>> adj;
    vector<int> parent, depth, subtree_size;