#include <iostream>
#include <cmath>
#include <cstring>
using namespace std;

bool isPrime[1000001];

long long power(long long a_power, long long b_power) {
  long long result_power = 1;
  while (b_power > 0) {
    if (b_power & 1) {
      result_power *= a_power;
    }
    a_power *= a_power;
    b_power /= 2;
  }
  return result_power;
}

void sieve(long long maxPrime) {
  memset(isPrime, true, sizeof(isPrime));
  isPrime[0] = isPrime[1] = false;
  for (long long i = 2; i * i <= maxPrime; i++) {
    if (isPrime[i]) {
      for (long long j = i * i; j <= maxPrime; j += i) {
        isPrime[j] = false;
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  long long n, a;
  cin >> n;
  
  sieve(1000000);
  
  for (int i = 0; i < n; i++) {
    cin >> a;
    if (a % static_cast<long long>(sqrt(a)) == 0) {
      if (isPrime[static_cast<long long>(sqrt(a))]) {
        cout << "YES\n";
      } else {
        cout << "NO\n";
      }
    } else {
      cout << "NO\n";
    }
  }
  
  return 0;
}