Optimization step by step:

1. Remove unnecessary includes: The program includes `<bits/stdc++.h>` which is a non-standard header and includes all the standard library headers. This can lead to unnecessary code bloat and slower compilation times.

2. Remove unnecessary macros: The program defines `ll` as `long long` and `endl` as `"\n"`. These macros are not necessary and can be replaced with their respective types and values.

3. Use a more efficient algorithm for checking prime numbers: The program uses the Sieve of Eratosthenes algorithm to check for prime numbers. However, it initializes an array of size 1000001, which can be excessive for most cases. We can optimize this by using a more efficient algorithm such as the Miller-Rabin primality test or checking only up to the square root of the number.

4. Avoid unnecessary calculations: In the main loop, the program calculates `trex` as the square root of `a` and then calculates `crex` as `trex * trex`. This is unnecessary as we already know that `trex` is the floor of the square root of `a`, so `crex` is always equal to `a`. We can remove these calculations.

5. Use a more efficient input/output mechanism: The program uses `cin` and `cout` for input and output. These operations can be slow, especially for large inputs. We can use `scanf` and `printf` for faster input/output.

Optimized code:

```cpp
#include <iostream>
#include <cmath>

bool isPrime(int n) {
  if (n <= 1) {
    return false;
  }
  if (n <= 3) {
    return true;
  }
  if (n % 2 == 0 || n % 3 == 0) {
    return false;
  }
  for (int i = 5; i * i <= n; i += 6) {
    if (n % i == 0 || n % (i + 2) == 0) {
      return false;
    }
  }
  return true;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(0);

  int n;
  std::scanf("%d", &n);

  for (int i = 0; i < n; i++) {
    int a;
    std::scanf("%d", &a);
    int trex = std::sqrt(a);
    if (trex * trex == a) {
      if (isPrime(trex)) {
        std::printf("YES\n");
      } else {
        std::printf("NO\n");
      }
    } else {
      std::printf("NO\n");
    }
  }

  return 0;
}
```

Explanation of optimization:

1. Removed unnecessary includes: The program now includes only the necessary headers `<iostream>` and `<cmath>`.

2. Removed unnecessary macros: The program no longer uses the `ll` and `endl` macros.

3. Used a more efficient algorithm for prime numbers: The program uses a simple primality test that checks if a number is divisible by any number up to its square root. This is more efficient than using the Sieve of Eratosthenes for a small range of numbers.

4. Removed unnecessary calculations: The program no longer calculates `crex` as it is always equal to `a`.

5. Used a more efficient input/output mechanism: The program now uses `scanf` and `printf` for faster input and output.