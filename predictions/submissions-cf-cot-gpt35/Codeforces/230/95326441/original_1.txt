Optimization steps:
1. Remove unnecessary includes: The program includes the entire `<bits/stdc++.h>` header, which can slow down the compilation process. We can remove this and include only the necessary headers.
2. Use a more efficient method for checking prime numbers: The current prime number checking method is not efficient. We can improve it by using the Sieve of Eratosthenes algorithm.
3. Remove unnecessary calculations: The program calculates `trex * trex` multiple times. We can calculate it once and store it in a variable.
4. Avoid unnecessary square root calculation: Instead of calculating the square root of `a` and then checking if it is a perfect square, we can directly check if `a` is a perfect square using integer arithmetic.
5. Avoid unnecessary modulo operation: The program uses `MOD` for modulo operation, but there is no need for modulo operation in this program. We can remove the `MOD` constant.

Here is the optimized program:

```cpp
#include <iostream>
#include <cmath>
#include <vector>
using namespace std;

typedef long long ll;

vector<bool> isPrime;

void sieve(ll maxPrime) {
  isPrime.assign(maxPrime + 1, true);
  isPrime[0] = isPrime[1] = false;
  for (ll i = 2; i * i <= maxPrime; i++) {
    if (isPrime[i]) {
      for (ll j = i * i; j <= maxPrime; j += i) {
        isPrime[j] = false;
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(0);
  
  ll n, a;
  cin >> n;
  
  sieve(1000000);
  
  for (int i = 0; i < n; i++) {
    cin >> a;
    ll crex = sqrt(a);
    crex *= crex;
    
    if (a == crex && isPrime[crex]) {
      cout << "YES" << endl;
    } else {
      cout << "NO" << endl;
    }
  }
  
  return 0;
}
```

Explanation:
1. We remove the unnecessary includes and include the necessary headers (`<iostream>`, `<cmath>`, `<vector>`).
2. We change the type of the loop variables `i` and `j` in the `sieve` function to `ll` to avoid type conversion warnings.
3. We replace the `isPrime` array with a `vector<bool>` to avoid memory wastage. The size of the vector is set to `maxPrime + 1` to handle indices from 0 to `maxPrime`.
4. We assign `true` to all elements of the `isPrime` vector using the `assign` function. This is more efficient than using a loop.
5. We remove the `MOD` constant as it is not needed in this program.
6. We calculate `crex` as `sqrt(a)` and then multiply it with itself to get the value of `crex`. This saves unnecessary calculations.
7. We check if `a` is equal to `crex` and if `crex` is a prime number in a single condition statement. This avoids unnecessary checks and improves readability.