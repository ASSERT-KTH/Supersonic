Step 1: Remove unnecessary includes and macros.
- The `#include <bits/stdc++.h>` includes a lot of unnecessary headers. We can remove it and include only the necessary headers.
- The `#define ll long long` and `#define mod 1000000007` macros are not used in the code. We can remove them.

Step 2: Optimize the SPF() function.
- The SPF() function calculates the smallest prime factor for each number from 2 to 1000000. We can optimize this function by using the Sieve of Eratosthenes algorithm.
- Instead of initializing each element of the `spf` array to its index, we can initialize them to -1. This will help us identify if a number is prime or not.
- The nested loop inside SPF() can be modified to only iterate over prime numbers. This will reduce the number of iterations and improve the running time.

Step 3: Optimize the main() function.
- There is no need to store the square root of each input number in a variable. We can directly use the sqrt() function inside the condition.
- Instead of checking if `a != 1` inside the loop, we can exclude 1 from the loop itself. This will save unnecessary iterations.
- We can print "YES" or "NO" directly inside the loop instead of storing the results in an array and printing them later.

Here is the optimized code:

```cpp
#include <iostream>
#include <cmath>
using namespace std;

void SPF(int spf[], int n) {
  for (int i = 2; i <= n; ++i) {
    if (spf[i] == -1) {
      for (int j = i; j <= n; j += i) {
        if (spf[j] == -1) {
          spf[j] = i;
        }
      }
    }
  }
}

int main() {
  int n;
  cin >> n;

  int spf[1000001];
  for (int i = 0; i <= 1000000; ++i) {
    spf[i] = -1;
  }
  SPF(spf, 1000000);

  int a;
  for (int t = 0; t < n; ++t) {
    cin >> a;
    if (a == 1 || spf[a] != -1 || sqrt(a) * sqrt(a) != a) {
      cout << "NO" << endl;
    } else {
      cout << "YES" << endl;
    }
  }

  return 0;
}
```