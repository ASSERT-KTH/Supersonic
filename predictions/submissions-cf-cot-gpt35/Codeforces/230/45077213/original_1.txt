Optimization Steps:
1. Avoid using `using namespace std;` as it brings all the names from the `std` namespace into the current scope, which can lead to naming conflicts.
2. Remove unnecessary headers `<algorithm>`, `<cmath>`, and `<cstring>`.
3. Remove unused global variable `x`.
4. Remove unnecessary `k.clear()` as the `k` vector is empty when it is declared.
5. Instead of using `memset` to set `flag` array to `true`, initialize it directly.
6. Instead of using `sqrt` and then converting the result to `long long`, use `llrint` function from `<cmath>` to directly round the square root to the nearest integer.
7. Avoid using `endl` to flush the output stream, as it is slower than using `'\n'`.
8. Use a range-based loop in the `Prem` function instead of an index-based loop to iterate over `k` vector.
9. Use the `reserve` function for the `k` vector to avoid unnecessary resizing.
10. Remove the unnecessary return statement at the end of the `main` function.

Optimized code:

```cpp
#include <iostream>
#include <vector>
#include <cmath>

void Prem(std::vector<long long>& k);

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(0);

  int n;
  long long a, temp;
  double b;
  std::vector<long long> k;
  bool flag[1000010] = { false };

  flag[1] = false;
  Prem(k);

  std::cin >> n;

  for (int i = 0; i < n; i++) {
    std::cin >> a;
    b = std::sqrt(static_cast<double>(a));
    temp = llrint(b);
    if (temp != b)
      std::cout << "NO\n";
    else if (flag[temp] == false)
      std::cout << "NO\n";
    else
      std::cout << "YES\n";
  }
}

void Prem(std::vector<long long>& k) {
  k.reserve(78498);
  bool flag[1000001] = { true };

  for (int i = 2; i <= 1000000; i++) {
    if (flag[i])
      k.push_back(i);
    for (long long j : k) {
      if (i * j > 1000000)
        break;
      flag[i * j] = false;
      if (i % j == 0)
        break;
    }
  }
}
```