The main bottleneck in the given program is the function `Prem`, which calculates prime numbers up to 1,000,000. This function uses a naive algorithm to check for prime numbers, which is not efficient for large numbers. 

To optimize the program, we can use the Sieve of Eratosthenes algorithm to find prime numbers. This algorithm eliminates the need for checking divisibility for each number individually, resulting in significant performance improvements.

Here are the steps to optimize the program:

1. Remove the unnecessary includes `<algorithm>` and `<vector>`, as they are not used in the program.
2. Replace the `Prem` function implementation with the optimized version using the Sieve of Eratosthenes algorithm.
3. Remove the `memset` function call, as it is not necessary anymore.
4. Remove the unnecessary `using namespace std;` directive, as it is considered a bad practice.

The optimized program is as follows:

```cpp
#include <cmath>
#include <iostream>
#include <vector>

void Prem(std::vector<bool>& flag);

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(0);

  int n;
  long long a, temp;
  double b;
  std::vector<bool> flag(1000010, true);
  flag[1] = false;
  Prem(flag);

  std::cin >> n;
  for (int i = 0; i < n; i++) {
    std::cin >> a;
    b = std::sqrt((double)a);
    temp = (long long)b;
    if (temp != b || !flag[temp])
      std::cout << "NO\n";
    else
      std::cout << "YES\n";
  }

  return 0;
}

void Prem(std::vector<bool>& flag) {
  for (int i = 2; i * i <= 1000000; i++) {
    if (flag[i]) {
      for (int j = i * i; j <= 1000000; j += i) {
        flag[j] = false;
      }
    }
  }
}
```

By using the Sieve of Eratosthenes algorithm, we eliminate the need for checking divisibility for each number individually, resulting in a significant performance improvement.