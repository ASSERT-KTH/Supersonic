#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int n;
  cin >> n;

  vector<int> t(n);
  int sum = 0;

  for (int i = 0; i < n; ++i) {
    cin >> t[i];
    sum += t[i];
  }

  if (sum > 2 * n * (n - 1) || sum < 2 * n - 2) {
    cout << "NO";
    return 0;
  }

  vector<int> one, two;
  one.reserve(n);
  two.reserve(n);

  for (int i = 0; i < n; ++i) {
    if (t[i] == 1)
      one.push_back(i);
    else
      two.push_back(i);
  }

  vector<pair<int, int>> ans;
  ans.reserve(n);

  for (int i = 1; i < two.size(); ++i) {
    ans.push_back({two[i - 1], two[i]});
    --t[two[i - 1]];
    --t[two[i]];
  }

  int f2 = min(2, static_cast<int>(one.size()));

  for (int i = 0; i < f2; ++i) {
    if (i == 0)
      ans.push_back({one[i], two[0]}), --t[two[0]];
    else
      ans.push_back({one[i], two.back()}), --t[two.back()];
  }

  priority_queue<pair<int, int>> q;
  q.reserve(two.size());

  for (auto& x : two) {
    q.push({t[x], x});
  }

  int oneSize = one.size();

  for (int i = f2; i < oneSize; ++i) {
    int x = q.top().second;
    q.pop();

    if (t[x] == 0) {
      cout << "NO";
      return 0;
    }

    ans.push_back({one[i], x});
    --t[x];
    q.push({t[x], x});
  }

  cout << "YES" << " " << two.size() + f2 - 1 << endl;
  cout << ans.size() << endl;

  for (auto& x : ans)
    cout << x.first + 1 << " " << x.second + 1 << " " << endl;

  return 0;
}