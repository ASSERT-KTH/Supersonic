To optimize the given program, we can make the following modifications:

1. Remove unnecessary includes: The program includes the entire `<bits/stdc++.h>` library, which is not recommended because it increases compilation time. We can remove this line and include only the necessary headers.

2. Remove unnecessary macros: The program defines some macros (`S`, `F`, `PB`, `sz`, `all`, `L`, `R`, `M`) which are not used in the program. We can remove them to simplify the code.

3. Replace `vector<int>` with `array<int>`: The program uses `vector<int>` to store the indices of elements with value 1 and 2. Since the size of these vectors is fixed, we can use `array<int>` instead, which has a fixed size and is more memory-efficient.

4. Use `reserve` for vectors: Before the loop that fills the `one` and `two` vectors, we can use the `reserve` function to pre-allocate memory for these vectors. This can improve performance by reducing the number of memory allocations and reallocations.

5. Use `emplace_back` instead of `push_back`: Inside the loop that fills the `ans` vector, we can use `emplace_back` instead of `push_back` to construct the pairs directly inside the vector, avoiding unnecessary copies.

6. Use `emplace` instead of `push`: Inside the loop that fills the priority queue `q`, we can use `emplace` instead of `push` to construct the pairs directly inside the priority queue, avoiding unnecessary copies.

7. Use `while (!q.empty())` instead of `for (int i = f2; i < sz(one); i++)`: Instead of using a `for` loop with an index `i` that ranges from `f2` to `sz(one)`, we can use a `while` loop with `!q.empty()` condition. This allows us to simplify the code by removing the unused `i` variable.

8. Use `reserve` for the `ans` vector: Before the loop that fills the `ans` vector, we can use the `reserve` function to pre-allocate memory for the `ans` vector. This can improve performance by reducing the number of memory allocations and reallocations.

9. Use `cout << "YES " << sz(two) + f2 - 1 << '\n';` instead of `cout << "YES" << " " << sz(two) + f2 - 1 << endl;`: Using `'\n'` instead of `endl` can improve performance because `endl` flushes the output buffer, which is not necessary in this case.

10. Use `cout << x.F + 1 << ' ' << x.S + 1 << '\n';` instead of `cout << x.F + 1 << " " << x.S + 1 << " " << endl;`: Using `'\n'` instead of `endl` and single quotes instead of double quotes can improve performance.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <array>
#include <queue>
using namespace std;

typedef long long ll;

int main() {
  cin.tie(0);
  cout.tie(0);
  ios::sync_with_stdio(0);

  int n;
  cin >> n;

  array<int, 100000> t;
  int sum = 0;

  for (int i = 0; i < n; i++) {
    cin >> t[i];
    sum += t[i];
  }

  if (sum > 2 * n * (n - 1) || sum < 2 * n - 2) {
    cout << "NO";
    return 0;
  }

  array<int, 100000> one, two;
  one.reserve(n);
  two.reserve(n);

  for (int i = 0; i < n; i++) {
    if (t[i] == 1)
      one.emplace_back(i);
    else
      two.emplace_back(i);
  }

  vector<pair<int, int>> ans;
  ans.reserve(n);

  for (int i = 1; i < two.size(); i++) {
    ans.emplace_back(two[i - 1], two[i]);
    t[two[i - 1]]--;
    t[two[i]]--;
  }

  int f2 = min(2, (int)one.size());

  for (int i = 0; i < f2; i++) {
    if (i == 0)
      ans.emplace_back(one[i], two[0]), t[two[0]]--;
    else
      ans.emplace_back(one[i], two[two.size() - 1]), t[two[two.size() - 1]]--;
  }

  priority_queue<pair<int, int>> q;

  for (auto x : two) {
    q.emplace(t[x], x);
  }

  while (!q.empty()) {
    int x = q.top().second;
    q.pop();

    if (t[x] == 0) {
      cout << "NO";
      return 0;
    }

    ans.emplace_back(one[f2], x);
    t[x]--;
    q.emplace(t[x], x);
    f2++;
  }

  cout << "YES " << two.size() + f2 - 1 << '\n';
  cout << ans.size() << '\n';

  for (auto x : ans)
    cout << x.first + 1 << ' ' << x.second + 1 << '\n';

  return 0;
}
```