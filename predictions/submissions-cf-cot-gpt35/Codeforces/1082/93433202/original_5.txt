To optimize the given C/C++ program, we can make the following steps:

1. Remove unnecessary include statements: The `bits/stdc++.h` header includes a large number of standard library headers, which can slow down the compilation process. We can remove this include statement and only include the necessary headers.

2. Remove unnecessary preprocessor directives: The `#pragma GCC optimize("O2")` directive tells the compiler to optimize the code for speed. However, this optimization level may not be necessary for this program. We can remove this directive.

3. Replace the `vector` with a fixed-size array: The program currently uses a `vector` to store the `one` and `two` vectors. However, since the size of these vectors is known at compile-time, we can replace them with fixed-size arrays, which can be more efficient in terms of memory usage and access time.

4. Optimize the loop iterations: The program currently uses a range-based `for` loop to iterate over the elements of the `two` vector. However, since the loop index `i` is used to access both `two[i-1]` and `two[i]`, we can use a traditional `for` loop with an index variable `i` starting from 1 and iterate until `sz(two)-1`.

5. Optimize the loop conditions: The loop conditions in the final loop can be simplified. Instead of comparing `i` with `sz(one)`, we can compare it with `n` directly.

6. Replace the `priority_queue` with a simple array: The program uses a `priority_queue` to store the elements of the `two` vector. However, since the elements are inserted in descending order of the count, we can use a simple array and sort it in descending order to achieve the same result.

Here is the optimized C/C++ program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef long long ll;

int main() {
  cin.tie(0);
  cout.tie(0);
  ios::sync_with_stdio(0);
  
  int n;
  cin >> n;
  
  int t[n];
  int sum = 0;
  
  for (int i = 0; i < n; i++) {
    cin >> t[i];
    sum += t[i];
  }
  
  if (sum > 2 * n * (n - 1) || sum < 2 * n - 2) {
    cout << "NO";
    return 0;
  }
  
  int one[n], two[n];
  int oneSize = 0, twoSize = 0;
  
  for (int i = 0; i < n; i++) {
    if (t[i] == 1)
      one[oneSize++] = i;
    else
      two[twoSize++] = i;
  }
  
  vector<pair<int, int>> ans;
  
  for (int i = 1; i < twoSize; i++) {
    ans.push_back({two[i - 1], two[i]});
    t[two[i - 1]]--, t[two[i]]--;
  }
  
  int f2 = min(2, oneSize);
  
  for (int i = 0; i < f2; i++) {
    if (i == 0)
      ans.push_back({one[i], two[0]}), t[two[0]]--;
    else
      ans.push_back({one[i], two[twoSize - 1]}), t[two[twoSize - 1]]--;
  }
  
  sort(two, two + twoSize, greater<int>());
  
  for (int i = f2; i < n; i++) {
    if (t[two[i]] == 0) {
      cout << "NO";
      return 0;
    }
    ans.push_back({one[i], two[i]});
    t[two[i]]--;
  }
  
  cout << "YES" << " " << twoSize + f2 - 1 << endl;
  cout << ans.size() << endl;
  
  for (auto x : ans)
    cout << x.first + 1 << " " << x.second + 1 << " " << endl;
  
  return 0;
}
```