#include <iostream>
#include <vector>
#include <array>
#include <queue>
using namespace std;

typedef long long ll;

int main() {
  cin.tie(0);
  cout.tie(0);
  ios::sync_with_stdio(0);

  int n;
  cin >> n;

  array<int, 100000> t;
  int sum = 0;

  for (int i = 0; i < n; i++) {
    cin >> t[i];
    sum += t[i];
  }

  if (sum > 2 * n * (n - 1) || sum < 2 * n - 2) {
    cout << "NO";
    return 0;
  }

  array<int, 100000> one, two;
  one.reserve(n);
  two.reserve(n);

  for (int i = 0; i < n; i++) {
    if (t[i] == 1)
      one.emplace_back(i);
    else
      two.emplace_back(i);
  }

  vector<pair<int, int>> ans;
  ans.reserve(n);

  for (int i = 1; i < two.size(); i++) {
    ans.emplace_back(two[i - 1], two[i]);
    t[two[i - 1]]--;
    t[two[i]]--;
  }

  int f2 = min(2, (int)one.size());

  for (int i = 0; i < f2; i++) {
    if (i == 0)
      ans.emplace_back(one[i], two[0]), t[two[0]]--;
    else
      ans.emplace_back(one[i], two[two.size() - 1]), t[two[two.size() - 1]]--;
  }

  priority_queue<pair<int, int>> q;

  for (auto x : two) {
    q.emplace(t[x], x);
  }

  while (!q.empty()) {
    int x = q.top().second;
    q.pop();

    if (t[x] == 0) {
      cout << "NO";
      return 0;
    }

    ans.emplace_back(one[f2], x);
    t[x]--;
    q.emplace(t[x], x);
    f2++;
  }

  cout << "YES " << two.size() + f2 - 1 << '\n';
  cout << ans.size() << '\n';

  for (auto x : ans)
    cout << x.first + 1 << ' ' << x.second + 1 << '\n';

  return 0;
}