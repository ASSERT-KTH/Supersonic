#include <iostream>
#include <vector>
using namespace std;

typedef long long ll;

const ll MOD = 1000000007;
const ll mods = 1000000009;
const ll mods1 = 37;
const ll mods2 = 715827883;

ll mulmod(ll a, ll b, ll p) {
  ll x = a % p;
  ll y = b % p;
  return (x * y) % p;
}

ll fastexp(ll x, ll y, ll p) {
  ll ans = 1;
  while (y > 0) {
    if (y & 1)
      ans = mulmod(ans, x, p);
    x = mulmod(x, x, p);
    y >>= 1;
  }
  return ans;
}

ll invmod(ll x, ll p) { return fastexp(x, p - 2, p) % p; }

bool check_composite(ll n, ll a, ll d, int s) {
  ll x = fastexp(a, d, n);
  if (x == 1 || x == n - 1)
    return false;
  for (int r = 1; r < s; r++) {
    x = mulmod(x, x, n);
    if (x == n - 1)
      return false;
  }
  return true;
}

bool isPrime(ll p) {
  if (p <= 1)
    return false;
  int r = 0;
  ll d = p - 1;
  while (!(d & 1)) {
    d >>= 1;
    r++;
  }
  for (int i = 0; i < 12; i++) {
    int value = TestMillerRabin[i];
    if (p == value)
      return true;
    if (check_composite(p, value, d, r))
      return false;
  }
  return true;
}

int main() {
  int n, k;
  cin >> n >> k;
  int played = 0;
  string p;
  vector<string> values(n + 1);
  for (int i = 0; i < n + 1; i++) {
    cin >> values[i];
    if (i == 0)
      p = values[i];
    if (values[i] != "?")
      played++;
  }
  if (k == 0) {
    if (values[0] == "0" || (values[0] == "?" && played % 2 == 1))
      cout << "Yes";
    else
      cout << "No";
    return 0;
  }
  if (played == n + 1) {
    vector<ll> fv(n + 1);
    fv[0] = stoi(values[0]);
    for (int i = 1; i < n + 1; i++)
      fv[i] = stoi(values[i]);

    vector<ll> mm1(n + 5);
    vector<ll> mm2(n + 5);
    vector<ll> mm3(n + 5);
    vector<ll> mm4(n + 5);
    mm1[0] = 1;
    mm2[0] = 1;
    mm3[0] = 1;
    mm4[0] = 1;
    for (int i = 1; i < n + 5; i++) {
      mm1[i] = mulmod(mm1[i - 1], k, MOD);
      mm2[i] = mulmod(mm2[i - 1], k, mods);
      mm3[i] = mulmod(mm3[i - 1], k, mods1);
      mm4[i] = mulmod(mm4[i - 1], k, mods2);
    }

    ll fv1 = 0;
    ll fv2 = 0;
    ll fv3 = 0;
    ll fv4 = 0;
    for (int i = 0; i < n + 1; i++) {
      fv1 = (fv1 + mulmod(fv[i], mm1[i], MOD)) % MOD;
      fv2 = (fv2 + mulmod(fv[i], mm2[i], mods)) % mods;
      fv3 = (fv3 + mulmod(fv[i], mm3[i], mods1)) % mods1;
      fv4 = (fv4 + mulmod(fv[i], mm4[i], mods2)) % mods2;
    }

    if (fv4 == 0 && fv1 == 0 && fv2 == 0 && fv3 == 0)
      cout << "Yes";
    else
      cout << "No";
    return 0;
  }
  if (played % 2 == 1) {
    if ((n + 1 - played) % 2 == 1)
      cout << "Yes";
    else
      cout << "No";
  } else {
    if ((n + 1 - played) % 2 == 0)
      cout << "Yes";
    else
      cout << "No";
  }
  return 0;
}