To optimize the given C++ program, we can make the following modifications:

1. Remove unnecessary header files: The program includes `<bits/stdc++.h>` which is a non-standard header file and includes many unnecessary header files. We can remove this line and include only the necessary header files.

2. Remove unnecessary macros: The program defines several macros that are not used. We can remove these macros to simplify the code.

3. Optimize the `mulmod` function: The `mulmod` function can be optimized by using modular exponentiation instead of repeated multiplication. We can apply the same optimization to the `fastexp` and `fastexpp` functions.

4. Optimize the `check_composite` function: The `check_composite` function can be optimized by using modular exponentiation instead of repeated multiplication. We can also optimize the loop by starting from `r = 0` instead of `r = 1` and removing the check for `x == n - 1` inside the loop.

5. Optimize the `isPrime` function: The `isPrime` function can be optimized by checking for small prime numbers before applying the Miller-Rabin test. We can also optimize the loop by starting from `i = 1` instead of `i = 0` and removing the check for `p == value` inside the loop.

6. Optimize the loop in the `main` function: The loop that populates the `values` vector can be optimized by directly inserting the input string into the vector instead of using a temporary variable.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

typedef long long ll;

const ll MOD = 1000000007;
const ll mods = 1000000009;
const ll mods1 = 37;
const ll mods2 = 715827883;

bool isPrime(ll p) {
  if (p <= 1) {
    return false;
  }
  if (p == 2 || p == 3 || p == 5 || p == 7 || p == 11 || p == 13 || p == 17 ||
      p == 19 || p == 23 || p == 29 || p == 31 || p == 37) {
    return true;
  }
  ll d = p - 1;
  int r = 0;
  while (d % 2 == 0) {
    d /= 2;
    r++;
  }
  for (int i = 1; i <= 12; i++) {
    ll a = i;
    if (a == p) {
      return true;
    }
    ll x = 1;
    ll y = a;
    for (int j = 0; j < r; j++) {
      if (d & (1LL << j)) {
        x = (x * y) % p;
      }
      y = (y * y) % p;
    }
    if (x == 1 || x == p - 1) {
      continue;
    }
    bool composite = true;
    for (int j = 1; j < r; j++) {
      x = (x * x) % p;
      if (x == p - 1) {
        composite = false;
        break;
      }
    }
    if (composite) {
      return false;
    }
  }
  return true;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int n, k;
  cin >> n >> k;
  int played = 0;
  string p;
  vector<string> values;
  for (int i = 0; i <= n; i++) {
    string s;
    cin >> s;
    if (i == 0) {
      p = s;
    }
    if (s != "?") {
      played++;
    }
    values.push_back(s);
  }

  if (k == 0) {
    if (values[0] == "0" || (values[0] == "?" && played % 2 == 1)) {
      cout << "Yes";
    } else {
      cout << "No";
    }
    return 0;
  }

  if (played == n + 1) {
    vector<ll> fv;
    for (int i = 0; i < values.size(); i++) {
      fv.push_back(stoi(values[i]));
    }
    ll mm1 = 1, mm2 = 1, mm3 = 1, mm4 = 1;
    for (int i = 1; i < fv.size() + 5; i++) {
      mm1 = (mm1 * k) % MOD;
      mm2 = (mm2 * k) % mods;
      mm3 = (mm3 * k) % mods1;
      mm4 = (mm4 * k) % mods2;
    }
    ll fv1 = 0, fv2 = 0, fv3 = 0, fv4 = 0;
    for (int i = 0; i < fv.size(); i++) {
      fv1 = (fv1 + fv[i] * mm1) % MOD;
      fv2 = (fv2 + fv[i] * mm2) % mods;
      fv3 = (fv3 + fv[i] * mm3) % mods1;
      fv4 = (fv4 + fv[i] * mm4) % mods2;
    }
    if (fv4 == 0 && fv1 == 0 && fv2 == 0 && fv3 == 0) {
      cout << "Yes";
    } else {
      cout << "No";
    }
    return 0;
  }

  if (played % 2 == 1) {
    if ((n + 1 - played) % 2 == 1) {
      cout << "Yes";
    } else {
      cout << "No";
    }
  } else {
    if ((n + 1 - played) % 2 == 0) {
      cout << "Yes";
    } else {
      cout << "No";
    }
  }
  return 0;
}
```
