#include <iostream>
#include <vector>
#include <string>
using namespace std;

constexpr int MOD = 1000000007;
constexpr int mods = 1000000009;
constexpr int mods1 = 37;
constexpr int mods2 = 715827883;

bool isPrime(int p) {
  if (p <= 1) return false;
  for (int value : {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37}) {
    if (p == value) return true;
    int d = p - 1;
    int r = 0;
    while (d % 2 == 0) {
      d >>= 1;
      r++;
    }
    if (check_composite(p, value, d, r)) return false;
  }
  return true;
}

bool check_composite(int n, int a, int d, int s) {
  int x = fastexp(a, d, n);
  if (x == 1 || x == n - 1) return false;
  for (int r = 1; r < s; r += 2) {
    x = mulmod(x, x, n);
    if (x == n - 1) return false;
  }
  return true;
}

int mulmod(int a, int b, int p) {
  int x = 0, y = a % p;
  while (b > 0) {
    if (b % 2 == 1) {
      x += y;
      if (x >= p) x -= p;
    }
    y = (2LL * y) % p;
    b >>= 1;
  }
  return x;
}

int fastexp(int x, int y, int p) {
  int ans = 1;
  while (y > 0) {
    if (y % 2 == 1) {
      ans = mulmod(ans, x, p);
    }
    y >>= 1;
    x = mulmod(x, x, p);
  }
  return ans;
}

int main() {
  int n, k;
  cin >> n >> k;
  int played = 0;
  string p;
  vector<string> values;
  for (int i = 0; i < n + 1; i++) {
    string s;
    cin >> s;
    if (i == 0) p = s;
    if (s != "?") played++;
    values.push_back(s);
  }
  if (k == 0) {
    if (values[0] == "0" || (values[0] == "?" && played % 2 == 1))
      cout << "Yes";
    else
      cout << "No";
    return 0;
  }
  if (played == n + 1) {
    vector<int> fv;
    for (const string& value : values) fv.push_back(stoi(value));
    vector<int> mm1(fv.size() + 5), mm2(fv.size() + 5), mm3(fv.size() + 5), mm4(fv.size() + 5);
    mm1[0] = 1;
    mm2[0] = 1;
    mm3[0] = 1;
    mm4[0] = 1;
    for (int i = 1; i < fv.size() + 5; i++) {
      mm1[i] = (1LL * mm1[i - 1] * k) % MOD;
      mm2[i] = (1LL * mm2[i - 1] * k) % mods;
      mm3[i] = (1LL * mm3[i - 1] * k) % mods1;
      mm4[i] = (1LL * mm4[i - 1] * k) % mods2;
    }
    int fv1 = 0, fv2 = 0, fv3 = 0, fv4 = 0;
    for (int i = 0; i < fv.size(); i++) {
      fv1 = (fv1 + (1LL * fv[i] * mm1[i]) % MOD) % MOD;
      fv2 = (fv2 + (1LL * fv[i] * mm2[i]) % mods) % mods;
      fv3 = (fv3 + (1LL * fv[i] * mm3[i]) % mods1) % mods1;
      fv4 = (fv4 + (1LL * fv[i] * mm4[i]) % mods2) % mods2;
    }
    if (fv4 == 0 && fv1 == 0 && fv2 == 0 && fv3 == 0)
      cout << "Yes";
    else
      cout << "No";
    return 0;
  }
  if (played % 2 == 1) {
    if ((n + 1 - played) % 2 == 1)
      cout << "Yes";
    else
      cout << "No";
  } else {
    if ((n + 1 - played) % 2 == 0)
      cout << "Yes";
    else
      cout << "No";
  }
  return 0;
}