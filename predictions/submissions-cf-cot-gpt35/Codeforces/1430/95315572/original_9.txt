Optimization Step by Step:

1. Remove unnecessary includes: The program includes the entire `<bits/stdc++.h>` library, which is not necessary. We can remove it and include only the required headers.

2. Remove unnecessary macros: The program defines macros for `ll`, `endl`, and `MOD`, but these macros are not used anywhere. We can remove them.

3. Remove unused variables: The variables `a`, `b`, and `c` are declared but never used. We can remove them.

4. Improve loop boundaries: The loop boundaries for `i` and `j` are set to fixed values (`i <= 335` and `j <= 210`). We can optimize these boundaries to depend on the input value `n`. The maximum possible value for `i` can be calculated as `n / 3`, and the maximum possible value for `j` can be calculated as `n / 5`. This will reduce the number of iterations in the nested loop.

5. Remove unnecessary division: The variable `z` is computed as `z = n - p; z = z / 7;`. We can combine these operations into a single operation `z = (n - p) / 7;`.

6. Avoid unnecessary comparisons: The condition `if (flag == true)` is unnecessary because `flag` is already a boolean variable. We can directly use `if (flag)`.

7. Reduce unnecessary loop iterations: The loop `while (tests--)` is unnecessary because the program only runs once. We can remove this loop.

8. Optimize I/O operations: The program uses `cin` and `cout` for I/O operations, which are slower compared to `scanf` and `printf`. We can replace `cin` with `scanf` and `cout` with `printf` to improve the running time.

Optimized Program:

```cpp
#include <iostream>

void solve() {
  int n;
  scanf("%d", &n);

  int flag = false;

  for (int i = 0; i <= n / 3; i++) {
    for (int j = 0; j <= n / 5; j++) {
      int p = 3 * i + 5 * j;
      int z = (n - p) / 7;
      if (p + z * 7 == n && z >= 0) {
        printf("%d %d %d\n", i, j, z);
        flag = true;
        break;
      }
    }
    if (flag)
      break;
  }

  if (!flag)
    printf("-1\n");
}

int main() {
  int tests = 1;
  scanf("%d", &tests);

  solve();

  return 0;
}
```
