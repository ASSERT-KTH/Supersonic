Optimization steps:

1. Remove unnecessary header file inclusion. The program only needs `iostream` and `vector` headers.

2. Remove unnecessary macro definitions. The program does not use the `ll`, `endl`, and `MOD` macros.

3. Remove unused variables. The variables `a`, `b`, and `c` are not used in the program.

4. Avoid unnecessary division operation. Instead of dividing `z` by 7, we can check if `z` is divisible by 7 using the modulo operator `%`.

5. Avoid unnecessary check for `flag` in the inner loop. Since we break out of the inner loop when a solution is found, we can remove the `flag` variable and the check for `flag` in the outer loop.

6. Optimize the nested loops. Instead of iterating `i` from 0 to 335 and `j` from 0 to 210, we can iterate `i` from 0 to `n/3` and `j` from 0 to `(n - 3 * i)/5`.

7. Use a more efficient data type for `i`, `j`, and `z`. Since the range of `i`, `j`, and `z` is small, we can use `int` instead of `long long`.

8. Avoid unnecessary input/output synchronization. We can remove the `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` statements.

9. Remove unnecessary variable initialization. The variables `n`, `i`, `j`, and `z` are initialized inside the loops but are immediately overwritten with new values. We can remove the initializations.

Optimized program:

```cpp
#include <iostream>

using namespace std;

void solve() {
  int n;
  cin >> n;
  
  for (int i = 0; i <= n/3; i++) {
    for (int j = 0; j <= (n - 3 * i)/5; j++) {
      int p = 3 * i + 5 * j;
      int z = n - p;
      if (z % 7 == 0) {
        z /= 7;
        cout << i << " " << j << " " << z << endl;
        return;
      }
    }
  }
  
  cout << -1 << endl;
}

int main() {
  int tests;
  cin >> tests;
  
  while (tests--) {
    solve();
  }
  
  return 0;
}
```