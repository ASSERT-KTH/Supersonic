Optimization steps:

1. Remove unnecessary includes: The program includes the header file `<bits/stdc++.h>`, which is not a standard C/C++ header file and is not necessary for this program. It is better to include only the necessary standard header files.

2. Remove unused macros: The program defines macros for `ll`, `endl`, and `MOD`, but they are not used in the code. It is better to remove these macros.

3. Avoid unnecessary variable declaration: The variables `a`, `b`, and `c` are declared but not used in the code. It is better to remove these unused variable declarations.

4. Optimize the loop condition: The outer loop condition `i <= 335` and the inner loop condition `j <= 210` are hardcoded constants. Instead of using a fixed range, we can optimize the loop by calculating the maximum possible values of `i` and `j` based on the input `n` and the equation `3 * i + 5 * j + 7 * z = n`. We can calculate the maximum value of `i` as `n / 3` and the maximum value of `j` as `(n - 3 * i) / 5`. This will reduce the number of iterations in the loop.

5. Use integer division instead of floating-point division: In the original code, `z = z / 7` performs a floating-point division, which is unnecessary. Since `z` is an integer, we can use integer division (`z = z / 7`) instead to improve performance.

6. Use a more efficient flag comparison: Instead of comparing `flag == true`, we can simply use `flag` in the condition `if (flag)` and `if (!flag)`. This will make the comparison more concise and slightly improve performance.

Optimized code:

```cpp
#include <iostream>

void solve() {
  int n;
  std::cin >> n;

  int max_i = n / 3;
  int max_j = (n - 3 * max_i) / 5;

  bool flag = false;
  for (int i = 0; i <= max_i; i++) {
    for (int j = 0; j <= max_j; j++) {
      int p = 3 * i + 5 * j;
      int z = (n - p) / 7;
      if (p + z * 7 == n && z >= 0) {
        std::cout << i << " " << j << " " << z << std::endl;
        flag = true;
        break;
      }
    }
    if (flag)
      break;
  }

  if (!flag)
    std::cout << -1 << std::endl;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  int tests = 1;
  std::cin >> tests;

  while (tests--)
    solve();

  return 0;
}
```