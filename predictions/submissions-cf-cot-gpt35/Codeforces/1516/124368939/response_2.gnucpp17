#include <iostream>
#include <vector>
#include <cmath>

typedef long long int ll;

ll modulo_pow(ll a, ll b, ll mod) {
  if (b == 0)
    return 1;
  ll d = modulo_pow(a, b / 2, mod);
  if (b & 1)
    return (d % mod * d % mod * a) % mod;
  return (d % mod * d % mod) % mod;
}

ll ncr(ll n, ll r, ll mod) {
  ll fact = 1;
  for (ll i = 1; i <= r; i++) {
    fact = (fact * (n - i + 1)) % mod;
  }
  ll invfact = modulo_pow(fact, mod - 2, mod);
  ll ans = (fact * invfact) % mod;
  return ans;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  int t;
  std::cin >> t;
  while (t--) {
    int n;
    std::cin >> n;
    std::vector<ll> v(n, 0);
    ll xor_sum = 0;
    for (int i = 0; i < n; i++) {
      std::cin >> v[i];
      xor_sum ^= v[i];
    }

    std::vector<ll> prefix_xor(n + 1, 0);
    for (int i = 1; i <= n; i++) {
      prefix_xor[i] = prefix_xor[i - 1] ^ v[i - 1];
    }

    std::vector<ll> suffix_xor(n + 2, 0);
    for (int i = n; i >= 1; i--) {
      suffix_xor[i] = suffix_xor[i + 1] ^ v[i - 1];
    }

    bool ans = false;
    for (int i = 1; i <= n - 1; i++) {
      if (prefix_xor[i] == suffix_xor[i + 1]) {
        ans = true;
        break;
      }
    }

    if (ans) {
      std::cout << "YES\n";
      continue;
    } else if (xor_sum == 0 && !ans) {
      std::cout << "NO\n";
      continue;
    }

    ll curr_xor = 0;
    ll count = 0;
    for (int i = 0; i < n; i++) {
      curr_xor ^= v[i];
      if (curr_xor == xor_sum) {
        curr_xor = 0;
        count++;
      }
    }

    if (curr_xor == 0 && count >= 3)
      std::cout << "YES\n";
    else
      std::cout << "NO\n";
  }

  return 0;
}