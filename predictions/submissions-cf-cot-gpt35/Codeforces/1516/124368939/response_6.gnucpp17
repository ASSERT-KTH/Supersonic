#include <iostream>
#include <vector>
using namespace std;

typedef long long int ll;

const ll mod = 1e9 + 7;

vector<ll> fact;
vector<ll> invfact;

void precalcFactorial(ll n) {
    fact.resize(n + 1);
    invfact.resize(n + 1);
    fact[0] = 1;
    invfact[0] = 1;
    for (ll i = 1; i <= n; i++) {
        fact[i] = (fact[i - 1] * i) % mod;
        invfact[i] = (invfact[i - 1] * modulo_pow(i, mod - 2)) % mod;
    }
}

ll modulo_pow(ll a, ll b) {
    if (b == 0)
        return 1;
    ll d = modulo_pow(a, b / 2);
    if (b & 1)
        return (d * d % mod * a) % mod;
    return (d * d) % mod;
}

ll ncr(ll n, ll r) {
    if (n < r || n < 0 || r < 0)
        return 0;
    return (fact[n] * invfact[r] % mod * invfact[n - r]) % mod;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<ll> v(n);
        ll d = 0;
        for (int i = 0; i < n; i++) {
            cin >> v[i];
            d ^= v[i];
        }

        vector<ll> xor_arr(n + 1);
        xor_arr[0] = 0;
        for (int i = 1; i <= n; i++) {
            xor_arr[i] = xor_arr[i - 1] ^ v[i - 1];
        }

        int ans = 0;
        for (int i = 1; i <= n - 1; i++) {
            if (xor_arr[i] == (xor_arr[n] ^ xor_arr[i])) {
                ans = 1;
                break;
            }
        }

        if (ans) {
            cout << "YES\n";
            continue;
        } else if (d == 0 && ans == 0) {
            cout << "NO\n";
            continue;
        }

        ll k = 0;
        ll c = 0;
        for (int i = 0; i < n; i++) {
            k ^= v[i];
            if (k == d) {
                k = 0;
                c++;
            }
        }

        if (k == 0 && c >= 3)
            cout << "YES\n";
        else
            cout << "NO\n";
    }

    return 0;
}