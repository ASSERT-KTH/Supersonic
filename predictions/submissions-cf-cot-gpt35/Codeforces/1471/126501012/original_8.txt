The given program calculates the sum of the product of elements of an array with their corresponding powers of a given number. The program can be optimized as follows:

1. Remove unnecessary include statement: The `#include <bits/stdc++.h>` statement includes a large number of header files, which can increase the compilation time. Since the program does not use any specific header files from this include, we can remove it.

2. Remove unnecessary macros: The macros `int long long`, `mod`, and `endl` are not used in the program. We can remove them to simplify the code.

3. Avoid using `vector` for temporary storage: The program uses a vector `b` to store the calculated powers of `x` for each element of `a`. However, we can directly calculate and use the value without the need for a separate vector.

4. Avoid unnecessary comparisons and assignments: The program compares and assigns `b[i]` with `tok` multiple times. We can optimize this by avoiding unnecessary comparisons and assignments.

5. Optimize the calculation of `sum`: The calculation of `sum` can be optimized by avoiding repeated multiplications and additions. We can calculate the sum in a single loop by keeping track of the running sum.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int getN(int n, int x) {
  int cnt = 0;
  while (n > 0 && n % x == 0) {
    ++cnt;
    n /= x;
  }
  return cnt;
}

void solve() {
  int n, x;
  cin >> n >> x;
  int a[n];
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
  }
  int sum = 0;
  int tok = getN(a[0], x);
  for (int i = 0; i < n; ++i) {
    tok = min(tok, getN(a[i], x));
    sum += tok * a[i] + a[i];
  }
  cout << sum << endl;
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
  return 0;
}
```

This optimized program removes unnecessary code, avoids unnecessary comparisons and assignments, and optimizes the calculation of the sum.