#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

const int N = 1e6 + 5;
vector<int> dp(N);

void preprocess() {
  dp[1] = 1;
  for(int num = 2; num < N; ++num) {
    if(dp[num] == 0) {
      for(int i = num; i < N; i += num) {
        if(dp[i] == 0) dp[i] = num;
      }
    }
  }
}

void solve() {
  int n;
  cin >> n;
  vector<int> a(n);
  for(int i = 0; i < n; ++i) cin >> a[i];
  
  vector<int> freq(N, 0);
  int ans1 = 1;
  
  for(int i = 0; i < n; ++i) {
    freq[dp[a[i]]]++;
    ans1 = max(ans1, freq[dp[a[i]]]);
  }
  
  int ans2 = 0;
  for(int i = 1; i < N; ++i) {
    if(freq[i] % 2 == 0 || i == 1)
      ans2 += freq[i];
  }
  
  int q;
  cin >> q;
  
  while (q--) {
    int w;
    cin >> w;
    if (w == 0)
      cout << ans1 << "\n";
    else
      cout << max(ans1, ans2) << "\n";
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  
  preprocess();
  
  int t;
  cin >> t;
  
  while (t--)
    solve();
  
  return 0;
}