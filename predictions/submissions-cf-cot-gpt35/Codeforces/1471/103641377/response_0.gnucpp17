#include <iostream>
#include <vector>
#include <unordered_map>
#include <cmath>
#include <chrono>

void preprocess(std::vector<int>& dp) {
    int N = dp.size();
    dp[1] = 1;
    for (int num = 1; num < N; ++num) {
        for (int i = 2; i <= std::sqrt(num); ++i) {
            if (num % i == 0) {
                if (dp[num / i] % i)
                    dp[num] = dp[num / i] * i;
                else
                    dp[num] = dp[num / i] / i;
                break;
            }
        }
        if (dp[num] == 0)
            dp[num] = num;
    }
}

void solve() {
    int n;
    std::cin >> n;
    std::vector<int> a(n);
    for (int i = 0; i < n; ++i)
        std::cin >> a[i];

    std::vector<int> dp(*std::max_element(a.begin(), a.end()) + 1);
    preprocess(dp);

    std::vector<int> freq(dp.size());
    int ans1 = 1;
    for (int i = 0; i < n; ++i) {
        ++freq[dp[a[i]]];
        ans1 = std::max(ans1, freq[dp[a[i]]]);
    }

    int ans2 = 0;
    int oddCount = 0;
    for (int f : freq) {
        if (f % 2 == 0)
            ans2 += f;
        else if (f == 1)
            ++oddCount;
    }
    ans2 += oddCount;

    int q;
    std::cin >> q;
    while (q--) {
        int w;
        std::cin >> w;
        if (w == 0)
            std::cout << ans1 << '\n';
        else
            std::cout << std::max(ans1, ans2) << '\n';
    }
}

int main() {
    auto start = std::chrono::high_resolution_clock::now();
    std::ios::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(NULL);

    int t;
    std::cin >> t;
    while (t--)
        solve();

    auto end = std::chrono::high_resolution_clock::now();
    double tt = std::chrono::duration_cast<std::chrono::nanoseconds>(end - start).count();
    std::cout << "\nExecuted in: " << tt * 1e-9 << " sec\n";

    return 0;
}