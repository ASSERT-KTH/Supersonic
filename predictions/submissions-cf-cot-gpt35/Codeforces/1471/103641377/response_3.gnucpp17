#include <iostream>
#include <vector>
#include <unordered_map>
#include <cmath>

void preprocess(std::vector<int>& dp) {
  const int N = dp.size();
  dp[1] = 1;
  for (int num = 2; num < N; ++num) {
    int sqrtNum = std::sqrt(num);
    for (int i = 2; i <= sqrtNum; ++i) {
      if (num % i == 0) {
        if (dp[num / i] % i)
          dp[num] = dp[num / i] * i;
        else
          dp[num] = dp[num / i] / i;
        break;
      }
    }
    if (dp[num] == 0)
      dp[num] = num;
  }
}

void solve() {
  int n;
  std::cin >> n;
  
  std::vector<int> a(n);
  for (int i = 0; i < n; ++i)
    std::cin >> a[i];

  std::vector<int> dp(1e6 + 5);
  preprocess(dp);

  std::vector<int> freq(1e6 + 5);
  int maxFreq = 0;
  int sumEvenFreq = 0;

  for (int i = 0; i < n; ++i) {
    int val = dp[a[i]];
    ++freq[val];
    maxFreq = std::max(maxFreq, freq[val]);
    if (freq[val] % 2 == 0 || val == 1)
      sumEvenFreq += freq[val];
  }

  int q;
  std::cin >> q;
  std::vector<int> results(q);

  for (int i = 0; i < q; ++i) {
    int w;
    std::cin >> w;
    if (w == 0)
      results[i] = maxFreq;
    else
      results[i] = std::max(maxFreq, sumEvenFreq);
  }

  for (int i = 0; i < q; ++i)
    std::cout << results[i] << '\n';
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  int t;
  std::cin >> t;
  while (t--)
    solve();

  return 0;
}