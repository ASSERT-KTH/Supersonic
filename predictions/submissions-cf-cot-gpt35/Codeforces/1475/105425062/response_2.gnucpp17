#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;

  while (t--) {
    int n;
    cin >> n;
    vector<long long> v(n);
    vector<long long> cnt;

    for (int i = 0; i < n; i++) {
      cin >> v[i];
      cnt.push_back(v[i]);
    }

    vector<long long> dp(2e5 + 1, 0);
    long long best = 0;

    for (int i = 0; i < n; i++) {
      dp[v[i]]++;
      best = max(best, dp[v[i]]);
    }

    for (int i = 2; i <= 2e5; i++) {
      long long max_dp = 0;

      for (int j = i; j <= 2e5; j += i) {
        max_dp = max(max_dp, dp[j]);
      }

      for (int j = i; j <= 2e5; j += i) {
        dp[j] = max_dp + cnt[j];
        best = max(best, dp[j]);
      }
    }

    cout << n - best << '\n';
  }

  return 0;
}