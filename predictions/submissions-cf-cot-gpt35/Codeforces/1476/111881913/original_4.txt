Step 1: Remove unnecessary headers
- The program includes `<bits/stdc++.h>` which is not necessary and can be replaced with the specific headers needed.

Step 2: Optimize input/output operations
- The program currently uses `cin` and `cout` for input and output. These operations are relatively slow compared to other input/output methods. We can optimize this by using `scanf` and `printf` instead.

Step 3: Optimize the loop
- The program uses a loop to iterate through the vector `v` and calculate the sum. This can be optimized by using a variable `sum` to keep track of the current sum. Instead of calculating the sum at each iteration, we can update the `sum` variable directly.

Step 4: Optimize the if condition
- The if condition checks if `(v[i] * 100) > sum * k`. This can be optimized by avoiding the multiplication and division operations. We can compare `v[i]` with `(sum * k) / 100` instead.

Step 5: Optimize the calculation of `ans`
- The calculation of `ans` can be simplified by using the integer division operator `//`.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#define ull unsigned long long int
using namespace std;

int main() {
  int t;
  scanf("%d", &t);

  while (t--) {
    ull n, k;
    scanf("%llu %llu", &n, &k);
    vector<ull> v(n);

    for (int i = 0; i < n; i++) {
      scanf("%llu", &v[i]);
    }

    ull ans = 0;
    ull sum = v[0];

    for (int i = 1; i < n; i++) {
      if (v[i] > (sum * k) / 100) {
        ull x = (v[i] * 100) - (sum * k);
        ans += (x + k - 1) / k;
        sum += (x + k - 1) / k;
      }
      sum += v[i];
    }

    printf("%llu\n", ans);
  }
  return 0;
}
```