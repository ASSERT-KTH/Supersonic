Step 1: Remove unnecessary includes and define statements.

The `#include <bits/stdc++.h>` is a non-standard header file that includes all the standard library headers. This can lead to larger compiled files and slower compilation times. We can replace it with the specific header files that are actually needed.

The `#define ull unsigned long long int` is defining the type `ull` as `unsigned long long int`. However, we don't actually need this definition because we can directly use `unsigned long long int` throughout the code.

Step 2: Optimize the input/output operations.

The current code is using `cin` and `cout` for input and output. These operations can be slow, especially for large inputs. We can use `scanf` and `printf` instead, which are faster alternatives.

Step 3: Optimize the loop variables.

The current code is using `int` as the loop variables. Since `n` and `k` are of type `unsigned long long int`, it would be more efficient to use the same type for the loop variables as well.

Step 4: Optimize the calculation of `ans` and `sum`.

The current code is using multiple if-else statements to calculate `ans` and `sum`. We can simplify this calculation by using the ternary operator `?:` and removing the duplicated code.

Step 5: Optimize the vector initialization.

The current code is initializing the vector `v` with a size of `n`, but it doesn't actually need to be initialized with any values. We can optimize this by directly declaring an empty vector and resizing it later.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  unsigned long long int t;
  scanf("%llu", &t);
  while (t--) {
    unsigned long long int n, k;
    scanf("%llu %llu", &n, &k);
    vector<unsigned long long int> v;
    v.resize(n);
    for (unsigned long long int i = 0; i < n; i++) {
      scanf("%llu", &v[i]);
    }
    unsigned long long int ans = 0;
    unsigned long long int sum = v[0];
    for (unsigned long long int i = 1; i < n; i++) {
      unsigned long long int x = (v[i] * 100) > sum * k ? (v[i] * 100 - sum * k) : 0;
      ans += (x + k - 1) / k;
      sum += (x + k - 1) / k;
      sum += v[i];
    }
    printf("%llu\n", ans);
  }
}
```

Explanation of the optimization steps:

1. Removed the `#include <bits/stdc++.h>` and replaced it with the necessary header files.

2. Replaced `cin` and `cout` with `scanf` and `printf` for faster input/output.

3. Changed the loop variables from `int` to `unsigned long long int` to match the types of `n` and `k`.

4. Simplified the calculation of `ans` and `sum` using the ternary operator `?:` and removing duplicated code.

5. Removed the unnecessary initialization of the vector `v` and resized it later.