#include <algorithm>
#include <iostream>
#include <unordered_map>

int main() {
  int n_sets;
  std::cin >> n_sets;
  while (n_sets--) {
    int n, W;
    std::cin >> n >> W;
    int a[n];
    for (int i = 0; i < n; i++)
      std::cin >> a[i];
    std::sort(a, a + n, std::greater<int>());
    std::unordered_map<int, int> x;
    x.reserve(n);
    x.emplace_hint(x.begin(), W, 200000);
    for (int i : a) {
      int remain = W - i;
      int best_w = W;
      auto it = x.begin();
      while (it != x.end() && it->first - i >= 0 && it->second != 0 && it->first - i < remain) {
        best_w = it->first;
        remain = it->first - i;
        ++it;
      }
      x[best_w]--;
      if (x[best_w] == 0)
        x.erase(best_w);
      x[remain]++;
    }
    int result = std::accumulate(x.begin(), x.end(), 0, [](int sum, const auto& pair) {
      return sum + pair.second;
    });
    std::cout << result << std::endl;
  }
  return 0;
}