To optimize the given program, we can make the following modifications:

1. Remove unnecessary headers: The `<algorithm>` header is not used in the program, so we can remove it.

2. Avoid using `using namespace std;`: It is generally considered a good practice to avoid using `using namespace std;` as it can lead to name clashes. Instead, we can use the `std::` prefix for the standard library components.

3. Use `reserve` for vector sizes: Before populating the `adj` vector, we can reserve the required space to avoid reallocations during the loop.

4. Pass vectors by reference-to-const: We can pass the `adj` vector by reference-to-const in the `compute_depth` and `compute_below` functions since they are not modified within these functions.

5. Use `emplace_back` instead of `push_back`: Instead of using `push_back` to add elements to the `adj` vector, we can use `emplace_back` for potentially better performance.

6. Use prefix increment in the loops: We can use prefix increment (`++i`) instead of postfix increment (`i++`) in the loops for potentially better performance.

7. Use `std::accumulate` with iterators: Instead of using `std::accumulate` with two separate iterators, we can use it with iterator ranges for better readability.

Here's the optimized program:

```cpp
#include <iostream>
#include <numeric>
#include <vector>

void compute_depth(int u, int p, const std::vector<std::vector<int>>& adj, std::vector<int>& depth) {
  for (int v : adj[u]) {
    if (v != p) {
      depth[v] = depth[u] + 1;
      compute_depth(v, u, adj, depth);
    }
  }
}

void compute_below(int u, int p, const std::vector<std::vector<int>>& adj, std::vector<int>& below) {
  for (int v : adj[u]) {
    if (v != p) {
      compute_below(v, u, adj, below);
      below[u] += below[v] + 1;
    }
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);

  int n, k;
  std::cin >> n >> k;

  std::vector<std::vector<int>> adj;
  adj.reserve(n);
  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    std::cin >> u >> v;
    --u;
    --v;
    adj.emplace_back();
    adj[u].push_back(v);
    adj[v].push_back(u);
  }

  std::vector<int> depth(n);
  compute_depth(0, -1, adj, depth);

  std::vector<int> below(n);
  compute_below(0, -1, adj, below);

  std::vector<int> score(n);
  for (int i = 0; i < n; ++i) {
    score[i] = depth[i] - below[i];
  }

  std::sort(score.begin(), score.end(), std::greater<int>());

  std::cout << std::accumulate(score.begin(), score.begin() + k, 0ll) << '\n';

  return 0;
}
```