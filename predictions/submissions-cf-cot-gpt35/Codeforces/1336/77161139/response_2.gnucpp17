#include <iostream>
#include <numeric>
#include <vector>
using namespace std;

void compute_score(int u, int p, vector<vector<int>>& adj, vector<int>& score, vector<int>& below, vector<int>& depth) {
    int maxDepth = depth[u];
    int sumDepthBelow = 0;
    for (int v : adj[u]) {
        if (v != p) {
            depth[v] = depth[u] + 1;
            compute_score(v, u, adj, score, below, depth);
            maxDepth = max(maxDepth, depth[v]);
            sumDepthBelow += depth[v];
        }
    }
    below[u] = sumDepthBelow;
    score[u] = maxDepth - sumDepthBelow;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int n, k;
    cin >> n >> k;

    vector<vector<int>> adj(n);
    for (int i = 0; i < n - 1; ++i) {
        int u, v;
        cin >> u >> v;
        --u;
        --v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    vector<int> score(n);
    vector<int> below(n);
    vector<int> depth(n);

    compute_score(0, -1, adj, score, below, depth);

    sort(score.begin(), score.end(), greater<int>());

    cout << accumulate(score.begin(), score.begin() + k, 0ll) << '\n';

    return 0;
}