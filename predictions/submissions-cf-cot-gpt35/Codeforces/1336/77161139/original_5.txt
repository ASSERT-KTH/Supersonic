To optimize the given program, we can make the following modifications:

1. Remove unnecessary headers: The program includes `<algorithm>`, `<ios>`, and `<numeric>` headers, which are not used. We can remove them.

2. Remove unnecessary `using` statement: The program uses `using namespace std`, which is generally considered bad practice. We can remove it and use the `std::` prefix for standard library functions and types.

3. Pass vectors by reference: The functions `compute_depth` and `compute_below` currently pass the vectors `adj`, `depth`, and `below` by value. This creates unnecessary copies of the vectors. We can pass them by reference to avoid the copy overhead.

4. Use `reserve` to preallocate memory: The program currently adds elements to the `adj` vector without reserving memory upfront. This can cause frequent reallocations and slow down the program. We can use the `reserve` function to preallocate memory for the vector.

5. Avoid unnecessary subtraction: In the main loop, the program subtracts `1` from `u` and `v` before adding them to the `adj` vector. However, this subtraction is not necessary as the vector indices are zero-based. We can remove the subtraction.

6. Use `emplace_back` instead of `push_back`: In the main loop, the program uses `push_back` to add elements to the `adj` vector. However, we can use `emplace_back` instead, which avoids the construction of temporary objects.

7. Use `std::greater<>` instead of `greater<int>`: In the sorting step, the program uses `greater<int>` as the comparison function. However, we can use `std::greater<>` instead to allow the compiler to deduce the type automatically.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>

void compute_depth(int u, int p, std::vector<std::vector<int>>& adj, std::vector<int>& depth) {
  for (int v : adj[u]) {
    if (v != p) {
      depth[v] = depth[u] + 1;
      compute_depth(v, u, adj, depth);
    }
  }
}

void compute_below(int u, int p, std::vector<std::vector<int>>& adj, std::vector<int>& below) {
  for (int v : adj[u]) {
    if (v != p) {
      compute_below(v, u, adj, below);
      below[u] += below[v] + 1;
    }
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);

  int n, k;
  std::cin >> n >> k;

  std::vector<std::vector<int>> adj;
  adj.reserve(n);
  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    std::cin >> u >> v;
    adj.emplace_back();
    adj[u].push_back(v);
    adj[v].push_back(u);
  }

  std::vector<int> depth(n);
  compute_depth(0, -1, adj, depth);

  std::vector<int> below(n);
  compute_below(0, -1, adj, below);

  std::vector<int> score(n);
  for (int i = 0; i < n; ++i) {
    score[i] = depth[i] - below[i];
  }

  std::sort(score.begin(), score.end(), std::greater<>());
  std::cout << std::accumulate(score.begin(), score.begin() + k, 0ll) << '\n';

  return 0;
}
```

This optimized program reduces the memory usage by passing vectors by reference and preallocating memory. It also improves the running time by using `emplace_back` and `std::greater<>`.