The given program reads an integer `t` and then for each test case, it reads an integer `n` followed by `n` integers. It then calculates the minimum difference between two consecutive occurrences of each integer in the input and outputs it.

Here are the steps to optimize the program:

1. Remove unnecessary includes and using statements.
2. Remove the typedef for `ll` since it is not used.
3. Remove the `rep` macro and replace it with a standard for loop.
4. Remove the `all` macro since it is not used.
5. Remove the `debug` macros since they are not used.
6. Use `reserve` to allocate memory for the `map`.
7. Remove unnecessary checks in the calculation of `minres`.
8. Move the declaration of `val` outside the loop.

Here is the optimized program:

```c++
#include <iostream>
#include <map>
#include <vector>

void solve() {
  int n;
  std::cin >> n;
  std::map<int, std::vector<int>> m;
  m.reserve(n);
  
  int val;
  for (int i = 0; i < n; i++) {
    std::cin >> val;
    m[val].push_back(i + 1);
  }

  int minres = INT_MAX;
  for (const auto& x : m) {
    const std::vector<int>& v = x.second;
    if (v.size() > 1) {
      for (int i = 1; i < v.size(); i++) {
        minres = std::min(minres, v[i] - v[i - 1] + 1);
      }
    }
  }

  if (minres == INT_MAX) {
    std::cout << -1 << std::endl;
  } else {
    std::cout << minres << std::endl;
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  
  int t;
  std::cin >> t;
  
  while (t--) {
    solve();
  }

  return 0;
}
```
