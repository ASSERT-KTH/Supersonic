To optimize the given C/C++ program, we can make the following modifications:

1. Remove the unnecessary `#include <bits/stdc++.h>` header. This header is not standard and includes a large number of other headers, which can increase compile time and memory usage.

2. Change the `read` function to pass the vector by reference instead of by value. This will avoid unnecessary copying of the vector.

3. Change the `set<int>` to `unordered_set<int>`. This will improve the lookup time from O(log n) to O(1) on average.

4. Remove the unnecessary `cont` variable and use the size of the set instead. This will avoid unnecessary increments and assignments.

5. Remove the unnecessary `ios::sync_with_stdio(false)`, `cin.tie(NULL)`, and `cout.tie(NULL)` calls. These calls are used for synchronization between C and C++ streams, but they are not needed in this program.

6. Change the loop in the `solve` function to count from `0` to `n-1` instead of from `n-1` to `0`. This will simplify the loop and avoid the need for decrementing `i` in each iteration.

7. Change the loop in the `solve` function to count from `0` to `m-1` instead of from `m-1` to `0`. This will simplify the loop and avoid the need for decrementing `i` in each iteration.

Here is the optimized C/C++ program:

```cpp
#include <iostream>
#include <vector>
#include <unordered_set>
using namespace std;

void read(vector<int>& v) {
  for (auto& x : v)
    cin >> x;
}

void solve(int n, int m) {
  vector<int> v(n);
  read(v);
  unordered_set<int> s;
  for (int i = 0; i < n; i++) {
    if (s.find(v[i]) == s.end()) {
      s.insert(v[i]);
    }
    v[i] = s.size();
  }
  int q;
  for (int i = 0; i < m; i++) {
    cin >> q;
    cout << v[q - 1] << endl;
  }
}

int main() {
  int n, m;
  cin >> n >> m;
  solve(n, m);
}
```