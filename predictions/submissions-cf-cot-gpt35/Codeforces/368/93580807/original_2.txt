To optimize the given program, we can make the following modifications:

1. Remove the unnecessary inclusion of the `<bits/stdc++.h>` header. This header includes a large number of standard library headers, which can increase compile time and memory usage.

2. Replace the `cin` and `cout` with `scanf` and `printf` respectively. These functions are faster than their stream counterparts.

3. Use a `vector<bool>` instead of `set<int>` to keep track of the distinct elements. This will reduce memory usage and improve performance.

4. Instead of iterating over the vector in reverse, we can iterate from 0 to n-1 and calculate the distinct elements in a forward manner. This eliminates the need for reversing the vector and checking for existing elements in the set.

5. Instead of repeatedly inserting elements in the set, we can use a bitset to mark the presence of elements. This will be more memory efficient and faster.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <bitset>
using namespace std;

void read(vector<int> &v) {
  for (auto &x : v)
    scanf("%d", &x);
}

void solve(int n, int m) {
  vector<int> v(n);
  read(v);
  bitset<1000001> presence;
  vector<int> distinct(n);
  int cont = 0;
  for (int i = 0; i < n; i++) {
    if (!presence[v[i]]) {
      presence[v[i]] = true;
      cont++;
    }
    distinct[i] = cont;
  }
  int q;
  for (int i = 0; i < m; i++) {
    scanf("%d", &q);
    printf("%d\n", distinct[q - 1]);
  }
}

int main() {
  int n, m;
  scanf("%d %d", &n, &m);
  solve(n, m);
}
```

Explanation of the optimizations:

1. By removing the unnecessary inclusion of the `<bits/stdc++.h>` header, we avoid the overhead of including unnecessary standard library headers.

2. Using `scanf` and `printf` instead of `cin` and `cout` improves the I/O performance as they are faster.

3. Replacing the `set<int>` with a `vector<bool>` reduces memory usage. The `vector<bool>` uses a single bit per element, whereas `set<int>` uses additional memory for each element.

4. Iterating over the vector in a forward manner eliminates the need for reversing the vector and checking for existing elements in the set. This simplifies the code and improves performance.

5. Using a `bitset` instead of a `set` reduces memory usage and improves performance. The `bitset` uses a fixed amount of memory, whereas `set` dynamically allocates memory for each element.