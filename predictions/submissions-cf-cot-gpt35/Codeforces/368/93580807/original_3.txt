Optimization Steps:

1. Remove unnecessary includes: The line `#include <bits/stdc++.h>` includes a large number of standard library headers, which can slow down compilation time. Since we are not using any specific headers from this include, we can remove it.

2. Avoid using `using namespace std;`: It is considered a good practice to avoid using `using namespace std;` as it pollutes the global namespace. Instead, we can use the `std::` prefix to specify the standard library classes and functions.

3. Pass the vector by reference in the `read` function: Currently, the `read` function takes the vector by value, which creates a copy of the vector. This can be inefficient for large vectors. We can modify the `read` function to take the vector by reference, so that it operates directly on the original vector.

4. Use a `unordered_set` instead of `set`: In the `solve` function, the set `s` is used to check if an element is already present or not. The `find` operation in a set has a time complexity of O(log n), while in an unordered_set it has an average time complexity of O(1). Since we don't need the elements to be sorted, we can use an unordered_set instead of a set to improve the performance.

5. Avoid unnecessary rehashing of the unordered_set: In the original program, the set `s` is being rehashed for every element in the vector `v`. This can be avoided by pre-allocating the required number of buckets in the unordered_set, based on the maximum possible number of distinct elements in `v`.

6. Avoid repeated calls to `v.size()`: In the loop where the vector `v` is being processed, the size of the vector is called repeatedly using `v.size()`. This can be inefficient, especially if the size of the vector is large and the size calculation is not cached. We can calculate the size once and store it in a separate variable before the loop.

7. Avoid repeated calculations of `q - 1`: In the loop where the queries are processed, the value `q - 1` is calculated for each query. We can calculate it once before the loop and store it in a separate variable.

8. Use `'\n'` instead of `std::endl`: The `std::endl` manipulator flushes the output buffer, which can be expensive. Instead, we can use the newline character `'\n'` to output a newline without flushing the buffer.

Optimized Code:

```cpp
#include <iostream>
#include <vector>
#include <unordered_set>

void read(std::vector<int>& v) {
  for (auto& x : v)
    std::cin >> x;
}

void solve(int n, int m) {
  std::vector<int> v(n);
  read(v);
  
  std::unordered_set<int> s;
  int cont = 0;
  int size = v.size();
  
  // Pre-allocate buckets in the unordered_set
  s.reserve(size);
  
  for (int i = size - 1; i >= 0; i--) {
    if (s.find(v[i]) == s.end()) {
      s.insert(v[i]);
      cont++;
    }
    v[i] = cont;
  }
  
  int q;
  int qMinusOne;
  
  for (int i = 0; i < m; i++) {
    std::cin >> q;
    qMinusOne = q - 1;
    std::cout << v[qMinusOne] << '\n';
  }
}

int main() {
  int n, m;
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  std::cin >> n >> m;
  solve(n, m);
}
```
