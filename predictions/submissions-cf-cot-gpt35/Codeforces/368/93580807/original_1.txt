Explanation of Optimization:

1. Remove unnecessary headers: The `#include <bits/stdc++.h>` header includes a large number of standard library headers, which can slow down the compilation process. Since we are not using all of these headers in the program, it is better to include only the necessary headers.

2. Pass the vector by reference: In the `read` function, the vector `v` is passed by value. This means that a copy of the vector is made every time the function is called, which can be inefficient for large vectors. To avoid this, we can pass the vector by reference.

3. Use unordered_set instead of set: In the original program, a `set<int>` is used to store unique elements from the vector `v`. However, the `set` data structure has a logarithmic time complexity for insertion and searching. In this case, we can use an `unordered_set<int>` instead, which has an average constant time complexity for insertion and searching.

4. Avoid unnecessary usage of the `find` function: In the original program, the `find` function is used to check if an element already exists in the set `s`. This function has a logarithmic time complexity. Instead, we can use the `insert` function of the `unordered_set` to check if an element is already present in the set while inserting it. If the element is already present, the `insert` function will not insert it and return the iterator to the existing element.

5. Remove unnecessary variable: The variable `cont` is used to keep track of the number of unique elements in the vector. However, we can use the size of the set `s` to determine the number of unique elements. This eliminates the need for the `cont` variable.

6. Avoid resizing the vector: In the original program, the vector `v` is resized to the size of the set `s` in each iteration of the loop. This operation has a linear time complexity. Instead, we can initialize the vector `v` with the maximum possible size and use an index to keep track of the current position in the vector.

7. Avoid unnecessary I/O operations: In the original program, the `ios::sync_with_stdio(false)` function is called to disable the synchronization between C and C++ standard streams. However, this is not necessary as we are not mixing C and C++ I/O operations. Similarly, the `cin.tie(NULL)` and `cout.tie(NULL)` functions are not necessary as we are not using them.

8. Use a single loop for input and output: In the original program, the input and output operations are done in separate loops. We can combine these loops into a single loop to avoid redundant iterations.

Optimized Program:

```cpp
#include <iostream>
#include <vector>
#include <unordered_set>
using namespace std;

void read(vector<int>& v) {
  for (int& x : v)
    cin >> x;
}

void solve(int n, int m) {
  vector<int> v(n);
  read(v);
  unordered_set<int> s;
  vector<int> result(n);
  int index = n - 1;
  for (int i = 0; i < n; i++) {
    if (s.insert(v[i]).second) {
      s.insert(v[i]);
      result[index--] = s.size();
    }
  }
  for (int i = 0; i < m; i++) {
    int q;
    cin >> q;
    cout << result[q - 1] << endl;
  }
}

int main() {
  int n, m;
  cin >> n >> m;
  solve(n, m);
}
```