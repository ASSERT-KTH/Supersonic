#include <iostream>
#include <vector>
#include <functional>
#include <limits>

using namespace std;

template <typename T>
vector<vector<T>> divide_and_conquer(int h, int w, const function<T(int, int)> &f)
{
    const T inf = numeric_limits<T>::max() / 10;
    vector<vector<T>> dp(h, vector<T>(w, inf));
    function<void(int, int, int, int, int)> dfs = [&](int i, int l, int r, int optl, int optr) {
        if (l > r)
            return;
        int mid = (l + r) / 2, optm = -1;
        for (int j = optl; j <= min(mid, optr); ++j) {
            T cost = dp[i][j] + f(j + 1, mid);
            if (cost < dp[i + 1][mid]) {
                dp[i + 1][mid] = cost;
                optm = j;
            }
        }
        dfs(i, l, mid - 1, optl, optm);
        dfs(i, mid + 1, r, optm, optr);
    };
    for (int i = 0; i < w; ++i)
        dp[0][i] = f(0, i);
    for (int i = 1; i < h; ++i)
        for (int j = 0; j < w; ++j)
            dp[i][j] = inf;
    for (int i = 0; i < h - 1; ++i)
        dfs(i, 0, w - 1, 0, w - 1);
    return dp;
}

namespace cf438F
{
void solve()
{
    int N, K;
    cin >> N >> K;
    vector<int> A(N);
    for (int i = 0; i < N; ++i)
    {
        cin >> A[i];
        --A[i];
    }
    int L = 0, R = 0, sum = 0;
    vector<int> appear(100010);
    appear[A[0]]++;
    auto add = [&](int idx) { sum += appear[A[idx]]++; };
    auto del = [&](int idx) { sum -= --appear[A[idx]]; };
    auto f = [&](int l, int r) {
        while (L > l)
            add(--L);
        while (L < l)
            del(L++);
        while (R < r)
            add(++R);
        while (R > r)
            del(R--);
        return sum;
    };
    auto dp = divide_and_conquer(K, N, f);
    cout << dp[K - 1][N - 1] << endl;
}
} // namespace cf438F

int main()
{
    cf438F::solve();
    return 0;
}