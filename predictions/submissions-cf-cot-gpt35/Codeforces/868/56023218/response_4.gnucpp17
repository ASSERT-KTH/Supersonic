#include <iostream>
#include <vector>
#include <functional>
#include <limits>

using namespace std;

template <typename T>
vector<vector<T>> divide_and_conquer(int h, int w, const function<T(int, int)> &f) {
    const T inf = numeric_limits<T>::max() / 10;
    vector<vector<T>> dp(h, vector<T>(w, inf));
    for (int i = 0; i < w; ++i) {
        dp[0][i] = f(0, i);
    }
    for (int i = 1; i < h; ++i) {
        for (int j = 0; j < w; ++j) {
            dp[i][j] = inf;
        }
    }
    for (int i = 0; i < h - 1; ++i) {
        for (int l = 0; l < w - 1; ++l) {
            for (int r = l + 1; r < w; ++r) {
                T cost = dp[i][l] + f(l + 1, r);
                dp[i + 1][r] = min(dp[i + 1][r], cost);
            }
        }
    }
    return dp;
}

namespace cf438F {
    void solve() {
        int N, K;
        cin >> N >> K;
        vector<int> A(N);
        for (int i = 0; i < N; ++i) {
            cin >> A[i];
            --A[i];
        }
        int L = 0, R = 0, sum = 0;
        vector<int> appear(100010);
        appear[A[0]]++;
        auto add = [&](int idx) { sum += appear[A[idx]]++; };
        auto del = [&](int idx) { sum -= --appear[A[idx]]; };
        auto f = [&](int l, int r) {
            while (L > l)
                add(--L);
            while (L < l)
                del(L++);
            while (R < r)
                add(++R);
            while (R > r)
                del(R--);
            return sum;
        };
        auto dp = divide_and_conquer<int>(K, N, f);
        cout << dp[K - 1][N - 1] << endl;
    }
}

int main() {
    cf438F::solve();
    return 0;
}