#include <iostream>
#include <algorithm>
using namespace std;

const int MAX_N = 100000;
int n;
int a[MAX_N];

int maxSubArraySum(int F) {
  int max_so_far = INT_MIN, max_ending_here = 0;
  int M = -31;
  for (int i = 0; i < n; i++) {
    M = max(M, a[i]);
    max_ending_here = max_ending_here + a[i];
    if ((max_so_far < max_ending_here) and (M == F))
      max_so_far = max_ending_here;
    if (max_ending_here < 0 or M > F)
      max_ending_here = 0, M = -31;
  }
  return max_so_far;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int T = 1;
  while (T--) {
    cin >> n;
    for (int i = 0; i < n; i++) cin >> a[i];
    int R = 0;
    for (int i = -30; i < 31; i++) {
      R = max(R, (maxSubArraySum(i) - i));
    }
    cout << R << endl;
  }
  return 0;
}