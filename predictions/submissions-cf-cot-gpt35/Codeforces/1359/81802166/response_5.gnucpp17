#include <iostream>
#include <vector>
#include <algorithm>

typedef long long int lli;

lli maxSubArraySum(const std::vector<lli>& a, const lli& F) {
    lli max_so_far = std::numeric_limits<lli>::min();
    lli max_ending_here = 0;
    lli M = -31;
    for (const auto& num : a) {
        M = std::max(M, num);
        max_ending_here = std::max(max_ending_here + num, 0LL);
        if ((max_so_far < max_ending_here) && (M == F))
            max_so_far = max_ending_here;
        if (max_ending_here < 0 || M > F)
            max_ending_here = 0, M = -31;
    }
    return max_so_far;
}

int main() {
    std::ios::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);

    lli T = 1;
    while (T--) {
        lli n;
        std::cin >> n;
        std::vector<lli> a(n);
        for (auto& num : a)
            std::cin >> num;
        lli R = 0;
        for (lli i = -30; i < 31; i++) {
            R = std::max(R, maxSubArraySum(a, i) - i);
        }
        std::cout << R << std::endl;
    }

    return 0;
}