#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

int maxSubArraySum(int F, const vector<int>& a) {
    int max_so_far = INT_MIN;
    int max_ending_here = 0;
    int M = INT_MIN;
    int size = a.size();

    for (int i = 0; i < size; i++) {
        M = max(M, a[i]);
        max_ending_here = max_ending_here + a[i];
        if (max_so_far < max_ending_here && M == F) {
            max_so_far = max_ending_here;
        }
        if (max_ending_here < 0 || M > F) {
            max_ending_here = 0;
            M = INT_MIN;
        }
    }

    return max_so_far;
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int n;
    cin >> n;

    vector<int> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }

    int R = INT_MIN;
    for (int i = -30; i < 31; i++) {
        R = max(R, maxSubArraySum(i, a) - i);
    }

    cout << R << endl;

    return 0;
}