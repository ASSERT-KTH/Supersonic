#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef long long int lli;

lli maxSubArraySum(lli F, const vector<lli>& a) {
    lli max_so_far = 0, max_ending_here = 0;
    lli size = a.size();
    lli M = 0;
    for (lli i = 0; i < size; i++) {
        if (a[i] > M)
            M = a[i];
        max_ending_here = max_ending_here + a[i];
        if (max_ending_here > max_so_far && M == F)
            max_so_far = max_ending_here;
        if (max_ending_here < 0 || M > F)
            max_ending_here = 0, M = 0;
    }
    return max_so_far;
}

int main() {
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  
    lli T = 1;
    while (T--) {
        lli n;
        cin >> n;
        vector<lli> a(n);
        for (lli i = 0; i < n; i++)
            cin >> a[i];
        lli R = INT_MIN;
        for (lli i = 0; i < 31; i++) {
            R = max(R, (maxSubArraySum(i, a) - i));
        }
        cout << R << endl;
    }
  
    return 0;
}