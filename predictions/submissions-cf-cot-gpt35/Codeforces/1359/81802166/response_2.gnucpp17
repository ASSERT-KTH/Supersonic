#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int maxSubArraySum(int F, const vector<int>& a) {
    int max_so_far = 0, max_ending_here = 0;
    int n = a.size();
    int M = -31;
    for (int i = 0; i < n; i++) {
        M = max(M, a[i]);
        max_ending_here = max_ending_here + a[i];
        if ((max_so_far < max_ending_here) && (a[i] == F))
            max_so_far = max_ending_here;
        if (max_ending_here < 0 || M > F)
            max_ending_here = 0, M = -31;
    }
    return max_so_far;
}

int main() {
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; i++)
        cin >> a[i];
    int result = 0;
    for (int i = -30; i < 31; i++) {
        result = max(result, (maxSubArraySum(i, a) - i));
    }
    cout << result << endl;
    return 0;
}