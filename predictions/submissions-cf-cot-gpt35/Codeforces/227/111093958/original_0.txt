The given program reads an integer `n` followed by an array `a` of size `n`. It then reads an integer `m` and performs a loop `m` times. In each iteration, it reads an integer `x` and calculates the values of `first` and `second` based on the indices of `x` in the array `a`.

To optimize this program, we can make the following improvements:

1. Use `vector` instead of an array `a` to dynamically allocate memory.
2. Use `unordered_map` instead of an array `was` to store the indices of the elements in the array `a`.
3. Use `reserve` function to preallocate memory for the vector `a` and unordered map `was` to avoid unnecessary reallocations.
4. Avoid repeated calculations of `n` and `was[x]` inside the loop.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

#define int long long

int main() {
  ios_base::sync_with_stdio(0);
  
  int n, m;
  cin >> n;
  
  vector<int> a;
  a.reserve(n);
  
  for (int i = 0; i < n; ++i) {
    int x;
    cin >> x;
    a.push_back(x);
  }
  
  unordered_map<int, int> was;
  was.reserve(n);
  
  for (int i = 0; i < n; ++i) {
    was[a[i]] = i;
  }
  
  cin >> m;
  
  int first = 0, second = 0;
  
  while (m--) {
    int x;
    cin >> x;
    
    int indices = was[x];
    first += indices + 1;
    second += n - indices;
  }
  
  cout << first << ' ' << second;

  return 0;
}
```

This optimized program improves the memory usage by using `vector` instead of an array and `unordered_map` instead of a fixed-size array. It also reduces the number of calculations inside the loop by storing the value of `was[x]` in a separate variable.