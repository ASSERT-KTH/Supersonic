The given program can be optimized by using a hash table instead of an array to store the indices of the elements in `a[]`. By using a hash table, we can reduce the time complexity of finding the index of an element from O(n) to O(1).

Here's the step-by-step optimization:

1. Remove the unnecessary `#define int long long` statement. It is not used in the code.

2. Remove the `using namespace std;` statement. It is a good practice to avoid using this statement to prevent naming conflicts.

3. Include the necessary header file `<unordered_map>` to use the hash table.

4. Replace the array `was[100001]` with a hash table `unordered_map<int, int> was`.

5. Change the loop for storing the indices of `a[]` elements in the hash table `was`. Instead of iterating from 0 to n-1, iterate from n-1 to 0 and store the index of each element in `was`.

6. Replace the `cin` statement for reading the input `m` with `int m; cin >> m;`. Declare `m` as an `int` variable before reading its value.

7. Replace the loop for calculating `first` and `second`. Instead of using a while loop with `m--`, use a for loop from 0 to m-1. Read the input `x` and calculate `first` and `second` using the hash table `was`.

8. Remove the `ios_base::sync_with_stdio(0);` statement. It is not necessary for this program.

Here's the optimized program:

```cpp
#include <iostream>
#include <unordered_map>

int main() {
  int n;
  std::cin >> n;
  
  int a[100001];
  for (int i = 0; i < n; ++i)
    std::cin >> a[i];
  
  std::unordered_map<int, int> was;
  for (int i = n-1; i >= 0; --i)
    was[a[i]] = i;
  
  int m;
  std::cin >> m;
  
  int first = 0, second = 0;
  for (int i = 0; i < m; ++i) {
    int x;
    std::cin >> x;
    first += was[x] + 1;
    second += n - was[x];
  }
  
  std::cout << first << ' ' << second;
  
  return 0;
}
```

This optimized program uses a hash table to store the indices of the elements in `a[]`, resulting in faster index lookup and improved performance.