The given program reads an input array `a` of size `n`, and then for each element `x` in the input, it calculates two values `first` and `second` based on the positions of `x` in `a`. The program then outputs the values of `first` and `second`.

To optimize this program, we can eliminate the need for the `was` array by using a `map` data structure to store the positions of the elements in `a`. This will reduce the memory usage and the time complexity of the program.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;
#define int long long
int n, m, a[100001];
main() {
  ios_base::sync_with_stdio(0);
  cin >> n;
  unordered_map<int, int> was;
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
    was[a[i]] = i;
  }
  cin >> m;
  int first = 0, second = 0;
  while (m--) {
    int x;
    cin >> x;
    first += was[x] + 1;
    second += n - was[x];
  }
  cout << first << ' ' << second;
}
```

Explanation:
1. We include the `<unordered_map>` header to use the `unordered_map` data structure, which provides a mapping between keys and values.
2. We replace the `was` array with an `unordered_map<int, int>` named `was` to store the positions of the elements in `a`.
3. Inside the first `for` loop, we update the `was` map by assigning the position `i` to the key `a[i]`.
4. The rest of the program remains the same.

By using the `unordered_map` data structure, we eliminate the need for the `was` array, which reduces the memory usage and improves the time complexity of the program.