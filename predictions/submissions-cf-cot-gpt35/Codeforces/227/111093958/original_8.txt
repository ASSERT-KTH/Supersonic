The given program reads an array of integers, `a`, of size `n` and then reads `m` integers. For each integer `x`, it calculates two values: `first` and `second`.

The value of `first` is calculated by adding the index of `x` in the array `a` plus 1. The value of `second` is calculated by adding `n` minus the index of `x` in the array `a`.

To optimize this program, we can eliminate the need for the `was` array by using a hashmap or unordered_map data structure. This will allow us to directly access the index of `x` in constant time.

Additionally, we can remove the `ios_base::sync_with_stdio(0)` line as it is not necessary for this program.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;

int main() {
  int n, m;
  cin >> n;
  
  unordered_map<int, int> indexMap;
  for (int i = 0; i < n; ++i) {
    int x;
    cin >> x;
    indexMap[x] = i;
  }
  
  cin >> m;
  int first = 0, second = 0;
  while (m--) {
    int x;
    cin >> x;
    first += indexMap[x] + 1;
    second += n - indexMap[x];
  }
  
  cout << first << ' ' << second;
  return 0;
}
```

This optimized program eliminates the need for the `was` array and uses an unordered_map to store the index of each element. This allows for constant time access to the index of `x` when calculating `first` and `second`.