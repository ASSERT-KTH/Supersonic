The given program has a time complexity of O(n + m), where n is the number of elements in the array `a` and m is the number of elements to be queried.

To optimize the program, we can modify the second loop where we calculate the values of `first` and `second`. Instead of iterating over the entire array `a` to find the index of each queried element, we can pre-calculate the indices using a single loop before the second loop.

Additionally, we can optimize the space usage by using a smaller array `was` to store the indices. Since the maximum value of `a[i]` is not given, we can use a map or unordered_map to store the indices instead of an array with a fixed size.

Here's the optimized program:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;
#define int long long

int n, m, a[100001];
unordered_map<int, int> was;

int main() {
  ios_base::sync_with_stdio(0);
  cin >> n;
  for (int i = 0; i < n; ++i)
    cin >> a[i];
  for (int i = 0; i < n; ++i)
    was[a[i]] = i;
  cin >> m;
  int first = 0, second = 0;
  while (m--) {
    int x;
    cin >> x;
    first += was[x] + 1;
    second += n - was[x];
  }
  cout << first << ' ' << second;
}
```

In this optimized program, we use `unordered_map<int, int> was` to store the indices of the elements in `a`. We initialize `was[a[i]] = i` inside the first loop to calculate the indices.

This modification reduces the time complexity of the second loop from O(n) to O(1), resulting in an overall time complexity of O(n). Additionally, the space usage is optimized by using a map or unordered_map instead of a fixed-size array.