Step 1: Remove unnecessary includes and namespace declaration

The `<iostream>` header is the only necessary inclusion for this program. We can remove the `using namespace std` statement as well to avoid potential naming conflicts.

```cpp
#include <iostream>
```

Step 2: Optimize integer type

The program uses `int` for variables `n`, `m`, and `x`. However, the given program states that `int` should be replaced with `long long`. We should change the variable types accordingly.

```cpp
long long n, m, a[100001], was[100001];
```

Step 3: Optimize input/output streams

The given program uses `cin` and `cout` for input/output operations. However, using the `sync_with_stdio(0)` function may improve the performance. We should modify the code to use `scanf` and `printf` instead.

```cpp
#include <cstdio>

long long n, m, a[100001], was[100001];

int main() {
  scanf("%lld", &n);
  for (long long i = 0; i < n; ++i)
    scanf("%lld", &a[i]);
  for (long long i = 0; i < n; ++i)
    was[a[i]] = i;
  scanf("%lld", &m);
  long long first = 0, second = 0;
  while (m--) {
    long long x;
    scanf("%lld", &x);
    first += was[x] + 1;
    second += n - was[x];
  }
  printf("%lld %lld", first, second);
  return 0;
}
```

Optimized Program:

```cpp
#include <cstdio>

long long n, m, a[100001], was[100001];

int main() {
  scanf("%lld", &n);
  for (long long i = 0; i < n; ++i)
    scanf("%lld", &a[i]);
  for (long long i = 0; i < n; ++i)
    was[a[i]] = i;
  scanf("%lld", &m);
  long long first = 0, second = 0;
  while (m--) {
    long long x;
    scanf("%lld", &x);
    first += was[x] + 1;
    second += n - was[x];
  }
  printf("%lld %lld", first, second);
  return 0;
}
```