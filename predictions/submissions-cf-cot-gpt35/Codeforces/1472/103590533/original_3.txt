The given program has a lot of unnecessary code and includes unnecessary headers. It also has a lot of unnecessary macros that are not used in the program. These macros increase the code size and make it difficult to understand.

To optimize the program, we can make the following modifications:
1. Remove unnecessary headers.
2. Remove unnecessary macros.
3. Remove unnecessary functions and variables.
4. Optimize the loop iterations.
5. Optimize the data structures used.

Here is the optimized program:

```
#include <iostream>
#include <vector>
#include <tuple>
#include <set>
#include <algorithm>

using namespace std;

void solve() {
    int t;
    cin >> t;
    while (t--) {
        int n, x, y;
        cin >> n;
        set<tuple<int, int, int>> a;
        for (int i = 0; i < n; i++) {
            cin >> x >> y;
            a.insert(make_tuple(max(x, y), min(x, y), i));
        }
        tuple<int, int, int> prev = *(a.begin());
        tuple<int, int, int> best = prev;
        vector<int> res(n);
        for (const auto& person : a) {
            int h, w, i;
            tie(h, w, i) = person;
            if (get<0>(prev) == h) {
                if (get<1>(best) < w && get<0>(best) < h)
                    res[i] = get<2>(best) + 1;
                else {
                    res[i] = -1;
                }
            } else {
                if (get<1>(best) > get<1>(prev))
                    best = prev;
                if (get<1>(best) < w && get<0>(best) < h)
                    res[i] = get<2>(best) + 1;
                else
                    res[i] = -1;
                prev = person;
            }
        }
        for (const auto& p : res)
            cout << p << " ";
        cout << endl;
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    solve();
    return 0;
}
```

This optimized program removes unnecessary code and uses more efficient data structures. It also removes unnecessary macros and functions, making the code cleaner and easier to understand.