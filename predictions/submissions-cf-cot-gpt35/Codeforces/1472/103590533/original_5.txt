Optimization steps:

1. Remove unnecessary header file inclusion: The program includes the `<bits/stdc++.h>` header file, which is not a standard C++ header file. It is recommended to include only the necessary standard header files. In this case, we can remove the `<bits/stdc++.h>` header file inclusion.

2. Remove unnecessary pragmas: The program includes pragmas `#pragma GCC optimize("Ofast")` and `#pragma GCC target("avx,avx2,fma")`. These pragmas are compiler-specific and may not have any significant impact on the performance of the program. We can remove these pragmas.

3. Remove unnecessary macros: The program defines several macros that are not used in the code. We can remove these macros to simplify the code.

4. Simplify data types: The program uses different data types such as `ll`, `pll`, `pi`, `tll`, etc. These data types are not necessary and can be replaced with their respective standard data types (`long long`, `pair<long long, long long>`, `pair<int, int>`, `tuple<long long, long long, long long>`, etc.).

5. Remove unnecessary container definitions: The program defines several container types such as `vi`, `vpll`, `vtll`, etc. These container types are not necessary and can be replaced with their respective standard container types (`vector<int>`, `vector<pair<long long, long long>>`, `vector<tuple<long long, long long, long long>>`, etc.).

6. Simplify input and output functions: The program defines macros for initializing vectors from input and printing vectors. These macros can be simplified and replaced with standard input and output functions.

7. Simplify loop macros: The program defines macros for looping over indices. These macros can be simplified and replaced with standard loop constructs.

8. Remove unnecessary file I/O function: The program defines a `fileio()` function that is not used in the code. We can remove this function.

9. Simplify output function: The program defines an `output()` function that outputs the contents of a multiset. This function can be simplified by directly iterating over the multiset and printing its elements.

10. Simplify the main function: The `main()` function can be simplified by removing the unnecessary `fastio` macro and directly calling the `solve()` function.

Optimized code:

```cpp
#include <iostream>
#include <vector>
#include <set>
#include <tuple>
#include <algorithm>

using namespace std;

void solve() {
  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    multiset<tuple<int, int, int>> a;
    for (int i = 0; i < n; i++) {
      int x, y;
      cin >> x >> y;
      a.insert(make_tuple(max(x, y), min(x, y), i));
    }
    auto prev = (*a.begin());
    auto best = prev;
    vector<int> res(n);
    for (const auto &person : a) {
      int h, w, i;
      tie(h, w, i) = person;
      if (get<0>(prev) == h) {
        if (get<1>(best) < w && get<0>(best) < h)
          res[i] = get<2>(best) + 1;
        else {
          res[i] = -1;
        }
      } else {
        if (get<1>(best) > get<1>(prev))
          best = prev;
        if (get<1>(best) < w && get<0>(best) < h)
          res[i] = get<2>(best) + 1;
        else
          res[i] = -1;
        prev = person;
      }
    }
    for (auto &p : res)
      cout << p << " ";
    cout << endl;
  }
}

int main() {
  solve();
  return 0;
}
```
