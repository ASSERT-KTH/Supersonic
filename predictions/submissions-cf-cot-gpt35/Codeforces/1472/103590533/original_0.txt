The given program has several areas that can be optimized:

1. Remove unnecessary header file inclusion: The program includes the `<bits/stdc++.h>` header file, which is a non-standard header file and includes a large number of other header files. This can increase the compilation time and memory usage. It is better to include only the necessary header files.

2. Remove unnecessary preprocessor directives: The program has several unnecessary preprocessor directives, such as `#pragma GCC optimize("Ofast")` and `#pragma GCC target("avx,avx2,fma")`. These directives are compiler-specific optimizations and may not have a significant impact on the program's performance. It is better to remove them.

3. Remove unused macros: The program has several macros that are not used in the code, such as `fastio`, `endl`, `watch`, `pairout`, etc. These macros are not necessary and can be removed to improve code readability.

4. Optimize input/output operations: The program uses `cin` and `cout` for input/output operations, which can be slow for large inputs/outputs. It is better to use faster input/output methods, such as `scanf` and `printf`.

5. Simplify data structures: The program uses complex data structures, such as tuples, sets, multisets, etc., which may not be necessary for the given problem. It is better to use simpler data structures, such as arrays or vectors, to improve performance.

6. Avoid unnecessary sorting: The program uses the `sortall` macro, which sorts the entire array/vector. However, sorting may not be necessary for the given problem. It is better to remove the sorting operation if it is not required.

7. Avoid unnecessary operations inside loops: The program performs some unnecessary operations inside loops, such as re-assigning the `prev` and `best` variables. These operations can be moved outside the loop to improve performance.

8. Remove unused functions: The program defines the `output` and `fileio` functions, but they are not used in the code. These functions can be removed to improve code readability.

Based on these optimizations, the optimized program is as follows: