Step 1: Remove unnecessary headers

The program includes the `<bits/stdc++.h>` header, which includes a lot of unnecessary headers. We can remove this line and include only the necessary headers.

```cpp
#include <iostream>
#include <vector>
#include <set>
```

Step 2: Remove unnecessary macros

The program defines a lot of macros that are not used. We can remove these macros to simplify the code.

```cpp
#define endl "\n"
#define ll long long
#define pll pair<ll, ll>
#define vi vector<int>
#define vll vector<ll>
#define ms(type) multiset<type>
#define rep(i, a, b) for (ll i = a; i < b; i++)
```

Step 3: Remove unused functions

The program defines a function `fileio()` which is not used. We can remove this function.

Step 4: Remove unnecessary typedefs

The program defines some typedefs that are not used. We can remove these typedefs.

```cpp
#define type tll
```

Step 5: Remove unnecessary preprocessor directives

The program includes two preprocessor directives `#pragma GCC optimize("Ofast")` and `#pragma GCC target("avx,avx2,fma")`. These directives are compiler-specific and may not have any effect on the program. We can remove these directives.

Step 6: Simplify input/output

The program uses `cout` and `cin` for input/output, which can be slower than `printf` and `scanf`. We can replace `cout` and `cin` with `printf` and `scanf` for faster I/O.

Step 7: Optimize the algorithm

The main algorithm of the program can be optimized by removing unnecessary calculations and using a more efficient data structure. We can use a `multiset` instead of a `set` to store the people, so that we can find the best person in O(1) time. We can also remove the unnecessary sorting of the `res` array.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <set>
using namespace std;

void solve() {
  int t, n, x, y;
  scanf("%d", &t);
  while (t--) {
    scanf("%d", &n);
    multiset<tuple<int, int, int>> a;
    for (int i = 0; i < n; i++) {
      scanf("%d %d", &x, &y);
      a.insert(make_tuple(max(x, y), min(x, y), i));
    }
    auto prev = (*a.begin());
    auto best = prev;
    int res[n];
    for (const auto &person : a) {
      int h, w, i;
      tie(h, w, i) = person;
      if (get<0>(prev) == h) {
        if (get<1>(best) < w && get<0>(best) < h)
          res[i] = get<2>(best) + 1;
        else {
          res[i] = -1;
        }
      } else {
        if (get<1>(best) > get<1>(prev))
          best = prev;
        if (get<1>(best) < w && get<0>(best) < h)
          res[i] = get<2>(best) + 1;
        else
          res[i] = -1;
        prev = person;
      }
    }
    for (int i = 0; i < n; i++) {
      printf("%d ", res[i]);
    }
    printf("\n");
  }
}

int main() {
  solve();
  return 0;
}
```