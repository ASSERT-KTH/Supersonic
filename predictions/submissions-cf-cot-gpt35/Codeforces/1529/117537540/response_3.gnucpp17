#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const long long INF = 1e18;

int N, M;
vector<vector<int>> matrix;
vector<long long> cost;
vector<int> marked;

void dijkstra(int start) {
    cost.assign(N, INF);
    marked.assign(N, 0);
    cost[start] = 0;
    
    priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<pair<long long, int>>> pq;
    pq.push({0, start});
    
    while (!pq.empty()) {
        int cur = pq.top().second;
        pq.pop();
        
        if (marked[cur]) continue;
        marked[cur] = 1;
        
        for (int j = 0; j < N; j++) {
            int price = matrix[cur][j];
            if (cost[cur] + price < cost[j]) {
                cost[j] = cost[cur] + price;
                pq.push({cost[j], j});
            }
        }
    }
    
    for (int i = 0; i < N; i++) {
        if (i == start)
            cout << 0 << " ";
        else
            cout << cost[i] << " ";
    }
    cout << '\n';
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    cin >> N >> M;
    
    matrix.assign(N, vector<int>(N, INF));
    
    for (int i = 0; i < M; i++) {
        int a, b, c;
        cin >> a >> b >> c;
        matrix[a][b] = c;
    }
    
    for (int i = 0; i < N; i++) {
        dijkstra(i);
    }
    
    return 0;
}