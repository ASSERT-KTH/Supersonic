#include <iostream>
#include <vector>

const long long MOD = 1e9 + 7;

void dijkstra(int start, int N, const std::vector<std::vector<int>>& matrix) {
  std::vector<long long> cost(N, 1e18);
  std::vector<bool> marked(N, false);
  
  for (int j = 0; j < N; j++) {
    cost[j] = matrix[start][j];
  }
  
  while (true) {
    int cur = -1;
    for (int j = 0; j < N; j++) {
      if (!marked[j] && (cur == -1 || cost[j] < cost[cur])) {
        cur = j;
      }
    }
    
    if (cur == -1) {
      break;
    }
    
    marked[cur] = true;
    
    for (int j = 0; j < N; j++) {
      int next = (cur + j) % N;
      if (cost[next] > cost[cur] + j) {
        cost[next] = cost[cur] + j;
      }
    }
    
    for (int j = 0; j < N; j++) {
      int next = ((j + cost[cur]) % N);
      if (cost[cur] + matrix[cur][j] < cost[next]) {
        cost[next] = cost[cur] + matrix[cur][j];
      }
    }
  }
  
  for (int i = 0; i < N; i++) {
    if (i == start) {
      std::cout << 0 << " ";
    } else {
      std::cout << cost[i] << " ";
    }
  }
  
  std::cout << std::endl;
}

int main() {
  int N, M;
  std::cin >> N >> M;
  
  std::vector<std::vector<int>> matrix(N, std::vector<int>(N, 1 << 30));
  
  for (int i = 0; i < M; i++) {
    int a, b, c;
    std::cin >> a >> b >> c;
    matrix[a][b] = c;
  }
  
  for (int i = 0; i < N; i++) {
    dijkstra(i, N, matrix);
  }
  
  return 0;
}