#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;

const long long INF = 1e18;
const int MAXN = 600;

int N, M;
int matrix[MAXN][MAXN];

void dijkstra(int start) {
  long long cost[MAXN];
  bool marked[MAXN];
  memset(cost, INF, sizeof(cost));
  memset(marked, false, sizeof(marked));
  
  cost[start] = 0;
  priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<pair<long long, int>>> pq;
  pq.push({0, start});

  while (!pq.empty()) {
    int cur = pq.top().second;
    pq.pop();

    if (marked[cur]) continue;
    marked[cur] = true;

    for (int j = 0; j < N; j++) {
      int price = matrix[cur][j];
      if (cost[cur] + price < cost[j]) {
        cost[j] = cost[cur] + price;
        pq.push({cost[j], j});
      }
    }
  }

  for (int i = 0; i < N; i++) {
    if (i == start)
      cout << 0 << " ";
    else
      cout << cost[i] << " ";
  }
  cout << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  cin >> N >> M;

  memset(matrix, 0x3f, sizeof(matrix));

  for (int i = 0; i < M; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    matrix[a][b] = c;
  }

  for (int i = 0; i < N; i++) {
    dijkstra(i);
  }

  return 0;
}