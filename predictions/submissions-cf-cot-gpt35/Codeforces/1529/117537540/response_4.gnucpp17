#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int N, M;
const int INF = 1 << 30;
vector<vector<int>> matrix;

void dijkstra(int start) {
  vector<int> cost(N, INF);
  vector<bool> marked(N, false);
  cost[start] = 0;
  
  priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
  pq.push({0, start});
  
  while (!pq.empty()) {
    int cur = pq.top().second;
    pq.pop();
    
    if (marked[cur])
      continue;
    
    marked[cur] = true;
    
    for (int j = 0; j < N; j++) {
      int price = matrix[cur][j];
      if (cost[cur] + price < cost[j]) {
        cost[j] = cost[cur] + price;
        pq.push({cost[j], j});
      }
    }
  }
  
  for (int i = 0; i < N; i++) {
    if (i == start)
      cout << 0 << " ";
    else
      cout << cost[i] << " ";
  }
  cout << '\n';
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  cin >> N >> M;
  
  matrix.assign(N, vector<int>(N, INF));
  
  for (int i = 0; i < M; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    matrix[a][b] = c;
  }
  
  for (int i = 0; i < N; i++) {
    dijkstra(i);
  }
  
  return 0;
}