#include <iostream>
#include <vector>
using namespace std;

int N, M;
vector<vector<int>> matrix;

void dijkstra(int start) {
  vector<long long> cost(N, 1e18);
  vector<bool> marked(N, false);
  cost[start] = 0;

  for (int i = 0; i < N; i++) {
    int cur = -1;
    for (int j = 0; j < N; j++) {
      if (!marked[j] && (cur == -1 || cost[j] < cost[cur]))
        cur = j;
    }
    marked[cur] = true;

    for (int j = 0; j < N; j++) {
      int price = matrix[cur][j];
      if (cost[cur] + price < cost[j])
        cost[j] = cost[cur] + price;
    }
  }

  for (int i = 0; i < N; i++) {
    if (i == start)
      printf("0 ");
    else
      printf("%lld ", cost[i]);
  }
  printf("\n");
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);

  scanf("%d %d", &N, &M);

  matrix.assign(N, vector<int>(N, 1 << 30));

  for (int i = 0; i < M; i++) {
    int a, b, c;
    scanf("%d %d %d", &a, &b, &c);
    matrix[a][b] = c;
  }

  for (int i = 0; i < N; i++) {
    dijkstra(i);
  }

  return 0;
}