#include <iostream>
#include <vector>

using namespace std;

int N, M;
vector<vector<int>> matrix;

void dijisktra(int start) {
  vector<long long> cost(N, 1e18);
  vector<bool> marked(N, false);
  cost[start] = 0;

  while (true) {
    int cur = -1;
    for (int j = 0; j < N; j++) {
      if (!marked[j] && (cur == -1 || cost[cur] > cost[j])) {
        cur = j;
      }
    }
    if (cur == -1)
      break;
    marked[cur] = true;

    int cur_cost = cost[cur];
    for (int j = 0; j < N; j++) {
      int next = (cur + j) % N;
      if (cost[next] > cur_cost + j) {
        cost[next] = cur_cost + j;
      }
    }

    for (int j = 0; j < N; j++) {
      int next = ((j + cur_cost) % N);
      int price = matrix[cur][j];
      if (cost[next] > cur_cost + price) {
        cost[next] = cur_cost + price;
      }
    }
  }

  stringstream output;
  for (int i = 0; i < N; i++) {
    if (i == start)
      output << 0 << " ";
    else
      output << cost[i] << " ";
  }
  output << endl;
  cout << output.str();
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  cin >> N >> M;
  matrix.assign(N, vector<int>(N, 1 << 30));

  for (int i = 0; i < M; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    matrix[a][b] = c;
  }

  for (int i = 0; i < N; i++) {
    dijisktra(i);
  }

  return 0;
}