#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

constexpr long long MOD = 1e9 + 7;

void setIO(string name, int submit) {
  if (submit) {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    freopen((name + ".in").c_str(), "r", stdin);
    freopen((name + ".out").c_str(), "w", stdout);
  } else {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
  }
}

void dijkstra(int start, const vector<vector<int>>& matrix, int N) {
  vector<long long> cost;
  cost.reserve(N);
  cost.assign(N, 1e18);
  
  vector<bool> marked(N);
  
  for (int j = 0; j < N; j++) {
    if (cost[j] > matrix[start][j]) {
      cost[j] = matrix[start][j];
    }
  }
  
  while (true) {
    int cur = -1;
    
    for (int j = 0; j < N; j++) {
      if (!marked[j] && (cur == -1 || cost[cur] > cost[j])) {
        cur = j;
      }
    }
    
    if (cur == -1) {
      break;
    }
    
    marked[cur] = true;
    int cur_cost = cost[cur];
    
    for (int j = 0; j < N; j++) {
      int new_cost = cur_cost + j;
      int idx = (cur + j) % N;
      
      if (cost[idx] > new_cost) {
        cost[idx] = new_cost;
      }
    }
    
    for (int j = 0; j < N; j++) {
      int price = matrix[cur][j];
      int idx = ((j + cur_cost) % N);
      
      if (cost[idx] > cur_cost + price) {
        cost[idx] = cur_cost + price;
      }
    }
  }
  
  for (int i = 0; i < N; i++) {
    if (i == start) {
      cout << 0 << ' ';
    } else {
      cout << cost[i] << ' ';
    }
  }
  
  cout << '\n';
}

int main() {
  setIO("", 0);
  
  int N, M;
  cin >> N >> M;
  
  vector<vector<int>> matrix(N, vector<int>(N, 1 << 30));
  
  for (int i = 0; i < M; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    matrix[a][b] = c;
  }
  
  for (int i = 0; i < N; i++) {
    dijkstra(i, matrix, N);
  }
  
  return 0;
}