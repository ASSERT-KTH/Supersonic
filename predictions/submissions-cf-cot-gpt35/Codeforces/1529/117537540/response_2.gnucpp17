#include <iostream>
#include <vector>
#include <queue>

constexpr int INF = 1e9 + 7;

void dijkstra(const std::vector<std::vector<int>>& graph, int start, std::vector<int>& distances) {
    int N = graph.size();
    distances.assign(N, INF);
    distances[start] = 0;

    std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, std::greater<std::pair<int, int>>> pq;
    pq.push({0, start});

    while (!pq.empty()) {
        int cost = pq.top().first;
        int cur = pq.top().second;
        pq.pop();

        if (cost > distances[cur]) {
            continue;
        }

        for (int neighbor = 0; neighbor < N; ++neighbor) {
            int new_cost = cost + graph[cur][neighbor];
            if (new_cost < distances[neighbor]) {
                distances[neighbor] = new_cost;
                pq.push({new_cost, neighbor});
            }
        }
    }
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);

    int N, M;
    std::cin >> N >> M;

    std::vector<std::vector<int>> graph(N, std::vector<int>(N, INF));
    for (int i = 0; i < M; ++i) {
        int a, b, c;
        std::cin >> a >> b >> c;
        graph[a][b] = c;
    }

    for (int i = 0; i < N; ++i) {
        std::vector<int> distances;
        dijkstra(graph, i, distances);

        for (int j = 0; j < N; ++j) {
            if (i == j) {
                std::cout << 0 << ' ';
            } else {
                std::cout << distances[j] << ' ';
            }
        }
        std::cout << '\n';
    }

    return 0;
}