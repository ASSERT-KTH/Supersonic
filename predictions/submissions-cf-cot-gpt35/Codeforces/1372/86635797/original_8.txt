The given program is using some unnecessary macros and includes a lot of unnecessary libraries. It also has some unnecessary loops and conditions that can be optimized.

Here are the steps to optimize the program:

1. Remove unnecessary includes: The program includes the `<bits/stdc++.h>` header file, which is not recommended. Instead, include only the necessary header files that are actually used in the program.

2. Remove unnecessary macros: The program includes a lot of unnecessary macros that are not used. Remove these macros to simplify the code.

3. Remove unnecessary loops and conditions: The program has a loop that checks if the elements of the array `a` are in order. This loop can be removed as it is not needed. Similarly, the program has unnecessary conditions to check the values of `cng` and `rng[0]`. These conditions can also be removed.

4. Replace `endl` with `'\n'`: The program uses `endl` to print a new line. However, `endl` flushes the output buffer, which can be costly in terms of performance. Replace `endl` with `'\n'` to improve the performance.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int T;
  cin >> T;

  while (T--) {
    int n;
    cin >> n;

    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
      cin >> a[i];
    }

    bool fg = false;
    vector<bool> rng(n, false);
    for (int i = 0; i < n; ++i) {
      if (a[i] != (i + 1)) {
        rng[i] = true;
      }
    }

    int cng = 0;
    for (int i = 0; i < n - 1; ++i) {
      if (rng[i] != rng[i + 1]) {
        cng++;
      }
    }

    if (cng <= 2 && (rng[0] == false || rng[n - 1] == false)) {
      cout << 1 << '\n';
    } else {
      cout << 2 << '\n';
    }
  }

  return 0;
}
```

By following these optimization steps, we have simplified the code and removed unnecessary parts to improve the running time and memory usage of the program.