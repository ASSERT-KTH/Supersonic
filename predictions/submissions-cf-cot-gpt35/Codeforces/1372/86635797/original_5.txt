Step 1: Remove unnecessary includes and macros

The program includes the entire `bits/stdc++.h` library, which is not necessary and can slow down the compilation process. We should include only the necessary headers.

The macros defined in the program (`endl`, `fr`, `frr`, `rfrr`, `watch`, `pb`, `pf`, `mpr`, `in`, `umap`, `uset`, `vin`, `ff`, `ss`, `all`, `sz`, `prv`, `debv`, `min3`, `max3`, `MOD`, `fastio`) are not used in the program. We should remove them to make the code cleaner.

Step 2: Optimize the loop to check for range changes

The program currently uses a loop to iterate over the array and check if each element is in the correct position. We can optimize this loop by comparing the array element directly with its expected value, instead of computing the index and checking for inequality. This will eliminate the need for the `rng` vector and reduce the number of comparisons.

Step 3: Simplify the conditionals

The program has multiple conditional statements to determine the output based on the number of range changes (`cng`) and the values of the first and last elements of the array (`rng[0]` and `rng[n-1]`). We can simplify these conditionals to reduce the number of comparisons.

Step 4: Remove unnecessary output statements

The program prints the output for each test case immediately after it is computed. We can remove the `endl` statements and store the output in a separate vector. Then, we can print the entire output vector after processing all the test cases.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int T;
    cin >> T;

    vector<int> output;

    while (T--) {
        int n;
        cin >> n;
        vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            cin >> a[i];
        }

        bool fg = false;
        int cng = 0;

        for (int i = 0; i < n; ++i) {
            if (a[i] != (i + 1)) {
                fg = true;
                break;
            }
        }

        if (!fg) {
            output.push_back(0);
        } else {
            for (int i = 0; i < n - 1; ++i) {
                if (a[i] != a[i + 1]) {
                    cng++;
                }
            }

            if (cng == 0) {
                output.push_back(1);
            } else if (cng <= 2 && (a[0] == 1 || a[n - 1] == n)) {
                output.push_back(1);
            } else {
                output.push_back(2);
            }
        }
    }

    for (int i = 0; i < output.size(); ++i) {
        cout << output[i] << endl;
    }

    return 0;
}
```