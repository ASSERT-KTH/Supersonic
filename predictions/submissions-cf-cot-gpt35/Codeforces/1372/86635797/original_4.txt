The given C++ program can be optimized in the following steps:

1. Remove unnecessary header file inclusion: The `bits/stdc++.h` header file includes a large number of standard C++ headers, which can slow down the compilation process. Instead, include only the necessary headers for the program.

2. Remove unnecessary macros: The program contains several macros that are not used. Removing these macros will simplify the code and improve readability.

3. Avoid unnecessary vector initialization: The program initializes a vector `rng` with `n` elements, all set to `0`. However, this initialization is not necessary because the subsequent loop will overwrite these values. Removing this initialization will save memory and improve performance.

4. Optimize loop conditions: The program uses a loop to check if the elements of the array `a` are in the correct order. However, this loop can be optimized to check for the condition in a more efficient way.

5. Optimize output statements: The program uses multiple `cout` statements to output the results. Instead, we can store the results in a vector and print them at the end, reducing the number of output statements.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  int T;
  cin >> T;

  vector<int> results;
  while (T--) {
    int n;
    cin >> n;

    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
      cin >> a[i];
    }

    bool increasing = true;
    bool decreasing = true;

    for (int i = 0; i < n; ++i) {
      if (a[i] != (i + 1)) {
        increasing = false;
      }

      if (a[i] != (n - i)) {
        decreasing = false;
      }
    }

    if (increasing || decreasing) {
      results.push_back(0);
    } else if (a[0] == 1 || a[n - 1] == n) {
      results.push_back(1);
    } else {
      results.push_back(2);
    }
  }

  for (int i = 0; i < results.size(); ++i) {
    cout << results[i] << endl;
  }

  return 0;
}
```

Explanation of optimizations:

1. Removed unnecessary header file inclusion: The program now includes only the necessary headers `iostream` and `vector`.

2. Removed unnecessary macros: The program no longer uses macros like `endl`, `fr`, `frr`, etc., as they are not needed.

3. Avoided unnecessary vector initialization: The vector `rng` is no longer initialized with `n` elements set to `0`, as the subsequent loop overwrites these values.

4. Optimized loop conditions: Instead of using a separate vector `rng` to check if the elements are in the correct order, the program now uses two boolean variables `increasing` and `decreasing` to check for the condition more efficiently.

5. Optimized output statements: The results are stored in a vector `results` and printed at the end using a single loop, instead of multiple `cout` statements.