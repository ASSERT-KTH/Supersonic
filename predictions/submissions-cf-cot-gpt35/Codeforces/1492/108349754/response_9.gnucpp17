#include <iostream>
#include <unordered_map>
using namespace std;

const int maxn = 200000 + 5;
int pos[maxn];
int pos2[maxn];

int main() {
  int n, m;
  string s, t;
  cin >> n >> m >> s >> t;

  unordered_map<char, vector<int>> char_positions;
  for (int i = 0; i < n; i++) {
    char_positions[s[i]].push_back(i);
  }

  int p1 = 0, p2 = 0;
  while (p1 < m) {
    char c = t[p1];
    if (char_positions.count(c) == 0) {
      cout << 0;
      return 0;
    }
    vector<int>& positions = char_positions[c];
    while (p2 < positions.size() && positions[p2] < p1) {
      p2++;
    }
    if (p2 == positions.size()) {
      cout << 0;
      return 0;
    }
    pos[p1++] = positions[p2++];
  }

  char_positions.clear();
  for (int i = n - 1; i >= 0; i--) {
    char_positions[s[i]].push_back(i);
  }

  p1 = m - 1, p2 = 0;
  while (p1 >= 0) {
    char c = t[p1];
    if (char_positions.count(c) == 0) {
      cout << 0;
      return 0;
    }
    vector<int>& positions = char_positions[c];
    while (p2 < positions.size() && positions[p2] > p1) {
      p2++;
    }
    if (p2 == positions.size()) {
      cout << 0;
      return 0;
    }
    pos2[p1--] = positions[p2++];
  }

  int max_diff = 0;
  for (int i = 0; i < m - 1; ++i) {
    max_diff = max(max_diff, pos2[i + 1] - pos[i]);
  }
  cout << max_diff;

  return 0;
}