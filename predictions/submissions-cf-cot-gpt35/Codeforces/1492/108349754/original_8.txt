To optimize the given program, we can eliminate the need for the `pos` and `pos2` arrays and the second loop. 

Here's the step-by-step optimization:

1. Remove the `pos` and `pos2` arrays as they are not needed. Instead, we can calculate the maximum distance between matching characters on the fly.

2. Initialize `ans` to 0 before the first loop.

3. In the first loop, keep track of the maximum distance between matching characters using a variable `maxDist`.

4. Update `ans` inside the loop by comparing it with `maxDist`.

5. Finally, print `ans` as the output.

Here's the optimized program:

```c++
#include <bits/stdc++.h>
using namespace std;

int main() {
  int n, m;
  string s, t;
  cin >> n >> m >> s >> t;
  
  int p1 = 0, p2 = 0;
  int ans = 0;
  int maxDist = 0;
  
  while (p1 < m) {
    while (p2 < n && s[p2] != t[p1]) {
      p2++;
    }
    
    if (p2 < n && s[p2] == t[p1]) {
      maxDist = max(maxDist, p2 - p1);
      p2++;
    }
    
    p1++;
  }
  
  cout << maxDist << endl;
  return 0;
}
```

This optimized program eliminates the need for the `pos` and `pos2` arrays and the second loop, resulting in better running time and reduced memory usage.