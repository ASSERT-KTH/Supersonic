#include <algorithm>
#include <iostream>
#include <queue>
#include <tuple>
#include <vector>
using namespace std;

constexpr int N = 5e4, M = 1e5;

class CT {
public:
  void create(int r, int t) {
    yseed = (yseed ? yseed : rand()) * (RAND_MAX + 1u) + rand();
    storage.push_back({r, yseed, t, -1, -1});
    if (!add(root, storage.size() - 1)) {
      storage.pop_back();
    }
  }

  int mintlq(int r) const {
    int res = M;
    int pos = root;
    const CTVertex *a = storage.data();
    while (pos != -1) {
      if (a[pos].x > r) {
        pos = a[pos].l;
      } else {
        res = a[pos].t;
        pos = a[pos].r;
      }
    }
    return res;
  }

private:
  struct CTVertex {
    int x, y, t;
    int l, r;
  };

  int root = -1;
  vector<CTVertex> storage;
  unsigned yseed = 0;

  const CTVertex &get(int ptr) const { return storage[ptr]; }
  CTVertex &get(int ptr) { return storage[ptr]; }

  bool add(int &t, int el) {
    if (t == -1) {
      t = el;
      return true;
    } else if (get(t).y > get(el).y) {
      bool adding;
      int tt;
      tie(adding, tt) = split(t, get(el).x, get(el).l, get(el).r, get(el).t);
      if (adding) {
        t = el;
        filterjoin(get(el).r, -1, get(el).r, get(el).t);
      } else {
        t = tt;
      }
    } else if (get(t).x > get(el).x) {
      bool adding = add(get(t).l, el);
      if (get(t).t > get(el).t) {
        filterjoin(t, get(t).l, get(t).r, get(el).t);
      }
    } else if (get(t).x == get(el).x) {
      mini(get(t).t, get(el).t);
      filterjoin(get(t).r, -1, get(t).r, get(el).t);
    } else if (get(t).t > get(el).t) {
      bool adding = add(get(t).r, el);
    }
    return false;
  }

  pair<bool, int> split(int t, int x, int &l, int &r, int tval) {
    if (t == -1) {
      l = r = t;
      return {true, t};
    } else if (get(t).x > x) {
      bool splitting;
      int tt;
      tie(splitting, tt) = split(get(t).l, x, l, get(t).l, tval);
      if (splitting) {
        r = t;
      } else {
        get(t).l = tt;
        if (get(t).t > tval) {
          filterjoin(t, get(t).l, get(t).r, tval);
        }
      }
    } else if (get(t).x == x) {
      mini(get(t).t, tval);
      filterjoin(get(t).r, -1, get(t).r, tval);
    } else if (get(t).t > tval) {
      bool splitting;
      int tt;
      tie(splitting, tt) = split(get(t).r, x, get(t).r, r, tval);
      if (splitting) {
        l = t;
      } else {
        get(t).r = tt;
      }
    }
    return {false, t};
  }

  void filterjoin(int &t, int l, int r, int tval) {
    while (r != -1 && get(r).t > tval) {
      r = get(r).r;
    }
    if (r == -1) {
      t = l;
    } else if (l == -1 || get(l).y > get(r).y) {
      filterjoin(get(r).l, l, get(r).l, tval);
      t = r;
    } else {
      filterjoin(get(l).r, get(l).r, r, tval);
      t = l;
    }
  }
};

int &mini(int &lhs, int rhs) { return lhs = min(lhs, rhs); }

vector<int> by_length[N + 1];
int ans[N + 1];
CT ft[N];

void add(int t) {
  for (int i = rent[t].first; i < N; i |= i + 1) {
    ft[i].create(rent[t].second, t);
  }
}

int query(int l, int r) {
  int res;
  for (int i = N - r; i > N - l; i &= i - 1) {
    res = min(res, ft[i - 1].mintlq(r));
  }
  return res;
}

int main() {
  cin.tie(0), ios_base::sync_with_stdio(0);
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; ++i) {
    cin >> rent[i].first >> rent[i].second, --rent[i].first;
    by_length[rent[i].second - rent[i].first].push_back(i);
  }
  queue<tuple<int, int>> for_rent;
  for (int epoch = n; epoch; --epoch) {
    for (int i : by_length[epoch]) {
      add(i);
    }
    for_rent.emplace(0, n);
    while (!for_rent.empty()) {
      auto [l, r] = for_rent.front();
      for_rent.pop();
      int t = query(l, r);
      if (t != M) {
        ans[epoch] += rent[t].second - rent[t].first;
        for_rent.emplace(l, rent[t].first);
        for_rent.emplace(rent[t].second, r);
      }
    }
  }
  for (int rented = 1; rented <= n; ++rented) {
    cout << ans[rented] << '\n';
  }
  return 0;
}