#include <iostream>
#include <vector>
#include <algorithm>
#include <random>

// Function to count the number of set bits using Brian Kernighan's algorithm
int countSetBits(int n) {
    int count = 0;
    while (n) {
        n &= (n - 1);
        count++;
    }
    return count;
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    int n, m, p;
    std::cin >> n >> m >> p;

    std::vector<long long> a(n + 1);
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j < m; j++) {
            char c;
            std::cin >> c;
            if (c == '1')
                a[i] += (1ll << j);
        }
    }

    std::vector<int> id(n + 1);
    for (int i = 0; i <= n; i++)
        id[i] = i;
    
    // Shuffle the id vector using Fisher-Yates shuffle
    std::random_device rd;
    std::mt19937 rng(rd());
    for (int i = n; i >= 1; i--) {
        std::uniform_int_distribution<int> uni(1, i);
        int j = uni(rng);
        std::swap(id[i], id[j]);
    }

    long long ans = 0;
    int num = 0;
    for (int i = 1; i <= std::min(200, n); i++) {
        std::vector<int> one;
        for (int j = 0; j < m; j++) {
            if ((a[id[i]] >> j) & 1)
                one.push_back(j);
        }
        std::vector<int> dp(1 << one.size());
        for (int j = 1; j <= n; j++) {
            int tmp = 0;
            for (int k = 0; k < one.size(); k++) {
                if ((a[j] >> one[k]) & 1)
                    tmp += (1 << k);
            }
            dp[tmp]++;
        }
        for (int j = 0; j < one.size(); j++) {
            for (int k = 0; k < (1 << one.size()); k++) {
                if (k & (1 << j))
                    dp[k ^ (1 << j)] += dp[k];
            }
        }
        for (int k = 0; k < (1 << one.size()); k++) {
            if (dp[k] >= (n + 1) / 2 && countSetBits(k) > num) {
                num = countSetBits(k);
                ans = 0;
                for (int j = 0; j < one.size(); j++) {
                    if (k & (1 << j))
                        ans += (1ll << one[j]);
                }
            }
        }
    }

    for (int i = 0; i < m; i++) {
        std::cout << ((ans >> i) & 1);
    }
    std::cout << '\n';

    return 0;
}