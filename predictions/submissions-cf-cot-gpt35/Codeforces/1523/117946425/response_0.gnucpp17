#include <iostream>
#include <vector>
#include <bitset>
#include <random>
#include <algorithm>

using namespace std;

void solve() {
    int n, m, p;
    cin >> n >> m >> p;

    vector<long long> a(n + 1);
    for (int i = 1; i <= n; i++) {
        string s;
        cin >> s;
        for (int j = 0; j < m; j++) {
            if (s[j] == '1') {
                a[i] |= (1ll << j);
            }
        }
    }

    random_device rd;
    mt19937 rng(rd());

    vector<int> id(n + 1);
    iota(id.begin(), id.end(), 0);
    shuffle(id.begin() + 1, id.end(), rng);

    long long ans = 0;
    int num = 0;
    int limit = min(200, n);
    for (int i = 1; i <= limit; i++) {
        bitset<32> bits(a[id[i]]);
        int oneSize = bits.count();
        vector<int> one;
        for (int j = 0; j < m; j++) {
            if (bits[j]) {
                one.push_back(j);
            }
        }
        
        vector<int> dp(1 << oneSize);
        for (int j = 1; j <= n; j++) {
            bitset<32> bits(a[j]);
            int tmp = 0;
            for (int k = 0; k < oneSize; k++) {
                if (bits[one[k]]) {
                    tmp += (1 << k);
                }
            }
            dp[tmp]++;
        }

        for (int j = 0; j < oneSize; j++) {
            for (int k = 0; k < (1 << oneSize); k++) {
                if (k & (1 << j)) {
                    dp[k ^ (1 << j)] += dp[k];
                }
            }
        }

        for (int k = 0; k < (1 << oneSize); k++) {
            if (dp[k] >= (n + 1) / 2 && __builtin_popcount(k) > num) {
                num = __builtin_popcount(k);
                ans = 0;
                for (int j = 0; j < oneSize; j++) {
                    if (k & (1 << j)) {
                        ans |= (1ll << one[j]);
                    }
                }
            }
        }
    }

    for (int i = 0; i < m; i++) {
        cout << ((ans >> i) & 1);
    }
    cout << '\n';
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    solve();
    return 0;
}