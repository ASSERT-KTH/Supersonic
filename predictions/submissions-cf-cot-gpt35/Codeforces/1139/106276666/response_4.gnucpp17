#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

typedef long long ll;

const int len = 1e6 + 5;
const ll mod = 1e9 + 7;

vector<int> adj[len];
bool vis[len];

ll modpow(ll x, ll n, ll m) {
  if (n == 0)
    return 1LL % m;
  ll u = modpow(x, n / 2, m);
  u = (u * u) % m;
  if (n % 2 == 1)
    u = (u * x) % m;
  return u;
}

ll dfs(int n, int p, bool vis[]) {
  if (vis[n])
    return 0;
  vis[n] = true;
  ll x = 0;
  for (auto u : adj[n]) {
    if (u != p)
      x += dfs(u, n, vis);
  }
  return x + 1;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  
  int n, k;
  cin >> n >> k;
  
  for (int i = 1; i <= n - 1; i++) {
    int u, v, x;
    cin >> u >> v >> x;
    if (x == 0)
      adj[u].push_back(v), adj[v].push_back(u);
  }
  
  ll ans = modpow(n, k, mod);
  ll sm = 0;
  for (int i = 1; i <= n; i++) {
    bool vis[len];
    memset(vis, false, sizeof(vis));
    if (!vis[i]) {
      sm += modpow(dfs(i, -1, vis), k, mod);
      sm %= mod;
    }
  }
  
  cout << (ans - sm + mod) % mod << endl;
  
  return 0;
}