#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

const int MAXN = 1e6 + 5;
const long long MOD = 1e9 + 7;

vector<int> adj[MAXN];
bool vis[MAXN];

long long modpow(long long x, long long n, long long m) {
    long long res = 1;
    while (n > 0) {
        if (n & 1)
            res = (res * x) % m;
        x = (x * x) % m;
        n >>= 1;
    }
    return res;
}

void make_prm() {
    memset(vis, false, sizeof(vis));
    vis[0] = vis[1] = true;
    for (int i = 2; i < MAXN; i++) {
        if (!vis[i]) {
            for (int j = 2 * i; j < MAXN; j += i)
                vis[j] = true;
        }
    }
}

vector<int> make_factor(int n) {
    vector<int> factor;
    for (int i = 1; i * i <= n / 2; i++) {
        if (n % i == 0) {
            factor.push_back(i);
            factor.push_back(n / i);
        }
    }
    return factor;
}

void dfs(int n, int p, long long& x) {
    vis[n] = true;
    x++;
    for (auto u : adj[n]) {
        if (u != p && !vis[u])
            dfs(u, n, x);
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n, k;
    cin >> n >> k;

    for (int i = 1; i < n; i++) {
        int u, v, x;
        cin >> u >> v >> x;
        if (x == 0)
            adj[u].push_back(v), adj[v].push_back(u);
    }

    long long sm = 0;
    long long ans = modpow(n, k, MOD);
    for (int i = 1; i <= n; i++) {
        if (!vis[i]) {
            long long x = 0;
            dfs(i, -1, x);
            sm = (sm + modpow(x, k, MOD)) % MOD;
        }
    }

    cout << (ans - sm + MOD) % MOD << endl;

    return 0;
}