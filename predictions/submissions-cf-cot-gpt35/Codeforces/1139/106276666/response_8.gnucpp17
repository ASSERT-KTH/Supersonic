#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

const int MAXN = 1e6 + 5;
const int MOD = 1e9 + 7;

vector<int> adj[MAXN];
bool vis[MAXN];

int modpow(int x, int n, int m) {
    int u = 1;
    while (n > 0) {
        if (n % 2 == 1)
            u = (u * x) % m;
        x = (x * x) % m;
        n /= 2;
    }
    return u;
}

int mod_(int x, int m) {
    return (x % m + m) % m;
}

void make_prm() {
    memset(vis, false, sizeof(vis));
    vis[0] = vis[1] = true;
    for (int i = 2; i < MAXN; i++) {
        if (!vis[i]) {
            for (int j = 2 * i; j < MAXN; j += i)
                vis[j] = true;
        }
    }
}

vector<int> make_factor(int n) {
    vector<int> factor;
    for (int i = 1; i * i <= n; i++) {
        if (n % i == 0) {
            factor.push_back(i);
            factor.push_back(n / i);
            if (i * i == n)
                factor.pop_back();
        }
    }
    return factor;
}

void make_pascalTri(int n, int pascal_tri[]) {
    memset(pascal_tri, 0, sizeof(pascal_tri));
    pascal_tri[0] = 1;
    for (int i = 1; i <= n; i++) {
        for (int j = i; j >= 1; j--) {
            pascal_tri[j] = (pascal_tri[j] + pascal_tri[j - 1]) % MOD;
        }
    }
}

int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

int give_floor(int n, int a) {
    return (n + a - 1) / a;
}

bool is_perfect(int n) {
    for (int i = 1; i * i <= n; i++) {
        if (i * i == n)
            return true;
    }
    return false;
}

int dfs(int n, int p) {
    if (vis[n])
        return 0;
    vis[n] = true;
    int x = 0;
    for (auto u : adj[n]) {
        if (u != p)
            x += dfs(u, n);
    }
    return x + 1;
}

int main() {
    int n, k;
    cin >> n >> k;
    for (int i = 1; i < n; i++) {
        int u, v, x;
        cin >> u >> v >> x;
        if (x == 0)
            adj[u].push_back(v), adj[v].push_back(u);
    }
    int sm = 0;
    for (int i = 1; i <= n; i++) {
        if (!vis[i]) {
            sm = mod_(sm + modpow(dfs(i, -1), k, MOD), MOD);
        }
    }
    int ans = modpow(n, k, MOD);
    cout << mod_(ans - sm, MOD) << endl;
    return 0;
}