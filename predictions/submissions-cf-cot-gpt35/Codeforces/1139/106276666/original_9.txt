Optimization Steps:
1. Remove unnecessary header files.
2. Remove unnecessary typedefs and defines.
3. Replace the priority_queue with a simple vector to improve memory usage.
4. Remove unnecessary functions and variables.
5. Replace the recursion with an iterative approach in the dfs function.

Optimized C++ Program:
```cpp
#include <iostream>
#include <vector>
using namespace std;

const int len = 1e6 + 5;
const int mod = 1e9 + 7;

bool vis[len];
vector<int> adj[len];

long long modpow(long long x, long long n, long long m) {
  long long u = 1;
  while (n > 0) {
    if (n % 2 == 1)
      u = (u * x) % m;
    x = (x * x) % m;
    n /= 2;
  }
  return u;
}

int dfs(int n, int p) {
  vector<int> stack;
  stack.push_back(n);
  vis[n] = true;
  int x = 0;
  while (!stack.empty()) {
    int u = stack.back();
    stack.pop_back();
    x++;
    for (int v : adj[u]) {
      if (v != p && !vis[v]) {
        vis[v] = true;
        stack.push_back(v);
      }
    }
  }
  return x;
}

int main() {
  int n, k;
  cin >> n >> k;
  long long sm = 0;
  for (int i = 1; i < n; i++) {
    int u, v, x;
    cin >> u >> v >> x;
    if (x == 0)
      adj[u].push_back(v), adj[v].push_back(u);
  }
  for (int i = 1; i <= n; i++) {
    if (!vis[i]) {
      sm += modpow(dfs(i, -1), k, mod);
      sm %= mod;
    }
  }
  long long ans = modpow(n, k, mod);
  cout << (ans - sm + mod) % mod;
  return 0;
}
```