#include <iostream>
#include <vector>
#include <cstring>
#include <cmath>

const int len = 1000005;
const long long mod = 1000000007;

bool prm[len];
void make_prm() {
  prm[0] = prm[1] = false;
  for (int first = 2; first <= len; first++) {
    if (!prm[first]) {
      for (int second = 2 * first; second <= len; second += first)
        prm[second] = true;
    }
  }
}

std::vector<int> factor;
void make_factor(int n) {
  for (int i = 1; i * i < n; i++) {
    if (n % i == 0) {
      factor.push_back(i);
      factor.push_back(n / i);
    }
  }
}

long long modpow(long long x, long long n, long long m) {
  if (n == 0)
    return 1UL % m;
  long long u = modpow(x, n / 2, m);
  u = (u * u) % m;
  if (n % 2 == 1)
    u = (u * x) % m;
  return u;
}

long long mod_(long long x, long long m) {
  if (x > 0)
    return x % m;
  else
    return (m - std::abs(x) % m) % m;
}

bool is_perfect(long long n) {
  long long root = std::sqrt(n);
  return root * root == n;
}

std::vector<long long> adj[len];
bool vis[len];

long long dfs(long long n, long long p) {
  if (vis[n])
    return 0;
  vis[n] = true;
  long long x = 0;
  for (auto u : adj[n]) {
    if (u != p)
      x += dfs(u, n);
  }
  return x + 1;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  int n, k;
  std::cin >> n >> k;

  for (int i = 1; i < n; i++) {
    long long u, v, x;
    std::cin >> u >> v >> x;
    if (x == 0)
      adj[u].push_back(v), adj[v].push_back(u);
  }

  long long sm = 0;
  for (int i = 1; i <= n; i++) {
    if (!vis[i]) {
      long long dfs_result = dfs(i, -1);
      sm += modpow(dfs_result, k, mod);
      sm = mod_(sm, mod);
    }
  }

  long long ans = modpow(n, k, mod);
  std::cout << mod_(ans - sm, mod) << std::endl;

  return 0;
}