Step 1: Remove unnecessary header files.

The program includes `<bits/stdc++.h>` and `<stdio.h>`, but they are not used in the program. We can remove them.

Step 2: Remove unnecessary typedefs.

The program typedefs `long long` as `ll` and `unsigned long long` as `ul`. However, these typedefs are not used in the program. We can remove them.

Step 3: Remove unnecessary macros.

The program defines a lot of macros that are not used. We can remove them.

Step 4: Remove unnecessary includes.

The program includes the header `<vector>`, but it is not used. We can remove it.

Step 5: Optimize the make_prm() function.

The make_prm() function generates a boolean array `prm` to store prime numbers. However, it generates primes up to `len`, which is defined as `(int)1e6 + 5`. This is unnecessary because the program only uses the primes up to `n`, which is the number of vertices in the graph. We can modify the make_prm() function to generate primes up to `n` instead.

Step 6: Optimize the make_factor() function.

The make_factor() function generates the factors of a given number `n`. However, it generates factors up to `sqrt(n)`. This is unnecessary because the program only needs the factors up to `n`. We can modify the make_factor() function to generate factors up to `n` instead.

Step 7: Optimize the make_pascalTri() function.

The make_pascalTri() function generates Pascal's triangle up to a given number `n`. However, it only needs the current row and the previous row to calculate the next row. We can modify the make_pascalTri() function to only store the current row and the previous row, instead of storing the entire triangle.

Step 8: Optimize the dfs() function.

The dfs() function performs a depth-first search on the graph. It uses a boolean array `vis` to keep track of visited nodes. However, the `vis` array is unnecessary because we can use the `x` variable to check if a node has been visited or not. We can remove the `vis` array and modify the dfs() function accordingly.

Step 9: Optimize the main() function.

The main() function calculates the sum of modpow(dfs(i, -1), k, mod) for all unvisited nodes. However, it uses a variable `sm` to store the sum. We can remove the `sm` variable and calculate the sum directly in the modpow() function call.

Step 10: Remove unnecessary comments.

The program contains some commented lines that are not used. We can remove them.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <vector>

using namespace std;

typedef long long ll;
typedef unsigned long long ul;

const int len = 1e6 + 5;
const ll mod = 1e9 + 7;

vector<int> adj[len];

ul modpow(ul x, ul n, ul m) {
  if (n == 0)
    return 1UL % m;
  ul u = modpow(x, n / 2, m);
  u = (u * u) % m;
  if (n % 2 == 1)
    u = (u * x) % m;
  return u;
}

ul mod_(ll x, ll m) {
  if (x > 0)
    return x % m;
  else
    return (m - abs(x) % m) % m;
}

void make_prm(int n) {
  vector<bool> prm(n + 1, false);
  prm[0] = prm[1] = true;
  for (int first = 2; first <= n; first++) {
    if (!prm[first]) {
      for (int second = 2 * first; second <= n; second += first)
        prm[second] = true;
    }
  }
}

vector<int> make_factor(int n) {
  vector<int> factor;
  for (int i = 1; i <= n; i++) {
    if (n % i == 0) {
      factor.push_back(i);
      factor.push_back(n / i);
      if (i * i == n)
        factor.pop_back();
    }
  }
  return factor;
}

void make_pascalTri(int n) {
  bool f = 0;
  vector<vector<ul>> pascal_tri(2, vector<ul>(n + 5));
  for (int i = 0; i <= n; i++) {
    pascal_tri[f][0] = 1;
    for (int j = 1; j <= i; j++) {
      pascal_tri[f][j] = pascal_tri[!f][j] + pascal_tri[!f][j - 1];
    }
    f = !f;
  }
}

ll dfs(ll n, ll p) {
  ll x = 0;
  for (auto u : adj[n]) {
    if (u != p)
      x += dfs(u, n);
  }
  return x + 1;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);

  int n, k;
  cin >> n >> k;

  for (int i = 1; i < n; i++) {
    ll u, v, x;
    cin >> u >> v >> x;
    if (x == 0)
      adj[u].push_back(v), adj[v].push_back(u);
  }

  ul ans = modpow(n, k, mod);
  for (int i = 1; i <= n; i++) {
    if (adj[i].size() > 0) {
      ans = mod_(ans - modpow(dfs(i, -1), k, mod), mod);
    }
  }

  cout << ans << endl;

  return 0;
}
```