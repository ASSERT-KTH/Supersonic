#include <iostream>
#include <vector>

using namespace std;

const int len = 1e6 + 5;
const int mod = 1e9 + 7;

bool prm[len];
vector<int> adj[len];

int dfs(int n) {
  if (adj[n] < 0)
    return 0;

  int x = 0;
  adj[n] = -adj[n];
  for (auto u : adj[n]) {
    x += dfs(u);
  }
  return x + 1;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);

  int n, k;
  cin >> n >> k;

  for (int i = 1; i <= n - 1; i++) {
    int u, v, x;
    cin >> u >> v >> x;
    if (x == 0)
      adj[u].push_back(v), adj[v].push_back(u);
  }

  long long sm = 0;
  for (int i = 1; i <= n; i++) {
    if (adj[i] >= 0) {
      int result = dfs(i);
      sm += result;
      sm %= mod;
    }
  }

  long long ans = 1;
  for (int i = 1; i <= k; i++) {
    ans *= n;
    ans %= mod;
  }

  long long res = (ans - sm + mod) % mod;
  cout << res << endl;

  return 0;
}