#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <numeric>

const int len = 1e6 + 5;
const long long mod = 1e9 + 7;

bool prm[len];

void make_prm(int n) {
  std::fill(prm, prm + n + 1, false);
  prm[0] = prm[1] = true;
  for (int first = 2; first <= n; first++) {
    if (!prm[first]) {
      for (int second = 2 * first; second <= n; second += first)
        prm[second] = true;
    }
  }
}

std::vector<int> make_factor(int n) {
  std::vector<int> factor;
  for (int i = 1; i * i <= n; i++) {
    if (n % i == 0) {
      factor.push_back(i);
      if (i * i != n)
        factor.push_back(n / i);
    }
  }
  return factor;
}

void make_pascalTri(int n, unsigned long long pascal_tri[2][105]) {
  bool f = 0;
  std::fill_n(pascal_tri[0], 105, 0);
  std::fill_n(pascal_tri[1], 105, 0);
  for (int i = 0; i <= n; i++) {
    pascal_tri[f][0] = 1;
    for (int j = 1; j <= i; j++) {
      pascal_tri[f][j] = pascal_tri[!f][j] + pascal_tri[!f][j - 1];
    }
    f = !f;
  }
}

int gcd(int a, int b) {
  return std::gcd(a, b);
}

int give_floor(int n, int a) {
  return n / a + (n % a != 0);
}

bool is_perfect(int n) {
  int sqrt_n = std::sqrt(n);
  return sqrt_n * sqrt_n == n;
}

long long dfs(const std::vector<std::vector<int>>& adj, std::vector<bool>& vis, int n, int p) {
  if (vis[n])
    return 0;
  vis[n] = true;
  long long x = 0;
  for (auto u : adj[n]) {
    if (u != p)
      x += dfs(adj, vis, u, n);
  }
  return x + 1;
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);

  int n, k;
  std::cin >> n >> k;

  std::vector<std::vector<int>> adj(n + 1);
  for (int i = 1; i <= n - 1; i++) {
    int u, v, x;
    std::cin >> u >> v >> x;
    if (x == 0)
      adj[u].push_back(v), adj[v].push_back(u);
  }

  std::vector<bool> vis(n + 1, false);
  long long sm = 0;
  for (int i = 1; i <= n; i++) {
    if (!vis[i]) {
      sm += std::pow(dfs(adj, vis, i, -1), k) % mod;
      sm %= mod;
    }
  }

  long long ans = std::pow(n, k) % mod;
  std::cout << (ans - sm + mod) % mod << '\n';

  return 0;
}