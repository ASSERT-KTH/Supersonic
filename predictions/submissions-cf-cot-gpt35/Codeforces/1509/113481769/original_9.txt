To optimize the given program, we can make the following modifications:

1. Remove unnecessary includes: The program includes the entire `bits/stdc++.h` header, which is not necessary. We can remove this include statement and include only the necessary headers.

2. Avoid using the `using namespace std;` statement: This statement imports the entire `std` namespace, which can lead to naming conflicts and make the code less readable. We can remove this statement and use the `std::` prefix for standard library types and functions.

3. Avoid using macros: Macros can lead to unexpected behavior and make the code harder to debug. We can replace the macros `IOS`, `endl`, `frfr`, and `loop` with normal functions or constants.

4. Use `reserve` for vectors: The vectors `odd` and `even` are dynamically resized as elements are added to them. We can improve performance by reserving space for the expected number of elements in advance.

5. Use `emplace_back` instead of `push_back`: The `emplace_back` function is more efficient than `push_back` when constructing objects directly in the vector.

6. Avoid unnecessary copying: Instead of copying the elements from `odd` and `even` vectors to the output stream, we can directly iterate over them and print.

7. Use `cout` once instead of multiple times: Instead of using `cout` multiple times to print each element, we can store the elements in a string and print the entire string at once.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>

void solve(int te) {
  int n;
  std::cin >> n;
  std::vector<int> arr(n);
  std::vector<int> odd;
  std::vector<int> even;
  odd.reserve(n/2 + 1);
  even.reserve(n/2 + 1);
  
  for (int i = 0; i < n; i++) {
    std::cin >> arr[i];
    if (arr[i] % 2) {
      odd.emplace_back(arr[i]);
    } else {
      even.emplace_back(arr[i]);
    }
  }

  std::string output;
  if (odd.size() >= even.size()) {
    for (int i : odd) {
      output += std::to_string(i) + " ";
    }
    for (int i : even) {
      output += std::to_string(i) + " ";
    }
  } else {
    for (int i : even) {
      output += std::to_string(i) + " ";
    }
    for (int i : odd) {
      output += std::to_string(i) + " ";
    }
  }
  std::cout << output << "\n";
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  
  int te;
  std::cin >> te;
  for (int i = 1; i <= te; ++i) {
    solve(i);
  }
  
  return 0;
}
```

The optimized code improves the running time and memory usage by avoiding unnecessary includes, macros, and copying. It also reserves space in advance for the vectors to reduce the number of reallocations.