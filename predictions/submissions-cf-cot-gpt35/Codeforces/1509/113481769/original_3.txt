Optimization Steps:

1. Remove the unnecessary `#include <bits/stdc++.h>` and `using namespace std;` statements. They are not needed for this program and can increase compile time and memory usage.

2. Remove the `#define IOS`, `#define endl "\n"`, and `#define frfr freopen("input.txt", "r", stdin);` statements. They are not being used in the program.

3. Avoid using variable-length arrays. Instead of using `int arr[n];`, use a dynamic container like `vector<int> arr(n);`. This will allow for more efficient memory allocation and deallocation.

4. Avoid unnecessary copying of elements. Instead of using separate vectors for odd and even numbers, we can use a single vector and sort it in place. This will save memory usage and improve performance.

5. Instead of using a range-based for loop to print the elements, use a regular for loop with an index variable. This will eliminate the need to create an iterator and improve performance.

6. Avoid using `endl` to flush the output stream after each test case. Instead, use `"\n"` to insert a newline character.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

void solve(int te) {
  int n;
  std::cin >> n;
  std::vector<int> arr(n);
  
  for (int i = 0; i < n; i++) {
    std::cin >> arr[i];
  }
  
  std::sort(arr.begin(), arr.end(), [](int a, int b) {
    return a % 2 < b % 2;
  });

  for (int i = 0; i < n; i++) {
    std::cout << arr[i] << " ";
  }
  std::cout << "\n";
}

int main() {
  int te;
  std::cin >> te;
  for (int i = 1; i <= te; ++i) {
    solve(i);
  }
  return 0;
}
```