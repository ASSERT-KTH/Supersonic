To optimize the given C++ program, we can make the following modifications:

1. Remove unnecessary includes: The `#include <bits/stdc++.h>` includes a lot of unnecessary headers. We can remove it and include only the necessary headers, such as `<iostream>`, `<vector>`, `<set>`, and `<map>`.

2. Use `emplace_back` instead of `push_back`: Instead of using `even.pb(x)` to add an element to the `even` vector, we can use `even.emplace_back(x)`. This can potentially improve the performance by avoiding the copy or move operations.

3. Use `unordered_set` instead of `set`: Since we only need to check the presence of an element and do not require the elements to be sorted, we can use `unordered_set` instead of `set`. This can improve the time complexity of the `count` operation from O(log n) to O(1).

4. Use `unordered_map` instead of `map`: Similarly, since we only need to check the presence of a key and do not require the keys to be sorted, we can use `unordered_map` instead of `map`. This can improve the time complexity of the `operator[]` and `count` operations from O(log n) to O(1).

5. Use a bitwise operation instead of modulo: Instead of using `x % 2 == 0`, we can use a bitwise operation `x & 1` to check if `x` is even. This can be faster than the modulo operation.

6. Use `reserve` to preallocate memory: Before the loop, we can use `reserve` to preallocate memory for the `even` vector based on the expected number of even elements. This can reduce the number of reallocations and improve the performance.

7. Use a single loop to count the number of factors of 2: Instead of using a nested loop to divide by 2 until the number becomes odd, we can use a single loop to count the number of factors of 2. This can simplify the code and potentially improve the performance.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <vector>
#include <unordered_set>
#include <unordered_map>

using namespace std;

bool comp(int a, int b) {
  return a > b;
}

int main() {
  int t;
  cin >> t;
  
  while (t--) {
    int n, res = 0;
    cin >> n;
    
    vector<int> even;
    even.reserve(n);
    
    unordered_set<int> st;
    unordered_map<int, bool> used;
    
    for (int i = 0; i < n; i++) {
      int x;
      cin >> x;
      
      if ((x & 1) == 0 && st.emplace(x).second) {
        even.emplace_back(x);
      }
    }
    
    sort(even.begin(), even.end(), comp);
    
    for (int i = 0; i < even.size(); i++) {
      int b = even[i];
      
      while ((b & 1) == 0 && !used[b]) {
        used[b] = true;
        b /= 2;
        ++res;
      }
    }
    
    cout << res << endl;
  }
  
  return 0;
}
```

This optimized program makes small modifications to the original program to improve the running time and memory usage. It replaces the unnecessary includes, uses more efficient data structures, and minimizes unnecessary operations.