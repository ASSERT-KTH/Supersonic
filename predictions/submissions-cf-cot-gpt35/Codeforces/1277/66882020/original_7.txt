Optimization step by step:

1. Remove the unnecessary includes: The program includes the entire `<bits/stdc++.h>` library, which is not necessary. We can remove it and only include the necessary headers.

2. Avoid using `using namespace std;`: It is generally recommended to avoid using `using namespace std;` globally, as it can lead to naming conflicts. Instead, we can use the `std::` prefix when necessary.

3. Use `int` instead of `long long`: In this program, the `int` type is sufficient for the given input constraint. Using `int` instead of `long long` can save memory.

4. Avoid unnecessary copying: In the original program, the `even` vector is created and sorted unnecessarily. We can avoid creating the `even` vector and directly process the numbers as we read them.

5. Use a `unordered_set` instead of a `set`: The use of a `set` to check if a number has been encountered before can be replaced with an `unordered_set`. This can improve the efficiency of the program, as the lookup time for an element in an `unordered_set` is generally faster than a `set`.

6. Use a single loop instead of two loops: The original program uses two loops to process the numbers. We can combine these loops into a single loop, eliminating the need for the `used` map.

7. Avoid division operation in the loop: Instead of repeatedly dividing `b` by 2 in the loop, we can use a bitwise right shift operation (`>>`) to perform the division. This can be faster than the division operation.

Optimized program:

```cpp
#include <iostream>
#include <vector>
#include <unordered_set>
#include <map>

bool comp(int a, int b) { return a > b; }

int main() {
  int t;
  std::cin >> t;
  while (t--) {
    int n, res = 0;
    std::cin >> n;
    std::unordered_set<int> st;
    for (int i = 0; i < n; i++) {
      int x;
      std::cin >> x;
      if (x % 2 == 0 && st.find(x) == st.end()) {
        int b = x;
        while (b % 2 == 0) {
          st.insert(b);
          b >>= 1;
          ++res;
        }
      }
    }
    std::cout << res << std::endl;
  }
  return 0;
}
```

Explanation:

1. Removed unnecessary includes: The unnecessary `bits/stdc++.h` include was removed, and only the necessary headers were included.

2. Avoided using `using namespace std;`: The `using namespace std;` directive was removed to avoid potential naming conflicts.

3. Used `int` instead of `long long`: The `long long` type was replaced with `int` as it is sufficient for the given input constraint.

4. Avoided unnecessary copying: The `even` vector was removed as we can directly process the numbers as we read them, eliminating the need for sorting.

5. Used an `unordered_set` instead of a `set`: The `set` was replaced with an `unordered_set` to improve the efficiency of element lookup.

6. Used a single loop: The two loops in the original program were combined into a single loop, eliminating the need for the `used` map.

7. Avoided division operation: The division operation in the loop was replaced with a bitwise right shift operation (`>>`) to perform the division.