To optimize the given program, we can make the following modifications:

1. Remove the unnecessary `#include <bits/stdc++.h>` header file. This header file includes a large number of other header files, which can slow down the compilation process.

2. Remove the unnecessary `#define pb push_back`. The `pb` macro is used to push elements into a vector, but it is not used in the program. Removing it will not affect the program's functionality.

3. Change the `int` type to `int64_t` for better portability. The `int` type can have different sizes on different platforms, whereas `int64_t` guarantees a 64-bit signed integer.

4. Replace the `set<int>` with a `unordered_set<int>` to improve the performance of the `count` operation. The `unordered_set` provides constant-time average complexity for `count`, while `set` has logarithmic complexity.

5. Use a single loop to read the input and perform the necessary operations. Instead of using two separate loops to insert elements into the `even` vector and the `st` set, we can combine them into a single loop. This reduces the number of iterations and improves the program's efficiency.

6. Replace the `sort` function with `make_heap` and `sort_heap` to sort the `even` vector. The `make_heap` function creates a binary heap from the vector, and `sort_heap` sorts the heap in descending order. This is more efficient than using `sort` for large vectors.

7. Replace the `map<int, bool>` with a `vector<bool>` to track the usage of numbers. Using a `vector<bool>` is more memory-efficient than a `map` for storing boolean values.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <unordered_set>
#include <algorithm>
#include <cstdint>

bool comp(int64_t a, int64_t b) {
  return a > b;
}

int main() {
  int t;
  std::cin >> t;
  while (t--) {
    int n, res = 0;
    std::cin >> n;
    std::vector<int64_t> even;
    std::unordered_set<int64_t> st;
    std::vector<bool> used(n, false);
    for (int i = 0; i < n; i++) {
      int64_t x;
      std::cin >> x;
      if (x % 2 == 0 && !st.count(x)) {
        even.push_back(x);
        st.insert(x);
      }
    }
    std::make_heap(even.begin(), even.end(), comp);
    while (!even.empty()) {
      int64_t b = even.front();
      std::pop_heap(even.begin(), even.end(), comp);
      even.pop_back();
      while (b % 2 == 0) {
        used[b] = true;
        b /= 2;
        ++res;
      }
    }
    std::cout << res << std::endl;
  }
  return 0;
}
```