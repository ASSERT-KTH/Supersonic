#include <iostream>
#include <vector>
#include <unordered_set>
#include <algorithm>
#include <cstdint>

bool comp(int64_t a, int64_t b) {
  return a > b;
}

int main() {
  int t;
  std::cin >> t;
  while (t--) {
    int n, res = 0;
    std::cin >> n;
    std::vector<int64_t> even;
    std::unordered_set<int64_t> st;
    std::vector<bool> used(n, false);
    for (int i = 0; i < n; i++) {
      int64_t x;
      std::cin >> x;
      if (x % 2 == 0 && !st.count(x)) {
        even.push_back(x);
        st.insert(x);
      }
    }
    std::make_heap(even.begin(), even.end(), comp);
    while (!even.empty()) {
      int64_t b = even.front();
      std::pop_heap(even.begin(), even.end(), comp);
      even.pop_back();
      while (b % 2 == 0) {
        used[b] = true;
        b /= 2;
        ++res;
      }
    }
    std::cout << res << std::endl;
  }
  return 0;
}