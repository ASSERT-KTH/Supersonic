Explanation of the optimization steps:

1. Remove unnecessary headers: The program includes the `<bits/stdc++.h>` header, which is not needed. We can remove it.

2. Remove unnecessary typedefs: The program defines `ll`, `vi`, and `vl` as typedefs for `long long`, `vector<int>`, and `vector<ll>`, respectively. However, these typedefs are not used in the program. We can remove them.

3. Remove unnecessary macros: The program defines several macros (`all`, `open_file`, `write_file`, `mem`, `show`, `forn`, `lower`, `upper`) that are not used. We can remove them.

4. Avoid using `std::endl` and `std::cout`: The program uses `std::endl` to end lines and `std::cout` to output values. However, `std::endl` flushes the stream buffer, which can be costly in terms of performance. We can replace `std::endl` with the newline character `\n` and use `std::cout` directly without flushing.

5. Replace `scanf` with `std::cin`: The program uses `scanf` to read input values. However, `std::cin` is the preferred way of reading input in C++. We can replace `scanf` with `std::cin`.

6. Replace `printf` with `std::cout`: The program uses `printf` to output values. However, `std::cout` is the preferred way of outputting values in C++. We can replace `printf` with `std::cout`.

7. Use `std::vector` instead of plain arrays: The program uses a plain array `A` with a predefined size `MAX` to store values. We can use a `std::vector` instead, which can dynamically resize itself as needed.

8. Avoid unnecessary assignment in the for loop: The program initializes the array `A` with values `A[i] = i` in a for loop. However, this assignment is unnecessary because the subsequent loop over `n` will update the values anyway. We can remove this assignment.

9. Optimize the nested loops: The program has two nested loops that iterate over `MAX` and `19` respectively. These loops can be optimized by swapping their order. Swapping the loops will improve cache locality and reduce cache misses.

10. Use a more efficient algorithm for finding the highest bit: The program uses a loop to find the highest bit that is smaller than a given value. This can be optimized using a more efficient algorithm, such as the binary search algorithm.

11. Remove unused variable `x`: The program declares `x` but does not use it. We can remove this declaration.

Optimized program:

```cpp
#include <iostream>
#include <vector>

int main() {
  int n, m;
  std::cin >> n >> m;

  std::vector<int> A(1 << 19);
  for (int i = 0; i < n; i++) {
    int x, y;
    std::cin >> x >> y;
    A[x] = std::max(A[x], y);
  }

  for (int i = 1; i < (1 << 19); i++) {
    A[i] = std::max(A[i], A[i - 1]);
  }

  std::vector<std::vector<int>> dp(1 << 19, std::vector<int>(19));
  for (int i = 0; i < (1 << 19); i++) {
    dp[i][0] = A[i];
  }

  for (int j = 1; j < 19; j++) {
    for (int i = 0; i < (1 << 19); i++) {
      dp[i][j] = dp[dp[i][j - 1]][j - 1];
    }
  }

  while (m--) {
    int l, r, nb = 0;
    std::cin >> l >> r;
    for (int j = 18; j >= 0; j--) {
      if (dp[l][j] < r) {
        nb += 1 << j;
        l = dp[l][j];
      }
    }
    if (dp[l][0] >= r)
      nb++;
    else
      nb = -1;
    std::cout << nb << '\n';
  }

  return 0;
}
```