#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cstring>

using namespace std;

int const MAX = (1 << 19);
int A[MAX];
int dp[MAX][19];

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int n, m;
    cin >> n >> m;

    for (int i = 0; i < MAX; i++) {
        A[i] = i;
    }

    for (int i = 0; i < n; i++) {
        int x, y;
        cin >> x >> y;
        A[x] = max(A[x], y);
    }

    dp[0][0] = A[0];
    for (int i = 1; i < (1 << 19); i++) {
        dp[i][0] = A[i];
    }

    for (int j = 1; j < 19; j++) {
        for (int i = 0; i < MAX; i++) {
            dp[i][j] = dp[dp[i][j - 1]][j - 1];
        }
    }

    while (m > 0) {
        int l, r, nb = 0, x;
        cin >> l >> r;

        for (int j = 18; j >= 0; j--) {
            if (dp[l][j] < r) {
                nb += 1 << j;
                l = dp[l][j];
            }
        }

        if (dp[l][0] >= r) {
            nb++;
        } else {
            nb = -1;
        }

        cout << nb << '\n';

        m--;
    }

    return 0;
}