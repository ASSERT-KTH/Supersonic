#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;

pair<int, int> next(pair<int, int> temp, int ax, int bx, int ay, int by) {
  return make_pair(ax * temp.first + bx, ay * temp.second + by);
}

int main() {
  int xx, yy, ax, bx, ay, by, xs, ys, t;
  cin >> xx >> yy >> ax >> ay >> bx >> by >> xs >> ys >> t;

  pair<int, int> temp = make_pair(xx, yy);
  pair<int, int> tx = make_pair(xs, ys);

  vector<pair<int, int>> arr;
  int vs = 0;
  int dea = abs(temp.first - tx.first) + abs(temp.second - tx.second);

  if (dea <= t)
    arr.push_back(temp);

  temp = next(temp, ax, bx, ay, by);

  if (abs(tx.first - temp.first) + abs(tx.second - temp.second) > dea)
    vs = 2;
  else
    vs = 1;

  while (vs == 1 || (vs == 2 && abs(tx.first - temp.first) + abs(tx.second - temp.second) <= t)) {
    dea = abs(tx.first - temp.first) + abs(tx.second - temp.second);
    arr.push_back(temp);
    temp = next(temp, ax, bx, ay, by);
    if (vs == 1 && dea < abs(tx.first - temp.first) + abs(tx.second - temp.second))
      vs = 2;
  }

  int ans = 0;
  int n = arr.size();

  for (int i = 0; i < n; i++) {
    int j = i;
    int dus = abs(tx.first - arr[i].first) + abs(tx.second - arr[i].second);
    int tx = dus;

    if (dus <= t) {
      while (j < n - 1 && dus <= t) {
        j++;
        dus += abs(arr[j].first - arr[j - 1].first) + abs(arr[j].second - arr[j - 1].second);
      }

      if (dus <= t)
        ans = max(ans, j - i + 1);
      else
        ans = max(ans, j - i);

      dus = tx;
      j = i;

      while (j > 0 && dus <= t) {
        j--;
        dus += abs(arr[j].first - arr[j + 1].first) + abs(arr[j].second - arr[j + 1].second);
      }

      if (dus <= t)
        ans = max(ans, i - j + 1);
      else
        ans = max(ans, i - j);
    }
  }

  cout << ans;

  return 0;
}