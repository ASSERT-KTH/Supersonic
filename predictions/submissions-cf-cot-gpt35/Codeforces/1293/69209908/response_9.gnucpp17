#include <iostream>
#include <vector>
#include <deque>
#include <algorithm>
using namespace std;

typedef long long ll;

ll xx, yy, ax, bx, ay, by, xs, ys, t;

ll dist(pair<ll, ll> a, pair<ll, ll> b) {
  return abs(a.first - b.first) + abs(a.second - b.second);
}

pair<ll, ll> next(pair<ll, ll> temp) {
  return make_pair(ax * temp.first + bx, ay * temp.second + by);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cin >> xx >> yy >> ax >> ay >> bx >> by >> xs >> ys >> t;

  pair<ll, ll> temp = make_pair(xx, yy);
  pair<ll, ll> tx = make_pair(xs, ys);

  deque<pair<ll, ll>> arr;
  vector<ll> distances;
  ll vs = 0;

  ll dea = dist(temp, tx);
  if (dea <= t)
    arr.push_back(temp);
  temp = next(temp);

  ll dist_tx_temp = dist(tx, temp);
  if (dist_tx_temp > dea)
    vs = 2;
  else
    vs = 1;

  while (vs == 1 || (vs == 2 && dist_tx_temp <= t)) {
    dea = dist_tx_temp;
    arr.push_back(temp);
    distances.push_back(dea);
    temp = next(temp);
    if (vs == 1 && dea < dist_tx_temp)
      vs = 2;
    dist_tx_temp = dist(tx, temp);
  }

  ll ans = 0;
  for (int i = 0; i < arr.size(); i++) {
    ll dus = distances[i];
    ll tx = dus;
    if (dus <= t) {
      int j = i;
      while (j < arr.size() - 1 && dus <= t) {
        j++;
        dus += distances[j];
      }
      if (dus <= t)
        ans = max(ans, (ll)j - i + 1);
      else
        ans = max(ans, (ll)j - i);
      dus = tx;
      j = i;
      while (j > 0 && dus <= t) {
        j--;
        dus += distances[j];
      }
      if (dus <= t)
        ans = max(ans, (ll)i - j + 1);
      else
        ans = max(ans, (ll)i - j);
    }
  }
  cout << ans;
}