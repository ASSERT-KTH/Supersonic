#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int xx, yy, ax, bx, ay, by, xs, ys, t;

int dist(int x1, int y1, int x2, int y2) {
  return abs(x1 - x2) + abs(y1 - y2);
}

pair<int, int> next(pair<int, int> temp) {
  return make_pair(ax * temp.first + bx, ay * temp.second + by);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  
  cin >> xx >> yy >> ax >> ay >> bx >> by >> xs >> ys >> t;

  pair<int, int> temp = make_pair(xx, yy);
  pair<int, int> tx = make_pair(xs, ys);
  vector<pair<int, int>> arr;
  arr.reserve(100000); // Reserve sufficient capacity for the vector

  int dea = dist(temp.first, temp.second, tx.first, tx.second);
  if (dea <= t)
    arr.push_back(temp);

  temp = next(temp);
  int vs = (dist(tx.first, tx.second, temp.first, temp.second) > dea) ? 2 : 1;

  while (vs == 1 || (vs == 2 && dist(tx.first, tx.second, temp.first, temp.second) <= t)) {
    dea = dist(tx.first, tx.second, temp.first, temp.second);
    arr.push_back(temp);
    temp = next(temp);
    if (vs == 1 && dea < dist(tx.first, tx.second, temp.first, temp.second))
      vs = 2;
  }

  int ans = 0;
  for (int i = 0; i < arr.size(); i++) {
    int j = i;
    int dus = dist(tx.first, tx.second, arr[i].first, arr[i].second);
    int tx = dus;
    if (dus <= t) {
      while (j < arr.size() - 1 && dus <= t) {
        j++;
        dus += dist(arr[j].first, arr[j].second, arr[j - 1].first, arr[j - 1].second);
      }
      if (dus <= t)
        ans = max(ans, j - i + 1);
      else
        ans = max(ans, j - i);
      dus = tx;
      j = i;
      while (j > 0 && dus <= t) {
        j--;
        dus += dist(arr[j].first, arr[j].second, arr[j + 1].first, arr[j + 1].second);
      }
      if (dus <= t)
        ans = max(ans, i - j + 1);
      else
        ans = max(ans, i - j);
    }
  }

  cout << ans;
}