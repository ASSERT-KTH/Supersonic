#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

pair<long long, long long> next(const pair<long long, long long>& temp, long long ax, long long bx, long long ay, long long by) {
    return make_pair(ax * temp.first + bx, ay * temp.second + by);
}

long long dist(const pair<long long, long long>& a, const pair<long long, long long>& b) {
    return abs(a.first - b.first) + abs(a.second - b.second);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    srand(time(NULL));

    const long long xx, yy, ax, bx, ay, by, xs, ys, t;
    cin >> xx >> yy >> ax >> ay >> bx >> by >> xs >> ys >> t;

    pair<long long, long long> temp = make_pair(xx, yy);
    pair<long long, long long> tx = make_pair(xs, ys);
    vector<pair<long long, long long>> arr;
    arr.reserve(100000); // Preallocate memory for the vector

    long long dea = dist(temp, tx);
    if (dea <= t)
        arr.push_back(temp);
    temp = next(temp, ax, bx, ay, by);
    int vs = (dist(tx, temp) > dea) ? 2 : 1;
    while (vs == 1 || (vs == 2 && dist(tx, temp) <= t)) {
        dea = dist(tx, temp);
        arr.push_back(temp);
        temp = next(temp, ax, bx, ay, by);
        if (vs == 1 && dea < dist(tx, temp))
            vs = 2;
    }

    long long ans = 0;
    for (int i = 0; i < arr.size(); i++) {
        size_t j = i;
        long long dus = dist(tx, arr[i]);
        long long tx = dus;
        if (dus <= t) {
            while (j < arr.size() - 1 && dus <= t) {
                j++;
                dus += dist(arr[j], arr[j - 1]);
            }
            if (dus <= t)
                ans = max(ans, j - i + 1);
            else
                ans = max(ans, j - i);
            dus = tx;
            j = i;
            while (j > 0 && dus <= t) {
                j--;
                dus += dist(arr[j], arr[j + 1]);
            }
            if (dus <= t)
                ans = max(ans, i - j + 1);
            else
                ans = max(ans, i - j);
        }
    }

    cout << ans;

    return 0;
}