#include <iostream>
#include <vector>
#include <deque>
#include <utility>
#include <cmath>

#define ll long long

using namespace std;

ll xx, yy, ax, bx, ay, by, xs, ys, t;

ll dist(pair<ll, ll> a, pair<ll, ll> b) {
  return abs(a.first - b.first) + abs(a.second - b.second);
}

pair<ll, ll> next(pair<ll, ll> temp) {
  return make_pair(ax * temp.first + bx, ay * temp.second + by);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cin >> xx >> yy >> ax >> ay >> bx >> by >> xs >> ys >> t;
  
  pair<ll, ll> temp, tx;
  deque<pair<ll, ll>> arr;
  
  ll vs = 0;
  temp = make_pair(xx, yy);
  tx = make_pair(xs, ys);
  ll dea = dist(temp, tx);
  
  if (dea <= t)
    arr.push_back(temp);
  
  temp = next(temp);
  
  if (dist(tx, temp) > dea)
    vs = 2;
  else
    vs = 1;
  
  while (vs <= 2 && dist(tx, temp) <= t) {
    dea = dist(tx, temp);
    arr.push_back(temp);
    temp = next(temp);
    if (vs == 1 && dea < dist(tx, temp))
      vs = 2;
  }
  
  ll ans = 0;
  
  for (auto it = arr.begin(); it != arr.end(); it++) {
    auto jt = it;
    ll dus = dist(tx, *it);
    ll tx_dus = dus;
    
    if (dus <= t) {
      while (jt != arr.end() && dus <= t) {
        jt++;
        dus += dist(*jt, *(jt - 1));
      }
      
      if (dus <= t)
        ans = max(ans, (ll)distance(it, jt) + 1);
      else
        ans = max(ans, (ll)distance(it, jt));
        
      dus = tx_dus;
      jt = it;
      
      while (jt != arr.begin() && dus <= t) {
        jt--;
        dus += dist(*jt, *(jt + 1));
      }
      
      if (dus <= t)
        ans = max(ans, (ll)distance(jt, it) + 1);
      else
        ans = max(ans, (ll)distance(jt, it));
    }
  }
  
  cout << ans;
}