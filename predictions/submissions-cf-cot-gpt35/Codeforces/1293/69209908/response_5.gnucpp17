#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

typedef long long ll;
typedef pair<ll, ll> Point;

ll dist(const Point& a, const Point& b) {
  return abs(a.first - b.first) + abs(a.second - b.second);
}

Point next(const Point& temp, ll ax, ll bx, ll ay, ll by) {
  return make_pair(ax * temp.first + bx, ay * temp.second + by);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

  ll xx, yy, ax, bx, ay, by, xs, ys, t;
  cin >> xx >> yy >> ax >> ay >> bx >> by >> xs >> ys >> t;

  Point temp = make_pair(xx, yy);
  Point tx = make_pair(xs, ys);
  vector<Point> arr;
  arr.reserve(1000000); // Reserve enough space to avoid vector resizing

  ll vs = 0;
  ll dea = dist(temp, tx);
  if (dea <= t) {
    arr.push_back(temp);
  }
  temp = next(temp, ax, bx, ay, by);
  if (dist(tx, temp) > dea) {
    vs = 2;
  } else {
    vs = 1;
  }

  while (vs == 1 || (vs == 2 && dist(tx, temp) <= t)) {
    dea = dist(tx, temp);
    arr.push_back(temp);
    temp = next(temp, ax, bx, ay, by);
    if (vs == 1 && dea < dist(tx, temp)) {
      vs = 2;
    }
  }

  ll ans = 0;
  for (int i = 0; i < arr.size(); i++) {
    ll j = i;
    ll dus = dist(tx, arr[i]);
    ll tx_dist = dus;
    if (dus <= t) {
      while (j < arr.size() - 1 && dus <= t) {
        j++;
        dus += dist(arr[j], arr[j - 1]);
      }
      if (dus <= t) {
        ans = max(ans, j - i + 1);
      } else {
        ans = max(ans, j - i);
      }
      dus = tx_dist;
      j = i;
      while (j > 0 && dus <= t) {
        j--;
        dus += dist(arr[j], arr[j + 1]);
      }
      if (dus <= t) {
        ans = max(ans, i - j + 1);
      } else {
        ans = max(ans, i - j);
      }
    }
  }

  cout << ans;

  return 0;
}