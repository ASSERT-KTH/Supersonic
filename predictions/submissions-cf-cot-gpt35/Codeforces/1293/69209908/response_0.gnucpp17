#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

long long xx, yy, ax, bx, ay, by, xs, ys, t;

long long dist(pair<long long, long long> a, pair<long long, long long> b) {
  return abs(a.first - b.first) + abs(a.second - b.second);
}

pair<long long, long long> next(pair<long long, long long> temp) {
  return make_pair(ax * temp.first + bx, ay * temp.second + by);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);

  cin >> xx >> yy >> ax >> ay >> bx >> by >> xs >> ys >> t;

  pair<long long, long long> temp = make_pair(xx, yy);
  pair<long long, long long> tx = make_pair(xs, ys);
  vector<pair<long long, long long>> arr;

  long long dea = dist(temp, tx);
  if (dea <= t)
    arr.push_back(temp);

  temp = next(temp);
  int vs = (dist(tx, temp) > dea) ? 2 : 1;

  while (vs == 1 || (vs == 2 && dist(tx, temp) <= t)) {
    dea = dist(tx, temp);
    arr.push_back(temp);
    temp = next(temp);
    if (vs == 1 && dea < dist(tx, temp))
      vs = 2;
  }

  int n = arr.size();
  long long ans = 0;
  for (int i = 0; i < n; i++) {
    int forward_j = i;
    int backward_j = i;
    long long forward_dus = dist(tx, arr[i]);
    long long backward_dus = forward_dus;

    if (forward_dus <= t) {
      while (forward_j < n - 1 && forward_dus <= t) {
        forward_j++;
        forward_dus += dist(arr[forward_j], arr[forward_j - 1]);
      }
      if (forward_dus <= t)
        ans = max(ans, (long long)forward_j - i + 1);
      else
        ans = max(ans, (long long)forward_j - i);
      
      forward_dus = backward_dus;
      forward_j = i;

      while (backward_j > 0 && backward_dus <= t) {
        backward_j--;
        backward_dus += dist(arr[backward_j], arr[backward_j + 1]);
      }
      if (backward_dus <= t)
        ans = max(ans, (long long)i - backward_j + 1);
      else
        ans = max(ans, (long long)i - backward_j);
    }
  }

  cout << ans;

  return 0;
}