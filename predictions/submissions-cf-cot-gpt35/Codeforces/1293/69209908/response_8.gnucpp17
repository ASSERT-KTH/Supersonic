#include <iostream>
#include <vector>
#include <utility>
#include <cmath>
#include <algorithm>

using namespace std;

pair<long long, long long> next(pair<long long, long long> temp, long long ax, long long bx, long long ay, long long by) {
  return make_pair(ax * temp.first + bx, ay * temp.second + by);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  
  long long xx, yy, ax, bx, ay, by, xs, ys, t;
  cin >> xx >> yy >> ax >> ay >> bx >> by >> xs >> ys >> t;
  
  pair<long long, long long> temp = make_pair(xx, yy);
  pair<long long, long long> tx = make_pair(xs, ys);
  
  vector<pair<long long, long long>> arr;
  
  long long dea = abs(temp.first - tx.first) + abs(temp.second - tx.second);
  if (dea <= t) {
    arr.push_back(temp);
  }
  
  temp = next(temp, ax, bx, ay, by);
  
  while (true) {
    long long new_dea = abs(tx.first - temp.first) + abs(tx.second - temp.second);
    if (new_dea > dea || new_dea > t) {
      break;
    }
    dea = new_dea;
    arr.push_back(temp);
    temp = next(temp, ax, bx, ay, by);
  }
  
  long long ans = 0;
  
  for (int i = 0; i < arr.size(); i++) {
    long long j = i;
    long long dus = abs(tx.first - arr[i].first) + abs(tx.second - arr[i].second);
    long long tx = dus;
    if (dus <= t) {
      while (j < arr.size() - 1) {
        j++;
        dus += abs(arr[j].first - arr[j - 1].first) + abs(arr[j].second - arr[j - 1].second);
        if (dus > t) {
          break;
        }
      }
      if (dus <= t) {
        ans = max(ans, j - i + 1);
      } else {
        ans = max(ans, j - i);
      }
      dus = tx;
      j = i;
      while (j > 0) {
        j--;
        dus += abs(arr[j].first - arr[j + 1].first) + abs(arr[j].second - arr[j + 1].second);
        if (dus > t) {
          break;
        }
      }
      if (dus <= t) {
        ans = max(ans, i - j + 1);
      } else {
        ans = max(ans, i - j);
      }
    }
  }
  
  cout << ans << endl;
  
  return 0;
}