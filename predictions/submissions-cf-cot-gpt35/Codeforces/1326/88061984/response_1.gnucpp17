#include <iostream>
#include <string>

int kmp(const std::string& s) {
  int lps = 0;
  for (int i = 1; i < s.size(); i++) {
    int previous_index = lps;
    while (previous_index > 0 && s[i] != s[previous_index]) {
      previous_index = lps[previous_index - 1];
    }
    lps = previous_index + (s[i] == s[previous_index] ? 1 : 0);
  }
  return lps;
}

std::string longestPrefixSuffixPalindrome(const std::string& s) {
  int length = 0;
  int n = s.size();
  int i = 0, j = n - 1;
  while (i < j && s[i] == s[j]) {
    length++;
    i++;
    j--;
  }
  std::string ans = s.substr(0, length);
  std::string remaining = s.substr(length, (n - (2 * length)));
  if (!remaining.empty()) {
    int longest_prefix = kmp(remaining);
    std::string reversed_remaining = remaining;
    std::reverse(reversed_remaining.begin(), reversed_remaining.end());
    int longest_suffix = kmp(reversed_remaining);
    if (longest_prefix > longest_suffix) {
      ans += remaining.substr(0, longest_prefix);
    } else {
      ans += reversed_remaining.substr(0, longest_suffix);
    }
  }
  ans += s.substr(n - length, length);
  return ans;
}

int main() {
  int t;
  std::cin >> t;
  while (t--) {
    std::string str;
    std::cin >> str;
    std::string ans = longestPrefixSuffixPalindrome(str);
    std::cout << ans << std::endl;
  }
  return 0;
}