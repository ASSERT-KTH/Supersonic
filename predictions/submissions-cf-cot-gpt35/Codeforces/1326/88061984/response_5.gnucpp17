#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

int kmp(const string& s) {
  int n = s.size();
  int previous_index = 0;
  for (int i = 1; i < n; i++) {
    while (previous_index > 0 && s[i] != s[previous_index]) {
      previous_index = lps[previous_index - 1];
    }
    previous_index += (s[i] == s[previous_index] ? 1 : 0);
  }
  return previous_index;
}

int remainingStringLongestPallindrome(const string& s) {
  string t = s + "?";
  string reversed_s = s;
  reverse(reversed_s.begin(), reversed_s.end());
  t += reversed_s;
  return kmp(t);
}

string longestPrefixSuffixPallindrome(const string& s) {
  size_t length = 0;
  size_t n = s.size();
  for (size_t i = 0, j = n - 1; i < j; i++, j--) {
    if (s[i] != s[j]) {
      break;
    }
    length++;
  }
  string ans = s.substr(0, length);
  if (length < n) {
    string remaining = s.substr(length, n - 2 * length);
    int longest_palindrome = remainingStringLongestPallindrome(remaining);
    string reversed_remaining = remaining;
    reverse(reversed_remaining.begin(), reversed_remaining.end());
    int longest_suffix = remainingStringLongestPallindrome(reversed_remaining);
    if (longest_palindrome > longest_suffix) {
      ans.append(remaining.substr(0, longest_palindrome));
    } else {
      ans.append(reversed_remaining.substr(0, longest_suffix));
    }
  }
  ans.append(s.substr(n - length, length));
  return ans;
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    string str;
    cin >> str;
    string ans = longestPrefixSuffixPallindrome(str);
    cout << ans << endl;
  }
}