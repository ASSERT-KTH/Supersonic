#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int kmp(const string& s) {
    vector<int> lps(s.size(), 0);
    int previous_index = 0;
    for (int i = 1; i < s.size(); i++) {
        while (previous_index > 0 && s[i] != s[previous_index]) {
            previous_index = lps[previous_index - 1];
        }
        if (s[i] == s[previous_index]) {
            previous_index++;
        }
        lps[i] = previous_index;
    }
    return lps.back();
}

int remainingStringLongestPallindrome(const string& s) {
    string t = s + "?";
    reverse(s.begin(), s.end());
    t += s;
    return kmp(t);
}

string longestPrefixSuffixPallindrome(const string& s) {
    int n = s.size();
    int length = 0;
    for (int i = n / 2, j = n - 1; i >= 0 && j >= n / 2; i--, j--) {
        if (s[i] != s[j]) {
            break;
        }
        length++;
    }
    string ans = s.substr(0, length);
    string remaining = s.substr(length, n - (2 * length));
    if (!remaining.empty()) {
        int longest_prefix = remainingStringLongestPallindrome(remaining);
        reverse(remaining.begin(), remaining.end());
        int longest_suffix = remainingStringLongestPallindrome(remaining);
        if (longest_prefix > longest_suffix) {
            reverse(remaining.begin(), remaining.end());
            ans += remaining.substr(0, longest_prefix);
        } else {
            ans += remaining.substr(0, longest_suffix);
        }
    }
    ans += s.substr(n - length, length);
    return ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int t;
    cin >> t;
    while (t--) {
        string str;
        cin >> str;
        string ans = longestPrefixSuffixPallindrome(str);
        cout << ans << endl;
    }
}