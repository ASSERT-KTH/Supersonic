#include <iostream>
#include <string>
#include <algorithm>

int kmp(const std::string& s) {
  int n = s.size();
  std::vector<int> lps(n, 0);
  int length = 0;
  
  for (int i = 1; i < n; i++) {
    while (length > 0 && s[i] != s[length]) {
      length = lps[length - 1];
    }
    if (s[i] == s[length]) {
      length++;
    }
    lps[i] = length;
  }
  
  return lps[n - 1];
}

std::string longestPrefixSuffixPallindrome(const std::string& s) {
  int n = s.size();
  int length = 0;
  
  for (int i = 0, j = n - 1; i < j; i++, j--) {
    if (s[i] != s[j]) {
      break;
    }
    length++;
  }
  
  std::string ans = s.substr(0, length);
  std::string remaining = s.substr(length, n - 2 * length);
  
  if (!remaining.empty()) {
    std::string rev_remaining = remaining;
    std::reverse(rev_remaining.begin(), rev_remaining.end());
    int longest_prefix = kmp(remaining);
    int longest_suffix = kmp(rev_remaining);
    
    if (longest_prefix > longest_suffix) {
      ans += remaining.substr(0, longest_prefix);
    } else {
      std::reverse(remaining.begin(), remaining.end());
      ans += remaining.substr(0, longest_suffix);
    }
  }
  
  ans += s.substr(n - length, length);
  return ans;
}

int main() {
  int t;
  std::cin >> t;
  
  while (t--) {
    std::string str;
    std::cin >> str;
    std::string ans = longestPrefixSuffixPallindrome(str);
    std::cout << ans << std::endl;
  }
  
  return 0;
}