#include <iostream>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;

int kmp(string s) {
    vector<int> lps(s.size());
    for (int i = 1; i < s.size(); i++) {
        int previous_index = lps[i - 1];
        while (previous_index > 0 && s[i] != s[previous_index]) {
            previous_index = lps[previous_index - 1];
        }
        lps[i] = previous_index + (s[i] == s[previous_index]);
    }
    return lps.back();
}

int remainingStringLongestPallindrome(string s) {
    reverse(s.begin(), s.end());
    s += "?";
    return kmp(s);
}

string longestPrefixSuffixPallindrome(string s) {
    int length = 0;
    int n = s.size();
    for (int i = 0, j = n - 1; i < j; i++, j--) {
        if (s[i] != s[j]) {
            break;
        }
        length++;
    }
    string ans = s.substr(0, length);
    string remaining = s.substr(length, n - 2 * length);
    if (!remaining.empty()) {
        int longest_prefix = remainingStringLongestPallindrome(remaining);
        reverse(remaining.begin(), remaining.end());
        int longest_suffix = remainingStringLongestPallindrome(remaining);
        ans += (longest_prefix > longest_suffix) ? remaining.substr(0, longest_prefix) : remaining.substr(0, longest_suffix);
    }
    ans += s.substr(n - length, length);
    return ans;
}

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        char str[100001];
        scanf("%s", str);
        string ans = longestPrefixSuffixPallindrome(str);
        printf("%s\n", ans.c_str());
    }
    return 0;
}