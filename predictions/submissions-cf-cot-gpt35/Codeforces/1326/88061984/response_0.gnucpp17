#include <iostream>
#include <algorithm>
#include <string>
#include <vector>

int kmp(const std::string& s) {
    std::vector<int> lps(s.size(), 0);
    for (int i = 1; i < s.size(); i++) {
        int previous_index = lps[i - 1];
        while (previous_index > 0 && s[i] != s[previous_index]) {
            previous_index = lps[previous_index - 1];
        }
        lps[i] = previous_index + (s[i] == s[previous_index] ? 1 : 0);
    }
    return lps[lps.size() - 1];
}

std::string longestPrefixSuffixPalindrome(const std::string& s) {
    int n = s.size();
    int longest_palindrome = kmp(s);
    std::string ans = s.substr(0, longest_palindrome);
    ans += s.substr(n - longest_palindrome, longest_palindrome);
    return ans;
}

int main() {
    int t;
    std::cin >> t;
    while (t--) {
        std::string str;
        std::cin >> str;
        std::string ans = longestPrefixSuffixPalindrome(str);
        std::cout << ans << std::endl;
    }
    return 0;
}