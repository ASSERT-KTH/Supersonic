Step 1: Remove unnecessary includes
The program includes the `<bits/stdc++.h>` header, which is not necessary. We can remove it.

Step 2: Pass vector by reference
In the `rec` function, the vector `A` is passed by value. This means that a copy of the vector is made every time the function is called. This can be avoided by passing the vector by reference.

Step 3: Use bitwise AND instead of bitwise shift
In the `rec` function, the bitwise shift operation is used to check if the p-th bit of a number is set. This can be replaced with a bitwise AND operation for better performance.

Step 4: Use a single vector instead of two vectors
In the `rec` function, two vectors `B` and `C` are used to store the numbers with the p-th bit set and not set, respectively. Instead of using two vectors, we can use a single vector and keep track of the counts of numbers with the p-th bit set and not set.

Step 5: Use a single if statement instead of three if statements
In the `rec` function, there are three if statements to check the sizes of vectors A, B, and C. Instead of using three if statements, we can use a single if-else statement to check if the size of vector A is equal to the size of vector B, and if not, we can assume it is equal to the size of vector C.

Step 6: Remove unnecessary return statement
At the end of the `rec` function, there is a return statement with the value 0. This line of code is unnecessary and can be removed.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int rec(vector<int>& A, int p) {
  if (p == -1)
    return 0;

  int countB = 0, countC = 0;
  for (int x : A) {
    if (x & (1 << p))
      countB++;
    else
      countC++;
  }

  if (countB == A.size()) {
    return rec(A, p - 1);
  } else {
    return (1 << p) + min(rec(A, p - 1), rec(A, p - 1));
  }
}

int main() {
  int n;
  cin >> n;
  vector<int> A(n);
  for (int i = 0; i < n; i++) {
    cin >> A[i];
  }
  cout << rec(A, 30) << endl;
}
```