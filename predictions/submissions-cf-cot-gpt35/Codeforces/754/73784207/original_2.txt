To optimize the given program, we can make the following modifications:

1. Remove unnecessary header files: The program includes the `<bits/stdc++.h>` header file, which includes a large number of standard library header files. Instead of including this file, we can include only the necessary header files.

2. Remove unnecessary typedefs: The program defines several typedefs for `ll`, `pii`, and `pll`. Since these typedefs are not used in the program, we can remove them.

3. Remove unnecessary overloaded output stream operators: The program defines overloaded output stream operators for `vector`, `set`, `multiset`, `pair`, and `map`. Since these overloaded operators are not used in the program, we can remove them.

4. Remove unnecessary functions: The program defines the `fast` function, which sets the `ios_base::sync_with_stdio`, `cin.tie`, and `cout.tie` flags. Since these flags are not used in the program, we can remove the `fast` function.

5. Use `emplace_back` instead of `push_back`: The program uses `push_back` to add elements to vectors. We can use `emplace_back` instead, which constructs the object in-place and avoids unnecessary copies.

6. Use a vector instead of a map for `mp`: The program uses a map to store the indices of elements in `v`. We can use a vector instead, as the indices are consecutive integers.

7. Use a vector instead of a map for `inv_map`: The program uses a map to store the original values corresponding to the indices in `mp`. We can use a vector instead, as the indices are consecutive integers.

8. Use vector `assign` instead of a loop to initialize `mp` and `inv_map`: The program uses a loop to initialize `mp` and `inv_map` with default values. We can use the `assign` function to initialize them with default values.

9. Use a vector instead of a map for `segtree` and `lazy`: The program uses maps to store segment tree values and lazy propagation values. We can use vectors instead, as the indices are consecutive integers.

10. Use `emplace_back` instead of `push_back` for `ans`: The program uses `push_back` to add elements to the `ans` vector. We can use `emplace_back` instead, which constructs the object in-place and avoids unnecessary copies.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;

const int N = 6e5 + 5;

struct Interval {
    long long first;
    long long second;
    int index;
};

bool operator<(const Interval& a, const Interval& b) {
    return a.first < b.first;
}

int n, k;
vector<Interval> v;
vector<int> mp;
vector<long long> inv_map;
vector<int> segtree;
vector<int> lazy;

void spread(int node, int l, int r) {
    if (lazy[node] != 0) {
        segtree[node] += lazy[node];
        if (l != r) {
            lazy[2 * node + 1] += lazy[node];
            lazy[2 * node + 2] += lazy[node];
        }
    }
    lazy[node] = 0;
}

void update(int x, int y, int val, int node = 0, int l = 0, int r = N - 1) {
    spread(node, l, r);
    if (l > y || r < x || x > y)
        return;
    if (l >= x && r <= y) {
        lazy[node] += val;
        spread(node, l, r);
        return;
    }
    int mid = (l + r) >> 1;
    update(x, y, val, 2 * node + 1, l, mid);
    update(x, y, val, 2 * node + 2, mid + 1, r);
    segtree[node] = min(segtree[2 * node + 1], segtree[2 * node + 2]);
}

int query(int x, int y, int node = 0, int l = 0, int r = N - 1) {
    spread(node, l, r);
    if (l > y || r < x)
        return INT_MAX - 1;
    if (l >= x && r <= y) {
        return segtree[node];
    }
    int mid = (l + r) >> 1;
    return min(query(x, y, 2 * node + 1, l, mid),
        query(x, y, 2 * node + 2, mid + 1, r));
}

void solve() {
    sort(v.begin(), v.end());
    for (auto& i : v) {
        mp[i.first] = 0;
        mp[i.second] = 0;
    }
    int c = 0;
    for (auto& i : mp) {
        inv_map[c] = i.first;
        i.second = c++;
    }
    long long mx = 0, idx = -1;
    for (int i = 0; i < n; i++) {
        update(mp[v[i].first], mp[v[i].second], 1);
        int scaled_val = mp[v[i].first];
        int tt = -1;
        int s = scaled_val, e = c;
        while (s <= e) {
            int mid = (s + e) >> 1;
            int val = query(scaled_val, mid);
            if (val >= k) {
                tt = mid;
                s = mid + 1;
            } else
                e = mid - 1;
        }
        if (tt == -1)
            continue;
        long long temp = inv_map[tt] - v[i].first + 1;
        if (temp > mx) {
            mx = temp;
            idx = i;
        }
    }
    if (idx == -1) {
        cout << 0 << endl;
        for (int i = 1; i <= k; i++)
            cout << i << ' ';
        cout << endl;
        return;
    }
    long long l = v[idx].first, r = l + mx - 1;
    vector<int> ans;
    for (auto& i : v) {
        if (k == 0)
            break;
        if (i.first <= l && r <= i.second) {
            ans.emplace_back(i.index);
            k--;
        }
    }
    sort(ans.begin(), ans.end());
    cout << mx << endl;
    for (int i : ans)
        cout << i << " ";
    cout << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n >> k;
    v.resize(n);
    mp.resize(N);
    inv_map.resize(N);
    segtree.resize(4 * N, 0);
    lazy.resize(4 * N, 0);

    for (int i = 0; i < n; i++) {
        cin >> v[i].first >> v[i].second;
        v[i].index = i + 1;
    }

    solve();

    return 0;
}
```