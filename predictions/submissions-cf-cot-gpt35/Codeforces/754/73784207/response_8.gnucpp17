#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <climits>

using namespace std;

const int N = 6e5 + 5;

struct Interval {
    long long start;
    long long end;
    int index;
};

vector<Interval> intervals;
map<long long, int> mp;
vector<long long> inv_map(N);
int n, k;
vector<int> segtree(4 * N, 0), lazy(4 * N, 0);

void spread(int node, int l, int r) {
    if (lazy[node] != 0) {
        segtree[node] += lazy[node];
        if (l != r) {
            lazy[2 * node + 1] += lazy[node];
            lazy[2 * node + 2] += lazy[node];
        }
    }
    lazy[node] = 0;
}

void update(int x, int y, int val, int node = 0, int l = 0, int r = N - 1) {
    spread(node, l, r);
    if (l > y || r < x || x > y)
        return;
    if (l >= x && r <= y) {
        lazy[node] += val;
        spread(node, l, r);
        return;
    }
    int mid = (l + r) >> 1;
    update(x, y, val, 2 * node + 1, l, mid);
    update(x, y, val, 2 * node + 2, mid + 1, r);
    segtree[node] = min(segtree[2 * node + 1], segtree[2 * node + 2]);
}

int query(int x, int y, int node = 0, int l = 0, int r = N - 1) {
    spread(node, l, r);
    if (l > y || r < x)
        return INT_MAX - 1;
    if (l >= x && r <= y) {
        return segtree[node];
    }
    int mid = (l + r) >> 1;
    return min(query(x, y, 2 * node + 1, l, mid),
               query(x, y, 2 * node + 2, mid + 1, r));
}

void solve() {
    sort(intervals.begin(), intervals.end(), [](const Interval& a, const Interval& b) {
        return a.start < b.start;
    });

    for (const auto& interval : intervals) {
        mp[interval.start] = 0;
        mp[interval.end] = 0;
    }

    int c = 0;
    for (auto& entry : mp) {
        inv_map[c] = entry.first;
        entry.second = c++;
    }

    long long mx = 0, idx = -1;
    int left = 0, right = 0;
    while (right < n) {
        update(mp[intervals[right].start], mp[intervals[right].end], 1);
        while (left <= right && query(mp[intervals[left].start], mp[intervals[left].end]) < k) {
            update(mp[intervals[left].start], mp[intervals[left].end], -1);
            left++;
        }
        if (query(mp[intervals[left].start], mp[intervals[left].end]) >= k) {
            long long temp = inv_map[right] - intervals[left].start + 1;
            if (temp > mx) {
                mx = temp;
                idx = left;
            }
        }
        right++;
    }

    if (idx == -1) {
        cout << 0 << endl;
        for (int i = 1; i <= k; i++)
            cout << i << ' ';
        cout << endl;
        return;
    }

    long long l = intervals[idx].start, r = l + mx - 1;
    vector<int> ans;
    for (const auto& interval : intervals) {
        if (k == 0)
            break;
        if (interval.start <= l && r <= interval.end) {
            ans.push_back(interval.index);
            k--;
        }
    }
    sort(ans.begin(), ans.end());
    cout << mx << endl;
    for (int i : ans)
        cout << i << " ";
    cout << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n >> k;
    intervals.resize(n);
    for (int i = 0; i < n; i++) {
        cin >> intervals[i].start >> intervals[i].end;
        intervals[i].index = i + 1;
    }
    solve();

    return 0;
}