#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <climits>
#include <limits>

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::pair<ll, ll> pll;

const int N = 6e5 + 5;

std::vector<std::pair<pll, int>> v;
std::map<ll, int> mp;
std::vector<ll> inv_map(N);
int n, k;
std::vector<bool> segtree(4 * N, false), lazy(4 * N, false);

void spread(int node, int l, int r) {
  if (lazy[node]) {
    segtree[node] = true;
    if (l != r) {
      lazy[2 * node + 1] = true;
      lazy[2 * node + 2] = true;
    }
  }
  lazy[node] = false;
}

void update(int x, int y, int val, int node = 0, int l = 0, int r = N - 1) {
  spread(node, l, r);
  if (l > y || r < x)
    return;
  if (l >= x && r <= y) {
    lazy[node] = true;
    spread(node, l, r);
    return;
  }
  int mid = (l + r) >> 1;
  update(x, y, val, 2 * node + 1, l, mid);
  update(x, y, val, 2 * node + 2, mid + 1, r);
  segtree[node] = segtree[2 * node + 1] || segtree[2 * node + 2];
}

int query(int x, int y, int node = 0, int l = 0, int r = N - 1) {
  spread(node, l, r);
  if (l > y || r < x)
    return std::numeric_limits<int>::max() - 1;
  if (l >= x && r <= y) {
    return segtree[node] ? 1 : 0;
  }
  int mid = (l + r) >> 1;
  return std::min(query(x, y, 2 * node + 1, l, mid),
                  query(x, y, 2 * node + 2, mid + 1, r));
}

void solve() {
  std::sort(v.begin(), v.end());
  for (auto &i : v) {
    mp[i.first.first] = 0;
    mp[i.first.second] = 0;
  }
  int c = 0;
  for (auto &i : mp) {
    inv_map[c] = i.first;
    i.second = c++;
  }
  ll mx = 0, idx = -1;
  for (int i = 0; i < n; i++) {
    update(mp[v[i].first.first], mp[v[i].first.second], 1);
    int scaled_val = mp[v[i].first.first];
    int tt = -1;
    int s = scaled_val, e = c;
    while (s <= e) {
      int mid = (s + e) >> 1;
      int val = query(scaled_val, mid);
      if (val >= k) {
        tt = mid;
        s = mid + 1;
      } else
        e = mid - 1;
    }
    if (tt == -1)
      continue;
    ll temp = inv_map[tt] - v[i].first.first + 1;
    if (temp > mx) {
      mx = temp;
      idx = i;
    }
  }
  if (idx == -1) {
    std::cout << 0 << '\n';
    for (int i = 1; i <= k; i++)
      std::cout << i << ' ';
    std::cout << '\n';
    return;
  }
  ll l = v[idx].first.first, r = l + mx - 1;
  std::vector<int> ans;
  for (auto &i : v) {
    if (k == 0)
      break;
    if (i.first.first <= l && r <= i.first.second) {
      ans.push_back(i.second);
      k--;
    }
  }
  std::cout << mx << '\n';
  for (int i : ans)
    std::cout << i << ' ';
  std::cout << '\n';
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  std::cin >> n >> k;
  for (int i = 1; i <= n; i++) {
    ll a, b;
    std::cin >> a >> b;
    v.emplace_back(std::make_pair(a, b), i);
  }
  solve();

  return 0;
}