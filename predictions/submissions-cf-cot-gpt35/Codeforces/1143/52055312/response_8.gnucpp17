#include <iostream>
#include <vector>
#include <queue>
#include <sstream>

const int N = 100005;

int n, x, y, t;
std::vector<std::vector<int>> tree(N);
int c[N], par[N], h[N];
std::vector<int> ans;

void built_h(int root) {
  std::queue<int> q;
  q.push(root);
  h[root] = 1;
  while (!q.empty()) {
    int node = q.front();
    q.pop();
    for (int neighbor : tree[node]) {
      if (neighbor != par[node]) {
        h[neighbor] = h[node] + 1;
        q.push(neighbor);
      }
    }
  }
}

int main() {
  std::cin >> n;
  for (int i = 1; i <= n; i++) {
    std::cin >> x >> y;
    if (x == -1) {
      t = i;
      par[i] = i;
    } else {
      par[i] = x;
      tree[x].push_back(i);
    }
    c[i] = y;
  }

  built_h(t);

  for (int i = 1; i <= n; i++) {
    bool ok = false;
    for (int j = 0; j < tree[i].size(); j++) {
      if (!c[tree[i][j]]) {
        ok = true;
        break;
      }
    }
    if (!c[i])
      ok = true;
    if (!ok)
      ans.push_back(i);
  }

  if (ans.empty()) {
    std::cout << -1;
  } else {
    std::stringstream ss;
    for (int i : ans) {
      ss << i << " ";
    }
    std::cout << ss.str();
  }

  return 0;
}