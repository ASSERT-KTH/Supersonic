The program reads an input describing a tree structure, where each node has a parent and a value. The goal is to find all the nodes that have all their descendants with a non-zero value.

To optimize the program, we can make the following modifications:

1. Remove unnecessary includes: The program includes the `<bits/stdc++.h>` header, which is not necessary. We can remove this line.

2. Remove unused variables: The variables `t` and `yes` are declared but not used. We can remove these variable declarations.

3. Use pass-by-reference for the `built_h` function: The `built_h` function takes the parameters `i` and `k` by value, but it modifies the `h` array. We can pass `h` by reference to avoid unnecessary copying.

4. Use range-based for loops: Instead of using an index-based for loop to iterate over the elements of `tree[i]`, we can use a range-based for loop.

5. Use `reserve` for `tree` vector: Since we know the size of the `tree` vector in advance, we can use the `reserve` function to allocate memory for the vector. This can help improve performance by avoiding unnecessary reallocations.

6. Use `reserve` for `ans` vector: Similar to the previous optimization, we can use the `reserve` function to allocate memory for the `ans` vector.

7. Use `emplace_back` instead of `push_back`: Instead of using `push_back` to add elements to the `tree` vector, we can use `emplace_back` to construct the elements in-place.

8. Remove unnecessary conditional: The conditional `if (x != -1)` before calling `tree[x].push_back(i)` is not necessary. We can directly call `tree[x].push_back(i)`.

9. Use `back_inserter` for `ans` vector: Instead of using the index `i` to add elements to the `ans` vector, we can use the `back_inserter` iterator to append elements to the end of the vector.

Here's the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

#define N 100005

using namespace std;

int n, x, y;
vector<vector<int>> tree;
vector<int> c, par, h, ve, ans;

bool cmp(int x, int y) {
  return h[x] > h[y];
}

void built_h(int i, int k, vector<int>& h) {
  for (int j : tree[i]) {
    if (par[i] != j) {
      h[j] = k + 1;
      built_h(j, k + 1, h);
    }
  }
}

int main() {
  cin >> n;

  tree.reserve(n + 1);
  c.reserve(n + 1);
  par.reserve(n + 1);
  h.resize(n + 1);
  ve.resize(n + 1);
  ans.reserve(n + 1);

  for (int i = 1; i <= n; i++) {
    ve[i] = i;
    cin >> x >> y;
    if (x == -1)
      par[i] = i;
    else
      par[i] = x;
    c[i] = y;
    tree[par[i]].emplace_back(i);
  }

  h[par[1]] = 1;
  built_h(par[1], 1, h);

  sort(ve.begin() + 1, ve.end(), cmp);

  for (int i = 1; i <= n; i++) {
    bool ok = false;
    for (int j : tree[ve[i]]) {
      if (!c[j]) {
        ok = true;
        break;
      }
    }
    if (!c[ve[i]])
      ok = true;
    if (!ok)
      ans.emplace_back(ve[i]);
  }

  if (ans.empty())
    cout << -1;
  else
    for (int i : ans)
      cout << i << " ";

  return 0;
}
```

These optimizations should improve the running time and memory usage of the program.