#include <iostream>
#include <vector>
using namespace std;

const int N = 100005;

int n, x, y, t;
vector<vector<int>> tree;
vector<int> c, par, h, ve;
vector<bool> ans;

bool cmp(int x, int y) {
  return h[x] > h[y];
}

void built_h(int i, int k) {
  for (int j : tree[i]) {
    if (par[i] != j) {
      h[j] = k + 1;
      built_h(j, k + 1);
    }
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);

  cin >> n;

  tree.resize(n + 1);
  c.resize(n + 1);
  par.resize(n + 1);
  h.resize(n + 1);
  ve.resize(n + 1);
  ans.reserve(n);

  for (int i = 1; i <= n; i++) {
    ve[i] = i;
    cin >> x >> y;
    if (x == -1) {
      t = i;
      par[i] = i;
    }
    else {
      par[i] = x;
    }
    c[i] = y;
    if (x != -1) {
      tree[x].emplace_back(i);
    }
  }

  h[t] = 1;
  built_h(t, 1);

  sort(ve.begin() + 1, ve.end(), cmp);

  for (int i = 1; i <= n; i++) {
    bool ok = false;
    for (int j : tree[ve[i]]) {
      if (!c[j]) {
        ok = true;
        break;
      }
    }
    if (!c[ve[i]]) {
      ok = true;
    }
    if (!ok) {
      ans.emplace_back(true);
    }
  }

  if (ans.empty()) {
    cout << -1;
  }
  else {
    for (int i = 1; i <= n; i++) {
      if (ans[i]) {
        cout << i << " ";
      }
    }
  }

  return 0;
}