#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool cmp(int x, int y) {
  return h[x] > h[y];
}

void built_h(const vector<vector<int>>& tree, vector<int>& h, int i, int k) {
  for (int j : tree[i]) {
    if (par[i] != j) {
      h[j] = k + 1;
      built_h(tree, h, j, k + 1);
    }
  }
}

int main() {
  int n;
  cin >> n;

  vector<int> x(n + 1), y(n + 1), c(n + 1), par(n + 1), h(n + 1), ve(n + 1);
  vector<vector<int>> tree(n + 1);

  int t = 0;
  for (int i = 1; i <= n; i++) {
    ve[i] = i;
    cin >> x[i] >> y[i];

    if (x[i] == -1) {
      t = i;
      par[i] = i;
    } else {
      par[i] = x[i];
      tree[x[i]].push_back(i);
    }

    c[i] = y[i];
  }

  h[t] = 1;
  built_h(tree, h, t, 1);

  sort(ve.begin() + 1, ve.end(), cmp);

  vector<bool> ans(n + 1, false);
  bool yes = false;

  for (int i = 1; i <= n; i++) {
    bool ok = false;
    for (int j : tree[ve[i]]) {
      if (!c[j]) {
        ok = true;
        break;
      }
    }
    
    if (!c[ve[i]]) {
      ok = true;
    }

    if (!ok) {
      ans[ve[i]] = true;
      yes = true;
    }
  }

  if (!yes) {
    cout << -1;
  } else {
    for (int i = 1; i <= n; i++) {
      if (ans[i]) {
        cout << i << " ";
      }
    }
  }

  return 0;
}