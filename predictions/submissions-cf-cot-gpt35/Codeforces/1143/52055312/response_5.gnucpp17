#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int N = 100005;

int n, x, y, t;
vector<vector<int>> tree;
vector<int> c, par, h, ve;
bool yes;

bool cmp(int x, int y) {
    return h[x] > h[y];
}

void built_h() {
    vector<int> stack;
    stack.push_back(t);
    while (!stack.empty()) {
        int i = stack.back();
        stack.pop_back();
        for (int j = 0; j < tree[i].size(); j++) {
            if (par[i] != tree[i][j]) {
                h[tree[i][j]] = h[i] + 1;
                stack.push_back(tree[i][j]);
            }
        }
    }
}

int main() {
    cin >> n;
    tree.reserve(n + 1);
    c.resize(n + 1);
    par.resize(n + 1);
    h.resize(n + 1);
    ve.resize(n + 1);
    for (int i = 1; i <= n; i++) {
        ve[i] = i;
        cin >> x >> y;
        if (x == -1)
            t = i, par[i] = i;
        else
            par[i] = x;
        c[i] = y;
        if (x != -1)
            tree[x].emplace_back(i);
    }
    h[t] = 1;
    built_h();
    sort(ve.begin() + 1, ve.begin() + n + 1, cmp);
    for (int i = 1; i <= n; i++) {
        bool ok = false;
        for (int j = 0; j < tree[ve[i]].size(); j++) {
            if (!c[tree[ve[i]][j]]) {
                ok = true;
                break;
            }
        }
        if (!c[ve[i]])
            ok = true;
        if (!ok)
            yes = true;
    }
    if (!yes)
        cout << -1;
    else
        for (int i = 1; i <= n; i++)
            if (!c[i])
                cout << i << " ";
    return 0;
}