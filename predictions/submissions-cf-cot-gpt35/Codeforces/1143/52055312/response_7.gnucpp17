#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
  int n;
  cin >> n;

  vector<vector<int>> tree(n + 1);
  vector<int> c(n + 1), par(n + 1), h(n + 1), ve(n + 1);
  vector<bool> ans(n + 1, false);
  bool yes = false;

  int t = 0;
  for (int i = 1; i <= n; i++) {
    ve[i] = i;
    int x, y;
    cin >> x >> y;
    if (x == -1) {
      t = i;
      par[i] = i;
    }
    else {
      par[i] = x;
      tree[x].push_back(i);
    }
    c[i] = y;
  }

  h[t] = 1;
  for (int i = 1; i <= n; i++) {
    for (int j = 0; j < tree[ve[i]].size(); j++) {
      int child = tree[ve[i]][j];
      if (par[ve[i]] != child) {
        h[child] = h[ve[i]] + 1;
      }
    }
  }

  sort(ve.begin() + 1, ve.end(), [&](int x, int y) { return h[x] > h[y]; });

  for (int i = 1; i <= n; i++) {
    bool ok = false;
    for (int j = 0; j < tree[ve[i]].size(); j++) {
      if (!c[tree[ve[i]][j]]) {
        ok = true;
        break;
      }
    }
    if (!c[ve[i]]) {
      ok = true;
    }
    if (!ok) {
      ans[ve[i]] = true;
      yes = true;
    }
  }

  if (!yes) {
    cout << -1;
  }
  else {
    for (int i = 1; i <= n; i++) {
      if (ans[i]) {
        cout << i << " ";
      }
    }
  }

  return 0;
}