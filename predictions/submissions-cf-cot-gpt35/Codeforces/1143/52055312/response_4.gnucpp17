#include <iostream>
#include <vector>
#include <queue>
#define N 100005
using namespace std;

int n, x, y, t;
vector<int> tree[N];
int c[N], par[N], h[N], ve[N];
bool ans[N], yes;

void built_h() {
    queue<int> q;
    q.push(t);
    while (!q.empty()) {
        int curr = q.front();
        q.pop();
        for (int i = 0; i < tree[curr].size(); i++) {
            int child = tree[curr][i];
            h[child] = h[curr] + 1;
            q.push(child);
        }
    }
}

int main() {
    cin >> n;
    for (int i = 1; i <= n; i++) {
        ve[i] = i;
        cin >> x >> y;
        if (x == -1) {
            t = i;
            par[i] = i;
        } else {
            par[i] = x;
        }
        c[i] = y;
        if (x != -1) {
            tree[x].push_back(i);
        }
    }
    h[t] = 1;
    built_h();
    
    priority_queue<pair<int, int>> pq;
    for (int i = 1; i <= n; i++) {
        pq.push(make_pair(h[i], i));
    }
    
    while (!pq.empty()) {
        int node = pq.top().second;
        pq.pop();
        bool ok = false;
        for (int i = 0; i < tree[node].size(); i++) {
            int child = tree[node][i];
            if (c[child] == 0) {
                ok = true;
                break;
            }
        }
        if (c[node] == 0) {
            ok = true;
        }
        if (!ok) {
            ans[node] = true;
            yes = true;
        }
    }
    
    if (!yes) {
        cout << -1;
    } else {
        for (int i = 1; i <= n; i++) {
            if (ans[i]) {
                cout << i << " ";
            }
        }
    }
    
    return 0;
}