The given program can be optimized in the following steps:

1. Remove the unnecessary inclusion of the `<bits/stdc++.h>` header file. This header file includes almost all the standard library headers, which may increase the compilation time and memory usage.

2. Remove the unused constant `N` and its usage.

3. Remove the unnecessary `using namespace std;` statement. It is considered a good practice to use the `std::` prefix for standard library elements instead of importing the entire namespace.

4. Instead of using a vector of vectors to represent the tree, use a single vector to store the parent-child relationship. This will reduce the memory usage and simplify the code.

5. Remove the unnecessary `cmp` function and use a lambda function for sorting.

6. Instead of using a separate `built_h` function to calculate the heights of nodes, calculate the heights while reading the input.

7. Remove the unnecessary `yes` variable and use a flag to track if any node is marked as `true`.

8. Remove the unnecessary check for `!yes` in the final output loop.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  int n, x, y, t;
  std::cin >> n;
  
  std::vector<int> parent(n + 1), height(n + 1), cost(n + 1);
  std::vector<bool> answer(n + 1, false);

  for (int i = 1; i <= n; i++) {
    std::cin >> x >> y;
    parent[i] = x;
    cost[i] = y;
    if (x != -1)
      height[i] = height[x] + 1;
    else
      t = i;
  }

  std::vector<int> sorted_nodes(n + 1);
  for (int i = 1; i <= n; i++)
    sorted_nodes[i] = i;
    
  std::sort(sorted_nodes.begin() + 1, sorted_nodes.end(), [&](int x, int y) {
    return height[x] > height[y];
  });

  for (int i = 1; i <= n; i++) {
    bool ok = false;
    for (int j = 1; j <= n; j++) {
      if (parent[sorted_nodes[i]] == sorted_nodes[j] && !cost[sorted_nodes[j]]) {
        ok = true;
        break;
      }
    }
    if (!cost[sorted_nodes[i]])
      ok = true;
    if (!ok)
      answer[sorted_nodes[i]] = true;
  }

  bool flag = false;
  for (int i = 1; i <= n; i++) {
    if (answer[i]) {
      std::cout << i << " ";
      flag = true;
    }
  }
  
  if (!flag)
    std::cout << -1;
}
```

This optimized version of the program reduces memory usage by using a single vector for the parent-child relationship and simplifies the code by eliminating unnecessary functions and checks.