Optimization steps:

1. Remove unnecessary includes: Since we are not using any features from the `<iostream>` library besides `cout` and `cin`, we can remove the `using namespace std` and `<iostream>` include.

2. Use a lookup table: Instead of using a `switch` statement, we can use a lookup table to directly access the desired output based on the value of `n`. This will eliminate the need for multiple conditional branches.

3. Remove unnecessary variable: Since we only use `n` to calculate the value for the lookup table, we can eliminate the variable `n` and directly calculate the index for the lookup table.

4. Optimize input: Instead of reading `a` and `b` separately, we can read them in a single line using a space-separated format.

5. Use a more compact output format: Instead of printing the fractions as strings, we can print them as integers and divide them by their greatest common divisor (GCD) to simplify them.

Optimized code:

```cpp
#include <iostream>

int main() {
  int a, b;
  std::cin >> a >> b;
  
  int lookupTable[] = {6, 3, 2, 3, 6, 1};
  int index = 7 - std::max(a, b) - 1;
  
  int numerator = lookupTable[index];
  int denominator = 6;
  
  // Simplify the fraction
  int gcd = 1;
  for (int i = 1; i <= numerator && i <= denominator; ++i) {
    if (numerator % i == 0 && denominator % i == 0) {
      gcd = i;
    }
  }
  numerator /= gcd;
  denominator /= gcd;
  
  std::cout << numerator << "/" << denominator << std::endl;
  
  return 0;
}
```