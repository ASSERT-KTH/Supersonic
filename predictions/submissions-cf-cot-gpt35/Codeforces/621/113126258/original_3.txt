To optimize the given program, we can make the following modifications:

1. Remove the unnecessary include statement: `#include <bits/stdc++.h>`. This include statement is not necessary and can be removed.

2. Remove the unnecessary macro definitions. The macro definitions `ll`, `mod`, `pii`, `pll`, `N`, `forn`, `pb`, `ld` are not used in the program and can be removed.

3. Remove the unused variable `p`. The variable `p` is declared but not used in the program. We can remove this variable.

4. Remove the unnecessary initialization of `ar[-1]` and `pref[-1]`. The arrays `ar` and `pref` are declared with size `n`, so there is no need to initialize the elements at index `-1`. We can remove these initializations.

5. Use a more efficient formula to calculate `pref[i]`. Instead of calculating `pref[i] = pref[i - 1] * ar[i].first` in each iteration of the loop, we can calculate `pref[i]` using the formula `pref[i] = pref[i - 1] * ar[i].first / ar[i - 1].first` in the loop itself. This saves unnecessary multiplications.

6. Simplify the calculation of `sum`. The calculation of `sum` can be simplified by removing unnecessary type conversions and using a more efficient formula.

7. Optimize the loop for calculating `sum`. The loop for calculating `sum` can be optimized by removing unnecessary divisions and using a more efficient formula.

Here is the optimized program:

```cpp
#include <iostream>
#include <iomanip>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n;
  cin >> n;

  long long ar[n];
  long double pref[n];
  long double sum = 0;

  for (int i = 0; i < n; i++) {
    long long a, b;
    cin >> a >> b;
    ar[i] = b - a + 1;

    if (i == 0)
      pref[i] = ar[i];
    else
      pref[i] = pref[i - 1] * ar[i] / ar[i - 1];
    
    sum += (long double)ar[i] / pref[i];
    if (i > 0)
      sum += (long double)ar[i] / pref[i] * (pref[i - 1] - ar[i - 1]) / pref[i - 1];
  }

  sum += (long double)ar[0] / pref[0] * (ar[0] - 1);
  sum += (long double)ar[n - 1] / pref[n - 1] * (pref[n - 2] - ar[n - 2]) / pref[n - 2];

  cout << setprecision(6) << fixed;
  cout << sum * 2000 << endl;

  return 0;
}
```