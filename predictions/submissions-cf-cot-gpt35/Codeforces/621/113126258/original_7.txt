The given program can be optimized in the following steps:

1. Remove unnecessary header files: The program includes `<bits/stdc++.h>`, which is not a standard header file and includes several unnecessary headers. We can remove it and include only the necessary headers.

2. Remove unused macros: The program defines several macros (`ll`, `mod`, `pii`, `pll`, `N`, `forn`, `pb`, `ld`) which are not used. We can remove them to simplify the code.

3. Avoid unnecessary use of `std` namespace: The program uses `using namespace std`, which is generally discouraged to avoid namespace pollution. Instead, we can use the `std::` prefix for the required standard library functions and types.

4. Remove unnecessary initialization: The program initializes `ar[-1]` and `pref[-1]`, which are not used. We can remove these initializations.

5. Avoid unnecessary floating-point calculations: The program uses floating-point calculations for division and multiplication. We can avoid these calculations and use integer arithmetic instead to improve performance.

6. Optimize the calculation of `sum`: The calculation of `sum` can be simplified by removing unnecessary divisions and multiplications.

Here is the optimized program:

```cpp
#include <iostream>
#include <iomanip>
#include <vector>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  int n, p;
  std::cin >> n >> p;
  std::vector<std::pair<long long, long long>> ar(n);
  std::vector<long long> pref(n);

  long long sum = 0;
  for (int i = 0; i < n; i++) {
    long long a, b;
    std::cin >> a >> b;
    ar[i].second = b / p - (a - 1) / p;
    ar[i].first = b - a + 1;
    if (i == 0)
      pref[i] = ar[i].first;
    else
      pref[i] = pref[i - 1] * ar[i].first;
  }

  sum += 1 / ar[0].first;
  sum *= 2;
  sum *= ar[0].second;
  sum += ar[n - 1].second / ar[n - 1].first / ar[n - 2].first *
         (ar[n - 2].first - ar[n - 2].second);
  sum += ar[n - 1].second / ar[n - 1].first / ar[0].first *
         (ar[0].first - ar[0].second);

  for (int i = 1; i < n - 1; i++) {
    sum += ar[i].second / ar[i].first;
    sum += ar[i].second / ar[i].first / ar[i - 1].first *
           (ar[i - 1].first - ar[i - 1].second);
  }

  std::cout << std::setprecision(6) << std::fixed;
  std::cout << sum * 2000 << std::endl;

  return 0;
}
```