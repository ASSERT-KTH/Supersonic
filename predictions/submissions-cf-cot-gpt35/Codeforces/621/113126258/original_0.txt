The given program calculates a sum and then multiplies it by 2000. The sum is calculated using a loop and several mathematical operations. 

To optimize the program, we can simplify the calculations and reduce the number of operations. Here are the steps to optimize the program:

1. Remove unnecessary includes: The program includes `<bits/stdc++.h>` which includes a large number of headers. We can remove it and include only the necessary headers, `iostream` and `iomanip`.

2. Remove unnecessary macros: The program defines several macros that are not used. We can remove them to simplify the code.

3. Remove unnecessary variables: The program defines `pref` and `ld sum` variables that are not used. We can remove them.

4. Simplify the calculation of `pref`: The program calculates `pref[i]` using the multiplication of all `ar[i].first`. We can simplify it by using the value of `pref[i-1]` and multiplying it by `ar[i].first`.

5. Simplify the calculation of `sum`: The program calculates `sum` using a loop and several divisions. We can simplify it by calculating each term separately and adding it to `sum`.

6. Use integer division: The program uses floating-point division in several places. We can use integer division instead since the variables are integers.

Here is the optimized program:

```cpp
#include <iostream>
#include <iomanip>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n, p;
  cin >> n >> p;

  long long ar[n];
  ar[-1] = 1;
  long long pref = 1;
  long double sum = 0;

  for (int i = 0; i < n; i++) {
    long long a, b;
    cin >> a >> b;
    ar[i] = b / p - (a - 1) / p;
    if (i > 0)
      pref *= ar[i];
  }

  sum += (long double)1 / ar[0];
  sum *= 2;
  sum *= ar[0];
  sum += (long double)ar[n - 1] / ar[n - 1] / ar[n - 2] * (ar[n - 2] - ar[n - 2]);
  sum += (long double)ar[n - 1] / ar[n - 1] / ar[0] * (ar[0] - ar[0]);

  for (int i = 1; i < n - 1; i++) {
    sum += (long double)ar[i] / ar[i];
    sum += (long double)ar[i] / ar[i] / ar[i - 1] * (ar[i - 1] - ar[i - 1]);
  }

  cout << setprecision(6) << fixed;
  cout << (long double)sum * (long double)2000 << endl;

  return 0;
}
```

This optimized program simplifies the calculations and reduces the number of operations, resulting in improved running time and memory usage.