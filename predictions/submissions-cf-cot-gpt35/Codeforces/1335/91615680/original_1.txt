Optimization Steps:

1. Remove the unnecessary `using namespace std` directive.

2. Replace the fixed size array `int arr[200001]` with a dynamic array to reduce memory usage.

3. Instead of using a range-based for loop, use a traditional for loop with an index variable to iterate over the array `arr`. This will improve the performance and avoid creating unnecessary copies of the array elements.

4. Instead of using `if (x)` to check if an element is non-zero, use `if (x != 0)` for clarity.

5. Remove the unnecessary `temp` variable and directly use `maks` to calculate the result.

Optimized Program:

```cpp
#include <iostream>
using std::cin;
using std::cout;
using std::endl;

int main() {
    int t, n, x;
    cin >> t;
    while (t--) {
        int* arr = new int[200001]();
        cin >> n;
        while (n--) {
            cin >> x;
            arr[x]++;
        }
        int maks = 0;
        for (int i = 0; i < 200001; i++) {
            if (arr[i] != 0) {
                maks++;
                if (arr[i] > maks) {
                    maks = arr[i];
                }
            }
        }
        if (maks > 0) {
            maks--;
        }
        cout << std::min(maks, 200001) << endl;
        delete[] arr;
    }
}
```