The given program can be optimized by eliminating unnecessary iterations and using a more efficient data structure.

Step 1: Remove unnecessary iterations
- The program currently iterates through the entire `arr` array to count the number of non-zero elements (`temp`) and find the maximum value (`maks`).
- However, we can optimize this by keeping track of the maximum value and count while reading the input numbers.
- This way, we eliminate the need for the second loop and reduce the number of iterations.

Step 2: Use a more efficient data structure
- The current program uses a static array `arr` with a fixed size of 200001.
- However, the maximum value of `x` can be much smaller than 200001, resulting in wasted memory.
- We can use a `vector` to dynamically allocate memory based on the maximum value of `x`.
- By using a `vector`, we can reduce memory usage and improve performance.

Optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  int t, n, x;
  cin >> t;
  
  while (t--) {
    cin >> n;
    vector<int> arr(1000001, 0); // Use vector instead of static array
    int maks = 0, temp = 0;
    
    while (n--) {
      cin >> x;
      arr[x]++;
      if (arr[x] == maks + 1) {
        temp++;
      } else if (arr[x] > maks) {
        maks = arr[x];
        temp = maks;
      }
    }
    
    if (temp == maks) {
      maks--;
    }
    
    cout << min(temp, maks) << endl;
  }
}
```

Explanation:
- The optimized code eliminates the second loop and uses a `vector` instead of a static array.
- The `vector<int> arr` is initialized with a size of 1000001, which allows indexing up to 1000000.
- During the input loop, we update the count of `x` in `arr` and check if it is the new maximum value.
- If it is the new maximum value, we update both `maks` and `temp`.
- Finally, we compare `temp` and `maks` to find the minimum and print the result.