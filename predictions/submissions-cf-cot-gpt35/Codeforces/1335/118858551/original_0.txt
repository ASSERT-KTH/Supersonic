To optimize the given C/C++ program, we can make the following modifications:

1. Remove unnecessary header files: The program includes `<bits/stdc++.h>` which includes all the standard C++ header files. This can increase the compilation time and memory usage. We can replace it with the specific header files that are actually needed for the program.

2. Remove unused macros: The program defines several macros that are not used. We can remove these macros to simplify the code.

3. Avoid unnecessary data copying: The program creates a vector `v` and copies the input values into it. We can avoid this by directly using the input values without the need for a separate vector.

4. Avoid unnecessary set and map operations: The program uses a set `s` and a map `m` to count the frequency of each element in the input vector. We can optimize this by using an array or vector to directly count the frequency of each element.

5. Avoid unnecessary clearing of sets and maps: After each test case, the program clears the set `s` and map `m`. Since these containers are re-initialized in each iteration of the loop, there is no need to explicitly clear them.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <vector>
#include <map>
using namespace std;

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    vector<int> v(n);
    for (int i = 0; i < n; i++)
      cin >> v[i];

    vector<int> freq(n + 1, 0);
    int maxFreq = 0;
    for (int i = 0; i < n; i++) {
      freq[v[i]]++;
      maxFreq = max(maxFreq, freq[v[i]]);
    }

    int distinct = 0;
    for (int i = 1; i <= n; i++) {
      if (freq[i] > 0)
        distinct++;
    }

    int result;
    if (distinct > maxFreq) {
      result = maxFreq;
    } else if (distinct == maxFreq) {
      result = maxFreq - 1;
    } else {
      result = distinct;
    }

    cout << result << endl;
  }
}
```

Explanation of optimizations:

1. Removed unnecessary header files: Removed `<bits/stdc++.h>` and included `<iostream>`, `<vector>`, and `<map>` instead. This reduces unnecessary code and improves compilation time.

2. Removed unused macros: Removed all the unused macros to simplify the code and reduce unnecessary macro expansions.

3. Avoided unnecessary data copying: Instead of creating a vector `v` and copying the input values into it, we directly read the input values into the vector `v`. This eliminates the need for a separate vector and reduces memory usage.

4. Avoided unnecessary set and map operations: Replaced the usage of set and map with a vector `freq` to directly count the frequency of each element. The vector `freq` is initialized with zeros and each element is incremented as we encounter it in the input vector `v`. This reduces the overhead of using set and map operations and improves performance.

5. Avoided unnecessary clearing of sets and maps: Removed the explicit clearing of sets and maps (`s.clear()` and `m.clear()`) as they are re-initialized in each iteration of the loop. This eliminates unnecessary function calls and improves performance.