The given program calculates the maximum number of unique elements that can be chosen from an array. However, there are several optimizations that can be made to improve the running time and memory usage:

1. Remove unnecessary header files: The `bits/stdc++.h` header file includes a large number of other header files, which can increase the compilation time. Instead, include only the necessary header files.

2. Remove unnecessary macros: The program includes several macros that are not being used. Removing these macros will simplify the code and improve readability.

3. Avoid using `std::endl`: The `std::endl` manipulator flushes the output stream, which can be an expensive operation. Instead, use the newline character `'\n'` to end lines of output.

4. Use range-based for loops: The program uses `for` loops with an index variable to iterate over the elements of the vector. Using a range-based for loop can simplify the code and improve performance.

5. Avoid unnecessary container resets: The program uses `s.clear()` and `m.clear()` to reset the set and map containers after each iteration of the while loop. Since these containers are re-initialized in each iteration, there is no need to explicitly reset them.

Based on these optimizations, the optimized program is as follows:

```cpp
#include <iostream>
#include <vector>
#include <set>
#include <map>

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(NULL);

    int t;
    std::cin >> t;
    
    while (t--) {
        int n;
        std::cin >> n;
        std::vector<int> v(n);
        
        for (int i = 0; i < n; i++) {
            std::cin >> v[i];
        }
        
        std::set<int> s(v.begin(), v.end());
        std::map<int, int> m;
        
        for (int x : v) {
            m[x]++;
        }
        
        int M = -1;
        
        for (auto it : m) {
            M = std::max(M, it.second);
        }
        
        if (n >= 2 && m.size() == n) {
            std::cout << 1 << '\n';
            continue;
        }
        
        if (s.size() > M) {
            std::cout << M << '\n';
        } else if (s.size() == M) {
            std::cout << M - 1 << '\n';
        } else {
            std::cout << s.size() << '\n';
        }
    }
    
    return 0;
}
```

This optimized program removes unnecessary macros, simplifies the code, and improves the performance by avoiding unnecessary operations.