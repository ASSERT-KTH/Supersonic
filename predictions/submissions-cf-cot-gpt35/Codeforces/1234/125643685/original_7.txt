Explanation of the optimization steps:
1. Remove unnecessary includes: The `#include <bits/stdc++.h>` includes a large number of unnecessary headers which can slow down the compilation process. We can include only the necessary headers.
2. Remove unnecessary macros: The `#define bbn 200005` and `#define mod 1000000007` macros are not used in the program. We can remove them.
3. Use `const` instead of `#define`: Instead of using `#define` to define constants, we can use `const` to define them as variables. This provides better type safety and can help the compiler optimize the code.
4. Use `string` instead of character array: Instead of using a character array `char s[bbn]`, we can use a `std::string` to store the input string. This provides better memory management and makes the code easier to read.
5. Use `unordered_set` instead of `set`: The use of `set` for each letter of the alphabet can be replaced with an `unordered_set`. This can improve the performance of operations like insertion and deletion.
6. Use `reserve` to allocate memory: Before inserting elements into the `unordered_set`, we can use the `reserve` function to pre-allocate memory. This can reduce the number of memory allocations and improve performance.
7. Avoid unnecessary function calls: Instead of calling `strlen` to get the length of the string, we can use the `size` function of `std::string` to get the length.
8. Use `emplace` instead of `insert`: Instead of using `insert` to insert elements into the `unordered_set`, we can use `emplace` to construct and insert the element in one step. This can improve performance by avoiding unnecessary copying or moving of elements.
9. Use range-based loop instead of index-based loop: Instead of using an index-based loop to iterate over the elements of the `unordered_set`, we can use a range-based loop. This can make the code more concise and easier to read.
10. Use `auto` for type deduction: Instead of explicitly specifying the type of the iterator, we can use `auto` for type deduction. This can make the code more concise and easier to read.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <string>
#include <unordered_set>
using namespace std;

const int MOD = 1000000007;

int main() {
    string s;
    cin >> s;
    
    int q;
    cin >> q;
    
    int len = s.size();
    unordered_set<int> se[26];
    
    for (int i = 0; i < len; i++) {
        se[s[i] - 'a'].emplace(i);
    }
    
    while (q--) {
        int x;
        cin >> x;
        
        if (x == 1) {
            int p;
            char c;
            cin >> p >> c;
            
            se[s[p - 1] - 'a'].erase(p - 1);
            se[c - 'a'].emplace(p - 1);
            s[p - 1] = c;
        } else if (x == 2) {
            int l, r, sum = 0;
            cin >> l >> r;
            
            for (auto& us : se) {
                auto p = us.lower_bound(l - 1);
                if (p != us.end() && *p <= r - 1) {
                    sum++;
                }
            }
            
            cout << sum << endl;
        }
    }
    
    return 0;
}
```