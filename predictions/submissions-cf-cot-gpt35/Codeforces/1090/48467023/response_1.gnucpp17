#include <iostream>
#include <vector>
#include <cassert>

using namespace std;

#define fore(i, l, r) for (int i = int(l); i < int(r); i++)
#define forn(i, n) fore(i, 0, n)
#define sz(a) int((a).size())
#define all(a) (a).begin(), (a).end()
#define mp make_pair
#define pb push_back
#define x first
#define y second

typedef pair<int, int> pt;

const int INF = int(1e9);
const long long INF64 = long long(1e18);
const long double EPS = 1e-9;
const int N = 250 * 1000 + 555;
const int M = 30 * 1000 * 1000 + 555;

struct node {
  int sum, sval;
  node *l, *r;
  node() : sum(0), sval(-1), l(NULL), r(NULL) {}
  node(int sum, int sval, node *l, node *r)
      : sum(sum), sval(sval), l(l), r(r) {}
};

typedef node *tree;

int n;
pair<int, pt> qs[N];
node nodes[M];
int szn = 0;

tree getNode(int sum, int sval, tree l, tree r) {
  assert(szn < M);
  nodes[szn] = node(sum, sval, l, r);
  return &nodes[szn++];
}

inline int getsum(tree t, int len) {
  if (!t)
    return 0;
  if (t->sval != -1)
    return len * t->sval;
  return t->sum;
}

inline int push(tree t) {
  int pushed = t->sval;
  t->sval = -1;
  return pushed;
}

void upd(tree t, int l1, int l2) {
  if (t->sval != -1)
    return;
  t->sum = getsum(t->l, l1) + getsum(t->r, l2);
}

tree setVal(tree t, int l, int r, int lf, int rg, int val, int pushed = -1) {
  if (pushed != -1)
    t->sval = pushed;
  if (l == lf && r == rg) {
    t->sval = val;
    return t;
  }
  int mid = (l + r) >> 1;
  pushed = push(t);
  if (lf < mid)
    t->l = setVal(t->l, l, mid, lf, min(mid, rg), val, pushed);
  else if (pushed != -1)
    t->l = t->r;
  if (rg > mid)
    t->r = setVal(t->r, mid, r, max(lf, mid), rg, val, pushed);
  else if (pushed != -1)
    t->r = t->l;
  upd(t, mid - l, r - mid);
  return t;
}

int getPos(tree t, int l, int r, int lf, int rg) {
  if (!t)
    return -1;
  if (l == lf && r == rg) {
    if (l + 1 == r)
      return getsum(t, 1) ? l : -1;
    if (getsum(t, r - l) == 0)
      return -1;
  }
  stack<pair<tree, pair<int, int>>> st;
  st.push({t, {l, r}});
  while (!st.empty()) {
    tree cur = st.top().first;
    int cl = st.top().second.first;
    int cr = st.top().second.second;
    st.pop();
    if (cur->sval != -1) {
      if (cur->sval > 0)
        return cr - 1;
      continue;
    }
    int mid = (cl + cr) >> 1;
    if (rg > mid) {
      st.push({cur->r, {mid, cr}});
    }
    if (lf < mid) {
      st.push({cur->l, {cl, mid}});
    }
  }
  return -1;
}

int maxLen = -1;

bool sub(pair<int, tree> &p, int pw) {
  if (pw >= p.first)
    return true;
  pw = p.first - pw - 1;
  int pos = getPos(p.second, 0, maxLen, 0, pw + 1);
  if (pos < 0)
    return true;
  tree nt = setVal(p.second, 0, maxLen, pos, pos + 1, 0);
  if (pos < pw)
    nt = setVal(nt, 0, maxLen, pos + 1, pw + 1, 1);
  p = {p.first, nt};
  return getsum(nt, maxLen) == 0;
}

int dead[N];
pair<int, pair<int, tree>> ps[N];

void solve() {
  int cnt = 0;
  maxLen = n + 3;
  forn(i, n) {
    int tp = qs[i].first;
    int a = qs[i].second.first, b = qs[i].second.second;
    a--, b--;
    if (tp == 1) {
      int id = cnt++;
      dead[id] = -2;
      ps[id] = {0, {1, getNode(0, -1, NULL, NULL)}};
      ps[id].second.second = setVal(ps[id].second.second, 0, maxLen, 0, 1, 1);
    } else if (tp == 2) {
      if (dead[a] < 0)
        ps[a].first++;
    } else if (tp == 3) {
      if (dead[a] < 0) {
        ps[a].second.second = setVal(ps[a].second.second, 0, maxLen, ps[a].second.first, ps[a].second.first + 1, 0);
        ps[a].second.first++;
      }
    } else if (tp == 4) {
      int id = cnt++;
      dead[id] = -2;
      ps[id] = ps[a];
      if (dead[a] >= 0)
        dead[id] = i;
    } else {
      if (dead[a] < 0 && dead[b] < 0) {
        if (sub(ps[a].second, ps[b].first))
          dead[a] = i;
        if (sub(ps[b].second, ps[a].first))
          dead[b] = i;
      }
    }
  }
  printf("%d\n", cnt);
  forn(i, cnt) printf("%d ", dead[i] + 1);
  printf("\n");
}

int main() {
#ifdef _DEBUG
  freopen("input.txt", "r", stdin);
  int tt = clock();
#endif
  ios_base::sync_with_stdio(false);
  cin.tie(0), cout.tie(0);
  cout << fixed;
  cout.precision(15);
  if (read()) {
    solve();
#ifdef _DEBUG
    cerr << "TIME = " << clock() - tt << endl;
    tt = clock();
#endif
  }
  return 0;
}