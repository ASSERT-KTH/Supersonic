#include <iostream>
#include <array>

using namespace std;

constexpr int maxn = 2e5 + 11;
constexpr long long inf = 1e15 + 12;
constexpr long long mod = 1e9 + 7;

void build(array<long long, maxn>& pref, array<long long, maxn>& a, array<long long, maxn>& p, int l, int r, array<long long, maxn>& ps) {
  if (r - l == 1) {
    if (l == n - 1) {
      pref[l] = inf;
    } else {
      pref[l] = a[l];
    }
  } else {
    int mid = (l + r) / 2;
    build(pref, a, p, l, mid, ps);
    build(pref, a, p, mid, r, ps);
    pref[l] = min(pref[mid], pref[r]);
  }
}

void add_val(array<long long, maxn>& pref, array<long long, maxn>& a, int ql, int qr, int val) {
  if (qr <= ql) {
    return;
  }
  a[ql] += val;
  pref[ql] += val;
}

long long get_min(array<long long, maxn>& pref, int ql, int qr) {
  if (qr <= ql) {
    return inf;
  }
  return pref[ql];
}

void solve() {
  int n;
  cin >> n;

  array<long long, maxn> a, ps, p, pref;
  for (int i = 0; i < n; i++) {
    cin >> p[i];
    ps[p[i] - 1] = i;
  }
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    if (i != 0) {
      pref[i] = pref[i - 1] + a[i];
    } else {
      pref[i] = a[i];
    }
  }

  array<long long, maxn> root;
  build(pref, a, p, 0, n, ps);

  long long ans = min(a[0], a[n - 1]);
  long long mus = 0;
  for (int i = 0; i < n; i++) {
    add_val(pref, a, ps[i], n, -2 * a[ps[i]]);
    mus += a[ps[i]];
    long long cur = get_min(pref, 0, n) + mus;
    ans = min(ans, cur);
  }

  cout << ans << endl;
}

int main() {
  ios::sync_with_stdio(false);
  solve();
  return 0;
}