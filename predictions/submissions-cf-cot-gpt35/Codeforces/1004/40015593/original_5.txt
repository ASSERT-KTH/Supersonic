Optimization step by step:

1. Remove unnecessary include statements: The `<bits/stdc++.h>` header includes a large number of other headers, which can slow down the compilation process. Since we only need the `<iostream>` and `<cstring>` headers, we can remove the `<bits/stdc++.h>` include statement.

2. Remove unnecessary global variables: The variables `m`, `used`, and `cnt` are not used in the program and can be removed.

3. Optimize input/output: The program currently uses `cin` and `cout` for input and output, respectively. These can be slower compared to other methods such as `scanf` and `printf`. We can replace the input/output statements with `scanf` and `printf` for faster execution.

4. Use `vector` instead of `set`: The program currently uses a `set` to keep track of unique elements. However, using a `vector` and performing a linear search can be faster in this case. We can replace the `set<int> st` with a `vector<int> st` and modify the code to perform a linear search instead of inserting into the set.

5. Use `int` instead of `long long` for `ans`: Since the answer `ans` is calculated by adding `cnt[i + 1]` to it, and `cnt` is an `int` array, we can use an `int` variable for `ans` as well.

Optimized program:

```cpp
#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

const int MAXN = 100005;
int n;
int cont[MAXN];
int used[MAXN];

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  while (scanf("%d", &n) != EOF) {
    memset(used, 0, sizeof(used));
    int ans = 0;
    for (int i = 0; i < n; i++) {
      scanf("%d", &cont[i]);
    }
    vector<int> st;
    for (int i = n - 1; i >= 0; i--) {
      bool found = false;
      for (int j = 0; j < st.size(); j++) {
        if (st[j] == cont[i]) {
          found = true;
          break;
        }
      }
      if (!found) {
        st.push_back(cont[i]);
      }
    }
    for (int i = 0; i < n - 1; i++) {
      if (!used[cont[i]]) {
        used[cont[i]] = 1;
        ans += st.size();
      }
    }
    printf("%d\n", ans);
  }
}
```