To optimize the given program, we can make the following modifications:

1. Remove unnecessary includes: The program includes `<bits/stdc++.h>`, which includes a large number of standard C++ library headers. This can increase compile time and memory usage. Instead, we can include only the necessary headers, such as `<iostream>`, `<cstring>`, and `<set>`.

2. Avoid using `std::endl`: The program uses `std::endl` to output a new line and flush the output buffer. However, this can be slower than using `'\n'` to output a new line, as `std::endl` also flushes the output buffer. We can replace `std::endl` with `'\n'` to improve performance.

3. Avoid using `std::cin` and `std::cout` synchronization: The program calls `ios::sync_with_stdio(0)` to disable synchronization between `std::cin` and `std::cout`. However, this is unnecessary for this program, as we are not mixing input and output operations. We can remove this line to improve performance.

4. Use a fixed-size array instead of dynamic allocation: The original program uses dynamic allocation for `cont`, `used`, and `cnt` arrays. However, the size of these arrays is fixed at `100005`. We can change these arrays to have a fixed size to avoid the overhead of dynamic allocation.

Taking these optimization steps into account, the optimized program is as follows:

```cpp
#include <iostream>
#include <cstring>
#include <set>

const int MAX_N = 100005;

int n, m;
int cont[MAX_N];
int used[MAX_N];
int cnt[MAX_N];

int main() {
  std::ios::sync_with_stdio(false);
  
  while (std::cin >> n) {
    memset(used, 0, sizeof(used));
    long long ans = 0;
    
    for (int i = 0; i < n; i++) {
      std::cin >> cont[i];
    }
    
    std::set<int> st;
    for (int i = n - 1; i >= 0; i--) {
      st.insert(cont[i]);
      cnt[i] = st.size();
    }
    
    for (int i = 0; i < n - 1; i++) {
      if (!used[cont[i]]) {
        used[cont[i]] = 1;
        ans += cnt[i + 1];
      }
    }
    
    std::cout << ans << '\n';
  }
  
  return 0;
}
```