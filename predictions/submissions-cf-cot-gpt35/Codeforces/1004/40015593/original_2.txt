The given C++ program reads a series of integers and calculates the sum of the count of unique values in the remaining integers. Here are the steps to optimize the program:

1. Remove unnecessary header inclusion: The program includes the `<bits/stdc++.h>` header, which is not necessary and can be replaced with the specific headers that are actually used in the program.

2. Optimize input/output: The program uses `cin` and `cout` for input and output respectively. These are known to be slower than other methods such as `scanf` and `printf`. By replacing `cin` with `scanf` and `cout` with `printf`, we can improve the program's performance.

3. Remove unnecessary memory initialization: The program uses `memset` to initialize the `used` array to zero. However, the array is already initialized to zero when it is declared. Therefore, the `memset` call is redundant and can be removed.

4. Optimize the loop for calculating `cnt` array: The current loop iterates in reverse order, starting from `n-1` and going to `0`. This results in repetitive calls to `st.size()` for the same values. We can optimize this by starting the loop from `0` and storing the result of `st.size()` in a variable, which can be used in the subsequent loop.

5. Optimize the loop for calculating the sum: The current loop checks if `used[cont[i]]` is false, and if so, sets it to true and adds `cnt[i+1]` to the answer. However, we can simplify this by directly incrementing `used[cont[i]]` and adding `cnt[i+1]` to the answer, without the need for the conditional check.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <set>
using namespace std;

const int MAX_N = 100005;
int cont[MAX_N];
int used[MAX_N];
int cnt[MAX_N];

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  
  int n;
  while (scanf("%d", &n) == 1) {
    long long ans = 0;
    for (int i = 0; i < n; i++) {
      scanf("%d", &cont[i]);
    }
    set<int> st;
    int uniqueCount = 0;
    for (int i = 0; i < n; i++) {
      st.insert(cont[i]);
      cnt[i] = ++uniqueCount;
    }
    for (int i = 0; i < n - 1; i++) {
      ans += cnt[i + 1];
      used[cont[i]]++;
    }
    printf("%lld\n", ans);
  }
}
```

This optimized version of the program improves the input/output mechanism, removes unnecessary memory initialization, and simplifies the loops for calculating `cnt` and the sum.