To optimize the given program, we can make the following modifications:

1. Remove unnecessary `#include <bits/stdc++.h>`. This header includes almost all the standard library headers, which can lead to a larger memory footprint during compilation.

2. Remove unnecessary arrays `used` and `cnt`. We can calculate the required information on the fly without storing them in separate arrays.

3. Avoid using `set<int>` and use a `unordered_set<int>` instead. This will reduce the time complexity for insertions and lookups.

4. Remove unnecessary `memset` call. Since we are updating the values of `used` and `cnt` on the fly, there is no need to initialize them with `memset`.

5. Avoid using `endl` and use `'\n'` instead. `endl` flushes the output stream, which can be an expensive operation.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <unordered_set>
using namespace std;

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);

  int n;
  while (cin >> n) {
    long long ans = 0;
    unordered_set<int> st;
    for (int i = 0; i < n; i++) {
      int cont;
      cin >> cont;
      st.insert(cont);
      if (i < n - 1 && st.count(cont) == 1) {
        ans += st.size() - 1;
      }
    }
    cout << ans << '\n';
  }
}
```