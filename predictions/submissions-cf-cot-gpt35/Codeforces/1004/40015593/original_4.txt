The given program can be optimized in the following steps:

1. Remove unnecessary header file inclusion: The program includes the `<bits/stdc++.h>` header file, which is not necessary. It is recommended to include only the required header files to minimize compile time and reduce dependencies.

2. Remove unnecessary variable declarations: The variables `m` and `n` are declared but never used in the program. It is better to remove these variables to reduce memory usage.

3. Replace `memset` with array initialization: The program uses `memset` to initialize the `used` array to zero. Instead, we can initialize the array during declaration, which is more efficient.

4. Use `unordered_set` instead of `set`: The program uses a `set` to keep track of distinct elements in reverse order. However, a `set` has a time complexity of O(log n) for insertion, while an `unordered_set` has an average time complexity of O(1) for insertion. Therefore, we can replace the `set` with an `unordered_set` for better performance.

5. Optimize loop conditions: The second for loop iterates from `n-1` to 0, but the condition `i >= 0` can be optimized to `i > 0` since `cnt[0]` will always be 1.

6. Remove unnecessary array `used`: The array `used` is used to check if an element has been encountered before. However, it is not necessary because the `unordered_set` already keeps track of distinct elements.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_set>
using namespace std;

const int MAXN = 100005;
int cont[MAXN];
int cnt[MAXN];

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  
  int n;
  while (cin >> n) {
    long long ans = 0;
    for (int i = 0; i < n; i++) {
      cin >> cont[i];
    }
    unordered_set<int> st;
    for (int i = n - 1; i > 0; i--) {
      st.insert(cont[i]);
      cnt[i] = st.size();
    }
    for (int i = 0; i < n - 1; i++) {
      ans += cnt[i + 1];
    }
    cout << ans << endl;
  }
}
```