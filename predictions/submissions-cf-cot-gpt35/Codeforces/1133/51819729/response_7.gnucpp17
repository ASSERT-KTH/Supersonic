#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("avx")
#include <algorithm>
#include <iostream>
#include <set>
#include <vector>
using namespace std;

const int MAXN = 2e5 + 100;

struct DisjointSet {
  struct node {
    int parent, rank;
  } T[MAXN];

  DisjointSet() {
    for (int i = 0; i < MAXN; ++i)
      make(i);
  }

  void make(int u) {
    T[u].parent = u, T[u].rank = 0;
  }

  int find(int u) {
    if (T[u].parent != u)
      T[u].parent = find(T[u].parent);
    return T[u].parent;
  }

  void merge(int u, int v) {
    u = find(u), v = find(v);
    if (u == v)
      return;
    if (T[u].rank < T[v].rank)
      T[u].parent = v;
    else if (T[u].rank > T[v].rank)
      T[v].parent = u;
    else
      T[v].parent = u, ++T[u].rank;
  }
};

DisjointSet dsu;
int deg[MAXN];
int chose[MAXN];
int par[MAXN];
vector<int> g[MAXN], g_MST[MAXN];
vector<pair<int, int>> edge;
set<pair<int, int>> MST;

bool cmp(int u, int v) {
  return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
}

void dfs(int u) {
  vector<int> stack;
  stack.push_back(u);

  while (!stack.empty()) {
    u = stack.back();
    stack.pop_back();

    for (auto v : g[u]) {
      if (dsu.find(1) == dsu.find(v))
        continue;
      dsu.merge(dsu.find(1), dsu.find(v));
      if (u < v)
        MST.insert({u, v});
      else
        MST.insert({v, u});
      g_MST[u].push_back(v);
      g_MST[v].push_back(u);
      stack.push_back(v);
    }
  }
}

void build_tree(int u) {
  vector<int> stack;
  stack.push_back(u);

  while (!stack.empty()) {
    u = stack.back();
    stack.pop_back();

    for (auto v : g_MST[u]) {
      if (par[v] == -1) {
        par[v] = u;
        stack.push_back(v);
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0);

  int n, m, k;
  cin >> n >> m >> k;

  while (m--) {
    int u, v;
    cin >> u >> v;
    g[u].push_back(v);
    g[v].push_back(u);
    ++deg[u];
    ++deg[v];
    edge.emplace_back(u, v);
  }

  if (deg[1] < k)
    return !printf("NO");

  sort(g[1].begin(), g[1].end(), cmp);

  int cnt = 0;
  for (auto v : g[1]) {
    if (deg[v] == 1)
      ++cnt;
  }

  if (cnt > k)
    return !printf("NO");

  for (auto v : g[1]) {
    if (deg[v] == 1) {
      dsu.merge(dsu.find(1), dsu.find(v));
      MST.insert({1, v});
      g_MST[1].push_back(v);
      g_MST[v].push_back(1);
    } else if (dsu.find(1) != dsu.find(v)) {
      dsu.merge(dsu.find(1), dsu.find(v));
      MST.insert({1, v});
      g_MST[1].push_back(v);
      g_MST[v].push_back(1);
      chose[v] = true;
      dfs(v);
      ++cnt;
      if (cnt == k)
        break;
    }
  }

  for (auto E : edge) {
    int u = E.first, v = E.second;
    if (u == 1 || v == 1)
      continue;
    if (dsu.find(u) != dsu.find(v)) {
      dsu.merge(dsu.find(u), dsu.find(v));
      if (u < v)
        MST.insert({u, v});
      else
        MST.insert({v, u});
      g_MST[u].push_back(v);
      g_MST[v].push_back(u);
    }
  }

  if (cnt > k || MST.size() < n - 1)
    return !printf("NO");

  if (cnt == k) {
    puts("YES");
    for (auto x : MST)
      printf("%d %d\n", x.first, x.second);
    return 0;
  }

  int root = 1;
  memset(par, -1, sizeof(par));
  par[1] = 1;
  build_tree(root);

  for (auto v : g[1]) {
    if (!chose[v]) {
      int p = par[v];
      if (p == 1)
        continue;
      if (v < p)
        MST.erase({v, p});
      else
        MST.erase({p, v});
      MST.insert({1, v});
      par[v] = 1;
      ++cnt;
      if (cnt == k)
        break;
    }
  }

  puts("YES");
  for (auto x : MST)
    printf("%d %d\n", x.first, x.second);
  return 0;
}