#include <algorithm>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <set>
#include <vector>
using namespace std;

const int MAXN = 2e5 + 100;

struct DisjointSet {
  struct node {
    int parent, rank;
  } T[MAXN];
  DisjointSet() {
    for (int i = 0; i < MAXN; ++i)
      make(i);
  }
  void make(int u) { T[u].parent = u, T[u].rank = 0; };
  int find(int u) {
    if (T[u].parent == u)
      return u;
    return T[u].parent = find(T[u].parent);
  }
  void merge(int u, int v) {
    u = find(u), v = find(v);
    if (u == v)
      return;
    if (T[u].rank < T[v].rank)
      T[u].parent = v;
    else if (T[u].rank > T[v].rank)
      T[v].parent = u;
    else
      T[v].parent = u, ++T[u].rank;
  }
};

int deg[MAXN];
int chose[MAXN];
int par[MAXN];
vector<int> g[MAXN], g_MST[MAXN];
vector<pair<int, int>> edge;
set<pair<int, int>> MST;

bool cmp(int u, int v) {
  return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
}

void dfs(int u) {
  DisjointSet dsu;
  dsu.make(1);
  dsu.make(u);
  dsu.merge(dsu.find(1), dsu.find(u));
  if (u < 1)
    MST.insert({u, 1});
  else
    MST.insert({1, u});
  g_MST[u].push_back(1);
  g_MST[1].push_back(u);
  while (!dsu.find(1) == dsu.find(u)) {
    for (auto v : g[u]) {
      if (dsu.find(1) == dsu.find(v))
        continue;
      else {
        dsu.merge(dsu.find(1), dsu.find(v));
        if (u < v)
          MST.insert({u, v});
        else
          MST.insert({v, u});
        g_MST[u].push_back(v);
        g_MST[v].push_back(u);
        u = v;
        break;
      }
    }
  }
}

void build_tree(int root) {
  par[root] = root;
  vector<int> stack;
  stack.push_back(root);
  while (!stack.empty()) {
    int u = stack.back();
    stack.pop_back();
    for (auto v : g_MST[u]) {
      if (par[v] == -1) {
        par[v] = u;
        stack.push_back(v);
      }
    }
  }
}

int main() {
  int n, m, k;
  cin >> n >> m >> k;
  while (m--) {
    int u, v;
    cin >> u >> v;
    g[u].push_back(v);
    g[v].push_back(u);
    ++deg[u];
    ++deg[v];
    edge.emplace_back(u, v);
  }
  if (deg[1] < k)
    return !printf("NO");
  sort(g[1].begin(), g[1].end(), cmp);
  int cnt = 0;
  for (auto v : g[1])
    if (deg[v] == 1)
      ++cnt;
  if (cnt > k)
    return !printf("NO");
  for (auto v : g[1])
    if (deg[v] == 1) {
      dfs(v);
      ++cnt;
      if (cnt == k)