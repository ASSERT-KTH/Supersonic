The given program is using a lot of unnecessary includes and defines, which can impact both the memory usage and the running time of the program. 

Here are the steps to optimize the program:

1. Remove unnecessary includes: The program includes many unnecessary header files, such as `<bitset>`, `<list>`, `<queue>`, `<random>`, and so on. We can remove these includes to reduce the memory usage. 

2. Remove unnecessary defines: The program defines many unnecessary macros, such as `DEBUG`, `ARR`, `SET`, `MAP`, `debugfunc`, and so on. These macros are not used in the program and can be safely removed.

3. Remove unnecessary functions: The program defines several unnecessary functions, such as `toStr`, `toInt`, `toBinStr`, `rnd`, `random_gen`. These functions are not used in the program and can be safely removed.

4. Optimize the `DisjointSet` class: The `DisjointSet` class uses an array of nodes to implement the disjoint set data structure. However, the maximum number of nodes is defined as `MAX_NODE`, which is unnecessarily large. We can reduce the size of the array to the actual number of nodes used in the program.

5. Optimize the `dfs` function: The `dfs` function uses recursion to traverse the graph and construct the minimum spanning tree (MST). However, recursion can be expensive in terms of memory usage and running time. We can convert the recursion to an iterative approach using a stack.

6. Optimize the `build_tree` function: The `build_tree` function uses recursion to traverse the MST and build the tree structure. Similar to the `dfs` function, we can convert the recursion to an iterative approach using a stack.

7. Optimize the sorting of `g[1]`: The program sorts the neighbors of node 1 based on their degrees and node values using the `cmp` function. However, this sorting is not necessary for the correctness of the algorithm. We can remove the sorting to improve the running time.

8. Optimize the printing of the MST: The program uses `printf` to print the edges of the MST. However, `printf` can be slower than `cout` for formatted output. We can replace `printf` with `cout` for faster printing.

Here is the optimized program:

```cpp
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("avx")
#include <algorithm>
#include <iostream>
#include <set>
#include <vector>
using namespace std;

const int MAXN = 2e5 + 100;
const int MOD = 1e9 + 7;

struct DisjointSet {
  struct node {
    int parent, rank;
  } T[MAXN];
  DisjointSet() {
    for (int i = 0; i < MAXN; ++i)
      make(i);
  }
  void make(int u) { T[u].parent = u, T[u].rank = 0; }
  int find(int u) {
    if (T[u].parent == u)
      return u;
    return T[u].parent = find(T[u].parent);
  }
  void merge(int u, int v) {
    u = find(u), v = find(v);
    if (u == v)
      return;
    if (T[u].rank < T[v].rank)
      T[u].parent = v;
    else if (T[u].rank > T[v].rank)
      T[v].parent = u;
    else
      T[v].parent = u, ++T[u].rank;
  }
};

DisjointSet dsu;
int deg[MAXN];
int chose[MAXN];
int par[MAXN];
vector<int> g[MAXN], g_MST[MAXN];
vector<pair<int, int>> edge;
set<pair<int, int>> MST;

void dfs(int u) {
  stack<int> stk;
  stk.push(u);

  while (!stk.empty()) {
    int v = stk.top();
    stk.pop();

    for (auto x : g[v]) {
      if (dsu.find(1) == dsu.find(x))
        continue;

      dsu.merge(dsu.find(1), dsu.find(x));
      if (v < x)
        MST.insert({v, x});
      else
        MST.insert({x, v});
      g_MST[v].push_back(x);
      g_MST[x].push_back(v);
      stk.push(x);
    }
  }
}

void build_tree(int root) {
  stack<int> stk;
  stk.push(root);

  while (!stk.empty()) {
    int u = stk.top();
    stk.pop();

    for (auto v : g_MST[u]) {
      if (par[v] == -1) {
        par[v] = u;
        stk.push(v);
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0);

  int n, m, k;
  cin >> n >> m >> k;

  while (m--) {
    int u, v;
    cin >> u >> v;
    g[u].push_back(v);
    g[v].push_back(u);
    ++deg[u];
    ++deg[v];
    edge.emplace_back(u, v);
  }

  if (deg[1] < k)
    return !printf("NO");

  int cnt = 0;
  for (auto v : g[1])
    if (deg[v] == 1)
      ++cnt;

  if (cnt > k)
    return !printf("NO");

  for (auto v : g[1]) {
    if (deg[v] == 1) {
      dsu.merge(dsu.find(1), dsu.find(v));
      MST.insert({1, v});
      g_MST[1].push_back(v);
      g_MST[v].push_back(1);
    } else if (dsu.find(1) != dsu.find(v)) {
      dsu.merge(dsu.find(1), dsu.find(v));
      MST.insert({1, v});
      g_MST[1].push_back(v);
      g_MST[v].push_back(1);
      chose[v] = true;
      dfs(v);
      ++cnt;
      if (cnt == k)
        break;
    }
  }

  for (auto E : edge) {
    int u = E.first, v = E.second;
    if (u == 1 || v == 1)
      continue;
    if (dsu.find(u) != dsu.find(v)) {
      dsu.merge(dsu.find(u), dsu.find(v));
      if (u < v)
        MST.insert({u, v});
      else
        MST.insert({v, u});
      g_MST[u].push_back(v);
      g_MST[v].push_back(u);
    }
  }

  if (cnt > k || MST.size() < n - 1)
    return !printf("NO");

  if (cnt == k) {
    cout << "YES" << endl;
    for (auto x : MST)
      cout << x.first << " " << x.second << endl;
    return 0;
  }

  int root = 1;
  fill(par, par + MAXN, -1);
  par[1] = 1;
  build_tree(root);

  vector<pair<int, int>> res;
  for (auto v : g[1]) {
    if (!chose[v]) {
      int