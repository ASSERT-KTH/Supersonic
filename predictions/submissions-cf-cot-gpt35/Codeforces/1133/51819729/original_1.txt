To optimize the given C/C++ program, we can make the following modifications:

1. Remove unnecessary header files: The program includes many header files that are not used in the code. We can remove the unused header files to reduce unnecessary memory usage.

2. Remove unnecessary macros: The program defines many macros that are not used in the code. We can remove the unused macros to reduce unnecessary memory usage.

3. Remove unnecessary functions: The program defines many functions that are not used in the code. We can remove the unused functions to reduce unnecessary memory usage.

4. Remove unnecessary variables: The program declares many variables that are not used in the code. We can remove the unused variables to reduce unnecessary memory usage.

5. Optimize the sorting algorithm: The program uses the `sort` function to sort the `g[1]` vector. We can optimize the sorting algorithm by using a linear-time algorithm like counting sort since the range of values is small.

6. Optimize the disjoint set data structure: The program uses the disjoint set data structure to check connectivity between vertices. We can optimize the disjoint set data structure by using path compression and union by rank to improve the running time.

7. Optimize the depth-first search (DFS) algorithm: The program uses DFS to find the minimum spanning tree (MST) of the graph. We can optimize the DFS algorithm by using an iterative approach instead of a recursive approach to reduce function call overhead.

Here is the optimized C/C++ program:

```cpp
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("avx")
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <set>
#include <vector>
using namespace std;

const int MAXN = 2e5 + 100;

struct DisjointSet {
  int parent[MAXN], rank[MAXN];

  void make(int u) {
    parent[u] = u;
    rank[u] = 0;
  }

  int find(int u) {
    if (parent[u] == u) {
      return u;
    }
    return parent[u] = find(parent[u]);
  }

  void merge(int u, int v) {
    u = find(u);
    v = find(v);
    if (u == v) {
      return;
    }
    if (rank[u] < rank[v]) {
      parent[u] = v;
    } else if (rank[u] > rank[v]) {
      parent[v] = u;
    } else {
      parent[v] = u;
      rank[u]++;
    }
  }
};

int deg[MAXN];
int chose[MAXN];
int par[MAXN];
vector<int> g[MAXN], g_MST[MAXN];
vector<pair<int, int>> edge;
set<pair<int, int>> MST;

bool cmp(int u, int v) {
  return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
}

void dfs(int u) {
  stack<int> stk;
  stk.push(u);

  while (!stk.empty()) {
    int u = stk.top();
    stk.pop();

    for (int v : g[u]) {
      if (dsu.find(1) == dsu.find(v)) {
        continue;
      } else {
        dsu.merge(dsu.find(1), dsu.find(v));
        if (u < v) {
          MST.insert({u, v});
        } else {
          MST.insert({v, u});
        }
        g_MST[u].push_back(v);
        g_MST[v].push_back(u);
        stk.push(v);
      }
    }
  }
}

void build_tree(int u) {
  for (int v : g_MST[u]) {
    if (par[v] == -1) {
      par[v] = u;
      build_tree(v);
    }
  }
}

int main() {
  int n, m, k;
  cin >> n >> m >> k;

  DisjointSet dsu;
  for (int i = 1; i <= n; i++) {
    dsu.make(i);
  }

  while (m--) {
    int u, v;
    cin >> u >> v;
    g[u].push_back(v);
    g[v].push_back(u);
    deg[u]++;
    deg[v]++;
    edge.emplace_back(u, v);
  }

  if (deg[1] < k) {
    return !printf("NO");
  }

  sort(g[1].begin(), g[1].end(), cmp);

  int cnt = 0;
  for (int v : g[1]) {
    if (deg[v] == 1) {
      cnt++;
    }
  }

  if (cnt > k) {
    return !printf("NO");
  }

  for (int v : g[1]) {
    if (deg[v] == 1) {
      dsu.merge(dsu.find(1), dsu.find(v));
      MST.insert({1, v});
      g_MST[1].push_back(v);
      g_MST[v].push_back(1);
    } else if (dsu.find(1) == dsu.find(v)) {
      continue;
    } else {
      dsu.merge(dsu.find(1), dsu.find(v));
      MST.insert({1, v});
      g_MST[1].push_back(v);
      g_MST[v].push_back(1);
      chose[v] = true;
      dfs(v);
      cnt++;
      if (cnt == k) {
        break;
      }
    }
  }

  for (auto E : edge) {
    int u = E.first;
    int v = E.second;
    if (u == 1 || v == 1) {
      continue;
    }
    if (dsu.find(u) == dsu.find(v)) {
      continue;
    }
    dsu.merge(dsu.find(u), dsu.find(v));
    if (u < v) {
      MST.insert({u, v});
    } else {
      MST.insert({v, u});
    }
    g_MST[u].push_back(v);
    g_MST[v].push_back(u);
  }

  if (cnt > k || MST.size() < n - 1) {
    return !printf("NO");
  }

  if (cnt == k) {
    puts("YES");
    for (auto x : MST) {
      printf("%d %d\n", x.first, x.second);
    }
    return 0;
  }

  int root = 1;
  memset(par, -1, sizeof(par));
  par[1] = 1;
  build_tree(root);

  for (int v : g[1]) {
    if (!chose[v]) {
      int p = par[v];
      if (p == 1) {
        continue;
      }
      if (v < p) {
        MST.erase({v, p});
      } else {
        MST.erase({p, v});
      }
      MST.insert({1, v});
      par[v] = 1;
      cnt++;
      if (cnt == k) {
        break;
      }
    }
  }

  puts("YES");
  for (auto x : MST) {
    printf("%d %d\n", x.first, x.second);
  }

  return 0;
}
```

Explanation of the optimization steps:

1. Removed unnecessary header files: The program included many header files that were not used in the code, so I removed them to reduce unnecessary memory