#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("avx")
#include <algorithm>
#include <iostream>
#include <queue>
#include <set>
#include <vector>
using namespace std;
#define FOR(i, a, b) for (int i = (a), _b = (b); i <= _b; i++)
#define fi first
#define se second
#define PB push_back
typedef pair<int, int> pii;

const int MAXN = 2e5 + 100;

int deg[MAXN];
vector<int> g[MAXN];
vector<pii> edge;
set<pii> MST;
bool chose[MAXN];

bool cmp(int u, int v) {
  return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
}

int Ares_KN() {
  int n, m, k;
  cin >> n >> m >> k;
  while (m--) {
    int u, v;
    cin >> u >> v;
    g[u].push_back(v), g[v].push_back(u);
    ++deg[u], ++deg[v];
    edge.emplace_back(u, v);
  }
  if (deg[1] < k)
    return !printf("NO");
  sort(g[1].begin(), g[1].end(), cmp);
  int cnt = 0;
  for (auto v : g[1])
    if (deg[v] == 1)
      ++cnt;
  if (cnt > k)
    return !printf("NO");
  queue<int> q;
  bool visited[MAXN] = {false};
  q.push(1);
  visited[1] = true;
  while (!q.empty()) {
    int u = q.front();
    q.pop();
    for (auto v : g[u]) {
      if (!visited[v]) {
        q.push(v);
        visited[v] = true;
        if (u < v)
          MST.insert({u, v});
        else
          MST.insert({v, u});
      }
    }
  }
  if (MST.size() < n - 1)
    return !printf("NO");
  if (cnt == k) {
    puts("YES");
    for (auto x : MST)
      printf("%d %d\n", x.fi, x.se);
    return 0;
  }
  for (auto E : edge) {
    int u = E.fi, v = E.se;
    if (u == 1 || v == 1)
      continue;
    if (visited[u] && visited[v]) {
      if (u < v)
        MST.insert({u, v});
      else
        MST.insert({v, u});
    }
  }
  if (MST.size() < n - 1)
    return !printf("NO");
  int root = 1;
  puts("YES");
  for (auto x : MST)
    printf("%d %d\n", x.fi, x.se);
  return 0;
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0);
  Ares_KN();
  cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
  return 0;
}