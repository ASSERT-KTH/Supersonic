To optimize the given program, we can make the following modifications:

1. Remove unnecessary includes: The program includes the entire `<bits/stdc++.h>` library, which is not recommended. We can remove this line since it is not needed for this program.

2. Remove unnecessary macros: The program defines several macros that are not used. We can remove the `vl`, `pb`, `mp`, and `all` macros.

3. Remove unnecessary variable declarations: The program declares the `i` and `j` variables, but they are not used. We can remove these declarations.

4. Change the data type: The program uses `long long` as the data type, but it can be changed to `int` since the input size is small.

5. Remove unused code: The program contains an unused `t` variable and an unused code block for handling file input/output. We can remove these unused parts.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    int n, k;
    cin >> n >> k;
    if (n & 1) {
        if (k <= (n / 2) + 1) {
            cout << 2 * k - 1 << endl;
        } else {
            cout << 2 * (k - n / 2 - 1) << endl;
        }
    } else {
        if (k <= n / 2) {
            cout << 2 * k - 1 << endl;
        } else {
            cout << 2 * (k - n / 2) << endl;
        }
    }

    return 0;
}
```

This optimized program removes unnecessary includes, macros, and variables. It also changes the data type and removes unused code, resulting in a more efficient and readable program.