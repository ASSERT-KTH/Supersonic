To optimize the given program, we can make the following modifications:

1. Remove unnecessary header files: The `#include <bits/stdc++.h>` header file includes a large number of standard library headers, which can slow down the compilation process. Since we don't need all of these headers in the program, we can remove this line and only include the necessary headers.

2. Remove unused macros: The `vl`, `pb`, `mp`, and `all(v)` macros are not used in the program. We can remove these macros to simplify the code.

3. Use `int` instead of `int32_t`: The use of `int32_t` is not necessary in this program. We can simply use `int` for the variable declarations.

4. Simplify the if-else conditions: The if-else conditions can be simplified by removing unnecessary parentheses and reducing the number of comparisons.

5. Remove unnecessary `return 0` statement: The `return 0` statement at the end of the `main()` function is not necessary in C++. The program will automatically return 0 when it reaches the end of the `main()` function.

Here is the optimized C++ program:

```cpp
#include <iostream>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int t = 1;
    while (t--) {
        int n, k;
        cin >> n >> k;
        
        if (n & 1) {
            if (k <= n / 2 + 1) {
                cout << 2 * k - 1 << endl;
            } else {
                cout << 2 * (k - n / 2 - 1) << endl;
            }
        } else {
            if (k <= n / 2) {
                cout << 2 * k - 1 << endl;
            } else {
                cout << 2 * (k - n / 2) << endl;
            }
        }
    }
}
```