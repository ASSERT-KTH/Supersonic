To optimize the given program, we can make the following modifications:

1. Remove unnecessary header file inclusion: The program includes the `<bits/stdc++.h>` header file, which includes a large number of standard library headers. This can increase the compilation time and memory usage. Since the program does not use any specific standard library functions, we can remove this line.

2. Remove unused variable declarations: The program declares two variables `i` and `j`, but they are not used anywhere. We can safely remove these declarations.

3. Remove unnecessary macros: The program defines several macros that are not used. We can remove these macros to simplify the code.

4. Optimize the calculation of the result: The program uses multiple if-else statements to calculate the result based on the values of `n` and `k`. We can simplify the calculation by using a single formula. If `n` is odd, the result is `2*k - 1` if `k` is less than or equal to `(n/2) + 1`, otherwise it is `2*(k - (n/2) - 1)`. If `n` is even, the result is `2*k - 1` if `k` is less than or equal to `n/2`, otherwise it is `2*(k - (n/2))`.

Here is the optimized C++ program:

```cpp
#include <iostream>
using namespace std;

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int t = 1;
    while (t--) {
        int n, k;
        cin >> n >> k;

        int result;
        if (n % 2 == 1) {
            if (k <= (n / 2) + 1) {
                result = 2 * k - 1;
            } else {
                result = 2 * (k - n / 2 - 1);
            }
        } else {
            if (k <= n / 2) {
                result = 2 * k - 1;
            } else {
                result = 2 * (k - n / 2);
            }
        }

        cout << result << endl;
    }

    return 0;
}
```

Explanation:
- We removed the unnecessary header file inclusion (`<bits/stdc++.h>`).
- Removed unused variable declarations (`i` and `j`).
- Removed unused macros (`vl`, `pb`, `mp`, `all`).
- Simplified the calculation of the result using a single formula based on the values of `n` and `k`.