To optimize the given program, we can make the following modifications:

1. Remove unnecessary header file inclusion: The `bits/stdc++.h` header includes a large number of other header files, which can increase compilation time and memory usage. Instead, we can include only the required header files.

2. Remove unused variable declarations: The variables `i` and `j` are declared but not used in the program. We can remove these declarations to eliminate unnecessary overhead.

3. Remove unnecessary macro definitions: The macros `vl`, `pb`, `mp`, and `all` are defined but not used in the program. We can remove these macro definitions to simplify the code.

4. Replace `int` with `int32_t`: The use of `int` for integer variables can result in different sizes on different platforms. By using `int32_t`, we ensure that the integer size is always 32 bits.

5. Simplify the conditional statements: The conditional statements can be simplified by removing unnecessary parentheses and combining the conditions.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    int32_t t = 1;
    while (t--) {
        int32_t n, k;
        cin >> n >> k;
        
        if (n & 1) {
            if (k <= n / 2 + 1) {
                cout << 2 * k - 1 << endl;
            } else {
                cout << 2 * (k - n / 2 - 1) << endl;
            }
        } else {
            if (k <= n / 2) {
                cout << 2 * k - 1 << endl;
            } else {
                cout << 2 * (k - n / 2) << endl;
            }
        }
    }
    
    return 0;
}
```