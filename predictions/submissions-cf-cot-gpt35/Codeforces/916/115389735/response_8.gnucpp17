#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int NUM = 1000030;
const int N = 1000000;

vector<int> pr;

void primefactor();
int binpow(int a, int b);

void test() {
    int n, m;
    cin >> n >> m;
    if (n == 2) {
        cout << 2 << " " << 2 << endl;
        cout << 1 << " " << 2 << " " << 2 << endl;
        return;
    }
    int total_sum = *lower_bound(pr.begin(), pr.end(), n);
    cout << 2 << " " << total_sum << endl;
    vector<pair<pair<int, int>, int>> edges;
    edges.push_back(make_pair(make_pair(1, n), 2));
    for (int i = 2; i < n - 1; i++) {
        edges.push_back(make_pair(make_pair(1, i), 1));
    }
    if (n - 1 != 1) {
        edges.push_back(make_pair(make_pair(1, n - 1), total_sum - (n - 2)));
    }
    m -= edges.size();
    for (int i = 2; i <= n; i++) {
        if (m == 0)
            break;
        for (int j = i + 1; j <= n; j++) {
            if (m == 0)
                break;
            edges.push_back(make_pair(make_pair(i, j), max(total_sum - (n - 2), 2ll) + 1));
            m--;
        }
    }
    for (int i = 0; i < edges.size(); i++) {
        cout << edges[i].first.first << " " << edges[i].first.second << " " << edges[i].second << "\n";
    }
}

int main() {
    primefactor();
    int t = 1;
    while (t--)
        test();
    return 0;
}

void primefactor() {
    vector<bool> sieve(NUM + 1, true);
    for (int p = 2; p * p <= NUM; p++) {
        if (sieve[p] == true) {
            for (int i = p * p; i <= NUM; i += p)
                sieve[i] = false;
        }
    }
    for (int p = 2; p <= NUM; p++) {
        if (sieve[p])
            pr.push_back(p);
    }
}

int binpow(int a, int b) {
    int res = 1;
    while (b > 0) {
        if (b & 1)
            res *= a;
        a *= a;
        b >>= 1;
    }
    return res;
}