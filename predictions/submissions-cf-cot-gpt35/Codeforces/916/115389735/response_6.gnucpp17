#include <iostream>
#include <array>

const int NUM = 1000030;
const int N = 1000000;

void primefactor();

void test() {
  int n, m;
  std::cin >> n >> m;
  if (n == 2) {
    std::cout << 2 << " " << 2 << "\n";
    std::cout << 1 << " " << 2 << " " << 2 << "\n";
    return;
  }
  std::array<std::pair<std::pair<int, int>, int>, N - 1> edges;
  int total_sum = 0;
  for (int i = 0; i < N - 1; i++) {
    edges[i] = std::make_pair(std::make_pair(1, i + 2), 1);
    total_sum++;
  }
  if (n - 1 != 1)
    edges[N - 2] = std::make_pair(std::make_pair(1, n - 1), n - total_sum);

  std::cout << 2 << " " << total_sum + 2 << "\n";
  for (const auto& edge : edges) {
    std::cout << edge.first.first << " " << edge.first.second << " " << edge.second << "\n";
  }

  m -= N - 1;
  for (int i = 2; i <= n; i++) {
    if (m == 0)
      break;
    for (int j = i + 1; j <= n; j++) {
      if (m == 0)
        break;
      std::cout << i << " " << j << " " << total_sum + 3 << "\n";
      m--;
    }
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  primefactor();
  test();
  return 0;
}

void primefactor() {
  std::array<int, N + 1> lp{};
  std::vector<int> pr{};
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (int j = 0; j < pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}