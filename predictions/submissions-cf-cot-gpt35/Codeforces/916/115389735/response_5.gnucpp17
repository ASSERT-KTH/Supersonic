#include <iostream>
#include <vector>
#include <array>
#include <algorithm>

typedef long long ll;
typedef std::pair<ll, ll> pi;
typedef std::vector<ll> vi;
typedef std::vector<std::vector<ll>> vvi;

const ll NUM = 1000030;
const ll N = 1000000;

void calc_sieve(std::array<ll, NUM+1>& sieve) {
  std::fill(sieve.begin(), sieve.end(), 0);
  for (ll x = 2; x <= NUM; x++) {
    if (sieve[x])
      continue;
    for (ll u = x; u <= NUM; u += x) {
      sieve[u] = x;
    }
  }
}

void primefactor(std::array<ll, N+1>& lp, vi& pr) {
  std::fill(lp.begin(), lp.end(), 0);
  for (ll i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (ll j = 0; j < pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}

void test() {
  ll n, m;
  std::cin >> n >> m;
  if (n == 2) {
    std::cout << "2 2" << std::endl;
    std::cout << "1 2 2" << std::endl;
    return;
  }
  ll total_sum = *std::lower_bound(pr.begin(), pr.end(), n);
  std::cout << "2 " << total_sum << std::endl;
  
  std::vector<std::pair<pi, ll>> edges;
  edges.reserve(n-2 + m);
  
  edges.emplace_back(pi(1, n), 2);
  for (ll i = 2; i < n - 1; i++) {
    edges.emplace_back(pi(1, i), 1);
  }
  if (n - 1 != 1) {
    edges.emplace_back(pi(1, n - 1), total_sum - (n - 2));
  }
  
  m -= edges.size();
  
  for (ll i = 2; i <= n; i++) {
    if (m == 0)
      break;
    for (ll j = i + 1; j <= n; j++) {
      if (m == 0)
        break;
      edges.emplace_back(pi(i, j), std::max(total_sum - (n - 2), 2ll) + 1);
      m--;
    }
  }
  
  for (const auto& edge : edges) {
    std::cout << edge.first.first << " " << edge.first.second << " " << edge.second << "\n";
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  
  std::array<ll, NUM+1> sieve;
  calc_sieve(sieve);
  
  std::array<ll, N+1> lp;
  vi pr;
  primefactor(lp, pr);
  
  ll t = 1;
  while (t--)
    test();
  
  return 0;
}