#include <iostream>
#include <vector>
using std::cin;
using std::cout;
using std::endl;
using std::vector;
using pi = std::pair<int, int>;

const int NUM = 1000030;
const int N = 1000000;

vector<int> lp, sieve;
vector<int> pr;

void primefactor();
int binpow(int a, int b);
int binpow(int a, int b, int mod);
int gcd(int a, int b);
int lcm(int a, int b);
bool comp(int a, int b);
int inversemod(int a, int mod);
void calc_sieve();

void test() {
  int n, m;
  cin >> n >> m;
  if (n == 2) {
    cout << 2 << " " << 2 << endl;
    cout << 1 << " " << 2 << " " << 2 << endl;
    return;
  }
  int total_sum = *std::lower_bound(pr.begin(), pr.end(), n);
  cout << 2 << " " << total_sum << endl;
  vector<std::pair<pi, int>> edges;
  int sum = 0;
  edges.emplace_back(std::make_pair(1, n), 2);
  sum = 2;
  for (int i = 2; i < n - 1; i++) {
    edges.emplace_back(std::make_pair(1, i), 1);
    sum++;
  }
  if (n - 1 != 1)
    edges.emplace_back(std::make_pair(1, n - 1), total_sum - sum);
  m -= edges.size();
  for (int i = 2; i <= n; i++) {
    if (m == 0)
      break;
    for (int j = i + 1; j <= n; j++) {
      if (m == 0)
        break;
      edges.emplace_back(std::make_pair(i, j), std::max(total_sum - sum, 2ll) + 1);
      m--;
    }
  }
  for (const auto& edge : edges) {
    cout << edge.first.first << " " << edge.first.second << " " << edge.second << "\n";
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(0);
  primefactor();
  int t = 1;
  while (t--)
    test();
  return 0;
}

void calc_sieve() {
  sieve.resize(NUM + 1, 0);
  for (int x = 2; x <= NUM; x++) {
    if (sieve[x])
      continue;
    for (int u = x; u <= NUM; u += x) {
      sieve[u] = x;
    }
  }
}

void primefactor() {
  lp.resize(N + 1, 0);
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (int j = 0; j < pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}

int binpow(int a, int b) {
  int res = 1;
  while (b > 0) {
    if (b % 2)
      res = res * a;
    a = a * a;
    b >>= 1;
  }
  return res;
}

int binpow(int a, int b, int mod) {
  int res = 1;
  while (b > 0) {
    if (b % 2)
      res = (res * a) % mod;
    a = (a * a) % mod;
    b >>= 1;
  }
  return res;
}

int gcd(int a, int b) {
  if (b == 0)
    return a;
  return gcd(b, a % b);
}

int lcm(int a, int b) { return ((a / gcd(a, b)) * b); }

bool comp(int a, int b) { return a > b; }

int inversemod(int a, int mod) { return binpow(a, mod - 2, mod); }