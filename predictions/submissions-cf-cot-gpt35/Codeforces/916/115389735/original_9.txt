The given code can be optimized as follows:

1. Remove unnecessary includes: The code includes the entire `<bits/stdc++.h>` library, which is not necessary and can slow down the compilation process. We can remove it and include only the necessary headers.

2. Remove unnecessary macros: The code defines macros for `int long long`, `pb`, `ppb`, `mp`, `ff`, `ss`, `all`, `sz`. We can remove these macros and use the actual keywords directly in the code.

3. Avoid unnecessary vector copies: The code uses `all()` function to pass the entire vector to functions. Instead, we can pass the vector directly.

4. Avoid unnecessary calculations: The code calculates `total_sum` using `lower_bound(all(pr), n)`. We can optimize this by checking if `n` is prime and if not, finding the next prime number greater than `n`.

5. Avoid unnecessary loops: The code has nested loops to generate edges. We can optimize this by calculating the number of edges needed and generating them directly.

6. Use prefix increment: The code uses `++i` in the loop. We can optimize this by using prefix increment `i++`.

7. Use range-based for loop: The code uses index-based for loop to iterate over `edges`. We can optimize this by using a range-based for loop.

8. Avoid unnecessary modulo operations: The code uses modulo operations in `binpow()` and `inversemod()` functions. We can optimize this by removing the modulo operation if it is not necessary.

9. Avoid unnecessary multiple function calls: The code calculates `gcd(a, b)` twice in `lcm()` function. We can optimize this by calculating it once and storing it in a variable.

10. Avoid unnecessary vector resizing: The code resizes `sieve` vector to `NUM + 1` and `lp` vector to `N + 1`. We can optimize this by using `reserve()` function to reserve the required memory in advance.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int NUM = 1000030;
const int N = 1000000;

vector<int> lp, sieve, pr;

void primefactor();
int binpow(int a, int b);
int binpow(int a, int b, int mod);
int gcd(int a, int b);
int lcm(int a, int b);
bool comp(int a, int b);
int inversemod(int a, int mod);
void calc_sieve();

void test() {
  int n, m;
  cin >> n >> m;
  if (n == 2) {
    cout << 2 << " " << 2 << endl;
    cout << 1 << " " << 2 << " " << 2 << endl;
    return;
  }
  
  int total_sum;
  if (n % 2 == 0) {
    total_sum = n + 1;
  } else {
    total_sum = n + 2;
    while (!is_prime(total_sum)) {
      total_sum += 2;
    }
  }
  
  cout << 2 << " " << total_sum << endl;
  
  vector<pair<pair<int, int>, int>> edges;
  edges.reserve(n - 1 + min(m, n - 1));
  
  for (int i = 2; i < n; ++i) {
    edges.push_back({{1, i}, 1});
  }
  
  if (n > 2) {
    edges.push_back({{1, n}, total_sum - (n - 2)});
  }
  
  for (int i = 2; i <= n && m > 0; ++i) {
    for (int j = i + 1; j <= n && m > 0; ++j) {
      edges.push_back({{i, j}, max(total_sum - (n - 1), 2ll) + 1});
      --m;
    }
  }
  
  for (const auto& edge : edges) {
    cout << edge.first.first << " " << edge.first.second << " " << edge.second << "\n";
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  
  primefactor();
  int t = 1;
  while (t--) {
    test();
  }
  
  return 0;
}

void calc_sieve() {
  sieve.reserve(NUM + 1);
  sieve.assign(NUM + 1, 0);
  for (int x = 2; x <= NUM; x++) {
    if (sieve[x]) {
      continue;
    }
    for (int u = x; u <= NUM; u += x) {
      sieve[u] = x;
    }
  }
}

void primefactor() {
  lp.reserve(N + 1);
  lp.assign(N + 1, 0);
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (int j = 0; j < pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j) {
      lp[i * pr[j]] = pr[j];
    }
  }
}

int binpow(int a, int b) {
  int res = 1;
  while (b > 0) {
    if (b & 1) {
      res *= a;
    }
    a *= a;
    b >>= 1;
  }
  return res;
}

int binpow(int a, int b, int mod) {
  int res = 1;
  while (b > 0) {
    if (b & 1) {
      res = (res * a) % mod;
    }
    a = (a * a) % mod;
    b >>= 1;
  }
  return res;
}

int gcd(int a, int b) {
  if (b == 0) {
    return a;
  } else {
    return gcd(b, a % b);
  }
}

int lcm(int a, int b) {
  int g = gcd(a, b);
  return (a / g) * b;
}

bool comp(int a, int b) {
  return a > b;
}

int inversemod(int a, int mod) {
  return binpow(a, mod - 2, mod);
}
```