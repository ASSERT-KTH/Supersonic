The given C++ program has a number of unnecessary functions and macros that are not used in the code. These functions and macros can be removed to simplify the code and improve its performance.

Here are the steps to optimize the program:

1. Remove all the unnecessary functions and macros. These include `pe()`, `ps()`, `max3()`, `min3()`, and the typedefs and using statements at the beginning of the code. These functions and macros are not used in the code and only add unnecessary complexity.

2. Replace `endl` with `"\n"` in the `pe()` function. Using `"\n"` instead of `endl` will improve the performance by avoiding unnecessary flushing of the output buffer.

3. Declare the variables `n` and `d` as `int` instead of `ll` (long long) in the `solve()` function. Since the input constraints are not mentioned, using `int` instead of `ll` will save memory and improve performance if the input values are within the range of `int`.

4. Replace the `for` loop in the `solve()` function with a `while` loop. Since the loop variable `i` is not used inside the loop, a `while` loop will be more concise and efficient.

5. Use `cout` instead of `pe()` to print the output. Using `cout` directly will be faster and more efficient than calling the `pe()` function.

Here is the optimized C++ program:

```cpp
#include <iostream>

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(NULL);

    int t;
    std::cin >> t;
    while (t--) {
        int n, d;
        std::cin >> n >> d;

        if (d <= n) {
            std::cout << "YES\n";
            continue;
        }

        int i = 1;
        while (i <= n) {
            int q = ((d - 1) / (i + 1)) + 1;
            int sum = i + q;
            if (sum <= n) {
                std::cout << "YES\n";
                break;
            }
            i++;
        }

        if (i > n) {
            std::cout << "NO\n";
        }
    }

    return 0;
}
```

This optimized program removes unnecessary code and simplifies the logic to improve the running time and memory usage.