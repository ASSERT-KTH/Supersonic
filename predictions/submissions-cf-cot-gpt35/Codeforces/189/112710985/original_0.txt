Step 1: Eliminate unnecessary variables

- We can eliminate the variables `a`, `b`, and `c` since they are only used once to calculate `C`.

Step 2: Reduce the loop range

- The loop range for `A` and `B` is currently `0` to `4000`. However, we can optimize this range by calculating the maximum possible values of `A` and `B` based on the given `n` and `a`, `b`, and `c` values.
- The maximum value of `A` can be calculated as `n / a` and the maximum value of `B` can be calculated as `(n - (A * a)) / b`.
- We can update the loop range for `A` and `B` accordingly.

Step 3: Optimize the conditional check

- Instead of calculating `C` as `(n - (A * a + B * b)) / c` and then checking if it is non-negative, we can directly calculate the minimum of `A`, `B`, and `C` as `(n - (A * a + B * b)) / c`.
- If this minimum value is non-negative, we can directly calculate `ans` as `A + B + C` and update the maximum value of `ans`.

Step 4: Remove unnecessary include

- We can remove the `#include <iostream>` since it is not used in the optimized code.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;

int main() {
  int n;
  cin >> n;

  int ans = 0;
  int maxA = n / 2; // maximum value of A
  int maxB = (n - (maxA * 2)) / 3; // maximum value of B

  for (int A = 0; A <= maxA; A++) {
    for (int B = 0; B <= maxB; B++) {
      int C = (n - (A * 2 + B * 3)) / 4; // calculate C directly
      if (C >= 0 && (n - (A * 2 + B * 3)) % 4 == 0) {
        ans = max(ans, A + B + C);
      }
    }
  }

  cout << ans << endl;
  return 0;
}
```