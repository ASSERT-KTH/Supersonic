#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <cmath>

using namespace std;

const int M = 1e6 + 105;
bitset<M> bz;
vector<int> p;
int p0;

void sieve(int n) {
    for (int i = 2; i <= n; i++) {
        if (!bz[i])
            p.push_back(i);
        for (int j = 0; j < p.size() && i * p[j] <= n; j++) {
            int k = i * p[j];
            bz[k] = 1;
            if (i % p[j] == 0)
                break;
        }
    }
}

const int N = 2e5 + 5;
int n;
vector<long long> a;
long long u[1000], u0;
set<long long> w;
long long ans;

void fen(long long n) {
    u0 = 0;
    for (int i = 0; i < p.size() && p[i] * p[i] <= n; i++) {
        if (n % p[i] == 0) {
            u[++u0] = p[i];
            while (n % p[i] == 0)
                n /= p[i];
        }
    }
    if (n > 1)
        u[++u0] = n;
}

void check(long long x) {
    long long s = 0;
    vector<long long> prefix(n + 1, 0);
    for (int i = 1; i <= n; i++) {
        if (a[i] >= x) {
            long long y = a[i] % x;
            s += min(y, x - y);
        } else
            s += x - a[i];
        prefix[i] = prefix[i - 1] + s;
    }
    ans = min(ans, prefix[n]);
}

int main() {
    srand(time(0) + clock());
    sieve(1e6);
    cin >> n;
    a.resize(n + 1);
    for (int i = 1; i <= n; i++)
        cin >> a[i];
    random_shuffle(a.begin() + 1, a.end());
    for (int i = 1; i <= min(n, 1000); i++) {
        for (int j = -1; j <= 1; j++) {
            long long x = a[i] + j;
            if (x > 1) {
                fen(x);
                for (int k = 1; k <= u0; k++)
                    w.insert(u[k]);
            }
        }
    }
    ans = n;
    for (auto it = w.begin(); it != w.end(); it++)
        check(*it);
    cout << ans << endl;
    return 0;
}