#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <cmath>
using namespace std;

const int M = 1e6 + 105;
const int N = 2e5 + 5;

vector<int> p;
int p0;
bool bz[M];

void sieve(int n) {
    bz[0] = bz[1] = true;
    for (int i = 2; i <= sqrt(n); i++) {
        if (!bz[i]) {
            for (int j = i * i; j <= n; j += i) {
                bz[j] = true;
            }
        }
    }
    for (int i = 2; i <= n; i++) {
        if (!bz[i]) {
            p.push_back(i);
        }
    }
    p0 = p.size();
}

int main() {
    srand(time(0) + clock());
    int n;
    cin >> n;
    vector<long long> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    random_shuffle(a.begin(), a.end());

    int limit = min(n, 1000);
    set<long long> w;
    long long ans = n;

    for (int i = 0; i < limit; i++) {
        for (int j = -1; j <= 1; j++) {
            long long x = a[i] + j;
            if (x > 1) {
                for (int k = 0; k < p0 && (long long)p[k] * p[k] <= x; k++) {
                    if (x % p[k] == 0) {
                        w.insert(p[k]);
                        while (x % p[k] == 0) {
                            x /= p[k];
                        }
                    }
                }
                if (x > 1) {
                    w.insert(x);
                }
            }
        }
    }

    for (auto it = w.begin(); it != w.end(); it++) {
        long long target = *it;
        long long s = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] >= target) {
                long long y = a[i] % target;
                s += min(y, target - y);
            } else {
                s += target - a[i];
            }
            if (s > ans) {
                break;
            }
        }
        ans = min(ans, s);
    }

    cout << ans << endl;

    return 0;
}