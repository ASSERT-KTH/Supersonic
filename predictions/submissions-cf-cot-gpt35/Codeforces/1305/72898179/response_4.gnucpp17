#include <iostream>
#include <unordered_map>
#include <algorithm>
#include <ctime>
using namespace std;

const int M = 1e6 + 105;
int bz[M], p[M], p0;

void sieve(int n) {
  for (int i = 2; i <= n; i++) {
    if (!bz[i])
      p[++p0] = i;
    for (int j = 1; i * p[j] <= n; j++) {
      int k = i * p[j];
      bz[k] = 1;
      if (i % p[j] == 0)
        break;
    }
  }
}

const int N = 2e5 + 5;
int n;
long long a[N];
unordered_map<long long, int> w;
unordered_map<long long, int>::iterator it;
long long ans;

void check(long long x) {
  long long s = 0;
  for (int i = 1; i <= n; i++) {
    long long y = a[i] % x;
    s += min(y, x - y);
  }
  ans = min(ans, s);
}

int main() {
  srand(time(0) + clock());
  sieve(1e6);
  cin >> n;
  for (int i = 1; i <= n; i++) cin >> a[i];
  random_shuffle(a + 1, a + n + 1);
  for (int i = 1; i <= min(n, 1000); i++) {
    for (int j = -1; j <= 1; j++) {
      long long x = a[i] + j;
      if (x > 1) {
        for (int k = 2; k * k <= x; k++) {
          if (x % k == 0) {
            w[k] = 1;
            while (x % k == 0)
              x /= k;
          }
        }
        if (x > 1)
          w[x] = 1;
      }
    }
  }
  ans = n;
  for (it = w.begin(); it != w.end(); it++)
    check(it->first);
  cout << ans << endl;
}