#include <cstdio>
#include <algorithm>
#include <vector>
#include <ctime>

const int N = 2e5 + 5;

int n;
long long a[N];
std::vector<int> p;

void sieve(int n) {
  std::vector<bool> bz(n + 1, false);
  for (int i = 2; i <= n; i++) {
    if (!bz[i])
      p.push_back(i);
    for (int j = 0; j < p.size() && i * p[j] <= n; j++) {
      int k = i * p[j];
      bz[k] = true;
      if (i % p[j] == 0)
        break;
    }
  }
}

void fen(long long n, std::vector<int>& u) {
  u.clear();
  for (int i = 0; i < p.size() && (long long)p[i] * p[i] <= n; i++) {
    if (n % p[i] == 0) {
      u.push_back(p[i]);
      while (n % p[i] == 0)
        n /= p[i];
    }
  }
  if (n > 1)
    u.push_back(n);
}

long long check(long long x) {
  long long s = 0;
  for (int i = 0; i < n; i++) {
    if (a[i] >= x) {
      long long y = a[i] % x;
      s += std::min(y, x - y);
    } else {
      s += x - a[i];
    }
  }
  return s;
}

int main() {
  std::srand(std::time(0) + std::clock());
  sieve(1e6);

  std::scanf("%d", &n);
  for (int i = 0; i < n; i++) {
    std::scanf("%lld", &a[i]);
  }

  std::random_shuffle(a, a + n);

  std::vector<int> u;
  for (int i = 0; i < std::min(n, 1000); i++) {
    for (int j = -1; j <= 1; j++) {
      long long x = a[i] + j;
      if (x > 1) {
        fen(x, u);
      }
    }
  }

  long long ans = n;
  for (int i = 0; i < u.size(); i++) {
    ans = std::min(ans, check(u[i]));
  }

  std::printf("%lld\n", ans);
}