#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <cmath>
#include <ctime>
using namespace std;

void sieve(int n) {
  vector<int> bz(n + 1, 0);
  vector<int> p;
  for (int i = 2; i <= n; i++) {
    if (!bz[i]) {
      p.push_back(i);
    }
    for (int j = 0; j < p.size() && i * p[j] <= n; j++) {
      int k = i * p[j];
      bz[k] = 1;
      if (i % p[j] == 0) {
        break;
      }
    }
  }
}

void fen(ll n, vector<ll>& u) {
  u.clear();
  for (int i = 2; i <= sqrt(n); i++) {
    if (n % i == 0) {
      u.push_back(i);
      while (n % i == 0) {
        n /= i;
      }
    }
  }
  if (n > 1) {
    u.push_back(n);
  }
}

ll check(ll x, const vector<ll>& a) {
  ll s = 0;
  for (ll ai : a) {
    if (ai >= x) {
      ll y = ai % x;
      s += min(y, x - y);
    } else {
      s += x - ai;
    }
  }
  return s;
}

int main() {
  srand(time(0) + clock());
  int n;
  scanf("%d", &n);
  vector<ll> a(n);
  for (int i = 0; i < n; i++) {
    scanf("%lld", &a[i]);
  }
  random_shuffle(a.begin(), a.end());
  vector<ll> p;
  sieve(1000000);
  for (int i = 0; i < min(n, 1000); i++) {
    for (int j = -1; j <= 1; j++) {
      ll x = a[i] + j;
      if (x > 1) {
        vector<ll> u;
        fen(x, u);
        for (ll ui : u) {
          p.push_back(ui);
        }
      }
    }
  }
  sort(p.begin(), p.end());
  p.erase(unique(p.begin(), p.end()), p.end());
  ll ans = n;
  for (ll pi : p) {
    ans = min(ans, check(pi, a));
  }
  printf("%lld\n", ans);
}