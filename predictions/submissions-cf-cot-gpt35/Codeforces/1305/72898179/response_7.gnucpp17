#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <ctime>

using namespace std;

const int M = 1e6 + 105;
const int N = 2e5 + 5;

vector<int> primes;
int p[M], p0;
bool bz[M];

void sieve(int n) {
  for (int i = 2; i <= n; i++) {
    if (!bz[i]) {
      p[++p0] = i;
      primes.push_back(i);
    }
    for (int j = 1; j <= p0 && i * p[j] <= n; j++) {
      int k = i * p[j];
      bz[k] = 1;
      if (i % p[j] == 0)
        break;
    }
  }
}

int n;
long long a[N];
vector<int> factors;
long long ans;

void factorize(long long n) {
  factors.clear();
  for (int i = 0; i < primes.size() && primes[i] * primes[i] <= n; i++) {
    if (n % primes[i] == 0) {
      factors.push_back(primes[i]);
      while (n % primes[i] == 0)
        n /= primes[i];
    }
  }
  if (n > 1)
    factors.push_back(n);
}

void check(long long x) {
  long long s = 0;
  for (int i = 0; i < n; i++) {
    if (a[i] >= x) {
      long long y = a[i] % x;
      s += min(y, x - y);
    } else
      s += x - a[i];
    if (s > ans)
      return;
  }
  ans = s;
}

int main() {
  srand(time(0) + clock());

  sieve(sqrt(M));

  cin >> n;
  for (int i = 0; i < n; i++)
    cin >> a[i];

  random_shuffle(a, a + n);

  ans = n;
  for (int i = 0; i < min(n, 1000); i++) {
    for (int j = -1; j <= 1; j++) {
      long long x = a[i] + j;
      if (x > 1) {
        factorize(x);
        for (int k = 0; k < factors.size(); k++)
          check(factors[k]);
      }
    }
  }

  cout << ans << endl;

  return 0;
}