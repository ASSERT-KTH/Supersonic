Step 1: Avoid unnecessary header files
- The program includes unnecessary header files `<bits/stdc++.h>` and `<math.h>`.
- We can remove both of these header files as they are not used in the program.

Step 2: Optimize the isPrime function
- The isPrime function is not used in the program and can be removed.

Step 3: Optimize the solve function
- The solve function can be optimized by removing the unnecessary use of the map.
- Instead of using a map to count the occurrences of each number, we can use an array to store the count of each number.
- This will reduce the memory usage and also improve the runtime of the program.
- We can also remove the unnecessary use of the iterator and simplify the logic.

Step 4: Optimize the main function
- The main function can be optimized by simplifying the input/output operations.
- Instead of using `cin` and `cout`, we can use `scanf` and `printf` for faster input/output.

Here is the optimized C++ program:

```cpp
#include <iostream>
using namespace std;

const int MAX_N = 1000000;

void solve() {
  int n;
  scanf("%d", &n);
  
  int a[MAX_N] = {0};
  for (int i = 0; i < n; i++) {
    int x;
    scanf("%d", &x);
    a[x]++;
  }
  
  for (int i = 0; i < n; i++) {
    if (a[i] == 1) {
      printf("%d\n", i + 1);
      return;
    }
  }
  
  printf("-1\n");
}

int main() {
  int t;
  scanf("%d", &t);
  
  while (t--) {
    solve();
  }
  
  return 0;
}
```

Explanation of optimizations:
- We removed unnecessary header files.
- We removed the unused isPrime function.
- We optimized the solve function by using an array to store the count of each number instead of using a map.
- We simplified the logic in the solve function and removed the unnecessary use of iterators.
- We optimized the main function by using `scanf` and `printf` for faster input/output.