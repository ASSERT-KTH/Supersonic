To optimize the given program, I would make the following modifications:

1. Remove unnecessary includes: The program includes `<algorithm>`, `<cassert>`, and `<map>`, but none of these are used in the code. Therefore, we can remove these unnecessary includes to reduce compile time and memory usage.

2. Remove unnecessary calculations: In the `prepare_factorials` function, the program checks if `MOD` is divisible by any `p` such that `p*p <= MOD`. However, `MOD` is a constant value of 998244353, which is a prime number. Therefore, this check is unnecessary and can be removed.

3. Change the size of the `probability` vector: The `probability` vector is initialized with a size of `2*M+1`, where `M` is an input variable. However, in the subsequent loop, only elements with indices `M+i+1` and `M+i-1` are updated, where `i` ranges from `-M` to `M`. Therefore, we can change the size of the `probability` vector to `2*M+3` to avoid out-of-bounds access and simplify the code.

4. Use pre-increment and pre-decrement operators: In the `operator++` and `operator--` functions of the `mod_int` class, we can use pre-increment and pre-decrement operators (`++val` and `--val`) instead of post-increment and post-decrement operators (`val++` and `val--`). Pre-increment and pre-decrement operators are generally more efficient than their post counterparts.

5. Optimize the `solve` function: In the `solve` function, the program checks if a value is already present in the `save` map before calculating it. Instead of using a map to store the results, we can use a 2D array to store them directly. This will improve memory usage and reduce the overhead of map operations.

6. Change the type of `factorial` and `inv_factorial` vectors: The `factorial` and `inv_factorial` vectors are currently of type `vector<mod_int>`. However, these vectors only store values up to `max`, which is an input variable. Since `max` is an integer, we can change the types of these vectors to `vector<int>` to save memory.

7. Modify the `main` function: In the `main` function, we can replace the `for` loop that reads the input values from `likes` and `weights` vectors with `std::cin` directly. This will simplify the code and reduce the number of variables used.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const int MOD = 998244353;

struct mod_int {
  int val;
  
  mod_int(long long v = 0) {
    if (v < 0)
      v = v % MOD + MOD;
    if (v >= MOD)
      v %= MOD;
    val = v;
  }
  
  static int mod_inv(int a, int m = MOD) {
    int g = m, r = a, x = 0, y = 1;
    while (r != 0) {
      int q = g / r;
      g %= r;
      swap(g, r);
      x -= q * y;
      swap(x, y);
    }
    return x < 0 ? x + m : x;
  }
  
  explicit operator int() const { return val; }
  
  mod_int& operator+=(const mod_int& other) {
    val += other.val;
    if (val >= MOD)
      val -= MOD;
    return *this;
  }
  
  mod_int& operator-=(const mod_int& other) {
    val -= other.val;
    if (val < 0)
      val += MOD;
    return *this;
  }
  
  mod_int& operator*=(const mod_int& other) {
    val = (uint64_t)val * other.val % MOD;
    return *this;
  }
  
  mod_int& operator/=(const mod_int& other) { return *this *= other.inv(); }
  
  friend mod_int operator+(const mod_int& a, const mod_int& b) {
    return mod_int(a) += b;
  }
  
  friend mod_int operator-(const mod_int& a, const mod_int& b) {
    return mod_int(a) -= b;
  }
  
  friend mod_int operator*(const mod_int& a, const mod_int& b) {
    return mod_int(a) *= b;
  }
  
  friend mod_int operator/(const mod_int& a, const mod_int& b) {
    return mod_int(a) /= b;
  }
  
  mod_int& operator++() {
    val = val == MOD - 1 ? 0 : val + 1;
    return *this;
  }
  
  mod_int& operator--() {
    val = val == 0 ? MOD - 1 : val - 1;
    return *this;
  }
  
  mod_int operator-() const { return val == 0 ? 0 : MOD - val; }
  
  bool operator==(const mod_int& other) const { return val == other.val; }
  
  bool operator!=(const mod_int& other) const { return val != other.val; }
  
  mod_int inv() const { return mod_inv(val); }
  
  mod_int pow(long long p) const {
    mod_int a = *this, result = 1;
    while (p > 0) {
      if (p & 1)
        result *= a;
      a *= a;
      p >>= 1;
    }
    return result;
  }
};

vector<int> factorial, inv_factorial;
vector<int> inv;

void prepare_factorials(int max) {
  inv.assign(max + 1, 1);
  
  factorial.resize(max + 1);
  inv_factorial.resize(max + 1);
  
  factorial[0] = inv_factorial[0] = 1;
  
  for (int i = 1; i <= max; i++) {
    factorial[i] = i * factorial[i - 1];
    inv_factorial[i] = inv[i] * inv_factorial[i - 1];
  }
}

mod_int choose(int n, int r) {
  assert(0 <= r && r <= n);
  return factorial[n] * inv_factorial[r] * inv_factorial[n - r];
}

int N, M;
int L, DL;
vector<int> likes;
vector<int> weights;
vector<mod_int> probability;
mod_int save[2][100001];

mod_int solve(int like, int weight) {
  if (save[like][weight] != 0)
    return save[like][weight];
  
  mod_int answer = 0;
  
  if (like) {
    for (int up = 0; up <= M; up++) {
      if (probability[2 * up] == 0)
        continue;
      
      mod_int starter = probability[2 * up];
      mod_int other = 1;
      
      for (int i = 0; i < up; i++) {
        starter /= mod_int(L + i);
        other *= mod_int(L - weight + i);
      }
      
      for (int u = 0; u <= up; u++) {
        if (u > 0)
          other /= mod_int(L - weight + up - u);
        
        mod_int product = starter * choose(up, u) * (weight + u);
        
        if (L == weight) {
          if (u < up)
            product = 0;
        } else {
          product *= other;
        }
        
        answer += product;
        starter *= mod_int(weight + u);
      }
    }
  } else {
    for (int down = 0; down <= M; down++) {
      if (probability[2 * (M - down)] == 0)
        continue;
      
      mod_int starter = probability[2 * (M - down)];
      mod_int other = 1;
      
      for (int i = 0; i < down; i++) {
        starter /= mod_int(DL - i);
        other *= mod_int(DL - weight - i);
      }
      
      for (int d = 0; d <= min(down, weight); d++) {
        if (d > 0)
          other /= mod_int(DL - weight + down - d);
        
        mod_int product = starter * choose(down, d) * (weight - d);
        
        if (DL == weight) {
          if (d < down)
            product = 0;
        } else {
          product *= other;
        }
        
        answer += product;
        starter *= mod_int(weight - d);
      }
    }
  }
  
  return save[like][weight] = answer;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  
  prepare_factorials(4.1e5);
  
  cin >> N >> M;
  
  likes.resize(N);
  weights.resize(N);
  
  for (int i = 0; i < N; i++) {
    cin >> likes[i] >> weights[i];
    if (likes[i])
      L += weights[i];
    else
      DL += weights[i];
  }
  
  probability.assign(2 * M + 3, 0);
  probability[M] = 1;
  
  for (int iter = 0; iter < M; iter++) {
    vector<mod_int> new_probability(2 * M + 3, 0);
    
    for (int i = -M; i <= M; i++) {
      if ((i + iter) % 2 != 0 || abs(i) > iter)
        continue;
      
      int up = (iter + i) / 2, down = (iter - i) / 2;
      
      if (down > DL)
        continue;
      
      mod_int like_probability = mod_int(L + up) / mod_int(L + DL + i);
      mod_int dislike_probability = mod_int(1) - like_probability;
      
      new_probability[M + i