#include <iostream>
#include <vector>
#include <unordered_map>
#include <climits>

typedef long long ll;

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);

    int n, m;
    std::cin >> n >> m;
    std::vector<int> a(n + 1);
    std::unordered_map<int, std::vector<int>> vk;
    for (int i = 1; i <= n; i++) {
        std::cin >> a[i];
        vk[a[i]].emplace_back(i);
    }
    std::vector<std::vector<int>> ad;
    ad.reserve(n + 1);
    while (m--) {
        int u, v;
        std::cin >> u >> v;
        ad[u].emplace_back(v);
        ad[v].emplace_back(u);
    }
    int mx = 0, mxColor = INT_MAX;
    for (const auto& color : vk) {
        std::vector<bool> mp(n + 1, false);
        for (const auto& member : color.second) {
            for (const auto& neighbour : ad[member]) {
                if (a[neighbour] != a[member])
                    mp[a[neighbour]] = true;
            }
        }
        int uniqueColors = 0;
        for (bool colorExists : mp) {
            if (colorExists)
                uniqueColors++;
        }
        if (uniqueColors >= mx) {
            mx = uniqueColors;
            mxColor = std::min(mxColor, color.first);
        }
    }
    std::cout << mxColor;

    return 0;
}