#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <climits>

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);

    int n, m;
    std::cin >> n >> m;

    std::vector<int> a(n);
    std::unordered_map<int, std::vector<int>> vk;
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
        vk[a[i]].push_back(i);
    }

    std::vector<std::vector<int>> ad(n);
    ad.reserve(n);
    while (m--) {
        int u, v;
        std::cin >> u >> v;
        ad[u].push_back(v);
        ad[v].push_back(u);
    }

    int mx = 0, mxColor = INT_MAX;
    for (const auto& color : vk) {
        std::unordered_map<int, bool> mp;
        for (const auto& member : color.second) {
            for (const auto& neighbour : ad[member]) {
                if (a[neighbour] != a[member]) {
                    mp[a[neighbour]] = true;
                }
            }
        }
        if (mp.size() == mx && color.first < mxColor) {
            mxColor = color.first;
        } else if (mp.size() > mx) {
            mx = mp.size();
            mxColor = color.first;
        }
    }

    std::cout << mxColor;

    return 0;
}