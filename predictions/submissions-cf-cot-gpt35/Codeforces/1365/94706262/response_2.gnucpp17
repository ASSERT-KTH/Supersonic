#include <iostream>

const int MAX_SIZE = 51;

bool block(char (&maze)[MAX_SIZE][MAX_SIZE], int r, int c, int n, int m, int& G) {
  if (r - 1 > 0) {
    if (maze[r - 1][c] == 'G' || (r - 1 == n && c == m && G > 0)) {
      return false;
    }
    if (maze[r - 1][c] == '.') {
      maze[r - 1][c] = '#';
    }
  }
  if (r + 1 <= n) {
    if (maze[r + 1][c] == 'G' || (r + 1 == n && c == m && G > 0)) {
      return false;
    }
    if (maze[r + 1][c] == '.') {
      maze[r + 1][c] = '#';
    }
  }
  if (c - 1 > 0) {
    if (maze[r][c - 1] == 'G' || (r == n && c - 1 == m && G > 0)) {
      return false;
    }
    if (maze[r][c - 1] == '.') {
      maze[r][c - 1] = '#';
    }
  }
  if (c + 1 <= m) {
    if (maze[r][c + 1] == 'G' || (r == n && c + 1 == m && G > 0)) {
      return false;
    }
    if (maze[r][c + 1] == '.') {
      maze[r][c + 1] = '#';
    }
  }
  return true;
}

bool dfs(char (&maze)[MAX_SIZE][MAX_SIZE], int r, int c, int n, int m, int& G) {
  if (r <= 0 || c <= 0 || r > n || c > m)
    return false;
  if (maze[r][c] == '#' || maze[r][c] == 'B')
    return false;
  if (maze[r][c] == 'G') {
    G--;
  }
  maze[r][c] = '#';
  bool solvable = dfs(maze, r + 1, c, n, m, G)
                  || dfs(maze, r - 1, c, n, m, G)
                  || dfs(maze, r, c + 1, n, m, G)
                  || dfs(maze, r, c - 1, n, m, G);
  return solvable;
}

int main() {
  int t;
  std::cin >> t;
  while (t--) {
    int n, m;
    std::cin >> n >> m;
    char maze[MAX_SIZE][MAX_SIZE];
    int G = 0;
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        std::cin >> maze[i][j];
        if (maze[i][j] == 'G') {
          G++;
        }
      }
    }
    bool blocked = false;
    for (int i = 0; i < n && !blocked; i++) {
      for (int j = 0; j < m && !blocked; j++) {
        if (maze[i][j] == 'B') {
          if (!block(maze, i, j, n, m, G)) {
            std::cout << "No\n";
            blocked = true;
          }
        }
      }
    }
    if (!blocked && dfs(maze, n - 1, m - 1, n, m, G)) {
      std::cout << "Yes\n";
    } else {
      std::cout << "No\n";
    }
  }
  return 0;
}