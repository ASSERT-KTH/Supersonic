#include <iostream>

int main() {
  int t;
  std::cin >> t;

  while (t--) {
    int n, m;
    std::cin >> n >> m;

    bool flag = false;
    int G = 0;

    char maze[51][51] = {'\0'};
    bool visited[51][51] = {false};

    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= m; j++) {
        std::cin >> maze[i][j];
      }
    }

    for (int i = 1; i <= n && !flag; i++) {
      for (int j = 1; j <= m && !flag; j++) {
        if (maze[i][j] == 'B') {
          if (maze[i - 1][j] == 'G' || maze[i + 1][j] == 'G' || maze[i][j - 1] == 'G' || maze[i][j + 1] == 'G') {
            flag = true;
            break;
          }
        } else if (maze[i][j] == 'G') {
          G++;
        }
      }
    }

    if (flag) {
      std::cout << "No\n";
      continue;
    }

    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= m; j++) {
        if (maze[i][j] == 'B') {
          if (i - 1 > 0 && maze[i - 1][j] == '.') {
            maze[i - 1][j] = '#';
          }
          if (i + 1 <= n && maze[i + 1][j] == '.') {
            maze[i + 1][j] = '#';
          }
          if (j - 1 > 0 && maze[i][j - 1] == '.') {
            maze[i][j - 1] = '#';
          }
          if (j + 1 <= m && maze[i][j + 1] == '.') {
            maze[i][j + 1] = '#';
          }
        }
      }
    }

    bool dfs_flag = false;

    for (int i = 1; i <= n && !dfs_flag; i++) {
      for (int j = 1; j <= m && !dfs_flag; j++) {
        if (maze[i][j] == 'G') {
          if (visited[i][j]) {
            continue;
          }
          visited[i][j] = true;

          if (maze[i - 1][j] != '#' && maze[i - 1][j] != 'B' && !visited[i - 1][j]) {
            dfs_flag = true;
            break;
          }
          if (maze[i + 1][j] != '#' && maze[i + 1][j] != 'B' && !visited[i + 1][j]) {
            dfs_flag = true;
            break;
          }
          if (maze[i][j - 1] != '#' && maze[i][j - 1] != 'B' && !visited[i][j - 1]) {
            dfs_flag = true;
            break;
          }
          if (maze[i][j + 1] != '#' && maze[i][j + 1] != 'B' && !visited[i][j + 1]) {
            dfs_flag = true;
            break;
          }
        }
      }
    }

    if (dfs_flag) {
      std::cout << "No\n";
    } else {
      std::cout << (G == 0 ? "Yes\n" : "No\n");
    }
  }

  return 0;
}