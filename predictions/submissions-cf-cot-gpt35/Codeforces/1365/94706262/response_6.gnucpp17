#include <iostream>

using namespace std;

int t, n, m, G;
char maze[51][51] = {0};
bool visited[51][51] = {0};

bool block(int r, int c) {
  bool isDestination = (r == n && c == m && G > 0);
  bool blocked = false;

  if (maze[r - 1][c] == 'G' || isDestination) {
    blocked = true;
  }
  if (maze[r + 1][c] == 'G' || isDestination) {
    blocked = true;
  }
  if (maze[r][c - 1] == 'G' || maze[r][c + 1] == 'G' || (r == n && (c - 1 == m || c + 1 == m) && G > 0)) {
    blocked = true;
  }
  
  if (maze[r - 1][c] == '.') {
    maze[r - 1][c] = '#';
  }
  if (maze[r + 1][c] == '.') {
    maze[r + 1][c] = '#';
  }
  if (maze[r][c - 1] == '.') {
    maze[r][c - 1] = '#';
  }
  if (maze[r][c + 1] == '.') {
    maze[r][c + 1] = '#';
  }
  
  return !blocked;
}

void dfs(int r, int c) {
  stack<pair<int, int>> st;
  st.push({r, c});

  while (!st.empty()) {
    auto [x, y] = st.top();
    st.pop();

    if (x <= 0 || y <= 0 || x > n || y > m || maze[x][y] == '#' || visited[x][y]) {
      continue;
    }

    visited[x][y] = true;

    if (maze[x][y] == 'G') {
      G--;
    }

    st.push({x + 1, y});
    st.push({x - 1, y});
    st.push({x, y + 1});
    st.push({x, y - 1});
  }
}

int main() {
  cin >> t;
  while (t--) {
    cin >> n >> m;
    bool flag = false;
    G = 0;

    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= m; j++) {
        cin >> maze[i][j];
      }
    }

    for (int i = 1; i <= n && !flag; i++) {
      for (int j = 1; j <= m && !flag; j++) {
        if (maze[i][j] == 'B') {
          if (!block(i, j)) {
            cout << "No\n";
            flag = true;
            break;
          }
        } else if (maze[i][j] == 'G') {
          G++;
        }
      }
    }

    if (flag) {
      continue;
    }

    dfs(n, m);

    if (G == 0) {
      cout << "Yes\n";
    } else {
      cout << "No\n";
    }
  }

  return 0;
}