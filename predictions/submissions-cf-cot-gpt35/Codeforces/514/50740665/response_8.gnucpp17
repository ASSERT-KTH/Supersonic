#include <iostream>
#include <string>
#include <unordered_set>

const int base = 257;
const int mod = 1e9 + 7;

std::unordered_set<long long> st;
long long f[1000000];

void init() {
  f[0] = 1;
  for (int i = 1; i < 1000000; i++)
    f[i] = (f[i - 1] * base) % mod;
}

long long get_hash(const std::string& s) {
  long long val = 0;
  for (char c : s) {
    val = (val * base + c) % mod;
  }
  return val;
}

bool check(const std::string& t) {
  long long val = get_hash(t);
  int size = t.size();
  for (int i = 0; i < size; i++) {
    for (char j = 'a'; j <= 'c'; j++) {
      if (j != t[i]) {
        long long hash_val = ((((j - t[i]) * f[size - i - 1]) % mod) + val) % mod;
        if (st.find(hash_val) != st.end())
          return true;
      }
    }
  }
  return false;
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(0);

  init();
  int n, m;
  scanf("%d %d", &n, &m);
  for (int i = 0; i < n; i++) {
    std::string s;
    std::cin >> s;
    st.insert(get_hash(s));
  }
  for (int i = 0; i < m; i++) {
    std::string t;
    std::cin >> t;
    printf("%s\n", (check(t) ? "YES" : "NO"));
  }
  return 0;
}