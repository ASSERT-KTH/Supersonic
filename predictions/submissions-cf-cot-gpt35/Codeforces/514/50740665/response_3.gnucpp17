#include <iostream>
#include <unordered_set>
using namespace std;

typedef long long ll;
const int base = 257;
const int mod = 1e9 + 7;
const int N = 1e6;

unordered_set<ll> st;
ll f[N];

void init() {
    f[0] = 1;
    for (int i = 1; i < N; i++)
        f[i] = (f[i - 1] * base) % mod;
}

ll get_hash(string s) {
    ll val = 0;
    for (int i = s.size() - 1; i >= 0; i--) {
        val = (val * base + s[i]) % mod;
    }
    return val;
}

bool check(string t) {
    ll val = get_hash(t);
    for (int i = 0; i < t.size(); i++) {
        for (int j = 'a'; j <= 'c'; j++) {
            if (j != t[i]) {
                ll new_hash = (((j - t[i]) * f[t.size() - i - 1] + val) % mod + mod) % mod;
                if (st.find(new_hash) != st.end())
                    return true;
            }
        }
    }
    return false;
}

int main() {
    init();
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        string s;
        cin >> s;
        st.insert(get_hash(s));
    }
    for (int i = 0; i < m; i++) {
        string t;
        cin >> t;
        cout << (check(t) ? "YES" : "NO") << endl;
    }
    return 0;
}