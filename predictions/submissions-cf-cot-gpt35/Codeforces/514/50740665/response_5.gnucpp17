#include <iostream>
#include <unordered_set>
using namespace std;

constexpr int base = 257;
constexpr int mod = 1e9 + 7;
constexpr int N = 1e6;

unordered_set<int> st;
int f[N];

void init() {
  f[0] = 1;
  for (int i = 1; i < N; i++)
    f[i] = (f[i - 1] * base) % mod;
}

int get_hash(const string& s) {
  int val = 0;
  for (char c : s) {
    val = (val * base + c) % mod;
  }
  return val;
}

bool check(const string& t) {
  int val = get_hash(t);
  int len = t.size();
  for (int i = 0; i < len; i++) {
    for (char j = 'a'; j <= 'c'; j++) {
      if (j != t[i]) {
        int diff = (j - t[i] + mod) % mod;
        int new_val = ((diff * f[len - i - 1]) % mod + val) % mod;
        if (st.find(new_val) != st.end())
          return true;
      }
    }
  }
  return false;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  init();

  int n, m;
  cin >> n >> m;

  st.reserve(n);

  for (int i = 0; i < n; i++) {
    string s;
    cin >> s;
    st.insert(get_hash(s));
  }

  for (int i = 0; i < m; i++) {
    string t;
    cin >> t;
    cout << (check(t) ? "YES" : "NO") << endl;
  }

  return 0;
}