#include <iostream>
#include <vector>

int recurse(const std::vector<int>& a, const std::vector<int>& b, std::vector<std::vector<int>>& dp,
            std::size_t index = 0, int OR = 0) {
  if (index == a.size()) {
    return OR;
  }
  if (dp[index][OR] != -1) {
    return dp[index][OR];
  }
  int answer = std::numeric_limits<int>::max();
  std::size_t bSize = b.size();
  for (std::size_t i = 0; i < bSize; ++i) {
    int ret = recurse(a, b, dp, index + 1, OR | (a[index] & b[i]));
    answer = std::min(answer, ret);
  }
  return dp[index][OR] = answer;
}

int main(int argc, char const* argv[]) {
  int n, m;
  std::cin >> n >> m;
  std::vector<int> a(n), b(m);
  for (int i = 0; i < n; ++i) {
    std::cin >> a[i];
  }
  for (int i = 0; i < m; ++i) {
    std::cin >> b[i];
  }

  const int dpSize = 1 << 9;
  std::vector<std::vector<int>> dp(n, std::vector<int>(dpSize, -1));

  std::cout << recurse(a, b, dp) << '\n';
  return 0;
}