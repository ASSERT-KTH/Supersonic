#include <iostream>
#include <vector>

int recurse(const std::vector<int>& a, const std::vector<int>& b,
            std::vector<std::vector<int>>& dp, size_t index = 0, int OR = 0) {
  if (index == a.size()) {
    return OR;
  }
  if (dp[index][OR] != -1)
    return dp[index][OR];
  int answer = std::numeric_limits<int>::max();
  for (size_t i = 0; i < b.size(); ++i) {
    int ret = recurse(a, b, dp, index + 1, OR | (a[index] & b[i]));
    answer = std::min(answer, ret);
  }
  return dp[index][OR] = answer;
}

int main() {
  int const n, m;
  std::cin >> n >> m;
  std::vector<int> a, b;
  a.reserve(n);
  b.reserve(m);
  for (int i = 0; i < n; ++i) {
    int value;
    std::cin >> value;
    a.emplace_back(value);
  }
  for (int i = 0; i < m; ++i) {
    int value;
    std::cin >> value;
    b.emplace_back(value);
  }
  std::vector<std::vector<int>> dp(n, std::vector<int>(1 << 9, -1));
  std::cout << recurse(a, b, dp) << '\n';
  return 0;
}