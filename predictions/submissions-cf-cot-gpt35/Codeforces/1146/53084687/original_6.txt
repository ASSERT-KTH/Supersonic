The given program performs range updates and queries on an array. The main optimization that can be done is to reduce the memory usage by using a smaller array for the segment tree.

Currently, the segment tree arrays `sgt0` and `sgt1` have a size of `X * 4 + 1`. However, the maximum value of `X` is 1e5, which means the segment tree arrays have a size of 4e5 + 1. This is unnecessary and can be reduced.

To optimize the memory usage, we can calculate the actual size required for the segment tree arrays based on the input size `n`. The maximum value in the array `a` is used to determine the range of the segment tree. The size of the segment tree arrays can be calculated as `2 * max_value + 1`.

Here are the optimization steps:

1. Calculate the maximum value `max_value` in the input array `a`.
2. Calculate the size of the segment tree arrays as `2 * max_value + 1`.
3. Modify the `build` function to use the calculated size for the segment tree arrays.
4. Modify the `update` and `query` functions to use the calculated size for the segment tree arrays.
5. Modify the declaration of the segment tree arrays `sgt0` and `sgt1` to use the calculated size.

Here is the optimized program:

```cpp
#include <algorithm>
#include <cstdio>
using namespace std;
const int X = 1e5;
struct node {
  int l, r;
  int lz;
  int sgn;
};
void pushup(node sgt[], int x) {
  if (sgt[x << 1].sgn == sgt[x << 1 | 1].sgn) {
    sgt[x].sgn = sgt[x << 1].sgn;
  } else {
    sgt[x].sgn = 0;
  }
}
void inv(int &x) { x = x % 2 == 0 ? 2 - x : -x; }
void pushdown(node sgt[], int x) {
  if (sgt[x].lz == 2) {
    sgt[x << 1].sgn = -sgt[x << 1].sgn;
    sgt[x << 1 | 1].sgn = -sgt[x << 1 | 1].sgn;
    inv(sgt[x << 1].lz);
    inv(sgt[x << 1 | 1].lz);
    ;
    sgt[x].lz = 0;
  }
  if (sgt[x].lz) {
    sgt[x << 1].sgn = sgt[x].lz;
    sgt[x << 1 | 1].sgn = sgt[x].lz;
    sgt[x << 1].lz = sgt[x].lz;
    sgt[x << 1 | 1].lz = sgt[x].lz;
    sgt[x].lz = 0;
  }
}
void build(node sgt[], int l, int r, int x) {
  sgt[x].l = l;
  sgt[x].r = r;
  sgt[x].lz = 0;
  if (l == r) {
    sgt[x].sgn = 1;
    return;
  }
  int mid = (l + r) >> 1;
  build(sgt, l, mid, x << 1);
  build(sgt, mid + 1, r, x << 1 | 1);
  pushup(sgt, x);
}
void update(node sgt[], int l, int r, int x, int val) {
  if (l <= sgt[x].l && r >= sgt[x].r) {
    if (val == 2) {
      inv(sgt[x].sgn);
      inv(sgt[x].lz);
    } else {
      sgt[x].sgn = val;
      sgt[x].lz = val;
    }
    return;
  }
  pushdown(sgt, x);
  int mid = (sgt[x].l + sgt[x].r) >> 1;
  if (l <= mid) {
    update(sgt, l, r, x << 1, val);
  }
  if (r > mid) {
    update(sgt, l, r, x << 1 | 1, val);
  }
  pushup(sgt, x);
}
int query(node sgt[], int a, int x) {
  if (sgt[x].l == a && sgt[x].r == a) {
    return sgt[x].sgn;
  }
  pushdown(sgt, x);
  int mid = (sgt[x].l + sgt[x].r) >> 1;
  return a <= mid ? query(sgt, a, x << 1) : query(sgt, a, x << 1 | 1);
}
int main() {
  int n, q;
  scanf("%d %d", &n, &q);
  int a[n];
  int max_value = 0;
  for (int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
    max_value = max(max_value, abs(a[i]));
  }
  getchar();
  int size = 2 * max_value + 1;
  node sgt0[size * 4 + 1], sgt1[size * 4 + 1];
  build(sgt0, 1, size, 1);
  build(sgt1, 1, size, 1);
  while (q--) {
    char s;
    int x;
    scanf("%c %d\n", &s, &x);
    if (s == '>') {
      x++;
      if (x == 0) {
        x++;
      }
      if (x > 0) {
        update(sgt0, x, size, 1, 1);
        update(sgt1, x, size, 1, -1);
      } else {
        update(sgt0, 1, -x, 1, 2);
        update(sgt1, 1, -x, 1, 2);
        update(sgt0, -x + 1, size, 1, 1);
        update(sgt1, -x + 1, size, 1, -1);
      }
    } else {
      x--;
      if (x == 0) {
        x--;
      }
      if (x < 0) {
        update(sgt0, -x, size, 1, -1);
        update(sgt1, -x, size, 1, 1);
      } else {
        update(sgt0, 1, x, 1, 2);
        update(sgt1, 1, x, 1, 2);
        update(sgt0, x + 1, size, 1, -1);
        update(sgt1, x + 1, size, 1, 1);
      }
    }
  }
  for (int i = 0; i < n; i++) {
    int r = 0;
    if (a[i] < 0) {
      r = query(sgt0, -a[i], 1);
    } else if (a[i] > 0) {
      r = query(sgt1, a[i], 1);
    }
    printf("%d%c", a[i] * r, i == n - 1 ? '\n' : ' ');
  }
  return 0;
}
```