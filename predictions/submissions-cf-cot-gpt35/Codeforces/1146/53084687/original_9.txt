To optimize the given program, we can make the following modifications:

1. Combine the declarations of `sgt0` and `sgt1` arrays into a single array `sgt` to reduce memory usage.

2. Change the datatype of the `sgn` and `lz` variables from `int` to `bool` to reduce memory usage.

3. Instead of using the `inv` function to calculate the inverse of an integer, we can use the `sgn` function from the `<cmath>` library to calculate the sign of the integer.

4. Remove the unused `<algorithm>` header.

5. Remove the unused `getchar()` function call.

6. Remove the unnecessary check for `x == 0` before performing updates.

7. Avoid unnecessary function calls by passing the required parameters directly to the functions.

8. Change the datatype of the `a` array from `int` to `long long` to handle larger integer values.

Here is the optimized C++ program:

```cpp
#include <cstdio>
#include <cmath>

const int X = 1e5;

struct node {
  int l, r;
  bool lz;
  bool sgn;
};

void pushup(node sgt[], int x) {
  sgt[x].sgn = (sgt[x << 1].sgn == sgt[x << 1 | 1].sgn) ? sgt[x << 1].sgn : false;
}

void pushdown(node sgt[], int x) {
  if (sgt[x].lz) {
    sgt[x << 1].sgn = sgt[x].lz;
    sgt[x << 1 | 1].sgn = sgt[x].lz;
    sgt[x << 1].lz = sgt[x].lz;
    sgt[x << 1 | 1].lz = sgt[x].lz;
    sgt[x].lz = false;
  }
}

void build(node sgt[], int l, int r, int x) {
  sgt[x].l = l;
  sgt[x].r = r;
  sgt[x].lz = false;
  if (l == r) {
    sgt[x].sgn = true;
    return;
  }
  int mid = (l + r) >> 1;
  build(sgt, l, mid, x << 1);
  build(sgt, mid + 1, r, x << 1 | 1);
  pushup(sgt, x);
}

void update(node sgt[], int l, int r, int x, bool val) {
  if (l <= sgt[x].l && r >= sgt[x].r) {
    sgt[x].sgn = sgt[x].lz = val;
    return;
  }
  pushdown(sgt, x);
  int mid = (sgt[x].l + sgt[x].r) >> 1;
  if (l <= mid) {
    update(sgt, l, r, x << 1, val);
  }
  if (r > mid) {
    update(sgt, l, r, x << 1 | 1, val);
  }
  pushup(sgt, x);
}

bool query(node sgt[], int a, int x) {
  if (sgt[x].l == a && sgt[x].r == a) {
    return sgt[x].sgn;
  }
  pushdown(sgt, x);
  int mid = (sgt[x].l + sgt[x].r) >> 1;
  return a <= mid ? query(sgt, a, x << 1) : query(sgt, a, x << 1 | 1);
}

int main() {
  int n, q;
  scanf("%d %d", &n, &q);
  long long a[n];
  for (int i = 0; i < n; i++) {
    scanf("%lld", &a[i]);
  }

  node sgt[X * 4 + 1];
  build(sgt, 1, X, 1);

  while (q--) {
    char s;
    int x;
    scanf(" %c %d", &s, &x);
    if (s == '>') {
      x++;
      if (x > 0) {
        update(sgt, x, X, 1, true);
        update(sgt, x, X, 1, false);
      } else {
        update(sgt, 1, -x, 1, true);
        update(sgt, -x + 1, X, 1, false);
      }
    } else {
      x--;
      if (x < 0) {
        update(sgt, -x, X, 1, false);
        update(sgt, -x, X, 1, true);
      } else {
        update(sgt, 1, x, 1, true);
        update(sgt, x + 1, X, 1, false);
      }
    }
  }

  for (int i = 0; i < n; i++) {
    int r = 0;
    if (a[i] < 0) {
      r = query(sgt, -a[i], 1);
    } else if (a[i] > 0) {
      r = query(sgt, a[i], 1);
    }
    printf("%lld%c", a[i] * (r ? 1 : -1), i == n - 1 ? '\n' : ' ');
  }

  return 0;
}
```