To optimize the given C/C++ program, we can make the following changes:

1. Use a `vector` instead of an array for the `ord` array. This will allow us to dynamically resize the array as needed, instead of using a fixed size.
2. Use a `vector` instead of an array for the `cmp` array. This will allow us to dynamically resize the array as needed, instead of using a fixed size.
3. Use a `vector` instead of an array for the `val` array. This will allow us to dynamically resize the array as needed, instead of using a fixed size.
4. Use `emplace_back` instead of `push_back` when adding elements to the adjacency lists. This will avoid unnecessary copying or moving of elements.
5. Use `reserve` to preallocate memory for the adjacency lists and the transpose adjacency lists. This will reduce the number of memory allocations and improve performance.
6. Use `reserve` to preallocate memory for the `stk` vector. This will reduce the number of memory allocations and improve performance.
7. Use a `vector` instead of an array for the `sw` array. This will allow us to dynamically resize the array as needed, instead of using a fixed size.
8. Use `emplace_back` instead of `push_back` when adding elements to the `stk` vector. This will avoid unnecessary copying or moving of elements.
9. Use `reserve` to preallocate memory for the `adj` and `adjt` vectors. This will reduce the number of memory allocations and improve performance.

Here is the optimized C/C++ program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const int N = 1e5 + 5;

int n, vis[2 * N], ordn, cnt;
vector<int> ord, cmp, val;
vector<vector<int>> adj, adjt;
vector<int> stk;
vector<vector<int>> sw;

int v(int x) { return 2 * x; }
int nv(int x) { return 2 * x + 1; }

void add(int a, int b) {
  adj[a ^ 1].emplace_back(b);
  adj[b ^ 1].emplace_back(a);
  adjt[b].emplace_back(a ^ 1);
  adjt[a].emplace_back(b ^ 1);
}

void dfs(int x) {
  vis[x] = 1;
  for (auto v : adj[x])
    if (!vis[v])
      dfs(v);
  ord.emplace_back(x);
}

void dfst(int x) {
  cmp[x] = cnt;
  vis[x] = 0;
  for (auto v : adjt[x])
    if (vis[v])
      dfst(v);
}

bool run2sat() {
  for (int i = 1; i <= m; i++) {
    if (!vis[v(i)])
      dfs(v(i));
    if (!vis[nv(i)])
      dfs(nv(i));
  }
  for (int i = ordn - 1; i >= 0; i--)
    if (vis[ord[i]])
      cnt++, dfst(ord[i]);
  for (int i = m; i >= 0; i--)
    if (vis[ord[i]])
      cnt++, dfst(ord[i]);
  for (int i = 1; i <= m; i++) {
    if (cmp[v(i)] == cmp[nv(i)])
      return false;
    val[i] = cmp[v(i)] > cmp[nv(i)];
  }
  return true;
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0);
  cin >> n >> m;

  vector<int> st(n + 1);
  for (int i = 1; i <= n; i++)
    cin >> st[i];

  int q, a;
  sw.resize(n + 1, vector<int>(2));
  for (int i = 1; i <= m; i++) {
    cin >> q;
    while (q--) {
      cin >> a;
      sw[a][0] ? sw[a][1] = i : sw[a][0] = i;
    }
  }

  adj.resize(2 * m + 2);
  adjt.resize(2 * m + 2);
  adj.reserve(2 * m + 2);
  adjt.reserve(2 * m + 2);

  for (int i = 1; i <= n; i++) {
    int p = sw[i][0];
    int q = sw[i][1];
    if (!st[i])
      add(v(p), v(q)), add(nv(p), nv(q));
    else
      add(nv(p), v(q)), add(v(p), nv(q));
  }

  ord.reserve(2 * m + 2);
  cmp.resize(2 * m + 2);
  val.resize(m + 1);
  stk.reserve(n);

  cout << (run2sat() ? "YES\n" : "NO\n");
}
```
