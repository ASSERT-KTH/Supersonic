#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class TwoSatSolver {
private:
    int n, m;
    vector<int> st;
    vector<vector<int>> switches;
    vector<vector<int>> graph;
    vector<bool> vis;
    vector<int> ord;
    vector<int> cmp;
    vector<bool> val;
    int cnt;

    int v(int x) { return 2 * x; }
    int nv(int x) { return 2 * x + 1; }

    void addEdge(int a, int b) {
        graph[a ^ 1].push_back(b);
        graph[b ^ 1].push_back(a);
    }

    void dfs(int x) {
        vis[x] = true;
        for (auto v : graph[x]) {
            if (!vis[v]) {
                dfs(v);
            }
        }
        ord.push_back(x);
    }

    void runDfs() {
        vis.assign(2 * m, false);
        ord.clear();
        for (int i = 0; i < 2 * m; i++) {
            if (!vis[i]) {
                dfs(i);
            }
        }
    }

    void dfst(int x) {
        cmp[x] = cnt;
        vis[x] = false;
        for (auto v : graph[x]) {
            if (vis[v]) {
                dfst(v);
            }
        }
    }

    void run2sat() {
        runDfs();
        cnt = 0;
        cmp.assign(2 * m, 0);
        vis.assign(2 * m, true);
        for (int i = ord.size() - 1; i >= 0; i--) {
            if (vis[ord[i]]) {
                cnt++;
                dfst(ord[i]);
            }
        }
        val.assign(m + 1, false);
        for (int i = 1; i <= m; i++) {
            if (cmp[v(i)] == cmp[nv(i)]) {
                cout << "NO\n";
                return;
            }
            val[i] = cmp[v(i)] > cmp[nv(i)];
        }
        cout << "YES\n";
    }

public:
    void solve() {
        cin >> n >> m;
        st.resize(n + 1);
        for (int i = 1; i <= n; i++) {
            cin >> st[i];
        }
        switches.resize(m + 1);
        int q, a;
        for (int i = 1; i <= m; i++) {
            cin >> q;
            while (q--) {
                cin >> a;
                switches[a].push_back(i);
            }
        }
        graph.assign(2 * m, vector<int>());
        for (int i = 1; i <= n; i++) {
            int p = switches[i][0];
            int q = switches[i][1];
            if (!st[i]) {
                addEdge(v(p), v(q));
                addEdge(nv(p), nv(q));
            } else {
                addEdge(nv(p), v(q));
                addEdge(v(p), nv(q));
            }
        }
        run2sat();
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    TwoSatSolver solver;
    solver.solve();

    return 0;
}