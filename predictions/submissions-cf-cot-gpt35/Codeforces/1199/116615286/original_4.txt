To optimize the given program, we can make the following modifications:

1. Remove unnecessary `#include` statements: The program includes several unnecessary headers, such as `<cmath>`, `<cstdlib>`, `<ctime>`, `<map>`, `<set>`, `<stack>`, and `<string>`. We can remove these headers to reduce the compile time and memory usage.

2. Avoid using the `using namespace std` directive: The program currently uses the `using namespace std` directive, which brings all the names in the `std` namespace into the global scope. This can lead to potential naming conflicts and makes it harder to read and understand the code. We can remove this directive and use the `std::` prefix where necessary.

3. Remove unnecessary `typedef` statements: The program includes unnecessary `typedef` statements for `long long` and `unsigned long long` types (`ll` and `ull`). These types can be directly used as `long long` and `unsigned long long` without the need for `typedef`.

4. Remove unnecessary `#define` statements: The program includes an unnecessary `#define` statement for `pi` (pair of integers). We can remove this `#define` statement as it is not used in the program.

5. Avoid using the `memset` function: The program uses the `memset` function to set all elements of the `match` array to 0. Instead of using `memset`, we can directly initialize the `match` array to `false` using the default constructor.

6. Avoid unnecessary clearing of vectors: The program unnecessarily clears the `matching` and `v` vectors at the end of each iteration of the while loop. Since the vectors are reinitialized in each iteration, there is no need to explicitly clear them.

7. Optimize the loop conditions: The loops in the program can be optimized by using pre-increment instead of post-increment for the loop variables. This can slightly improve the performance of the loops.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

#define FAST ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);

const int MAX_N = 100001;

int r[4] = {1, 0, 0, -1};
int c[4] = {0, -1, 1, 0};
char p[4] = {'D', 'L', 'R', 'U'};

int main() {
  FAST;

  int t, n, m;
  std::cin >> t;

  while (t--) {
    std::cin >> n >> m;

    std::vector<std::pair<int, int>> adj[MAX_N];
    bool match[MAX_N] = {false};
    std::vector<int> matching;

    for (int i = 1; i <= m; ++i) {
      int x, y;
      std::cin >> x >> y;
      adj[x].push_back(std::make_pair(y, i));
    }

    for (int i = 1; i <= 3 * n; ++i) {
      if (match[i])
        continue;

      for (auto it = adj[i].begin(); it != adj[i].end(); ++it) {
        int nd = it->first;
        int ed = it->second;

        if (!match[nd]) {
          matching.push_back(ed);
          match[nd] = true;
          match[i] = true;
          break;
        }
      }
    }

    if (matching.size() >= n) {
      std::cout << "Matching\n";
      for (int i = 0; i < n; ++i) {
        std::cout << matching[i] << ' ';
      }
      std::cout << '\n';
      continue;
    }

    std::vector<int> v;
    for (int i = 1; i <= 3 * n; ++i) {
      if (!match[i])
        v.push_back(i);
    }

    if (v.size() >= n) {
      std::cout << "IndSet\n";
      for (int i = 0; i < n; ++i) {
        std::cout << v[i] << ' ';
      }
    } else {
      std::cout << "Impossible";
    }
    std::cout << '\n';
  }

  return 0;
}
```