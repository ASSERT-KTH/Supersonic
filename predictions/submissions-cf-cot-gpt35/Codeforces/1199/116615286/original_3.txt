To optimize the given C++ program, we can make the following modifications:

1. Remove unnecessary header files:
   - The `#include <bits/stdc++.h>` header file is not necessary as it includes a large number of standard library headers, which may slow down the compilation process. We can remove it.
   - The `#include <algorithm>`, `#include <climits>`, `#include <cmath>`, `#include <cstdlib>`, `#include <ctime>`, `#include <iostream>`, `#include <map>`, `#include <set>`, `#include <stack>`, `#include <string>`, `#include <vector>` headers are not used in the code and can be removed.

2. Avoid using global variables and constants:
   - The `mod` variable is not used in the code and can be removed.

3. Avoid unnecessary memory allocation and deallocation:
   - The `matching` vector is cleared at the end of each iteration of the while loop. Instead of clearing and reallocating memory, we can reuse the same vector by calling `matching.clear()` before each iteration of the loop.

4. Use a more efficient data structure for adjacency list:
   - Instead of using a vector of pairs to represent the adjacency list, we can use a vector of sets. This will allow faster lookups and insertions when checking for matching pairs.

5. Optimize the matching algorithm:
   - Instead of iterating over all the edges for each node, we can use a greedy approach to find a matching. We can iterate over the nodes and for each node, select the first available edge that is not already matched. This will reduce the time complexity of the matching algorithm.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <vector>
#include <set>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

  int t, n, m;
  cin >> t;
  
  while (t--) {
    cin >> n >> m;
    vector<set<int>> adj(3 * n + 1);
    vector<bool> match(3 * n + 1, false);
    vector<int> matching;

    for (int i = 1; i <= m; i++) {
      int x, y;
      cin >> x >> y;
      adj[x].insert(y);
    }

    for (int i = 1; i <= 3 * n; i++) {
      if (match[i] || adj[i].empty()) continue;
      int nd = *adj[i].begin();
      adj[i].erase(nd);
      if (!match[nd]) {
        matching.push_back(i);
        match[i] = true;
        match[nd] = true;
      }
    }

    if (matching.size() >= n) {
      cout << "Matching\n";
      for (int i = 0; i < n; i++) {
        cout << matching[i] << " ";
      }
      cout << '\n';
    } else {
      vector<int> v;
      for (int i = 1; i <= 3 * n; i++) {
        if (!match[i]) v.push_back(i);
      }
      if (v.size() >= n) {
        cout << "IndSet\n";
        for (int i = 0; i < n; i++) {
          cout << v[i] << " ";
        }
      } else {
        cout << "Impossible";
      }
      cout << '\n';
    }
  }
}
```