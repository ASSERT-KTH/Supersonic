#include <iostream>
#include <vector>

#define FAST ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);

const int MAX_N = 100001;

int r[4] = {1, 0, 0, -1};
int c[4] = {0, -1, 1, 0};
char p[4] = {'D', 'L', 'R', 'U'};

int main() {
  FAST;

  int t, n, m;
  std::cin >> t;

  while (t--) {
    std::cin >> n >> m;

    std::vector<std::pair<int, int>> adj[MAX_N];
    bool match[MAX_N] = {false};
    std::vector<int> matching;

    for (int i = 1; i <= m; ++i) {
      int x, y;
      std::cin >> x >> y;
      adj[x].push_back(std::make_pair(y, i));
    }

    for (int i = 1; i <= 3 * n; ++i) {
      if (match[i])
        continue;

      for (auto it = adj[i].begin(); it != adj[i].end(); ++it) {
        int nd = it->first;
        int ed = it->second;

        if (!match[nd]) {
          matching.push_back(ed);
          match[nd] = true;
          match[i] = true;
          break;
        }
      }
    }

    if (matching.size() >= n) {
      std::cout << "Matching\n";
      for (int i = 0; i < n; ++i) {
        std::cout << matching[i] << ' ';
      }
      std::cout << '\n';
      continue;
    }

    std::vector<int> v;
    for (int i = 1; i <= 3 * n; ++i) {
      if (!match[i])
        v.push_back(i);
    }

    if (v.size() >= n) {
      std::cout << "IndSet\n";
      for (int i = 0; i < n; ++i) {
        std::cout << v[i] << ' ';
      }
    } else {
      std::cout << "Impossible";
    }
    std::cout << '\n';
  }

  return 0;
}