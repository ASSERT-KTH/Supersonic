The given program is finding a matching or an independent set in a graph. It uses an adjacency list to represent the graph and applies a greedy algorithm to find the matching or independent set.

To optimize the program, we can make the following changes:

1. Remove unnecessary headers: The program includes several unnecessary headers such as `<algorithm>`, `<climits>`, `<cmath>`, `<cstdlib>`, `<ctime>`, `<map>`, `<set>`, `<stack>`, and `<string>`. We can remove them as they are not used in the program.

2. Remove unnecessary typedefs: The program includes unnecessary typedefs for `ll` and `ull`. We can remove them as they are not used in the program.

3. Avoid using `using namespace std;`: The program uses the `using namespace std;` directive, which is considered bad practice. We can remove it and use the `std::` prefix instead.

4. Remove unnecessary `#define` macros: The program includes an unnecessary `#define` macro for `pi` and `pb`. We can remove them as they are not used in the program.

5. Avoid using `memset` and `memset` for boolean arrays: The program uses `memset` and `memset` to initialize and clear the `match` array. Instead, we can use `std::fill` to initialize the array to `false` and use `std::fill` to clear the array.

6. Use range-based for loop: The program uses an iterator-based for loop to iterate over the elements of `adj[i]`. We can use a range-based for loop instead, which is more concise.

7. Avoid unnecessary vector clearing: The program clears the `matching` and `v` vectors at the end of each iteration. Since we are reassigning them in each iteration, we can remove the clearing statements.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <vector>

const int MAXN = 300005;

int t, n, m;
std::vector<std::pair<int, int>> adj[MAXN];
bool match[MAXN];

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);

  std::cin >> t;
  while (t--) {
    std::cin >> n >> m;

    for (int i = 1; i <= 3 * n; i++) {
      adj[i].clear();
      match[i] = false;
    }

    for (int i = 1; i <= m; i++) {
      int x, y;
      std::cin >> x >> y;
      adj[x].emplace_back(y, i);
    }

    std::vector<int> matching;
    for (int i = 1; i <= 3 * n; i++) {
      if (match[i]) {
        continue;
      }
      for (const auto& p : adj[i]) {
        int nd = p.first;
        int ed = p.second;
        if (!match[nd]) {
          matching.push_back(ed);
          match[nd] = true;
          match[i] = true;
          break;
        }
      }
    }

    if (matching.size() >= n) {
      std::cout << "Matching\n";
      for (int i = 0; i < n; i++) {
        std::cout << matching[i] << " ";
      }
      std::cout << '\n';
    } else {
      std::vector<int> v;
      for (int i = 1; i <= 3 * n; i++) {
        if (!match[i]) {
          v.push_back(i);
        }
      }
      if (v.size() >= n) {
        std::cout << "IndSet\n";
        for (int i = 0; i < n; i++) {
          std::cout << v[i] << " ";
        }
      } else {
        std::cout << "Impossible";
      }
      std::cout << '\n';
    }
  }

  return 0;
}
```

By making these optimizations, we have reduced the memory usage by removing unnecessary headers and typedefs, improved readability by avoiding unnecessary `#define` macros, and optimized the runtime by using a range-based for loop and avoiding unnecessary vector clearing.