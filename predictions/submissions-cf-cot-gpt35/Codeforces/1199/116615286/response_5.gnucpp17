#include <iostream>
#include <vector>
#include <cstring>
#include <set>
using namespace std;

const int MAXN = 300005;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

  int t;
  cin >> t;

  while (t--) {
    int n, m;
    cin >> n >> m;

    vector<pair<int, int>> adj[n + 1];
    bool match[MAXN];
    memset(match, 0, sizeof(match));

    for (int i = 1; i <= m; i++) {
      int x, y;
      cin >> x >> y;
      adj[x].push_back(make_pair(y, i));
    }

    vector<int> matching;
    set<int> matchedNodes;

    for (int i = 1; i <= n; i++) {
      for (auto it : adj[i]) {
        int nd = it.first;
        int ed = it.second;
        if (matchedNodes.find(nd) == matchedNodes.end()) {
          matching.push_back(ed);
          matchedNodes.insert(nd);
          matchedNodes.insert(i);
          break;
        }
      }
    }

    if (matching.size() >= n) {
      cout << "Matching\n";
      for (int i = 0; i < n; i++) {
        cout << matching[i] << " ";
      }
    } else {
      vector<int> v;
      for (int i = 1; i <= n; i++) {
        if (!matchedNodes.count(i)) {
          v.push_back(i);
        }
      }
      if (v.size() >= n) {
        cout << "IndSet\n";
        for (int i = 0; i < n; i++) {
          cout << v[i] << " ";
        }
      } else {
        cout << "Impossible";
      }
    }
    cout << '\n';
  }

  return 0;
}