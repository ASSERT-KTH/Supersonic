#include <iostream>
#include <unordered_map>
#include <vector>

typedef long long ll;
typedef unsigned long long ull;

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);

  int t;
  std::cin >> t;

  while (t--) {
    int n, m;
    std::cin >> n >> m;

    std::unordered_map<int, std::vector<std::pair<int, int>>> adj;
    std::vector<int> matching;
    std::vector<int> v;

    adj.reserve(3 * n);
    matching.reserve(n);
    v.reserve(3 * n);

    for (int i = 0; i < m; i++) {
      int x, y;
      std::cin >> x >> y;
      adj[x].emplace_back(y, i + 1);
    }

    std::unordered_set<int> visited;

    for (int i = 1; i <= 3 * n; i++) {
      if (visited.count(i) || matching.size() >= n) {
        break;
      }

      visited.insert(i);

      for (const auto& p : adj[i]) {
        int nd = p.first;
        int ed = p.second;

        if (!visited.count(nd)) {
          matching.emplace_back(ed);
          visited.insert(nd);
          break;
        }
      }
    }

    if (matching.size() >= n) {
      std::cout << "Matching\n";
      for (int i = 0; i < n; i++) {
        std::cout << matching[i] << ' ';
      }
      std::cout << '\n';
    } else {
      for (int i = 1; i <= 3 * n; i++) {
        if (!visited.count(i)) {
          v.emplace_back(i);
          if (v.size() >= n) {
            break;
          }
        }
      }

      if (v.size() >= n) {
        std::cout << "IndSet\n";
        for (int i = 0; i < n; i++) {
          std::cout << v[i] << ' ';
        }
      } else {
        std::cout << "Impossible";
      }

      std::cout << '\n';
    }
  }

  return 0;
}