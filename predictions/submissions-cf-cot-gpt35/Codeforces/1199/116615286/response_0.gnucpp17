#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <set>
using namespace std;

int t, n, m;
vector<pair<int, int>> adj[90005];
bool match[90005];
vector<int> matching;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> t;
    while (t--) {
        cin >> n >> m;

        matching.clear();
        for (int i = 1; i <= 3 * n; i++) {
            adj[i].clear();
            match[i] = false;
        }

        for (int i = 1; i <= m; i++) {
            int x, y;
            cin >> x >> y;
            adj[x].emplace_back(y, i);
        }

        set<int> matched;
        for (int i = 1; i <= 3 * n; i++) {
            if (match[i])
                continue;

            for (const auto& edge : adj[i]) {
                int nd = edge.first;
                int ed = edge.second;
                if (!match[nd]) {
                    matching.push_back(ed);
                    match[nd] = true;
                    match[i] = true;
                    matched.insert(nd);
                    break;
                }
            }
        }

        if (matching.size() >= n) {
            cout << "Matching\n";
            for (int i = 0; i < n; i++) {
                cout << matching[i] << " ";
            }
            cout << '\n';
        } else {
            vector<int> v;
            for (int i = 1; i <= 3 * n; i++) {
                if (!match[i] && !matched.count(i))
                    v.push_back(i);
            }

            if (v.size() >= n) {
                cout << "IndSet\n";
                for (int i = 0; i < n; i++) {
                    cout << v[i] << " ";
                }
            } else {
                cout << "Impossible";
            }
            cout << '\n';
        }
    }

    return 0;
}