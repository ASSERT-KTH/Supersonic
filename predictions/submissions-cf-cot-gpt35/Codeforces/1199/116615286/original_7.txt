Optimization steps:
1. Remove unnecessary includes: The program includes many unnecessary headers that are not used. These should be removed to improve compile time.
2. Remove unnecessary global variables: The program has several global variables that are not used. These should be removed to reduce memory usage.
3. Use reserve() for vectors: The program creates vectors without specifying their initial size. This can result in frequent reallocations and copying of elements. Instead, we can use the reserve() function to allocate the required memory upfront.
4. Use unordered_map instead of map: The program uses a map to store adjacency lists. However, since the order of elements does not matter, we can use an unordered_map for better performance.
5. Use vector::emplace_back() instead of push_back(): The program uses push_back() to add elements to vectors. However, using emplace_back() can avoid unnecessary copies and improve performance.
6. Use a single loop to find matches: The program currently uses two nested loops to find matches. We can optimize this by using a single loop with an unordered_set to store visited nodes and check for matches.
7. Avoid unnecessary clearing of vectors: The program unnecessarily clears the matching vector at the end of each iteration. Since it is cleared before each use, this step can be removed.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_map>
#include <vector>

typedef long long ll;
typedef unsigned long long ull;

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);

  int t;
  std::cin >> t;

  while (t--) {
    int n, m;
    std::cin >> n >> m;

    std::unordered_map<int, std::vector<std::pair<int, int>>> adj;
    std::vector<int> matching;
    std::vector<int> v;

    adj.reserve(3 * n);
    matching.reserve(n);
    v.reserve(3 * n);

    for (int i = 0; i < m; i++) {
      int x, y;
      std::cin >> x >> y;
      adj[x].emplace_back(y, i + 1);
    }

    std::unordered_set<int> visited;

    for (int i = 1; i <= 3 * n; i++) {
      if (visited.count(i) || matching.size() >= n) {
        break;
      }

      visited.insert(i);

      for (const auto& p : adj[i]) {
        int nd = p.first;
        int ed = p.second;

        if (!visited.count(nd)) {
          matching.emplace_back(ed);
          visited.insert(nd);
          break;
        }
      }
    }

    if (matching.size() >= n) {
      std::cout << "Matching\n";
      for (int i = 0; i < n; i++) {
        std::cout << matching[i] << ' ';
      }
      std::cout << '\n';
    } else {
      for (int i = 1; i <= 3 * n; i++) {
        if (!visited.count(i)) {
          v.emplace_back(i);
          if (v.size() >= n) {
            break;
          }
        }
      }

      if (v.size() >= n) {
        std::cout << "IndSet\n";
        for (int i = 0; i < n; i++) {
          std::cout << v[i] << ' ';
        }
      } else {
        std::cout << "Impossible";
      }

      std::cout << '\n';
    }
  }

  return 0;
}
```