#include <iostream>
#include <vector>
#include <cstring>

using namespace std;

typedef pair<int, int> pi;

int r[4] = {1, 0, 0, -1};
int c[4] = {0, -1, 1, 0};
char p[4] = {'D', 'L', 'R', 'U'};

int main() {
    int t, n, m;
    cin >> t;

    while (t--) {
        cin >> n >> m;
        vector<pi> adj[300005];
        vector<int> matching;
        bool match[300005] = {false};

        for (int i = 1; i <= m; i++) {
            int x, y;
            cin >> x >> y;
            adj[x].push_back(make_pair(y, i));
        }

        for (int i = 1; i <= 3 * n; i++) {
            auto it = adj[i].begin();
            if (match[i]) {
                continue;
            }

            for (; it != adj[i].end(); it++) {
                int nd = (*it).first;
                int ed = (*it).second;
                if (!match[nd]) {
                    matching.push_back(ed);
                    match[nd] = true;
                    match[i] = true;
                    break;
                }
            }
        }

        if (matching.size() >= n) {
            cout << "Matching" << '\n';
            for (int i = 0; i < n; i++) {
                cout << matching[i] << " ";
            }
            cout << '\n';
            continue;
        }

        vector<int> v(3 * n - matching.size());
        int idx = 0;
        for (int i = 1; i <= 3 * n; i++) {
            if (!match[i]) {
                v[idx++] = i;
            }
        }

        if (v.size() >= n) {
            cout << "IndSet" << '\n';
            for (int i = 0; i < n; i++) {
                cout << v[i] << " ";
            }
        } else {
            cout << "Impossible";
        }
        cout << '\n';
    }

    return 0;
}