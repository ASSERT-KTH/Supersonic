#include <iostream>
#include <vector>

const int MAX_N = 300005;

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);

  int t;
  std::cin >> t;

  while (t--) {
    int n, m;
    std::cin >> n >> m;

    std::vector<std::pair<int, int>> adj[MAX_N];
    std::vector<int> matching;
    bool match[MAX_N] = {false};

    for (int i = 1; i <= m; i++) {
      int x, y;
      std::cin >> x >> y;
      adj[x].push_back(std::make_pair(y, i));
    }

    for (int i = 1; i <= 3 * n; i++) {
      if (match[i])
        continue;

      for (const auto& p : adj[i]) {
        int nd = p.first;
        int ed = p.second;

        if (!match[nd]) {
          matching.push_back(ed);
          match[nd] = true;
          match[i] = true;
          break;
        }
      }
    }

    if (matching.size() >= n) {
      std::cout << "Matching\n";
      for (int i = 0; i < n; i++) {
        std::cout << matching[i] << " ";
      }
      std::cout << "\n";
    } else {
      std::vector<int> v;
      for (int i = 1; i <= 3 * n; i++) {
        if (!match[i])
          v.push_back(i);
      }

      if (v.size() >= n) {
        std::cout << "IndSet\n";
        for (int i = 0; i < n; i++) {
          std::cout << v[i] << " ";
        }
      } else {
        std::cout << "Impossible";
      }

      std::cout << "\n";
    }
  }

  return 0;
}