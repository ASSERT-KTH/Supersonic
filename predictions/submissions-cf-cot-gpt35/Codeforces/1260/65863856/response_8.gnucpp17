#include <iostream>
#include <vector>
#include <algorithm>

struct Sum {
  int val;
  bool marker;
  Sum() {
    val = 0;
    marker = false;
  }
  Sum(int val) : val(val) { marker = true; }
  Sum(Sum left, Sum right) { val = left.val + right.val; }
  void update_lazy_with_val(Sum val) { this->val = val.val; }
  void update_val_with_lazy(Sum lazy, int left_node, int right_node) {
    this->val = (right_node - left_node);
  }
  bool operator!=(const Sum &other) const {
    return val != other.val || marker != other.marker;
  }
};

class LazySegmentTree {
  int n;
  std::vector<Sum> arr;
  std::vector<Sum> lazy;

  void push(int node, int left_node, int right_node) {
    if (lazy[node] != Sum()) {
      arr[node].update_val_with_lazy(lazy[node], left_node, right_node);
      if (right_node - left_node > 1) {
        lazy[2 * node + 1].update_lazy_with_val(lazy[node]);
        lazy[2 * node + 2].update_lazy_with_val(lazy[node]);
      }
      lazy[node] = Sum();
    }
  }

  Sum query(int node, int left_node, int right_node, int left, int right) {
    push(node, left_node, right_node);
    if (right <= left_node || right_node <= left) {
      return Sum();
    }
    if (left <= left_node && right_node <= right) {
      return arr[node];
    }
    int mid;
    Sum result = Sum();
    std::vector<int> stack;
    stack.push_back(node);
    while (!stack.empty()) {
      node = stack.back();
      stack.pop_back();
      push(node, left_node, right_node);
      if (right <= left_node || right_node <= left) {
        continue;
      }
      if (left <= left_node && right_node <= right) {
        result = Sum(result, arr[node]);
        continue;
      }
      mid = (left_node + right_node) / 2;
      stack.push_back(2 * node + 2);
      stack.push_back(2 * node + 1);
      stack.push_back(node);
      left_node = mid;
    }
    return result;
  }

  void update(int node, int left_node, int right_node, int left, int right,
              Sum val) {
    push(node, left_node, right_node);
    if (right <= left_node || right_node <= left) {
      return;
    }
    if (left <= left_node && right_node <= right) {
      lazy[node].update_lazy_with_val(val);
      push(node, left_node, right_node);
      return;
    }
    int mid;
    std::vector<int> stack;
    stack.push_back(node);
    while (!stack.empty()) {
      node = stack.back();
      stack.pop_back();
      push(node, left_node, right_node);
      if (right <= left_node || right_node <= left) {
        continue;
      }
      if (left <= left_node && right_node <= right) {
        lazy[node].update_lazy_with_val(val);
        push(node, left_node, right_node);
        continue;
      }
      mid = (left_node + right_node) / 2;
      stack.push_back(2 * node + 2);
      stack.push_back(2 * node + 1);
      stack.push_back(node);
      left_node = mid;
    }
    node = 0;
    left_node = 0;
    right_node = n;
    while (node < arr.size()) {
      push(node, left_node, right_node);
      if (right <= left_node || right_node <= left) {
        return;
      }
      if (left <= left_node && right_node <= right) {
        return;
      }
      mid = (left_node + right_node) / 2;
      stack.push_back(2 * node + 2);
      stack.push_back(2 * node + 1);
      stack.push_back(node);
      left_node = mid;
    }
  }

public:
  LazySegmentTree(int n) {
    this->n = n;
    arr = std::vector<Sum>(4 * n);
    lazy = std::vector<Sum>(4 * n);
  }

  Sum range_query(int l, int r) { return query(0, 0, n, l, r); }

  Sum point_query(int idx) { return range_query(idx, idx + 1); }

  void range_update(int l, int r, Sum val) { update(0, 0, n, l, r, val); }

  void point_update(int idx, Sum val) { range_update(idx, idx + 1, val); }
};

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);

  int m, n, k, t;
  std::cin >> m >> n >> k >> t;

  std::vector<int> a(m);
  for (int i = 0; i < m; i++) {
    std::cin >> a[i];
  }

  std::vector<int> l(k), r(k), d(k);
  for (int i = 0; i < k; i++) {
    std::cin >> l[i] >> r[i] >> d[i];
  }

  std::sort(a.begin(), a.end());

  int left = 0;
  int right = m - 1;
  while (left < right) {
    int mid = (left + right) / 2;
    if (is_possible(a, l, r, d, n, k, t, mid)) {
      right = mid;
    } else {
      left = mid + 1;
    }
  }

  if (!is_possible(a, l, r, d, n, k, t, left)) {
    left += 1;
  }

  int sent = m - left;
  std::cout << sent << "\n";
  return 0;
}