#include <iostream>
#include <algorithm>
using namespace std;

template <typename T> 
class LazySegmentTree {
  int n;
  vector<T> val;
  vector<T> lazy;

  void update_lazy(int node, int left_node, int right_node) {
    if (lazy[node] != T()) {
      val[node] += lazy[node];
      if (right_node - left_node > 1) {
        lazy[2 * node + 1] += lazy[node];
        lazy[2 * node + 2] += lazy[node];
      }
      lazy[node] = T();
    }
  }

  T query(int node, int left_node, int right_node, int left, int right) {
    update_lazy(node, left_node, right_node);
    if (right <= left_node || right_node <= left) {
      return T();
    }
    if (left <= left_node && right_node <= right) {
      return val[node];
    }
    int mid = (left_node + right_node) / 2;
    return T(query(2 * node + 1, left_node, mid, left, right),
             query(2 * node + 2, mid, right_node, left, right));
  }

  void update(int node, int left_node, int right_node, int left, int right,
              T increment) {
    update_lazy(node, left_node, right_node);
    if (right <= left_node || right_node <= left) {
      return;
    }
    if (left <= left_node && right_node <= right) {
      lazy[node] += increment;
      update_lazy(node, left_node, right_node);
      return;
    }
    int mid = (left_node + right_node) / 2;
    update(2 * node + 1, left_node, mid, left, right, increment);
    update(2 * node + 2, mid, right_node, left, right, increment);
    val[node] = T(val[2 * node + 1], val[2 * node + 2]);
  }

public:
  LazySegmentTree(int n) {
    this->n = n;
    val = vector<T>(4 * n);
    lazy = vector<T>(4 * n);
  }

  T range_query(int l, int r) { return query(0, 0, n, l, r); }

  void range_update(int l, int r, T increment) { update(0, 0, n, l, r, increment); }
};

struct Sum {
  int val;
  Sum() { val = 0; }
  Sum(int val) : val(val) {}
  Sum(Sum left, Sum right) { val = left.val + right.val; }
  Sum& operator+=(const Sum& other) {
    val += other.val;
    return *this;
  }
};

int m, n, k, t;
int a[200000];
int l[200000];
int r[200000];
int d[200000];

bool is_possible(int mid) {
  LazySegmentTree<Sum> stree(n + 1);
  int min_agility = a[mid];
  for (int i = 0; i < k; i++) {
    if (d[i] > min_agility) {
      stree.range_update(l[i] - 1, r[i], Sum(1));
    }
  }
  int req_time = n + 1 + 2 * stree.range_query(0, n + 1).val;
  return req_time <= t;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  scanf("%d %d %d %d", &m, &n, &k, &t);
  for (int i = 0; i < m; i++) {
    scanf("%d", &a[i]);
  }
  for (int i = 0; i < k; i++) {
    scanf("%d %d %d", &l[i], &r[i], &d[i]);
  }
  nth_element(a, a + m - 1, a + m);
  int left = 0;
  int right = m - 1;
  while (left < right) {
    int mid = (left + right) / 2;
    if (is_possible(mid)) {
      right = mid;
    } else {
      left = mid + 1;
    }
  }
  if (!is_possible(left)) {
    left += 1;
  }
  int sent = m - left;
  printf("%d\n", sent);
  return 0;
}