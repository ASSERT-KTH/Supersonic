#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

template <class C>
inline void log_c(const C& c)
{
#ifdef LOCAL_PROJECT
    std::copy(
        std::begin(c), std::end(c),
        std::ostream_iterator<std::remove_reference_t<decltype(*std::begin(c))>>(
            std::clog, " "));
    std::clog << std::endl;
#endif
}

template <class C>
inline int sz(const C& c)
{
    return static_cast<int>(std::size(c));
}

const std::string eol = "\n";

void solve()
{
    int n, d;
    std::cin >> n >> d;

    std::vector<bool> tab;
    tab.reserve(10 * d + d);
    for (int k = 0; k < sz(tab); ++k)
    {
        tab.emplace_back(k % 10 == d || (k / 10) == d);
    }

    for (const auto& k : tab)
    {
        if (k)
        {
            for (const auto& j : tab)
            {
                if (j)
                {
                    const bool condition = k + j < sz(tab);
                    for (const auto& l : tab)
                    {
                        if (condition && (k + j * l < sz(tab)))
                        {
                            tab[k + j * l] = true;
                        }
                    }
                }
            }
        }
    }

    for (int k = 0; k < n; ++k)
    {
        int ak;
        std::cin >> ak;
        std::cout << (ak >= sz(tab) || tab[ak] ? "YES" : "NO") << eol;
    }
}

int main()
{
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);

    int test_sample_count;
    std::cin >> test_sample_count;

    while (test_sample_count--)
    {
        solve();
    }

    return 0;
}