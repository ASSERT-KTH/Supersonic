Step 1: Remove unnecessary includes and macros

The program includes `<bits/stdc++.h>` which is not recommended as it includes a large number of unnecessary headers. We can remove this include and include only the necessary headers. 

The macros `forn(k, n)` and `all(c)` are not used in the program and can be removed.

Step 2: Optimize the vector initialization

Currently, the vector `tab` is initialized using a loop. We can optimize this by using the constructor of the vector to initialize all elements to `false`.

Step 3: Optimize the nested loops

The nested loops in the program can be optimized to reduce the number of iterations. Currently, the nested loops iterate over all elements of `tab`, even if the value is already `true`. We can modify the loops to iterate only when the value is `false`.

Step 4: Optimize the checking of `ak` against `tab`

Currently, the program checks `ak` against `sz(tab)` and then checks `tab[ak]`. We can optimize this by directly checking `ak` against `sz(tab)` and then accessing `tab` only if `ak` is less than `sz(tab)`.

Step 5: Remove unnecessary `using` statement

The `using pii = pair<int, int>` statement is not used in the program and can be removed.

Step 6: Optimize I/O operations

The program uses `cin` and `cout` for I/O operations. We can optimize this by using `scanf` and `printf` which are faster.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <string>
using namespace std;

const string eol = "\n";
void solve() {
  int n, d;
  scanf("%d %d", &n, &d);
  vector<bool> tab(10 * d + d, false);
  for (int k = 0; k < tab.size(); ++k) {
    tab[k] = k % 10 == d || (k / 10) == d;
  }
  for (int k = 0; k < tab.size(); ++k) {
    if (tab[k]) {
      for (int j = 0; j < tab.size(); ++j) {
        if (tab[j]) {
          for (int l = 0; l < tab.size(); ++l) {
            if (k + j * l < tab.size()) {
              tab[k + j * l] = true;
            }
          }
        }
      }
    }
  }
  for (int k = 0; k < n; ++k) {
    int ak;
    scanf("%d", &ak);
    printf("%s%s", (ak >= tab.size() || tab[ak] ? "YES" : "NO"), eol.c_str());
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int test_sample_count;
  scanf("%d", &test_sample_count);
  while (test_sample_count--) {
    solve();
  }
  return 0;
}
```
