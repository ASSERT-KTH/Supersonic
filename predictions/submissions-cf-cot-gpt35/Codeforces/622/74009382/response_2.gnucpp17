#include <iostream>

const int MOD = 1000000007;

struct mod_int {
  int val;
  
  explicit mod_int(long long v = 0) {
    if (v < 0)
      v = v % MOD + MOD;
    if (v >= MOD)
      v %= MOD;
    val = v;
  }
  
  mod_int& operator+=(const mod_int& other) {
    val += other.val;
    if (val >= MOD)
      val -= MOD;
    return *this;
  }
  
  mod_int& operator-=(const mod_int& other) {
    val -= other.val;
    if (val < 0)
      val += MOD;
    return *this;
  }
  
  mod_int& operator*=(const mod_int& other) {
    val = (1LL * val * other.val) % MOD;
    return *this;
  }
  
  mod_int operator+(const mod_int& other) const {
    return mod_int(*this) += other;
  }
  
  mod_int operator-(const mod_int& other) const {
    return mod_int(*this) -= other;
  }
  
  mod_int operator*(const mod_int& other) const {
    return mod_int(*this) *= other;
  }
  
  mod_int pow(long long p) const {
    assert(p >= 0);
    mod_int a = *this, result = 1;
    while (p > 0) {
      if (p & 1)
        result *= a;
      a *= a;
      p >>= 1;
    }
    return result;
  }
  
  friend std::ostream& operator<<(std::ostream& stream, const mod_int& m) {
    return stream << m.val;
  }
};

void solve() {
  int n, k;
  std::cin >> n >> k;
  
  mod_int ans = 0;
  mod_int ele = 1;
  
  for (int i = 1; i <= k + 2; i++) {
    ele *= (n - i + M);
    ele /= (i - 1);
    ele *= (n - i + 1);
    
    ans += ele * (i * i);
  }
  
  std::cout << ans << std::endl;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);
  
  int t = 1;
  while (t--)
    solve();
  
  return 0;
}