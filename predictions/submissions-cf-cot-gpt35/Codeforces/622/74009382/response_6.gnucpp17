#include <iostream>
#include <vector>
#define MOD 1000000007

using namespace std;

struct mod_int {
  int val;
  
  mod_int(long long v = 0) {
    if (v < 0)
      v = v % MOD + MOD;
    if (v >= MOD)
      v %= MOD;
    val = v;
  }
  
  mod_int &operator+=(const mod_int &other) {
    val += other.val;
    if (val >= MOD)
      val -= MOD;
    return *this;
  }
  
  mod_int &operator-=(const mod_int &other) {
    val -= other.val;
    if (val < 0)
      val += MOD;
    return *this;
  }
  
  mod_int &operator*=(const mod_int &other) {
    val = (long long)val * other.val % MOD;
    return *this;
  }
  
  mod_int &operator/=(const mod_int &other) {
    return *this *= other.inv();
  }
  
  mod_int operator+(const mod_int &a) const {
    return mod_int(*this) += a;
  }
  
  mod_int operator-(const mod_int &a) const {
    return mod_int(*this) -= a;
  }
  
  mod_int operator*(const mod_int &a) const {
    return mod_int(*this) *= a;
  }
  
  mod_int operator/(const mod_int &a) const {
    return mod_int(*this) /= a;
  }
  
  mod_int inv() const {
    return pow(MOD - 2);
  }
  
  mod_int pow(long long p) const {
    mod_int a = *this, result = 1;
    while (p > 0) {
      if (p & 1)
        result *= a;
      a *= a;
      p >>= 1;
    }
    return result;
  }
};

void solve() {
  int n, k;
  cin >> n >> k;
  
  vector<mod_int> P(k + 4);
  vector<mod_int> ele(k + 3);
  
  for (int i = 1; i < k + 4; i++) {
    mod_int j = i;
    P[i] = P[i - 1] + j.pow(k);
  }
  
  if (n <= k + 2) {
    cout << P[n];
    return;
  }
  
  ele[1] = 1;
  for (int i = 1; i < k + 2; i++) {
    ele[1] *= (MOD + n - i - 1);
    ele[1] /= (MOD - i);
  }
  
  mod_int ans = ele[1] * P[1];
  
  for (int i = 2; i < k + 3; i++) {
    ele[i] = ele[i - 1] * (MOD - k + i - 3);
    ele[i] /= (i - 1);
    ele[i] /= (MOD + n - i);
    ele[i] *= (MOD + n - i + 1);
    ans += ele[i] * P[i];
  }
  
  cout << ans;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  
  solve();
  
  return 0;
}