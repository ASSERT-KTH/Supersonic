#include <iostream>
#include <queue>
#include <stack>
#include <bitset>
using namespace std;

typedef pair<int, int> pii;

const int mx = 6000;
int vis[mx][600];
pii dp[mx][600];

int s, d;

int gcd(int a, int b) {
  while (b) {
    int temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}

int lcm(int a, int b) {
  return a / gcd(a, b) * b;
}

int bfs() {
  queue<pii> q;
  q.push(make_pair(s, 0));
  bitset<mx> visited;
  visited[s] = true;

  pii p;
  int f = 1, mul, sum;
  while (!q.empty()) {
    p = q.front();
    q.pop();
    for (int i = f; i < 10; i++) {
      sum = p.first - i;
      mul = (p.second * 10 + i) % d;
      if (sum == 0 && mul == 0) {
        dp[sum][mul] = make_pair(p.first, p.second);
        return 1;
      }
      if (sum >= 0 && !visited[sum]) {
        visited[sum] = true;
        q.push(make_pair(sum, mul));
        dp[sum][mul] = make_pair(p.first, p.second);
      }
    }
    f = 0;
  }
  return 0;
}

void print(int sum, int mul) {
  stack<int> digits;
  while (sum != s || mul != 0) {
    int digit = dp[sum][mul].first - sum;
    digits.push(digit);
    sum = dp[sum][mul].first;
    mul = dp[sum][mul].second;
  }

  while (!digits.empty()) {
    cout << digits.top();
    digits.pop();
  }
}

int main() {
  cin.tie(0);
  cout.tie(0);
  ios::sync_with_stdio(false);

  cin >> d >> s;

  if (bfs() == 1) {
    print(0, 0);
  } else {
    cout << -1 << endl;
  }

  return 0;
}