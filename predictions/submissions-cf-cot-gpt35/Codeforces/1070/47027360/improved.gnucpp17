#include <bits/stdc++.h>
using namespace std;
#define SPEED                                                                  \
  ios::sync_with_stdio(false);                                                 \
  cin.tie(0);                                                                  \
  cout.tie(0)
#define READ freopen("in.txt", "r", stdin)
#define WRITE freopen("out.txt", "w", stdout);
#define pb push_back
#define mem(arr, val) memset(arr, val, sizeof(arr))
#define sf(x) scanf("%d", &x)
#define sf2(x, y) scanf("%d %d", &x, &y)
#define sf3(x, y, z) scanf("%d %d %d", &x, &y, &z)
#define sl(x) scanf("%lld", &x)
#define sl2(x, y) scanf("%lld %lld", &x, &y)
#define sl3(x, y, z) scanf("%lld %lld %lld", &x, &y, &z)
#define sd(x) scanf("%lf", &x);
#define pii pair<int, int>
#define pLL pair<long long, long long>
#define ff first
#define sn second
#define PRINT_CASE printf("Case %d: ", tc++)
#define mx 100005
#define lnd tree[ind << 1]
#define rnd tree[(ind << 1) + 1]
#define cnd tree[ind]
#define lndp b, (b + e) >> 1, (ind << 1)
#define rndp ((b + e) >> 1) + 1, e, (ind << 1) + 1
#define IN(a, x, y) (a >= x && a <= y)
typedef long long ll;
typedef long long int lln;
ll INF = 1 << 28;
const double pi = acos(-1.0);
int fx[] = {1, -1, 0, 0};
int fy[] = {0, 0, 1, -1};
int dir[4][2] = {1, 0, -1, 0, 0, -1, 0, 1};
const long double EPS = 1e-7;
ll gcd(ll a, ll b) {
  if (b == 0)
    return a;
  else
    return gcd(b, a % b);
}
ll lcm(ll a, ll b) { return a / gcd(a, b) * b; }
bool cmp(int a, int b) { return a < b; }
struct compare {
  bool operator()(const int &l, const int &r) { return l > r; }
};
bool cmp1(int a, int b) { return a > b; }
int vis[6000][600];
pii dp[6000][600];
int s, d;
int bfs() {
  queue<pii> q;
  q.push(make_pair(0, 0));
  vis[0][0] = 1;
  pii p;
  int f = 1, mul, sum;
  while (!q.empty()) {
    p = q.front();
    q.pop();
    for (int i = f; i < 10; i++) {
      sum = p.ff;
      sum += i;
      mul = p.sn;
      mul *= 10;
      mul += i;
      mul %= d;
      if (sum == s && mul == 0) {
        dp[sum][mul] = make_pair(p.ff, p.sn);
        return 1;
      }
      if (sum <= s && !vis[sum][mul]) {
        vis[sum][mul] = 1;
        q.push(make_pair(sum, mul));
        dp[sum][mul] = make_pair(p.ff, p.sn);
      }
      f = 0;
    }
  }
  return 0;
}
void print(int sum, int mul) {
  if (sum == 0 && mul == 0)
    return;
  print(dp[sum][mul].ff, dp[sum][mul].sn);
  cout << sum - dp[sum][mul].ff;
}
int main() {
  sf2(d, s);
  if (bfs() == 1) {
    print(s, 0);
  } else
    cout << -1 << endl;
  return 0;
}
