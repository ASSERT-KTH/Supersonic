#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct SegTree {
  vector<int> tree, freq;
  int n;
  SegTree(int n, vector<int>& arr) : n(n) {
    tree.resize(4 * n);
    freq.resize(n + 1);
    for (int i = 0; i < n; i++)
      freq[arr[i]]++;
    build(0, n - 1, 0);
  }
  int merge(int lval, int rval) {
    return freq[lval] >= freq[rval] ? lval : rval;
  }
  void build(int ss, int se, int si) {
    if (ss == se) {
      tree[si] = ss;
    } else {
      int mid = ss + se >> 1;
      build(ss, mid, 2 * si + 1);
      build(mid + 1, se, 2 * si + 2);
      tree[si] = merge(tree[2 * si + 1], tree[2 * si + 2]);
    }
  }
  int query(int qs, int qe) { return query(qs, qe, 0, n - 1, 0); }
  int query(int qs, int qe, int ss, int se, int si) {
    if (ss >= qs && se <= qe) {
      return tree[si];
    }
    int mid = ss + se >> 1;
    if (qe <= mid) {
      return query(qs, qe, ss, mid, 2 * si + 1);
    } else if (qs >= mid + 1) {
      return query(qs, qe, mid + 1, se, 2 * si + 2);
    } else {
      return merge(query(qs, qe, ss, mid, 2 * si + 1),
                   query(qs, qe, mid + 1, se, 2 * si + 2));
    }
  }
};

void solve() {
  int n, q;
  cin >> n >> q;
  vector<int> arr(n);
  for (int i = 0; i < n; i++)
    cin >> arr[i];
  SegTree tree(n, arr);
  while (q--) {
    int l, r;
    cin >> l >> r;
    l--;
    r--;
    int x = tree.query(l, r);
    int mx = tree.freq[x];
    int len = (r - l + 1);
    int extra = len - mx;
    int left = max(0, mx - extra - 1);
    cout << 1 + left << "\n";
  }
}

int main() {
  int t = 1;
  for (int i = 1; i <= t; i++) {
    solve();
  }
}