#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct SegTree {
  vector<int> tree, arr;
  vector<vector<int>> store;
  int n;
  SegTree(int n, vector<int> _arr) : n(n) {
    tree.resize(4 * n);
    store.resize(n + 1);
    arr = _arr;
    for (int i = 0; i < n; i++)
      store[arr[i]].push_back(i);
    build(0, n - 1, 0);
  }
  int merge(int lval, int rval, int sl, int sr) {
    auto cmp = [](int a, int b) { return a < b; };
    auto range_l = equal_range(store[lval].begin(), store[lval].end(), sl, cmp);
    auto range_r = equal_range(store[rval].begin(), store[rval].end(), sl, cmp);
    int cntl = range_l.second - range_l.first;
    int cntr = range_r.second - range_r.first;
    if (cntl >= cntr) {
      return lval;
    } else {
      return rval;
    }
  }
  void build(int ss, int se, int si) {
    if (ss == se) {
      tree[si] = arr[ss];
    } else {
      int mid = ss + se >> 1;
      build(ss, mid, 2 * si + 1);
      build(mid + 1, se, 2 * si + 2);
      tree[si] = merge(tree[2 * si + 1], tree[2 * si + 2], ss, se);
    }
  }
  int query(int qs, int qe) { return query(qs, qe, 0, n - 1, 0, qs, qe); }
  int query(int qs, int qe, int ss, int se, int si, int sl, int sr) {
    if (ss >= qs && se <= qe) {
      return tree[si];
    }
    int mid = ss + se >> 1;
    if (qe <= mid && qs <= mid) {
      return query(qs, qe, ss, mid, 2 * si + 1, sl, sr);
    } else if (qs >= mid + 1 && qe >= mid + 1) {
      return query(qs, qe, mid + 1, se, 2 * si + 2, sl, sr);
    } else {
      return merge(query(qs, qe, ss, mid, 2 * si + 1, sl, sr),
                   query(qs, qe, mid + 1, se, 2 * si + 2, sl, sr), sl, sr);
    }
  }
};

void solve() {
  int n, q;
  scanf("%d%d", &n, &q);
  vector<int> arr(n);
  vector<vector<int>> store(n + 1);
  for (int i = 0; i < n; i++)
    scanf("%d", &arr[i]), store[arr[i]].push_back(i);
  SegTree tree(n, arr);
  while (q--) {
    int l, r;
    scanf("%d%d", &l, &r);
    l--;
    r--;
    int x = tree.query(l, r);
    int mx = upper_bound(store[x].begin(), store[x].end(), r) -
             lower_bound(store[x].begin(), store[x].end(), l);
    int extra = r - l + 1 - mx;
    int left = max(0, mx - r + l);
    printf("%d\n", 1 + left);
  }
}

int main() {
  int t = 1;
  for (int i = 1; i <= t; i++) {
    solve();
  }
  return 0;
}