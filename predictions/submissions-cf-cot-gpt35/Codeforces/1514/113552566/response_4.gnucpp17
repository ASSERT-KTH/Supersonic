#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct SegTree {
  vector<int> tree, arr;
  vector<vector<int>> store;
  int n;
  
  SegTree(int n, const vector<int>& _arr) : n(n) {
    tree.resize(4 * n);
    store.reserve(n + 1);
    arr = _arr;
    for (int i = 0; i < n; i++)
      store[arr[i]].push_back(i);
    build();
  }
  
  int merge(int lval, int rval, int sl, int sr) {
    int cntl = binary_search_count(store[lval], sl, sr);
    int cntr = binary_search_count(store[rval], sl, sr);
    if (cntl >= cntr) {
      return lval;
    } else {
      return rval;
    }
  }
  
  void build() {
    build(0, n - 1, 0);
  }
  
  void build(int ss, int se, int si) {
    if (ss == se) {
      tree[si] = arr[ss];
    } else {
      int mid = ss + (se - ss) / 2;
      build(ss, mid, 2 * si + 1);
      build(mid + 1, se, 2 * si + 2);
      tree[si] = merge(tree[2 * si + 1], tree[2 * si + 2], ss, se);
    }
  }
  
  int query(int qs, int qe) {
    int ss = 0, se = n - 1, si = 0, sl = qs, sr = qe;
    while (true) {
      if (ss >= qs && se <= qe) {
        return tree[si];
      }
      int mid = ss + (se - ss) / 2;
      if (qe <= mid) {
        se = mid;
        si = 2 * si + 1;
      } else if (qs >= mid + 1) {
        ss = mid + 1;
        si = 2 * si + 2;
      } else {
        int left = query(qs, qe, ss, mid, 2 * si + 1, sl, sr);
        int right = query(qs, qe, mid + 1, se, 2 * si + 2, sl, sr);
        return merge(left, right, sl, sr);
      }
    }
  }
  
  int query(int qs, int qe, int ss, int se, int si, int sl, int sr) {
    if (ss >= qs && se <= qe) {
      return tree[si];
    }
    int mid = ss + (se - ss) / 2;
    if (qe <= mid) {
      return query(qs, qe, ss, mid, 2 * si + 1, sl, sr);
    } else if (qs >= mid + 1) {
      return query(qs, qe, mid + 1, se, 2 * si + 2, sl, sr);
    } else {
      int left = query(qs, qe, ss, mid, 2 * si + 1, sl, sr);
      int right = query(qs, qe, mid + 1, se, 2 * si + 2, sl, sr);
      return merge(left, right, sl, sr);
    }
  }
  
  int binary_search_count(const vector<int>& v, int sl, int sr) {
    auto itl = lower_bound(v.begin(), v.end(), sl);
    auto itr = upper_bound(v.begin(), v.end(), sr);
    return itr - itl;
  }
};

void solve() {
  int n, q;
  cin >> n >> q;
  vector<int> arr(n);
  vector<vector<int>> store(n + 1);
  for (int i = 0; i < n; i++)
    cin >> arr[i], store[arr[i]].push_back(i);
  SegTree tree(n, arr);
  while (q--) {
    int l, r;
    cin >> l >> r;
    l--;
    r--;
    int x = tree.query(l, r);
    int mx = tree.binary_search_count(store[x], l, r);
    int len = (r - l + 1);
    int extra = len - mx;
    int left = max(0, mx - extra - 1);
    cout << 1 + left << "\n";
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  int t = 1;
  for (int i = 1; i <= t; i++) {
    solve();
  }
  
  return 0;
}