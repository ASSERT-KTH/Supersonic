#include <iostream>
#include <vector>
#include <algorithm>

struct SegTree {
  std::vector<int> tree, arr;
  int n;
  SegTree(int n, std::vector<int> _arr) : n(n) {
    tree.resize(4 * n);
    arr = _arr;
    build(0, n - 1, 0);
  }
  int merge(int lval, int rval, int sl, int sr) {
    int cntl = 0, cntr = 0;
    for (int i = sl; i <= sr; i++) {
      if (arr[i] == lval) cntl++;
      if (arr[i] == rval) cntr++;
    }
    if (cntl >= cntr) {
      return lval;
    } else {
      return rval;
    }
  }
  void build(int ss, int se, int si) {
    if (ss == se) {
      tree[si] = arr[ss];
    } else {
      int mid = (ss + se) >> 1;
      build(ss, mid, 2 * si + 1);
      build(mid + 1, se, 2 * si + 2);
      tree[si] = merge(tree[2 * si + 1], tree[2 * si + 2], ss, se);
    }
  }
  int query(int qs, int qe) { return query(qs, qe, 0, n - 1, 0); }
  int query(int qs, int qe, int ss, int se, int si) {
    if (ss >= qs && se <= qe) {
      return tree[si];
    }
    int mid = (ss + se) >> 1;
    if (qe <= mid) {
      return query(qs, qe, ss, mid, 2 * si + 1);
    } else if (qs >= mid + 1) {
      return query(qs, qe, mid + 1, se, 2 * si + 2);
    } else {
      return merge(query(qs, qe, ss, mid, 2 * si + 1),
                   query(qs, qe, mid + 1, se, 2 * si + 2), qs, qe);
    }
  }
};

void solve() {
  int n, q;
  std::cin >> n >> q;
  std::vector<int> arr(n);
  for (int i = 0; i < n; i++)
    std::cin >> arr[i];
  SegTree tree(n, arr);
  while (q--) {
    int l, r;
    std::cin >> l >> r;
    l--;
    r--;
    int x = tree.query(l, r);
    int mx = 0;
    for (int i = l; i <= r; i++) {
      if (arr[i] == x) {
        mx++;
      }
    }
    int len = (r - l + 1);
    int extra = len - mx;
    int left = std::max(0, mx - extra - 1);
    std::cout << 1 + left << "\n";
  }
}

int main() {
  int t = 1;
  for (int i = 1; i <= t; i++) {
    solve();
  }
  return 0;
}