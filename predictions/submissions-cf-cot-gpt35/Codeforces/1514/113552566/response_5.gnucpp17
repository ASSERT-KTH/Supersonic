#include <iostream>
#include <iomanip>
#include <vector>
#include <algorithm>

struct SegTree {
  std::vector<int> tree, arr;
  int n;
  SegTree(int n, const std::vector<int>& _arr) : n(n) {
    tree.resize(4 * n);
    arr = _arr;
    build(0, n - 1, 0);
  }
  int merge(int lval, int rval, int sl, int sr) {
    int cntl = sr - sl + 1 - (std::lower_bound(arr.begin() + sl, arr.begin() + sr + 1, lval) - arr.begin()) + (std::upper_bound(arr.begin() + sl, arr.begin() + sr + 1, lval) - arr.begin());
    int cntr = sr - sl + 1 - (std::lower_bound(arr.begin() + sl, arr.begin() + sr + 1, rval) - arr.begin()) + (std::upper_bound(arr.begin() + sl, arr.begin() + sr + 1, rval) - arr.begin());
    if (cntl >= cntr) {
      return lval;
    } else {
      return rval;
    }
  }
  void build(int ss, int se, int si) {
    if (ss == se) {
      tree[si] = arr[ss];
    } else {
      int mid = ss + se >> 1;
      build(ss, mid, 2 * si + 1);
      build(mid + 1, se, 2 * si + 2);
      tree[si] = merge(tree[2 * si + 1], tree[2 * si + 2], ss, se);
    }
  }
  int query(int qs, int qe) {
    int ss = 0, se = n - 1, si = 0, sl = qs, sr = qe;
    std::vector<int> stack;
    int result = -1;
    while (true) {
      if (ss >= qs && se <= qe) {
        result = tree[si];
        if (stack.empty()) {
          break;
        }
        int parent_si = stack.back();
        stack.pop_back();
        ss = (parent_si - 1) / 2 * (se - ss + 1) + ss;
        se = (parent_si - 1) / 2 * (se - ss + 1) + se;
        si = parent_si;
      } else {
        int mid = ss + se >> 1;
        if (qe <= mid) {
          stack.push_back(si);
          se = mid;
          si = 2 * si + 1;
        } else if (qs >= mid + 1) {
          stack.push_back(si);
          ss = mid + 1;
          si = 2 * si + 2;
        } else {
          stack.push_back(si);
          stack.push_back(si);
          se = mid;
          si = 2 * si + 1;
        }
      }
    }
    return result;
  }
};

void solve() {
  int n, q;
  std::cin >> n >> q;
  std::vector<int> arr(n);
  for (int i = 0; i < n; ++i) {
    std::cin >> arr[i];
  }
  SegTree tree(n, arr);
  while (q--) {
    int l, r;
    std::cin >> l >> r;
    --l;
    --r;
    int x = tree.query(l, r);
    int mx = r - l + 1 - (std::lower_bound(arr.begin() + l, arr.begin() + r + 1, x) - arr.begin()) + (std::upper_bound(arr.begin() + l, arr.begin() + r + 1, x) - arr.begin());
    int len = (r - l + 1);
    int extra = len - mx;
    int left = std::max(0, mx - extra - 1);
    std::cout << 1 + left << "\n";
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  std::cout << std::fixed << std::setprecision(20);
  int t = 1;
  for (int i = 1; i <= t; ++i) {
    solve();
  }
}