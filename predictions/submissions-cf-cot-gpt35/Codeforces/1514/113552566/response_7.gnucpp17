#include <iostream>
#include <iomanip>
#include <vector>
#include <algorithm>

struct SegTree {
  std::vector<int> tree, arr;
  std::vector<std::vector<int>> store;
  int n;
  SegTree(int n, std::vector<int> _arr) : n(n) {
    tree.resize(4 * n);
    store.resize(n + 1);
    arr = _arr;
    for (int i = 0; i < n; i++)
      store[arr[i]].push_back(i);
    build(0, n - 1, 0);
  }
  int merge(int lval, int rval, int sl, int sr) {
    int cntl = store[lval][sr] - (sl > 0 ? store[lval][sl - 1] : 0);
    int cntr = store[rval][sr] - (sl > 0 ? store[rval][sl - 1] : 0);
    if (cntl >= cntr) {
      return lval;
    } else {
      return rval;
    }
  }
  void build(int ss, int se, int si) {
    if (ss == se) {
      tree[si] = arr[ss];
    } else {
      int mid = ss + se >> 1;
      build(ss, mid, 2 * si + 1);
      build(mid + 1, se, 2 * si + 2);
      tree[si] = merge(tree[2 * si + 1], tree[2 * si + 2], ss, se);
    }
  }
  int query(int qs, int qe) {
    int si = 0, ss = 0, se = n - 1;
    while (ss < qs || se > qe) {
      int mid = ss + se >> 1;
      if (qe <= mid) {
        si = 2 * si + 1;
        se = mid;
      } else if (qs > mid) {
        si = 2 * si + 2;
        ss = mid + 1;
      } else {
        int left = query(qs, qe, 2 * si + 1, ss, mid);
        int right = query(qs, qe, 2 * si + 2, mid + 1, se);
        return merge(left, right, qs, qe);
      }
    }
    return tree[si];
  }
  int query(int qs, int qe, int si, int ss, int se) {
    if (ss >= qs && se <= qe) {
      return tree[si];
    }
    int mid = ss + se >> 1;
    if (qe <= mid) {
      return query(qs, qe, 2 * si + 1, ss, mid);
    } else if (qs > mid) {
      return query(qs, qe, 2 * si + 2, mid + 1, se);
    } else {
      int left = query(qs, qe, 2 * si + 1, ss, mid);
      int right = query(qs, qe, 2 * si + 2, mid + 1, se);
      return merge(left, right, qs, qe);
    }
  }
};

void solve() {
  int n, q;
  std::cin >> n >> q;
  std::vector<int> arr(n);
  std::vector<std::vector<int>> store(n + 1);
  for (int i = 0; i < n; i++)
    std::cin >> arr[i], store[arr[i]].push_back(i);
  SegTree tree(n, arr);
  while (q--) {
    int l, r;
    std::cin >> l >> r;
    l--;
    r--;
    int x = tree.query(l, r);
    int mx = store[x][r] - (l > 0 ? store[x][l - 1] : 0);
    int len = (r - l + 1);
    int extra = len - mx;
    int left = std::max(0, mx - extra - 1);
    std::cout << 1 + left << "\n";
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  std::cout << std::fixed << std::setprecision(20);
  solve();
  return 0;
}