Optimization Steps:
1. Remove unnecessary includes: The `#include <bits/stdc++.h>` includes a lot of unnecessary headers. We can remove it and include only the necessary headers.
2. Remove unused variables: The variables `i` and `x` are not used in the program. We can remove them.
3. Use a fixed-size array instead of a dynamically allocated array: Instead of using a dynamically allocated array `a`, we can use a fixed-size array of size `1000000`. This will save memory and improve performance.
4. Use a constant for the array size: Instead of using the magic number `1000000` multiple times in the code, we can define a constant for the array size and use it consistently.
5. Use a more efficient data structure for counting: Instead of using an array `d` to count the occurrences of each element, we can use an unordered map for efficient lookup and insertion.
6. Avoid redundant calculations: Instead of checking if `d[a[i]] % 2 == 0` and `d[a[i]] % 4 == 0` inside the loop, we can update the counters `k` and `p` directly based on the current count `d[a[i]]`.
7. Use a more efficient data structure for checking the condition: Instead of checking if `k >= 4 && p > 0` inside the loop, we can maintain a flag variable `flag` to track the condition and update it based on the current values of `k` and `p`. This will avoid unnecessary comparisons inside the loop.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_map>

const int SIZE = 1000000;

int main() {
  int n, q;
  std::cin >> n;
  
  int a[SIZE] = {0};
  std::unordered_map<int, int> d;
  int k = 0, p = 0;
  
  for (int i = 1; i <= n; i++) {
    int num;
    std::cin >> num;
    d[num]++;
    
    if (d[num] % 2 == 0)
      k++;
    if (d[num] % 4 == 0)
      p++;
  }
  
  std::cin >> q;
  
  while (q--) {
    char c;
    int x;
    std::cin >> c >> x;
    
    if (c == '+') {
      d[x]++;
      if (d[x] % 4 == 0)
        p++;
      if (d[x] % 2 == 0)
        k++;
    } else {
      d[x]--;
      if (d[x] % 4 == 3)
        p--;
      if (d[x] % 2 != 0)
        k--;
    }
    
    bool flag = (k >= 4 && p > 0);
    std::cout << (flag ? "YES" : "NO") << "\n";
  }
  
  return 0;
}
```