Step 1: Remove unnecessary includes

The `#include <bits/stdc++.h>` is a non-standard header file that includes a lot of other standard headers. This can slow down the compilation process and increase memory usage. Since the program only uses `iostream`, we can remove this line and include only the necessary header.

Step 2: Optimize loop initialization

The loop `for (i = 1; i <= n; i++)` starts from index 1 and goes up to n. In C++, arrays are zero-indexed, so it is more efficient to start the loop from 0 and go up to n-1.

Step 3: Optimize array size

The array `a` is declared with a fixed size of 1000000, but it is not clear from the program if this size is needed. We can change the array size to match the actual number of elements in the input.

Step 4: Optimize array usage

The array `d` is used to store the frequencies of elements in the array `a`. However, the elements of `a` are integers, so the maximum value of `a[i]` is not clear. We can optimize the memory usage by using a `map` instead of an array. This way, we only need to store the frequencies of the elements that actually occur in `a`.

Step 5: Optimize output

Instead of printing "YES" or "NO" for each query, we can store the results in a separate array and print them all at once after the loop.

Optimized code:
```cpp
#include <iostream>
#include <map>
using namespace std;

int main() {
  int n, q, x;
  cin >> n;

  map<int, int> d;
  int k = 0, p = 0;

  for (int i = 0; i < n; i++) {
    cin >> x;
    d[x]++;
    if (d[x] % 2 == 0)
      k++;
    if (d[x] % 4 == 0)
      p++;
  }

  cin >> q;
  char c;
  int* results = new int[q];
  for (int i = 0; i < q; i++) {
    cin >> c >> x;
    if (c == '+') {
      d[x]++;
      if (d[x] % 4 == 0)
        p++;
      if (d[x] % 2 == 0)
        k++;
    } else {
      d[x]--;
      if (d[x] % 4 == 3)
        p--;
      if (d[x] % 2 != 0)
        k--;
    }
    results[i] = (k >= 4 && p > 0) ? 1 : 0;
  }

  for (int i = 0; i < q; i++) {
    cout << (results[i] ? "YES" : "NO") << endl;
  }

  delete[] results;
  return 0;
}
```
Explanation:

1. Removed unnecessary includes.
2. Optimized loop initialization by starting from 0 instead of 1.
3. Optimized array size by using a `map` instead of a fixed-size array.
4. Optimized memory usage by storing only the frequencies of the elements that actually occur in `a`.
5. Optimized output by storing the results in a separate array and printing them all at once after the loop.
6. Added memory deallocation for the `results` array to prevent memory leaks.