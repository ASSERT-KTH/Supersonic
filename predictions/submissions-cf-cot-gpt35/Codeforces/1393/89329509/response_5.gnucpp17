#pragma GCC target(                                                            \
    "sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include <iostream>
#include <iomanip>
#include <vector>
using namespace std;

const int maxn = 2e3 + 7;
int ul[maxn][maxn];
int ur[maxn][maxn];
int dl[maxn][maxn];
int dr[maxn][maxn];
char kek[maxn][maxn];

void solve() {
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      cin >> kek[i][j];
    }
  }
  int ans = 0;
  for (int j = 0; j < m-1; j++) {
    for (int i = 0; i < n-1; i++) {
      if (kek[i][j] == kek[i + 1][j] && kek[i][j] == kek[i][j + 1]) {
        dl[i][j] = min(dl[i + 1][j], dl[i][j - 1]) + 1;
        dr[i][j] = min(dr[i + 1][j], dr[i][j + 1]) + 1;
      }
      if (kek[i][j] == kek[i - 1][j] && kek[i][j] == kek[i][j - 1]) {
        ul[i][j] = min(ul[i - 1][j], ul[i][j - 1]) + 1;
        ur[i][j] = min(ur[i - 1][j], ur[i][j + 1]) + 1;
      }
      ans += min(ul[i][j], min(ur[i][j], min(dl[i][j], dr[i][j]))) + 1;
    }
  }
  cout << ans << endl;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout << fixed << setprecision(8);
  int q = 1;
  while (q--)
    solve();
}