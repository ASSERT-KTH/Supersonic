#include <iostream>
using namespace std;

const int maxn = 2e3 + 7;
int ul[maxn][maxn];
int ur[maxn][maxn];
int dl[maxn][maxn];
int dr[maxn][maxn];
char kek[maxn][maxn];

void solve() {
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> kek[i][j];
        }
    }
    for (int i = 1; i < n - 1; i++) {
        for (int j = 1; j < m - 1; j++) {
            if (kek[i][j] == kek[i - 1][j] && kek[i][j] == kek[i][j - 1]) {
                ul[i][j] = ul[i - 1][j] + ul[i][j - 1] - ul[i - 1][j - 1] + 1;
            }
        }
    }
    for (int i = 1; i < n - 1; i++) {
        for (int j = m - 2; j >= 1; j--) {
            if (kek[i][j] == kek[i - 1][j] && kek[i][j] == kek[i][j + 1]) {
                ur[i][j] = ur[i - 1][j] + ur[i][j + 1] - ur[i - 1][j + 1] + 1;
            }
        }
    }
    for (int i = n - 2; i >= 1; i--) {
        for (int j = 1; j < m - 1; j++) {
            if (kek[i][j] == kek[i + 1][j] && kek[i][j] == kek[i][j - 1]) {
                dl[i][j] = dl[i + 1][j] + dl[i][j - 1] - dl[i + 1][j - 1] + 1;
            }
        }
    }
    for (int i = n - 2; i >= 1; i--) {
        for (int j = m - 2; j >= 1; j--) {
            if (kek[i][j] == kek[i + 1][j] && kek[i][j] == kek[i][j + 1]) {
                dr[i][j] = dr[i + 1][j] + dr[i][j + 1] - dr[i + 1][j + 1] + 1;
            }
        }
    }
    int ans = 0;
    for (int i = 1; i < n - 1; i++) {
        for (int j = 1; j < m - 1; j++) {
            ans += min(ul[i][j], min(ur[i][j], min(dl[i][j], dr[i][j]))) + 1;
        }
    }
    cout << ans << endl;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int q = 1;
    while (q--)
        solve();
    return 0;
}