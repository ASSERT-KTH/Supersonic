#include <iostream>
#include <cstring>
using namespace std;
const int N = 3e5 + 7, K = 20, X = 42, M = 998244353;
int cnk[X][X];
int fact[N], defact[N];
int dp[1 << K][X];
int op[N][K], cl[N][K];
pair<int, int> lr[N];
pair<int, int> bad[K];
bool has[N];
bool f[K], f2[K];

int bpow(int a, int n) {
  int res = 1;
  while (n > 0) {
    if (n & 1) {
      res = (res * a) % M;
    }
    a = (a * a) % M;
    n >>= 1;
  }
  return res;
}

void init() {
  memset(cnk, 0, sizeof(cnk));
  for (int n = 0; n < X; n++) {
    cnk[n][0] = 1;
    for (int k = 1; k <= n; k++) {
      cnk[n][k] = (cnk[n - 1][k] + cnk[n - 1][k - 1]) % M;
    }
  }
  fact[0] = 1;
  for (int i = 1; i < N; i++)
    fact[i] = (fact[i - 1] * i) % M;
  defact[N - 1] = bpow(fact[N - 1], M - 2);
  for (int i = N - 2; i >= 0; i--) {
    defact[i] = (defact[i + 1] * (i + 1)) % M;
  }
}

int get_cnk(int n, int k) {
  if (k > n || k < 0)
    return 0;
  if (n < X)
    return cnk[n][k];
  return (((fact[n] * defact[k]) % M) * defact[n - k]) % M;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  memset(has, 0, sizeof(has));
  memset(dp, 0, sizeof(dp));
  memset(f, 0, sizeof(f));
  memset(f2, 0, sizeof(f2));
  init();
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    cin >> lr[i].first >> lr[i].second;
    op[lr[i].first][i] = 1;
    cl[lr[i].second][i] = 1;
  }
  for (int i = 0; i < m; i++) {
    cin >> bad[i].first >> bad[i].second;
    bad[i].first--;
    bad[i].second--;
  }
  dp[0][0] = 1;
  for (int mask = 1; mask < (1 << m); mask++) {
    int pos = __builtin_ctz(mask);
    int nmask = 0, alone = 0, x = bad[pos].first, nmask2 = 0, alone2 = 0;
    int lol[K] = {0};
    int kek[K] = {0}, kek2[K] = {0};
    for (int i = 0; i < m; i++) {
      if (mask & (1 << i)) {
        if (bad[i].first != x && bad[i].second != x) {
          nmask |= (1 << i);
        }
        lol[bad[i].first] = 1;
        lol[bad[i].second] = 1;
        if (bad[i].first == x && !f[bad[i].second]) {
          f[bad[i].second] = 1;
          kek[bad[i].second] = 1;
        }
        if (bad[i].second == x && !f[bad[i].first]) {
          f[bad[i].first] = 1;
          kek[bad[i].first] = 1;
        }
      }
    }
    for (int i = 0; i < m; i++) {
      if (mask & (1 << i)) {
        if (nmask & (1 << i)) {
          if (!f[bad[i].first] && !f[bad[i].second])
            nmask2 |= (1 << i);
        }
        if (f[bad[i].first] && bad[i].second != x && !f[bad[i].second] &&
            !f2[bad[i].second]) {
          f2[bad[i].second] = 1;
          kek2[bad[i].second] = 1;
        }
        if (f[bad[i].second] && bad[i].first != x && !f[bad[i].first] &&
            !f2[bad[i].first]) {
          f2[bad[i].first] = 1;
          kek2[bad[i].first] = 1;
        }
      }
    }
    for (int elem = 0; elem < K; elem++) {
      bool flag = false;
      for (int i = 0; i < m; i++) {
        if (nmask & (1 << i)) {
          if (bad[i].first == elem || bad[i].second == elem) {
            flag = true;
            break;
          }
        }
      }
      if (!flag)
        alone += kek[elem];
    }
    for (int elem = 0; elem < K; elem++) {
      bool flag = false;
      for (int i = 0; i < m; i++) {
        if (nmask2 & (1 << i)) {
          if (bad[i].first == elem || bad[i].second == elem) {
            flag = true;
            break;
          }
        }
      }
      if (!flag)
        alone2 += kek2[elem];
    }
    dp[mask][0] = 1;
    for (int i = 1; i < X; i++) {
      if (i > lol[0])
        break;
      for (int t = 0; t <= min(i, alone); t++) {
        dp[mask][i] = (dp[mask][i] + dp[nmask][i - t] * get_cnk(alone, t)) % M;
      }
      for (int t = 0; t <= min(i - 1, alone2); t++) {
        dp[mask][i] =
            (dp[mask][i] + dp[nmask2][i - t - 1] * get_cnk(alone2, t)) % M;
      }
    }
    for (int elem = 0; elem < K; elem++)
      f[elem] = 0;
    for (int elem = 0; elem < K; elem++)
      f2[elem] = 0;
  }
  int res = 0;
  int cnt = 0;
  for (int len = 1; len <= n; len++) {