#include <iostream>
#include <vector>
#include <unordered_set>
using namespace std;

const int X = 42;
const int M = 998244353;

vector<int> op[X], cl[X];
pair<int, int> lr[X];
pair<int, int> bad[X];
bool has[X];
bool f[X], f2[X];
int dp[1 << X][X];
int sz[1 << X];
int cnk[X][X];

int bpow(int a, int n) {
  int res = 1;
  while (n > 0) {
    if (n & 1) {
      res = (res * a) % M;
    }
    a = (a * a) % M;
    n >>= 1;
  }
  return res;
}

void init() {
  for (int n = 0; n < X; n++) {
    cnk[n][0] = 1;
    for (int k = 1; k <= n; k++) {
      cnk[n][k] = (cnk[n - 1][k] + cnk[n - 1][k - 1]) % M;
    }
  }
}

int get_cnk(int n, int k) {
  if (k > n || k < 0) {
    return 0;
  }
  return cnk[n][k];
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  memset(has, 0, sizeof(has));
  memset(dp, 0, sizeof(dp));
  memset(f, 0, sizeof(f));
  memset(f2, 0, sizeof(f2));

  init();

  int n, m;
  cin >> n >> m;
  
  for (int i = 0; i < n; i++) {
    cin >> lr[i].first >> lr[i].second;
    op[lr[i].first].push_back(i);
    cl[lr[i].second].push_back(i);
  }

  for (int i = 0; i < m; i++) {
    cin >> bad[i].first >> bad[i].second;
    bad[i].first--;
    bad[i].second--;
  }

  dp[0][0] = 1;
  sz[0] = 0;

  for (int mask = 1; mask < (1 << m); mask++) {
    int pos = __builtin_ctz(mask);
    int x = bad[pos].first;
    int nmask = 0, alone = 0, nmask2 = 0, alone2 = 0;
    unordered_set<int> lol;
    vector<int> kek, kek2;

    for (int i = 0; i < m; i++) {
      if (mask & (1 << i)) {
        if (bad[i].first != x && bad[i].second != x) {
          nmask |= (1 << i);
        }

        lol.insert(bad[i].first);
        lol.insert(bad[i].second);

        if (bad[i].first == x && !f[bad[i].second]) {
          f[bad[i].second] = true;
          kek.push_back(bad[i].second);
        }

        if (bad[i].second == x && !f[bad[i].first]) {
          f[bad[i].first] = true;
          kek.push_back(bad[i].first);
        }
      }
    }

    for (int i = 0; i < m; i++) {
      if (mask & (1 << i)) {
        if (nmask & (1 << i)) {
          if (!f[bad[i].first] && !f[bad[i].second]) {
            nmask2 |= (1 << i);
          }
        }

        if (f[bad[i].first] && bad[i].second != x && !f[bad[i].second] &&
            !f2[bad[i].second]) {
          f2[bad[i].second] = true;
          kek2.push_back(bad[i].second);
        }

        if (f[bad[i].second] && bad[i].first != x && !f[bad[i].first] &&
            !f2[bad[i].first]) {
          f2[bad[i].first] = true;
          kek2.push_back(bad[i].first);
        }
      }
    }

    for (int elem : kek) {
      bool flag = false;
      for (int i = 0; i < m; i++) {
        if (nmask & (1 << i)) {
          if (bad[i].first == elem || bad[i].second == elem) {
            flag = true;
            break;
          }
        }
      }
      if (!flag) {
        alone++;
      }
    }

    for (int elem : kek2) {
      bool flag = false;
      for (int i = 0; i < m; i++) {
        if (nmask2 & (1 << i)) {
          if (bad[i].first == elem || bad[i].second == elem) {
            flag = true;
            break;
          }
        }
      }
      if (!flag) {
        alone2++;
      }
    }

    dp[mask][0] = 1;
    sz[mask] = lol.size();

    for (int i = 1; i < X; i++) {
      if (i > sz[mask]) {
        break;
      }

      for (int t = 0; t <= min(i, alone); t++) {
        dp[mask][i] = (dp[mask][i] + dp[nmask][i - t] * get_cnk(alone, t)) % M;
      }

      for (int t = 0; t <= min(i - 1, alone2); t++) {
        dp[mask][i] = (dp[mask][i] + dp[nmask2][i - t - 1] * get_cnk(alone2, t)) % M;
      }
    }

    for (int elem : kek) {
      f[elem] = false;
    }

    for (int elem : kek2) {
      f2[elem] = false;
    }
  }

  int res = 0;
  int cnt = 0;

  for (int len = 1; len <= n; len++) {
    for (int elem : op[len]) {
      cnt++;
      has[elem] = true;
    }

    int mask = 0;
    for (int i = 0; i < m; i++) {
      int x = bad[i].first, y = bad[i].second;
      if (has[x] && has[y]) {
        mask |= (1 << i);
      }
    }

    for (int t = 0; t <= min(X - 1, len); t++) {
      res = (res + dp[mask][t] * get_cnk(cnt - sz[mask], len - t)) % M;
    }

    for (int elem : cl[len]) {
      cnt--;
      has[elem] = false;
    }
  }

  cout << res << endl;

  return 0;
}