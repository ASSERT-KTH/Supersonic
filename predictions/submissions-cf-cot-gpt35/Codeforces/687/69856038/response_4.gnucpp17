#include <cstdio>
#include <vector>
#include <algorithm>

const int N = 1000, M = N * (N - 1) / 2;

int main() {
  int n, m, q;
  scanf("%d%d%d", &n, &m, &q);

  std::vector<std::pair<int, std::pair<int, int>>> edges;
  edges.reserve(m);

  for (int h = 0; h < m; h++) {
    int i, j, w;
    scanf("%d%d%d", &i, &j, &w), i--, j--;
    edges.emplace_back(w, std::make_pair(i, j));
  }

  std::sort(edges.begin(), edges.end(), std::greater<>());

  std::vector<int> dsu(n * 2, -1);

  while (q-- > 0) {
    int l, r;
    scanf("%d%d", &l, &r), l--, r--;

    int w = -1;

    for (const auto& edge : edges) {
      int h_ = &edge - &edges.front();
      if (l <= h_ && h_ <= r) {
        int i = edge.second.first;
        int j = edge.second.second;
        int i0 = i << 1, i1 = i0 | 1;
        int j0 = j << 1, j1 = j0 | 1;
        if (dsu[i0] == -1 && dsu[j1] == -1) {
          dsu[i0] = j1;
          dsu[j0] = i1;
          w = edge.first;
          break;
        }
      }
    }

    printf("%d\n", w);
  }

  return 0;
}