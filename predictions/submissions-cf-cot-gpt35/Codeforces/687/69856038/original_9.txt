The given program is already quite efficient, but there are a few optimizations that can be made:

1. Remove unnecessary includes: The program includes the `<algorithm>` header, but it doesn't use any functions from it. Therefore, we can remove the line `#include <algorithm>`.

2. Use `cin` and `cout` instead of `scanf` and `printf`: The program currently uses `scanf` and `printf` for input and output. Switching to `cin` and `cout` can improve readability and possibly performance.

3. Use `vector` instead of static arrays: The program uses static arrays for `ii`, `jj`, `ww`, and `hh`. Switching to `vector` can provide more flexibility and dynamic memory allocation.

4. Use `reserve` for `vector` capacity: Since the number of elements in the `ii`, `jj`, `ww`, and `hh` vectors is known in advance, using `reserve` can avoid unnecessary reallocations.

5. Use a customized comparison function for sorting: The program currently uses a lambda function as the comparison function for `sort`. We can define a separate comparison function and pass it to `sort` for better readability.

Here's the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const int N = 1000, M = N * (N - 1) / 2;
int dsu[N * 2];

int find(int i) {
  return dsu[i] < 0 ? i : (dsu[i] = find(dsu[i]));
}

bool join(int i, int j) {
  i = find(i);
  j = find(j);
  if (i == j)
    return false;
  if (dsu[i] > dsu[j])
    dsu[i] = j;
  else {
    if (dsu[i] == dsu[j])
      dsu[i]--;
    dsu[j] = i;
  }
  return true;
}

bool compare(int a, int b) {
  return ww[a] > ww[b];
}

int main() {
  int n, m, q;
  cin >> n >> m >> q;

  vector<int> ii(M), jj(M), ww(M), hh(M);
  ii.reserve(m);
  jj.reserve(m);
  ww.reserve(m);
  hh.reserve(m);

  for (int h = 0; h < m; h++) {
    int i, j, w;
    cin >> i >> j >> w;
    i--, j--;
    ii[h] = i;
    jj[h] = j;
    ww[h] = w;
    hh[h] = h;
  }

  sort(hh.begin(), hh.begin() + m, compare);

  while (q-- > 0) {
    int l, r;
    cin >> l >> r;
    l--, r--;

    fill_n(dsu, n * 2, -1);
    int w = -1;
    for (int h = 0; h < m; h++) {
      int h_ = hh[h];
      if (l <= h_ && h_ <= r) {
        int i = ii[h_];
        int j = jj[h_];
        int i0 = i << 1, i1 = i0 | 1;
        int j0 = j << 1, j1 = j0 | 1;
        if (join(i0, j1) && !join(i1, j0)) {
          w = ww[h_];
          break;
        }
      }
    }
    cout << w << endl;
  }
}
```

Explanation of optimizations:

1. The unnecessary `#include <algorithm>` line is removed.

2. The `scanf` and `printf` lines are replaced with `cin` and `cout` for input and output.

3. The static arrays `ii`, `jj`, `ww`, and `hh` are replaced with `vector` equivalents. This allows for more flexibility and dynamic memory allocation.

4. The `reserve` function is used to allocate memory in advance for the vectors `ii`, `jj`, `ww`, and `hh`. This avoids unnecessary reallocations during the loop.

5. The lambda function for the `sort` call is replaced with a separate comparison function `compare`. This improves readability of the code.