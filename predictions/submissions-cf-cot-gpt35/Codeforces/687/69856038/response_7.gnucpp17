#include <iostream>
#include <vector>

const int N = 1000, M = N * (N - 1) / 2;

int find(std::vector<int>& dsu, int i) {
  return dsu[i] < 0 ? i : (dsu[i] = find(dsu, dsu[i]));
}

bool join(std::vector<int>& dsu, int i, int j) {
  i = find(dsu, i);
  j = find(dsu, j);
  if (i == j)
    return false;
  if (dsu[i] > dsu[j])
    dsu[i] = j;
  else {
    if (dsu[i] == dsu[j])
      --dsu[i];
    dsu[j] = i;
  }
  return true;
}

int main() {
  int n, m, q;
  std::scanf("%d%d%d", &n, &m, &q);

  std::vector<int> dsu(n * 2, -1);
  std::vector<std::pair<std::pair<int, int>, std::pair<int, int>>> edges(m);
  
  for (int h = 0; h < m; ++h) {
    int i, j, w;
    std::scanf("%d%d%d", &i, &j, &w);
    --i, --j;
    edges[h] = {{i, j}, {w, h}};
  }

  std::sort(edges.begin(), edges.end(),
    [](const auto& a, const auto& b) { return a.second.first > b.second.first; });

  while (q-- > 0) {
    int l, r;
    std::scanf("%d%d", &l, &r);
    --l, --r;

    std::fill(dsu.begin(), dsu.end(), -1);
    int w = -1;
    for (const auto& edge : edges) {
      const auto& [i, j] = edge.first;
      const auto& [w_, h] = edge.second;
      if (l <= h && h <= r) {
        int i0 = i << 1, i1 = i0 | 1;
        int j0 = j << 1, j1 = j0 | 1;
        if (join(dsu, i0, j1) && !join(dsu, i1, j0)) {
          w = w_;
          break;
        }
      }
    }
    std::printf("%d\n", w);
  }

  return 0;
}