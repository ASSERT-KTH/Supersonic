Step 1: Avoid Unnecessary Recursion

In the `find` function, there is a recursive call to `find(dsu[i])`. This can lead to unnecessary recursion and potentially stack overflow errors. We can optimize this by using a loop instead of recursion.

Step 2: Avoid Sorting Entire Array

In the `main` function, the `sort` function is used to sort the `hh` array. However, we only need to sort a subset of this array. We can modify the sorting to only sort the elements from index `l` to index `r`, instead of sorting the entire array.

Step 3: Avoid Unnecessary Array Initialization

In each iteration of the `while` loop, the `dsu` array is initialized with `-1` using `fill_n`. However, we only need to initialize the elements from index `0` to `n * 2 - 1`. We can modify the initialization to only initialize the required elements.

Step 4: Use a Faster Input Method

The `scanf` function is used to read input, which can be slow. We can use the `cin` object from the `iostream` library for faster input.

Here is the optimized version of the program:

```cpp
#include <algorithm>
#include <iostream>
using namespace std;
const int N = 1000, M = N * (N - 1) / 2;
int dsu[N * 2];
int find(int i) {
  while (dsu[i] >= 0)
    i = dsu[i];
  return i;
}
bool join(int i, int j) {
  i = find(i);
  j = find(j);
  if (i == j)
    return false;
  if (dsu[i] > dsu[j])
    dsu[i] = j;
  else {
    if (dsu[i] == dsu[j])
      dsu[i]--;
    dsu[j] = i;
  }
  return true;
}
int main() {
  int n, m, q;
  cin >> n >> m >> q;
  static int ii[M], jj[M], ww[M], hh[M];
  for (int h = 0; h < m; h++) {
    int i, j, w;
    cin >> i >> j >> w;
    i--, j--;
    ii[h] = i;
    jj[h] = j;
    ww[h] = w;
    hh[h] = h;
  }
  while (q-- > 0) {
    int l, r;
    cin >> l >> r;
    l--, r--;
    sort(hh + l, hh + r + 1, [](int a, int b) { return ww[a] > ww[b]; });
    fill_n(dsu, n * 2, -1);
    int w = -1;
    for (int h = l; h <= r; h++) {
      int h_ = hh[h];
      int i = ii[h_];
      int j = jj[h_];
      int i0 = i << 1, i1 = i0 | 1;
      int j0 = j << 1, j1 = j0 | 1;
      if (join(i0, j1) && !join(i1, j0)) {
        w = ww[h_];
        break;
      }
    }
    cout << w << "\n";
  }
}
```

Explanation of optimizations:

- Step 1: Replaced the recursive call in `find` with a loop to avoid unnecessary recursion.
- Step 2: Modified the sorting to only sort the required elements in the `hh` array.
- Step 3: Modified the array initialization to only initialize the required elements in the `dsu` array.
- Step 4: Replaced the `scanf` function with the `cin` object for faster input.