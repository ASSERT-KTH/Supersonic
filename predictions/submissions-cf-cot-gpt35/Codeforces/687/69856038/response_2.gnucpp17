#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int N = 1000, M = N * (N - 1) / 2;
int dsu[N * 2];

int find(int i) {
    if (dsu[i] < 0)
        return i;
    return dsu[i] = find(dsu[i]);
}

bool join(int i, int j) {
    i = find(i);
    j = find(j);
    if (i == j)
        return false;
    if (dsu[i] > dsu[j]) {
        dsu[j] += dsu[i];
        dsu[i] = j;
    } else {
        dsu[i] += dsu[j];
        dsu[j] = i;
    }
    return true;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n, m, q;
    cin >> n >> m >> q;

    vector<int> ii(M), jj(M), ww(M), hh(M);
    for (int h = 0; h < m; h++) {
        int i, j, w;
        cin >> i >> j >> w;
        i--, j--;
        ii[h] = i;
        jj[h] = j;
        ww[h] = w;
        hh[h] = h;
    }

    sort(hh.begin(), hh.begin() + m, [&](int a, int b) { return ww[a] > ww[b]; });

    while (q-- > 0) {
        int l, r;
        cin >> l >> r;
        l--, r--;

        for (int i = 0; i < n * 2; i++) {
            dsu[i] = -1;
        }

        int w = -1;
        for (int h = 0; h < m; h++) {
            int h_ = hh[h];
            if (l <= h_ && h_ <= r) {
                int i = ii[h_];
                int j = jj[h_];
                int i0 = i << 1, i1 = i0 | 1;
                int j0 = j << 1, j1 = j0 | 1;
                if (join(i0, j1) && !join(i1, j0)) {
                    w = ww[h_];
                    break;
                }
            }
        }

        cout << w << "\n";
    }

    return 0;
}