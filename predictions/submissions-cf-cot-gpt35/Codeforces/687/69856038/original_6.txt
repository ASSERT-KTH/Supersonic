The given program is already quite optimized. However, there are a few areas where we can make some improvements.

1. Removing unused header files: The `algorithm` header file is not being used in the program, so we can remove it.

2. Avoiding unnecessary calculations: The constant `M` is calculated as `N * (N - 1) / 2`. Instead of calculating this value at compile time, we can calculate it at runtime to avoid unnecessary calculations.

3. Using `vector` instead of static arrays: Instead of using static arrays `ii`, `jj`, `ww`, and `hh`, we can use `vector` to dynamically allocate memory. This will allow us to avoid allocating memory for the maximum possible size and instead allocate memory based on the actual number of elements.

4. Avoiding unnecessary sorting: The array `hh` is sorted using a custom comparator. However, if we update the loop to iterate from `r` to `l`, we can avoid sorting the array altogether.

5. Avoiding redundant calculations: In the main loop, the variable `h_` is assigned the value of `hh[h]` in each iteration. We can assign this value outside the loop to avoid redundant calculations.

6. Avoiding unnecessary assignments: In the main loop, the variables `i`, `j`, `i0`, `i1`, `j0`, and `j1` are assigned values in each iteration. We can move these assignments outside the loop as they are not changing within the loop.

7. Using `scanf` instead of `cin`: The program currently uses `cin` for input. However, using `scanf` for integer input can be more efficient.

With these optimizations in mind, here is the optimized C++ program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const int N = 1000;
int dsu[N * 2];

int find(int i) { 
  return dsu[i] < 0 ? i : (dsu[i] = find(dsu[i])); 
}

bool join(int i, int j) {
  i = find(i);
  j = find(j);
  if (i == j)
    return false;
  if (dsu[i] > dsu[j])
    dsu[i] = j;
  else {
    if (dsu[i] == dsu[j])
      dsu[i]--;
    dsu[j] = i;
  }
  return true;
}

int main() {
  int n, m, q;
  scanf("%d%d%d", &n, &m, &q);

  int M = m * (m - 1) / 2;
  vector<int> ii(M), jj(M), ww(M), hh(M);

  for (int h = 0; h < m; h++) {
    int i, j, w;
    scanf("%d%d%d", &i, &j, &w);
    i--, j--;

    ii[h] = i;
    jj[h] = j;
    ww[h] = w;
    hh[h] = h;
  }

  while (q-- > 0) {
    int l, r;
    scanf("%d%d", &l, &r);
    l--, r--;

    fill_n(dsu, n * 2, -1);
    int w = -1;

    int h_ = r;
    for (int h = r; h >= l; h--) {
      int i = ii[hh[h]];
      int j = jj[hh[h]];
      int i0 = i << 1, i1 = i0 | 1;
      int j0 = j << 1, j1 = j0 | 1;
      if (join(i0, j1) && !join(i1, j0)) {
        w = ww[hh[h]];
        break;
      }
    }

    printf("%d\n", w);
  }
}
```