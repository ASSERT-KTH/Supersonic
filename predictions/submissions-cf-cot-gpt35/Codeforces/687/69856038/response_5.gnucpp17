#include <iostream>
#include <vector>
#include <algorithm>

int find(std::vector<int>& dsu, int i) {
  return dsu[i] < 0 ? i : (dsu[i] = find(dsu, dsu[i]));
}

bool join(std::vector<int>& dsu, int i, int j) {
  i = find(dsu, i);
  j = find(dsu, j);
  if (i == j)
    return false;
  if (dsu[i] > dsu[j])
    dsu[i] = j;
  else {
    if (dsu[i] == dsu[j])
      dsu[i]--;
    dsu[j] = i;
  }
  return true;
}

int main() {
  int n, m, q;
  std::cin >> n >> m >> q;

  std::vector<int> dsu(n * 2, -1);
  std::vector<int> hh(m), ww(m);
  std::vector<int> ii(m), jj(m);

  for (int h = 0; h < m; h++) {
    int i, j, w;
    std::cin >> i >> j >> w;
    i--, j--;
    ii[h] = i;
    jj[h] = j;
    ww[h] = w;
    hh[h] = h;
  }

  std::partial_sort(hh.begin(), hh.begin() + q, hh.end(),
                    [&](int a, int b) { return ww[a] > ww[b]; });

  while (q-- > 0) {
    int l, r;
    std::cin >> l >> r;
    l--, r--;
    std::fill(dsu.begin(), dsu.end(), -1);
    int w = -1;
    for (int h = l; h <= r; h++) {
      int h_ = hh[h];
      int i = ii[h_];
      int j = jj[h_];
      int i0 = i << 1, i1 = i0 | 1;
      int j0 = j << 1, j1 = j0 | 1;
      if (join(dsu, i0, j1) && !join(dsu, i1, j0)) {
        w = ww[h_];
        break;
      }
    }
    std::cout << w << '\n';
  }

  return 0;
}