#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

int main() {
    const int MAXV = 61;
    int N;
    cin >> N;
    vector<int> a(N);
    for (int i = 0; i < N; i++) {
        cin >> a[i];
    }

    vector<bool> isPrime(MAXV, true);
    isPrime[0] = isPrime[1] = false;
    for (int v = 2; v < MAXV; v++) {
        if (isPrime[v]) {
            for (int u = v * 2; u < MAXV; u += v) {
                isPrime[u] = false;
            }
        }
    }

    vector<int> mask(MAXV);
    for (int v = 1; v < MAXV; v++) {
        for (int i = 2; i < MAXV; i++) {
            if (isPrime[i] && v % i == 0) {
                mask[v] |= 1 << (i - 2);
            }
        }
    }

    vector<int> dp(1 << (MAXV - 2), INT_MAX);
    dp[0] = -1;
    vector<int> b(N);
    for (int i = 0; i < N; i++) {
        for (int m = 0; m < (1 << (MAXV - 2)); m++) {
            if (dp[m] < INT_MAX) {
                for (int v = 1; v < MAXV; v++) {
                    if (!(mask[v] & m)) {
                        int new_m = m ^ mask[v];
                        int new_cost = dp[m] + abs(v - a[i]);
                        if (new_cost < dp[new_m]) {
                            dp[new_m] = new_cost;
                            b[i] = v;
                        }
                    }
                }
            }
        }
    }

    for (int i = 0; i < N; i++) {
        cout << b[i] << " ";
    }
    cout << endl;

    return 0;
}