#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;

int main() {
    const int MAXV = 61;
    int N;
    cin >> N;
    vector<int> a(N);
    for (int i = 0; i < N; i++) {
        cin >> a[i];
    }

    vector<int> pri;
    vector<bool> is_prime(MAXV, true);
    for (int v = 2; v < MAXV; v++) {
        if (is_prime[v]) {
            pri.push_back(v);
            for (int i = v * v; i < MAXV; i += v) {
                is_prime[i] = false;
            }
        }
    }

    vector<int> mask(MAXV);
    for (int v = 1; v < MAXV; v++) {
        for (int i = 0; i < pri.size(); i++) {
            if (v % pri[i] == 0) {
                mask[v] |= 1 << i;
            }
        }
    }

    vector<vector<pair<int, int>>> dp(N + 1, vector<pair<int, int>>(1 << pri.size(), {INT_MAX, -1}));
    dp[0][0].first = -1;

    for (int i = 0; i < N; i++) {
        for (int m = 0; m < (1 << pri.size()); m++) {
            if (dp[i][m].first < INT_MAX) {
                for (int v = 1; v < MAXV; v++) {
                    if (!(mask[v] & m)) {
                        int cost = dp[i][m].first + abs(v - a[i]);
                        if (cost < dp[i + 1][m ^ mask[v]].first) {
                            dp[i + 1][m ^ mask[v]] = {cost, v};
                        }
                    }
                }
            }
        }
    }

    vector<int> b(N);
    int m = min_element(dp.back().begin(), dp.back().end()) - dp.back().begin();
    for (int i = N - 1; i >= 0; i--) {
        b[i] = dp[i + 1][m].second;
        m ^= mask[b[i]];
    }

    for (int i = 0; i < N; i++) {
        cout << b[i] << " ";
    }
    cout << endl;

    return 0;
}