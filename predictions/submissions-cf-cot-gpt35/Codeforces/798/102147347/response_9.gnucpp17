#include <iostream>
#include <vector>

const int inf = 2e9;

int gcd(int a, int b) {
  while (b != 0) {
    int temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);

  long long n;
  std::cin >> n;

  std::vector<int> a(n + 24);
  for (int i = 1; i <= n; ++i) {
    std::cin >> a[i];
  }

  int faust = gcd(a[1], a[2]);
  for (int i = 3; i <= n; ++i) {
    faust = gcd(faust, a[i]);
  }

  a[n + 1] = 2;

  int dp[200000][2];
  memset(dp, inf, sizeof(dp));

  if (faust > 1) {
    std::cout << "YES" << std::endl;
    std::cout << 0 << std::endl;
    return 0;
  }

  for (int i = 1; i <= n; ++i) {
    if (a[i] % 2 and a[i + 1] % 2) {
      if (dp[i - 1][1] != inf)
        dp[i][0] = dp[i - 1][1];
      if (dp[i - 1][0] != inf)
        dp[i][1] = dp[i - 1][0] + 1;
    } else if (a[i] % 2 and a[i + 1] % 2 == 0) {
      if (dp[i - 1][1] != inf) {
        dp[i][0] = dp[i - 1][1];
      }
      if (dp[i - 1][0] != inf)
        dp[i][1] = dp[i - 1][0] + 2;
    } else if (a[i] % 2 == 0 and a[i + 1] % 2) {
      if (dp[i - 1][0] != inf and dp[i - 1][1] != inf)
        dp[i][0] = std::min(dp[i - 1][0], dp[i - 1][1]);
      else if (dp[i - 1][1] != inf)
        dp[i][0] = dp[i - 1][1];
      else if (dp[i - 1][0] != inf)
        dp[i][0] = dp[i - 1][0];
      if (dp[i - 1][0] != inf and dp[i - 1][1] != inf)
        dp[i][1] = std::min(dp[i - 1][1] + 2, dp[i - 1][0] + 2);
      else if (dp[i - 1][1] != inf)
        dp[i][1] = dp[i - 1][1] + 2;
      else if (dp[i - 1][0] != inf)
        dp[i][1] = dp[i - 1][0] + 2;
    } else if (a[i] % 2 == 0 and a[i + 1] % 2 == 0) {
      if (dp[i - 1][0] != inf and dp[i - 1][1] != inf)
        dp[i][0] = std::min(dp[i - 1][0], dp[i - 1][1]);
      else if (dp[i - 1][1] != inf)
        dp[i][0] = dp[i - 1][1];
      else if (dp[i - 1][0] != inf)
        dp[i][0] = dp[i - 1][0];
      dp[i][1] = dp[i][0];
    }
  }

  std::cout << "YES" << std::endl;
  if (inf == dp[n][0])
    std::cout << dp[n][1] << std::endl;
  else
    std::cout << dp[n][0] << std::endl;

  return 0;
}