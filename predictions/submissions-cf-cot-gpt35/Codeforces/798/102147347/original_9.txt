Step 1: Remove unnecessary includes
The `#include <bits/stdc++.h>` includes a large number of header files, which can slow down the compilation process and increase memory usage. Since the program does not use any specific header files from this include, we can remove it.

Step 2: Remove unnecessary macros
The program has several unnecessary macros defined. We can remove them to simplify the code.

Step 3: Optimize the gcd function
The gcd function can be optimized using the Euclidean algorithm. We can replace the recursive calls with a loop, which will reduce the number of function calls and improve performance.

Step 4: Optimize the dp array initialization
The dp array is initialized with inf values using a loop. However, we can use the `memset` function to initialize the array in a more efficient way.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

const int inf = 2e9;

int gcd(int a, int b) {
  while (b != 0) {
    int temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);

  long long n;
  std::cin >> n;

  std::vector<int> a(n + 24);
  for (int i = 1; i <= n; ++i) {
    std::cin >> a[i];
  }

  int faust = gcd(a[1], a[2]);
  for (int i = 3; i <= n; ++i) {
    faust = gcd(faust, a[i]);
  }

  a[n + 1] = 2;

  int dp[200000][2];
  memset(dp, inf, sizeof(dp));

  if (faust > 1) {
    std::cout << "YES" << std::endl;
    std::cout << 0 << std::endl;
    return 0;
  }

  for (int i = 1; i <= n; ++i) {
    if (a[i] % 2 and a[i + 1] % 2) {
      if (dp[i - 1][1] != inf)
        dp[i][0] = dp[i - 1][1];
      if (dp[i - 1][0] != inf)
        dp[i][1] = dp[i - 1][0] + 1;
    } else if (a[i] % 2 and a[i + 1] % 2 == 0) {
      if (dp[i - 1][1] != inf) {
        dp[i][0] = dp[i - 1][1];
      }
      if (dp[i - 1][0] != inf)
        dp[i][1] = dp[i - 1][0] + 2;
    } else if (a[i] % 2 == 0 and a[i + 1] % 2) {
      if (dp[i - 1][0] != inf and dp[i - 1][1] != inf)
        dp[i][0] = std::min(dp[i - 1][0], dp[i - 1][1]);
      else if (dp[i - 1][1] != inf)
        dp[i][0] = dp[i - 1][1];
      else if (dp[i - 1][0] != inf)
        dp[i][0] = dp[i - 1][0];
      if (dp[i - 1][0] != inf and dp[i - 1][1] != inf)
        dp[i][1] = std::min(dp[i - 1][1] + 2, dp[i - 1][0] + 2);
      else if (dp[i - 1][1] != inf)
        dp[i][1] = dp[i - 1][1] + 2;
      else if (dp[i - 1][0] != inf)
        dp[i][1] = dp[i - 1][0] + 2;
    } else if (a[i] % 2 == 0 and a[i + 1] % 2 == 0) {
      if (dp[i - 1][0] != inf and dp[i - 1][1] != inf)
        dp[i][0] = std::min(dp[i - 1][0], dp[i - 1][1]);
      else if (dp[i - 1][1] != inf)
        dp[i][0] = dp[i - 1][1];
      else if (dp[i - 1][0] != inf)
        dp[i][0] = dp[i - 1][0];
      dp[i][1] = dp[i][0];
    }
  }

  std::cout << "YES" << std::endl;
  if (inf == dp[n][0])
    std::cout << dp[n][1] << std::endl;
  else
    std::cout << dp[n][0] << std::endl;

  return 0;
}
```