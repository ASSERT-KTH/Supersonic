To optimize the given C++ program, we can make the following modifications:

1. Remove unnecessary header file inclusion: The line `#include <bits/stdc++.h>` includes a large number of standard library headers, which may not be required for this particular program. We can remove this line and include only the necessary headers.

2. Remove unnecessary macros: The program defines macros for `ll`, `rep`, `ref`, `endl`, `st`, `nd`, `pb`, and `mp`. These macros are not used in the program and can be removed.

3. Use `constexpr` instead of `const` for constant variables: The variable `mx` and `inf` are declared as `const int` and are used as constant values. We can replace them with `constexpr int` to indicate that they are compile-time constants.

4. Use more descriptive variable names: The variable names `a`, `faust`, `dp`, etc. are not very descriptive. We can use more meaningful variable names to improve code readability.

5. Optimize the `gcd` function: The `gcd` function can be optimized by using the Euclidean algorithm, which is more efficient than the current implementation.

6. Optimize the loop initialization: The `for` loop that initializes `dp` can be optimized by using `memset` to set all elements of `dp` to `inf` in a single operation.

7. Optimize the if-else conditions: The if-else conditions inside the loop can be simplified by removing redundant checks and unnecessary else branches.

Taking into account these optimizations, the optimized C++ program is as follows:

```cpp
#include <iostream>
#include <vector>
using namespace std;

constexpr int mx = 2e6 + 5;
constexpr int inf = 2e9;

int gcd(int a, int b) {
  while (b != 0) {
    int temp = a % b;
    a = b;
    b = temp;
  }
  return a;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);

  int n;
  cin >> n;

  vector<int> arr(n + 24);
  for (int i = 0; i < n; ++i) {
    cin >> arr[i + 1];
  }

  int faust = gcd(arr[1], arr[2]);
  for (int i = 3; i <= n; ++i) {
    faust = gcd(faust, arr[i]);
  }
  arr[n + 1] = 2;

  int dp[mx][2];
  memset(dp, inf, sizeof(dp));
  dp[0][0] = 0;

  for (int i = 1; i <= n + 2; ++i) {
    dp[i][0] = min(dp[i][0], dp[i - 1][0]);
    dp[i][1] = min(dp[i][1], dp[i - 1][1]);
    
    if (arr[i] % 2 && arr[i + 1] % 2) {
      dp[i][0] = min(dp[i][0], dp[i - 1][1]);
      dp[i][1] = min(dp[i][1], dp[i - 1][0] + 1);
    } else if (arr[i] % 2 && arr[i + 1] % 2 == 0) {
      dp[i][0] = min(dp[i][0], dp[i - 1][1]);
      dp[i][1] = min(dp[i][1], dp[i - 1][0] + 2);
    } else if (arr[i] % 2 == 0 && arr[i + 1] % 2) {
      dp[i][0] = min(dp[i][0], dp[i - 1][0]);
      dp[i][1] = min(dp[i][1], dp[i - 1][1] + 2);
    } else if (arr[i] % 2 == 0 && arr[i + 1] % 2 == 0) {
      dp[i][0] = min(dp[i][0], dp[i - 1][0]);
      dp[i][1] = min(dp[i][1], dp[i - 1][1] + 2);
    }
  }

  cout << "YES" << endl;
  if (inf == dp[n][0])
    cout << dp[n][1] << endl;
  else
    cout << dp[n][0] << endl;

  return 0;
}
```

This optimized program removes unnecessary code, optimizes the `gcd` function, and simplifies the loop and if-else conditions. It should have improved running time and memory usage compared to the original program.