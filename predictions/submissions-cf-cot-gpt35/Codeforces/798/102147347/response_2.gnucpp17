#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0);

    long long n;
    std::cin >> n;
    std::vector<int> a(n + 24);
    for (int i = 0; i < n; ++i) {
        std::cin >> a[i + 1];
    }

    int faust = std::gcd(a[1], a[2]);
    for (int i = 3; i <= n; ++i) {
        faust = std::gcd(faust, a[i]);
    }
    a[n + 1] = 2;

    int* dp = new int[n + 3]{};
    dp[0] = 0;
    dp[1] = std::numeric_limits<int>::max();

    for (int i = 2; i <= n + 2; ++i) {
        dp[i] = std::numeric_limits<int>::max();
    }

    if (faust > 1) {
        std::cout << "YES" << std::endl;
        std::cout << 0 << std::endl;
        delete[] dp;
        return 0;
    }

    for (int i = 1; i <= n; ++i) {
        if (a[i] % 2 && a[i + 1] % 2) {
            if (dp[i - 1] != std::numeric_limits<int>::max()) {
                dp[i] = dp[i - 1];
            }
            if (dp[i - 1] + 1 != std::numeric_limits<int>::max()) {
                dp[i] = std::min(dp[i], dp[i - 1] + 1);
            }
        } else if (a[i] % 2 && a[i + 1] % 2 == 0) {
            if (dp[i - 1] != std::numeric_limits<int>::max()) {
                dp[i] = dp[i - 1];
            }
            if (dp[i - 1] + 2 != std::numeric_limits<int>::max()) {
                dp[i] = std::min(dp[i], dp[i - 1] + 2);
            }
        } else if (a[i] % 2 == 0 && a[i + 1] % 2) {
            if (dp[i - 1] != std::numeric_limits<int>::max()) {
                dp[i] = dp[i - 1];
            }
            if (dp[i - 1] + 2 != std::numeric_limits<int>::max()) {
                dp[i] = std::min(dp[i], dp[i - 1] + 2);
            }
        } else if (a[i] % 2 == 0 && a[i + 1] % 2 == 0) {
            if (dp[i - 1] != std::numeric_limits<int>::max()) {
                dp[i] = dp[i - 1];
            }
        }
    }

    std::cout << "YES" << std::endl;
    if (dp[n] == std::numeric_limits<int>::max()) {
        std::cout << dp[n + 1] << std::endl;
    } else {
        std::cout << dp[n] << std::endl;
    }

    delete[] dp;
    return 0;
}