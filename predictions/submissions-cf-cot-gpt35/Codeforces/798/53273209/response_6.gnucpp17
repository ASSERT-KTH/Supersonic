#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  int n;
  std::cin >> n;

  std::vector<std::string> A(n);
  for (int i = 0; i < n; i++) {
    std::cin >> A[i];
  }

  if (n == 1) {
    std::cout << 0;
    return 0;
  }

  int ans = 1000001;
  for (int i = 0; i < n; i++) {
    std::unordered_map<std::string, int> rotations;

    for (int j = 0; j < n; j++) {
      if (A[j] == A[i]) {
        continue;
      }

      std::string rotated = A[j];
      int counter = 0;

      while (rotated != A[i]) {
        std::rotate(rotated.begin(), rotated.begin() + 1, rotated.end());
        counter++;

        if (counter > 50) {
          std::cout << -1;
          return 0;
        }
      }

      rotations[rotated] = counter;
    }

    int minCounter = std::numeric_limits<int>::max();
    for (const auto& entry : rotations) {
      minCounter = std::min(minCounter, entry.second);
    }

    ans = std::min(ans, minCounter);
  }

  std::cout << ans;
  return 0;
}