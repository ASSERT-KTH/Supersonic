Explanation of the optimization step by step:

1. Remove unnecessary `#include <bits/stdc++.h>` and change it to specific includes as needed.

2. Remove `using namespace std;` and replace it with explicit `std::` namespace for each standard library usage.

3. Remove unnecessary `ios_base::sync_with_stdio(false);`, `cin.tie(NULL);`, and `cout.tie(NULL);` as they are not needed for this program.

4. Change `vector<string> B;` to `string B;` as we don't need a vector of strings, just a single string.

5. Remove the unnecessary `A` vector and read the strings directly into `B`.

6. Remove the check `if (n == 1)` as it is not needed anymore.

7. Initialize `ans` and `counter` to `INT_MAX` instead of `1000001`.

8. Instead of creating a new string `s` in each iteration of the outer loop, directly use `A[i]`.

9. Instead of creating a new string `B[j]` in each iteration of the inner loop, directly use `B`.

10. Instead of checking `B[j] != s` in the while loop condition, check `z < n` to avoid unnecessary string comparison.

11. Instead of erasing the first character and appending it to the end of `B[j]`, use string rotation by assigning `B[j] = B[j].substr(1) + B[j][0]`.

12. Remove the check for `z > 50` as it is not necessary anymore.

13. Remove the unnecessary assignment `counter = 0` after the inner loop.

14. Move the `ans = min(ans, counter);` assignment before the inner loop to update `ans` for each iteration of the outer loop.

15. Change the initial value of `ans` from `INT_MAX` to `n` as it is guaranteed to be smaller than `n`.

16. Return `ans` directly instead of printing it.

Optimized code:

```
#include <iostream>
#include <string>
#include <vector>
#include <climits>

int main() {
  int n;
  std::cin >> n;
  std::string B;
  for (int i = 0; i < n; i++) {
    std::string x;
    std::cin >> x;
    B += x;
  }
  int ans = n;
  int counter = 0;
  for (int i = 0; i < n; i++) {
    std::string s = B.substr(i * n, n);
    for (int j = 0; j < n; j++) {
      int z = 0;
      while (z < n && B.substr(j * n, n) != s) {
        B = B.substr(j * n + 1) + B.substr(j * n, 1);
        counter++;
        z++;
      }
    }
    ans = std::min(ans, counter);
  }
  std::cout << ans;
  return 0;
}
```