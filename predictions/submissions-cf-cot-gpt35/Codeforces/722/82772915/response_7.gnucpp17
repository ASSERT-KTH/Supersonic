#include <iostream>
#include <vector>
#include <algorithm>

const int N = 5e5 + 7;

int par[N];
int sum[N];

int root(int v) {
    return par[v] < 0 ? v : (par[v] = root(par[v]));
}

void merge(int x, int y, int& ans) {
    if ((x = root(x)) == (y = root(y)))
        return;
    ans = std::max(ans, sum[x] + sum[y]);
    if (par[y] < par[x])
        std::swap(x, y);
    par[x] += par[y];
    par[y] = x;
    sum[x] += sum[y];
}

void run() {
    int n;
    std::cin >> n;

    std::vector<int> a(n + 1);
    std::vector<int> q(n + 1);
    std::vector<int> fk(n + 1);
    std::vector<int> vis(n + 1, 0);

    for (int i = 1; i <= n; ++i) {
        std::cin >> a[i];
        sum[i] = a[i];
        par[i] = -1;
    }

    for (int i = 1; i <= n; ++i) {
        std::cin >> q[i];
    }

    int ans = 0;
    for (int i = n; i >= 1; --i) {
        fk[i] = ans;
        vis[q[i]] = 1;
        ans = std::max(ans, a[q[i]]);
        if (vis[q[i] - 1])
            merge(q[i], q[i] - 1, ans);
        if (vis[q[i] + 1])
            merge(q[i], q[i] + 1, ans);
    }

    for (int i = 1; i <= n; ++i) {
        std::cout << fk[i] << '\n';
    }
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
    
    int tc = 1;
    for (int i = 0; i < tc; ++i) {
        run();
    }
    return 0;
}