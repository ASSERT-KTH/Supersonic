#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;

typedef long long ll;

ll power(ll x, ll y) {
  ll res = 1;
  while (y > 0) {
    if (y & 1)
      res = (res * x);
    y = y >> 1;
    x = (x * x);
  }
  return res;
}

ll gcd(ll a, ll b) {
  if (a == 0)
    return b;
  return gcd(b % a, a);
}

template <typename T>
T powm(T a, T mp, ll m) {
  T cnt = 1;
  while (mp > 0) {
    if (mp % 2 == 1)
      cnt = (cnt * a) % m;
    mp /= 2;
    a = (a * a) % m;
  }
  return cnt % m;
}

ll ncr(ll n, ll r) {
  ll res = 1;
  r = min(r, n - r);
  for (ll i = 0; i < r; i++) {
    res *= (n - i);
    res /= (i + 1);
  }
  return res;
}

void run() {
  int n;
  cin >> n;
  vector<ll> a(n + 1);
  vector<ll> q(n + 1);
  for (int i = 1; i <= n; ++i) {
    cin >> a[i];
  }
  for (int i = 1; i <= n; ++i) {
    cin >> q[i];
  }
  vector<ll> fk(n + 1);
  vector<ll> vis(n + 1, 0);
  vector<ll> sum(n + 1);
  vector<ll> par(n + 1, -1);
  ll ans = 0;
  for (int i = n; i >= 1; --i) {
    fk[i] = ans;
    vis[q[i]] = 1;
    ans = max(ans, a[q[i]]);
    if (vis[q[i] - 1]) {
      int x = q[i];
      int y = q[i] - 1;
      while (par[x] >= 0) {
        x = par[x];
      }
      while (par[y] >= 0) {
        y = par[y];
      }
      if (x != y) {
        ans = max(ans, sum[x] + sum[y]);
        if (par[y] < par[x]) {
          swap(x, y);
        }
        par[x] += par[y];
        par[y] = x;
        sum[x] += sum[y];
      }
    }
    if (vis[q[i] + 1]) {
      int x = q[i];
      int y = q[i] + 1;
      while (par[x] >= 0) {
        x = par[x];
      }
      while (par[y] >= 0) {
        y = par[y];
      }
      if (x != y) {
        ans = max(ans, sum[x] + sum[y]);
        if (par[y] < par[x]) {
          swap(x, y);
        }
        par[x] += par[y];
        par[y] = x;
        sum[x] += sum[y];
      }
    }
  }
  for (int i = 1; i <= n; ++i) {
    cout << fk[i] << endl;
  }
}

int main() {
  int tc = 1;
  for (int i = 0; i < tc; ++i) {
    run();
  }
  return 0;
}