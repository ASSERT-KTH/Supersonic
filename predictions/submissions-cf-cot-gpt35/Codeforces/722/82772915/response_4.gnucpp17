#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int N = 5e5 + 7;

int par[N], sum[N], q[N];

int root(int v) {
  return par[v] < 0 ? v : (par[v] = root(par[v]));
}

void merge(int x, int y) {
  if ((x = root(x)) == (y = root(y)))
    return;
  if (par[y] < par[x])
    swap(x, y);
  par[x] += par[y];
  par[y] = x;
  sum[x] += sum[y];
}

void run() {
  int n;
  scanf("%d", &n);
  
  vector<int> a(n+1);
  for (int i = 1; i <= n; i++) {
    scanf("%d", &a[i]);
    sum[i] = a[i];
  }
  
  for (int i = 1; i <= n; i++) {
    par[i] = -1;
  }
  
  for (int i = 1; i <= n; i++) {
    scanf("%d", &q[i]);
  }
  
  int ans = 0;
  vector<int> fk(n+1);
  
  for (int i = n; i >= 1; i--) {
    fk[i] = ans;
    ans = max(ans, a[q[i]]);
    if (q[i] > 1 && sum[q[i]-1]) {
      merge(q[i], q[i] - 1);
    }
    if (q[i] < n && sum[q[i]+1]) {
      merge(q[i], q[i] + 1);
    }
  }
  
  for (int i = 1; i <= n; i++) {
    printf("%d\n", fk[i]);
  }
}

int main() {
  int tc = 1;
  
  for (int i = 0; i < tc; i++) {
    run();
  }
  
  return 0;
}