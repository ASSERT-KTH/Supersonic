#include <iostream>
#include <vector>
#include <algorithm>

const int N = 5e5 + 7;

int par[N];
int sum[N];
int q[N];

int root(int v) {
    if (par[v] < 0)
        return v;
    return par[v] = root(par[v]);
}

void merge(int x, int y) {
    x = root(x);
    y = root(y);
    if (x == y)
        return;
    if (par[y] < par[x])
        std::swap(x, y);
    par[x] += par[y];
    sum[x] += sum[y];
}

void run() {
    int n;
    scanf("%d", &n);
    std::vector<int> a(n + 1);
    std::vector<int> fk(n + 1);
    for (int i = 1; i <= n; ++i) {
        scanf("%d", &a[i]);
        sum[i] = a[i];
        par[i] = -1;
    }
    for (int i = 1; i <= n; ++i) {
        scanf("%d", &q[i]);
        fk[i] = 0;
    }
    int ans = 0;
    for (int i = n; i >= 1; --i) {
        fk[i] = ans;
        ans = std::max(ans, a[q[i]]);
        if (q[i] > 1 && a[q[i] - 1])
            merge(q[i], q[i] - 1);
        if (q[i] < n && a[q[i] + 1])
            merge(q[i], q[i] + 1);
    }
    for (int i = 1; i <= n; ++i) {
        printf("%d\n", fk[i]);
    }
}

int main() {
    int tc = 1;
    for (int i = 0; i < tc; ++i) {
        run();
    }
    return 0;
}