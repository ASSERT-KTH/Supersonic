Explanation of Optimizations:
1. Remove unnecessary headers: The program includes the header `<bits/stdc++.h>`, which includes a large number of standard library headers. This can increase compilation time and memory usage. We can remove this header and include only the necessary headers for the program.
2. Remove unnecessary typedefs: The program includes typedefs for `ll`, `ull`, and `ld`, but these types are not used in the code. We can remove these typedefs to reduce clutter.
3. Remove unnecessary macros: The program defines macros for `INF`, `PI`, `pb`, `pob`, `ff`, `ss`, `setbits`, `sz`, and `all`, but these macros are not used in the code. We can remove these macros to reduce clutter.
4. Remove unnecessary debugging code: The program includes debugging code, such as the `_print` functions and the `bug` macro, but these are not used in the code. We can remove this debugging code to reduce clutter.
5. Optimize the `g` function: The `g` function counts the number of digits in a number by repeatedly dividing it by 10. However, we can use logarithmic properties to optimize this function. The number of digits in a number `n` is equal to `floor(log10(n)) + 1`. We can modify the `g` function to use this formula instead of the loop.

Optimized Code:

```cpp
#include <iostream>
#include <cmath>
using namespace std;

int g(int n) {
  return floor(log10(n)) + 1;
}

void solve() {
  int a, b, c;
  cin >> a >> b >> c;
  int x = 1;
  while (g(x) != c) {
    x *= 2;
  }
  int ans1, ans2;
  int i = x;
  int j = x;
  while (g(i) != a) {
    i *= 2;
  }
  ans1 = i;
  while (g(j) != b) {
    j *= 5;
  }
  ans2 = j;
  cout << ans1 << " " << ans2 << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
  
  return 0;
}
```