Step 1: Remove unnecessary imports

The program includes the `<bits/stdc++.h>` header, which is not required. We can remove it.

Step 2: Remove unnecessary typedefs

The program defines typedefs for `ll`, `ull`, and `ld`, but they are not used. We can remove them.

Step 3: Remove unnecessary macros

The program defines macros for `fast`, `INF`, `pb`, `pob`, `ff`, `ss`, `PI`, `setbits`, `sz`, `all`, and `bug`, but they are not used. We can remove them.

Step 4: Remove unnecessary print functions

The program defines print functions for various types, but they are not used. We can remove them.

Step 5: Optimize the `g` function

The `g` function calculates the number of digits in a number `n`. It does this by repeatedly dividing `n` by 10 until `n` becomes 0. However, this can be optimized by using logarithms. The number of digits in `n` can be calculated as `floor(log10(n)) + 1`. We can modify the `g` function to use this formula.

Step 6: Simplify the solve function

The `solve` function can be simplified by removing unnecessary variables and combining the two while loops into one.

Step 7: Remove unnecessary code in `main`

The `main` function has an empty `#ifndef ONLINE_JUDGE` block, which is not used. We can remove it.

Here is the optimized program:

```cpp
#include <iostream>
#include <cmath>

int g(int n) {
  return floor(log10(n)) + 1;
}

void solve() {
  int a, b, c;
  std::cin >> a >> b >> c;
  int x = 1;
  while (g(x) != c) {
    x *= 2;
  }
  int i = x;
  while (g(i) != a) {
    i *= 2;
  }
  int j = x;
  while (g(j) != b) {
    j *= 5;
  }
  std::cout << i << " " << j << std::endl;
}

int main() {
  int t;
  std::cin >> t;
  while (t--) {
    solve();
  }
  return 0;
}
```