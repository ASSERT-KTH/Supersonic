#include <iostream>
#include <cstring>
#include <cmath>
using namespace std;

const int mxn = 1010;
ll multree[mxn][mxn][2], addtree[mxn][mxn][2];

ll yo(ll x) {
  return (x % 2);
}

ll query(ll x1, ll y1, ll x2, ll y2) {
  ll mul = 0, add = 0;
  for (ll i = x2; i > 0; i -= i & -i) {
    for (ll j = y2; j > 0; j -= j & -j) {
      mul ^= multree[i][j][0];
      add ^= addtree[i][j][0];
    }
  }
  for (ll i = x1 - 1; i > 0; i -= i & -i) {
    for (ll j = y2; j > 0; j -= j & -j) {
      mul ^= multree[i][j][0];
      add ^= addtree[i][j][0];
    }
  }
  for (ll i = x2; i > 0; i -= i & -i) {
    for (ll j = y1 - 1; j > 0; j -= j & -j) {
      mul ^= multree[i][j][0];
      add ^= addtree[i][j][0];
    }
  }
  for (ll i = x1 - 1; i > 0; i -= i & -i) {
    for (ll j = y1 - 1; j > 0; j -= j & -j) {
      mul ^= multree[i][j][0];
      add ^= addtree[i][j][0];
    }
  }
  return (mul * yo(x1 - 1) * yo(y1 - 1)) ^ (mul * yo(x1 - 1)) ^ (mul * yo(y1 - 1)) ^ add;
}

void update(ll x, ll y, ll mul, ll add) {
  for (ll i = x; i < mxn; i += i & -i) {
    for (ll j = y; j < mxn; j += j & -j) {
      multree[i][j][0] ^= mul;
      addtree[i][j][0] ^= add;
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  ll n, q, tt, x1, y1, x2, y2, val;
  cin >> n >> q;
  
  while (q--) {
    cin >> tt;
    if (tt == 2) {
      cin >> x1 >> y1 >> x2 >> y2 >> val;
      update(x1, y1, val, val * yo(y1 - 1));
      update(x1, y2 + 1, val, -val * yo(y2));
      update(x2 + 1, y1, val, -val * yo(y1 - 1));
      update(x2 + 1, y2 + 1, val, val * yo(y2));
    } else {
      cin >> x1 >> y1 >> x2 >> y2;
      cout << query(x1, y1, x2, y2) << "\n";
    }
  }
  
  return 0;
}