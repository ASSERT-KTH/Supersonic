The given program can be optimized in the following steps:

1. Remove unnecessary header file inclusion. The program only needs `iostream` header file, so remove `bits/stdc++.h` header file.

2. Remove unused macros. The program has some macros defined but they are not used. Remove the following macros: `pb`, `mp`, `pll`, `INF`, `PI`, `MOD`, `fir`, `sec`, `all`.

3. Remove unnecessary memory initialization. The array `sch` is initialized with zeros using `mem` macro, but it is not necessary because it will be filled with non-zero values later.

4. Use range-based for loop instead of regular for loop. The loop `for (i = 1; i <= m; i++)` can be simplified using range-based for loop since it only iterates over the elements of `a` vector.

5. Use `auto` keyword for type inference. Instead of explicitly specifying the type of variables, use `auto` keyword for type inference where possible.

6. Use a more efficient data structure. Instead of using a vector of vectors, use a vector of pairs to store the input values. This will reduce memory usage and improve cache efficiency.

7. Use `reserve` function to allocate memory for vectors. Since the size of the vectors is known in advance, use the `reserve` function to allocate memory for them. This will avoid unnecessary reallocation and improve performance.

8. Use `emplace_back` function instead of `push_back`. Instead of using `push_back` function to add elements to a vector, use `emplace_back` function to construct the elements in-place.

9. Use `std::ios_base::sync_with_stdio(false)` to improve input/output performance. By default, C++ synchronizes the C++ standard streams with the C standard streams, which can be a performance bottleneck. By calling `std::ios_base::sync_with_stdio(false)`, we can disable the synchronization and improve the input/output performance.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  using ll = long long;

  ll n, m;
  std::cin >> n >> m;

  std::vector<std::pair<ll, std::pair<ll, ll>>> a;
  a.reserve(m);

  std::vector<ll> sch(n + 1);

  for (ll i = 0; i < m; i++) {
    ll x, y, z;
    std::cin >> y >> x >> z;
    sch[x] = m + 1;
    a.emplace_back(z, std::make_pair(x, y));
  }

  std::sort(a.begin(), a.end());

  for (const auto& p : a) {
    ll cnt = p.first;
    for (ll j = p.second.second; j < p.second.first; j++) {
      if (!sch[j]) {
        cnt--;
        sch[j] = p.first;
        if (!cnt)
          break;
      }
    }
    if (cnt) {
      std::cout << -1;
      return 0;
    }
  }

  for (ll i = 1; i <= n; i++)
    std::cout << sch[i] << " ";

  return 0;
}
```