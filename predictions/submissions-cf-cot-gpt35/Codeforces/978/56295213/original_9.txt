To optimize the given program, we can make the following modifications:

1. Remove unnecessary header files: The program includes the `<bits/stdc++.h>` header file, which is not necessary. We can remove this line.

2. Remove unnecessary macros: The program defines several macros (`ll`, `pb`, `mp`, `pll`, `INF`, `PI`, `MOD`, `fir`, `sec`, `all`, `mem`, `IOS`) that are not used. We can remove these macro definitions.

3. Avoid using `vector<vector<ll>>`: The program uses a 2D vector `a` of size `m+1` and each row of `a` has 4 elements. This can be replaced with a simple 1D vector `a` of size `m+1` * 4. This will reduce the memory usage and improve cache locality.

4. Avoid using `sort` function: The program sorts the vector `a` using the `sort` function. However, we can optimize this by using a counting sort algorithm instead. Since the values in `a` are in a limited range, we can create a count array to count the occurrences of each value and then construct the sorted vector `a` in linear time.

5. Avoid unnecessary loop variables: The program uses the loop variable `i` multiple times, but we can reuse the same variable instead of creating a new one.

Here's the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n, m;
  cin >> n >> m;
  
  vector<int> a((m + 1) * 4, 0);
  vector<int> sch(n + 1, 0);

  for (int i = 1; i <= m; i++) {
    cin >> a[i * 4 + 1] >> a[i * 4] >> a[i * 4 + 2];
    sch[a[i * 4]] = m + 1;
    a[i * 4 + 3] = i;
  }

  // Counting sort
  vector<int> count(m + 1, 0);
  for (int i = 1; i <= m; i++) {
    count[a[i * 4]]++;
  }
  for (int i = 2; i <= m; i++) {
    count[i] += count[i - 1];
  }
  vector<int> sorted_a((m + 1) * 4);
  for (int i = m; i >= 1; i--) {
    int pos = count[a[i * 4]] - 1;
    sorted_a[pos * 4 + 1] = a[i * 4 + 1];
    sorted_a[pos * 4] = a[i * 4];
    sorted_a[pos * 4 + 2] = a[i * 4 + 2];
    sorted_a[pos * 4 + 3] = a[i * 4 + 3];
    count[a[i * 4]]--;
  }

  for (int i = 1; i <= m; i++) {
    int cnt = sorted_a[i * 4 + 2];
    for (int j = sorted_a[i * 4 + 1]; j < sorted_a[i * 4]; j++) {
      if (!sch[j]) {
        cnt--;
        sch[j] = sorted_a[i * 4 + 3];
        if (!cnt)
          break;
      }
    }
    if (cnt) {
      cout << -1;
      return 0;
    }
  }
  
  for (int i = 1; i <= n; i++)
    cout << sch[i] << " ";
}
```