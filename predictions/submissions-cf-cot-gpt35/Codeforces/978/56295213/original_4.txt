The given program can be optimized by eliminating unnecessary includes, macros, and using more efficient data structures.

Here are the optimization steps:

1. Remove unnecessary includes: The program includes the `<bits/stdc++.h>` header, which is not a standard C++ header and is considered bad practice. Instead, we can include only the necessary standard headers.

2. Remove unnecessary macros: The program defines several macros, such as `ll`, `pb`, `mp`, `pll`, `INF`, `PI`, `MOD`, `fir`, `sec`, `all`, and `mem`. These macros are not used in the program and can be safely removed.

3. Use `const` instead of `#define`: Instead of using macros to define constants like `INF` and `MOD`, we can use `const` variables. This is more type-safe and less error-prone.

4. Use `vector` instead of arrays: The program uses a fixed-size array `sch` to store values. Using a `vector` instead of an array can be more efficient in terms of memory usage and can simplify the code.

5. Use `emplace_back` instead of `push_back`: The program uses `push_back` to add elements to the `vector<vector<ll>> a`. Using `emplace_back` can avoid unnecessary copies and improve performance.

6. Use `reserve` to preallocate memory: The program creates the `vector<vector<ll>> a` with a size of `m + 1`. Since the size is known in advance, we can use `reserve` to preallocate memory, which can improve performance.

7. Use `auto` for iterators: Instead of explicitly specifying the iterator type, we can use `auto` to simplify the code and make it more readable.

8. Use `const` where appropriate: We can use `const` for variables that are not modified within the loop, such as `j` in the second loop.

9. Remove unnecessary variable initialization: The program initializes the `i` variable twice (once before the loop and once in the loop). We can remove the first initialization since it is redundant.

10. Use `cout` with `<<` operator instead of `printf`: The program uses `printf` to print the elements of `sch`. We can use `cout` with the `<<` operator, which is more idiomatic in C++.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n, m;
  cin >> n >> m;

  vector<vector<int>> a;
  a.reserve(m);
  vector<int> sch(n + 1, 0);

  for (int i = 0; i < m; i++) {
    int x, y, z;
    cin >> y >> x >> z;
    sch[x] = m + 1;
    a.emplace_back(vector<int>{x, y, z, i + 1});
  }

  sort(a.begin(), a.end());

  for (const auto& item : a) {
    int cnt = item[2];
    for (int j = item[1]; j < item[0]; j++) {
      if (!sch[j]) {
        cnt--;
        sch[j] = item[3];
        if (!cnt)
          break;
      }
    }
    if (cnt) {
      cout << -1;
      return 0;
    }
  }

  for (int i = 1; i <= n; i++)
    cout << sch[i] << " ";

  return 0;
}
```

This optimized program eliminates unnecessary includes, macros, and uses more efficient data structures. It also simplifies the code and improves performance.