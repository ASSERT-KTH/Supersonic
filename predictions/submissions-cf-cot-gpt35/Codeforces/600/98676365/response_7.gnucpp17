#include <iostream>
#include <vector>
using namespace std;

void read(int& x) {
  int f = 0;
  x = 0;
  char ch = getchar();
  for (; !isdigit(ch); ch = getchar())
    f |= (ch == '-');
  for (; isdigit(ch); ch = getchar())
    x = x * 10 + ch - '0';
  if (f)
    x = -x;
}

struct Seg {
  int l, r, v;
  long long num, sum;
};

void up(int id, Seg* t) {
  if (t[t[id].l].num > t[t[id].r].num) {
    t[id].num = t[t[id].l].num;
    t[id].v = t[t[id].l].v;
    t[id].sum = t[t[id].l].sum;
  } else if (t[t[id].l].num < t[t[id].r].num) {
    t[id].num = t[t[id].r].num;
    t[id].v = t[t[id].r].v;
    t[id].sum = t[t[id].r].sum;
  } else {
    t[id].num = t[t[id].l].num;
    t[id].v = t[t[id].l].v;
    t[id].sum = t[t[id].l].sum + t[t[id].r].sum;
  }
}

void modify(int& id, int l, int r, int p, Seg* t) {
  if (!id)
    id = ++t[0].num;
  if (l == r) {
    t[id].num += 1;
    t[id].sum = l;
    t[id].v = l;
    return;
  }
  int mid = l + r >> 1;
  if (p <= mid)
    modify(t[id].l, l, mid, p, t);
  else
    modify(t[id].r, mid + 1, r, p, t);
  up(id, t);
}

int merge(int a, int b, int l, int r, Seg* t) {
  if (!a)
    return b;
  if (!b)
    return a;
  if (l == r) {
    t[a].v = l;
    t[a].sum = l;
    t[a].num += t[b].num;
    return a;
  }
  int mid = l + r >> 1;
  t[a].l = merge(t[a].l, t[b].l, l, mid, t);
  t[a].r = merge(t[a].r, t[b].r, mid + 1, r, t);
  up(a, t);
  return a;
}

void dfs(int u, int fa, vector<vector<int>>& G, Seg* t, long long* ans, int* cor) {
  for (auto v : G[u]) {
    if (v == fa)
      continue;
    dfs(v, u, G, t, ans, cor);
    merge(u, v, 1, G.size() - 1, t);
  }
  modify(u, 1, G.size() - 1, cor[u], t);
  ans[u] = t[u].sum;
}

void solve() {
  int n;
  read(n);
  Seg* t = new Seg[(n + 1) << 5];
  long long* ans = new long long[n + 1];
  int* cor = new int[n + 1];
  vector<vector<int>> G(n + 1);
  
  for (int i = 1; i <= n; ++i)
    read(cor[i]);
  
  for (int i = 1, u, v; i < n; ++i) {
    read(u), read(v);
    G[u].push_back(v);
    G[v].push_back(u);
  }
  
  dfs(1, 0, G, t, ans, cor);
  
  for (int i = 1; i <= n; ++i) {
    printf("%lld%c", ans[i], " \n"[i == n]);
  }
  
  delete[] t;
  delete[] ans;
  delete[] cor;
}

int main() {
  solve();
  return 0;
}