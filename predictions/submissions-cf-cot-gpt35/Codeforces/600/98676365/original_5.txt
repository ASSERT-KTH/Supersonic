To optimize the given C/C++ program, we can make the following modifications:

1. Remove unnecessary includes: The program includes the `<bits/stdc++.h>` header file, which includes all other standard library header files. This can lead to unnecessary code bloat. Instead, we can include only the necessary header files, such as `<iostream>`, `<vector>`, and `<algorithm>`.

2. Optimize input reading: The `read()` function uses `getchar()` to read characters one by one and convert them to integers. This can be slow for large inputs. We can use a faster input reading method, such as `scanf()` or `cin`.

3. Use a more efficient data structure: The program uses an array of structures (`t[]`) to represent a segment tree. This can lead to excessive memory usage, especially for large values of `n`. We can use a dynamically allocated array or a vector instead to reduce memory usage.

4. Avoid unnecessary merges: The `merge()` function is called for each node in the depth-first search (DFS) traversal. However, not all merges are necessary. We can avoid merging the root node (`1`) with its parent, as it does not contribute to the final answer.

5. Optimize output printing: The program uses a loop with `printf()` to print the answer. This can be slow for large outputs. We can use a faster output printing method, such as `cout` or `puts()`.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const int maxn = 1e5 + 7;

struct Seg {
  int l, r, v;
  long long num, sum;
};

int n, tot;
int cor[maxn];
vector<int> G[maxn];
vector<Seg> t(maxn << 5);
vector<long long> ans(maxn);

void up(int id) {
  int lson = t[id].l;
  int rson = t[id].r;
  if (t[lson].num > t[rson].num) {
    t[id].num = t[lson].num;
    t[id].v = t[lson].v;
    t[id].sum = t[lson].sum;
  } else if (t[lson].num < t[rson].num) {
    t[id].num = t[rson].num;
    t[id].v = t[rson].v;
    t[id].sum = t[rson].sum;
  } else {
    t[id].num = t[lson].num;
    t[id].v = t[lson].v;
    t[id].sum = t[lson].sum + t[rson].sum;
  }
}

void modify(int& id, int l, int r, int p) {
  if (!id)
    id = ++tot;
  if (l == r) {
    t[id].num += 1;
    t[id].sum = l;
    t[id].v = l;
    return;
  }
  int mid = l + r >> 1;
  if (p <= mid)
    modify(t[id].l, l, mid, p);
  else
    modify(t[id].r, mid + 1, r, p);
  up(id);
}

int merge(int a, int b, int l, int r) {
  if (!a)
    return b;
  if (!b)
    return a;
  if (l == r) {
    t[a].v = l;
    t[a].sum = l;
    t[a].num += t[b].num;
    return a;
  }
  int mid = l + r >> 1;
  t[a].l = merge(t[a].l, t[b].l, l, mid);
  t[a].r = merge(t[a].r, t[b].r, mid + 1, r);
  up(a);
  return a;
}

void dfs(int u, int fa) {
  for (auto v : G[u]) {
    if (v == fa)
      continue;
    dfs(v, u);
    if (v != 1) // Avoid merging the root node with its parent
      merge(u, v, 1, n);
  }
  modify(u, 1, n, cor[u]);
  ans[u] = t[u].sum;
}

void solve() {
  cin >> n;
  tot = n;
  for (int i = 1; i <= n; ++i)
    cin >> cor[i];
  for (int i = 1, u, v; i < n; ++i) {
    cin >> u >> v;
    G[u].push_back(v);
    G[v].push_back(u);
  }
  dfs(1, 0);
  for (int i = 1; i <= n; ++i) {
    cout << ans[i] << " ";
  }
  cout << endl;
}

int main() {
  int _T = 1;
  while (_T--)
    solve();
  return 0;
}
```

These modifications should improve the runtime and memory usage of the program.