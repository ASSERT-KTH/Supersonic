#include <cstdio>
#include <vector>

const int maxn = 1e5 + 7;

struct Seg {
    int l, r, v;
    long long num, sum;
};

int n, tot, cor[maxn];
long long ans[maxn];
Seg t[maxn << 5];
int rt[maxn];
int G[maxn][maxn];

inline int left_child(int id) {
    return t[id].l;
}

inline int right_child(int id) {
    return t[id].r;
}

void up(int id) {
    if (t[left_child(id)].num > t[right_child(id)].num) {
        t[id].num = t[left_child(id)].num;
        t[id].v = t[left_child(id)].v;
        t[id].sum = t[left_child(id)].sum;
    } else if (t[left_child(id)].num < t[right_child(id)].num) {
        t[id].num = t[right_child(id)].num;
        t[id].v = t[right_child(id)].v;
        t[id].sum = t[right_child(id)].sum;
    } else {
        t[id].num = t[left_child(id)].num;
        t[id].v = t[left_child(id)].v;
        t[id].sum = t[left_child(id)].sum + t[right_child(id)].sum;
    }
}

void modify(int &id, int l, int r, int p) {
    if (!id) id = ++tot;
    if (l == r) {
        t[id].num += 1;
        t[id].sum = l;
        t[id].v = l;
        return;
    }
    int mid = l + r >> 1;
    if (p <= mid) modify(left_child(id), l, mid, p);
    else modify(right_child(id), mid + 1, r, p);
    up(id);
}

void merge(int a, int b, int l, int r) {
    if (!a) return;
    if (!b) return;
    if (l == r) {
        t[a].v = l;
        t[a].sum = l;
        t[a].num += t[b].num;
        return;
    }
    int mid = l + r >> 1;
    merge(left_child(a), left_child(b), l, mid);
    merge(right_child(a), right_child(b), mid + 1, r);
    up(a);
}

void dfs(int u, int fa) {
    for (int i = 0; i < G[u][0]; ++i) {
        int v = G[u][i + 1];
        if (v == fa) continue;
        dfs(v, u);
        merge(u, v, 1, n);
    }
    modify(u, 1, n, cor[u]);
    ans[u] = t[u].sum;
}

void solve() {
    scanf("%d", &n);
    tot = n;
    for (int i = 1; i <= n; ++i)
        scanf("%d", &cor[i]);
    for (int i = 1, u, v; i < n; ++i) {
        scanf("%d%d", &u, &v);
        G[u][++G[u][0]] = v;
        G[v][++G[v][0]] = u;
    }
    dfs(1, 0);
    for (int i = 1; i <= n; ++i)
        printf("%lld%c", ans[i], " \n"[i == n]);
}

int main() {
    int _T = 1;
    while (_T--)
        solve();
    return 0;
}