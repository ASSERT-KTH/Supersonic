#include <iostream>
#include <vector>
#include <stack>
using namespace std;

#define lson t[id].l
#define rson t[id].r

const int maxn = 1e5 + 7;
struct Seg {
  int l, r, v;
  long long num, sum;
} t[maxn << 5];
int n, tot, cor[maxn], rt[maxn];
long long ans[maxn];
vector<int> G[maxn];

void up(int id) {
  if (t[lson].num > t[rson].num) {
    t[id].num = t[lson].num;
    t[id].v = t[lson].v;
    t[id].sum = t[lson].sum;
  } else if (t[lson].num < t[rson].num) {
    t[id].num = t[rson].num;
    t[id].v = t[rson].v;
    t[id].sum = t[rson].sum;
  } else {
    t[id].num = t[lson].num;
    t[id].v = t[lson].v;
    t[id].sum = t[lson].sum + t[rson].sum;
  }
}

void modify(int &id, int l, int r, int p) {
  if (!id)
    id = ++tot;
  if (l == r) {
    t[id].num += 1;
    t[id].sum = l;
    t[id].v = l;
    return;
  }
  int mid = l + r >> 1;
  if (p <= mid)
    modify(lson, l, mid, p);
  else
    modify(rson, mid + 1, r, p);
  up(id);
}

int merge(int a, int b, int l, int r) {
  if (!a)
    return b;
  if (!b)
    return a;
  if (l == r) {
    t[a].v = l;
    t[a].sum = l;
    t[a].num += t[b].num;
    return a;
  }
  int mid = l + r >> 1;
  stack<pair<int, int>> stk;
  stk.push(make_pair(a, b));
  while (!stk.empty()) {
    int x = stk.top().first;
    int y = stk.top().second;
    stk.pop();
    if (l == r) {
      t[x].v = l;
      t[x].sum = l;
      t[x].num += t[y].num;
      continue;
    }
    int mid = l + r >> 1;
    stk.push(make_pair(t[x].l, t[y].l));
    stk.push(make_pair(t[x].r, t[y].r));
    up(x);
  }
  return a;
}

void dfs(int u, int fa) {
  stack<pair<int, int>> stk;
  stk.push(make_pair(u, fa));
  while (!stk.empty()) {
    int u = stk.top().first;
    int fa = stk.top().second;
    stk.pop();
    for (auto v : G[u]) {
      if (v == fa)
        continue;
      stk.push(make_pair(v, u));
      merge(u, v, 1, n);
    }
    modify(u, 1, n, cor[u]);
    ans[u] = t[u].sum;
  }
}

void solve() {
  cin >> n;
  tot = n;
  for (int i = 1; i <= n; ++i)
    cin >> cor[i];
  for (int i = 1, u, v; i < n; ++i) {
    cin >> u >> v;
    G[u].push_back(v);
    G[v].push_back(u);
  }
  dfs(1, 0);
  for (int i = 1; i <= n; ++i) {
    cout << ans[i] << (i == n ? "\n" : " ");
  }
}

int main() {
  int _T = 1;
  while (_T--)
    solve();
  return 0;
}