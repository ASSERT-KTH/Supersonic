#include <cstdio>
#include <vector>
using namespace std;

const int maxn = 1e5 + 7;
struct Seg {
  int l, r, v;
  int num, sum;
} t[maxn << 5];

void modify(int &id, int l, int r, int p) {
  if (!id)
    id = p;
  if (l == r) {
    t[id].num += 1;
    t[id].sum = l;
    t[id].v = l;
    return;
  }
  int mid = l + r >> 1;
  if (p <= mid)
    modify(t[id].l, l, mid, p);
  else
    modify(t[id].r, mid + 1, r, p);
  t[id].num = t[t[id].l].num + t[t[id].r].num;
  t[id].sum = t[t[id].l].sum + t[t[id].r].sum;
}

void dfs(int n, int cor[], int G[][2], int ans[]) {
  int stack[maxn], top = 0;
  stack[top++] = 1;

  while (top) {
    int u = stack[--top];
    int fa = G[u][1];

    if (fa != -1) {
      modify(fa, 1, n, u);
      t[fa].num += t[u].num;
      t[fa].sum += t[u].sum;
    }

    ans[u] = t[u].sum;

    int v = G[u][0];
    while (v != -1) {
      stack[top++] = v;
      v = G[v][1];
    }
  }
}

void solve() {
  int n;
  scanf("%d", &n);

  int cor[maxn];
  for (int i = 1; i <= n; ++i)
    scanf("%d", &cor[i]);

  int G[maxn][2];
  for (int i = 1; i <= n; ++i) {
    G[i][0] = -1;
    G[i][1] = -1;
  }

  for (int i = 1, u, v; i < n; ++i) {
    scanf("%d%d", &u, &v);
    G[u][0] = v;
    G[u][1] = G[v][0];
    G[v][0] = u;
    G[v][1] = G[u][0];
  }

  int ans[maxn];
  dfs(n, cor, G, ans);

  for (int i = 1; i <= n; ++i) {
    printf("%d%c", ans[i], " \n"[i == n]);
  }
}

int main() {
  int _T = 1;
  while (_T--)
    solve();
  return 0;
}