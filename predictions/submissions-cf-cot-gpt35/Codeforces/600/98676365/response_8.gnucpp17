#include <iostream>
#include <vector>
using namespace std;

const int maxn = 1e5 + 7;

struct Seg {
  int l, r, v;
  long long num, sum;
};

Seg t[maxn << 5];
int n, cor[maxn];
vector<int> G[maxn];

void up(int id) {
  Seg& leftChild = t[t[id].l];
  Seg& rightChild = t[t[id].r];

  if (leftChild.num > rightChild.num) {
    t[id].num = leftChild.num;
    t[id].v = leftChild.v;
    t[id].sum = leftChild.sum;
  } else if (leftChild.num < rightChild.num) {
    t[id].num = rightChild.num;
    t[id].v = rightChild.v;
    t[id].sum = rightChild.sum;
  } else {
    t[id].num = leftChild.num;
    t[id].v = leftChild.v;
    t[id].sum = leftChild.sum + rightChild.sum;
  }
}

void modify(int &id, int l, int r, int p) {
  if (!id)
    id = l + r >> 1;

  if (l == r) {
    t[id].num += 1;
    t[id].sum = l;
    t[id].v = l;
    return;
  }

  int mid = l + r >> 1;
  if (p <= mid)
    modify(t[id].l, l, mid, p);
  else
    modify(t[id].r, mid + 1, r, p);
  up(id);
}

int merge(int a, int b, int l, int r) {
  if (!a)
    return b;
  if (!b)
    return a;
  if (l == r) {
    t[a].num += t[b].num;
    return a;
  }
  int mid = l + r >> 1;
  t[a].l = merge(t[a].l, t[b].l, l, mid);
  t[a].r = merge(t[a].r, t[b].r, mid + 1, r);
  up(a);
  return a;
}

void dfs(int u, int fa) {
  for (auto v : G[u]) {
    if (v == fa)
      continue;
    dfs(v, u);
    merge(u, v, 1, n);
  }
  modify(u, 1, n, cor[u]);
  cout << t[u].sum << " ";
}

void solve() {
  cin >> n;

  for (int i = 1; i <= n; ++i)
    cin >> cor[i];

  for (int i = 1, u, v; i < n; ++i) {
    cin >> u >> v;
    G[u].push_back(v);
    G[v].push_back(u);
  }

  dfs(1, 0);
}

int main() {
  solve();
  return 0;
}