Step 1: Remove unnecessary includes and defines
- The program includes the `<bits/stdc++.h>` header, which includes a large number of standard library headers. This can slow down compilation and increase memory usage. We can replace this with the specific headers that are actually needed.
- The program defines several macros (`pb`, `mp`, `fi`, `se`, `lll`, `llf`, `lld`). These macros are not used in the program and can be removed.

Step 2: Optimize the `dfs1` function
- The `dfs1` function calculates the size of each subtree rooted at a node and the size of the largest subtree rooted at each node. This can be done in a single pass by calculating the size of each subtree recursively and updating the size of the largest subtree as we go.
- We can modify the function to return a pair of values: the size of the subtree rooted at a node and the size of the largest subtree rooted at that node. This way, we can calculate both values in a single pass and store them in the `sz` and `big` arrays.

Step 3: Optimize the `dfs2` function
- The `dfs2` function calculates the maximum frequency of each color in the subtree rooted at a node and the sum of the colors with the maximum frequency. This can be done in a single pass by using a map to store the frequencies of each color.
- We can modify the function to return a pair of values: the maximum frequency of a color in the subtree rooted at a node and the sum of the colors with the maximum frequency. This way, we can calculate both values in a single pass and store them in the `ans` array.

Step 4: Optimize the main function
- We can remove the unnecessary variables `i`, `j`, `x`, `y`.
- We can remove the unnecessary `temp` map and pass an empty map as a parameter to `dfs2`.
- We can replace the `for` loop that prints the `ans` array with a single `copy` function call.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <map>
using namespace std;

const int NR = 5e5 + 10;
vector<int> v[NR];
int n, sz[NR], big[NR];
int ans[NR], c[NR];

pair<int, int> dfs1(int nod, int prt) {
  sz[nod] = 1;
  int max_sz = 0;
  for (auto it : v[nod]) {
    if (it == prt)
      continue;
    auto sub = dfs1(it, nod);
    sz[nod] += sub.first;
    max_sz = max(max_sz, sub.first);
  }
  big[nod] = max(max_sz, n - sz[nod]);
  return {sz[nod], big[nod]};
}

pair<int, int> dfs2(int nod, int prt) {
  map<int, int> mapp;
  int max_freq = 0, sum_freq = 0;
  for (auto it : v[nod]) {
    if (it == prt)
      continue;
    auto sub = dfs2(it, nod);
    for (auto it2 : mapp) {
      mapp[it2.first] += sub.second;
      if (mapp[it2.first] == max_freq) {
        sum_freq += it2.first;
      }
      if (mapp[it2.first] > max_freq) {
        max_freq = mapp[it2.first];
        sum_freq = it2.first;
      }
    }
  }
  mapp[c[nod]]++;
  if (mapp[c[nod]] == max_freq) {
    sum_freq += c[nod];
  }
  if (mapp[c[nod]] > max_freq) {
    max_freq = mapp[c[nod]];
    sum_freq = c[nod];
  }
  ans[nod] = sum_freq;
  return {max_freq, sum_freq};
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  
  cin >> n;
  for (int i = 1; i <= n; ++i) {
    cin >> c[i];
  }
  for (int i = 1; i < n; ++i) {
    int x, y;
    cin >> x >> y;
    v[x].push_back(y);
    v[y].push_back(x);
  }
  dfs1(1, 0);
  dfs2(1, 0);
  copy(ans + 1, ans + n + 1, ostream_iterator<int>(cout, " "));
  cout << '\n';
  return 0;
}
```
