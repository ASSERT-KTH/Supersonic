#include <iostream>
#include <vector>
#include <map>
using namespace std;

const long long NR = 5e5 + 10;
vector<long long> v[NR];
long long n, sz[NR], big[NR];
long long ans[NR], c[NR];

void dfs1(long long nod, long long prt) {
  sz[nod] = 1;
  for (auto it : v[nod]) {
    if (it == prt)
      continue;
    dfs1(it, nod);
    sz[nod] += sz[it];
    big[nod] = sz[it];
  }
}

void dfs2(long long nod, long long prt, map<long long, long long> &mapp, long long &l_max) {
  map<long long, long long> temp;
  l_max = 0;
  long long sum = 0;
  for (auto it : v[nod]) {
    if (it == prt)
      continue;
    if (big[nod] == sz[it]) {
      dfs2(it, nod, mapp, l_max);
      sum = ans[it];
      break;
    }
  }
  mapp[c[nod]]++;
  if (mapp[c[nod]] == l_max) {
    sum += c[nod];
  }
  if (mapp[c[nod]] > l_max) {
    l_max = mapp[c[nod]];
    sum = c[nod];
  }
  for (auto it : v[nod]) {
    if (it == prt || big[nod] == sz[it])
      continue;
    dfs2(it, nod, temp, l_max);
    for (auto it2 : temp) {
      mapp[it2.first] += it2.second;
      long long mapp_value = mapp[it2.first];
      bool is_equal = mapp_value == l_max;
      bool is_greater = mapp_value > l_max;
      if (is_equal) {
        sum += it2.first;
      }
      if (is_greater) {
        l_max = mapp_value;
        sum = it2.first;
      }
    }
  }
  ans[nod] = sum;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  cin >> n;
  for (long long i = 1; i <= n; ++i) {
    cin >> c[i];
  }
  for (long long i = 1; i < n; ++i) {
    long long x, y;
    cin >> x >> y;
    v[x].push_back(y);
    v[y].push_back(x);
  }

  dfs1(1, 0);
  long long x;
  map<long long, long long> temp;
  dfs2(1, 0, temp, x);

  for (long long i = 1; i <= n; ++i)
    cout << ans[i] << ' ';
  cout << '\n';

  return 0;
}