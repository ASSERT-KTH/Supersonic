#include <iostream>
#include <vector>
#include <map>
using namespace std;

const int NR = 5e5 + 10;
vector<int> v[NR];
int n, sz[NR], big[NR];
int ans[NR], c[NR];

void dfs(int nod, int prt, map<int, int> &mapp, int &l_max) {
  sz[nod] = 1;
  big[nod] = 0;
  for (int it : v[nod]) {
    if (it == prt) continue;
    dfs(it, nod, mapp, l_max);
    sz[nod] += sz[it];
    big[nod] = max(big[nod], sz[it]);
  }

  map<int, int> temp;
  for (int it : v[nod]) {
    if (it == prt) continue;
    if (big[nod] == sz[it]) {
      dfs(it, nod, mapp, l_max);
      temp = mapp;
      break;
    }
  }

  mapp[c[nod]]++;
  if (mapp[c[nod]] == l_max) {
    ans[nod] += c[nod];
  }
  if (mapp[c[nod]] > l_max) {
    l_max = mapp[c[nod]];
    ans[nod] = c[nod];
  }

  for (int it : v[nod]) {
    if (it == prt || it == big[nod]) continue;
    map<int, int> temp2;
    dfs(it, nod, temp2, l_max);
    for (auto it2 : temp2) {
      mapp[it2.first] += it2.second;
      if (mapp[it2.first] == l_max) {
        ans[nod] += it2.first;
      }
      if (mapp[it2.first] > l_max) {
        l_max = mapp[it2.first];
        ans[nod] = it2.first;
      }
    }
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  scanf("%d", &n);
  for (int i = 1; i <= n; ++i) {
    scanf("%d", &c[i]);
  }
  for (int i = 1; i < n; ++i) {
    int x, y;
    scanf("%d %d", &x, &y);
    v[x].push_back(y);
    v[y].push_back(x);
  }

  map<int, int> temp;
  int l_max = 0;
  dfs(1, 0, temp, l_max);

  for (int i = 1; i <= n; ++i) {
    printf("%d ", ans[i]);
  }
  printf("\n");

  return 0;
}