#include <iostream>
#include <vector>
#include <map>
using namespace std;

const long long NR = 5e5 + 10;
vector<long long> v[NR];
long long n, sz[NR], big[NR];
long long ans[NR], c[NR];

void dfs1(long long nod, long long prt) {
  sz[nod] = 1;
  vector<long long> stack;
  stack.push_back(nod);
  while (!stack.empty()) {
    long long node = stack.back();
    stack.pop_back();
    for (auto it : v[node]) {
      if (it == prt)
        continue;
      sz[node] += sz[it];
      big[node] = max(big[node], sz[it]);
      stack.push_back(it);
    }
  }
}

void dfs2(long long nod, long long prt, map<long long, long long> &mapp, long long &l_max) {
  long long nod_boss = -1, l = 0, max_ = 0, sum = 0;
  vector<long long> stack;
  stack.push_back(nod);
  while (!stack.empty()) {
    long long node = stack.back();
    stack.pop_back();
    bool found = false;
    for (auto it : v[node]) {
      if (it == prt)
        continue;
      if (big[node] == sz[it]) {
        nod_boss = it;
        stack.push_back(it);
        found = true;
        break;
      }
    }
    if (found) {
      continue;
    }
    mapp[c[node]] = mapp[c[node]] + 1;
    if (mapp[c[node]] == max_) {
      sum += c[node];
    }
    if (mapp[c[node]] > max_) {
      max_ = mapp[c[node]];
      sum = c[node];
    }
    for (auto it : v[node]) {
      if (it == prt || it == nod_boss)
        continue;
      map<long long, long long> temp;
      stack.push_back(it);
      while (!stack.empty()) {
        long long child = stack.back();
        stack.pop_back();
        temp[c[child]] = temp[c[child]] + 1;
        if (temp[c[child]] == max_) {
          sum += c[child];
        }
        if (temp[c[child]] > max_) {
          max_ = temp[c[child]];
          sum = c[child];
        }
        for (auto child_it : v[child]) {
          if (child_it == node)
            continue;
          stack.push_back(child_it);
        }
      }
      for (auto it2 : temp) {
        mapp[it2.first] = mapp[it2.first] + it2.second;
        if (mapp[it2.first] == max_) {
          sum += it2.first;
        }
        if (mapp[it2.first] > max_) {
          max_ = mapp[it2.first];
          sum = it2.first;
        }
      }
    }
  }
  l_max = max_;
  ans[nod] = sum;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  map<long long, long long> temp;
  cin >> n;
  for (long long i = 1; i <= n; ++i) {
    cin >> c[i];
  }
  for (long long i = 1; i < n; ++i) {
    long long x, y;
    cin >> x >> y;
    v[x].push_back(y);
    v[y].push_back(x);
  }
  dfs1(1, 0);
  long long x;
  dfs2(1, 0, temp, x);
  for (long long i = 1; i <= n; ++i)
    cout << ans[i] << ' ';
  cout << '\n';
  return 0;
}