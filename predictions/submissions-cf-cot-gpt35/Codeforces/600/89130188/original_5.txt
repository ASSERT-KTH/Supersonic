To optimize the given program, we can make the following modifications:

1. Remove unnecessary includes: The program includes the entire `bits/stdc++.h` header file, which is not needed for this program. We can remove it.

2. Remove unnecessary defines: The program defines some macros like `pb`, `mp`, `fi`, `se`, `lll`, `llf`, `lld`, etc. These macros are not used in the program. We can remove them.

3. Use `vector` instead of `map` for `mapp` variable: The `mapp` variable is used as a map, but it is only used to count the occurrences of `c[nod]` values. We can use a `vector` instead of a `map` to store the counts. This will reduce the memory usage and improve performance.

4. Pass `mapp` by reference in `dfs2` function: The `mapp` variable is passed by value in the `dfs2` function, which creates a copy of the map for each recursive call. We can pass it by reference to avoid the unnecessary copying.

5. Pass `l` by reference in `dfs2` function: The `l` variable is passed by value in the `dfs2` function, but its value is modified inside the function. We can pass it by reference to reflect the changes outside the function.

6. Use `int` instead of `long long` for array sizes and loop variables: The program uses `long long` type for array sizes and loop variables (`n`, `m`, `i`, `j`). Since the maximum value for these variables is within the range of `int`, we can use `int` instead of `long long` to reduce memory usage.

Based on these optimizations, the optimized program is as follows:

```cpp
#include <iostream>
#include <vector>
#include <map>
using namespace std;

const int NR = 5e5 + 10;
vector<int> v[NR];
int n, sz[NR], big[NR];
int ans[NR], c[NR];

void dfs1(int nod, int prt) {
  sz[nod] = 1;
  for (auto it : v[nod]) {
    if (it == prt)
      continue;
    dfs1(it, nod);
    sz[nod] += sz[it];
    big[nod] = max(big[nod], sz[it]);
  }
}

void dfs2(int nod, int prt, vector<int>& mapp, int& l_max) {
  int nod_boss = -1, l = 0, max_ = 0, sum = 0;
  for (auto it : v[nod]) {
    if (it == prt)
      continue;
    if (big[nod] == sz[it]) {
      nod_boss = it;
      dfs2(it, nod, mapp, l);
      sum = ans[it];
      max_ = l;
      break;
    }
  }
  mapp[c[nod]] = mapp[c[nod]] + 1;
  if (mapp[c[nod]] == max_) {
    sum += c[nod];
  }
  if (mapp[c[nod]] > max_) {
    max_ = mapp[c[nod]];
    sum = c[nod];
  }
  for (auto it : v[nod]) {
    if (it == prt || it == nod_boss)
      continue;
    vector<int> temp;
    dfs2(it, nod, temp, l);
    for (auto it2 : temp) {
      mapp[it2] = mapp[it2] + 1;
      if (mapp[it2] == max_) {
        sum += it2;
      }
      if (mapp[it2] > max_) {
        max_ = mapp[it2];
        sum = it2;
      }
    }
  }
  l_max = max_;
  ans[nod] = sum;
}

int main() {
  int i, x, y;
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  cin >> n;
  for (i = 1; i <= n; ++i) {
    cin >> c[i];
  }
  for (i = 1; i < n; ++i) {
    cin >> x >> y;
    v[x].push_back(y);
    v[y].push_back(x);
  }
  vector<int> temp;
  dfs1(1, 0);
  dfs2(1, 0, temp, x);
  for (i = 1; i <= n; ++i)
    cout << ans[i] << ' ';
  cout << '\n';
  return 0;
}
```

This optimized program reduces memory usage by using a vector instead of a map for `mapp`, passes `mapp` and `l` by reference, and uses `int` instead of `long long` for array sizes and loop variables.