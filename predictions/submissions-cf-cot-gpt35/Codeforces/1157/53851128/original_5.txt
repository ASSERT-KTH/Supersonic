Explanation of the optimization steps:

1. Remove unnecessary includes: The program includes several unnecessary header files that are not used in the code. Removing these includes will reduce the compilation time and improve the overall performance.

2. Remove unnecessary macros: The program defines several macros that are not used in the code. Removing these macros will simplify the code and improve readability.

3. Use reserve() to allocate memory: The program uses vectors to store values, but it does not preallocate memory for these vectors. By using the reserve() function, we can allocate memory for the vectors in advance, reducing the number of reallocations and improving the performance.

4. Use emplace_back() instead of push_back(): The program uses push_back() to add elements to the vectors. However, emplace_back() should be used instead, as it constructs the element in-place, avoiding unnecessary copies or moves.

5. Use auto& instead of auto in range-based loops: The program uses auto in the range-based loops, which creates a copy of the element. By using auto&, we can avoid unnecessary copies and improve performance.

6. Use erase() instead of es(): The program uses a custom macro "es" to erase elements from the multiset. Instead, we can use the erase() function directly, which is more standard and improves code readability.

7. Use const reference in function parameters: The program passes parameters by value in some functions. By using const references instead, we can avoid unnecessary copies and improve performance.

8. Remove unused functions: The program defines several unused functions. Removing these functions will simplify the code and improve readability.

Here is the optimized program:

```c++
#include <iostream>
#include <vector>
#include <set>
#include <map>

typedef long long int ll;
using namespace std;

int main() {
  ll n;
  cin >> n;
  
  vector<ll> va;
  vector<ll> vb;
  va.reserve(n);
  vb.reserve(n);
  
  for (ll i = 0; i < n; ++i) {
    ll t;
    cin >> t;
    va.emplace_back(t);
  }
  
  for (ll i = 0; i < n; ++i) {
    ll t;
    cin >> t;
    vb.emplace_back(t);
  }
  
  multiset<ll> stb;
  for (ll i = 0; i < n; ++i) {
    stb.insert(vb[i] % n);
  }
  
  vector<ll> vc;
  vc.reserve(n);
  
  for (auto& i : va) {
    auto it = stb.lower_bound((n - i) % n);
    if (it != stb.end() && (*it + i) % n < (*stb.begin() + i) % n) {
      vc.emplace_back((*it + i) % n);
      stb.erase(it);
    } else {
      vc.emplace_back((*stb.begin() + i) % n);
      stb.erase(stb.begin());
    }
  }
  
  for (auto& i : vc) {
    cout << i << " ";
  }
  
  return 0;
}
```