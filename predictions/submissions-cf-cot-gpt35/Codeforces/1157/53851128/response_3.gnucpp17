#define __IceQuarze__
#ifdef __IceQuarze__
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#define rep(i, a, b) for (int i = a; i < b; ++i)
#define lgi(...) int __VA_ARGS__; gi(__VA_ARGS__)
#define vl vector<int>
#define msl multiset<int>
#define mpll map<int, int>
#define MOD (int)(1e9 + 7)
using namespace std;

template <typename T> void gi(T &value) { cin >> value; }
template <typename T, typename... Args> void gi(T &value, Args &... args) {
  cin >> value;
  gi(args...);
}

int main() {
  lgi(n);
  vl va, vb;
  rep(i, 0, n) {
    lgi(t);
    va.push_back(t);
  }
  rep(i, 0, n) {
    lgi(t);
    vb.push_back(t);
  }
  msl stb;
  rep(i, 0, n) { stb.insert(vb[i] % n); }
  vl vc;
  for (const auto& i : va) {
    auto it = stb.lower_bound((n - i) % n);
    if (it != stb.end() && (*it + i) % n < (*stb.begin() + i) % n) {
      vc.push_back((*it + i) % n);
      stb.erase(it);
    } else {
      vc.push_back((*stb.begin() + i) % n);
      stb.erase(stb.begin());
    }
  }
  for (const auto& i : vc) {
    cout << i << " ";
  }
  cout << endl;
  return 0;
}