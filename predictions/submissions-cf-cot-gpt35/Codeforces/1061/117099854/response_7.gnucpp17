#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int N = 1e6 + 15;
const int mod = 1000000007;

void solve() {
  int n;
  cin >> n;
  vector<long long int> dp(N);
  dp[0] = 1;
  for (int i = 1; i <= n; i++) {
    int num;
    cin >> num;
    vector<int> divs;
    for (int j = 1; j * j <= num; j++) {
      if (num % j == 0) {
        divs.push_back(j);
        if (j * j != num)
          divs.push_back(num / j);
      }
    }
    sort(divs.rbegin(), divs.rend());
    for (auto d : divs) {
      dp[d] += dp[d - 1];
      dp[d] %= mod;
    }
  }
  long long int ans = 0;
  long long int sum = 0;
  for (int i = 1; i <= n; i++) {
    sum += dp[i];
    sum %= mod;
    ans += sum;
    ans %= mod;
  }
  cout << ans;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int t = 1;
  while (t--) {
    solve();
  }
  return 0;
}