#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
template <typename T> using minpq = priority_queue<T, vector<T>, greater<T>>;
template <typename T> void make_unique(vector<T> &vec) {
  sort(vec.begin(), vec.end());
  vec.erase(unique(vec.begin(), vec.end()), vec.end());
}
void __print(int x) { cerr << x; }
void __print(long x) { cerr << x; }
void __print(long long x) { cerr << x; }
void __print(unsigned x) { cerr << x; }
void __print(unsigned long x) { cerr << x; }
void __print(unsigned long long x) { cerr << x; }
void __print(float x) { cerr << x; }
void __print(double x) { cerr << x; }
void __print(long double x) { cerr << x; }
void __print(char x) { cerr << '\'' << x << '\''; }
void __print(const char *x) { cerr << '\"' << x << '\"'; }
void __print(const string &x) { cerr << '\"' << x << '\"'; }
void __print(bool x) { cerr << (x ? "true" : "false"); }
template <typename T, typename V> void __print(const pair<T, V> &x) {
  cerr << '{';
  __print(x.first);
  cerr << ',';
  __print(x.second);
  cerr << '}';
}
template <typename T> void __print(const T &x) {
  int f = 0;
  cerr << '{';
  for (auto &i : x)
    cerr << (f++ ? "," : ""), __print(i);
  cerr << "}";
}
void _print() { cerr << "]\n"; }
template <typename T, typename... V> void _print(T t, V... v) {
  __print(t);
  if (sizeof...(v))
    cerr << ", ";
  _print(v...);
}
#ifndef ONLINE_JUDGE
#define debug(x...)                                                            \
  cerr << "[" << #x << "] = [";                                                \
  _print(x)
#else
#define debug(x...)
#endif
#define ll long long int
#define ull unsigned long long
#define precise(ans, digits) fixed << setprecision(digits) << ans
#define endl '\n'
#define ld long double
#define pi 3.141592653589793238
#define fo(i, n) for (long i = 1; i <= n; i++)
#define tol(s) transform(s.begin(), s.end(), s.begin(), ::tolower)
#define tou(s) transform(s.begin(), s.end(), s.begin(), ::toupper)
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mt make_tuple
#define lb lower_bound
#define ub upper_bound
#define mkp make_pair
#define tr(it, a) for (auto it = a.begin(); it != a.end(); it++)
#define rtr(it, a) for (auto it = a.rbegin(); it != a.rend(); it++)
#define gcd(a, b) __gcd(a, b)
#define pq priority_queue
#define fr first
#define sc second
#define sz(x) (long)x.size()
#define T                                                                      \
  ll t = 0;                                                                    \
  cin >> t;                                                                    \
  for (ll test = 0; test < t; test++)
#define rep(i, n) for (__typeof(n) i = 0; i < (n); i++)
#define MAX(a) (*max_element(all(a)))
#define MIN(a) (*min_element(all(a)))
#define bitcount(a) __builtin_popcountll(a)
#define printn(V)                                                              \
  for (auto X : V)                                                             \
    cout << X << " ";
#define prints(V)                                                              \
  for (auto X : V)                                                             \
    cout << X << endl;
#define OS(T)                                                                  \
  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>
#define printclock                                                             \
  cerr << "Time : "                                                            \
       << 1000 * (long double)clock() / (long double)CLOCKS_PER_SEC << "ms\n";
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<char> vc;
typedef vector<vc> vvc;
typedef vector<ll> vl;
typedef vector<pii> vpii;
typedef vector<pll> vpl;
typedef vector<vi> vvi;
typedef vector<vl> vvl;
typedef pair<ll, pll> ppl;
long long add(long long a, long long b, long long mod) {
  long long res = (a % mod + b % mod) % mod;
  if (res < 0)
    res += mod;
  return res;
}
long long mul(long long a, long long b, long long mod) {
  long long res = (a % mod * b % mod) % mod;
  if (res < 0)
    res += mod;
  return res;
}
long long power(long long base, long long exp, long long mod) {
  long long res = 1;
  base %= mod;
  while (exp) {
    if (exp & 1)
      res = (res * base) % mod;
    base = (base * base) % mod;
    exp /= 2;
  }
  return res % mod;
}
long long binpow(long long a, long long b) {
  long long res = 1;
  while (b > 0) {
    if (b & 1)
      res = (res * a);
    a = (a * a);
    b >>= 1;
  }
  return res;
}
bool is_prime(long long n) {
  if (n <= 1)
    return false;
  if (n <= 3)
    return true;
  if (n % 2 == 0 || n % 3 == 0)
    return false;
  for (ll i = 5; i * i <= n; i = i + 6) {
    if (n % i == 0 || n % (i + 2) == 0)
      return false;
  }
  return true;
}
ll lcm(ll a, ll b) {
  ll l = (a * b) / gcd(a, b);
  return l;
}
ll Ceil(ll a, ll b) { return (a / b + (a % b != 0)); }
long long inv(long long a, long long mod) { return power(a, mod - 2, mod); }
long long C(ll n, ll r) {
  if (n < r)
    return 0;
  if (n == r)
    return 1;
  if (r > n - r)
    r = n - r;
  long long ans = 1;
  ll i;
  for (i = 1; i <= r; i++) {
    ans *= n - r + i;
    ans /= i;
  }
  return ans;
}
bool ispalindrome(string s) {
  ll len = s.length();
  for (ll i = 0; i < len; i++) {
    if (s[i] != s[len - i - 1])
      return false;
  }
  return true;
}
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
struct custom_hash {
  static uint64_t splitmix64(uint64_t x) {
    x += 0x9e3779b97f4a7c15;
    x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
    x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
    return x ^ (x >> 31);
  }
  size_t operator()(uint64_t x) const {
    static const uint64_t FIXED_RANDOM =
        chrono::steady_clock::now().time_since_epoch().count();
    return splitmix64(x + FIXED_RANDOM);
  }
};
const long long inf = 2e18;
const long long M = 1000000007;
const long long MM = 998244353;
const ll N = 3e5 + 5;
vector<ll> Z(string s) {
  ll n = sz(s);
  vector<ll> z(n);
  for (ll i = 1, l = 0, r = 0; i < n; i++) {
    if (i <= r)
      z[i] = min(r - i + 1, z[i - l]);
    while (i + z[i] < n && s[z[i]] == s[z[i] + i]) {
      ++z[i];
    }
    if (i + z[i] - 1 > r) {
      l = i;
      r = i + z[i] - 1;
    }
  }
  return z;
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  string s;
  cin >> s;
  string p = "Just a legend";
  ll n = sz(s);
  vector<ll> z = Z(s);
  multiset<ll> ss;
  for (ll i = 0; i < n; i++)
    ss.insert(z[i]);
  ll ans = -1;
  for (ll i = n - 1; i >= 0; i--) {
    ss.erase(ss.find(z[i]));
    if (i + z[i] == n) {
      auto it = ss.lb(z[i]);
      if (it != ss.end() && *it >= z[i])
        ans = max(ans, z[i]);
    }
  }
  if (ans == -1)
    cout << p;
  else
    cout << s.substr(0, ans);
  printclock;
  return 0;
}
