The given program is written in a very inefficient way. It includes unnecessary header files, typedefs for basic data types, and excessive use of macros. Furthermore, the program uses a global array and map which are not required.

To optimize the program, we can follow these steps:

1. Remove unnecessary header files: The program includes `<bits/stdc++.h>` which is not required. We only need the necessary header files for the specific functions and data types used in the program.

2. Remove unnecessary typedefs: The program includes typedefs for basic data types like `bool`, `int`, `long`, etc. These typedefs are not required as they are already defined in the standard library.

3. Remove unnecessary macros: The program includes macros for common operations like `min`, `max`, `all`, etc. These macros can be replaced with their corresponding functions. Additionally, some macros like `case`, `go`, `Good_Bye`, etc. are not used in the program and can be removed.

4. Remove unnecessary global array and map: The program uses a global array `a` and map `mp` to store values. However, these variables are not required as they are only used within the `sum_of_divisors` function. We can modify the function to return the result instead of storing it in a global array and map.

5. Remove unused functions: The program includes several unused functions like `_pow`, `pow_mod`, `mod_inverse`, `factorial`, `is_prime`, `sieve_prime_generator`, `prime_factorization`, `total_divisors`, `dfs`, and `bfs`. These functions can be removed as they are not used in the program.

6. Modify the `sum_of_divisors` function: Instead of using nested loops to calculate the sum of divisors, we can use a more efficient algorithm. We can calculate the sum of divisors for each number `i` from 1 to 1e7 by iterating over its divisors and adding them to the sum. This can be done by iterating from 1 to the square root of `i` and checking if `i` is divisible by the current divisor. If it is, we add the divisor and its corresponding quotient to the sum. This optimization reduces the time complexity of the function from O(n^2) to O(n * sqrt(n)).

7. Modify the `case_i` function: Instead of checking if `mp[c]` is non-zero to determine if a value exists, we can use the `find` function of the map to check if `c` exists as a key in the map. This optimization reduces the time complexity of the function from O(n) to O(log(n)).

After applying these optimizations, the optimized program will look like this:

```cpp
#include <iostream>
#include <vector>
#include <map>
#include <cmath>
using namespace std;

void sum_of_divisors(map<int, int>& mp) {
  for (int i = 1; i <= 1e7; i++) {
    for (int j = 1; j * j <= i; j++) {
      if (i % j == 0) {
        mp[i] += j;
        if (i / j != j) {
          mp[i] += i / j;
        }
      }
    }
  }
}

void case_i(const map<int, int>& mp) {
  int c;
  cin >> c;
  auto it = mp.find(c);
  if (it != mp.end()) {
    cout << it->second << '\n';
  } else {
    cout << -1 << '\n';
  }
}

int main() {
  map<int, int> mp;
  sum_of_divisors(mp);
  
  int _;
  cin >> _;
  while (_--) {
    case_i(mp);
  }

  return 0;
}
```

This optimized program removes unnecessary code, uses more efficient algorithms, and improves the overall readability and maintainability of the code.