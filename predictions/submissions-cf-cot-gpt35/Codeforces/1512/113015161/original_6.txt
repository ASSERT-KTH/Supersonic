The given program has a lot of unnecessary code and unused typedefs, which can be removed to improve readability and reduce memory usage. Additionally, the program can be optimized by removing unnecessary loops and using more efficient data structures.

Here are the optimization steps:
1. Remove unnecessary typedefs and using statements.
2. Remove unused macros.
3. Remove unnecessary includes.
4. Remove unused variables and parameters.
5. Remove unnecessary loops.
6. Replace the array `a` with a vector.
7. Replace the map `mp` with an unordered_map.
8. Remove unnecessary functions.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <cmath>
using namespace std;

const int MAX_N = 1e7 + 1;

vector<int> a(MAX_N);
unordered_map<int, int> mp;

void sum_of_divisors() {
  for (int i = 1; i < MAX_N; i++) {
    for (int j = i; j < MAX_N; j += i) {
      a[j] += i;
    }
  }
  for (int i = MAX_N - 1; i >= 0; i--) {
    if (a[i] < MAX_N) {
      mp[a[i]] = i;
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  sum_of_divisors();

  int t;
  cin >> t;
  while (t--) {
    int c;
    cin >> c;
    if (mp.count(c)) {
      cout << mp[c] << '\n';
    } else {
      cout << -1 << '\n';
    }
  }

  return 0;
}
```

The optimized program removes unnecessary code and uses more efficient data structures. It also simplifies the program logic and improves readability.