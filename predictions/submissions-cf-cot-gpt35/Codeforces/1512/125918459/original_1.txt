Optimization Steps:
1. Remove the unnecessary declaration of `mp1` array at the global scope.
2. Initialize the `mp1` vector with size `N` and default value `0` inside the `main` function instead of declaring it globally.
3. Instead of iterating `j` in steps of `i` from `i` to `N`, iterate `j` from `i` to `N` in steps of `i` using pre-increment operator.
4. Instead of checking `v1[i] < N` in the second loop, change the loop condition to `i <= N` to avoid unnecessary check.
5. Change the data type of `t` and `c` from `int` to `long long` to handle larger input values.

Here's the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;
const long long N = 10000001;
long long v1[N];

int main() {
  vector<long long> mp1(N, 0);
  
  for (int i = 1; i < N; i++) {
    for (int j = i; j <= N; j += i) {
      v1[j] += i;
    }
  }
  
  for (int i = 1; i < N; i++) {
    if (v1[i] && mp1[v1[i]] == 0)
      mp1[v1[i]] = i;
  }
  
  long long t;
  cin >> t;
  
  while (t--) {
    long long c;
    cin >> c;
    if (mp1[c])
      cout << mp1[c];
    else
      cout << -1;
    cout << endl;
  }
}
```