To optimize the given program, we can make the following modifications:

1. Remove the unnecessary `using namespace std;` statement and replace it with `std::` prefix for the standard library components.

2. Replace the constant `N` with `constexpr` to allow for compile-time evaluation and optimization.

3. Remove the unused `mp1` array declaration at the beginning of the program.

4. Change the type of `v1` array from `long long` to `int` since the maximum value it can hold is `N` which is within the range of `int`.

5. Instead of using the `vector` constructor to initialize `mp1` with zeros, we can use the `std::fill` function to fill it with zeros.

6. In the second loop, we can optimize the condition `v1[i] < N && mp1[v1[i]] == 0` by checking `v1[i] < N` first and then accessing `mp1[v1[i]]` only if the condition is true.

7. Instead of using `std::endl` to end each line, we can use the newline character `\n` for better performance.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

constexpr int N = 10000001;

int main() {
  std::vector<int> v1(N, 0);
  std::vector<int> mp1(N, 0);

  for (int i = 1; i < N; i++) {
    for (int j = i; j < N; j += i) {
      v1[j] += i;
    }
  }

  for (int i = 1; i < N; i++) {
    if (v1[i] < N) {
      if (mp1[v1[i]] == 0) {
        mp1[v1[i]] = i;
      }
    }
  }

  int t;
  std::cin >> t;

  while (t--) {
    int c;
    std::cin >> c;

    if (mp1[c]) {
      std::cout << mp1[c];
    } else {
      std::cout << -1;
    }

    std::cout << '\n';
  }

  return 0;
}
```