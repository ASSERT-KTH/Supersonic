Step 1: Remove unnecessary vector initialization

The program initializes a vector `mp1` with zeros using the constructor `vector<long long> mp1(N, 0);`. However, this initialization is not necessary because later in the program, the elements of `mp1` are assigned values using the statement `mp1[v1[i]] = i;`. Therefore, we can remove the vector initialization to improve memory usage.

Step 2: Optimize the nested loop

The nested loop `for (int j = i; j < N; j += i)` can be optimized by starting `j` from `i` instead of `1`. This is because the elements of `v1` before `i` have already been computed in previous iterations. With this change, we can reduce the number of iterations in the nested loop and improve the running time.

Step 3: Remove unnecessary check in the second loop

In the second loop, the program checks if `v1[i] < N` before accessing `mp1[v1[i]]`. However, `v1[i]` is guaranteed to be less than `N` because `i` iterates from `1` to `N-1`. Therefore, the check is unnecessary and can be removed to improve the running time.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const long long N = 10000001;
long long v1[N];
long long mp1[N];

int main() {
  for (int i = 1; i < N; i++) {
    for (int j = i; j < N; j += i) {
      v1[j] += i;
    }
  }
  
  for (int i = 1; i < N; i++) {
    mp1[v1[i]] = i;
  }
  
  int t;
  cin >> t;
  
  while (t--) {
    int c;
    cin >> c;
    
    if (mp1[c])
      cout << mp1[c];
    else
      cout << -1;
    
    cout << endl;
  }
}
```