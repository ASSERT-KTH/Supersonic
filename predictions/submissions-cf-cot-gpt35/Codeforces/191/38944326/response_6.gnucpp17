#include <cstdio>
#include <vector>
#include <unordered_map>
using namespace std;
const int N = 100001;
int par[N], siz[N], dep[N], top[N];
vector<int> edg[N];
int ans[N - 1];
void dfs(int u) {
  siz[u] = 1;
  for (int v : edg[u]) {
    if (v == par[u])
      continue;
    par[v] = u;
    dep[v] = dep[u] + 1;
    dfs(v);
    siz[u] += siz[v];
  }
}
void dfs2(int u) {
  for (int v : edg[u]) {
    if (v == par[u])
      continue;
    top[v] = (siz[v] > siz[u] - siz[v]) ? top[v] = v : top[u];
    dfs2(v);
  }
}
void path(int u, int v, int* dif) {
  while (top[u] != top[v]) {
    if (dep[top[u]] < dep[top[v]])
      swap(u, v);
    dif[top[u]]++;
    dif[u]--;
    u = par[top[u]];
  }
  if (dep[u] > dep[v])
    swap(u, v);
  dif[u]++;
  dif[v]--;
}
void dfs3(int u, int cnt, int* dif) {
  for (int v : edg[u]) {
    if (v == par[u])
      continue;
    dfs3(v, cnt + dif[u], dif);
  }
  if (u != 0)
    ans[u] += cnt + dif[u];
}
int main() {
  int n, k, u, v;
  scanf("%d\n", &n);
  for (int i = 0; i < n; i++)
    edg[i] = vector<int>();
  for (int i = 0; i < n - 1; i++) {
    scanf("%d%d", &u, &v);
    u--;
    v--;
    if (u > v)
      swap(u, v);
    edg[u].push_back(v);
    edg[v].push_back(u);
  }
  par[0] = 0;
  dep[0] = 0;
  dfs(0);
  top[0] = 0;
  dfs2(0);
  int dif[N] = {0};
  scanf("%d\n", &k);
  while (k--) {
    scanf("%d%d", &u, &v);
    u--;
    v--;
    path(u, v, dif);
  }
  dfs3(0, 0, dif);
  printf("%d", ans[0]);
  for (int i = 1; i < n - 1; i++)
    printf(" %d", ans[i]);
  printf("\n");
}