#include <cstdio>
#include <unordered_map>
#include <vector>
using namespace std;
const int N = 100001;
int par[N], hev[N], siz[N], dep[N], top[N], dif[N];
vector<int> edg[N];
vector<vector<int>> ans;
void dfs(int u, int &cnt) {
  siz[u] = 1;
  hev[u] = -1;
  for (int v : edg[u]) {
    if (v == par[u])
      continue;
    par[v] = u;
    dep[v] = dep[u] + 1;
    dfs(v, cnt);
    siz[u] += siz[v];
    if (hev[u] == -1 || siz[v] > siz[hev[u]])
      hev[u] = v;
    if (v == hev[u])
      ans[u][v] += cnt + dif[u];
    else
      ans[u][v] += ans[v][u];
  }
  cnt += dif[u];
}
void dfs2(int u) {
  for (int v : edg[u]) {
    if (v == par[u])
      continue;
    if (v == hev[u])
      top[v] = top[u];
    else
      top[v] = v;
    dfs2(v);
  }
}
void path(int u, int v) {
  while (top[u] != top[v]) {
    if (dep[top[u]] > dep[top[v]])
      swap(u, v);
    ans[top[v]][v]++;
    ans[top[v]][par[top[v]]]--;
    v = par[top[v]];
  }
  if (dep[u] > dep[v])
    swap(u, v);
  ans[u][v]++;
  ans[u][par[u]]--;
}
int main() {
  int n, k, u, v;
  scanf("%d\n", &n);
  ans.resize(n, vector<int>(n, 0));
  for (int i = 0; i < n - 1; i++) {
    scanf("%d%d", &u, &v);
    u--;
    v--;
    if (u > v)
      swap(u, v);
    edg[u].push_back(v);
    edg[v].push_back(u);
  }
  par[0] = 0;
  dep[0] = 0;
  dfs(0, dif[0]);
  top[0] = 0;
  dfs2(0);
  scanf("%d\n", &k);
  while (k--) {
    scanf("%d%d", &u, &v);
    u--;
    v--;
    path(u, v);
  }
  printf("%d", ans[0][1]);
  for (int i = 1; i < n - 1; i++)
    printf(" %d", ans[i][i + 1]);
  printf("\n");
}