#include <iostream>
#include <vector>
#include <utility>
#include <fstream>
using namespace std;

const int NMax = 1e7 + 5;

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);

  ifstream in("bellmanford.in");
  ofstream out("bellmanford.out");

  int N, M;
  in >> N >> M;
  vector<vector<int>> heightsOfBlock(N + 1);
  vector<vector<ll>> costsOfBlock(N + 1);
  heightsOfBlock.reserve(N + 1);
  costsOfBlock.reserve(N + 1);
  for (int i = 1; i <= N; ++i) {
    int K;
    in >> K;
    heightsOfBlock[i].reserve(K);
    costsOfBlock[i].reserve(K);
    for (int j = 1; j <= K; ++j) {
      int val;
      in >> val;
      heightsOfBlock[i].emplace_back(val);
    }
    for (int j = 1; j <= K; ++j) {
      int val;
      in >> val;
      costsOfBlock[i].emplace_back(val);
    }
  }

  int Q, curr = 0;
  in >> Q;
  vector<int> height(M + 1);
  vector<ll> cost(M + 1);
  for (int i = 1; i <= Q; ++i) {
    int id, mult;
    in >> id >> mult;
    const auto& hBlock = heightsOfBlock[id];
    const auto& cBlock = costsOfBlock[id];
    for (int j = 0; j < (int)hBlock.size(); ++j) {
      height[++curr] = hBlock[j];
      cost[curr] = 1LL * mult * cBlock[j];
    }
  }

  vector<pair<int, ll>> stackPush;
  stackPush.reserve(M + 1);
  vector<ll> dp(M + 1);
  for (int i = 1; i <= M; ++i) {
    ll minLeft = dp[i - 1];
    while (!stackPush.empty() && i - height[i] + 1 <= stackPush.back().first) {
      minLeft = min(minLeft, stackPush.back().second);
      stackPush.pop_back();
    }
    dp[i] = minLeft + cost[i];
    ll minLeftHere = minLeft;
    if (!stackPush.empty()) {
      ll dpPlusCost = stackPush.back().second;
      dp[i] = min(dp[i], dpPlusCost);
    }
    ll dpPlusCost = dp[i - 1] + cost[i];
    if (!stackPush.empty()) {
      dpPlusCost = min(dpPlusCost, stackPush.back().second);
    }
    stackPush.emplace_back(i, dpPlusCost);
  }

  out << dp[M] << '\n';
  return 0;
}