#include <iostream>
#include <vector>
#include <utility>
#include <fstream>
using namespace std;

#ifdef INFOARENA
ifstream in("bellmanford.in");
ofstream out("bellmanford.out");
#else
#define in cin
#define out cout
#endif

using ll = long long;
using pll = pair<ll, ll>;

const int NMax = 1e7 + 5;

int main()
{
    int N, M;
    in >> N >> M;

    int heightsOfBlock[NMax];
    ll costsOfBlock[NMax];

    for (int i = 1; i <= N; ++i)
    {
        int K;
        in >> K;
        for (int j = 1; j <= K; ++j)
        {
            in >> heightsOfBlock[j];
        }
        for (int j = 1; j <= K; ++j)
        {
            in >> costsOfBlock[j];
        }
    }

    int Q, curr = 1;
    in >> Q;
    for (int i = 1; i <= Q; ++i)
    {
        int id, mult;
        in >> id >> mult;
        for (int j = 1; j <= N; ++j)
        {
            int h = heightsOfBlock[j], c = costsOfBlock[j];
            height[curr] = h;
            cost[curr] = 1LL * mult * c;
            curr++;
        }
    }

    vector<pll> stackPushLeft, stackPushRight;
    ll dp[NMax] = {0};

    for (int i = 1; i <= M; ++i)
    {
        ll minLeft = dp[i - 1];
        while (stackPushLeft.size() && i - height[i] + 1 <= stackPushLeft.back().first)
        {
            minLeft = min(minLeft, stackPushLeft.back().second);
            stackPushLeft.pop_back();
        }
        dp[i] = minLeft + cost[i];

        ll valHere = dp[i - 1];
        minLeft = min(minLeft, valHere);
        stackPushLeft.push_back({i, minLeft});

        int idx = -1;
        while (stackPushRight.size() && (idx = stackPushRight.back().first) && idx + height[idx] - 1 < i)
        {
            stackPushRight.pop_back();
        }
        if (stackPushRight.size())
        {
            ll dpPlusCost = stackPushRight.back().second;
            dp[i] = min(dp[i], dpPlusCost);
        }
        ll dpPlusCost = dp[i - 1] + cost[i];
        if (stackPushRight.size())
        {
            dpPlusCost = min(dpPlusCost, stackPushRight.back().second);
        }
        stackPushRight.push_back({i, dpPlusCost});
    }

    out << dp[M] << '\n';
    return 0;
}