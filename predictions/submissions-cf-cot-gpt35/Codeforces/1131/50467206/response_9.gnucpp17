#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
using namespace std;

const int NMax = 1e7 + 5;
int height[NMax];
long long cost[NMax];
long long dp[NMax];

int main() {
    ifstream in("bellmanford.in");
    ofstream out("bellmanford.out");

    int N, M;
    in >> N >> M;

    int totalHeight = 0;
    int totalCost = 0;

    for (int i = 1; i <= N; ++i) {
        int K;
        in >> K;

        for (int j = 0; j < K; ++j) {
            in >> height[totalHeight + j];
        }

        for (int j = 0; j < K; ++j) {
            in >> cost[totalCost + j];
        }

        totalHeight += K;
        totalCost += K;
    }

    int Q;
    in >> Q;
    int curr = 0;
    for (int i = 1; i <= Q; ++i) {
        int id, mult;
        in >> id >> mult;

        for (int j = 0; j < height[id]; ++j) {
            height[totalHeight + curr] = height[id];
            cost[totalCost + curr] = mult * cost[id];
            totalHeight++;
            totalCost++;
            curr++;
        }
    }

    long long minLeft[NMax] = {0};
    long long minRight[NMax] = {0};

    for (int i = 1; i <= M; ++i) {
        long long minLeftHere = dp[i - 1];
        while (i - height[i] + 1 <= i) {
            minLeftHere = min(minLeftHere, minLeft[i - height[i]]);
            i--;
        }

        dp[i] = minLeftHere + cost[i];

        long long minLeftVal = minLeftHere;
        minLeft[i] = min(minLeftVal, dp[i - 1]);

        int idx = i;
        while (idx + height[idx] - 1 < i && idx > 0) {
            idx--;
        }

        if (idx > 0) {
            dp[i] = min(dp[i], minRight[idx]);
        }

        long long dpPlusCost = dp[i - 1] + cost[i];

        if (idx > 0) {
            dpPlusCost = min(dpPlusCost, minRight[idx]);
        }

        minRight[i] = dpPlusCost;
    }

    out << dp[M] << '\n';

    return 0;
}