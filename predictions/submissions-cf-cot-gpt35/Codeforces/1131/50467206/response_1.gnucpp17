#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
using namespace std;

using ll = long long;

int main() {
  int N, M;
  cin >> N >> M;
  vector<vector<int>> heightsOfBlock(N + 1);
  vector<vector<ll>> costsOfBlock(N + 1);
  
  for (int i = 1; i <= N; ++i) {
    int K;
    cin >> K;
    heightsOfBlock[i].reserve(K);
    costsOfBlock[i].reserve(K);
    
    for (int j = 0; j < K; ++j) {
      int val;
      cin >> val;
      heightsOfBlock[i].emplace_back(val);
    }
    for (int j = 0; j < K; ++j) {
      int val;
      cin >> val;
      costsOfBlock[i].emplace_back(val);
    }
  }
  
  int Q, curr = 0;
  cin >> Q;
  
  for (int i = 1; i <= Q; ++i) {
    int id, mult;
    cin >> id >> mult;
    
    for (int j = 0; j < heightsOfBlock[id].size(); ++j) {
      int h = heightsOfBlock[id][j], c = costsOfBlock[id][j];
      ++curr;
      height[curr] = h;
      cost[curr] = 1LL * mult * c;
    }
  }
  
  vector<ll> dp(M + 1);
  stack<pair<int, ll>> stackPushLeft, stackPushRight;
  
  for (int i = 1; i <= M; ++i) {
    ll minLeft = dp[i - 1];
    
    while (!stackPushLeft.empty() && i - height[i] + 1 <= stackPushLeft.top().first) {
      minLeft = min(minLeft, stackPushLeft.top().second);
      stackPushLeft.pop();
    }
    
    dp[i] = minLeft + cost[i];
    ll valHere = dp[i - 1];
    minLeft = min(minLeft, valHere);
    stackPushLeft.push({i, minLeft});
    
    int idx = -1;
    
    while (!stackPushRight.empty() && (idx = stackPushRight.top().first) && idx + height[idx] - 1 < i) {
      stackPushRight.pop();
    }
    
    if (!stackPushRight.empty()) {
      ll dpPlusCost = stackPushRight.top().second;
      dp[i] = min(dp[i], dpPlusCost);
    }
    
    ll dpPlusCost = dp[i - 1] + cost[i];
    
    if (!stackPushRight.empty()) {
      dpPlusCost = min(dpPlusCost, stackPushRight.top().second);
    }
    
    stackPushRight.emplace(i, dpPlusCost);
  }
  
  cout << dp[M] << '\n';
  
  return 0;
}