#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

using ll = long long;

const int NMax = 1e7 + 5;

int height[NMax];
ll cost[NMax], dp[NMax];

int main() {
  int N, M;
  cin >> N >> M;
  
  vector<pair<int, ll>> blocks;
  
  for (int i = 1; i <= N; ++i) {
    int K;
    cin >> K;
    
    for (int j = 1; j <= K; ++j) {
      int val;
      cin >> val;
      int h = val;
      
      cin >> val;
      ll c = val;
      
      blocks.push_back({h, c});
    }
  }
  
  int Q, curr = 0;
  cin >> Q;
  
  for (int i = 1; i <= Q; ++i) {
    int id, mult;
    cin >> id >> mult;
    
    for (const auto& block : blocks) {
      int h = block.first;
      ll c = block.second;
      
      height[++curr] = h;
      cost[curr] = 1LL * mult * c;
    }
  }
  
  vector<pair<int, ll>> stackPushLeft, stackPushRight;
  
  for (int i = 1; i <= M; ++i) {
    ll minLeft = dp[i - 1];
    
    while (!stackPushLeft.empty() && i - height[i] + 1 <= stackPushLeft.back().first) {
      minLeft = min(minLeft, stackPushLeft.back().second);
      stackPushLeft.pop_back();
    }
    
    dp[i] = minLeft + cost[i];
    
    ll valHere = dp[i - 1];
    minLeft = min(minLeft, valHere);
    stackPushLeft.push_back({i, minLeft});
    
    int idx = -1;
    
    while (!stackPushRight.empty() &&
           ((idx = stackPushRight.back().first) || true) &&
           idx + height[idx] - 1 < i) {
      stackPushRight.pop_back();
    }
    
    if (!stackPushRight.empty()) {
      ll dpPlusCost = stackPushRight.back().second;
      dp[i] = min(dp[i], dpPlusCost);
    }
    
    ll dpPlusCost = dp[i - 1] + cost[i];
    
    if (!stackPushRight.empty()) {
      dpPlusCost = min(dpPlusCost, stackPushRight.back().second);
    }
    
    stackPushRight.push_back({i, dpPlusCost});
  }
  
  cout << dp[M] << '\n';
  
  return 0;
}