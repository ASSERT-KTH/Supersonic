#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

const int N = 1e5 + 70;
const long long M = 1e9 + 7;

long long gcd(long long a, long long b) {
  return b ? gcd(b, a % b) : a;
}

long long lcm(long long a, long long b) {
  return (a / gcd(a, b)) * b;
}

bool check(long long x, int n, long long m, long long w, std::vector<long long>& h) {
  std::vector<long long> s(n, INT_MAX);
  long long cur = 0, mm = 0;
  for (int i = 0; i < n; ++i) {
    if (i - w >= 0)
      cur -= s[i - w];
    if (h[i] >= x)
      continue;
    if (h[i] + cur < x) {
      s[i] = x - h[i] - cur;
      cur += s[i];
      mm += s[i];
    }
    if (mm > m)
      return false;
  }
  return true;
}

void solve() {
  int n;
  long long m, w;
  std::cin >> n >> m >> w;
  long long mn = 1e18;
  std::vector<long long> h(n);
  for (int i = 0; i < n; ++i) {
    std::cin >> h[i];
    mn = std::min(mn, h[i]);
  }
  long long l = 0, r = mn + m, ans = 0;
  while (l <= r) {
    long long md = l + ((r - l) >> 1);
    if (check(md, n, m, w, h)) {
      ans = std::max(ans, md);
      l = md + 1;
    } else {
      r = md - 1;
    }
  }
  std::cout << ans << '\n';
}

int main() {
  solve();
}