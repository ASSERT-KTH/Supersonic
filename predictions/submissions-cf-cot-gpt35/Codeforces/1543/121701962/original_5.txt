Step 1: Remove unnecessary header inclusion.
The code includes the header file `<bits/stdc++.h>`, which includes a large number of header files. This can increase the compilation time and also the memory usage. Since the code does not use any specific features from these header files, we can remove this line.

Step 2: Avoid using macros for common operations.
The code defines macros for common operations like `vector`, `push_back`, `pop_back`, etc. This can make the code less readable and also cause issues when used in certain contexts. We can replace these macros with their actual function calls.

Step 3: Remove unused variables and functions.
The code defines a `gcd` function but it is not used anywhere in the code. We can remove this function to improve the code readability.

Step 4: Avoid unnecessary variable initialization.
The variable `x` is initialized with the value `false`, but it is immediately overwritten based on a condition. We can remove this initialization and directly assign the value based on the condition.

Step 5: Optimize the calculation of the result.
The code calculates the sum of all elements in the array and then performs multiple conditional checks to calculate the result. We can optimize this calculation by performing a single calculation to determine the result. We can calculate the remainder of the sum divided by `n` and use it to calculate the result.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    
    int t;
    cin >> t;
    
    while (t--) {
        int n;
        cin >> n;
        
        vector<int> a(n);
        int sum = 0;
        for (int i = 0; i < n; i++) {
            cin >> a[i];
            sum += a[i];
        }
        
        int rem = sum % n;
        int result = rem * (n - rem);
        
        cout << result << endl;
    }
    
    return 0;
}
```