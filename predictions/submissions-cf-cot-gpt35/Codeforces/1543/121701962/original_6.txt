Step 1: Remove unnecessary includes
The original program includes the entire `<bits/stdc++.h>` library, which is not necessary and can slow down the compilation process. We can remove it and only include the necessary headers.

Step 2: Remove unnecessary macros
The original program defines macros for vector operations (`vi`, `pb`, `ppb`, `all`, `rall`) and loop iterations (`rep`, `repb`). These macros make the code less readable and do not provide significant optimization benefits. We can remove these macros and use the standard C++ syntax instead.

Step 3: Avoid unnecessary calculations
The original program calculates the sum of all elements in the array `a` twice. We can optimize this by calculating the sum only once and storing it in a variable.

Step 4: Simplify the conditional statements
The original program has multiple conditional statements to check if the sum is divisible by `n` and if it is less than `n`. We can simplify these statements and combine them into a single conditional statement.

Step 5: Avoid unnecessary variable redeclaration
The original program redeclares the variable `x` inside the `else if (!x)` block. This is not necessary and can be removed.

Step 6: Avoid unnecessary calculations in the output statement
The original program calculates `x * (n - x)` in the output statement. We can simplify this by calculating `n * (n - 1)` and subtracting the sum from it.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int gcd(int a, int b) {
  return b == 0 ? a : gcd(b, a % b);
}

void solve() {
  int n, sum = 0;
  cin >> n;
  int a[n];
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    sum += a[i];
  }
  
  if (sum % n == 0) {
    cout << 0 << endl;
  } else {
    int x = sum % n;
    cout << n * (n - 1) - sum << endl;
  }
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  
  int t = 1;
  cin >> t;
  while (t--) {
    solve();
  }
  
  return 0;
}
```