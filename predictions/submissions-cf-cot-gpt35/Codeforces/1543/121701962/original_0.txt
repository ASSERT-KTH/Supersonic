Step 1: Remove unnecessary includes and macros.

The include statement `#include <bits/stdc++.h>` includes a large number of header files, which can slow down the compilation process. We can remove this line and include only the necessary headers.

The macros such as `#define int long long` and `#define vi vector<int>` are not used in the program, so we can remove them as well.

Step 2: Remove unnecessary functions.

The function `gcd` is not used in the program, so we can remove it.

Step 3: Reduce memory usage.

The program declares an array `int a[n]` with size `n` where `n` is input by the user. This can be a large amount of memory if `n` is a large number. Instead of using an array, we can use a single variable to store the sum of the array elements as we iterate through them. This will significantly reduce the memory usage.

Step 4: Simplify the logic.

The current logic checks multiple conditions to calculate the result. We can simplify the logic to calculate the result in a single line without the need for multiple if-else statements.

Here is the optimized program:

```cpp
#include <iostream>

using namespace std;

void solve() {
  int n, sum = 0;
  cin >> n;
  for (int i = 0; i < n; i++) {
    int num;
    cin >> num;
    sum += num;
  }
  int result = (sum % n) * (n - (sum % n));
  cout << result << endl;
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
  return 0;
}
```