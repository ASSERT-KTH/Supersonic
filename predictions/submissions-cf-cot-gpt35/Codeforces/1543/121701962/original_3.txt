Step 1: Remove unnecessary includes and macros.
- The `<bits/stdc++.h>` header includes a lot of unnecessary headers and can slow down compilation time. We can replace it with the necessary headers individually.
- The macros `int long long`, `vi vector<int>`, `pb push_back`, `ppb pop_back`, `all(x)`, `rall(x)`, `fr first`, `sc second`, and `const int mod` are not used in the program and can be removed.

Step 2: Optimize the loop.
- The loop `repb(i, start, end)` is not used in the program and can be removed.
- The loop `rep(i, start, end)` can be optimized to use a pre-increment operator instead of a post-increment operator for better performance.

Step 3: Optimize the calculation.
- The calculation `sum * (n - sum)` can be optimized to `sum * (n / 2 - sum)` to avoid unnecessary calculations.

Step 4: Optimize the conditionals.
- The conditional `if (!x)` can be optimized to `else` since it only executes when `x` is false.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}

void solve() {
    int n, sum = 0;
    bool x = false;
    cin >> n;
    int a[n];
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
        sum += a[i];
    }
    if (sum % n == 0) {
        x = true;
    }
    if (sum < n) {
        cout << sum * (n - sum) << endl;
    } else if (x) {
        cout << 0 << endl;
    } else {
        int x = sum % n;
        cout << x * (n / 2 - x) << endl;
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int t = 1;
    cin >> t;
    while (t--) {
        solve();
    }
    return 0;
}
```