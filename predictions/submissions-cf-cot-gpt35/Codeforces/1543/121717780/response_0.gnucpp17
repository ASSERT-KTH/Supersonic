#include <iostream>
#include <iomanip>
#include <cstring>
using namespace std;

typedef long long int lli;

lli c, m, p, v;
lli nc, nm, nv, mx, mc;
lli dp[1005][1005];

lli getAns(lli cntC, lli cntM, lli c, lli m, lli p, lli v) {
  if (c <= 0 && m <= 0) {
    return cntC + cntM + 1;
  }
  if (dp[cntC][cntM] != -1) {
    return dp[cntC][cntM];
  }
  lli temp = 0;
  if (c > 0 && m > 0) {
    temp += c * getAns(cntC + 1, cntM, c - v, m + min(c / 2, v / 2), p + min(c / 2, v / 2), v)
          + m * getAns(cntC, cntM + 1, c + min(m / 2, v / 2), m - v, p + min(m / 2, v / 2), v)
          + (cntC + cntM + 1) * p;
  } else if (c > 0) {
    temp += c * getAns(cntC + 1, cntM, c - v, m, p + min(c, v), v)
          + (cntC + cntM + 1) * p;
  } else {
    temp += m * getAns(cntC, cntM + 1, c, m - v, p + min(m, v), v)
          + (cntC + cntM + 1) * p;
  }
  dp[cntC][cntM] = temp;
  return temp;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;
  while (t--) {
    cin >> c >> m >> p >> v;
    nc = c;
    nm = m;
    nv = v;
    mx = (nc + nv - 1) / nv + (nc + nm + nv - 1) / nv + 1;
    mc = (nc + nm + nv - 1) / nv;

    memset(dp, -1, sizeof(dp));

    cout << getAns(0, 0, c, m, p, v) << endl;
  }
  return 0;
}