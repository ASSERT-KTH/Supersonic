#include <iostream>
#include <vector>
#include <iomanip>

const int MAX_N = 1005;
const double EPS = 1e-14;

int nc, nm, nv;
int mx, mc;
double dp[MAX_N][MAX_N];

double getAns(int cntC, int cntM, int c, int m, int p, int v) {
    if (c <= 0 && m <= 0) {
        return cntC + cntM + 1;
    }
    if (dp[cntC][cntM] != -1) {
        return dp[cntC][cntM];
    }
    double temp = 0;
    if (c > 0 && m > 0) {
        temp += c * getAns(cntC + 1, cntM, c - v, m + std::min(c / 2, v / 2),
                           p + std::min(c / 2, v / 2), v) +
                m * getAns(cntC, cntM + 1, c + std::min(m / 2, v / 2), m - v,
                           p + std::min(m / 2, v / 2), v) +
                (cntC + cntM + 1) * p;
    } else if (c > 0) {
        temp += c * getAns(cntC + 1, cntM, c - v, m, p + std::min(c, v), v) +
                (cntC + cntM + 1) * p;
    } else {
        temp += m * getAns(cntC, cntM + 1, c, m - v, p + std::min(m, v), v) +
                (cntC + cntM + 1) * p;
    }
    return dp[cntC][cntM] = temp;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(NULL);

    int t;
    std::cin >> t;
    while (t--) {
        double c, m, p, v;
        std::cin >> c >> m >> p >> v;
        nc = static_cast<int>(c * 10000);
        nm = static_cast<int>(m * 10000);
        nv = static_cast<int>(v * 10000);
        mx = (nc + nv - 1) / nv + (nc + nm + nv - 1) / nv + 1;
        mc = (nc + nm + nv - 1) / nv;
        for (int i = 0; i <= mc; i++) {
            for (int j = 0; j <= mc; j++) {
                dp[i][j] = -1;
            }
        }
        std::cout << std::setprecision(15) << getAns(0, 0, nc, nm, static_cast<int>(p * 10000), nv) << std::endl;
    }

    return 0;
}