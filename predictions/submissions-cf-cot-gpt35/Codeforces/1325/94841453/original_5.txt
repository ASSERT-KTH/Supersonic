The given program reads an integer `t` as the number of test cases. For each test case, it reads an integer `n` followed by `n` integers. It inserts the `n` integers into a set and then prints the size of the set.

To optimize the program for running time and memory usage, we can make the following modifications:

1. Remove the unnecessary inclusion of `<bits/stdc++.h>` header file. This header file includes all other standard library headers, which can increase the compilation time and memory usage.

2. Replace the `set` container with an `unordered_set` container. The `unordered_set` container has constant time complexity for insertion and search operations on average, whereas the `set` container has logarithmic time complexity. This change will improve the running time of the program.

3. Avoid using the `using namespace std` directive to prevent polluting the global namespace. Instead, explicitly use the `std` namespace where needed.

4. Use more appropriate variable types. The given program uses `ll` (long long) for most variables, which may not be necessary. We can use `int` for variables like `t` and `n`, and `unsigned int` for variables like `x` and the size of the set.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_set>

int main() {
  int t;
  std::cin >> t;
  while (t--) {
    int n, x;
    std::cin >> n;
    std::unordered_set<unsigned int> a;
    while (n--) {
      std::cin >> x;
      a.insert(x);
    }
    std::cout << a.size() << std::endl;
  }
}
```