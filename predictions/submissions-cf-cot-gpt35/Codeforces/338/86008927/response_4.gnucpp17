#include <iostream>
#include <vector>
#include <chrono>

using ll = long long;

ll gcd(ll a, ll b) {
  while (b != 0) {
    ll t = b;
    b = a % b;
    a = t;
  }
  return a;
}

ll lcm(ll a, ll b) {
  return (a / gcd(a, b)) * b;
}

ll gcdEx(ll a, ll b, ll &x, ll &y) {
  ll x0 = 1, y0 = 0, x1 = 0, y1 = 1;
  while (b != 0) {
    ll q = a / b;
    ll r = a % b;
    ll x2 = x0 - q * x1;
    ll y2 = y0 - q * y1;
    a = b;
    b = r;
    x0 = x1;
    y0 = y1;
    x1 = x2;
    y1 = y2;
  }
  x = x0;
  y = y0;
  return a;
}

ll binmul(ll a, ll b, ll mod) {
  ll res = 0;
  while (b != 0) {
    if (b & 1) {
      res = (res + a) % mod;
    }
    a = (a + a) % mod;
    b >>= 1;
  }
  return res;
}

ll solve(ll r1, ll mod1, ll r2, ll mod2) {
  ll g = gcd(mod1, mod2);
  if (r1 % g != r2 % g) {
    std::cout << "NO\n";
    return 0;
  }
  ll a = mod1 / g;
  ll b = (r2 - r1) / g;
  ll c = mod2 / g;
  ll x, y;
  gcdEx(a, c, x, y);
  x = (x % c + c) % c;
  ll k = binmul(b, x, c);
  ll ans = (r1 + k * mod1) % lcm(mod1, mod2);
  return ans;
}

void run() {
  ll n, m;
  int k;
  std::cin >> n >> m >> k;
  std::vector<ll> a(k);
  for (int i = 0; i < k; ++i) {
    std::cin >> a[i];
  }
  ll l = a[0];
  for (int i = 1; i < k; ++i) {
    l = lcm(l, a[i]);
  }
  if (l > n) {
    std::cout << "NO\n";
    return;
  }
  std::vector<std::pair<ll, ll>> eq(k);
  for (int i = 0; i < k; ++i) {
    eq[i].second = a[i];
    eq[i].first = ((-i) % a[i] + a[i]) % a[i];
  }
  ll r1 = eq[0].first;
  ll mod1 = eq[0].second;
  for (int i = 1; i < k; ++i) {
    ll curMod = lcm(mod1, eq[i].second);
    ll curR = solve(r1, mod1, eq[i].first, eq[i].second);
    r1 = (curR % curMod + curMod) % curMod;
    mod1 = curMod;
  }
  if (r1 == 0) {
    r1 += mod1;
  }
  if (r1 + k - 1 > m) {
    std::cout << "NO\n";
    return;
  }
  for (int i = 0; i < k; ++i) {
    if (gcd(l, r1 + i) != a[i]) {
      std::cout << "NO\n";
      return;
    }
  }
  std::cout << "YES\n";
}

int main(void) {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);

  auto start = std::chrono::high_resolution_clock::now();
  run();
  auto end = std::chrono::high_resolution_clock::now();

  std::cerr << "Execution time: "
            << std::chrono::duration_cast<std::chrono::milliseconds>(end - start)
                   .count()
            << " ms" << std::endl;

  return 0;
}