The given program can be optimized in the following steps:

1. Avoid using the `bits/stdc++.h` header as it includes a large number of unnecessary headers. Instead, include only the necessary headers such as `iostream`, `set`, and `string`.

2. Avoid using `using namespace std` to prevent namespace pollution. Instead, use `std::` prefix for standard library classes and functions.

3. Replace the `multiset` with a `vector` to store the coins. This will improve memory usage as a `multiset` is not required in this case.

4. Instead of using a loop with `ret` and `st.count(coin)` to find and erase coins, use `std::find` and `std::erase` functions from the `<algorithm>` header. This will simplify the code and improve efficiency.

5. Use a `bool` variable `ok` to store the result instead of the `verdict` macro. This will simplify the code and remove the need for the macro.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <set>
#include <vector>
#include <algorithm>

int main() {
  int n;
  std::cin >> n;
  std::vector<int> a(n);
  std::vector<int> coins = {75, 50, 25};
  for (auto& i : a)
    std::cin >> i;
  bool ok = true;
  std::vector<int> st;
  for (int i : a) {
    int ret = i - 25;
    if (ret) {
      for (int coin : coins) {
        auto it = std::find(st.begin(), st.end(), coin);
        while (ret && it != st.end() && ret >= coin) {
          ret -= coin;
          st.erase(it);
          it = std::find(st.begin(), st.end(), coin);
        }
      }
      if (ret) {
        ok = false;
        break;
      }
    }
    st.push_back(i);
  }
  std::cout << (ok ? "YES" : "NO") << '\n';
  return 0;
}
```