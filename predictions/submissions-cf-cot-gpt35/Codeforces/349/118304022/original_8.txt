To optimize the given program, we can make the following modifications:

1. Instead of using `multiset<int, greater<>>`, we can use a `vector<int>` to store the available coins. This will reduce the memory usage and simplify the code.

2. We can sort the `coins` array in descending order before using it. This will allow us to iterate through the coins in descending order and avoid unnecessary iterations.

3. Instead of repeatedly calling `st.count(coin)` and `st.find(coin)`, we can use a `map<int, int>` to store the count of each coin. This will reduce the time complexity of searching for a coin and updating its count.

4. Instead of using a separate boolean variable `ok`, we can directly output "YES" or "NO" based on the condition in the `cout` statement.

Here is the optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
  int n;
  cin >> n;
  int a[n];
  vector<int> coins = {75, 50, 25};
  sort(coins.begin(), coins.end(), greater<int>());
  
  for (auto &i : a)
    cin >> i;
  
  map<int, int> coinCount;
  for (int i : a) {
    int ret = i - 25;
    if (ret) {
      for (int coin : coins) {
        while (ret && coinCount[coin] && ret >= coin) {
          ret -= coin;
          coinCount[coin]--;
        }
      }
      if (ret) {
        cout << "NO" << '\n';
        return 0;
      }
    }
    coinCount[i]++;
  }
  
  cout << "YES" << '\n';
  return 0;
}
```

Explanation of optimizations:

1. Using a `vector<int>` instead of `multiset<int, greater<>>` reduces memory usage and simplifies the code. A `multiset` is an ordered container that allows duplicate elements. However, in this case, we don't need to store duplicate elements, so a `vector` is sufficient. We can sort the `coins` array in descending order to achieve the same effect as `multiset`.

2. Sorting the `coins` array in descending order allows us to iterate through the coins in descending order and avoid unnecessary iterations. This is beneficial because we want to use the largest coins first to minimize the number of coins used.

3. Using a `map<int, int>` to store the count of each coin allows us to efficiently search for a coin and update its count. We can directly access the count of a coin using `coinCount[coin]`, which has an average time complexity of O(log N), where N is the number of coins.

4. Instead of using a separate boolean variable `ok`, we can directly output "YES" or "NO" based on the condition in the `cout` statement. This simplifies the code and avoids unnecessary variable assignments.

Overall, these optimizations improve the time complexity and memory usage of the program.