To optimize the given program, we can follow these steps:

1. Instead of using a `multiset<int, greater<>>` to store the coins, we can use a `vector<int>` to maintain a sorted list of coins in descending order. This will reduce the memory usage and improve the performance when searching and erasing coins.

2. We can remove the unnecessary `ret` variable and directly update the remaining amount in the loop.

3. Instead of using a nested loop to iterate over the coins, we can use a single loop and check if the remaining amount is greater than or equal to each coin. If it is, we can subtract the coin from the remaining amount and erase the coin from the vector.

4. We can use a flag variable `found` to keep track of whether a suitable coin was found for each transaction. If not, we can set `ok` to false and break out of the loop.

5. We can avoid using the `bits/stdc++.h` library, which includes all the standard libraries. Instead, we can include only the necessary headers.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

#define verdict (ok ? "YES" : "NO")

int main() {
  int n;
  cin >> n;
  int a[n];
  vector<int> coins = {75, 50, 25};
  for (auto &i : a)
    cin >> i;
  bool ok = true;
  vector<int> st;
  for (int i : a) {
    int remaining = i - 25;
    bool found = false;
    for (int j = 0; j < st.size(); j++) {
      if (remaining >= coins[j] && st[j] > 0) {
        remaining -= coins[j];
        st[j]--;
        found = true;
      }
    }
    if (!found) {
      ok = false;
      break;
    }
    st.push_back(i);
  }
  cout << verdict << '\n';
  return 0;
}
```

This optimized program reduces memory usage by using a `vector<int>` instead of a `multiset<int, greater<>>`, simplifies the logic by removing unnecessary variables, and improves the performance by using a single loop to iterate over the coins.