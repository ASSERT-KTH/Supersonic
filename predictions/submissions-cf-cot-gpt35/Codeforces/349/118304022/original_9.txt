Step 1: Eliminate unnecessary header files

- The program includes `<bits/stdc++.h>`, which is not necessary. We can remove it.

Step 2: Optimize the input process

- Instead of using an array of size `n` to store the input values, we can directly process the values without storing them in an array. This will save memory usage.

Step 3: Optimize the logic for checking if change can be given

- Instead of using a multiset to store the available coins, we can use an array to store the count of each type of coin. This will simplify the logic and improve the running time.
- We can also update the logic for checking if change can be given more efficiently. Instead of repeatedly searching and erasing coins from the multiset, we can directly check the count of each type of coin in the array.

Step 4: Optimize the output process

- Instead of using a ternary operator and a macro for the verdict, we can directly output "YES" or "NO" based on the value of `ok`.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int n;
  cin >> n;
  const int coins[] = {75, 50, 25};
  int coinCount[] = {0, 0, 0};
  bool ok = true;
  
  for (int i = 0; i < n; i++) {
    int x;
    cin >> x;
    
    int ret = x - 25;
    if (ret) {
      for (int j = 0; j < 3; j++) {
        while (ret && coinCount[j] && ret >= coins[j]) {
          ret -= coins[j];
          coinCount[j]--;
        }
      }
      if (ret) {
        ok = false;
        break;
      }
    }
    coinCount[x/25 - 1]++;
  }
  
  if (ok) {
    cout << "YES\n";
  } else {
    cout << "NO\n";
  }
  
  return 0;
}
```

Optimization Explanation:

- The unnecessary header file `<bits/stdc++.h>` has been removed.
- Instead of storing the input values in an array, we process them directly. This saves memory usage.
- The multiset has been replaced with an array `coinCount` to store the count of each type of coin.
- The logic for checking if change can be given has been updated to directly check the count of each type of coin in the array.
- The output process has been simplified by directly outputting "YES" or "NO" based on the value of `ok`.