To optimize the given program, we can make the following modifications:

1. Instead of using `multiset<int, greater<>>` to store the available coins, we can use a simple integer array to count the number of coins of each denomination. This will reduce the memory usage and also make the code faster.

2. We can avoid using the `while` loop to subtract the coins from the `ret` variable. Instead, we can calculate the number of coins of each denomination required in a single pass.

3. We can remove the unnecessary check `ret >= coin` inside the `while` loop, as it is already checked in the `if` condition.

4. We can remove the unnecessary `const` keyword for the `coins` array.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;
#define verdict (ok ? "YES" : "NO")

int main() {
  int n;
  cin >> n;
  int a[n];
  int coins[] = {75, 50, 25};
  int coinCount[3] = {0}; // Array to count the number of coins of each denomination
  for (auto &i : a)
    cin >> i;
  bool ok = true;
  for (int i : a) {
    int ret = i - 25;
    if (ret) {
      for (int j = 0; j < 3; j++) {
        int coin = coins[j];
        int requiredCoins = min(ret / coin, coinCount[j]); // Calculate the number of coins required
        ret -= requiredCoins * coin; // Subtract the required coins from ret
        coinCount[j] -= requiredCoins; // Update the coin count
      }
      if (ret) {
        ok = false;
        break;
      }
    }
    coinCount[i / 25 - 1]++; // Increment the coin count for the current denomination
  }
  cout << verdict << '\n';
  return 0;
}
```