#pragma GCC optimize("O3")
#pragma GCC target("sse4")
#include <iostream>
#include <vector>
#include <bitset>
#include <unordered_map>

const int MX = 100005;
const int BLOCK = 1000;
const int NUM = MX / BLOCK + 1;

std::vector<int> cnt[NUM];
std::vector<int> CNT[NUM];
std::vector<int> a(MX), A(MX);
std::bitset<MX> in[NUM];
std::vector<int> con[NUM];
std::unordered_map<int, int> m;

int N;

int get(int x) {
  auto it = m.find(x);
  if (it == m.end()) {
    int sz = m.size();
    m[x] = sz;
    return sz;
  }
  return it->second;
}

void upd(int p, int inc) {
  int v = a[p];
  for (int i = (p + BLOCK - 1) / BLOCK; i <= N / BLOCK; i++) {
    int c = cnt[i][v];
    CNT[i][c]--;
    cnt[i][v] += inc;
    CNT[i][cnt[i][v]]++;
    c = cnt[i][v];
    if (c > 0 && !in[i][c]) {
      in[i][c] = 1;
      con[i].push_back(c);
    }
  }
}

int query2(int y) {
  int b = y / BLOCK;
  int ans = cnt[b][a[y]];
  for (int i = BLOCK * b + 1; i <= y; i++) {
    ans += a[i] == a[y];
  }
  return ans;
}

int query3(int y) {
  int mn = query2(y), ans = 0;
  int b = y / BLOCK;
  std::vector<int> ok;
  for (int i : con[b]) {
    if (!CNT[b][i]) {
      in[b][i] = 0;
      continue;
    }
    ok.push_back(i);
    if (i >= mn) {
      ans += CNT[b][i];
    }
  }
  con[b] = ok;
  for (int i = BLOCK * b + 1; i <= y; i++) {
    cnt[b][a[i]]++;
    ans += cnt[b][a[i]] == mn;
  }
  for (int i = BLOCK * b + 1; i <= y; i++) {
    cnt[b][a[i]]--;
  }
  return ans;
}

int main() {
  std::ios_base::sync_with_stdio(0);
  std::cin.tie(0);

  std::cin >> N;
  for (int i = 1; i <= N; i++) {
    std::cin >> A[i];
    a[i] = get(A[i]);
    upd(i, 1);
  }

  int M;
  std::cin >> M;

  for (int i = 0; i < M; i++) {
    int t;
    std::cin >> t;
    if (t == 1) {
      int v, p;
      std::cin >> v >> p;
      upd(p, -1);
      A[p] = v;
      a[p] = get(v);
      upd(p, 1);
    } else {
      int x, y;
      std::cin >> x >> y;
      if (x == 1) {
        std::cout << A[y] << '\n';
      } else {
        if (x % 2 == 0) {
          std::cout << query2(y) << '\n';
        } else {
          std::cout << query3(y) << '\n';
        }
      }
    }
  }

  return 0;
}