The given program is already quite optimized in terms of running time and memory usage. However, there are a few potential optimizations that can be made:

1. Remove unnecessary includes: The program includes several unnecessary headers, such as `<bits/stdc++.h>` and `<ext/pb_ds/tree_policy.hpp>`. These headers are not used in the program and can be removed to improve compilation time.

2. Remove unnecessary typedefs: The program defines several typedefs that are not used. Removing these typedefs will not only reduce the size of the code but also improve readability.

3. Simplify the "get" function: The "get" function is used to map values to integers. However, it can be simplified by using an unordered_map instead of a map. This will reduce the lookup time from O(log n) to O(1).

4. Use a faster random number generator: The program uses the mt19937 random number generator. However, this generator is not necessary for the given program. Instead, a simpler and faster random number generator, such as rand(), can be used.

5. Avoid unnecessary function calls: The program makes several unnecessary function calls, such as calling `pr` and `ps` functions for single arguments. These function calls can be replaced with direct output statements to improve performance.

Here is the optimized version of the program incorporating these optimizations:

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <bitset>
using namespace std;

const int MX = 100005;
const int BLOCK = 1000;
const int NUM = MX / BLOCK + 1;
int cnt[NUM][2 * MX], CNT[NUM][MX], a[MX], A[MX];
bitset<MX> in[NUM];
vector<int> con[NUM];
unordered_map<int, int> m;
int N;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  cin >> N;
  for (int i = 1; i <= N; i++) {
    cin >> A[i];
    a[i] = m[A[i]];
    m[A[i]] = i;
  }

  int M;
  cin >> M;

  for (int i = 0; i < M; i++) {
    int t;
    cin >> t;
    if (t == 1) {
      int v, p;
      cin >> v >> p;
      a[p] = m[v];
      m[v] = p;
    } else {
      int x, y;
      cin >> x >> y;
      if (x == 1) {
        cout << A[y] << '\n';
      } else {
        int b = y / BLOCK;
        int ans = cnt[b][a[y]];
        for (int j = BLOCK * b + 1; j <= y; j++) {
          if (a[j] == a[y]) {
            ans++;
          }
        }
        if (x % 2 == 0) {
          cout << ans << '\n';
        } else {
          int mn = ans;
          ans = 0;
          vector<int> ok;
          for (int j : con[b]) {
            if (CNT[b][j]) {
              ok.push_back(j);
              if (j >= mn) {
                ans += CNT[b][j];
              }
            } else {
              in[b][j] = false;
            }
          }
          swap(con[b], ok);
          for (int j = BLOCK * b + 1; j <= y; j++) {
            cnt[b][a[j]]++;
            if (cnt[b][a[j]] == mn) {
              ans++;
            }
          }
          for (int j = BLOCK * b + 1; j <= y; j++) {
            cnt[b][a[j]]--;
          }
          cout << ans << '\n';
        }
      }
    }
  }

  return 0;
}
```

Note that these optimizations may not have a significant impact on the performance of the program, as the original program is already quite optimized. However, they can still help improve the efficiency of the program.