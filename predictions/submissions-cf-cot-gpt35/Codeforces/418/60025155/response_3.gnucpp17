#pragma GCC optimize("O3")
#pragma GCC target("sse4")
#include <bits/stdc++.h>
using namespace std;

const int MX = 100005;
const int BLOCK = 1000;
const int NUM = MX / BLOCK + 1;

int cnt[NUM][2 * MX], a[MX];
vector<int> con[NUM];
unordered_map<int, int> m;

int get(int x) {
    if (!m.count(x)) {
        int sz = m.size();
        m[x] = sz;
    }
    return m[x];
}

void upd(int p, int inc) {
    int v = a[p];
    for (int i = (p + BLOCK - 1) / BLOCK; i < NUM; i++) {
        cnt[i][v] += inc;
    }
}

int query2(int l, int r, int y) {
    int ans = 0;
    int b = y / BLOCK;

    for (int i = l; i <= min(r, BLOCK * b); i++) {
        ans += a[i] == a[y];
    }

    if (b * BLOCK < r) {
        for (int i = b * BLOCK + 1; i <= r; i++) {
            ans += a[i] == a[y];
        }
    }
    
    return ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int N;
    cin >> N;

    for (int i = 1; i <= N; i++) {
        int x;
        cin >> x;
        a[i] = get(x);
        upd(i, 1);
    }

    int M;
    cin >> M;

    for (int i = 0; i < M; i++) {
        int t;
        cin >> t;

        if (t == 1) {
            int v, p;
            cin >> v >> p;
            upd(p, -1);
            a[p] = get(v);
            upd(p, 1);
        } else {
            int x, y;
            cin >> x >> y;

            if (x == 1) {
                cout << m[a[y]] << endl;
            } else {
                int l, r;
                cin >> l >> r;
                cout << query2(l, r, y) << endl;
            }
        }
    }

    return 0;
}