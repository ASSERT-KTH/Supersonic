The given program can be optimized by removing unnecessary header files and macro definitions. Additionally, we can remove the unnecessary use of `map` and use an array instead.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int t;
  cin >> t;
  while (t--) {
    int n, k;
    cin >> n >> k;
    int a[35];
    for (int i = 1; i <= n; i++) {
      cin >> a[i];
    }
    bool fl = true;
    bool mp[35] = {false};
    for (int i = 1; i <= n; i++) {
      int p = a[i];
      int j = 0;
      while (p) {
        if (p % k > 1) {
          fl = false;
          break;
        }
        if (p % k == 1) {
          if (mp[j]) {
            fl = false;
            break;
          }
          mp[j] = true;
        }
        j++;
        p = p / k;
      }
    }
    if (fl)
      cout << "YES" << endl;
    else
      cout << "NO" << endl;
  }
}
```

Explanation of optimizations:

1. Removed unnecessary header files: The `<bits/stdc++.h>` header file includes many other header files, including `<iostream>`, which is the only required header file for this program. Therefore, we can remove `<bits/stdc++.h>`.

2. Removed unnecessary macro definitions: Macro definitions like `#define ll long long int` and `#define co cout` are not necessary and can be removed. They are not used in the program.

3. Replaced `map` with an array: Instead of using a `map` to store the values of `mp`, we can use a simple boolean array `mp[35]`. This will save memory and improve performance.

4. Replaced `scanf` with `cin` and `printf` with `cout`: The program was using `scanf` and `printf` for input and output, respectively. We can use the simpler and safer `cin` and `cout` instead.

5. Changed variable types to `int`: The variables `t`, `n`, `k`, `p`, `i`, and `j` can be changed to `int` as they are used for loop counters and input values. This saves memory and improves performance.

6. Removed unnecessary `endl` and `break` macros: The `en`, `br`, `coy`, and `con` macros are not used in the program and can be removed.

7. Removed unnecessary `i64` typedef: The `i64` typedef is not used in the program and can be removed.

Overall, these optimizations improve the readability, memory usage, and performance of the program.