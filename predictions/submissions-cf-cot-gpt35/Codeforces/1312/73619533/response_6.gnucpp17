#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

#define ll long long
#define pp pair<ll, ll>
typedef vector<pp> ordered_set;

const ll maxn = 1e6 + 5, N = 1e6, nax = 26, inf = 1000000007;
vector<ll> segtree(4 * maxn), lazy(4 * maxn), value(maxn), adj[nax][maxn];
vector<ll> good, seta, tmp, dp;

ll combine(ll x, ll y) { return min(x, y); }

void build(ll node, ll l, ll r) {
  if (l == r) {
    segtree[node] = value[l];
    return;
  }
  ll mid = (l + r) / 2;
  build(node << 1, l, mid);
  build(node << 1 | 1, mid + 1, r);
  segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

void lazify(ll node, ll l, ll r) {
  if (lazy[node] != 0) {
    segtree[node] += lazy[node];
    if (l < r) {
      lazy[node << 1] += lazy[node];
      lazy[node << 1 | 1] += lazy[node];
    }
    lazy[node] = 0;
  }
}

void assign(ll node, ll l, ll r, ll idx, ll val) {
  if (l == r) {
    segtree[node] = val;
    return;
  }
  lazify(node, l, r);
  ll mid = (l + r) / 2;
  if (l <= idx and idx <= mid)
    assign(node << 1, l, mid, idx, val);
  else
    assign(node << 1 | 1, mid + 1, r, idx, val);
  segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

void updateRange(ll node, ll l, ll r, ll a, ll b, ll val) {
  if (l > b || l > r || r < a)
    return;
  lazify(node, l, r);
  if (a <= l and r <= b) {
    segtree[node] += val;
    if (l < r) {
      lazy[node << 1] += val;
      lazy[node << 1 | 1] += val;
    }
    return;
  }
  ll mid = (l + r) / 2;
  updateRange(node << 1, l, mid, a, b, val);
  updateRange(node << 1 | 1, mid + 1, r, a, b, val);
  segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

ll query(ll node, ll l, ll r, ll a, ll b) {
  if (l > b || a > r || l > r)
    return inf;
  lazify(node, l, r);
  if (a <= l and r <= b)
    return segtree[node];
  ll mid = (l + r) / 2;
  ll lq = query(node << 1, l, mid, a, b),
     rq = query(node << 1 | 1, mid + 1, r, a, b);
  return combine(lq, rq);
}

void dfs(ll node, ll par) {
  if (par != -1)
    dp[node] = min(dp[node], dp[par] + 1);
  if (good[node]) {
    updateRange(1, 1, N, 1, sz(tmp), 1);
    dp[node] = min(dp[node], query(1, 1, N, 1, sz(tmp)));
  }
  tmp.push_back(dp[node]);
  assign(1, 1, N, sz(tmp), dp[node] + good[node]);
  for (ll i = 0; i < nax; i++) {
    if (adj[i][node] != -1) {
      dfs(adj[i][node], node);
    }
  }
  assign(1, 1, N, sz(tmp), inf);
  tmp.pop_back();
}

void solve() {
  memset(adj, -1, sizeof adj);
  ll n, x, k;
  scanf("%lld", &n);
  good.resize(maxn, 0);
  seta.clear();
  tmp.clear();
  dp.assign(maxn, inf);
  for (ll i = 1; i <= N; i++) value[i] = inf;
  build(1, 1, N);
  for (ll i = 1; i <= n; i++) {
    scanf("%lld", &x);
    char c;
    scanf(" %c", &c);
    adj[c - 'a'][x] = i;
  }
  scanf("%lld", &k);
  for (ll i = 0; i < k; i++) {
    scanf("%lld", &x);
    good[x] = 1;
    seta.push_back(x);
  }
  dp[0] = 0;
  dfs(0, -1);
  for (ll i = 0; i < k; i++) printf("%lld ", dp[seta[i]]);
  printf("\n");
}

int main() {
  ll t = 1;
  while (t--) {
    solve();
  }
  return 0;
}