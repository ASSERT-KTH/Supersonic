The given C/C++ program is a solution to a problem where we need to find the minimum number of steps required to reach each node from the root node in a tree. The program uses a segment tree to efficiently update and query the minimum value in a range.

To optimize the program for running time and memory usage, we can make the following modifications:

1. Remove unnecessary header files: The program includes several unnecessary header files. We can remove the `<bits/stdc++.h>` header file and the header files related to `pb_ds` library.

2. Remove unnecessary type aliases: The program defines several type aliases using `#define` statements. We can remove these aliases and use the actual types directly.

3. Use `vector` instead of `array` for `segtree` and `lazy` arrays: The program uses fixed-size arrays for `segtree` and `lazy`. We can replace these arrays with `vector` to avoid potential out-of-bounds errors.

4. Use `vector` instead of `array` for `value` and `good` arrays: Similar to the previous optimization, we can replace the fixed-size arrays `value` and `good` with `vector` to handle arbitrary input sizes.

5. Use `emplace_back` instead of `push_back`: The program uses `push_back` to add elements to `tmp` vector. We can use `emplace_back` instead to directly construct the elements in-place, which can improve performance.

6. Remove unnecessary variable `nn`: The variable `nn` is not used in the program and can be removed.

7. Replace `memset` with `fill`: The program uses `memset` to initialize the `adj` array with -1. We can use the `fill` function instead to achieve the same result in a more C++-style way.

8. Remove unnecessary `while` loop: The program uses a `while` loop with a single iteration to call the `solve` function. We can remove this loop and directly call the `solve` function.

Here is the optimized C/C++ program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

#define ll long long

const ll maxn = 1e6 + 5, N = 1e6, nax = 26, inf = 1000000007;
vector<ll> segtree(4 * maxn), lazy(4 * maxn), value(maxn, inf), seta, tmp, dp(maxn, inf);
vector<vector<ll>> adj(nax, vector<ll>(maxn, -1));
vector<ll> good(maxn, 0);

ll combine(ll x, ll y) {
  return min(x, y);
}

void build(ll node, ll l, ll r) {
  if (l == r) {
    segtree[node] = value[l];
    return;
  }
  ll mid = (l + r) / 2;
  build(node << 1, l, mid);
  build(node << 1 | 1, mid + 1, r);
  segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

void lazify(ll node, ll l, ll r) {
  if (lazy[node] != 0) {
    segtree[node] += lazy[node];
    if (l < r) {
      lazy[node << 1] += lazy[node];
      lazy[node << 1 | 1] += lazy[node];
    }
    lazy[node] = 0;
  }
}

void assign(ll node, ll l, ll r, ll idx, ll val) {
  lazify(node, l, r);
  if (l == r) {
    segtree[node] = val;
    return;
  }
  ll mid = (l + r) / 2;
  lazify(node << 1, l, mid);
  lazify(node << 1 | 1, mid + 1, r);
  if (l <= idx and idx <= mid)
    assign(node << 1, l, mid, idx, val);
  else
    assign(node << 1 | 1, mid + 1, r, idx, val);
  segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

void updateRange(ll node, ll l, ll r, ll a, ll b, ll val) {
  lazify(node, l, r);
  if (l > b || l > r || r < a)
    return;
  if (a <= l and r <= b) {
    segtree[node] += val;
    if (l < r) {
      lazy[node << 1] += val;
      lazy[node << 1 | 1] += val;
    }
    return;
  }
  ll mid = (l + r) / 2;
  updateRange(node << 1, l, mid, a, b, val);
  updateRange(node << 1 | 1, mid + 1, r, a, b, val);
  segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

ll query(ll node, ll l, ll r, ll a, ll b) {
  lazify(node, l, r);
  if (l > b || a > r || l > r)
    return inf;
  if (a <= l and r <= b)
    return segtree[node];
  ll mid = (l + r) / 2;
  ll lq = query(node << 1, l, mid, a, b),
     rq = query(node << 1 | 1, mid + 1, r, a, b);
  return combine(lq, rq);
}

void dfs(ll node, ll par) {
  if (par != -1)
    dp[node] = min(dp[node], dp[par] + 1);
  if (good[node]) {
    updateRange(1, 1, N, 1, sz(tmp), 1);
    dp[node] = min(dp[node], query(1, 1, N, 1, sz(tmp)));
  }
  tmp.emplace_back(dp[node]);
  assign(1, 1, N, sz(tmp), dp[node] + good[node]);
  for (ll i = 0; i < nax; i++) {
    if (adj[i][node] != -1) {
      dfs(adj[i][node], node);
    }
  }
  assign(1, 1, N, sz(tmp), inf);
  tmp.pop_back();
}

void solve() {
  fill(adj.begin(), adj.end(), vector<ll>(maxn, -1));
  ll n, x, k;
  cin >> n;
  char c;
  for (ll i = 1; i <= N; i++) value[i] = inf;
  build(1, 1, N);
  for (ll i = 1; i <= n; i++) {
    cin >> x >> c;
    adj[c - 'a'][x] = i;
  }
  cin >> k;
  for (ll i = 0; i < k; i++) {
    cin >> x;
    good[x] = 1;
    seta.emplace_back(x);
  }
  dp[0] = 0;
  dfs(0, -1);
  for (ll i = 0; i < k; i++) cout << dp[seta[i]] << " ";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  solve();
  return 0;
}
```