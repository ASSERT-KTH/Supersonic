The given program reads an integer `n` and then reads `n` strings. For each string, it checks if it is equal to "++X", "X++", "--X", or "X--" and updates the value of `s` accordingly. Finally, it prints the value of `s`.

To optimize this program, we can eliminate the use of `string` and use `char` instead. This will reduce the memory usage and improve the running time.

Here's the optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int n, s = 0;
  cin >> n;
  for (int i = 0; i < n; i++) {
    char c1, c2, c3;
    cin >> c1 >> c2 >> c3;
    if ((c1 == '+' && c2 == '+' && c3 == 'X') || (c1 == 'X' && c2 == '+' && c3 == '+')) {
      s = s + 1;
    }
    if ((c1 == '-' && c2 == '-' && c3 == 'X') || (c1 == 'X' && c2 == '-' && c3 == '-')) {
      s = s - 1;
    }
  }
  cout << s;
  return 0;
}
```

Explanation:
1. Instead of using `string` to store the input, we use three `char` variables `c1`, `c2`, and `c3` to store each character of the input string.
2. We modify the condition in the `if` statements to compare the individual characters instead of the whole string. This eliminates the need for string comparisons.
3. This optimization reduces the memory usage and improves the running time by avoiding the overhead of string operations.