To optimize the given C++ program, we can make the following modifications:

1. Instead of using the `string` class for comparison, we can use character comparison. This will eliminate the overhead of creating and comparing strings.

2. We can use a more efficient way to increment or decrement the value of `s`. Instead of using `s = s + 1` and `s = s - 1`, we can use the increment and decrement operators `++s` and `--s`.

3. We can remove the unnecessary inclusion of the `<iostream>` header file as it is not being used in the optimized program.

Here is the optimized C++ program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int n, s = 0;
  cin >> n;
  for (int i = 0; i < n; i++) {
    char c1, c2, c3;
    cin >> c1 >> c2 >> c3;
    
    if ((c1 == '+' && c2 == '+' && c3 == 'X') ||
        (c1 == 'X' && c2 == '+' && c3 == '+')) {
      ++s;
    }
    
    if ((c1 == '-' && c2 == '-' && c3 == 'X') ||
        (c1 == 'X' && c2 == '-' && c3 == '-')) {
      --s;
    }
  }
  
  cout << s;
  return 0;
}
```

Explanation:

1. We replaced the `string` variable `str` with three `char` variables `c1`, `c2`, and `c3` to read the input characters directly.

2. We modified the comparisons within the `if` statements to compare the individual characters instead of creating and comparing strings.

3. We used the increment (`++s`) and decrement (`--s`) operators instead of adding or subtracting 1 from `s`.

These optimizations reduce the overhead of string operations and simplify the code, resulting in improved performance and reduced memory usage.