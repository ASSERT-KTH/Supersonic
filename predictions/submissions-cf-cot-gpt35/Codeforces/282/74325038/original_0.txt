The given program reads an integer `n` from the user and then reads `n` strings. It checks each string and updates the value of `s` based on the string's value. Finally, it prints the value of `s`.

To optimize the program, we can avoid using the `string` class and instead use character comparisons to check the string values. This will reduce memory usage and improve runtime performance.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int n, s = 0;
  cin >> n;
  for (int i = 0; i < n; i++) {
    char c1, c2, c3;
    cin >> c1 >> c2 >> c3;
    if ((c1 == '+' && c2 == '+' && c3 == 'X') || (c1 == 'X' && c2 == '+' && c3 == '+')) {
      s = s + 1;
    }
    if ((c1 == '-' && c2 == '-' && c3 == 'X') || (c1 == 'X' && c2 == '-' && c3 == '-')) {
      s = s - 1;
    }
  }
  cout << s;
  return 0;
}
```

Explanation of the optimization:
- We replace the `string` variable with three `char` variables - `c1`, `c2`, and `c3`.
- Instead of comparing the entire string, we compare each character individually.
- This approach eliminates the need for creating and managing `string` objects, reducing memory usage and improving runtime performance.