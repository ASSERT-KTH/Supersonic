The given program reads an integer `n` from the user and then reads `n` strings. For each string, it checks if it matches one of four possible values: "++X", "X++", "--X", or "X--". If it matches, it updates the value of `s` accordingly. Finally, it outputs the value of `s`.

To optimize this program, we can eliminate the need to compare strings and instead directly check the characters of the input string. This will save time and memory because string comparisons are generally more expensive than character comparisons.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int n, s = 0;
  cin >> n;

  for (int i = 0; i < n; i++) {
    char c1, c2, c3;
    cin >> c1 >> c2 >> c3;

    if ((c1 == '+' && c2 == '+' && c3 == 'X') || (c1 == 'X' && c2 == '+' && c3 == '+')) {
      s += 1;
    }
    if ((c1 == '-' && c2 == '-' && c3 == 'X') || (c1 == 'X' && c2 == '-' && c3 == '-')) {
      s -= 1;
    }
  }

  cout << s;
  return 0;
}
```

Explanation of optimizations:
- Instead of reading the whole string and comparing it, we read the characters individually and compare them directly.
- We use three char variables `c1`, `c2`, `c3` to store the characters of the input string. This eliminates the need to create a string object and compare it.
- We use logical AND (`&&`) to check if the characters match the desired patterns. If they do, we update the value of `s` accordingly.
- These optimizations reduce the time complexity of the program and remove the need for string comparisons, resulting in improved performance and reduced memory usage.