#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;

const int maxn = 100005;
int arr1[maxn], arr2[maxn];
int dp[maxn][3];
int n;

int dpF(int i, int last) {
  if (i == n)
    return 0;
  if (dp[i][last] != -1)
    return dp[i][last];
  int option1 = 0, option2 = 0, option3 = 0;
  if (last != 1)
    option1 = arr1[i] + dpF(i + 1, 1);
  if (last != 2)
    option2 = arr2[i] + dpF(i + 1, 2);
  option3 = dpF(i + 1, last);
  return dp[i][last] = max({option1, option2, option3});
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  t = 1;
  while (t--) {
    memset(dp, -1, sizeof(dp));
    cin >> n;
    for (int i = 0; i < n; i++)
      cin >> arr1[i];
    for (int i = 0; i < n; i++)
      cin >> arr2[i];
    cout << dpF(0, 0) << "\n";
  }

  return 0;
}