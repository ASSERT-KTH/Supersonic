#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

const int maxn = 100005;
int n;
vector<int> arr1(maxn), arr2(maxn);
vector<vector<int>> dp(maxn, vector<int>(3, -1));

int dpF(int i, int last) {
  if (i == n)
    return 0;
  if (dp[i][last] != -1)
    return dp[i][last];
  int op1 = 0, op2 = 0, op3 = 0;
  if (last != 1)
    op1 = arr1[i] + dpF(i + 1, 1);
  if (last != 2)
    op2 = arr2[i] + dpF(i + 1, 2);
  op3 = dpF(i + 1, last);
  return dp[i][last] = max({op1, op2, op3});
}

void solve() {
  cin >> n;
  for (int i = 0; i < n; i++) 
    cin >> arr1[i];
  for (int i = 0; i < n; i++) 
    cin >> arr2[i];
  cout << dpF(0, 0) << "\n";
}

int main() {
  solve();
  return 0;
}