#include <iostream>
#include <vector>
#include <algorithm>
#include <array>

template <typename T, typename JoinFn>
class seg_tree {
public:
  seg_tree(int n, const T &zero = T(), const JoinFn &join_fn = JoinFn())
      : join_fn_(join_fn), n_(n), data_(2 * next_power_of_two(n_) - 1, zero) {}
  int size() const { return n_; }
  template <typename UpdateFn>
  void update(int pos, const T &val, UpdateFn update_fn) {
    return update(0, 0, n_ - 1, pos, val, update_fn);
  }
  T query(int pos) const { return query(pos, pos); }
  T query(int first, int last) const {
    return query(0, 0, n_ - 1, first, last);
  }

private:
  const JoinFn join_fn_;
  const int n_;
  std::vector<T> data_;

  static constexpr int next_power_of_two(int x) {
    --x;
    x |= x >> 1;
    x |= x >> 2;
    x |= x >> 4;
    x |= x >> 8;
    x |= x >> 16;
    return ++x;
  }

  void update(int node, int t_first, int t_last, int pos, const T &val,
              UpdateFn update_fn) {
    if (t_first == t_last) {
      update_fn(data_[node], val);
      return;
    }
    int t_mid = (t_first + t_last) >> 1;
    if (pos <= t_mid) {
      update(2 * node + 1, t_first, t_mid, pos, val, update_fn);
    } else {
      update(2 * node + 2, t_mid + 1, t_last, pos, val, update_fn);
    }
    data_[node] = join_fn_(data_[2 * node + 1], data_[2 * node + 2]);
  }

  T query(int node, int t_first, int t_last, int first, int last) const {
    if (first <= t_first && t_last <= last) {
      return data_[node];
    }
    int t_mid = (t_first + t_last) >> 1;
    if (last <= t_mid) {
      return query(2 * node + 1, t_first, t_mid, first, last);
    }
    if (t_mid < first) {
      return query(2 * node + 2, t_mid + 1, t_last, first, last);
    }
    return join_fn_(query(2 * node + 1, t_first, t_mid, first, last),
                    query(2 * node + 2, t_mid + 1, t_last, first, last));
  }
};

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout << std::boolalpha;

  int n, k;
  std::cin >> n >> k;
  std::array<std::array<int, k>, n> a;
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < k; ++j) {
      std::cin >> a[i][j];
    }
  }

  auto join = [](const std::pair<int, int> &a, const std::pair<int, int> &b) {
    return std::pair(std::min(a.first, b.first), std::max(a.second, b.second));
  };
  auto update = [](std::pair<int, int> &a, const std::pair<int, int> &b) { a = b; };

  std::array<seg_tree<std::pair<int, int>, decltype(join)>, (1 << k)> trees;
  for (int mask = 0; mask < (1 << k); ++mask) {
    std::vector<std::pair<int, int>> data(n);
    for (int i = 0; i < n; ++i) {
      int val = 0;
      for (int j = 0; j < k; ++j) {
        if (mask & (1 << j)) {
          val += a[i][j];
        } else {
          val -= a[i][j];
        }
      }
      data[i] = {val, val};
    }
    trees[mask] = seg_tree<std::pair<int, int>, decltype(join)>(n, {1e9, -1e9}, join);
    trees[mask].update(0, n - 1, data.begin(), update);
  }

  int q;
  std::cin >> q;
  while (q--) {
    int type;
    std::cin >> type;
    if (type == 1) {
      int i;
      std::cin >> i;
      --i;
      std::array<int, k> b;
      for (int j = 0; j < k; ++j) {
        std::cin >> b[j];
      }
      for (int mask = 0; mask < (1 << k); ++mask) {
        int val = 0;
        for (int j = 0; j < k; ++j) {
          if (mask & (1 << j)) {
            val += b[j];
          } else {
            val -= b[j];
          }
        }
        trees[mask].update(i, {val, val}, update);
      }
    } else {
      int l, r;
      std::cin >> l >> r;
      --l, --r;
      int ans = -1e9;
      for (int mask = 0; mask < (1 << k); ++mask) {
        auto a = trees[mask].query(l, r);
        ans = std::max(ans, a.second - a.first);
      }
      std::cout << ans << '\n';
    }
  }

  return 0;
}