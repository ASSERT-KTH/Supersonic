#include <iostream>
#include <vector>
#include <queue>

class graphNode {
public:
  std::vector<int> adj;
};

class graph {
public:
  int n;
  std::vector<graphNode> nodes;

  graph(int nodeNumber) {
    n = nodeNumber;
    nodes.resize(n + 1);
  }

  void addEdge(int a, int b) {
    nodes[a].adj.push_back(b);
    nodes[b].adj.push_back(a);
  }

  long long findans() {
    std::vector<bool> visited(n + 1, false);
    std::vector<int> col(n + 1);
    std::vector<int> grcol(3);
    grcol[1] = 1;
    long long res = 1;

    for (int c = 1; c < n + 1; c++) {
      if (!visited[c]) {
        col[c] = 1;
        if (!bfs(c, col, visited, grcol)) {
          return 0;
        } else {
          res = (res * (grcol[1] + grcol[2])) % 998244353;
        }
        grcol[2] = 0;
        grcol[1] = 1;
      }
    }
    return res;
  }

  bool bfs(int p, std::vector<int>& col, std::vector<bool>& visited, std::vector<int>& grcol) {
    std::queue<int> q;
    visited[p] = true;
    q.push(p);

    while (!q.empty()) {
      int itr = q.front();
      q.pop();
      int chcol = (col[itr] == 2) ? 1 : 2;

      for (int i = 0; i < nodes[itr].adj.size(); i++) {
        int k = nodes[itr].adj[i];
        if (col[k] == 0 || col[k] == chcol) {
          if (col[k] == 0) {
            col[k] = chcol;
            grcol[chcol]++;
          }
        } else {
          return false;
        }
        if (!visited[k]) {
          visited[k] = true;
          q.push(k);
        }
      }
    }
    return true;
  }
};

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  int t;
  std::cin >> t;

  while (t--) {
    int n, m;
    std::cin >> n >> m;

    graph mygraph(n);

    for (int c = 0; c < m; c++) {
      int a, b;
      std::cin >> a >> b;
      mygraph.addEdge(a, b);
    }

    std::cout << mygraph.findans() << std::endl;
  }

  return 0;
}