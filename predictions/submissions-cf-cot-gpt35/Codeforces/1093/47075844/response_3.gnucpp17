#include <iostream>
#include <vector>
#include <queue>
#include <sstream>
#include <bitset>

using namespace std;

class graphNode {
public:
    vector<int> adj;
    vector<int> wt;
    int a;
    graphNode() { a = 0; }
};

class graph {
public:
    int n;
    vector<graphNode> nodes;
    graph(int nodeNumber) {
        n = nodeNumber;
        nodes.resize(n + 1);
    }
    void addEdge(int a, int b, bool weighted = false, int weight = 0) {
        nodes[a].adj.push_back(b);
        nodes[b].adj.push_back(a);
        if (weighted) {
            nodes[a].wt.push_back(weight);
            nodes[b].wt.push_back(weight);
        }
    }
    long long findans() {
        bitset<200000> visited;
        vector<int> col(n + 1);
        vector<int> grcol(3);
        grcol[1] = 1;
        long long res = 1;
        for (int c = 1; c < n + 1; c++) {
            if (!visited[c]) {
                col[c] = 1;
                if (!bfs(c, col, visited, grcol)) {
                    return 0;
                } else {
                    res = (res * (powr[grcol[1]] + powr[grcol[2]])) % 998244353;
                }
                grcol[2] = 0;
                grcol[1] = 1;
            }
        }
        return res;
    }
    bool bfs(int p, vector<int>& col, bitset<200000>& visited, vector<int>& grcol) {
        queue<int> q;
        visited[p] = true;
        q.push(p);
        while (!q.empty()) {
            int itr = q.front();
            q.pop();
            int chcol = (col[itr] == 2) ? 1 : 2;
            for (int i = 0; i < nodes[itr].adj.size(); i++) {
                int k = nodes[itr].adj[i];
                if (col[k] == 0 || col[k] == chcol) {
                    if (col[k] == 0) {
                        col[k] = chcol;
                        grcol[chcol]++;
                    }
                } else {
                    return false;
                }
                if (!visited[k]) {
                    visited[k] = true;
                    q.push(k);
                }
            }
        }
        return true;
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    vector<long long> powr(3 * 100000);
    long long k = 1;
    for (int c = 0; c < 3 * 100000; c++) {
        powr[c] = k;
        k = (k * 2) % 998244353;
    }

    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        graph mygraph(n);
        for (int c = 0; c < m; c++) {
            int a, b;
            cin >> a >> b;
            mygraph.addEdge(a, b);
        }
        cout << mygraph.findans() << endl;
    }

    return 0;
}