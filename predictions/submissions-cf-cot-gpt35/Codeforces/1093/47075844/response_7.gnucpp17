#include <iostream>
#include <vector>
#include <queue>

using namespace std;

vector<char> split(const string &s, char c) {
  vector<char> v;
  string x;
  for (char i : s) {
    if (i == c) {
      v.emplace_back(x);
      x.clear();
    } else {
      x += i;
    }
  }
  v.emplace_back(x);
  return move(v);
}

class graphNode {
public:
  vector<int> adj;
  vector<int> wt;
};

class graph {
public:
  int n;
  vector<graphNode> nodes;

  graph(int nodeNumber) {
    n = nodeNumber;
    nodes.resize(n + 1);
  }

  void addEdge(int a, int b) {
    nodes[a].adj.push_back(b);
    nodes[b].adj.push_back(a);
  }

  long long findans() {
    vector<int> visited(n + 1, 0);
    vector<int> col(n + 1);
    vector<int> grcol(3);
    grcol[1] = 1;
    long long res = 1;

    for (int c = 1; c < n + 1; c++) {
      if (!visited[c]) {
        col[c] = 1;
        if (!bfs(c, col, visited, grcol)) {
          return 0;
        } else {
          long long product = powr[grcol[1]] + powr[grcol[2]];
          res = (res * product) % 998244353;
        }
        grcol[2] = 0;
        grcol[1] = 1;
      }
    }

    return res;
  }

  bool bfs(int p, vector<int> &col, vector<int> &visited, vector<int> &grcol) {
    queue<int> q;
    visited[p] = 1;
    q.push(p);

    while (!q.empty()) {
      int itr = q.front();
      q.pop();
      int chcol = (col[itr] == 2) ? 1 : 2;

      for (int i = 0; i < nodes[itr].adj.size(); i++) {
        int k = nodes[itr].adj[i];
        if (col[k] == 0 || col[k] == chcol) {
          if (col[k] == 0) {
            col[k] = chcol;
            grcol[chcol]++;
          }
        } else {
          return false;
        }

        if (!visited[k]) {
          visited[k] = 1;
          q.push(k);
        }
      }
    }

    return true;
  }
};

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  vector<int> powr(3 * 100000);
  long long k = 1;
  
  for (int c = 0; c < 3 * 100000; c++) {
    powr[c] = k;
    k = (k * 2) % 998244353;
  }

  long long o;
  cin >> o;

  while (o--) {
    int n, m;
    cin >> n >> m;
    graph mygraph(n);

    for (int c = 0; c < m; c++) {
      mygraph.addEdge(get<int>(), get<int>());
    }

    cout << mygraph.findans() << endl;
  }
}