#include <algorithm>
#include <iostream>
#include <unordered_set>
#include <vector>
using namespace std;

const int N = 1e5 + 1;

vector<unordered_set<int>> p(N);
vector<int> r(N);
vector<vector<int>> mp(N);

int get(int a, int c) {
  if (p[a].count(c))
    return a;
  return p[a].insert(c), a;
}

void unite(int a, int b, int c) {
  a = get(a, c);
  b = get(b, c);
  if (a == b)
    return;
  if (r[a] == r[b])
    r[a]++;
  if (r[a] > r[b])
    p[b] = a;
  else
    p[a] = b;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b, c);
  }

  int q;
  cin >> q;
  while (q--) {
    int a, b;
    cin >> a >> b;
    if (p[a].size() > p[b].size())
      swap(a, b);
    if (!mp[a][b]) {
      int res = 0;
      for (auto &c : p[a]) {
        res += p[b].count(c);
      }
      mp[a][b] = res;
    }
    cout << mp[a][b] << '\n';
  }

  return 0;
}