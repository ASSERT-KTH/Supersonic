To optimize the given C/C++ program, we can make the following modifications:

1. Remove unnecessary includes: The program includes several unnecessary headers such as `<chrono>`, `<ctime>`, `<iomanip>`, `<random>`, `<unordered_map>`, `<unordered_set>`, `<set>`, `<map>`, and `<queue>`. We can remove these includes to reduce the overhead.

2. Remove unnecessary macros: The program defines several unnecessary macros such as `try`, `ld`, `pii`, `pb`, `left`, `ignore`, `right`, and `all(c)`. We can remove these macros as they are not used in the code.

3. Use a more efficient data structure: The program uses unordered maps `p`, `r`, and `mp` to store key-value pairs. However, using unordered maps has a higher memory overhead and slower lookup time compared to other data structures. We can use a simple vector or array instead.

4. Optimize the `get` function: The `get` function is used to find the root of a given element in a disjoint-set. Currently, it uses recursion which can be inefficient for large inputs. We can optimize the function by implementing the path compression technique, which reduces the depth of the tree by directly linking each element to its root.

5. Optimize the `unite` function: The `unite` function is used to merge two disjoint sets. Currently, it checks if an element exists in the set using the `count` function, which has a linear time complexity. We can optimize this by using an array or vector to store the parent elements.

6. Remove unnecessary exit statement: The program uses `exit(0)` at the end, which is unnecessary as the program will naturally exit after the `main` function returns.

Here is the optimized C/C++ program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

const int N = 1e5 + 1, inf = 1e9, sq = 1e5, lg = 20;
vector<int> p[N], r[N], mp[N];

int get(int a, int c) {
  if (p[a][c] == a)
    return a;
  return p[a][c] = get(p[a][c], c);
}

void unite(int a, int b, int c) {
  if (p[a][c] == -1)
    p[a][c] = a;
  else
    p[a][c] = get(p[a][c], c);

  if (p[b][c] == -1)
    p[b][c] = b;
  else
    p[b][c] = get(p[b][c], c);

  if (a == b)
    return;

  if (r[a][c] == r[b][c])
    r[a][c]++;
  if (r[a][c] > r[b][c])
    p[b][c] = a;
  else
    p[a][c] = b;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, m;
  cin >> n >> m;

  for (int i = 0; i < N; i++) {
    p[i].resize(sq, -1);
    r[i].resize(sq, 0);
    mp[i].resize(sq, -1);
  }

  for (int i = 0; i < m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b, c);
  }

  int q;
  cin >> q;

  while (q--) {
    int a, b;
    cin >> a >> b;

    if (p[a].size() > p[b].size())
      swap(a, b);

    if (mp[a][b] != -1) {
      cout << mp[a][b] << endl;
      continue;
    }

    int res = 0;

    for (int c = 0; c < sq; c++) {
      if (p[a][c] != -1 && p[b][c] != -1 && get(a, c) == get(b, c))
        res++;
    }

    mp[a][b] = res;
    cout << res << '\n';
  }

  return 0;
}
```

Explanation of the optimizations:

1. Removed unnecessary includes.
2. Removed unnecessary macros.
3. Replaced unordered maps with vectors for `p`, `r`, and `mp` to reduce memory overhead.
4. Optimized the `get` function by implementing path compression.
5. Optimized the `unite` function by using arrays to store the parent elements.
6. Removed the unnecessary `exit(0)` statement at the end.