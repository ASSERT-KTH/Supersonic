#include <iostream>
#include <vector>
using namespace std;

struct DSU {
    vector<int> parent;
    vector<int> rank;
    
    DSU(int n) {
        parent.resize(n + 1);
        rank.resize(n + 1);
        
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
            rank[i] = 0;
        }
    }
    
    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    
    void unite(int x, int y) {
        x = find(x);
        y = find(y);
        
        if (x == y) {
            return;
        }
        
        if (rank[x] < rank[y]) {
            parent[x] = y;
        } else {
            parent[y] = x;
            if (rank[x] == rank[y]) {
                rank[x]++;
            }
        }
    }
};

struct Query {
    int a;
    int b;
    int result;
    
    Query(int a, int b) : a(a), b(b), result(0) {}
};

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    
    int n, m;
    cin >> n >> m;
    
    DSU dsu(n);
    
    for (int i = 0; i < m; i++) {
        int a, b, c;
        cin >> a >> b >> c;
        dsu.unite(a, b);
    }
    
    int q;
    cin >> q;
    
    vector<Query> queries;
    
    while (q--) {
        int a, b;
        cin >> a >> b;
        
        if (a > b) {
            swap(a, b);
        }
        
        queries.push_back(Query(a, b));
    }
    
    for (Query& query : queries) {
        if (query.result != 0) {
            cout << query.result << '\n';
            continue;
        }
        
        int res = 0;
        
        if (dsu.find(query.a) == dsu.find(query.b)) {
            res++;
        }
        
        query.result = res;
        cout << res << '\n';
    }
    
    return 0;
}