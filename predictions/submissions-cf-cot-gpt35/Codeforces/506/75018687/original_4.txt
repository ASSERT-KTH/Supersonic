Step 1: Replace `unordered_map` with `vector`

The current implementation is using `unordered_map` to store the parent and rank information for each node. However, using `unordered_map` can be inefficient in terms of memory usage and lookup time. Instead, we can use a `vector` to store the parent and rank information for each node.

To do this, we need to make the following modifications:

1. Replace `unordered_map<int, int> p[N], r[N], mp[N]` with `vector<int> p[N], r[N], mp[N]`.
2. Replace `if (p[a][c] == a)` with `if (p[a][c] == -1)` in the `get` function.
3. Replace `if (p[a].count(c))` with `if (p[a][c] != -1)` in the `unite` function.
4. Replace `if (p[b].count(c))` with `if (p[b][c] != -1)` in the `unite` function.
5. Replace `p[a][c] = a;` with `p[a][c] = -1;` in the `unite` function.
6. Replace `p[b][c] = b;` with `p[b][c] = -1;` in the `unite` function.
7. Replace `p[b][c] = a;` with `p[b][c] = get(a, c);` in the `unite` function.
8. Replace `p[a][c] = b;` with `p[a][c] = get(b, c);` in the `unite` function.
9. Replace `if (p[a].count(b))` with `if (p[a][b] != -1)` in the `main` function.
10. Replace `if (mp[a].count(b))` with `if (mp[a][b] != -1)` in the `main` function.
11. Replace `mp[a][b] = res;` with `mp[a][b] = mp[b][a] = res;` in the `main` function.

Here's the optimized program:

```cpp
#include <algorithm>
#include <assert.h>
#include <chrono>
#include <cstring>
#include <ctime>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <iomanip>
#include <iostream>
#include <map>
#include <math.h>
#include <queue>
#include <random>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#define try fck
#define ld double
#define pii pair<int, int>
#define pb push_back
#define left left228
#define ignore die
#define right right228
#define all(c) (c).begin(), (c).end()
#define fast                                                                   \
  ios_base::sync_with_stdio(false);                                                \
  cin.tie(NULL);                                                                  \
  cout.tie(NULL)
using namespace std;
const int N = 1e5 + 1, inf = 1e9, sq = 1e5, lg = 20;
vector<int> p[N], r[N], mp[N];
int get(int a, int c) {
  if (p[a][c] == -1)
    return a;
  return p[a][c] = get(p[a][c], c);
}
void unite(int a, int b, int c) {
  if (p[a][c] != -1)
    a = get(a, c);
  else
    p[a][c] = -1;
  if (p[b][c] != -1)
    b = get(b, c);
  else
    p[b][c] = -1;
  if (a == b)
    return;
  if (r[a][c] == r[b][c])
    r[a][c]++;
  if (r[a][c] > r[b][c])
    p[b][c] = a;
  else
    p[a][c] = b;
}
signed main() {
  fast;
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    p[i].assign(m + 1, -1);
    r[i].assign(m + 1, 0);
  }
  for (int i = 0; i < m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b, c);
  }
  int q;
  cin >> q;
  while (q--) {
    int a, b;
    cin >> a >> b;
    if (p[a][b] != -1) {
      cout << mp[a][b] << endl;
      continue;
    }
    int res = 0;
    for (auto &c : p[a]) {
      if (p[b][c] != -1)
        res += (get(a, c) == get(b, c));
    }
    mp[a][b] = mp[b][a] = res;
    cout << res << '\n';
  }
  exit(0);
}
```

Explanation:

In the original implementation, each `unordered_map` was used to store the parent and rank information for each node. However, using `unordered_map` can be inefficient in terms of memory usage and lookup time. By using a `vector`, we can eliminate the overhead of hash table operations and improve memory usage.

To achieve this, we modified the code to use a `vector<int>` for `p`, `r`, and `mp` arrays. We also initialized the `p` and `r` arrays with `-1` and `0` values, respectively. This ensures that the `p` array represents the parent information and the `r` array represents the rank information for each node.

Additionally, we made some minor modifications to handle the changes in the data structure. For example, we replaced the `count` function with a simple comparison to check if a value is not equal to `-1`.

Overall, these changes help optimize the program in terms of memory usage and lookup time.