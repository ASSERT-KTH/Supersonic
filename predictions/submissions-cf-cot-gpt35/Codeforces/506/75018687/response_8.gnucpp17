#include <iostream>
#include <unordered_map>
#include <vector>

const int N = 1e5 + 1;

std::unordered_map<int, int> p[N], r[N], mp[N];

int get(int a, int c) {
  if (p[a][c] == a)
    return a;

  return p[a][c] = get(p[a][c], c);
}

void unite(int a, int b, int c) {
  a = get(a, c);
  b = get(b, c);

  if (a == b)
    return;

  if (r[a][c] == r[b][c])
    r[a][c]++;

  if (r[a][c] > r[b][c])
    p[b][c] = a;
  else
    p[a][c] = b;
}

int main() {
  std::ios_base::sync_with_stdio(0);
  std::cin.tie(0);
  std::cout.tie(0);

  int n, m;
  std::cin >> n >> m;

  for (int i = 0; i < m; i++) {
    int a, b, c;
    std::cin >> a >> b >> c;
    unite(a, b, c);
  }

  int q;
  std::cin >> q;

  while (q--) {
    int a, b;
    std::cin >> a >> b;

    if (p[a].size() > p[b].size())
      std::swap(a, b);

    if (mp[a].count(b)) {
      std::cout << mp[a][b] << '\n';
      continue;
    }

    int res = 0;
    for (const auto& c : p[a]) {
      if (p[b].count(c.first))
        res += (get(a, c.first) == get(b, c.first));
    }

    mp[a][b] = res;
    std::cout << res << '\n';
  }

  return 0;
}