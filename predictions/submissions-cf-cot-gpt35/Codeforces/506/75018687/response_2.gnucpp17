#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

unordered_map<int, int> p, r;
unordered_map<int, unordered_map<int, int>> mp;

int get(int a) {
  if (p[a] == a)
    return a;
  return p[a] = get(p[a]);
}

void unite(int a, int b) {
  a = get(a);
  b = get(b);
  if (a == b)
    return;
  if (r[a] == r[b])
    r[a]++;
  if (r[a] > r[b])
    p[b] = a;
  else
    p[a] = b;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int n, m;
  cin >> n >> m;

  for (int i = 0; i < m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b);
  }

  int q;
  cin >> q;

  while (q--) {
    int a, b;
    cin >> a >> b;
    if (p.count(a) && p.count(b)) {
      a = get(a);
      b = get(b);
      if (p[a].size() > p[b].size())
        swap(a, b);
      if (mp[a].count(b)) {
        cout << mp[a][b] << endl;
        continue;
      }
      int res = 0;
      for (auto &c : p[a]) {
        if (p[b].count(c.first))
          res += (get(a) == get(b));
      }
      mp[a][b] = res;
      cout << res << '\n';
    } else {
      cout << 0 << '\n';
    }
  }

  return 0;
}