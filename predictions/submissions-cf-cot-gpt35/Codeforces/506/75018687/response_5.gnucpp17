#include <algorithm>
#include <iostream>
#include <vector>
#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
using namespace std;

const int N = 1e5 + 1;
const int inf = 1e9;
const int sq = 1e5;
const int lg = 20;

vector<int> p[N], r[N];
int res[N][N];

int get(int a, int c) {
  if (p[a][c] == a)
    return a;
  return p[a][c] = get(p[a][c], c);
}

void unite(int a, int b, int c) {
  if (p[a][c] == -1)
    p[a][c] = a;
  if (p[b][c] == -1)
    p[b][c] = b;
  
  a = get(a, c);
  b = get(b, c);

  if (a == b)
    return;
  
  if (r[a][c] == r[b][c])
    r[a][c]++;
  
  if (r[a][c] > r[b][c])
    p[b][c] = a;
  else
    p[a][c] = b;
}

int main() {
  fast;
  
  int n, m;
  cin >> n >> m;
  
  for (int i = 0; i <= n; i++) {
    p[i].resize(N, -1);
    r[i].resize(N, 0);
  }

  for (int i = 0; i < m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b, c);
  }

  int q;
  cin >> q;
  
  while (q--) {
    int a, b;
    cin >> a >> b;
    
    if (p[a].size() > p[b].size())
      swap(a, b);
    
    if (res[a][b] != 0) {
      cout << res[a][b] << endl;
      continue;
    }
    
    int result = 0;
    for (int c = 0; c < N; c++) {
      if (p[a][c] != -1 && p[b][c] != -1 && get(a, c) == get(b, c))
        result++;
    }
    
    res[a][b] = result;
    cout << result << endl;
  }
  
  return 0;
}