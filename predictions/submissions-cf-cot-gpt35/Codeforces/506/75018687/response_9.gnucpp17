#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

const int N = 1e5 + 1, inf = 1e9, sq = 1e5, lg = 20;
vector<int> p[N], r[N], mp[N];

int get(int a, int c) {
  if (p[a][c] == a)
    return a;
  return p[a][c] = get(p[a][c], c);
}

void unite(int a, int b, int c) {
  if (p[a][c] == -1)
    p[a][c] = a;
  else
    p[a][c] = get(p[a][c], c);

  if (p[b][c] == -1)
    p[b][c] = b;
  else
    p[b][c] = get(p[b][c], c);

  if (a == b)
    return;

  if (r[a][c] == r[b][c])
    r[a][c]++;
  if (r[a][c] > r[b][c])
    p[b][c] = a;
  else
    p[a][c] = b;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, m;
  cin >> n >> m;

  for (int i = 0; i < N; i++) {
    p[i].resize(sq, -1);
    r[i].resize(sq, 0);
    mp[i].resize(sq, -1);
  }

  for (int i = 0; i < m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b, c);
  }

  int q;
  cin >> q;

  while (q--) {
    int a, b;
    cin >> a >> b;

    if (p[a].size() > p[b].size())
      swap(a, b);

    if (mp[a][b] != -1) {
      cout << mp[a][b] << endl;
      continue;
    }

    int res = 0;

    for (int c = 0; c < sq; c++) {
      if (p[a][c] != -1 && p[b][c] != -1 && get(a, c) == get(b, c))
        res++;
    }

    mp[a][b] = res;
    cout << res << '\n';
  }

  return 0;
}