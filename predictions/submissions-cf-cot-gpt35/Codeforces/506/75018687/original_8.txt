The original program can be optimized in the following steps:

1. Remove unnecessary includes: The program includes several unnecessary headers such as `<chrono>`, `<iomanip>`, `<random>`, etc. These headers are not used in the program and can be removed to improve compilation time and reduce memory usage.

2. Remove unnecessary using directives: The program includes several unnecessary `using` directives such as `using namespace std`. It is generally recommended to avoid using `using namespace std` as it can lead to naming conflicts. Instead, we can use the `std::` prefix when referring to standard library functions and objects.

3. Optimize the `get` function: The `get` function is used to find the parent of a node in the disjoint set data structure. Currently, it uses recursion to find the parent. We can optimize this function by using path compression, which reduces the height of the tree. By updating the parent of each node to the root directly, subsequent calls to `get` will have a shorter path to traverse. This optimization can improve the running time of the program.

4. Optimize the `unite` function: The `unite` function is used to merge two sets in the disjoint set data structure. Currently, it checks if the elements already exist in the sets before merging them. We can optimize this function by removing these checks. By directly updating the parent and rank of the nodes, we can simplify the logic and reduce the number of map lookups. This optimization can improve the running time of the program.

5. Avoid unnecessary map lookups: The program uses maps to store the parent and rank information for each element. However, in some cases, the program unnecessarily performs map lookups. For example, in the `unite` function, it checks if an element exists in the map before performing a map lookup. We can avoid these unnecessary map lookups by directly updating the parent and rank information.

6. Avoid unnecessary map inserts: The program uses maps to store the parent and rank information for each element. However, in some cases, the program unnecessarily inserts elements into the map. For example, in the `unite` function, it inserts elements into the map even if they already exist. We can avoid these unnecessary map inserts by only inserting elements into the map if they do not already exist.

7. Optimize the main loop: The main loop of the program calculates the number of common elements between two sets. Currently, it iterates over the elements of one set and performs a map lookup for each element in the other set. We can optimize this loop by iterating over the smaller set and performing a map lookup for each element in the larger set. This optimization can improve the running time of the program.

Optimized program:

```cpp
#include <iostream>
#include <unordered_map>
#include <vector>

const int N = 1e5 + 1;

std::unordered_map<int, int> p[N], r[N], mp[N];

int get(int a, int c) {
  if (p[a][c] == a)
    return a;

  return p[a][c] = get(p[a][c], c);
}

void unite(int a, int b, int c) {
  a = get(a, c);
  b = get(b, c);

  if (a == b)
    return;

  if (r[a][c] == r[b][c])
    r[a][c]++;

  if (r[a][c] > r[b][c])
    p[b][c] = a;
  else
    p[a][c] = b;
}

int main() {
  std::ios_base::sync_with_stdio(0);
  std::cin.tie(0);
  std::cout.tie(0);

  int n, m;
  std::cin >> n >> m;

  for (int i = 0; i < m; i++) {
    int a, b, c;
    std::cin >> a >> b >> c;
    unite(a, b, c);
  }

  int q;
  std::cin >> q;

  while (q--) {
    int a, b;
    std::cin >> a >> b;

    if (p[a].size() > p[b].size())
      std::swap(a, b);

    if (mp[a].count(b)) {
      std::cout << mp[a][b] << '\n';
      continue;
    }

    int res = 0;
    for (const auto& c : p[a]) {
      if (p[b].count(c.first))
        res += (get(a, c.first) == get(b, c.first));
    }

    mp[a][b] = res;
    std::cout << res << '\n';
  }

  return 0;
}
```