#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;

typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vpii;
typedef vector<vi> vvi;

bool M = false;
vvi g;
unordered_map<pii, int> u;

void dfs(int node, int pv) {
  for (int child : g[node]) {
    if (u.find({node, child}) != u.end()) {
      if (u[{node, child}] != pv) {
        M = true;
        break;
      }
    } else {
      u[{node, child}] = pv;
      u[{child, node}] = pv ^ 1;
      dfs(child, pv ^ 1);
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n, m;
  cin >> n >> m;
  
  g.resize(n + 1);
  vpii edges(m);
  
  for (int i = 0; i < m; i++) {
    int j, k;
    cin >> j >> k;
    g[j].push_back(k);
    g[k].push_back(j);
    edges[i] = {j, k};
  }
  
  dfs(1, 0);
  
  if (M) {
    cout << "NO" << endl;
  } else {
    cout << "YES" << endl;
    for (int i = 0; i < m; i++) {
      cout << u[edges[i]];
    }
  }
  
  return 0;
}