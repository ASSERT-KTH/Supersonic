#include <iostream>
#include <vector>
#include <map>
using namespace std;

typedef pair<int, int> pl;

int N, M;
vector<int> g[200005], vis(200005);
map<pl, int> u;

void dfs(int node, int pv) {
    vis[node] = 1;
    vector<pair<int, int>> stack;
    stack.push_back({node, pv});
    
    while (!stack.empty()) {
        int node = stack.back().first;
        int pv = stack.back().second;
        stack.pop_back();
        
        for (int child : g[node]) {
            if (vis[child] == 0) {
                u[{node, child}] = pv;
                u[{child, node}] = pv ^ 1;
                vis[child] = 1;
                stack.push_back({child, pv ^ 1});
            } else {
                if (u.find({node, child}) != u.end()) {
                    if (u[{node, child}] != pv) {
                        M = 1;
                    }
                } else {
                    u[{node, child}] = pv;
                    u[{child, node}] = pv ^ 1;
                }
            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    int n, m;
    cin >> n >> m;
    
    vector<pl> v;
    for (int i = 0; i < m; i++) {
        int j, k;
        cin >> j >> k;
        g[j].push_back(k);
        g[k].push_back(j);
        v.push_back({j, k});
    }
    
    dfs(1, 0);
    
    if (M) {
        cout << "NO" << endl;
    } else {
        cout << "YES" << endl;
        for (int i = 0; i < m; i++) {
            cout << u[v[i]];
        }
    }
    
    return 0;
}