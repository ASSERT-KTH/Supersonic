#include <iostream>
#include <vector>
#include <unordered_map>

typedef long long int ll;
typedef std::pair<ll, ll> pl;
typedef std::vector<ll> vl;
typedef std::vector<pl> vpl;

const int cons = 200005;

ll N, M;
vl g[cons], vis(cons);
std::unordered_map<pl, ll> u;

void dfs(ll node, ll pv) {
  vis[node] = 1;
  for (ll child : g[node]) {
    if (vis[child] == 0) {
      u[{node, child}] = pv;
      u[{child, node}] = pv ^ 1;
      dfs(child, pv ^ 1);
    } else {
      if (!u.count({node, child})) {
        u[{node, child}] = pv;
        u[{child, node}] = pv ^ 1;
      } else if (u[{node, child}] != pv) {
        M = 1;
      }
    }
  }
}

int main() {
  std::ios_base::sync_with_stdio(0);
  std::cin.tie(0);
  std::cout.tie(0);
  
  ll n, m, i, j, k;
  std::cin >> n >> m;
  
  vpl v;
  for (i = 0; i < m; i++) {
    std::cin >> j >> k;
    g[j].push_back(k);
    g[k].push_back(j);
    v.push_back({j, k});
  }
  
  dfs(1, 0);
  
  if (M) {
    std::cout << "NO\n";
  } else {
    std::cout << "YES\n";
    for (i = 0; i < m; i++) {
      std::cout << u[v[i]];
    }
  }
  
  return 0;
}