#include <iostream>
#include <vector>
#include <map>
using namespace std;

typedef long long int ll;
typedef pair<ll, ll> pl;
typedef vector<ll> vl;
typedef vector<pl> vpl;

const ll inf = 1e18;
const ll cons = 200005;

ll N, M;
vl g[cons], vis(cons);
map<pl, ll> u;

void dfs(ll node, ll pv) {
  vis[node] = 1;
  for (ll child : g[node]) {
    if (vis[child] == 0) {
      u[{node, child}] = pv;
      u[{child, node}] = pv ^ 1;
      dfs(child, pv ^ 1);
    } else {
      if (u.find({node, child}) != u.end()) {
        if (u[{node, child}] != pv) {
          M = 1;
        }
      } else {
        u[{node, child}] = pv;
        u[{child, node}] = pv ^ 1;
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);

  ll n, m, j, k;
  cin >> n >> m;

  vpl v;
  for (ll i = 0; i < m; i++) {
    cin >> j >> k;
    g[j].emplace_back(k);
    g[k].emplace_back(j);
    v.emplace_back(j, k);
  }

  dfs(1, 0);

  if (M) {
    cout << "NO";
  } else {
    cout << "YES";
    for (auto p : v) {
      cout << u[p];
    }
  }

  return 0;
}