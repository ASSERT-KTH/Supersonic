#include <iostream>
#include <list>
#include <unordered_map>
#include <utility>

typedef long long int ll;

void dfs(ll node, ll pv, std::unordered_map<std::pair<ll, ll>, ll> &u,
         std::list<ll> g[], std::vector<bool> &vis, bool &M) {
  std::list<ll> stack;
  stack.push_back(node);

  while (!stack.empty()) {
    ll current = stack.back();
    stack.pop_back();

    if (!vis[current]) {
      vis[current] = true;
      for (ll child : g[current]) {
        if (!vis[child]) {
          u[{current, child}] = pv;
          u[{child, current}] = pv ^ 1;
          stack.push_back(child);
        } else {
          if (u.find({current, child}) != u.end()) {
            if (u[{current, child}] != pv) {
              M = true;
            }
          } else {
            u[{current, child}] = pv;
            u[{child, current}] = pv ^ 1;
          }
        }
      }
    }
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);

  ll n = 0, m = 0;
  std::cin >> n >> m;

  std::list<ll> g[n + 1];
  std::vector<bool> vis(n + 1, false);
  std::unordered_map<std::pair<ll, ll>, ll> u;

  for (ll i = 0; i < m; i++) {
    ll j, k;
    std::cin >> j >> k;
    g[j].push_back(k);
    g[k].push_back(j);
  }

  bool M = false;
  dfs(1, 0, u, g, vis, M);

  if (M) {
    std::cout << "NO\n";
  } else {
    std::cout << "YES\n";
    for (ll i = 0; i < m; i++) {
      std::cout << u[{v[i].first, v[i].second}];
    }
  }

  return 0;
}