The given program can be optimized by eliminating unnecessary operations and avoiding repeated calculations. Here is the step-by-step optimization:

1. Remove the inclusion of the `<bits/stdc++.h>` header, as it includes a large number of standard library headers unnecessarily.

2. Replace the `using namespace std;` line with specific `using` statements for the required symbols (`cin`, `cout`, `vector`, `pair`, `sort`, `map`, `endl`).

3. Replace the `signed main()` with `int main()` since `signed` is not necessary.

4. Move the declaration of `int T;` inside the `while` loop to avoid unnecessary memory usage.

5. Replace the `vector<pair<int, int>> vec(n);` line with `vector<pair<int, int>> vec; vec.reserve(n);` to avoid repeated memory allocations.

6. Instead of assigning `vec[i] = {a, 0};` and `vec[i] = {vec[i].first, b};` separately, assign both values in a single line using `vec[i] = make_pair(a, b);`.

7. Replace the range-based `for` loop `for (int i = 0; i < n; i++)` with an iterator-based `for` loop `for (auto it = vec.begin(); it != vec.end(); ++it)` to avoid indexing overhead.

8. Replace `sort(vec.begin(), vec.end());` with `sort(vec.begin(), vec.end(), [](const auto& a, const auto& b) { return a.first < b.first; });` to sort the vector based on the first element of each pair.

9. Replace the `map<int, int> timeSum;` with `unordered_map<int, int> timeSum;` since unordered maps generally have better performance.

10. Replace the range-based `for` loop `for (int i = 0; i < n; i++)` with an iterator-based `for` loop `for (auto it = vec.begin(); it != vec.end(); ++it)` to avoid indexing overhead.

11. Instead of using `timeSum[vec[i].first] += vec[i].second;` and `total += vec[i].second;` separately, combine them into a single line `timeSum[(*it).first] += (*it).second; total += (*it).second;`.

12. Replace `int ans = total;` with `int ans = INT_MAX;` to initialize the answer variable with the maximum possible value.

13. Replace the range-based `for` loop `for (int i = 0; i < n; i++)` with an iterator-based `for` loop `for (auto it = vec.begin(); it != vec.end(); ++it)` to avoid indexing overhead.

14. Replace `if (i > 0 && vec[i].first == vec[i - 1].first) continue;` with `if (it != vec.begin() && (*it).first == (*(it - 1)).first) continue;` to avoid accessing elements by index.

15. Replace `int temp = vec[i].first + max(0LL, (total - timeSum[vec[i].first] - vec[i].first));` with `int temp = (*it).first + max(0LL, (total - timeSum[(*it).first] - (*it).first));` to avoid accessing elements by index.

16. Replace `ans = min(ans, temp);` with `ans = min(ans, temp);` to avoid unnecessary re-assignment.

17. Replace `total -= timeSum[vec[i].first];` with `total -= timeSum[(*it).first];` to avoid accessing elements by index.

18. Finally, replace `cout << ans << endl;` with `cout << ans << '\n';` for better performance.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>
#include <unordered_map>

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);

    int T;
    std::cin >> T;
    while (T--) {
        int n;
        std::cin >> n;
        std::vector<std::pair<int, int>> vec;
        vec.reserve(n);

        for (int i = 0; i < n; i++) {
            int a, b;
            std::cin >> a >> b;
            vec.emplace_back(a, b);
        }

        std::sort(vec.begin(), vec.end(), [](const auto& a, const auto& b) {
            return a.first < b.first;
        });

        std::unordered_map<int, int> timeSum;
        int total = 0;
        for (auto it = vec.begin(); it != vec.end(); ++it) {
            timeSum[(*it).first] += (*it).second;
            total += (*it).second;
        }

        int ans = INT_MAX;
        for (auto it = vec.begin(); it != vec.end(); ++it) {
            if (it != vec.begin() && (*it).first == (*(it - 1)).first)
                continue;

            int temp = (*it).first + std::max(0LL, (total - timeSum[(*it).first] - (*it).first));
            ans = std::min(ans, temp);
            total -= timeSum[(*it).first];
        }

        std::cout << ans << '\n';
    }

    return 0;
}
```