#include <iostream>
#include <cstring>
using namespace std;

const int N = 1234;
long long dp[N][N];

int main() {
  int v1, v2, t, d;
  scanf("%d %d %d %d", &v1, &v2, &t, &d);
  
  memset(dp, -1, sizeof dp);
  
  // Base case
  dp[1][v1] = v1;

  // Dynamic programming
  for (int tt = 1; tt < t; ++tt) {
    for (int speed = 0; speed <= d; ++speed) {
      if (dp[tt][speed] != -1) {
        for (int i = 0; i <= d; ++i) {
          if (speed + i <= v1 + d - tt * d) {
            dp[tt + 1][speed + i] = max(dp[tt + 1][speed + i], dp[tt][speed] + speed + i);
          }
          if (speed - i >= v1 - d + tt * d) {
            dp[tt + 1][speed - i] = max(dp[tt + 1][speed - i], dp[tt][speed] + speed - i);
          }
        }
      }
    }
  }
  
  // Find the maximum value for the last time step
  long long maxScore = -1e10;
  for (int speed = 0; speed <= d; ++speed) {
    if (dp[t][speed] != -1) {
      maxScore = max(maxScore, dp[t][speed]);
    }
  }
  
  printf("%lld\n", maxScore);
  
  return 0;
}