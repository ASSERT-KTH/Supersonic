#include <iostream>
#include <cstring>
using namespace std;

const int N = 1234;
long long dp[N][N];
int v1, v2, t, d;

int main() {
  cin >> v1 >> v2 >> t >> d;

  // Initialize the dp array
  memset(dp, -1, sizeof dp);

  // Initialize the base case
  dp[t][v2] = v2;

  // Calculate the maximum speed for each time step
  for (int tt = t - 1; tt >= 1; --tt) {
    for (int speed = 0; speed <= d; ++speed) {
      long long x = -1e9;
      if (dp[tt + 1][speed + 1] != -1) {
        x = max(x, dp[tt + 1][speed + 1] + speed);
      }
      if (speed > 0 && dp[tt + 1][speed - 1] != -1) {
        x = max(x, dp[tt + 1][speed - 1] + speed);
      }
      dp[tt][speed] = x;
    }
  }

  // Output the maximum speed at time 1
  cout << v1 + dp[1][0] << endl;

  return 0;
}