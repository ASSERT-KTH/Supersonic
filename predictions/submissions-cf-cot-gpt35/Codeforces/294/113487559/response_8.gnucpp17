#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

constexpr long long MOD = 1000000007;
constexpr int M = 1001;

int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  vector<long long> pows(M);
  pows[0] = 1;
  pows[1] = 1;
  for (int i = 2; i <= 1000; i++) {
    pows[i] = (pows[i - 1] * 2) % MOD;
  }

  vector<vector<long long>> c(M, vector<long long>(M));
  c[0][0] = 1;
  for (int i = 1; i <= 1000; i++) {
    c[i][0] = 1;
    for (int j = 1; j <= i; j++) {
      c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % MOD;
    }
  }

  long long m, n;
  cin >> n >> m;

  vector<long long> a(n + 1);
  for (int i = 1; i <= n; i++) {
    cin >> a[i];
  }

  sort(a.begin() + 1, a.begin() + m + 1, greater<long long>());

  long long sum = 1;
  long long d = n - m;
  for (int i = 1; i <= m; i++) {
    sum = (sum * c[d][a[i] - a[i - 1] - 1]) % MOD;
    d -= a[i] - a[i - 1] - 1;
    sum = (sum * pows[a[i] - a[i - 1] - 1]) % MOD;
  }

  cout << sum << "\n";

  return 0;
}