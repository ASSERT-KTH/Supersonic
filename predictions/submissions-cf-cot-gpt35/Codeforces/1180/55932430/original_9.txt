To optimize the given program, we can make the following modifications:

1. Remove unnecessary includes: The line `#include <bits/stdc++.h>` includes a large number of unnecessary header files. We can remove this line and only include the necessary headers.

2. Avoid using `scanf()` and `printf()`: The program currently uses `scanf()` and `printf()` for input and output. These functions are slower than `cin` and `cout`. We can replace `scanf()` with `cin` and `printf()` with `cout`.

3. Avoid unnecessary variables: The variable `pos` is assigned a value but never used. We can remove this variable.

4. Avoid unnecessary calculations: The variable `cnt` is incremented at each iteration of the while loop. However, it is only used to check if `query <= cnt`. We can remove the `cnt` variable and directly check `query <= v.size()`.

5. Avoid unnecessary calculations: The variable `mx` is updated whenever a new maximum value is found. However, this variable is only used once to print the maximum value. We can remove the `mx` variable and directly access the last element of `finalarray` to print the maximum value.

6. Avoid unnecessary calculations: The variable `query` is reduced by `cnt + 1` and then modulo `(n - 1)` in the else part of the last while loop. We can remove the reduction by `cnt + 1` and directly modulo `n` instead of `(n - 1)`.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <deque>
using namespace std;

int pop_front(deque<int>& d) {
  int a = d.front();
  d.pop_front();
  return a;
}

int main() {
  int n, q;
  cin >> n >> q;

  deque<int> deq;
  vector<pair<int, int>> v;
  
  REP(i, n) {
    int temp;
    cin >> temp;
    deq.push_back(temp);
    if (deq[i] > deq[pos]) {
      pos = i;
    }
  }
  
  vector<int> finalarray;
  
  while (true) {
    if (deq.front() == deq[pos]) {
      while (!deq.empty()) {
        finalarray.push_back(pop_front(deq));
      }
      break;
    }
    int a = pop_front(deq);
    int b = pop_front(deq);
    if (a > b) {
      deq.push_front(a);
      deq.push_back(b);
    } else {
      deq.push_front(b);
      deq.push_back(a);
    }
    v.push_back(make_pair(a, b));
  }
  
  REP(i, q) {
    LL query;
    cin >> query;
    if (query <= v.size()) {
      cout << v[query - 1].first << " " << v[query - 1].second << endl;
    } else {
      query %= n;
      cout << deq[pos] << " " << finalarray[query] << endl;
    }
  }
  
  return 0;
}
```