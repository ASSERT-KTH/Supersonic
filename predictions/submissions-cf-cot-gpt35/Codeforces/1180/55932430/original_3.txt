The given program can be optimized in the following steps:

1. Remove unnecessary include statements: The `bits/stdc++.h` header includes a lot of unnecessary headers, which can slow down the compilation process. Only include the necessary headers that are actually used in the program.

2. Use `cin` instead of `scanf`: The program currently uses `scanf` to read integers, which can be slower than using `cin`.

3. Avoid unnecessary calculations and variables: The program calculates the maximum value and its position while reading the input. However, this information is not necessary for the rest of the program. We can remove this calculation to improve performance.

4. Avoid unnecessary copying of elements: The program currently copies all elements from the deque to a vector at the end. This copying operation is not necessary and can be avoided.

5. Optimize the loop for querying: The program currently uses a loop to process each query. However, we can calculate the result directly using simple arithmetic operations.

Here is the optimized program:

```cpp
#include <iostream>
#include <deque>
#include <vector>
using namespace std;

int main() {
  int n, q;
  cin >> n >> q;
  
  deque<int> deq;
  for (int i = 0; i < n; ++i) {
    int temp;
    cin >> temp;
    deq.push_back(temp);
  }
  
  int mx = deq.front();
  deq.pop_front();
  
  vector<int> finalarray;
  while (!deq.empty()) {
    int a = deq.front();
    deq.pop_front();
    int b = deq.front();
    deq.pop_front();
    
    if (a > b) {
      deq.push_front(a);
      deq.push_back(b);
    } else {
      deq.push_front(b);
      deq.push_back(a);
    }
    
    finalarray.push_back(a);
    finalarray.push_back(b);
  }
  
  for (int i = 0; i < q; ++i) {
    long long query;
    cin >> query;
    
    if (query <= finalarray.size()) {
      int idx = (query - 1) * 2;
      cout << finalarray[idx] << " " << finalarray[idx + 1] << endl;
    } else {
      query -= finalarray.size() + 1;
      query %= (n - 1) * 2;
      cout << mx << " " << finalarray[query] << endl;
    }
  }
  
  return 0;
}
```

This optimized program removes unnecessary include statements, uses `cin` instead of `scanf`, avoids unnecessary calculations and copying of elements, and optimizes the loop for querying.