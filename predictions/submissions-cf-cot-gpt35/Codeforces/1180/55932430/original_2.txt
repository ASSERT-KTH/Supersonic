The given program can be optimized in the following steps:

1. Remove unnecessary header inclusion: The program includes the `<bits/stdc++.h>` header, which is not a standard C++ header. It is recommended to include only the necessary standard library headers.

2. Avoid using `typedef` for standard types: The program uses `typedef` to define `unsigned long long` as `ULL` and `long long` as `LL`. It is better to directly use `unsigned long long` and `long long` instead of introducing additional type names.

3. Remove unnecessary macros: The program defines macros for loops (`FOR` and `REP`) but they are not used. It is better to remove these macros and use normal loop syntax.

4. Avoid using `scanf` and `printf`: The program uses `scanf` to read inputs and `printf` to print outputs. It is generally recommended to use `cin` and `cout` for input/output operations in C++ as they are type-safe and more convenient.

5. Optimize finding the maximum element: The program uses a linear search to find the maximum element in the deque. This can be optimized by keeping track of the maximum element and its position while inserting elements into the deque.

6. Optimize the finalarray construction: The program uses a while loop to empty the deque and store the elements in the finalarray. This can be optimized by using the `std::move` function to move the elements from the deque to the finalarray.

7. Avoid unnecessary pair construction: The program constructs pairs using `make_pair` for each iteration of the while loop. This can be avoided by directly pushing the values to the vectors.

8. Optimize the query calculation: The program calculates the query value by subtracting `cnt + 1` and then taking modulo `n - 1`. This can be optimized by directly taking modulo `n` and adding 1.

Here is the optimized program:

```cpp
#include <iostream>
#include <deque>
#include <vector>

using namespace std;

int main() {
  int n, q;
  cin >> n >> q;

  deque<int> deq;
  vector<int> v1, v2;

  int mx = -1;
  int pos;

  for (int i = 0; i < n; ++i) {
    int temp;
    cin >> temp;
    deq.push_back(temp);
    if (temp > mx) {
      mx = temp;
      pos = i;
    }
  }

  vector<int> finalarray;
  int cnt = 0;

  while (true) {
    if (deq.front() == mx) {
      finalarray = move(deq);
      break;
    }

    int a = deq.front();
    deq.pop_front();
    int b = deq.front();
    deq.pop_front();

    if (a > b) {
      deq.push_front(a);
      deq.push_back(b);
    } else {
      deq.push_front(b);
      deq.push_back(a);
    }

    v1.push_back(a);
    v2.push_back(b);
    cnt++;
  }

  for (int i = 0; i < q; ++i) {
    int query;
    cin >> query;

    if (query <= cnt) {
      cout << v1[query - 1] << " " << v2[query - 1] << endl;
    } else {
      query = (query - 1) % n;
      cout << mx << " " << finalarray[query] << endl;
    }
  }

  return 0;
}
```

This optimized program eliminates unnecessary header inclusion, macros, and typedefs. It also optimizes the max element search and the construction of finalarray. Lastly, it simplifies the query calculation.