To optimize the given program, we can make the following modifications:

1. Remove unnecessary header files: The program includes `<bits/stdc++.h>` and `<ext/pb_ds/assoc_container.hpp>` which are not needed for this specific code. We can remove these header files.

2. Remove unnecessary macros: The program defines many unnecessary macros that are not used in the code. We can remove these macros to simplify the code.

3. Avoid using `map` and `unordered_map`: The program uses `map<int, int>` and `unordered_map<int, int>` to store the frequency of elements. However, we can avoid using these data structures and use an array instead, as the range of elements is limited.

4. Avoid unnecessary calculations in the loop: The program calculates `arr[i] / k` and `arr[i] * k` repeatedly inside the loop. We can calculate these values outside the loop and store them in variables to avoid redundant calculations.

5. Optimize the loop conditions: The program uses three separate loops to iterate over the array. We can optimize this by combining the loops into a single loop.

6. Use `int` instead of `int32_t`: The program uses `int32_t` for the main function. We can replace it with `int` for simplicity.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <map>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  
  int n, k;
  cin >> n >> k;
  
  vector<int> arr(n);
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }
  
  int ans = 0;
  
  vector<int> pre(n, 0), suf(n, 0);
  pre[arr[0]]++;
  for (int i = n - 1; i >= 2; i--) {
    suf[arr[i]]++;
  }
  
  for (int i = 1; i < n - 1; i++) {
    int val1 = arr[i] / k;
    int val2 = arr[i] * k;
    
    if (arr[i] % k == 0 && pre[val1] > 0 && suf[val2] > 0) {
      ans += pre[val1] * suf[val2];
    }
    
    pre[arr[i]]++;
    suf[arr[i + 1]]--;
  }
  
  cout << ans << "\n";
}
```