Step 1: Remove unnecessary includes

The program includes `<bits/stdc++.h>`, which is not necessary for this program. We can remove it.

Step 2: Optimize the vector size

The program has a vector `v` of size 200010. However, the actual number of elements used in the vector depends on the input. Instead of using a fixed size, we can dynamically resize the vector based on the input values.

Step 3: Optimize the loop condition

The loop condition in the `bfs` function checks if the queue is empty using `!q.empty()`. However, this condition is checked again inside the loop using `if (!q.empty())`. We can remove the second check to improve performance.

Step 4: Optimize the loop variable

The loop variable `i` in the `for` loop inside the `bfs` function is of type `int`. However, the `size()` function of the vector returns a value of type `size_t`. To avoid a potential warning, we can change the type of `i` to `size_t`.

Step 5: Optimize the `scanf` calls

The program uses `scanf` to read input values. However, `scanf` is generally slower than other input methods like `cin`. We can replace the `scanf` calls with `cin` for better performance.

Step 6: Optimize the `printf` call

Similarly, the program uses `printf` to print the output value. We can replace the `printf` call with `cout` for better performance.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> v;
vector<bool> vis;
int nn, ne;

void bfs(int u) {
  nn = 0, ne = 0;
  vis[u] = true;
  queue<int> q;
  q.push(u);
  while (!q.empty()) {
    u = q.front();
    q.pop();
    nn++;
    if (v[u].size() == 2)
      ne++;
    vis[u] = true;
    for (size_t i = 0; i < v[u].size(); i++) {
      int p = v[u][i];
      if (!vis[p]) {
        vis[p] = true;
        q.push(p);
      }
    }
  }
}

int main() {
  int n, m, a, b, c = 0;
  cin >> n >> m;
  v.resize(n + 1);
  vis.resize(n + 1);
  while (m--) {
    cin >> a >> b;
    v[a].push_back(b);
    v[b].push_back(a);
  }
  for (int i = 1; i <= n; i++) {
    if (!vis[i]) {
      bfs(i);
      if (nn == ne)
        c++;
    }
  }
  cout << c << endl;
  return 0;
}
```