#include <iostream>
#include <vector>
#include <unordered_set>
#include <deque>
using namespace std;

vector<unordered_set<int>> v;
int nn, ne;

void bfs(int u) {
  nn = 0, ne = 0;
  deque<int> q;
  q.push_back(u);
  while (!q.empty()) {
    u = q.front();
    q.pop_front();
    nn++;
    if (v[u].size() == 2)
      ne++;
    for (int p : v[u]) {
      if (q.count(p) == 0) {
        q.push_back(p);
      }
    }
  }
}

int main() {
  int i, n, m, a, b, c = 0;
  cin >> n >> m;
  v.resize(n + 1);
  for (i = 0; i < m; i++) {
    cin >> a >> b;
    v[a].insert(b);
    v[b].insert(a);
  }
  for (i = 1; i <= n; i++) {
    if (v[i].empty()) {
      c++;
    } else if (v[i].size() == 1) {
      bfs(i);
      if (nn == ne)
        c++;
    }
  }
  cout << c << endl;
  return 0;
}