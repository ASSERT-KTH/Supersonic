The given program performs a breadth-first search (BFS) on a graph and counts the number of connected components where the number of nodes equals the number of edges.

To optimize the program, we can make the following modifications:

1. Avoid using the `bits/stdc++.h` header, which includes all standard headers. Instead, include only the necessary headers.
2. Replace the `scanf` and `printf` functions with the more efficient `std::cin` and `std::cout`.
3. Use a `std::array` instead of a `std::vector` for the `vis` array, as the number of elements is known in advance.
4. Remove the unnecessary `vis[u] = true` statement inside the `while` loop, as it is already set before the loop.
5. Use range-based `for` loop instead of indexing in the `for` loop inside the `bfs` function.
6. Initialize the `vis` array with `false` values using `std::fill` instead of a separate loop.

Here is the optimized program:

```cpp
#include <iostream>
#include <queue>
#include <array>

const int MAX_NODES = 200010;

std::vector<int> v[MAX_NODES];
std::array<bool, MAX_NODES> vis;

void bfs(int u) {
  int nn = 0, ne = 0;
  vis[u] = true;
  std::queue<int> q;
  q.push(u);
  while (!q.empty()) {
    u = q.front();
    q.pop();
    nn++;
    if (v[u].size() == 2)
      ne++;
    for (int p : v[u]) {
      if (!vis[p]) {
        vis[p] = true;
        q.push(p);
      }
    }
  }
}

int main() {
  int n, m, a, b, c = 0;
  std::cin >> n >> m;
  while (m--) {
    std::cin >> a >> b;
    v[a].push_back(b);
    v[b].push_back(a);
  }
  std::fill(vis.begin(), vis.begin() + n + 1, false);
  for (int i = 1; i <= n; i++) {
    if (!vis[i]) {
      bfs(i);
      if (nn == ne)
        c++;
    }
  }
  std::cout << c << std::endl;
  return 0;
}
```

By making these optimizations, the program should run faster and use less memory.