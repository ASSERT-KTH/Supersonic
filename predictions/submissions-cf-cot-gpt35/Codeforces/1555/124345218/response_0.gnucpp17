#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int dfs(vector<int>& sgtree, vector<int>& slow, int st, int en, int node, int rngst, int rngen, int value) {
  sgtree[node] += slow[node];
  slow[2 * node] += slow[node];
  slow[2 * node + 1] += slow[node];
  slow[node] = 0;
  if (st >= rngst && en <= rngen) {
    slow[node] += value;
    sgtree[node] += slow[node];
    slow[2 * node] += slow[node];
    slow[2 * node + 1] += slow[node];
    slow[node] = 0;
  } else if (en < rngst || st > rngen) {
    slow[node] += 0;
  } else {
    dfs(sgtree, slow, st, (st + en) / 2, 2 * node, rngst, rngen, value);
    dfs(sgtree, slow, ((st + en) / 2) + 1, en, 2 * node + 1, rngst, rngen, value);
    sgtree[node] = min(sgtree[2 * node] + slow[2 * node], sgtree[2 * node + 1] + slow[2 * node + 1]);
  }
  return 0;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int t = 1;
  cin >> t;
  while (t--) {
    int n, m;
    cin >> n >> m;
    if (m == 2) {
      cout << "0\n";
      continue;
    }
    vector<int> sgtree(4 * m), slow(4 * m);
    vector<pair<int, pair<int, int>>> ve;
    ve.reserve(n);
    for (int i = 0; i < n; i++) {
      int l, r, w;
      cin >> l >> r >> w;
      if (l == 1 && r == m) {
        cout << "0\n";
        continue;
      }
      ve.push_back({w, {l, r - 1}});
    }
    sort(ve.begin(), ve.end());
    int i = 0, j = -1, ans = 1000000;
    while (j < (int)ve.size() - 1) {
      if (sgtree[1] + slow[1] > 0) {
        dfs(sgtree, slow, 1, m - 1, 1, ve[i].second.first, ve[i].second.second, -1);
        ans = min(ans, ve[j].first - ve[i].first);
        i++;
      } else {
        j++;
        dfs(sgtree, slow, 1, m - 1, 1, ve[j].second.first, ve[j].second.second, 1);
      }
    }
    while (sgtree[1] + slow[1] > 0) {
      dfs(sgtree, slow, 1, m - 1, 1, ve[i].second.first, ve[i].second.second, -1);
      ans = min(ans, ve[j].first - ve[i].first);
      i++;
    }
    cout << ans << '\n';
  }
  return 0;
}