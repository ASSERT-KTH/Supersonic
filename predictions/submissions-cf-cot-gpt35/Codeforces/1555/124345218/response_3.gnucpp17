#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int sgtree[4000000];
int slow[4000000];
int n, m;
vector<array<int, 3>> ve;

int dfs(int st, int en, int node, int rngst, int rngen, int value) {
  sgtree[node] += slow[node];
  slow[2 * node] += slow[node];
  slow[2 * node + 1] += slow[node];
  slow[node] = 0;
  
  if (st >= rngst && en <= rngen) {
    slow[node] += value;
    sgtree[node] += slow[node];
    slow[2 * node] += slow[node];
    slow[2 * node + 1] += slow[node];
    slow[node] = 0;
  } else if (en < rngst || st > rngen) {
    // Do nothing
  } else {
    int mid = (st + en) / 2;
    dfs(st, mid, 2 * node, rngst, rngen, value);
    dfs(mid + 1, en, 2 * node + 1, rngst, rngen, value);
    sgtree[node] = min(sgtree[2 * node] + slow[2 * node], sgtree[2 * node + 1] + slow[2 * node + 1]);
  }
  
  return 0;
}

void del(int i) {
  dfs(1, m - 1, 1, ve[i][1], ve[i][2], -1);
}

void add(int i) {
  dfs(1, m - 1, 1, ve[i][1], ve[i][2], 1);
}

int check() {
  return sgtree[1] + slow[1];
}

void solve() {
  cin >> n >> m;
  
  if (m == 2) {
    cout << "0\n";
    return;
  }
  
  for (int i = 0; i < n; i++) {
    int l, r, w;
    cin >> l >> r >> w;
    
    if (l == 1 && r == m) {
      cout << "0\n";
      return;
    }
    
    ve.push_back({w, l, r - 1});
  }
  
  sort(ve.begin(), ve.end(), [](const array<int, 3>& a, const array<int, 3>& b) {
    return a[0] < b[0];
  });
  
  int ans = 1000000;
  for (int i = 0, j = -1; j < (int)ve.size(); ) {
    if (check() > 0) {
      del(i);
      ans = min(ans, ve[j][0] - ve[i][0]);
      i++;
    } else {
      j++;
      add(j);
    }
  }
  
  cout << ans << '\n';
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int t = 1;
  for (int tc = 1; tc <= t; tc++) {
    solve();
  }
  
  return 0;
}