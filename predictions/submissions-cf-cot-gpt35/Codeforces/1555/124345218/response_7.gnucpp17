#include <iostream>
#include <vector>
#include <array>
using namespace std;

const int maxn = 8000000;
int sgtree[maxn];
int slow[maxn];
int n, m;
vector<array<int, 3>> ve;

void dfs(int node) {
  sgtree[node] += slow[node];
  slow[2 * node] += slow[node];
  slow[2 * node + 1] += slow[node];
  slow[node] = 0;

  if (node >= maxn / 2) {
    return;
  }

  dfs(2 * node);
  dfs(2 * node + 1);
  sgtree[node] = min(sgtree[2 * node] + slow[2 * node], sgtree[2 * node + 1] + slow[2 * node + 1]);
}

void del(int i) {
  dfs(i + maxn / 2);
}

void add(int i) {
  dfs(i + maxn / 2);
}

int check() {
  return sgtree[1] + slow[1];
}

void solve() {
  cin >> n >> m;
  if (m == 2) {
    cout << "0\n";
    return;
  }
  ve.clear();
  for (int i = 0; i < n; i++) {
    int l, r, w;
    cin >> l >> r >> w;
    if (l == 1 && r == m) {
      cout << "0\n";
      return;
    }
    ve.push_back({w, l, r - 1});
  }

  int i = 0, j = -1, ans = 1000000;
  int curr_check = check();

  while (j < (int)ve.size() - 1) {
    if (curr_check > 0) {
      del(i);
      ans = min(ans, ve[j][0] - ve[i][0]);
      i++;
      curr_check = check();
    } else {
      j++;
      add(j);
      curr_check = check();
    }
  }

  while (curr_check > 0) {
    del(i);
    ans = min(ans, ve[j][0] - ve[i][0]);
    i++;
    curr_check = check();
  }

  cout << ans << '\n';
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int t = 1;
  for (int tc = 1; tc <= t; tc++) {
    solve();
  }
  return 0;
}