#include <iostream>
#include <vector>
#include <algorithm>
#include <limits>
#include <tuple>

using namespace std;

typedef long long ll;
const int N = 2e6 + 5;

int t[4 * N], push[4 * N];

void makepush(int v, int tl, int tr) {
  if (!push[v])
    return;

  if (tl != tr) {
    push[v * 2] += push[v];
    push[v * 2 + 1] += push[v];
    t[v * 2] += push[v];
    t[v * 2 + 1] += push[v];
  }

  push[v] = 0;
}

void add(int v, int tl, int tr, int l, int r, int x) {
  if (l > r)
    return;

  makepush(v, tl, tr);

  if (tl == l && tr == r) {
    t[v] += x;
    push[v] += x;
    return;
  }

  int tm = (tl + tr) / 2;
  add(v * 2, tl, tm, l, min(r, tm), x);
  add(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r, x);
  t[v] = min(t[v * 2], t[v * 2 + 1]);
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int n, m;
  cin >> n >> m;

  vector<tuple<int, int, int>> s;
  for (int i = 0; i < n; i++) {
    int l, r, w;
    cin >> l >> r >> w;
    s.emplace_back(w, l, r - 1);
  }

  sort(s.begin(), s.end(),
       [&](const tuple<int, int, int>& x, const tuple<int, int, int>& y) {
         return get<0>(x) < get<0>(y);
       });

  int ptr = -1, ans = numeric_limits<int>::max();

  for (int i = 0; i < n; i++) {
    if (i > 0)
      add(1, 1, m - 1, get<1>(s[i - 1]), get<2>(s[i - 1]), -1);

    while (++ptr < n && t[1] == 0) {
      add(1, 1, m - 1, get<1>(s[ptr]), get<2>(s[ptr]), +1);
    }

    if (t[1])
      ans = min(ans, get<0>(s[ptr]) - get<0>(s[i]));
  }

  cout << ans;

  return 0;
}