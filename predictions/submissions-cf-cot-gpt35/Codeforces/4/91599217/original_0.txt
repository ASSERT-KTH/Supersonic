The given program reads a number `n` and then reads `n` strings. It maintains a map `db` to store the frequency of each string. If a string is encountered for the first time, it prints "OK" and adds it to the map with a frequency of 1. Otherwise, it prints the string followed by its frequency and increments the frequency in the map.

To optimize the program, we can make the following modifications:

1. Remove unnecessary header files: The program does not use any functionality from the `<algorithm>` header file. Therefore, we can remove the `#include <algorithm>` line.

2. Replace `cin` and `cout` with `scanf` and `printf`: The `scanf` and `printf` functions are faster than `cin` and `cout` for input/output operations. By replacing `cin` with `scanf` and `cout` with `printf`, we can improve the program's running time.

3. Replace `map` with `unordered_map`: The `unordered_map` container provides faster lookup time compared to `map`. Since we don't need the strings to be sorted, we can use `unordered_map` instead of `map` to optimize the program's running time.

4. Remove the `ios::sync_with_stdio(0), cin.tie(0)` line: This line disables the synchronization between C and C++ standard streams, which can improve the program's running time. However, since we are using `scanf` and `printf` instead of `cin` and `cout`, this line is no longer necessary.

With these optimizations, the optimized program will look like this:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;

int main() {
  int n;
  scanf("%d", &n);
  unordered_map<string, int> db;
  while (n--) {
    char s[101];
    scanf("%s", s);
    if (db.find(s) == db.end()) {
      printf("OK\n");
      db[s] = 1;
    } else {
      printf("%s%d\n", s, db[s]++);
    }
  }
  return 0;
}
```