To optimize the given program, we can make the following modifications:

1. Remove unnecessary header files: The `<algorithm>` header file is not being used in the given program, so we can remove it.

2. Remove unnecessary `using namespace std;`: Instead of using the entire `std` namespace, we can prefix the necessary standard library identifiers with `std::`. This helps in avoiding naming conflicts and makes the code more readable.

3. Use `unordered_map` instead of `map`: Since we are only concerned about the presence or absence of keys in the map and not the order of insertion, we can use `std::unordered_map` which has a faster average case complexity for insertion and lookup operations compared to `std::map`.

4. Avoid unnecessary string copying: Instead of using `std::string` to store the input strings in the map, we can use `const char*` as the key type in the `unordered_map` to avoid unnecessary string copying.

5. Use prefix increment operator: Instead of using the post-increment operator (`db[s]++`), we can use the prefix increment operator (`++db[s]`) to increment the value associated with a key in the map. This avoids creating a temporary copy of the value.

Here's the optimized program:

```cpp
#include <iostream>
#include <unordered_map>

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);

  int n;
  std::cin >> n;

  std::unordered_map<const char*, int> db;
  std::string s;

  while (n--) {
    std::cin >> s;

    auto it = db.find(s.c_str());
    if (it == db.end()) {
      std::cout << "OK\n";
      db[s.c_str()] = 1;
    } else {
      std::cout << s << ++it->second << '\n';
    }
  }

  return 0;
}
```