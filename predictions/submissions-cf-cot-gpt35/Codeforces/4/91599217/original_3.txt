Explanation of the optimization steps:

1. Remove unnecessary include statements: The program includes the `<algorithm>` library, which is not used in the given code. We can remove this include statement to improve compilation time and reduce unnecessary code.

2. Remove unnecessary `using namespace std;`: The `using namespace std;` statement brings all the standard library names into the global namespace, which can lead to naming conflicts. It is considered a good practice to avoid this statement in larger projects. Since the given code is small, we can remove this statement to improve code readability.

3. Use a `unordered_map` instead of a `map`: The `map` container is implemented as a balanced binary search tree, which has a logarithmic time complexity for most operations. In this case, we can use an `unordered_map` instead, which provides constant time complexity for most operations. This will improve the performance of the program.

4. Use pre-increment (++i) instead of post-increment (i++): The `s << db[s]++` statement uses post-increment, which creates a temporary copy of the variable before incrementing it. Using pre-increment will eliminate the need for the temporary copy and improve performance.

5. Use reserve() method to preallocate memory for the unordered_map: By default, the unordered_map dynamically resizes itself as elements are inserted, which can lead to multiple reallocations and memory copying. We can use the `reserve()` method to preallocate memory for the expected number of elements, reducing the number of reallocations and improving memory usage.

Optimized code:

```cpp
#include <iostream>
#include <unordered_map>

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    int n;
    std::string s;
    std::cin >> n;

    std::unordered_map<std::string, int> db;
    db.reserve(n);

    while (n--) {
        std::cin >> s;
        auto it = db.find(s);
        if (it == db.end()) {
            std::cout << "OK" << '\n';
            db[s] = 1;
        } else {
            std::cout << s << ++it->second << '\n';
        }
    }

    return 0;
}
```