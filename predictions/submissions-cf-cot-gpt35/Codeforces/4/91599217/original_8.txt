Optimization Step by Step:

1. Remove unnecessary includes: The `<algorithm>` header is not used in the program, so it can be removed.

2. Remove unnecessary namespace usage: The `using namespace std;` statement can be removed to avoid polluting the global namespace.

3. Replace `cin/cout` with `scanf/printf`: The `scanf/printf` functions are generally faster than `cin/cout` for input and output operations. By using `scanf/printf` instead, we can improve the program's performance.

4. Replace `map` with `unordered_map`: The `unordered_map` container is generally faster than the `map` container for lookup operations. By using `unordered_map` instead, we can improve the program's performance.

5. Use reserve to avoid rehashing: By reserving the required size for the `unordered_map` container in advance, we can avoid unnecessary rehashing operations, which can improve the program's performance.

6. Use prefix increment operator: Instead of using the postfix increment operator (`db[s]++`), we can use the prefix increment operator (`++db[s]`) to increment the value in the map. This can be slightly faster.

Optimized code:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);

  int n;
  string s;
  scanf("%d", &n);

  unordered_map<string, int> db;
  db.reserve(n); // Reserve the required size for better performance

  while (n--) {
    cin >> s;
    auto it = db.find(s);
    if (it == db.end()) {
      printf("OK\n");
      db[s] = 1;
    } else {
      printf("%s%d\n", s.c_str(), ++it->second); // Use prefix increment operator
    }
  }

  return 0;
}
```