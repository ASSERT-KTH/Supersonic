The given program can be optimized by using an unordered_map instead of a map. The unordered_map provides constant-time average complexity for insertions and lookups, while the map provides logarithmic complexity.

Additionally, we can avoid using the find function to check if a string is present in the unordered_map. Instead, we can use the [] operator to directly access the value associated with the key. If the key is not present, it will be automatically inserted with a default value (in this case, 0).

Here is the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <unordered_map>
using namespace std;
int main() {
  ios::sync_with_stdio(0), cin.tie(0);
  int n;
  string s;
  cin >> n;
  unordered_map<string, int> db;
  while (n--) {
    cin >> s;
    if (db[s] == 0) {
      cout << "OK" << '\n';
    } else {
      cout << s << db[s] << '\n';
    }
    db[s]++;
  }
  return 0;
}
```

Explanation:
1. We replace `map<string, int>` with `unordered_map<string, int>` to improve the lookup time complexity.
2. We remove the `db.find(s) == db.end()` check and replace it with `db[s] == 0`. If the key `s` is not present in the unordered_map, `db[s]` will be automatically inserted with a default value of 0.
3. We move the `db[s] = 1` assignment inside the `if` condition, as the `db[s]++` will already increment the value in the `else` condition.
4. We increment `db[s]` after printing the value, as we want to print the current value before incrementing it.