The given program can be optimized by using a hash map instead of a map. This will result in faster lookup and insertion operations.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;

int main() {
  ios::sync_with_stdio(0), cin.tie(0);

  int n;
  string s;
  cin >> n;

  unordered_map<string, int> db;
  while (n--) {
    cin >> s;
    if (db.find(s) == db.end()) {
      cout << "OK" << '\n';
      db[s] = 1;
    } else {
      cout << s << db[s]++ << '\n';
    }
  }

  return 0;
}
```

Explanation:
- The `map` container in the original program is replaced with an `unordered_map` container.
- The `unordered_map` provides constant-time average complexity for lookup and insertion operations.
- The rest of the program remains the same.