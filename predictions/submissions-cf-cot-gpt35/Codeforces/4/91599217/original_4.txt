Explanation of optimization steps:
1. Remove unnecessary includes: The program includes the `<algorithm>` header, but there are no function calls from this header. Therefore, we can remove this include statement to improve the compilation time.
2. Avoid using `using namespace std;`: This statement brings all the names from the `std` namespace into the global namespace, which can potentially cause naming conflicts. It is considered a good practice to explicitly use the `std::` prefix for standard library types and functions.
3. Avoid unnecessary synchronization: The statement `ios::sync_with_stdio(0), cin.tie(0);` is used to synchronize the C++ standard streams with the C standard streams. However, in this program, there is no need for synchronization, so we can remove this line.
4. Avoid unnecessary map lookups: In the original program, the map `db` is used to check if a string is already present and then increment its count. However, the `map::find` function is called twice for each string, which is inefficient. We can use the `map::operator[]` to directly access the value and increment it if it exists, or create a new entry with a count of 1 if it doesn't exist.

Optimized code:

```cpp
#include <iostream>
#include <map>
using std::cin;
using std::cout;
using std::map;
using std::string;

int main() {
  int n;
  cin >> n;
  map<string, int> db;
  while (n--) {
    string s;
    cin >> s;
    if (db[s] == 0) {
      cout << "OK\n";
    } else {
      cout << s << db[s]++ << '\n';
    }
  }
  return 0;
}
```