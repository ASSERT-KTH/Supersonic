The given program uses a map to store a database of strings and their frequencies. For each input string, it checks if the string is already in the database using the `find()` function. If the string is not found, it outputs "OK" and adds the string to the database. If the string is found, it outputs the string followed by its frequency and increments the frequency.

To optimize the program, we can replace the `find()` function with the `operator[]` of the map, which will automatically create a new entry with a default value if the key is not found. This way, we can avoid the extra check using `find()`.

Here's the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <map>
using namespace std;
int main() {
  ios::sync_with_stdio(0), cin.tie(0);
  int n;
  string s;
  cin >> n;
  map<string, int> db;
  while (n--) {
    cin >> s;
    cout << (db[s]++ == 0 ? "OK" : s + to_string(db[s] - 1)) << '\n';
  }
  return 0;
}
```

Explanation of the optimization:
- We replaced `if (db.find(s) == db.end())` with `db[s]++ == 0` to check if the string is already in the database.
- If `db[s]++` is equal to 0, it means the string was not found in the database, so we output "OK". Otherwise, we output the string followed by its frequency (`s + to_string(db[s] - 1)`).
- By using `db[s]++`, we automatically create a new entry with a default value of 0 if the string is not found.
- This eliminates the need for the `find()` function and the extra check, resulting in a more optimized program in terms of running time.