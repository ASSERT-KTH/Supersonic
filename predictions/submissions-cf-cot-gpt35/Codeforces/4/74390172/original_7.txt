Step 1: Remove unnecessary headers

The program includes the `<bits/stdc++.h>` header, which is not a standard C/C++ header. It includes a lot of unnecessary headers, which can slow down the compilation process. We should remove this header and include only the necessary headers.

Step 2: Remove unused typedefs

The program defines typedefs for `ll`, `ull`, and `ld`, but they are not used anywhere in the code. We should remove these typedefs to reduce unnecessary code.

Step 3: Remove unused constants

The program defines constants `POSITIVE_INFINITY`, `NEGATIVE_INFINITY`, `MOD`, and `PI`, but they are not used anywhere in the code. We should remove these constants to reduce unnecessary code.

Step 4: Remove unused template functions

The program defines two template functions `bigMod` and `invMod`, but they are not used anywhere in the code. We should remove these functions to reduce unnecessary code.

Step 5: Remove unnecessary semicolon in the `#define` statement

The program defines a macro `endl` with a semicolon at the end. The semicolon is unnecessary and should be removed.

Step 6: Optimize the unordered_map

The program uses an unordered_map to store strings and their frequencies. We can optimize the unordered_map by reserving an initial capacity and setting a lower load factor.

Step 7: Optimize I/O streams

The program uses `sync_with_stdio(false)` to disable synchronization between C and C++ standard streams, which can speed up the I/O operations. We should also disable tying of cin and cout to improve performance.

Here is the optimized program:

```cpp
#include <iostream>
#include <string>
#include <unordered_map>
using namespace std;

const int N = 200005;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n;
  cin >> n;

  unordered_map<string, int> mp;
  mp.reserve(1 << 18);
  mp.max_load_factor(0.25);

  while (n--) {
    string ar;
    cin >> ar;

    auto it = mp.find(ar);
    if (it == mp.end()) {
      cout << "OK\n";
      mp[ar] = 1;
    } else {
      cout << ar << it->second << "\n";
      it->second++;
    }
  }

  return 0;
}
```