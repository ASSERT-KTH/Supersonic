To optimize the given program, we can make the following changes:

1. Remove unnecessary header files: The program includes `<bits/stdc++.h>` which includes a large number of header files. We can remove this line and include only the required header files.

2. Remove unnecessary typedefs: The program typedefs `ll`, `ull`, and `ld` which are not used. We can remove these typedefs.

3. Remove unnecessary constant declarations: The program declares constants `POSITIVE_INFINITY`, `NEGATIVE_INFINITY`, `MOD`, and `PI` which are not used. We can remove these constant declarations.

4. Remove unnecessary function templates: The program includes two unnecessary function templates `bigMod` and `invMod` which are not used. We can remove these function templates.

5. Use `'\n'` instead of `endl`: The program uses `endl` to end lines, which flushes the output stream each time. We can use `'\n'` instead, which is faster as it does not flush the output stream.

6. Use `reserve` and `max_load_factor` for unordered_map: The program uses `unordered_map` and we can optimize its memory usage by calling `reserve` to allocate memory in advance and `max_load_factor` to set the maximum load factor.

After applying these optimizations, the optimized program is as follows:

```cpp
#include <iostream>
#include <string>
#include <unordered_map>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  int n;
  std::cin >> n;

  std::unordered_map<std::string, int> mp;
  mp.reserve(1 << 18);
  mp.max_load_factor(0.25);

  while (n--) {
    std::string ar;
    std::cin >> ar;

    auto it = mp.find(ar);
    if (it == mp.end()) {
      std::cout << "OK\n";
      mp[ar] = 1;
    } else {
      std::cout << ar << it->second << '\n';
      it->second++;
    }
  }

  return 0;
}
```

This optimized program reduces unnecessary code and improves memory usage and runtime performance.