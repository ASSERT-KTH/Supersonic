Step 1: Remove unnecessary headers
The program includes the `<bits/stdc++.h>` header, which is not a standard C++ header and is not necessary for this program. We can remove it.

Step 2: Remove unused typedefs
The program defines `ll`, `ull`, and `ld` as typedefs, but they are not used in the program. We can remove these typedefs.

Step 3: Remove unnecessary using directive
The program has a `using namespace std;` directive, but it is not necessary as we can use the `std::` prefix when using standard library functions and types. We can remove this directive.

Step 4: Remove unnecessary semicolon
The program has a semicolon after the `#define endl '\n';` line, but it is not necessary. We can remove this semicolon.

Step 5: Remove unused constants
The program defines `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` constants, but they are not used in the program. We can remove these constants.

Step 6: Use const instead of #define
The program uses `#define` to define constants, but it is better to use const variables instead. We can replace the `#define` statements with const variables.

Step 7: Remove unnecessary template functions
The program defines two template functions `bigMod` and `invMod`, but they are not used in the program. We can remove these functions.

Step 8: Optimize unordered_map
The program uses an unordered_map to store strings and their counts. We can optimize the unordered_map by reserving an initial capacity and setting the maximum load factor to improve performance.

Step 9: Remove unnecessary return statement
The program has a return statement at the end of the main function, but it is not necessary as the main function will automatically return 0.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>

const int N = 200005;

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  int n;
  std::cin >> n;

  std::unordered_map<std::string, int> mp;
  mp.reserve(1 << 18);
  mp.max_load_factor(0.25);

  while (n--) {
    std::string ar;
    std::cin >> ar;

    auto it = mp.find(ar);
    if (it == mp.end()) {
      std::cout << "OK\n";
      mp[ar] = 1;
    } else {
      std::cout << ar << it->second << "\n";
      it->second++;
    }
  }

  return 0;
}
```