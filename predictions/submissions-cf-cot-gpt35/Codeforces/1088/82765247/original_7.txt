The given program is a C/C++ program that takes an integer `n` as input, followed by `n` integers. It then performs some operations on a vector `v` based on the input integers and prints the number and details of the performed operations.

To optimize this program for running time and memory usage, we can make the following modifications:

1. Remove unnecessary header files: The program includes the `<bits/stdc++.h>` header file which includes all the standard library header files. But it is unnecessary to include all of them for this program. We can remove this line and include only the necessary header files.

2. Remove unnecessary type definitions: The program defines typedefs for `lli`, `ulli`, and `ld` which are not used anywhere. We can remove these typedefs.

3. Remove unnecessary macros: The program defines several macros that are not used in the program, such as `nl`, `er`, `fast`, `test`, `f0`, `f1`, `pb`, `mp`, `fi`, `se`, `print`, `out`, `Y`, `N`. We can remove these macros.

4. Avoid unnecessary vector initialization: The program initializes the vector `v` with size `n+1`, but then overwrites the value at index 0 with -1. Since this value is never used, we can avoid initializing it and start the loop from `i = 1`.

5. Optimize the loop for `i`: The loop for `i` iterates from `n` to 1, but the loop can be optimized to iterate only till `v[1]`. This is because if `v[1]` is greater than 1, it will be handled separately in the loop, and if it is 1 or less, there is no need to iterate further.

6. Avoid unnecessary calculations and operations: The program performs some unnecessary calculations and operations in the loop. For example, in the `if` condition, it calculates `rem = (v[i] - i) % (n + 1)` and then adds `n + 1 - rem` to `v[j]`. Instead, we can directly subtract `i - v[i]` from `v[i]` and add it to `v[j]`. Similarly, in the `else` condition, we can directly subtract `i - v[i]` from `v[i]` and add it to `v[j]`.

7. Optimize the loop for printing the operations: The loop for printing the operations can be optimized by using `std::endl` instead of `"\n"` to flush the output buffer only once instead of each newline.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <utility>

int main() {
  int n;
  std::cin >> n;
  std::vector<int> v(n);
  std::vector<std::pair<int, std::pair<int, int>>> pp;

  for (int i = 0; i < n; i++) {
    std::cin >> v[i];
  }

  for (int i = n - 1; i >= 1; i--) {
    if (v[i] > i) {
      int rem = (v[i] - i) % n;
      pp.push_back({1, {i, n - rem}});
      for (int j = 0; j < i; j++) {
        v[j] += n - rem;
      }
    } else {
      pp.push_back({1, {i, i - v[i]}});
      for (int j = 0; j < i; j++) {
        v[j] += i - v[i];
      }
    }
  }
  
  pp.push_back({2, {n-1, n}});

  std::cout << pp.size() << std::endl;
  for (auto i : pp) {
    std::cout << i.first << " " << i.second.first << " " << i.second.second << std::endl;
  }
}
```