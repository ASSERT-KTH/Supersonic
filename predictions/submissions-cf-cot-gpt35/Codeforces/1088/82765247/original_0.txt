Step 1: Removing unnecessary headers and typedefs

The `#include <bits/stdc++.h>` header includes a lot of unnecessary standard library headers. We can replace it with specific headers that are actually needed. Additionally, the typedefs `lli`, `ulli`, and `ld` are not used in the program. We can remove them as well.

Step 2: Removing unnecessary macros

There are several macros defined in the program that are not used. We can remove them to simplify the code.

Step 3: Removing unnecessary output statements

There are several output statements that are not used. We can remove them to simplify the code.

Step 4: Simplifying the loops

The loops in the program can be simplified to make the code more readable and efficient.

Step 5: Replacing unnecessary vectors with variables

The program uses a vector `v` to store the input values, but it only uses the values from index 1 to `n`. We can replace this vector with a single variable to save memory.

Step 6: Simplifying the logic

The logic of the program can be simplified to reduce the number of operations and improve performance.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n;
  cin >> n;

  int v;
  vector<pair<int, pair<int, int>>> pp;

  for (int i = 1; i <= n; i++) {
    cin >> v;
    if (v > i) {
      int rem = (v - i) % (n + 1);
      pp.push_back({1, {i, n + 1 - rem}});
      v += n + 1 - rem;
    } else {
      pp.push_back({1, {i, i - v}});
      v += i - v;
    }
  }

  pp.push_back({2, {n, n + 1}});
  cout << pp.size() << "\n";

  for (auto i : pp) {
    cout << i.first << " " << i.second.first << " " << i.second.second << "\n";
  }

  return 0;
}
```