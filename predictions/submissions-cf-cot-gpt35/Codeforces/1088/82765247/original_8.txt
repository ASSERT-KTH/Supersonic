Step 1: Remove unnecessary headers
The program includes the `<bits/stdc++.h>` header, which is a non-standard header and includes a lot of unnecessary headers. We can remove it and include only the necessary headers.

Step 2: Remove unnecessary typedefs
The program typedefs `lli`, `ulli`, and `ld`, but they are not used in the program. We can remove them.

Step 3: Remove unnecessary macros
The program defines several macros that are not used. We can remove them.

Step 4: Remove unnecessary print statements
The program uses the `print` macro to print the value of variables, but it is not used. We can remove it.

Step 5: Optimize the loop for input
The program uses a loop to read the values into the vector, but it can be optimized by using `cin` directly inside the loop.

Step 6: Optimize the loop for updating vector values
The program uses a loop to update the vector values, but it can be optimized by using the `fill` function to update multiple values at once.

Step 7: Optimize the loop for printing pairs
The program uses a loop to print the pairs, but it can be optimized by using a range-based for loop.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <utility>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n;
  cin >> n;

  vector<int> v(n + 1);
  vector<pair<int, pair<int, int>>> pp;

  for (int i = 1; i <= n; i++) {
    cin >> v[i];
  }

  v[0] = -1;

  for (int i = n; i >= 1; i--) {
    if (v[i] > i) {
      int rem = (v[i] - i) % (n + 1);
      pp.push_back({1, {i, n + 1 - rem}});
      fill(v.begin() + 1, v.begin() + i + 1, v[i] + n + 1 - rem);
    } else {
      pp.push_back({1, {i, i - v[i]}});
      fill(v.begin() + 1, v.begin() + i + 1, v[i] + i - v[i]);
    }
  }

  pp.push_back({2, {n, n + 1}});

  cout << pp.size() << "\n";
  for (auto i : pp) {
    cout << i.first << " " << i.second.first << " " << i.second.second << "\n";
  }

  return 0;
}
```
