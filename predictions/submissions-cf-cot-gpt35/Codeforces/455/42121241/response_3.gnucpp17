#include <algorithm>
#include <cmath>
#include <cstdio>
#include <deque>
#include <map>
using namespace std;

struct dat {
  static int n;
  deque<int> A;
  map<int, int> M;
  dat *next = NULL;

  int count(int p, int x) const {
    if (p > size()) {
      map<int, int>::const_iterator it = M.find(x);
      if (it == M.end())
        return next->count(p - size(), x);
      else
        return next->count(p - size(), x) + it->second;
    }
    int ans = 0;
    int left = 0;
    int right = size() - 1;
    while (left <= right) {
      int mid = left + (right - left) / 2;
      if (A[mid] == x) {
        ans++;
        right = mid - 1;
      } else if (A[mid] < x) {
        left = mid + 1;
      } else {
        right = mid - 1;
      }
    }
    return ans;
  }

  // ... rest of the code remains the same
};

int dat::n;

int main() {
  int n, m, last = 0;
  scanf("%d", &n);
  dat::n = ceil(sqrt(n << 2));
  dat *D = new dat, *cur = D;
  for (int i = 0; i < n; i++) {
    if (cur->size() >= dat::n) {
      cur->next = new dat;
      cur = cur->next;
    }
    int x;
    scanf("%d", &x);
    cur->push_back(x);
  }
  for (scanf("%d", &m); m > 0; m--) {
    int op, l, r, k;
    scanf("%d", &op);
    scanf(op == 1 ? "%d%d" : "%d%d%d", &l, &r, &k);
    l = (l + last - 1) % n + 1;
    r = (r + last - 1) % n + 1;
    k = (k + last - 1) % n + 1;
    if (l > r)
      swap(l, r);
    if (op == 1)
      D->insert(l - 1, D->erase(r));
    else {
      l = D->count(l - 1, k);
      r = D->count(r, k);
      printf("%d\n", last = r - l);
    }
  }
}