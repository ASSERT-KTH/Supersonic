#include <cstdio>
#include <deque>
#include <map>
#include <cmath>

int main() {
  int n, m, last = 0;
  scanf("%d", &n);
  int dat_n = ceil(sqrt(n << 2));
  struct dat {
    std::deque<int> A;
    std::map<int, int> M;

    int count(int p, int x) const {
      if (p > size()) {
        auto it = M.find(x);
        if (it == M.end())
          return count(p - size(), x);
        else
          return count(p - size(), x) + it->second;
      }
      int ans = 0;
      for (auto it = A.begin(); it != A.begin() + p; ++it)
        ans += *it == x;
      return ans;
    }

    void insert(int p, int x) {
      if (p > size()) {
        insert(p - size(), x);
        return;
      }
      A.insert(A.begin() + p, x);
      M[x]++;
    }

    int erase(int p) {
      if (size() < p)
        return erase(p - size());
      auto it = A.begin() + p - 1;
      int x = *it;
      A.erase(it);
      if (--M[x] == 0)
        M.erase(x);
      return x;
    }

    void push_back(int x) {
      A.push_back(x);
      M[x]++;
    }

    void push_front(int x) {
      A.push_front(x);
      M[x]++;
    }

    int pop_back() {
      int x = A.back();
      A.pop_back();
      if (--M[x] == 0)
        M.erase(x);
      return x;
    }

    int pop_front() {
      int x = A.front();
      A.pop_front();
      if (--M[x] == 0)
        M.erase(x);
      return x;
    }

    int size() const { return A.size(); }
  };

  dat D;
  for (int i = 0; i < n; i++) {
    int x;
    scanf("%d", &x);
    D.push_back(x);
  }

  for (scanf("%d", &m); m > 0; m--) {
    int op, l, r, k;
    scanf("%d", &op);
    scanf(op == 1 ? "%d%d" : "%d%d%d", &l, &r, &k);
    l = (l + last - 1) % n + 1;
    r = (r + last - 1) % n + 1;
    k = (k + last - 1) % n + 1;
    if (l > r)
      std::swap(l, r);
    if (op == 1)
      D.insert(l - 1, D.erase(r));
    else {
      l = D.count(l - 1, k);
      r = D.count(r, k);
      printf("%d\n", last = r - l);
    }
  }

  return 0;
}