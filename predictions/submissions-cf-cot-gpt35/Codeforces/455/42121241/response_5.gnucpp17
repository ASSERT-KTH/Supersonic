#include <cstdio>
#include <deque>
#include <map>
using namespace std;

struct dat {
  static int n;
  deque<int> A;
  map<int, int> M;

  int count(int p, int x) const {
    if (p > size()) {
      auto it = M.find(x);
      if (it == M.end())
        return next->count(p - size(), x);
      else
        return next->count(p - size(), x) + it->second;
    }
    int ans = 0;
    for (int i = 0; i < p; i++)
      ans += A[i] == x;
    return ans;
  }

  void insert(int p, int x) {
    if (p > size()) {
      next->insert(p - size(), x);
      return;
    }
    int n = A.size();
    int i = (p + n - 1) % n;
    A.push_back(A[i]);
    M[A[i]]++;
    for (; i != p; i = (i + n - 1) % n) {
      swap(A[i], A[(i + n - 1) % n]);
      M[A[i]]++;
      M[A[(i + n - 1) % n]]--;
    }
    A[p] = x;
    M[x]++;
    split();
  }

  int erase(int p) {
    if (size() < p)
      return next->erase(p - size());
    p--;
    int n = A.size();
    int x = A[p];
    M[x]--;
    for (int i = p; i != (p + n - 1) % n; i = (i + 1) % n) {
      swap(A[i], A[(i + 1) % n]);
      M[A[i]]--;
      M[A[(i + 1) % n]]++;
    }
    A.pop_back();
    if (M[x] == 0)
      M.erase(x);
    merge();
    return x;
  }

  void push_back(int x) {
    A.push_back(x);
    M[x]++;
  }

  void push_front(int x) {
    A.push_front(x);
    M[x]++;
  }

  int pop_back() {
    int x = A.back();
    A.pop_back();
    M[x]--;
    if (M[x] == 0)
      M.erase(x);
    return x;
  }

  int pop_front() {
    int x = A.front();
    A.pop_front();
    M[x]--;
    if (M[x] == 0)
      M.erase(x);
    return x;
  }

  int size() const {
    return A.size();
  }

  void split() {
    if (size() < n << 1)
      return;
    dat tmp;
    while (size() > n) {
      tmp.push_front(pop_back());
    }
    tmp.next = next;
    next = new dat(tmp);
  }

  void merge() {
    if (next == NULL || size() + next->size() > n)
      return;
    dat* tmp = next;
    while (next->size() > 0)
      push_back(tmp->pop_front());
    next = tmp->next;
    delete tmp;
  }

  void print() const {
    for (int x : A)
      printf("%3d", x);
    if (next == NULL)
      printf("\n");
    else
      next->print();
  }

  dat() : next(NULL) {}
  dat(const dat& other) : A(other.A), M(other.M), next(NULL) {}

  ~dat() {
    delete next;
  }
};

int dat::n;

int main() {
  int n, m, last = 0;
  scanf("%d", &n);
  dat::n = (int)ceil(sqrt(n << 2));
  dat D;
  for (int i = 0; i < n; i++) {
    int x;
    scanf("%d", &x);
    D.push_back(x);
  }
  for (scanf("%d", &m); m > 0; m--) {
    int op, l, r, k;
    scanf("%d", &op);
    scanf(op == 1 ? "%d%d" : "%d%d%d", &l, &r, &k);
    l = (l + last - 1) % n + 1;
    r = (r + last - 1) % n + 1;
    k = (k + last - 1) % n + 1;
    if (l > r)
      swap(l, r);
    if (op == 1)
      D.insert(l - 1, D.erase(r));
    else {
      l = D.count(l - 1, k);
      r = D.count(r, k);
      printf("%d\n", last = r - l);
    }
  }
}