The given program calculates and outputs the value of `l` for each test case. The calculation of `l` is done using a binary search algorithm, where the initial range is [0, 200] and the loop continues until the range becomes small enough.

To optimize the program for running time and memory usage, we can make the following modifications:

1. Remove unnecessary includes: The program includes `<bits/stdc++.h>` which is not standard and includes a large number of unnecessary headers. We can remove this line and include only the necessary headers.

2. Remove unnecessary macros: The program defines macros for `int` and `rep` which are not necessary. We can remove these macros and use the standard types and loops instead.

3. Remove unnecessary function: The `check` function is not necessary as it is only used once in the loop. We can directly use the condition in the loop instead.

4. Optimize the binary search loop: The binary search loop can be optimized by using a condition `r - l > esp` instead of `rep(i, 0, 200)`. This condition ensures that the loop continues until the range becomes small enough, based on a small epsilon value `esp`.

Here is the optimized program:

```cpp
#include <iostream>
#include <iomanip>
#include <cmath>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  
  const double pi = acos(-1);
  const double esp = 1e-8;

  int ct;
  std::cin >> ct;
  while (ct--) {
    int n;
    std::cin >> n;

    double angle = (pi / n);
    double c = 1 / std::sqrt(2 - 2 * std::cos(angle));
    double l = 0, r = 200;

    while (r - l > esp) {
      double m = (r + l) * 0.5;
      bool ok = true;

      for (int j = 0; j < 2 * n; ++j) {
        double x = c * std::cos(j * angle + pi / 4);
        double y = c * std::sin(j * angle + pi / 4);
        if (!(x >= -m / 2 && x <= m / 2 && y >= -m / 2 && y <= m / 2)) {
          ok = false;
          break;
        }
      }

      if (ok)
        r = m;
      else
        l = m;
    }

    std::cout << std::setprecision(9) << std::fixed << l << "\n";
  }
  return 0;
}
```

This optimized program removes unnecessary includes and macros, removes the `check` function, and optimizes the binary search loop. It should have improved running time and memory usage compared to the original program.