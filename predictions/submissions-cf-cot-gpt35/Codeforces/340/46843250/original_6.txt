Optimization steps:

1. Remove unnecessary includes: The program includes the entire `<bits/stdc++.h>` library, which is not recommended. We should only include the necessary headers.

2. Remove unnecessary macros: The program defines macros for functions that are not used. We should remove these macros to improve readability.

3. Remove unnecessary typedefs: The program defines typedefs for types that are not used. We should remove these typedefs to improve readability.

4. Remove unnecessary code: The program contains unused variables and functions. We should remove these unused elements to improve readability.

5. Optimize loop iterations: The program uses a for loop to insert elements into a multiset. We can optimize this by using a range-based for loop, which is more efficient.

Here is the optimized program:

```cpp
#include <iostream>
#include <set>
#include <vector>
using namespace std;

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);

  int n;
  cin >> n;
  vector<long long> a(n);
  for (int i = 0; i < n; i++)
    cin >> a[i];

  multiset<long long> s;
  for (long long num : a) {
    auto it = s.lower_bound(num);
    if (it != s.end())
      s.erase(it);
    s.insert(num);
  }

  cout << s.size() << endl;

  return 0;
}
```

Explanation of optimization steps:

1. Removed unnecessary includes: Only include the necessary headers for the program.

2. Removed unnecessary macros: Removed macros that were not used.

3. Removed unnecessary typedefs: Removed typedefs for types that were not used.

4. Removed unnecessary code: Removed unused variables and functions.

5. Optimized loop iterations: Replaced the for loop with a range-based for loop to insert elements into the multiset. This is more efficient and improves readability.