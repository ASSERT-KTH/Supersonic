Step 1: Remove unnecessary includes
The `<bits/stdc++.h>` header file is not a standard C++ header file and may not be available on all compilers. It is better to include only the necessary header files.

Step 2: Remove unnecessary macros
The macros defined in the code are not used in the program. They can be removed to simplify the code.

Step 3: Remove unnecessary typedefs
The typedefs defined in the code are not used in the program. They can be removed to simplify the code.

Step 4: Optimize the loop
Instead of using a `multiset` to keep track of the numbers, we can use a `set` to store only unique numbers. We can modify the loop to insert the number into the set only if it is not already present. This will reduce the number of operations required and improve the performance.

Step 5: Simplify the code
We can simplify the code by removing unnecessary function definitions and modifying the `main` function to directly call the `Main` function.

Here is the optimized code:

```cpp
#include <iostream>
#include <set>
using namespace std;

int Main() {
  int n;
  cin >> n;
  set<int> s;
  for (int i = 0; i < n; i++) {
    int x;
    cin >> x;
    if (s.find(x) == s.end()) {
      s.insert(x);
    }
  }
  cout << s.size();
  return 0;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  Main();
  return 0;
}
```