#include <iostream>
#include <vector>
#include <stack>
using namespace std;

vector<int> v1[200010], v2[200010];
int cost[200010];
int par[200010];
bool vis[200010];
stack<int> st;

void dfs(int& source) {
    vis[source] = true;
    for (int& i : v1[source]) {
        if (!vis[i]) {
            dfs(i);
        }
    }
    st.push(source);
}

void dfs2(int& source, int& val) {
    int temp = cost[source];
    vis[source] = false;
    par[source] = val;
    for (int& i : v2[source]) {
        if (vis[i]) {
            dfs2(i, val);
        }
    }
}

int main() {
    int n;
    cin >> n;

    for (int i = 0; i < 200010; i++) {
        par[i] = i;
        v1[i].reserve(n); // Reserve memory for better performance
        v2[i].reserve(n); // Reserve memory for better performance
    }

    for (int i = 1; i <= n; i++) {
        cin >> cost[i];
    }

    for (int i = 1; i <= n; i++) {
        int x;
        cin >> x;
        v1[i].push_back(x);
        v2[x].push_back(i);
    }

    long long ans = 0;

    for (int i = 1; i <= n; i++) {
        if (!vis[i]) {
            dfs(i);
        }
    }

    while (!st.empty()) {
        int top = st.top();
        st.pop();
        if (vis[top]) {
            int temp = cost[top];
            dfs2(top, top);
            cost[top] = temp;
            ans += temp;
        }
    }

    for (int i = 0; i < 200010; i++) {
        for (int& child : v1[i]) {
            if (par[i] != par[child]) {
                ans -= cost[par[i]];
                cost[par[i]] = 0;
            }
        }
    }

    cout << ans << endl;

    return 0;
}