#include <iostream>
#include <vector>
#include <stack>

using namespace std;

const int MAX_N = 200010;

vector<int> v1[MAX_N];
vector<int> v2[MAX_N];
int cost[MAX_N];
int par[MAX_N];
bool vis[MAX_N];
stack<int> st;

long long temp;

void dfs(int source) {
  vis[source] = true;
  for (int v : v1[source]) {
    if (!vis[v]) {
      dfs(v);
    }
  }
  st.push(source);
}

void dfs2(int source, int val) {
  temp = min(temp, static_cast<long long>(cost[source]));
  vis[source] = false;
  par[source] = val;
  for (int v : v2[source]) {
    if (vis[v]) {
      dfs2(v, val);
    }
  }
}

int main() {
  int n;
  scanf("%d", &n);
  
  for (int i = 0; i < MAX_N; i++) {
    par[i] = i;
    v1[i].reserve(MAX_N);
    v2[i].reserve(MAX_N);
  }
  
  for (int i = 1; i <= n; i++) {
    scanf("%d", &cost[i]);
  }
  
  for (int i = 1; i <= n; i++) {
    int x;
    scanf("%d", &x);
    v1[i].emplace_back(x);
    v2[x].emplace_back(i);
  }
  
  long long ans = 0;
  
  for (int i = 1; i <= n; i++) {
    if (!vis[i]) {
      dfs(i);
    }
  }
  
  while (!st.empty()) {
    int top = st.top();
    st.pop();
    if (vis[top]) {
      temp = 10000000000;
      dfs2(top, top);
      cost[top] = temp;
      ans += temp;
    }
  }
  
  for (int i = 0; i < MAX_N; i++) {
    for (int j = 0; j < v1[i].size(); j++) {
      int child = v1[i][j];
      if (par[i] != par[child]) {
        ans -= cost[par[i]];
        cost[par[i]] = 0;
      }
    }
  }
  
  cout << ans << endl;
  
  return 0;
}