#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
using namespace std;

vector<int> v1[200010], v2[200010];
vector<int> cost(200010);
vector<int> par(200010);
vector<bool> vis(200010);
stack<int> st;

void dfs(int source) {
  vis[source] = true;
  for (int i : v1[source]) {
    if (!vis[i]) {
      dfs(i);
    }
  }
  st.push(source);
}

void dfs2(int source, int val) {
  int temp = 10000000000;
  vis[source] = false;
  par[source] = val;
  for (int i : v2[source]) {
    if (vis[i]) {
      dfs2(i, val);
    }
  }
  cost[val] = min(cost[val], temp);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n;
  cin >> n;
  for (int i = 1; i <= n; i++) {
    cin >> cost[i];
  }
  for (int i = 1; i <= n; i++) {
    int x;
    cin >> x;
    v1[i].emplace_back(x);
    v2[x].emplace_back(i);
  }

  long long ans = 0;
  for (int i = 1; i <= n; i++) {
    if (!vis[i]) {
      dfs(i);
    }
  }
  while (!st.empty()) {
    int top = st.top();
    st.pop();
    if (vis[top]) {
      dfs2(top, top);
      ans += cost[top];
    }
  }

  for (int i = 1; i <= n; i++) {
    for (int child : v1[i]) {
      if (par[i] != par[child]) {
        ans -= cost[par[i]];
        cost[par[i]] = 0;
      }
    }
  }

  cout << ans << endl;
  return 0;
}