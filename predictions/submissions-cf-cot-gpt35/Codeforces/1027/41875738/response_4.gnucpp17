#include <iostream>
#include <vector>
#include <stack>
using namespace std;

vector<int> v1[200010], v2[200010];
int cost[200010];
int par[200010];
bool vis[200010];
stack<int> st;

void dfs(int source) {
  vis[source] = true;
  for (int i = 0, size = v1[source].size(); i < size; i++) {
    if (!vis[v1[source][i]]) {
      dfs(v1[source][i]);
    }
  }
  st.push(source);
}

void dfs2(int source, int val) {
  ll temp = cost[source];
  vis[source] = false;
  par[source] = val;
  for (int i = 0, size = v2[source].size(); i < size; i++) {
    int child = v2[source][i];
    if (vis[child]) {
      dfs2(child, val);
    }
  }
}

int main() {
  int n;
  cin >> n;

  for (int i = 1; i <= n; i++) {
    cin >> cost[i];
  }
  for (int i = 1; i <= n; i++) {
    int x;
    cin >> x;
    v1[i].push_back(x);
    v2[x].push_back(i);
  }

  ll ans = 0;
  for (int i = 1; i <= n; i++) {
    if (!vis[i])
      dfs(i);
  }

  while (!st.empty()) {
    int top = st.top();
    st.pop();
    if (vis[top]) {
      dfs2(top, top);
      ans += cost[top];
    }
  }

  for (int i = 1; i <= n; i++) {
    for (int j = 0, size = v1[i].size(); j < size; j++) {
      int child = v1[i][j];
      if (par[i] != par[child]) {
        ans -= cost[par[i]];
        cost[par[i]] = 0;
      }
    }
  }

  cout << ans << endl;
  return 0;
}