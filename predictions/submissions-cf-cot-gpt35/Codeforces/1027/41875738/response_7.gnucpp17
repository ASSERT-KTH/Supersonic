#include <iostream>
#include <vector>
using namespace std;

void dfs(const vector<vector<int>>& v1, vector<bool>& vis, vector<int>& order, int source) {
    vis[source] = true;
    for (int adj : v1[source]) {
        if (!vis[adj]) {
            dfs(v1, vis, order, adj);
        }
    }
    order.push_back(source);
}

void dfs2(const vector<vector<int>>& v2, vector<bool>& vis, vector<int>& cost, vector<int>& par, int& temp, int source, int& val) {
    temp = min(temp, cost[source]);
    vis[source] = false;
    par[source] = val;
    for (int adj : v2[source]) {
        if (vis[adj]) {
            dfs2(v2, vis, cost, par, temp, adj, val);
        }
    }
}

int main() {
    int n;
    cin >> n;
    
    vector<int> cost(n + 1);
    for (int i = 1; i <= n; i++) {
        cin >> cost[i];
    }
    
    vector<vector<int>> v1(n + 1), v2(n + 1);
    for (int i = 1; i <= n; i++) {
        int x;
        cin >> x;
        v1[i].push_back(x);
        v2[x].push_back(i);
    }
    
    vector<bool> vis(n + 1, false);
    vector<int> order;
    for (int i = 1; i <= n; i++) {
        if (!vis[i]) {
            dfs(v1, vis, order, i);
        }
    }
    
    long long int ans = 0;
    vector<int> par(n + 1);
    for (int i = n - 1; i >= 0; i--) {
        int top = order[i];
        if (vis[top]) {
            int temp = 10000000000;
            dfs2(v2, vis, cost, par, temp, top, top);
            cost[top] = temp;
            ans += temp;
        }
    }
    
    for (int i = 1; i <= n; i++) {
        for (int child : v1[i]) {
            if (par[i] != par[child]) {
                ans -= cost[par[i]];
                cost[par[i]] = 0;
            }
        }
    }
    
    cout << ans << endl;
    
    return 0;
}