#include <iostream>
#include <vector>
#include <stack>
using namespace std;

vector<int> v1[200010], v2[200010];
vector<int> cost(200010), par(200010);
vector<bool> vis(200010);
stack<int> st;

void dfs(int source) {
  vis[source] = true;
  for (int i = 0; i < v1[source].size(); i++) {
    if (!vis[v1[source][i]]) {
      dfs(v1[source][i]);
    }
  }
  st.push(source);
}

void dfs2(int source, int val) {
  vis[source] = false;
  par[source] = val;
  for (int i = 0; i < v2[source].size(); i++) {
    if (vis[v2[source][i]]) {
      dfs2(v2[source][i], val);
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  int n;
  cin >> n;

  cost.reserve(n + 1);
  par.reserve(n + 1);
  vis.reserve(n + 1);

  for (int i = 1; i <= n; i++) {
    cin >> cost[i];
  }

  for (int i = 1; i <= n; i++) {
    int x;
    cin >> x;
    v1[i].emplace_back(x);
    v2[x].emplace_back(i);
  }

  long long ans = 0;

  for (int i = 1; i <= n; i++) {
    if (!vis[i]) {
      dfs(i);
    }
  }

  while (!st.empty()) {
    int top = st.top();
    st.pop();
    if (vis[top]) {
      int temp = 10000000000;
      dfs2(top, top);
      cost[top] = temp;
      ans += temp;
    }
  }

  for (int i = 1; i <= n; i++) {
    for (int j = 0; j < v1[i].size(); j++) {
      int child = v1[i][j];
      if (par[i] != par[child]) {
        ans -= cost[par[i]];
        cost[par[i]] = 0;
      }
    }
  }

  cout << ans << endl;
  return 0;
}