Optimization Steps:
1. Remove unnecessary includes: The program includes the entire "bits/stdc++.h" library, which is not recommended. We should only include the necessary header files.
2. Change global variables to local variables: The variables `v1`, `v2`, `cost`, `par`, and `vis` are declared globally, but they are only used within the main function. We can declare them as local variables instead.
3. Use reserve() function for vectors: The vectors `v1` and `v2` are used as adjacency lists. We can use the `reserve()` function to allocate memory for these vectors in advance, which can improve performance.
4. Use a reference instead of passing by value: In the `dfs2()` function, the `val` parameter is passed by value. Since it is not modified within the function, we can pass it by reference to avoid unnecessary copying.
5. Use a reference instead of returning a value: In the `dfs2()` function, the `temp` variable is returned as a result. Instead of returning it, we can pass it by reference and modify it directly within the function.
6. Use a more efficient data structure: The `stack` data structure is used to store the visited nodes in the `dfs()` function. However, using a `stack` is not necessary in this case. We can use a simple `vector` to store the visited nodes and iterate over it in reverse order to achieve the same result.
7. Use a more efficient loop condition: In the nested loops where we iterate over the adjacency lists, the size of the adjacency list is checked in each iteration. We can store the size in a variable before the loop to avoid this overhead.
8. Use a more efficient loop structure: In the nested loops where we iterate over the adjacency lists, the loop variable `i` is used as an index to access the elements of the adjacency list. We can use a range-based for loop instead, which is more concise and less error-prone.
9. Use the cin/cout streams instead of scanf/printf: The program uses the `scanf()` function to read input and the `printf()` function to write output. We can use the `cin` and `cout` streams instead, which are safer and easier to use.

Optimized Program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

void dfs(const vector<vector<int>>& v1, vector<bool>& vis, vector<int>& order, int source) {
    vis[source] = true;
    for (int adj : v1[source]) {
        if (!vis[adj]) {
            dfs(v1, vis, order, adj);
        }
    }
    order.push_back(source);
}

void dfs2(const vector<vector<int>>& v2, vector<bool>& vis, vector<int>& cost, vector<int>& par, int& temp, int source, int& val) {
    temp = min(temp, cost[source]);
    vis[source] = false;
    par[source] = val;
    for (int adj : v2[source]) {
        if (vis[adj]) {
            dfs2(v2, vis, cost, par, temp, adj, val);
        }
    }
}

int main() {
    int n;
    cin >> n;
    
    vector<int> cost(n + 1);
    for (int i = 1; i <= n; i++) {
        cin >> cost[i];
    }
    
    vector<vector<int>> v1(n + 1), v2(n + 1);
    for (int i = 1; i <= n; i++) {
        int x;
        cin >> x;
        v1[i].push_back(x);
        v2[x].push_back(i);
    }
    
    vector<bool> vis(n + 1, false);
    vector<int> order;
    for (int i = 1; i <= n; i++) {
        if (!vis[i]) {
            dfs(v1, vis, order, i);
        }
    }
    
    long long int ans = 0;
    vector<int> par(n + 1);
    for (int i = n - 1; i >= 0; i--) {
        int top = order[i];
        if (vis[top]) {
            int temp = 10000000000;
            dfs2(v2, vis, cost, par, temp, top, top);
            cost[top] = temp;
            ans += temp;
        }
    }
    
    for (int i = 1; i <= n; i++) {
        for (int child : v1[i]) {
            if (par[i] != par[child]) {
                ans -= cost[par[i]];
                cost[par[i]] = 0;
            }
        }
    }
    
    cout << ans << endl;
    
    return 0;
}
```