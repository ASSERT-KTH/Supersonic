#include <iostream>
#include <vector>
using namespace std;

const int MAX = 100100;

int n, init[MAX], goal[MAX], ans;
vector<int> g[MAX];

int dfs(int node, int par, int pre, int ppre) {
  int cnt = 0;
  if (ppre) {
    init[node] ^= 1;
  }
  if (init[node] != goal[node]) {
    ans++;
    cnt++;
    ppre ^= 1;
  }
  for (auto v : g[node]) {
    if (v == par)
      continue;
    cnt += dfs(v, node, ppre, pre);
  }
  return cnt;
}

void solve() {
  scanf("%d", &n);
  for (int i = 0; i < n - 1; i++) {
    int a, b;
    scanf("%d %d", &a, &b);
    g[a].push_back(b);
    g[b].push_back(a);
  }
  for (int i = 0; i < n; i++) {
    scanf("%d", &init[i + 1]);
  }
  for (int i = 0; i < n; i++) {
    scanf("%d", &goal[i + 1]);
  }
  int cnt = dfs(1, 0, 0, 0);
  printf("%d\n", ans);
  for (int i = 0; i < cnt; i++) {
    printf("%d\n", i + 1);
  }
}

int main() {
  solve();
  return 0;
}