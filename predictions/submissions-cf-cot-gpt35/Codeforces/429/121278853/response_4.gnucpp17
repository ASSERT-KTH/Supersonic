#include <iostream>
#include <vector>
using namespace std;

typedef long long int ll;

ll n, init[100100], goal[100100], ans;
vector<ll> g[100100];
vector<ll> res;

void dfs(ll node, ll par, ll& ppre) {
  if (ppre) {
    init[node] ^= 1;
  }
  if (init[node] != goal[node]) {
    ans++;
    res.emplace_back(node);
    ppre ^= 1;
  }
  for (auto it = g[node].begin(); it != g[node].end(); ++it) {
    if (*it == par) {
      continue;
    }
    dfs(*it, node, ppre);
  }
}

void solve() {
  cin >> n;
  for (ll i = 0; i < n - 1; i++) {
    ll a, b;
    cin >> a >> b;
    g[a].emplace_back(b);
    g[b].emplace_back(a);
  }
  for (ll i = 0; i < n; i++) {
    cin >> init[i + 1];
  }
  for (ll i = 0; i < n; i++) {
    cin >> goal[i + 1];
  }
  ll ppre = 0;
  dfs(1, 0, ppre);
  cout << ans << endl;
  for (auto it = res.begin(); it != res.end(); ++it) {
    cout << *it << endl;
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  solve();
}