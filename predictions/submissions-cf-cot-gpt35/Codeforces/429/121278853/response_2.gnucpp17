#include <iostream>
#include <vector>

using namespace std;

typedef long long int ll;

void dfs(ll node, ll par, ll pre, ll ppre, vector<ll>& init, vector<ll>& goal, vector<ll>& res) {
  if (ppre) {
    init[node] ^= 1;
  }
  if (init[node] != goal[node]) {
    res.push_back(node);
    ppre ^= 1;
  }
  for (auto v : g[node]) {
    if (v == par)
      continue;
    dfs(v, node, ppre, pre, init, goal, res);
  }
}

vector<ll> solve(ll n, vector<pair<ll, ll>>& edges, vector<ll>& init, vector<ll>& goal) {
  vector<ll> res;
  vector<vector<ll>> g(n + 1);
  for (auto& edge : edges) {
    ll a = edge.first, b = edge.second;
    g[a].push_back(b);
    g[b].push_back(a);
  }
  dfs(1, 0, 0, 0, init, goal, res);
  return res;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

  ll n;
  cin >> n;

  vector<pair<ll, ll>> edges(n - 1);
  for (ll i = 0; i < n - 1; i++) {
    cin >> edges[i].first >> edges[i].second;
  }

  vector<ll> init(n + 1), goal(n + 1);
  for (ll i = 1; i <= n; i++) {
    cin >> init[i];
  }
  for (ll i = 1; i <= n; i++) {
    cin >> goal[i];
  }

  vector<ll> res = solve(n, edges, init, goal);

  cout << res.size() << endl;
  for (auto v : res) {
    cout << v << endl;
  }

  return 0;
}