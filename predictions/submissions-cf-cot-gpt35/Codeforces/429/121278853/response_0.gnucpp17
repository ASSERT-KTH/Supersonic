#include <iostream>
#include <vector>
using namespace std;

void dfs(int node, int parent, vector<int>& init, vector<int>& goal, int& ans, vector<int>& res, vector<vector<int>>& g) {
    if (init[node] != goal[node]) {
        ans++;
        res.push_back(node);
        init[node] ^= 1;
    }
    for (int v : g[node]) {
        if (v == parent)
            continue;
        dfs(v, node, init, goal, ans, res, g);
    }
}

void solve() {
    int n;
    cin >> n;
    vector<vector<int>> g(n + 1);
    vector<int> init(n + 1), goal(n + 1);
    for (int i = 0; i < n - 1; i++) {
        int a, b;
        cin >> a >> b;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    for (int i = 1; i <= n; i++) {
        cin >> init[i];
    }
    for (int i = 1; i <= n; i++) {
        cin >> goal[i];
    }
    int ans = 0;
    vector<int> res;
    dfs(1, 0, init, goal, ans, res, g);
    cout << ans << endl;
    for (int v : res) {
        cout << v << endl;
    }
}

int main() {
    solve();
    return 0;
}