#include <iostream>
#include <vector>
#include <algorithm>
#include <utility>
using namespace std;

typedef long long ll;

ll n, init[100100], goal[100100], ans;
vector<ll> g[100100];
vector<ll> res;

void dfs(ll node, ll par, ll ppre) {
  if (ppre) {
    init[node] ^= 1;
  }
  if (init[node] != goal[node]) {
    ans++;
    res.push_back(node);
    ppre ^= 1;
  }
  for (ll v : g[node]) {
    if (v == par) {
      continue;
    }
    dfs(v, node, ppre);
  }
}

void solve() {
  cin >> n;
  for (ll i = 0; i < n - 1; i++) {
    ll a, b;
    cin >> a >> b;
    g[a].push_back(b);
    g[b].push_back(a);
  }
  for (ll i = 0; i < n; i++) {
    cin >> init[i + 1];
  }
  for (ll i = 0; i < n; i++) {
    cin >> goal[i + 1];
  }
  res.reserve(n);
  dfs(1, 0, 0);
  cout << ans << endl;
  for (ll v : res) {
    cout << v << endl;
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  solve();
}