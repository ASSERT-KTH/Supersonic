#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

const int N = 2e5 + 7;

int n;
int k[N], t[N], sum;
vector<int> p, s[N];

bool check(int x) {
    memset(t, 0, sizeof(t));
    int now = x, ned = sum, cnt = 0;
    int i = lower_bound(p.begin(), p.end(), x) - p.begin();
    for (int i = min(N - 1, x); i >= 1; --i) {
        now = min(now, i);
        if (now == 0 or ned == 0)
            break;
        for (auto &it : s[i]) {
            int buy = min(now, k[it] - t[it]);
            t[it] += buy;
            ned -= buy;
            now -= buy;
            cnt += buy;
        }
    }
    return x - cnt >= ned * 2;
}

void solve() {
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> k[i];
        sum += k[i];
    }
    int m;
    cin >> m;
    for (int i = 1; i <= m; ++i) {
        int d, t;
        cin >> d >> t;
        p.push_back(d);
        s[d].push_back(t);
    }
    sort(p.begin(), p.end());
    int l = 1, r = sum * 2, ans = 1;
    while (l <= r) {
        int mid = l + r >> 1;
        if (check(mid))
            ans = mid, r = mid - 1;
        else
            l = mid + 1;
    }
    cout << ans << endl;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    solve();
}