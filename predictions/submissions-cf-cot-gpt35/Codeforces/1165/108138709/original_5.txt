Optimization Step by Step:

1. Remove unnecessary header files: The program includes the entire `bits/stdc++.h` header which includes many unnecessary header files. We can remove it and include only the necessary header files.

2. Remove unused macros: The program defines several macros (`js`, `all`, `endl`, `pai`) that are not used. We can remove them to improve readability.

3. Remove unnecessary typedefs: The program defines `ll`, `ull`, and `ld` typedefs that are not used. We can remove them.

4. Improve I/O functions: The `read()` function uses `getchar()` to read characters one by one and convert them to integers. This can be slow compared to other input methods. We can use `scanf()` or `cin` for faster input.

5. Improve output function: The `print()` function converts an integer to a string and then prints it character by character using `putchar()`. This can be slow compared to other output methods. We can use `printf()` or `cout` for faster output.

6. Optimize the `check()` function: The `check()` function has a nested loop that iterates over the `s[i]` vector. This can be slow for large input sizes. We can modify the loop to use a single loop and avoid unnecessary iterations.

7. Use `emplace_back()` instead of `push_back()`: The program uses `push_back()` to add elements to the `p` vector and `s[d]` vectors. We can use `emplace_back()` instead, which constructs the objects in-place, avoiding unnecessary copies.

8. Optimize the binary search: The binary search in the `solve()` function can be optimized by using a `while` loop instead of a `for` loop. This allows us to avoid unnecessary iterations.

9. Remove unused variables: The program defines a variable `id` in the `Node` struct that is not used. We can remove it to improve readability.

Optimized Program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

const int MOD = 1e9 + 7;
const int INF = 0x3f3f3f3f;
const int N = 2e5 + 7;

struct Node {
  ll val;
  bool operator<(const Node &opt) const { return val < opt.val; }
};

int n, m;
int k[N], t[N], sum;
vector<int> p, s[N];

bool check(int x) {
  memset(t, 0, sizeof(t));
  int now = x, ned = sum, cnt = 0;
  int i = lower_bound(p.begin(), p.end(), x) - p.begin();
  while (i >= 1 && now > 0 && ned > 0) {
    now = min(now, i);
    for (int j = 0; j < s[i].size() && now > 0 && ned > 0; ++j) {
      int it = s[i][j];
      int buy = min(now, k[it] - t[it]);
      t[it] += buy;
      ned -= buy;
      now -= buy;
      cnt += buy;
    }
    i--;
  }
  return x - cnt >= ned * 2;
}

void solve() {
  cin >> n >> m;
  for (int i = 1; i <= n; ++i) {
    cin >> k[i];
    sum += k[i];
  }
  for (int i = 1; i <= m; ++i) {
    int d, t;
    cin >> d >> t;
    p.emplace_back(d);
    s[d].emplace_back(t);
  }
  sort(p.begin(), p.end());
  int l = 1, r = sum * 2, ans = 1;
  while (l <= r) {
    int mid = l + r >> 1;
    if (check(mid))
      ans = mid, r = mid - 1;
    else
      l = mid + 1;
  }
  cout << ans << endl;
}

int main() {
  solve();
  return 0;
}
```
