#include <iostream>
#include <cstring>
#include <vector>
#include <algorithm>

typedef long long ll;

const int N = 2e5 + 7;

int n, m;
int k[N], t[N], sum;
int p[N], s[N][N];

bool check(int x) {
  memset(t, 0, sizeof(t));
  int now = x, ned = sum, cnt = 0;
  int i = std::lower_bound(p, p + m, x) - p;
  for (int i = std::min(N - 1, x); i >= 1; --i) {
    now = std::min(now, i);
    if (now == 0 || ned == 0)
      break;
    for (int j = 0; j < s[i].size(); ++j) {
      int it = s[i][j];
      int buy = std::min(now, k[it] - t[it]);
      t[it] += buy;
      ned -= buy;
      now -= buy;
      cnt += buy;
    }
  }
  return x - cnt >= ned * 2;
}

void solve() {
  std::cin >> n >> m;
  for (int i = 1; i <= n; ++i) {
    std::cin >> k[i];
    sum += k[i];
  }
  for (int i = 0; i < m; ++i) {
    int d, t;
    std::cin >> d >> t;
    p[i] = d;
    s[d].push_back(t);
  }
  std::nth_element(p, p + sum * 2, p + m);
  int l = 1, r = sum * 2, ans = 1;
  while (l <= r) {
    int mid = l + r >> 1;
    if (check(mid))
      ans = mid, r = mid - 1;
    else
      l = mid + 1;
  }
  std::cout << ans << std::endl;
}

int main() {
  solve();
  return 0;
}