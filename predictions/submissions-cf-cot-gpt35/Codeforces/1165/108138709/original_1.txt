Step 1: Remove unnecessary includes and macros

The program includes `<bits/stdc++.h>`, which is a non-standard header file and may slow down the compilation process. It is better to include only the necessary standard header files. Additionally, some macros are not used in the program and can be removed.

Step 2: Remove unused typedefs

The program defines several typedefs (`ll`, `ull`, `ld`, `pai`), but they are not used in the program and can be removed.

Step 3: Optimize the `read()` function

The `read()` function can be optimized by removing unnecessary operations and using a more efficient way to convert characters to integers.

Step 4: Optimize the `print()` function

The `print()` function can be optimized by removing unnecessary operations and using a more efficient way to convert integers to characters.

Step 5: Optimize the `gcd()` function

The `gcd()` function can be optimized by using the Euclidean algorithm instead of the recursive approach.

Step 6: Optimize the `qpow()` functions

The `qpow()` functions can be optimized by using modular exponentiation instead of performing multiplications and modulo operations in each iteration.

Step 7: Optimize the `check()` function

The `check()` function can be optimized by using a more efficient way to calculate the sum of elements in the `s[i]` vector.

Step 8: Optimize the `solve()` function

The `solve()` function can be optimized by removing unnecessary variables and using a more efficient way to calculate the initial value of `r`.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;

const int N = 2e5 + 7;
int n, m;
int k[N], t[N], sum;
vector<int> p, s[N];

bool check(int x) {
  memset(t, 0, sizeof(t));
  int now = x, ned = sum, cnt = 0;
  int i = lower_bound(p.begin(), p.end(), x) - p.begin();
  for (int j = min(N - 1, x); j >= 1; --j) {
    now = min(now, j);
    if (now == 0 or ned == 0)
      break;
    for (auto &it : s[j]) {
      int buy = min(now, k[it] - t[it]);
      t[it] += buy;
      ned -= buy;
      now -= buy;
      cnt += buy;
    }
  }
  return x - cnt >= ned * 2;
}

void solve() {
  cin >> n >> m;
  for (int i = 1; i <= n; ++i) {
    cin >> k[i];
    sum += k[i];
  }
  for (int i = 1; i <= m; ++i) {
    int d, t;
    cin >> d >> t;
    p.push_back(d);
    s[d].push_back(t);
  }
  sort(p.begin(), p.end());
  int l = 1, r = sum * 2, ans = 1;
  while (l <= r) {
    int mid = l + r >> 1;
    if (check(mid))
      ans = mid, r = mid - 1;
    else
      l = mid + 1;
  }
  cout << ans << endl;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  solve();
  return 0;
}
```
