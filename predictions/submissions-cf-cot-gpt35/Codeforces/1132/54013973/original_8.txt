Step 1: Remove unnecessary includes
The program includes the `<bits/stdc++.h>` header, which is not necessary. We can remove it.

Step 2: Remove unnecessary macros
The program defines macros `fast`, `ll`, and `pb`, but they are not used in the program. We can remove them.

Step 3: Optimize input/output operations
The code uses `cin` and `cout` for input/output operations, which can be slow for large inputs/outputs. We can replace them with `scanf` and `printf` for faster input/output.

Step 4: Optimize memory usage
The program creates an array `a` of size `n + 1`, which is unnecessary. We can create the array of size `n` instead.

Step 5: Optimize sorting
The program uses the `sort` function to sort the array `a`. We can use a more efficient sorting algorithm like `std::nth_element` to find the `n-x`th element in linear time instead of sorting the entire array.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  srand(time(NULL));

  int n;
  scanf("%d", &n);
  
  vector<int> a(n);
  for (int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
  }

  nth_element(a.begin(), a.begin() + n - 1, a.end());
  int maxElement = a[n - 1];

  for (int i = 1; i < n; i++) {
    a[i] += a[i - 1];
  }

  int m;
  scanf("%d", &m);

  for (int i = 0; i < m; i++) {
    int x;
    scanf("%d", &x);
    printf("%d\n", a[n - 1] - a[n - x] + maxElement);
  }

  return 0;
}
```

Explanation of optimizations:
- Removed unnecessary includes and macros to simplify the code.
- Replaced `cin`/`cout` with `scanf`/`printf` for faster input/output.
- Changed the size of the array `a` to `n` instead of `n + 1` to optimize memory usage.
- Replaced `sort` with `nth_element` to find the `n-x`th element efficiently without sorting the entire array.