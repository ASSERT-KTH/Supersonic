The given program reads an integer `n`, followed by `n` integers, and stores them in a vector `a`. It then sorts the vector `a` in ascending order. After that, it reads an integer `m` and `m` integers, and for each integer `x`, it calculates `a[n] - a[n - x + 1] + a[n - x]` and prints the result.

To optimize the program, we can make the following modifications:

1. Remove the unnecessary `#include <bits/stdc++.h>`. This header includes a large number of other headers, which may slow down the compilation process.

2. Remove the `#define fast` macro. This macro disables the synchronization between C and C++ standard streams, which is not necessary in this program.

3. Remove the `#define ll long long int` macro. The `ll` type is not used in the program.

4. Remove the `#define pb push_back` macro. The `pb` alias for `push_back` is not used in the program.

5. Remove the `srand(time(NULL));` line from the `fast` macro. The random number generator is not used in the program.

6. Change the loop variable `i` from `ll` type to `int` type. Since the loop index `i` is only used to access elements in the vector `a`, there is no need for it to be a `long long int`.

7. Change the loop index in the second loop from `i` to `int i = 0; i < m; i++`. This will allow the compiler to optimize the loop better.

8. Remove the extra semicolon after `cout << a[n] - a[n - x + 1] + a[n - x] << endl;`. The semicolon is unnecessary.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);

  int n;
  std::cin >> n;
  std::vector<int> a(n + 1);
  for (int i = 1; i <= n; i++) {
    std::cin >> a[i];
  }
  std::sort(a.begin(), a.end());
  for (int i = 1; i <= n; i++) {
    a[i] += a[i - 1];
  }
  int m;
  std::cin >> m;
  int x;
  for (int i = 0; i < m; i++) {
    std::cin >> x;
    std::cout << a[n] - a[n - x + 1] + a[n - x] << '\n';
  }
  
  return 0;
}
```