Step 1: Remove unnecessary includes
The first step is to remove the unnecessary includes. In this case, the `bits/stdc++.h` header includes many standard library headers, which can increase the compilation time. Since we are using only a few standard library functions, it is better to include only those specific headers. In this case, we need `vector` and `iostream`.

Step 2: Remove unnecessary macros
The `forn` macro is defined but not used. We can remove it to simplify the code.

Step 3: Avoid unnecessary vector initialization
The `qr` vector is cleared at the beginning of each iteration of the `check` function. However, we can avoid this by using the `resize` function to set the size of the vector to zero, without actually deallocating and reallocating memory.

Step 4: Optimize the binary search
The binary search in the main function can be optimized by removing unnecessary function calls. Currently, the `check` function is called twice for the same value of `r`. We can avoid this by initializing `l` with `r` in the beginning and adjusting the conditions accordingly.

Step 5: Optimize the inner loop
The inner loop in the `check` function can be optimized by using a more efficient data structure. Currently, a vector of indices is used to store the indices of elements that need to be processed. Instead, we can use a priority queue to store the indices in a sorted order based on the current index.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const int N = 200 * 1000 + 13;
const long long INF64 = 1e18;

int n, k;
long long a[N];
int b[N];
long long cur[N];
vector<int> qr[N];

bool check(long long x) {
  for (int i = 0; i < k; i++) {
    qr[i].resize(0);
  }
  
  for (int i = 0; i < n; i++) {
    cur[i] = a[i];
  }
  
  for (int i = 0; i < n; i++) {
    long long t = cur[i] / b[i] + 1;
    cur[i] %= b[i];
    if (t < k) {
      qr[t].push_back(i);
    }
  }
  
  int lst = 0;
  priority_queue<int, vector<int>, greater<int>> pq;
  
  for (int t = 0; t < k; t++) {
    while (lst < k && qr[lst].empty()) {
      lst++;
    }
    
    if (lst <= t) {
      return false;
    }
    
    if (lst == k) {
      return true;
    }
    
    int i = qr[lst].back();
    qr[lst].pop_back();
    
    if (cur[i] + x < b[i]) {
      cur[i] += x;
      continue;
    }
    
    long long nt = (cur[i] + x) / b[i];
    cur[i] = (cur[i] + x) % b[i];
    
    if (lst + nt < k) {
      pq.push(i);
    }
  }
  
  while (!pq.empty()) {
    int i = pq.top();
    pq.pop();
    
    qr[lst + nt].push_back(i);
  }
  
  return true;
}

int main() {
  cin >> n >> k;
  
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  
  for (int i = 0; i < n; i++) {
    cin >> b[i];
  }
  
  long long l = INF64, r = 0;
  
  while (l > r + 1) {
    long long m = (l + r) / 2;
    
    if (check(m)) {
      l = m;
    } else {
      r = m;
    }
  }
  
  if (!check(l)) {
    cout << "-1" << endl;
  } else {
    cout << (check(r) ? r : l) << endl;
  }
  
  return 0;
}
```