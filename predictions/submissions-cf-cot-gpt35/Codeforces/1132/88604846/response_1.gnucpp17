#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const long long INF64 = 1e18;

bool check(long long x, int n, int k, vector<long long>& a, vector<int>& b) {
    vector<priority_queue<int>> qr(k);
    vector<long long> cur(n);
    for (int i = 0; i < n; i++) {
        cur[i] = a[i];
        long long t = cur[i] / b[i] + 1;
        cur[i] %= b[i];
        if (t < k)
            qr[t].push(i);
    }
    for (int t = 0; t < k; t++) {
        while (qr[t].empty())
            t++;
        if (t <= k)
            return false;
        if (t == k)
            return true;
        int i = qr[t].top();
        qr[t].pop();
        if (cur[i] + x < b[i]) {
            cur[i] += x;
            continue;
        }
        long long nt = (cur[i] + x) / b[i];
        cur[i] = (cur[i] + x) % b[i];
        if (t + nt < k)
            qr[t + nt].push(i);
    }
    return true;
}

int main() {
    int n, k;
    cin >> n >> k;
    vector<long long> a(n);
    vector<int> b(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    for (int i = 0; i < n; i++) {
        cin >> b[i];
    }
    long long l = 0, r = INF64;
    bool result = false;
    while (l < r - 1) {
        long long m = (l + r) / 2;
        if (check(m, n, k, a, b)) {
            r = m;
            result = true;
        } else {
            l = m;
        }
    }
    if (!result) {
        cout << "-1" << endl;
    } else {
        if (check(l, n, k, a, b)) {
            cout << l << endl;
        } else {
            cout << r << endl;
        }
    }
    return 0;
}