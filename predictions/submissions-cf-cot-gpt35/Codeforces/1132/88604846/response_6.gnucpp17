#include <iostream>
#include <vector>
using namespace std;

const int N = 200 * 1000 + 13;
const long long INF64 = 1e18;

int n, k;
long long a[N];
int b[N];
long long cur[N];
vector<int> qr;

bool check(long long x) {
  qr.clear();
  for (int i = 0; i < n; i++) {
    cur[i] = a[i];
    long long t = cur[i] / b[i] + 1;
    cur[i] %= b[i];
    if (t < k)
      qr.push_back(i);
  }
  
  int lst = 0;
  for (int t = 0; t < k; t++) {
    while (lst < k && qr.empty())
      ++lst;
    if (lst <= t)
      return false;
    if (lst == k)
      return true;
    int i = qr.back();
    qr.pop_back();
    long long cur_x = cur[i] + x;
    long long nt = cur_x / b[i];
    cur[i] = cur_x % b[i];
    if (lst + nt < k)
      qr.push_back(i);
  }
  
  return true;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  cin >> n >> k;
  for (int i = 0; i < n; i++)
    cin >> a[i];
  for (int i = 0; i < n; i++)
    cin >> b[i];
  
  long long l = 0, r = INF64;
  while (l < r - 1) {
    long long m = (l + r) / 2;
    if (check(m))
      r = m;
    else
      l = m;
  }
  
  if (!check(r))
    cout << "-1" << endl;
  else
    cout << (check(l) ? l : r) << endl;
  
  return 0;
}