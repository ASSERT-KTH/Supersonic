The given program is already quite optimized, but there are a few modifications we can make to further improve its performance:

1. Avoid using the `bits/stdc++.h` header, as it includes unnecessary libraries. Instead, include only the required headers (`cstdio`, `vector`, and `algorithm`).

2. Replace the macro `forn(i, n)` with a function-like loop `for (int i = 0; i < n; i++)`. This will avoid the overhead of function-like macros.

3. Replace the constant `INF64` with a more appropriate value. Since the maximum value of `x` is `1e18`, we can set `INF64` to `1e18 + 1`.

4. Instead of using `vector<int> qr[N]` to store the indices of elements in `cur` for each value of `t`, we can use a single `vector<int>` and keep track of the starting index for each value of `t`. This will reduce memory usage and improve cache locality.

5. Remove the unnecessary `lst` variable and use `t` directly in the while loop condition.

6. Change the binary search implementation to use a more efficient approach, such as the ternary search algorithm. This will reduce the number of iterations required to find the answer.

Here's the optimized program:

```cpp
#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;

const int N = 200 * 1000 + 13;
const long long INF64 = 1e18 + 1;

int n, k;
long long a[N];
int b[N];
long long cur[N];
vector<int> qr;

bool check(long long x) {
  qr.clear();
  for (int i = 0; i < n; i++) {
    cur[i] = a[i];
    long long t = cur[i] / b[i] + 1;
    cur[i] %= b[i];
    if (t < k)
      qr.push_back(i);
  }
  int start = 0;
  for (int t = 0; t < k; t++) {
    while (start < qr.size() && cur[qr[start]] / b[qr[start]] == t)
      start++;
    if (start <= t)
      return false;
    if (start == qr.size())
      return true;
    int i = qr[start];
    if (cur[i] + x < b[i]) {
      cur[i] += x;
      continue;
    }
    qr[start] = -1;
    long long nt = (cur[i] + x) / b[i];
    cur[i] = (cur[i] + x) % b[i];
    if (t + nt < k)
      qr.push_back(i);
  }
  return true;
}

long long ternary_search() {
  long long l = 0, r = INF64;
  while (l < r - 2) {
    long long m1 = l + (r - l) / 3;
    long long m2 = r - (r - l) / 3;
    if (check(m1))
      r = m1;
    else if (check(m2))
      l = m2;
    else
      l = m1 + 1;
  }
  if (!check(r))
    return -1;
  return check(l) ? l : r;
}

int main() {
  scanf("%d%d", &n, &k);
  for (int i = 0; i < n; i++)
    scanf("%lld", &a[i]);
  for (int i = 0; i < n; i++)
    scanf("%d", &b[i]);
  long long ans = ternary_search();
  if (ans == -1)
    puts("-1");
  else
    printf("%lld\n", ans);
  return 0;
}
```

These optimizations should help improve the running time and memory usage of the program.