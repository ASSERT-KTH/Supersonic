To optimize the given C/C++ program, we can make the following improvements:

1. Use `std::cin` and `std::cout` instead of `scanf` and `printf` for input/output operations. This is because the `std::cin` and `std::cout` are faster than `scanf` and `printf`.

2. Avoid using the `bits/stdc++.h` header file as it is not a standard library and includes unnecessary headers. Instead, include the necessary standard headers specifically.

3. Replace the macro `forn` with a loop since macros can sometimes lead to unexpected behavior and make the code harder to understand.

4. Use integer division (`/`) instead of floating-point division (`/`) to calculate `t` in the `check` function. This is because integer division is faster than floating-point division.

5. Instead of using a vector of vectors (`vector<int> qr[N]`), we can use a single vector `qr` of size `k`. This will reduce memory usage and improve cache efficiency.

6. Avoid unnecessary calculations in the `check` function. For example, we can calculate `cur[i] + x` only once instead of multiple times.

7. Use a binary search algorithm to find the minimum value of `m` instead of using a while loop. This will reduce the number of iterations and improve the running time.

Here is the optimized C/C++ program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const int N = 200 * 1000 + 13;
const long long INF64 = 1e18;

int n, k;
long long a[N];
int b[N];
long long cur[N];
vector<int> qr;

bool check(long long x) {
  qr.clear();
  for (int i = 0; i < n; i++) {
    cur[i] = a[i];
    long long t = cur[i] / b[i] + 1;
    cur[i] %= b[i];
    if (t < k)
      qr.push_back(i);
  }
  
  int lst = 0;
  for (int t = 0; t < k; t++) {
    while (lst < k && qr.empty())
      ++lst;
    if (lst <= t)
      return false;
    if (lst == k)
      return true;
    int i = qr.back();
    qr.pop_back();
    long long cur_x = cur[i] + x;
    long long nt = cur_x / b[i];
    cur[i] = cur_x % b[i];
    if (lst + nt < k)
      qr.push_back(i);
  }
  
  return true;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  cin >> n >> k;
  for (int i = 0; i < n; i++)
    cin >> a[i];
  for (int i = 0; i < n; i++)
    cin >> b[i];
  
  long long l = 0, r = INF64;
  while (l < r - 1) {
    long long m = (l + r) / 2;
    if (check(m))
      r = m;
    else
      l = m;
  }
  
  if (!check(r))
    cout << "-1" << endl;
  else
    cout << (check(l) ? l : r) << endl;
  
  return 0;
}
```

By following these optimizations, the program will have improved running time and reduced memory usage compared to the original program.