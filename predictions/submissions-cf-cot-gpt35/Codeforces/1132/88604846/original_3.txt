The first optimization we can make is to remove the unnecessary `#include <bits/stdc++.h>`. This header includes a lot of other headers, which can bloat the compiled program. Instead, we should include only the necessary headers for our program.

Next, we can remove the `using namespace std;` line. Although it makes the code slightly more concise, it also pollutes the global namespace and can lead to naming conflicts. It's better to use the `std::` prefix explicitly.

We can also remove the `#define forn(i, n) for (int i = 0; i < int(n); i++)` macro and use a regular loop instead. This will make the code more readable and avoid potential issues with macros.

In the `check` function, we can avoid recalculating `cur[i] + x` multiple times. Instead, we can calculate it once and store it in a variable.

Lastly, we can optimize the binary search loop in the `main` function. Currently, it uses the midpoint `(l + r) / 2` to calculate the middle element. However, this calculation can cause an overflow if `l` and `r` are large. It's better to use `l + (r - l) / 2` to calculate the midpoint.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>

const int N = 200 * 1000 + 13;
const long long INF64 = 1e18;

int n, k;
long long a[N];
int b[N];
long long cur[N];
std::vector<int> qr[N];

bool check(long long x) {
  for (int i = 0; i < k; i++) qr[i].clear();
  for (int i = 0; i < n; i++) cur[i] = a[i];
  for (int i = 0; i < n; i++) {
    long long t = cur[i] / b[i] + 1;
    cur[i] %= b[i];
    if (t < k)
      qr[t].push_back(i);
  }
  int lst = 0;
  for (int t = 0; t < k; t++) {
    while (lst < k && qr[lst].empty()) lst++;
    if (lst <= t) return false;
    if (lst == k) return true;
    int i = qr[lst].back();
    long long cur_x = cur[i] + x;
    if (cur_x < b[i]) {
      cur[i] = cur_x;
      continue;
    }
    qr[lst].pop_back();
    long long nt = cur_x / b[i];
    cur[i] = cur_x % b[i];
    if (lst + nt < k) qr[lst + nt].push_back(i);
  }
  return true;
}

int main() {
  std::cin >> n >> k;
  for (int i = 0; i < n; i++) std::cin >> a[i];
  for (int i = 0; i < n; i++) std::cin >> b[i];
  long long l = 0, r = INF64;
  while (l < r - 1) {
    long long m = l + (r - l) / 2;
    if (check(m))
      r = m;
    else
      l = m;
  }
  if (!check(r))
    std::cout << -1 << std::endl;
  else
    std::cout << (check(l) ? l : r) << std::endl;
  return 0;
}
```