To optimize the given program, we can make the following modifications:

1. Instead of using the `bits/stdc++.h` header which includes all standard libraries, we can include only the necessary headers. In this case, we only need `<cstdio>`, `<vector>`, and `<algorithm>`.

2. We can remove the `#define` macro `forn(i, n)` and replace it with a simple `for` loop. This will avoid any potential issues with the macro definition.

3. We can use `std::array` instead of C-style arrays `a` and `b` to improve memory usage and performance.

4. We can use a `std::deque` instead of a `std::vector` for `qr` to improve performance when removing elements from the back.

5. Instead of calculating `t` and `nt` in every iteration of the loop, we can calculate them once and reuse the values.

6. We can use a binary search algorithm to find the minimum value of `m` instead of linearly searching for it. This will significantly improve the running time.

Here is the optimized program:

```cpp
#include <cstdio>
#include <vector>
#include <algorithm>

const int N = 200 * 1000 + 13;
const long long INF64 = 1e18;

int n, k;
std::array<long long, N> a;
std::array<int, N> b;
std::array<long long, N> cur;
std::array<std::deque<int>, N> qr;

bool check(long long x) {
  for (int i = 0; i < k; i++) qr[i].clear();
  for (int i = 0; i < n; i++) cur[i] = a[i];
  for (int i = 0; i < n; i++) {
    long long t = cur[i] / b[i] + 1;
    cur[i] %= b[i];
    if (t < k)
      qr[t].push_back(i);
  }
  int lst = 0;
  for (int t = 0; t < k; t++) {
    while (lst < k && qr[lst].empty())
      ++lst;
    if (lst <= t)
      return false;
    if (lst == k)
      return true;
    int i = qr[lst].back();
    if (cur[i] + x < b[i]) {
      cur[i] += x;
      continue;
    }
    qr[lst].pop_back();
    long long nt = (cur[i] + x) / b[i];
    cur[i] = (cur[i] + x) % b[i];
    if (lst + nt < k)
      qr[lst + nt].push_back(i);
  }
  return true;
}

int main() {
  std::scanf("%d%d", &n, &k);
  for (int i = 0; i < n; i++) std::scanf("%lld", &a[i]);
  for (int i = 0; i < n; i++) std::scanf("%d", &b[i]);
  long long l = 0, r = INF64;
  while (l < r - 1) {
    long long m = (l + r) / 2;
    if (check(m))
      r = m;
    else
      l = m;
  }
  if (!check(r))
    std::puts("-1");
  else
    std::printf("%lld\n", check(l) ? l : r);
  return 0;
}
```