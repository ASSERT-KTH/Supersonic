#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

using ll = long long;

void testcase();

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    testcase();

    return 0;
}

void testcase() {
    int n;
    cin >> n;
  
    vector<ll> vec;
    vec.reserve(n);
    
    ll sum = 0;
    for (int i = 0; i < n; i++) {
        ll temp;
        cin >> temp;
        vec.push_back(temp);
        sum += temp;
    }
    
    sort(vec.begin(), vec.end());
  
    ll c = 1;
    ll newcount = 0;
    ll count = numeric_limits<ll>::max();
    unsigned long long counter = pow(vec[n - 1], 1.0 / (n - 1)) + n + 1;
  
    while (counter > 0) {
        newcount = 0;
        ll xx = 1;
        for (int i = 0; i < n; i++) {
            newcount += abs(xx - vec[i]);
            xx *= c;
            if (newcount > count)
                break;
        }
        count = min(count, newcount);
        --counter;
    }
  
    if (sum - n < count) {
        count = n;
    }
  
    if (sum < count) {
        count = sum;
    }
  
    cout << count << endl;
}