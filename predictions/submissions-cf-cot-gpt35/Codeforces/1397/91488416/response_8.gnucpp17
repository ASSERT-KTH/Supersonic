#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

void testcase();

int main() {
  int t = 1;
  while (t--) {
    testcase();
  }
  return 0;
}

void testcase() {
  int n;
  std::cin >> n;
  std::vector<long long> vec;
  long long sum = 0;
  for (int i = 0; i < n; i++) {
    long long temp;
    std::cin >> temp;
    vec.push_back(temp);
    sum += temp;
  }
  std::sort(vec.begin(), vec.end());
  long long c = 1;
  long long newcount = 0;
  long long count = 576460752303423487;
  unsigned int counter = vec[n - 1] + n;
  counter++;
  while (counter--) {
    newcount = 0;
    long long xx = 1;
    for (int i = 0; i < n; i++) {
      newcount += std::abs(xx - vec[i]);
      xx *= c;
      if (newcount > count)
        break;
    }
    if (newcount < count)
      count = newcount;
    c++;
  }
  if (sum < count) {
    count = sum;
  }
  std::cout << count << std::endl;
}