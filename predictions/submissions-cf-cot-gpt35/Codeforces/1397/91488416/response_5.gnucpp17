#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

void testcase();

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  
  testcase();
  
  return 0;
}

void testcase() {
  int n;
  std::cin >> n;
  
  std::vector<long long> vec;
  vec.reserve(n);
  
  long long sum = 0;
  
  for (int i = 0; i < n; i++) {
    long long temp;
    std::cin >> temp;
    vec.push_back(temp);
    sum += temp;
  }
  
  std::sort(vec.begin(), vec.end());
  
  long long c = 1;
  long long newcount = 0;
  long long count = 576460752303423487;
  
  int counter = std::pow(vec[n - 1], 1.0 / (n - 1)) + n;
  
  for (int i = counter; i >= 0; i--) {
    newcount = 0;
    long long xx = 1;
    
    for (int i = 0; i < n; i++) {
      newcount += std::abs(xx - vec[i]) * (n-i);
      ++xx;
      if (newcount > count)
        break;
    }
    
    if (newcount < count)
      count = newcount;
    
    if (count == 0)
      break;
    
    ++c;
  }
  
  if (sum - n < count || sum < count) {
    count = std::min(count, static_cast<long long>(n));
  }
  
  std::cout << count << std::endl;
}