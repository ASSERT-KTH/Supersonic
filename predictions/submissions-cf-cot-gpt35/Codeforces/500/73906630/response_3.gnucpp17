#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

const int N = 400;

int a[N];
std::vector<int> sz(N), v_i[N], v_e[N];

int root(int i) {
    if (a[i] != i) {
        a[i] = root(a[i]);
    }
    return a[i];
}

void merge(int x, int y) {
    int u = root(x);
    int v = root(y);
    if (u != v) {
        if (sz[u] < sz[v]) {
            std::swap(u, v);
        }
        a[v] = u;
        sz[u] += sz[v];
    }
}

int main() {
    int n;
    std::cin >> n;

    for (int i = 1; i <= n; i++) {
        std::cin >> a[i];
    }

    std::vector<std::string> s(n);
    for (int i = 0; i < n; i++) {
        std::cin >> s[i];
        for (int j = 0; j < n; j++) {
            if (s[i][j] == '1') {
                merge(i + 1, j + 1);
            }
        }
    }

    for (int i = 1; i <= n; i++) {
        v_e[root(i)].emplace_back(a[i]);
    }

    for (int i = 1; i <= n; i++) {
        std::sort(v_e[i].begin(), v_e[i].end());
    }

    for (int i = 1; i <= n; i++) {
        int x = root(i);
        std::cout << v_e[x].back() << " ";
        v_e[x].pop_back();
    }

    std::cout << std::endl;

    return 0;
}