#include <iostream>
#include <vector>
#include <algorithm>

#define int long long

const int MOD = 1e9 + 7;

void initialize(int n, std::vector<int>& a, std::vector<int>& sz) {
  for (int i = 1; i <= n; i++) {
    a[i] = i;
    sz[i] = 1;
  }
}

int root(int i, std::vector<int>& a) {
  while (a[i] != i) {
    a[i] = a[a[i]];
    i = a[i];
  }
  return i;
}

void merge(int& x, int& y, std::vector<int>& a, std::vector<int>& sz) {
  int u = root(x, a);
  int v = root(y, a);
  if (sz[u] < sz[v]) {
    std::swap(u, v);
  }
  a[v] = a[u];
  sz[u] += sz[v];
}

int32_t main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);

  int n;
  std::cin >> n;

  std::vector<int> a(n + 1);
  std::vector<int> sz(n + 1);
  std::vector<int> v(n + 1);
  std::vector<std::string> s(n);

  initialize(n, a, sz);

  for (auto& element : v) {
    std::cin >> element;
  }

  for (auto& element : s) {
    std::cin >> element;
  }

  std::vector<std::vector<int>> v_e(n + 1);

  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      if (s[i][j] == '1') {
        if (root(i + 1, a) != root(j + 1, a)) {
          merge(i + 1, j + 1, a, sz);
        }
      }
    }
  }

  for (int i = 1; i <= n; i++) {
    v_e[root(i, a)].emplace_back(v[i]);
  }

  for (int i = 1; i <= n; i++) {
    std::sort(v_e[i].begin(), v_e[i].end());
  }

  for (int i = 1; i <= n; i++) {
    int x = root(i, a);
    std::cout << v_e[x][i - 1] << " ";
  }

  std::cout << '\n';
}