#include <iostream>
#include <vector>
#include <algorithm>

const int N = 400;

void initialize(std::vector<int>& a, std::vector<int>& sz) {
  std::iota(a.begin(), a.end(), 0);
  std::fill(sz.begin(), sz.end(), 1);
}

int root(const std::vector<int>& a, int i) {
  while (a[i] != i) {
    a[i] = a[a[i]];
    i = a[i];
  }
  return i;
}

void merge(std::vector<int>& a, std::vector<int>& sz, int x, int y) {
  int u = root(a, x);
  int v = root(a, y);
  if (sz[u] < sz[v]) {
    a[u] = a[v];
    sz[v] += sz[u];
  } else {
    a[v] = a[u];
    sz[u] += sz[v];
  }
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);

  int n;
  std::cin >> n;

  std::vector<int> a(N), sz(N), v(n + 1);
  std::vector<std::string> s(n + 1);

  initialize(a, sz);

  for (int i = 1; i <= n; i++) {
    std::cin >> v[i];
  }

  for (int i = 0; i < n; i++) {
    std::cin >> s[i];
    for (int j = 0; j < n; j++) {
      if (s[i][j] == '1') {
        if (root(a, i + 1) != root(a, j + 1)) {
          merge(a, sz, i + 1, j + 1);
        }
      }
    }
  }

  std::vector<std::priority_queue<int>> v_e(n + 1);
  for (int i = 1; i <= n; i++) {
    v_e[root(a, i)].push(v[i]);
  }

  for (int i = 1; i <= n; i++) {
    int x = root(a, i);
    std::cout << v_e[x].top() << " ";
    v_e[x].pop();
  }

  std::cout << '\n';

  return 0;
}