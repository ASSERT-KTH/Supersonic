#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

const int N = 400;

vector<int> sz(N, 1);
vector<int> a(N);
vector<int> v_e[N];

void initialize() {
  memset(a.data(), 0, sizeof(int) * N);
  for (int i = 1; i <= N - 1; i++) {
    a[i] = i;
  }
}

int root(int i) {
  if (a[i] != i) {
    a[i] = root(a[i]); // path compression during find operation
  }
  return a[i];
}

void merge(int x, int y) {
  int u = root(x);
  int v = root(y);
  if (sz[u] < sz[v]) {
    swap(u, v);
  }
  a[v] = a[u];
  sz[u] += sz[v];
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int n;
  cin >> n;

  initialize();

  vector<int> v(n + 1);
  for (int i = 1; i <= n; i++) {
    cin >> v[i];
  }

  vector<string> s(n);
  for (int i = 0; i < n; i++) {
    cin >> s[i];
    for (int j = 0; j < n; j++) {
      if (s[i][j] == '1') {
        if (root(i + 1) != root(j + 1)) {
          merge(i + 1, j + 1);
        }
      }
    }
  }

  for (int i = 1; i <= n; i++) {
    v_e[root(i)].push_back(v[i]);
  }

  for (int i = 1; i <= n; i++) {
    int x = root(i);
    cout << v_e[x].back() << " ";
    v_e[x].pop_back();
  }

  cout << endl;
}