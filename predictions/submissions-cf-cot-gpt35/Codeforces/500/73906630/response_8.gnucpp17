#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

void initialize(vector<int>& a, vector<int>& sz) {
  for (int i = 1; i < a.size(); i++) {
    a[i] = i;
    sz[i] = 1;
  }
}

int root(vector<int>& a, int i) {
  while (a[i] != i) {
    a[i] = a[a[i]];
    i = a[i];
  }
  return i;
}

void merge(vector<int>& a, vector<int>& sz, int x, int y) {
  int u = root(a, x);
  int v = root(a, y);
  if (sz[u] < sz[v]) {
    swap(u, v);
  }
  a[v] = a[u];
  sz[u] += sz[v];
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int n;
  cin >> n;

  vector<int> a(n + 1);
  vector<int> sz(n + 1);
  initialize(a, sz);

  vector<int> v(n + 1);
  for (int i = 1; i <= n; i++) {
    cin >> v[i];
  }

  vector<pair<int, int>> vertices(n + 1);
  for (int i = 1; i <= n; i++) {
    vertices[i].second = i;
  }

  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= n; j++) {
      char c;
      cin >> c;
      if (c == '1') {
        if (root(a, i) != root(a, j)) {
          merge(a, sz, i, j);
        }
      }
    }
  }

  for (int i = 1; i <= n; i++) {
    int x = root(a, i);
    vertices[x].first = v[i];
  }

  sort(vertices.begin() + 1, vertices.end());

  for (int i = 1; i <= n; i++) {
    cout << vertices[i].first << " ";
  }

  return 0;
}