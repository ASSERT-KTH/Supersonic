#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>

using namespace std;

const int MOD = 1e9 + 7;

void initialize(vector<int>& a, vector<int>& sz) {
  for (int i = 1; i < a.size(); i++) {
    a[i] = i;
    sz[i] = 1;
  }
}

int root(vector<int>& a, int i) {
  while (a[i] != i) {
    a[i] = a[a[i]];
    i = a[i];
  }
  return i;
}

void merge(vector<int>& a, vector<int>& sz, int x, int y) {
  int u = root(a, x);
  int v = root(a, y);
  if (sz[u] < sz[v]) {
    swap(u, v);
  }
  a[v] = a[u];
  sz[u] += sz[v];
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  
  int n;
  cin >> n;
  
  vector<int> a(n + 1);
  vector<int> sz(n + 1);
  vector<int> v(n + 1);
  
  initialize(a, sz);
  
  for (int i = 1; i <= n; i++) {
    cin >> v[i];
  }
  
  vector<string> s(n);
  for (int i = 0; i < n; i++) {
    cin >> s[i];
    for (int j = 0; j < n; j++) {
      if (s[i][j] == '1') {
        if (root(a, i + 1) != root(a, j + 1)) {
          merge(a, sz, i + 1, j + 1);
        }
      }
    }
  }
  
  vector<priority_queue<int>> v_e(n + 1);
  
  for (int i = 1; i <= n; i++) {
    int x = root(a, i);
    v_e[x].push(v[i]);
  }
  
  for (int i = 1; i <= n; i++) {
    cout << v_e[i].top() << " ";
    v_e[i].pop();
  }
  
  cout << endl;
  
  return 0;
}