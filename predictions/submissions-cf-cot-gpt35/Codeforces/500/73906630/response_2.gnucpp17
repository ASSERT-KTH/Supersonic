#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
using namespace std;

const int N = 400;

int sz[N];
int a[N], ans[N];
vector<int> v_i[N], v_e[N];

void initialize(int n) {
  for (int i = 1; i <= n; i++) {
    a[i] = i;
    sz[i] = 1;
  }
}

int root(int i) {
  return a[i] = (a[i] == i ? i : root(a[i]));
}

void merge(int x, int y) {
  int u = root(x);
  int v = root(y);
  if (sz[u] < sz[v]) {
    swap(u, v);
  }
  a[v] = a[u];
  sz[u] += sz[v];
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  
  int n;
  cin >> n;
  initialize(n);
  
  int v[n + 1];
  for (int i = 1; i <= n; i++) {
    cin >> v[i];
  }
  
  string s[n + 1];
  for (int i = 1; i <= n; i++) {
    cin >> s[i];
    for (int j = 1; j <= n; j++) {
      if (s[i][j - 1] == '1' && root(i) != root(j)) {
        merge(i, j);
      }
    }
  }
  
  for (int i = 1; i <= n; i++) {
    v_e[root(i)].push_back(v[i]);
  }
  
  for (int i = 1; i <= n; i++) {
    vector<int>& vec = v_e[i];
    int cnt = vec.size();
    
    if (cnt > 1) {
      int count[101] = {0};
      
      for (int j = 0; j < cnt; j++) {
        count[vec[j]]++;
      }
      
      int idx = 0;
      for (int j = 0; j <= 100; j++) {
        while (count[j]--) {
          vec[idx++] = j;
        }
      }
    }
  }
  
  for (int i = 1; i <= n; i++) {
    int x = root(i);
    cout << v_e[x][--sz[x]] << " ";
  }
  cout << endl;
}