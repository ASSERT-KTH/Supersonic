Step-by-step optimization:
1. Remove unnecessary header files: The program includes the `<bits/stdc++.h>` header file, which includes all standard library headers. This can increase the compilation time and unnecessary memory usage. Instead, include only the necessary header files.
2. Remove unused type definitions: The `typedef` statements for `ull` and `ld` are not used in the program and can be removed.
3. Remove unnecessary preprocessor macros: The `PI` and `MOD` macros are defined but not used in the program. They can be removed.
4. Use constant variables instead of macros: Replace the macros `N` and `sz` with constant variables to improve program readability.
5. Use range-based for loops: Instead of using traditional for loops with index variables, use range-based for loops where possible to simplify the code.
6. Optimize data structures: Instead of using a vector of vectors for `v_i` and `v_e`, use a single vector of vectors of pairs to store both the vertex and its value. This reduces memory usage and simplifies the code.
7. Optimize union-find algorithm: Instead of using the weighted quick-union algorithm, use the path compression technique to optimize the `root` function.
8. Remove unnecessary function: The `initialize` function is not used in the program and can be removed.
9. Optimize sorting: Instead of sorting all the elements in each `v_e` vector, use the partial_sort function to sort only the required number of elements.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

const int N = 400;

int a[N], sz[N];
std::vector<std::pair<int, int>> v_e[N];

int root(int i) {
  while (a[i] != i) {
    a[i] = a[a[i]];
    i = a[i];
  }
  return i;
}

void merge(int x, int y) {
  int u = root(x);
  int v = root(y);
  if (sz[u] < sz[v]) {
    std::swap(u, v);
  }
  a[v] = a[u];
  sz[u] += sz[v];
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);

  int n;
  std::cin >> n;

  for (int i = 1; i <= n; i++) {
    a[i] = i;
    sz[i] = 1;
  }

  std::vector<int> v(n + 1);
  for (int i = 1; i <= n; i++) {
    std::cin >> v[i];
  }

  std::vector<std::string> s(n);
  for (int i = 0; i < n; i++) {
    std::cin >> s[i];
    for (int j = 0; j < n; j++) {
      if (s[i][j] == '1' && root(i + 1) != root(j + 1)) {
        merge(i + 1, j + 1);
      }
    }
  }

  for (int i = 1; i <= n; i++) {
    v_e[root(i)].emplace_back(i, v[i]);
  }

  for (int i = 1; i <= n; i++) {
    std::partial_sort(v_e[i].begin(), v_e[i].begin() + sz[i], v_e[i].end(),
                      [](const std::pair<int, int>& a, const std::pair<int, int>& b) {
                        return a.second < b.second;
                      });
  }

  for (int i = 1; i <= n; i++) {
    int x = root(i);
    std::cout << v_e[x][i - 1].second << " ";
  }

  std::cout << std::endl;

  return 0;
}
```