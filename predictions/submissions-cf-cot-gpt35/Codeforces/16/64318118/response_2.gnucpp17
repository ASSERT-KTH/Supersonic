#include <iostream>
#include <vector>
#include <iomanip>

using namespace std;

inline void solve() {
  int n;
  cin >> n;
  vector<vector<double>> m(n, vector<double>(n, 0));
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      cin >> m[i][j];
    }
  }
  vector<double> dp(1 << n, 0);
  dp[(1 << n) - 1] = 1;
  
  for (int i = (1 << n) - 2; i >= 0; i--) {
    int ruby = 0;
    for (int g = 0; g < n; g++) {
      if ((i >> g) & 1) {
        ruby++;
      }
    }
    
    for (int j = 0; j < n; j++) {
      if (!((i >> j) & 1)) {
        continue;
      }
      int a = i - (1 << j);
      
      for (int k = j + 1; k < n; k++) {
        if (!((i >> k) & 1)) {
          continue;
        }
        int b = a - (1 << k);
        
        dp[b] += 2 * dp[i] / (ruby * (ruby - 1)) * m[j][k];
        dp[a] += 2 * dp[i] / (ruby * (ruby - 1)) * m[k][j];
      }
    }
  }
  
  for (int i = 0; i < n; i++) {
    cout << fixed << setprecision(20) << dp[1 << i] << ' ';
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  
  solve();
}