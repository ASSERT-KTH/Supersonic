#include <iostream>
#include <vector>
#include <iomanip>
using namespace std;

inline void solve() {
  int n;
  cin >> n;
  vector<vector<double>> m(n, vector<double>(n, 0));
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      cin >> m[i][j];
    }
  }
  int maxMask = (1 << n) - 1;
  vector<double> dp(maxMask + 1, 0);
  dp[maxMask] = 1;
  for (int i = maxMask - 1; i >= 0; i--) {
    int ruby = __builtin_popcount(i);
    for (int j = 0; j < n; j++) {
      if ((i >> j) & 1) {
        for (int k = j + 1; k < n; k++) {
          if ((i >> k) & 1) {
            int a = i ^ (1 << j);
            int b = i ^ (1 << k);
            dp[b] += 2 * dp[i] / (ruby * (ruby - 1)) * m[j][k];
            dp[a] += 2 * dp[i] / (ruby * (ruby - 1)) * m[k][j];
          }
        }
      }
    }
  }
  for (int i = 0; i < n; i++) {
    cout << fixed << setprecision(10) << dp[1 << i] << ' ';
  }
}

int main() {
  solve();
  return 0;
}