The given program can be optimized by removing unnecessary includes, typedefs, and macros. We can also eliminate the need for the `op` array and reduce the number of iterations in the last two loops.

Here are the optimization steps:
1. Remove unnecessary includes.
2. Remove typedefs and macros.
3. Remove the `INPUT` and `OUTPUT` functions as they are not required.
4. Remove the `op` array and modify the last two loops to calculate and update the `ans` array directly.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int n, m, k;
  cin >> n >> m >> k;
  long long arr[n];
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }
  long long a, b, c;
  long long ans[n] = {0};
  for (int i = 0; i < m; i++) {
    cin >> a >> b >> c;
    ans[a - 1] += c;
    ans[b] -= c;
  }
  for (int i = 1; i < n; i++) {
    ans[i] += ans[i - 1];
  }
  for (int i = 0; i < k; i++) {
    int x, y;
    cin >> x >> y;
    ans[x - 1]++;
    ans[y]--;
  }
  for (int i = 1; i < n; i++) {
    ans[i] += ans[i - 1];
  }
  for (int i = 0; i < n; i++) {
    cout << ans[i] + arr[i] << " ";
  }
  cout << endl;
  return 0;
}
```