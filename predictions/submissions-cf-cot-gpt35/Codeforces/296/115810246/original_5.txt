Step 1: Remove unnecessary header files

The program includes the `bits/stdc++.h` header file, which is not necessary. We can remove this line.

Step 2: Remove unused typedefs

The program defines `ll` as `long long` and `vi` as `vector<int>`, but these types are not used in the program. We can remove these typedefs.

Step 3: Remove unused macros

The program defines several macros, such as `el`, `PI`, `MP`, `pb`, `all`, `sz`, `clr`, `EPS`, and `MOD`. However, these macros are not used in the program. We can remove these macros.

Step 4: Remove unused arrays

The program declares arrays `a`, `b`, `c`, `ans`, and `op`, but these arrays are not used. We can remove these arrays.

Step 5: Optimize input/output functions

The program defines `INPUT` and `OUTPUT` functions, but they are not used. We can remove these functions.

Step 6: Optimize loop variables

The program uses nested loops with variables `i` and `j`. We can optimize these loop variables by using `i` for the outer loop and `j` for the inner loop.

Step 7: Optimize array access

The program uses array access with indices `a[i]`, `b[i]`, `c[i]`, `op[i]`, `ans[i]`, and `arr[i]` multiple times within the loops. We can optimize these array accesses by storing the values in variables before using them.

Step 8: Optimize loop bounds

The program uses loop bounds `n`, `m`, and `k` to iterate over arrays. We can optimize these loop bounds by storing the values in variables before using them.

Step 9: Optimize loop conditions

The program uses loop conditions `i < n`, `i < m`, `i < k`, `i < m`, and `i < n` multiple times within the loops. We can optimize these loop conditions by storing the values in variables before using them.

Step 10: Optimize loop increments

The program uses loop increments `i++` within the loops. We can optimize these loop increments by using pre-increment (`++i`) instead of post-increment (`i++`).

Step 11: Optimize array initialization

The program initializes the `arr` array with values from input. We can optimize this array initialization by using `std::vector` instead of a fixed-size array.

Step 12: Optimize output

The program uses multiple `cout` statements to output the results. We can optimize the output by storing the results in a `std::vector` and then outputting the vector all at once.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

int main() {
  int n, m, k;
  std::cin >> n >> m >> k;

  std::vector<long long> arr(n);
  for (int i = 0; i < n; ++i) {
    std::cin >> arr[i];
  }

  std::vector<long long> a(m), b(m), c(m);
  for (int i = 0; i < m; ++i) {
    std::cin >> a[i] >> b[i] >> c[i];
  }

  std::vector<int> op(k);
  for (int i = 0; i < k; ++i) {
    int x, y;
    std::cin >> x >> y;
    ++op[x - 1];
    --op[y];
  }

  for (int i = 1; i < m; ++i) {
    op[i] += op[i - 1];
  }

  std::vector<long long> ans(n);
  for (int i = 0; i < m; ++i) {
    ans[a[i] - 1] += op[i] * c[i];
    ans[b[i]] -= op[i] * c[i];
  }

  std::vector<long long> output(n);
  output[0] = arr[0] + ans[0];
  for (int i = 1; i < n; ++i) {
    ans[i] += ans[i - 1];
    output[i] = arr[i] + ans[i];
  }

  for (int i = 0; i < n; ++i) {
    std::cout << output[i] << " ";
  }
  std::cout << std::endl;

  return 0;
}
```