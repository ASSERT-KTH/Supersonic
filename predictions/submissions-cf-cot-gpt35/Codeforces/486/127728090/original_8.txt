Explanation of the optimization steps:

1. Remove unnecessary include statement: The program includes the entire `bits/stdc++.h` header, which is not necessary for this program. We can remove this include statement to reduce unnecessary code dependencies.

2. Remove unnecessary namespace declaration: The program includes the entire `std` namespace using the `using` directive. Since we are only using `cin`, `cout`, and `endl` from the `std` namespace, we can explicitly specify them instead of using the entire namespace.

3. Simplify the calculation of `sum`:
  - Instead of using an `if-else` condition to calculate `sum`, we can simplify it by using the formula `sum = (n + 1) / 2 * (-1)`. This formula works for both even and odd values of `n`.
  - We can also remove the `long long` data type for `sum` since it is not necessary. The result of the calculation will fit within an `int`.

4. Optimize input/output operations:
  - Instead of using the `cin` and `cout` streams from the `iostream` library, we can use the faster `scanf` and `printf` functions from the `cstdio` library.
  - We can use the format specifier `%lld` for reading the input value of `n` as a `long long` integer.

Here is the optimized program:

```cpp
#include <cstdio>

int main() {
  int n;
  scanf("%d", &n);
  
  int sum = (n + 1) / 2 * (-1);
  
  printf("%d\n", sum);
  return 0;
}
```