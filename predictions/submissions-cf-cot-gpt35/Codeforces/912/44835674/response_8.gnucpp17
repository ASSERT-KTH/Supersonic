#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <cmath>

using namespace std;

const int maxN = 16;
int p[maxN];
int n;

bool prime(int x) {
    if (x < 2) return false;
    for (int d = 2; d * d <= x; ++d) {
        if (x % d == 0) return false;
    }
    return true;
}

void gen_all(const vector<int>& src, vector<long long>& dest, long long cur = 1, int ind = 0) {
    if (ind == src.size()) {
        dest.push_back(cur);
        return;
    }
    while (cur != -1) {
        gen_all(src, dest, cur, ind + 1);
        if (cur <= (1e18 / src[ind])) {
            cur *= src[ind];
        } else {
            cur = -1;
        }
    }
}

long long cnt(long long val, const vector<long long>& A, const vector<long long>& B) {
    int ind = B.size() - 1;
    long long res = 0;
    for (const auto& e : A) {
        if (e > val) break;
        int low = 0, high = B.size() - 1, ans = -1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (B[mid] > val / e) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        res += ans + 1;
    }
    return res;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
        scanf("%d", &p[i]);
    }
    
    const int B_sz = 9;
    vector<int> pA;
    for (int i = B_sz; i < n; ++i) {
        pA.push_back(p[i]);
    }
    vector<long long> A, B;
    gen_all(pA, A);
    for (int i = 0; i < min(B_sz, n); ++i) {
        B.push_back(p[i]);
    }
    gen_all(B, B);
    
    sort(A.begin(), A.end());
    sort(B.begin(), B.end());
    
    int k;
    scanf("%d", &k);
    
    long long l = 0, r = 1e18;
    while (l + 1 != r) {
        long long m = (l + r) / 2;
        if (cnt(m, A, B) >= k) {
            r = m;
        } else {
            l = m;
        }
    }
    
    printf("%lld", r);
    
    return 0;
}