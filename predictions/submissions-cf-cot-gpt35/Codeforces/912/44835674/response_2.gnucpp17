#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

constexpr int maxN = 16;
int p[maxN];
int n;

bool prime(int x) {
    if (x < 2) {
        return false;
    }
    for (int d = 2; d * d <= x; ++d) {
        if (x % d == 0) {
            return false;
        }
    }
    return true;
}

void gen_all(const vector<int>& src, vector<long long>& dest) {
    dest.clear();
    dest.push_back(1);
    for (int i = 0; i < src.size(); ++i) {
        int sz = dest.size();
        for (int j = 0; j < sz; ++j) {
            long long cur = dest[j];
            while (cur != -1) {
                dest.push_back(cur);
                if (cur <= 1e18 / src[i]) {
                    cur *= src[i];
                } else {
                    cur = -1;
                }
            }
        }
    }
}

long long cnt(const vector<long long>& A, const vector<long long>& B, long long val) {
    int ind = B.size() - 1;
    long long res = 0;
    for (const auto& e : A) {
        if (e > val) {
            break;
        }
        res += upper_bound(B.begin(), B.end(), val / e) - B.begin();
    }
    return res;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> p[i];
    }

    const int B_sz = 9;
    vector<int> pA(p + B_sz, p + n);
    vector<long long> A, B;
    gen_all(pA, A);

    vector<int> pB(p, p + min(B_sz, n));
    gen_all(pB, B);

    sort(A.begin(), A.end());
    sort(B.begin(), B.end());

    long long k;
    cin >> k;

    long long l = 0, r = 1e18;
    while (l + 1 != r) {
        long long m = (l + r) / 2;
        if (cnt(A, B, m) >= k) {
            r = m;
        } else {
            l = m;
        }
    }

    cout << r << endl;

    return 0;
}