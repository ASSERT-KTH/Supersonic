#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

using namespace std;

const int maxN = 16;
int p[maxN];
int n;
vector<long long> A, B;

bool isPrime(int x) {
    if (x <= 1)
        return false;
    if (x <= 3)
        return true;
    if (x % 2 == 0 || x % 3 == 0)
        return false;
    for (int i = 5; i * i <= x; i += 6) {
        if (x % i == 0 || x % (i + 2) == 0)
            return false;
    }
    return true;
}

void generateAll(const vector<int>& src, vector<long long>& dest, long long cur = 1, int ind = 0) {
    if (ind == src.size()) {
        dest.push_back(cur);
        return;
    }
    while (cur != -1) {
        generateAll(src, dest, cur, ind + 1);
        if (cur <= LLONG_MAX / src[ind])
            cur *= src[ind];
        else
            cur = -1;
    }
}

long long countValues(long long val) {
    int ind = B.size() - 1;
    long long res = 0;
    for (const auto& e : A) {
        if (e > val)
            break;
        res += lower_bound(B.begin(), B.end(), val / e) - B.begin();
    }
    return res;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    cin >> n;
    for (int i = 0; i < n; ++i)
        cin >> p[i];

    const int B_sz = 9;
    vector<int> pA(p + B_sz, p + n);
    generateAll(pA, A);

    vector<int> pB(p, p + min(B_sz, n));
    generateAll(pB, B);

    sort(A.begin(), A.end());
    sort(B.begin(), B.end());

    int k;
    cin >> k;

    long long l = 0, r = 1e18;
    while (l + 1 != r) {
        long long m = (l + r) / 2;
        if (countValues(m) >= k)
            r = m;
        else
            l = m;
    }
    cout << r;

    return 0;
}