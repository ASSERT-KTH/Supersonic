#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

using namespace std;

constexpr int maxN = 16;

bool prime(int x) {
  if (x < 2) return false;
  for (int d = 2; d * d <= x; ++d) {
    if (x % d == 0) return false;
  }
  return true;
}

void gen_max_test() {
  freopen("input.txt", "w", stdout);
  cout << maxN << endl;
  int last = 1;
  for (int i = 0; i < maxN; ++i) {
    while (!prime(++last)) {}
    cout << last << " ";
  }
}

void safe_mul(long long &a, int b) {
  constexpr long long MAX = 1e18;
  if (a <= MAX / b) {
    a *= b;
  } else {
    a = -1;
  }
}

void gen_all(const vector<int> &src, vector<long long> &dest) {
  dest.clear();
  dest.push_back(1);
  for (int i = 0; i < src.size(); ++i) {
    int n = dest.size();
    for (int j = 0; j < n; ++j) {
      safe_mul(dest[j], src[i]);
      if (dest[j] != -1) {
        dest.push_back(dest[j]);
      }
    }
  }
}

long long cnt(const vector<long long> &A, const vector<long long> &B, long long val) {
  int ind = B.size() - 1;
  long long res = 0;
  for (const auto &e : A) {
    if (e > val) {
      break;
    }
    res += upper_bound(B.begin(), B.end(), val / e) - B.begin();
  }
  return res;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);

  int n;
  cin >> n;
  vector<int> p(n);
  for (int i = 0; i < n; ++i) {
    cin >> p[i];
  }

  constexpr int B_sz = 9;
  vector<int> pA(p.begin() + B_sz, p.end());
  vector<long long> A;
  gen_all(pA, A);

  vector<int> pB(p.begin(), p.begin() + min(B_sz, n));
  vector<long long> B;
  gen_all(pB, B);

  sort(A.begin(), A.end());
  sort(B.begin(), B.end());

  int k;
  cin >> k;

  long long l = 0, r = 1e18;
  while (l + 1 != r) {
    long long m = l + (r - l) / 2;
    if (cnt(A, B, m) >= k) {
      r = m;
    } else {
      l = m;
    }
  }

  cout << r;

  return 0;
}