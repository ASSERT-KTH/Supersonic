#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cassert>

using namespace std;

bool prime(int x) {
  if (x < 2) {
    return false;
  }
  for (int d = 2; d * d <= x; ++d) {
    if (x % d == 0) {
      return false;
    }
  }
  return true;
}

void gen_all(const vector<int>& src, vector<long long>& dest) {
  int n = src.size();
  dest.push_back(1);
  for (int i = 0; i < n; ++i) {
    int m = dest.size();
    for (int j = 0; j < m; ++j) {
      long long cur = dest[j];
      while (cur != -1) {
        dest.push_back(cur);
        cur *= src[i];
      }
    }
  }
}

long long cnt(const vector<long long>& A, const vector<long long>& B, long long val) {
  int n = B.size();
  int i = 0, j = n - 1;
  long long res = 0;
  while (i < n && j >= 0) {
    if (A[i] * B[j] <= val) {
      res += j + 1;
      ++i;
    } else {
      --j;
    }
  }
  return res;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);

  int n;
  cin >> n;
  vector<int> p(n);
  for (int i = 0; i < n; ++i) {
    cin >> p[i];
  }

  const int B_sz = 9;
  vector<int> pA(p.begin() + B_sz, p.end());
  vector<long long> A, B;
  gen_all(pA, A);
  gen_all(vector<int>(p.begin(), p.begin() + min(B_sz, n)), B);

  int k;
  cin >> k;
  long long l = 0, r = 1e18;
  while (l + 1 != r) {
    long long m = (l + r) / 2;
    if (cnt(A, B, m) >= k) {
      r = m;
    } else {
      l = m;
    }
  }
  cout << r << endl;

  return 0;
}