The given program calculates the average of an array of integers by excluding the minimum value. The program uses a loop to read the input values, finds the minimum value, calculates the sum, and then calculates the average.

To optimize the program for running time and memory usage, we can make the following modifications:

1. Instead of using an array to store the input values, we can use a single variable to store the current input value and update the minimum value and sum incrementally. This eliminates the need for an array and reduces memory usage.

2. Instead of calculating the average inside the loop, we can calculate the sum and find the minimum value in a single loop iteration. Then, outside the loop, we can calculate the average and print the result. This reduces the number of calculations and improves running time.

Here is the optimized program:

```cpp
#include <iostream>
#include <limits>
#include <iomanip>
using namespace std;

int main() {
  int test;
  cin >> test;
  
  while (test--) {
    int n;
    cin >> n;
    
    int min = numeric_limits<int>::max();
    long long int sum = 0;
    
    for (int i = 0; i < n; i++) {
      int num;
      cin >> num;
      
      if (num < min)
        min = num;
      
      sum += num;
    }
    
    if (n > 1) {
      double ans = static_cast<double>(sum - min) / (n - 1) + min;
      cout << setprecision(8) << ans << endl;
    }
  }
  
  return 0;
}
```

Explanation of optimization steps:

1. Removed the unnecessary include of `<bits/stdc++.h>` and included only the necessary headers `<iostream>`, `<limits>`, and `<iomanip>`.

2. Changed the namespace from `std` to `using namespace std` to avoid having to prefix `cin`, `cout`, etc. with `std::`.

3. Replaced the array `arr` with a single variable `num` to store the current input value.

4. Initialized `min` with `numeric_limits<int>::max()` to ensure that the first input value will be smaller than `min` during the first iteration.

5. Replaced `INT_MIN` with `numeric_limits<int>::max()` to initialize `min` in order to find the minimum value correctly.

6. Removed the unnecessary `double` datatype for `min` and instead used `int`.

7. Replaced `(sum - min) / (n - 1)` with `static_cast<double>(sum - min) / (n - 1)` to ensure that the division is performed with floating-point arithmetic.

8. Removed the unnecessary `bits/stdc++.h` include at the beginning of the program.