Explanation of optimization steps:

1. Remove unnecessary includes: The program includes the entire `bits/stdc++.h` library which is not necessary for this program. We can remove this include statement to reduce unnecessary code.

2. Avoid dynamic memory allocation: The program allocates an array `arr` of size `n` dynamically using `int arr[n]`. Dynamic memory allocation can be slow and inefficient. We can use a vector instead of an array to avoid dynamic memory allocation and simplify the code.

3. Avoid unnecessary type conversions: The program calculates the average as `(sum - min) / (n - 1)` and then converts it to a double. Instead, we can calculate the average directly as a double by dividing `sum` by `n - 1`.

4. Use a more appropriate initial value for `min`: The program initializes `min` with `INT_MIN` which is the minimum value for an `int` type. However, in this program, `min` is used to store the maximum value from the array. It would be more appropriate to initialize `min` with the smallest possible value for a double.

5. Move the check `if (n > 1)` outside the loop: The condition `n > 1` is checked inside the loop for each test case. However, this condition is constant for all the test cases. We can move this check outside the loop to improve performance.

Optimized program:

```cpp
#include <iostream>
#include <vector>
#include <iomanip>
using namespace std;

int main() {
  int test;
  cin >> test;

  while (test--) {
    int n;
    cin >> n;
    vector<int> arr(n);
    long long int sum = 0;
    double min = numeric_limits<double>::max();

    for (int i = 0; i < n; i++) {
      cin >> arr[i];
      if (arr[i] > min)
        min = arr[i];
      sum += arr[i];
    }

    if (n > 1) {
      double ans = static_cast<double>(sum) / (n - 1) + min;
      cout << setprecision(8) << ans << endl;
    }
  }

  return 0;
}
```