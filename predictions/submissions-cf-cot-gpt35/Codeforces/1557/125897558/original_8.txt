Step 1: Remove unnecessary header file

The program includes the header file `<bits/stdc++.h>`, which is not a standard header file and is not necessary for this program. We can remove it.

Step 2: Avoid using variable-length arrays

The program declares an array `arr` with a variable length `n`. Variable-length arrays are not recommended in C++ and can lead to undefined behavior. We can use a dynamic array or a vector instead.

Step 3: Avoid unnecessary floating-point calculations

The program performs floating-point calculations to find the average of the array elements. However, we only need the maximum value and the sum of the array elements to calculate the average. We can avoid the floating-point calculations and calculate the average using integer arithmetic.

Step 4: Optimize the loop

The loop iterates over the array elements to find the maximum value and calculate the sum. We can optimize the loop by combining both operations in a single loop iteration, reducing the number of loop iterations.

Step 5: Remove unnecessary conditional statement

The program checks if `n` is greater than 1 before calculating the average. However, the loop already guarantees that `n` will be greater than 1. We can remove this unnecessary conditional statement.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <iomanip>
using namespace std;

int main() {
  int test;
  cin >> test;
  while (test--) {
    int n;
    cin >> n;
    vector<int> arr(n);
    long long int sum = 0;
    int max_val = INT_MIN;
    for (int i = 0; i < n; i++) {
      cin >> arr[i];
      sum += arr[i];
      if (arr[i] > max_val)
        max_val = arr[i];
    }
    double ans = static_cast<double>(sum - max_val) / (n - 1) + max_val;
    cout << setprecision(8) << ans << endl;
  }
  return 0;
}
```