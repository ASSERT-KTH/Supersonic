Optimization Steps:

1. Avoid unnecessary includes: The program includes `<bits/stdc++.h>`, which includes all standard library headers. This can result in slower compilation times and unnecessary code bloat. We can replace it with the necessary headers, such as `<iostream>`, `<vector>`, and `<map>`.

2. Avoid unnecessary copying of vectors: The `solve` function takes a vector `a` by value, which means it creates a copy of the vector every time the function is called. This can be avoided by passing it by reference to avoid the overhead of copying.

3. Use reserve for vectors: The vectors `ans` and `k` are resized multiple times inside the loops. This can be optimized by reserving the necessary capacity upfront to avoid resizing.

4. Use emplace_back instead of push_back: The `k` vector is used to store elements that are not present in `a`. Instead of using `push_back`, we can use `emplace_back` to directly construct and insert the element at the end of the vector, avoiding unnecessary copies or moves.

5. Avoid unnecessary map initialization: The `m` map is passed to the `solve` function and is initialized as an empty map inside the function. This is unnecessary, as the map is only used to insert elements. We can remove the initialization and directly use `m[a[i]] = i`.

6. Use iterators for looping over containers: Instead of using a loop with an index and accessing the elements using `[]` operator, we can use iterators to loop over the containers. This can be more efficient and avoids potential out-of-bounds errors.

7. Use cout with '\n' instead of endl: The `print` function uses `endl` to print a newline, which flushes the output stream. This can be slower compared to using `'\n'` to print a newline character and avoids unnecessary flushing.

8. Avoid unnecessary map creation: The `k` map is created after calling the `solve` function and is used to store the original values of `a`. This map is unnecessary, as we can directly access the original values from `a`.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <map>

using namespace std;

int solve(int n, vector<int>& ans, const vector<int>& a, map<int, int>& m) {
    vector<bool> check(2e5 + 12, 0);
    int c = 0;
    
    for (int i = 1; i <= n; i++) {
        if (!check[a[i]]) {
            ans[i] = a[i];
            m[a[i]] = i;
            check[a[i]] = 1;
            c++;
        }
    }
    
    vector<int> k;
    k.reserve(n);
    
    for (int i = 1; i <= n; i++) {
        if (!check[i]) {
            k.emplace_back(i);
        }
    }
    
    int h = k.size();
    
    for (int i = 1; i <= n; i++) {
        if (ans[i] == 0) {
            ans[i] = k[h - 1];
            h--;
        }
    }
    
    return c;
}

void print(const vector<int>& ans, int c) {
    cout << c << '\n';
    
    for (int i = 1; i < ans.size(); i++) {
        cout << ans[i] << ' ';
    }
    
    cout << '\n';
}

int main() {
    int t;
    cin >> t;
    
    while (t--) {
        int n;
        cin >> n;
        
        vector<int> a(n + 1);
        for (int i = 1; i <= n; i++) {
            cin >> a[i];
        }
        
        vector<int> ans(n + 1);
        map<int, int> m;
        
        int number = solve(n, ans, a, m);
        
        for (int i = 1; i <= n; i++) {
            if (ans[i] == i) {
                ans[i] = a[i];
                ans[m[a[i]]] = i;
            }
        }
        
        print(ans, number);
    }
}
```
