To optimize the given program, we can make the following changes:

1. Remove unnecessary headers: The `#include <bits/stdc++.h>` header includes a large number of standard C++ headers, which may not be necessary for this program. We can include only the required headers instead.

2. Avoid unnecessary copying of vectors: In the `solve` function, the vector `a` is passed by value, which creates a copy of the vector each time the function is called. This can be avoided by passing it by const reference instead.

3. Avoid unnecessary resizing of vectors: In the `solve` function, the vector `ans` is initialized with a size of `n+1`. However, the actual number of elements used in the vector is `n`. We can initialize the vector with a size of `n` to avoid unnecessary resizing.

4. Use a smaller data type for the 'check' vector: The 'check' vector is initialized with a size of `2e5 + 12`, which is much larger than necessary. We can use a smaller data type (e.g., `vector<char>`) to reduce memory usage.

5. Avoid unnecessary map initialization: In the `main` function, the map `m` is initialized but not used. We can remove this unnecessary initialization.

6. Use range-based for loop: In the `print` function, we can use a range-based for loop instead of the traditional for loop to iterate over the elements of the vector `ans`.

7. Use '\n' instead of endl: In the `print` function, using `"\n"` instead of `endl` can improve performance as `endl` flushes the output buffer.

8. Use emplace_back instead of push_back: In the `k` vector in the `solve` function, we can use `emplace_back` instead of `push_back` to construct the vector elements in-place, which can improve performance.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <map>
using namespace std;

int solve(int n, vector<int>& ans, const vector<int>& a, vector<char>& check) {
  int c = 0;
  for (int i = 1; i <= n; i++) {
    if (!check[a[i]]) {
      ans[i] = a[i];
      check[a[i]] = 1;
      c++;
    }
  }
  vector<int> k;
  for (int i = 1; i <= n; i++) {
    if (!check[i]) {
      k.emplace_back(i);
    }
  }
  int h = k.size();
  for (int i = 1; i <= n; i++) {
    if (ans[i] == 0) {
      ans[i] = k[h - 1];
      h--;
    }
  }
  return c;
}

void print(const vector<int>& ans, int c) {
  cout << c << "\n";
  for (int x : ans) {
    cout << x << " ";
  }
  cout << "\n";
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; i++) {
      cin >> a[i];
    }
    vector<int> ans(n);
    vector<char> check(2e5 + 12, 0);
    int number = solve(n, ans, a, check);
    map<int, int> k;
    for (int i = 0; i < n; i++) {
      k[i + 1] = a[i];
    }
    for (int i = 0; i < n; i++) {
      if (ans[i] == i + 1) {
        ans[i] = k[i + 1];
        ans[k[i + 1] - 1] = i + 1;
      }
    }
    print(ans, number);
  }
}
```