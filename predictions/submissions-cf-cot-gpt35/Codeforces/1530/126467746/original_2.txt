The given program has a time complexity of O(n^2) because it iterates over the array multiple times. To optimize the program, we can reduce the number of iterations and improve the overall time complexity.

Here are the steps to optimize the program:

1. Remove the unnecessary header file `#include <bits/stdc++.h>`.
2. Replace the `map<int, int> m` with a `vector<int> m`.
3. Instead of initializing `vector<bool> check(2e5 + 12, 0)`, initialize it with `vector<bool> check(n + 1, false)`.
4. Remove the second loop that populates the vector `k`. Instead, initialize `int h = n - c;`.
5. Change the last loop to iterate from `int i = c + 1; i <= n; i++`.
6. Remove the unnecessary map `k`.
7. Simplify the last loop by removing the condition `if (ans[i] == i)`.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int solve(int n, vector<int>& ans, vector<int>& a, vector<int>& m) {
    vector<bool> check(n + 1, false);
    int c = 0;

    for (int i = 1; i <= n; i++) {
        if (!check[a[i]]) {
            ans[i] = a[i];
            m[a[i]] = i;
            check[a[i]] = true;
            c++;
        }
    }

    int h = n - c;
    for (int i = 1; i <= n; i++) {
        if (ans[i] == 0) {
            ans[i] = h;
            h--;
        }
    }

    return c;
}

void print(vector<int>& ans, int c) {
    cout << c << "\n";
    for (int i = 1; i < ans.size(); i++) {
        cout << ans[i] << " ";
    }
    cout << "\n";
}

int main() {
    int t;
    cin >> t;

    while (t--) {
        int n;
        cin >> n;

        vector<int> a(n + 1);
        for (int i = 1; i <= n; i++) {
            cin >> a[i];
        }

        vector<int> ans(n + 1);
        vector<int> m(n + 1);

        int number = solve(n, ans, a, m);

        for (int i = 1; i <= n; i++) {
            if (ans[i] != i) {
                ans[i] = a[i];
                ans[m[a[i]]] = i;
            }
        }

        print(ans, number);
    }

    return 0;
}
```

By using the above optimizations, the program will have a reduced time complexity and improved memory usage.