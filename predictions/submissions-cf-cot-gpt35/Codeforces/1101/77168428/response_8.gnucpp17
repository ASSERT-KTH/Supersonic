#include <iostream>
#include <vector>
#include <map>
using namespace std;

#define fs first
#define sc second
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define pb push_back
#define MP make_pair
#define sz(x) (int)x.size()
#define fastio ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define sqr(x) ((x) * (x))
const int N = 2e5 + 100;
vector<int> g[N], val(N), d(N), primes;
int ans = 0;
int dp[N][N], cur[N];
int max2[N][2];

vector<int> get(int x) {
  vector<int> ret;
  for (int i = 2; i * i <= x; i++) {
    if (x % i == 0) {
      ret.pb(i);
      while (x % i == 0)
        x /= i;
    }
  }
  if (x != 1)
    ret.pb(x);
  return ret;
}

void dfs(int v, int p) {
  vector<int> cur = get(val[v]);
  int size = sz(cur);
  for (auto u : g[v]) {
    if (u == p)
      continue;
    dfs(u, v);
    for (int i = 0; i < size; i++) {
      int x = cur[i];
      if (!dp[u][x])
        continue;
      if (max2[i][0] < dp[u][x]) {
        max2[i][1] = max2[i][0];
        max2[i][0] = dp[u][x];
      } else if (max2[i][1] < dp[u][x]) {
        max2[i][1] = dp[u][x];
      }
    }
  }
  for (int i = 0; i < size; i++) {
    int x = cur[i];
    ans = max(ans, max2[i][0] + max2[i][1] + 1);
    dp[v][x] = max2[i][0] + 1;
  }
}

int main() {
  fastio;
  for (int i = 2; i < N; i++) {
    if (d[i] == 0) {
      d[i] = i;
      primes.pb(i);
    }
    for (auto x : primes) {
      if (x > d[i] || x * i >= N)
        break;
      d[x * i] = x;
    }
  }
  int n;
  cin >> n;
  for (int i = 0; i < n; i++)
    cin >> val[i];
  for (int i = 0, a, b; i < n - 1; i++) {
    cin >> a >> b;
    a--;
    b--;
    g[a].pb(b);
    g[b].pb(a);
  }
  dfs(0, -1);
  printf("%d\n", ans);
}