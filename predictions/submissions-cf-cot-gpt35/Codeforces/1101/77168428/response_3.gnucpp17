#include <iostream>
#include <vector>
#include <unordered_map>

#define fastio ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)

const int N = 2e5 + 100;

std::vector<int> g[N], val(N), d(N);
std::unordered_map<int, int> dp[N];

int dfs(int v, int p, std::vector<int>& primes) {
  std::vector<int> cur;
  int ans = 0;
  
  int x = val[v];
  while (x > 1) {
    int i = d[x];
    cur.emplace_back(i);
    while (x % i == 0)
      x /= i;
  }

  std::vector<int> t(cur.size());
  for (auto u : g[v]) {
    if (u == p)
      continue;
    int idx = 0;
    for (auto x : cur) {
      if (!dp[u].count(x))
        continue;
      t[idx] = std::max(t[idx], dp[u][x]);
      idx++;
    }
    dfs(u, v, primes);
  }

  for (int i = 0; i < cur.size(); i++) {
    int x = cur[i];
    ans = std::max(ans, t[i] + 1);
    dp[v][x] = t[i] + 1;
  }

  return ans;
}

int main() {
  fastio;

  for (int i = 2; i < N; i++) {
    if (d[i] == 0) {
      d[i] = i;
    }
    for (int j = i + i; j < N; j += i) {
      if (d[j] == 0)
        d[j] = i;
    }
  }

  int n;
  std::cin >> n;
  
  val.resize(n);
  for (int i = 0; i < n; i++)
    std::cin >> val[i];

  for (int i = 0, a, b; i < n - 1; i++) {
    std::cin >> a >> b;
    a--;
    b--;
    g[a].emplace_back(b);
    g[b].emplace_back(a);
  }
  
  std::vector<int> primes;
  int ans = dfs(0, -1, primes);
  std::cout << ans << '\n';

  return 0;
}