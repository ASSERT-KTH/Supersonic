#include <iostream>
#include <vector>
#include <map>
#include <cmath>
using namespace std;

const int N = 2e5 + 100;
vector<int> g[N], val(N), d(N), primes;
map<int, int> dp[N];
int ans = 0;

vector<int> get(int x) {
  vector<int> ret;
  for (auto p : primes) {
    if (p * p > x)
      break;
    if (x % p == 0) {
      ret.push_back(p);
      while (x % p == 0)
        x /= p;
    }
  }
  if (x != 1)
    ret.push_back(x);
  return ret;
}

void dfs(int v, int p) {
  vector<int> cur = get(val[v]);
  int x = 0, y = 0;
  for (auto u : g[v]) {
    if (u == p)
      continue;
    dfs(u, v);
    for (int i = 0; i < cur.size(); i++) {
      int p = cur[i];
      if (!dp[u].count(p))
        continue;
      int z = dp[u][p];
      if (z >= x)
        y = x, x = z;
      else if (z >= y)
        y = z;
    }
  }
  for (int i = 0; i < cur.size(); i++) {
    int p = cur[i];
    ans = max(ans, x + y + 1);
    dp[v][p] = x + 1;
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  for (int i = 2; i * i < N; i++) {
    if (d[i] == 0) {
      d[i] = i;
      primes.push_back(i);
    }
    for (auto p : primes) {
      if (p > d[i] || p * i >= N)
        break;
      d[p * i] = p;
    }
  }

  int n;
  cin >> n;
  for (int i = 0; i < n; i++)
    cin >> val[i];
  for (int i = 0, a, b; i < n - 1; i++) {
    cin >> a >> b;
    a--;
    b--;
    g[a].push_back(b);
    g[b].push_back(a);
  }
  dfs(0, -1);
  cout << ans << '\n';

  return 0;
}