The given program can be optimized by using a more efficient algorithm to calculate the sum. Instead of calculating the sum in each iteration of the loop, we can keep track of the minimum price and update it when necessary. Then, we can calculate the final sum using the minimum price and the total amount of each item.

Here is the optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
  int n;
  cin >> n;
  short a, p, m = 101;
  long int sum = 0;

  while (n--) {
    cin >> a >> p;
    m = min(m, p);
    sum += a;
  }

  cout << sum * m;
  return 0;
}
```

Explanation of the optimization:
1. We initialize `m` (minimum price) to 101, which is higher than the maximum possible price of 100. This ensures that the first price encountered in the loop will always be smaller than `m`.
2. Instead of updating `m` with the ternary operator `m = m > p ? p : m`, we can use the `min` function to update `m` with the smaller value of `m` and `p`. This eliminates unnecessary comparisons and assignments.
3. We accumulate the total amount of each item in the `sum` variable, instead of calculating the partial sum in each iteration of the loop.
4. Finally, we calculate the final sum by multiplying the total amount (`sum`) with the minimum price (`m`).