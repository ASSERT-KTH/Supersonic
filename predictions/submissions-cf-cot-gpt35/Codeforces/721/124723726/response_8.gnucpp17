#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int inf = 1e9 + 7;

void solve() {
    int t1 = 1;
    for (int tt = 1; tt <= t1; tt++) {
        int n, m, T;
        scanf("%d %d %d", &n, &m, &T);
        vector<vector<pair<int, int>>> adj(n + 1);
        for (int i = 0; i < m; i++) {
            int u, v, w;
            scanf("%d %d %d", &u, &v, &w);
            adj[u].push_back({v, w});
        }
        vector<int> dp(n + 1, inf);
        vector<int> par(n + 1, -1);
        dp[1] = 0;
        vector<int> indc(n + 1, -1);
        for (int j = 1; j < n; j++) {
            for (int i = 1; i <= n; i++) {
                for (auto& e : adj[i]) {
                    int to = e.first;
                    if (dp[to] > dp[i] + e.second && dp[i] + e.second <= T) {
                        indc[to] = i;
                        dp[to] = dp[i] + e.second;
                        par[to] = i;
                    }
                }
            }
        }
        int res = 0;
        for (int i = 1; i <= n; i++)
            if (dp[n] <= T)
                res = i;
        vector<int> ans;
        int cur = n;
        int jumps = res;
        ans.push_back(cur);
        while (jumps > 1) {
            ans.push_back(par[cur]);
            cur = par[cur];
            jumps--;
        }
        printf("%d\n", res);
        for (int i : ans)
            printf("%d ", i);
        printf("\n");
    }
}

int main() {
    solve();
    return 0;
}