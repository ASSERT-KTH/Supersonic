#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Edge {
    int v, w;
};

void solve() {
    int t1 = 1;
    for (int tt = 1; tt <= t1; tt++) {
        int n, m, T;
        cin >> n >> m >> T;
        vector<vector<Edge>> adj(n + 1);
        for (int i = 0; i < m; i++) {
            int u, v, w;
            cin >> u >> v >> w;
            adj[u].push_back({v, w});
        }
        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 1e9 + 7));
        vector<vector<int>> par(n + 1, vector<int>(n + 1, -1));
        dp[1][1] = 0;
        vector<int> indc(n + 1, -1);
        for (int j = 1; j < n; j++) {
            for (int i = 1; i <= n; i++) {
                for (const auto& e : adj[i]) {
                    int to = e.v;
                    if (dp[to][j + 1] > dp[i][j] + e.w && dp[i][j] + e.w <= T) {
                        indc[to] = i;
                        dp[to][j + 1] = dp[i][j] + e.w;
                        par[to][j + 1] = i;
                    }
                }
            }
        }
        int res = 0;
        for (int i = 1; i <= n; i++) {
            if (dp[n][i] <= T) {
                res = i;
            }
        }
        vector<int> ans(res);
        int cur = n;
        int jumps = res;
        ans[0] = cur;
        for (int i = 1; i < res; i++) {
            ans[i] = par[cur][jumps];
            cur = par[cur][jumps];
            jumps--;
        }
        for (int i : ans) {
            cout << i << " ";
        }
        cout << endl;
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    solve();
    return 0;
}