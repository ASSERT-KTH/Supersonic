#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

constexpr int MOD = 1000000007;

template <class T>
inline bool chmin(T& a, T b) {
  return a > b ? a = b, true : false;
}

template <class T>
inline bool chmax(T& a, T b) {
  return a < b ? a = b, true : false;
}

template <class T>
inline void add(T& a, T b) {
  a += b;
  a %= MOD;
}

template <class T>
inline void sub(T& a, T b) {
  a -= b;
  a = (a + MOD) % MOD;
}

template <class T>
inline void mul(T& a, T b) {
  a = (a * b) % MOD;
}

void solve() {
  int t1 = 1;
  for (int tt = 1; tt <= t1; tt++) {
    int n, m, T;
    cin >> n >> m >> T;
    vector<vector<pair<int, int>>> adj(n + 1);
    for (int i = 0; i < m; i++) {
      int u, v, w;
      cin >> u >> v >> w;
      adj[u].push_back({v, w});
    }
    vector<vector<int>> dp(n + 1, vector<int>(n + 1, MOD));
    vector<vector<int>> par(n + 1, vector<int>(n + 1, -1));
    dp[1][1] = 0;
    vector<int> indc(n + 1, -1);
    for (int j = 1; j < n; j++) {
      for (int i = 1; i <= n; i++) {
        for (auto e : adj[i]) {
          int to = e.first;
          if (dp[to][j + 1] > dp[i][j] + e.second && dp[i][j] + e.second <= T) {
            indc[to] = i;
            dp[to][j + 1] = dp[i][j] + e.second;
            par[to][j + 1] = i;
          }
        }
      }
    }
    int res = 0;
    for (int i = 1; i <= n; i++) {
      if (dp[n][i] <= T) {
        res = i;
      }
    }
    vector<int> ans;
    int cur = n;
    int jumps = res;
    ans.push_back(cur);
    while (jumps > 1) {
      ans.push_back(par[cur][jumps]);
      cur = par[cur][jumps];
      jumps--;
    }
    reverse(ans.begin(), ans.end());
    cout << res << '\n';
    for (int i : ans) {
      cout << i << ' ';
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  solve();
  return 0;
}