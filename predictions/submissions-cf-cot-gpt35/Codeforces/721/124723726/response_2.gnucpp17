#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

using ll = long long int;

void solve() {
    int n, m, T;
    cin >> n >> m >> T;

    vector<vector<pair<int, int>>> adj(n + 1);
    for (int i = 0; i < m; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        adj[u].emplace_back(v, w);
    }

    vector<vector<int>> dp(n + 1, vector<int>(n + 1, 1e9 + 7));
    vector<pair<int, int>> par(n + 1);
    dp[1][1] = 0;

    for (int j = 1; j < n; j++) {
        for (int i = 1; i <= n; i++) {
            for (auto e : adj[i]) {
                int to = e.first;
                if (dp[to][j + 1] > dp[i][j] + e.second && dp[i][j] + e.second <= T) {
                    dp[to][j + 1] = dp[i][j] + e.second;
                    par[to] = {i, j + 1};
                }
            }
        }
    }

    int res = 0;
    for (int i = 1; i <= n; i++) {
        if (dp[n][i] <= T) {
            res = i;
        }
    }

    vector<int> ans;
    int cur = n;
    int jumps = res;
    ans.emplace_back(cur);
    while (jumps > 1) {
        ans.emplace_back(par[cur].first);
        cur = par[cur].first;
        jumps = par[cur].second;
    }

    reverse(ans.begin(), ans.end());

    cout << res << '\n';
    for (int i : ans) {
        cout << i << ' ';
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    solve();

    return 0;
}