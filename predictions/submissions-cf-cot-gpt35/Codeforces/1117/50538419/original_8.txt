Step 1: Remove unnecessary header file inclusion.

The `#include <bits/stdc++.h>` is a non-standard header file that includes most of the standard library headers. It is not recommended to use this header file in production code. Instead, we should include only the necessary standard library headers.

Step 2: Use `std::cin` and `std::cout` for input/output.

The program currently uses `cin` and `cout` without the `std::` namespace prefix. It is a good practice to use the fully qualified names `std::cin` and `std::cout` to avoid potential naming conflicts.

Step 3: Remove unnecessary global variables.

The program currently declares global variables `n`, `i`, `mx`, `cnt`, and `ans`. It is better to declare these variables within the `main()` function to limit their scope.

Step 4: Optimize the loop for finding the maximum element.

The program currently iterates over the array twice - once to find the maximum element and then again to count the occurrences of the maximum element. We can optimize this by combining both operations into a single loop.

Step 5: Optimize the loop for finding the maximum count.

The program currently checks the count after encountering a non-maximum element. We can optimize this by moving the count update outside the loop and removing the redundant check.

Here is the optimized C++ program:

```cpp
#include <iostream>
#define M 100001

int main() {
  int n;
  std::cin >> n;

  int arr[M];
  for (int i = 1; i <= n; i++) {
    std::cin >> arr[i];
  }

  int mx = -1;
  int cnt = 0;
  int ans = 1;

  for (int i = 1; i <= n; i++) {
    if (arr[i] > mx) {
      mx = arr[i];
      cnt = 1;
    } else if (arr[i] == mx) {
      cnt++;
    } else {
      ans = std::max(ans, cnt);
      cnt = 0;
    }
  }

  std::cout << std::max(cnt, ans) << '\n';

  return 0;
}
```