To optimize the given program, we can make the following improvements:

1. Remove unnecessary header file inclusion: The `#include <bits/stdc++.h>` is a non-standard and slow way to include multiple standard library headers. We can remove this line and include only the necessary headers.

2. Avoid using global variables: The variables `arr`, `n`, `i`, `mx`, `cnt`, and `ans` are declared as global variables. It is generally recommended to avoid using global variables as they can cause issues with code readability and maintainability. We can declare these variables locally within the `main()` function.

3. Use `std::ios_base::sync_with_stdio(false)` and `std::cin.tie(NULL)`: By default, C++ standard streams are synchronized with C streams, which can slow down the input/output operations. We can disable this synchronization by adding `std::ios_base::sync_with_stdio(false)` and `std::cin.tie(NULL)` to improve the input/output performance.

4. Optimize the loop for finding the maximum element: Instead of iterating from 1 to `n` to find the maximum element, we can use the `std::max_element` function from the `<algorithm>` header to find the maximum element in the array in a single line.

5. Optimize the loop for counting occurrences: Instead of using a separate loop to count the occurrences of the maximum element, we can count the occurrences within the same loop where we find the maximum element. This way, we can avoid the need for an extra loop and improve the efficiency of the program.

Here's the optimized version of the program:

```cpp
#include <iostream>
#include <algorithm>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  int n;
  std::cin >> n;

  int mx = -1, cnt = 0, ans = 1;
  for (int i = 0; i < n; i++) {
    int num;
    std::cin >> num;

    if (num > mx) {
      mx = num;
      cnt = 1;
    } else if (num == mx) {
      cnt++;
    } else {
      ans = std::max(ans, cnt);
      cnt = 0;
    }
  }

  std::cout << std::max(cnt, ans) << '\n';

  return 0;
}
```

By making these optimizations, we have improved the running time and memory usage of the program.