To optimize the given program, we can make the following modifications:

1. Remove unnecessary header inclusion: The program includes the `<bits/stdc++.h>` header, which is not standard and includes many unnecessary headers. We can remove this line and explicitly include the required headers.

2. Remove unnecessary global variables: The variables `i`, `mx`, `cnt`, and `ans` are unnecessary global variables. We can declare them inside the `main` function to reduce their scope.

3. Optimize the loop for finding the maximum element: Instead of iterating over the array twice, we can find the maximum element in a single pass by updating the maximum value during input.

4. Optimize the loop for counting consecutive occurrences: We can modify the loop to count the consecutive occurrences of the maximum element while iterating over the array. This eliminates the need for the `cnt` variable and reduces the number of iterations.

5. Simplify the final output: Instead of taking the maximum between `cnt` and `ans` when printing the result, we can directly output `ans` as it already stores the maximum count.

Here is the optimized version of the program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int n;
  cin >> n;

  int mx = -1;
  int ans = 1;
  int curr = 0;

  for (int i = 0; i < n; i++) {
    int num;
    cin >> num;

    if (num > mx) {
      mx = num;
      curr = 1;
    } else if (num == mx) {
      curr++;
    } else {
      ans = max(ans, curr);
      curr = 0;
    }
  }

  cout << max(ans, curr) << '\n';
}
```
