Step 1: Avoid unnecessary includes
The first optimization we can make is to remove the unnecessary `#include <bits/stdc++.h>` header. This header includes a large number of standard library headers, which can slow down the compilation process. In this program, we only need to include `<iostream>` and `<vector>`. 

Step 2: Optimize the `check` function
The `check` function is the most time-consuming part of the program. It iterates over the positions from 0 to `pos` and calculates the current position based on the given formula. We can optimize this function by eliminating the loop and directly calculating the current position.

To calculate `full_periods`, we divide `pos` by `n`. To calculate `this_day`, we take the remainder of `pos` divided by `n`. We can then calculate `current_x` and `current_y` using these values.

Step 3: Optimize the main loop
The main loop in the program uses binary search to find the minimum `pos` value that satisfies the condition in the `check` function. However, we can optimize this loop by using a linear search instead. Since the `pos` values are sorted in ascending order, we can start from `pos = 0` and increment it until the condition is satisfied.

Step 4: Avoid unnecessary calculations
In the original program, the maximum value of `r` is set to `1e18`. However, the condition `if (r > 1e17)` is never satisfied because `r` will always be less than or equal to `1e18`. We can remove this condition and directly output the value of `r`.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <vector>

using namespace std;

typedef long long ll;

ll x1, y1, x2, y2;

bool check(const vector<ll>& x, const vector<ll>& y, int n, ll pos) {
  ll full_periods = pos / n;
  ll this_day = pos % n;
  ll current_x = x1 + full_periods * x[n] + x[this_day];
  ll current_y = y1 + full_periods * y[n] + y[this_day];
  return abs(x2 - current_x) + abs(y2 - current_y) <= pos;
}

int main() {
  int n;
  string s;
  cin >> x1 >> y1 >> x2 >> y2;
  cin >> n >> s;
  vector<ll> x(n + 1, 0), y(n + 1, 0);
  for (int i = 0; i < n; ++i) {
    if (s[i] == 'U')
      y[i + 1]++;
    if (s[i] == 'D')
      y[i + 1]--;
    if (s[i] == 'L')
      x[i + 1]--;
    if (s[i] == 'R')
      x[i + 1]++;
    x[i + 1] += x[i], y[i + 1] += y[i];
  }
  ll pos = 0;
  while (!check(x, y, n, pos)) {
    pos++;
  }
  cout << pos;
}
```

This optimized program eliminates unnecessary includes, optimizes the `check` function, and improves the main loop by using a linear search instead of binary search. It also removes the unnecessary condition `if (r > 1e17)` and directly outputs the value of `r`.