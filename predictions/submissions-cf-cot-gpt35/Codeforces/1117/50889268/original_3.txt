The given program can be optimized in the following steps:

1. Remove unnecessary includes: The program includes `<bits/stdc++.h>` which is not required. We can remove it.

2. Remove unnecessary global variables: The variables `x1`, `y1`, `x2`, `y2` can be moved inside `main()` function as local variables since they are not used outside of it.

3. Modify the `check()` function: In the `check()` function, the values of `x` and `y` are not modified. So instead of passing them as vectors, we can pass them as constant references to avoid unnecessary copying.

4. Use prefix sum technique: Instead of calculating `x[i + 1] += x[i]` and `y[i + 1] += y[i]` in each iteration of the loop, we can use the prefix sum technique to calculate them in O(n) time complexity. This will reduce the time complexity of the loop from O(n^2) to O(n).

5. Modify the binary search loop: Instead of using `r - l > 1` as the termination condition for the binary search loop, we can use `r > l + 1` which is equivalent. This will simplify the condition check in the loop.

6. Use integer division: Instead of using `(l + r) / 2` to calculate the mid value in the binary search loop, we can use `(l + r) >> 1` which is equivalent and faster because it uses bitwise shift.

7. Avoid unnecessary calculations: In the `check()` function, the variable `full_periods` is not used. We can remove it to avoid unnecessary calculations.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

bool check(const vector<long long>& x, const vector<long long>& y, int n, long long pos, long long x1, long long y1, long long x2, long long y2) {
  long long this_day = pos % n;
  long long current_x = x1 + (pos / n) * x[n] + x[this_day];
  long long current_y = y1 + (pos / n) * y[n] + y[this_day];
  return abs(x2 - current_x) + abs(y2 - current_y) <= pos;
}

int main() {
  int n;
  string s;
  long long x1, y1, x2, y2;
  cin >> x1 >> y1 >> x2 >> y2;
  cin >> n >> s;

  vector<long long> x(n + 1, 0), y(n + 1, 0);
  for (int i = 0; i < n; ++i) {
    if (s[i] == 'U')
      y[i + 1]++;
    if (s[i] == 'D')
      y[i + 1]--;
    if (s[i] == 'L')
      x[i + 1]--;
    if (s[i] == 'R')
      x[i + 1]++;
  }

  for (int i = 1; i <= n; ++i) {
    x[i] += x[i - 1];
    y[i] += y[i - 1];
  }

  long long l = 0, r = 1e18;
  while (r > l + 1) {
    long long mid = (l + r) >> 1;
    if (check(x, y, n, mid, x1, y1, x2, y2)) {
      r = mid;
    } else {
      l = mid;
    }
  }

  if (r > 1e17) {
    cout << -1;
  } else {
    cout << r;
  }

  return 0;
}
```