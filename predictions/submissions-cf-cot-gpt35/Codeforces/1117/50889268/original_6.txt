To optimize the given program, we can make the following modifications:

1. Remove unnecessary header file inclusion: The program includes `<bits/stdc++.h>` which is not necessary and can be removed to reduce compile time.

2. Remove unnecessary global variables: The variables `x1, y1, x2, y2` are declared as global variables but are only used in the `main` function. We can move their declaration inside the `main` function to reduce the scope and improve code readability.

3. Use `const` keyword for read-only variables: The variables `x1, y1, x2, y2` and `n` are read-only and their values do not change during the execution of the program. We can use the `const` keyword to indicate that these variables are constant and improve code readability.

4. Avoid unnecessary vector initialization: The vectors `x` and `y` are initialized with `n+1` elements, but only `n` elements are used. We can avoid the unnecessary initialization of the last element by reducing the size of the vectors to `n` elements.

5. Use prefix increment operator: In the loop where the vectors `x` and `y` are populated, the variables `i` and `s[i]` are used multiple times. Using the prefix increment operator `++i` instead of the postfix increment operator `i++` can be more efficient as it avoids the creation of a temporary object.

6. Use compound assignment operators: Instead of writing `x[i + 1] += x[i]` and `y[i + 1] += y[i]`, we can use compound assignment operators `+=` to simplify the code.

7. Use more descriptive variable names: The variable names `l` and `r` used in the binary search loop are not very descriptive. We can rename them to `left` and `right` to improve code readability.

After applying these optimizations, the optimized program is as follows:

```cpp
#include <iostream>
#include <vector>
using namespace std;

bool check(const vector<int>& x, const vector<int>& y, int n, long long pos) {
  long long full_periods = pos / n;
  long long this_day = pos % n;
  long long current_x = x[0] + full_periods * x[n] + x[this_day];
  long long current_y = y[0] + full_periods * y[n] + y[this_day];
  return abs(x[n+1] - current_x) + abs(y[n+1] - current_y) <= pos;
}

int main() {
  int n;
  string s;
  cin >> n >> s;
  
  int x1, y1, x2, y2;
  cin >> x1 >> y1 >> x2 >> y2;

  vector<int> x(n, 0), y(n, 0);
  for (int i = 0; i < n; ++i) {
    if (s[i] == 'U')
      y[i]++;
    if (s[i] == 'D')
      y[i]--;
    if (s[i] == 'L')
      x[i]--;
    if (s[i] == 'R')
      x[i]++;
    x[i] += x[i-1], y[i] += y[i-1];
  }
  
  long long left = 0, right = 1e18;
  while (right - left > 1) {
    long long mid = (left + right) / 2;
    if (check(x, y, n, mid)) {
      right = mid;
    } else {
      left = mid;
    }
  }
  
  if (right > 1e17) {
    cout << -1;
  } else {
    cout << right;
  }
}
```