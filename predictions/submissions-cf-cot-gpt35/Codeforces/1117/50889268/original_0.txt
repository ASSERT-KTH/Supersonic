The given program calculates the minimum time required for a person to reach from point (x1, y1) to point (x2, y2) based on a given string of directions (U, D, L, R) and the number of steps to be taken in each direction. The program uses binary search to find the minimum time.

To optimize this program, we can make the following improvements:

1. Avoid unnecessary include: The program includes the `<bits/stdc++.h>` header file, which includes a large number of standard library headers. We can replace it with the necessary standard library headers `iostream`, `vector`, and `string`.

2. Avoid global variables: The program uses global variables `x1, y1, x2, y2`. Global variables should be avoided as they can lead to potential bugs and make the code harder to understand. We can pass these variables as parameters to the `check` function.

3. Use `const` qualifier: The variables `n` and `s` in the `main` function do not need to be modified. We can use the `const` qualifier to indicate this.

4. Optimize the `check` function: The `check` function calculates the current position based on the full periods and the current day. We can optimize this calculation by removing the need for the `full_periods` variable. Instead, we can directly calculate the current_x and current_y using the formula:

   ```
   ll current_x = x1 + (pos / n) * x[n] + x[pos % n];
   ll current_y = y1 + (pos / n) * y[n] + y[pos % n];
   ```

5. Optimize the binary search: The binary search is performed using the variables `l` and `r`. We can optimize the binary search by using a more efficient condition for the while loop. Instead of `r - l > 1`, we can use `r > l + 1`. This eliminates the need for the subtraction operation in each iteration.

6. Use a better constant value: The program checks if `r > 1e17` to determine if the result is invalid. Instead of using `1e17` as a constant, we can use a more appropriate value to indicate an invalid result. For example, we can use `LLONG_MAX` from the `<climits>` header.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <climits>

#define ll long long

using namespace std;

bool check(const vector<ll>& x, const vector<ll>& y, int n, ll pos, ll x1, ll y1, ll x2, ll y2) {
  ll current_x = x1 + (pos / n) * x[n] + x[pos % n];
  ll current_y = y1 + (pos / n) * y[n] + y[pos % n];
  return abs(x2 - current_x) + abs(y2 - current_y) <= pos;
}

int main() {
  ll x1, y1, x2, y2;
  int n;
  string s;
  
  cin >> x1 >> y1 >> x2 >> y2;
  cin >> n >> s;
  
  vector<ll> x(n + 1, 0), y(n + 1, 0);
  for (int i = 0; i < n; ++i) {
    if (s[i] == 'U')
      y[i + 1]++;
    if (s[i] == 'D')
      y[i + 1]--;
    if (s[i] == 'L')
      x[i + 1]--;
    if (s[i] == 'R')
      x[i + 1]++;
    x[i + 1] += x[i], y[i + 1] += y[i];
  }
  
  ll l = 0, r = LLONG_MAX;
  while (r > l + 1) {
    ll mid = (l + r) / 2;
    if (check(x, y, n, mid, x1, y1, x2, y2)) {
      r = mid;
    } else {
      l = mid;
    }
  }
  
  if (r == LLONG_MAX) {
    cout << -1;
  } else {
    cout << r;
  }
}
```

This optimized version of the program improves the running time and memory usage by making small modifications to the original program.