To optimize the given program, we can make the following modifications:

1. Remove the unnecessary include statement `#include <bits/stdc++.h>`. This include statement is not recommended as it includes a large number of header files which can slow down compilation and increase memory usage.

2. Replace the `vector` data structure with arrays, as the size of the arrays is fixed and known at compile time. This can reduce memory usage and improve performance.

3. Instead of using the `abs` function to calculate the absolute difference between two values, we can directly subtract the values and take the absolute value using the `std::abs` function. This can eliminate the function call overhead.

4. Remove the unnecessary `using namespace std;` statement. It is considered a good practice to explicitly reference the standard library elements to avoid potential naming conflicts.

After applying these optimizations, the optimized program is as follows:

```cpp
#include <iostream>
#include <string>

typedef long long ll;

ll x1, y1, x2, y2;

bool check(ll* x, ll* y, int n, ll pos) {
  ll full_periods = pos / n;
  ll this_day = pos % n;
  ll current_x = x1 + full_periods * x[n] + x[this_day];
  ll current_y = y1 + full_periods * y[n] + y[this_day];
  return std::abs(x2 - current_x) + std::abs(y2 - current_y) <= pos;
}

int main() {
  int n;
  std::string s;
  std::cin >> x1 >> y1 >> x2 >> y2;
  std::cin >> n >> s;

  ll* x = new ll[n + 1];
  ll* y = new ll[n + 1];

  x[0] = y[0] = 0;

  for (int i = 0; i < n; ++i) {
    if (s[i] == 'U')
      y[i + 1]++;
    if (s[i] == 'D')
      y[i + 1]--;
    if (s[i] == 'L')
      x[i + 1]--;
    if (s[i] == 'R')
      x[i + 1]++;
    x[i + 1] += x[i], y[i + 1] += y[i];
  }

  ll l = 0, r = 1e18;

  while (r - l > 1) {
    ll mid = (l + r) / 2;
    if (check(x, y, n, mid)) {
      r = mid;
    } else {
      l = mid;
    }
  }

  if (r > 1e17) {
    std::cout << -1;
  } else {
    std::cout << r;
  }

  delete[] x;
  delete[] y;

  return 0;
}
```

These optimizations can improve the running time and memory usage of the program.