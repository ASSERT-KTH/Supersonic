#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <cmath>
using namespace std;

constexpr double PI = 3.14159265;
constexpr int N = 200005;
using ll = long long int;

vector<int> v[N], diam[N], tour, path;
int n, h[N], first[N], stmin[2 * N][20], root;
int vis1[N], vis2[N], vis3[N], vis4[N];
int parent[N], dist[N], root1;

void height_initialise(int x, int y) {
  h[x] = y;
  vis1[x] = 1;
  for (int i = 0; i < v[x].size(); i++) {
    int node = v[x][i];
    if (vis1[node] == 0) {
      height_initialise(node, y + 1);
    }
  }
}

void distanc(int x, int y) {
  dist[x] = y;
  vis3[x] = 1;
  for (int i = 0; i < v[x].size(); i++) {
    int node = v[x][i];
    if (vis3[node] == 0) {
      distanc(node, y + 1);
    }
  }
}

void euler(int x, int y) {
  vis2[x] = 1;
  tour.push_back(x);
  for (int i = 0; i < v[x].size(); i++) {
    int node = v[x][i];
    if (vis2[node] == 0) {
      euler(node, x);
    }
  }
  if (y != 0)
    tour.push_back(y);
}

void euler_tour() {
  euler(root, 0);
  for (int i = 0; i < tour.size(); i++) {
    if (first[tour[i]] == 0) {
      first[tour[i]] = i;
    }
  }
}

void sparsemin() {
  int n = tour.size();
  for (int i = 0; i < n; i++) {
    stmin[i][0] = tour[i];
  }
  for (int j = 1; (1 << j) <= n; j++) {
    for (int i = 0; i <= n - (1 << j); i++) {
      int x = stmin[i][j - 1];
      int y = stmin[i + (1 << (j - 1))][j - 1];
      stmin[i][j] = (h[x] > h[y]) ? y : x;
    }
  }
}

int spminquery(int l, int r) {
  int length = r - l + 1;
  int k = log2(length);
  int x = stmin[l][k];
  int y = stmin[l + length - (1 << k)][k];
  return (h[x] < h[y]) ? x : y;
}

int dfs(int x, int flag) {
  int y;
  queue<int> q;
  q.push(x);
  int vis[N] = {0};
  while (!q.empty()) {
    x = q.front();
    q.pop();
    vis[x] = 1;
    for (int i = 0; i < v[x].size(); i++) {
      int node = v[x][i];
      if (vis[node] == 0) {
        q.push(node);
        if (flag == 1) {
          parent[node] = x;
        }
      }
    }
    y = x;
  }
  return y;
}

void diameter() {
  int x, y, z, i, j;
  x = dfs(1, 0);
  y = dfs(x, 1);
  root1 = y;
  z = y;
  while (parent[z] != 0) {
    path.push_back(z);
    z = parent[z];
  }
  path.push_back(z);
  for (i = path.size() - 1; i >= 0; i--) {
    vis4[path[i]] = 1;
    diam[i].push_back(path[i]);
  }
  root = x;
  for (i = 0; i < path.size(); i++) {
    queue<int> q;
    q.push(path[i]);
    while (!q.empty()) {
      x = q.front();
      q.pop();
      vis4[x] = 1;
      for (j = 0; j < v[x].size(); j++) {
        int node = v[x][j];
        if (vis4[node] == 0) {
          q.push(node);
          diam[i].push_back(node);
        }
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> n;
  int x, y;
  vector<pair<int, int>> an;
  for (int i = 0; i < n - 1; i++) {
    cin >> x >> y;
    v[x].push_back(y);
    v[y].push_back(x);
  }
  diameter();
  height_initialise(root, 0);
  euler_tour();
  sparsemin();
  distanc(root, 0);
  int ans = 0;
  for (int i = 0; i < path.size() / 2; i++) {
    for (int j = diam[i].size() - 1; j > 0; j--) {
      x = root1;
      y = diam[i][j];
      an.push_back(make_pair(x, y));
      int l = first[x];
      int r = first[y];
      int z = spminquery(min(l, r), max(l, r));
      z = dist[x] + dist[y] - 2 * dist[z];
      ans += z;
    }
  }
  int x = path.size() / 2;
  for (int i = x; i < path.size(); i++) {
    for (int j = diam[i].size() - 1; j > 0; j--) {
      x = root;
      y = diam[i][j];
      an.push_back(make_pair(x, y));
      int l = first[x];
      int r = first[y];
      int z = spminquery(min(l, r), max(l, r));
      z = dist[x] + dist[y] - 2 * dist[z];
      ans += z;
    }
  }
  for (int i = path.size() - 1; i > 0; i--) {
    x = root;
    y = diam[i][0];
    an.push_back(make_pair(x, y));
    int l = first[x];
    int r = first[y];
    int z = spminquery(min(l, r), max(l, r));
    z = dist[x] + dist[y] - 2 * dist[z];
    ans += z;
  }
  cout << ans << endl;
  for (int i = 0; i < an.size(); i++) {
    cout << an[i].first << " " << an[i].second << " " << an[i].second << "\n";
  }
  return 0;
}