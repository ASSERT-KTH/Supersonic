#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

const int N = 62;
const int mod = 998244353;

int dp[N][N][N], way[10][N][N];
vector<bool> mp(N*N*N, false);

int dict(char a) {
  static const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  return chars.find(a);
}

void adding(int &a, int b) {
  a += b;
  if (a >= mod)
    a -= mod;
}

int mul(int a, int b) {
  return (a * 1ll * b) % mod;
}

int play(int i, int j, int k) {
  int mx = max(max(i, j), k);
  int mi = min(min(i, j), k);
  return dp[mx][i ^ j ^ k ^ mx ^ mi][mi];
}

void solve() {
  int n;
  cin >> n;
  
  for (int i = 1; i <= n; ++i) {
    string s;
    cin >> s;
    int len = s.length() - 1;
    if (!mp[dict(s[0]) * N * N + dict(s[len]) * N + len]) {
      way[len][dict(s[0])][dict(s[len])]++;
      mp[dict(s[0]) * N * N + dict(s[len]) * N + len] = true;
    }
  }

  int ans = 0;
  for (int L = 2; L <= 9; ++L) {
    for (int i = 0; i < N; ++i) {
      for (int j = 0; j <= i; ++j) {
        for (int k = 0; k <= j; ++k) {
          dp[i][j][k] = 0;
          for (int l = 0; l < N; ++l) {
            int a = mul(way[L][i][l], mul(way[L][j][l], way[L][k][l]));
            adding(dp[i][j][k], a);
          }
        }
      }
    }
    for (int i = 0; i < N; ++i) {
      for (int j = 0; j <= i; ++j) {
        for (int k = 0; k < N; ++k) {
          for (int l = 0; l <= k; ++l) {
            int a = mul(mul(play(i, k, l), play(j, l, k)), play(i, j, k));
            if (k != l)
              adding(a, a);
            if (i != j)
              adding(a, a);
            adding(ans, a);
          }
        }
      }
    }
  }
  
  cout << ans << endl;
}

int main() {
  solve();
  return 0;
}