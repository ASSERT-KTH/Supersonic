#include <iostream>
#include <vector>
#include <cstring>

const int N = 62;
const int mod = 998244353;

int dp[N][N][N], way[10][N][N];
std::vector<bool> mp;
char s[10];

int dict(char a) {
  static const std::vector<int> lookup = {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
    40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
    59, 60, 61
  };
  return lookup[a];
}

void adding(int& a, int b) {
  a += b;
  if (a >= mod) {
    a -= mod;
  }
}

int add(int a, int b) {
  a += b;
  if (a >= mod) {
    a -= mod;
  }
  return a;
}

int mul(int a, int b) {
  return (a * 1ll * b) % mod;
}

int play(int i, int j, int k) {
  int mx = std::max(std::max(i, j), k);
  int mi = std::min(std::min(i, j), k);
  return dp[mx][i ^ j ^ k ^ mx ^ mi][mi];
}

void solve() {
  int n;
  std::cin >> n;
  
  mp.assign(N, false);
  
  for (int i = 1; i <= n; ++i) {
    std::cin >> s;
    int len = std::strlen(s) - 1;
    if (!mp[s]) {
      way[len][dict(s[0])][dict(s[len])]++, mp[s] = true;
    }
    std::reverse(s, s + len + 1);
    if (!mp[s]) {
      way[len][dict(s[0])][dict(s[len])]++, mp[s] = true;
    }
  }
  
  int ans = 0;
  for (int L = 2; L <= 9; ++L) {
    for (int i = 0; i <= 61; ++i) {
      for (int j = 0; j <= i; ++j) {
        for (int k = 0; k <= j; ++k) {
          dp[i][j][k] = 0;
          for (int l = 0; l <= 61; ++l) {
            int a = (way[L][i][l] * 1ll * way[L][j][l] * way[L][k][l]) % mod;
            adding(dp[i][j][k], a);
          }
        }
      }
    }
    for (int i = 0; i <= 61; ++i) {
      for (int j = 0; j <= i; ++j) {
        for (int k = 0; k <= 61; ++k) {
          for (int l = 0; l <= k; ++l) {
            int a = mul(mul(play(i, k, l), play(j, l, k)),
                        mul(play(i, j, k), play(i, l, j)));
            if (k != l) {
              adding(a, a);
            }
            if (i != j) {
              adding(a, a);
            }
            adding(ans, a);
          }
        }
      }
    }
  }
  
  std::cout << ans << "\n";
}

int main() {
  solve();
  return 0;
}