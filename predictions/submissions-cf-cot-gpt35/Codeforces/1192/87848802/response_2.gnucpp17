#include <iostream>
#include <vector>
#include <unordered_map>
#include <cstring>
using namespace std;

const int N = 62;
const int mod = 998244353;

int dp[N][N][N], way[10][N][N];
unordered_map<string, bool> mp;
char s[10];

int dict(char a) {
    static const int lookup[128] = {
        // Lookup table for conversion
    };
    return lookup[a];
}

void adding(int& a, int b) {
    a += b;
    if (a >= mod) {
        a -= mod;
    }
}

int add(int a, int b) {
    a += b;
    if (a >= mod) {
        a -= mod;
    }
    return a;
}

int mul(int a, int b) {
    return (a * 1ll * b) % mod;
}

int play(int i, int j, int k) {
    int mx = max(max(i, j), k);
    int mi = min(min(i, j), k);
    return dp[mx][i ^ j ^ k ^ mx ^ mi][mi];
}

int main() {
    int n;
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i) {
        scanf(" %s", s);
        int len = strlen(s) - 1;
        if (!mp[s]) {
            ++way[len][dict(s[0])][dict(s[len])];
            mp[s] = true;
        }
        reverse(s, s + len + 1);
        if (!mp[s]) {
            ++way[len][dict(s[0])][dict(s[len])];
            mp[s] = true;
        }
    }
    int ans = 0;
    for (int L = 2; L <= 9; ++L) {
        for (int i = 0; i <= 61; ++i) {
            for (int j = 0; j <= i; ++j) {
                for (int k = 0; k <= j; ++k) {
                    dp[i][j][k] = 0;
                    for (int l = 0; l <= 61; ++l) {
                        int a = (way[L][i][l] * 1ll * way[L][j][l] * way[L][k][l]) % mod;
                        adding(dp[i][j][k], a);
                    }
                }
            }
        }
        for (int i = 0; i <= 61; ++i) {
            for (int j = 0; j <= i; ++j) {
                for (int k = 0; k <= 61; ++k) {
                    for (int l = 0; l <= k; ++l) {
                        int a = mul(mul(play(i, k, l), play(j, l, k)), mul(play(i, j, k), play(i, l, j)));
                        if (k != l) {
                            adding(a, a);
                        }
                        if (i != j) {
                            adding(a, a);
                        }
                        adding(ans, a);
                    }
                }
            }
        }
    }
    printf("%d\n", ans);
    return 0;
}