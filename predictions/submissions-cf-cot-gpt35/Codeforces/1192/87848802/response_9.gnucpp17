#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <cctype>

using namespace std;

const int N = 62;
const int mod = 998244353;

int dict(char a) {
  if (isalpha(a)) {
    if (isupper(a))
      return a - 'A';
    return a - 'a' + 26;
  }
  return a - '0' + 52;
}

void adding(int &a, int b) {
  if ((a += b) >= mod)
    a -= mod;
}

int add(int a, int b) { 
  return ((a += b) >= mod) ? a - mod : a;
}

int mul(int a, int b) { 
  return a * 1ll * b % mod; 
}

int play(int i, int j, int k, vector<vector<vector<int>>>& dp) {
  int mx = max(max(i, j), k);
  int mi = min(min(i, j), k);
  return dp[mx][i ^ j ^ k ^ mx ^ mi][mi];
}

void solve() {
  int n;
  cin >> n;

  vector<vector<vector<int>>> dp(N, vector<vector<int>>(N, vector<int>(N, 0)));
  vector<vector<vector<int>>> way(10, vector<vector<int>>(N, vector<int>(N, 0)));
  vector<string> strings;

  for (int i = 1; i <= n; ++i) {
    string s;
    cin >> s;
    int len = s.size() - 1;
    if (find(strings.begin(), strings.end(), s) == strings.end()) {
      way[len][dict(s[0])][dict(s[len])]++, strings.push_back(s);
    }
    reverse(s.begin(), s.end());
    if (find(strings.begin(), strings.end(), s) == strings.end()) {
      way[len][dict(s[0])][dict(s[len])]++, strings.push_back(s);
    }
  }

  int ans = 0;
  for (int L = 2; L <= 9; ++L) {
    for (int i = 0; i < 61; ++i) {
      for (int j = 0; j <= i; ++j) {
        for (int k = 0; k <= j; ++k) {
          dp[i][j][k] = 0;
          for (int l = 0; l < 61; ++l) {
            int a = (way[L][i][l] * 1ll * way[L][j][l] * way[L][k][l]) % mod;
            adding(dp[i][j][k], a);
          }
        }
      }
    }
    for (int i = 0; i < 61; ++i) {
      for (int j = 0; j <= i; ++j) {
        for (int k = 0; k < 61; ++k) {
          for (int l = 0; l <= k; ++l) {
            int a = mul(mul(play(i, k, l, dp), play(j, l, k, dp)), mul(play(i, j, k, dp), play(i, l, j, dp)));
            if (k != l)
              adding(a, a);
            if (i != j)
              adding(a, a);
            adding(ans, a);
          }
        }
      }
    }
  }

  cout << ans << endl;
}

int main() {
  solve();
  return 0;
}