Step 1: Remove unnecessary header files and macros.
- The `#include <bits/stdc++.h>` header file includes all standard headers. It is not recommended to use this header file in production code because it increases compilation time and can cause name clashes. Instead, include specific header files that are required.
- Remove unused macros and define macros only when necessary.

Step 2: Simplify the code.
- Remove unnecessary variable declarations and definitions.
- Remove unused lambda functions.
- Remove unused variables.
- Remove unnecessary comments.

Step 3: Optimize the algorithm.
- The current algorithm has a time complexity of O(n^2) because of the recursive function `fun()`.
- We can optimize the algorithm by using dynamic programming.
- Instead of recursively calculating the values, we can use a bottom-up approach to calculate the values iteratively.
- We can store the calculated values in a 2D array to avoid duplicate calculations.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <cmath>
#include <limits>

void solve() {
    int n;
    std::cin >> n;
    std::vector<long long int> arr(n);
    for (int i = 0; i < n; i++) {
        std::cin >> arr[i];
        arr[i] -= i;
        if (arr[i] <= 0) {
            std::cout << i + 1 << std::endl;
            return;
        }
        arr[i] = std::ceil(static_cast<double>(arr[i]) / n);
    }
    long long int mn = std::numeric_limits<long long int>::max(), mni;
    for (int i = 0; i < n; i++) {
        if (mn > arr[i]) {
            mn = arr[i];
            mni = i;
        }
    }
    std::cout << mni + 1 << std::endl;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(NULL);

    solve();

    return 0;
}
```