Optimization Steps:
1. Remove unnecessary header files: The program includes `<bits/stdc++.h>` which includes a lot of unnecessary header files. We can remove it and include only the necessary header files.
2. Remove unnecessary macros: There are multiple macros defined in the program that are not used. We can remove them to simplify the code.
3. Remove unused variables: The variable `ans` is declared but not used in the program. We can remove it to reduce memory usage.
4. Avoid unnecessary calculations: In the `fun` function, there are recursive calls to `fun` with the same parameters. We can avoid these unnecessary calculations by using memoization.
5. Avoid unnecessary division: In the `solve` function, there is a division operation to calculate `ceil(double(arr[i]) / n)`. We can avoid this division by calculating the ceiling value directly using integer arithmetic.
6. Use a more efficient algorithm: In the `solve` function, there is a loop to find the minimum value and its index in the `arr` vector. Instead of using a loop, we can use the `min_element` function from the `<algorithm>` header to find the minimum element and its index in a more efficient way.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

int fun(int m, int n) {
  static vector<vector<int>> memo(m + 1, vector<int>(n + 1, -1));
  if (n == 1)
    return 1;
  if (n > m)
    return 0;
  if (memo[m][n] != -1)
    return memo[m][n];
  memo[m][n] = fun(m - 1, n) + fun(m / 2, n - 1);
  return memo[m][n];
}

void solve() {
  int n;
  cin >> n;
  vector<long long> arr(n);
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
    arr[i] -= i;
    if (arr[i] <= 0) {
      cout << i + 1 << endl;
      return;
    }
    arr[i] = (arr[i] + n - 1) / n;
  }
  auto it = min_element(arr.begin(), arr.end());
  cout << distance(arr.begin(), it) + 1 << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  solve();
  return 0;
}
```

The optimized program removes unnecessary header files, macros, and variables. It uses memoization to avoid unnecessary calculations and uses the `min_element` function for more efficient minimum element finding.