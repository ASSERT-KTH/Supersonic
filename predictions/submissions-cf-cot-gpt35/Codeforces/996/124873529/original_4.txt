To optimize the given program, we can follow these steps:

1. Remove unnecessary header files.
2. Remove unnecessary macros.
3. Remove unnecessary functions.
4. Remove unnecessary variables.
5. Optimize the `fun` function.
6. Optimize the main function.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <cmath>
#include <climits>

using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> arr(n);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
        arr[i] -= i;
        if (arr[i] <= 0) {
            cout << i + 1 << endl;
            return 0;
        }
        arr[i] = ceil(static_cast<double>(arr[i]) / n);
    }
    int mn = INT_MAX, mni;
    for (int i = 0; i < n; i++) {
        if (mn > arr[i]) {
            mn = arr[i];
            mni = i;
        }
    }
    cout << mni + 1 << endl;

    return 0;
}
```

Explanation of optimizations:

1. Removed the unnecessary header files `bits/stdc++.h` and `chrono`.
2. Removed unnecessary macros and replaced them with their respective values.
3. Removed unnecessary functions `solve`, `power`, and `mod` as they are not used.
4. Removed unnecessary variables and declarations, such as `ans`.
5. Optimized the `fun` function by removing recursion and using iterative approach.
6. Simplified the main function by removing unnecessary macros and using `static_cast` instead of `double` type casting.