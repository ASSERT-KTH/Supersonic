Optimization Steps:

1. Remove unnecessary header files: The program includes `<bits/stdc++.h>` which includes a large number of header files, many of which are unnecessary for this program. We can remove this line and include only the necessary header files.

2. Remove unnecessary macros: The program defines a lot of macros that are not used in the code. We can remove these macros to simplify the code.

3. Remove unnecessary lambda functions: The program defines two lambda functions, `power` and `mod`, but these functions are not used anywhere in the code. We can remove these lambda functions.

4. Use `reserve` for vectors: The program creates a vector `arr` without specifying its size. We can use `arr.reserve(n)` to reserve memory for `n` elements in the vector, which can improve performance.

5. Use `int` instead of `ll`: The program uses `ll` (long long int) for some variables, but `int` would be sufficient for the given input constraints. We can replace `ll` with `int` to save memory.

6. Use `min_element` instead of manual loop: The program uses a manual loop to find the minimum element in the `arr` vector. We can use the `min_element` function from the `<algorithm>` header to simplify the code.

7. Simplify the calculation of `arr[i]`: The program calculates `arr[i]` using the `ceil` function, but we can simplify this calculation by dividing `arr[i]` by `n` and adding 1 if there is a remainder.

Optimized Program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

int main() {
  int n;
  cin >> n;
  vector<int> arr;
  arr.reserve(n);
  for (int i = 0; i < n; i++) {
    int num;
    cin >> num;
    num -= i;
    if (num <= 0) {
      cout << i + 1 << endl;
      return 0;
    }
    arr.push_back(num / n + (num % n != 0));
  }
  
  auto minElement = min_element(arr.begin(), arr.end());
  int mni = minElement - arr.begin();
  cout << mni + 1 << endl;
  
  return 0;
}
```