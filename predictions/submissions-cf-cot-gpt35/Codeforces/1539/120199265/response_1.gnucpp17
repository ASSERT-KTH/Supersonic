#include <iostream>
#include <vector>
#include <array>
#include <algorithm>

using namespace std;

#define int long long int

const int N = 2e5;
const int MOD = 1e9 + 7;

int n;
vector<int> st(1 << 20, 0);

void apply(int i, int x) {
  st[i] -= x;
}

void push(int i, int l2, int mid, int r2) {
  apply(2 * i, st[i]);
  apply(2 * i + 1, st[i]);
  st[i] = 0;
}

void build(int l1, int x) {
  st[l1 + n] = x;
}

void upd(int l1, int r1, int x) {
  int l2 = l1 + n, r2 = r1 + n;
  for (l2 += n, r2 += n; l2 < r2; l2 >>= 1, r2 >>= 1) {
    if (l2 & 1) apply(l2++, x);
    if (r2 & 1) apply(--r2, x);
  }
}

int qry1(int l1, int r1) {
  int res = 0;
  int l2 = l1 + n, r2 = r1 + n;
  for (l2 += n, r2 += n; l2 < r2; l2 >>= 1, r2 >>= 1) {
    if (l2 & 1) res = max(res, st[l2++]);
    if (r2 & 1) res = max(res, st[--r2]);
  }
  return res;
}

int qry2(int l1, int r1) {
  int res = MOD;
  int l2 = l1 + n, r2 = r1 + n;
  for (l2 += n, r2 += n; l2 < r2; l2 >>= 1, r2 >>= 1) {
    if (l2 & 1) res = min(res, st[l2++]);
    if (r2 & 1) res = min(res, st[--r2]);
  }
  return res;
}

void solve() {
  int n1;
  cin >> n1;
  vector<int> arr(n1);
  vector<array<int, 2>> b(n1);
  for (int i = 0; i < n1; i++) {
    cin >> arr[i];
    b[i] = {arr[i], i};
  }
  
  n = n1 + 1;
  for (int i = 0; i < n; i++)
    build(i, i);
  
  // Sort the b vector based on the first element
  sort(b.begin(), b.end());
  
  vector<int> ans(n1, 0);
  
  for (int i = n1 - 1; i >= 0; i--) {
    vector<int> del;
    int cur = b[i][0];
    while (i >= 0 && b[i][0] == cur) {
      int j = b[i][1];
      int p = qry1(j + 1, j + 1);
      int q = qry2(0, j);
      int r = qry1(j + 1, n - 1);
      del.push_back(b[i][1]);
      ans[j] = (p - q + r - p - 1) / 2;
      i--;
    }
    for (auto u : del) {
      upd(u + 1, n - 1, 2);
    }
    i++;
  }
  
  for (int i = 0; i < n1; i++)
    build(i, i);
  
  for (int i = 0; i < n1; i++) {
    vector<int> del;
    int cur = b[i][0];
    while (i < n1 && b[i][0] == cur) {
      int j = b[i][1];
      int p = qry1(j + 1, j + 1);
      int q = qry2(0, j);
      int r = qry1(j + 1, n - 1);
      del.push_back(b[i][1]);
      ans[j] = max(ans[j], (p - q + r - p) / 2);
      i++;
    }
    for (auto u : del) {
      upd(u + 1, n - 1, 2);
    }
    i--;
  }
  
  for (int i = 0; i < n1; i++)
    cout << ans[i] << " ";
}

int32_t main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  
  int t = 1;
  for (int i = 0; i < t; i++) {
    solve();
  }
  
  return 0;
}