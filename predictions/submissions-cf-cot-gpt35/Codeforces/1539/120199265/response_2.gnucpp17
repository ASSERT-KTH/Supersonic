#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int MOD = 1e9 + 7;

struct node {
  int mx, mi, lz;
};

int n;
vector<node> st;

void apply(int i, int x) {
  st[i].mx -= x;
  st[i].mi -= x;
  st[i].lz += x;
}

void upd(int l1, int r1, int x, int i = 1, int l2 = 0, int r2 = n - 1) {
  if (l1 <= l2 && r2 <= r1) {
    apply(i, x);
    return;
  }
  int mid = (l2 + r2) / 2;
  if (l1 <= mid)
    upd(l1, r1, x, 2 * i, l2, mid);
  if (mid < r1)
    upd(l1, r1, x, 2 * i + 1, mid + 1, r2);
  st[i].mx = max(st[2 * i].mx, st[2 * i + 1].mx);
  st[i].mi = min(st[2 * i].mi, st[2 * i + 1].mi);
}

int qry1(int l1, int r1, int i = 1, int l2 = 0, int r2 = n - 1) {
  if (l1 <= l2 && r2 <= r1) {
    return st[i].mx;
  }
  int mid = (l2 + r2) / 2;
  return max((l1 <= mid ? qry1(l1, r1, 2 * i, l2, mid) : -MOD),
             (mid < r1 ? qry1(l1, r1, 2 * i + 1, mid + 1, r2) : -MOD));
}

int qry2(int l1, int r1, int i = 1, int l2 = 0, int r2 = n - 1) {
  if (l1 <= l2 && r2 <= r1) {
    return st[i].mi;
  }
  int mid = (l2 + r2) / 2;
  return min((l1 <= mid ? qry2(l1, r1, 2 * i, l2, mid) : MOD),
             (mid < r1 ? qry2(l1, r1, 2 * i + 1, mid + 1, r2) : MOD));
}

void solve() {
  int n1;
  cin >> n1;
  vector<pair<int, int>> b(n1);
  for (int i = 0; i < n1; i++) {
    cin >> b[i].first;
    b[i].second = i;
  }
  sort(b.begin(), b.end());
  vector<int> ans(n1, 0);
  for (int i = n1 - 1; i >= 0; i--) {
    int cur = b[i].first;
    while (i >= 0 && b[i].first == cur) {
      int j = b[i].second;
      int p = qry1(j + 1, j + 1), q = qry2(0, j), r = qry1(j + 1, n - 1);
      ans[j] = (p - q + r - p - 1) / 2;
      upd(j + 1, n - 1, 2);
      i--;
    }
    i++;
  }
  for (int i = 0; i < n1; i++) {
    int cur = b[i].first;
    while (i < n1 && b[i].first == cur) {
      int j = b[i].second;
      int p = qry1(j + 1, j + 1), q = qry2(0, j), r = qry1(j + 1, n - 1);
      ans[j] = max(ans[j], (p - q + r - p) / 2);
      upd(j + 1, n - 1, 2);
      i++;
    }
    i--;
  }
  for (int i = 0; i < n1; i++)
    cout << ans[i] << " ";
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  int t = 1;
  for (int i = 0; i < t; i++) {
    solve();
  }
  return 0;
}