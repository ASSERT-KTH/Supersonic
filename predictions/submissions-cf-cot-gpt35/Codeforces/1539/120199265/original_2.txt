Step 1: Remove unnecessary headers
The program includes the `<bits/stdc++.h>` header, which is not recommended because it includes a large number of headers and can slow down the compilation process. We can replace it with the specific headers that are actually used in the program.

Step 2: Remove unnecessary macros
The program defines several macros that are not used. We can remove them to simplify the code.

Step 3: Optimize I/O operations
The program uses the `ios::sync_with_stdio(0)` function, which synchronizes the C++ I/O streams with the C standard I/O library. However, this can cause a significant slowdown in the execution time. Since the program does not mix C and C++ I/O operations, we can remove this line to improve the execution time.

Step 4: Optimize the `to_string` function
The `to_string` function is used to convert various types to strings. However, it is not necessary for this program and can be removed to reduce memory usage.

Step 5: Optimize the `build` and `upd` functions
The `build` and `upd` functions are used to construct and update a segment tree. However, the program always calls the `build` function before calling the `upd` function, which means that the `build` function is unnecessary. We can remove the `build` function and modify the `upd` function to initialize the segment tree lazily when necessary.

Step 6: Optimize the `push` function
The `push` function is used to propagate updates from the current node to its children nodes in the segment tree. However, the program always calls the `push` function before calling the `upd` function, which means that the `push` function is unnecessary. We can remove the `push` function to simplify the code.

Step 7: Optimize the `qry1` and `qry2` functions
The `qry1` and `qry2` functions are used to query the maximum and minimum values in a range of the segment tree. However, the program always calls the `push` function before calling these functions, which means that the `push` function is unnecessary. We can remove the `push` function to simplify the code.

Step 8: Optimize the `solve` function
The `solve` function can be optimized by removing unnecessary operations and simplifying the code.

Step 9: Remove unnecessary variables
The program defines several variables that are not used. We can remove them to reduce memory usage.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int MOD = 1e9 + 7;

struct node {
  int mx, mi, lz;
};

int n;
vector<node> st;

void apply(int i, int x) {
  st[i].mx -= x;
  st[i].mi -= x;
  st[i].lz += x;
}

void upd(int l1, int r1, int x, int i = 1, int l2 = 0, int r2 = n - 1) {
  if (l1 <= l2 && r2 <= r1) {
    apply(i, x);
    return;
  }
  int mid = (l2 + r2) / 2;
  if (l1 <= mid)
    upd(l1, r1, x, 2 * i, l2, mid);
  if (mid < r1)
    upd(l1, r1, x, 2 * i + 1, mid + 1, r2);
  st[i].mx = max(st[2 * i].mx, st[2 * i + 1].mx);
  st[i].mi = min(st[2 * i].mi, st[2 * i + 1].mi);
}

int qry1(int l1, int r1, int i = 1, int l2 = 0, int r2 = n - 1) {
  if (l1 <= l2 && r2 <= r1) {
    return st[i].mx;
  }
  int mid = (l2 + r2) / 2;
  return max((l1 <= mid ? qry1(l1, r1, 2 * i, l2, mid) : -MOD),
             (mid < r1 ? qry1(l1, r1, 2 * i + 1, mid + 1, r2) : -MOD));
}

int qry2(int l1, int r1, int i = 1, int l2 = 0, int r2 = n - 1) {
  if (l1 <= l2 && r2 <= r1) {
    return st[i].mi;
  }
  int mid = (l2 + r2) / 2;
  return min((l1 <= mid ? qry2(l1, r1, 2 * i, l2, mid) : MOD),
             (mid < r1 ? qry2(l1, r1, 2 * i + 1, mid + 1, r2) : MOD));
}

void solve() {
  int n1;
  cin >> n1;
  vector<pair<int, int>> b(n1);
  for (int i = 0; i < n1; i++) {
    cin >> b[i].first;
    b[i].second = i;
  }
  sort(b.begin(), b.end());
  vector<int> ans(n1, 0);
  for (int i = n1 - 1; i >= 0; i--) {
    int cur = b[i].first;
    while (i >= 0 && b[i].first == cur) {
      int j = b[i].second;
      int p = qry1(j + 1, j + 1), q = qry2(0, j), r = qry1(j + 1, n - 1);
      ans[j] = (p - q + r - p - 1) / 2;
      upd(j + 1, n - 1, 2);
      i--;
    }
    i++;
  }
  for (int i = 0; i < n1; i++) {
    int cur = b[i].first;
    while (i < n1 && b[i].first == cur) {
      int j = b[i].second;
      int p = qry1(j + 1, j + 1), q = qry2(0, j), r = qry1(j + 1, n - 1);
      ans[j] = max(ans[j], (p - q + r - p) / 2);
      upd(j + 1, n - 1, 2);
      i++;
    }
    i--;
  }
  for (int i = 0; i < n1; i++)
    cout << ans[i] << " ";
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  int t = 1;
  for (int i = 0; i < t; i++) {
    solve();
  }
  return 0;
}
```