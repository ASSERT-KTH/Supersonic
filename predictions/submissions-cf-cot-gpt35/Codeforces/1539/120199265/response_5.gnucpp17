#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct node {
  int mx, mi, lz;
};

void apply(int i, int x, int l2, int r2, vector<node>& st) {
  st[i].mx -= x;
  st[i].mi -= x;
  if (st[i].lz == -1e18)
    st[i].lz = 0;
  st[i].lz += x;
}

void push(int i, int l2, int mid, int r2, vector<node>& st) {
  if (st[i].lz == -1e18)
    return;
  apply(2 * i, st[i].lz, l2, mid, st);
  apply(2 * i + 1, st[i].lz, mid + 1, r2, st);
  st[i].lz = -1e18;
}

void build(int l1, int x, int i, int l2, int r2, vector<node>& st) {
  if (l2 == r2) {
    st[i].mx = x;
    st[i].mi = x;
    st[i].lz = -1e18;
    return;
  }
  int mid = (l2 + r2) / 2;
  if (l1 <= mid)
    build(l1, x, 2 * i, l2, mid, st);
  else
    build(l1, x, 2 * i + 1, mid + 1, r2, st);
  st[i].mx = max(st[2 * i].mx, st[2 * i + 1].mx);
  st[i].mi = min(st[2 * i].mi, st[2 * i + 1].mi);
  st[i].lz = -1e18;
}

void upd(int l1, int r1, int x, int i, int l2, int r2, vector<node>& st) {
  if (l1 <= l2 && r2 <= r1) {
    apply(i, x, l2, r2, st);
    return;
  }
  int mid = (l2 + r2) / 2;
  push(i, l2, mid, r2, st);
  if (l1 <= mid)
    upd(l1, r1, x, 2 * i, l2, mid, st);
  if (mid < r1)
    upd(l1, r1, x, 2 * i + 1, mid + 1, r2, st);
  st[i].mx = max(st[2 * i].mx, st[2 * i + 1].mx);
  st[i].mi = min(st[2 * i].mi, st[2 * i + 1].mi);
}

void solve() {
  int n1;
  cin >> n1;
  int arr[n1];
  vector<pair<int, int>> b;
  for (int i = 0; i < n1; i++) {
    cin >> arr[i];
    b.push_back({arr[i], i});
  }
  int n = n1 + 1;
  vector<node> st(4 * n);
  for (int i = 0; i < n; i++)
    build(i, i, 1, 0, n - 1, st);
  sort(b.begin(), b.end());
  vector<int> ans(n1);
  for (int i = n1 - 1; i >= 0; i--) {
    vector<int> del;
    int cur = b[i].first;
    while (i >= 0 && b[i].first == cur) {
      int j = b[i].second;
      int p = st[1].mx - st[1].mi, q = st[1].mi, r = st[1].mx - st[j + 1].mx;
      del.push_back(b[i].second);
      ans[j] = (p - q + r - p - 1) / 2;
      i--;
    }
    for (auto u : del) {
      upd(u + 1, n - 1, 2, 1, 0, n - 1, st);
    }
    i++;
  }
  for (int i = 0; i < n; i++)
    build(i, i, 1, 0, n - 1, st);
  for (int i = 0; i < n1; i++) {
    vector<int> del;
    int cur = b[i].first;
    while (i < n1 && b[i].first == cur) {
      int j = b[i].second;
      int p = st[1].mx - st[1].mi, q = st[1].mi, r = st[1].mx - st[j + 1].mx;
      del.push_back(b[i].second);
      ans[j] = max(ans[j], (p - q + r - p) / 2);
      i++;
    }
    for (auto u : del) {
      upd(u + 1, n - 1, 2, 1, 0, n - 1, st);
    }
    i--;
  }
  for (int i = 0; i < n1; i++)
    cout << ans[i] << " ";
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  solve();
  return 0;
}