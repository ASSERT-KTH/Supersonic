Explanation of the optimization steps:

1. Remove unnecessary includes: The program only uses `iostream` and `string` from the standard library, so we can remove the `using namespace std` and `#include <string>` lines.

2. Optimize input/output: The program currently uses `cin` and `cout` for input and output. However, these functions are slower compared to other methods like `scanf` and `printf`. We can replace `cin` with `scanf` and `cout` with `printf` for faster input and output.

3. Remove unnecessary line: The `return 0;` statement at the end of the main function is unnecessary, as the program will automatically return 0 when it reaches the end of the main function.

4. Use more descriptive variable names: The variable names `n` and `a` are not very descriptive. We can rename them to `numTests` and `difficulty` respectively to improve code readability.

Optimized program:

```cpp
#include <cstdio>

int main() {
  std::ios_base::sync_with_stdio(false);
  int numTests, difficulty;
  scanf("%d", &numTests);
  for (int i = 0; i < numTests; i++) {
    scanf("%d", &difficulty);
    if (difficulty == 1) {
      printf("HARD\n");
      return 0;
    }
  }
  printf("EASY\n");
}
```