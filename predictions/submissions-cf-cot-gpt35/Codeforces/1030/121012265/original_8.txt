The given program reads an integer n from the user, and then reads n more integers. If any of the n integers is equal to 1, it prints "HARD" and exits. Otherwise, it prints "EASY" and exits.

To optimize this program, we can make the following modifications:

1. Remove the line `ios_base::sync_with_stdio(false);`. This line disables synchronization between C and C++ standard streams, which can improve the performance when using C++ streams with C I/O functions. However, in this program, we are only using C++ streams, so this line is unnecessary.

2. Use `'\n'` instead of `endl` for newlines. The `endl` stream manipulator not only inserts a newline character, but also flushes the buffer which can be an expensive operation. Using `'\n'` instead will improve the performance.

3. Change the data type of `a` from `int` to `bool`. Since we only care if `a` is equal to 1 or not, we can use a `bool` variable instead of an `int` to save memory.

Here is the optimized program:

```cpp
#include <iostream>
#include <string>

int main() {
  int n;
  std::cin >> n;
  for (int i = 0; i < n; i++) {
    bool a;
    std::cin >> a;
    if (a) {
      std::cout << "HARD\n";
      return 0;
    }
  }
  std::cout << "EASY\n";
  return 0;
}
```