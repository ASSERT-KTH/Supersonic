Step 1: Remove unnecessary includes

The original program includes the `<string>` header, but it is not actually used in the code. Therefore, we can remove the unnecessary include statement.

Step 2: Optimize input/output

The original program uses `cin` and `cout` for input and output operations. However, these operations can be quite slow due to the synchronization with the C standard library. We can improve the performance by using a faster I/O method.

Step 3: Simplify the condition check

The original program checks if `a` is equal to 1 inside the loop. Since we only need to output "HARD" once if `a` is equal to 1, we can move this check outside the loop.

Optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n;
  cin >> n;

  bool hard = false;
  for (int i = 0; i < n; i++) {
    int a;
    cin >> a;
    if (a == 1) {
      hard = true;
    }
  }

  if (hard) {
    cout << "HARD\n";
  } else {
    cout << "EASY\n";
  }

  return 0;
}
```