Explanation of optimization steps:
1. Remove unnecessary includes: The program only uses `iostream` and `string` headers, so we can remove the unused headers to improve compile time.
2. Remove `using namespace std`: Instead of using the entire `std` namespace, we can prefix the standard library classes and functions with `std::` to avoid any potential naming conflicts.
3. Avoid unnecessary synchronization with `std::ios_base::sync_with_stdio(false)`: This line of code is unnecessary as it disables the synchronization between C and C++ standard streams, which can lead to performance improvements for some cases. However, in this program, there are no interactions between C and C++ standard streams, so we can remove this line.
4. Optimize the loop: Currently, the loop reads each input number individually. We can optimize this by reading the entire line of input at once and then extracting the numbers from the input line. This reduces the overhead of multiple function calls and improves the overall performance.

Optimized program:

```cpp
#include <iostream>
#include <string>

int main() {
  int n;
  std::cin >> n;
  std::string line;
  std::getline(std::cin, line); // Read the entire line
  for (int i = 0; i < n; i++) {
    int a = line[i * 2] - '0'; // Extract the number from the input line
    if (a == 1) {
      std::cout << "HARD\n";
      return 0;
    }
  }
  std::cout << "EASY\n";
  return 0;
}
```