This program reads an integer `n` from the user, then reads `n` integers. If any of the integers is equal to 1, it prints "HARD". Otherwise, it prints "EASY".

To optimize this program, we can make the following modifications:

1. Remove the `using namespace std;` line and replace all instances of `cout` and `endl` with `std::cout` and `std::endl` respectively. This is done to avoid namespace pollution and improve code readability.

2. Instead of using `ios_base::sync_with_stdio(false);`, we can use `std::cin.tie(NULL);` to untie the input stream from the output stream. This can help improve input performance.

3. Instead of checking each integer `a` for equality with 1, we can use a flag variable to track if the number 1 has been encountered. This avoids unnecessary comparisons and improves the running time.

4. Instead of using `return 0;` after printing "HARD", we can break out of the loop and print "HARD" after the loop ends. This avoids unnecessary return statements and improves the running time.

Here is the optimized program:

```cpp
#include <iostream>

int main() {
  std::cin.tie(NULL);
  int n, a;
  std::cin >> n;
  bool isHard = false;
  for (int i = 0; i < n; i++) {
    std::cin >> a;
    if (a == 1) {
      isHard = true;
      break;
    }
  }
  if (isHard) {
    std::cout << "HARD" << std::endl;
  } else {
    std::cout << "EASY" << std::endl;
  }
  return 0;
}
```

These modifications should improve the running time and memory usage of the program.