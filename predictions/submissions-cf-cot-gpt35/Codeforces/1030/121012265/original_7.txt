Explanation of optimization steps:

1. Remove unnecessary header files: The program does not use any features from the `<string>` header file, so it can be removed.

2. Remove unnecessary `using namespace std;` statement: The program does not require the `using namespace std;` statement as it only uses `cin`, `cout`, and `endl` from the `std` namespace. We can use the `std::` prefix instead.

3. Optimize input/output operations: The program can be optimized by using `scanf` and `printf` instead of `cin` and `cout`. The `scanf` and `printf` functions are faster than `cin` and `cout` because they do not perform synchronization with the C++ standard library.

4. Use a more efficient loop: The program can be further optimized by using a `while` loop instead of a `for` loop. This eliminates the need to check the loop condition `n` times, resulting in faster execution.

5. Optimize the return statement: The `return 0;` statements at the end of the program are unnecessary since the program will automatically return 0 when the end of `main()` is reached. We can remove these statements to further optimize the program.

Optimized program:

```cpp
#include <cstdio>

int main() {
  std::ios_base::sync_with_stdio(false);
  int n, a;
  std::scanf("%d", &n);
  
  while (n--) {
    std::scanf("%d", &a);
    if (a == 1) {
      std::printf("HARD\n");
      return 0;
    }
  }
  
  std::printf("EASY\n");
}
```