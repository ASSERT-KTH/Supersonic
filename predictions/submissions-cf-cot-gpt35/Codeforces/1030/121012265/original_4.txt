Explanation of the optimization steps:

1. Remove unnecessary header files: The program does not use any functionality from the `<string>` header file, so we can remove it to improve compilation time and reduce memory usage.

2. Remove unnecessary `using namespace std;`: The program only uses `std::cin`, `std::cout`, and `std::endl`. We can replace `using namespace std;` with `std::` prefix to avoid bringing the entire `std` namespace into the global namespace.

3. Replace `std::endl` with `'\n'`: The `std::endl` manipulator flushes the output stream, which can be an expensive operation. In this program, we can replace `std::endl` with `'\n'` to improve the performance.

4. Use a more efficient input method: By default, `std::cin` and `std::cout` are synchronized with C-style I/O functions, which can slow down the program. We can improve the performance by disabling the synchronization using `std::ios_base::sync_with_stdio(false);`.

5. Modify the loop termination condition: Instead of checking `i < n` in each iteration of the loop, we can decrement `n` after each input and check if it becomes zero. This eliminates the need for an extra comparison in each iteration.

6. Optimize the loop exit condition: Instead of using `return 0;` inside the loop, we can break out of the loop and use a boolean flag to indicate whether the loop was terminated early or not. This avoids unnecessary function calls and improves the code readability.

Optimized program:

```cpp
#include <iostream>

int main() {
  std::ios_base::sync_with_stdio(false);

  int n, a;
  std::cin >> n;

  bool hard = false;
  while (n--) {
    std::cin >> a;
    if (a == 1) {
      hard = true;
      break;
    }
  }

  if (hard) {
    std::cout << "HARD\n";
  } else {
    std::cout << "EASY\n";
  }

  return 0;
}
```