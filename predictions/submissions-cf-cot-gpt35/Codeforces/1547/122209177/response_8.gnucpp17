#include <iostream>
#include <vector>
#include <algorithm>

const int N = 4e5 + 5;

std::vector<int> seg_tree(4 * N + 5, 0);
int a[N];

void build_tree(int n) {
  for (int i = 0; i < n; i++) {
    seg_tree[n + i] = a[i];
  }
  for (int i = n - 1; i > 0; i--) {
    seg_tree[i] = std::__gcd(seg_tree[i * 2], seg_tree[i * 2 + 1]);
  }
}

int query(int l, int r, int n) {
  int res = 0;
  for (l += n, r += n; l <= r; l /= 2, r /= 2) {
    if (l % 2 == 1) {
      res = std::__gcd(res, seg_tree[l++]);
    }
    if (r % 2 == 0) {
      res = std::__gcd(res, seg_tree[r--]);
    }
  }
  return res;
}

void solve() {
  int n;
  std::cin >> n;
  for (int i = 0; i < n; i++) {
    std::cin >> a[i];
    a[i + n] = a[i];
  }
  build_tree(2 * n);
  int ans = 0;
  for (int i = 0; i < n; i++) {
    int l = i + 1, r = 2 * n, cnt = 0;
    if (a[i] == query(i + 1, i + 1, 2 * n)) {
      continue;
    }
    while (l <= r) {
      int mid = (l + r) / 2;
      int x = query(i + 1, mid, 2 * n);
      int y = std::__gcd(x, a[i]);
      if (y == query(i + 1, mid, 2 * n)) {
        ans = std::max(ans, mid - l + 1 + cnt);
        r = mid - 1;
      } else {
        a[i] = std::__gcd(a[i], x);
        cnt += mid - l + 1;
        l = mid + 1;
      }
    }
  }
  std::cout << ans << std::endl;
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int t;
  std::cin >> t;
  while (t--) {
    solve();
  }
  return 0;
}