#include <iostream>
#include <vector>
#include <algorithm>

const int N = 4e5 + 5;

std::vector<int> seg_tree(4 * N + 5, 0);
int a[N];

void build_tree(int tree_index, int strt_i, int end_i) {
  if (strt_i == end_i) {
    seg_tree[tree_index] = a[strt_i];
    return;
  }
  int mid = (strt_i + end_i) / 2;
  build_tree(tree_index * 2, strt_i, mid);
  build_tree(tree_index * 2 + 1, mid + 1, end_i);
  seg_tree[tree_index] = std::__gcd(seg_tree[tree_index * 2], seg_tree[tree_index * 2 + 1]);
}

int query(int tree_index, int strt_i, int end_i, int q_strt, int q_end) {
  if (strt_i > q_end || end_i < q_strt)
    return 0;
  if (q_strt <= strt_i && q_end >= end_i)
    return seg_tree[tree_index];
  int mid = (strt_i + end_i) / 2;
  int l = query(2 * tree_index, strt_i, mid, q_strt, q_end);
  int r = query(2 * tree_index + 1, mid + 1, end_i, q_strt, q_end);
  return std::__gcd(l, r);
}

void solve() {
  int n;
  std::cin >> n;
  for (int i = 1; i <= n; i++) {
    std::cin >> a[i];
    a[i + n] = a[i];
  }
  build_tree(1, 1, 2 * n);
  
  int g = std::__gcd(a[1], a[2]);
  int max_temp = 0;
  for (int i = 1; i <= n; i++) {
    if (a[i] == g)
      continue;
    int r = 2 * n, l = i + 1, cnt = 0;
    while (l <= r) {
      int mid = (l + r) / 2;
      int x = query(1, 1, 2 * n, l, mid);
      int y = std::__gcd(x, a[i]);
      if (y == g) {
        max_temp = std::max(max_temp, mid - l + 1 + cnt);
        r = mid - 1;
      } else {
        a[i] = std::__gcd(a[i], x);
        cnt += mid - l + 1;
        l = mid + 1;
      }
    }
  }
  
  std::cout << max_temp << std::endl;
}

int main() {
  std::ios::sync_with_stdio(0);
  std::cin.tie(0);
  
  int t = 1;
  std::cin >> t;
  for (int i = 1; i <= t; i++) {
    solve();
  }
  
  return 0;
}