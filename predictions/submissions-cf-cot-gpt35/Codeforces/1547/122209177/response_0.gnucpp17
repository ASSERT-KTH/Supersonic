#include <iostream>
#include <vector>
using namespace std;

const int N = 4e5 + 5;

int gcd(int a, int b) {
    while (b) {
        a %= b;
        swap(a, b);
    }
    return a;
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int t;
    cin >> t;

    while (t--) {
        int n;
        cin >> n;

        vector<int> a(2 * n + 1);
        for (int i = 1; i <= n; i++) {
            cin >> a[i];
            a[i + n] = a[i];
        }

        vector<int> prefix_gcd(2 * n + 1);
        prefix_gcd[1] = a[1];
        for (int i = 2; i <= 2 * n; i++) {
            prefix_gcd[i] = gcd(prefix_gcd[i - 1], a[i]);
        }

        int ans = 0;
        for (int i = 1; i <= n; i++) {
            int g = prefix_gcd[i + n] / a[i];
            int l = i + 1, r = 2 * n, temp = 1, cnt = 0;
            while (l <= r) {
                int mid = (l + r) / 2;
                int x = prefix_gcd[mid];
                int y = gcd(x, a[i]);
                if (y == g) {
                    temp = mid - i + 1 + cnt;
                    r = mid - 1;
                } else {
                    a[i] = gcd(a[i], x);
                    cnt += mid - i + 1;
                    l = mid + 1;
                }
            }
            ans = max(ans, temp);
        }

        cout << ans << endl;
    }

    return 0;
}