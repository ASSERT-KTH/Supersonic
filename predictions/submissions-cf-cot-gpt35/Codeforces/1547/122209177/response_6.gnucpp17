#include <iostream>
#include <vector>
using namespace std;

const int N = 4e5 + 5;
vector<int> seg_tree(4 * N + 5, 0);
int a[N];

void build_tree(int tree_index, int strt_i, int end_i) {
  if (strt_i == end_i) {
    seg_tree[tree_index] = a[strt_i];
    return;
  }
  int mid = (strt_i + end_i) / 2;
  build_tree(tree_index * 2, strt_i, mid);
  build_tree(tree_index * 2 + 1, mid + 1, end_i);
  seg_tree[tree_index] = __gcd(seg_tree[tree_index * 2], seg_tree[tree_index * 2 + 1]);
}

int query(int tree_index, int strt_i, int end_i, int q_strt, int q_end) {
  if (strt_i > q_end || end_i < q_strt)
    return 0;
  if (q_strt <= strt_i && q_end >= end_i)
    return seg_tree[tree_index];
  int mid = (strt_i + end_i) / 2;
  int l = query(2 * tree_index, strt_i, mid, q_strt, q_end);
  int r = query(2 * tree_index + 1, mid + 1, end_i, q_strt, q_end);
  return __gcd(l, r);
}

void solve() {
  size_t n;
  cin >> n;
  for (size_t i = 1; i <= n; ++i) {
    cin >> a[i];
    a[i + n] = a[i];
  }
  build_tree(1, 1, 2 * n);
  int ans = 0;
  for (size_t i = 1; i <= n; ++i) {
    if (a[i] == a[1])
      continue;
    size_t r = 2 * n, l = i + 1, temp = N;
    while (l <= r) {
      size_t mid = (l + r) / 2;
      int x = query(1, 1, 2 * n, l, mid);
      int y = __gcd(x, a[i]);
      if (y == a[1])
        temp = min(temp, mid - l + 1), r = mid - 1;
      else
        l = mid + 1;
    }
    ans = max(ans, static_cast<int>(temp));
  }
  cout << ans << endl;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  int t = 1;
  cin >> t;
  while (t--) {
    solve();
  }
  
  return 0;
}