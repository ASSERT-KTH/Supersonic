#include <iostream>
#include <vector>
using namespace std;

int gcd(int a, int b) {
  while (b != 0) {
    int temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}

void build_tree(vector<int>& seg_tree, int* a, int tree_index, int strt_i, int end_i) {
  if (strt_i == end_i) {
    seg_tree[tree_index] = a[strt_i];
    return;
  }
  int mid = (strt_i + end_i) / 2;
  build_tree(seg_tree, a, tree_index * 2, strt_i, mid);
  build_tree(seg_tree, a, tree_index * 2 + 1, mid + 1, end_i);
  seg_tree[tree_index] = gcd(seg_tree[tree_index * 2], seg_tree[tree_index * 2 + 1]);
}

int query(vector<int>& seg_tree, int tree_index, int strt_i, int end_i, int q_strt, int q_end) {
  if (strt_i > q_end || end_i < q_strt)
    return 0;
  if (q_strt <= strt_i && q_end >= end_i)
    return seg_tree[tree_index];
  int mid = (strt_i + end_i) / 2;
  int l = query(seg_tree, 2 * tree_index, strt_i, mid, q_strt, q_end);
  int r = query(seg_tree, 2 * tree_index + 1, mid + 1, end_i, q_strt, q_end);
  return gcd(l, r);
}

void solve() {
  int n;
  cin >> n;
  int* a = new int[2 * n + 1];
  for (int i = 1; i <= n; i++) {
    cin >> a[i];
    a[i + n] = a[i];
  }
  vector<int> seg_tree(4 * n + 5, 0);
  build_tree(seg_tree, a, 1, 1, 2 * n);
  int ans = 0, g = 0;
  for (int i = 1; i <= n; i++) {
    g = gcd(g, a[i]);
  }
  for (int i = 1; i <= n; i++) {
    int r = 2 * n, l = i + 1, temp = INF, cnt = 0;
    if (a[i] == g)
      continue;
    while (l <= r) {
      int mid = (l + r) / 2;
      int x = query(seg_tree, 1, 1, 2 * n, l, mid);
      int y = gcd(x, a[i]);
      if (y == g)
        temp = min(temp, mid - l + 1 + cnt), r = mid - 1;
      else
        a[i] = gcd(a[i], x), cnt += mid - l + 1, l = mid + 1;
    }
    ans = max(ans, temp);
  }
  cout << ans << endl;
  delete[] a;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  int t;
  cin >> t;
  for (int i = 1; i <= t; i++) {
    solve();
  }
  return 0;
}