#include <iostream>
#include <vector>
using namespace std;

int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    
    int t;
    cin >> t;
    
    while (t--) {
        int n;
        cin >> n;
        
        vector<int> a(2 * n + 1);
        for (int i = 1; i <= n; i++) {
            cin >> a[i];
            a[i + n] = a[i];
        }
        
        vector<int> seg_tree(4 * n + 5, 0);
        for (int i = 1; i <= 2 * n; i++) {
            seg_tree[i] = a[i];
        }
        
        for (int i = n - 1; i >= 1; i--) {
            seg_tree[i] = gcd(seg_tree[i * 2], seg_tree[i * 2 + 1]);
        }
        
        int ans = 0, g = 0;
        for (int i = 1; i <= n; i++) {
            g = gcd(g, a[i]);
        }
        
        for (int i = 1; i <= n; i++) {
            if (a[i] == g) {
                continue;
            }
            
            int l = i + 1, r = 2 * n, temp = INT_MAX, cnt = 0;
            
            while (l <= r) {
                int mid = (l + r) / 2;
                int x = 0, y = a[i];
                
                for (int k = l; k <= mid; k++) {
                    x = gcd(x, a[k]);
                }
                
                y = gcd(x, y);
                
                if (y == g) {
                    temp = min(temp, mid - l + 1 + cnt);
                    r = mid - 1;
                } else {
                    a[i] = gcd(a[i], x);
                    cnt += mid - l + 1;
                    l = mid + 1;
                }
            }
            
            ans = max(ans, temp);
        }
        
        cout << ans << endl;
    }
    
    return 0;
}