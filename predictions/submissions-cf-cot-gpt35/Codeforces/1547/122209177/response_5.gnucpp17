#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>

constexpr int64_t mod = 1e9 + 7;
constexpr int64_t INF = 1e18;
constexpr int64_t N = 4e5 + 5;

std::vector<int64_t> seg_tree(4 * N + 5, 0);
std::vector<int64_t> a(N);

void build_tree(int64_t tree_index, int64_t strt_i, int64_t end_i) {
  if (strt_i == end_i) {
    seg_tree[tree_index] = a[strt_i];
    return;
  }
  int64_t mid = (strt_i + end_i) / 2;
  build_tree(tree_index * 2, strt_i, mid);
  build_tree(tree_index * 2 + 1, mid + 1, end_i);
  seg_tree[tree_index] =
      std::gcd(seg_tree[tree_index * 2], seg_tree[tree_index * 2 + 1]);
}

int64_t query(int64_t tree_index, int64_t strt_i, int64_t end_i, int64_t q_strt, int64_t q_end) {
  if (strt_i > q_end || end_i < q_strt)
    return 0;
  if (q_strt <= strt_i && q_end >= end_i)
    return seg_tree[tree_index];
  int64_t mid = (strt_i + end_i) / 2;
  int64_t l = query(2 * tree_index, strt_i, mid, q_strt, q_end);
  int64_t r = query(2 * tree_index + 1, mid + 1, end_i, q_strt, q_end);
  return std::gcd(l, r);
}

void solve() {
  int64_t n;
  std::cin >> n;
  for (int64_t i = 1; i <= n; ++i) {
    std::cin >> a[i];
    a[i + n] = a[i];
  }
  build_tree(1, 1, 2 * n);
  int64_t ans = 0;
  int64_t g = std::gcd(a[1], a[2]);
  for (int64_t i = 1; i <= n; ++i) {
    int64_t r = 2 * n;
    int64_t l = i + 1;
    int64_t temp = INF;
    int64_t cnt = 0;
    while (l <= r) {
      int64_t mid = (l + r) / 2;
      int64_t x = query(1, 1, 2 * n, l, mid);
      int64_t y = std::gcd(x, a[i]);
      if (y == g)
        temp = std::min(temp, mid - l + 1 + cnt), r = mid - 1;
      else {
        a[i] = std::gcd(a[i], x);
        cnt += mid - l + 1;
        l = mid + 1;
      }
    }
    ans = std::max(ans, temp);
  }
  std::cout << ans << '\n';
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int64_t t = 1;
  std::cin >> t;
  for (int64_t i = 1; i <= t; ++i) {
    solve();
  }
  return 0;
}