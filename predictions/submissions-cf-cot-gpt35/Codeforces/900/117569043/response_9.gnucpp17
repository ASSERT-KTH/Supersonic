#include <iostream>
#include <cmath>
#include <algorithm>
#include <map>

const int mod = 1000000007;
const double PI = 3.14159265358979323846;

int power(int x, int y, int p) {
  int res = 1;
  x = x % p;
  if (x == 0)
    return 0;
  while (y > 0) {
    if (y & 1)
      res = (res * x) % p;
    y = y >> 1;
    x = (x * x) % p;
  }
  return res;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  int x, y;
  std::cin >> x >> y;

  if (y % x != 0) {
    std::cout << 0 << std::endl;
    return 0;
  }

  if (y / x == 1) {
    std::cout << 1 << std::endl;
    return 0;
  }

  int sum = y / x;
  int ans = power(2, sum - 1, mod);
  ans = (ans - 1 + mod) % mod;

  int maxDivisor = std::sqrt(sum);
  int divCount = 0;
  for (int i = 2; i <= maxDivisor; i++) {
    if (sum % i == 0) {
      divCount += 2;
      if (i == sum / i)
        divCount--;
    }
  }

  int* divisors = new int[divCount];
  int index = 0;
  for (int i = 2; i <= maxDivisor; i++) {
    if (sum % i == 0) {
      divisors[index++] = i;
      if (i == sum / i)
        index--;
      divisors[index++] = sum / i;
    }
  }

  std::sort(divisors, divisors + divCount);

  std::map<int, int> mp;
  for (int i = 0; i < divCount; i++) {
    int cur = power(2, divisors[i] - 1, mod);
    for (int j = 0; j < i; j++) {
      if (divisors[i] % divisors[j] == 0) {
        cur = (cur - mp[divisors[j]] + mod) % mod;
      }
    }
    mp[divisors[i]] = (cur - 1 + mod) % mod;
    ans = (ans - (cur - 1) + mod) % mod;
  }

  std::cout << ans << std::endl;

  delete[] divisors;

  return 0;
}