#include <iostream>
#include <vector>
#include <cmath>
#include <map>

constexpr int mod = 1000000007;
constexpr double PI = 3.14159265358979323846;

std::vector<int> divisors(int n) {
  std::vector<int> v;
  for (int i = 2; i <= std::sqrt(n); i++) {
    if (n % i == 0) {
      if (n / i == i)
        v.emplace_back(i);
      else {
        v.emplace_back(i);
        v.emplace_back(n / i);
      }
    }
  }
  return v;
}

void solve() {
  int x, y;
  std::cin >> x >> y;

  if (y % x != 0) {
    std::cout << 0 << std::endl;
    return;
  }

  if (y / x == 1) {
    std::cout << 1 << std::endl;
    return;
  }

  int sum = y / x;
  int ans = std::pow(2, sum - 1);
  ans = (ans - 1 + mod) % mod;

  std::vector<int> div = divisors(sum);
  std::map<int, int> mp;

  for (auto div_i : div) {
    int cur = std::pow(2, div_i - 1);
    std::vector<int> div1 = divisors(div_i);

    for (int p : div1) {
      cur = (cur - mp[p] + mod) % mod;
    }

    mp[div_i] = (cur - 1 + mod) % mod;
    ans = (ans - (cur - 1) + mod) % mod;
  }

  std::cout << ans << std::endl;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);

  solve();
  return 0;
}