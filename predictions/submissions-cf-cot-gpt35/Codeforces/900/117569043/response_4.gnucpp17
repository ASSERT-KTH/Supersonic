#include <iostream>
#include <vector>
#include <cmath>
#include <unordered_map>
using namespace std;

constexpr int mod = 1000000007;

int power(int x, int y, int p) {
  int res = 1;
  x = x % p;
  if (x == 0)
    return 0;
  while (y > 0) {
    if (y & 1)
      res = (res * x) % p;
    y = y >> 1;
    x = (x * x) % p;
  }
  return res;
}

void divisors(int n, vector<int>& v) {
  for (int i = 2; i * i <= n; i++) {
    if (n % i == 0) {
      if (n / i == i)
        v.emplace_back(i);
      else {
        v.emplace_back(i);
        v.emplace_back(n / i);
      }
    }
  }
}

void solve() {
  int x, y;
  cin >> x >> y;
  if (y % x != 0) {
    cout << 0 << endl;
    return;
  }
  if (y / x == 1) {
    cout << 1 << endl;
    return;
  }
  int sum = y / x;
  int ans = power(2, sum - 1, mod);
  ans = (ans - 1 + mod) % mod;
  vector<int> div;
  divisors(sum, div);
  sort(div.begin(), div.end());
  unordered_map<int, int> mp;
  for (int i = 0; i < div.size(); i++) {
    int cur = power(2, div[i] - 1, mod);
    vector<int> div1;
    divisors(div[i], div1);
    for (int p : div1) {
      cur = (cur - mp[p] + mod) % mod;
    }
    mp[div[i]] = (cur - 1 + mod) % mod;
    ans = (ans - (cur - 1) + mod) % mod;
  }
  cout << ans << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  solve();
  return 0;
}