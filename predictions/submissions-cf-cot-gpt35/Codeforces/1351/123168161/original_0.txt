Step 1: Remove unnecessary header file inclusion

The `#include <bits/stdc++.h>` line includes a large number of header files, which can slow down the compilation process. Since we only need the `iostream` header for `cin` and `cout`, we can replace `#include <bits/stdc++.h>` with `#include <iostream>`.

Step 2: Optimize the loop condition

In the original program, the loop condition `while (t--)` decrements `t` by 1 in each iteration. However, this can be optimized by using a more efficient loop condition `while (t > 0)`. This way, we avoid the overhead of the decrement operation.

Step 3: Avoid unnecessary variable declarations

The variables `max1` and `max2` are used only once in the program. We can eliminate them and directly use `max(a1, b1)` and `max(a2, b2)` in the if condition.

Step 4: Simplify the if condition

The if condition can be simplified by combining the two conditions `max1 == max2` and `min(a1, b1) + min(a2, b2) == max1` into a single condition `(max(a1, b1) == max(a2, b2)) && (min(a1, b1) + min(a2, b2) == max(a1, b1))`.

Step 5: Use '\n' instead of `endl`

Using `endl` flushes the output buffer, which can slow down the program. We can use the newline character '\n' instead, which is faster.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int t;
  cin >> t;
  while (t > 0) {
    int a1, b1, a2, b2;
    cin >> a1 >> b1 >> a2 >> b2;
    if ((max(a1, b1) == max(a2, b2)) && (min(a1, b1) + min(a2, b2) == max(a1, b1)))
      cout << "YES\n";
    else
      cout << "NO\n";
    t--;
  }
  return 0;
}
```