To optimize the given program, we can eliminate the unnecessary use of the `max` and `min` functions and reduce the number of operations inside the loop.

Here are the step-by-step optimizations:

1. Remove the unnecessary `#include <bits/stdc++.h>`. This header includes a lot of standard library headers unnecessarily and can slow down the compilation process. Instead, only include the necessary headers, which in this case are `<iostream>` and `<algorithm>`.

2. Move the variable declarations `int a1, b1, a2, b2;` outside the while loop. This will avoid re-declaring and re-initializing the variables in each iteration of the loop.

3. Instead of using the `max` and `min` functions, we can directly compare and calculate the maximum and minimum values using simple if statements and arithmetic operations. This will eliminate the overhead of function calls and improve performance.

4. Replace the `endl` with `"\n"` to improve the output performance. The `endl` inserts a newline character and flushes the output stream, which can be slow. Using `"\n"` will only insert a newline character without flushing the stream.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <algorithm>

int main() {
  int t;
  std::cin >> t;

  int a1, b1, a2, b2;
  while (t--) {
    std::cin >> a1 >> b1 >> a2 >> b2;
    
    int max1 = (a1 > b1) ? a1 : b1;
    int max2 = (a2 > b2) ? a2 : b2;

    if (max1 == max2 && (a1 + a2) == max1)
      std::cout << "YES\n";
    else
      std::cout << "NO\n";
  }

  return 0;
}
```