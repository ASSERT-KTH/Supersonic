Step 1: Remove unnecessary includes

The program includes `<bits/stdc++.h>`, which is not a standard C++ header file. It is recommended to include only the necessary header files to reduce compilation time and decrease memory usage.

Step 2: Avoid using `using namespace std`

Using `using namespace std` brings all the names from the `std` namespace into the global namespace, which can cause naming conflicts and make the code less readable. It is better to use the `std::` prefix for specific names from the `std` namespace.

Step 3: Optimize the condition inside the while loop

Instead of calculating `max1` and `max2` separately, we can directly compare `max(a1, b1)` with `max(a2, b2)` in the condition check. This eliminates the need for storing these intermediate variables and reduces memory usage.

Step 4: Optimize the if condition

Instead of calculating the sum of the minimum values and then comparing it with `max1`, we can directly compare the sum of the minimum values with `max1`. This eliminates the need for the `min` function call and reduces the number of operations.

Step 5: Use '\n' instead of endl

The `endl` manipulator flushes the output stream, which can be an expensive operation. Using the newline character `'\n'` instead of `endl` can improve the performance.

Here is the optimized program:

```cpp
#include <iostream>

int main() {
  int t;
  std::cin >> t;

  while (t--) {
    int a1, b1, a2, b2;
    std::cin >> a1 >> b1 >> a2 >> b2;

    if (std::max(a1, b1) == std::max(a2, b2) && (a1 + b1) == std::max(a1, b1))
      std::cout << "YES\n";
    else
      std::cout << "NO\n";
  }

  return 0;
}
```