The given program calculates the shortest substring in a given string that contains equal number of 'L', 'R', 'U', and 'D' characters. The program uses a map to store the sum of characters encountered so far and their corresponding indices. It then updates the indices and calculates the length of the substring whenever it encounters a sum that has been seen before.

To optimize the program, we can make the following modifications:

1. Remove the unnecessary includes: `<bits/stdc++.h>` is not a standard C++ header and includes a large number of unnecessary headers. We can remove this line and include only the necessary headers.

2. Remove the unnecessary `typedef`: The `typedef long long ll` is not used in the program, so we can remove it.

3. Use `const int` instead of `const ll` for constants: The constants `oo`, `OO`, and `mod` are used as array sizes and can be declared as `const int` instead of `const ll`.

4. Use `unordered_map` instead of `map`: The map `mp` is used to store the sum and its corresponding index. Since the order of the sum doesn't matter, we can use an `unordered_map` instead of `map` for faster lookups.

5. Initialize `sum` as `ll` to avoid overflow: The variable `sum` is used to store the sum of characters encountered so far. We can initialize it as `ll` (long long) to avoid overflow when adding or subtracting large numbers.

6. Remove unnecessary checks and calculations inside the loop: The if statements inside the loop for updating the sum and checking if it has been seen before can be simplified. We can directly update the sum based on the character at each position and insert or update the index in the map without checking its previous value.

7. Use a single output statement: Instead of using two separate `cout` statements, we can use a single output statement with a conditional operator to handle the case when `ans` is `1e9`.

Here is the optimized program:

```cpp
#include <iostream>
#include <string>
#include <unordered_map>
using namespace std;

const int oo = 0x3f3f3f3f;
const int mod = 1e9 + 7;
const int N = 1.5e5 + 500;

void run_case() {
  int n;
  cin >> n;
  string s;
  cin >> s;
  s = " " + s;
  unordered_map<int, int> mp;
  long long sum = 0;
  int l = 0, r = 0, ans = oo;

  for (int i = 1; i <= n; i++) {
    if (s[i] == 'L')
      sum += 1e9;
    else if (s[i] == 'R')
      sum -= 1e9;
    else if (s[i] == 'U')
      sum += 7;
    else if (s[i] == 'D')
      sum -= 7;

    if (mp.count(sum)) {
      int left = mp[sum];
      int right = i;
      if ((right - left + 1) < ans) {
        ans = right - left + 1;
        l = left;
        r = right;
      }
    }
    mp[sum] = i + 1;
  }

  cout << (ans == oo ? "-1\n" : to_string(l) + " " + to_string(r) + "\n");
}

int main() {
  ios::sync_with_stdio(false), cin.tie(nullptr);
  int tc;
  cin >> tc;
  while (tc--)
    run_case();
}
```