The given program has a few areas that can be optimized:

1. The unnecessary inclusion of the `<bits/stdc++.h>` header file. This header file includes all standard library headers, which can increase the compilation time and memory usage. We should include only the necessary headers.

2. The unnecessary `typedef` of `ll` for `long long` and `const` definitions for `oo`, `OO`, and `mod`. We can directly use the standard types and constants without the need for `typedef` and `const` definitions.

3. The unnecessary `sort` function template. The `sort` function is already provided by the standard library, so there is no need to define a custom template for it.

4. The unnecessary `sort` function overload for `string`. The `sort` function is used for sorting containers, and `string` is already a container that can be sorted using the standard `sort` function.

5. The use of the `map` container for storing the sums. We can use a more efficient data structure like `unordered_map` for better performance.

6. The use of `mp[sum] != 0` to check if a sum exists in the map. We can use the `count` function of `unordered_map` to check the existence of a key.

7. The use of `ans == 1e9` to check if a valid answer exists. We can initialize `ans` with `INT_MAX` and check `ans == INT_MAX` instead.

8. The unnecessary `else` statement after the `cout` statement. We can directly use `cout` for both cases.

Taking into account these optimizations, the optimized program is as follows:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>
#include <climits>

void run_case() {
  int n;
  std::cin >> n;
  std::string s;
  std::cin >> s;
  s = " " + s;
  std::unordered_map<long long, int> mp;
  long long sum = 0;
  mp[0] = 1;
  int l = 0, r = 0, ans = INT_MAX;
  for (int i = 1; i <= n; i++) {
    if (s[i] == 'L')
      sum += 1e9;
    if (s[i] == 'R')
      sum -= 1e9;
    if (s[i] == 'U')
      sum += 7;
    if (s[i] == 'D')
      sum -= 7;
    if (mp.count(sum) != 0) {
      int left = mp[sum];
      int right = i;
      if ((right - left + 1) < ans) {
        ans = right - left + 1;
        l = left;
        r = right;
      }
    }
    mp[sum] = i + 1;
  }
  if (ans == INT_MAX) {
    std::cout << "-1\n";
  } else {
    std::cout << l << " " << r << "\n";
  }
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int tc = 1;
  std::cin >> tc;
  while (tc--)
    run_case();
}
```