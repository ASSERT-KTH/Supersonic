The given program can be optimized in the following steps:

1. Remove unnecessary includes: The program includes the `<bits/stdc++.h>` header, which includes all standard library headers. This can lead to longer compilation times and increased memory usage. Instead, we can include only the necessary headers, such as `<iostream>` and `<map>`.

2. Remove unnecessary typedef: The program typedefs `long long` as `ll`, but this type is not used in the program. We can remove this typedef.

3. Use a constant for the maximum value: The program uses the value `1e9` multiple times. We can define a constant variable for this value to improve code readability.

4. Remove unnecessary template function: The program defines a template function `sort` that is not used. We can remove this function.

5. Avoid unnecessary string concatenation: The program concatenates a space character with the input string `s`. This is not necessary and can be removed.

6. Use unordered_map instead of map: The program uses a map to store the sum and its corresponding index. Since the order of insertion does not matter, we can use an unordered_map instead of a map for better performance.

7. Use a variable to track the minimum length: Instead of initializing `ans` to `1e9`, we can initialize it with a variable that represents infinity. This will make the code more readable.

8. Avoid unnecessary if statements: The program uses multiple if statements to check the value of `s[i]` and update `sum` accordingly. We can use a switch statement instead to simplify the code.

9. Use a pair to store the result: Instead of using separate variables `l` and `r` to store the left and right indices of the minimum length substring, we can use a pair to store these values.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;

const int INF = 1e9;

void run_case() {
  int n;
  cin >> n;
  string s;
  cin >> s;
  unordered_map<long long, int> mp;
  long long sum = 0;
  mp[0] = 1;
  int l = 0, r = 0;
  int ans = INF;
  for (int i = 0; i < n; i++) {
    switch (s[i]) {
      case 'L':
        sum += INF;
        break;
      case 'R':
        sum -= INF;
        break;
      case 'U':
        sum += 7;
        break;
      case 'D':
        sum -= 7;
        break;
    }
    if (mp.count(sum)) {
      int left = mp[sum];
      int right = i + 1;
      if (right - left + 1 < ans) {
        ans = right - left + 1;
        l = left;
        r = right;
      }
    }
    mp[sum] = i + 2;
  }
  if (ans == INF) {
    cout << "-1\n";
  } else {
    cout << l << " " << r << "\n";
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  int tc = 1;
  cin >> tc;
  while (tc--) {
    run_case();
  }
  return 0;
}
```
