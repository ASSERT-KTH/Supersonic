#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
using namespace std;

void solve() {
  int n, m;
  cin >> n >> m;
  vector<int> v(n);
  for (auto &x : v)
    cin >> x;

  vector<int> d(2 * n + 2, -1);
  vector<int> res;
  int mini_sum = 0;

  int start = 0;
  int end = 0;
  while (end < n) {
    if (res.size() == m)
      break;
    int cur = v[end];
    if (d[cur] == -1) {
      d[cur] = 0;
      res.push_back(cur);
      mini_sum += d[cur];
    }
    end++;
    if (d[cur - 1] == -1) {
      d[cur - 1] = d[cur] + 1;
    }
    if (d[cur + 1] == -1) {
      d[cur + 1] = d[cur] + 1;
    }
  }
  
  random_device rd;
  mt19937 rng(rd());
  shuffle(res.begin(), res.end(), rng);

  cout << mini_sum << "\n";
  for (auto x : res)
    cout << x << " ";
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  solve();

  return 0;
}