#include <iostream>
#include <vector>
#include <unordered_map>
#include <queue>
#include <set>
#include <cstdlib>
#include <algorithm>

void solve() {
  int n, m;
  std::cin >> n >> m;
  std::vector<int> v(n);
  for (auto &x : v)
    std::cin >> x;

  std::vector<int> d(*std::max_element(v.begin(), v.end()) + 1);
  std::queue<int> q;
  for (int i = 0; i < n; i++) {
    d[v[i]] = 0;
    q.push(v[i]);
  }

  std::set<int> res;
  int mini_sum = 0;
  while (!q.empty()) {
    int cur = q.front();
    q.pop();
    if (d[cur] != 0) {
      res.insert(cur);
      mini_sum += d[cur];
    }
    if (d[cur - 1] == 0) {
      d[cur - 1] = d[cur] + 1;
      q.push(cur - 1);
    }
    if (d[cur + 1] == 0) {
      d[cur + 1] = d[cur] + 1;
      q.push(cur + 1);
    }
    if (res.size() == m)
      break;
  }

  std::cout << mini_sum << "\n";
  for (auto x : res)
    std::cout << x << " ";
  std::cout << "\n";
}

int main() {
  std::ios_base::sync_with_stdio(false), std::cin.tie(nullptr), std::cout.tie(nullptr);
  int t = 1;
  while (t--) {
    solve();
  }
  return 0;
}