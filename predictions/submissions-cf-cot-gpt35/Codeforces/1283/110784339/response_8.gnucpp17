#include <iostream>
#include <vector>
#include <unordered_set>
#include <algorithm>
#include <random>
#include <chrono>

using namespace std;

void solve() {
    int n, m;
    cin >> n >> m;
    vector<int> v(n);
    for (auto& x : v)
        cin >> x;
    
    unordered_set<int> d;
    vector<int> q;
    for (int i = 0; i < n; i++) {
        d.insert(v[i]);
        q.push_back(v[i]);
    }
    
    vector<int> res;
    int mini_sum = 0;
    while (res.size() < m && !q.empty()) {
        int cur = q.back();
        q.pop_back();
        if (d.count(cur) && cur != 0) {
            res.push_back(cur);
            mini_sum += cur - 1;
            d.insert(cur - 1);
            d.insert(cur + 1);
        }
    }
    
    shuffle(res.begin(), res.end(), default_random_engine(chrono::system_clock::now().time_since_epoch().count()));
    
    cout << mini_sum << "\n";
    for (auto x : res)
        cout << x << " ";
    cout << "\n";
}

int main() {
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
    int t = 1;
    while (t--) {
        solve();
    }
    return 0;
}