Step 1: Remove unnecessary includes
- The `bits/stdc++.h` header includes all the standard library headers. This can increase the compile time and also increase the memory usage.
- We should only include the necessary headers that are actually used in the program.

Step 2: Remove unused typedefs
- The program includes several typedefs for various types like `pll`, `vll`, etc.
- However, these typedefs are not used anywhere in the program and can be safely removed.

Step 3: Optimize the custom_hash struct
- The custom_hash struct uses the splitmix64 function to hash the input value.
- However, the splitmix64 function is not necessary and can be replaced with `std::hash<uint64_t>` to achieve the same functionality.
- We can modify the operator() function of the custom_hash struct to use the std::hash<uint64_t> and remove the splitmix64 function.

Step 4: Optimize the main function
- The main function has a while loop with only one iteration (t = 1).
- We can remove the while loop and directly call the solve function once.

Step 5: Optimize the solve function
- The solve function uses an unordered_map and a queue to store and process the input values.
- We can optimize the solve function by using a vector instead of an unordered_map to keep track of the distances.
- Instead of using a queue to process the values, we can use two pointers to keep track of the start and end indices of the valid values.
- This will eliminate the need for the queue and the unordered_map, reducing the memory usage and improving the runtime.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
using namespace std;

void solve() {
  int n, m;
  cin >> n >> m;
  vector<int> v(n);
  for (auto &x : v)
    cin >> x;

  vector<int> d(2 * n + 2, -1);
  vector<int> res;
  int mini_sum = 0;

  int start = 0;
  int end = 0;
  while (end < n) {
    if (res.size() == m)
      break;
    int cur = v[end];
    if (d[cur] == -1) {
      d[cur] = 0;
      res.push_back(cur);
      mini_sum += d[cur];
    }
    end++;
    if (d[cur - 1] == -1) {
      d[cur - 1] = d[cur] + 1;
    }
    if (d[cur + 1] == -1) {
      d[cur + 1] = d[cur] + 1;
    }
  }
  
  random_device rd;
  mt19937 rng(rd());
  shuffle(res.begin(), res.end(), rng);

  cout << mini_sum << "\n";
  for (auto x : res)
    cout << x << " ";
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  solve();

  return 0;
}
```
The optimized program removes unnecessary includes, typedefs, and optimizes the data structures used in the solve function to reduce memory usage and improve runtime.