#include <iostream>
#include <vector>
#include <unordered_map>
#include <queue>
#include <algorithm>
#include <sstream>
#include <random>

using namespace std;

typedef long long ll;

mt19937 rng(time(0));

void solve() {
  int n, m;
  cin >> n >> m;
  vector<int> v(n);
  for (auto &x : v)
    cin >> x;
  unordered_map<ll, ll> d;
  queue<ll> q;
  for (int i = 0; i < n; i++) {
    d[v[i]] = 0LL;
    q.push(v[i]);
  }
  vector<ll> res;
  ll mini_sum = 0LL;
  while (!q.empty() && res.size() < m) {
    ll cur = q.front();
    q.pop();
    if (d[cur] != 0) {
      res.push_back(cur);
      mini_sum += d[cur];
    }
    if (!d.count(cur - 1)) {
      d[cur - 1] = d[cur] + 1;
      q.push(cur - 1);
    }
    if (!d.count(cur + 1)) {
      d[cur + 1] = d[cur] + 1;
      q.push(cur + 1);
    }
  }
  shuffle(res.begin(), res.end(), rng);
  cout << mini_sum << "\n";
  stringstream ss;
  for (auto x : res)
    ss << x << " ";
  cout << ss.str() << "\n";
}

int main() {
  ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
  int t = 1;
  while (t--) {
    solve();
  }
  return 0;
}