#include <iostream>
#include <vector>
#include <deque>
#include <random>
#include <algorithm>

using namespace std;

void solve() {
  int n, m;
  cin >> n >> m;
  vector<int> v(n);
  for (auto &x : v)
    cin >> x;
  vector<long long> d(m, -1);
  deque<long long> q;
  for (int i = 0; i < n; i++) {
    d[v[i]] = 0LL;
    q.push_back(v[i]);
  }
  vector<long long> res;
  long long mini_sum = 0LL;
  while (!q.empty()) {
    long long cur = q.front();
    q.pop_front();
    if (d[cur] != 0) {
      res.push_back(cur);
      mini_sum += d[cur];
    }
    if (cur - 1 >= 0 && d[cur - 1] == -1) {
      d[cur - 1] = d[cur] + 1;
      q.push_back(cur - 1);
    }
    if (cur + 1 < m && d[cur + 1] == -1) {
      d[cur + 1] = d[cur] + 1;
      q.push_back(cur + 1);
    }
  }
  random_device rd;
  mt19937 rng(rd());
  for (int i = res.size() - 1; i > 0; i--) {
    uniform_int_distribution<int> dist(0, i);
    int j = dist(rng);
    swap(res[i], res[j]);
  }
  cout << mini_sum << "\n";
  for (auto x : res)
    cout << x << " ";
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
  int t = 1;
  while (t--) {
    solve();
  }
  return 0;
}