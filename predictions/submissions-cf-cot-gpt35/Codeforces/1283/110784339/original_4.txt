Explanation of the optimization steps:

1. Remove unnecessary header files: The program includes the `<bits/stdc++.h>` header file, which includes many other header files. This can increase compilation time and memory usage. We can remove this line and include only the necessary header files.

2. Remove unnecessary typedefs: The program defines several typedefs for various types. However, these typedefs are not used in the program. We can remove them to reduce unnecessary code.

3. Use a more efficient hashing function: The program uses a custom hash function for the unordered_map. The custom hash function uses a splitmix64 algorithm, which may not be the most efficient hashing function for the given data. We can replace the custom_hash struct with the default hash function for unordered_map.

4. Replace unnecessary queue with a vector: The program uses a queue to store the elements to be processed. However, the elements are processed in a random order, so a queue is not necessary. We can replace the queue with a vector and use random_shuffle to shuffle the elements.

5. Avoid unnecessary operations in the loop: The program checks the size of the res vector in every iteration of the loop. However, the size of the res vector does not change within the loop. We can move this check outside the loop to avoid unnecessary operations.

6. Remove unnecessary code: The program includes macros and debug statements that are not used in the program. We can remove them to reduce unnecessary code.

Optimized code:

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <random>

using namespace std;

void solve() {
  int n, m;
  cin >> n >> m;
  vector<int> v(n);
  for (auto &x : v)
    cin >> x;
  unordered_map<ll, ll> d;
  vector<ll> q;
  for (int i = 0; i < n; i++) {
    d[v[i]] = 0LL;
    q.push_back(v[i]);
  }
  vector<ll> res;
  ll mini_sum = 0LL;
  while (!q.empty()) {
    ll cur = q.back();
    q.pop_back();
    if (d[cur] != 0) {
      res.push_back(cur);
      mini_sum += d[cur];
    }
    if (!d.count(cur - 1)) {
      d[cur - 1] = d[cur] + 1;
      q.push_back(cur - 1);
    }
    if (!d.count(cur + 1)) {
      d[cur + 1] = d[cur] + 1;
      q.push_back(cur + 1);
    }
  }
  random_shuffle(res.begin(), res.end());
  cout << mini_sum << "\n";
  for (auto x : res)
    cout << x << " ";
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
  int t = 1;
  while (t--) {
    solve();
  }
  return 0;
}
```
