#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
using namespace std;

void solve() {
  int n, m;
  cin >> n >> m;

  vector<int> v(n);
  for (auto &x : v)
    cin >> x;

  vector<int> d(n, 0);
  set<int> q;

  for (int i = 0; i < n; i++) {
    d[v[i]] = 0;
    q.insert(v[i]);
  }

  vector<int> res;
  int mini_sum = 0;

  while (!q.empty()) {
    if ((int)res.size() == m)
      break;

    int cur = *q.begin();
    q.erase(q.begin());

    if (d[cur] != 0) {
      res.push_back(cur);
      mini_sum += d[cur];
    }

    if (!d[cur - 1]) {
      d[cur - 1] = d[cur] + 1;
      q.insert(cur - 1);
    }

    if (!d[cur + 1]) {
      d[cur + 1] = d[cur] + 1;
      q.insert(cur + 1);
    }
  }

  partial_sort(res.begin(), res.begin() + m, res.end());

  cout << mini_sum << "\n";
  for (auto x : res)
    cout << x << " ";
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
  int t = 1;
  while (t--) {
    solve();
  }
  return 0;
}