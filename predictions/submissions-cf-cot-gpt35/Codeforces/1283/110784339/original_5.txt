The given program has a few areas that can be optimized:

1. Remove unnecessary include statements: The program includes the entire `<bits/stdc++.h>` header, which includes a large number of standard library headers. This can increase the compilation time and memory usage. We can remove this line and include only the necessary headers.

2. Remove unnecessary typedefs: The program defines several typedefs for various types. These typedefs are not used in the program and can be removed.

3. Remove unnecessary hashing function: The program defines a custom hashing function `custom_hash` for the `unordered_map`. However, this hashing function is not necessary for the given problem and can be removed.

4. Avoid unnecessary copying: In the `for` loop that reads the input values, the elements of the vector `v` are copied using the range-based `for` loop. Instead, we can use a regular `for` loop and access the elements by reference to avoid unnecessary copying.

5. Avoid unnecessary checks: In the while loop that populates the `unordered_map` and the queue, there are unnecessary checks using the `count` function. We can remove these checks and directly insert the values into the `unordered_map`.

6. Avoid unnecessary type conversion: In the `for` loop that prints the elements of the `res` vector, the loop variable `x` is of type `auto`, which can result in unnecessary type conversions. We can change the type of `x` to `ll` to avoid these conversions.

7. Avoid unnecessary shuffling: The program shuffles the elements of the `res` vector using the `shuffle` function from the `<algorithm>` header. However, the problem does not require the elements to be shuffled, so we can remove this line.

After applying these optimizations, the optimized program is as follows:

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <queue>
#include <algorithm>
#include <random>

using namespace std;

#define ll long long

void solve() {
  int n, m;
  cin >> n >> m;
  vector<ll> v(n);
  for (int i = 0; i < n; i++) {
    cin >> v[i];
  }

  unordered_map<ll, ll> d;
  queue<ll> q;
  for (int i = 0; i < n; i++) {
    d[v[i]] = 0LL;
    q.push(v[i]);
  }

  vector<ll> res;
  ll mini_sum = 0LL;
  while (!q.empty()) {
    if ((int)res.size() == m)
      break;
    ll cur = q.front();
    q.pop();
    if (d[cur] != 0) {
      res.push_back(cur);
      mini_sum += d[cur];
    }
    d[cur - 1] = d[cur] + 1;
    q.push(cur - 1);
    d[cur + 1] = d[cur] + 1;
    q.push(cur + 1);
  }

  cout << mini_sum << "\n";
  for (ll x : res)
    cout << x << " ";
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  int t = 1;
  while (t--) {
    solve();
  }

  return 0;
}
```