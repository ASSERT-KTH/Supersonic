The given program is written in C++ and performs a series of operations on a vector of integers. It uses an unordered map and a queue to store and process the data. The program finds a subset of the integers in the vector that have the minimum sum of distances from a given value. It then shuffles the subset and prints the sum and the subset.

To optimize the program for running time and memory usage, we can make the following modifications:

1. Remove unnecessary header files: The program includes the `<bits/stdc++.h>` header file, which includes a large number of standard C++ library header files. This can increase the compilation time and memory usage. We can remove this line and include only the necessary header files.

2. Remove unnecessary typedefs and defines: The program includes several typedefs and defines for various data types and constants. These are not used in the program and can be removed.

3. Use a vector instead of an unordered map: The program uses an unordered map to store the distances of each integer from a given value. However, since the values are consecutive integers, we can use a vector instead of an unordered map. This will reduce the memory usage and improve the performance of the program.

4. Use a set instead of a queue: The program uses a queue to store the integers to be processed. However, since the order of processing does not matter, we can use a set instead of a queue. This will allow us to efficiently check whether an integer has already been processed or not.

5. Use a partial sort instead of shuffling: The program shuffles the subset of integers using the `shuffle` function from the `<algorithm>` library. However, since we are only interested in the minimum sum of distances, we can use a partial sort instead of shuffling. This will sort the subset in ascending order of distances and keep the remaining elements in any order. This will reduce the complexity of the sorting operation and improve the performance of the program.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
using namespace std;

void solve() {
  int n, m;
  cin >> n >> m;

  vector<int> v(n);
  for (auto &x : v)
    cin >> x;

  vector<int> d(n, 0);
  set<int> q;

  for (int i = 0; i < n; i++) {
    d[v[i]] = 0;
    q.insert(v[i]);
  }

  vector<int> res;
  int mini_sum = 0;

  while (!q.empty()) {
    if ((int)res.size() == m)
      break;

    int cur = *q.begin();
    q.erase(q.begin());

    if (d[cur] != 0) {
      res.push_back(cur);
      mini_sum += d[cur];
    }

    if (!d[cur - 1]) {
      d[cur - 1] = d[cur] + 1;
      q.insert(cur - 1);
    }

    if (!d[cur + 1]) {
      d[cur + 1] = d[cur] + 1;
      q.insert(cur + 1);
    }
  }

  partial_sort(res.begin(), res.begin() + m, res.end());

  cout << mini_sum << "\n";
  for (auto x : res)
    cout << x << " ";
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
  int t = 1;
  while (t--) {
    solve();
  }
  return 0;
}
```

Explanation of the optimizations:

1. Removed unnecessary header files: The `<bits/stdc++.h>` header file includes a large number of standard C++ library header files. Since we only need a few standard headers, we can include them directly.

2. Removed unnecessary typedefs and defines: The typedefs and defines for various data types and constants are not used in the program and have been removed.

3. Used a vector instead of an unordered map: The unordered map was replaced with a vector to store the distances of each integer from a given value. This reduces the memory usage and improves the performance of the program.

4. Used a set instead of a queue: The queue was replaced with a set to store the integers to be processed. This allows efficient checking whether an integer has already been processed or not. It also removes the need for the custom hash function.

5. Used a partial sort instead of shuffling: The shuffle function from the `<algorithm>` library was replaced with a partial_sort function. This sorts the subset of integers in ascending order of distances and keeps the remaining elements in any order. This reduces the complexity of the sorting operation and improves the performance of the program.