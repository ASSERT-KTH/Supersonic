Step 1: Remove unnecessary header file inclusion
The program includes the header file `<bits/stdc++.h>`, which is not a standard header file and may not be available on all systems. Since the program does not use any specific features from this header file, it can be safely removed.

Step 2: Optimize the sorting
The program uses the `sort` function from the `<algorithm>` header to sort the array `a`. However, the sorting is done for the entire array `a`, even though only `m` elements are used. We can optimize this by sorting only the first `m` elements of the array.

Step 3: Optimize the calculation of `sum` and `k`
The program uses nested loops to calculate the values of `sum` and `k`. This can be optimized by using a single loop and updating the values of `sum` and `k` directly.

Step 4: Optimize the calculation of `sum1` and the update of array `a`
The program uses a nested loop to find the maximum element in array `a` and update it. This can be optimized by using the `max_element` function from the `<algorithm>` header to find the maximum element and its index in a single step.

Based on these optimizations, here is the optimized program:

```cpp
#include <iostream>
#include <algorithm>
using namespace std;

int a[1020];

int main() {
  int n, m, sum = 0, sum1 = 0, k;
  cin >> n >> m;
  k = n;

  for (int i = 1; i <= m; i++) {
    cin >> a[i];
  }

  sort(a + 1, a + m + 1);

  for (int i = 1; i <= m; i++) {
    int curr = min(k, a[i]);
    sum += (a[i] + a[i] - curr + 1) * curr / 2;
    k -= curr;
  }

  for (int i = 1; i <= n; i++) {
    int j = max_element(a + 1, a + m + 1) - a;
    sum1 += a[j];
    a[j]--;
  }

  cout << sum1 << " " << sum << endl;
  return 0;
}
```