Step 1: Avoid including unnecessary header files.
The current program includes the `<bits/stdc++.h>` header file, which is not necessary. We can replace it with the specific header files that are needed for this program, such as `<iostream>`, `<algorithm>`, and `<cstdio>`. This can help reduce the compile time and improve memory usage.

Step 2: Optimize the sorting operation.
The program uses the `std::sort` function to sort the array `a`. However, we can optimize this step by using a partial sorting algorithm. Since we are only interested in the largest `n` elements of the array, we can use the `std::partial_sort` function instead of `std::sort`. This can reduce the time complexity of the sorting operation from O(m*log(m)) to O(m*log(n)).

Step 3: Optimize the calculation of `sum`.
The nested loop that calculates `sum` can be optimized by using a mathematical formula. Instead of iterating over `j` and subtracting it from `a[i]`, we can calculate the sum of arithmetic progression using the formula `(2*a[i] - j + 1) * j / 2`. This can reduce the time complexity of this loop from O(m^2) to O(m).

Step 4: Optimize the calculation of `sum1`.
The loop that calculates `sum1` can be optimized by keeping track of the index with the maximum value in the array `a`. Instead of using the `std::max_element` function in every iteration, we can store the index of the maximum element and update it accordingly. This can reduce the time complexity of this loop from O(n*m) to O(n).

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <algorithm>
#include <cstdio>
using namespace std;

const int MAX_N = 1020;
int a[MAX_N];

int main() {
  int n, m, sum = 0, sum1 = 0, k;
  scanf("%d%d", &n, &m);
  k = n;
  for (int i = 1; i <= m; i++) {
    scanf("%d", &a[i]);
  }
  partial_sort(a + 1, a + n + 1, a + m + 1, greater<int>());
  for (int i = 1; i <= m; i++) {
    int j = min(a[i], k);
    sum += (2 * a[i] - j + 1) * j / 2;
    k -= j;
  }
  int maxIndex = max_element(a + 1, a + n + 1) - a;
  for (int i = 1; i <= n; i++) {
    sum1 += a[maxIndex];
    a[maxIndex]--;
    if (a[i] > a[maxIndex]) {
        maxIndex = i;
    }
  }
  printf("%d %d\n", sum1, sum);
  return 0;
}
```

Explanation:
1. Removed the unnecessary header file `<bits/stdc++.h>`.
2. Replaced the header file `<algorithm>` with `<cstdio>` for using `scanf` and `printf`.
3. Replaced the `std::sort` function with `std::partial_sort` to optimize the sorting operation.
4. Replaced the nested loop with a mathematical formula to optimize the calculation of `sum`.
5. Added a variable `maxIndex` to keep track of the index with the maximum value in the array `a` and optimized the calculation of `sum1` using this variable.