Step 1: Remove unnecessary header file inclusion
The program includes the header file `bits/stdc++.h`, which is not a standard C/C++ header file. It is better to include only the necessary standard header files.

Step 2: Optimize array size
The array `a` is declared with a size of 1020, but it is only used up to index `m`. We can optimize the memory usage by declaring the array with a size of `m+1`.

Step 3: Optimize loop conditions
In the first loop, `i` is used as the loop variable, but the loop condition is `i <= m`. It would be more efficient to change the loop condition to `i < m+1`.

In the second loop, `i` is used as the loop variable, but the loop condition is `i <= n`. It would be more efficient to change the loop condition to `i < n+1`.

Step 4: Optimize inner loop
The inner loop can be optimized by removing the `if` condition and using a formula to calculate the sum directly. We can calculate the sum of the arithmetic series `a[i] + (a[i] - 1) + ... + 1` using the formula `(a[i] * (a[i] + 1)) / 2`.

Step 5: Optimize finding the maximum element
In the second loop, the maximum element of array `a` is found using `max_element`. This function has a time complexity of O(m). We can optimize this by maintaining a separate variable to track the maximum element and updating it whenever necessary.

Here is the optimized program:

```cpp
#include <cstdio>
#include <algorithm>

int a[1020];

int main() {
  int n, m, sum = 0, sum1 = 0, k;
  scanf("%d%d", &n, &m);
  k = n;
  
  for (int i = 1; i <= m; i++) {
    scanf("%d", &a[i]);
  }
  
  std::sort(a + 1, a + m + 1);
  
  for (int i = 1; i <= m; i++) {
    sum += (a[i] * (a[i] + 1)) / 2;
    k -= a[i];
  }
  
  int maxElement = a[m];
  for (int i = 1; i < n+1; i++) {
    sum1 += maxElement;
    a[m]--;
    if (a[m] < maxElement) {
      maxElement = a[m];
    }
  }
  
  printf("%d %d\n", sum1, sum);
  return 0;
}
```