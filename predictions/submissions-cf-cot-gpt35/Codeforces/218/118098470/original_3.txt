Step 1: Remove unnecessary header file inclusion
The program includes the header file `<bits/stdc++.h>`, which is not necessary. It is a non-standard header file that includes a lot of other standard library header files. Since it is not needed in this program, it can be removed.

Step 2: Optimize the sorting
The program uses the `sort` function to sort the array `a` in ascending order. However, we can optimize this step by using a counting sort algorithm. Since the values in the array `a` are integers in the range [1, n], we can create an array `count` of size n+1 to keep track of the count of each value. We can then iterate over the array `count` to reconstruct the sorted array `a`.

Step 3: Optimize the calculation of sum and sum1
The program uses nested loops to calculate the values of `sum` and `sum1`. However, we can optimize this step by using mathematical formulas. The value of `sum` can be calculated as the sum of arithmetic series for each element in the array `a`. Similarly, the value of `sum1` can be calculated as the sum of the maximum element in the array `a` for each element in the range [1, n].

Here is the optimized program:

```cpp
#include <iostream>
#include <algorithm>
using namespace std;

const int MAX_N = 1020;

int a[MAX_N];

int main() {
  int n, m, sum = 0, sum1 = 0, k;
  scanf("%d%d", &n, &m);
  k = n;
  for (int i = 1; i <= m; i++) {
    scanf("%d", &a[i]);
  }

  // Step 2: Optimize the sorting
  int count[MAX_N] = {0};
  for (int i = 1; i <= m; i++) {
    count[a[i]]++;
  }
  int idx = 1;
  for (int i = 1; i <= n; i++) {
    while (count[idx] == 0) {
      idx++;
    }
    a[i] = idx;
    count[idx]--;
  }

  // Step 3: Optimize the calculation of sum and sum1
  for (int i = 1; i <= m; i++) {
    sum += (a[i] * (a[i] + 1)) / 2;
    k -= a[i];
  }
  sum -= (k * (k + 1)) / 2;

  for (int i = 1; i <= n; i++) {
    sum1 += a[m];
    a[m]--;
  }

  printf("%d %d\n", sum1, sum);
  return 0;
}
```