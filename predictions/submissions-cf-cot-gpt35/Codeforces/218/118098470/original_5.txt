Step 1: Remove unnecessary header file inclusion.
The <bits/stdc++.h> header file includes a lot of other header files, which may not be necessary for this program. We can remove it and only include the necessary header files.

Step 2: Remove unnecessary variable 'k'.
The variable 'k' is not necessary in this program. We can remove it and use 'n' directly.

Step 3: Optimize the first loop.
In the first loop, we are iterating over the 'a' array and for each element, we are iterating again 'a[i]' times. This can be optimized by using a single loop and computing the sum directly.

Step 4: Optimize the second loop.
In the second loop, we are finding the maximum element in the 'a' array using the max_element function. This can be optimized by keeping track of the maximum element while reading the input and updating it whenever necessary.

Based on these optimizations, here is the optimized program:

```c++
#include <iostream>
#include <algorithm>
using namespace std;

const int MAX = 1020;

int a[MAX];

int main() {
    int n, m, sum = 0, sum1 = 0;

    cin >> n >> m;
    
    int maxElement = 0;
    for (int i = 1; i <= m; i++) {
        cin >> a[i];
        maxElement = max(maxElement, a[i]);
    }
    
    sort(a + 1, a + m + 1);
    
    for (int i = 1; i <= m; i++) {
        sum += a[i] * min(n, m - i + 1);
    }
    
    for (int i = 1; i <= n; i++) {
        sum1 += maxElement;
        a[1]--;
        
        int j = 1;
        while (j < m && a[j] > a[j + 1]) {
            swap(a[j], a[j + 1]);
            j++;
        }
    }
    
    cout << sum1 << " " << sum << endl;
    
    return 0;
}
```

Explanation of optimizations:

Step 1: The unnecessary header file inclusion <bits/stdc++.h> is removed and replaced with the necessary header files <iostream> and <algorithm>.

Step 2: The variable 'k' is removed and 'n' is used directly.

Step 3: The first loop is optimized by computing the sum directly using a single loop. Instead of iterating 'a[i]' times, we use min(n, m - i + 1) to limit the number of iterations.

Step 4: The second loop is optimized by keeping track of the maximum element while reading the input and updating it whenever necessary. Instead of using max_element function, we use a variable 'maxElement' to store the maximum element. We also optimize the sorting of the 'a' array by swapping adjacent elements if they are out of order.