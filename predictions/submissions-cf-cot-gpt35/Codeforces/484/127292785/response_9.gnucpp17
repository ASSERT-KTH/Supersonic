#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

struct SparseTable {
  int N, K;
  vector<vector<int>> table;

  SparseTable(vector<int>& a) {
    N = a.size();
    K = log2(N) + 2;
    table = vector<vector<int>>(N, vector<int>(K));

    for (int i = N - 1; i >= 0; i--) {
      table[i][0] = a[i];
      for (int j = 1; i + (1 << j) - 1 < N; j++) {
        table[i][j] = max(table[i][j - 1], table[i + (1 << (j - 1))][j - 1]);
      }
    }
  }

  int query(int l, int r) {
    int temp = log2(r - l + 1);
    int ans = max(table[l][temp], table[r - (1 << temp) + 1][temp]);
    return ans;
  }
};

void solve() {
  int n;
  cin >> n;

  vector<int> a(n, 0);
  for (int i = 0; i < n; i++) {
    int x;
    cin >> x;
    a[x - 1] = i;
  }

  SparseTable tab(a);
  int temp_max = 0;
  for (int i = 1; i <= n; i++) {
    if (!a[i - 1])
      continue;
    for (int j = i; j <= n; j += i) {
      int temp = tab.query(j - 1, min(j + i - 2, n - 1)) - (j - 1);
      temp_max = max(temp_max, temp);
    }
  }

  cout << temp_max << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  solve();

  return 0;
}