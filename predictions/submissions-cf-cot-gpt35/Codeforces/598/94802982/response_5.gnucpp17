#include <iostream>
#include <cstring>
using namespace std;

const int nmmx = 31, kmx = 51;
int dp[nmmx][nmmx][kmx];

int solve(int n, int m, int k) {
  if (dp[n][m][k] != -1)
    return dp[n][m][k];
  
  if (n * m == k || k == 0)
    return dp[n][m][k] = 0;
  
  int ans = 1e18;
  
  for (int i = 1; i <= n - 1; ++i) {
    for (int j = 0; j <= k; ++j) {
      int sub1 = solve(i, m, j);
      int sub2 = solve(n - i, m, k - j);
      ans = min(ans, m * m + sub1 + sub2);
    }
  }
  
  for (int i = 1; i <= m - 1; ++i) {
    for (int j = 0; j <= k; ++j) {
      int sub1 = solve(n, i, j);
      int sub2 = solve(n, m - i, k - j);
      ans = min(ans, n * n + sub1 + sub2);
    }
  }
  
  return dp[n][m][k] = ans;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  memset(dp, -1, sizeof(dp));
  
  solve(30, 30, 50);
  
  int t;
  cin >> t;
  
  while (t--) {
    int n, m, k;
    cin >> n >> m >> k;
    cout << solve(n, m, k) << endl;
  }
  
  return 0;
}