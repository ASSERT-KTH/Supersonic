#include <iostream>
#include <cstring>
using namespace std;

const int nmmx = 31, kmx = 51;
int dp[nmmx * kmx * kmx];

int solve(int n, int m, int k) {
  int &ans = dp[n * kmx * kmx + m * kmx + k];
  if (ans != 1e18)
    return ans;
  if (n * m == k || k == 0)
    return ans = 0;
  ans = 1e18;
  for (int i = 1; i <= n - 1; ++i) {
    for (int j = 0; j <= k; ++j) {
      ans = min(ans, m * m + solve(i, m, j) + solve(n - i, m, k - j));
    }
  }
  for (int i = 1; i <= m - 1; ++i) {
    for (int j = 0; j <= k; ++j) {
      ans = min(ans, n * n + solve(n, i, j) + solve(n, m - i, k - j));
    }
  }
  return ans;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  memset(dp, 63, sizeof(dp)); // Initialize with a maximum value
  solve(30, 30, 50);
  int n, m, k;
  while (cin >> n >> m >> k) {
    cout << solve(n, m, k) << endl;
  }
  return 0;
}