#include <iostream>
#include <cmath>
#include <cstring>

const int maxn = 1e6 + 10;
int prime[maxn];
bool vis[maxn];
int ans[maxn];

void sieve(int n) {
  memset(vis, 0, sizeof(vis));
  for (int x = 1; x <= sqrt(n); x++) {
    for (int y = 1; y <= sqrt(n); y++) {
      int num = 4 * x * x + y * y;
      if (num <= n && (num % 12 == 1 || num % 12 == 5)) {
        vis[num] = !vis[num];
      }
      num = 3 * x * x + y * y;
      if (num <= n && num % 12 == 7) {
        vis[num] = !vis[num];
      }
      num = 3 * x * x - y * y;
      if (x > y && num <= n && num % 12 == 11) {
        vis[num] = !vis[num];
      }
    }
  }

  for (int r = 5; r * r <= n; r++) {
    if (vis[r]) {
      for (int i = r * r; i <= n; i += r * r) {
        vis[i] = false;
      }
    }
  }

  prime[0] = 2;
  int cnt = 1;
  for (int i = 3; i <= n; i++) {
    if (vis[i]) {
      prime[cnt++] = i;
    }
  }
  prime[cnt] = n;
}

void precalculate_ans() {
  ans[0] = 0;
  for (int i = 1; i < maxn; ++i) {
    ans[i] = ans[i - 1] + (int)(!vis[i]);
  }
}

int main() {
  sieve(maxn - 9);
  precalculate_ans();

  int t;
  std::cin >> t;
  while (t--) {
    int n;
    std::cin >> n;
    if (n <= 3) {
      std::cout << n << "\n";
      continue;
    }
    int l = 1, r = prime[0];
    while (l + 1 < r) {
      int mid = (r + l) / 2;
      if ((long long)prime[mid] * prime[mid] <= (long long)n)
        l = mid;
      else
        r = mid;
    }
    std::cout << ans[n] - ans[prime[l]] + 1 << "\n";
  }
  return 0;
}