#include <iostream>
#include <vector>
#include <algorithm>

constexpr int INF = 0x3f3f3f3f;
constexpr double PI = acos(-1);
constexpr double eps = 1e-8;

const int maxn = 1e6 + 10;
const int mod = 1e9 + 7;

std::array<int, maxn> prime;
std::vector<int> ans;

void euler(int n) {
  std::vector<bool> vis(n, false);
  int idx = 0;
  prime[idx++] = 2;
  for (int i = 3; i < n; i += 2) {
    if (!vis[i]) {
      prime[idx++] = i;
      for (int j = i * i; j < n; j += i * 2) {
        vis[j] = true;
      }
    }
  }
  prime.resize(idx);
}

int main() {
  euler(maxn - 9);
  std::vector<bool> vis(maxn, false);
  vis[1] = true;
  ans.resize(maxn);
  for (int i = 1; i <= maxn; ++i) {
    ans[i] = ans[i - 1] + (int)(!vis[i]);
  }

  int t;
  std::cin >> t;
  while (t--) {
    int n;
    std::cin >> n;
    if (n <= 3) {
      std::cout << n << "\n";
      continue;
    }
    auto it = std::lower_bound(prime.begin(), prime.end(), n);
    int l = std::distance(prime.begin(), it);
    std::cout << ans[n] - ans[prime[l]] + 1 << "\n";
  }
  return 0;
}