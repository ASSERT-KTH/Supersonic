#include <iostream>
#include <vector>
#include <cmath>
#include <cassert>
#include <deque>

using namespace std;

const int MAX_N = 400002;

int a;
vector<int> l[MAX_N];
int skok[MAX_N], o[MAX_N], zam[MAX_N], GR[MAX_N][2], mxd[MAX_N], mxp[MAX_N], dp[MAX_N][2], sz[MAX_N], good[MAX_N];

void calculate_sizes(int v, int p, int D) {
    mxd[v] = 1;
    sz[v] = 1;
    int c1 = 0, c2 = 0;
    for (int h : l[v]) {
        if (h == p)
            continue;
        calculate_sizes(h, v, D + 1);
        mxd[v] = max(mxd[v], mxd[h] + 1);
        sz[v] += sz[h];
        if (mxd[h] >= c1)
            c2 = c1, c1 = mxd[h];
        else if (mxd[h] > c2)
            c2 = mxd[h];
    }
    mxp[v] = c1 + c2 + 1;
}

int find_centroid(int v, int p) {
    int MX = 0, num = -1;
    for (int h : l[v]) {
        if (h != p && sz[h] > MX)
            MX = sz[h], num = h;
    }
    return MX > a / 2 ? find_centroid(num, v) : v;
}

void dfs(int v, int p, vector<int>& centroid, vector<int>& non_centroid) {
    if (good[v])
        centroid.push_back(v);
    else
        non_centroid.push_back(v);
    for (int h : l[v]) {
        if (!good[h])
            dfs(h, v, centroid, non_centroid);
    }
}

void remove_parent(int v, int p) {
    for (int q = 0; q < l[v].size(); q++) {
        if (l[v][q] == p) {
            l[v].erase(l[v].begin() + q);
            break;
        }
    }
    for (int h : l[v])
        remove_parent(h, v);
}

void rename_vertices(int v, int& count) {
    zam[v] = count++;
    deque<int> dq = {v};
    for (; dq.size();) {
        int x = dq[0];
        dq.pop_front();
        for (int h : l[x]) {
            if (zam[h] != -1)
                continue;
            dq.push_back(h);
            zam[h] = count++;
        }
    }
}

int GA(int LEN) {
    if (o[LEN] != -1)
        return o[LEN];
    int d1, d2, w, rg;
    for (int q = a - 1; q >= 0; q--) {
        if (good[q]) {
            dp[q][0] = sz[q] / LEN;
            dp[q][1] = sz[q] % LEN;
            continue;
        }
        dp[q][0] = 0;
        d1 = d2 = 0, w = GR[q][0], rg = GR[q][1];
        for (; w <= rg; w++) {
            dp[q][0] += dp[w][0];
            if (dp[w][1] >= d1)
                d2 = d1, d1 = dp[w][1];
            else
                d2 = max(d2, dp[w][1]);
        }
        if (d1 + d2 + 1 < LEN)
            dp[q][1] = d1 + 1;
        else
            dp[q][0]++, dp[q][1] = 0;
    }
    return o[LEN] = dp[0][0];
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> a;
    o[1] = a;
    for (int q = 1; q <= a; q++)
        skok[a / q]++;
    for (int& i : skok)
        i /= 2;
    vector<pair<int, int>> reb(a - 1);
    for (int q = 0; q < a - 1; q++) {
        int x, y;
        cin >> x >> y;
        x--, y--;
        reb[q] = {x, y};
        l[x].push_back(y);
        l[y].push_back(x);
    }
    rename_vertices(0, 0);
    for (int q = 0; q < a; q++)
        l[q].clear();
    for (pair<int, int> p : reb) {
        l[zam[p.first]].push_back(zam[p.second]);
        l[zam[p.second]].push_back(zam[p.first]);
    }
    remove_parent(0, -1);
    reb.clear();
    for (int q = 0; q < a; q++) {
        for (int h : l[q])
            reb.push_back({q, h});
    }
    calculate_sizes(0, -1, 1);
    for (int q = 0; q < a; q++)
        good[q] = sz[q] == mxd[q];
    memset(zam, -1, sizeof(zam));
    zam[0] = 0;
    if (!good[0])
        rename_vertices(0, 0);
    else
        a = 1;
    for (int q = 0; q < a; q++) {
        if (zam[q] == -1)
            continue;
        sz[zam[q]] = sz[q];
        mxd[zam[q]] = mxd[q];
        mxp[zam[q]] = mxp[q];
    }
    for (int q = 0; q < a; q++)
        l[q].clear();