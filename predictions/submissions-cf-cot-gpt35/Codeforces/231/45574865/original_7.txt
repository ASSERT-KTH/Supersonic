Explanation of the optimization steps:

1. Remove unnecessary header files: The `math.h` and `string.h` header files are not used in the given program, so they can be removed to improve compilation time and reduce memory usage.

2. Avoid using `using namespace std`: The `using namespace std` statement can cause conflicts and ambiguity in larger programs. It is better to use the `std::` prefix for standard library functions and types to avoid any potential issues.

3. Move variable declarations closer to their usage: The variables `temp` and `hasil` are declared at the beginning of the main function but are not used until later. It is better to declare them right before they are used, which can improve code readability and maintainability.

4. Optimize the loop conditions: Instead of having a nested loop that iterates 3 times for each iteration of the outer loop, we can combine them into a single loop that iterates `n * 3` times. This reduces the number of iterations and improves performance.

5. Use a more descriptive variable name: The variable `y` is not very descriptive. It is better to use a more meaningful name to improve code readability.

Optimized code:

```cpp
#include <iostream>

int main() {
  int n;
  std::cin >> n;
  
  int count = 0;
  int result = 0;
  
  for (int i = 0; i < n * 3; i++) {
    int value;
    std::cin >> value;
    
    if (value == 1) {
      count++;
    }
    
    if ((i + 1) % 3 == 0) {
      if (count >= 2) {
        result++;
      }
      count = 0;
    }
  }
  
  std::cout << result;
  return 0;
}
```