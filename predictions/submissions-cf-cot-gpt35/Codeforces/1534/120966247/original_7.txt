Optimization Steps:
1. Remove unnecessary headers: The headers `<cstring>` and `<iostream>` are not used in the program. We can remove them to improve compilation time.
2. Remove unnecessary namespace: The line `using namespace std;` is not necessary in this program because we can qualify the standard library functions with `std::` prefix.
3. Use `int` instead of `#define`: Instead of using `#define int long long` to define the type of `N`, we can directly declare `N` as `int`.
4. Optimize the loop in the `dfs` function: Instead of using `i < e[u].size()` as the loop condition, we can store `e[u].size()` in a variable before the loop to avoid calculating it in every iteration.
5. Optimize the `qmi` function: We can use an iterative approach instead of a recursive one to calculate the exponentiation. This will reduce the function call overhead.
6. Remove unnecessary memset: Since the `memset` function is used to set all values of `vis` to 0 at the beginning of each test case, we can remove it and directly initialize `vis` to all zeros when it is declared.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

const int N = 1e9 + 7;
int t, n, cnt;
int a[400005], vis[400005];
std::vector<int> e[400005];

void dfs(int u) {
  vis[u] = 1;
  int size = e[u].size();
  for (int i = 0; i < size; ++i) {
    int v = e[u][i];
    if (!vis[v])
      dfs(v);
  }
}

int qmi(int cnt) {
  int x = 2, s = 1;
  while (cnt) {
    if (cnt & 1)
      s = s * x % N;
    x = x * x % N;
    cnt >>= 1;
  }
  return s % N;
}

int main() {
  std::cin >> t;
  while (t--) {
    std::cin >> n;
    cnt = 0;
    for (int i = 1; i <= n; i++) {
      std::cin >> a[i];
      e[i].clear();
    }
    for (int i = 1; i <= n; i++) {
      int v;
      std::cin >> v;
      e[a[i]].push_back(v);
    }
    for (int i = 1; i <= n; i++)
      if (!vis[a[i]])
        cnt++, dfs(a[i]);
    std::cout << qmi(cnt) << std::endl;
  }
  return 0;
}
```