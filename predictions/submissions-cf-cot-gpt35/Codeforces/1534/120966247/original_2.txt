The given program can be optimized in the following steps:

1. Avoid using `memset` to initialize the `vis` array: Instead of using `memset(vis, 0, sizeof vis)`, we can directly initialize the `vis` array to all zeros when it is declared.

2. Avoid clearing the vector `e` in each iteration of the outer loop: Instead of clearing the vector `e` in each iteration of the outer loop, we can clear it just once before the outer loop starts.

3. Avoid using `e[i].size()` in the inner loop condition: Instead of using `e[i].size()` in the inner loop condition, we can store it in a variable `m` before the loop starts and use `m` in the condition.

4. Avoid using `vis[v]` in the inner loop condition: Instead of using `vis[v]` in the inner loop condition, we can directly check if `vis[v]` is zero inside the loop and then set it to one.

5. Avoid calculating `qmi(cnt)` every time in the outer loop: Instead of calculating `qmi(cnt)` every time in the outer loop, we can calculate it once before the outer loop starts and store it in a variable `result`. Then, we can output `result` in each iteration of the outer loop.

Here is the optimized version of the program:

```cpp
#include <cstring>
#include <iostream>
#include <vector>
using namespace std;
#define int long long
const int N = 1e9 + 7;
int t, n, cnt;
int a[400005], vis[400005];
vector<int> e[400005];
void dfs(int u) {
  vis[u] = 1;
  for (int v, i = 0, m = e[u].size(); i < m; ++i) {
    v = e[u][i];
    if (!vis[v]) {
      dfs(v);
    }
  }
}
int qmi(int cnt) {
  int x = 2, s = 1;
  while (cnt) {
    if (cnt & 1) {
      s = s * x % N;
    }
    x = x * x % N;
    cnt >>= 1;
  }
  return s % N;
}
signed main() {
  cin >> t;
  int result = qmi(1);
  while (t--) {
    cin >> n;
    cnt = 0;
    for (int i = 1; i <= n; i++) {
      cin >> a[i];
    }
    for (int i = 1; i <= n; i++) {
      cin >> e[a[i]].push_back(v);
    }
    for (int i = 1; i <= n; i++) {
      if (!vis[a[i]]) {
        cnt++;
        dfs(a[i]);
      }
    }
    cout << result << endl;
  }
  return 0;
}
```