#include <iostream>
#include <vector>
#include <map>
using namespace std;

long long gcd(long long a, long long b) {
  while (b != 0) {
    long long temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}

long long mul(long long a, long long b, long long mod) {
  __int128 ret = 0;
  while (b) {
    if (b & 1) {
      ret += a;
      ret %= mod;
    }
    a <<= 1;
    a %= mod;
    b >>= 1;
  }
  return ret;
}

long long pow(long long a, long long b, long long mod) {
  long long ret = 1;
  while (b) {
    if (b & 1)
      ret = mul(ret, a, mod);
    a = mul(a, a, mod);
    b >>= 1;
  }
  return ret;
}

bool check(long long a, long long n) {
  if (n == 2)
    return true;
  long long x = n - 1;
  int t = 0;
  while ((x & 1) == 0) {
    x >>= 1;
    t++;
  }
  long long y = pow(a, x, n);
  for (int i = 1; i <= t; i++) {
    if (y == 1 && x != 1 && x != n - 1)
      return true;
    x = y;
    y = mul(y, y, n);
  }
  return y != 1;
}

bool Miller_Rabin(long long n) {
  if (n == 2)
    return true;
  if (n == 1 || !(n & 1))
    return false;
  const int arr[7] = {2, 3, 5, 7, 11, 13, 17};
  for (int i = 0; i < 7; i++) {
    if (arr[i] >= n)
      break;
    if (check(arr[i], n))
      return false;
  }
  return true;
}

long long Pollard_rho(long long n, int c) {
  long long x = 2, y = 2, d = 1;
  while (d == 1) {
    x = (mul(x, x, n) + c) % n;
    y = (mul(y, y, n) + c) % n;
    y = (mul(y, y, n) + c) % n;
    d = gcd(abs(x - y), n);
  }
  return d;
}

void factorize(long long n, vector<pair<long long, int>>& factors, int c = 107) {
  if (n == 1)
    return;
  if (Miller_Rabin(n)) {
    factors.push_back({n, 1});
    return;
  }
  long long p = n;
  while (p >= n)
    p = Pollard_rho(p, c--);
  factorize(p, factors, c);
  factorize(n / p, factors, c);
}

long long c[100005];
long long ans, cur;
vector<pair<long long, int>> factors;

void dfs(vector<pair<long long, int>>::iterator it, long long val) {
  if (it == factors.end()) {
    long long a = val;
    long long b = cur / val;
    if (a <= 100000 && b <= 100000 && c[a] && c[b]) {
      if (a == b)
        ans += c[a] * (c[a] - 1);
      else
        ans += c[a] * c[b];
    }
  } else {
    vector<pair<long long, int>>::iterator nit = it;
    nit++;
    for (int i = 0; i <= it->second; i++) {
      dfs(nit, val);
      val *= it->first;
    }
  }
}

vector<int> primes;

void getprime(int x) {
  vector<bool> judge(x + 1, false);
  for (int i = 2; i <= x; i++) {
    if (!judge[i])
      primes.push_back(i);
    for (int j = 0; j < primes.size() && i * primes[j] <= x; j++) {
      judge[i * primes[j]] = true;
      if (i % primes[j] == 0)
        break;
    }
  }
}

int main() {
  int n, k;
  cin >> n >> k;
  if (k == 2) {
    map<long long, long long> all;
    getprime(100000);
    for (int i = 1; i <= n; i++) {
      int t;
      cin >> t;
      factors.clear();
      for (auto x : primes) {
        if (x > t)
          break;
        while (t % x == 0) {
          factors.push_back({x, 0});
          t /= x;
        }
      }
      long long h = 1;
      for (auto& x : factors) {
        x.second++;
        if (x.second & 1)
          h *= x.first;
      }
      all[h]++;
    }
    for (auto x : all) {
      ans += x.second * (x.second - 1) / 2;
    }
  } else {
    for (int i = 1; i <= n; i++) {
      int t;
      cin >> t;
      c[t]++;
    }
    long long x = 1;
    cur = 1;
    while (cur <= 10000000000LL) {
      factors.clear();
      factorize(cur, factors);
      dfs(factors.begin(), 1);
      x++;
      cur = 1;
      for (int j = 1; j <= k; j++) {
        cur *= x;
        if (cur > 1e10)
          break;
      }
    }
    ans /= 2;
  }
  cout << ans << endl;
  return 0;
}