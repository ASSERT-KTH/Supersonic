#include <iostream>
#include <map>
#include <vector>
#include <random>
using namespace std;

long long gcd(long long a, long long b) {
  if (a == 0)
    return b;
  if (b == 0)
    return a;
  
  // Binary GCD algorithm
  int shift = __builtin_ctzll(a | b);
  a >>= __builtin_ctzll(a);
  
  do {
    b >>= __builtin_ctzll(b);
    if (a > b)
      swap(a, b);
    b -= a;
  } while (b != 0);
  
  return a << shift;
}

long long mul(long long a, long long b, long long mod) {
  a %= mod;
  b %= mod;
  long long res = 0;
  
  // Binary exponentiation algorithm
  while (b > 0) {
    if (b & 1)
      res = (res + a) % mod;
    a = (a << 1) % mod;
    b >>= 1;
  }
  
  return res;
}

long long pow(long long a, long long b, long long mod) {
  a %= mod;
  long long res = 1;
  
  // Binary exponentiation algorithm
  while (b > 0) {
    if (b & 1)
      res = mul(res, a, mod);
    a = mul(a, a, mod);
    b >>= 1;
  }
  
  return res;
}

bool check(long long a, long long n) {
  long long x = n - 1;
  int t = 0;
  while ((x & 1) == 0) {
    x >>= 1;
    t++;
  }
  x = pow(a, x, n);
  
  // Optimize the loop condition
  for (int i = 0; i < t; i++) {
    long long y = mul(x, x, n);
    if (y == 1 && x != 1 && x != n - 1)
      return true;
    x = y;
  }
  
  return x != 1;
}

bool Miller_Rabin(long long n) {
  if (n == 2)
    return true;
  if (n == 1 || n % 2 == 0)
    return false;
  
  // Use a random number generator for selecting `c`
  random_device rd;
  mt19937 gen(rd());
  uniform_int_distribution<long long> dis(2, n - 2);
  
  for (int i = 0; i < 12; i++) {
    long long a = dis(gen);
    if (check(a, n))
      return false;
  }
  
  return true;
}

long long Pollard_rho(long long n) {
  if (n == 1)
    return 1;
  
  // Use a random number generator for selecting `c`
  random_device rd;
  mt19937 gen(rd());
  uniform_int_distribution<long long> dis(1, n - 1);
  
  long long x = dis(gen);
  long long y = x;
  long long c = dis(gen);
  long long d = 1;
  
  while (d == 1) {
    x = (mul(x, x, n) + c) % n;
    y = (mul(y, y, n) + c) % n;
    y = (mul(y, y, n) + c) % n;
    
    d = gcd(abs(y - x), n);
    
    if (d == n)
      break;
  }
  
  return d;
}

void factorize(long long n, map<long long, int> &cnt) {
  if (n == 1)
    return;
  
  if (Miller_Rabin(n)) {
    cnt[n]++;
    return;
  }
  
  long long p = n;
  while (p >= n)
    p = Pollard_rho(p);
  
  factorize(p, cnt);
  factorize(n / p, cnt);
}

int main() {
  int n, k;
  cin >> n >> k;
  
  if (k == 2) {
    map<long long, long long> all;
    
    for (int i = 1; i <= n; i++) {
      int t;
      cin >> t;
      map<long long, int> cnt;
      
      for (int x = 2; x * x <= t; x++) {
        while (t % x == 0) {
          cnt[x]++;
          t /= x;
        }
      }
      
      if (t > 1)
        cnt[t]++;
      
      long long h = 1;
      for (auto x : cnt)
        if (x.second & 1)
          h *= x.first;
      
      all[h]++;
    }
    
    long long ans = 0;
    for (auto x : all) {
      ans += x.second * (x.second - 1) / 2;
    }
    
    cout << ans << endl;
  } else {
    vector<long long> c(100001, 0);
    
    for (int i = 1; i <= n; i++) {
      int t;
      cin >> t;
      c[t]++;
    }
    
    long long ans = 0;
    long long x = 1;
    long long cur = 1;
    
    while (cur <= 10000000000LL) {
      map<long long, int> cnt;
      factorize(cur, cnt);
      dfs(cnt.begin(), 1);
      x++;
      cur = 1;
      for (int j = 1; j <= k; j++) {
        cur *= x;
        if (cur > 1e10)
          break;
      }
    }
    
    ans /= 2;
    cout << ans << endl;
  }
  
  return 0;
}