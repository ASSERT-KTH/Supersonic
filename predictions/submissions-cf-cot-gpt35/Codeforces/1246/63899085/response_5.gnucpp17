#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

int64_t gcd(int64_t a, int64_t b) {
  if (b == 0)
    return a;
  return gcd(b, a % b);
}

int64_t mul(int64_t a, int64_t b, int64_t mod) {
  int64_t ret = 0;
  while (b) {
    if (b & 1) {
      ret += a;
      ret %= mod;
    }
    a <<= 1;
    a %= mod;
    b >>= 1;
  }
  return ret;
}

int64_t pow(int64_t a, int64_t b, int64_t mod) {
  int64_t ret = 1;
  while (b) {
    if (b & 1)
      ret = mul(ret, a, mod);
    a = mul(a, a, mod);
    b >>= 1;
  }
  return ret;
}

bool check(int64_t a, int64_t n) {
  int64_t x = n - 1;
  int t = 0;
  while ((x & 1) == 0) {
    x >>= 1;
    t++;
  }
  x = pow(a, x, n);
  int64_t y;
  for (int i = 1; i <= t; i++) {
    y = mul(x, x, n);
    if (y == 1 && x != 1 && x != n - 1)
      return true;
    x = y;
  }
  if (y != 1)
    return true;
  return false;
}

bool Miller_Rabin(int64_t n) {
  if (n == 2)
    return true;
  if (n == 1 || !(n & 1))
    return false;
  const int arr[12] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37};
  for (int i = 0; i < 12; i++) {
    if (arr[i] >= n)
      break;
    if (check(arr[i], n))
      return false;
  }
  return true;
}

int64_t Pollard_rho(int64_t n, int c) {
  int64_t i = 1, k = 2, x, y, d;
  y = x = rand() % n;
  while (true) {
    i++;
    x = (mul(x, x, n) + c) % n;
    d = gcd(y - x, n);
    if (d > 1 && d < n)
      return d;
    if (y == x)
      break;
    if (i == k) {
      y = x;
      k <<= 1;
    }
  }
  return true;
}

void factorize(int64_t n, unordered_map<int64_t, int> &cnt, int c = 107) {
  if (n == 1)
    return;
  if (Miller_Rabin(n)) {
    cnt[n]++;
    return;
  }
  int64_t p = n;
  while (p >= n)
    p = Pollard_rho(p, c--);
  factorize(p, cnt, c);
  factorize(n / p, cnt, c);
}

int64_t c[100005];
int64_t ans, cur;
unordered_map<int64_t, int> cnt;

void dfs(unordered_map<int64_t, int>::iterator it, int64_t val) {
  if (it == cnt.end()) {
    int64_t a = val;
    int64_t b = cur / val;
    if (a <= 100000 && b <= 100000 && c[a] && c[b]) {
      if (a == b)
        ans += c[a] * (c[a] - 1);
      else
        ans += c[a] * c[b];
    }
  } else {
    unordered_map<int64_t, int>::iterator nit = it;
    nit++;
    for (int i = 0; i <= it->second; i++) {
      dfs(nit, val);
      val *= it->first;
    }
  }
}

bool judge[100005];
vector<int64_t> primes;

inline void getprime(int x) {
  judge[1] = true;
  for (int i = 2; i <= x; i++) {
    if (!judge[i])
      primes.push_back(i);
    for (auto p : primes) {
      if (i * p > x)
        break;
      judge[i * p] = true;
      if (i % p == 0)
        break;
    }
  }
}

int main() {
  int n, k;
  scanf("%d%d", &n, &k);
  if (k == 2) {
    unordered_map<int64_t, int64_t> all;
    getprime(100000);
    for (int i = 1; i <= n; i++) {
      int t;
      scanf("%d", &t);
      cnt.clear();
      for (auto x : primes) {
        if (x > t)
          break;
        while (t % x == 0) {
          cnt[x]++;
          t /= x;
        }
      }
      int64_t h = 1;
      for (auto x : cnt)
        if (x.second & 1)
          h *= x.first;
      all[h]++;
    }
    for (auto x : all) {
      ans += x.second * (x.second - 1) / 2;
    }
  } else {
    for (int i = 1; i <= n; i++) {
      int t;
      scanf("%d", &t);
      c[t]++;
    }
    int64_t x = 1;
    cur = 1;
    while (cur <= 10000000000LL) {
      cnt.clear();
      factorize(cur, cnt);
      dfs(cnt.begin(), 1);
      x++;
      cur = 1;
      for (int j = 1; j <= k; j++) {
        cur *= x;
        if (cur > 1e10)
          break;
      }
    }
    ans /= 2;
  }
  printf("%lld\n", ans);
  return 0;
}