Optimization Steps:

1. Remove unnecessary includes: The program includes `<bits/stdc++.h>`, which is not a standard C++ library. It is better to include only the necessary headers.

2. Avoid using `scanf` and `printf`: The program uses `scanf` and `printf` for input and output. These functions are slower compared to the C++ input/output streams (`cin` and `cout`). It is better to use `cin` and `cout` for better performance.

3. Replace `map` with `unordered_map`: The program uses `map` to store key-value pairs. However, `unordered_map` provides faster lookup time (average case) compared to `map`. Since the order of the elements does not matter in this case, it is better to use `unordered_map` for better performance.

4. Optimize counting: The program uses `cnt` to store cumulative values. However, instead of calculating the cumulative sum for each element, we can calculate it in a single pass by keeping track of the sum as we iterate through the array.

5. Optimize calculation of `ans`: The calculation of `ans` can be optimized by using a formula instead of a loop. The sum of the series `1 + 2 + ... + n` can be calculated using the formula `n * (n + 1) / 2`. This will improve the running time of the program.

6. Remove unnecessary variables: The variables `vis` and `mx` are not necessary. We can calculate the required values without using these variables.

7. Optimize the check for duplicates: The program checks for duplicates in the `vis` map. However, we can avoid this check by initializing the `mp` map with a key-value pair of `(0, 0)`.

Optimized Program:

```cpp
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

int main() {
  int n;
  cin >> n;
  
  long long ans = n * 1LL * (n + 1) / 2LL;
  
  vector<long long> v(n + 1);
  for (int i = 1; i <= n; i++)
    cin >> v[i];
  
  unordered_map<long long, long long> mp;
  mp[0] = 0;
  
  long long cnt = 0;
  for (int i = 1; i <= n; i++) {
    cnt += v[i];
    if (mp.count(cnt)) {
      long long l = max(0LL, mp[cnt] - i);
      long long r = n - i;
      if (mp[cnt] - i >= 0) {
        ans -= (l * r) + l + r;
        if (i - mp[cnt] != n)
          ans--;
      }
    }
    mp[cnt] = i;
  }
  
  cout << ans << endl;
}
```

This optimized program improves the running time and memory usage of the original program by making the following modifications:

- Remove unnecessary includes.
- Replace `scanf` and `printf` with `cin` and `cout`.
- Replace `map` with `unordered_map`.
- Optimize counting by calculating the cumulative sum in a single pass.
- Optimize calculation of `ans` using a formula instead of a loop.
- Remove unnecessary variables.
- Optimize the check for duplicates by initializing the `mp` map with a key-value pair of `(0, 0)`.