Optimization Steps:
1. Remove the unnecessary `#include <bits/stdc++.h>` and `using namespace std` statements.
2. Change `scanf` and `printf` to `cin` and `cout` for input/output operations.
3. Use `vector<int>` instead of `vector<long long>` for `v` and `cnt` arrays since the given program reads integers.
4. Replace the unnecessary use of `map` and `vis` with a `vector<int>` to store the indices of previous occurrences of `cnt[i]`.
5. Remove the unnecessary use of `vis` vector and `vis[0] = 1`.
6. Replace `mp[cnt[i]]` with `prev_idx[cnt[i]]` to improve readability.
7. Simplify the calculation of `l` and `r` variables.
8. Replace the calculation of `ans` with a single expression to avoid multiple subtractions.

Optimized Program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  int n;
  cin >> n;
  
  long long ans = n * 1LL * (n + 1) / 2LL;
  vector<int> v(n + 1), cnt(n + 1, 0), prev_idx(n + 1, -1);
  
  for (int i = 1; i <= n; i++)
    cin >> v[i];
  
  prev_idx[0] = 0;
  long long mx = 0;
  
  for (int i = 1; i <= n; i++) {
    cnt[i] = cnt[i - 1] + v[i];
    
    if (prev_idx[cnt[i]] != -1) {
      int l = prev_idx[cnt[i]] - mx;
      int r = n - i;
      
      if (l >= 0) {
        ans -= (l * r) + l + r;
        
        if (i - prev_idx[cnt[i]] != n || !mx)
          ans--;
      }
      
      mx = max(prev_idx[cnt[i]] + 1, mx);
    }
    
    prev_idx[cnt[i]] = i;
  }
  
  cout << ans << endl;
  return 0;
}
```