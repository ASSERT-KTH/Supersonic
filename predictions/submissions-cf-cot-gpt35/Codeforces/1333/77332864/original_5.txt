Step 1: Remove unnecessary includes
The first step is to remove unnecessary includes. In this case, the only necessary include is `<cstdio>` for the `scanf` and `printf` functions.

Step 2: Remove unnecessary variables
The variables `mx` and `vis` are not used in the calculation of the final answer, so we can remove them to improve memory usage.

Step 3: Optimize the calculation of `ans`
The calculation of `ans` can be optimized by removing unnecessary type casting and using a more efficient formula for the sum of numbers from 1 to `n`. The formula `n * (n + 1) / 2` can be simplified to `(n * (n + 1)) / 2`.

Step 4: Optimize the loop
The loop can be optimized by removing the conditional statement inside the loop and moving the calculation of `cnt[i]` outside the loop. This will reduce the number of conditional statements and improve performance.

Step 5: Optimize the calculation of `l` and `r`
The calculation of `l` and `r` can be optimized by removing unnecessary conditional statements and simplifying the calculation. The calculation of `l` can be simplified to `max(0LL, mp[cnt[i]] - mx)`, and the calculation of `r` can be simplified to `n - i`.

Step 6: Optimize the calculation of `ans` inside the conditional statement
The calculation of `ans` inside the conditional statement can be optimized by removing unnecessary conditional statements and simplifying the calculation. The calculation of `(l * r) + l + r` can be simplified to `l * (r + 1) + r`.

Step 7: Optimize the calculation of `mx`
The calculation of `mx` can be optimized by removing unnecessary conditional statements and using a more efficient formula. The calculation of `mx` can be simplified to `max(mp[cnt[i]] + 1, mx)`.

Step 8: Optimize the calculation of `ans` outside the loop
The calculation of `ans` outside the loop can be optimized by removing unnecessary conditional statements and simplifying the calculation. The calculation of `i - mp[cnt[i]] != n` can be simplified to `i != mp[cnt[i]]` and the calculation of `!mx` can be simplified to `mx == 0`. The final calculation of `ans` can be simplified to `ans -= (l * (r + 1)) + 1`.

The optimized program is as follows:

```cpp
#include <cstdio>
#include <vector>
#include <map>
using namespace std;

int main() {
  int n;
  scanf("%d", &n);
  long long ans = (n * (n + 1)) / 2;
  vector<long long> v(n + 1), cnt(n + 1, 0);
  for (int i = 1; i <= n; i++)
    scanf("%lld", &v[i]);
  map<long long, long long> mp;
  mp[0] = 0;
  long long mx = 0;
  for (int i = 1; i <= n; i++) {
    cnt[i] = cnt[i - 1] + v[i];
    if (mp[cnt[i]]) {
      long long l = max(0LL, mp[cnt[i]] - mx);
      long long r = n - i;
      ans -= (l * (r + 1)) + 1;
      if (i != mp[cnt[i]] || mx == 0)
        ans--;
      mx = max(mp[cnt[i]] + 1, mx);
    }
    mp[cnt[i]] = i;
  }
  printf("%lld\n", ans);
}
```