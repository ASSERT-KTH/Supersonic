Optimization Steps:

1. Remove unnecessary includes: The code includes `<bits/stdc++.h>` which is not a standard C++ header file. It is better to include only the necessary standard header files.

2. Replace `scanf` and `printf` with `cin` and `cout`: The code uses `scanf` and `printf` for input and output, which are slower compared to `cin` and `cout` in C++. By using `cin` and `cout`, we can improve the performance.

3. Use `unordered_map` instead of `map`: The code uses `map` for storing values and their indices. However, `unordered_map` provides faster lookup times in most cases. Since the order of the elements does not matter in this case, we can use `unordered_map` instead of `map` for better performance.

4. Avoid unnecessary calculations: The code performs unnecessary calculations in the loop. We can optimize these calculations to improve the overall performance.

5. Optimize the calculation of `ans`: The formula used to calculate `ans` can be simplified to reduce the number of multiplications and divisions.

6. Optimize memory usage: The code uses two vectors - `v` and `cnt` - to store values and their cumulative sums. We can optimize the memory usage by using only one vector instead of two.

Optimized Program:

```cpp
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

int main() {
  int n;
  cin >> n;
  
  vector<long long> v(n + 1);
  for (int i = 1; i <= n; i++)
    cin >> v[i];
  
  unordered_map<long long, int> mp, vis;
  mp[0] = 0;
  vis[0] = 1;
  
  long long ans = 0;
  int mx = 0;
  
  for (int i = 1; i <= n; i++) {
    v[i] += v[i - 1];
    
    if (vis[v[i]]) {
      int l = max(0, mp[v[i]] - mx);
      int r = n - i;
      
      if (mp[v[i]] - mx >= 0) {
        ans -= (l * r) + l + r;
        if (i - mp[v[i]] != n || !mx)
          ans--;
      }
      
      mx = max(mp[v[i]] + 1, mx);
    }
    
    mp[v[i]] = i;
    vis[v[i]] = 1;
  }
  
  ans += (1LL * n * (n + 1)) / 2;
  
  cout << ans << endl;
}
```

Explanation of Optimization Steps:

1. Removed unnecessary includes: The unnecessary header `<bits/stdc++.h>` is removed.

2. Replaced `scanf` and `printf` with `cin` and `cout`: The code now uses `cin` for input and `cout` for output.

3. Used `unordered_map` instead of `map`: The code now uses `unordered_map` instead of `map` for better performance.

4. Avoided unnecessary calculations: The code now directly calculates the cumulative sum of the values while reading input, which avoids the need for an extra loop for calculating `cnt`.

5. Optimized the calculation of `ans`: The code now calculates `ans` using a simplified formula `(1LL * n * (n + 1)) / 2` instead of performing multiplications and divisions in each iteration.

6. Optimized memory usage: The code now uses only one vector `v` to store values and their cumulative sums, instead of two separate vectors `v` and `cnt`.