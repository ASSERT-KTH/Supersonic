#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int lcm(int a, int b) {
    return (a * b) / gcd(a, b);
}

int pow(int n, int k) {
    if (k < 0)
        return 0;
    int ret = 1;
    int now = n;
    while (k > 0) {
        if (k & 1)
            ret *= now;
        now *= now;
        k /= 2;
    }
    return ret;
}

int modexp(int n, int k, int md) {
    int ret = 1;
    int now = n % md;
    while (k > 0) {
        if (k % 2 == 1) {
            ret *= now;
            ret %= md;
        }
        now *= now;
        now %= md;
        k /= 2;
    }
    return ret;
}

int popcount(int n) {
    return __builtin_popcount(n);
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(nullptr);

    int n, t;
    cin >> n >> t;
    vector<int> a(n);
    for (int i = 0; i < n; i++)
        cin >> a[i];
    vector<int> b(n + 1, 0);
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += a[i];
        b[i + 1] = sum;
    }
    int maxlen = 0;
    for (int i = 1; i <= n; i++) {
        int to = b[i - 1] + t;
        auto it = upper_bound(b.begin(), b.end(), to);
        int len = (it - b.begin()) - i;
        maxlen = max(maxlen, len);
    }
    cout << maxlen << " ";

    return 0;
}