#include <iostream>
#include <algorithm>

using namespace std;

int gcd(int a, int b) {
  if (a < 0)
    a = -a;
  if (b < 0)
    b = -b;
  if (a < b)
    swap(a, b);
  if (b == 0)
    return a;
  return gcd(b, a % b);
}

int pow(int n, int k) {
  if (k < 0)
    return 0;
  int ret = 1;
  int now = n;
  while (k > 0) {
    if (k & 1)
      ret *= now;
    now *= now;
    k /= 2;
  }
  return ret;
}

int modexp(int n, int k, int md) {
  int ret = 1;
  int now = n;
  now %= md;
  while (k > 0) {
    if (k % 2 == 1) {
      ret *= now;
      ret %= md;
    }
    now *= now;
    now %= md;
    k /= 2;
  }
  return ret;
}

int popcount(int n) {
  int ret = 0;
  int u = n;
  while (u > 0) {
    ret += u % 2;
    u >>= 1;
  }
  return ret;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int n, t;
  cin >> n >> t;
  int a[n];
  for (int i = 0; i < n; i++) cin >> a[i];
  
  int b[n + 1] = {0};
  int sum = 0;
  int maxlen = 0;
  
  for (int i = 0; i < n; i++) {
    sum += a[i];
    b[i + 1] = sum;
  }
  
  for (int i = 1; i <= n; i++) {
    int to = b[i - 1] + t;
    auto it = upper_bound(b, b + n + 1, to);
    int len = (it - b) - i;
    maxlen = max(maxlen, len);
  }
  
  cout << maxlen << " ";
  
  return 0;
}