To optimize the given program, we can make the following modifications:

1. Remove unnecessary headers: The program includes the `<bits/stdc++.h>` header, which is not recommended as it includes a lot of unnecessary headers. We can remove it and include only the necessary headers.

2. Remove unused variables and functions: The program defines unused variables `dx`, `dy`, `ans`, and `k`, as well as unused functions `gcd` and `lcm`. We can remove them to improve clarity and reduce memory usage.

3. Use `unordered_set` instead of `set`: The program uses a `set` to store distinct elements. However, since the order of elements does not matter, we can use an `unordered_set` instead, which has a faster average case performance for insertion and lookup operations.

4. Use `unordered_map` instead of `map`: Similarly, the program uses a `map` to store the count of elements. We can use an `unordered_map` instead, which has a faster average case performance for insertion and lookup operations.

5. Avoid unnecessary checks: The program checks if `a[i] != 1` before inserting `a[i] - 1` into the set. However, since the array `a` is sorted, if `a[i]` is not equal to 1, then `a[i] - 1` would have already been inserted in a previous iteration. We can remove this check to optimize the program.

Based on these optimizations, the optimized program is as follows:

```cpp
#include <iostream>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
using namespace std;

#define el << endl

const int mx = 1e6 + 123;

int n, a[mx];

void _case_() {
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    sort(a, a + n);
    
    unordered_set<int> s;
    unordered_map<int, int> m;
    
    for (int i = 0; i < n; i++) {
        s.insert(a[i]);
        m[a[i]]++;
    }
    
    int count = 0;
    for (int i = 0; i < n; i++) {
        if (m[a[i]] > 0) {
            m[a[i]]--;
            if (m[a[i] + 1] == 0) {
                s.insert(a[i] + 1);
                m[a[i] + 1]++;
            }
        }
    }
    
    cout << s.size() el;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    
    _case_();
    
    return 0;
}
```

These optimizations should improve the running time and memory usage of the program.