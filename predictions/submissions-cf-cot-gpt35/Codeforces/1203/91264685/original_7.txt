Optimization Steps:
1. Remove unnecessary headers: The `<bits/stdc++.h>` header is not recommended as it includes a large number of standard library headers, which can increase compile time and memory usage. Instead, include only the necessary headers.
2. Remove unused macros: The macros `PI`, `_test_`, `file()` are not used in the code and can be removed.
3. Remove unnecessary function declarations: The functions `gcd()` and `lcm()` are not used in the code and can be removed.
4. Remove unnecessary variables: The variables `dx[]`, `dy[]`, `k`, `ans` are not used in the code and can be removed.
5. Optimize input/output: The `optimize()` function is used to optimize input/output streams, but it is not necessary in this code. Removing it will not affect the program's functionality.
6. Optimize sorting: Instead of using `std::sort()` to sort the array, we can use `std::nth_element()` to find the nth smallest element in linear time. This will reduce the time complexity of the sorting step from O(nlogn) to O(n).
7. Remove unnecessary set and map: The set `s` and map `m` are used to store unique elements, but they are not necessary. We can directly count the number of unique elements while iterating through the array.
8. Optimize memory usage: The array `a[]` is defined with a size of `mx`, which is 1e6 + 123. If the input size is smaller than this, it will waste memory. We can dynamically allocate memory for the array based on the input size.

Optimized Program:

```cpp
#include <iostream>
#include <algorithm>
#include <unordered_set>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n;
  cin >> n;
  
  int* a = new int[n];
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  
  nth_element(a, a + n / 2, a + n);
  
  unordered_set<int> s;
  for (int i = 0; i < n; i++) {
    if (a[i] != 1 && s.find(a[i] - 1) == s.end()) {
      s.insert(a[i] - 1);
    } else if (s.find(a[i]) == s.end()) {
      s.insert(a[i]);
    } else if (s.find(a[i] + 1) == s.end()) {
      s.insert(a[i] + 1);
    }
  }
  
  cout << s.size() << endl;
  
  delete[] a;
  
  return 0;
}
```

Explanation:

1. I removed the unnecessary headers and the unused macros from the code.
2. I removed the unnecessary function declarations and unused variables.
3. I removed the `optimize()` function as it is not necessary in this code.
4. I replaced the `std::sort()` function with `std::nth_element()` to find the median element in linear time.
5. I removed the unnecessary set `s` and map `m`, and replaced them with an `unordered_set`.
6. I dynamically allocated memory for the array `a[]` based on the input size to optimize memory usage.
7. I used `unordered_set::find()` to check if an element exists in the set instead of using `map` to count unique elements.
8. I deleted the dynamically allocated memory for the array at the end of the program.