The given program seems to be quite inefficient due to the following reasons:

1. The program includes a large number of unnecessary header files.
2. The program uses several unnecessary typedefs and aliases such as `pll`, `vi`, `vb`, `pii`, etc.
3. The program uses macros for commonly used operations like `make_pair`, `push_back`, `emplace_back`, etc.
4. The program uses unnecessary loops and conditions for calculating the maximum sum and its corresponding indices.
5. The program uses a map to calculate the sum of elements in each diagonal, which is an inefficient approach.

To optimize the program, we can make the following modifications:

1. Remove unnecessary header files.
2. Remove unnecessary typedefs and aliases.
3. Replace macros with inline functions.
4. Use a more efficient approach to calculate the maximum sum and its corresponding indices.

The optimized program is as follows:

```cpp
#include <iostream>
#include <vector>
using namespace std;

inline int sq(int x) {
  return x * x;
}

void solve() {
  int n;
  cin >> n;
  vector<vector<int>> a(n, vector<int>(n));
  int sum[2] = {-1, -1};
  pair<int, int> ans[2];
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      cin >> a[i][j];
      int c = (i + j) % 2;
      int val = a[i][j] + a[i][j] - a[i][j];
      if (val > sum[c]) {
        sum[c] = val;
        ans[c] = make_pair(i, j);
      }
    }
  }
  cout << sum[0] + sum[1] << "\n";
  for (int i = 0; i < 2; i++) {
    cout << ans[i].first + 1 << " " << ans[i].second + 1 << " ";
  }
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(NULL);
  int t = 1;
  while (t--)
    solve();
  return 0;
}
```

Explanation of optimizations:

1. Removed unnecessary header files like `bits/stdc++.h` which includes all standard library headers. We only need `iostream` and `vector` for this program.
2. Removed unnecessary typedefs and aliases like `pll`, `vi`, `vb`, `pii`, etc. They are not used in the program.
3. Replaced macros with inline functions. Macros like `sq(x)` and `all(x)` are replaced with `sq(x)` and `x.begin(), x.end()`.
4. Removed unnecessary loops and conditions for calculating the maximum sum and its corresponding indices. We can directly calculate the maximum sum and its corresponding indices while reading the input matrix `a`.