Step 1: Remove unnecessary header files and macros.
- The program includes the `<bits/stdc++.h>` header file, which is not a standard header file in C++. It is recommended to include only the necessary header files.
- The program defines several unnecessary macros, such as `int long long`, `hell`, `endl`, `F`, `S`, `gcd`, `lcm`, and `ONLINE_JUDGE`. These macros are not used in the program and can be removed.

Step 2: Optimize the `expo` function.
- The `expo` function calculates the exponentiation of a base with a given exponent. It can be optimized by using the exponentiation by squaring algorithm, which reduces the number of multiplications and modulo operations.
- Instead of using a loop, the algorithm can be implemented recursively to make it more concise.

Step 3: Optimize the `solve` function.
- The `solve` function reads input values into an array and then performs some calculations based on the input values.
- Instead of using an array to store the input values, we can read the input values one by one and perform the calculations immediately.
- The `curMid` variable is incremented by 1 in each iteration of the loop. Since it is only used to determine the value of `r`, we can replace it with a local variable `mid` and increment it by 1 each time `r` is calculated.

Step 4: Optimize the main function.
- The main function reads the number of test cases and calls the `solve` function for each test case.
- We can remove the unnecessary `t` variable, as it is always set to 1.
- The `ios` macro is unnecessary and can be removed.

Here is the optimized program:

```cpp
#include <iostream>

int expo(int base, int exponent, int mod = 1000000007) {
  if (exponent == 0) return 1;
  if (exponent % 2 == 0) {
    int half = expo(base, exponent / 2, mod);
    return (half * half) % mod;
  } else {
    int half = expo(base, (exponent - 1) / 2, mod);
    return (((half * half) % mod) * base) % mod;
  }
}

void solve() {
  int n, t;
  std::cin >> n >> t;
  
  int mid = 1;
  for (int i = 0; i < n; i++) {
    int a;
    std::cin >> a;

    int r;
    if (t % 2 == 0 && a == t / 2) {
      r = (mid++) % 2;
    } else if (2 * a < t) {
      r = 0;
    } else {
      r = 1;
    }
    std::cout << r << " ";
  }
  std::cout << std::endl;
}

int main() {
  int numTests;
  std::cin >> numTests;
  
  for (int i = 0; i < numTests; i++) {
    solve();
  }
}
```