Step 1: Remove unnecessary includes and defines.

The program includes the entire `bits/stdc++.h` header, which is not recommended. We can remove it and include the necessary headers individually. Additionally, the program defines macros that are not used, such as `hell`, `endl`, `F`, `S`, `gcd`, `lcm`. We can remove these defines as well.

Step 2: Remove unnecessary function calls.

The program defines two functions, `expo` and `inverse`, but these functions are not used anywhere. We can remove these function definitions.

Step 3: Optimize input/output operations.

The program uses `cin` and `cout` for input/output operations, which can be slow for large inputs/outputs. We can use `scanf` and `printf` instead, which are generally faster.

Step 4: Optimize loop variables.

The program uses a loop variable `i` for both the outer and inner loops. We can use a different loop variable for the inner loop to improve readability.

Step 5: Optimize the calculation of the result.

The program calculates the result for each element of the array `a` based on the value of `t`. We can simplify the calculations to improve the performance.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

void solve() {
  int n, t;
  scanf("%d%d", &n, &t);
  int a[n];
  for (int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
  }
  int curMid = 1;
  for (int i = 0; i < n; i++) {
    int r;
    if (t % 2 == 0 && a[i] == t / 2) {
      r = (curMid++) % 2;
    } else if (2 * a[i] < t) {
      r = 0;
    } else {
      r = 1;
    }
    printf("%d ", r);
  }
  printf("\n");
}

int main() {
  int t;
  scanf("%d", &t);
  while (t--) {
    solve();
  }
  return 0;
}
```