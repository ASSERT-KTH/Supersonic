This program calculates the value of `r` for each element of the array `a[]` based on the given condition and prints it.

To optimize this program, we can make the following modifications:

1. Remove unnecessary header files: The program includes `<bits/stdc++.h>` which includes a lot of unnecessary header files. We can replace it with the specific header files that are required for this program, which are `<iostream>` and `<algorithm>`.

2. Remove unnecessary macro definitions: The program defines several macros that are not used in the program. We can remove the macros `int`, `hell`, `endl`, `F`, `S`, `gcd(a, b)`, `lcm(a, b)`, and `ONLINE_JUDGE`.

3. Remove unnecessary namespace: The program is using the `using namespace std;` directive, which is considered bad practice. We can remove it and use the `std::` prefix for the standard library functions instead.

4. Optimize the `expo` function: The `expo` function calculates the exponentiation of a base number. We can optimize it by using the binary exponentiation algorithm, which reduces the number of multiplications and modulo operations. This can be done by checking the least significant bit of the exponent in each iteration and squaring the base number.

5. Optimize the `inverse` function: The `inverse` function calculates the modular inverse of a number. We can optimize it by calling the `expo` function with the exponent set to `hell - 2`, instead of calculating it separately.

6. Remove unnecessary modulo operations: The program uses modulo operations at multiple places. We can remove some of the modulo operations to improve the running time.

7. Optimize the loop for calculating `r`: The loop that calculates the value of `r` can be optimized by reducing the number of conditions and calculations. We can use a single condition to check if `2 * a[i] < t` and calculate `r` accordingly.

Here is the optimized program:

```cpp
#include <iostream>
#include <algorithm>

const int hell = 1000000007;

int expo(int base, int exponent, int mod = hell) {
  int ans = 1;
  base %= mod;
  while (exponent != 0) {
    if (exponent & 1)
      ans = (1LL * ans * base) % mod;
    base = (1LL * base * base) % mod;
    exponent >>= 1;
  }
  return ans;
}

int inverse(int x) {
  return expo(x, hell - 2);
}

void solve() {
  int n, t;
  std::cin >> n >> t;
  int a[n];
  for (int i = 0; i < n; i++) {
    std::cin >> a[i];
  }
  int curMid = 1;
  for (int i = 0; i < n; i++) {
    int r;
    if (2 * a[i] < t) {
      r = 0;
    } else if (2 * a[i] == t) {
      r = (curMid++) % 2;
    } else {
      r = 1;
    }
    std::cout << r << " ";
  }
  std::cout << std::endl;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);

  int t;
  std::cin >> t;
  while (t--) {
    solve();
  }

  return 0;
}
```

This optimized program reduces the unnecessary overhead and improves the running time and memory usage by removing unnecessary code and optimizing the calculations.