#include <iostream>
#include <vector>
#include <bitset>
#include <unordered_map>
#include <unordered_set>
using namespace std;

const int maxN = 15000007;

bitset<maxN> primes;
int spf[maxN];

void sieve() {
    primes.set();
    primes[0] = primes[1] = 0;
    
    for (int i = 2; i < maxN; i++) {
        if (primes[i]) {
            spf[i] = i;
            for (int j = i * i; j < maxN; j += i) {
                primes[j] = 0;
                spf[j] = i;
            }
        }
    }
}

unordered_map<int, int> countOfFactors;

void factorize(int n) {
    unordered_set<int> primeFactors;
    
    while (n != 1) {
        primeFactors.insert(spf[n]);
        n /= spf[n];
    }
    
    for (int i : primeFactors) {
        countOfFactors[i]++;
    }
}

void solve() {
    sieve();
    
    int n;
    cin >> n;
    
    vector<int> v(n);
    int gcdIs = 0;
    
    for (int i = 0; i < n; i++) {
        cin >> v[i];
        gcdIs = __gcd(gcdIs, v[i]);
    }
    
    for (int i = 0; i < n; i++) {
        v[i] /= gcdIs;
    }
    
    for (int eleInArray : v) {
        factorize(eleInArray);
    }
    
    int keep = 0;
    
    for (auto i : countOfFactors) {
        keep = max(keep, i.second);
    }
    
    if (keep > 0) {
        cout << n - keep;
    } else {
        cout << "-1";
    }
}

int main() {
    solve();
    return 0;
}