#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <bitset>
using namespace std;

int gcd(int x, int y) {
  return y ? gcd(y, x % y) : x;
}

void solve() {
  int n;
  cin >> n;

  vector<int> v(n);
  int gcdIs = 0;
  for (int i = 0; i < n; i++) {
    cin >> v[i];
    gcdIs = gcd(gcdIs, v[i]);
  }

  for (int i = 0; i < n; i++) {
    v[i] /= gcdIs;
  }

  vector<int> spf(v.size());
  for (int i = 0; i < v.size(); i++) {
    spf[i] = i;
  }

  for (int i = 2; i * i < v.size(); i++) {
    if (spf[i] == i) {
      for (int j = i * i; j < v.size(); j += i) {
        if (spf[j] == j) {
          spf[j] = i;
        }
      }
    }
  }

  map<int, int> countOfFactors;
  for (int i : v) {
    while (i != 1) {
      countOfFactors[spf[i]]++;
      i /= spf[i];
    }
  }

  int keep = 0;
  if (!countOfFactors.empty()) {
    keep = max_element(countOfFactors.begin(), countOfFactors.end(),
                       [](const pair<int, int>& a, const pair<int, int>& b) {
                         return a.second < b.second;
                       })->second;
  }

  keep ? (cout << n - keep) : (cout << "-1");
}

int main() {
  solve();
  return 0;
}