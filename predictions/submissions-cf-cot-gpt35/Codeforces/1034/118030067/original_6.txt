The given program has some unnecessary header includes, macros, and typedefs that are not used. These can be removed to simplify the code. The program also has some unnecessary functions like `isPowOfTwo` and `fill_arr` that are not used. Finally, the program uses a `bitset` to check for prime numbers, but it does not need to check for all numbers up to `maxN`. It can be optimized to only check up to the square root of `maxN`.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <cmath>

using namespace std;

int gcd(int x, int y) {
  return y ? gcd(y, x % y) : x;
}

void solve() {
  int n;
  cin >> n;
  vector<int> v(n);
  int gcdIs = 0;
  for (int i = 0; i < n; i++) {
    cin >> v[i];
    gcdIs = gcd(gcdIs, v[i]);
  }
  for (int i = 0; i < n; i++) {
    v[i] /= gcdIs;
  }
  unordered_map<int, int> countOfFactors;
  for (int eleInArray : v) {
    for (int i = 2; i <= sqrt(eleInArray); i++) {
      while (eleInArray % i == 0) {
        countOfFactors[i]++;
        eleInArray /= i;
      }
    }
    if (eleInArray > 1) {
      countOfFactors[eleInArray]++;
    }
  }
  int keep = 0;
  for (auto i : countOfFactors) {
    keep = max(keep, i.second);
  }
  keep ? (cout << n - keep) : (cout << "-1");
}

int main() {
  solve();
  return 0;
}
```

Explanation of the optimizations:

1. Removed unnecessary header includes, macros, and typedefs to simplify the code.
2. Removed unused functions (`isPowOfTwo`, `fill_arr`) and unnecessary setup functions (`fio`, `setUpLocal`).
3. Changed the `bitset` to a `unordered_map` to count the factors. No need to check all numbers up to `maxN`, only need to check up to the square root of the number.
4. Removed the unnecessary check for prime numbers and factorized each element directly.