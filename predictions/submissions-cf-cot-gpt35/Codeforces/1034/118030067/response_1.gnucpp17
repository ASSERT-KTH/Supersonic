#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <map>
using namespace std;

int gcd(int x, int y) {
    return y ? gcd(y, x % y) : x;
}

const int maxN = 15000007;
bitset<maxN> primes;
int spf[maxN];

void sieve() {
    primes.set();
    primes[0] = primes[1] = 0;
    for (int i = 2; i * i < maxN; i++) {
        if (primes[i]) {
            for (int j = i * i; j < maxN; j += i) {
                primes[j] = 0;
            }
        }
    }
}

void factorize(int n, map<int, int>& countOfFactors) {
    int count = 0;
    while (n % 2 == 0) {
        n /= 2;
        count++;
    }
    if (count > 0) {
        countOfFactors[2] = max(countOfFactors[2], count);
    }
    for (int i = 3; i * i <= n; i += 2) {
        count = 0;
        while (n % i == 0) {
            n /= i;
            count++;
        }
        if (count > 0) {
            countOfFactors[i] = max(countOfFactors[i], count);
        }
    }
    if (n > 1) {
        countOfFactors[n] = max(countOfFactors[n], 1);
    }
}

void solve() {
    sieve();
    int n;
    cin >> n;
    vector<int> v(n);
    int gcdIs = 0;
    for (int i = 0; i < n; i++) {
        cin >> v[i];
        gcdIs = gcd(gcdIs, v[i]);
    }
    for (int i = 0; i < n; i++) {
        v[i] /= gcdIs;
    }
    map<int, int> countOfFactors;
    for (int eleInArray : v) {
        factorize(eleInArray, countOfFactors);
    }
    int keep = 0;
    for (auto i : countOfFactors) {
        keep = max(keep, i.second);
    }
    keep ? (cout << n - keep) : (cout << "-1");
}

int main() {
    solve();
    return 0;
}