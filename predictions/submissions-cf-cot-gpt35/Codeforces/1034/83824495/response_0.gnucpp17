#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>

using namespace std;
using ll = int64_t;

void sieve(vector<int>& lpf, int n) {
  lpf.assign(n+1, 0);
  for (int i = 2; i <= n; i++) {
    if (lpf[i] == 0) {
      for (int j = i; j <= n; j += i) {
        if (lpf[j] == 0)
          lpf[j] = i;
      }
    }
  }
}

int main() {
  int n;
  cin >> n;

  vector<int> arr(n);
  int mcd = 0;
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
    mcd = gcd(mcd, arr[i]);
  }

  mcd = gcd(mcd, mcd);
  for (int i = 0; i < n; i++)
    arr[i] /= mcd;

  vector<int> lpf, cont;
  sieve(lpf, sqrt(arr[0])+1);

  int maxi = 0;
  for (int i = 0; i < n; i++) {
    int num = arr[i];
    while (num > 1) {
      int f = lpf[num];
      cont[f]++;
      maxi = max(maxi, cont[f]);
      while (num % f == 0)
        num /= f;
    }
  }

  if (maxi == 0)
    cout << -1 << '\n';
  else
    cout << n - maxi << '\n';

  return 0;
}