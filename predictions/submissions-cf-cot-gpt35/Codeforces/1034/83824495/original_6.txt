The given program calculates the maximum number of elements that can be removed from an array such that the remaining elements have no common factors. It uses the concept of least prime factors (lpf) and greatest common divisor (gcd).

Here are the steps to optimize the program:

1. Remove unnecessary header files: The program includes `<bits/stdc++.h>` which includes a large number of standard library headers. We can remove this line and only include the necessary headers.

2. Use a more efficient sieve algorithm: The current sieve implementation is not optimal. We can use the optimized sieve of Eratosthenes algorithm to find the least prime factors. This algorithm has a time complexity of O(N log log N), which is better than the current implementation.

3. Use a more efficient data structure for cont array: The cont array is used to count the number of occurrences of each prime factor. Instead of using a regular array of size N, we can use a map or unordered_map to store the counts. This will optimize the memory usage and allow us to only store the factors that are actually present in the array.

4. Optimize the calculation of gcd: The current implementation uses the __gcd function from the algorithm header to calculate the greatest common divisor. We can optimize this calculation by using a more efficient algorithm like Euclidean algorithm.

5. Optimize the loop for calculating prime factors: The inner loop in the program is used to calculate the prime factors of each element in the array. We can optimize this loop by using the pre-calculated least prime factors array instead of calculating it multiple times.

Here is the optimized program:

```cpp
#include <iostream>
#include <algorithm>
#include <vector>
#include <unordered_map>
using namespace std;

const int N = 17000005;
vector<int> lpf(N);
unordered_map<int, int> cont;

void sieve() {
    for (int i = 2; i < N; i++) {
        if (lpf[i] == 0) {
            for (int j = i; j < N; j += i) {
                if (lpf[j] == 0)
                    lpf[j] = i;
            }
        }
    }
}

int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int main() {
    sieve();
    int n;
    cin >> n;
    vector<int> arr(n);
    int mcd = 0;
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
        mcd = gcd(mcd, arr[i]);
    }
    for (int i = 0; i < n; i++)
        arr[i] /= mcd;
    for (int i = 0; i < n; i++) {
        while (arr[i] > 1) {
            int f = lpf[arr[i]];
            cont[f]++;
            while (arr[i] % f == 0)
                arr[i] /= f;
        }
    }
    int maxi = 0;
    for (const auto& p : cont)
        maxi = max(maxi, p.second);
    if (maxi == 0)
        cout << -1 << '\n';
    else
        cout << n - maxi << '\n';
    return 0;
}
```

Explanation of the optimizations:

1. Removed unnecessary header files: Only the necessary header files are included.

2. Optimized sieve algorithm: The optimized sieve of Eratosthenes algorithm is used to find the least prime factors. It reduces the time complexity of the sieve function from O(N^2) to O(N log log N).

3. Used unordered_map for cont array: The cont array is replaced with an unordered_map to optimize the memory usage and only store the prime factors that are actually present in the array.

4. Optimized gcd calculation: The Euclidean algorithm is used to calculate the greatest common divisor, which is more efficient than the __gcd function.

5. Optimized loop for calculating prime factors: The pre-calculated least prime factors array (lpf) is used instead of calculating it multiple times in the loop. This reduces the number of calculations and improves the performance.