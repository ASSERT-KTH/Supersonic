#include <iostream>
#include <algorithm>
#include <cmath>

using namespace std;
using ll = long long;

const int N = 17000005;

int lpf[N];
int cont[N];

void sieve() {
  for (int i = 2; i < N; i++) {
    if (lpf[i] == 0) {
      lpf[i] = i;
      for (ll j = 1LL * i * i; j < N; j += i) {
        if (lpf[j] == 0)
          lpf[j] = i;
      }
    }
  }
}

int main() {
  sieve();
  
  size_t n;
  cin >> n;
  
  int arr[n];
  int mcd = 0;
  
  for (size_t i = 0; i < n; i++) {
    cin >> arr[i];
    mcd = __gcd(mcd, arr[i]);
  }
  
  for (size_t i = 0; i < n; i++)
    arr[i] /= mcd;
  
  for (size_t i = 0; i < n; i++) {
    while (arr[i] > 1) {
      int f = lpf[arr[i]];
      cont[f]++;
      while (arr[i] % f == 0)
        arr[i] /= f;
    }
  }
  
  int* maxElement = max_element(cont, cont + N);
  
  if (*maxElement == 0)
    cout << -1 << '\n';
  else
    cout << n - *maxElement << '\n';
  
  return 0;
}