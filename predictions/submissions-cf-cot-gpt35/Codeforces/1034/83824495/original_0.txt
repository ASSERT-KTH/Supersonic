Here are the steps to optimize the given program:

1. Instead of including the entire `<bits/stdc++.h>` library, we can include only the necessary headers. In this case, we only need `iostream` and `algorithm`.

2. We can replace the `using ll = long long` with `using ll = int64_t` for consistency and standardization.

3. We can remove the unnecessary `#define N 17000005` and replace all instances of `N` with `n` since they represent the same value.

4. Instead of using a fixed-size array for `lpf` and `cont`, we can use `vector` to dynamically allocate memory based on the input size `n`. This will reduce memory usage.

5. We can replace the `__gcd` function with the `gcd` function from the `<algorithm>` header.

6. We don't need to divide the elements of `arr` by `mcd` individually. We can divide `mcd` by itself, and then divide all the elements of `arr` by the resulting `mcd`. This will save unnecessary divisions.

7. Instead of looping over `arr` twice, we can combine the two loops into a single loop. This will reduce the number of iterations.

8. We can optimize the prime factorization by using a more efficient algorithm. Instead of checking every number up to `n`, we can precompute the prime numbers up to `sqrt(n)` using the Sieve of Eratosthenes algorithm. Then, we can use these prime numbers to factorize `arr[i]` directly.

9. We can remove the loop to find the maximum value of `cont[i]` and compute it on-the-fly while factorizing `arr[i]`. This will save unnecessary iterations.

10. Instead of using `cout` multiple times, we can store the result in a variable and print it at the end. This will improve performance.

Here is the optimized code:

```cpp
#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>

using namespace std;
using ll = int64_t;

void sieve(vector<int>& lpf, int n) {
  lpf.assign(n+1, 0);
  for (int i = 2; i <= n; i++) {
    if (lpf[i] == 0) {
      for (int j = i; j <= n; j += i) {
        if (lpf[j] == 0)
          lpf[j] = i;
      }
    }
  }
}

int main() {
  int n;
  cin >> n;

  vector<int> arr(n);
  int mcd = 0;
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
    mcd = gcd(mcd, arr[i]);
  }

  mcd = gcd(mcd, mcd);
  for (int i = 0; i < n; i++)
    arr[i] /= mcd;

  vector<int> lpf, cont;
  sieve(lpf, sqrt(arr[0])+1);

  int maxi = 0;
  for (int i = 0; i < n; i++) {
    int num = arr[i];
    while (num > 1) {
      int f = lpf[num];
      cont[f]++;
      maxi = max(maxi, cont[f]);
      while (num % f == 0)
        num /= f;
    }
  }

  if (maxi == 0)
    cout << -1 << '\n';
  else
    cout << n - maxi << '\n';

  return 0;
}
```