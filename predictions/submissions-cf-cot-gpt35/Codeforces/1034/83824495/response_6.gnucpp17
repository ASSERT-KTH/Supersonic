#include <iostream>
#include <algorithm>
#include <vector>
#include <unordered_map>
using namespace std;

const int N = 17000005;
vector<int> lpf(N);
unordered_map<int, int> cont;

void sieve() {
    for (int i = 2; i < N; i++) {
        if (lpf[i] == 0) {
            for (int j = i; j < N; j += i) {
                if (lpf[j] == 0)
                    lpf[j] = i;
            }
        }
    }
}

int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int main() {
    sieve();
    int n;
    cin >> n;
    vector<int> arr(n);
    int mcd = 0;
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
        mcd = gcd(mcd, arr[i]);
    }
    for (int i = 0; i < n; i++)
        arr[i] /= mcd;
    for (int i = 0; i < n; i++) {
        while (arr[i] > 1) {
            int f = lpf[arr[i]];
            cont[f]++;
            while (arr[i] % f == 0)
                arr[i] /= f;
        }
    }
    int maxi = 0;
    for (const auto& p : cont)
        maxi = max(maxi, p.second);
    if (maxi == 0)
        cout << -1 << '\n';
    else
        cout << n - maxi << '\n';
    return 0;
}