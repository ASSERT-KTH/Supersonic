Step 1: Remove unnecessary include statements
The program includes the `<iostream>` and `<vector>` libraries, but only uses them in the `main()` function. Therefore, we can move the include statements inside the `main()` function to minimize the overhead.

Step 2: Remove unnecessary headers
The program does not use any functions or features from the `<iostream>` library. Therefore, we can remove the include statement for `<iostream>` altogether.

Step 3: Optimize the `answer()` function
The `answer()` function takes a boolean argument and prints "No" or "Yes" based on the value. We can optimize this function by using a single `cout` statement instead of two separate `cout` statements. This will reduce the number of function calls and improve performance.

Step 4: Optimize the `solve()` function
In the `solve()` function, we can optimize the loop by using a range-based for loop instead of an index-based for loop. This will simplify the code and potentially improve performance.

Step 5: Optimize the main loop
In the main loop, we can optimize the loop by using a pre-increment operator instead of a post-increment operator. This can improve performance by avoiding the creation of a temporary object.

Here is the optimized program:

```cpp
void answer(bool v) {
  const char* s = v ? "Yes" : "No";
  std::cout << s << '\n';
}

void solve(const std::vector<std::vector<size_t>>& g) {
  for (const auto& adjacency_list : g) {
    unsigned k = 0;
    for (const size_t x : adjacency_list)
      k += g[x].empty();
    if (k < 3) {
      answer(false);
      return;
    }
  }
  answer(true);
}

int main() {
  std::vector<std::vector<size_t>> g;
  size_t n;
  std::cin >> n;
  g.resize(n);
  for (size_t i = 1; i < n; ++i) {
    unsigned p;
    std::cin >> p;
    g[p - 1].push_back(i);
  }
  solve(g);
  return 0;
}
```