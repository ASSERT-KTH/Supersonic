#include <iostream>
#include <vector>

std::vector<int> parent;
std::vector<int> uselessRoads;
int n, hb, currURoad;

int find_set(int ii) {
  if (ii == parent[ii])
    return ii;
  return parent[ii] = find_set(parent[ii]);
}

void union_sets(int a, int b) {
  int aa = find_set(a);
  int bb = find_set(b);
  parent[bb] = aa;
  if (aa == bb)
    uselessRoads.push_back(bb);
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);
  std::cin >> n;
  parent.reserve(n);
  for (int i = 0; i < n; i++)
    parent.push_back(i);
  for (int i = 1; i < n; i++) {
    int rd1, rd2;
    std::cin >> rd1 >> rd2;
    union_sets(rd1 - 1, rd2 - 1);
  }
  std::cout << uselessRoads.size() << '\n';
  hb = -1;
  for (auto it = parent.begin(); it != parent.end(); ++it) {
    if (*it == std::distance(parent.begin(), it)) {
      if (hb == -1)
        hb = *it;
      else {
        std::cout << uselessRoads[currURoad] + 1 << ' '
                  << uselessRoads[currURoad] + 1 << ' ' << hb + 1 << ' '
                  << *it + 1 << '\n';
        currURoad++;
      }
    }
  }
}