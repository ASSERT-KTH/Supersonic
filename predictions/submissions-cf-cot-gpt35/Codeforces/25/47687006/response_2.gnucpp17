#include <iostream>
#include <vector>
using namespace std;

struct UselessRoad {
  int city1;
  int city2;
};

const int MAX_CITIES = 100000;
int parent[MAX_CITIES];
UselessRoad uselessRoads[MAX_CITIES];
int n, numUselessRoads;

int find_set(int ii) {
  if (ii != parent[ii]) {
    parent[ii] = find_set(parent[ii]);
  }
  return parent[ii];
}

void union_sets(int a, int b) {
  int aa = find_set(a);
  int bb = find_set(b);
  if (aa != bb) {
    parent[bb] = aa;
  } else {
    uselessRoads[numUselessRoads].city1 = a;
    uselessRoads[numUselessRoads].city2 = b;
    numUselessRoads++;
  }
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

#ifdef fileIO
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif

  cin >> n;

  for (int i = 0; i < n; i++) {
    parent[i] = i;
  }

  for (int i = 1; i < n; i++) {
    int rd1, rd2;
    cin >> rd1 >> rd2;
    union_sets(rd1 - 1, rd2 - 1);
  }

  cout << numUselessRoads << '\n';

  int hb = -1;
  for (int i = 0; i < n; i++) {
    if (parent[i] == i) {
      if (hb == -1) {
        hb = i;
      } else {
        cout << uselessRoads[i - 1].city1 + 1 << ' '
             << uselessRoads[i - 1].city2 + 1 << ' ' << hb + 1 << ' '
             << i + 1 << '\n';
      }
    }
  }

  return 0;
}