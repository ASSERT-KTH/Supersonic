#include <iostream>
#include <vector>

std::vector<int> parent;
std::pair<int, int>* uselessRoads;
int n, hb, currURoad;

int find_set(int ii) {
  if (ii != parent[ii])
    parent[ii] = find_set(parent[ii]);
  return parent[ii];
}

void union_sets(int a, int b) {
  int aa = find_set(a);
  int bb = find_set(b);
  if (aa != bb)
    parent[bb] = aa;
  else
    uselessRoads[currURoad++] = {a, b};
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);

#ifdef fileIO
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif

  std::cin >> n;

  parent.resize(n);
  uselessRoads = new std::pair<int, int>[n - 1];

  for (int i = 0; i < n; i++)
    parent[i] = i;

  for (int i = 1; i < n; i++) {
    int rd1, rd2;
    std::cin >> rd1 >> rd2;
    union_sets(rd1 - 1, rd2 - 1);
  }

  std::cout << currURoad << '\n';

  hb = -1;
  for (int i = 0; i < n; i++) {
    if (parent[i] == i) {
      if (hb == -1)
        hb = i;
      else {
        std::cout << uselessRoads[i - 1].first + 1 << ' '
                  << uselessRoads[i - 1].second + 1 << ' ' << hb + 1 << ' '
                  << i + 1 << '\n';
      }
    }
  }

  delete[] uselessRoads;
  return 0;
}