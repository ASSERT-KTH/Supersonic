#include <iostream>
#include <vector>
using namespace std;

const int MAXN = 1000005;
int parent[MAXN];
vector<int> uselessRoads;
int n, currURoad;

int find_set(int ii) {
  if (ii == parent[ii])
    return ii;
  return parent[ii] = find_set(parent[ii]);
}

void union_sets(int a, int b) {
  int aa = find_set(a);
  parent[b] = aa;
  if (aa != b)
    uselessRoads.push_back(a);
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  cin >> n;
  for (int i = 0; i < n; i++)
    parent[i] = i;
  for (int i = 1; i < n; i++) {
    int rd1, rd2;
    cin >> rd1 >> rd2;
    union_sets(rd1 - 1, rd2 - 1);
  }
  cout << uselessRoads.size() << '\n';
  currURoad = 0;
  for (int i = 0; i < n; i++) {
    if (parent[i] == i) {
      int hb = i;
      cout << uselessRoads[currURoad] + 1 << ' ' << i + 1 << ' ' << hb + 1 << ' ' << i + 1 << '\n';
      currURoad++;
    }
  }

  return 0;
}