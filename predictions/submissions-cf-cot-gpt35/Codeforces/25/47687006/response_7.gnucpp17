#include <iostream>
#include <vector>
#include <utility>

int find_set(std::vector<int>& parent, int ii) {
  return parent[ii] = (ii == parent[ii] ? ii : find_set(parent, parent[ii]));
}

void union_sets(std::vector<int>& parent, std::vector<std::pair<int, int>>& uselessRoads, int a, int b) {
  int aa = find_set(parent, a);
  int bb = find_set(parent, b);
  if (aa != bb)
    parent[bb] = aa;
  else
    uselessRoads.push_back({a, b});
}

int main() {
  int n;
  std::cin >> n;

  std::vector<int> parent(n);
  for (int i = 0; i < n; i++)
    parent[i] = i;

  std::vector<std::pair<int, int>> uselessRoads;
  for (int i = 1; i < n; i++) {
    int rd1, rd2;
    std::cin >> rd1 >> rd2;
    union_sets(parent, uselessRoads, rd1 - 1, rd2 - 1);
  }

  std::cout << uselessRoads.size() << '\n';

  int hb = -1;
  for (int i = 0, currURoad = 0; i < n; i++) {
    if (parent[i] == i) {
      if (hb == -1)
        hb = i;
      else {
        std::cout << uselessRoads[currURoad].first + 1 << ' '
                  << uselessRoads[currURoad].second + 1 << ' ' << hb + 1 << ' '
                  << i + 1 << '\n';
        currURoad++;
      }
    }
  }

  return 0;
}