#include <iostream>
#include <vector>
using namespace std;

vector<int> parent;
vector<int> rd1, rd2;

int find_set(int ii) {
  if (ii == parent[ii])
    return ii;
  return parent[ii] = find_set(parent[ii]);
}

void union_sets(int a, int b) {
  int aa = find_set(a);
  int bb = find_set(b);
  if (aa != bb)
    parent[bb] = aa;
  else {
    cout << rd1[a] << ' ' << rd2[a] << ' ' << a + 1 << ' ' << b + 1 << '\n';
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n;
  cin >> n;

  parent.reserve(n);
  rd1.reserve(n);
  rd2.reserve(n);

  for (int i = 0; i < n; i++) {
    parent.push_back(i);
  }

  for (int i = 1; i < n; i++) {
    int road1, road2;
    cin >> road1 >> road2;
    rd1.push_back(road1);
    rd2.push_back(road2);
    union_sets(road1 - 1, road2 - 1);
  }

  return 0;
}