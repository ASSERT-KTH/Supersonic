#include <iostream>
#include <vector>
using namespace std;

vector<int> parent;
vector<pair<int, int>> uselessRoads;
int n, hb, currURoad;

int find_set(int ii) {
  if (ii == parent[ii])
    return ii;
  return parent[ii] = find_set(parent[ii]);
}

void union_sets(int a, int b, vector<pair<int, int>>& ur) {
  int aa = find_set(a);
  int bb = find_set(b);
  if (aa != bb)
    parent[bb] = aa;
  else
    ur.push_back({a, b});
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  cin >> n;
  parent.resize(n);
  vector<pair<int, int>> uselessRoads;
  for (int i = 0; i < n; i++)
    parent[i] = i;
  for (int i = 1; i < n; i++) {
    int rd1, rd2;
    scanf("%d %d", &rd1, &rd2);
    union_sets(rd1 - 1, rd2 - 1, uselessRoads);
  }
  printf("%d\n", (int)uselessRoads.size());

  hb = -1;
  for (int i = 0; i < n; i++)
    if (parent[i] == i)
      if (hb == -1)
        hb = i;
      else {
        printf("%d %d %d %d\n", uselessRoads[currURoad].first + 1,
               uselessRoads[currURoad].second + 1, hb + 1, i + 1);
        currURoad++;
      }

  return 0;
}