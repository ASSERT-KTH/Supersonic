#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
typedef long long ll;

ll root(ll v, vector<ll>& par) { return par[v] < 0 ? v : (par[v] = root(par[v], par)); }

void merge(ll x, ll y, ll& ans, vector<ll>& sum, vector<ll>& par) {
  if ((x = root(x, par)) == (y = root(y, par)))
    return;
  ans = max(ans, sum[x] + sum[y]);
  if (par[y] < par[x])
    swap(x, y);
  par[x] += par[y];
  par[y] = x;
  sum[x] += sum[y];
}

void run() {
  int n;
  cin >> n;
  vector<ll> a(n+1, 0), q(n+1, 0), sum(n+1, 0), fk(n+1, 0), vis(n+1, 0), par(n+1, -1);
  ll ans = 0;
  for (ll i = 1; i <= n; i++) cin >> a[i], sum[i] = a[i];
  for (ll i = 1; i <= n; i++) cin >> q[i];
  for (int i = n; i >= 1; --i) {
    fk[i] = ans;
    vis[q[i]] = 1;
    ans = max(ans, a[q[i]]);
    if (q[i] - 1 >= 0 && vis[q[i] - 1])
      merge(q[i], q[i] - 1, ans, sum, par);
    if (q[i] + 1 <= n && vis[q[i] + 1])
      merge(q[i], q[i] + 1, ans, sum, par);
  }
  for (ll i = 1; i <= n; i++) cout << fk[i] << endl;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  run();
  return 0;
}