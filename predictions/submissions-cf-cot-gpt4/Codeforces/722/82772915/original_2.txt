There are several things that can be done to optimize this code:

1. **Avoid unnecessary computation:** The function `power` is performing repeated multiplication. By using a library function, we can reduce the computation time significantly. The same thing applies to the `gcd` function which can be replaced with the built-in function `__gcd`.

2. **Avoid unnecessary memory allocation:** `a[N]`, `vis[N]`, `sum[N]`, `fk[N]`, `q[N]`, `siz[N]`, `par[N]` are all arrays of size N = 5*10^5 + 7. This is a huge memory allocation. If not all elements are required, consider using a vector and allocating only necessary space.

3. **Avoid unnecessary string initialization:** `alpha` string is defined but not used in the code. If it's not necessary, remove it to save memory.

4. **Avoid unnecessary typedef:** The typedef's `vpii` and `vll` are defined but not used. If they are not necessary, removing them would be a good idea.

5. **Avoid unnecessary functions:** The function `prec` is declared and called but does nothing. Remove it.

Here is the optimized code:
```cpp
#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define endl "\n"
#define N 5e5 + 7
#define MOD 1000000007

ll power(ll x, ll y) {
  return pow(x, y);
}

ll ncr(ll n, ll r) {
  ll res = 1;
  if (r > n)
    return 0;
  if (r > n - r)
    r = n - r;
  for (ll i = 0; i < r; i++) {
    res *= (n - i);
    res /= (i + 1);
  }
  return res;
}

ll ans, a[N], vis[N], sum[N], fk[N], q[N];
ll par[N];

int root(int v) { return par[v] < 0 ? v : (par[v] = root(par[v])); }

void merge(int x, int y) {
  if ((x = root(x)) == (y = root(y)))
    return;
  ans = max(ans, sum[x] + sum[y]);
  if (par[y] < par[x])
    swap(x, y);
  par[x] += par[y];
  par[y] = x;
  sum[x] += sum[y];
}

void run() {
  int n;
  cin >> n;
  memset(a, 0, sizeof(a));
  for (ll i = 1; i <= n; ++i) cin >> a[i], sum[i] = a[i];
  for (ll i = 1; i <= n; ++i) par[i] = -1;
  memset(q, 0, sizeof(q));
  for (ll i = 1; i <= n; ++i) cin >> q[i];
  for (int i = n; i >= 1; --i) {
    fk[i] = ans;
    vis[q[i]] = 1;
    ans = max(ans, a[q[i]]);
    if (vis[q[i] - 1])
      merge(q[i], q[i] - 1);
    if (vis[q[i] + 1])
      merge(q[i], q[i] + 1);
  }
  for (ll i = 1; i <= n; ++i) cout << fk[i] << endl;
}

int main() {
  cin.sync_with_stdio(0);
  cin.tie(0);
  cin.exceptions(cin.failbit);
  int tc = 1;
  for (ll i = 0; i < tc; ++i) run();
  return 0;
}
```
Note that above optimizations are based on the given code. There might be other optimizations possible depending on the context of the problem the code is trying to solve.