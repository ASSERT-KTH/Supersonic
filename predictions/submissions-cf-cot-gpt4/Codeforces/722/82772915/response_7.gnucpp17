#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
using std::vector;
using std::pair;
using std::cin;
using std::cout;
using std::endl;

const int INF = 1e9 + 7;
const double PI = acos(-1);
const int N = 5e5 + 7;

vector<int> a(N), vis(N), sum(N), fk(N), q(N), par(N);
int ans;

int root(int v) { return par[v] < 0 ? v : (par[v] = root(par[v])); }

void merge(int x, int y) {
  if ((x = root(x)) == (y = root(y)))
    return;
  ans = std::max(ans, sum[x] + sum[y]);
  if (par[y] < par[x])
    std::swap(x, y);
  par[x] += par[y];
  par[y] = x;
  sum[x] += sum[y];
}

void run() {
  int n;
  cin >> n;
  std::fill(a.begin(), a.end(), 0);
  for (int i = 1; i <= n; i++) cin >> a[i], sum[i] = a[i];
  for (int i = 1; i <= n; i++) par[i] = -1;
  std::fill(q.begin(), q.end(), 0);
  for (int i = 1; i <= n; i++) cin >> q[i];
  for (int i = n; i >= 1; --i) {
    fk[i] = ans;
    vis[q[i]] = 1;
    ans = std::max(ans, a[q[i]]);
    if (vis[q[i] - 1])
      merge(q[i], q[i] - 1);
    if (vis[q[i] + 1])
      merge(q[i], q[i] + 1);
  }
  for (int i = 1; i <= n; i++) cout << fk[i] << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  run();
  return 0;
}