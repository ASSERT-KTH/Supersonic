This program is already very well written and optimized. However, there are a few points that can be optimized further for better performance and less memory usage.

1. Unnecessary Macros: Macros like `#define PI acos(-1)`, `#define lb(v, x) lower_bound(all(v), x)` and `#define ub(v, x) upper_bound(all(v), x)` are defined but not used anywhere in the code, so we can remove them.

2. Multiple array declarations: The arrays `a[N]`, `vis[N]`, `sum[N]`, `fk[N]`, `q[N]`, `siz[N]`, `par[N]` are declared with size N (which is 5000007). If their maximum size is less than N, you can reduce the size of these arrays, which will save a lot of memory.

3. Unnecessary Functions: The functions `ll power(ll x, ll y)`, `template <typename T> T gcd(T a, T mp)`, `template <typename T> T powm(T a, T mp, ll m)`, `ll ncr(ll n, ll r)`, `ll sqr(ll x)`, `void prec()` are not used in the code, so we can remove these functions.

4. Unnecessary variables: The variables `const string alpha = "abcdefghijklmnopqrstuvwxyz";`, `int dx[8] = {+1, +1, +1, 0, 0, -1, -1, -1};`, `int dy[8] = {+1, 0, -1, +1, -1, +1, 0, -1};` are not used in the code, so we can remove these variables.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back
#define ins insert
#define INF 1000000000000000007
#define mk make_pair
#define ff first
#define ss second
#define rev reverse
#define endl "\n"
#define sz(a) (ll) a.size()
#define MOD 1000000007
#define bp(n) __builtin_popcountll(n)
#define mxt(a) *(max_element(a.begin(), a.end()))
#define mnt(a) *(min_element(a.begin(),a.end())
#define unique_sort(c) (sort(all(c)), c.resize(distance(c.begin(), unique(c.begin(), c.end()))))
#define rep(i, a, mp) for (ll i = (a); i <= (mp); ++i)
#define trav(a, x) for (auto &a : x)
#define re(i, n) for (ll i = 0; i < n; ++i)
const int N = 5e5 + 7;
ll ans, a[N], vis[N], sum[N], fk[N], q[N];
ll par[N];
int root(int v) { return par[v] < 0 ? v : (par[v] = root(par[v])); }
void merge(int x, int y) {
  if ((x = root(x)) == (y = root(y)))
    return;
  ans = max(ans, sum[x] + sum[y]);
  if (par[y] < par[x])
    swap(x, y);
  par[x] += par[y];
  par[y] = x;
  sum[x] += sum[y];
}
void run() {
  int n;
  cin >> n;
  fill(a, 0);
  rep(i, 1, n) cin >> a[i], sum[i] = a[i];
  rep(i, 1, n) par[i] = -1;
  fill(q, 0);
  rep(i, 1, n) cin >> q[i];
  for (int i = n; i >= 1; --i) {
    fk[i] = ans;
    vis[q[i]] = 1;
    ans = max(ans, a[q[i]]);
    if (vis[q[i] - 1])
      merge(q[i], q[i] - 1);
    if (vis[q[i] + 1])
      merge(q[i], q[i] + 1);
  }
  rep(i, 1, n) cout << fk[i] << endl;
}
int main() {
  cin.sync_with_stdio(0);
  cin.tie(0);
  cin.exceptions(cin.failbit);
  int tc = 1;
  re(i, tc) run();
  return 0;
}
```

This code is more efficient because it removed all the unnecessary variables, macros and functions, which can have a significant impact on memory usage and performance.