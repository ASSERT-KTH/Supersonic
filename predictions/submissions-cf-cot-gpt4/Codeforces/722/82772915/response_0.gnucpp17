#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back
#define ins insert
#define INF 1000000000000000007
#define mk make_pair
#define ff first
#define ss second
#define rev reverse
#define endl "\n"
#define sz(a) (ll) a.size()
#define MOD 1000000007
#define bp(n) __builtin_popcountll(n)
#define mxt(a) *(max_element(a.begin(), a.end()))
#define mnt(a) *(min_element(a.begin(),a.end())
#define unique_sort(c) (sort(all(c)), c.resize(distance(c.begin(), unique(c.begin(), c.end()))))
#define rep(i, a, mp) for (ll i = (a); i <= (mp); ++i)
#define trav(a, x) for (auto &a : x)
#define re(i, n) for (ll i = 0; i < n; ++i)
const int N = 5e5 + 7;
ll ans, a[N], vis[N], sum[N], fk[N], q[N];
ll par[N];
int root(int v) { return par[v] < 0 ? v : (par[v] = root(par[v])); }
void merge(int x, int y) {
  if ((x = root(x)) == (y = root(y)))
    return;
  ans = max(ans, sum[x] + sum[y]);
  if (par[y] < par[x])
    swap(x, y);
  par[x] += par[y];
  par[y] = x;
  sum[x] += sum[y];
}
void run() {
  int n;
  cin >> n;
  fill(a, 0);
  rep(i, 1, n) cin >> a[i], sum[i] = a[i];
  rep(i, 1, n) par[i] = -1;
  fill(q, 0);
  rep(i, 1, n) cin >> q[i];
  for (int i = n; i >= 1; --i) {
    fk[i] = ans;
    vis[q[i]] = 1;
    ans = max(ans, a[q[i]]);
    if (vis[q[i] - 1])
      merge(q[i], q[i] - 1);
    if (vis[q[i] + 1])
      merge(q[i], q[i] + 1);
  }
  rep(i, 1, n) cout << fk[i] << endl;
}
int main() {
  cin.sync_with_stdio(0);
  cin.tie(0);
  cin.exceptions(cin.failbit);
  int tc = 1;
  re(i, tc) run();
  return 0;
}