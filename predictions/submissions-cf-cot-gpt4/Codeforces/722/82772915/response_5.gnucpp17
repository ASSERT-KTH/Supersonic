#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

typedef long long ll;

const int N = 5e5 + 7;
ll a[N], vis[N], sum[N], fk[N], q[N];
ll par[N];

int root(int v) { return par[v] < 0 ? v : (par[v] = root(par[v])); }

void merge(int x, int y) {
  if ((x = root(x)) == (y = root(y)))
    return;
  sum[x] = max(sum[x], sum[x] + sum[y]);
  if (par[y] < par[x])
    swap(x, y);
  par[x] += par[y];
  par[y] = x;
  sum[x] += sum[y];
}

void run() {
  int n;
  cin >> n;
  fill(a, a+n+1, 0);
  for(int i = 1; i <= n; ++i) {
    cin >> a[i];
    sum[i] = a[i];
    par[i] = -1;
  }
  fill(q, q+n+1, 0);
  for(int i = 1; i <= n; ++i) cin >> q[i];
  ll ans = 0;
  for (int i = n; i >= 1; --i) {
    fk[i] = ans;
    vis[q[i]] = 1;
    ans = max(ans, a[q[i]]);
    if (vis[q[i] - 1])
      merge(q[i], q[i] - 1);
    if (vis[q[i] + 1])
      merge(q[i], q[i] + 1);
  }
  for(int i = 1; i <= n; ++i) cout << fk[i] << endl;
}

int main() {
  ios::sync_with_stdio(false);
  int tc = 1;
  while(tc--) run();
  return 0;
}