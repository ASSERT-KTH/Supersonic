#include <iostream>
#include <algorithm>
#include <cmath>
#include <vector>
#include <numeric>
#include <queue>

using namespace std;
using ll = long long;
using pii = pair<ll, ll>;
using vpii = vector<pii>;
using vll = vector<ll>;

const int N = 5e5 + 7;
const ll INF = 1e18;
const ll MOD = 1e9 + 7;
const double PI = acos(-1);
const double EPS = 1e-7;

ll power(ll x, ll y) {
    return pow(x, y);
}

ll ncr(ll n, ll r) {
    return boost::math::binomial_coefficient<double>(n, r);
}

int root(vector<int>& par, int v) { 
    return par[v] < 0 ? v : (par[v] = root(par, par[v])); 
}

void merge(vector<int>& par, vector<ll>& sum, ll& ans, int x, int y) {
    if((x = root(par, x)) == (y = root(par, y))) 
        return;
    ans = max(ans, sum[x] + sum[y]);
    if(par[y] < par[x])
        swap(x, y);
    par[x] += par[y];
    par[y] = x;
    sum[x] += sum[y];
}

void run() {
    int n;
    cin >> n;
    vector<ll> a(n+1, 0), sum(n+1, 0), fk(n+1, 0), q(n+1, 0);
    vector<int> par(n+1, -1);
    vector<bool> vis(n+1, false);
    for(int i = 1; i <= n; ++i) {
        cin >> a[i];
        sum[i] = a[i];
    }
    for(int i = 1; i <= n; ++i) 
        cin >> q[i];
    ll ans = 0;
    for(int i = n; i >= 1; --i) {
        fk[i] = ans;
        vis[q[i]] = 1;
        ans = max(ans, a[q[i]]);
        if(q[i] - 1 >= 1 && vis[q[i] - 1])
            merge(par, sum, ans, q[i], q[i] - 1);
        if(q[i] + 1 <= n && vis[q[i] + 1])
            merge(par, sum, ans, q[i], q[i] + 1);
    }
    for(int i = 1; i <= n; ++i) 
        cout << fk[i] << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int tc = 1;
    while(tc--) 
        run();
    return 0;
}