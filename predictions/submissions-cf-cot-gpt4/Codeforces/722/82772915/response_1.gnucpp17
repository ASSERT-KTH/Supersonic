#include <iostream>
#include <vector>
#include <algorithm>

typedef long long ll;
typedef std::pair<ll, ll> pii;
typedef std::vector<pii> vpii;
typedef std::vector<ll> vll;

const int N = 5e5 + 7;

ll a[N], vis[N], sum[N], ans, q[N], par[N];

int root(int v) { return par[v] < 0 ? v : (par[v] = root(par[v])); }

void merge(int x, int y) {
  if ((x = root(x)) == (y = root(y)))
    return;
  ans = std::max(ans, sum[x] + sum[y]);
  if (par[y] < par[x])
    std::swap(x, y);
  par[x] += par[y];
  par[y] = x;
  sum[x] += sum[y];
}

void run() {
  int n;
  std::cin >> n;
  std::fill(a, a + n + 1, 0);
  for(int i = 1; i <= n; i++) {
    std::cin >> a[i];
    sum[i] = a[i];
    par[i] = -1;
  }
  std::fill(q, q + n + 1, 0);
  for(int i = 1; i <= n; i++) {
    std::cin >> q[i];
  }
  vll fk(n+1, 0);
  for (int i = n; i >= 1; --i) {
    fk[i] = ans;
    vis[q[i]] = 1;
    ans = std::max(ans, a[q[i]]);
    if (vis[q[i] - 1])
      merge(q[i], q[i] - 1);
    if (vis[q[i] + 1])
      merge(q[i], q[i] + 1);
  }
  for(int i = 1; i <= n; i++) {
    std::cout << fk[i] << std::endl;
  }
}

int main() {
  int tc = 1;
  for(int i = 0; i < tc; i++) {
    run();
  }
  return 0;
}