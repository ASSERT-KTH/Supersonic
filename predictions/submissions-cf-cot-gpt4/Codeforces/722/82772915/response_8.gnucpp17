#include <iostream>
#include <vector>
using namespace std;
const int N = 5e5 + 7;
long long ans, a[N], sum[N], previous_max[N], par[N];
bool vis[N];

int root(int v) { 
    return par[v] < 0 ? v : (par[v] = root(par[v])); 
}

void merge(int x, int y) {
  if ((x = root(x)) == (y = root(y)))
    return;
  ans = max(ans, sum[x] + sum[y]);
  if (par[y] < par[x])
    swap(x, y);
  par[x] += par[y];
  par[y] = x;
  sum[x] += sum[y];
}

void run() {
  int n;
  cin >> n;
  fill(a, a+n+1, 0);
  for (int i = 1; i <= n; ++i) {
    cin >> a[i];
    sum[i] = a[i];
    par[i] = -1;
  }
  vector<int> q(n+1);
  for (int i = 1; i <= n; ++i)
    cin >> q[i];
  for (int i = n; i >= 1; --i) {
    previous_max[i] = ans;
    vis[q[i]] = 1;
    ans = max(ans, a[q[i]]);
    if (vis[q[i] - 1])
      merge(q[i], q[i] - 1);
    if (vis[q[i] + 1])
      merge(q[i], q[i] + 1);
  }
  for (int i = 1; i <= n; ++i)
    cout << previous_max[i] << endl;
}

int main() {
  cin.sync_with_stdio(0);
  cin.tie(0);
  int tc = 1;
  while(tc--) run();
  return 0;
}