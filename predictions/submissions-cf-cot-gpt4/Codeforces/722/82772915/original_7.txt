The given C++ code is highly optimized already, but there are still a few things that can be done to optimize the code further.

1. Avoid Using Bits/stdc++.h: This header file includes most of the standard library in C++. However, it's generally not recommended because it includes more than you need, slowing down the compile time. You should include only the libraries that you need.

2. Avoid Using #define: Instead of using #define to create constants, use const or constexpr which are type safe.

3. Avoid using 'using namespace std': It's better to use std:: before using any function or object from the standard library to avoid any possible naming conflicts.

4. Use 'ios_base::sync_with_stdio(false)' and 'cin.tie(NULL)': These lines of code make input and output more efficient. They basically tell the C++ compiler not to synchronize C++ standard streams with C streams and untie cin from cout.

5. Avoid Using Long Long for Small Numbers: In your code, you are using 'long long' type for all the integers which is not good because long long takes more memory than int. Use 'int' for small numbers.

Now, I will apply these optimizations to your code:

```cpp
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
using std::vector;
using std::pair;
using std::cin;
using std::cout;
using std::endl;

const int INF = 1e9 + 7;
const double PI = acos(-1);
const int N = 5e5 + 7;

vector<int> a(N), vis(N), sum(N), fk(N), q(N), par(N);
int ans;

int root(int v) { return par[v] < 0 ? v : (par[v] = root(par[v])); }

void merge(int x, int y) {
  if ((x = root(x)) == (y = root(y)))
    return;
  ans = std::max(ans, sum[x] + sum[y]);
  if (par[y] < par[x])
    std::swap(x, y);
  par[x] += par[y];
  par[y] = x;
  sum[x] += sum[y];
}

void run() {
  int n;
  cin >> n;
  std::fill(a.begin(), a.end(), 0);
  for (int i = 1; i <= n; i++) cin >> a[i], sum[i] = a[i];
  for (int i = 1; i <= n; i++) par[i] = -1;
  std::fill(q.begin(), q.end(), 0);
  for (int i = 1; i <= n; i++) cin >> q[i];
  for (int i = n; i >= 1; --i) {
    fk[i] = ans;
    vis[q[i]] = 1;
    ans = std::max(ans, a[q[i]]);
    if (vis[q[i] - 1])
      merge(q[i], q[i] - 1);
    if (vis[q[i] + 1])
      merge(q[i], q[i] + 1);
  }
  for (int i = 1; i <= n; i++) cout << fk[i] << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  run();
  return 0;
}
```
In this optimized code, we removed unnecessary includes and #define directives, and replaced them with the standard C++ alternatives. We also optimized the I/O operations and replaced 'long long' with 'int' where possible.