There are several minor improvements that can be made to the code to increase its performance and reduce memory usage:

1. Remove unused declarations: The code contains a number of unused variable declarations, macros, and function declarations (like `PI`, `pb`, `ins`, `INF`, `mk`...). Removing these will help reduce the memory footprint of the program.

2. Avoid using `#include <bits/stdc++.h>`: This header file includes a lot of unnecessary libraries, which increases compile time. It's better to include only the libraries that are actually used in the program.

3. Use `std::ios::sync_with_stdio(false);` instead of `cin.sync_with_stdio(0);`: This can speed up I/O operations.

4. Avoid using `cin.tie(0);` and `cin.exceptions(cin.failbit);`: These lines are usually not necessary and removing them can improve performance.

5. Avoid using `memset` for arrays of non-char types: The behavior of `memset` is undefined for non-char types. It's better to use a loop or `std::fill` to initialize such arrays.

6. Remove the `prec()` function call: The `prec()` function is declared but not defined in the given code. Removing it can help reduce the memory usage.

7. Use `std::max` and `std::min` instead of custom functions: The standard library functions `std::max` and `std::min` are usually more efficient than custom implementations.

Here's how your optimized program might look:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

typedef long long ll;

const int N = 5e5 + 7;
ll a[N], vis[N], sum[N], fk[N], q[N];
ll par[N];

int root(int v) { return par[v] < 0 ? v : (par[v] = root(par[v])); }

void merge(int x, int y) {
  if ((x = root(x)) == (y = root(y)))
    return;
  sum[x] = max(sum[x], sum[x] + sum[y]);
  if (par[y] < par[x])
    swap(x, y);
  par[x] += par[y];
  par[y] = x;
  sum[x] += sum[y];
}

void run() {
  int n;
  cin >> n;
  fill(a, a+n+1, 0);
  for(int i = 1; i <= n; ++i) {
    cin >> a[i];
    sum[i] = a[i];
    par[i] = -1;
  }
  fill(q, q+n+1, 0);
  for(int i = 1; i <= n; ++i) cin >> q[i];
  ll ans = 0;
  for (int i = n; i >= 1; --i) {
    fk[i] = ans;
    vis[q[i]] = 1;
    ans = max(ans, a[q[i]]);
    if (vis[q[i] - 1])
      merge(q[i], q[i] - 1);
    if (vis[q[i] + 1])
      merge(q[i], q[i] + 1);
  }
  for(int i = 1; i <= n; ++i) cout << fk[i] << endl;
}

int main() {
  ios::sync_with_stdio(false);
  int tc = 1;
  while(tc--) run();
  return 0;
}
```