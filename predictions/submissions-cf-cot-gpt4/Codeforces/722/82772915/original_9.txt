Optimizations:
1. Remove unnecessary macros and typedefs. The code has a lot of macros and typedefs that are not used at all. Removing these will reduce the size of the code, making it run faster.
2. Use `ios_base::sync_with_stdio(false);` instead of `cin.sync_with_stdio(0);`. This will unhitch the C++ streams from their corresponding C streams. It also makes `cin` and `cout` faster.
3. Use `cin.tie(NULL);` instead of `cin.tie(0);`. This will untie `cin` and `cout`, which are tied by default. Untying them can potentially improve the performance.
4. Replace the `memset` function with a simple loop for initialization. Although `memset` is faster, it is not safe for all data types and might cause bugs.
5. Use `std::ios::sync_with_stdio(false);` and `std::cin.tie(NULL);` outside the main function. These two statements are generally used to speed up input and output in C++, but they are not necessary in this case.

Optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back
#define ff first
#define ss second
#define MOD 1000000007
#define rep(i, a, mp) for (ll i = (a); i <= (mp); ++i)
const int N = 5e5 + 7;

ll power(ll x, ll y) {
  ll res = 1;
  x = x;
  while (y > 0) {
    if (y & 1)
      res = (res * x);
    y = y >> 1;
    x = (x * x);
  }
  return res;
}

ll ans, a[N], vis[N], sum[N], fk[N], q[N];
ll par[N];

int root(int v) { return par[v] < 0 ? v : (par[v] = root(par[v])); }

void merge(int x, int y) {
  if ((x = root(x)) == (y = root(y)))
    return;
  ans = max(ans, sum[x] + sum[y]);
  if (par[y] < par[x])
    swap(x, y);
  par[x] += par[y];
  par[y] = x;
  sum[x] += sum[y];
}

void run() {
  int n;
  cin >> n;
  for(int i=0; i<=n; i++) { a[i] = 0; q[i] = 0; }  
  rep(i, 1, n) cin >> a[i], sum[i] = a[i];
  rep(i, 1, n) par[i] = -1;
  rep(i, 1, n) cin >> q[i];
  for (int i = n; i >= 1; --i) {
    fk[i] = ans;
    vis[q[i]] = 1;
    ans = max(ans, a[q[i]]);
    if (vis[q[i] - 1])
      merge(q[i], q[i] - 1);
    if (vis[q[i] + 1])
      merge(q[i], q[i] + 1);
  }
  rep(i, 1, n) cout << fk[i] << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int tc = 1;
  for(int i=0; i<tc; i++) run();
  return 0;
}
```