Optimization Steps:

1. Include only the necessary headers: `#include <bits/stdc++.h>` is a convenience header file that includes all standard library headers. But it's not efficient since it includes a lot of unnecessary stuff and can slow down the compilation process. We will replace this with the specific headers we need.

2. Avoid using Variable Length Arrays (VLA): In your code, the array `arr` is a VLA because its size `n` is not known at compile time. Although VLAs are supported in some compilers, they are not part of the C++ standard and can lead to unpredictable behavior and stack overflow for large sizes. We will replace this with an `std::vector<int>` which can be resized at runtime and carries less risk of stack overflow.

3. Avoid type conversions: In your code, `min` is a `double` but you are comparing and assigning it with `int` values. This can lead to unnecessary type conversions. We will change `min` and `ans` to `long long int` to match the type of the array elements and sum.

4. Use `std::max` instead of `if` statement: The `if` statement for checking and updating `min` can be replaced with the `std::max` function which is more concise and may be optimized better by the compiler.

5. Use `+=` operator: The line `sum = sum + arr[i];` can be replaced with `sum += arr[i];` which is more concise and can potentially be optimized better by the compiler.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <iomanip>
using namespace std;

int main() {
  int test;
  cin >> test;
  while (test--) {
    int n;
    cin >> n;
    vector<int> arr(n);
    long long int sum = 0;
    long long int min = INT_MIN;
    for (int i = 0; i < n; i++) {
      cin >> arr[i];
      min = max(min, arr[i]);
      sum += arr[i];
    }
    if (n > 1) {
      double ans = double((sum - min) / (n - 1)) + min;
      cout << fixed << setprecision(8) << ans << endl;
    }
  }
  return 0;
}
```