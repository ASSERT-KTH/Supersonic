Step 1: Avoid using `#include<bits/stdc++.h>` as it includes a lot of unnecessary libraries which increases compile time. Instead, include only those headers which are used in the program.

Step 2: Using Variable-Length Array (VLA) is not recommended as it is not a standard C++ feature and can lead to stack overflow for large inputs. Instead, use `std::vector` which is dynamically allocated.

Step 3: We can accumulate the sum of numbers using `std::accumulate` from `<numeric>` header which can be more efficient and concise.

Step 4: Instead of calculating the maximum element in the array manually in the loop, we can use `std::max_element` from `<algorithm>` header. 

Step 5: We do not need to check if `n > 1` because if `n==1`, the result will be the number itself as the sum of the elements in the array minus the maximum element divided by `n-1` will result in 0.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <iomanip>

using namespace std;

int main() {
  int test;
  cin >> test;
  while (test--) {
    int n;
    cin >> n;
    vector<int> arr(n);
    for (int i = 0; i < n; i++) {
      cin >> arr[i];
    }
    long long sum = accumulate(arr.begin(), arr.end(), 0LL);
    int max_el = *max_element(arr.begin(), arr.end());
    double ans = double((sum - max_el) / (n - 1)) + max_el;
    cout << setprecision(8) << ans << "\n";
  }
  return 0;
}
```

This optimized code reduces the number of header files included, uses standard C++ features, and uses standard library functions for calculations which can be more efficient.