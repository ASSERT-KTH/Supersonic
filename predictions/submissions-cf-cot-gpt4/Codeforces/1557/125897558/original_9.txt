Here are the optimization steps:

1. Change `#include <bits/stdc++.h>` to specific libraries which are required in the code. It's a bad practice to include `bits/stdc++.h` which includes all the standard library headers. It increases the compilation time and memory usage. In your case, you only need `iostream`, `iomanip` and `climits`.

2. Use `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(NULL);` to make `cin` and `cout` faster.

3. Use `std::vector<int>` instead of C-style array, because the size of C-style arrays needs to be known at compile time. Dynamic allocation for arrays can cause performance issues and is not recommended.

4. Use `std::max` to find the maximum element in the array. It's more readable and consistent.

5. We can use `std::accumulate` from `<numeric>` to calculate the sum of elements in the array. It's more idiomatic and faster.

6. It's not necessary to calculate `ans` if `n <= 1`. We can check this condition at the beginning of the loop and continue to the next iteration if `n <= 1`.

Here's the optimized code:

```cpp
#include <iostream>
#include <iomanip>
#include <climits>
#include <vector>
#include <algorithm>
#include <numeric>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  
  int test;
  std::cin >> test;
  
  while (test--) {
    int n;
    std::cin >> n;
    
    if (n <= 1) {
        continue;
    }

    std::vector<int> arr(n);
    for (int i = 0; i < n; i++) {
      std::cin >> arr[i];
    }

    long long int sum = std::accumulate(arr.begin(), arr.end(), 0LL);
    double max_val = *std::max_element(arr.begin(), arr.end());
    double ans = double((sum - max_val) / (n - 1)) + max_val;
    
    std::cout << std::setprecision(8) << ans << "\n";
  }
  
  return 0;
}
```

This code should have similar functionality to your original code, but it's more optimized in terms of running time and memory usage.