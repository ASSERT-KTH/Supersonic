The given program takes a number of test cases as input and for each test case, it takes an array size and the elements of the array. It calculates and prints the sum of the array elements excluding the maximum element divided by n-1 plus the maximum element for each test. The output is printed with a precision of 8 decimal places.

Here are the main optimizations to be made:

1. Instead of using `#include <bits/stdc++.h>`, include only the necessary headers. This is because `bits/stdc++.h` includes a lot of unnecessary headers which increases the compilation time.
2. The use of variable length arrays (VLA) is not a good practice because it may lead to stack overflows. Instead, you can use a dynamic array or a vector for this purpose.
3. You are finding the maximum element and the sum of the array in the same loop. This can be done using the `max_element` and `accumulate` function from the STL in a more efficient way.
4. The check for `n > 1` is unnecessary as the formula is also valid for `n = 1`. You can remove this check.
5. Instead of using `std::endl` to print a newline, you can use `'\n'`. `std::endl` causes the output buffer to flush, which can result in a significant performance loss.

Now, let's apply these optimizations to the code.

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <iomanip>
using namespace std;

int main() {
    int test;
    cin >> test;
    while (test--) {
        int n;
        cin >> n;
        vector<int> arr(n);
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        long long sum = accumulate(arr.begin(), arr.end(), 0LL);
        double mx = *max_element(arr.begin(), arr.end());
        double ans = double(sum - mx) / (n - 1) + mx;
        cout << setprecision(8) << ans << '\n';
    }
    return 0;
}
```
This optimized code should run faster and use less memory than the original code.