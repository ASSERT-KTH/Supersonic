This program reads a series of test cases from an input stream. Each test case contains a number of integers, and the program calculates a certain formula for each test case. Here are some optimization steps:

1. Avoid using `#include <bits/stdc++.h>`: This header file includes too many libraries which increases the compilation time. We will replace it with the specific libraries that we need.

2. Avoid using dynamic sized array in C++: In C++, the size of an array is a constant expression, and it cannot be a variable. Here, it's better to use `std::vector`.

3. Avoid using `std::endl`: `std::endl` not only adds a newline character, but also flushes the output buffer, which can create unnecessary overhead. We will substitute it with '\n'.

4. Use prefix increment (`++i`) instead of postfix (`i++`): In C++, prefix increment is generally more efficient than postfix increment.

5. Avoid using `using namespace std`: It's a bad practice to use `using namespace std` in C++. We will use `std` directly.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <iomanip>
#include <climits>

int main() {
  int test;
  std::cin >> test;
  while (test--) {
    int n;
    std::cin >> n;
    std::vector<int> arr(n);
    long long int sum = 0;
    double min = INT_MIN;
    for (int i = 0; i < n; ++i) {
      std::cin >> arr[i];
      if (arr[i] > min)
        min = arr[i];
      sum += arr[i];
    }
    if (n > 1) {
      double ans = double((sum - min) / (n - 1)) + min;
      std::cout << std::setprecision(8) << ans << '\n';
    }
  }
  return 0;
}
```
Please note that in C++, the size of an array is a constant expression, which means it cannot be a variable. You can use a pointer and allocate memory dynamically or you can use a STL container like `std::vector` or `std::array` where you can specify the size at runtime.