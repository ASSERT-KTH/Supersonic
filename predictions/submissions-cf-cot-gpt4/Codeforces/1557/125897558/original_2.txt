Optimization Steps:

1. Replace `#include <bits/stdc++.h>` with individual includes. `<bits/stdc++.h>` includes a lot of unnecessary libraries, which can increase the compile time.

2. Use a constant for array size if possible. Dynamically sized arrays can be slower and use more memory. If the maximum size of 'n' is known, it would be better to declare an array of that size.

3. Instead of calculating the sum and maximum value in two separate loops, you can calculate them in one loop.

4. 'min' is not an appropriate variable name here because it's actually storing the maximum value. Rename it to 'max'.

5. The variables 'sum' and 'max' can be initialized while declaring them.

Now, let's implement these optimizations:

```cpp
#include <iostream>
#include <iomanip>
using namespace std;

const int MAX_ARR_SIZE = 100000; // Replace this with the maximum possible value for 'n'

int main() {
    int test;
    cin >> test;
    while(test--) {
        int n;
        cin >> n;
        int arr[MAX_ARR_SIZE];
        long long sum = 0;
        double max = INT_MIN;
        for(int i = 0; i < n; i++) {
            cin >> arr[i];
            sum += arr[i];
            if(arr[i] > max)
                max = arr[i];
        }
        if(n > 1) {
            double ans = double((sum - max) / (n - 1)) + max;
            cout << setprecision(8) << ans << endl;
        }
    }
    return 0;
}
```
Please note that the size of the array is fixed to 'MAX_ARR_SIZE' which is an assumption. If 'n' can be any number, you may need to use dynamic allocation. But keep in mind that dynamic allocation/deallocation can be expensive in terms of time.