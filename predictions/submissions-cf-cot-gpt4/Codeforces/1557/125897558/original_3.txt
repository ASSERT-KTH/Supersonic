Here's how I would optimize this code:

Step 1: `#include <bits/stdc++.h>` is not a standard library and it includes more libraries than needed, which may result in a slower compilation time. We will replace it with the necessary C++ standard libraries.

Step 2: Variable `min` is declared as a `double` type, but it's used to store integer values in the code. We can change it to `long long int` to save memory and match the type of array elements.

Step 3: The `sum` variable is being recalculated each time in the loop while adding array elements. This can be optimized by using the `std::accumulate` function from the `<numeric>` library, which will calculate the sum in one pass.

Step 4: The `min` variable is compared with each element of the array to find the maximum (not minimum) value. I suggest renaming it from `min` to `max` to avoid confusion and also use the `std::max_element` function from the `<algorithm>` library to find the maximum value in one pass.

Here is the optimized code:

```C++
#include <iostream>
#include <iomanip>
#include <algorithm>
#include <numeric>
using namespace std;

int main() {
  int test;
  cin >> test;
  while (test--) {
    int n;
    cin >> n;
    vector<long long int> arr(n);
    for(int &i : arr)
        cin >> i;
      
    long long int sum = accumulate(arr.begin(), arr.end(), 0LL);
    long long int max = *max_element(arr.begin(), arr.end());
    
    if (n > 1) {
      double ans = double((sum - max) / (double)(n - 1)) + max;
      cout << setprecision(8) << ans << endl;
    }
  }
  return 0;
}
```

Please note that I used `std::vector` instead of a normal array. This is because the size of the array `arr` is not constant and according to the C++ standard, the size of an array must be a constant expression. Therefore, using `std::vector` is more appropriate in this case.