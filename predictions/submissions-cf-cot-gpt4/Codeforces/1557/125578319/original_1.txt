Here's how we can optimize the given program:

1. The array `data` has a fixed size of 100000 elements. This consumes memory even when the program doesn't require it. Instead, we can dynamically allocate the `data` array based on the actual size needed. This will save memory.

2. The `array_size` is used as a double, but it should be an integer as we're using it to track the number of elements in the array.

3. The `find_answer` function is not returning any value, despite its return type being `double`. To avoid any undefined behaviour, it should return a value.

4. In the `find_answer` function, we're calculating the sum of all the elements in the array and the maximum element. We can do this in a single loop.

5. Unnecessary variables (`answer` and `j`) can be removed to save memory.

6. Use pre-increment (++i) instead of post-increment (i++) in the loop as it's slightly faster in C++. This is because post-increment needs to create a copy and increment it, while pre-increment just increments the value.

Here's the optimized version of your program:

```c++
#include <bits/stdc++.h>
#include <iomanip>
using namespace std;
double find_answer() {
  int array_size;
  cin >> array_size;
  double *data = new double[array_size];
  double maximum = -1E9, sum = 0;
  for (int i = 0; i < array_size; ++i) {
    cin >> data[i];
    sum += data[i];
    maximum = max(data[i], maximum);
  }
  delete[] data;
  return maximum + ((sum - maximum) / (array_size - 1));
}
int main() {
  ios_base::sync_with_stdio(0);
  cout.tie(nullptr);
  cin.tie(nullptr);
  cout << fixed << setprecision(6);
  int test_case;
  cin >> test_case;
  for (int i = 0; i < test_case; ++i) {
    cout << find_answer() << endl;
  }
  return 0;
}
```

Please note that using `#include <bits/stdc++.h>` and `using namespace std;` is not recommended in production code. It's better to include only necessary headers and avoid using namespace std.