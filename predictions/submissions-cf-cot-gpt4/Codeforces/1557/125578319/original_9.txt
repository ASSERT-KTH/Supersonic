Optimization steps:

1. Change `array_size` from `double` to `int`. It does not make sense to have a non-integer array size.
2. Initialize `maximum` as `numeric_limits<double>::lowest()`. This is better than hardcoding an arbitrary large negative number.
3. Use `std::ios::sync_with_stdio(false);` to turn off synchronization with the C stdio. This can potentially speed up I/O.
4. Remove `cin.tie(nullptr);` and `cout.tie(nullptr);`. These two lines are tying the cin and cout to nullptr which is unnecessary.
5. Use `printf` instead of `cout` for output. `printf` is generally faster than `cout`.
6. The `double data[100000]` will take a large amount of memory, but we don't need to store all the data. We can read the input one by one and update the `maximum` and `sum` simultaneously.
7. The function `find_answer` is not returning any value which should give a warning, we can make it as `void`.

Here is the optimized code:
```cpp
#include <bits/stdc++.h>
using namespace std;

void find_answer() {
  int array_size;
  double maximum = numeric_limits<double>::lowest(), sum = 0;
  cin >> array_size;
  for (int i = 0; i < array_size; ++i) {
    double x;
    cin >> x;
    maximum = max(x, maximum);
    sum += x;
  }
  double answer = maximum + ((sum - maximum) / (array_size - 1));
  printf("%.6f", answer);
}

int main() {
  ios::sync_with_stdio(false);
  cout << fixed << setprecision(6);
  int test_case;
  cin >> test_case;
  for (int i = 0; i < test_case; ++i) {
    find_answer();
    cout << '\n';
  }
  return 0;
}
```
