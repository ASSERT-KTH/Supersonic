Optimization Steps:
1. The array `double data[100000]` has a large size which might not be used completely depending on user input. Instead, we can use a vector which dynamically allocates memory only when needed. This will save memory.
2. The variable `array_size` is declared as `double`, but it should be an `int` because the number of elements in an array can't be a floating-point number. This will save memory.
3. The `cin >> array_size` statement doesn't check that the number of elements entered is less than or equal to the size of the array. This can cause a buffer overflow. We should add a check to prevent this.
4. We don't need to store all the elements in the array. We can calculate the maximum and sum in the same loop where we get the input. This will save memory.
5. The function `find_answer()` doesn't return anything so it should be `void`, not `double`.
6. The `i` and `j` loop variables in `main()` are declared but `j` is not used. We can remove it to save memory.
7. The `ios_base::sync_with_stdio(0);` line can be moved to the start of `main()`, because it only needs to be executed once.

Optimized Program:

```cpp
#include <bits/stdc++.h>
#include <iomanip>
using namespace std;

void find_answer() {
  int array_size;
  double maximum = -1E9, sum = 0, answer;
  cin >> array_size;
  if(array_size > 0 && array_size <= 100000) {
    for (int i = 0; i < array_size; i++) {
      double data;
      cin >> data;
      maximum = max(data, maximum);
      sum = sum + data;
    }
    answer = maximum + ((sum - maximum) / (array_size - 1));
    cout << answer;
  }
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(nullptr);
  cout.tie(nullptr);
  cout << fixed << setprecision(6);
  int test_case;
  cin >> test_case;
  for (int i = 0; i < test_case; i++) {
    find_answer();
    cout << endl;
  }
  return 0;
}
```

This program is optimized for both running time and memory usage.