The given C/C++ code can be optimized in the following ways:

1. `array_size` should be of type `int` instead of `double`. It's not logical to have a fractional size of an array. This change will optimize memory usage.

2. Array `data` is of size 100000 but we are only using `array_size` elements of it. So, instead of using the static array, we can use dynamic memory allocation according to the `array_size` to save memory. This change will optimize memory usage.

3. You don't need to store `array_size - 1` as it's used only once. This change will optimize memory usage.

4. The variable `answer` is unnecessary. Just print the outcome directly. This change will optimize memory usage.

5. We don't need to store each `data[i]` in memory, we only need to read it once, calculate the `maximum` and `sum` and then discard it. This change will optimize memory usage and possibly running time, because it can reduce cache misses.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
#include <iomanip>
using namespace std;
void find_answer() {
  int array_size;
  double maximum = -1E9, sum = 0;
  cin >> array_size;
  for (int i = 0; i < array_size; i++) {
    double temp;
    cin >> temp;
    maximum = max(temp, maximum);
    sum += temp;
  }
  cout << maximum + ((sum - maximum) / (array_size - 1)) << "\n";
}
int main() {
  ios_base::sync_with_stdio(0);
  cout.tie(nullptr);
  cin.tie(nullptr);
  cout << fixed << setprecision(6);
  int test_case;
  cin >> test_case;
  for (int i = 0; i < test_case; i++) {
    find_answer();
  }
  return 0;
}
```

This optimized code has a much lower memory footprint and potentially faster running time.