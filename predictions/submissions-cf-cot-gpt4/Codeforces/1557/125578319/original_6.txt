Optimization Explanation:

1. Use pre-increment operator (++i) instead of post-increment operator (i++) in for loops as pre-increment operator is generally faster in C++ as it doesn't create a copy.

2. Instead of declaring data as an array of size 100000, make it a vector. This way, you'll only use as much memory as you need. 

3. There's no need to store each data[i] in memory. You can find the maximum and sum in the same loop where you input the data.

4. `array_size` should be an integer. There's no need to use double for array size.

5. `find_answer` function should be void since we're not returning any value.

Optimized Code:

```c++
#include <bits/stdc++.h>
#include <iomanip>
using namespace std;
void find_answer() {
    int array_size;
    cin >> array_size;
    vector<double> data(array_size);
    double maximum = -1E9, sum = 0;
    for (int i = 0; i < array_size; ++i) {
        cin >> data[i];
        maximum = max(data[i], maximum);
        sum += data[i];
    }
    double answer = maximum + ((sum - maximum) / (array_size - 1));
    cout << answer;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(nullptr);
    cout.tie(nullptr);
    cout << fixed << setprecision(6);
    int test_case;
    cin >> test_case;
    for (int i = 0; i < test_case; ++i) {
        find_answer();
        cout << '\n';
    }
    return 0;
}
```

Note: This program is optimized for running time and memory usage but it still depends on the compiler and the machine where this program will be run.