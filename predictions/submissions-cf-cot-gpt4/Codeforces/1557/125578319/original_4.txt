Let's go through the code and see what we can optimize:

1. The use of `#include <bits/stdc++.h>` is discouraged as it includes more than what is actually needed. It's better to include only the libraries needed.

2. `array_size` should be of type `int` instead of `double`. 

3. `data` is a large array which can consume a lot of memory. Instead of storing all the inputs, we can just keep track of the sum and maximum value as we read the numbers.

4. `answer` is calculated but not returned from `find_answer()`. Instead, the value is printed inside the function. It's better to separate the calculation and print operations.

5. Variables `i` and `j` are declared in `main()`, but `j` is not used. So, it can be removed.

Here's the optimized program:

```cpp
#include <iostream>
#include <iomanip>
using namespace std;

double find_answer() {
  int array_size;
  double current_input, maximum = -1E9, sum = 0;
  cin >> array_size;
  for (int i = 0; i < array_size; i++) {
    cin >> current_input;
    maximum = max(current_input, maximum);
    sum += current_input;
  }
  return maximum + ((sum - maximum) / (array_size - 1));
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(nullptr);
  cout << fixed << setprecision(6);
  int test_case;
  cin >> test_case;
  for (int i = 0; i < test_case; i++) {
    cout << find_answer() << endl;
  }
  return 0;
}
```

In this optimized version, we've reduced the memory usage by not storing all the inputs, and improved the program structure by separating the calculation and print operations. We've also removed unused variables and unnecessary library inclusions.