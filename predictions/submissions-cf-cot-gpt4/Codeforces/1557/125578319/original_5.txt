Optimization Steps:

1. Use `double array_size;` for the size of an array is not a good practice. Size of an array should always be an integer. This will save memory space.
2. `double data[100000];` is taking a lot of memory. We don't need to store all the values. We can take input one by one and perform the operations. This will save memory.
3. We don't need to use `answer` variable. We can directly print the result. This will save memory.
4. Avoid using `#include <bits/stdc++.h>` since it includes a lot of unnecessary libraries which increases the compile time.
5. For better performance, we should use `std::ios::sync_with_stdio(false);` instead of `ios_base::sync_with_stdio(0);`.
6. `sum = sum + data[i];` can be replaced with `sum += data[i];` for more readability.

Optimized Program:

```cpp
#include <iostream>
#include <algorithm>
#include <iomanip>
using namespace std;

void find_answer() {
    int array_size;
    cin >> array_size;

    double maximum = -1E9, sum = 0;
    for (int i = 0; i < array_size; i++) {
        double value;
        cin >> value;
        maximum = max(value, maximum);
        sum += value;
    }

    cout << maximum + ((sum - maximum) / (array_size - 1));
}

int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    cout << fixed << setprecision(6);

    int test_case;
    cin >> test_case;

    for (int i = 0; i < test_case; i++) {
        find_answer();
        cout << endl;
    }

    return 0;
}
```
