Optimization Steps:

1. The function 'solve' is creating a copy of 'vector<int> a' which is unnecessary. It is better to pass by reference to avoid this.
2. In the main function, the map 'k' is being populated after the call to 'solve'. This operation could be done inside the 'solve' function to avoid iterating over the array again.
3. The map 'm' is populated in the 'solve' function but used only in the main function. It's better to populate it in the main function where it's used.
4. The function 'print' is iterating through the vector starting from index 1, which is not the conventional way to iterate through a vector in C++. It should start from index 0.
5. The vector 'check' is of size 2e5 + 12, which may be larger than necessary. It should be of size 'n' to reduce memory usage.

Optimized Program:
```cpp
#include <bits/stdc++.h>
using namespace std;

int solve(int n, vector<int> &ans, vector<int> &a, map<int, int> &k) {
  vector<bool> check(n, 0);
  int c = 0;
  for (int i = 1; i <= n; i++) {
    if (!check[a[i]]) {
      ans[i] = a[i];
      check[a[i]] = 1;
      c++;
    }
    k[i] = a[i];
  }
  vector<int> h;
  for (int i = 1; i <= n; i++) {
    if (!check[i]) {
      h.push_back(i);
    }
  }
  int h_size = h.size();
  for (int i = 1; i <= n; i++) {
    if (ans[i] == 0) {
      ans[i] = h[h_size - 1];
      h_size--;
    }
  }
  return c;
}

void print(vector<int> ans, int c) {
  cout << c << "\n";
  for (int i = 0; i < ans.size() - 1; i++)
    cout << ans[i + 1] << " ";
  cout << "\n";
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    vector<int> a(n + 1);
    for (int i = 1; i <= n; i++)
      cin >> a[i];
    vector<int> ans(n + 1);
    map<int, int> m;
    map<int, int> k;
    int number = solve(n, ans, a, k);
    for (int i = 1; i <= n; i++) {
      if (ans[i] == i) {
        ans[i] = k[i];
        ans[m[a[i]]] = i;
      }
    }
    print(ans, number);
  }
}
```
The main optimizations done here are reducing unnecessary memory allocations by passing by reference and reorganizing the code to avoid iterating over the array multiple times.