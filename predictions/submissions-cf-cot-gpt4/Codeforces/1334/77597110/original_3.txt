The following optimization techniques can be applied:

1. Reducing the use of std::vector: Every time we push an element into the vector, it checks whether it needs to resize, which is a costly operation. Instead, we can use a dynamic array where we can reserve the memory beforehand.

2. Reducing the use of division operation: Division is slower than multiplication. So we can replace the division operation with multiplication operation where we calculate the reciprocal only once.

3. Reducing the use of floating point operations: Instead of using 'long double' for 'arr', we can use 'long long' because we only need to compare it with 'm' which is also 'long long'. This will save memory space and also speed up the program because integer operations are faster than floating point operations.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <algorithm>
#define ll long long
#define E '\n'
#define IOT ios_base::sync_with_stdio(0); cin.tie(0);
using namespace std;

int main() {
  IOT;
  ll t, nn, m, n;
  cin >> t;
  while (t--) {
    cin >> nn >> m;
    ll* v = new ll[nn];
    ll sm = 0;
    ll cnt = 0;
    for (int i = 0; i < nn; i++) {
      cin >> v[i];
    }
    sort(v, v+nn, greater<ll>());
    for (int i = 0; i < nn; i++) {
      sm += v[i];
      if (sm / (i + 1) >= m)
        cnt++;
    }
    cout << cnt << E;
    delete[] v;
  }
  return 0;
}
```
This version of the program avoids unnecessary usage of vector and uses dynamic arrays instead. It also uses integer division instead of floating point division and avoids the use of floating point array 'arr'. This results in a more optimized code in terms of both time and space complexity.