Here are the steps to optimize the above code:

1) Remove unused variables: The variables `it`, `z`, `Mx` are declared but never used in the code. This unnecessarily consumes memory. So, these can be removed.

2) Avoid dynamic memory allocation: The `vector v` is used to store the input, but it is unnecessary as we are not using any properties of a vector. Instead, we can use an array which is faster and uses less memory as it does not involve dynamic memory allocation.

3) Minimize input/output operations: The macro `IOT` is used to speed up cin/cout operations. However, its use is discouraged as it can lead to unexpected behavior in some cases. Instead, we can use `scanf` and `printf` which are faster than cin and cout.

4) Avoid floating point division: The code `arr[i] = sm / (i + 1);` involves floating point division which is slower than integer division. Instead, we can compare `sm` with `m * (i + 1)` to avoid floating point division.

5) Avoid unnecessary computation: In the loop `for (int i = 0; i < v.size(); i++)`, `v.size()` is called every iteration. This is inefficient. We can store the size of the vector in a variable and use it in the loop.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
#define ll long long
using namespace std;

int main() {
  ll t, nn, m, n;
  scanf("%lld", &t);
  while (t--) {
    scanf("%lld%lld", &nn, &m);
    ll v[nn];
    ll sm = 0;
    ll cnt = 0;
    for (int i = 0; i < nn; i++) {
      scanf("%lld", &v[i]);
    }
    sort(v, v+nn, greater<ll>());
    for (int i = 0; i < nn; i++) {
      sm += v[i];
      if(sm >= m * (i + 1))
        cnt++;
    }
    printf("%lld\n", cnt);
  }
  return 0;
}
```