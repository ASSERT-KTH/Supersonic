The given code can be optimized in the following ways:

1. Avoid using `bits/stdc++.h` as it includes many libraries which are not needed, which can increase the compilation time. Include only the necessary headers.

2. Avoid using macros for simple operations like cin and endl. It doesn't provide any optimization and makes the code hard to read.

3. Avoid `cin.tie(0);` and `ios_base::sync_with_stdio(0);` unless you are doing competitive programming and every millisecond counts. In normal situations, they might cause unnecessary overhead.

4. Use pre-increment (++i) instead of post-increment (i++) in loops as pre-increment avoids unnecessary temporary object creation and is therefore faster.

5. Avoid creating a dynamic array (vector) when you know the size in advance. You can use a static array here.

6. Avoid resizing the vector unnecessarily. `push_back()` function in vector resizes the vector every time it is called which can be avoided by allocating the necessary space for vector at the time of its declaration.

7. Remove unused variables like `cnt`, `it`, `z`, `Mx`.

8. Avoid creating the `arr` array if you only use its elements to compare with `m`. You can directly compare the sum with `m` and increment the counter.

Optimized code:

```cpp
#include <iostream>
#include <algorithm>
#define ll long long

using namespace std;

int main() {
  ll t, nn, m, n;
  cin >> t;
  while (t--) {
    cin >> nn >> m;
    ll v[nn];
    ll sm = 0;
    ll cnt = 0;
    for (int i = 0; i < nn; ++i) {
      cin >> v[i];
    }
    sort(v, v + nn, greater<int>());
    for (int i = 0; i < nn; ++i) {
      sm += v[i];
      if (sm / (i + 1) >= m)
        ++cnt;
    }
    cout << cnt << "\n";
  }
  return 0;
}
```