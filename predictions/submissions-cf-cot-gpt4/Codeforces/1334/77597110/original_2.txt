The given code does not require any optimization for running time as it is already efficient. However, there are some memory optimizations that can be applied.

The array `arr` is never used after its values are calculated and compared with `m`. Thus, it is not necessary to store all the values in the array. Instead, we can calculate the average on the fly, compare it with `m`, and discard it immediately.

Another optimization is to reserve space for the vector `v` as the size `nn` is known in advance. This will prevent unnecessary reallocations of memory as the vector grows.

Optimization steps:

1. Remove the declaration of `arr`.
2. Calculate the average on the fly and compare it with `m` to increment `cnt`.
3. Reserve space for the vector `v` before the loop.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
#define ll long long
#define E "\n"
#define IOT ios_base::sync_with_stdio(0); cin.tie(0);
using namespace std;
int main() {
  IOT;
  ll t, nn, m, n;
  cin >> t;
  while (t--) {
    vector<ll> v;
    v.reserve(nn); // Reserve space for vector
    ll sm = 0;
    ll cnt = 0;
    cin >> nn >> m;
    for (int i = 0; i < nn; i++) {
      cin >> n;
      v.push_back(n);
    }
    sort(v.rbegin(), v.rend());
    for (int i = 0; i < v.size(); i++) {
      sm += v[i];
      ll avg = sm / (i + 1); // Calculate average on the fly
      if (avg >= m)
        cnt++;
    }
    cout << cnt << E;
  }
  return 0;
}
```