#include <iostream>
#include <vector>
#include <utility>
#include <chrono>
#include <algorithm>

#define ll long long int
#define MOD 1000000007
#define oo 1000000000000000000
#define forr(i, n) for (int i = 0; i < n; i++)
#define fastio ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0)
#define all(x) x.begin(), x.end()
#define unique(v) sort(all(v)); v.resize(distance(v.begin(), unique(all(v))))
#define eb emplace_back
#define FF first
#define SS second
#define mem(a, v) memset(a, v, sizeof(a))
#define pb push_back
#define popcount(x) __builtin_popcount(x)
using namespace std;

ll power(ll x, ll n, const ll P = -1) {
  if (x == 0)
    return 0;
  if (n == 0 || x == 1)
    return 1;
  if (P != -1)
    x %= P;
  ll res = 1;
  while (n > 0) {
    if (n & 1)
      res = (P != -1) ? (res * x % P) : (res * x);
    x = (P != -1) ? (x * x % P) : (x * x);
    n /= 2;
  }
  return res;
}

ll gcd(const ll a, const ll b) {
  if (b == 0)
    return a;
  return gcd(b, a % b);
}

ll lcm(const ll a, const ll b) {
  return (a * b) / gcd(a, b);
}

int inv(ll x) { return power(x, MOD - 2, MOD); }

void solve() {
  int n;
  cin >> n;
  vector<pair<ll, ll>> v(n);
  forr(i, n) cin >> v[i].FF >> v[i].SS;
  if (n == 2) {
    cout << min(v[0].FF + max(0LL, v[1].FF - v[0].SS), v[1].FF + max(0LL, v[0].FF - v[1].SS)) << "\n";
    return;
  }
  ll cnt = 0, curr = v[0].FF;
  for (int i = 0; i < n; i++) {
    cnt += curr;
    curr = max(0LL, v[(i + 1) % n].FF - v[i].SS);
  }
  ll ans = cnt;
  for (int i = 1; i < n; i++) {
    cnt += v[i].FF - max(0LL, v[i].FF - v[(i - 1 + n) % n].SS);
    cnt += max(0LL, v[(i - 1 + n) % n].FF - v[(i - 2 + n) % n].SS);
    cnt -= v[(i - 1 + n) % n].FF;
    ans = min(ans, cnt);
  }
  cout << ans << "\n";
  return;
}

int main() {
  fastio;
  int tc;
  cin >> tc;
  while (tc--)
    solve();
  return 0;
}