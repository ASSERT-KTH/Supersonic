long long int power(long long int x, long long int n, long long int P = oo) {
  if (x == 0)
    return 0;
  else if (n == 0 || x == 1)
    return 1;
  x %= P;
  long long res = 1;
  while (n > 0) {
    if (n & 1)
      res = (res * x) % P;
    x = (x * x) % P;
    n >>= 1;  // replace division by 2 with right shift
  }
  return res;
}

// ... rest of the code ...

void __sol() {
  // ... rest of the code ...

  ll modX, modX1;
  for (int i = 1; i < n; i++) {
    modX = max(0LL, v[i].FF - v[(i - 1 + n) % n].SS);
    modX1 = max(0LL, v[(i - 1 + n) % n].FF - v[(i - 2 + n) % n].SS);
    cnt += v[i].FF - modX;
    cnt += modX1;
    cnt -= v[(i - 1 + n) % n].FF;
    ans = min(ans, cnt);
  }

  // ... rest of the code ...
}