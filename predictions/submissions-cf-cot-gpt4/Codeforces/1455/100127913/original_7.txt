The main optimization in this program comes from reducing the number of calculations in the while loop. Instead of incrementing the moves variable by 1 every time and then calculating the sum of natural numbers up to that point, we can find an approximate value for the moves variable using the formula for the sum of natural numbers.

The sum of the first n natural numbers is given by n*(n+1)/2. We can rearrange this to find an approximate value for n given the sum:

n = sqrt(2*sum) - 1/2

We'll calculate this value and round it down to get an approximate value for moves. Then we can increment moves until we find the correct value.

This reduces the number of iterations of the while loop from potentially very large numbers to at most the square root of 2x, which is a significant optimization.

Optimized program:

```C++
#pragma GCC optimize "trapv"
#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#define fio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define ll long long
#define ull unsigned long long
#define ui unsigned int
#define vi vector<int>
#define vll vector<ll>
#define pb push_back
#define ld long double
#define mp make_pair
#define pii pair<int, int>
#define mod 1000000007
#define rep(i, n) for (int i = 0; i < n; i++)
#define repp(i, a, n) for (int i = a; i < n; i++)
#define all(v) v.begin(), v.end()
#define input(arr, n) for (ll i1 = 0; i1 < n; i1++) cin >> arr[i1]
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<ll, null_type, less_equal<ll>, rb_tree_tag, tree_order_statistics_node_update>
int main() {
  fio;
  int t = 1;
  cin >> t;
  while (t--) {
    ll x;
    cin >> x;
    ll moves = (ll)(sqrt(2*x) - 0.5);
    while (moves * (moves + 1) / 2 < x)
        moves++;
    if (moves * (moves + 1) / 2 == x + 1)
      moves++;
    cout << moves << endl;
  }
}
```

The above optimization reduces the number of iterations from potentially very large numbers to at most the square root of 2x, which is a significant optimization.