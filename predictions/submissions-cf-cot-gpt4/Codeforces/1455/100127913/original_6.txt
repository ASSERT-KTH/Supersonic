The main point of optimization we can do in this program is to optimize the loop that calculates the value of `moves`.

In the original program, the value of `moves` is being incremented in a loop until `moves * (moves + 1) / 2` is no longer less than `x`. This is equivalent to finding the smallest `moves` such that `moves * (moves + 1) / 2 >= x`.

This is essentially a mathematical problem. The solution to this problem can be found by solving the quadratic equation `moves^2 + moves - 2x = 0`. The solution to this equation is `moves = (-1 + sqrt(1 + 8x)) / 2`.

By using this formula, we can calculate the value of `moves` directly without a loop.

Here's the optimized program:

```cpp
#include <iostream>
#include <cmath>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t = 1;
  cin >> t;
  while (t--) {
    long long x;
    cin >> x;
    long long moves = (-1 + sqrt(1 + 8*x)) / 2;
    if (moves * (moves + 1) / 2 == x + 1)
      moves++;
    cout << moves << endl;
  }
}
```

This program should be faster than the original program because it calculates the value of `moves` directly using a formula instead of incrementing `moves` in a loop. It should also use less memory because it does not need to store the intermediate results of the loop.

Note that we have removed the unnecessary includes (`<bits/stdc++.h>`, `<ext/pb_ds/assoc_container.hpp>`, `<ext/pb_ds/tree_policy.hpp>`), macros (`fio`, `ll`, `ull`, `ui`, `vi`, `vll`, `pb`, `ld`, `mp`, `pii`, `mod`, `rep`, `repp`, `all`, `input`, `ordered_set`) and the `#pragma GCC optimize "trapv"` directive, as they are not used in the program. This makes the program cleaner and easier to read.