The given C++ program reads a sequence of integers and checks if it is sorted. The optimization can be done mainly by:

1) Using pre-increment operator instead of post-increment operator in loop iterations. Pre-increment is generally faster than post-increment because post-increment involves a copy operation as it returns the value before the increment.

2) Avoiding multiple checks for `rng[0] == 0` and `rng[n - 1] == 0`. We can store the result in a variable once and use the variable instead. This saves computation time. 

3) Reducing the use of macros. As macros are processed by the preprocessor, they can make the debugging process more difficult, and large numbers of macros can also slow down compilation time. 

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<ll> vi;
#define MOD 1000000007
#define fastio ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

ll binpow(ll a, ll b) {
  ll res = 1;
  while (b > 0) {
    if (b & 1)
      res = res * a;
    a = a * a;
    b >>= 1;
  }
  return res;
}

int main() {
  fastio ll T;
  cin >> T;
  while (--T >= 0) {
    ll n;
    cin >> n;
    vi a(n);
    for(ll i = 0; i < n; ++i) cin >> a[i];
    bool fg = 0;
    vector<bool> rng(n, 0);
    for(ll i = 0; i < n; ++i) {
      if (a[i] != (i + 1)) {
        rng[i] = 1;
      }
    }
    ll cng = 0;
    for(ll i = 0; i < n - 1; ++i) {
      if (rng[i] != rng[i + 1])
        cng++;
    }
    bool isRngStartZero = (rng[0] == 0);
    bool isRngEndZero = (rng[n - 1] == 0);

    if ((cng == 0) && isRngStartZero)
      cout << 0 << endl;
    else if (cng == 0)
      cout << 1 << endl;
    else if ((cng <= 2) && (isRngStartZero || isRngEndZero))
      cout << 1 << endl;
    else
      cout << 2 << endl;
  }
}
```