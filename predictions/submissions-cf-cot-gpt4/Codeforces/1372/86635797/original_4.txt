Optimization:

1. Inclusion of `#include <bits/stdc++.h>` is a bad practice, because it includes all of the standard library, which can slow down the compile process. Include only the necessary libraries.

2. Using `std::ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);` will speed up I/O operations.

3. `std::endl` not only inserts a newline, but also flushes the stream. This can slow down I/O, so use `'\n'` instead.

4. The `binpow` function is never used and can be removed.

5. The `INF` constant is never used and can be removed.

6. The typedefs for `ull`, `ii`, `iii`, `vvi`, `vii`, `viii` are never used and can be removed.

7. The macros `frr`, `rfrr`, `watch`, `mpr`, `in`, `umap`, `uset`, `pf`, `ff`, `ss`, `all`, `sz`, `prv`, `debv`, `min3`, `max3`, `MOD` are never used and can be removed.

8. The `vector<bool> rng(n, 0);` can be replaced with a simple integer counter because we only need to count the number of elements that are not in their correct position.

Here is the optimized version of the code:

```cpp
#include <iostream> 
#include <vector>
#define fr(iter, n) for (ll iter = 0; iter < n; ++iter)
#define vin(v, n) vi v(n); fr(i, n) cin >> v[i];
using namespace std;
typedef long long ll;
typedef vector<ll> vi;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL); 
  cout.tie(NULL);
  ll T;
  cin >> T;
  while (T--) {
    ll n;
    cin >> n;
    vin(a, n);
    ll cng = 0;
    ll rng = 0;
    fr(i, n) {
      if (a[i] != (i + 1)) {
        rng++;
      }
      if(i != n - 1 && ((a[i] != (i + 1)) != (a[i + 1] != (i + 2)))){
        cng++;
      }
    }
    if (rng == 0)
      cout << 0 << '\n';
    else if (cng == 0)
      cout << 1 << '\n';
    else if (cng <= 2 && ((a[0] == 1) || (a[n - 1] == n)))
      cout << 1 << '\n';
    else
      cout << 2 << '\n';
  }
}
```

Here, the number of elements not in their correct positions (`rng`) and the number of times the condition of being in the correct position changes (`cng`) are calculated in the same loop, which reduces the number of iterations over the array.