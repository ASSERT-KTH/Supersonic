First, let's look at the improvements that can be made:

1. Using `#include <bits/stdc++.h>` is not recommended. It includes a lot of files which may increase the compile time. Instead, only include the necessary libraries.

2. The `watch(x)` macro is not used in the code, hence it can be removed.

3. The `mpr`, `pb`, `pf`, `in` macros are not used in the code, hence they can be removed.

4. The `debv(a)` macro is not used in the code, hence it can be removed.

5. The `min3(a, b, c)` and `max3(a, b, c)` macros are not used in the code, hence they can be removed.

6. The `vin(a, n)` macro can be inlined in the main function to improve readability.

7. The `INF` variable is not used, hence it can be removed.

8. The `binpow` function is not used, hence it can be removed.

9. The `typedef`s for `ull`, `ii`, `iii`, `vvi`, `vii` and `viii` are not used, hence they can be removed.

10. The `fastio` macro is a good practice for competitive programming, but not necessary for a regular program. It's okay to keep it.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>

#define fr(iter, n) for (ll iter = 0; iter < n; ++iter)
#define MOD 1000000007
#define fastio                                                                 \
  ios_base::sync_with_stdio(0);                                                \
  cin.tie(0);                                                                  \
  cout.tie(0);

using namespace std;
typedef long long ll;
typedef vector<ll> vi;

int main() {
  fastio 
  ll T;
  cin >> T;
  while (T--) {
    ll n;
    cin >> n;
    vi a(n);
    fr(i, n) cin >> a[i];
    vector<bool> rng(n, 0);
    fr(i, n) {
      if (a[i] != (i + 1)) {
        rng[i] = 1;
      }
    }
    ll cng = 0;
    fr(i, n - 1) {
      if (rng[i] != rng[i + 1])
        cng++;
    }
    if ((cng == 0) && (rng[0] == 0))
      cout << 0 << endl;
    else if (cng == 0)
      cout << 1 << endl;
    else if ((cng <= 2) && ((rng[0] == 0) || (rng[n - 1] == 0)))
      cout << 1 << endl;
    else
      cout << 2 << endl;
  }
}
```

This code does the same operations as the original but is more concise and only includes the necessary libraries and definitions, which should result in a slightly faster compile time.