Let's go over potential optimizations:

1. Using `std::ios::sync_with_stdio(false)` and `std::cin.tie(NULL)` is good for performance when we mix `printf/scanf` with `cout/cin`. But in this code, we are only using `cin/cout`, so we can remove these lines.

2. Macro `#define endl "\n"` is used to make sure that end line will flush the buffer, but it's not needed here. We can use `\n` directly.

3. The usage of `#define fr(iter, n) for (ll iter = 0; iter < n; ++iter)` and other similar `for-loop` macros can be avoided. They make the code less readable and don't bring any performance benefit.

4. The `#define vin(v, n) ...` macro is used to declare and read an array. It's not very clear and can be replaced with explicit code which will be more readable.

5. `vector<bool>` is a bit tricky in the sense that it doesnâ€™t behave as a normal vector. `std::vector<bool>` is a possibly space efficient specialization of `std::vector` for the type `bool`. But it might have slower performance than `std::vector<int>` because it does not necessarily store bool values as bytes, but as bitfields. We can replace it with `vector<int>`.

6. `#define umap unordered_map` and `#define uset unordered_set` are not used in this code. We can remove them.

7. The function `binpow` is not used anywhere. We can remove it.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

typedef long long ll;

int main() {
  ll T;
  cin >> T;
  while (T--) {
    ll n;
    cin >> n;
    vector<ll> a(n);
    for (ll i = 0; i < n; ++i) cin >> a[i];
    vector<int> rng(n, 0);
    for (ll i = 0; i < n; ++i) {
      if (a[i] != (i + 1)) {
        rng[i] = 1;
      }
    }
    ll cng = 0;
    for (ll i = 0; i < n - 1; ++i) {
      if (rng[i] != rng[i + 1])
        cng++;
    }
    if ((cng == 0) && (rng[0] == 0))
      cout << 0 << '\n';
    else if (cng == 0)
      cout << 1 << '\n';
    else if ((cng <= 2) && ((rng[0] == 0) || (rng[n - 1] == 0)))
      cout << 1 << '\n';
    else
      cout << 2 << '\n';
  }
  return 0;
}
```

This version of the code is more readable and avoids some potential performance pitfalls.