Optimization steps:

1. Remove unnecessary macros and typedefs.
2. No need to use std::cin and std::cin.tie(0) as it doesn't make a big difference.
3. Remove unnecessary variables such as `fg` which are not used.
4. Remove unnecessary checks in the end. We only need to check three conditions.

Optimized Code:

```cpp
#include <iostream>
#include <vector>

using namespace std;

int main() {
  int T;
  cin >> T;
  while (T--) {
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; ++i) cin >> a[i];

    vector<bool> rng(n, 0);
    for (int i = 0; i < n; ++i) {
      if (a[i] != (i + 1)) {
        rng[i] = 1;
      }
    }
    int cng = 0;
    for (int i = 0; i < n - 1; ++i) {
      if (rng[i] != rng[i + 1])
        cng++;
    }
    if ((cng <= 2) && ((rng[0] == 0) || (rng[n - 1] == 0)))
      cout << 1 << endl;
    else if (cng == 0)
      cout << 1 << endl;
    else
      cout << 2 << endl;
  }
}
```

Explanation:

1. Removed unnecessary macros and typedefs which were not used in the program.
2. `std::ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);` these lines are used to sync the C++ std streams with the C stdio streams. This makes the i/o operations faster but in this case, it is not making a huge difference.
3. Removed the unused variable `fg`.
4. Simplified the checks at the end. The check `if ((cng == 0) && (rng[0] == 0))` is not necessary as the result will be 1 whether or not `rng[0] == 0`. Also, the loop `for (int i = 0; i < n - 1; ++i) { if (rng[i] != rng[i + 1]) cng++; }` can be shortened. It increments `cng` by 1 if `rng[i] != rng[i + 1]`, we only need to check if `cng` is less than or equal to 2 and if `rng[0]` or `rng[n - 1]` is 0, then print 1 else print 2. This reduces the number of checks and hence optimizes the program.
5. Used `int` instead of `long long int` as the input constraints are not given but generally `int` is enough for most of the competitive programming problems. If the constraints are large then you can use `long long int`.