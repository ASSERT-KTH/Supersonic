Optimization Steps:

1. Avoid using `#include <bits/stdc++.h>`. It includes more files than you need, which increases your compilation time. It's better to include only the files you need.

2. Avoid using `#define` for loops. It makes the code harder to read and debug. Use traditional for loop instead.

3. Avoid using unnecessary macros like `watch(x)` or `debv(a)`, `prv(a)` which are unused in this code.

4. Avoid using `fastio`. It can cause some issues with cin and cout. Instead, you can use `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(NULL);` inside your main function to speed up cin and cout.

5. You can remove the `vin(a, n);` macro and instead use a simple for loop to take the input inside the main function.

6. You can avoid defining `INF` because it is not used in this code.

7. You can remove unused typedefs like `ii`, `iii`, `vii`, `viii`.

Optimized code:

```
#include <iostream>
#include <vector>

using namespace std;
typedef long long ll;
typedef vector<ll> vi;

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  
  ll T;
  cin >> T;
  while (T--) {
    ll n;
    cin >> n;

    vi a(n);
    for(ll i = 0; i < n; ++i)
      cin >> a[i];

    bool fg = 0;
    vector<bool> rng(n, 0);
    for(ll i = 0; i < n; ++i) {
      if (a[i] != (i + 1)) {
        rng[i] = 1;
      }
    }
    ll cng = 0;
    for(ll i = 0; i < n - 1; ++i) {
      if (rng[i] != rng[i + 1])
        cng++;
    }
    if ((cng == 0) && (rng[0] == 0))
      cout << 0 << "\n";
    else if (cng == 0)
      cout << 1 << "\n";
    else if ((cng <= 2) && ((rng[0] == 0) || (rng[n - 1] == 0)))
      cout << 1 << "\n";
    else
      cout << 2 << "\n";
  }
}
```
