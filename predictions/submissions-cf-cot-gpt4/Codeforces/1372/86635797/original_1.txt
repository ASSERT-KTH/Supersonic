This program can be optimized by reducing the number of iterations in the two main loops. 

Optimization Steps:

1. The first loop is used to check if each element in vector 'a' is not equal to its index plus one. If that's the case, it sets the corresponding index in vector 'rng' to 1. This can be combined with the following loop, which counts the number of changes in the 'rng' vector.

2. The second loop counts the number of changes in the 'rng' vector. This can be combined with the first loop to reduce the number of iterations over the data.

3. Instead of using the 'rng' vector to store whether 'a[i]' is not equal to 'i+1', we can just keep a count of the number of changes. This reduces the memory usage of the program.

4. In the condition checks for 'cng' and 'rng[0]' or 'rng[n-1]', we can combine the first two conditions as they both output 'cout << 1'.

After applying these optimizations, the optimized C/C++ program is:

```cpp
#include <bits/stdc++.h>
#define endl "\n"
#define fr(iter, n) for (ll iter = 0; iter < n; ++iter)
#define frr(iter, s, e) for (ll iter = s; iter < e; ++iter)
#define rfrr(iter, s, e) for (ll iter = s; iter >= e; --iter)
#define watch(x) cerr << (#x) << " is " << (x) << endl;
#define pb push_back
#define pf push_front
#define mpr make_pair
#define in insert
#define umap unordered_map
#define uset unordered_set
#define vin(v, n)                                                              \
  vi v(n);                                                                     \
  fr(i, n) cin >> v[i];
#define ff first
#define ss second
#define all(x) (x).begin(), (x).end()
#define sz(x) (long long int)(x).size()
#define prv(a)                                                                 \
  for (auto x : a)                                                             \
    cout << x << ' ';                                                          \
  cout << '\n';
#define debv(a)                                                                \
  for (auto x : a)                                                             \
    cerr << x << ' ';                                                          \
  cerr << '\n';
#define min3(a, b, c) min(a, min(b, c))
#define max3(a, b, c) max(a, max(b, c))
#define MOD 1000000007
#define fastio                                                                 \
  ios_base::sync_with_stdio(0);                                                \
  cin.tie(0);                                                                  \
  cout.tie(0);
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<ll, ll> ii;
typedef pair<ll, ii> iii;
typedef vector<ll> vi;
typedef vector<vi> vvi;
typedef vector<ii> vii;
typedef vector<iii> viii;
ll INF = 0x7FFFFFFFFFFFFFFF;
ll binpow(ll a, ll b) {
  ll res = 1;
  while (b > 0) {
    if (b & 1)
      res = res * a;
    a = a * a;
    b >>= 1;
  }
  return res;
}
int main() {
  fastio ll T;
  cin >> T;
  while (T--) {
    ll n;
    cin >> n;
    vin(a, n);
    ll cng = 0;
    bool prev = a[0] != 1;
    fr(i, n) {
      bool current = a[i] != (i + 1);
      if (current != prev) {
        cng++;
        prev = current;
      }
    }
    if (cng <= 2 && (!prev || a[n - 1] == n))
      cout << 1 << endl;
    else
      cout << 2 << endl;
  }
}
```

This optimized version combines the two main loops into one, saving runtime, and removes the 'rng' vector, saving memory. It also simplifies the output conditions.