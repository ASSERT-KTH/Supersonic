Here are the optimizations that can be done in your code:

1. **Avoid using #include <bits/stdc++.h>:** This is because bits/stdc++.h is quite large and including it will slow down your compilation time.

2. **Avoid using 'll' as a macro for long long:** It's not a good practice to use such macros which modify the language syntax in a non-standard way.

3. **Avoid using 'using namespace std':** It's a bad practice to use this statement in a global scope which can lead to name conflicts.

4. **Use vector instead of set:** If the input elements are not unique and you need to keep every element, then vector can be more efficient than set. Vectors are generally faster for inserting elements compared to sets. The size() function of both set and vector has a constant time complexity, but vector's size() function is usually faster. However, if the elements need to be unique, set should be used.

5. **Use ios_base::sync_with_stdio(false) and cin.tie(NULL):** This will make the input and output more efficient.

Optimized code:
```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    long long t;
    std::cin >> t;
    while (t--) {
        long long n, x;
        std::cin >> n;
        std::vector<long long> a;
        while (n--) {
            std::cin >> x;
            a.push_back(x);
        }
        std::sort(a.begin(), a.end());
        a.erase(std::unique(a.begin(), a.end()), a.end());
        std::cout << a.size() << "\n";
    }
}
```
This code works as follows: it reads the number of test cases, then for each test case it reads the number of elements, then the elements themselves. It puts all elements into a vector, sorts the vector, removes duplicate elements, and finally outputs the number of unique elements (which is now the size of the vector).