The current code reads a number, `t`, then for each `t`, it reads a number `n` and `n` numbers, stores them in a set (which automatically removes duplicates), and then prints the size of the set.

Step-by-step optimization:

1. Input/Output operations (`cin` and `cout`) are quite slow in C++. To speed them up, we can use `ios_base::sync_with_stdio(false); cin.tie(NULL);` just after the main function begins. This will speed up `cin` and `cout` operations significantly.

2. Instead of using `std::set`, which is a Red-Black Tree based container, we can use `std::unordered_set` which is a Hash Table based container. `std::unordered_set` has an average time complexity of O(1) for insertions, deletions, and searches, while `std::set` has O(log n).

3. We should avoid the use of `#include <bits/stdc++.h>`, as it includes a lot of unnecessary headers, increasing the compile time. Instead, we should only include necessary headers, which in this case are `iostream` and `unordered_set`.

Here is the optimized code:

```c++
#include <iostream>
#include <unordered_set>
using namespace std;
typedef long long ll;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  ll t;
  cin >> t;
  while (t--) {
    ll n, x;
    cin >> n;
    unordered_set<ll> a;
    while (n--) {
      cin >> x;
      a.insert(x);
    }
    cout << a.size() << "\n";
  }
  return 0;
}
```
