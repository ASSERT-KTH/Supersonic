The given code is a little bit complex and contains quite a lot of debugging and utility functions. Let's try to optimize it step by step:

1. Remove unused functions
   We can eliminate the unused functions `operator<<` for `pair` and `container`, `split`, `dbg_out`, `READ_OUT`, `debugg`, `READ`. This will reduce the complexity of the code and make it easier to understand and maintain.

2. Use standard headers
   Instead of including `<bits/stdc++.h>`, which includes a large number of standard headers, we should include only necessary headers. This can speed up the compile time. 

3. Remove unused macros
   Unused macros like `endl`, `ff`, `ss`, `int`, `dd`, `ALL`, `FOR`, `FORR`, `getcurrtime` can be removed. 

4. Remove unused typedefs
   The typedef `pbds` is unused and can be removed.

5. Remove unused constants
   Unused constants like `mod`, `MOD`, `N` can be eliminated.

6. Simplify `test_cases` function
   Instead of using a lambda function for sorting, we can define a comparison function for readability and performance. 

7. Use `printf` and `scanf` instead of `cout` and `cin`
   `printf` and `scanf` are generally faster than `cout` and `cin`. So, we can replace them for better performance. 

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;

typedef long long ll;
typedef pair<ll, vector<ll>> pv;

bool comp(const pv &a, const pv &b) {
    return a.second.size() < b.second.size();
}

void test_cases() {
  ll n, m;
  scanf("%lld %lld", &n, &m);
  vector<pv> a(m);
  map<ll, ll> fr;
  for (ll i = 0; i < m; i++) {
    a[i].first = i;
    ll x;
    scanf("%lld", &x);
    a[i].second.resize(x);
    for (auto &x : a[i].second) {
      scanf("%lld", &x);
      fr[x]++;
      fr[x] = min(fr[x], (m + 1) / 2);
    }
  }
  sort(a.begin(), a.end(), comp);
  vector<ll> res(m, -1);
  for (ll i = 0; i < m; i++) {
    ll idx = a[i].first;
    vector<ll> v = a[i].second;
    ll mn = 1e18;
    for (ll x : v) {
      if (fr[x] > 0) {
        mn = min(mn, fr[x]);
      }
    }
    if (mn == 1e18) {
      printf("NO\n");
      return;
    }
    ll per = -1;
    for (ll x : v) {
      if (mn == fr[x]) {
        per = x;
        break;
      }
    }
    res[idx] = per;
    fr[per]--;
  }
  printf("YES\n");
  for (ll i = 0; i < m; i++) {
    printf("%lld ", res[i]);
  }
  printf("\n");
}

int main() {
  ll tt;
  scanf("%lld", &tt);
  for (ll T = 1; T <= tt; T++) {
    test_cases();
  }
  return 0;
}
```

Please note that these optimizations are based on the given code. Some of them may not be applicable if the unused functions and macros are used in other parts of a larger code base. Always test your code thoroughly after optimization to ensure its correctness.