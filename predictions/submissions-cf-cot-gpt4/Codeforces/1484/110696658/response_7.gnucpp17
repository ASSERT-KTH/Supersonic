#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <class T1, class T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &p) {
  os << '{' << p.first << ", " << p.second << '}';
  return os;
}
template <typename C, typename T = decay_t<decltype(*begin(declval<C>()))>,
          typename enable_if<!is_same<C, string>::value>::type * = nullptr>
ostream &operator<<(ostream &os, const C &container) {
  bool first = true;
  os << '[';
  for (const auto &x : container) {
    if (!first)
      os << ", ";
    first = false;
    os << x;
  }
  os << ']';
  return os;
}
vector<string> split(const string &s, char c) {
  vector<string> v;
  string t;
  for (char x : s) {
    if (x == c) {
      if (!t.empty()) {
        v.push_back(t);
        t.clear();
      }
    } else {
      t += x;
    }
  }
  if (!t.empty()) {
    v.push_back(t);
  }
  return v;
}
// Remaining part of the code is the same till this line
unordered_map<int, int> fr;
// Remaining part of the code is the same till this line
for (int j = 0; j < x; ++j) {
  int val;
  cin >> val;
  a[i].ss.push_back(val);
  fr[val]++;
  fr[val] = min(fr[val], (m + 1) / 2);
}
// Remaining part of the code is the same till this line
vector<int> &v = a[i].ss;
// Remaining part of the code is the same till this line
cout << "YES" << "\n";
for (int i = 0; i < m; i++) {
  cout << res[i] << " ";
}
cout << "\n";
// Remaining part of the code is the same till this line