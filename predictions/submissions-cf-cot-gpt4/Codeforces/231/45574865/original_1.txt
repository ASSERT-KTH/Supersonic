Here are the steps to optimize the program:

1. Move the declaration of `y` inside the loop. This is an optimization for memory usage. Declaring the variable inside the loop means that it will be created only when needed and will be destroyed immediately after use.

2. For smaller values of `n`, the current nested loop approach is fine. But for larger values, we may face performance issues. We can optimize it by using a single loop and using the modulo operation to find when we have seen three inputs. This way, we only have to iterate `n*3` times instead of going through nested loops.

3. Instead of checking `if (y == 1)`, we can directly add `y` to `temp`, as `y` can only be `0` or `1`.

4. The `math.h` and `string.h` libraries are not used in the program, so we can remove those to make the code cleaner.

Now, let's implement these optimizations.

```cpp
#include <iostream>
using namespace std;

int main() {
  int n, temp = 0, hasil = 0;
  cin >> n;

  for (int i = 0; i < n * 3; i++) {
    int y;
    cin >> y;
    temp += y;
    if ((i + 1) % 3 == 0) {
      if (temp >= 2) {
        hasil++;
      }
      temp = 0;
    }
  }

  cout << hasil;
  return 0;
}
```

Please note that the optimized solution assumes that the input will always be either `0` or `1`. If the input can be other numbers, the original `if (y == 1)` condition should be kept.