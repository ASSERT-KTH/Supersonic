Step 1: Remove unused headers
The libraries `<math.h>` and `<string.h>` are included but not used in the code. Removing these will make the code cleaner.

Step 2: Reduce the scope of variables
The variable `y` can be declared within the inner loop as it's not used outside that scope. This makes the code cleaner and easier to understand.

Step 3: Combine assignment and declaration
The variables `temp` and `hasil` are declared and then assigned separately. They can be combined into a single line, which makes the code cleaner.

Step 4: Use pre-increment instead of post-increment
Pre-increment (`++temp`) is generally faster and uses less memory than post-increment (`temp++`). This is because post-increment creates a temporary variable, increments the original, and then returns the temporary variable, while pre-increment just increments the original and returns it.

Step 5: Take advantage of short-circuiting
The `if (y == 1)` check can be replaced with `temp += (y == 1)`. This takes advantage of the fact that in C++, the result of a comparison operation is 1 if it's true and 0 if it's false. This means we can add the result of the comparison directly to `temp`, which skips the need for an `if` statement. This is faster because it avoids a branch, which can be slow on modern processors due to branch prediction.

Here's the optimized code:

```
#include <iostream>
using namespace std;
int main() {
  int n, temp = 0, hasil = 0;
  cin >> n;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < 3; j++) {
      int y;
      cin >> y;
      temp += (y == 1);
    }
    hasil += (temp >= 2);
    temp = 0;
  }
  cout << hasil;
  return 0;
}
```