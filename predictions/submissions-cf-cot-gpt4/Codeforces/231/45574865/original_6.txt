Here is how you can optimize the provided code:

1. Merge the two inner loops into a single loop: Your current program has a separate loop for reading the input values and another one for checking if the value is 1. You can do both in the same loop to make your program faster.

2. Avoid unnecessary variable resets: The variable temp is reset to 0 at the end of the outer loop. Since the variable temp is only used inside the outer loop, it could be declared inside the outer loop, eliminating the need for a reset.

3. Use std::ios::sync_with_stdio(false): By default, iostreams are synchronized with C-style streams. This synchronization can slow down input/output operations. So, setting it to false can speed up the I/O operations.

4. Use cin.tie(NULL): This statement unties cin from cout. Tied streams ensure that one stream is flushed automatically before each I/O operation on the other stream. Untying them can potentially improve I/O performance.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    int n, hasil = 0;
    cin >> n;

    for (int i = 0; i < n; i++) {
        int temp = 0;
        for (int j = 0; j < 3; j++) {
            int y;
            cin >> y;
            if (y == 1) {
                temp++;
            }
        }
        if (temp >= 2) {
            hasil++;
        }
    }

    cout << hasil;
    return 0;
}
```