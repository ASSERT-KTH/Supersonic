The optimization of the given program can be done by following the steps mentioned below:

1. We can reduce the time overhead of initialization of the variable 'temp' to 0 inside the outer loop by initializing it at the time of declaration.
2. The 'math.h' and 'string.h' headers are included but not used in the program. We can remove these to reduce overhead.
3. 'std' namespace is used for 'cin' and 'cout'. To avoid using the complete namespace, we can use 'std::' before 'cin' and 'cout'.
4. We can use 'ios::sync_with_stdio(0); cin.tie(0);' to make input and output more efficient by disabling the synchronization between the C and C++ standard streams.

Now, let's apply these optimizations to the given program:

```cpp
#include <iostream>
using std::cin;
using std::cout;

int main() {
  std::ios::sync_with_stdio(0); 
  cin.tie(0);

  int n, temp = 0, hasil = 0;
  cin >> n;
  int y;
  for (int i = 0; i < n; i++) {
    temp = 0; // reset temp for each problem
    for (int j = 0; j < 3; j++) {
      cin >> y;
      if (y == 1) {
        temp++;
      }
    }
    if (temp >= 2) {
      hasil++;
    }
  }
  cout << hasil;
  return 0;
}
```

Please note that the most significant optimization was using 'ios::sync_with_stdio(0); cin.tie(0);' to speed up cin and cout. This optimization is specifically useful when the program involves a lot of input/output operations.