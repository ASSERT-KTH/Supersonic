The program given reads an integer n, followed by n groups of three integers. For each group of three, it counts the number of 1s and if there are at least two 1s, it increments a counter (hasil). The program then outputs the value of this counter.

To optimize the running time and memory usage of the program, these are the steps that we can follow:

1. Remove unnecessary include statements: <math.h> and <string.h> libraries are not used in this program and can be removed.

2. Initialize variables at the time of declaration: This could potentially reduce the number of instructions at runtime.

3. Use prefix increment (++temp) instead of postfix (temp++): Although in many modern compilers, there is no significant difference between these two, in some situations, prefix can be faster because it doesn't need to make a copy of the value before it increments it.

4. Combine the two if conditions into one to avoid the need for the temporary variable 'temp'. This also reduces the number of comparison operations.

5. Use 'ios_base::sync_with_stdio(false);' before any I/O operations. This statement allows you to turn off the synchronization between the C and C++ standard streams. This makes the program faster.

Here is the optimized version of the program:

```cpp
#include <iostream>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  int n, hasil = 0;
  cin >> n;
  int y, temp;
  for (int i = 0; i < n; ++i) {
    temp = 0;
    for (int j = 0; j < 3; ++j) {
      cin >> y;
      temp += (y == 1);
    }
    hasil += (temp >= 2);
  }
  cout << hasil;
  return 0;
}
```

Please note that the efficiency of the optimizations can depend on the specific compiler and system used.