Here are a few steps to optimize the given code:

1. Remove unnecessary include statements: The code includes math.h and string.h, but neither of these libraries are used in the program. Removing them will slightly speed up the compilation time and reduce memory usage.

2. Limit the scope of variables: The variable 'y' is only used inside the inner loop so it should be declared there, not outside. This will make the code more readable and maintainable.

3. Use prefix increment: In C++, the prefix increment operator (++i) can be more efficient than the postfix increment operator (i++) because the postfix operator involves a copy operation. Although modern compilers often optimize this out, it's a good practice to use the prefix operator whenever the result of the operation is not used.

4. Using fast input/output: If the number of inputs are large, we can use faster input/output methods. The standard cin and cout are slower compared to scanf and printf.

Here's the optimized code:

```cpp
#include <iostream>
using namespace std;
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n, temp = 0, hasil = 0;
    cin >> n;
    for (int i = 0; i < n; ++i) {
        temp = 0;
        for (int j = 0; j < 3; ++j) {
            int y;
            cin >> y;
            if (y == 1) {
                ++temp;
            }
        }
        if (temp >= 2) {
            ++hasil;
        }
    }
    cout << hasil;
    return 0;
}
```
Note: The line 'ios_base::sync_with_stdio(false); cin.tie(NULL);' makes the input/output operations faster. But it is important to note that, after adding these two lines, you should not mix cin/cout with scanf/printf in the same program, otherwise it may lead to an undefined behavior.