The given code is a solution to a competitive programming problem. I see a few places where we can optimize the code.

1) The first optimization that can be done is to remove the usage of `#include <bits/stdc++.h>` as this header file includes most of the standard libraries which increases the compilation time. Include only the libraries that are being used in the code. In this case, we are only using `iostream`, `vector` and `algorithm`.

2) The second optimization is to avoid using `#define`. Instead, you can use `const` or `constexpr` for defining constants. This will make your code more readable and safer because `#define` does not respect scope and type rules.

3) You can avoid using the macro `fon` for the loop and write the loop explicitly. This will make your code easier to read, debug, and maintain.

4) `ios_base::sync_with_stdio(false);` is used to unsync the I/O of C and C++. If you are using cin/cout for I/O, avoid using printf/scanf or other C-style I/O methods because it can lead to an increase in I/O time.

5) The macro `JSM` is not necessary. You can write `ios_base::sync_with_stdio(false);` directly in the main function.

6) The `continue` statement in the while loop is not necessary. You can use an else statement to execute the remaining code if the condition `sum % x` is not met.

7) Instead of using two separate loops to find the first and last non-zero elements, you can do it in a single loop, by iterating from both ends towards the center.

Here is the optimized code considering all these improvements:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  int t, n, x;
  cin >> t;

  while (t--) {
    cin >> n >> x;
    vector<int> a(n);
    
    int sum = 0;
    for (int i = 0; i < n; i++) {
      cin >> a[i];
      a[i] %= x;
      sum += a[i];
    }
    
    if (sum % x) {
      cout << n << endl;
    }
    else {
      int pos = n;
      for (int i = 0, j = n-1; i <= j; i++, j--) {
        if (a[i]) pos = min(pos, n - i);
        if (a[j]) pos = min(pos, n - j);
      }
      
      cout << (pos == n ? -1 : n - pos) << endl;
    }
  }
  
  return 0;
}
```