Optimization Steps:

1. Remove `#include <bits/stdc++.h>`: This header file includes a lot of unnecessary libraries which increases the compilation time. Instead, include only the necessary libraries.

2. Remove `#define ll long long int`, `#define pb push_back`, `#define fon for (i = 0; i < n; i++)` and `#define JSM ios_base::sync_with_stdio(false);`: These macro definitions are not being used in the program.

3. Avoid using `endl` and use `'\n'` instead: The `endl` manipulator causes a flush of the output buffer every time it is used, which can slow down the output. Using `'\n'` instead of `endl` can avoid unnecessary flushes, thus improving the speed of the code.

4. Avoid using `ios_base::sync_with_stdio(false);`: This line is used to unsync the C++ standard streams with their corresponding standard C streams. This can cause a significant speed up of i/o operations, but it is not being used in the current program. So removing it will have no effect.

5. Avoid declaring unused variables: Variables `m`, `j`, `k`, and `answer` are declared but not used. Removing them will save memory.

6. Combine loops: The two loops that are used to find the first and last non-zero elements in `a` can be combined into a single loop. This will cut the time complexity in half.

Here is the optimized code:

```
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    int t, n, x, i;
    cin >> t;
    while (t--) {
        cin >> n >> x;
        vector<int> a(n);
        for (i = 0; i < n; i++) {
            cin >> a[i];
            a[i] %= x;
        }
        int sum = 0;
        for (i = 0; i < n; i++)
            sum += a[i];
        if (sum % x) {
            cout << n << '\n';
            continue;
        }
        int pos = n;
        for (i = 0; i < n; i++) {
            if (a[i]) {
                pos = min(pos, i+1);
                pos = min(pos, n-i);
            }
        }
        if (!pos) pos--;
        cout << n - pos << '\n';
    }
}
```