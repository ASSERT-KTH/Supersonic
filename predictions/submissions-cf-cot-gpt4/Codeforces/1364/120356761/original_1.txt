Step-by-step Optimization:

1. Removal of 'using namespace std': It's often considered bad practice to use this declaration. Namespaces are intended to prevent name clashes and by using the entire std namespace, we can possibly face name clashes again.
   
2. Use 'iostream' and 'vector' instead of 'bits/stdc++.h': The 'bits/stdc++.h' is quite large and using it increases compilation time. It's better to include only the libraries that we need.

3. Avoid using Macros for loops: Macros can make debugging difficult. It's better to directly write the for loop in the code. It also improves readability.

4. Avoid using Macros for 'ios_base::sync_with_stdio(false);': It's better to directly put this in the main function. This line is used to speed up I/O operations which can be useful in competitive programming.

5. Avoid unnecessary variables: The 'm', 'j', 'k', 'answer' variables are declared but never used, so we can remove them.

6. Declare variables in the most inner scope where they are used: This can reduce memory usage and make the program more readable. 

Here's the optimized program:

```cpp
#include<iostream>
#include<vector>

typedef long long int ll;

int main() {
    ios_base::sync_with_stdio(false);
    int t, n, x;
    std::cin >> t;
    while (t--) {
        std::cin >> n >> x;
        std::vector<int> a(n);
        for (int i = 0; i < n; i++){
            std::cin >> a[i];
            a[i] %= x;
        }
        int sum = 0;
        for (int i = 0; i < n; i++)
            sum += a[i];
        if (sum % x) {
            std::cout << n << std::endl;
            continue;
        }
        int pos = 0;
        int i;
        for (i = 0; i < n; i++)
            if (a[i])
                break;
        pos = i + 1;
        for (i = n - 1; i >= 0; i--)
            if (a[i])
                break;
        pos = std::min(pos, n - i);
        if (!pos)
            pos--;
        std::cout << n - pos << std::endl;
    }
}
```