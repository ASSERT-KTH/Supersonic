Let's go through this code step by step:

1. The code does not make full use of preprocessors. The use of #define to declare constants and functions is confusing and can lead to bugs. Although constants can be defined using #define, it's better to use the const keyword for type safety.

2. The use of bits/stdc++.h can cause the compilation to slow down, it is better to include only the essential headers. The use of stdio.h and cstdio is redundant as iostream is already included via bits/stdc++.h

3. The use of global variables for everything, including those that are only used within a function, is bad practice. It makes the code harder to understand and can lead to bugs.

4. The array size is unnecessarily large. Reducing the size of these arrays to the actual amount of memory needed can reduce memory usage.

5. The dfs function does not return anything, so it does not need to set the variable ok to true.

6. The variables m, n and pos in the main function are declared but never used.

7. The vectors v and v2 in the main function are created but v2 is never used.

Here is your optimized code:

```cpp
#include <iostream>
#include <vector>

using namespace std;
typedef long long ll;

void dfs(int s, int des, vector<int>& arr, const vector<vector<int>>& vec) {
    arr[s] = 1;

    for (auto i : vec[s]) {
        if (!arr[i]) {
            dfs(i, des, arr, vec);
        }
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<ll> a(n+1);
        for (int i = 1; i <= n; i++)
            cin >> a[i];
        vector<ll> v;
        for (int i = 1; i <= n; i++) {
            if (i == 1 || i == n || (a[i - 1] < a[i]) != (a[i] < a[i + 1]))
                v.push_back(a[i]);
        }
        cout << v.size() << endl;
        for (auto it : v)
            cout << it << " ";
        cout << endl;
    }
    return 0;
}
```

This code has less global variables, less unused variables, and more readable and maintainable code. It should also execute faster and use less memory.