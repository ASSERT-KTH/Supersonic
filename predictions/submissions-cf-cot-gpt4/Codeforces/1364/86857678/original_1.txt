The optimizations I can suggest are as follows:

1. Remove unused variables: There are several variables declared but not used, like `b[200051]`, `aa[200010]`, `t`, `k`, `ev`, `od`, `tt`, `n`, `v`, `edge`, `cost[mx]`, `l`, `c2[mx]`, `ok`, `chid[mx]`, `dp[mx]`, `f[mx]`. These take up unnecessary memory, so removing them would optimize the memory usage.

2. Use `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(NULL);` to untie C and C++ standard streams, and disable synchronization of all the C++ standard streams with their corresponding C standard streams. This can make I/O operations faster and can help when the amount of I/O is large.

3. Use reserve for vectors: If you know the approximate size of the vector beforehand, it's a good practice to reserve the space in memory. This can prevent unnecessary reallocations.

4. Reduce scope of variables: Variables `m`, `n`, `pos`, `mx`, `mn`, `x` are only used inside the while loop, so they should be declared inside the loop. This makes the intent of the program clearer and can help the compiler optimize the code.

5. Avoid using `#define`: The `#define` directive is handled by pre-processor before the compilation process, and it doesn't understand the C++ language. So, using `const` or `constexpr` instead of `#define` is a better practice in C++. Here, the `#define pii pair<ll, ll>` can be replaced with `typedef pair<ll, ll> pii;`.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
#include <cstdio>
using namespace std;
typedef long long ll;
typedef pair<ll, ll> pii;
const int mx = 1e6 + 5;

vector<int> vec[mx];
int vis[mx] = {};

void dfs(int s, int des, int arr[]) {
  arr[s] = 1;
  if (s == des) {
    bool ok = true;
  }
  for (int i = 0; i < vec[s].size(); i++) {
    if (!arr[vec[s][i]]) {
      dfs(vec[s][i], des, arr);
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    ll a[200010];
    for (int i = 1; i <= n; i++)
      cin >> a[i];
    vector<ll> v;
    v.reserve(n);
    for (int i = 1; i <= n; i++) {
      if (i == 1 || i == n || (a[i - 1] < a[i]) != (a[i] < a[i + 1]))
        v.push_back(a[i]);
    }
    cout << v.size() << endl;
    for (auto it : v)
      cout << it << " ";
    cout << endl;
  }
  return 0;
}
```
Note that the dfs function is not used in the main function. If it's not going to be used later, you can remove it to further optimize the code.