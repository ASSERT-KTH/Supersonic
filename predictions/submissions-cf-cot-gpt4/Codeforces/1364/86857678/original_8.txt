The given C++ program can be optimized in several ways. 

1. Include only necessary libraries: The `#include <bits/stdc++.h>` is a non-standard library that includes all standard libraries. This can cause the program to be slower because it includes unnecessary libraries. It is better to include only the necessary libraries.

2. Avoid using `#define`: The preprocessing directive `#define` is used to define macros. While they can make the code easier to read, they can also lead to unexpected results due to lack of type safety. It is better to use `const` variables or inline functions instead.

3. Use of global variables: The use of global variables can make a program hard to debug and maintain. It is better to limit the scope of variables as much as possible.

4. Avoid unnecessary type conversions: The `sz(x)` macro is replaced by its equivalent `x.size()`. This eliminates the need for a macro and an unnecessary type conversion.

5. Avoid redundant operations: In the main program, the `mx` and `mn` variables are set to 1 but never used. They can be removed.

6. Use `reserve()` for vectors: If you know the size of the vector beforehand, it's better to reserve memory for it. This can potentially reduce the memory reallocations.

7. Use `emplace_back()` instead of `push_back()`: `emplace_back()` constructs the object in place and can avoid the overhead of a copy or move operation.

Here is your optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
using ll = long long;

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    vector<ll> a(n + 1);
    for (int i = 1; i <= n; i++)
      cin >> a[i];
    vector<ll> v;
    v.reserve(n);
    for (int i = 1; i <= n; i++) {
      if (i == 1 || i == n || (a[i - 1] < a[i]) != (a[i] < a[i + 1]))
        v.emplace_back(a[i]);
    }
    cout << v.size() << "\n";
    for (auto it : v)
      cout << it << " ";
    cout << "\n";
  }
  return 0;
}
```