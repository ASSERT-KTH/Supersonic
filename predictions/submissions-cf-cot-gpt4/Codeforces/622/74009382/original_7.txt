This program is well-optimized in terms of algorithmic complexity, but there are some minor changes that could potentially improve the performance in a small measure.

Here are the optimization steps:

1. Remove the `#include <bits/stdc++.h>` header. This header file includes too many libraries which are not used in this program, increasing compile time and binary size. We will include only those libraries that are used like `iostream`, `cassert` etc.

2. We can see that `#define M 1000000007` and `#define MOD 1000000007` are the same. We can remove one of them to clean up the code.

3. Remove unused macro definitions like `#define pb push_back`, `#define ppb pop_back`, `#define pf push_front`, `#define ppf pop_front`, `#define all(x) (x).begin(), (x).end()`, `#define sz(x) (int)((x).size())`, `#define MM 998244353`, `#define fr first`, `#define sc second`, `#define pii pair<int, int>`, `#define rep(i, a, b) for (int i = a; i < b; i++)`, `#define mem1(a) memset(a, -1, sizeof(a))`, `#define mem0(a) memset(a, 0, sizeof(a))`, `#define ppc __builtin_popcount` as they are not used in the program.

4. Remove unused constants `const int INF = 1e18;` and `const int N = 1e6 + 5;` as they are not used in the program.

Here is your optimized program:

```C++
#include <iostream>
#include <cassert>
using namespace std;

#define MOD 1000000007
#define int long long

template <typename T, typename T1> T amax(T &a, T1 b) {
  if (b > a)
    a = b;
  return a;
}
template <typename T, typename T1> T amin(T &a, T1 b) {
  if (b < a)
    a = b;
  return a;
}

int pw(int a, int b = MOD - 2, int p = MOD) {
  if (b == 0)
    return 1;
  int t = pw(a, b / 2, p);
  if (b % 2)
    return (((1LL * a * t) % p) * t) % p;
  else
    return ((1LL * t * t) % p);
}

struct mod_int {
  int val;
  mod_int(long long v = 0) {
    if (v < 0)
      v = v % MOD + MOD;
    if (v >= MOD)
      v %= MOD;
    val = v;
  }
  ...
  ...
  ... // Rest of the code
}
```

Please note that program optimization is not only about making small changes to reduce running time and memory usage. It's also about selecting the right algorithm, data structure based on the problem context and input size. The provided program seems to be already quite optimized in that aspect. The changes suggested here are quite minor and might not have a significant impact on the runtime efficiency.