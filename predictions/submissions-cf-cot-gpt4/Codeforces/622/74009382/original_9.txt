Since the provided code is a competitive programming problem and highly dependent on the problem statement, optimizations are limited. However, there are few general optimizations that could be performed without changing the logic of the code.

1. Avoid `#include <bits/stdc++.h>`: This header file includes almost all standard libraries which increases the compilation time. Include only those libraries which are needed in the code.

2. Avoid `using namespace std;`: This can cause name conflicts if the program grows larger or if it's used in a larger project. It's better to use `std::` prefix with each standard library object.

3. Replace `#define` with `const`: The preprocessor will replace all instances of defined constants in the code. For large values and in large codebases, this will increase compilation time and potentially the size of the executable. Using constant variables will avoid this issue.

4. Avoid the use of global variables: Global variables consume memory for their entire lifetime of the program. If they can be avoided or used as local variables instead, it would save memory.

5. Avoid using macros for simple functions: Macros don't have type checking and are harder to debug. Inline functions are a better choice.

6. In function `pw`, you are performing `b % 2` and `b / 2`. Bitwise operations are faster than arithmetic operations. So, you can replace `b % 2` with `b & 1` and `b / 2` with `b >> 1`.

Here is the code after applying the above optimizations:

```cpp
#include <iostream>
#include <vector>
#include <cstring>

typedef long long ll;
const ll M = 1000000007;
const ll MM = 998244353;
const ll INF = 1e18;
const ll N = 1e6 + 5;
ll pw(ll a, ll b = M - 2, ll p = M) {
  if (b == 0)
    return 1;
  ll t = pw(a, b >> 1, p);
  if (b & 1)
    return (((1LL * a * t) % p) * t) % p;
  else
    return ((1LL * t * t) % p);
}

// rest of your code
```

Note: Since the provided code is a competitive programming problem, some of the optimizations like avoiding global variables, using `std::` prefix with each standard library object, etc. might not be applicable as these practices are common in competitive programming for the sake of brevity and less typing during contests.