#include <iostream>
#include <utility>
#include <cassert>

using namespace std;
using ll = long long;
const ll M = 1000000007;
const ll N = 1e6 + 5;
const ll INF = 1e18;

struct mod_int {
  ll val;
  mod_int(ll v = 0) {
    if (v < 0)
      v = v % M + M;
    if (v >= M)
      v %= M;
    val = v;
  }

  mod_int& operator+=(const mod_int& other) {
    val += other.val;
    if (val >= M)
      val -= M;
    return *this;
  }

  mod_int pow(ll p) const {
    assert(p >= 0);
    mod_int a = *this, result = 1;
    while (p > 0) {
      if (p & 1)
        result *= a;
      a *= a;
      p >>= 1;
    }
    return result;
  }

  // Other member functions...
};

mod_int P[N];
mod_int ele[N];

void populateEleAndCalculateAns(ll n, ll k, mod_int& ans) {
  ele[1] = 1;
  for (ll i = 1; i < k + 2; ++i) {
    ele[1] *= (M + n - i - 1);
    ele[1] /= (M - i);
  }
  ans += ele[1] * P[1];
  for (ll i = 2; i < k + 3; ++i) {
    ele[i] = ele[i - 1] * (M - k + i - 3);
    ele[i] /= (i - 1);
    ele[i] /= (M + n - i);
    ele[i] *= (M + n - i + 1);
    ans += ele[i] * P[i];
  }
}

void solve() {
  ll n, k;
  cin >> n >> k;
  for (ll i = 1; i < k + 4; ++i) {
    mod_int j = i;
    P[i] = P[i - 1] + j.pow(k);
  }
  if (n <= k + 2) {
    cout << P[n];
    return;
  }
  mod_int ans = 0;
  populateEleAndCalculateAns(n, k, ans);
  cout << ans;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  solve();
  return 0;
}