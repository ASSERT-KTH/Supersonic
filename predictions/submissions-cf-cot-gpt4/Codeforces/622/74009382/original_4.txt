The given C++ code is implementing some modular arithmetic and polynomial functions. I can suggest some optimizations below:

1. Instead of using #define to declare constants, use `const` keyword. `const` is preferred in C++ because it provides a type, whereas `#define` does not.

2. The `#include <bits/stdc++.h>` is not a standard library, it is actually a header file including many different libraries. It is better to include only the specific libraries you need for your program. This will reduce the compilation time and memory usage.

3. You have unnecessarily overloaded operators for a pair. The standard library already provides the necessary operations for a pair. This is redundant and can be removed.

4. The `mod_int` structure has some functions that can be simplified. For example, the `operator==` and `operator!=` can be simplified using the `return` statement directly.

5. The `solve` function has some redundant operations and can be simplified.

Here is the optimized version of your code:

```cpp
#include <iostream>
#include <vector>

using namespace std;
using int64 = long long;
const int MOD = 1e9 + 7;
const int MAXN = 1e6 + 5;

struct mod_int {
  int val;

  mod_int(long long v = 0) {
    if (v < 0)
      v = v % MOD + MOD;
    if (v >= MOD)
      v %= MOD;
    val = v;
  }

  mod_int &operator+=(const mod_int &other) {
    val += other.val;
    if (val >= MOD)
      val -= MOD;
    return *this;
  }

  mod_int &operator-=(const mod_int &other) {
    val -= other.val;
    if (val < 0)
      val += MOD;
    return *this;
  }

  mod_int &operator*=(const mod_int &other) {
    val = int64(val) * other.val % MOD;
    return *this;
  }

  mod_int &operator/=(const mod_int &other) {
    return *this *= other.inv();
  }

  friend mod_int operator+(const mod_int &a, const mod_int &b) { return mod_int(a) += b; }
  friend mod_int operator-(const mod_int &a, const mod_int &b) { return mod_int(a) -= b; }
  friend mod_int operator*(const mod_int &a, const mod_int &b) { return mod_int(a) *= b; }
  friend mod_int operator/(const mod_int &a, const mod_int &b) { return mod_int(a) /= b; }

  mod_int inv() const {
    int a = val, b = MOD, u = 0, v = 1;
    while (b) {
      int t = a / b;
      a -= t * b; swap(a, b);
      u -= t * v; swap(u, v);
    }
    return mod_int(u);
  }

  mod_int pow(long long p) const {
    mod_int a = *this, result = 1;
    while (p > 0) {
      if (p & 1)
        result *= a;
      a *= a;
      p >>= 1;
    }
    return result;
  }

  friend ostream &operator<<(ostream &stream, const mod_int &m) {
    return stream << m.val;
  }
  friend istream &operator>>(istream &stream, mod_int &m) {
    return stream >> m.val;
  }
};

mod_int P[MAXN], ele[MAXN];

void solve() {
  int n, k;
  cin >> n >> k;
  for (int i = 1; i <= k + 3; i++) {
    mod_int j = i;
    P[i] = P[i - 1] + j.pow(k);
  }

  if (n <= k + 2) {
    cout << P[n];
    return;
  }

  ele[1] = 1;
  for (int i = 1; i <= k + 1; i++) {
    ele[1] *= (MOD + n - i - 1);
    ele[1] /= (MOD - i);
  }

  mod_int ans = 0;
  ans += ele[1] * P[1];

  for (int i = 2; i <= k + 2; i++) {
    ele[i] = ele[i - 1] * (MOD - k + i - 3);
    ele[i] /= (i - 1);
    ele[i] /= (MOD + n - i);
    ele[i] *= (MOD + n - i + 1);
    ans += ele[i] * P[i];
  }

  cout << ans;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

  solve();

  return 0;
}
```
You can further optimize the code by using dynamic programming or using more efficient algorithms for the problem. However, such optimizations would require a complete rewrite of the code which is not the objective of the current task.