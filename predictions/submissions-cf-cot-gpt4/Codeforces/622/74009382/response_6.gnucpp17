#include <bits/stdc++.h>

const long long M = 1000000007;
const long long INF = 1e18;
const int N = 1e6 + 5;

std::pair<long long, long long> operator+=(std::pair<long long, long long> &a, std::pair<long long, long long> b) {
  a.first += b.first;
  a.second += b.second;
  return a;
}

// Other functions and classes

// Avoid global variables
long long P[N];
long long ele[N];

void solve() {
  long long n, k;
  std::cin >> n >> k;
  for (long long i = 1; i < k + 4; ++i) {
    long long j = i;
    P[i] = P[i - 1] + j*pow(k);
  }
  if (n <= k + 2) {
    std::cout << P[n];
    return;
  }
  ele[1] = 1;
  for (long long i = 1; i < k + 2; ++i) {
    ele[1] *= (M + n - i - 1);
    ele[1] /= (M - i);
  }
  long long ans = 0;
  ans += ele[1] * P[1];
  for (long long i = 2; i < k + 3; ++i) {
    ele[i] = ele[i - 1] * (M - k + i - 3);
    ele[i] /= (i - 1);
    ele[i] /= (M + n - i);
    ele[i] *= (M + n - i + 1);
    ans += ele[i] * P[i];
  }
  std::cout << ans;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);
  int t = 1;
  while (t--)
    solve();
  return 0;
}