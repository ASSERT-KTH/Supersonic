#include <iostream>
#include <vector>

const int MOD = 1000000007;
const long long INF = 1e18;
const int N = 1e6 + 5;

inline int mod_inv(int a, int m = MOD) {
    int g = m, r = a, x = 0, y = 1;
    while (r != 0) {
        int q = g / r;
        g %= r;
        std::swap(g, r);
        x -= q * y;
        std::swap(x, y);
    }
    return x < 0 ? x + m : x;
}

int pw(int a, int b = MOD - 2, int p = MOD) {
    if (b == 0)
        return 1;
    int t = pw(a, b / 2, p);
    int res = (1LL * t * t) % p;
    if (b % 2)
        res = (1LL * a * res) % p;
    return res;
}

void solve() {
    std::vector<int> P(N), ele(N);
    int n, k;
    std::cin >> n >> k;
    for (int i = 1; i < k + 4; i++) {
        int j = i;
        P[i] = P[i - 1] + pw(j, k);
    }
    if (n <= k + 2) {
        std::cout << P[n];
        return;
    }
    ele[1] = 1;
    for (int i = 1; i < k + 2; i++) {
        ele[1] = (ele[1] * (MOD + n - i - 1)) % MOD;
        ele[1] = (ele[1] * pw(MOD - i)) % MOD;
    }
    int ans = 0;
    for (int i = 2; i < k + 3; i++) {
        ele[i] = (ele[i - 1] * (MOD - k + i - 3)) % MOD;
        ele[i] = (ele[i] * pw(i - 1)) % MOD;
        ele[i] = (ele[i] * pw(MOD + n - i)) % MOD;
        ele[i] = (ele[i] * (MOD + n - i + 1)) % MOD;
        ans = (ans + ele[i] * P[i]) % MOD;
    }
    std::cout << ans;
}

int main() {
    solve();
    return 0;
}