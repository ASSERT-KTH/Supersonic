The given program is doing a lot of redundant tasks that can be optimized. Let's go through them:

1. We can replace `#define` with `const` or `constexpr` for constants. `constexpr` is evaluated at compile time, making it faster than `define` which is processed by preprocessor.

2. It is not considered good practice to use "#include <bits/stdc++.h>" because it includes a lot of unnecessary headers, increasing the compile time. Instead, we should only include the libraries that are needed.

3. The use of `scanf` and `printf` can be replaced with `cin` and `cout`. It is more readable and safer than `scanf` and `printf`.

4. `srand(time(0) + clock())` and `random_shuffle(a + 1, a + n + 1)` can be replaced with `random_device` and `shuffle` which are safer and more modern.

5. We can replace the `map` with `unordered_map`. `unordered_map` is a hash table and its time complexity for lookup is O(1) on average, while `map` is a binary search tree and its time complexity for lookup is O(log n).

Now let's write the optimized program:

```C++
#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>
#include <random>
#include <ctime>

using namespace std;

constexpr int M = 1e6 + 105;
int bz[M], p[M], p0;

void sieve(int n) {
    for (int i = 2; i <= n; i++) {
        if (!bz[i]) p[++p0] = i;
        for (int j = 1; i * p[j] <= n; j++) {
            int k = i * p[j];
            bz[k] = 1;
            if (i % p[j] == 0)
                break;
        }
    }
}

constexpr int N = 2e5 + 5;
int n;
long long a[N];
long long u[1000], u0;

void fen(long long n) {
    u0 = 0;
    for (int i = 1; i <= p0 && (long long)p[i] * p[i] <= n; i++)
        if (n % p[i] == 0) {
            u[++u0] = p[i];
            while (n % p[i] == 0)
                n /= p[i];
        }
    if (n > 1)
        u[++u0] = n;
}

unordered_map<long long, int> w;

long long ans;

void check(long long x) {
    long long s = 0;
    for (int i = 1; i <= n; i++) {
        if (a[i] >= x) {
            long long y = a[i] % x;
            s += min(y, x - y);
        } else
            s += x - a[i];
        if (s > ans)
            return;
    }
    ans = s;
}

int main() {
    std::random_device rd;
    std::mt19937 g(rd());

    sieve(1e6);
    cin >> n;
    for (int i = 1; i <= n; i++)
        cin >> a[i];
    shuffle(a + 1, a + n + 1, g);
    for (int i = 1; i <= min(n, 1000); i++) {
        for (int j = -1; j <= 1; j++) {
            long long x = a[i] + j;
            if (x > 1) {
                fen(x);
                for (int k = 1; k <= u0; k++)
                    w[u[k]] = 1;
            }
        }
    }
    ans = n;
    for (auto& it : w)
        check(it.first);
    cout << ans << "\n";
}
```