Optimization Steps:

1. Remove the `#include <bits/stdc++.h>` directive and replace it with specific includes. `bits/stdc++.h` includes a lot of unnecessary headers which can increase the compilation time.

2. In the `fen` function, you are using `u[++u0]` to add items to the array `u`. Instead, use `push_back()` function of `vector` which is more efficient and safer.

3. In the main function, you are using `random_shuffle()` on the array `a`. This function is deprecated in C++14 and removed in C++17. Use `shuffle()` function instead.

4. Use `auto` keyword in the for loop where you are iterating over the map `w` which will make the code cleaner and easier to read.

5. Use `endl` instead of `hh pp("\n")` which will make your code more readable.

Optimized Program:

```
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <ctime>
#define fo(i, x, y) for (int i = x, _b = y; i <= _b; i++)
#define ff(i, x, y) for (int i = x, _b = y; i < _b; i++)
#define fd(i, x, y) for (int i = x, _b = y; i >= _b; i--)
#define ll long long
using namespace std;
const int M = 1e6 + 105;
int bz[M], p[M], p0;
void sieve(int n) {
  fo(i, 2, n) {
    if (!bz[i])
      p[++p0] = i;
    for (int j = 1; i * p[j] <= n; j++) {
      int k = i * p[j];
      bz[k] = 1;
      if (i % p[j] == 0)
        break;
    }
  }
}
const int N = 2e5 + 5;
int n;
ll a[N];
vector<ll> u;
void fen(ll n) {
  u.clear();
  for (int i = 1; i <= p0 && (ll)p[i] * p[i] <= n; i++)
    if (n % p[i] == 0) {
      u.push_back(p[i]);
      while (n % p[i] == 0)
        n /= p[i];
    }
  if (n > 1)
    u.push_back(n);
}
map<ll, int> w;
ll ans;
void check(ll x) {
  ll s = 0;
  fo(i, 1, n) {
    if (a[i] >= x) {
      ll y = a[i] % x;
      s += min(y, x - y);
    } else
      s += x - a[i];
    if (s > ans)
      return;
  }
  ans = s;
}
int main() {
  srand(time(0) + clock());
  sieve(1e6);
  scanf("%d", &n);
  fo(i, 1, n) scanf("%lld", &a[i]);
  shuffle(a + 1, a + n + 1, default_random_engine(time(0)));
  fo(i, 1, min(n, 1000)) {
    fo(j, -1, 1) {
      ll x = a[i] + j;
      if (x > 1) {
        fen(x);
        fo(k, 0, u.size()) w[u[k]] = 1;
      }
    }
  }
  ans = n;
  for (auto itr = w.begin(); itr != w.end(); itr++)
    check(itr->first);
  printf("%lld\n", ans);
  return 0;
}
```