This C++ program is already quite optimized, but there are a few changes that can be made to improve it slightly:

1. Avoid using `#define` for loops: The `#define` macro for loops (`fo`, `ff`, `fd`) is a common programming practice in competitive programming to write less code, but it could make the code harder to read and debug. It's better to directly use the for loop as it is.

2. Avoid using `#define` for printf: Similar to the above point, using `#define pp printf` does not provide any optimization and makes the code hard to read. 

3. Using `std::ios_base::sync_with_stdio(false); std::cin.tie(NULL);`: This line can increase the speed of cin/cout drastically which could be useful if there is a lot of input/output.

Here is the optimized version of your code:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int M = 1e6 + 105;
int bz[M], p[M], p0;
void sieve(int n) {
  for (int i = 2, _b = n; i <= _b; i++) {
    if (!bz[i])
      p[++p0] = i;
    for (int j = 1; i * p[j] <= n; j++) {
      int k = i * p[j];
      bz[k] = 1;
      if (i % p[j] == 0)
        break;
    }
  }
}
const int N = 2e5 + 5;
int n;
long long a[N];
long long u[1000], u0;
void fen(long long n) {
  u0 = 0;
  for (int i = 1; i <= p0 && (long long)p[i] * p[i] <= n; i++)
    if (n % p[i] == 0) {
      u[++u0] = p[i];
      while (n % p[i] == 0)
        n /= p[i];
    }
  if (n > 1)
    u[++u0] = n;
}
map<long long, int> w;
map<long long, int>::iterator it;
long long ans;
void check(long long x) {
  long long s = 0;
  for (int i = 1; i <= n; i++) {
    if (a[i] >= x) {
      long long y = a[i] % x;
      s += min(y, x - y);
    } else
      s += x - a[i];
    if (s > ans)
      return;
  }
  ans = s;
}
int main() {
  std::ios_base::sync_with_stdio(false); std::cin.tie(NULL);
  srand(time(0) + clock());
  sieve(1e6);
  cin >> n;
  for(int i = 1; i <=n; i++) cin >> a[i];
  random_shuffle(a + 1, a + n + 1);
  for(int i = 1; i <= min(n, 1000); i++) {
    for(int j = -1; j <= 1; j++) {
      long long x = a[i] + j;
      if (x > 1) {
        fen(x);
        for(int k = 1; k <= u0; k++) w[u[k]] = 1;
      }
    }
  }
  ans = n;
  for (it = w.begin(); it != w.end(); it++)
    check((*it).first);
  printf("%lld\n", ans);
}
```