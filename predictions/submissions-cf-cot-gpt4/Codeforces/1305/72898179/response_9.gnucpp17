#include <bits/stdc++.h>
using namespace std;

const int M = 1e6 + 105, N = 2e5 + 5;
bool bz[M];
int p[M], p0;
long long a[N];
vector<long long> divisors;

void sieve(int n) {
    for (int i = 2; i <= n; i++) {
        if (!bz[i])
            p[++p0] = i;
        for (int j = 1; i * p[j] <= n; j++) {
            bz[i * p[j]] = true;
            if (i % p[j] == 0)
                break;
        }
    }
}

void getDivisors(long long n) {
    divisors.clear();
    for (int i = 1; i <= p0 && (long long)p[i] * p[i] <= n; i++)
        if (n % p[i] == 0) {
            divisors.push_back(p[i]);
            while (n % p[i] == 0)
                n /= p[i];
        }
    if (n > 1)
        divisors.push_back(n);
}

long long check(long long x, int n) {
    long long s = 0;
    for (int i = 1; i <= n; i++) {
        if (a[i] >= x) {
            long long y = a[i] % x;
            s += min(y, x - y);
        } else
            s += x - a[i];
    }
    return s;
}

int main() {
    srand(time(0) + clock());
    sieve(1e6);
    int n;
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) scanf("%lld", &a[i]);
    random_shuffle(a + 1, a + n + 1);
    unordered_map<long long, int> w;
    for (int i = 1; i <= min(n, 1000); i++) {
        for (int j = -1; j <= 1; j++) {
            long long x = a[i] + j;
            if (x > 1) {
                getDivisors(x);
                for (long long d : divisors) w[d] = 1;
            }
        }
    }
    long long ans = n;
    for (auto& kv : w)
        ans = min(ans, check(kv.first, n));
    printf("%lld\n", ans);
}