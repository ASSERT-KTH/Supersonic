This C++ program is slightly complex but there are still ways to optimize it.
Let's go through it step by step:

1. Remove `#include <bits/stdc++.h>`: `bits/stdc++.h` is not a standard header file. It is a GCC extension that includes literally all standard C++ headers. This can slow down the compilation process greatly, which can be an issue in large-scale software development. It's better to include only those headers which are necessary.

2. Avoid using `#define` for loops: Macros (`#define`) don't respect scope and can lead to errors, and they also make the code harder to read and understand.

3. The `random_shuffle` function is deprecated in C++14 and removed in C++17. Instead, use `shuffle` with a random number generator.

4. Use `std::ios_base::sync_with_stdio(false); cin.tie(NULL);` to speed up cin and cout. However, don't use this if you're using standard C input/output functions (`scanf`, `printf`, etc.) since it can cause synchronization issues.

5. Use `vector` instead of arrays. They are safer and more flexible.

Here is the optimized version of the above code:

```c++
#include<cstdio>
#include<vector>
#include<random>
#include<map>
#include<algorithm>
#include<ctime>
using namespace std;
typedef long long ll;
const int M = 1e6+105;
bool bz[M];
vector<int> p;
int n;
vector<ll> a;
vector<ll> u;
map<ll, int> w;
ll ans;
void sieve(int n) {
  for (int i = 2; i <= n; i++) {
    if (!bz[i])
      p.push_back(i);
    for (auto pj : p) {
      int k = i*pj;
      if (k > n) break;
      bz[k] = 1;
      if (i % pj == 0) break;
    }
  }
}
void fen(ll n) {
  u.clear();
  for (auto pi : p) {
    if ((ll)pi*pi > n) break;
    if (n % pi == 0) {
      u.push_back(pi);
      while (n%pi == 0) n /= pi;
    }
  }
  if (n > 1) u.push_back(n);
}
void check(ll x) {
  ll s = 0;
  for (int i = 0; i < n; i++) {
    if (a[i] >= x) {
      ll y = a[i] % x;
      s += min(y, x - y);
    } else
      s += x - a[i];
    if (s > ans)
      return;
  }
  ans = s;
}
int main() {
  srand(time(0) + clock());
  sieve(1e6);
  scanf("%d", &n);
  a.resize(n);
  for (int i = 0; i < n; i++) scanf("%lld", &a[i]);
  shuffle(a.begin(), a.end(), default_random_engine(time(0)));
  for (int i = 0; i < min(n, 1000); i++) {
    for (int j = -1; j <= 1; j++) {
      ll x = a[i] + j;
      if (x > 1) {
        fen(x);
        for(auto uk : u) w[uk] = 1;
      }
    }
  }
  ans = n;
  for (auto it = w.begin(); it != w.end(); it++)
    check(it->first);
  printf("%lld\n", ans);
}
```
This version of the code is more idiomatic C++, making use of STL containers like `vector` and `map` and algorithms like `shuffle`, and it avoids deprecated features and non-standard headers. It should also be faster and use less memory due to the use of `vector` in place of arrays and the elimination of unnecessary macros.