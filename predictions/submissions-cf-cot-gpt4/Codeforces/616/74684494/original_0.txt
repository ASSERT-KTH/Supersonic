Optimization Steps:
1. Use iostream functions instead of stdio functions: `std::cin` and `std::cout` can be faster than `scanf` and `printf` in C++, and they also provide type safety.
2. Optimize input/output operations: By using `std::ios::sync_with_stdio(false);`, `cin.tie(NULL);`, and `cout.tie(NULL);`, you can optimize i/o operations.
3. Remove the use of the `max` function to find the maximum value: You can use an `if` condition to check if `(r - l + 1) > mx` directly, instead of using the `max` function. This will reduce the number of function calls.
4. Remove redundant assignment: The assignment `mx = max(mx, r - l + 1);` is redundant and can be removed, as the maximum value is already being updated in the `if` condition above.

Optimized Program:
```
#include <iostream>
using namespace std;

int n, k;
int x[500000];
int freq[1000000] = {0};
int l, r = 0;
int rf, lf;
int mx = -1;
int c = 0;

int main() {
  ios::sync_with_stdio(false); 
  cin.tie(NULL); 
  cout.tie(NULL);

  cin >> n >> k;
  for (int i = 0; i < n; i++)
    cin >> x[i];
  while (r < n) {
    freq[x[r]]++;
    if (freq[x[r]] == 1) {
      c++;
    }
    if (c <= k) {
      if (r - l + 1 > mx) {
        mx = r - l + 1;
        rf = r;
        lf = l;
      }
    }
    while (c > k) {
      if (freq[x[l]] == 1)
        c--;
      freq[x[l]]--;
      l++;
    }
    r++;
  }
  cout << lf + 1 << " " << rf + 1;
  return 0;
}
```
This optimized program should run faster and use less memory than the original program.