Here are the steps to optimize the given code:

1. `using namespace std;` is recommended to avoid in global scope as it can lead to name clashes. Instead, we can use the standard library functions with `std::` prefix.

2. `#include <iostream>` and `#include <stdio.h>` are both included but only `stdio.h` is used. So, we can remove `#include <iostream>`.

3. Instead of using global variables, we can declare them inside the main function. This can reduce the risk of unexpected behavior and make the code easier to understand.

4. The array size in `freq` is unnecessarily large. We can adjust it to a smaller size if the maximum value of `x` is known and significantly less than 1000000.

5. The conditional check `if (r - l + 1 > mx)` is redundant. The value `r - l + 1` is always going to be greater than or equal to `mx` because of the line `mx = max(mx, r - l + 1);`.

6. Using `scanf` and `printf` for input/output is faster than `cin` and `cout`. So we will keep using them.

Here's the optimized version of the code:

```cpp
#include <stdio.h>

int main() {
  int n, k;
  scanf("%d%d", &n, &k);

  int x[500000];
  for (int i = 0; i < n; i++)
    scanf("%d", &x[i]);

  int freq[1000000] = {0};
  int l = 0, r = 0;
  int rf, lf;
  int mx = -1;
  int c = 0;

  while (r < n) {
    freq[x[r]]++;
    if (freq[x[r]] == 1) {
      c++;
    }
    if (c <= k) {
      if (r - l + 1 == mx) {
        rf = r;
        lf = l;
      }
      mx = std::max(mx, r - l + 1);
    }
    while (c > k) {
      if (freq[x[l]] == 1)
        c--;
      freq[x[l]]--;
      l++;
    }
    r++;
  }
  printf("%d %d", lf + 1, rf + 1);
}
```
Remember, the size of `freq` can still be optimized if the maximum value of `x` is known and significantly less than 1000000.