The main optimization here can be achieved by reducing the number of times we calculate "r - l + 1". This calculation is performed in each iteration of the "while (r < n)" loop, which can be costly for large arrays. Instead, we can store the value of "r - l + 1" in a variable and only update it when 'r' or 'l' changes.

We can also replace "printf" with "cout" as "cout" is generally faster. But we need to use "ios_base::sync_with_stdio(false);" and "cin.tie(NULL);" to disable the synchronization of all the C++ standard streams with their corresponding C standard streams.

Also, we can remove the "using namespace std;" line and directly use std:: to improve the readability of the code and avoid naming conflicts.

Explanation of each step:

1. Store "r - l + 1" in a variable: Instead of calculating this value in each iteration, we can store it in a variable and update it whenever 'r' or 'l' changes.

2. Replace "printf" with "cout": "cout" is generally faster than "printf", but we need to use "ios_base::sync_with_stdio(false);" and "cin.tie(NULL);" to disable the synchronization of all the C++ standard streams with their corresponding C standard streams.

3. Remove "using namespace std;": This line can cause naming conflicts and makes the code less readable. It's better to directly use std::.

Here's the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <stdio.h>

int n, k;
int x[500000];
int freq[1000000] = {0};
int l, r = 0;
int rf, lf;
int mx = -1, len = -1;
int c = 0;

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  scanf("%d%d", &n, &k);
  for (int i = 0; i < n; i++)
    scanf("%d", &x[i]);
  while (r < n) {
    freq[x[r]]++;
    if (freq[x[r]] == 1) {
      c++;
    }
    len = r - l + 1;
    if (c <= k) {
      if (len > mx) {
        mx = len;
        rf = r;
        lf = l;
      }
    }
    while (c > k) {
      if (freq[x[l]] == 1)
        c--;
      freq[x[l]]--;
      l++;
      len--;
    }
    r++;
  }
  std::cout << lf + 1 << " " << rf + 1;
  return 0;
}
```
Note: This code assumes that the inputs are valid and does not contain any error-checking code. In a real-world scenario, you should always check that inputs are valid before using them.