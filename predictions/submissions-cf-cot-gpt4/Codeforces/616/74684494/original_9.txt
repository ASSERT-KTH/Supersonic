This program's performance can be optimized in the following ways:

1. The use of `std::max` function can be replaced with an `if` condition. This will eliminate the overhead of function call and will also make the code more straightforward.

2. Instead of using two variables `rf` and `lf` to store the values of `r` and `l` when the maximum value is updated, you can store the maximum pair directly in `rf` and `lf`, which will make the code cleaner.

3. Instead of using `scanf` and `printf` for input and output, you can use `cin` and `cout` which are part of the C++ Standard Library and more efficient.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
int n, k;
int x[500000];
int freq[1000000] = {0};
int l = 0, r = 0;
int rf = 0, lf = 0;
int mx = -1;
int c = 0;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> n >> k;
    for (int i = 0; i < n; i++)
        cin >> x[i];

    while (r < n) {
        freq[x[r]]++;
        if (freq[x[r]] == 1) {
            c++;
        }
        if (c <= k) {
            if (r - l + 1 > mx) {
                mx = r - l + 1;
                lf = l;
                rf = r;
            }
        }
        while (c > k) {
            if (freq[x[l]] == 1)
                c--;
            freq[x[l]]--;
            l++;
        }
        r++;
    }
    cout << lf + 1 << " " << rf + 1;
    return 0;
}
```
This version of code uses `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` to speed up C++ I/O operations and ensures that the updated maximum range is stored immediately instead of waiting until the next comparison with `mx`.
