#include <bits/stdc++.h>
using namespace std;
const int mod = pow(10, 9) + 7;
int sgtree[8000000];
int slow[8000000];
int n, m;
vector<array<int, 3>> ve;
int dfs(int st, int en, int node, int rngst, int rngen, int value) {
  sgtree[node] += slow[node];
  slow[2 * node] += slow[node];
  slow[2 * node + 1] += slow[node];
  slow[node] = 0;
  if (st >= rngst && en <= rngen) {
    slow[node] += value;
    sgtree[node] += slow[node];
    slow[2 * node] += slow[node];
    slow[2 * node + 1] += slow[node];
    slow[node] = 0;
  } else if (!(en < rngst || st > rngen)) {
    dfs(st, (st + en) / 2, 2 * node, rngst, rngen, value);
    dfs(((st + en) / 2) + 1, en, 2 * node + 1, rngst, rngen, value);
    sgtree[node] = min(sgtree[2 * node] + slow[2 * node],
                       sgtree[2 * node + 1] + slow[2 * node + 1]);
  }
  return 0;
}
void del(int i) { dfs(1, m - 1, 1, ve[i][1], ve[i][2], -1); }
void add(int i) { dfs(1, m - 1, 1, ve[i][1], ve[i][2], 1); }
int check() { return sgtree[1] + slow[1]; }
void solve() {
  scanf("%d %d", &n, &m);
  if (m == 2) {
    printf("0\n");
    return;
  }
  for (int i = 0; i < n; i++) {
    int l, r, w;
    scanf("%d %d %d", &l, &r, &w);
    if (l == 1 && r == m) {
      printf("0\n");
      return;
    }
    ve.push_back({w, l, r - 1});
  }
  sort(ve.begin(), ve.end());
  int i = 0, j = -1, ans = 1000000;
  while (j < (ve.size() - 1)) {
    if (check() > 0) {
      del(i);
      ans = min(ans, ve[j][0] - ve[i][0]);
      i++;
    } else {
      j++;
      add(j);
    }
  }
  while (check() > 0) {
    del(i);
    ans = min(ans, ve[j][0] - ve[i][0]);
    i++;
  }
  printf("%d\n", ans);
}
int main() {
  int t = 1;
  for (int tc = 1; tc <= t; tc++) { solve(); }
  return 0;
}