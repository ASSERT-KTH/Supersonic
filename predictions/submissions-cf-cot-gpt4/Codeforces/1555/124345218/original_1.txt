This C++ program seems to be already optimized in terms of the algorithms used. However, there are a few tweaks that can be made to slightly optimize its performance and memory usage:

1. Avoid using "bits/stdc++.h". This is because it includes a lot of unnecessary libraries, which can increase the compilation time. Instead, include only those libraries that are necessary.

2. Avoid using "define" for simple functions like "push_back(pb)", "first(ff)", "second(ss)". This does not provide any performance benefit and can reduce the readability of your code.

3. The variables "sgtree" and "slow" are declared with a size of 8000000, which might be more than required. If you know the maximum possible size these arrays can reach, then declare them with that size to save memory.

4. Instead of using the "int" datatype for the main function, use "void" as it doesn't return anything.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <array>
#include <algorithm>

using namespace std;

const int mod = 1e9 + 7;
int sgtree[8000000];
int slow[8000000];
int n, m;
vector<array<int, 3>> ve;

void dfs(int st, int en, int node, int rngst, int rngen, int value) {
  sgtree[node] += slow[node];
  slow[2 * node] += slow[node];
  slow[2 * node + 1] += slow[node];
  slow[node] = 0;
  if (st >= rngst && en <= rngen) {
    slow[node] += value;
    sgtree[node] += slow[node];
    slow[2 * node] += slow[node];
    slow[2 * node + 1] += slow[node];
    slow[node] = 0;
  } else if (en < rngst || st > rngen) {
    slow[node] += 0;
  } else {
    dfs(st, (st + en) / 2, 2 * node, rngst, rngen, value);
    dfs(((st + en) / 2) + 1, en, 2 * node + 1, rngst, rngen, value);
    sgtree[node] = min(sgtree[2 * node] + slow[2 * node],
                       sgtree[2 * node + 1] + slow[2 * node + 1]);
  }
}

void del(int i) { dfs(1, m - 1, 1, ve[i][1], ve[i][2], -1); }
void add(int i) { dfs(1, m - 1, 1, ve[i][1], ve[i][2], 1); }
int check() { return sgtree[1] + slow[1]; }

void solve() {
  cin >> n >> m;
  if (m == 2) {
    cout << "0\n";
    return;
  }
  for (int i = 0; i < n; i++) {
    int l, r, w;
    cin >> l >> r >> w;
    if (l == 1 && r == m) {
      cout << "0\n";
      return;
    }
    ve.push_back({w, l, r - 1});
  }
  sort(ve.begin(), ve.end());
  int i = 0, j = -1, ans = 1000000;
  while (j < ((int)ve.size() - 1)) {
    if (check() > 0) {
      del(i);
      ans = min(ans, ve[j][0] - ve[i][0]);
      i++;
    } else {
      j++;
      add(j);
    }
  }
  while (check() > 0) {
    del(i);
    ans = min(ans, ve[j][0] - ve[i][0]);
    i++;
  }
  cout << ans << '\n';
}

void main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int t = 1;
  for (int tc = 1; tc <= t; tc++) { 
    solve(); 
  }
}
```