The given code has certain areas where it can be optimized:

1. The inclusion of the `<bits/stdc++.h>` header is not recommended as it includes a lot of unnecessary headers which will increase the compilation time. Instead, include only the necessary headers.

2. Avoid the use of macros for functions like `ff`, `ss`, and `pb`. Instead, use inline functions or use the original functions (`first`, `second`, `push_back`) directly. Macros can lead to unexpected results due to lack of type safety.

3. The use of global variables is generally not recommended. Instead, pass them as parameters to functions where they are needed. This could also potentially reduce memory usage.

4. The `dfs` function can be improved. The condition `slow[node] += 0;` is not needed as it doesn't change the value of `slow[node]`.

5. The array size of `sgtree` and `slow` are quite large. If the maximum size is known and it is smaller, you should reduce the size.

6. Avoid the use of `std::endl` when you can, as it can cause unnecessary flushes of the output stream which is slower than just outputting `'\n'`.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <array>
#include <algorithm>

using namespace std;

const int mod = 1e9 + 7;
int sgtree[8000000];
int slow[8000000];
int n, m;
vector<array<int, 3>> ve;

int dfs(int st, int en, int node, int rngst, int rngen, int value) {
  sgtree[node] += slow[node];
  slow[2 * node] += slow[node];
  slow[2 * node + 1] += slow[node];
  slow[node] = 0;
  if (st >= rngst && en <= rngen) {
    slow[node] += value;
    sgtree[node] += slow[node];
    slow[2 * node] += slow[node];
    slow[2 * node + 1] += slow[node];
    slow[node] = 0;
  } else if (!(en < rngst || st > rngen)) {
    dfs(st, (st + en) / 2, 2 * node, rngst, rngen, value);
    dfs(((st + en) / 2) + 1, en, 2 * node + 1, rngst, rngen, value);
    sgtree[node] = min(sgtree[2 * node] + slow[2 * node],
                       sgtree[2 * node + 1] + slow[2 * node + 1]);
  }
  return 0;
}

void del(int i) { dfs(1, m - 1, 1, ve[i][1], ve[i][2], -1); }
void add(int i) { dfs(1, m - 1, 1, ve[i][1], ve[i][2], 1); }
int check() { return sgtree[1] + slow[1]; }

void solve() {
  cin >> n >> m;
  if (m == 2) {
    cout << "0\n";
    return;
  }
  for (int i = 0; i < n; ++i) {
    int l, r, w;
    cin >> l >> r >> w;
    if (l == 1 && r == m) {
      cout << "0\n";
      return;
    }
    ve.push_back({w, l, r - 1});
  }
  sort(ve.begin(), ve.end());
  int i = 0, j = -1, ans = 1000000;
  while (j < ((int)ve.size() - 1)) {
    if (check() > 0) {
      del(i);
      ans = min(ans, ve[j][0] - ve[i][0]);
      i++;
    } else {
      j++;
      add(j);
    }
  }
  while (check() > 0) {
    del(i);
    ans = min(ans, ve[j][0] - ve[i][0]);
    i++;
  }
  cout << ans << '\n';
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int t = 1;
  for(int tc = 1; tc <= t; ++tc) { solve(); }
  return 0;
}
```

The main change in this code is to replace the macro function `f` with a regular for loop. The unnecessary header file `<bits/stdc++.h>` is also removed. Other changes include removing the unnecessary `slow[node] += 0;` line and using '\n' instead of `std::endl`. These changes should make the code faster and more memory efficient.