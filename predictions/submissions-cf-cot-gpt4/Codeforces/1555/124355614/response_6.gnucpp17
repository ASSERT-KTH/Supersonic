#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 2e6 + 5;
int t[4 * N], push[4 * N];

void makepush(int v, int tl, int tr) {
  if (!push[v])
    return;
  if (tl != tr) {
    int v2 = v * 2;
    push[v2] += push[v];
    push[v2 + 1] += push[v];
    t[v2] += push[v];
    t[v2 + 1] += push[v];
  }
  push[v] = 0;
}

void add(int v, int tl, int tr, int l, int r, int x) {
  if (l > r)
    return;
  makepush(v, tl, tr);
  if (tl == l && tr == r) {
    t[v] += x;
    push[v] += x;
    return;
  }
  int tm = (tl + tr) / 2;
  int min_value = min(r, tm);
  int max_value = max(l, tm + 1);
  int v2 = v * 2;
  add(v2, tl, tm, l, min_value, x);
  add(v2 + 1, tm + 1, tr, max_value, r, x);
  t[v] = min(t[v2], t[v2 + 1]);
}

int main() {
  cin.tie(0);
  cout.tie(0);
  int n, m;
  cin >> n >> m;
  vector<pair<int, pair<int, int>>> s;
  for (int i = 0; i < n; i++) {
    int l, r, w;
    cin >> l >> r >> w;
    s.push_back({w, {l, r - 1}});
  }
  sort(s.begin(), s.end(),
       [&](const pair<int, pair<int, int>> &x,
           const pair<int, pair<int, int>> &y) { return x.first < y.first; });
  int ptr = 0, ans = INT_MAX;
  for (int i = 0; i < n; i++) {
    if (i > 0)
      add(1, 1, m - 1, s[i - 1].second.first, s[i - 1].second.second, -1);
    while (ptr < n && t[1] == 0) {
      add(1, 1, m - 1, s[ptr].second.first, s[ptr].second.second, +1);
      ++ptr;
    }
    if (t[1])
      ans = min(ans, s[ptr].first - s[i].first);
  }
  cout << ans;
}