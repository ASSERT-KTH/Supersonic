There are a few steps we can take to optimize the given program.

1. Removing the use of `bits/stdc++.h`: Although this header file includes a lot of libraries, its use is considered bad practice because it contributes to the increase in compilation time. The better alternative is to include only those libraries that are actually being used in the program. So, we will replace `#include <bits/stdc++.h>` with the necessary libraries.

2. Remove the use of `typedef long long ll;`: This line is not being used anywhere in the program, so it can be removed.

3. Replacing `ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);` with `std::ios::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.tie(nullptr);`: This is a more efficient alternative for the same purpose.

4. Use `std::vector::reserve(size_t n)` to avoid unnecessary reallocations: This will reserve memory for `n` elements, preventing unnecessary reallocations when elements are added to the vector.

5. Use `emplace_back()` instead of `push_back()`: This will construct the object in-place, eliminating the need for a temporary object.

6. Use `auto` in range-based for loop: This can make the code cleaner and easier to read.

Now, let's implement these steps in the program.

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

const int N = 2e6 + 5;
int t[4 * N], push[4 * N];

void makepush(int v, int tl, int tr) {
  if (!push[v])
    return;
  if (tl != tr) {
    push[v * 2] += push[v];
    push[v * 2 + 1] += push[v];
    t[v * 2] += push[v];
    t[v * 2 + 1] += push[v];
  }
  push[v] = 0;
}

void add(int v, int tl, int tr, int l, int r, int x) {
  if (l > r)
    return;
  makepush(v, tl, tr);
  if (tl == l && tr == r) {
    t[v] += x;
    push[v] += x;
    return;
  }
  int tm = (tl + tr) / 2;
  add(v * 2, tl, tm, l, std::min(r, tm), x);
  add(v * 2 + 1, tm + 1, tr, std::max(l, tm + 1), r, x);
  t[v] = std::min(t[v * 2], t[v * 2 + 1]);
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);

  int n, m;
  std::cin >> n >> m;
  std::vector<std::pair<int, std::pair<int, int>>> s;
  s.reserve(n);
  for (int i = 0; i < n; i++) {
    int l, r, w;
    std::cin >> l >> r >> w;
    s.emplace_back(w, std::make_pair(l, r - 1));
  }
  sort(s.begin(), s.end());
  int ptr = -1, ans = INT_MAX;
  for (const auto &item : s) {
    if (&item != &s.front())
      add(1, 1, m - 1, item.second.first, item.second.second, -1);
    while (ptr + 1 < n && t[1] == 0) {
      ++ptr;
      add(1, 1, m - 1, s[ptr].second.first, s[ptr].second.second, +1);
    }
    if (t[1])
      ans = std::min(ans, s[ptr].first - item.first);
  }
  std::cout << ans;
}
```
The above changes should result in a more efficient and slightly faster program.