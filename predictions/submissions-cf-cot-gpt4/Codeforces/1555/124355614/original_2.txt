This program is already quite optimized, but there are still some little optimizations that can be done:

1. Avoid calling makepush() function when it is not necessary.
   In the add() function, makepush() is called at the beginning every time, regardless of whether it is necessary. We can delay calling makepush() until we actually need to push the updates down, which is when tl != tr. 

2. Avoid unnecessary computation in add() function.
   The value of t[v] is recalculated after each recursive call in the add() function. However, this is not necessary if tl == tr, because in this case, v will be a leaf node, and its value will not be updated by any other nodes. Therefore, we can add a condition to avoid this unnecessary computation. 

3. Use fast I/O methods.
   Although the current program has already used some fast I/O methods, it still uses cin and cout for input and output, which are slower than scanf and printf. Therefore, we can replace cin and cout with scanf and printf for better performance.

Below is the optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 2e6 + 5;
int t[4 * N], push[4 * N];
void makepush(int v, int tl, int tr) {
  if (!push[v])
    return;
  if (tl != tr) {
    push[v * 2] += push[v];
    push[v * 2 + 1] += push[v];
    t[v * 2] += push[v];
    t[v * 2 + 1] += push[v];
  }
  push[v] = 0;
}
void add(int v, int tl, int tr, int l, int r, int x) {
  if (l > r)
    return;
  if (tl == l && tr == r) {
    t[v] += x;
    push[v] += x;
    return;
  }
  if (tl != tr) makepush(v, tl, tr);
  int tm = (tl + tr) / 2;
  add(v * 2, tl, tm, l, min(r, tm), x);
  add(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r, x);
  if (tl != tr) t[v] = min(t[v * 2], t[v * 2 + 1]);
}
int main() {
  ios_base ::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  int n, m;
  scanf("%d %d", &n, &m);
  vector<pair<int, pair<int, int>>> s;
  for (int i = 0; i < n; i++) {
    int l, r, w;
    scanf("%d %d %d", &l, &r, &w);
    s.push_back({w, {l, r - 1}});
  }
  sort(s.begin(), s.end(), [&](const pair<int, pair<int, int>> &x, const pair<int, pair<int, int>> &y) { return x.first < y.first; });
  int ptr = -1, ans = INT_MAX;
  for (int i = 0; i < n; i++) {
    if (i > 0)
      add(1, 1, m - 1, s[i - 1].second.first, s[i - 1].second.second, -1);
    while (ptr + 1 < n && t[1] == 0) {
      ++ptr;
      add(1, 1, m - 1, s[ptr].second.first, s[ptr].second.second, +1);
    }
    if (t[1])
      ans = min(ans, s[ptr].first - s[i].first);
  }
  printf("%d", ans);
}
```