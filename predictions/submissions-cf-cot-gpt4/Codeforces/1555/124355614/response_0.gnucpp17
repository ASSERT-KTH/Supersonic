#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

const int N = 2e6 + 5;
int t[4 * N], push[4 * N];

void makepush(int v, int tl, int tr) {
  if (!push[v])
    return;
  if (tl != tr) {
    push[v * 2] += push[v];
    push[v * 2 + 1] += push[v];
    t[v * 2] += push[v];
    t[v * 2 + 1] += push[v];
  }
  push[v] = 0;
}

void add(int v, int tl, int tr, int l, int r, int x) {
  if (l > r)
    return;
  makepush(v, tl, tr);
  if (tl == l && tr == r) {
    t[v] += x;
    push[v] += x;
    return;
  }
  int tm = (tl + tr) / 2;
  add(v * 2, tl, tm, l, std::min(r, tm), x);
  add(v * 2 + 1, tm + 1, tr, std::max(l, tm + 1), r, x);
  t[v] = std::min(t[v * 2], t[v * 2 + 1]);
}

struct Interval {
  int w, l, r;
};

int main() {
  int n, m;
  std::cin >> n >> m;
  std::vector<Interval> s(n);
  for (int i = 0; i < n; i++) {
    std::cin >> s[i].l >> s[i].r >> s[i].w;
    s[i].r--;
  }
  std::sort(s.begin(), s.end(), [](const Interval &x, const Interval &y) { return x.w < y.w; });
  int ptr = -1, ans = INT_MAX;
  for (int i = 0; i < n; i++) {
    if (i > 0)
      add(1, 1, m - 1, s[i - 1].l, s[i - 1].r, -1);
    while (ptr + 1 < n && t[1] == 0) {
      ++ptr;
      add(1, 1, m - 1, s[ptr].l, s[ptr].r, +1);
    }
    if (t[1])
      ans = std::min(ans, s[ptr].w - s[i].w);
  }
  std::cout << ans;
}