This program seems to be already optimized in terms of algorithmic complexity. However, there are few minor modifications which can be made to optimize memory usage and execution time:

1. Use `std::ios::sync_with_stdio(false)` and `std::cin.tie(NULL)` instead of `ios_base::sync_with_stdio(0)` and `cin.tie(0)`. This will decouple `std::cin` from `std::cout`, improving I/O efficiency.

2. Instead of using `push_back()` to add elements to the vector, use `emplace_back()`. It constructs the object in-place, thus saving an extra copy.

3. Use `reserve()` to allocate memory to the vector in advance. This will prevent unnecessary reallocations and copying of elements.

4. Use `auto&` in the sort lambda function to avoid unnecessary copying of elements.

Here's the optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 2e6 + 5;
int t[4 * N], push[4 * N];
void makepush(int v, int tl, int tr) {
  if (!push[v])
    return;
  if (tl != tr) {
    push[v * 2] += push[v];
    push[v * 2 + 1] += push[v];
    t[v * 2] += push[v];
    t[v * 2 + 1] += push[v];
  }
  push[v] = 0;
}
void add(int v, int tl, int tr, int l, int r, int x) {
  if (l > r)
    return;
  makepush(v, tl, tr);
  if (tl == l && tr == r) {
    t[v] += x;
    push[v] += x;
    return;
  }
  int tm = (tl + tr) / 2;
  add(v * 2, tl, tm, l, min(r, tm), x);
  add(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r, x);
  t[v] = min(t[v * 2], t[v * 2 + 1]);
}
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);
  cout.tie(0);
  int n, m;
  cin >> n >> m;
  vector<pair<int, pair<int, int>>> s;
  s.reserve(n);
  for (int i = 0; i < n; i++) {
    int l, r, w;
    cin >> l >> r >> w;
    s.emplace_back(w, make_pair(l, r - 1));
  }
  sort(s.begin(), s.end(),
       [](const auto &x, const auto &y) { return x.first < y.first; });
  int ptr = -1, ans = INT_MAX;
  for (int i = 0; i < n; i++) {
    if (i > 0)
      add(1, 1, m - 1, s[i - 1].second.first, s[i - 1].second.second, -1);
    while (ptr + 1 < n && t[1] == 0) {
      ++ptr;
      add(1, 1, m - 1, s[ptr].second.first, s[ptr].second.second, +1);
    }
    if (t[1])
      ans = min(ans, s[ptr].first - s[i].first);
  }
  cout << ans;
}
```
This program follows the same logic as the original one, but it uses memory more efficiently and has slightly better execution time due to the optimizations.