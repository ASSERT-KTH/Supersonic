This program implements a segment tree with lazy propagation. Here are some steps to optimize the running time and memory usage:

1. **Preallocation of Vector `s`**: Since we know the size `n` beforehand, we can preallocate space for `n` elements in vector `s`. This will reduce the time spent on dynamic resizing of the vector.

2. **Avoiding redundant condition checking**: In the main loop, the condition `if (i > 0)` is checked `n` times, but actually it is false only once. We can start the loop from `1` to avoid this redundant condition checking.

3. **Avoiding the use of `std::pair` and `std::vector`**: Standard library data structures like `std::pair` and `std::vector` can be slow due to dynamic memory allocation and deallocation. Instead, we can use arrays and structs, which are faster and use less memory.

Here's the optimized version of the program:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 2e6 + 5;
struct Segment { int w, l, r; };
int t[4 * N], push[4 * N];
Segment s[N];
void makepush(int v, int tl, int tr) {
  if (!push[v])
    return;
  if (tl != tr) {
    push[v * 2] += push[v];
    push[v * 2 + 1] += push[v];
    t[v * 2] += push[v];
    t[v * 2 + 1] += push[v];
  }
  push[v] = 0;
}
void add(int v, int tl, int tr, int l, int r, int x) {
  if (l > r)
    return;
  makepush(v, tl, tr);
  if (tl == l && tr == r) {
    t[v] += x;
    push[v] += x;
    return;
  }
  int tm = (tl + tr) / 2;
  add(v * 2, tl, tm, l, min(r, tm), x);
  add(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r, x);
  t[v] = min(t[v * 2], t[v * 2 + 1]);
}
int main() {
  ios_base ::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    cin >> s[i].l >> s[i].r >> s[i].w;
    s[i].r--;
  }
  sort(s, s + n, [](const Segment &x, const Segment &y) { return x.w < y.w; });
  int ptr = -1, ans = INT_MAX;
  for (int i = 1; i < n; i++) {
    add(1, 1, m - 1, s[i - 1].l, s[i - 1].r, -1);
    while (ptr + 1 < n && t[1] == 0) {
      ++ptr;
      add(1, 1, m - 1, s[ptr].l, s[ptr].r, +1);
    }
    if (t[1])
      ans = min(ans, s[ptr].w - s[i].w);
  }
  cout << ans;
}
```

Note: The optimization for memory usage in this case mainly comes from the use of arrays instead of `std::vector` and `std::pair`, which have overheads for dynamic memory management and extra fields. The optimization for running time comes from avoiding redundant condition checking and dynamic memory resizing.