This program is already quite optimized, but there are a few modifications we can make to improve its efficiency a bit more:

1. Avoiding the use of `bits/stdc++.h`: This header file includes a lot of unnecessary libraries which can slow down the compilation time. We'll use specific libraries instead.

2. Reducing function calls: The function `makepush()` is called within the `add()` function. This could lead to a function call overhead.

3. Reducing the number of variables: The `ptr` variable is unnecessary and can be replaced by `i`.

4. Directly using `std::min` instead of lambda function in sorting.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#define ll long long
#define N 2000005
using namespace std;

int t[4 * N], push[4 * N];

void add(int v, int tl, int tr, int l, int r, int x) {
  if (!push[v] && l <= r) {
    if (tl != tr) {
      push[v * 2] += push[v];
      push[v * 2 + 1] += push[v];
      t[v * 2] += push[v];
      t[v * 2 + 1] += push[v];
    }
    push[v] = 0;
    if (tl == l && tr == r) {
      t[v] += x;
      push[v] += x;
      return;
    }
    int tm = (tl + tr) / 2;
    add(v * 2, tl, tm, l, min(r, tm), x);
    add(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r, x);
    t[v] = min(t[v * 2], t[v * 2 + 1]);
  }
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int n, m;
  cin >> n >> m;
  vector<pair<int, pair<int, int>>> s;

  for (int i = 0; i < n; i++) {
    int l, r, w;
    cin >> l >> r >> w;
    s.push_back({w, {l, r - 1}});
  }

  sort(s.begin(), s.end());
  int ans = INT_MAX;

  for (int i = 0; i < n; i++) {
    if (i > 0)
      add(1, 1, m - 1, s[i - 1].second.first, s[i - 1].second.second, -1);
    while (i < n && t[1] == 0) {
      add(1, 1, m - 1, s[i].second.first, s[i].second.second, +1);
      i++;
    }
    if (t[1])
      ans = min(ans, s[i].first - s[i].first);
  }
  cout << ans;
}
```

Please note that the optimization potential of the given code was already quite high, hence the changes are rather minor. But these small changes can lead to considerable improvements in more complex scenarios.