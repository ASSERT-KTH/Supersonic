Here are some optimizations that can be done on the given program:

1. Avoid using `#include <bits/stdc++.h>`: This header file includes too many unnecessary headers, which increases the compilation time. We should only include the headers that are actually used in the program. In this case, we only need `iostream`, `vector`, `queue`, and `algorithm`.

2. Avoid using `using namespace std`: This directive can lead to namespace collision, it is better to use `std::` prefix when needed.

3. Avoid using `#define` for constants: In C++, it is better to use `const` or `constexpr` for defining constants. So we replace `#define int long long` with a typedef and `#define maxn 100005` with a `constexpr`.

4. Avoid using `make_pair`: In modern C++, you can use `{}` to make a pair or vector, which is simpler and cleaner.

5. Use `std::ios_base::sync_with_stdio(false)` and `std::cin.tie(NULL)`: These lines of code can turn off some of the C++ stdio synchronization, which can speed up the I/O operations.

6. Avoid declaring large arrays on stack: Instead of declaring the `seen` array on stack, we can declare it on heap using `std::vector`. It's safer and prevents stack overflow for large inputs.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

typedef long long ll;
constexpr ll maxn = 100005;

std::vector<std::pair<ll, ll>> adj[maxn];

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    ll n;
    std::cin >> n;

    ll sum = 0;
    for (ll i = 0; i < n - 1; i++) {
        ll x, y, w;
        std::cin >> x >> y >> w;
        adj[x - 1].push_back({y - 1, w});
        adj[y - 1].push_back({x - 1, w});
        sum += w;
    }

    std::queue<std::pair<ll, ll>> q;
    std::vector<ll> seen(n + 1, 0);
    q.push({0, 0});
    seen[0] = 1;

    ll big = -1;

    while (!q.empty()) {
        std::pair<ll, ll> s = q.front();
        q.pop();
        big = std::max(big, s.second);
        for (auto t : adj[s.first]) {
            if (!seen[t.first]) {
                seen[t.first] = 1;
                q.push({t.first, s.second + t.second});
            }
        }
    }

    std::cout << (2 * sum) - big << std::endl;

    return 0;
}
```