Let's go over the program and see where we can optimize it.

1. `#include<bits/stdc++.h>`: This header file includes almost all Standard Library headers, thus making the program bulkier and slower to compile. It can be replaced with specific headers that are actually required by the program. In this case, the required headers are `iostream`, `vector`, `queue`, `utility`.

2. `#define int long long`: This line is defining the int type as long long which is not recommended due to its potential to cause confusion. It's better to explicitly declare the variables as long long where required.

3. `vector<pair<int, int>> adj[maxn]`: This line declares an array of vectors of pair type. If the array size is too large, it can cause stack overflow. To avoid this, we can use dynamic memory allocation.

4. `int seen[n + 1] = {}`: Variable-length arrays are not a part of the C++ standard and should be avoided. We can use `std::vector` instead.

5. Usage of `push_back` and `make_pair` functions: These can be replaced with `emplace_back` for better performance. The `emplace_back` method constructs the pair object directly into the vector without creating a temporary pair object, thus reducing overhead.

6. The `for` loop that iterates over `adj[s.first]`: Here, `auto t` creates a copy of each pair in the vector. It's better to use a reference to avoid unnecessary copying: `auto& t`.

7. `cin` and `cout`: The I/O operations can be made faster by disabling the synchronization between the C and C++ standard streams.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <utility>

using namespace std;

const int maxn = 100005;
vector<pair<int, int>>* adj = new vector<pair<int, int>>[maxn];

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n;
  cin >> n;
  long long sum = 0;
  for (int i = 0; i < n - 1; i++) {
    int x, y;
    long long w;
    cin >> x >> y >> w;
    adj[x - 1].emplace_back(y - 1, w);
    adj[y - 1].emplace_back(x - 1, w);
    sum += w;
  }
  queue<pair<int, int>> q;
  vector<int> seen(n + 1, 0);
  q.emplace(0, 0);
  seen[0] = 1;
  int big = -1;
  while (!q.empty()) {
    pair<int, int> s = q.front();
    q.pop();
    big = max(big, s.second);
    for (auto& t : adj[s.first]) {
      if (!seen[t.first]) {
        seen[t.first] = 1;
        q.emplace(t.first, s.second + t.second);
      }
    }
  }
  cout << (2 * sum) - big << endl;
  delete[] adj;
  return 0;
}
```