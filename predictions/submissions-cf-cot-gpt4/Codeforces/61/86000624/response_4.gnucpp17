#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

const int MAXN = 100005;
vector<pair<int, int>> adj[MAXN];

int main() {
  int n;
  cin >> n;
  int sum = 0;
  for (int i = 0; i < n - 1; i++) {
    int x, y, w;
    cin >> x >> y >> w;
    adj[x - 1].reserve(n);
    adj[y - 1].reserve(n);
    adj[x - 1].push_back({y - 1, w});
    adj[y - 1].push_back({x - 1, w});
    sum += w;
  }
  queue<pair<int, int>> q;
  bool seen[n + 1] = {false};
  q.push({0, 0});
  seen[0] = true;
  int big = -1;
  while (!q.empty()) {
    pair<int, int> s = q.front();
    q.pop();
    big = max(big, s.second);
    for (const auto &t : adj[s.first]) {
      if (!seen[t.first]) {
        seen[t.first] = true;
        q.push({t.first, s.second + t.second});
      }
    }
  }
  cout << (2 * sum) - big << '\n';
}