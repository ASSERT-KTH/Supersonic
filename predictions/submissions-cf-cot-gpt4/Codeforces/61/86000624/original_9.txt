Here are some optimizations that can be done to the given C++ program:

1. **Reserving Vector Space**: `push_back` function of vector might cause the vector to reallocate its underlying array if the current array is too small to fit the new element. So, if the size of the vector is known in advance, it's better to reserve the space using `reserve` function.

2. **Avoiding `std::pair` Instantiation**: Instead of creating a `std::pair` and then pushing it to the queue, you can directly push to the queue using `emplace` function. This avoids the instantiation of an extra `std::pair` object.

3. **Pass by Reference in Range-Based Loop**: In the range-based loop, `auto t : adj[s.first]` is creating a copy of each element. Changing it to `auto& t : adj[s.first]` will instead take a reference to the element, avoiding unnecessary copies.

4. **Use of memset instead of loop for array initialization**: Array initialization using loop can be avoided using the `memset` function.

Here is the optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define int long long
const int maxn = 100005;
vector<pair<int, int>> adj[maxn];
signed main() {
  int n;
  cin >> n;
  int sum = 0;
  for (int i = 0; i < n - 1; i++) {
    int x, y, w;
    cin >> x >> y >> w;
    adj[x - 1].reserve(2);
    adj[y - 1].reserve(2);
    adj[x - 1].emplace_back(y - 1, w);
    adj[y - 1].emplace_back(x - 1, w);
    sum += w;
  }
  queue<pair<int, int>> q;
  int seen[n + 1];
  memset(seen, 0, sizeof(seen));
  q.emplace(0, 0);
  seen[0] = 1;
  int big = -1;
  while (!q.empty()) {
    pair<int, int> s = q.front();
    q.pop();
    big = max(big, s.second);
    for (auto& t : adj[s.first]) {
      if (!seen[t.first]) {
        seen[t.first] = 1;
        q.emplace(t.first, s.second + t.second);
      }
    }
  }
  cout << (2 * sum) - big << endl;
}
```
In this code, use of `emplace_back` and `emplace` is more efficient because they construct the object directly in the memory allocated by the container. Also, `reserve` function avoids unnecessary reallocations and copying of elements. In the `for` loop, `auto& t` ensures that we're referencing the original pair, not creating a new one. Finally, `memset` is a fast way to initialize all elements of an array.