Here are some optimization steps:

1. Avoid using `#include <bits/stdc++.h>` - This header file includes a lot of unnecessary stuff which increases compilation time. Include only those headers which are necessary.

2. Avoid using `using namespace std;` - This can cause name collision problems. It's better to use `std::` before every standard function or object.

3. Use `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(NULL);` - These two lines disable the synchronization of all the C++ standard streams with their corresponding C standard streams. This makes reading from `std::cin` and writing to `std::cout` much faster.

4. Use prefix increment operator (++i instead of i++) in loops - The prefix version avoids unnecessary temporary object creation and destruction, making it slightly more efficient.

5. Avoid creating unnecessary temporary pairs: Instead of creating a temporary pair and then pushing it into the queue, we can directly pass the values to the `push` function which will create a pair in place.

6. Use array instead of vector for adjacency list: An array is more memory efficient than a vector. Also, we can use an array of pairs instead of a vector of pairs to further optimize the memory usage.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

#define MAXN 100005

std::pair<int, int> adj[MAXN];

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  int n;
  std::cin >> n;
  int sum = 0;

  for (int i = 0; i < n - 1; ++i) {
    int x, y, w;
    std::cin >> x >> y >> w;
    adj[x - 1].push_back({y - 1, w});
    adj[y - 1].push_back({x - 1, w});
    sum += w;
  }

  std::queue<std::pair<int, int>> q;
  int seen[n + 1] = {};
  q.push({0, 0});
  seen[0] = 1;
  int big = -1;

  while (!q.empty()) {
    std::pair<int, int> s = q.front();
    q.pop();
    big = std::max(big, s.second);
    for (const auto &t : adj[s.first]) {
      if (!seen[t.first]) {
        seen[t.first] = 1;
        q.push({t.first, s.second + t.second});
      }
    }
  }

  std::cout << (2 * sum) - big << '\n';

  return 0;
}
```
Please note that the efficiency of these optimizations may vary depending on the compiler and the specific circumstances of the program.