The given program is well-optimized for most part, but there are a few minor tweaks that can be made to slightly improve its performance.

Optimizations:

1. Replace `#include <bits/stdc++.h>` with only needed libraries: It's a common practice to use `#include <bits/stdc++.h>` in competitive programming, yet it's not recommended for production code because it includes many unnecessary libraries, which could slow down compilation time. Instead, only include necessary libraries.

2. Use `emplace_back` instead of `push_back`: `emplace_back` creates the object in-place, avoiding the overhead of creating a temporary object and moving it into the vector. This can yield better performance.

3. Avoid copying in the range-based for loop: In the range-based for loop, `auto t : adj[s.first]` copies each element of `adj[s.first]`. It's better to use `const auto& t : adj[s.first]` to avoid copying and improve performance.

4. Use `std::ios::sync_with_stdio(false);` and `std::cin.tie(NULL);`: These lines speed up cin/cout operations by decoupling cin from cout, and by turning off synchronization with the C standard library.

Here's the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
#define int long long
const int maxn = 100005;
vector<pair<int, int>> adj[maxn];
signed main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  int n;
  cin >> n;
  int sum = 0;
  for (int i = 0; i < n - 1; i++) {
    int x, y, w;
    cin >> x >> y >> w;
    adj[x - 1].emplace_back(y - 1, w);
    adj[y - 1].emplace_back(x - 1, w);
    sum += w;
  }
  queue<pair<int, int>> q;
  int seen[n + 1] = {};
  q.emplace(0, 0);
  seen[0] = 1;
  int big = -1;
  while (!q.empty()) {
    pair<int, int> s = q.front();
    q.pop();
    big = max(big, s.second);
    for (const auto& t : adj[s.first]) {
      if (!seen[t.first]) {
        seen[t.first] = 1;
        q.emplace(t.first, s.second + t.second);
      }
    }
  }
  cout << (2 * sum) - big << endl;
}
```

Please note that these changes are very minor and the performance improvement might not be noticeable for small inputs. The original code is already quite efficient.