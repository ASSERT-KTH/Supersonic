The given C++ program seems to implement a tree-like data structure to store and process some data. The optimizations I would suggest are:

1. Instead of using a pair and pushing into the queue, use a structure. This will save memory because we don't need to create a new pair every time.

2. Use memset() to initialize the seen array. This is faster than using a loop.

3. Use a priority queue instead of a queue to avoid the use of 'max' operation in the while loop which has a linear time complexity. Using a priority queue will reduce this time complexity to logarithmic.

Here is the modified code:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define int long long
const int maxn = 100005;
struct node{
    int first;
    int second;
};
vector<node> adj[maxn];
signed main() {
  int n;
  cin >> n;
  int sum = 0;
  for (int i = 0; i < n - 1; i++) {
    int x, y, w;
    cin >> x >> y >> w;
    adj[x - 1].push_back({y - 1, w});
    adj[y - 1].push_back({x - 1, w});
    sum += w;
  }
  priority_queue<node> q;
  int seen[n + 1];
  memset(seen,0,sizeof(seen));
  q.push({0, 0});
  seen[0] = 1;
  int big = -1;
  while (!q.empty()) {
    node s = q.top();
    q.pop();
    big = s.second;
    for (auto t : adj[s.first]) {
      if (!seen[t.first]) {
        seen[t.first] = 1;
        q.push({t.first, s.second + t.second});
      }
    }
  }
  cout << (2 * sum) - big << endl;
}
```