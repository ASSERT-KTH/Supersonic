Here are the steps to optimize the program:

1. Replace `#include <bits/stdc++.h>` with specific libraries. Including `bits/stdc++.h` is a bad practice because it includes more than necessary libraries, increasing the compile time and memory footprint of the program.

2. Remove `#define int long long`. Since you are not using any `int` that needs to be a `long long`, it is unnecessary and can cause confusion.

3. Use `reserve` function for vector to avoid multiple reallocations. This is beneficial when you know the number of elements that will be inserted into the vector.

4. Avoid copying pairs in the for loop by using a constant reference.

5. Replace `make_pair` function with `{}` to create pairs. This is more concise and faster.

6. Initialize `seen` array with `false` instead of `{}`.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

const int MAXN = 100005;
vector<pair<int, int>> adj[MAXN];

int main() {
  int n;
  cin >> n;
  int sum = 0;
  for (int i = 0; i < n - 1; i++) {
    int x, y, w;
    cin >> x >> y >> w;
    adj[x - 1].reserve(n);
    adj[y - 1].reserve(n);
    adj[x - 1].push_back({y - 1, w});
    adj[y - 1].push_back({x - 1, w});
    sum += w;
  }
  queue<pair<int, int>> q;
  bool seen[n + 1] = {false};
  q.push({0, 0});
  seen[0] = true;
  int big = -1;
  while (!q.empty()) {
    pair<int, int> s = q.front();
    q.pop();
    big = max(big, s.second);
    for (const auto &t : adj[s.first]) {
      if (!seen[t.first]) {
        seen[t.first] = true;
        q.push({t.first, s.second + t.second});
      }
    }
  }
  cout << (2 * sum) - big << '\n';
}
```

Note: The optimization also depends on the compiler and its version. The above code may not be optimized in some compiler versions.
