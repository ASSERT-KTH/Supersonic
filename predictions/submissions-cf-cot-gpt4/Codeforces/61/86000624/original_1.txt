Here are the steps to optimize the program:

1) Avoid using `#include <bits/stdc++.h>` as it includes more files than necessary, which increases the compilation time. Instead, include only the specific libraries that are used in the code.

2) Instead of using `#define int long long`, use a typedef. In C++, it's more common to use typedef or using for this purpose.

3) Instead of using `vector<pair<int,int>>`, use `vector<array<int, 2>>`. This is because `std::array` is more efficient than `std::pair` in terms of memory usage since it doesn't need to store any additional information for types.

4) Use `emplace_back()` instead of `push_back(make_pair(...))`. `emplace_back()` constructs the object in-place, avoiding the need for a temporary object and a copy.

5) Instead of `make_pair()`, you can use brace initialization `{}`.

6) Use `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(NULL);` to speed up I/O operations.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <array>
using namespace std;
typedef long long ll;
const ll maxn = 100005;
vector<array<ll, 2>> adj[maxn];
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  ll n;
  cin >> n;
  ll sum = 0;
  for (ll i = 0; i < n - 1; i++) {
    ll x, y, w;
    cin >> x >> y >> w;
    adj[x - 1].emplace_back(array<ll, 2>{y - 1, w});
    adj[y - 1].emplace_back(array<ll, 2>{x - 1, w});
    sum += w;
  }
  queue<array<ll, 2>> q;
  ll seen[n + 1] = {};
  q.push({0, 0});
  seen[0] = 1;
  ll big = -1;
  while (!q.empty()) {
    array<ll, 2> s = q.front();
    q.pop();
    big = max(big, s[1]);
    for (auto t : adj[s[0]]) {
      if (!seen[t[0]]) {
        seen[t[0]] = 1;
        q.push({t[0], s[1] + t[1]});
      }
    }
  }
  cout << (2 * sum) - big << endl;
  return 0;
}
```