The given C++ code is already quite efficient. The code essentially handles queries for a graph with nodes and edges, and it uses a range minimum query (RMQ), which is an efficient method for handling such queries.

However, there is a small optimization that can be done by reducing the number of times the `vector::push_back()` function is called in the `dfs()` function. This function is used for depth-first search in the graph. Each time `push_back()` is called, it could potentially lead to a reallocation of the entire vector if its capacity is exceeded, which can be costly. We can prevent this by reserving the necessary space for the vector beforehand.

Here is the optimized code:

```cpp
// ...
void dfs(int node, int par) {
    parent[node] = par;
    depth[node] = par < 0 ? 0 : depth[par] + 1;
    subtree_size[node] = 1;
    first_occurrence[node] = euler.size();

    euler.reserve(euler.size() + adj[node].size() + 1); // Add this line

    euler.push_back(node);
    tour_list[tour] = node;
    tour_start[node] = tour++;
    if (par >= 0)
      adj[node].erase(find(adj[node].begin(), adj[node].end(), par));
    for (int child : adj[node]) {
      dfs(child, node);
      subtree_size[node] += subtree_size[child];
      euler.push_back(node);
    }
    tour_end[node] = tour;
  }
// ...
```

This optimization reserves the memory for `euler` in advance, reducing the number of potential vector reallocations. Although the initial allocation of memory might take some time, it would be lesser than the time taken for multiple reallocations, thus making the program run faster. Note, however, that this optimization might increase the peak memory usage of the program slightly.