#include <algorithm>
#include <cassert>
#include <cmath>
#include <iostream>
#include <vector>
using namespace std;
const int MOD = 998244353;
// Similar code as before...
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);  // tying cout's stream as well
  cin >> N >> Q;
  APPLY = 1.0 * sqrt(N) + 1;
  lca.init(N);
  lca.adj.reserve(N);  // Reserving space for adjacency list
  for (int i = 0; i < N - 1; i++) {
    int u, v;
    cin >> u >> v;
    u--;
    v--;
    lca.add_edge(u, v);
  }
  lca.build();
  values.assign(N, 0);
  vector<query> pending_queries;
  pending_queries.reserve(APPLY);  // Reserving space for pending_queries
  mod_int inv_N = mod_int(1) / N;
  for (int q = 0; q < Q; q++) {
    query qry;
    cin >> qry.type >> qry.v;
    qry.v--;
    if (qry.type == 1) {
      int d;
      cin >> d;
      qry.d = d;
      pending_queries.emplace_back(qry);  // using emplace_back()
    } else if (qry.type == 2) {
      // Similar code as before...
      cout << answer << '\n';  // using '\n' instead of endl
    } else {
      // assert(false);  Removed assert
    }
    // Similar code as before...
  }
}
