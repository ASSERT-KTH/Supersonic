#include <algorithm>
#include <cassert>
#include <cmath>
#include <iostream>
#include <vector>
using namespace std;
constexpr int MOD = 998244353;
struct mod_int {
  //...
  static int mod_inv(int a, int m = MOD) {
    //...
  }
  inline explicit operator int() const { return val; }
  inline mod_int &operator+=(const mod_int &other) {
    //...
  }
  inline mod_int &operator-=(const mod_int &other) {
    //...
  }
  //...
  inline mod_int &operator*=(const mod_int &other) {
    //...
  }
  inline mod_int &operator/=(const mod_int &other) { return *this *= other.inv(); }
  inline friend mod_int operator+(const mod_int &a, const mod_int &b) {
    //...
  }
  inline friend mod_int operator-(const mod_int &a, const mod_int &b) {
    //...
  }
  inline friend mod_int operator*(const mod_int &a, const mod_int &b) {
    //...
  }
  inline friend mod_int operator/(const mod_int &a, const mod_int &b) {
    //...
  }
  //...
  inline mod_int operator-() const { return val == 0 ? 0 : MOD - val; }
  inline bool operator==(const mod_int &other) const { return val == other.val; }
  inline bool operator!=(const mod_int &other) const { return val != other.val; }
  inline mod_int inv() const { return mod_inv(val); }
  mod_int pow(long long p) const {
    //...
  }
  friend ostream &operator<<(ostream &stream, const mod_int &m) {
    return stream << m.val;
  }
};

template <typename T, bool maximum_mode = false> struct RMQ {
  //...
  inline static int largest_bit(int x) { return 31 - __builtin_clz(x); }
  inline int better_index(int a, int b) const {
    //...
  }
  void build(const vector<T> &_values) {
    //...
  }
  inline int query_index(int a, int b) const {
    //...
  }
  inline T query_value(int a, int b) const { return values[query_index(a, b)]; }
};

// LCA struct and query struct are same 

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  //...
  cerr << "Apply size: " << APPLY << '\n'; // replace endl with '\n'
  lca.init(N);
  //...
  values.reserve(N); // reserve space for vector
  //...
  for (query &prev : pending_queries)
    //...
  cout << answer << '\n'; // replace endl with '\n'
  //...
}