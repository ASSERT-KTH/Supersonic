This C/C++ code is already quite optimized in terms of algorithmic complexity and memory usage. However, there are a few possible refinements:

1. Inline Functions: Some of the functions in the `mod_int` struct and other structs are small and called frequently. Making these functions inline can save the overhead of function calls.

2. Reserve Memory: When we know the size of a vector in advance, we can use the `reserve()` function to avoid multiple reallocations.

3. Avoid Unnecessary Copy: In several places, objects are being passed by value, which involves a copy. We can instead pass them by constant reference to avoid the copy.

4. Avoid Unnecessary Operations: In the `mod_int` operator functions, we're creating a new `mod_int` object and then immediately modifying it. We can instead directly perform the modification on `val`.

Here is the optimized version of the code:

```cpp
#include <algorithm>
#include <cassert>
#include <cmath>
#include <iostream>
#include <vector>
using namespace std;
const int MOD = 998244353;
struct mod_int {
  int val;
  mod_int(long long v = 0) {
    if (v < 0)
      v = v % MOD + MOD;
    if (v >= MOD)
      v %= MOD;
    val = v;
  }
  static int mod_inv(int a, int m = MOD) {
    // ... (same as original)
  }
  explicit operator int() const { return val; }
  mod_int &operator+=(const mod_int &other) {
    val += other.val;
    if (val >= MOD)
      val -= MOD;
    return *this;
  }
  mod_int &operator-=(const mod_int &other) {
    val -= other.val;
    if (val < 0)
      val += MOD;
    return *this;
  }
  // ... (same as original)
  mod_int &operator*=(const mod_int &other) {
    val = fast_mod((uint64_t)val * other.val);
    return *this;
  }
  mod_int &operator/=(const mod_int &other) { return *this *= other.inv(); }
  friend inline mod_int operator+(const mod_int &a, const mod_int &b) {
    return mod_int((int)a + (int)b);
  }
  friend inline mod_int operator-(const mod_int &a, const mod_int &b) {
    return mod_int((int)a - (int)b);
  }
  friend inline mod_int operator*(const mod_int &a, const mod_int &b) {
    return mod_int((int)a * (int)b);
  }
  friend inline mod_int operator/(const mod_int &a, const mod_int &b) {
    return mod_int((int)a / (int)b);
  }
  // ... (same as original)
  mod_int &operator++() {
    val = val == MOD - 1 ? 0 : val + 1;
    return *this;
  }
  // ... (same as original)
};
// ... (same as original)
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cin >> N >> Q;
  APPLY = 1.0 * sqrt(N) + 1;
  cerr << "Apply size: " << APPLY << endl;
  lca.init(N);
  for (int i = 0; i < N - 1; i++) {
    int u, v;
    cin >> u >> v;
    u--;
    v--;
    lca.add_edge(u, v);
  }
  lca.build();
  values.assign(N, 0);
  vector<query> pending_queries;
  pending_queries.reserve(APPLY);
  mod_int inv_N = mod_int(1) / N;
  for (int q = 0; q < Q; q++) {
    query qry;
    cin >> qry.type >> qry.v;
    qry.v--;
    if (qry.type == 1) {
      int d;
      cin >> d;
      qry.d = d;
      pending_queries.push_back(qry);
    } else if (qry.type == 2) {
      mod_int answer = values[qry.v];
      for (const query &prev : pending_queries)
        // ... (same as original)
    } else {
      assert(false);
    }
    // ... (same as original)
  }
}
```
In this optimized version:
- Functions like `operator+`, `operator-`, `operator*` and `operator/` in `mod_int` struct have been made inline.
- The `pending_queries` vector is reserved at the beginning of `main()`.
- The `query` object `prev` is passed by reference in the loop at qry.type == 2.
- In `mod_int` operator functions, the operations are performed directly on `(int)a` and `(int)b` instead of creating a new `mod_int` object and then modifying it.

Please note that the optimization effect might be minimal or even negligible due to compiler optimizations. Also, making a function inline suggests the compiler to make the function inline, but the compiler may or may not heed the suggestion.