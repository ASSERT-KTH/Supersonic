#include <algorithm>
#include <cmath>
#include <iostream>
#include <vector>
using namespace std;
const int MOD = 998244353;
struct mod_int {
  // Rest of the code
  static unsigned fast_mod(uint64_t x, unsigned m = MOD) {
    return x % m;
  }
  // Rest of the code
};
// Rest of the code
void RMQ::build(const vector<T> &_values) {
    // Rest of the code
    for (int k = 1, b = 2; k < levels; k++, b <<= 1)
      for (int i = 0; i <= n - b; i++)
        range_low[k][i] = better_index(range_low[k - 1][i],
                                       range_low[k - 1][i + b / 2]);
  }
// Rest of the code
int main() {
  cin >> N >> Q;
  APPLY = 1.0 * sqrt(N) + 1;
  lca.init(N);
  // Rest of the code
    if ((int)pending_queries.size() >= APPLY) {
      updates.assign(N, 0);
      query_d.assign(N, 0);
      // Rest of the code
      for (int node : lca.tour_list) {
        values[node] += updates[node];
        for (int child : lca.adj[node])
          updates[child] += updates[node];
      }
      pending_queries.clear();
    }
  }
}