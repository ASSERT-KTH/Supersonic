//...
friend mod_int operator+(mod_int &a, const mod_int &b) { // avoid copy of a
    return a += b;
}
friend mod_int operator-(mod_int &a, const mod_int &b) { // avoid copy of a
    return a -= b;
}
//...
void build(const vector<T> &_values) {
    values = _values;
    n = values.size();
    levels = largest_bit(n) + 1;
    range_low.reserve(levels); // reserve space for vectors
    //...
}
void dfs(int node, int par) {
    //...
    euler.reserve(n*2); // reserve space for vectors
    //...
}
void build() {
    //...
    euler.reserve(n*2); // reserve space for vectors
    vector<int> euler_depths;
    euler_depths.reserve(euler.size()); // reserve space for vectors
    //...
}
//...
int main() {
    //...
    values.reserve(N); // reserve space for vectors
    vector<query> pending_queries;
    pending_queries.reserve(APPLY); // reserve space for vectors
    //...
}