// ...
void dfs(int node, int par) {
    parent[node] = par;
    depth[node] = par < 0 ? 0 : depth[par] + 1;
    subtree_size[node] = 1;
    first_occurrence[node] = euler.size();

    euler.reserve(euler.size() + adj[node].size() + 1); // Add this line

    euler.push_back(node);
    tour_list[tour] = node;
    tour_start[node] = tour++;
    if (par >= 0)
      adj[node].erase(find(adj[node].begin(), adj[node].end(), par));
    for (int child : adj[node]) {
      dfs(child, node);
      subtree_size[node] += subtree_size[child];
      euler.push_back(node);
    }
    tour_end[node] = tour;
  }
// ...