The given C++ code performs a variety of complex operations using multiple data structures and algorithms. It's not an easy task to optimize such a code without a specific use-case or a bottleneck. However, there are a few general strategies that can help improve the performance of the program.

1. Use `reserve()` for vectors: The `std::vector` in C++ reallocates its memory when the size of the vector exceeds its capacity. This reallocation process can be expensive in terms of time. To optimize this, you can use the `reserve()` function in the vector that reserves a specified amount of memory in advance.

2. Avoid unnecessary calculations: Try to perform calculations outside loops and if possible, pre-calculate values before loops to save time.

3. Use `std::ios_base::sync_with_stdio(false);`: This can give you a significant gain in performance when input or output operations are more.

4. Avoid using `endl` as it flushes the output buffer each time, which can be a time-consuming process. Instead, use "\n".

5. Avoid using `assert()`: The `assert()` macro is used to assist with debugging by making the program stop if a certain condition isn't met. However, it adds extra overhead to the program. Removing them in the production code can speed up the execution.

6. Use `emplace_back()` instead of `push_back()`: `emplace_back()` constructs the object in-place, thus, it's more efficient than `push_back()`.

Please note that these tips should be used according to the specific use-case. There might be cases where these tips are irrelevant or might even degrade the performance.

It would be great if you can provide the specific use-case or the part of the code which you think is the bottleneck.

Here is the code with some of the optimizations applied:

```cpp
#include <algorithm>
#include <cassert>
#include <cmath>
#include <iostream>
#include <vector>
using namespace std;
const int MOD = 998244353;
// Similar code as before...
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);  // tying cout's stream as well
  cin >> N >> Q;
  APPLY = 1.0 * sqrt(N) + 1;
  lca.init(N);
  lca.adj.reserve(N);  // Reserving space for adjacency list
  for (int i = 0; i < N - 1; i++) {
    int u, v;
    cin >> u >> v;
    u--;
    v--;
    lca.add_edge(u, v);
  }
  lca.build();
  values.assign(N, 0);
  vector<query> pending_queries;
  pending_queries.reserve(APPLY);  // Reserving space for pending_queries
  mod_int inv_N = mod_int(1) / N;
  for (int q = 0; q < Q; q++) {
    query qry;
    cin >> qry.type >> qry.v;
    qry.v--;
    if (qry.type == 1) {
      int d;
      cin >> d;
      qry.d = d;
      pending_queries.emplace_back(qry);  // using emplace_back()
    } else if (qry.type == 2) {
      // Similar code as before...
      cout << answer << '\n';  // using '\n' instead of endl
    } else {
      // assert(false);  Removed assert
    }
    // Similar code as before...
  }
}

```

Remember, the optimizations here are general and may not significantly improve the performance of your code. For more effective optimizations, it is necessary to identify and understand the bottlenecks in your specific use-case.