The code provided is quite large and contains many unnecessary parts for the given task in the `main()` function. The code can be optimized in the following ways:

1. Remove unused headers: The first line `#include <bits/stdc++.h>` includes many unnecessary headers which are not used in the code. Instead, we should only include necessary headers to reduce the compiling time.

2. Remove unnecessary typedefs and macros: There are many typedefs and macros defined in the code which are not used.

3. Remove unused functions: Remove all the functions that are not used in the code.

4. Memory optimization: The array `a` can be declared with size `6` instead of `10` as we only need `6` elements in the array.

5. Calculation Optimization: The value of `ang` is calculated every time in the `main()` function. Instead, we can calculate it once and use it everywhere in the code.

Let's apply these optimizations step by step to the given code:

```c++
#include <iostream>
#include <cmath>
using namespace std;

const double PI = acos(-1);
#define sqr(a) ((a) * (a))

double TriangleAreaWithSide(double a, double b, double c) {
    double s = (a + b + c) / 2;
    return sqrt(s * (s - a) * (s - b) * (s - c));
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    double a[6];
    for (int i = 0; i < 6; i++) {
        cin >> a[i];
    }

    double ang = PI / 3; // 120 degrees in radians
    double A1 = ((a[0] * a[1]) / 2) * sin(ang);
    double A2 = ((a[2] * a[3]) / 2) * sin(ang);
    double A3 = ((a[4] * a[5]) / 2) * sin(ang);
    double x1 = sqrt(sqr(a[0]) + sqr(a[1]) - (2.0 * a[0] * a[1] * cos(ang)));
    double x2 = sqrt(sqr(a[3]) + sqr(a[2]) - (2.0 * a[3] * a[2] * cos(ang)));
    double x3 = sqrt(sqr(a[4]) + sqr(a[5]) - (2.0 * a[4] * a[5] * cos(ang)));
    double A4 = TriangleAreaWithSide(x1, x2, x3);
    double ar = sqrt(3) / 4; // Area of equilateral triangle with side 1
    int tottri = round((A1 + A2 + A3 + A4) / ar);
    cout << tottri << endl;
    return 0;
}
```

This version of the code has the same functionality as the original code but it is more efficient in terms of running time and memory usage.