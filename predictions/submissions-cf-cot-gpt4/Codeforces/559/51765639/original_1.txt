The given program is essentially computing some mathematical operations. The optimizations that can be applied here are:

1. Pre-compute the constant values: The values of `ang` and `ar` are not going to change during the program execution. So, calculate them once before the loop and reuse them.

2. Inline function calls: Function calls are expensive in terms of time. So, replace the function calls with the actual computations when possible. For example, you can replace `sqr(a[0])` with `a[0]*a[0]`.

3. Combine similar computations: For example, `((a[0] * a[1]) / 2) * sin(ang)` and `((a[2] * a[3]) / 2) * sin(ang)` have similar computations. We can calculate `(a[i] * a[i+1] / 2) * sin(ang)` in a loop.

After applying these optimizations, the optimized program would look like:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define optimize() ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

int main() {
  optimize();
  
  double a[10];
  for (int i = 0; i < 6; i++) {
    cin >> a[i];
  }
  
  double ang = acos(-1) * 120.0 / 180.0;
  double ar = sqrt(3) / 4;
  double A[4] = {0};
  
  for (int i = 0; i < 6; i+=2) {
    A[i/2] = ((a[i] * a[i+1]) / 2) * sin(ang);
    a[i] = sqrt(a[i]*a[i] + a[i+1]*a[i+1] - 2.0 * a[i] * a[i+1] * cos(ang)); 
  }
  
  double x1 = a[0], x2 = a[2], x3 = a[4];
  double A4 = sqrt((x1+x2+x3)/2 * ((x1+x2+x3)/2 - x1) * ((x1+x2+x3)/2 - x2) * ((x1+x2+x3)/2 - x3));
  
  int tottri = (A[0] + A[1] + A[2] + A4) / ar;
  cout << tottri << endl;
}
```

In the optimized code, we pre-calculate the `ang` and `ar` before the loop. In the loop, we calculate the `A[i/2]` and `a[i]` in a single loop to avoid duplicate calculations. We also replace the `sqr(a[i])` with `a[i]*a[i]` to avoid function calls. Finally, we combine the `A1`, `A2`, `A3` and `A4` into a single array `A` and calculate `tottri` in a single line.