#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

const int mx = 3e5 + 10;

int main() {
  int tc = 1, i, j, k;
  while (tc--) {
    int a, b;
    cin >> a >> b;
    vector<pair<int, int>> dif;
    vector<int> pre, suf;
    vector<pair<int, int>> v;
    int x, y;
    for (i = 0; i < a; i++) {
      cin >> x >> y;
      v.push_back({x, y});
      dif.push_back({y - x, i});
    }
    sort(dif.begin(), dif.end());
    for (i = 0; i < a; i++) {
      k = dif[i].second;
      suf.push_back(v[k].second);
      if (i)
        suf[i] += suf[i - 1];
    }
    for (i = a - 1; i >= 0; i--) {
      k = dif[i].second;
      pre.push_back(v[k].first);
    }
    for (i = 1; i < a; i++)
      pre[i] += pre[i - 1];
    reverse(pre.begin(), pre.end());
    for (i = 0; i < b; i++) {
      cin >> x >> y;
      k = v[x - 1].second - v[x - 1].first;
      int m = v[y - 1].second - v[y - 1].first;
      int res = (m <= k) ? (v[x - 1].first + v[y - 1].second) : (v[x - 1].second + v[y - 1].first);
      k = (res > 1) ? (res - 1) : 0;
    }
    for (i = 0; i < a; i++) {
      int ans = 0;
      k = v[i].second - v[i].first;
      k = upper_bound(dif.begin(), dif.end(), make_pair(k, LLONG_MAX)) - dif.begin();
      if (k - 1 >= 0)
        ans = suf[k - 1] + ((k - 1) * v[i].first) - v[i].second;
      if (k < a) {
        ans += pre[k] + (a - k) * v[i].second;
      }
      cout << ans << endl;
    }
  }
  return 0;
}