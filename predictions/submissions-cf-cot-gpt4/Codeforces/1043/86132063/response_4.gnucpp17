#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
#include <map>

#define int long long
using namespace std;

const int mx = 3e5 + 10;
map<int, vector<int>> del;

int main() {
  int a, b, i, k;
  cin >> a >> b;
  vector<pair<int, int>> dif;
  vector<int> pre, suf;
  vector<pair<int, int>> v;
  int x, y;
  for (i = 0; i < a; i++) {
    cin >> x >> y;
    v.emplace_back(x, y);
    dif.emplace_back(y - x, i);
  }
  sort(dif.begin(), dif.end());
  for (i = 0; i < a; i++) {
    k = dif[i].second;
    suf.emplace_back(v[k].second);
    if (i)
      suf[i] += suf[i - 1];
  }
  for (i = a - 1; i >= 0; i--) {
    k = dif[i].second;
    pre.emplace_back(v[k].first);
  }
  for (i = 1; i < a; i++)
    pre[i] += pre[i - 1];
  reverse(pre.begin(), pre.end());
  for (i = 0; i < b; i++) {
    cin >> x >> y;
    k = v[x - 1].second - v[x - 1].first;
    int m = v[y - 1].second - v[y - 1].first;
    if (m <= k) {
      del[x].emplace_back(v[x - 1].first + v[y - 1].second);
      del[y].emplace_back(v[x - 1].first + v[y - 1].second);
    } else {
      del[x].emplace_back(v[x - 1].second + v[y - 1].first);
      del[y].emplace_back(v[x - 1].second + v[y - 1].first);
    }
    k = (int)del[x].size();
    if (k > 1LL)
      del[x][k - 1] += del[x][k - 2];
    k = (int)del[y].size();
    if (k > 1LL)
      del[y][k - 1] += del[y][k - 2];
  }
  for (i = 0; i < a; i++) {
    int ans = 0;
    k = v[i].second - v[i].first;
    k = upper_bound(dif.begin(), dif.end(), make_pair(k, LLONG_MAX)) - dif.begin();
    if (k - 1 >= 0)
      ans = suf[k - 1] + ((k - 1) * v[i].first) - v[i].second;
    if (k < a) {
      ans += pre[k] + (a - k) * v[i].second;
    }
    if (del[i + 1].size())
      ans -= del[i + 1].back();
    cout << ans << "\n";
  }
  return 0;
}