#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define int long long
#define endl '\n'
#define fast ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

using namespace std;

const int mx = 3e5 + 10;
vector<int> del[mx];

main() {
  fast int tc = 1, i, j, k;
  while (tc--) {
    int a, b;
    cin >> a >> b;
    vector<pair<int, int>> dif(a);
    vector<int> pre(a), suf(a);
    vector<pair<int, int>> v(a);
    int x, y;
    for (i = 0; i < a; i++) {
      cin >> x >> y;
      v[i] = {x, y};
      dif[i] = {y - x, i};
    }
    sort(dif.begin(), dif.end());
    for (i = 0; i < a; i++) {
      k = dif[i].second;
      suf[i] = (i > 0 ? suf[i - 1] : 0) + v[k].second;
    }
    for (i = a - 1; i >= 0; i--) {
      k = dif[i].second;
      pre[i] = (i < a - 1 ? pre[i + 1] : 0) + v[k].first;
    }
    for (i = 0; i < b; i++) {
      cin >> x >> y;
      int m = v[y - 1].second - v[y - 1].first;
      if (m <= v[x - 1].second - v[x - 1].first) {
        del[x].push_back(v[x - 1].first + v[y - 1].second);
        del[y].push_back(v[x - 1].first + v[y - 1].second);
      } else {
        del[x].push_back(v[x - 1].second + v[y - 1].first);
        del[y].push_back(v[x - 1].second + v[y - 1].first);
      }
      if (del[x].size() > 1LL)
        del[x][del[x].size() - 1] += del[x][del[x].size() - 2];
      if (del[y].size() > 1LL) {
        del[y][del[y].size() - 1] += del[y][del[y].size() - 2];
      }
    }
    for (i = 0; i < a; i++) {
      int ans = 0;
      k = v[i].second - v[i].first;
      int k_index = upper_bound(dif.begin(), dif.end(), make_pair(k, INT_MAX)) - dif.begin();
      if (k_index > 0)
        ans = suf[k_index - 1] + ((k_index - 1) * v[i].first) - v[i].second;
      if (k_index < a) {
        ans += pre[k_index] + (a - k_index) * v[i].second;
      }
      if (!del[i + 1].empty())
        ans -= del[i + 1].back();
      cout << ans << endl;
    }
  }
}