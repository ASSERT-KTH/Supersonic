The given code can be optimized in the following ways:

1. Avoid unnecessary use of macros: Some macros are not used in the code and can be removed to clean up and optimize the code. Macros such as `#define infi INT_MAX`, `#define rinfi INT_MIN`, `#define inf LLONG_MAX`, `#define rinf LLONG_MIN`, `#define line cout << "here - " << __LINE__ << "\n";`, `#define dbg(a) cout << #a << " --> " << (a) << "\n";`, `#define ff first`, `#define ss second` are not used in the code and can be removed. Macros can sometimes make the code harder to read and maintain.

2. Avoid using `vector::push_back` repeatedly inside loops: Each time `vector::push_back` is called, it might cause a reallocation of the vector's internal array. If you know the number of elements that will be inserted beforehand, you can use `vector::reserve` to allocate enough memory at once, reducing the number of reallocations.

3. Avoiding the use of `std::endl`: `std::endl` is known to be slower than `'\n'` because it forces a flush of the output buffer in addition to adding a newline character.

4. Remove unnecessary `ios_base::sync_with_stdio(false)`, `cin.tie(NULL)`, and `cout.tie(NULL);`: If you are not mixing C and C++ style I/O in your program, then these lines are unnecessary.

Here's the optimized version of your code:

```cpp
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define int long long
using namespace std;
const int mx = 3e5 + 10;
vector<int> del[mx];
main() {
  int tc = 1, i, j, k;
  while (tc--) {
    int a, b;
    cin >> a >> b;
    vector<pair<int, int>> dif;
    vector<int> pre, suf;
    vector<pair<int, int>> v;
    int x, y;
    v.reserve(a);
    dif.reserve(a);
    for (i = 0; i < a; i++) {
      cin >> x >> y;
      v.push_back({x, y});
      dif.push_back({y - x, i});
    }
    sort(dif.begin(), dif.end());
    for (i = 0; i < a; i++) {
      k = dif[i].second;
      suf.push_back(v[k].second);
      if (i)
        suf[i] += suf[i - 1];
    }
    for (i = a - 1; i >= 0; i--) {
      k = dif[i].second;
      pre.push_back(v[k].first);
    }
    for (i = 1; i < a; i++)
      pre[i] += pre[i - 1];
    reverse(pre.begin(), pre.end());
    for (i = 0; i < b; i++) {
      cin >> x >> y;
      k = v[x - 1].second - v[x - 1].first;
      int m = v[y - 1].second - v[y - 1].first;
      if (m <= k) {
        del[x].push_back(v[x - 1].first + v[y - 1].second);
        del[y].push_back(v[x - 1].first + v[y - 1].second);
      } else
        del[x].push_back(v[x - 1].second + v[y - 1].first),
            del[y].push_back(v[x - 1].second + v[y - 1].first);
      k = (int)del[x].size();
      if (k > 1LL)
        del[x][k - 1] += del[x][k - 2];
      k = (int)del[y].size();
      if (k > 1LL) {
        del[y][k - 1] += del[y][k - 2];
      }
    }
    for (i = 0; i < a; i++) {
      int ans = 0;
      k = v[i].second - v[i].first;
      k = upper_bound(dif.begin(), dif.end(), make_pair(k, LLONG_MAX)) - dif.begin();
      if (k - 1 >= 0)
        ans = suf[k - 1] + ((k - 1) * v[i].first) - v[i].second;
      if (k < a) {
        ans += pre[k] + (a - k) * v[i].second;
      }
      if (del[i + 1].size())
        ans -= del[i + 1].back();
      cout << ans << '\n';
    }
  }
}
```
Please note that these optimizations are general coding best practices and might not have a significant impact on the performance of the code. The real impact depends on the input size and the specific requirements of the tasks that the code is intended to perform.