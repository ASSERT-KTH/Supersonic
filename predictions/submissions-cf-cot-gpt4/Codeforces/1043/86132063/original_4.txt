The provided code does not have much room for improvement without modifying the logic or structure of the code. However, there are some minor changes that could be done:

1. The variable `int tc = 1` is declared and being used in a while loop but it's always 1 and the loop only runs once. So, we can remove the `while (tc--)` loop.

2. The `fast` macro is making `cin` and `cout` faster by untie them from each other and from `cin`/`cout`. But, if at any point you need to mix standard and file I/O, this may cause unexpected behavior. I would recommend not to use this unless it's really necessary.

3. `#include <bits\stdc++.h>` is not a standard header file and its use is not recommended. It's better to include only the necessary libraries. 

4. `main()` function should return an `int`. The return statement is missing in main() function. 

5. Instead of pushing back to vectors `pre` and `suf`, you can use `emplace_back()` which constructs the object in-place and is generally more efficient.

6. `vector<int> del[mx]` is a statically allocated array of vectors. This will allocate memory for `mx` vectors upfront, which could be a waste of memory if `mx` is large and not all vectors are used. Consider using `map<int, vector<int>> del` instead.

7. `int i, j, k` are declared at the beginning of `main()` and used throughout the program. It's better to declare variables as close as possible to where they're used to make the code easier to read and maintain.

Here's the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
#include <map>

#define int long long
using namespace std;

const int mx = 3e5 + 10;
map<int, vector<int>> del;

int main() {
  int a, b, i, k;
  cin >> a >> b;
  vector<pair<int, int>> dif;
  vector<int> pre, suf;
  vector<pair<int, int>> v;
  int x, y;
  for (i = 0; i < a; i++) {
    cin >> x >> y;
    v.emplace_back(x, y);
    dif.emplace_back(y - x, i);
  }
  sort(dif.begin(), dif.end());
  for (i = 0; i < a; i++) {
    k = dif[i].second;
    suf.emplace_back(v[k].second);
    if (i)
      suf[i] += suf[i - 1];
  }
  for (i = a - 1; i >= 0; i--) {
    k = dif[i].second;
    pre.emplace_back(v[k].first);
  }
  for (i = 1; i < a; i++)
    pre[i] += pre[i - 1];
  reverse(pre.begin(), pre.end());
  for (i = 0; i < b; i++) {
    cin >> x >> y;
    k = v[x - 1].second - v[x - 1].first;
    int m = v[y - 1].second - v[y - 1].first;
    if (m <= k) {
      del[x].emplace_back(v[x - 1].first + v[y - 1].second);
      del[y].emplace_back(v[x - 1].first + v[y - 1].second);
    } else {
      del[x].emplace_back(v[x - 1].second + v[y - 1].first);
      del[y].emplace_back(v[x - 1].second + v[y - 1].first);
    }
    k = (int)del[x].size();
    if (k > 1LL)
      del[x][k - 1] += del[x][k - 2];
    k = (int)del[y].size();
    if (k > 1LL)
      del[y][k - 1] += del[y][k - 2];
  }
  for (i = 0; i < a; i++) {
    int ans = 0;
    k = v[i].second - v[i].first;
    k = upper_bound(dif.begin(), dif.end(), make_pair(k, LLONG_MAX)) - dif.begin();
    if (k - 1 >= 0)
      ans = suf[k - 1] + ((k - 1) * v[i].first) - v[i].second;
    if (k < a) {
      ans += pre[k] + (a - k) * v[i].second;
    }
    if (del[i + 1].size())
      ans -= del[i + 1].back();
    cout << ans << "\n";
  }
  return 0;
}
```