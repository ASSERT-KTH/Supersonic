Here are the optimizations we can make:

1. `#include <bits\stdc++.h>`: This header is not recommended. It includes a lot of unnecessary headers, which increases the compile time. It's better to include only those headers that we really need.

2. The `using namespace std;` statement is generally considered bad practice. It can lead to name conflicts if the program grows. 

3. Avoid using macros for short code snippets. Macros are not type-safe, and they can make debugging more difficult.

4. Instead of using `push_back()` to insert elements into a vector, we could use `emplace_back()`. It constructs the object in-place, eliminating the need for a copy.

5. Instead of creating temporary variables to store results of operations, we can directly use the results in the operations. This reduces memory usage.

6. It is better to use pre-increment (++i) rather than post-increment (i++) with iterator, as post-increment involves keeping a copy of the previous value around and adds a little bit of overhead.

Here's the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
#define int long long

const int mx = 3e5 + 10;
std::vector<int> del[mx];

main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int tc = 1;
  while (tc--) {
    int a, b;
    cin >> a >> b;
    std::vector<std::pair<int, int>> dif;
    std::vector<int> pre, suf;
    std::vector<std::pair<int, int>> v;
    int x, y;
    for (int i = 0; i < a; ++i) {
      cin >> x >> y;
      v.emplace_back(x, y);
      dif.emplace_back(y - x, i);
    }
    sort(dif.begin(), dif.end());
    for (int i = 0; i < a; ++i) {
      int k = dif[i].second;
      suf.emplace_back(v[k].second);
      if (i)
        suf[i] += suf[i - 1];
    }
    for (int i = a - 1; i >= 0; --i) {
      int k = dif[i].second;
      pre.emplace_back(v[k].first);
    }
    for (int i = 1; i < a; ++i)
      pre[i] += pre[i - 1];
    reverse(pre.begin(), pre.end());
    for (int i = 0; i < b; ++i) {
      cin >> x >> y;
      int k = v[x - 1].second - v[x - 1].first;
      int m = v[y - 1].second - v[y - 1].first;
      if (m <= k) {
        del[x].emplace_back(v[x - 1].first + v[y - 1].second);
        del[y].emplace_back(v[x - 1].first + v[y - 1].second);
      } else
        del[x].emplace_back(v[x - 1].second + v[y - 1].first),
            del[y].emplace_back(v[x - 1].second + v[y - 1].first);
      k = del[x].size();
      if (k > 1)
        del[x][k - 1] += del[x][k - 2];
      k = del[y].size();
      if (k > 1) {
        del[y][k - 1] += del[y][k - 2];
      }
    }
    for (int i = 0; i < a; ++i) {
      int ans = 0;
      int k = v[i].second - v[i].first;
      k = upper_bound(dif.begin(), dif.end(), std::make_pair(k, LLONG_MAX)) - dif.begin();
      if (k - 1 >= 0)
        ans = suf[k - 1] + ((k - 1) * v[i].first) - v[i].second;
      if (k < a) {
        ans += pre[k] + (a - k) * v[i].second;
      }
      if (!del[i + 1].empty())
        ans -= del[i + 1].back();
      cout << ans << endl;
    }
  }
}
```

Please note that C++ optimization is very complex and often depends on many factors such as the compiler used, the specific hardware the program is run on, etc. The changes I've made should generally improve performance, but they may not be the best possible optimizations for every scenario. Always make sure to profile and test your code to ensure that the optimizations are effective.