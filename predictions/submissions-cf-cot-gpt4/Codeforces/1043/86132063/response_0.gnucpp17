#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

const long long MAX = 3e5 + 10;
vector<long long> del[MAX];

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int tests = 1;
  
  while (tests--) {
    int a, b;
    cin >> a >> b;
    
    vector<pair<int, int>> dif(a);
    vector<int> pre, suf;
    vector<pair<int, int>> v(a);
    int x, y;
    
    for (int i = 0; i < a; ++i) {
      cin >> x >> y;
      v[i] = {x, y};
      dif[i] = {y - x, i};
    }
    
    sort(dif.begin(), dif.end());
    
    suf.reserve(a);
    pre.reserve(a);
    
    for (int i = 0; i < a; ++i) {
      int k = dif[i].second;
      suf.push_back(v[k].second);
      if (i)
        suf[i] += suf[i - 1];
    }
    
    for (int i = a - 1; i >= 0; --i) {
      int k = dif[i].second;
      pre.push_back(v[k].first);
    }
    
    for (int i = 1; i < a; ++i)
      pre[i] += pre[i - 1];
    
    reverse(pre.begin(), pre.end());
    
    for (int i = 0; i < b; ++i) {
      cin >> x >> y;
      int k = v[x - 1].second - v[x - 1].first;
      int m = v[y - 1].second - v[y - 1].first;
      
      if (m <= k) {
        del[x].push_back(v[x - 1].first + v[y - 1].second);
        del[y].push_back(v[x - 1].first + v[y - 1].second);
      } else {
        del[x].push_back(v[x - 1].second + v[y - 1].first);
        del[y].push_back(v[x - 1].second + v[y - 1].first);
      }
      
      if (del[x].size() > 1LL)
        del[x].back() += del[x][del[x].size() - 2];
      
      if (del[y].size() > 1LL)
        del[y].back() += del[y][del[y].size() - 2];
    }
    
    for (int i = 0; i < a; ++i) {
      long long ans = 0;
      int k = v[i].second - v[i].first;
      auto it = upper_bound(dif.begin(), dif.end(), make_pair(k, LONG_LONG_MAX));
      int idx = distance(dif.begin(), it);
      
      if (idx - 1 >= 0)
        ans = suf[idx - 1] + ((idx - 1) * v[i].first) - v[i].second;
      
      if (idx < a)
        ans += pre[idx] + (a - idx) * v[i].second;
      
      if (!del[i + 1].empty())
        ans -= del[i + 1].back();
      
      cout << ans << '\n';
    }
  }
  
  return 0;
}