#include <bits/stdc++.h>
using namespace std;
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#define fastio                                                                 \
  ios_base::sync_with_stdio(0);                                                \
  cin.tie(0);                                                                  \
  cout.tie(0);
#define ll long long
#define pll pair<ll, ll>
#define tll tuple<ll, ll, ll>
#define ms(type) multiset<type>
#define MP make_pair
#define MT make_tuple
#define REP(i, a, b) for (ll i = a; i <= b; i++)
#define RREP(i, a, b) for (ll i = b; i >= a; i--)
#define rep(i, a, b) for (ll i = a; i < b; i++)
#define rrep(i, a, b) for (ll i = b - 1; i >= a; i--)
#define T(i) get<i>

void fileio() {
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
}
const ll MOD = 1e9 + 7;

void solve() {
  int t, n, x, y;
  cin >> t;
  while (t--) {
    cin >> n;
    multiset<tll> a;
    rep(i, 0, n) {
      cin >> x >> y;
      a.insert(MT(max(x, y), min(x, y), i));
    }
    tll prev = (*a.begin());
    tll best = prev;
    int res[n];
    for (const tll& person : a) {
      ll h, w, i;
      tie(h, w, i) = person;
      if (get<0>(prev) == h) {
        if (get<1>(best) < w && get<0>(best) < h)
          res[i] = get<2>(best) + 1;
        else {
          res[i] = -1;
        }
      } else {
        if (get<1>(best) > get<1>(prev))
          best = prev;
        if (get<1>(best) < w && get<0>(best) < h)
          res[i] = get<2>(best) + 1;
        else
          res[i] = -1;
        prev = person;
      }
    }
    {
      for (auto &p : res)
        cout << p << " ";
      cout << '\n';
    }
  }
}
int main() {
  fastio;
  solve();
  return 0;
}