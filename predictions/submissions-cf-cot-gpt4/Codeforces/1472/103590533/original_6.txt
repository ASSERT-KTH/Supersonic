This is already a highly optimized C++ program using many macros and modern C++ features. However, there are still a few points where we can make minor improvements for readability, maintainability, and potential performance:

1. `#include <bits/stdc++.h>` is a GCC specific header file and not standard C++. It includes a lot of unnecessary header files which can increase compile time. You should include only the necessary header files for your program.

2. Instead of using `#define` for creating macros, you can use `using` keyword for type definitions which is more C++ style and type safe.

3. For `std::tuple`, you can use `std::tie` to unpack the tuple which is more readable.

4. For loop variables, `auto` keyword can be used to simplify the code and make it more maintainable.

5. `std::ios_base::sync_with_stdio(0); std::cin.tie(0); std::cout.tie(0);` are already optimized for fast I/O. 

6. `REP`, `RREP`, `rep`, `rrep` macros are not used in this code, so they can be removed.

Here is the optimized program:

```cpp
#include<iostream>
#include<vector>
#include<tuple>
#include<set>
using namespace std;

using ll = long long;
using ld = long double;
using pll = pair<ll, ll>;
using pi = pair<int, int>;
using tll = tuple<ll, ll, ll>;
using tii = tuple<int, int, int>;
using vi = vector<int>;
using vpll = vector<pll>;
using vtll = vector<tll>;
using vll = vector<ll>;
using vv = vector<vll>;
using type = tll;

const ll MOD = 1e9 + 7;

void output(multiset<type> & p) {
  for (const auto &i : p) {
    cout << get<0>(i) << "," << get<1>(i) << "," << get<2>(i) << endl;
  }
}

void solve() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  int t, n, x, y;
  cin >> t;
  while (t--) {
    cin >> n;
    multiset<tll> a;
    for (int i = 0; i < n; ++i) {
      cin >> x >> y;
      a.insert(make_tuple(max(x, y), min(x, y), i));
    }
    auto prev = (*a.begin());
    auto best = prev;
    int res[n];
    for (const auto &person : a) {
      int h, w, i;
      tie(h, w, i) = person;
      if (get<0>(prev) == h) {
        if (get<1>(best) < w && get<0>(best) < h)
          res[i] = get<2>(best) + 1;
        else {
          res[i] = -1;
        }
      } else {
        if (get<1>(best) > get<1>(prev))
          best = prev;
        if (get<1>(best) < w && get<0>(best) < h)
          res[i] = get<2>(best) + 1;
        else
          res[i] = -1;
        prev = person;
      }
    }
    for (auto &p : res)
      cout << p << " ";
    cout << endl;
  }
}

int main() {
  solve();
  return 0;
}
```

In this optimized version, the readability has been improved by using `std::tie` to unpack tuples and `auto` for loop variables. Also, the program has been made more maintainable by including only the necessary headers and using `using` instead of `#define` for type definitions. These changes also have the potential to improve the performance by reducing the compile time and making the code more efficient.