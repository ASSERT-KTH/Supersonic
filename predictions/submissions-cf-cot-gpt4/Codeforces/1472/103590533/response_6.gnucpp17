#include<iostream>
#include<vector>
#include<tuple>
#include<set>
using namespace std;

using ll = long long;
using ld = long double;
using pll = pair<ll, ll>;
using pi = pair<int, int>;
using tll = tuple<ll, ll, ll>;
using tii = tuple<int, int, int>;
using vi = vector<int>;
using vpll = vector<pll>;
using vtll = vector<tll>;
using vll = vector<ll>;
using vv = vector<vll>;
using type = tll;

const ll MOD = 1e9 + 7;

void output(multiset<type> & p) {
  for (const auto &i : p) {
    cout << get<0>(i) << "," << get<1>(i) << "," << get<2>(i) << endl;
  }
}

void solve() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  int t, n, x, y;
  cin >> t;
  while (t--) {
    cin >> n;
    multiset<tll> a;
    for (int i = 0; i < n; ++i) {
      cin >> x >> y;
      a.insert(make_tuple(max(x, y), min(x, y), i));
    }
    auto prev = (*a.begin());
    auto best = prev;
    int res[n];
    for (const auto &person : a) {
      int h, w, i;
      tie(h, w, i) = person;
      if (get<0>(prev) == h) {
        if (get<1>(best) < w && get<0>(best) < h)
          res[i] = get<2>(best) + 1;
        else {
          res[i] = -1;
        }
      } else {
        if (get<1>(best) > get<1>(prev))
          best = prev;
        if (get<1>(best) < w && get<0>(best) < h)
          res[i] = get<2>(best) + 1;
        else
          res[i] = -1;
        prev = person;
      }
    }
    for (auto &p : res)
      cout << p << " ";
    cout << endl;
  }
}

int main() {
  solve();
  return 0;
}