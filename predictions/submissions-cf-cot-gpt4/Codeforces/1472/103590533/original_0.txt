There are several steps we can take to optimize this code.

1. **Minimize the use of Macros:** While macros can make the code easier to write and read, they can also lead to increased compilation time. We will remove unnecessary macros and replace them with their actual implementation where possible.

2. **Avoid using `bits/stdc++.h`:** This header file includes almost all the header files in the C++ standard library. Including it means the compiler needs to compile all of these, which can significantly increase compilation time. We should only include the header files that we actually need.

3. **Avoid using `using namespace std`:** It is generally considered bad practice to use `using namespace std` in C++. It can lead to name conflicts if the program also includes other libraries. We will replace it by using explicit `std::` before each standard library object and function.

4. **Avoid unnecessary type definitions:** The code defines several types that are not necessary and can be directly used. We will remove these type definitions to make the code simpler and more understandable.

5. **Use more efficient data types:** The code uses `std::multiset` to store data, which is not the most efficient data structure for this purpose. We will replace it with `std::vector` and use `std::sort` to sort the data, which is typically faster.

Here is the optimized code.

```cpp
#include <iostream>
#include <vector>
#include <tuple>
#include <algorithm>

std::ios_base::sync_with_stdio(0);
std::cin.tie(0);                                                              
std::cout.tie(0);

void solve() {
  int t, n, x, y;
  std::cin >> t;
  while (t--) {
    std::cin >> n;
    std::vector<std::tuple<int, int, int>> a;
    for(int i = 0; i < n; i++) {
      std::cin >> x >> y;
      a.push_back(std::make_tuple(std::max(x, y), std::min(x, y), i));
    }
    std::sort(a.begin(), a.end());
    auto prev = (*a.begin());
    auto best = prev;
    int res[n];
    for (const auto &person : a) {
      int h, w, i;
      std::tie(h, w, i) = person;
      if (std::get<0>(prev) == h) {
        if (std::get<1>(best) < w && std::get<0>(best) < h)
          res[i] = std::get<2>(best) + 1;
        else {
          res[i] = -1;
        }
      } else {
        if (std::get<1>(best) > std::get<1>(prev))
          best = prev;
        if (std::get<1>(best) < w && std::get<0>(best) < h)
          res[i] = std::get<2>(best) + 1;
        else
          res[i] = -1;
        prev = person;
      }
    }
    for (auto &p : res)
      std::cout << p << " ";
    std::cout << "\n";
  }
}
int main() {
  solve();
  return 0;
}
```