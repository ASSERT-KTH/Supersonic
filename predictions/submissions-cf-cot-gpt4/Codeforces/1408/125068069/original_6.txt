The program can be optimized in the following ways:

1. Avoid the usage of #include <bits/stdc++.h> as it includes a lot of unnecessary libraries which can increase the compile time and the binary size. Include only the necessary libraries. In this case, <iostream>, <vector>, and <cstdio> are needed.

2. The usage of long double is not always necessary and can be expensive in terms of memory and computation. Instead, use double if the precision provided by double is enough.

3. Use the std::fixed and std::setprecision() functions of <iomanip> library to control the number of digits after the decimal point. This is faster than using printf().

4. Avoid using #define to create constants and use the static const or constexpr keywords instead. This is because the preprocessor (which handles #define) performs simple text substitution, and does not understand the rest of the C++ language. This can cause errors in your code.

5. Avoid using #define for shorthand functions. Use inline functions instead. The inline specifier is a hint to the compiler that it should attempt to generate code (inline code) for a function that does not require a function call. This can make the code faster.

6. Use ++i instead of i++ in loop. The i++ involves keeping a copy of the previous value of i and then incrementing i. But ++i (pre increment) increments i and then returns it, and does not involve any copy. So ++i is faster.

Here's the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <iomanip>
#include <cstdio>
using namespace std;
using vi = vector<int>;
static const double PI = 3.141592653589793;
static const int MOD = 1000000007;
static const long long INF = 1000000000000000000LL;

inline double calculateTime(int v, double p, int flag) {
  return (flag - p) / v;
}

void solve() {
  int n, ln;
  cin >> n >> ln;
  vi flag(n);
  for (int i = 0; i < n; ++i)
    cin >> flag[i];
  int v1{1}, v2{1}, l{0}, r{n - 1};
  double p1{0}, p2{static_cast<double>(ln)}, ans{0};
  while (l <= r) {
    double time1 = calculateTime(v1, p1, flag[l]);
    double time2 = calculateTime(v2, p2, flag[r]);
    if (time1 < time2) {
      p1 = flag[l];
      v1++;
      l++;
      p2 -= v2 * time1;
      ans += time1;
    } else if (time1 > time2) {
      p2 = flag[r];
      v2++;
      r--;
      p1 += v1 * time2;
      ans += time2;
    } else {
      p1 = flag[l];
      p2 = flag[r];
      v1++;
      v2++;
      l++;
      r--;
      ans += time1;
    }
  }
  ans += (p2 - p1) / (v1 + v2);
  cout << fixed << setprecision(14) << ans << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int t = 1;
  cin >> t;
  while (t--) {
    solve();
  }
}
```