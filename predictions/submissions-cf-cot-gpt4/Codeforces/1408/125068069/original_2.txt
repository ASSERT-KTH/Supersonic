The given C++ program is already quite optimized, but there are still a few places where you can try to make small modifications to make it more efficient.

1. Remove unused Macros: There are several macros defined at the top of the program which are not used anywhere in the code. This includes the macros `nline`, `mp`, `pb`, `ppb`, `ff`, `ss`, `all`, `rall`, `ub`, `lb`, `bsrch`, `mina`, `maxa`, `gcd`, `lcm`, `rep`, `PI`, `MOD`, `INF`. Removing these will reduce the memory usage of the program.

2. Remove unused Typedefs: Similar to unused macros, there are several typedefs which are not used anywhere in the code. This includes `pii`, `si`, `spii`, `vpii`, `vvi`. Again, removing these will reduce the memory usage of the program.

3. Avoid using `bits/stdc++.h`: This header file includes quite a lot of libraries which may not be necessary for your program. Including this file can increase the compilation time. Instead, include only those libraries which are necessary.

4. Use Fast Input/Output: The function ios_base::sync_with_stdio(false); cin.tie(0); is used to make input/output operations faster. But, when you use these you should not mix stdio functions (like printf, scanf) and cin, cout. So, replace printf with cout for consistency.

5. Avoid using long long data type when not necessary: The `int` is defined as `long long`. If the range of the numbers in your problem falls within the range of `int` (-2147483648 to 2147483647), you can use `int` instead of `long long` to save memory.

Here is your optimized code:

```c++
#include <iostream>
#include <vector>
using namespace std;

void solve() {
  int n, ln;
  cin >> n >> ln;
  vector<int> flag(n);
  for (int i = 0; i < n; i++)
    cin >> flag[i];
  int v1{1}, v2{1}, l{0}, r{n - 1};
  long double p1{0}, p2{static_cast<long double>(ln)}, ans{0};
  while (l <= r) {
    if ((flag[l] - p1) / v1 < (p2 - flag[r]) / v2) {
      long double t = (flag[l] - p1) / v1;
      p1 = flag[l];
      v1++;
      l++;
      p2 -= v2 * t;
      ans += t;
    } else if ((flag[l] - p1) / v1 > (p2 - flag[r]) / v2) {
      long double t = (p2 - flag[r]) / v2;
      p2 = flag[r];
      v2++;
      r--;
      p1 += v1 * t;
      ans += t;
    } else {
      long double t = (flag[l] - p1) / v1;
      p1 = flag[l];
      p2 = flag[r];
      v1++;
      v2++;
      l++;
      r--;
      ans += t;
    }
  }
  ans += (p2 - p1) / (v1 + v2);
  cout.precision(14);
  cout << fixed << ans << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
}
```