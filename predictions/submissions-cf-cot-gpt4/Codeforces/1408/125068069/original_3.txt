1. Remove `#include <bits/stdc++.h>`: This header file is actually not standard and includes a lot of unnecessary libraries, which can increase your compile time. It's better to include only the libraries you actually use in your code.

2. Remove unused typedefs: There are several typedefs declared in the program that are not being used. Removing them will clean up the code and make it more readable.

3. Remove unused macros: Similar to the typedefs, there are several macros being defined but not used. Removing them can clean up the code.

4. Use `std::ios::sync_with_stdio(false); std::cin.tie(nullptr);` to speed up cin and cout operations. This will disable the synchronization between the C and C++ standard streams, which can make I/O operations faster.

5. Use `std::cout.precision(14)` to set the precision of the output instead of using `printf`.

After applying these changes, the optimized code is:

```cpp
#include <iostream>
#include <vector>
using namespace std;

void solve() {
  int n, ln;
  cin >> n >> ln;
  vector<int> flag(n);
  for (int i = 0; i < n; i++)
    cin >> flag[i];
  int v1{1}, v2{1}, l{0}, r{n - 1};
  long double p1{0}, p2{static_cast<long double>(ln)}, ans{0};
  while (l <= r) {
    if ((flag[l] - p1) / v1 < (p2 - flag[r]) / v2) {
      long double t = (flag[l] - p1) / v1;
      p1 = flag[l];
      v1++;
      l++;
      p2 -= v2 * t;
      ans += t;
    } else if ((flag[l] - p1) / v1 > (p2 - flag[r]) / v2) {
      long double t = (p2 - flag[r]) / v2;
      p2 = flag[r];
      v2++;
      r--;
      p1 += v1 * t;
      ans += t;
    } else {
      long double t = (flag[l] - p1) / v1;
      p1 = flag[l];
      p2 = flag[r];
      v1++;
      v2++;
      l++;
      r--;
      ans += t;
    }
  }
  ans += (p2 - p1) / (v1 + v2);
  cout.precision(14);
  cout << ans << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int t = 1;
  cin >> t;
  while (t--) {
    solve();
  }
}
```
This optimized version of the program should perform better in terms of both memory usage and runtime. The program now only includes necessary headers, uses the faster C++ I/O operations, and uses the `std::cout` precision setting instead of `printf`.