The presented code is already optimized in terms of running time, however, there are several ways we can optimize it for memory usage and readability.

1. **Avoid using `#include <bits/stdc++.h>`**: This includes a lot of unnecessary libraries which can increase the compile time and memory usage. Instead, include only the necessary libraries.

2. **Avoid using namespace std**: It's generally considered bad practice to use `using namespace std` because it could lead to name conflicts.

3. **Avoid unused macros**: If you don't use some macros such as `mp`, `pb`, `ppb`, `ff`, `ss`, `all`, `rall`, `ub`, `lb`, `bsrch`, `mina`, `maxa`, `gcd`, `lcm`, `rep`, `PI`, `MOD`, `INF`, they should be removed to decrease memory usage and increase readability.

4. **Avoid using infrequently used typedefs**: If some typedefs such as `si`, `spii`, `vpii`, `vvi` are not used, they should be removed to decrease memory usage and increase readability.

5. **Use more descriptive function names**: The function name `SHIT_HERE_WE_GO_AGAIN` is not descriptive and does not adhere to good coding practices. Changing it to a more descriptive name like `processTest` would be better.

6. **Use const for constant values**: For the constant values like `ln` which never change, you can declare them as `const` to let the compiler know they should not be changed.

7. **Avoid using global variables**: If you don't use some variables globally, you should declare them locally inside the functions to decrease memory usage.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <cstdio>
using std::cin;
using std::vector;
using std::cout;
using std::endl;
#define int long long

void processTest() {
  int n, ln;
  cin >> n >> ln;
  vector<int> flag(n);
  for (int i = 0; i < n; i++)
    cin >> flag[i];
  int v1{1}, v2{1}, l{0}, r{n - 1};
  long double p1{0}, p2{static_cast<long double>(ln)}, ans{0};
  while (l <= r) {
    if ((flag[l] - p1) / v1 < (p2 - flag[r]) / v2) {
      long double t = (flag[l] - p1) / v1;
      p1 = flag[l];
      v1++;
      l++;
      p2 -= v2 * t;
      ans += t;
    } else if ((flag[l] - p1) / v1 > (p2 - flag[r]) / v2) {
      long double t = (p2 - flag[r]) / v2;
      p2 = flag[r];
      v2++;
      r--;
      p1 += v1 * t;
      ans += t;
    } else {
      long double t = (flag[l] - p1) / v1;
      p1 = flag[l];
      p2 = flag[r];
      v1++;
      v2++;
      l++;
      r--;
      ans += t;
    }
  }
  ans += (p2 - p1) / (v1 + v2);
  printf("%.14Lf\n", ans);
}

int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int t = 1;
  cin >> t;
  while (t--) {
    processTest();
  }
}
```