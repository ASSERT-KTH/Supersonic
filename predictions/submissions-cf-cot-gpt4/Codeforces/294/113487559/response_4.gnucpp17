#include <iostream>
#include <array>
#include <algorithm>
#include <cmath>

constexpr int MOD = 1000000007;
constexpr int M = 1001;

std::array<long long, M> a, pows;
std::array<std::array<long long, M>, M> c;

long long power(long long x, long long y) {
  x = x % MOD;
  if (x == 0) {
    return 0;
  }
  return std::pow(x, y) % MOD;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  pows[0] = 1;
  pows[1] = 1;
  for (long long i = 2; i <= 1000; i++) {
    pows[i] = (pows[i - 1] * 2) % MOD;
  }
  c[0][0] = 1;
  for (int i = 1; i <= 1000; i++) {
    c[i][0] = 1;
    for (int j = 1; j <= i; j++) {
      c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % MOD;
    }
  }
  
  long long m, n;
  std::cin >> n >> m;
  for (long long i = 1; i <= n; i++) {
    std::cin >> a[i];
  }
  std::sort(a.begin() + 1, a.begin() + m + 1);
  long long sum = 1;
  long long d = n - m;
  for (int i = 1; i <= m; i++) {
    sum = (sum * c[d][a[i] - a[i - 1] - 1]) % MOD;
    d -= a[i] - a[i - 1] - 1;
  }
  for (int i = 2; i <= m; i++) {
    sum = (sum * pows[a[i] - a[i - 1] - 1]) % MOD;
  }
  std::cout << sum << "\n";

  return 0;
}