This code is performing an operation similar to the Sieve of Eratosthenes, a simple, ancient algorithm for finding all prime numbers up to any given limit. The main parts where we can optimize this program are:

1. Reduce the usage of global variables: Global variables consume memory for the entire lifetime of the program, hence to optimize for memory usage, it's better to reduce their usage. However, in this code, most of the global variables are constants or arrays that are required throughout the program, so we cannot do much here.

2. `memset` usage: The `memset` function is called each time the `euler` function is invoked, which is unnecessary. Instead, we can move this call to the main function before the `euler` function is called. This will reduce the number of `memset` calls to one.

3. Unnecessary variable initialization: The `ans` array is initialized with a loop that runs from 1 to `maxn`. Instead of initializing all the elements, we can initialize it with 0 and only update the necessary elements in the euler function. This will reduce the time complexity of the initialization from O(n) to O(1).

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
const int INF = 0x3f3f3f3f;
const double PI = acos(-1);
const double eps = 1e-8;
typedef unsigned long long ull;
typedef long long ll;
template <typename t> void read(t &x) {
  char ch = getchar();
  x = 0;
  int f = 1;
  while (!isdigit(ch)) {
    if (ch == '-')
      f = -1;
    ch = getchar();
  }
  while (isdigit(ch)) {
    x = (x << 3) + (x << 1) + (ch ^ 48);
    ch = getchar();
  }
  x = x * f;
}
#define pii pair<int, int>
#define X first
#define Y second
#define lowbit a &(-a)
using namespace std;
const int maxn = 1e6 + 10;
const int mod = 1e9 + 7;
int prime[maxn];
bool vis[maxn];
int ans[maxn];
void euler(int n) {
  for (int i = 2; i < n; ++i) {
    if (!vis[i])
      prime[++prime[0]] = i;
    for (int j = 1; j <= prime[0] && i * prime[j] < n; ++j) {
      vis[i * prime[j]] = true;
      if (i % prime[j] == 0)
        break;
    }
  }
}
int main() {
  memset(vis, 0, sizeof(vis));
  memset(ans, 0, sizeof(ans));
  euler(maxn - 9);
  vis[1] = 1;
  for (int i = 1; i <= maxn; ++i)
    ans[i] = ans[i - 1] + (int)(!vis[i]);
  int t;
  read(t);
  while (t--) {
    int n;
    read(n);
    if (n <= 3) {
      printf("%d\n", n);
      continue;
    }
    int l = 1, r = prime[0];
    while (l + 1 < r) {
      int mid = (r + l) / 2;
      if ((ll)prime[mid] * prime[mid] <= (ll)n)
        l = mid;
      else
        r = mid;
    }
    printf("%d\n", ans[n] - ans[prime[l]] + 1);
  }
  return 0;
}
```
We moved the `memset` calls to the main function before the `euler` function is called and also initialized the `ans` array with 0.