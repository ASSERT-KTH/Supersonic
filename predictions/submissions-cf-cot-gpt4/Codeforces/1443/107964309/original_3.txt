Here are the steps to optimize the code:

1. Remove the `#include <bits/stdc++.h>` header file: This header is actually not a standard C++ header. It's a GCC-specific header that includes all standard C++ headers, which can slow down the compilation process. Instead, we should only include the headers that we need.

2. Minimize the usage of `std::cin` and `std::cout`: These operations can be quite slow. We can speed up the input/output operations by adding `ios_base::sync_with_stdio(false); cin.tie(NULL);` at the beginning of the main function.

3. Avoid unnecessary reassignment to `vec[i]`: We are assigning twice to `vec[i]`, which is unnecessary. We can take both inputs before making the assignment.

4. Avoid unnecessary map operations: In the loop, we are updating `timeSum` and then in the next loop, we are decrementing the `total` by the same amount. We can do this in one loop.

5. Avoid unnecessary condition checking: The condition `i > 0 && vec[i].first == vec[i - 1].first` is checked for each element in the vector. We can remove this condition and deal with the duplicates when we calculate `timeSum`.

Here's the optimized code:

```c++
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#define int long long
using namespace std;
signed main() {
  ios_base::sync_with_stdio(false); 
  cin.tie(NULL);
  int T;
  cin >> T;
  while (T--) {
    int n;
    cin >> n;
    vector<pair<int, int>> vec(n);
    for (int i = 0; i < n; i++) {
      int a, b;
      cin >> a >> b;
      vec[i] = {a, b};
    }
    sort(vec.begin(), vec.end());
    map<int, int> timeSum;
    int total = 0;
    for (int i = 0; i < n; i++) {
      timeSum[vec[i].first] += vec[i].second;
      total += vec[i].second;
    }
    int ans = total;
    for (int i = 0; i < n; i++) {
      int temp = vec[i].first +
                 max(0LL, (total - vec[i].first));
      ans = min(ans, temp);
      total -= timeSum[vec[i].first];
      while(i+1 < n && vec[i].first == vec[i+1].first) {
        i++;
      }
    }
    cout << ans << "\n";
  }
}
```

Please note that the compiler optimization flags like `-O2` or `-O3` can also help to optimize the code further.