Optimizations:

1. The total sum of the second elements of the vector is computed twice. This is unnecessary and can be avoided.
2. Instead of recreating the pair at `vec[i]` when reading the second element, this can be done in the first loop. This will reduce the number of assignments made, speeding up the program.
3. Using `std::ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` will help in faster I/O operations.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
#define int long long
using namespace std;
signed main() {
  std::ios_base::sync_with_stdio(false); //Optimization 3
  cin.tie(NULL); //Optimization 3
  int T;
  cin >> T;
  while (T--) {
    int n;
    cin >> n;
    vector<pair<int, int>> vec(n);
    for (int i = 0; i < n; i++) {
      int a, b;
      cin >> a;
      cin >> b;
      vec[i] = {a, b}; //Optimization 2
    }
    sort(vec.begin(), vec.end());
    map<int, int> timeSum;
    int total = 0;
    for (int i = 0; i < n; i++) {
      timeSum[vec[i].first] += vec[i].second;
      total += vec[i].second; //Optimization 1
    }
    int ans = total;
    for (int i = 0; i < n; i++) {
      if (i > 0 && vec[i].first == vec[i - 1].first)
        continue;
      int temp = vec[i].first +
                 max(0LL, (total - timeSum[vec[i].first] - vec[i].first));
      ans = min(ans, temp);
      total -= timeSum[vec[i].first];
    }
    cout << ans << endl;
  }
}
```