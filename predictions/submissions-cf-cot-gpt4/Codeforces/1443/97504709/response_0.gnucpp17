#include <iostream>
#include <vector>
#include <algorithm>

template <typename T>
std::istream &operator>>(std::istream &input, std::vector<T> &v) {
  std::copy_n(std::istream_iterator<T>(input), v.size(), v.begin());
  return input;
}

void answer(bool v) {
  constexpr const char *s[2] = {"NO", "YES"};
  std::cout << s[v] << '\n';
}

void solve(std::vector<unsigned> &a) {
  const size_t n = a.size();
  bool isPossible = true;
  for (size_t i = 1; i < n && isPossible; ++i) {
    if (a[i - 1] < a[i]) {
      const unsigned d = a[i] - a[i - 1];
      auto minElement = *std::min_element(a.begin()+i, a.end());
      if (minElement < d)
        isPossible = false;
      else
        for (size_t j = i; j < n; ++j)
          a[j] -= d;
    }
  }
  answer(isPossible);
}

void test_case() {
  size_t n;
  std::cin >> n;
  std::vector<unsigned> a;
  a.reserve(n);
  std::cin >> a;
  solve(a);
}

int main() {
  size_t t;
  std::cin >> t;
  while (t-- > 0)
    test_case();
  return 0;
}