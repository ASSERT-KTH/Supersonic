Your code has a complexity of O(n^2) because you are running the maxSubArraySum function for all numbers from -30 to 30 in steps of 1. The optimization can be achieved by reducing the complexity of the maxSubArraySum function to O(n). The current implementation of this function runs in O(n^2) because it has a nested loop: the outer loop runs for all elements and the inner loop runs for all elements greater than the current one. We can optimize this to O(n) by using Kadane's algorithm to find the maximum sum of a subarray. 

In addition, the code has many unused macros and typedefs which increase the memory usage. So, we can remove these unused macros and typedefs.

Here is the optimized version of your code:

```cpp
#include <bits/stdc++.h>
typedef long long int lli;
using namespace std;

lli maxSubArraySum(vector<lli> &a, lli F, lli n) {
    lli max_so_far = INT_MIN, max_ending_here = 0;
    lli M = -31;
    for (lli i = 0; i < n; ++i) {
        max_ending_here += a[i];
        M = max(M, a[i]);
        if (M == F)
            max_so_far = max(max_so_far, max_ending_here);
        if (max_ending_here < 0 || M > F)
            max_ending_here = 0, M = -31;
    }
    return max_so_far;
}

int main() {
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    lli n;
    cin >> n;
    vector<lli> a(n);
    for (lli i = 0; i < n; ++i) cin >> a[i];
    lli R = 0;
    for (lli i = -30; i <= 30; ++i) {
        R = max(R, maxSubArraySum(a, i, n) - i);
    }
    cout << R << endl;
    return 0;
}
```