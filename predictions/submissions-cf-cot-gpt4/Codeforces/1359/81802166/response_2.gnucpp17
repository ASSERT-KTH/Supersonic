#include <iostream>
#include <vector>
#include <climits>
#include <chrono>
using namespace std;
typedef long long int lli;

lli power(lli x, lli y, lli p) {
  lli res = 1;
  x = x % p;
  while (y > 0) {
    if (y & 1)
      res = (res * x) % p;
    y = y >> 1;
    x = (x * x) % p;
  }
  return res;
}

lli maxSubArraySum(lli F, const vector<lli>& a, lli n) {
  lli max_so_far = (lli)INT_MIN, max_ending_here = 0;
  lli M = -31;
  for (lli i = 0; i < n; i++) {
    M = max(M, a[i]);
    max_ending_here = max_ending_here + a[i];
    if ((max_so_far < max_ending_here) and (M == F))
      max_so_far = max_ending_here;
    if (max_ending_here < 0 or M > F)
      max_ending_here = 0, M = -31;
  }
  return max_so_far;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  
  lli T = 1;
  while (T--) {
    lli n;
    cin >> n;
    vector<lli> a(n);
    for(lli i = 0; i < n; i++) 
        cin >> a[i];
    lli R = 0;
    for (lli i = -30; i < 31; i++) {
      R = max(R, (maxSubArraySum(i, a, n) - i));
    }
    cout << R << endl;
  }
  return 0;
}