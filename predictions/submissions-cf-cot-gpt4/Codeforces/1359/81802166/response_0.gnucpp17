#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef long long int lli;
lli n;
vector<lli> a;

lli maxSubArraySum() {
    lli max_so_far = a[0];
    lli curr_max = a[0];
  
    for (lli i = 1; i < n; i++) {
        curr_max = max(a[i], curr_max+a[i]);
        max_so_far = max(max_so_far, curr_max);
    }
    return max_so_far;
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    lli T = 1;
    while (T--) {
        cin >> n;
        a.resize(n);
        for (lli i = 0; i < n; i++) cin >> a[i];
        lli max_ele = *max_element(a.begin(), a.end());
        lli R = 0;
        for (lli i = 1; i <= max_ele; i++) {
            for (lli j = 0; j < n; j++) {
                if (a[j] > i) a[j] = 0;
            }
            R = max(R, maxSubArraySum());
        }
        cout << R << endl;
    }
    return 0;
}