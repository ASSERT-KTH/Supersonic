#include <bits/stdc++.h>
using namespace std;
#define LOCAL
#define sim template < class c
#define ris return *this
#define dor > debug &operator<<
#define eni(x)                                                                 \
  sim > typename enable_if<sizeof dud<c>(0) x 1, debug &>::type operator<<(    \
            c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c *x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
#ifdef LOCAL
  ~debug() { cerr << endl; }
  eni(!=) cerr << boolalpha << i;
  ris;
} eni(==) ris << range(begin(i), end(i));
}
sim, class b dor(pair<b, c> d) {
  ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
  *this << "[";
  for (auto it = d.b; it != d.e; ++it)
    *this << ", " + 2 * (it == d.b) << *it;
  ris << "]";
}
#else
  sim dor(const c &) { ris; }
#endif
}
;
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "
#define fi first
#define f first
#define se second
#define s second
#define vi_a vector<int> a;
#define p_b push_back
#define ll int
#define ld long double
#define pll pair<ll, ll>
#define pii pair<int, int>
#define m_p make_pair
#define fast_io                                                                \
  cin.tie(0);                                                                  \
  cout.tie(0);                                                                 \
  ios_base::sync_with_stdio(0);
#define all(x) x.begin(), x.end()
#define getfiles                                                               \
  ifstream cin("input.txt");                                                   \
  ofstream cout("output.txt");
#define pw(x) (1ll << x)
#define sz(x) (ll) x.size()
#define endl "\n"
#define rall(x) x.rbegin(), x.rend()
#define len(a) (ll) a.size()
#define rep(x, l, r) for (ll x = l; x < r; x++)
ld eps = (ld)1 / 1e6;
const ld pi = 3.14159265359;
ll inf = 1e18 + 2, mod2 = 998244353, mod1 = 1e9 + 7;
ll sqr(ll a) { return a * a; }
ll qb(ll a) { return a * a * a; }
ll gcd(ll a, ll b) { return !a ? b : gcd(b % a, a); }
ll binpow(ll a, ll b, ll mod) {
  return b ? (b % 2 ? (a * (sqr(binpow(a, b / 2, mod)) % mod)) % mod
                    : sqr(binpow(a, b / 2, mod)) % mod)
           : 1;
}
ll binmult(ll a, ll b, ll mod) {
  return b ? (b % 2 ? (2 * binmult(a, b / 2, mod) + a) % mod
                    : (2 * binmult(a, b / 2, mod)) % mod)
           : 0;
}
const ll R = 1e4;
const ll tx[2] = {0, 1};
const ll ty[2] = {1, 0};
const char rev_to[4] = {'E', 'W', 'N', 'S'};
const ll N = 1e5 + 1;
map<ll, long long> dp[2];
signed main() {
  fast_io;
  ll n;
  cin >> n;
  vector<ll> a(n);
  for (auto &z : a)
    cin >> z;
  for (int i = 0; i < n; i++) {
    for (int j = -30; j <= 30; j++) {
      ll to = max(a[i], (ll)j);
      dp[(i + 1) % 2][to] = max(dp[(i + 1) % 2][to], dp[i % 2][j] + a[i]);
    }
    dp[i % 2].clear(); // clear the previous map as it's not needed anymore
  }
  long long ans = 0;
  for (int j = -30; j <= 30; j++) {
      ans = max(ans, (dp[n % 2][j] ? dp[n % 2][j] - j : 0));
  }
  cout << ans;
  cerr << endl
       << "Time execute: " << clock() / (double)CLOCKS_PER_SEC << " sec"
       << endl;
  return 0;
}