The given C++ program is already fairly optimized. However, there are a few potential improvements that can be made for efficiency and readability. 

Optimization steps:

1. Replacing `#include <bits/stdc++.h>`: The `<bits/stdc++.h>` header file is not a standard C++ library. It is a GCC specific library that includes almost all standard C++ libraries. This is convenient for coding competitions, but it's not efficient for real-world projects. Instead, only include the libraries that are actually being used.

2. Avoid using `using namespace std`: This can lead to namespace conflicts in larger projects. It's better to use the `std::` prefix when calling functions in the std namespace.

3. Replacing Macro definitions: Macros are usually discouraged in C++ because they can lead to hard-to-diagnose errors. It's better to use constants, inline functions, or other language features instead.

4. Removing unused variables and functions: The given code contains several variable and function definitions (for example `eps`, `pi`, `sqr`, `qb`, `binpow` and `binmult`) that are not used anywhere in the program. These can be safely removed to reduce memory usage and increase readability.

5. Using pre-increment instead of post-increment: For primitive types like int, there is no performance difference between pre-increment (++i) and post-increment (i++). However, for class types, pre-increment can be faster because post-increment requires a temporary object to be created. Although in this specific code, it doesn't make a difference since we're dealing with primitive types, it's still a good practice to use pre-increment when the result of the operation is not used.

6. Avoiding global variables: Global variables can lead to code that is hard to understand and debug. It's better to pass variables as function arguments or use class members instead.

Optimized program:
```cpp
#include <iostream>
#include <vector>
#include <map>

const int R = 1e4;
const int N = 1e5 + 1;
std::map<long long, long long> dp[N];

int main() {
  std::ios_base::sync_with_stdio(0);
  std::cin.tie(0);
  std::cout.tie(0);
  
  int n;
  std::cin >> n;
  std::vector<long long> a(n);
  for (auto &z : a)
    std::cin >> z;
  for (int i = 0; i < n; ++i) {
    for (int j = -30; j <= 30; ++j) {
      long long to = std::max(a[i], static_cast<long long>(j));
      dp[i + 1][to] = std::max(dp[i + 1][to], dp[i][j] + a[i]);
    }
  }
  long long ans = 0;
  for (int i = 0; i <= n; ++i) {
    for (int j = -30; j <= 30; ++j) {
      ans = std::max(ans, (dp[i][j] ? dp[i][j] - j : 0));
    }
  }
  std::cout << ans;
  
  std::cerr << "\nTime execute: " << clock() / (double)CLOCKS_PER_SEC << " sec\n";
  return 0;
}
```