#include <bits/stdc++.h>
using namespace std;

#define LOCAL
#define fast_io ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define ll int
#define ld long double
#define N 1e5 + 1

ld eps = (ld)1 / 1e6;
const ld pi = 3.14159265359;
ll inf = 1e18 + 2, mod2 = 998244353, mod1 = 1e9 + 7;

ll sqr(ll a) { return a * a; }
ll qb(ll a) { return a * a * a; }
ll gcd(ll a, ll b) { return !a ? b : gcd(b % a, a); }
ll binpow(ll a, ll b, ll mod) {
  return b ? (b % 2 ? (a * (sqr(binpow(a, b / 2, mod)) % mod)) % mod
                    : sqr(binpow(a, b / 2, mod)) % mod)
           : 1;
}
ll binmult(ll a, ll b, ll mod) {
  return b ? (b % 2 ? (2 * binmult(a, b / 2, mod) + a) % mod
                    : (2 * binmult(a, b / 2, mod)) % mod)
           : 0;
}

long long dp[N][61];  // Replace map with array

signed main() {
  fast_io;
  ll n;
  cin >> n;
  vector<ll> a(n);
  unordered_set<ll> unique_values;
  for (auto &z : a) {
    cin >> z;
    unique_values.insert(z);
  }
  for (int i = 0; i < n; i++) {
    for (auto j : unique_values) {  // Iterate only over unique values
      ll to = max(a[i], j);
      dp[i + 1][to+30] = max(dp[i + 1][to+30], dp[i][j+30] + a[i]); // Adjust indices for array
    }
  }
  long long ans = 0;
  for (int i = 0; i <= n; i++) {
    for (auto j : unique_values) {  // Iterate only over unique values
      long long temp = dp[i][j+30] ? dp[i][j+30] - j : 0;  // Avoid calculating twice
      ans = max(ans, temp);
    }
  }
  cout << ans;
  cerr << endl
       << "Time execute: " << clock() / (double)CLOCKS_PER_SEC << " sec"
       << endl;
  return 0;
}