This program calculates the sum of all integers from 1 to n, considering negative for odd numbers and positive for even numbers. This is done using a mathematical formula. The code is already quite efficient, but there are a few improvements that can be made:

1. Instead of using an `if` clause to check if `n` is even or odd, we can use the bitwise operator `&`. The operation `n & 1` will return 1 if `n` is odd and 0 if `n` is even. This is a slightly faster operation than `%`.

2. We can combine the two lines of code that calculate `sum` into one line. This doesn't necessarily make the code faster, but it does make it more concise.

3. `#include <bits/stdc++.h>` is actually not a standard library and includes a lot of unnecessary headers which increases compilation time. It's better to include only the libraries that are being used, which in this case are `iostream` for input/output and `cstdint` for `int64_t`.

4. Instead of using `long long`, it's better to use `int64_t` from the `cstdint` library to ensure the size of the integer is always 64 bits, regardless of the platform the code is being compiled on.

Here is the optimized code:

```cpp
#include <iostream>
#include <cstdint>
using namespace std;
int main() {
  int64_t n;
  cin >> n;
  int64_t sum = (n >> 1) - (n & 1) * (n % 2);
  cout << sum << "\n";
  return 0;
}
```

I have also replaced `endl` with `"\n"` to print the newline character. The reason for this is that `endl` forces a flush of the output stream, which can be slower if you're doing a lot of output. In this case, it doesn't matter much because we're only doing one output operation, but it's a good habit to get into.