Optimization Steps:

1. The division operation is more expensive than the bitwise operation. We can replace the division operation by 2 with a right shift operation by 1 bit. In binary, shifting right by one bit is equivalent to integer division by 2. The same goes for multiplication by 2.

2. The `bits/stdc++.h` is actually a header file that includes every standard library. The cost of this is that the compilation time can increase. We should only include what we need. In this case, we need `iostream` for input/output operations.

3. The `using namespace std;` is typically considered bad practice. It's better to use `std::` before every standard function.

4. We can eliminate the 'sum' variable entirely and directly output the result to the console.

Here is the optimized code:

```cpp
#include <iostream>

int main() {
  long long n;
  std::cin >> n;
  if (n & 1) {
    std::cout << -((n + 1) >> 1) << std::endl;
  } else {
    std::cout << (n >> 1) << std::endl;
  }
  return 0;
}
```

This code runs faster and uses less memory because it performs fewer operations and doesn't use any extra variables.