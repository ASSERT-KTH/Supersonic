The given code is actually quite optimized already. However, there are a few small tweaks that can be made.

Optimization Steps:

1. The `#include <bits/stdc++.h>` is generally considered bad practice because it includes all the standard library headers at once, which can slow down the compiler. Instead, it is better to only include the headers that are actually used.

2. The `using namespace std;` is generally considered bad practice. It's better to use `std::` before `cin`, `cout` and `endl`.

3. One small optimization could be done in the way `sum` is calculated. Instead of doing a division operation (which is computationally expensive), we can use bit manipulation for the division by 2. A right shift by one bit (`n >> 1`) is equivalent to `n / 2`.

Optimized Code:

```cpp
#include <iostream>

int main() {
  long long n, sum;
  std::cin >> n;
  if (n % 2 == 0) {
    sum = n >> 1; // Bit shift instead of division
  } else {
    sum = -((n + 1) >> 1); // Bit shift instead of division
  }
  std::cout << sum << std::endl;
  return 0;
}
```

Remember, these optimizations are fairly minor and in many cases, modern compilers would do these kind of optimizations automatically.