#include <iostream>
#include <algorithm>
#include <vector>
#include <stdint.h>

struct POINT {
  int64_t x, y;
  POINT() : x(0), y(0) {}
  POINT(int64_t x, int64_t y) : x(x), y(y) {}
  POINT operator+(const POINT &t) const { return POINT(x + t.x, y + t.y); }
  POINT operator-(const POINT &t) const { return POINT(x - t.x, y - t.y); }
  POINT operator!() const { return POINT(-y, x); }
};

inline int64_t dot(const POINT &a, const POINT &b) {
  return a.x * b.x + a.y * b.y;
}

inline int64_t cross(const POINT &a, const POINT &b) {
  return a.x * b.y - a.y * b.x;
}

inline int64_t cross(const POINT &a, const POINT &b, const POINT &c) {
  auto ac = a - c;
  auto bc = b - c;
  return cross(ac, bc);
}

inline bool halfPlane(const POINT &p) {
  if (p.y == 0)
    return p.x < 0;
  return p.y < 0;
}

inline bool angSortCmp(const POINT &a, const POINT &b) {
  bool ha = halfPlane(a);
  bool hb = halfPlane(b);
  if (ha != hb)
    return ha < hb;
  return cross(a, b) > 0;
}

const int N = 2000;
int64_t n;
int64_t S;
POINT tab[N + 7];
int64_t poz[N + 7];
POINT stab[N + 7];

struct kierunek {
  POINT wek;
  int64_t p, q;
};

int main() {
  std::cin >> n >> S;
  S *= 2;
  for (int64_t i = 1; i <= n; ++i)
    std::cin >> tab[i].x >> tab[i].y;
  std::sort(tab + 1, tab + n + 1, [](const POINT &a, const POINT &b) -> bool {
    if (a.x == b.x)
      return a.y > b.y;
    return a.x < b.x;
  });
  for (int64_t i = 1; i <= n; ++i) {
    poz[i] = i;
    stab[i] = tab[i];
  }
  std::vector<kierunek> kol;
  kol.reserve((n * (n - 1)) / 2);
  for (int64_t i = 1; i <= n; ++i) {
    for (int64_t j = i + 1; j <= n; ++j) {
      kol.push_back({!(tab[j] - tab[i]), i, j});
    }
  }
  std::sort(kol.begin(), kol.end(),
       [](const kierunek &a, const kierunek &b) -> bool {
         return angSortCmp(a.wek, b.wek);
       });
  for (kierunek u : kol) {
    int64_t p = u.p;
    int64_t q = u.q;
    std::swap(stab[poz[p]], stab[poz[q]]);
    std::swap(poz[p], poz[q]);
    int64_t l = 1;
    int64_t r = n;
    while (l <= r) {
      int64_t s = (l + r) / 2;
      int64_t ww = cross(tab[q], stab[s], tab[p]);
      if (ww == S) {
        std::cout << "Yes" << std::endl;
        std::cout << tab[p].x << ' ' << tab[p].y << std::endl;
        std::cout << tab[q].x << ' ' << tab[q].y << std::endl;
        std::cout << stab[s].x << ' ' << stab[s].y << std::endl;
        exit(0);
      }
      if (ww > S)
        r = s - 1;
      else
        l = s + 1;
    }
    l = 1;
    r = n;
    while (l <= r) {
      int64_t s = (l + r) / 2;
      int64_t ww = cross(tab[q], stab[s], tab[p]);
      if (ww == -S) {
        std::cout << "Yes" << std::endl;
        std::cout << tab[p].x << ' ' << tab[p].y << std::endl;
        std::cout << tab[q].x << ' ' << tab[q].y << std::endl;
        std::cout << stab[s].x << ' ' << stab[s].y << std::endl;
        exit(0);
      }
      if (ww > -S)
        r = s - 1;
      else
        l = s + 1;
    }
  }
  std::cout << "No" << std::endl;
  return 0;
}