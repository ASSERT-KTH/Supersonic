#include <iostream>
#include <cstdio>
#include <algorithm>

const int maxLig = (1e5) + 5;
const int maxCol = 12;

int nbLig, nbCol, nbReq;
char grille[maxLig][maxCol] = {'~'};
int proc[maxLig][maxCol];
int tps = 0;
struct Point { int x, y; } go[maxLig][maxCol];

void comp(int lig, int col, int safeLig) {
  // ...
}

Point getFin(int lig, int col) {
  // ...
}

int blocRef[maxLig];
bool compBloc(int bloc) {
  if (bloc >= nbLig / 600)
    return false;
  int deb = bloc * 600, fin = std::min(nbLig, (bloc + 1) * 600);
  // ...
}

int main() {
  scanf("%d %d %d", &nbLig, &nbCol, &nbReq);
  for (int lig = 1; lig <= nbLig; ++lig) {
    for (int col = 1; col <= nbCol; ++col) {
      scanf(" %c", &grille[lig][col]);
    }
  }
  ++tps;
  for (int bloc = 0;; ++bloc) {
    if (!compBloc(bloc))
      break;
  }
  for (int req = 0; req < nbReq; ++req) {
    char mode;
    scanf(" %c", &mode);
    int lig, col;
    scanf("%d %d", &lig, &col);
    if (mode == 'A') {
      Point res = getFin(lig, col);
      if (res.x == 0 && res.y == 0)
        res = {-1, -1};
      printf("%d %d\n", res.x, res.y);
    } else {
      ++tps;
      char nv;
      scanf(" %c", &nv);
      grille[lig][col] = nv;
      int bloc = blocRef[lig];
      compBloc(bloc);
      if (bloc)
        compBloc(bloc - 1);
    }
  }
  return 0;
}