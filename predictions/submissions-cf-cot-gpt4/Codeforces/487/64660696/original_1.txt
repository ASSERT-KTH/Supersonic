The given code is a C++ program that reads a grid and a set of requests from the user. It processes each request by either finding the final position of a cell, or updating the grid and recomputes the final position for the cells affected.

Here are the steps to optimize the given code:

1. Remove `#include <bits/stdc++.h>`: This header file is quite large and including it can increase the compile time. Instead, include only the necessary header files.

2. Use `std::ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);` at the beginning of the main function to speed up the IO operations.

3. Avoid using global variables as much as possible, since access to global variables can be slower than access to locals (due to memory caching issues). However, in this case, due to the size of the data we are handling, we might have to use global variables to avoid stack overflow.

4. Use prefix increment (++i) instead of postfix (i++) in loops where the result of the increment operation is not used. This can be faster because postfix increment needs to create a copy of the original value, increment the value, and then return the unincremented copy, while prefix increment can simply increment the value.

5. The `comp` function is recursive which might lead to stack overflow for large inputs, and it also does not seem to handle cyclic cases, which might lead to infinite recursion. However, without the exact problem statement it's hard to suggest a concrete optimization here. If possible, consider changing the recursive function to an iterative one.

6. Use '\n' instead of std::endl for newline. std::endl causes a flush operation, which can slow down the program.

Here is the optimized code:

```C++
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
using pii = pair<int, int>;
const int maxLig = (1e5) + 5;
const int maxCol = 12;
const int maxReq = (1e5) + 5;
const int sqr = 600;
int nbLig, nbCol, nbReq;
char grille[maxLig][maxCol];
int proc[maxLig][maxCol];
int tps = 0;
pair<int, int> go[maxLig][maxCol];
int blocRef[maxLig];

void comp(int lig, int col, int safeLig) {
  // rest of the function logic remains the same
}

pair<int, int> getFin(int lig, int col) {
  // rest of the function logic remains the same
}

bool compBloc(int bloc) {
  // rest of the function logic remains the same
}

int main() {
  std::ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  cin >> nbLig >> nbCol >> nbReq;
  fill_n(&grille[0][0], maxLig * maxCol, '~');
  for (int lig = 1; lig <= nbLig; ++lig) {
    for (int col = 1; col <= nbCol; ++col) {
      cin >> grille[lig][col];
    }
  }
  ++tps;
  for (int bloc = 0;; ++bloc) {
    if (!compBloc(bloc))
      break;
  }
  for (int req = 0; req < nbReq; ++req) {
    // rest of the function logic remains the same
  }
}
```

Note: The code optimization heavily depends on the specific problem you are trying to solve. This optimization may not be the best one for every situation.