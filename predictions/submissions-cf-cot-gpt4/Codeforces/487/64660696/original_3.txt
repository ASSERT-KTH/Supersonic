The program consists of three major parts: 

1. Reading the input.
2. Compiling the blocks.
3. Processing the requests.

Here are the following optimization steps for the given code:

1. Replace `#include <bits/stdc++.h>` with specific includes. The `<bits/stdc++.h>` is non-standard and includes a lot of unnecessary headers, which can slow down the compilation time. 

2. It is better to use `std::array` instead of C-style arrays. It provides a safer interface and can be passed to functions without decaying to a pointer.

3. Use `std::ios::sync_with_stdio(false)` before any I/O operations to turn off synchronization with C library's stdio, which can speed up I/O operations.

4. Use `cin.tie(NULL)` to cancel the tying of cin to cout, which can speed up I/O operations.

5. The `fill_n` operation in the main function is unnecessary as the grid will be filled with input later.

6. Instead of using a while loop to increment the 'bloc' variable, use a for loop with a condition to break, which is more readable and slightly faster.

7. The function `compBloc` is called two times consecutively in the main function. This can be optimized by checking the bloc value before calling the function the second time.

Here is the optimized code:

```cpp
#include <iostream>
#include <array>
#include <utility>
using namespace std;
using pii = pair<int, int>;
const int maxLig = (1e5) + 5;
const int maxCol = 12;
const int maxReq = (1e5) + 5;
const int sqr = 600;
int nbLig, nbCol, nbReq;
array<array<char, maxCol>, maxLig> grille;
array<array<int, maxCol>, maxLig> proc;
int tps = 0;
array<array<pii, maxCol>, maxLig> go;
int blocRef[maxLig];

// rest of the functions remain unchanged

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> nbLig >> nbCol >> nbReq;
  for (int lig = 1; lig <= nbLig; ++lig) {
    for (int col = 1; col <= nbCol; ++col) {
      cin >> grille[lig][col];
    }
  }
  ++tps;
  for (int bloc = 0; compBloc(bloc); ++bloc);
  for (int req = 0; req < nbReq; ++req) {
    char mode;
    cin >> mode;
    int lig, col;
    cin >> lig >> col;
    if (mode == 'A') {
      pii res = getFin(lig, col);
      if (res == pii{0, 0})
        res = {-1, -1};
      cout << res.first << " " << res.second << "\n";
    } else {
      ++tps;
      char nv;
      cin >> nv;
      grille[lig][col] = nv;
      int bloc = blocRef[lig];
      compBloc(bloc);
      if (bloc)
        compBloc(bloc - 1);
    }
  }
}
```
This code is more manageable, more readable, and slightly faster.