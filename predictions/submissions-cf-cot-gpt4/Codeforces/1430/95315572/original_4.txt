Step by Step Optimization:

1. Avoid using #include <bits/stdc++.h>: This header file includes quite a lot of files which can increase the compile time. It's better to include only those header files which are actually required.
2. Avoid using "using namespace std;": This causes the compiler to assume std:: before any C++ standard library item. This can lead to naming conflicts if a same-name function/variable is created.
3. Avoid using global macros: It's better to use constants inside the function rather than defining them globally.
4. Avoid using endl: It's slower because it forces a flushing stream. You can use "\n" for a new line.
5. Use prefix increment/decrement operators: The prefix version (++i) avoids unnecessary work. It increments the value and returns the incremented version. The postfix operator (i++) involves a copy of i, incrementing the value, and then returning the original value, i.e., it requires an extra operation.
6. Initialize flag variable inside the loop: There is no need to initialize the flag variable outside the loop. It can be initialized where it is used.

Now let's write the optimized code:

```cpp
#include <iostream>
#include <ios>

void solve() {
  const long long MOD = 1000000007;
  long long n;
  std::cin >> n;

  for (long long i = 0; i <= 335; ++i) {
    bool flag = false;
    for (long long j = 0; j <= 210; ++j) {
      long long p = 3 * i + 5 * j;
      long long z = (n - p) / 7;
      if (p + z * 7 == n && z >= 0) {
        std::cout << i << ' ' << j << ' ' << z << '\n';
        flag = true;
        break;
      }
    }
    if (flag)
      break;
  }

  if (!flag)
    std::cout << -1 << '\n';
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  int tests = 1;
  std::cin >> tests;

  while (tests--)
    solve();

  return 0;
}
```

Remember, this is a light-optimization. If you need to optimize the code more, you may need to focus on the algorithmic complexity of the program.