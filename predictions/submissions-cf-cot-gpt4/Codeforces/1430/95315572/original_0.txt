The given C++ program can be optimized by reducing the number of operations in the inner loop. The inner loop currently calculates the equation "p + z * 7 == n". This equation can be simplified and calculated at the beginning of the outer loop.

Step by step optimization:

1. Calculate `n mod 7` at the beginning of the outer loop and store it in a variable, say `n_mod_7`. This will be used as the starting point for the `j` loop. This ensures we don't do unnecessary iterations in the `j` loop.

2. Calculate `n - 3 * i` at the beginning of the outer loop and store it in a variable, say `n_minus_3i`. This will be used in the `j` loop instead of calculating `n - 3 * i - 5 * j` each time.

3. In the `j` loop, calculate `n_minus_3i - 5 * j` and store it in a variable, say `remaining`. If `remaining` is negative, break the loop. If `remaining mod 7 == 0`, print `i`, `j` and `remaining / 7`, set `flag` to true and break the loop.

4. The `z` variable is not needed anymore and can be removed.

Here's the optimized code:

```cpp
#include <bits/stdc++.h>
#define ll long long
#define endl "\n"
#define MOD 1000000007
using namespace std;
void solve() {
  ll n, i, j;
  cin >> n;
  ll a, b;
  bool flag = false;
  for (i = 0; i <= 335; i++) {
    ll n_minus_3i = n - 3 * i;
    ll n_mod_7 = n_minus_3i % 7;
    for (j = n_mod_7; j <= 210; j += 7) {
      ll remaining = n_minus_3i - 5 * j;
      if (remaining < 0) {
        break;
      }
      if (remaining % 7 == 0) {
        cout << i << " " << j << " " << remaining / 7 << endl;
        flag = true;
        break;
      }
    }
    if (flag == true)
      break;
  }
  if (flag == false)
    cout << -1 << endl;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int tests = 1;
  cin >> tests;
  while (tests--)
    solve();
  return 0;
}
```
This optimized version of the program significantly reduces redundant calculations and unnecessary iterations, thus potentially improving the runtime of the program.