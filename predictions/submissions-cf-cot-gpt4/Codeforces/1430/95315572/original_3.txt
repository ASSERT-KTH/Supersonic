This program is trying to solve a problem by using brute force nested loop. The time complexity of this program is O(n^2). The optimization can be done in two steps:

Step 1: Instead of using brute force, we can calculate the value of 'z' directly in the loop of 'i' and 'j'. This will reduce the time complexity to O(n).

Step 2: Use short instead of long long for 'i' and 'j'. This will reduce the memory usage.

The optimized program will look like this:

```cpp
#include <bits/stdc++.h>
#define ll long long
#define endl "\n"
#define MOD 1000000007
using namespace std;
void solve() {
  ll n, k;
  cin >> n;
  ll a, b, c;
  bool flag = false;
  for (short i = 0; i <= 335; i++) {
    for (short j = 0; j <= 210; j++) {
      ll p = 3 * i + 5 * j;
      if (p > n) break;
      ll z = (n - p) / 7;
      if (p + z * 7 == n) {
        cout << i << " " << j << " " << z << endl;
        flag = true;
        break;
      }
    }
    if (flag == true) break;
  }
  if (flag == false) cout << -1 << endl;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int tests = 1;
  cin >> tests;
  while (tests--) solve();
  return 0;
}
```

This program will run faster and use less memory. The algorithm's time complexity is reduced to O(n), and we also use less memory by using short instead of long long for 'i' and 'j'.