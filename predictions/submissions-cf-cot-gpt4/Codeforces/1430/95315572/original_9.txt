The main optimization options for this code are moving repeated calculations out of loops, reducing unnecessary memory access and avoiding branching whenever possible. Here's how we can apply these principles:

1. **Move repeated calculations out of loop**: `3 * i` is calculated in each inner loop iteration, even though its value does not change within a single outer loop cycle. We can calculate it once per outer loop cycle and store the value.

2. **Reduce unnecessary memory access**: The Boolean variable `flag` is used to break from the outer loop when a valid combination is found. However, we can achieve the same result by returning from the function, thus avoiding the need to store and check `flag`.

3. **Avoid branching**: In the inner loop, the condition `p + z * 7 == n && z >= 0` is checked. However, if the value of `z` is negative, the multiplication and addition operation could be avoided.

Here is the optimized code:

```C++
#include <bits/stdc++.h>
#define ll long long
#define endl "\n"
#define MOD 1000000007
using namespace std;

void solve() {
  ll n, i, j;
  cin >> n;
  for (i = 0; i <= 335; i++) {
    ll p_i = 3 * i;
    for (j = 0; j <= 210; j++) {
      ll p = p_i + 5 * j;
      ll z = n - p;
      if (z >= 0) {
        z /= 7;
        if (p + z * 7 == n) {
          cout << i << " " << j << " " << z << endl;
          return;
        }
      }
    }
  }
  cout << -1 << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int tests = 1;
  cin >> tests;
  while (tests--)
    solve();
  return 0;
}
```

Please note that the `#include <bits/stdc++.h>` and `#define MOD 1000000007` are unused and could be removed to make the code cleaner, but it's not included in the optimization per your request.