Step 1: 
The first optimization can be done by reducing the number of divisions and multiplications. These operations are more costly compared to addition and subtraction. In the given program, the expression `p + z * 7 == n` can be simplified by subtracting `p` from both sides at the start, which reduces one multiplication operation.

Step 2: 
The second optimization can be done by avoiding the use of `endl` for newlines. `endl` not only inserts a newline character but also flushes the output stream, which is a relatively expensive operation. We can use '\n' instead of `endl`.

Step 3: 
We can also avoid declaring unused variables `a, b, c, k` in the `solve()` function.
  
Step 4:
We can break the inner loop immediately when `p > n` because after this point `p` will always be greater than `n` and it will never satisfy the condition `p + z * 7 == n`.

Step 5: 
We can directly return from the function when we find a solution. This will avoid checking the `flag` variable again after the loop.

Optimized program:

```cpp
#include <bits/stdc++.h>
#define ll long long
#define MOD 1000000007
using namespace std;

void solve() {
  ll n, i, j;
  cin >> n;
  bool flag = false;
  for (i = 0; i <= 335; i++) {
    for (j = 0; j <= 210; j++) {
      ll p = 3 * i + 5 * j;
      if (p > n) break;
      ll z = n - p;
      z = z / 7;
      if (z * 7 == n - p && z >= 0) {
        cout << i << " " << j << " " << z << '\n';
        return;
      }
    }
  }
  cout << -1 << '\n';
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int tests = 1;
  cin >> tests;
  while (tests--)
    solve();
  return 0;
}
```
