This program has two nested loops that iterate multiple times. This gives the program a time complexity of O(n^2). The first optimization we can do is to reduce the time complexity of the program. We can do this by eliminating one of the loops.

In this program, the inner loop calculates the value of `p` and `z` and checks if `p + z * 7` is equal to `n`. We can eliminate this loop by calculating `j` directly from `i` and `n`.

The second optimization is to eliminate the unnecessary use of the `flag` variable. We can directly put the `cout` statement inside the condition and return from the function if the condition is met. If the loop finishes without finding a solution, we can print `-1` directly.

Here is the optimized code:

```c++
#include <bits/stdc++.h>
#define ll long long
#define endl "\n"
#define MOD 1000000007
using namespace std;
void solve() {
  ll n, i, j, k;
  cin >> n;
  ll a, b, c;
  for (i = 0; i <= 335; i++) {
    ll p = 3 * i;
    ll j = (n - p) / 5;
    ll z = n - p - 5 * j;
    z = z / 7;
    if (p + 5 * j + z * 7 == n && j >= 0 && z >= 0) {
        cout << i << " " << j << " " << z << endl;
        return;
    }
  }
  cout << -1 << endl;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int tests = 1;
  cin >> tests;
  while (tests--)
    solve();
  return 0;
}
```

This optimized version of the program has a time complexity of O(n) which is significantly faster than the original version.