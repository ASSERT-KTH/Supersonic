Step-by-step optimization:

1. Removal of #include <bits/stdc++.h>: This header file is quite large and including it can significantly increase the compilation time. It's better to include only those libraries that are actually used in the program.

2. Using '\n' instead of endl: endl causes a flush operation, which can be costly in terms of time. It's better to use '\n' when fast output is a requirement.

3. Avoiding the use of the variable flag: The variable flag is being used to break out of two nested loops. Instead of using flag, we could return from the function directly after finding a solution. This saves us the overhead of checking the flag variable multiple times.

4. Avoiding unnecessary division: In the current code, we are performing the division operation on every iteration of the inner loop. We can move this operation outside the inner loop to perform it only once per iteration of the outer loop.

Here is the optimized version of the code:

```cpp
#include <iostream>
#define ll long long
#define MOD 1000000007
using namespace std;

void solve() {
  ll n, i, j, z;
  cin >> n;

  for (i = 0; i <= 335; i++) {
    ll p = 3 * i;
    ll m = n - p;
    for (j = 0; j <= 210; j++) {
      ll q = 5 * j;
      if (m >= q) {
        z = (m - q) / 7;
        if (p + q + z * 7 == n) {
          cout << i << ' ' << j << ' ' << z << '\n';
          return;
        }
      }
    }
  }
  
  cout << -1 << '\n';
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int tests;
  cin >> tests;
  while (tests--)
    solve();
  return 0;
}
```
Please note that the optimization might vary based on the specific constraints and requirements of the problem. The optimization provided here is based on the provided code only.