Here are the steps to optimize this program:

1. Avoid using `#include <bits/stdc++.h>`: It includes a lot of unnecessary headers which can increase the compilation time of the program. Instead, include only those libraries that are actually needed in the program.

2. Avoid using `using namespace std`: This can cause a name collision problem, where a standard library function may collide with a user-defined function with the same name. It's better to use `std::` before each standard library function.

3. Avoid using macros for code optimization: Macros are replaced by the preprocessor before the compilation, which can lead to code bloat. It's better to use inline functions or const variables.

4. Use `std::ios_base::sync_with_stdio(false)` and `std::cin.tie(nullptr)`: These can speed up `cin` and `cout` operations for large inputs and outputs.

5. Avoid using `memset` to set array values: `memset` can cause undefined behavior for data types other than `char`.

6. Avoid global variables if not necessary: They can lead to unexpected behavior and increase memory usage.

7. Use `auto` to reduce the code size and improve readability.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <climits>
#include <cmath>
using ll = long long int;
constexpr ll dx[] = {-1, +1, 0, 0, +1, -1, +1, -1};
constexpr ll dy[] = {0, 0, -1, +1, +1, +1, -1, -1};
constexpr ll mx = 1e5 + 123;
constexpr ll MOD = 1e9 + 7;
constexpr ll INF = LLONG_MAX;
ll power(ll a, ll b) {
  a %= MOD;
  if (!a)
    return 0;
  ll p = 1;
  while (b > 0) {
    if (b & 1) {
      p *= a;
      p %= MOD;
    }
    a *= a;
    a %= MOD;
    b = b >> 1;
  }
  return p;
}
template <class T> void print(std::vector<T> &v) {
  for (auto u : v) {
    std::cout << u << " ";
  }
  std::cout << std::endl;
}
template <class T> T gcd(T a, T b) { return (b != 0 ? gcd<T>(b, a % b) : a); }
template <class T> T lcm(T a, T b) { return (a / gcd<T>(a, b) * b); }
int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  ll t, a, i, x, y, o;
  std::cin >> t;
  while (t--) {
    std::cin >> a;
    o = 1;
    std::cout << 2 << std::endl;
    x = (a + (a - 1) + 1) / 2;
    std::cout << a << " " << a - 1 << std::endl;
    for (i = a - 2; i >= 1; i--) {
      std::cout << x << " " << i << std::endl;
      x = (x + i + 1) / 2;
    }
  }
  return 0;
}
```
Please note that the `power` function may still give wrong results if `a` and `b` are large due to numeric overflow. If this is a concern, you should consider using a more sophisticated algorithm for modular exponentiation, such as powmod.