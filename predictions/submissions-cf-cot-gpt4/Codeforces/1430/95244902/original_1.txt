Here are the steps to optimize the code:

1. Avoid using "#include <bits/stdc++.h>", this header file includes too many headers that aren't needed in this program, which increases compilation time. Instead, include only the necessary header files like "iostream" and "cmath".

2. Remove "#define speed()" and "#define file()". These macros are not being used in the code.

3. Avoid using "using namespace std;", it could lead to naming conflicts. It's better to use std:: before standard library functions.

4. Avoid using "#define" directives for simple functions like "rep" and "trace". It's better to write them as inline functions, which are clearer and less error-prone.

5. Remove unused macros, typedefs, and constants from the code. This can reduce the memory usage.

6. Avoid using "std::endl" to print a new line character and flush the output buffer. It's better to use "\n" if buffer flushing is not necessary.

7. There's no need to declare "a", "i", "x", "y", and "o" at the start of the main function. It's better to declare variables as close as possible to where they're used. This can improve code readability.

8. Instead of reading "t" from the input and then using a while loop, it's better to use a for loop. This can improve code readability.

9. Instead of calculating "x" twice, calculate it once and store it in a variable.

Here is the optimized code:

```cpp
#include <iostream>
#include <cmath>

typedef long long int ll;

int main() {
  ll t;
  std::cin >> t;

  for (ll test_case = 0; test_case < t; ++test_case) {
    ll a;
    std::cin >> a;

    std::cout << 2 << "\n";

    ll x = (a + (a - 1) + 1) / 2;
    std::cout << a << " " << a - 1 << "\n";

    for (ll i = a - 2; i >= 1; --i) {
      std::cout << x << " " << i << "\n";
      x = (x + i + 1) / 2;
    }
  }

  return 0;
}
```