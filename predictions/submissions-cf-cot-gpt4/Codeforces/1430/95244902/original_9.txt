Firstly, here are some general steps to optimize the program:

1. Avoid using `#include <bits/stdc++.h>`: This line includes a lot of unnecessary libraries which increases the compilation time. Instead, include only the libraries that are needed.

2. Avoid using `using namespace std;`: This line can potentially cause name collisions, which can lead to bugs. Instead, use the `std::` prefix before standard library functions.

3. Avoid using `#define`: The preprocessor macro `#define` can make debugging more difficult. It's better to use `const` or `inline` functions.

4. Use `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(NULL);` to optimize I/O operations.

5. Remove unnecessary functions and variables: If they are not used in the program, they just take up memory space.

Now, let's apply these optimizations to the given program:

```cpp
#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <climits>
#include <cmath>

typedef long long int ll;
typedef std::vector<ll> vi;
typedef std::pair<ll, ll> pll;
typedef std::vector<pll> vll;

const ll mx = 1e5 + 123;
const ll MOD = 1e9 + 7;
const ll INF = LLONG_MAX;

ll power(ll a, ll b) {
  a %= MOD;
  if (!a) return 0;
  ll p = 1;
  while (b > 0) {
    if (b & 1) {
      p *= a;
      p %= MOD;
    }
    a *= a;
    a %= MOD;
    b = b >> 1;
  }
  return p;
}

void print(const vi &v) {
  for (ll u : v) {
    std::cout << u << " ";
  }
  std::cout << std::endl;
}

ll gcd(ll a, ll b) { return (b != 0 ? gcd(b, a % b) : a); }

ll lcm(ll a, ll b) { return (a / gcd(a, b) * b); }

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  ll t, a, i, x;
  std::cin >> t;
  while (t--) {
    std::cin >> a;
    std::cout << 2 << std::endl;
    x = (a + (a - 1) + 1) / 2;
    std::cout << a << " " << a - 1 << std::endl;
    for (i = a - 2; i >= 1; i--) {
      std::cout << x << " " << i << std::endl;
      x = (x + i + 1) / 2;
    }
  }
  return 0;
}
```

Notice that I've removed some unused variables and functions, replaced `#define` with `const` or `inline` functions, and avoided `using namespace std;`. These changes should make the program more efficient and easier to debug.