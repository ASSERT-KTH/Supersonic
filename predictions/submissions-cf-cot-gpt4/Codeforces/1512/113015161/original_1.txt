This is a complex piece of code and it seems to be a combination of many different utility functions and some problem-solving code. I'll still try to provide some general optimization steps:

1. Use pre-increment (++i) instead of post-increment (i++) in loops. Pre-increment is faster than post-increment because post-increment keeps a copy of the previous value which is not necessary in this case.

2. For mod operations, if mod is power of 2, replace it with bitwise and operation. For instance, for getting mod 2, we can use &1.

3. Remove unused function definitions like "_pow", "pow_mod", "mod_inverse", "factorial", "is_prime", "sieve_prime_generator", "prime_factorization", "total_divisors", "dfs", "bfs". These functions are not used anywhere in the program, removing them will save memory.

4. Also, remove unused typedefs and define macros to save memory.

5. Remove unused global variables.

Here is the optimized code:

```c++
#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define Test ll _; cin >> _; while (_--)
#define nl << '\n';
#define Good_Bye return 0;
const int mX = 1e7 + 12;
int c, a[mX];
ll mp[mX];
void sum_of_divisors() {
  for (int i = 1; i <= 1e7; ++i)
    for (int j = i; j <= 1e7; j += i)
      a[j] += i;
  for (int i = 1e7; i >= 0; --i)
    if (a[i] <= 1e7)
      mp[a[i]] = i;
}
void case_i() {
  cin >> c;
  if (mp[c])
    cout << mp[c] nl else cout << -1 nl
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  sum_of_divisors();
  Test case_i();
  Good_Bye
}
```
This code is simplified and optimized to a great extent. It will run faster and consume less memory.