The given code consists mostly of type definitions, macros and helper functions. As such, the most significant optimization we can perform is related to the `sum_of_divisors` function, which is currently using a naive approach. 

1. Calculate the sum of divisors: The current approach has a time complexity of O(n^2), which is not efficient for large inputs. We can optimize this by using a modified Sieve of Eratosthenes algorithm to calculate the sum of divisors for each number up to `1e7`. We iterate from `1` to `1e7` and for each `i`, we add `i` to all of its multiples. This reduces the time complexity to O(n log n).

2. Avoid the usage of `std::endl` or `nl`: Using `std::endl` causes an unnecessary flush operation which slows down the output. You can replace it with '\n'.

3. Avoid global variables: Global variables can increase the complexity of the program and make debugging difficult. They can also lead to unexpected results in multithreaded programs.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int mX = 1e7 + 12;
int c, a[mX];
ll mp[mX];

void sum_of_divisors() {
  for (ll i = 1; i <= 1e7; i++)
    for (ll j = i; j <= 1e7; j += i)
      a[j] += i;
  for (ll i = 1e7; i >= 0; i--)
    if (a[i] <= 1e7)
      mp[a[i]] = i;
}

void case_i() {
  cin >> c;
  if (mp[c])
    cout << mp[c] << '\n';
  else
    cout << -1 << '\n';
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  sum_of_divisors();
  
  ll t;
  cin >> t;
  while (t--) {
    case_i();
  }

  return 0;
}
```

I have removed the unused helper functions and macros to make the code cleaner. If they are needed in your actual code, you can add them back.

Also, note that using `#include <bits/stdc++.h>` and `using namespace std;` is generally not recommended in large codebases or production code as it includes a lot of unnecessary files and using the entire `std` namespace can lead to naming conflicts. However, they are often used in competitive programming for the sake of brevity.