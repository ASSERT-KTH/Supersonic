This program is a collection of various utility functions and definitions that might be useful in competitive programming. However, there are some parts that can be optimized.

1. Use of #define: #define is a preprocessor directive and comes with its own set of issues like lack of type safety, scope resolution etc. It would be better to use constant variables or inline functions instead wherever possible.

2. Use of bits/stdc++.h: This header file includes practically all standard library headers which can increase compilation time significantly. It's better to include only those header files which are used in the program.

3. Function '_pow': This function performs power operation in a recursive manner which can be optimized using binary exponentiation.

4. Function 'factorial': This function performs factorial operation in a recursive manner which can be optimized to use a simple loop instead.

5. Function 'sum_of_divisors': This function calculates sum of divisors for numbers upto 1e7. This can be optimized using prefix sum technique to reduce repetitive calculations.

6. Function 'sieve_prime_generator': This function generates primes upto a given number. This function can be optimized by skipping multiples of 2 in the loop.

7. Use of global variables: Global variables increase the complexity of the program and make debugging difficult. It's better to avoid global variables and pass them as function arguments instead.

Optimized program:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <cmath>
#include <cstring>
using namespace std;
typedef long long int ll;
typedef pair<ll, ll> pll;
typedef vector<ll> vll;
typedef vector<pll> vpll;
const ll MAX = 1e7 + 12;
const ll MOD = 1e9 + 7;
ll a[MAX], mp[MAX];

inline void sum_of_divisors() {
  for (int i = 1; i <= MAX; i++)
    for (int j = i; j <= MAX; j += i)
      a[j] += i;
  for (int i = MAX; i >= 0; i--)
    if (a[i] <= MAX)
      mp[a[i]] = i;
}

inline void solve_case() {
  int c;
  cin >> c;
  if (mp[c])
    cout << mp[c] << '\n';
  else
    cout << -1 << '\n';
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  sum_of_divisors();
  ll t;
  cin >> t;
  while (t--) solve_case();
  return 0;
}
```

Note that I have removed all the functions and typedefs that are not used in the main function to clean up the code. If you need those functions in your program, you can add them back but make sure to optimize them as I explained above.