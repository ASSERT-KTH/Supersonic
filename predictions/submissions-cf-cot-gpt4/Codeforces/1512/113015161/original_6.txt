This code is quite large and complex, but here are some general steps to optimize this code for running time and memory usage:

1. Remove unused functions: There are several functions defined in the code that are not being used, such as `_pow`, `pow_mod`, `mod_inverse`, `factorial`, `is_prime`, `sieve_prime_generator`, `prime_factorization`, `total_divisors`, `dfs`, and `bfs`. Removing these functions will reduce the memory footprint of the program.

2. Avoid using `std::cin` and `std::cout` for input/output, use `scanf` and `printf` instead. They are faster.

3. Avoid using `std::endl`, use '\n' instead. `std::endl` flushes the stream which can be time consuming. 

4. Remove the unused typedefs and macros.

5. Avoid using global variables. They can lead to code that is hard to debug and understand. Moreover, it is generally better to minimize the scope of variables as much as possible.

6. Use a more efficient algorithm for `sum_of_divisors()` if possible. The current algorithm has a time complexity of O(n^2), which is not efficient.

7. Use `const` for variables that are not going to change.

Here is the optimized version of the code:

```cpp
#include <cstdio>
#include <vector>
using namespace std;
typedef long long int ll;
const int mX = 1e7 + 12;
int c, a[mX];
ll mp[mX];

void sum_of_divisors() {
  for (int i = 1; i <= 1e7; i++)
    for (int j = i; j <= 1e7; j += i)
      a[j] += i;
  for (int i = 1e7; i >= 0; i--)
    if (a[i] <= 1e7)
      mp[a[i]] = i;
}

void case_i() {
  scanf("%d", &c);
  if (mp[c])
    printf("%lld\n", mp[c]);
  else
    printf("-1\n");
}

int main() {
  sum_of_divisors();
  ll _;
  scanf("%lld", &_);
  while (_--)
    case_i();

  return 0;
}
```

This version of the code should run faster and use less memory than the original version.