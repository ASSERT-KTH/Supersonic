This is a pretty big program. However, let's focus on the sum_of_divisors() function for optimization as it seems to be one of the core parts of your program and also one of the areas where optimization can have a significant impact. The function is currently using a nested loop which results in a time complexity of O(n^2), which is not efficient.

1. The first loop in the function goes from 1 to 1e7.
2. The second loop (inside the first loop) also iterates from the current value of i to 1e7, incrementing by i.
3. The nested loop results in significant time complexity. We can improve this by removing the need for the inner loop.

The sum_of_divisors() function is calculating the sum of divisors for each number from 1 to 1e7. The inner loop is used to add 'i' to a[j] for every multiple of 'i'. This can be optimized by iterating only up to sqrt(n) in the outer loop and then, for each 'i', we add 'i' to a[j] for j=i and i to a[j/i] for j > i. We also need to subtract 'i' if i is a square root of j to avoid counting it twice.

Here is the optimized sum_of_divisors() function:

```cpp
void sum_of_divisors() {
  for (int i = 1; i <= sqrt(1e7); i++)
    for (int j = i; j <= 1e7; j += i) {
      a[j] += i;
      if(j/i != i) a[j] += j/i;
      else a[j] -= i;
    }
  for (int i = 1e7; i >= 0; i--)
    if (a[i] <= 1e7)
      mp[a[i]] = i;
}
```

This version of the function will perform the same task but with much less computation, thus improving the running time of the program.