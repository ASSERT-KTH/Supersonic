The given program is inefficient due to the nested loop which causes the program to have a time complexity of O(n^2). This is because for each number i in the range [1,N], the program checks all multiples of i less than N.

To optimize this, you can use the Sieve of Eratosthenes approach where you start with i and increment by i each time, thus eliminating the need for a nested loop.

Another optimization can be made in the memory usage. The program uses both a static array and a dynamic vector to store results which is unnecessary. You can eliminate the static array and use only the dynamic vector which will auto adjust its size as per the requirements.

Step by step optimization is as follows:

1. Replace the nested loop with a single loop using Sieve of Eratosthenes approach. For each number i in the range [1,N], add i to all multiples of i less than N.
2. Remove the static array mp1[N] and use only the dynamic vector mp1. This will optimize memory usage.
3. You can also eliminate the else statement by initializing the values in the mp1 vector to -1. This way, if there's no match found, it will automatically print -1.

Here's the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;
const long long N = 10000001;

int main() {
  vector<long long> v1(N, 0);
  vector<long long> mp1(N, -1);
  
  for (int i = 1; i < N; i++) {
    for (int j = i; j < N; j += i) {
      v1[j] += i;
    }
    if (v1[i] < N && mp1[v1[i]] == -1)
      mp1[v1[i]] = i;
  }
  
  int t;
  cin >> t;
  while (t--) {
    int c;
    cin >> c;
    cout << mp1[c] << endl;
  }
}
```