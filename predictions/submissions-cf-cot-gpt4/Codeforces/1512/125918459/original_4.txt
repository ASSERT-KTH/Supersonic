Here are the steps that we could take to optimize the given program:

1. Remove unnecessary global variable declarations: The array `mp1` is declared twice, once globally and once in the `main` function. This can lead to confusion and unnecessary memory usage.

2. Use `std::ios::sync_with_stdio(false)` and `cin.tie(NULL)`: These will disable the synchronization of the new and old C++ standard I/O streams and unset the tying of `cin` and `cout` streams respectively. This can result in faster I/O operations.

3. Use `'\n'` instead of `endl`: `endl` causes a flush operation on the output stream, which can slow down programs if used excessively. It's often better to use `'\n'` unless you explicitly need the flush operation.

4. Avoid unnecessary operations: If `mp1[c]` is equal to 0, output -1 without checking `mp1[c]` again.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const long long N = 10000001;
long long v1[N];
vector<long long> mp1(N, 0);

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);

  for (int i = 1; i < N; i++) {
    for (int j = i; j < N; j += i) {
      v1[j] += i;
    }
  }
  for (int i = 1; i < N; i++) {
    if (v1[i] < N && mp1[v1[i]] == 0)
      mp1[v1[i]] = i;
  }
  int t;
  cin >> t;
  while (t--) {
    int c;
    cin >> c;
    if (mp1[c])
      cout << mp1[c] << '\n';
    else
      cout << -1 << '\n';
  }
}
```
This optimization focuses on improving the runtime and memory usage with small modifications. Please note that the given program performs a lot of computations which can still take significant time due to the high constant `N`. Depending on the specific requirements of your application, further optimization might be possible by improving the algorithm itself.