The given C/C++ program is performing some computations that could be optimized for running time and memory usage. Here are the steps to optimize it:

1. Use `std::ios::sync_with_stdio(false);` and `cin.tie(NULL);` to speed up the I/O operations in C++. This is specifically useful when there are multiple inputs/outputs to be handled.

2. Remove the unused `vector<long long> mp1(N, 0);` inside the main function. The global variable `long long mp1[N];` is what's being used in the program.

3. Use `printf` and `scanf` instead of `cin` and `cout` for faster I/O operations. This can be more efficient as it bypasses the overhead of stream extraction and insertion operators.

4. Change the data sizes according to their usage. For instance, the array `v1` contains sums which can be very large, so `long long` is justified. But for `mp1`, it contains indexes and is being compared with zero, so it can be an `int` array.

Here is the optimized C/C++ program:

```cpp
#include <iostream>
using namespace std;

const int N = 10000001;
long long v1[N];
int mp1[N];

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);

  for (int i = 1; i < N; i++) {
    for (int j = i; j < N; j += i) {
      v1[j] += i;
    }
  }

  for (int i = 1; i < N; i++) {
    if (v1[i] < N && mp1[v1[i]] == 0)
      mp1[v1[i]] = i;
  }

  int t;
  scanf("%d", &t);
  
  while (t--) {
    int c;
    scanf("%d", &c);
    if (mp1[c])
      printf("%d\n", mp1[c]);
    else
      printf("-1\n");
  }

  return 0;
}
```

Please note that although this program is optimized for better running time and memory usage, there are still other performance improvements that can be done depending on the specific problem being solved.