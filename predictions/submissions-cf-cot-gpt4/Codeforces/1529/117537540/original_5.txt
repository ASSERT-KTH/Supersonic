Here are the suggested optimizations for the given C++ program:

1. Avoid using `#include<bits/stdc++.h>` and include only necessary headers.
2. Avoid using `using namespace std;` and use `std::` instead.
3. Use `constexpr` for constant values like `MOD`.
4. Use `std::array` instead of raw array for `matrix` to allow better optimization by the compiler.
5. Instead of repeatedly checking `if (!marked[j])` in the loop, it's better to use a data structure like `std::priority_queue` to store the nodes in the order of their distances, which will automatically give us the node with the smallest distance.
6. Avoid using `std::endl` as it causes unnecessary flushing of the buffer. Use "\n" instead.

Now here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
#include <array>
#include <queue>

constexpr long long MOD = 1e9 + 7;
constexpr int MAX_SIZE = 600;
constexpr long long INF = 1e18;

using pii = std::pair<long long, int>;

std::array<std::array<int, MAX_SIZE>, MAX_SIZE> matrix;

void dijisktra(int start, int N) {
    std::vector<long long> cost(N, INF);
    cost[start] = 0;

    std::priority_queue<pii, std::vector<pii>, std::greater<pii>> pq;
    pq.push({0, start});

    while (!pq.empty()) {
        int u = pq.top().second;
        long long cur_cost = pq.top().first;
        pq.pop();

        if (cur_cost != cost[u])
            continue;

        for (int v = 0; v < N; v++) {
            if (cost[v] > cost[u] + matrix[u][v]) {
                cost[v] = cost[u] + matrix[u][v];
                pq.push({cost[v], v});
            }
        }
    }

    for (int i = 0; i < N; i++) {
        std::cout << (i == start ? 0 : cost[i]) << " ";
    }
    std::cout << "\n";
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);

    int N, M;
    std::cin >> N >> M;

    for (auto &row : matrix) {
        row.fill(1 << 30);
    }

    for (int i = 0; i < M; i++) {
        int a, b, c;
        std::cin >> a >> b >> c;
        matrix[a][b] = c;
    }

    for (int i = 0; i < N; i++) {
        dijisktra(i, N);
    }

    return 0;
}
```
Please note that the optimized code now uses `std::priority_queue` to automatically select the shortest distance node, which reduces the time complexity of the algorithm. The `std::array` provides more opportunities for the compiler to optimize the code than a raw array. The `constexpr` keyword allows the compiler to replace usage of the constant with its value, potentially optimizing the program further.