#include <iostream>
#include <vector>
#include <climits>
using namespace std;

const int MAXN = 600;
const long INFINITY = 1e18;

void dijisktra(int start, int N, int matrix[MAXN][MAXN]) {
  vector<long> cost(N, INFINITY);
  vector<bool> marked(N, false);
  for (int j = 0; j < N; j++) {
    if (cost[j] > matrix[start][j])
      cost[j] = matrix[start][j];
  }
  while (true) {
    int cur = -1;
    for (int j = 0; j < N; j++) {
      if (cur == -1) {
        if (!marked[j])
          cur = j;
      } else {
        if (!marked[j] && cost[cur] > cost[j])
          cur = j;
      }
    }
    if (cur == -1)
      break;
    marked[cur] = true;
    for (int j = 0; j < N; j++) {
      if (cost[(cur + j) % N] > cost[cur] + j) {
        cost[(cur + j) % N] = cost[cur] + j;
      }
    }
    for (int j = 0; j < N; j++) {
      int price = matrix[cur][j];
      if (cost[cur] + price < cost[((j + cost[cur])) % N]) {
        cost[((j + cost[cur])) % N] = cost[cur] + price;
      }
    }
  }
  for (int i = 0; i < N; i++) {
    if (i == start)
      cout << 0 << " ";
    else
      cout << cost[i] << " ";
  }
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);

  int N, M;
  cin >> N >> M;
  int matrix[MAXN][MAXN];
  for (int i = 0; i < MAXN; i++) {
    for (int j = 0; j < MAXN; j++) {
      matrix[i][j] = INT_MAX;
    }
  }
  for (int i = 0; i < M; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    matrix[a][b] = c;
  }
  for (int i = 0; i < N; i++) {
    dijisktra(i, N, matrix);
  }
  return 0;
}