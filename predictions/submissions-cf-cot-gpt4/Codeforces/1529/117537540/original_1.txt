Optimization Step by Step:

1) Remove `#include <bits/stdc++.h>`: This header file is quite large and including it can significantly increase the compilation time. Include only those headers which are used in your program.

2) Remove `#define long long long` and `#define pii pair<long, long>`: These macros are not used in the given code.

3) Use `std::ios::sync_with_stdio(false)` and `std::cin.tie(nullptr)`: These two lines disable the synchronization between the C and C++ standard streams and untie cin from cout, respectively, which can speed up I/O operations.

4) Instead of declaring `matrix[600][600]` globally, it's better to declare it in the main function: Because the size of matrix is fixed, it can be declared in the main function to reduce its scope and prevent it from being accessed inadvertently in other functions.

5) Use `std::vector<vector<int>> matrix(N, vector<int>(N, INT_MAX))` to initialize matrix: It can make the code cleaner and more readable.

6) Avoid using `std::endl`: `std::endl` causes the output buffer to be flushed, which can be an expensive operation. Use "\n" instead.

Here is the optimized program:

```c++
#include <iostream>
#include <vector>
#include <climits>

using namespace std;

void setIO(string name, int submit) {
  if (submit) {
    freopen((name + ".in").c_str(), "r", stdin);
    freopen((name + ".out").c_str(), "w", stdout);
  } 
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
}

void dijisktra(int start, vector<vector<int>>& matrix, int N) {
  vector<long> cost(N, 1e18);
  vector<bool> marked(N, false);
  for (int j = 0; j < N; j++) {
    if (cost[j] > matrix[start][j])
      cost[j] = matrix[start][j];
  }
  while (true) {
    int cur = -1;
    for (int j = 0; j < N; j++) {
      if (cur == -1) {
        if (!marked[j])
          cur = j;
      } else {
        if (!marked[j] && cost[cur] > cost[j])
          cur = j;
      }
    }
    if (cur == -1)
      break;
    marked[cur] = true;
    for (int j = 0; j < N; j++) {
      if (cost[(cur + j) % N] > cost[cur] + j) {
        cost[(cur + j) % N] = cost[cur] + j;
      }
    }
    for (int j = 0; j < N; j++) {
      int price = matrix[cur][j];
      if (cost[cur] + price < cost[((j + cost[cur])) % N]) {
        cost[((j + cost[cur])) % N] = cost[cur] + price;
      }
    }
  }
  for (int i = 0; i < N; i++) {
    if (i == start)
      cout << 0 << " ";
    else
      cout << cost[i] << " ";
  }
  cout << "\n";
}

int main() {
  setIO("", 0);
  int N, M;
  cin >> N >> M;
  vector<vector<int>> matrix(N, vector<int>(N, INT_MAX));
  for (int i = 0; i < M; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    matrix[a][b] = c;
  }
  for (int i = 0; i < N; i++) {
    dijisktra(i, matrix, N);
  }
  return 0;
}
```