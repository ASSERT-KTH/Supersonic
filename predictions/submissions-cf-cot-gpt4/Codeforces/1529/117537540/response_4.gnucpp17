#include <bits/stdc++.h>
using namespace std;
#define long long long
#define v vector
long MOD = 1e9 + 7;
void setIO(string name, int submit) {
  if (submit) {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    freopen((name + ".in").c_str(), "r", stdin);
    freopen((name + ".out").c_str(), "w", stdout);
  } else {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
  }
}
int N, M;
vector<vector<int>> matrix;
v<long> cost;
v<bool> marked;
void dijisktra(int start) {
  priority_queue<pair<long, int>, vector<pair<long, int>>, greater<pair<long, int>>> pq;
  cost.assign(N, 1e18);
  marked.assign(N, false);
  cost[start] = 0;
  pq.push({0, start});
  while (!pq.empty()) {
    int cur = pq.top().second;
    pq.pop();
    if (marked[cur]) continue;
    marked[cur] = true;
    for (int j = 0; j < N; j++) {
      if (cost[(cur + j) % N] > cost[cur] + j) {
        cost[(cur + j) % N] = cost[cur] + j;
        pq.push({cost[(cur + j) % N], (cur + j) % N});
      }
    }
    for (int j = 0; j < N; j++) {
      int price = matrix[cur][j];
      if (cost[cur] + price < cost[((j + cost[cur])) % N]) {
        cost[((j + cost[cur])) % N] = cost[cur] + price;
        pq.push({cost[((j + cost[cur])) % N], ((j + cost[cur])) % N});
      }
    }
  }
  for (int i = 0; i < N; i++) {
    if (i == start)
      cout << 0 << " ";
    else
      cout << cost[i] << " ";
  }
  cout << endl;
}
int main() {
  setIO("", 0);
  cin >> N >> M;
  matrix.resize(N, vector<int>(N, 1e9));
  for (int i = 0; i < M; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    matrix[a][b] = c;
  }
  cost.resize(N);
  marked.resize(N);
  for (int i = 0; i < N; i++) {
    dijisktra(i);
  }
  return 0;
}