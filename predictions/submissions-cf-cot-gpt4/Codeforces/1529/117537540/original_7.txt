There are several optimizations that we can apply to this program to improve its running time and memory usage.

1. Avoid using `#include <bits/stdc++.h>`. This header file includes a lot of unnecessary libraries which increases the compilation time. Include only those header files which are needed. In this case, we only need `iostream` and `vector`.

2. The `std::vector` can be initialized directly with size and value. Use `std::vector<long> cost(N, 1e18);` and `std::vector<bool> marked(N, false);` instead of `assign` function.

3. Use `std::ios::sync_with_stdio(false);` instead of `std::ios::sync_with_stdio(0);` for better readability.

4. Use `std::endl` only when necessary as it flushes the output buffer which could be a costly operation. Use "\n" instead when just a newline character is needed.

5. The array `matrix` is unnecessarily large. Its size can be reduced to `[N][N]` once the size `N` is known.

6. If the value of `N` can be large, prefer using `std::vector<std::vector<int>> matrix(N, std::vector<int>(N, 1<<30));` instead of a 2D array for the matrix. This way, only necessary memory is allocated.

Here's the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;
#define pii pair<long, long>
#define long long long
long MOD = 1e9 + 7;
void setIO(string name, int submit) {
  if (submit) {
    ios::sync_with_stdio(false);
    cin.tie(0);
    freopen((name + ".in").c_str(), "r", stdin);
    freopen((name + ".out").c_str(), "w", stdout);
  } else {
    ios::sync_with_stdio(false);
    cin.tie(0);
  }
}
int N, M;
vector<vector<int>> matrix;
void dijisktra(int start) {
  vector<long> cost(N, 1e18);
  vector<bool> marked(N, false);
  for (int j = 0; j < N; j++) {
    if (cost[j] > matrix[start][j])
      cost[j] = matrix[start][j];
  }
  while (true) {
    int cur = -1;
    for (int j = 0; j < N; j++) {
      if (cur == -1) {
        if (!marked[j])
          cur = j;
      } else {
        if (!marked[j] && cost[cur] > cost[j])
          cur = j;
      }
    }
    if (cur == -1)
      break;
    marked[cur] = true;
    for (int j = 0; j < N; j++) {
      if (cost[(cur + j) % N] > cost[cur] + j) {
        cost[(cur + j) % N] = cost[cur] + j;
      }
    }
    for (int j = 0; j < N; j++) {
      int price = matrix[cur][j];
      if (cost[cur] + price < cost[((j + cost[cur])) % N]) {
        cost[((j + cost[cur])) % N] = cost[cur] + price;
      }
    }
  }
  for (int i = 0; i < N; i++) {
    if (i == start)
      cout << 0 << " ";
    else
      cout << cost[i] << " ";
  }
  cout << "\n";
}
int main() {
  setIO("", 0);
  cin >> N >> M;
  matrix = vector<vector<int>>(N, vector<int>(N, 1<<30));
  for (int i = 0; i < M; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    matrix[a][b] = c;
  }
  for (int i = 0; i < N; i++) {
    dijisktra(i);
  }
  return 0;
}
```
Please note that the given code already uses Dijkstra's algorithm which is one of the most efficient algorithms for finding the shortest path in a graph. However, if you want to further optimize the Dijkstra's algorithm, you could consider using a priority queue to get the node with the smallest cost.