Optimizations:

1. Change `MOD` from `long` to `const long`: Since the `MOD` is not changing throughout the program, it can be declared as a constant which is more memory efficient.

2. Change `matrix` size from fixed `600x600` to dynamic: Currently, the matrix size is fixed to `600x600` which is memory inefficient if `N` and `M` are significantly smaller. Instead, we can allocate memory dynamically based on the values of `N` and `M`.

3. Avoid `endl` and use `\n` instead: `endl` not only inserts a newline, but also flushes the output buffer, which can be slower. It's better to use `\n` and let the system decide when to flush the buffer.

4. Avoid use of `%` operator in inner loop: The `%` operator is computationally expensive and should be avoided in inner loops if possible. In this case we can use a conditional check to reset the index to 0 when it reaches `N`.

5. Avoid frequent `cout` calls inside loop: Instead of calling `cout` every time inside the loop, we can create a string stream, append all outputs to it, and then print it all at once.

Optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define pii pair<long, long>
#define long long long
#define v vector
const long MOD = 1e9 + 7;
void setIO(string name, int submit) {
  if (submit) {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    freopen((name + ".in").c_str(), "r", stdin);
    freopen((name + ".out").c_str(), "w", stdout);
  } else {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
  }
}

int main() {
  setIO("", 0);
  int N, M;
  cin >> N >> M;
  vector<vector<int>> matrix(N, vector<int>(N, 1 << 30));
  for (int i = 0; i < M; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    matrix[a][b] = c;
  }
  for (int i = 0; i < N; i++) {
    v<long> cost(N, 1e18);
    v<bool> marked(N, false);
    for (int j = 0; j < N; j++) {
      if (cost[j] > matrix[i][j])
        cost[j] = matrix[i][j];
    }
    while (true) {
      int cur = -1;
      for (int j = 0; j < N; j++) {
        if (cur == -1) {
          if (!marked[j])
            cur = j;
        } else {
          if (!marked[j] && cost[cur] > cost[j])
            cur = j;
        }
      }
      if (cur == -1)
        break;
      marked[cur] = true;
      for (int j = 0; j < N; j++) {
        int index = (cur + j);
        if (index >= N)
          index -= N;
        if (cost[index] > cost[cur] + j) {
          cost[index] = cost[cur] + j;
        }
      }
      for (int j = 0; j < N; j++) {
        int price = matrix[cur][j];
        int index = (j + cost[cur]);
        if (index >= N)
          index -= N;
        if (cost[cur] + price < cost[index]) {
          cost[index] = cost[cur] + price;
        }
      }
    }
    stringstream ss;
    for (int i = 0; i < N; i++) {
      if (i == start)
        ss << 0 << " ";
      else
        ss << cost[i] << " ";
    }
    ss << "\n";
    cout << ss.str();
  }
  return 0;
}
```
Please note, the provided code was already well-optimized and these small modifications may not lead to significant improvements. Always remember to test thoroughly after making any code optimizations.