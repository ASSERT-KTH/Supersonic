Optimization Steps:
1. We are not reusing the string "str" outside of the loop, so we can save memory by declaring it within the loop.
2. The condition checks for incrementing and decrementing in separate if conditions. This can be optimized by using an else if block. If the first condition is true, the second condition won't be checked at all, saving some running time.
3. As the input size 'n' is not used after taking input, we can use a while loop to eliminate the need of 'n'.

Here is the optimized code:

```cpp
#include <iostream>
#include <string>
using namespace std;
int main() {
  int s = 0;
  string str;
  while(cin >> str) {
    if (str == "++X" || str == "X++") {
      ++s; // pre-increment is faster than post-increment
    }
    else if (str == "--X" || str == "X--") {
      --s; // pre-decrement is faster than post-decrement
    }
  }
  cout << s;
  return 0;
}
```
This optimized version uses less memory (since it doesn't store 'n') and is faster (due to the use of else if and pre-increment/pre-decrement operators). Please note that the while loop will break when there is no input or an inappropriate input is given.