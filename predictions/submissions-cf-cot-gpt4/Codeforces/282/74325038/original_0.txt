The first optimization that can be made is to reduce memory usage by reusing the same string for input. In the original code, a new string instance, str, is created for each loop iteration. This is unnecessary and can lead to increased memory usage for large n. By defining the string outside the loop, the same string can be reused for each input.

Next, we can remove the two if statements and replace them with an if-else statement. This is because the conditions in the two if statements are mutually exclusive, i.e., a string cannot be both "++X" and "--X" at the same time. By using an if-else construct, we can avoid unnecessary condition checking once a condition is satisfied.

Here is the optimized code:

```cpp
#include <iostream>
#include <string>
using namespace std;
int main() {
  int n, s = 0;
  cin >> n;
  string str;
  for (int i = 0; i < n; i++) {
    cin >> str;
    if (str == "++X" || str == "X++") {
      s += 1;
    } else if (str == "--X" || str == "X--") {
      s -= 1;
    }
  }
  cout << s;
  return 0;
}
```

This optimized code makes more efficient use of memory by reusing a single string for input, and improves running time by avoiding unnecessary condition checking.