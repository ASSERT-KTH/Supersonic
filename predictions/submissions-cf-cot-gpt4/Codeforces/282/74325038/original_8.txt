Step 1: Reduce Memory Usage.
The string 'str' is being created in every iteration of the loop, which is unnecessary. By declaring it outside the loop, we only create it once, thereby reducing the memory usage.

Step 2: Optimize String Based Comparison.
The comparisons here are string based, which can be slower than character based. So, instead of comparing the whole string, we can just compare the third character of the string, which would tell us if the operation is increment or decrement. This would make the program faster.

Step 3: Remove Redundant Operations.
When the operation is increment or decrement, instead of performing s = s + 1 or s = s - 1, we can simply do s++ or s--, which is more optimized.

After applying these optimizations, the optimized program would look like this:

```c++
#include <iostream>
#include <string>
using namespace std;
int main() {
  int n, s = 0;
  string str;
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> str;
    if (str[1] == '+') {
      s++;
    } else if (str[1] == '-') {
      s--;
    }
  }
  cout << s;
  return 0;
}
```