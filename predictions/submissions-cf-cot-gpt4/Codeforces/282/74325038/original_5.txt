Here are the few improvements that can be made to the code:

1. Instead of using `std::string` to store each operation, we can use `char` array. `std::string` has dynamic size and hence requires dynamic memory allocation which is slower than static memory allocation used by `char` array. Moreover, in this case, the size of the operation is fixed (3 characters), so `char` array can be used.

2. Instead of using two `if` statements to check the operation and accordingly increment or decrement the counter, we can use `else if` for the second check. This is because if the first condition is true then the second condition will certainly be false and hence there is no need to check the second condition in that case. This will save some computation time.

3. Unnecessary use of `using namespace std;` can lead to name conflicts. It's better to use `std::` before `cin`, `cout` etc.

Here is the optimized code:

```cpp
#include <iostream>

int main() {
  int n, s = 0;
  std::cin >> n;
  for (int i = 0; i < n; i++) {
    char str[4];
    std::cin >> str;
    if (str[1] == '+') {
      s = s + 1;
    } else if (str[1] == '-') {
      s = s - 1;
    }
  }
  std::cout << s;
  return 0;
}
```

In this optimized code, I have used `char` array instead of `std::string` and replaced two `if` statements with `if` and `else if`. Also, I removed the `using namespace std;` statement and used `std::` before `cin` and `cout`.