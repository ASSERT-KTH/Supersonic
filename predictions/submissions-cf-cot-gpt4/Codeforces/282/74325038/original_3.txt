This program reads a number 'n' from standard input, then reads 'n' strings, updating a counter 's' based on whether the string represents incrementing or decrementing an imaginary variable 'X'. If the string is "++X" or "X++", 's' is incremented. If the string is "--X" or "X--", 's' is decremented. The final value of 's' is then output.

Optimization Step by Step:

1. Declare the string variable 'str' outside the loop: This small optimization can help to avoid the overhead of creating and destroying the string on every iteration of the loop.

2. Use an else if clause for the second condition: The two conditions are mutually exclusive, so if the first condition is true, there's no need to check the second one.

3. Remove the "s = s + 1;" and "s = s - 1;" and replace with "++s;" and "--s;": This is a small optimization, as incrementing or decrementing 's' directly is faster than adding or subtracting 1.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <string>
using namespace std;
int main() {
  int n, s = 0;
  string str;
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> str;
    if (str == "++X" || str == "X++") {
      ++s;
    }
    else if (str == "--X" || str == "X--") {
      --s;
    }
  }
  cout << s;
  return 0;
}
```
Do note that these are micro-optimizations and for most applications, there will not be a noticeable performance difference. The compiler optimizations often take care of these kinds of changes.