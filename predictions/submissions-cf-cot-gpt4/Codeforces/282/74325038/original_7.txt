The given C++ program reads an integer 'n' and then reads 'n' strings. It increments a counter 's' when it encounters a string that matches "++X" or "X++" and decrements 's' when it encounters a string that matches "--X" or "X--". Finally, it prints the value of 's'. 

Despite being quite efficient, the program can be optimized in the following ways:

1. Use of `switch` instead of `if`: The equality operator (==) is slower than the `switch` statement. So, replacing the `if` statements with a `switch` can speed up the program. 

2. Avoid the repeated use of the `s = s + 1` or `s = s - 1` statements: The `++` and `--` operators can be used to increment and decrement 's' respectively. These operators are faster because they eliminate the need for an assignment operation.

3. Avoid the creation of a new string in each iteration: The `str` string is created in each iteration of the loop which takes extra time and memory. We can define `str` before the loop to avoid this.

The optimized program would look like this:

```cpp
#include <iostream>
#include <string>
using namespace std;

int main() {
  int n, s = 0;
  cin >> n;
  string str;
  for (int i = 0; i < n; i++) {
    cin >> str;
    switch(str[1]) {
      case '+':
        ++s;
        break;
      case '-':
        --s;
        break;
    }
  }
  cout << s;
  return 0;
}
```
This optimized program not only improves the running time but also reduces memory usage.

Please note that this optimization assumes that the strings inputted will always be in the format `++X`, `X++`, `--X`, or `X--`. If other strings can be inputted, this optimization could produce incorrect results.