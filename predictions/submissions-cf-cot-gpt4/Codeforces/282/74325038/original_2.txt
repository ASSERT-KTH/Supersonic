Optimization Steps:

1. The code reads from the standard input (cin) a lot of times. Each read operation can be slow because it involves I/O operations. A buffer can be used to reduce the number of read operations and thus improve the performance. We can use `ios::sync_with_stdio(false)` to disable the synchronization between the C and C++ standard streams. In addition, `cin.tie(NULL)` can be used to untie cin from cout.

2. The variable 's' is used to store the final count. It is better to initialize the variable during declaration itself.

3. We have two separate if conditions checking for increment and decrement. These two conditions can be combined into one if-else condition, which will reduce the number of comparisons.

4. In the original code, four different string comparisons are performed. However, we can reduce the number of comparisons by checking only the last character. If it is '+', it means increment; if it is '-', it means decrement. This reduces the number of string comparisons from four to one, which is a significant improvement for large inputs.

5. We are reading the string input every iteration of the loop. Instead, we can read the input once and store it in a vector, then iterate over the vector. This reduces the amount of IO operations, which can be slow.

Optimized Program:

```
#include <iostream>
#include <vector>
using namespace std;

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);

  int n, s = 0;
  cin >> n;
  
  vector<string> operations(n);
  for (int i = 0; i < n; i++) {
    cin >> operations[i];
  }
  
  for (const auto& str : operations) {
    if (str[2] == '+') {
      ++s;
    } else if (str[2] == '-') {
      --s;
    }
  }

  cout << s;
  return 0;
}
```

This optimized program should run faster and use less memory than the original program.