There are several steps to optimize the provided C/C++ code:

1. Remove `#include <bits/stdc++.h>`: This header file is actually not standard and it includes a lot of unnecessary libraries, which may increase the compilation time. Instead, you should include only the libraries you need.

2. Avoid `#define`: `#define` can cause problems because it's a preprocessor macro and it doesn't respect scope. Instead of `#define`, it's better to use `const` or `enum` for constants and inline functions for simple functions.

3. Variable declaration: It's better to declare variables when they are needed, not all at once at the beginning of a scope. Also, initialize variables when declaring them.

4. Avoid using `std::endl`: `std::endl` is slower because it causes a flush operation. Use "\n" instead.

5. Remove unused variables: `m`, `p`, `q`, `r`, `s` are not used in the program and can be removed.

6. Use `std::unordered_map` instead of `std::map`: `std::unordered_map` has an average time complexity of O(1) for search, insert, and delete operations, while `std::map` has O(log n) for these operations.

7. Use vector instead of array: `std::vector` is safer, more flexible and supports dynamic resizing.

Here is the optimized code:

```cpp
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

int main() {
  long long t;
  cin >> t;
  while (t--) {
    long long n, k;
    cin >> n >> k;
    vector<long long> a(n + 1);
    for (long long i = 1; i <= n; i++) {
      cin >> a[i];
    }
    unordered_map<long long, int> mp;
    bool fl = true;
    for (long long i = 1; i <= n; i++) {
      long long p = a[i];
      long long j = 0;
      while (p) {
        if (p % k > 1) {
          fl = false;
          break;
        }
        if (p % k == 1) {
          if (mp[j] == 1) {
            fl = false;
            break;
          }
          mp[j] = 1;
        }
        j++;
        p = p / k;
      }
      if (!fl)
        break;
    }
    mp.clear();
    if (fl)
      cout << "YES\n";
    else
      cout << "NO\n";
  }
  return 0;
}
```
The optimized code is more readable, easier to maintain, and should run faster and use less memory than the original code.
