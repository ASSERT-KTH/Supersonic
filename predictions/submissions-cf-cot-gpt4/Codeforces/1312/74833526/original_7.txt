Here are some steps for optimization:

1. Avoid using `#include <bits/stdc++.h>`. It includes all the standard library files and makes your program heavy and slow to compile. Include only the necessary files.
2. Avoid defining macros for common commands like `cout`, `cin`, `endl`. It doesn't improve the performance but makes the code harder to read.
3. The check `if (p % k == 1)` is unnecessary if you have already checked `if (p % k > 1)`. If `p % k` is not greater than 1, it can either be 1 or 0. So, if it's not 1, it is definitely 0. So, just use `else`.
4. Instead of using an `std::map` for keeping track of the remainders, use an `std::vector`. The reason is that maps in C++ are implemented as Red-Black Trees which have a time complexity of O(log n) for insertion and access. Vectors, on the other hand, have a time complexity of O(1) for access. Moreover, vectors are cache friendly because they are stored in contiguous memory locations.
5. `std::vector::clear()` does not necessarily free the memory. To do that, use the "swap-trick".

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

typedef long long ll;

int main() {
  ll t;
  cin >> t;
  while (t--) {
    ll n, k, p, i, j, fl = 1;
    cin >> n >> k;
    vector<ll> a(n+1), mp(n+1, 0);
    for (i = 1; i <= n; i++) {
      cin >> a[i];
    }
    for (i = 1; i <= n; i++) {
      p = a[i];
      j = 0;
      while (p) {
        if (p % k > 1) {
          fl = 0;
          break;
        }
        else {
          if (mp[j] == 1) {
            fl = 0;
            break;
          }
          mp[j] = 1;
        }
        j++;
        p = p / k;
      }
      if(fl == 0)
        break;
    }
    vector<ll>().swap(mp);
    if (fl == 1)
      cout << "YES" << endl;
    else 
      cout << "NO" << endl;
  }
}
```