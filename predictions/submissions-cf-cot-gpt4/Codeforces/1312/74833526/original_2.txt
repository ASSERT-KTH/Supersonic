This code can be optimized by reducing unnecessary operations and using more efficient algorithms or data structures. Here's a step-by-step explanation of the optimizations:

1. Use of `#define` for input/output operations and loops can be avoided as they make the code harder to read and maintain. Use the actual function/loop instead.

2. Avoid using `#include<bits/stdc++.h>` because this header file includes quite a lot of headers and thus increases the compilation time. Instead, include only the necessary headers for this program.

3. `fl` is initialized to 1 in every iteration and only set to 0 when certain conditions are met. Instead of checking if `fl` is 1, you can break the loop when the conditions are met and proceed to the next test case.

4. You can use `unordered_map` instead of `map`. `unordered_map` has an average time complexity of O(1) for search, insert, and delete operations while `map` has O(log(n)).

5. `a` is a fixed-size array. It's better to use `vector` which is a dynamic array and only allocate the memory that is needed.

6. An array/vector `a` is not necessary at all. You can process the numbers immediately after reading them.

Here is the optimized code:

```C++
#include <iostream>
#include <unordered_map>
using namespace std;

int main() {
  long long t;
  cin >> t;
  while (t--) {
    long long n, k, p, j;
    cin >> n >> k;
    unordered_map<long long, long long> mp;
    bool fl = true;
    for (long long i = 1; i <= n; i++) {
      cin >> p;
      j = 0;
      while (p) {
        if (p % k > 1) {
          fl = false;
          break;
        }
        if (p % k == 1) {
          if (mp[j] == 1) {
            fl = false;
            break;
          }
          mp[j] = 1;
        }
        j++;
        p = p / k;
      }
      if (!fl) break;
    }
    if (fl)
      cout << "YES" << endl;
    else
      cout << "NO" << endl;
  }
}
```
