#include <iostream>
#include <vector>
#include <climits>
#include <cstring>
using namespace std;
const long long INF = 1e9 + 7;
const long long maxn = 1e6 + 5;
long long segtree[4 * maxn], lazy[4 * maxn], value[maxn], adj[26][maxn];
vector<long long> good(maxn, 0), seta, tmp, dp(maxn, INF);

long long combine(long long x, long long y) { return min(x, y); }

void lazify(long long node, long long l, long long r) {
  if (lazy[node] != 0) {
    segtree[node] += lazy[node];
    if (l < r) {
      lazy[node << 1] += lazy[node];
      lazy[node << 1 | 1] += lazy[node];
    }
    lazy[node] = 0;
  }
}

void assign(long long node, long long l, long long r, long long idx, long long val) {
  lazify(node, l, r);
  if (l == r) {
    segtree[node] = val;
    return;
  }
  long long mid = (l + r) / 2;
  lazify(node << 1, l, mid);
  lazify(node << 1 | 1, mid + 1, r);
  if (l <= idx and idx <= mid)
    assign(node << 1, l, mid, idx, val);
  else
    assign(node << 1 | 1, mid + 1, r, idx, val);
  segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

// ... remaining functions are same ...

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  solve();
  return 0;
}