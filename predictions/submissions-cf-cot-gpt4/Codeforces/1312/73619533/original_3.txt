There are several steps you can take to optimize this code.

1. **Avoid unnecessary includes**: `#include <bits/stdc++.h>` includes a lot of unnecessary libraries which can slow down the compilation process. 

2. **Avoid using `#define` for type definitions**: `#define` does not respect scope, which can lead to confusing and difficult to debug issues.

3. **Avoid using `memset` for non-POD variable types**: `memset` is not safe to use on classes, vectors etc. It should only be used for basic data types, like int, float, char, etc.

4. **Use prefix increment instead of postfix**: Postfix increment creates a copy of the object, increments the original and returns the copy. Prefix increment increments the original object and returns a reference to it. In this case, `rep(i, a, b) for (ll i = a; i < b; ++i)` is more efficient than `rep(i, a, b) for (ll i = a; i < b; i += 1)`

5. **Avoid unnecessary function calls**: In the `query` function, `combine(lq, rq)` is called twice unnecessarily. You can store the result in a variable and return that.

6. **Reuse code**: The `lazify` function is being called multiple times in `assign` and `updateRange` functions. You can create a common function to handle this.

Here is the optimized program:

```c++
#include <iostream>
#include <vector>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef long long ll;
typedef pair<ll, ll> pp;
typedef tree<pp, null_type, less<pp>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

const ll maxn = 1e6 + 5, N = 1e6, nax = 26, inf = 1000000007;
ll segtree[4 * maxn], lazy[4 * maxn], value[maxn], adj[nax][maxn];
vector<ll> good(maxn, 0), seta, tmp, dp(maxn, inf);

ll combine(ll x, ll y) { return min(x, y); }

void build(ll node, ll l, ll r) {
  if (l == r) {
    segtree[node] = value[l];
    return;
  }
  ll mid = (l + r) / 2;
  build(node << 1, l, mid);
  build(node << 1 | 1, mid + 1, r);
  segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

void lazify(ll node, ll l, ll r) {
  if (lazy[node] != 0) {
    segtree[node] += lazy[node];
    if (l < r) {
      lazy[node << 1] += lazy[node];
      lazy[node << 1 | 1] += lazy[node];
    }
    lazy[node] = 0;
  }
}

void updateNode(ll node, ll l, ll r, ll idx, ll val) {
  lazify(node, l, r);
  if (l == r) {
    segtree[node] = val;
    return;
  }
  ll mid = (l + r) / 2;
  if (idx <= mid)
    updateNode(node << 1, l, mid, idx, val);
  else
    updateNode(node << 1 | 1, mid + 1, r, idx, val);
  segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

void updateRange(ll node, ll l, ll r, ll a, ll b, ll val) {
  lazify(node, l, r);
  if (l > b || r < a)
    return;
  if (a <= l && r <= b) {
    segtree[node] += val;
    if (l < r) {
      lazy[node << 1] += val;
      lazy[node << 1 | 1] += val;
    }
    return;
  }
  ll mid = (l + r) / 2;
  updateRange(node << 1, l, mid, a, b, val);
  updateRange(node << 1 | 1, mid + 1, r, a, b, val);
  segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

ll query(ll node, ll l, ll r, ll a, ll b) {
  lazify(node, l, r);
  if (l > b || r < a)
    return inf;
  if (a <= l && r <= b)
    return segtree[node];
  ll mid = (l + r) / 2;
  ll result = combine(query(node << 1, l, mid, a, b), query(node << 1 | 1, mid + 1, r, a, b));
  return result;
}

void dfs(ll node, ll par) {
  if (par != -1)
    dp[node] = min(dp[node], dp[par] + 1);
  if (good[node]) {
    updateRange(1, 1, N, 1, tmp.size(), 1);
    dp[node] = min(dp[node], query(1, 1, N, 1, tmp.size()));
  }
  tmp.push_back(dp[node]);
  updateNode(1, 1, N, tmp.size(), dp[node] + good[node]);
  for (ll i = 0; i < nax; ++i) {
    if (adj[i][node] != -1) {
      dfs(adj[i][node], node);
    }
  }
  updateNode(1, 1, N, tmp.size(), inf);
  tmp.pop_back();
}

void solve() {
  for (ll i = 0; i < nax; ++i) {
    for (ll j = 0; j < maxn; ++j) {
      adj[i][j] = -1;
    }
  }
  ll n, x, k;
  cin >> n;
  char c;
  for (ll i = 1; i <= N; ++i) value[i] = inf;
  build(1, 1, N);
  for (ll i = 1; i <= n; ++i) {
    cin >> x >> c;
    adj[c - 'a'][x] = i;
  }
  cin >> k;
  for (ll i = 0; i < k; ++i) {
    cin >> x;
    good[x] = 1;
    seta.push_back(x);
  }
  dp[0] = 0;
  dfs(0, -1);
  for (ll i = 0; i < k; ++i) cout << dp[seta[i]] << " ";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  solve();
  return 0;
}
```