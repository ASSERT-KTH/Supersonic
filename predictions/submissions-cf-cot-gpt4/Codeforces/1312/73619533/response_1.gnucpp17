#include <iostream>
#include <vector>
#include <cstring>
using namespace std;
typedef long long ll;

const ll maxn = 1e6 + 5;
const ll N = 1e6;
const ll nax = 26;
const ll inf = 1e9+7;

struct Data {
    ll segtree[4 * maxn]{}, lazy[4 * maxn]{}, value[maxn]{}, adj[nax][maxn]{};
    vector<ll> good, dp;
    vector<ll> tmp;
};

ll combine(ll x, ll y) { return min(x, y); }

void build(Data& data, ll node, ll l, ll r) {
  if (l == r) {
    data.segtree[node] = data.value[l];
    return;
  }
  ll mid = (l + r) / 2;
  build(data, node << 1, l, mid);
  build(data, node << 1 | 1, mid + 1, r);
  data.segtree[node] = combine(data.segtree[node << 1], data.segtree[node << 1 | 1]);
}

void lazify(Data& data, ll node, ll l, ll r) {
  if (data.lazy[node] != 0) {
    data.segtree[node] += data.lazy[node];
    if (l != r) {
      data.lazy[node << 1] += data.lazy[node];
      data.lazy[node << 1 | 1] += data.lazy[node];
    }
    data.lazy[node] = 0;
  }
}

void assign(Data& data, ll node, ll l, ll r, ll idx, ll val) {
  lazify(data, node, l, r);
  if (l == r) {
    data.segtree[node] = val;
    return;
  }
  ll mid = (l + r) / 2;
  if (idx <= mid)
    assign(data, node << 1, l, mid, idx, val);
  else
    assign(data, node << 1 | 1, mid + 1, r, idx, val);
  data.segtree[node] = combine(data.segtree[node << 1], data.segtree[node << 1 | 1]);
}

void updateRange(Data& data, ll node, ll l, ll r, ll a, ll b, ll val) {
  lazify(data, node, l, r);
  if (l > b || r < a)
    return;
  if (a <= l && r <= b) {
    data.segtree[node] += val;
    if (l != r) {
      data.lazy[node << 1] += val;
      data.lazy[node << 1 | 1] += val;
    }
    return;
  }
  ll mid = (l + r) / 2;
  updateRange(data, node << 1, l, mid, a, b, val);
  updateRange(data, node << 1 | 1, mid + 1, r, a, b, val);
  data.segtree[node] = combine(data.segtree[node << 1], data.segtree[node << 1 | 1]);
}

ll query(Data& data, ll node, ll l, ll r, ll a, ll b) {
  lazify(data, node, l, r);
  if (l > b || r < a)
    return inf;
  if (a <= l && r <= b)
    return data.segtree[node];
  ll mid = (l + r) / 2;
  ll lq = query(data, node << 1, l, mid, a, b),
     rq = query(data, node << 1 | 1, mid + 1, r, a, b);
  return combine(lq, rq);
}

void dfs(Data& data, ll node, ll par) {
  if (par != -1)
    data.dp[node] = min(data.dp[node], data.dp[par] + 1);
  if (data.good[node]) {
    updateRange(data, 1, 1, N, 1, data.tmp.size(), 1);
    data.dp[node] = min(data.dp[node], query(data, 1, 1, N, 1, data.tmp.size()));
  }
  data.tmp.push_back(data.dp[node]);
  assign(data, 1, 1, N, data.tmp.size(), data.dp[node] + data.good[node]);
  for (ll i = 0; i < nax; i++) {
    if (data.adj[i][node] != -1) {
      dfs(data, data.adj[i][node], node);
    }
  }
  assign(data, 1, 1, N, data.tmp.size(), inf);
  data.tmp.pop_back();
}

void solve() {
  Data data;
  memset(data.adj, -1, sizeof data.adj);
  ll n, x, k;
  cin >> n;
  char c;
  fill_n(data.value, N + 1, inf);
  build(data, 1, 1, N);
  for (ll i = 1; i <= n; i++) {
    cin >> x >> c;
    data.adj[c - 'a'][x] = i;
  }
  cin >> k;
  data.good.resize(n+1);
  data.dp.resize(n+1, inf);
  vector<ll> seta(k);
  for (ll i = 0; i < k; i++) {
    cin >> x;
    data.good[x] = 1;
    seta[i] = x;
  }
  data.dp[0] = 0;
  dfs(data, 0, -1);
  for(ll i = 0; i < k; i++) 
    cout << data.dp[seta[i]] << " ";
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  solve();
  return 0;
}