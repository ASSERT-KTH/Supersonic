#include <iostream>
#include <vector>
#include <algorithm>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

typedef long long ll;
typedef pair<ll, ll> pp;
typedef tree<pp, null_type, less<pp>, rb_tree_tag,
             tree_order_statistics_node_update> ordered_set;

const ll MAXN = 1e6 + 5, N = 1e6, NAX = 26, INF = 1e9+7;
ll segtree[4 * MAXN], lazy[4 * MAXN], value[MAXN], adj[NAX][MAXN];
vector<ll> good(MAXN, 0), seta, tmp, dp(MAXN, INF);

ll combine(ll x, ll y) { return min(x, y); }

void build(ll node, ll l, ll r) {
  if (l == r) {
    segtree[node] = value[l];
    return;
  }
  ll mid = (l + r) / 2;
  build(node << 1, l, mid);
  build(node << 1 | 1, mid + 1, r);
  segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

void lazify(ll node, ll l, ll r) {
  if (lazy[node] != 0) {
    segtree[node] += lazy[node];
    if (l < r) {
      lazy[node << 1] += lazy[node];
      lazy[node << 1 | 1] += lazy[node];
    }
    lazy[node] = 0;
  }
}

void assign(ll node, ll l, ll r, ll idx, ll val) {
  lazify(node, l, r);
  if (l == r) {
    segtree[node] = val;
    return;
  }
  ll mid = (l + r) / 2;
  if (l <= idx and idx <= mid)
    assign(node << 1, l, mid, idx, val);
  else
    assign(node << 1 | 1, mid + 1, r, idx, val);
  segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

void dfs(ll node, ll par) {
  if (par != -1)
    dp[node] = min(dp[node], dp[par] + 1);
  if (good[node]) {
    updateRange(1, 1, N, 1, tmp.size(), 1);
    dp[node] = min(dp[node], query(1, 1, N, 1, tmp.size()));
  }
  tmp.push_back(dp[node]);
  if (good[node]) {
    assign(1, 1, N, tmp.size(), dp[node] + good[node]);
  }
  for (ll i = 0; i < NAX; ++i) {
    if (adj[i][node] != -1) {
      dfs(adj[i][node], node);
    }
  }
  if (good[node]) {
    assign(1, 1, N, tmp.size(), INF);
  }
  tmp.pop_back();
}

int main() {
  solve();
  return 0;
}