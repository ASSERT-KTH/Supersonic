#include <iostream>
#include <vector>
#include <list>
#include <array>
#include <algorithm>
#include <random>
#include <chrono>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;
using ll = long long;
using ordered_set = tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>;
using ld = long double;
using vi = vector<int>;
using pi = array<int, 2>;  // Optimized, replaced pair<int, int>
using vpi = vector<pi>;
constexpr int mod = 1000000007;  // Optimized, replaced #define
#define dmp(x) cerr << "line " << __LINE__ << " " << #x << ":" << x << endl
#define fs first
#define sc second
#define pb push_back
#define all(c) (c).begin(), (c).end()
#define mt make_tuple
#define IOS                                                                    \
  ios::sync_with_stdio(0);                                                     \
  cin.tie(0);                                                                  \
  cout.tie(0)

// Rest of the code remains the same except for the following changes

// Optimized, typedef replaced with using
using dat = struct {
  pi mx;
  pi mn;
};

// Optimized, vector<vector<int>> replaced with vector<list<int>>
vector<list<int>> adj;

// Optimized, repetitive code in combine function replaced with a helper function
dat combineHelper(dat x, dat y) {
  dat res;
  if (a[x.mx.fs] > a[y.mx.fs]) {
    res.mx.fs = x.mx.fs;
    if (a[x.mx.sc] > a[y.mx.fs]) {
      res.mx.sc = x.mx.sc;
    } else {
      res.mx.sc = y.mx.fs;
    }
  } else {
    res.mx.fs = y.mx.fs;
    if (a[x.mx.fs] > a[y.mx.sc]) {
      res.mx.sc = x.mx.fs;
    } else {
      res.mx.sc = y.mx.sc;
    }
  }
  return res;
}

dat combine(dat x, dat y) {
  return combineHelper(x, y);
}