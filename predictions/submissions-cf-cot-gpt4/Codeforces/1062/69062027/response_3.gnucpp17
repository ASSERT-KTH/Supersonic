#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
#define int long long
typedef long long ll;
typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update>
    ordered_set;
typedef long double ld;
typedef vector<int> vi;
typedef pair<int, int> pi;
typedef vector<pi> vpi;
#define mod 1000000007
#define dmp(x) cerr << "line " << __LINE__ << " " << #x << ":" << x << endl
#define fs first
#define sc second
#define pb push_back
#define all(c) (c).begin(), (c).end()
#define mt make_tuple
#define IOS                                                                    \
  ios_base::sync_with_stdio(0);                                                     \
  cin.tie(0);                                                                  \
  cout.tie(0)
// ... Rest of the code until main function
signed main() {
  IOS;
  cin >> n >> q;
  zero.mx = {n + 2, n + 2};
  zero.mn = {n + 1, n + 1};
  adj.resize(n + 1);
  for (int i = 1; i < n; i++) {
    int x;
    cin >> x;
    adj[x - 1].pb(i);
  }
  a[n + 1] = mod;
  a[n + 2] = 0;
  HLD hld(adj, 0);
  for (int i = 0; i < n; i++) {
    a[i] = hld.tin[i];
  }
  build(1, 0, n - 1);
  while (q--) {
    int l, r;
    cin >> l >> r;
    l--;
    r--;
    if (r - l < 2) {
      int ans = r, d = hld.dep[l];
      if (d < hld.dep[r]) {
        ans = l;
        d = hld.dep[r];
      }
      cout << ans + 1 << " " << d << "\n";
      continue;
    }
    dat cur = get(1, 0, n - 1, l, r);
    int lc1 = hld.lca(cur.mx.fs, cur.mn.sc);
    int lc2 = hld.lca(cur.mx.sc, cur.mn.fs);
    int mnFsPlus1 = cur.mn.fs + 1;
    int mxFsPlus1 = cur.mx.fs + 1;
    if (hld.dep[lc1] > hld.dep[lc2]) {
      cout << mnFsPlus1 << " " << hld.dep[lc1] << "\n";
    } else {
      cout << mxFsPlus1 << " " << hld.dep[lc2] << "\n";
    }
  }
  return 0;
}