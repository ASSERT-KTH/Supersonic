Here are the optimizations you can make:

1. **Pass vector by reference:** The vector A in the function `rec` is passed by value which means a new copy is created every time the function is called. This is both time consuming and memory intensive. Instead, pass it by reference which means the function will work on the original vector instead of creating a new one. This will greatly reduce the time complexity and memory usage of your program.

2. **Use bitwise operator to check if a number is even or odd:** In the loop where you divide the elements of A into B and C, you're using the bitwise AND operator (&) to check if a number is even or odd. This operation can be optimized by using the bitwise shift operator (>>) instead of AND operator for checking if the number is even or odd. This will make the operation faster.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
int rec(vector<int>& A, int p) {
  if (p == -1)
    return 0;
  vector<int> B, C;
  for (auto x : A) {
    if (x >> p & 1)
      B.push_back(x & ~((1 << p)));
    else
      C.push_back(x & ~((1 << p)));
  }
  if (A.size() == B.size()) {
    return rec(B, p - 1);
  } else if (A.size() == C.size()) {
    return rec(C, p - 1);
  } else {
    return (1 << p) + min(rec(B, p - 1), rec(C, p - 1));
  }
}
int main() {
  int n;
  cin >> n;
  vector<int> A(n);
  for (int i = 0; i < n; i++) {
    cin >> A[i];
  }
  cout << rec(A, 30) << endl;
}
```
In this optimized code, the function `rec` takes vector `A` as reference thus reducing the memory usage and also the time complexity. Moreover, the bitwise shift operator is used in place of bitwise AND operator to check if a number is even or odd.