There are a few optimizations that can be applied to this code:

1. Pass vector by reference: In the current version, the vector `A` is passed by value to the function `rec()`. This means that the entire vector is being copied every time the function is called, which can be quite expensive in terms of both memory and time if the vector is large. Instead, passing the vector by reference would be more efficient as it avoids this unnecessary copying.

2. Reserve memory for vectors B and C: The `push_back()` function in C++ can potentially cause a re-allocation of the entire vector if the vector's capacity is not enough to accommodate the new element. To prevent this, you can use the `reserve()` function to reserve a certain amount of space for these vectors in advance.

3. Avoid using bits/stdc++.h: Including bits/stdc++.h can significantly slow down the compilation time, because it includes all the standard library headers at once. It's better to include only the headers that you actually need.

4. Use bitwise shift instead of multiplication: In the statement `(1 << p)`, the `<<` operator is equivalent to multiplying `1` by `2^p`. But shifting bits left is faster than multiplication, so this part is already optimized.

5. Use `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)`: These lines can speed up the I/O operations in C++. The first line tells C++ to not synchronize C++'s I/O operations with C's, and the second line unties `cin` from `cout`, meaning they will not wait for each other.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int rec(vector<int>& A, int p) {
  if (p == -1)
    return 0;
  vector<int> B, C;
  B.reserve(A.size());
  C.reserve(A.size());
  for (auto x : A) {
    if (x & (1 << p))
      B.push_back(x & ~((1 << p)));
    else
      C.push_back(x & ~((1 << p)));
  }
  if (A.size() == B.size()) {
    return rec(B, p - 1);
  } else if (A.size() == C.size()) {
    return rec(C, p - 1);
  } else {
    return (1 << p) + min(rec(B, p - 1), rec(C, p - 1));
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n;
  cin >> n;
  vector<int> A(n);
  for (int i = 0; i < n; i++) {
    cin >> A[i];
  }
  cout << rec(A, 30) << endl;
}
```

Please note that these optimizations may have a more noticeable impact on larger inputs.