Here are few steps to optimize the code:

1. Firstly, we can pass the vector A by reference to avoid copying the entire vector, and this will reduce the time complexity of the code. 

2. Secondly, instead of using `A.size()` repeatedly, we can store the size of A in a variable and use it afterwards which will reduce unnecessary function calls.

3. Thirdly, we can eliminate the last `return 0`. As all possible condition paths are already covered, the execution will never reach this point.

4. Lastly, we can avoid creating the vectors B and C if A's size is 1. This will reduce unnecessary memory allocation and deallocation.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;

int rec(vector<int>& A, int p) {
  int n = A.size();
  if (p == -1 || n == 1)
    return 0;
    
  vector<int> B, C;
  for (auto x : A) {
    if (x & (1 << p))
      B.push_back(x & ~((1 << p)));
    else
      C.push_back(x & ~((1 << p)));
  }
  
  if (n == B.size()) {
    return rec(B, p - 1);
  } else if (n == C.size()) {
    return rec(C, p - 1);
  } else {
    return (1 << p) + min(rec(B, p - 1), rec(C, p - 1));
  }
}

int main() {
  int n;
  cin >> n;
  vector<int> A(n);
  for (int i = 0; i < n; i++) {
    cin >> A[i];
  }
  cout << rec(A, 30) << endl;
}
```

This version of the program will run faster and use less memory than the original.