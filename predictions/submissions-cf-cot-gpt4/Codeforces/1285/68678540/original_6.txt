Optimization Steps:

1. Pass vector by reference: In the function `rec`, the vector `A` is passed by value. This means a new copy of the vector is created every time the function is called, which can be costly both in terms of time and memory when the vector is large. We can optimize this by passing the vector by reference.
2. Reserve memory for vectors B and C: In the function `rec`, the vectors `B` and `C` are created without knowing their size before the loop. It would be more efficient to reserve memory for these vectors before the loop, which would prevent unnecessary reallocations.
3. Use bitwise shift operator for multiplication/division: Bitwise shift operators are faster than multiplication or division operators. So we can replace `(1 << p)` with `1 * pow(2, p)`, and `p-1` with `p>>1`.
4. Use `std::ios::sync_with_stdio(false)`: This can turn off the synchronization between the C and C++ standard streams, which can speed up input/output operations.

Optimized Code:

```cpp
#include <bits/stdc++.h>
using namespace std;
int rec(vector<int>& A, int p) {  // pass by reference
  if (p == -1)
    return 0;
  vector<int> B, C;
  B.reserve(A.size());  // reserve memory
  C.reserve(A.size());  // reserve memory
  for (auto x : A) {
    if (x & (1 << p))
      B.push_back(x & ~((1 << p)));
    else
      C.push_back(x & ~((1 << p)));
  }
  if (A.size() == B.size()) {
    return rec(B, p >> 1);  // use bitwise shift for division
  } else if (A.size() == C.size()) {
    return rec(C, p >> 1);  // use bitwise shift for division
  } else {
    return (1 * pow(2, p)) + min(rec(B, p >> 1), rec(C, p >> 1));  // use bitwise shift for multiplication
  }
  return 0;
}
int main() {
  std::ios::sync_with_stdio(false);  // speed up I/O
  int n;
  cin >> n;
  vector<int> A(n);
  for (int i = 0; i < n; i++) {
    cin >> A[i];
  }
  cout << rec(A, 30) << endl;
}
```

Please note that the effectiveness of these optimizations can vary depending on the compiler and the specific characteristics of the system where the code is run.