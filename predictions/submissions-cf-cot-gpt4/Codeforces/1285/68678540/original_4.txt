Here are few optimization steps:

1. The vector 'A' should be passed by reference to the function 'rec' instead of value. This will avoid copying the vector every time the function 'rec' is called.

2. The vectors 'B' and 'C' should be declared with the maximum possible size to avoid reallocations during the push_back operations. The maximum size of 'B' and 'C' can't be more than the size of 'A'.

3. The calculation of '1<<p' and '~((1<<p))' are done multiple times, which can be avoided by calculating them once and storing them in variables.

4. The 'else' before 'return 0' is unnecessary and can be removed.

Optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;

int rec(vector<int>& A, int p) {
  if (p == -1)
    return 0;
  int shift_p = 1 << p;
  int neg_shift_p = ~shift_p;
  vector<int> B(A.size()), C(A.size());
  int size_B = 0, size_C = 0;
  for (auto x : A) {
    if (x & shift_p)
      B[size_B++] = x & neg_shift_p;
    else
      C[size_C++] = x & neg_shift_p;
  }
  B.resize(size_B);
  C.resize(size_C);
  
  if (A.size() == B.size()) {
    return rec(B, p - 1);
  } else if (A.size() == C.size()) {
    return rec(C, p - 1);
  } else {
    return shift_p + min(rec(B, p - 1), rec(C, p - 1));
  }
  return 0;
}

int main() {
  int n;
  cin >> n;
  vector<int> A(n);
  for (int i = 0; i < n; i++) {
    cin >> A[i];
  }
  cout << rec(A, 30) << endl;
}
```

Explanation:
1. By passing vector 'A' by reference, we avoid creating a copy of 'A' every time the function 'rec' is called, thus saving memory and reducing the function call time.

2. By reserving the maximum possible size for vectors 'B' and 'C', we avoid the overhead of reallocating memory every time the 'push_back' operation is called.

3. By calculating '1 << p' and '~((1 << p))' once and storing them in variables, we avoid multiple recalculations, thus reducing the computation time.

4. Removed the unnecessary 'else' before 'return 0'. This doesn't affect the performance but makes the code cleaner.