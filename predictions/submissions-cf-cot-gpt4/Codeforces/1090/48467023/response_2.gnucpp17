#include <iostream>
#include <vector>
#include <assert.h>
#include <iomanip>
using namespace std;
typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;
const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9;
const int N = 250 * 1000 + 555;
int n;
pair<int, pt> qs[N];
bool read() {
  if (!(cin >> n))
    return false;
  for (int i=0; i<n; i++) {
    cin >> qs[i].first;
    if (qs[i].first > 1)
      cin >> qs[i].second.first;
    if (qs[i].first == 5)
      cin >> qs[i].second.second;
  }
  return true;
}
const int M = 30 * 1000 * 1000 + 555;
struct node {
  int sum, sval;
  node *l, *r;
  node() : sum(0), sval(-1), l(NULL), r(NULL) {}
  node(int sum, int sval, node *l, node *r)
      : sum(sum), sval(sval), l(l), r(r) {}
} nodes[M];
typedef node *tree;
int szn = 0;
tree getNode(int sum, int sval, tree l, tree r) {
  assert(szn < M);
  nodes[szn] = node(sum, sval, l, r);
  return &nodes[szn++];
}

/*... Rest of the code ...*/

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0), cout.tie(0);
  cout << fixed << setprecision(15);
  if (read()) {
    solve();
  }
  return 0;
}