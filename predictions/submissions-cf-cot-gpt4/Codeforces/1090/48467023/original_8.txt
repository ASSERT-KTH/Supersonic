The code you've shared is somewhat complex, but there are a few ways we can optimize it:

1. **Avoid using `#include <bits/stdc++.h>`**: This header file includes a lot of unnecessary libraries which increase the compilation time. Include only the necessary headers to reduce compilation time.

2. **Avoid using `using namespace std;`**: This line can lead to name clashes because it brings all the names in the `std` namespace into the global namespace. It's better to use `std::` before using any standard library object.

3. **Avoid macros for loops and other operations**: This can reduce readability and debugging complexity. It's better to use normal loops and operations. 

4. **Avoid unnecessary heap allocations**: In the function `getNode`, there's a heap allocation for every node. This could be avoided by using a memory pool or a custom allocator.

5. **Avoid inefficient I/O methods**: Using `cin` and `cout` for input/output can be slow. To speed it up, you can use `scanf` and `printf` instead. Also, you can add `std::ios_base::sync_with_stdio(false);` at the beginning of the `main()` function to untie C and C++ I/O operations, making them faster.

6. **Avoid unnecessary calculations**: There are a few places in the code where the same operation is repeated multiple times. These operations could be stored in variables to avoid recalculations.

Here is the optimized code with the above points taken into consideration:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <iomanip>

typedef long long li;
typedef long double ld;
typedef std::pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9;
const int N = 250 * 1000 + 555;
int n;
std::pair<int, pt> qs[N];

bool read() {
  if (!(std::cin >> n))
    return false;
  for(int i=0; i<n; i++) {
    std::cin >> qs[i].first;
    if (qs[i].first > 1)
      std::cin >> qs[i].second.first;
    if (qs[i].first == 5)
      std::cin >> qs[i].second.second;
  }
  return true;
}

const int M = 30 * 1000 * 1000 + 555;
struct node {
  int sum, sval;
  node *l, *r;
  node() : sum(0), sval(-1), l(NULL), r(NULL) {}
  node(int sum, int sval, node *l, node *r)
      : sum(sum), sval(sval), l(l), r(r) {}
} nodes[M];
typedef node *tree;
int szn = 0;

tree getNode(int sum, int sval, tree l, tree r) {
  assert(szn < M);
  nodes[szn] = node(sum, sval, l, r);
  return &nodes[szn++];
}

inline int getsum(tree t, int len) {
  if (!t)
    return 0;
  if (t->sval != -1)
    return len * t->sval;
  return t->sum;
}

inline int push(tree t) {
  int pushed = t->sval;
  t->sval = -1;
  return pushed;
}

void upd(tree t, int l1, int l2) {
  t->sum = getsum(t->l, l1) + getsum(t->r, l2);
}

// ... rest of the code remains the same ...

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0), std::cout.tie(0);
  std::cout << std::fixed << std::setprecision(15);
  if (read()) {
    solve();
  }
  return 0;
}
```

Note: In the above optimized code, I have not replaced `cin` and `cout` with `scanf` and `printf` as it requires changing the entire structure of the I/O operations in the code, which could be quite extensive. However, if performance is the ultimate goal, you should consider doing it.