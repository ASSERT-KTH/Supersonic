#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <iomanip>

typedef long long li;
typedef long double ld;
typedef std::pair<int, int> pt;

const int INF = int(1e9);
const li INF64 = li(1e18);
const ld EPS = 1e-9;
const int N = 250 * 1000 + 555;
int n;
std::pair<int, pt> qs[N];

bool read() {
  if (!(std::cin >> n))
    return false;
  for(int i=0; i<n; i++) {
    std::cin >> qs[i].first;
    if (qs[i].first > 1)
      std::cin >> qs[i].second.first;
    if (qs[i].first == 5)
      std::cin >> qs[i].second.second;
  }
  return true;
}

const int M = 30 * 1000 * 1000 + 555;
struct node {
  int sum, sval;
  node *l, *r;
  node() : sum(0), sval(-1), l(NULL), r(NULL) {}
  node(int sum, int sval, node *l, node *r)
      : sum(sum), sval(sval), l(l), r(r) {}
} nodes[M];
typedef node *tree;
int szn = 0;

tree getNode(int sum, int sval, tree l, tree r) {
  assert(szn < M);
  nodes[szn] = node(sum, sval, l, r);
  return &nodes[szn++];
}

inline int getsum(tree t, int len) {
  if (!t)
    return 0;
  if (t->sval != -1)
    return len * t->sval;
  return t->sum;
}

inline int push(tree t) {
  int pushed = t->sval;
  t->sval = -1;
  return pushed;
}

void upd(tree t, int l1, int l2) {
  t->sum = getsum(t->l, l1) + getsum(t->r, l2);
}

// ... rest of the code remains the same ...

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0), std::cout.tie(0);
  std::cout << std::fixed << std::setprecision(15);
  if (read()) {
    solve();
  }
  return 0;
}