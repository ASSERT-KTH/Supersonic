The original code has some repeated calculations and unnecessary conditions. Consider the following optimization strategies:

1. Unnecessary Checks: The condition `(n % b == 1 || n % b == a || b == 1)` is checked in the beginning and then some part of it is checked again inside `if (a == 1)`. This is unnecessary and can be removed. We can simplify this logic as `if (b==1 || n%b==1 || n%b==a)`. There is no need to check `if (a == 1)` separately.

2. Loop Checks: In the while loop, it checks `(n - temp) % b == 0` for every iteration, which is not necessary. We can check it once after the while loop, which will reduce the number of checks and potentially, the running time.

3. Flag Variable: The flag variable can be replaced with a boolean variable, which is more intuitive and uses less memory.

Here is the optimized program:

```cpp
#include <bits/stdc++.h>
#define startt ios_base::sync_with_stdio(false); cin.tie(0);
using namespace std;
typedef unsigned long long ull;
typedef long long ll;
#define vint vector<int>
#define all(v) v.begin(), v.end()
#define sz(a) (int)a.size()
#define MOD 1000000007
#define MOD2 998244353
#define MX 1000000000
#define nax 100005
#define MXL 1000000000000000000
#define PI 3.14159265
#define pb push_back
#define pf push_front
#define sc second
#define fr first
#define endl '\n'
#define ld long double
#define mp make_pair

void solve() {
  ll n, a, b;
  cin >> n >> a >> b;

  if (b==1 || n%b==1 || n%b==a) {
    cout << "YES\n";
    return;
  } 

  ll temp = 1;
  bool flag = false;
  
  while (temp <= n) {
    if (temp == n) {
      flag = true;
      break;
    }
    temp *= a;
  }
  
  if ((n - temp) % b == 0) {
    flag = true;
  }

  if (flag)
    cout << "YES\n";
  else
    cout << "NO\n";
}

int main() {
  int t = 1;
  cin >> t;
  for (int tc = 1; tc <= t; tc++) {
    solve();
  }
  return 0;
}
```

This version of the program simplifies the conditions and reduces the number of checks inside the loop, which can result in a faster execution time. It also uses a boolean variable instead of an integer for the flag, which is a more intuitive choice and uses less memory.