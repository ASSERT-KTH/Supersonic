The given code is already optimized in terms of space complexity. However, it is possible to optimize the time complexity slightly by preventing unnecessary calculations in the while loop.

Here are the steps for optimization:

1. In the given code, the condition `(n - temp) % b == 0` checks if the remaining number after subtracting the current `temp` is divisible by `b`. However, this calculation is unnecessary when `temp` is greater than `n`. Thus, you can add a condition to break the loop when `temp` is greater than `n`. 

2. The condition `temp == n` is also unnecessary because if `temp` becomes equal to `n`, then the condition `(n - temp) % b == 0` would have already been satisfied in the previous iterations, and the loop would have been broken.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
#define startt                                                                 \
  ios_base::sync_with_stdio(false);                                            \
  cin.tie(0);
typedef unsigned long long ull;
typedef long long ll;
using namespace std;
#define vint vector<int>
#define all(v) v.begin(), v.end()
#define sz(a) (int)a.size()
#define MOD 1000000007
#define MOD2 998244353
#define MX 1000000000
#define nax 100005
#define MXL 1000000000000000000
#define PI 3.14159265
#define pb push_back
#define pf push_front
#define sc second
#define fr first
#define endl '\n'
#define ld long double
#define mp make_pair
void solve() {
  ll n, a, b;
  cin >> n >> a >> b;
  if (n % b == 1 || n % b == a || b == 1) {
    cout << "YES\n";
  } else if (a == 1) {
    if (n % b == 1)
      cout << "YES\n";
    else
      cout << "NO\n";
  } else {
    ll temp = 1, flag = 0;
    while (temp <= n) {
      if ((n - temp) % b == 0) {
        flag = 1;
        break;
      }
      temp *= a;
      if (temp > n) {
        break;
      }
    }
    if (flag)
      cout << "YES\n";
    else
      cout << "NO\n";
  }
}
int main() {
  int t = 1;
  cin >> t;
  for (int tc = 1; tc <= t; tc++) {
    solve();
  }
  return 0;
}
```

The code now breaks the loop earlier when `temp` is greater than `n`, which helps in improving the time complexity.