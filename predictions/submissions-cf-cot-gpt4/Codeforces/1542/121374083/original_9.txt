The given C/C++ program could be optimized in the following ways:

1. Remove Unused Macros: The program contains a lot of macros that are not used in the code. These macros are increasing the size of your binary.

2. Reduce Redundant Code: The conditions "if (n % b == 1 || n % b == a || b == 1)" and "if (a == 1)" check for n % b == 1 twice. It can be checked only once and the result can be reused, reducing redundancy and slightly improving performance.

3. Avoid Multiple IO Operations: Multiple cout statements are used to output the result. It can be replaced by a variable that stores the result and print it once.

4. Remove Unused Variable: The "tc" variable in the main() function is not used.

Here is the optimized code considering the above points:

```cpp
#include <iostream>
#define MOD 1000000007
#define MX 1000000000
using namespace std;
typedef long long ll;

void solve() {
  ll n, a, b;
  cin >> n >> a >> b;
  string result = "NO\n";
  if (b == 1 || n % b == 1 || n % b == a) {
    result = "YES\n";
  } else if (a != 1) {
    ll temp = 1;
    while (temp <= n && ((n - temp) % b != 0 || temp != n)) {
      temp *= a;
    }
    if (temp == n || (n - temp) % b == 0) {
      result = "YES\n";
    }
  }
  cout << result;
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
  return 0;
}
```

In this optimized version, the program has fewer lines of code, fewer macros, and less redundancy. The overall structure of the code remains the same, so the optimization does not impact the readability of the code.