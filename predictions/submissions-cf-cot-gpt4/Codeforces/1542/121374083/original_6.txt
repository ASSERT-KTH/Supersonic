Optimization Steps:

1. Remove unnecessary macros: Macros like startt, nax, MX, MXL, PI, pf, sc, fr are not used in the program. Removing them enhances readability and slightly reduces memory usage.

2. Reduce redundant checks: In the solve() function, the condition if (n % b == 1 || n % b == a || b == 1) checks for n % b == 1, which is again checked in the following else if clause. This is unnecessary and can be simplified.

3. Minimize repeated computations: In the while loop, the expression (n - temp) % b is calculated twice, once for comparison and once in the if condition. This redundancy can be eliminated by calculating it once and storing it in a variable.

4. Use faster I/O methods: Although std::cin and std::cout are easy to use, they're not the fastest methods for input and output. You can use faster methods like getchar_unlocked() and putchar_unlocked() but they are not standard. 

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
typedef unsigned long long ull;
typedef long long ll;
using namespace std;
#define vint vector<int>
#define all(v) v.begin(), v.end()
#define sz(a) (int)a.size()
#define MOD 1000000007
#define MOD2 998244353
#define endl '\n'
#define ld long double
#define mp make_pair

void solve() {
    ll n, a, b;
    cin >> n >> a >> b;

    if (b == 1) {
        cout << "YES\n";
    } else if (a == 1) {
        cout << ((n % b == 1) ? "YES\n" : "NO\n");
    } else {
        ll temp = 1, flag = 0;
        while (temp <= n) {
            ll mod_val = (n - temp) % b;
            if (temp == n || mod_val == 0) {
                flag = 1;
                break;
            }
            temp *= a;
        }
        cout << (flag ? "YES\n" : "NO\n");
    }
}

int main() {
    int t = 1;
    cin >> t;
    for (int tc = 1; tc <= t; tc++) {
        solve();
    }
    return 0;
}
```

Note: Optimization is a trade-off. While this code is optimized for memory usage and performance, it may have compromised on readability. Always choose optimizations based on the needs of your program. In some cases, readability or maintainability may be more important than speed or memory.