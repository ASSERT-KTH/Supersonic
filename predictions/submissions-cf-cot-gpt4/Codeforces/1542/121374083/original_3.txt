Here are some optimizations we can make:

1. We can remove the #define preprocessor directives for values and functions not used in the code, like MOD2, MX, nax, MXL, PI, pf, sc, fr, ld, mp. This is mainly for code cleanliness rather than optimization, but it does make the code easier to understand and maintain.

2. We can remove the line 'ios_base::sync_with_stdio(false); cin.tie(0);' as it's only useful when we are dealing with a lot of input/output operations. In our case, it's not necessary.

3. We can remove the 'flag' variable and replace it with a return statement inside the while loop. This will save memory and time because it will break the loop and return from the function as soon as it finds an answer.

4. We can remove the unnecessary condition 'if (temp == n)' inside the while loop. It's not needed because the loop condition 'while (temp <= n)' already covers this case.

5. We can combine the conditions 'if (n % b == 1 || n % b == a || b == 1)' and 'if (n % b == 1)' into one, as the latter is a subset of the former.

6. The 'else if (a == 1)' condition can be removed, because if 'a' is 1, then 'temp' will always be 1, and the condition '(n - temp) % b == 0' will always be true if 'n % b == 1' is true.

The optimized program is as follows:

```cpp
#include <iostream>
#include <vector>
typedef unsigned long long ull;
typedef long long ll;
using namespace std;

void solve() {
  ll n, a, b;
  cin >> n >> a >> b;
  if (n % b == 1 || n % b == a || b == 1 || a == 1) {
    cout << "YES\n";
  } else {
    ll temp = 1;
    while (temp <= n) {
      if ((n - temp) % b == 0) {
        cout << "YES\n";
        return;
      }
      temp *= a;
    }
    cout << "NO\n";
  }
}

int main() {
  int t = 1;
  cin >> t;
  for (int tc = 1; tc <= t; tc++) {
    solve();
  }
  return 0;
}
```
Please note that these modifications help to optimize the program in terms of running time and memory usage. However, the extent of optimization would depend on the specific input values.