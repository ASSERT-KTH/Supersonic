First, we can simplify the program with some changes:

1. Reduce unnecessary condition checks.
2. Eliminate redundant code.
3. Use "return" instead of "break" to exit the loop early.

Here's the optimized version of the program after applying the improvements.

```C++
#include <bits/stdc++.h>
#define startt ios_base::sync_with_stdio(false); cin.tie(0);

typedef long long ll;

using namespace std;

void solve() {
  ll n, a, b;
  cin >> n >> a >> b;

  if (b == 1 || n % b == 1 || n % b == a) {
    cout << "YES\n";
    return;
  } 

  if (a == 1) {
    cout << ((n % b == 1) ? "YES\n" : "NO\n");
    return;
  }

  ll temp = 1;
  while (temp <= n) {
    if (temp == n || (n - temp) % b == 0) {
      cout << "YES\n";
      return;
    }
    temp *= a;
  }

  cout << "NO\n";
}

int main() {
  startt;

  int t = 1;
  cin >> t;
  
  for (int tc = 1; tc <= t; tc++) {
    solve();
  }

  return 0;
}
```

Explanation of changes:

1. The condition `(n % b == 1 || n % b == a || b == 1)` was placed first to check because these are the most straightforward conditions to meet to print "YES". If none of these are met, then we proceed to the next conditions.

2. We removed the `flag` variable. Instead of setting a flag and breaking out of the loop, we can simply `return` from the function when the condition is met.

3. The conditions `(temp == n || (n - temp) % b == 0)` were combined into a single condition. If either is met, we output "YES" and return from the function. If the loop completes without meeting these conditions, we output "NO".

4. Removed the `else` part after the `if (a == 1) {...}` check. If the condition inside the `if` is met, we `return` from the function anyway, so the `else` is not needed.

These changes make the code cleaner, more readable and efficient.