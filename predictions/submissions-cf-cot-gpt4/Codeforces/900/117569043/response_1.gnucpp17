#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <map>

#define mod 1000000007

int power(int x, int y) {
  int res = 1;
  x = x % mod;
  if (x == 0)
    return 0;
  while (y > 0) {
    if (y & 1)
      res = (res * x) % mod;
    y = y >> 1;
    x = (x * x) % mod;
  }
  return res;
}

std::vector<int> divisors(int n) {
  std::vector<int> v;
  int i;
  for (i = 2; i * i < n; i++) {
    if (n % i == 0) {
      v.push_back(i);
    }
  }
  for (; i >= 1; i--) {
    if (n % i == 0) {
      v.push_back(n / i);
    }
  }
  return v;
}

void solve() {
  int x, y;
  std::cin >> x >> y;
  if (y % x != 0) {
    std::cout << 0 << std::endl;
    return;
  }
  if (y / x == 1) {
    std::cout << 1 << std::endl;
    return;
  }
  int sum = y / x;
  int ans = power(2, sum - 1);
  ans = (ans - 1 + mod) % mod;
  std::vector<int> div = divisors(sum);
  std::vector<int> mp(sum + 1, 0);
  for (int i = 0; i < div.size(); i++) {
    int cur = power(2, div[i] - 1);
    for (int j = 0; j * j <= div[i]; j++) {
      cur = (cur - mp[j] + mod) % mod;
    }
    mp[div[i]] = (cur - 1 + mod) % mod;
    ans = (ans - (cur - 1) + mod) % mod;
  }
  std::cout << ans << std::endl;
}

int main() {
  solve();
  return 0;
}