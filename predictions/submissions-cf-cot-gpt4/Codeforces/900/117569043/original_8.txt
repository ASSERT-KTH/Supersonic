Here are some steps to optimize your code:

1. Avoid using `#include <bits/stdc++.h>`. This header file includes all standard libraries which increases the compilation time. Include only those libraries which you are actually using in your code.

2. Avoid using `using namespace std;`. This can cause name conflicts in large programs because it includes all the identifiers of the std namespace. Instead, use the `std::` prefix when needed.

3. Declare the `div` vector with a known size. The size is `sqrt(n)`, so you can allocate it beforehand. This will save the time needed to reallocate memory when the vector grows.

4. In the `divisors` function, you can avoid checking even numbers after checking 2. If n is divisible by any even number, it is divisible by 2. This can halve the number of iterations.

5. The power function can be optimized using the binary exponentiation algorithm.

6. Use `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(NULL);` only if you are using cin/cout for input/output. If you are using scanf/printf, then don't use these lines.

7. Avoid declaring `dx` and `dy` if they are not used in the code.

8. The `solve()` function should be inside the main function.

Here is the optimized version of your code:

```c++
#include <iostream>
#include <vector>
#include <map>
#include <cmath>
#include <algorithm>

#define mod 1000000007
#define int long long

using std::cin;
using std::cout;
using std::endl;
using std::vector;
using std::map;

int power(int x, int y, int p) {
  int res = 1;
  x = x % p;
  if (x == 0)
    return 0;
  while (y > 0) {
    if (y & 1)
      res = (res * x) % p;
    y = y >> 1;
    x = (x * x) % p;
  }
  return res;
}

vector<int> divisors(int n) {
  vector<int> v(sqrt(n));
  for (int i = 2; i <= sqrt(n); i += i==2?1:2) {
    if (n % i == 0) {
      if (n / i == i)
        v.push_back(i);
      else {
        v.push_back(i);
        v.push_back(n / i);
      }
    }
  }
  return v;
}

void solve() {
  int x, y;
  cin >> x >> y;
  if (y % x != 0) {
    cout << 0 << endl;
    return;
  }
  if (y / x == 1) {
    cout << 1 << endl;
    return;
  }
  int sum = y / x;
  int ans = power(2, sum - 1, mod);
  ans = (ans - 1 + mod) % mod;
  vector<int> div = divisors(sum);
  sort(div.begin(), div.end());
  map<int, int> mp;
  for (int i = 0; i < div.size(); i++) {
    int cur = power(2, div[i] - 1, mod);
    vector<int> div1 = divisors(div[i]);
    for (int p : div1) {
      cur = (cur - mp[p] + mod) % mod;
    }
    mp[div[i]] = (cur - 1 + mod) % mod;
    ans = (ans - (cur - 1) + mod) % mod;
  }
  cout << ans << endl;
}

signed main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  solve();
  return 0;
}
```