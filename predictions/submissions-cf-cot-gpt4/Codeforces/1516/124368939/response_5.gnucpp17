#include <iostream>
#include <vector>
#include <cmath>
#include <iomanip>
#include <algorithm>
#include <utility>

#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define ub lower_bound
#define lb upper_bound
#define sz(a) a.size()
#define sc second
#define fs first
#define pri(b)                                                                 \
  for (auto i : b)                                                             \
    cout << i << " ";
#define all(v) v.begin(), v.end()
#define vi vector<ll>
#define pr pair<ll, ll>
#define mp make_pair
#define spi(n) fixed << setprecision(n)
#define nline "\n"

typedef long long int ll;

using namespace std;

ll mod = 1e9 + 7;
ll fact[100005];
ll invfact[100005];

ll modulo_pow(ll a, ll b) {
  ll res = 1;
  while (b) {
    if (b & 1)
      res = (res % mod * a % mod) % mod;
    a = (a % mod * a % mod) % mod;
    b >>= 1;
  }
  return res;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    vector<ll> v(n, 0);
    ll d = 0;
    for (int i = 0; i < n; i++) {
      cin >> v[i];
      d ^= v[i];
    }
    vector<ll> pref(n + 1);
    pref[0] = 0;
    for (int i = 1; i <= n; i++) {
      pref[i] = pref[i - 1] ^ v[i - 1];
    }
    vector<ll> suff(n + 2);
    suff[n + 1] = 0;
    for (int i = n; i >= 1; i--) {
      suff[i] = suff[i + 1] ^ v[i - 1];
    }
    bool ans = false;
    for (int i = 1; i <= n - 1; i++) {
      if (pref[i] == suff[i + 1]) {
        ans = true;
        break;
      }
    }
    if (ans) {
      cout << "YES" << nline;
      continue;
    } else if (d == 0 && !ans) {
      cout << "NO" << nline;
      continue;
    }
    ll k = 0;
    ll c = 0;
    for (int i = 0; i < n; i++) {
      k ^= v[i];
      if (k == d) {
        k = 0;
        c++;
      }
    }
    if (k == 0 && c >= 3)
      cout << "YES" << nline;
    else
      cout << "NO" << nline;
  }
  return 0;
}