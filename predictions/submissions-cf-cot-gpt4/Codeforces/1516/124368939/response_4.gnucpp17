#include <bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
typedef long long int ll;
using namespace __gnu_pbds;
#define pbds tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update>
#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define ub lower_bound
#define lb upper_bound
#define memo(aa) memset(aa, 0, sizeof(aa))
#define tc int tt; cin >> tt; while (tt--)
#define sz(a) a.size()
#define sc second
#define fs first
#define pri(b) for (auto i : b) cout << i << " ";
#define all(v) v.begin(), v.end()
#define vi vector<ll>
#define pr pair<ll, ll>
#define mp make_pair
#define spi(n) fixed << setprecision(n)
#define nline "\n"
ll mod = 1e9 + 7;
ll fact[100005];
ll invfact[100005];

inline ll phin(ll n) {
  // code omitted for brevity
}

inline vector<ll> sieve(int n) {
  vector<bool> arr(n + 1, false);
  vector<ll> vect;
  // code omitted for brevity
  return vect;
}

inline void google(int t) { cout << "Case #" << t << ": "; }

inline ll modulo_pow(ll a, ll b) {
  if (b == 0)
    return 1;
  ll d = modulo_pow(a, b / 2);
  return ((d * d) % mod * (b & 1 ? a : 1)) % mod;
}

inline void prefact(ll l) {
  // code omitted for brevity
}

inline void preinvfact(ll n) {
  // code omitted for brevity
}

inline ll ncr(ll n, ll r) {
  // code omitted for brevity
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
#ifndef ONLINE_JUDGE
  freopen("Input.txt", "r", stdin);
  freopen("Output.txt", "w", stdout);
#endif
  tc {
    int n;
    cin >> n;
    vector<ll> v(n, 0);
    ll d = 0;
    for (int i = 0; i < n; i++) {
      cin >> v[i];
      d ^= v[i];
    }
    
    if (d == 0) {
      cout << "NO" << nline;
      continue;
    }

    ll k = 0;
    ll c = 0;
    for (int i = 0; i < n; i++) {
      k ^= v[i];
      if (k == d) {
        k = 0;
        c++;
      }
    }
    if (k == 0 && c >= 3)
      cout << "YES" << nline;
    else {
      ll pref[n + 1];
      pref[0] = 0;
      for (int i = 1; i <= n; i++) {
        pref[i] = pref[i - 1] ^ v[i - 1];
      }
      ll suff[n + 2];
      suff[n + 1] = 0;
      for (int i = n; i >= 1; i--) {
        suff[i] = suff[i + 1] ^ v[i - 1];
      }
      int ans = 0;
      for (int i = 1; i <= n - 1; i++) {
        if (pref[i] == suff[i + 1]) {
          ans = 1;
          break;
        }
      }
      cout << (ans ? "YES" : "NO") << nline;
    }
  }
  return 0;
}