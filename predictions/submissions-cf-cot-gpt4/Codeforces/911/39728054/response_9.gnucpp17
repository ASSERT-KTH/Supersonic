#include <iostream>
#include <vector>
#include <queue>
#include <cmath>
#include <algorithm>
#define PI 3.14159265
#define N 200005
#define ll long long int

using namespace std;

ll n, root, root1;
vector<ll> v[N], diam[N], tour, path;

void height_initialise(ll x, ll y, vector<ll>& h, vector<ll>& vis1) {
  h[x] = y;
  vis1[x] = 1;
  for (int i = 0; i < v[x].size(); ++i) {
    int node = v[x][i];
    if (vis1[node] == 0) {
      height_initialise(node, y + 1, h, vis1);
    }
  }
}

void distanc(ll x, ll y, vector<ll>& dist, vector<ll>& vis3) {
  dist[x] = y;
  vis3[x] = 1;
  for (int i = 0; i < v[x].size(); ++i) {
    int node = v[x][i];
    if (vis3[node] == 0) {
      distanc(node, y + 1, dist, vis3);
    }
  }
}

void euler(ll x, ll y, vector<ll>& vis2) {
  vis2[x] = 1;
  tour.push_back(x);
  for (int i = 0; i < v[x].size(); ++i) {
    int node = v[x][i];
    if (vis2[node] == 0) {
      euler(node, x, vis2);
    }
  }
  if (y != 0)
    tour.push_back(y);
}

void euler_tour(vector<ll>& first) {
  euler(root, 0);
  for (int i = 0; i < tour.size(); ++i) {
    if (first[tour[i]] == 0) {
      first[tour[i]] = i;
    }
  }
}

void sparsemin(vector<ll>& h, vector<vector<ll>>& stmin) {
  ll i, j, x, y;
  for (i = 0; i < tour.size(); ++i) {
    stmin[i][0] = tour[i];
  }
  for (j = 1; (1 << j) <= tour.size(); ++j) {
    for (i = 0; i <= tour.size() - (1 << j); ++i) {
      x = stmin[i][j - 1];
      y = stmin[i + (1 << (j - 1))][j - 1];
      if (h[x] > h[y]) {
        stmin[i][j] = y;
      } else {
        stmin[i][j] = x;
      }
    }
  }
}

ll spminquery(ll l, ll r, vector<ll>& h, vector<vector<ll>>& stmin) {
  ll length, k, x, y;
  length = r - l + 1;
  k = log2(length);
  x = stmin[l][k];
  y = stmin[l + length - (1 << k)][k];
  if (h[x] < h[y]) {
    return x;
  }
  return y;
}

int bfs(int x, int flag, vector<int>& parent, vector<int>& vis) {
  int i, y;
  queue<int> q;
  q.push(x);
  while (q.size()) {
    x = q.front();
    q.pop();
    vis[x] = 1;
    for (int i = 0; i < v[x].size(); ++i) {
      int node = v[x][i];
      if (vis[node] == 0) {
        q.push(node);
        if (flag == 1) {
          parent[node] = x;
        }
      }
    }
    y = x;
  }
  return y;
}

void diameter() {
  int x, y, z, i, j;
  vector<int> parent(N, 0), vis(N, 0);
  x = bfs(1, 0, parent, vis);
  y = bfs(x, 1, parent, vis);
  root1 = y;
  z = y;
  while (parent[z] != 0) {
    path.push_back(z);
    z = parent[z];
  }
  path.push_back(z);
  reverse(path.begin(), path.end());
  root = x;
  vis.assign(N, 0);
  for (i = 0; i < path.size(); ++i) {
    queue<int> q;
    q.push(path[i]);
    while (q.size()) {
      x = q.front();
      q.pop();
      vis[x] = 1;
      for (j = 0; j < v[x].size(); ++j) {
        int node = v[x][j];
        if (vis[node] == 0) {
          q.push(node);
          diam[i].push_back(node);
        }
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> n;
  ll i, j, x, y, z, l, r, q, ans = 0;
  vector<pair<ll, ll>> an;
  an.reserve(n);
  for (i = 0; i < n - 1; ++i) {
    cin >> x >> y;
    v[x].push_back(y);
    v[y].push_back(x);
  }
  diameter();
  vector<ll> h(N, 0), first(N, 0), dist(N, 0);
  vector<ll> vis1(N, 0), vis2(N, 0), vis3(N, 0);
  vector<vector<ll>> stmin(2 * N, vector<ll>(20, 0));
  height_initialise(root, 0, h, vis1);
  euler_tour(first);
  sparsemin(h, stmin);
  distanc(root, 0, dist, vis3);
  for (i = 0; i < path.size() / 2; ++i) {
    for (j = diam[i].size() - 1; j > 0; --j) {
      x = root1;
      y = diam[i][j];
      an.push_back(make_pair(x, y));
      l = first[x];
      r = first[y];
      if (l > r) swap(l, r);
      z = spminquery(l, r, h, stmin);
      z = dist[x] + dist[y] - 2 * dist[z];
      ans += z;
    }
  }
  x = i;
  for (i = x; i < path.size(); ++i) {
    for (j = diam[i].size() - 1; j > 0; --j) {
      x = root;
      y = diam[i][j];
      an.push_back(make_pair(x, y));
      l = first[x];
      r = first[y];
      if (l > r) swap(l, r);
      z = spminquery(l, r, h, stmin);
      z = dist[x] + dist[y] - 2 * dist[z];
      ans += z;
    }
  }
  for (i = path.size() - 1; i > 0; --i) {
    x = root;
    y = diam[i][0];
    an.push_back(make_pair(x, y));
    l = first[x];
    r = first[y];
    if (l > r) swap(l, r);
    z = spminquery(l, r, h, stmin);
    z = dist[x] + dist[y] - 2 * dist[z];
    ans += z;
  }
  cout << ans << endl;
  for (i = 0; i < an.size(); ++i) {
    cout << an[i].first << " " << an[i].second << " " << an[i].second << "\n";
  }
  return 0;
}