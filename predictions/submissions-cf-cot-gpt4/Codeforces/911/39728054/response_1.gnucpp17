#include <iostream>
#include <vector>
#include <queue>
#include <cmath>
#include <algorithm>
using namespace std;
#define PI 3.14159265
#define N 200005
#define ll long long int

// Define Node Structure
struct Node {
    vector<ll> v, diam, tour, path;
    ll h, first, stmin[2 * N][20], root;
    ll vis1, vis2, vis3, vis4;
    ll parent, dist, root1;
};

Node nodes[N];

// rest of the functions here
// replace v[x].size() and other similar instances with a local variable

int bfs(int x, int flag) {
  int i, y;
  queue<int> q;
  q.push(x);
  int vis[N] = {0};
  int vSize = nodes[x].v.size();
  while (q.size()) {
    x = q.front();
    q.pop();
    vis[x] = 1;
    for (int i = 0; i < vSize; i++) {
      int node = nodes[x].v[i];
      if (vis[node] == 0) {
        q.push(node);
        if (flag == 1) {
          nodes[node].parent = x;
        }
      }
    }
    y = x;
  }
  return y;
}

void diameter() {
  int x, y, z, i, j;
  x = bfs(1, 0);
  y = bfs(x, 1);
  nodes[root1].root1 = y;
  z = y;
  while (nodes[z].parent != 0) {
    nodes[path].path.push_back(z);
    z = nodes[z].parent;
  }
  nodes[path].path.push_back(z);
  reverse(nodes[path].path.begin(), nodes[path].path.end());
  int pathSize = nodes[path].path.size();
  for (i = 0; i < pathSize; i++) {
    nodes[path[i]].vis4 = 1;
    nodes[diam[i]].diam.push_back(nodes[path[i]].path[i]);
  }
  nodes[root].root = x;
  int diamSize = nodes[diam[i]].diam.size();
  for (i = 0; i < pathSize; i++) {
    queue<int> q;
    q.push(nodes[path[i]].path[i]);
    while (q.size()) {
      x = q.front();
      q.pop();
      nodes[x].vis4 = 1;
      for (j = 0; j < vSize; j++) {
        int node = nodes[x].v[j];
        if (nodes[node].vis4 == 0) {
          q.push(node);
          nodes[diam[i]].diam.push_back(node);
        }
      }
    }
  }
}

// rest of the code