#include <iostream>
#include <vector>
#include <queue>
#include <cmath>
#include <algorithm>

using namespace std;
#define PI 3.14159265
#define N 200005
#define ll long long int

void height_initialise(ll x, ll y, vector<ll> v[], ll h[], ll vis1[]) {
  h[x] = y;
  vis1[x] = 1;
  for (auto node : v[x]) {
    if (vis1[node] == 0) {
      height_initialise(node, y + 1, v, h, vis1);
    }
  }
}

// Similar changes applied to other functions as well...


int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  ll n;
  cin >> n;
  
  // Reducing the usage of global variables
  vector<ll> v[N], diam[N], tour, path;
  ll h[N], first[N], stmin[2 * N][20], root;
  ll vis1[N], vis2[N], vis3[N], vis4[N];
  ll parent[N], dist[N], root1;

  ll i, j, x, y, z, l, r, q, ans = 0;
  vector<pair<ll, ll>> an;
  for (i = 0; i < n - 1; i++) {
    cin >> x >> y;
    v[x].push_back(y);
    v[y].push_back(x);
  }
  
  // Passing the necessary variables to the function
  diameter(v, diam, tour, path, h, first, stmin, root, vis1, vis2, vis3, vis4, parent, dist, root1);
  
  for (i = 0; i < path.size() / 2; i++) {
    for (auto it = diam[i].rbegin(); it != diam[i].rend(); ++it) {
      x = root1;
      y = *it;
      an.emplace_back(x, y);
      l = first[x];
      r = first[y];
      ll min_lr = min(l, r);
      ll max_lr = max(l, r);
      z = spminquery(min_lr, max_lr, h, first, stmin);
      z = dist[x] + dist[y] - 2 * dist[z];
      ans += z;
    }
  }

  // Other similar changes omitted for brevity...

  return 0;
}