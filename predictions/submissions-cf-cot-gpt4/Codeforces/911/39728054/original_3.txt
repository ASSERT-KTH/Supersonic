Here are some optimization techniques to improve the performance of the given C/C++ code:

1. **Avoiding Macro Definitions**: Although #define PI and #define N are not used within your code, it is generally better to use 'const' keyword instead of '#define' for constant values. This is because using 'const' will let the compiler know the type of the constant, which could lead to better optimized code. 

2. **Using 'auto' Keyword**: When we iterate through a vector, we can use 'auto' keyword instead of specifying the data type explicitly. This can potentially make your code more efficient.

3. **Using 'reserve' for vectors**: If you know the size of the vector beforehand, you can use the 'reserve' function to preallocate the memory. This can prevent unnecessary reallocations, as vectors dynamically resize when elements are pushed back.

4. **Avoiding Global Variables**: Global variables can be accessed and modified from anywhere in the code, which can lead to bugs that are hard to track down. They can also make your code more difficult to understand and maintain. It's better to limit the scope of variables as much as possible.

5. **Avoiding Repeated Calculations**: There are some calculations that are repeated multiple times in your code. For example, the expression 'dist[x] + dist[y] - 2 * dist[z]' is calculated 3 times. You could calculate it once and store the result in a variable, then use this variable instead of calculating the expression again.

Here is the optimized version of your code after applying these techniques:

```cpp
#include <bits/stdc++.h>
using namespace std;
constexpr double PI = 3.14159265;
constexpr int N = 200005;
using ll = long long int;
vector<ll> v[N], diam[N], tour, path;
ll n, h[N], first[N], stmin[2 * N][20], root;
ll vis1[N], vis2[N], vis3[N], vis4[N];
ll parent[N], dist[N], root1;
void height_initialise(ll x, ll y) {
  h[x] = y;
  vis1[x] = 1;
  for (auto node : v[x]) {
    if (vis1[node] == 0) {
      height_initialise(node, y + 1);
    }
  }
}
void distanc(ll x, ll y) {
  dist[x] = y;
  vis3[x] = 1;
  for (auto node : v[x]) {
    if (vis3[node] == 0) {
      distanc(node, y + 1);
    }
  }
}
...
int main() {
  ...
  vector<pair<ll, ll>> an;
  an.reserve(n);  // Reserve memory for n elements.
  ...
  for (auto i = 0; i < path.size() / 2; i++) {
    for (auto j = diam[i].size() - 1; j > 0; j--) {
      ...
      ll z_dist = dist[x] + dist[y] - 2 * dist[z];
      ans += z_dist;
    }
  }
  ...
  for (auto i = path.size() - 1; i > 0; i--) {
    ...
    ll z_dist = dist[x] + dist[y] - 2 * dist[z];
    ans += z_dist;
  }
  ...
  for (auto i = 0; i < an.size(); i++) {
    cout << an[i].first << " " << an[i].second << " " << an[i].second << "\n";
  }
  return 0;
}
```

Please note that the above code is partial and only some of the changes are shown. The '...' represents the unmodified parts of your original code.