First, let's point out the possible optimizations:

1. Use an unordered_map instead of map : "map" in C++ is implemented as a balanced binary search tree and gives a time complexity of O(logN) for insertions and deletions. "unordered_map" is implemented as a hash table, and therefore, provides a time complexity of O(1) on average for insertions and deletions. So, we can replace "map" with "unordered_map" to improve the time complexity.

2. Use of memset for initialization: Instead of using a for loop to initialize each element in a vector, we can use the memset function, which is faster because it uses low-level memory handling operations.

3. Avoiding unnecessary function calls: The function "u.find({node, child})" is called multiple times in the code. We can optimize this by calling it once, storing the result and reusing it.

4. Inline functions: The compiler treats inline functions as macro expansions. This means that whenever the function is called, the entire code of the function gets inserted or substituted at the point of function call. This reduces the overhead of function calls.

5. Avoiding unnecessary use of macros: Macros like "#define fo(i, n) for (i = 0; i < n; i++)" and "#define Fo(i, n) for (i = 1; i <= n; i++)" might make the code look cleaner, but they increase the overhead and can slow down the program. It's better to use simple for loops.

Here is your optimized code:

```c++
#include <bits/stdc++.h>
using namespace std;
const long long mod = 1000000007;
const long long inf = 1e18;
const long long cons = 200005;
vector<long long> g[cons];
unordered_map<pair<long long, long long>, long long> u;
long long M;
vector<long long> vis(cons);

void dfs(long long node, long long pv) {
  vis[node] = 1;
  for (long long child : g[node]) {
    if (vis[child] == 0) {
      u[{node, child}] = pv;
      u[{child, node}] = pv ^ 1;
      dfs(child, pv ^ 1);
    } else {
      auto it = u.find({node, child});
      if ( it != u.end()) {
        if ( it->second != pv) {
          M = 1;
        }
      } else {
        u[{node, child}] = pv;
        u[{child, node}] = pv ^ 1;
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  long long n = 0, m = 0, j = 0, k = 0;
  cin >> n >> m;
  vector<pair<long long, long long>> v;
  for(long long i = 0; i < m; i++) {
    cin >> j >> k;
    g[j].push_back(k);
    g[k].push_back(j);
    v.push_back({j, k});
  }
  memset(&vis[0], 0, vis.size() * sizeof(vis[0]));
  dfs(1, 0);
  if (M) {
    cout << "NO" << endl;
  } else {
    cout << "YES" << endl;
    for(long long i = 0; i < m; i++) {
      cout << u[v[i]];
    }
  }
  return 0;
}
```

This version of the code should run faster and use less memory than the original one.