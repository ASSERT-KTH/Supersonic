#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<ll, ll> pl;
typedef vector<ll> vl;
typedef vector<pl> vpl;
const ll mod = 1e9+7;
const ll inf = 1e18;
const ll cons = 2e5+5;
vl g[cons], vis(cons);
ll N, M;
ll u[cons][2];
void dfs(ll node, ll pv) {
  vis[node] = 1;
  for (ll child : g[node]) {
    if (vis[child] == 0) {
      u[node][child] = pv;
      u[child][node] = pv ^ 1;
      dfs(child, pv ^ 1);
    } else {
      if (u[node][child] != pv) {
          M = 1;
      } else {
        u[node][child] = pv;
        u[child][node] = pv ^ 1;
      }
    }
  }
}
int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  ll n = 0, m = 0, i = 0, j = 0, k = 0;
  cin >> n >> m;
  vpl v;
  for(i = 0; i < m; i++) {
    cin >> j >> k;
    g[j].push_back(k);
    g[k].push_back(j);
    v.push_back({j, k});
  }
  dfs(1, 0);
  if (M) {
    cout << "NO" << endl;
  } else {
    cout << "YES" << endl;
    for(i = 0; i < m; i++) { cout << u[v[i].first][v[i].second]; }
  }
  return 0;
}