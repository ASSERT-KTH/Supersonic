#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <fstream>

using ll = long long int;
using ld = long double;
using pl = std::pair<ll, ll>;
using vl = std::vector<ll>;
using vpl = std::vector<pl>;
using vvl = std::vector<vl>;

const ll mod = 1000000007;
const ld PI = 3.141592653589793;
const ll inf = 1e18;
const ll cons = 200005;
vl g[cons], vis(cons);
std::map<pl, ll> u;
ll M = 0;

void dfs(ll node, ll pv) {
  vis[node] = 1;
  for (ll child : g[node]) {
    if (vis[child] == 0) {
      u[{node, child}] = pv;
      u[{child, node}] = pv ^ 1;
      dfs(child, pv ^ 1);
    } else {
      if (u.find({node, child}) != u.end()) {
        if (u[{node, child}] != pv) {
          M = 1;
        }
      } else {
        u[{node, child}] = pv;
        u[{child, node}] = pv ^ 1;
      }
    }
  }
}

int main() {
  std::ios_base::sync_with_stdio(0), std::cin.tie(0), std::cout.tie(0);

  ll n = 0, m = 0, j = 0, k = 0;
  std::cin >> n >> m;
  vpl v;
  for(ll i = 0; i < m; i++) {
    std::cin >> j >> k;
    g[j].push_back(k);
    g[k].push_back(j);
    v.push_back({j, k});
  }
  dfs(1, 0);
  if (M) {
    std::cout << "NO" << std::endl;
  } else {
    std::cout << "YES" << std::endl;
    for(ll i = 0; i < m; i++) { 
      std::cout << u[v[i]]; 
    }
  }
  return 0;
}