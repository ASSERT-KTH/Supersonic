The given C++ program performs some calculations and its optimization can be done at the following points:

1. The array 'mark' is declared but it's not used anywhere in the code. We can remove this to save memory.
2. The 'sortdec' and 'sortace' functions are declared but not used. We can remove these as well.
3. The 'gcd' function is declared but not used. We can remove this as well.
4. The variables 'all', 'fi', 'se', 'vi', 'vl', 'pii' and 'loop' are defined using '#define' but they are not used in the code. We can remove these.
5. The 'minpq' template is declared but not used. We can remove this as well.
6. The 'mod' and 'MAX_VALUE' constants are defined but not used. We can remove this.
7. The 'bits/stdc++.h' header file includes all the standard C++ libraries, which can lead to increased compilation time. It's better to include only those libraries which are used in the program.

Now, let's optimize the code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

typedef long long int ll;
typedef vector<ll> vl;

void solve() {
  ll n;
  cin >> n;
  vl ans;
  ans.push_back(1);
  n--;
  int lastPush = 1;
  while (n > 0) {
    if (lastPush + 2 >= n) {
      ans.push_back(n);
      lastPush += 2;
      n -= n;
    } else {
      ans.push_back(lastPush + 2);
      lastPush += 2;
      n -= lastPush;
    }
  }
  cout << ans.size() << "\n";
}

int main() {
  int t;
  cin >> t;
  while (t-- > 0) {
    solve();
  }
  return 0;
}
```

Now, the program is more optimized in terms of memory usage and compilation time.