#include <stdio.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ul;
#define len (int)1e6 + 5
#define mod (ll)(1e9 + 7)
#define v(i) vector<i>
#define pb push_back
#define clr(a) memset((a), 0, sizeof((a)))
#define rep(i, a, b) for (ll i = (a); i <= (b); i++)
ul modpow(ul x, ul n, ul m) {
  if (n == 0)
    return 1UL % m;
  ul u = modpow(x, n / 2, m);
  u = (u * u) % m;
  if (n % 2 == 1)
    u = (u * x) % m;
  return u;
}
ul mod_(ll x, ll m) {
  if (x > 0)
    return x % m;
  else
    return (m - abs(x) % m) % m;
}
bool prm[len];
void make_prm() {
  prm[0] = prm[1] = true;
  for (int first = 2; first <= len; first++) {
    if (!prm[first]) {
      for (int second = 2 * first; second <= len; second += first)
        prm[second] = true;
    }
  }
}
v(int) factor;
void make_factor(int n) {
  for (int i = 1; i * i <= n; i++) {
    if (n % i == 0) {
      factor.pb(i);
      if (i != n/i)
        factor.pb(n / i);
    }
  }
}
ul n, k;
ul sm, ans;
bool vis[len];
v(ll) adj[len];
ll dfs(ll, ll);
main() {
  ci n >> k;
  rep(i, 1, n - 1) {
    ll u, v, x;
    ci u >> v >> x;
    if (x == 0)
      adj[u].pb(v), adj[v].pb(u);
  }
  rep(i, 1, n) {
    if (!vis[i]) {
      sm += modpow(dfs(i, -1), k, mod);
      sm = mod_(sm, mod);
    }
  }
  ans = modpow(n, k, mod);
  co mod_(ans - sm, mod);
}
ll dfs(ll n, ll p) {
  if (vis[n])
    return 0;
  vis[n] = true;
  ll x = 1;
  for (auto u : adj[n]) {
    if (u != p)
      x += dfs(u, n);
  }
  return x;
}