#include <iostream>
#include <stdio.h>
#include <vector>
#include <string.h>
#include <math.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ul;
const int len = 1e6 + 5;
const ll mod = 1e9 + 7;
#define MP make_pair
#define v(i) vector<i>
#define p(aa, bb) pair<aa, bb>
#define pb push_back
#define F first
#define S second
#define ln length()
#define INF (1LL << 61)
#define co cout <<
#define ci cin >>
#define nl '\n'
ul modpow(ul x, ul n, ul m) {
  if (n == 0)
    return 1UL % m;
  ul u = modpow(x, n / 2, m);
  u = (u * u) % m;
  if (n % 2 == 1)
    u = (u * x) % m;
  return u;
}
ul mod_(ll x, ll m) {
  if (x > 0)
    return x % m;
  else
    return (m - abs(x) % m) % m;
}
bool prm[len];
void make_prm() {
  prm[0] = prm[1] = true;
  for (int first = 2; first <= len; first++) {
    if (!prm[first]) {
      for (int second = 2 * first; second <= len; second += first)
        prm[second] = true;
    }
  }
}
v(int) factor;
void make_factor(int n) {
  for (int i = 1; i * i <= n; i++) {
    if (n % i == 0) {
      factor.pb(i);
      if (i != n / i)
        factor.pb(n / i);
    }
  }
}
ul pascal_tri[2][105];
void make_pascalTri(int n) {
  bool f = 0;
  for (int i = 0; i <= n; i++) {
    memset(pascal_tri[f], 0, (i+1)*sizeof(ul));
    pascal_tri[f][0] = 1;
    for (int j = 1; j <= i; j++) {
      pascal_tri[f][j] = pascal_tri[!f][j] + pascal_tri[!f][j - 1];
    }
    f = !f;
  }
}
ll gcd(ll a, ll b) {
  if (b == 0)
    return a;
  return gcd(b, a % b);
}
ll give_floor(ll n, ll a) {
  if (n % a == 0)
    return n / a;
  else {
    return n / a + 1;
  }
}
bool is_perfect(ll n) {
  ll i;
  for (i = 1; i * i < n; i++)
    ;
  return i * i == n;
}
ul n, k;
ul sm, ans;
bool vis[len];
v(ll) adj[len];
ll dfs(ll, ll);
int main() {
  ci n >> k;
  for (int i = 1; i < n; i++) {
    ll u, v, x;
    ci u >> v >> x;
    if (x == 0)
      adj[u].pb(v), adj[v].pb(u);
  }
  for (int i = 1; i <= n; i++) {
    if (vis[i]) continue;
    sm += modpow(dfs(i, -1), k, mod);
    sm = mod_(sm, mod);
  }
  ans = modpow(n, k, mod);
  co mod_(ans - sm, mod);
  return 0;
}
ll dfs(ll n, ll p) {
  if (vis[n])
    return 0;
  vis[n] = true;
  ll x = 0;
  for (auto u : adj[n]) {
    if (u != p)
      x += dfs(u, n);
  }
  return x + 1;
}