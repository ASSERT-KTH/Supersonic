The provided C++ program seems to be a graph-based algorithm with depth-first search and uses Sieve of Eratosthenes to find prime numbers. It also has functions to calculate the GCD, floor division, check if a number is perfect square, and compute the power of a number in modular arithmetic.

Here are some optimizations we can make:

1. Remove `#include <bits/stdc++.h>`: This header file is quite large and slows down the compile time. It's better to include only the libraries that you need. In this case, we need <iostream>, <vector>, <cstring>, and <cmath>.
2. Remove unused functions: The functions `make_prm`, `make_factor`, `make_pascalTri`, `gcd`, `give_floor`, and `is_perfect` are not used in the main function. Removing them will save memory.
3. Change `typedef long long ll; typedef unsigned long long ul;` to `using ll = long long; using ul = unsigned long long;` for better readability.
4. Remove unused macros: There are many macros defined that are not used in the program (`pq(a)`, `pqd(b)`, `MP`, `p(aa, bb)`, `all(a)`, `F`, `S`, `ln`, `INF`, `fio(a, b)`, `ios`). Removing them will make the program cleaner and easier to read. 
5. Use `std::array` instead of C-style array: Instead of using C-style arrays (`ul pascal_tri[2][(int)105];`), you can use a `std::array` which is safer and more feature-rich. However, in this particular case, `pascal_tri` is not used in the program, so it can be removed.
6. Use `std::vector<bool>` instead of C-style boolean array: We can replace the boolean array `bool vis[len];` with a std::vector<bool> which is safer and more feature-rich. 

After applying the optimizations, here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
#include <cstring>
#include <cmath>

using ll = long long;
using ul = unsigned long long;
constexpr int len = (int)1e6 + 5;
constexpr ll mod = (ll)(1e9 + 7);

ul modpow(ul x, ul n, ul m) {
  if (n == 0)
    return 1UL % m;
  ul u = modpow(x, n / 2, m);
  u = (u * u) % m;
  if (n % 2 == 1)
    u = (u * x) % m;
  return u;
}

ul mod_(ll x, ll m) {
  if (x > 0)
    return x % m;
  else
    return (m - abs(x) % m) % m;
}

std::vector<bool> vis(len);
std::vector<ll> adj[len];

ll dfs(ll n, ll p) {
  if (vis[n])
    return 0;
  vis[n] = true;
  ll x = 0;
  for (auto u : adj[n]) {
    if (u != p)
      x += dfs(u, n);
  }
  return x + 1;
}

int main() {
  ul n, k;
  ul sm = 0, ans = 0;
  std::cin >> n >> k;
  for(ll i = 1; i <= n - 1; ++i) {
    ll u, v, x;
    std::cin >> u >> v >> x;
    if (x == 0) {
      adj[u].push_back(v);
      adj[v].push_back(u);
    }
  }
  for(ll i = 1; i <= n; ++i) {
    if (!vis[i]) {
      sm += modpow(dfs(i, -1), k, mod);
      sm = mod_(sm, mod);
    }
  }
  ans = modpow(n, k, mod);
  std::cout << mod_(ans - sm, mod);
  return 0;
}
```