Here are the steps to optimize the given C/C++ program:

1. Remove `#include <bits/stdc++.h>`: This header file includes most of the standard library headers and it's much slower to compile. It's not a standard header file and using it is generally discouraged. We will include only necessary headers individually.

2. Remove `using namespace std`: This line can potentially lead to name clashes, which can be especially problematic in larger programs. It's better to use std:: for each standard library function.

3. Remove unnecessary Macros: Macros like `#define len (int)1e6 + 5`, `#define mod (ll)(1e9 + 7)`, `#define pq(a) priority_queue<a>`, etc. are not used anywhere in the code. So, it's better to remove them.

4. Avoid `freopen`: The `freopen` function is used to redirect the input and output to files. However, it's not needed in this case and it's generally safer and more convenient to use file streams for file I/O.

5. Use `std::ios_base::sync_with_stdio(false)`: This line can speed up I/O operations in some cases.

6. Use more descriptive variable and function names: This is a good practice for readability and maintainability. However, this is not a hard rule, especially for competitive programming where short names are often preferred.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <cmath>
typedef long long ll;
typedef unsigned long long ul;

const ll MOD = 1e9 + 7;
std::vector<ll> adj[1000000];
bool vis[1000000];
ul n, k;
ul sm, ans;

ul modpow(ul x, ul n, ul m) {
  if (n == 0)
    return 1UL % m;
  ul u = modpow(x, n / 2, m);
  u = (u * u) % m;
  if (n % 2 == 1)
    u = (u * x) % m;
  return u;
}

ul mod_(ll x, ll m) {
  if (x > 0)
    return x % m;
  else
    return (m - abs(x) % m) % m;
}

ll dfs(ll n, ll p) {
  if (vis[n])
    return 0;
  vis[n] = true;
  ll x = 0;
  for (auto u : adj[n]) {
    if (u != p)
      x += dfs(u, n);
  }
  return x + 1;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin >> n >> k;
  for(ll i = 1; i <= n - 1; i++) {
    ll u, v, x;
    std::cin >> u >> v >> x;
    if (x == 0) {
      adj[u].push_back(v);
      adj[v].push_back(u);
    }
  }
  for(ll i = 1; i <= n; i++) {
    if (!vis[i]) {
      sm += modpow(dfs(i, -1), k, MOD);
      sm = mod_(sm, MOD);
    }
  }
  ans = modpow(n, k, MOD);
  std::cout << mod_(ans - sm, MOD);
  return 0;
}
```
Please note that the unused functions are removed from the code.