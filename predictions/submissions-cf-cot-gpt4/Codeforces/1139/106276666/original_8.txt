This program is fairly optimized, but there are a few changes we could make to improve the performance.

Optimizations:

1. Avoid using "#include <bits/stdc++.h>": This header file includes too many libraries which increase compilation time. Instead, include only the headers that you need.

2. Make use of const: Whenever we have some variable that we know will not change its value, we should make it const.

3. Avoid using 'endl': 'endl' causes the output buffer to flush. This can cause the program to slow down. Use '\n' instead.

4. The make_factor function can be optimized by iterating only till sqrt(n) for the second check as well because the factors are symmetrical about sqrt(n).

5. Instead of using push_back and pop_back function in make_factor function to add and remove elements from vector, we can use a conditional statement to avoid duplicate elements.

6. Avoid using long long for loop variables when the range is small. In the make_prm function, the range is only up to len which is small enough to use an int. This is a minor optimization but can make a difference for large inputs.

7. For the make_pascalTri function, you are currently clearing the entire pascal_tri array for each value of i. This is unnecessary as you only need to clear the elements that you are going to use. This can be changed to only clear the elements from 0 to i.

8. In the main function, instead of checking if vis[i] is false in the if condition, you can check if it's true and then continue. This way, you avoid an extra layer of indentation.

Here is the optimized version of the code:

```C++
#include <iostream>
#include <stdio.h>
#include <vector>
#include <string.h>
#include <math.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ul;
const int len = 1e6 + 5;
const ll mod = 1e9 + 7;
#define MP make_pair
#define v(i) vector<i>
#define p(aa, bb) pair<aa, bb>
#define pb push_back
#define F first
#define S second
#define ln length()
#define INF (1LL << 61)
#define co cout <<
#define ci cin >>
#define nl '\n'
ul modpow(ul x, ul n, ul m) {
  if (n == 0)
    return 1UL % m;
  ul u = modpow(x, n / 2, m);
  u = (u * u) % m;
  if (n % 2 == 1)
    u = (u * x) % m;
  return u;
}
ul mod_(ll x, ll m) {
  if (x > 0)
    return x % m;
  else
    return (m - abs(x) % m) % m;
}
bool prm[len];
void make_prm() {
  prm[0] = prm[1] = true;
  for (int first = 2; first <= len; first++) {
    if (!prm[first]) {
      for (int second = 2 * first; second <= len; second += first)
        prm[second] = true;
    }
  }
}
v(int) factor;
void make_factor(int n) {
  for (int i = 1; i * i <= n; i++) {
    if (n % i == 0) {
      factor.pb(i);
      if (i != n / i)
        factor.pb(n / i);
    }
  }
}
ul pascal_tri[2][105];
void make_pascalTri(int n) {
  bool f = 0;
  for (int i = 0; i <= n; i++) {
    memset(pascal_tri[f], 0, (i+1)*sizeof(ul));
    pascal_tri[f][0] = 1;
    for (int j = 1; j <= i; j++) {
      pascal_tri[f][j] = pascal_tri[!f][j] + pascal_tri[!f][j - 1];
    }
    f = !f;
  }
}
ll gcd(ll a, ll b) {
  if (b == 0)
    return a;
  return gcd(b, a % b);
}
ll give_floor(ll n, ll a) {
  if (n % a == 0)
    return n / a;
  else {
    return n / a + 1;
  }
}
bool is_perfect(ll n) {
  ll i;
  for (i = 1; i * i < n; i++)
    ;
  return i * i == n;
}
ul n, k;
ul sm, ans;
bool vis[len];
v(ll) adj[len];
ll dfs(ll, ll);
int main() {
  ci n >> k;
  for (int i = 1; i < n; i++) {
    ll u, v, x;
    ci u >> v >> x;
    if (x == 0)
      adj[u].pb(v), adj[v].pb(u);
  }
  for (int i = 1; i <= n; i++) {
    if (vis[i]) continue;
    sm += modpow(dfs(i, -1), k, mod);
    sm = mod_(sm, mod);
  }
  ans = modpow(n, k, mod);
  co mod_(ans - sm, mod);
  return 0;
}
ll dfs(ll n, ll p) {
  if (vis[n])
    return 0;
  vis[n] = true;
  ll x = 0;
  for (auto u : adj[n]) {
    if (u != p)
      x += dfs(u, n);
  }
  return x + 1;
}
```

Please note that these optimizations should improve the performance of the code, but the actual performance gain might differ based on the compiler and the hardware you are using.