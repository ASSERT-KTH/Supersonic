#include <iostream>
#include <vector>
#include <cstring>
#include <cmath>

using ll = long long;
using ul = unsigned long long;
constexpr int len = (int)1e6 + 5;
constexpr ll mod = (ll)(1e9 + 7);

ul modpow(ul x, ul n, ul m) {
  if (n == 0)
    return 1UL % m;
  ul u = modpow(x, n / 2, m);
  u = (u * u) % m;
  if (n % 2 == 1)
    u = (u * x) % m;
  return u;
}

ul mod_(ll x, ll m) {
  if (x > 0)
    return x % m;
  else
    return (m - abs(x) % m) % m;
}

std::vector<bool> vis(len);
std::vector<ll> adj[len];

ll dfs(ll n, ll p) {
  if (vis[n])
    return 0;
  vis[n] = true;
  ll x = 0;
  for (auto u : adj[n]) {
    if (u != p)
      x += dfs(u, n);
  }
  return x + 1;
}

int main() {
  ul n, k;
  ul sm = 0, ans = 0;
  std::cin >> n >> k;
  for(ll i = 1; i <= n - 1; ++i) {
    ll u, v, x;
    std::cin >> u >> v >> x;
    if (x == 0) {
      adj[u].push_back(v);
      adj[v].push_back(u);
    }
  }
  for(ll i = 1; i <= n; ++i) {
    if (!vis[i]) {
      sm += modpow(dfs(i, -1), k, mod);
      sm = mod_(sm, mod);
    }
  }
  ans = modpow(n, k, mod);
  std::cout << mod_(ans - sm, mod);
  return 0;
}