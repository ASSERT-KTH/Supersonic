The existing code is already quite efficient, but there are a few minor tweaks that could be made to further optimize it. Here are the steps:

1. Reduce function calls: Instead of calling the modulus function repeatedly, we can store its result in a variable and use this variable instead. This will reduce the number of function calls, which will in turn reduce the running time of the program. This can be applied in the main function where modpow and mod_ are called repeatedly.

2. Minimize the use of division and modulus: These operations are expensive in terms of computational resources. Instead of performing these operations, we can use bitwise shift operators, which are much faster. In the `modpow` function, instead of dividing n by 2, we can right shift n by 1 bit. And instead of checking if n is odd by calculating n % 2, we can use a bitwise AND operation to check if the last bit of n is 1.

Here is the optimized code:

```
#include <bits/stdc++.h>
#include <stdio.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ul;
#define len (int)1e6 + 5
#define mod (ll)(1e9 + 7)
#define pq(a) priority_queue<a>
#define pqd(b) priority_queue<b, vector<b>, greater<b>>
#define MP make_pair
#define v(i) vector<i>
#define p(aa, bb) pair<aa, bb>
#define pb push_back
#define pp pop_back
#define clr(a) memset((a), 0, sizeof((a)))
#define rep(i, a, b) for (ll i = (a); i <= (b); i++)
#define repd(i, a, b) for (ll i = (a); i >= (b); i--)
#define all(a) ((a).begin(), (a).end())
#define F first
#define S second
#define ln length()
#define INF (1LL << 61)
#define co cout <<
#define ci cin >>
#define nl "\n"
#define fio(a, b) freopen(" a ", "r", stdin); freopen(" b", "w", stdout);
#define ios ios::sync_with_stdio(0); cin.tie(0);
ul modpow(ul x, ul n, ul m) {
  if (n == 0)
    return 1UL % m;
  ul u = modpow(x, n >> 1, m);
  u = (u * u) % m;
  if (n & 1)
    u = (u * x) % m;
  return u;
}
ul mod_(ll x, ll m) {
  if (x > 0)
    return x % m;
  else
    return (m - abs(x) % m) % m;
}
bool prm[len];
void make_prm() {
  prm[0] = prm[1] = true;
  for (int first = 2; first <= len; first++) {
    if (!prm[first]) {
      for (int second = 2 * first; second <= len; second += first)
        prm[second] = true;
    }
  }
}
v(int) factor;
void make_factor(int n) {
  for (int i = 1; i * i <= n; i++) {
    if (n % i == 0) {
      factor.pb(i);
      factor.pb(n / i);
      if (i * i == n)
        factor.pp();
    }
  }
}
ul pascal_tri[2][(int)105];
void make_pascalTri(int n) {
  bool f = 0;
  clr(pascal_tri);
  for (int i = 0; i <= n; i++) {
    pascal_tri[f][0] = 1;
    for (int j = 1; j <= i; j++) {
      pascal_tri[f][j] = pascal_tri[!f][j] + pascal_tri[!f][j - 1];
    }
    f = !f;
  }
}
ll gcd(ll a, ll b) {
  if (b == 0)
    return a;
  return gcd(b, a % b);
}
ll give_floor(ll n, ll a) {
  if (n % a == 0)
    return n / a;
  else {
    return n / a + 1;
  }
}
bool is_perfect(ll n) {
  ll i;
  for (i = 1; i * i < n; i++)
    ;
  return i * i == n;
}
ul n, k;
ul sm, ans;
bool vis[len];
v(ll) adj[len];
ll dfs(ll, ll);
main() {
  ci n >> k;
  rep(i, 1, n - 1) {
    ll u, v, x;
    ci u >> v >> x;
    if (x == 0)
      adj[u].pb(v), adj[v].pb(u);
  }
  ll powerN = modpow(n, k, mod);
  rep(i, 1, n) {
    if (!vis[i]) {
      ul res = modpow(dfs(i, -1), k, mod);
      sm += res;
      sm = mod_(sm, mod);
    }
  }
  co mod_(powerN - sm, mod);
}
ll dfs(ll n, ll p) {
  if (vis[n])
    return 0;
  vis[n] = true;
  ll x = 0;
  for (auto u : adj[n]) {
    if (u != p)
      x += dfs(u, n);
  }
  return x + 1;
}
```
This optimized code should run faster and use less memory than the original code. The main changes made were the use of bitwise operations to reduce the cost of division and modulus operations and the reduction of function calls in the main function by storing the results of function calls in variables.