Here are the optimization steps:

1. Avoid declaring the array `arr` with size `n`. It is only used to temporarily store the input before pushing to the `odd` and `even` vectors. We can directly push the input to the vectors. This will reduce the memory usage.

2. We don't need to use `ll long long int` if we aren't handling big numbers. This will save memory.

3. `#define endl "\n"` is not necessary. We can directly use `"\n"` in our code. This will make the code cleaner.

4. Instead of checking which vector has a greater size and then printing, we can directly print the vectors. This will save us one conditional check, therefore, reducing the running time.

5. Remove unused `frfr` macro which is used for file input. This is not used in the code. Removing unused code will make the code cleaner.

Now, let's implement these optimizations:

```cpp
#include <bits/stdc++.h>
using namespace std;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define loop(i, n) for (int i = 0; i < n; i++)

void solve() {
  int n;
  cin >> n;
  vector<int> odd, even;

  loop(i, n) {
    int num;
    cin >> num;
    if (num % 2) {
      odd.push_back(num);
    } else {
      even.push_back(num);
    }
  }

  for (int i : odd) {
    cout << i << " ";
  }

  for (int i : even) {
    cout << i << " ";
  }

  cout << "\n";
}

int main() {
  IOS;
  int te;
  cin >> te;
  while(te--) {
    solve();
  }
  return 0;
}
```
This code will perform the same function as the previous one but with less memory usage and potentially faster running time.