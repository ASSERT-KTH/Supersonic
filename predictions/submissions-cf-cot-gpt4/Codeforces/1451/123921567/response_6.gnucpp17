#include <algorithm>
#include <array>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <map>
#include <set>
#include <string>
#include <unordered_set>
#include <vector>
using namespace std;
vector<bool> b;
long long m, p;
long long cnt = 0;
bool check(long long x) {
  cout << x << '\n';
  cin >> x;
  if (x == 0)
    return false;
  return (x == -1) ^ b[(cnt++) % p];
}
int main() {
  cin.tie(0);
  ios::ios_base::sync_with_stdio(false);
  long long n;
  cin >> n;
  vector<long long> x(n, 0), ans(n, 0), v(n, 0), idx(n, 0);
  for (long long i = 2; i <= n; i++) {
    cout << "XOR " << 1 << " " << i << "\n";
    cin >> x[i - 1];
    v[i - 1] = x[i - 1];
    idx[i - 1] = i - 1;
  }
  sort(v.begin(), v.end());
  bool found = false;
  long long index1, index2;
  for (long long i = 0; i < n - 1; i++)
    if (v[i] == v[i + 1]) {
      found = true;
      index1 = idx[i];
      index2 = idx[i + 1];
      break;
    }
  if (found) {
    cout << "AND " << index1 + 1 << " " << index2 + 1 << "\n";
    long long a;
    cin >> a;
    ans[0] = a ^ x[index1];
    for (long long i = 1; i < n; i++) {
      ans[i] = ans[0] ^ x[i];
    }
  } else {
    cout << "AND " << 1 << " " << idx[1] + 1 << "\n";
    long long a;
    cin >> a;
    ans[0] = a;
    cout << "AND " << 1 << " " << idx[n - 2] + 1 << "\n";
    cin >> a;
    ans[0] |= a;
    for (long long i = 1; i < n; i++) {
      ans[i] = ans[0] ^ x[i];
    }
  }
  cout << "! ";
  for (long long i = 0; i < n; i++) {
    cout << ans[i] << ' ';
  }
}