The optimization could be done in the following manners:

1. Avoiding negative index: As C/C++ does not support array indexing with negative integers, the assignments `ar[-1].first = 1;`, `ar[-1].second = 1;` and `pref[-1] = 1;` are not valid, and using them can lead to unpredictable behavior or crashes. We should remove these lines.

2. Reducing function calls: In the computation of sum, the same expressions are computed multiple times, especially those involving division. These could be computed once and stored in variables for reuse, reducing the time taken for repeated function calls.

3. Reducing typecasting: The sum is calculated in type long double, so instead of repeatedly typecasting every variable involved in the calculation to long double, we could declare them as long double from the beginning.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define mod (1000000007)
#define pii pair<int, int>
#define pll pair<long long, long long>
#define N ((int)2e5 + 10)
#define forn(i, n) for (int i = 0; i < n; i++)
#define fio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define pb push_back
#define ld long double

int main(void) {
  fio int n, p;
  cin >> n >> p;
  pll ar[n];
  ld pref[n];
  long double sum = 0;
  for (int i = 0; i < n; i++) {
    ll a, b;
    cin >> a >> b;
    ar[i].second = b / p - (a - 1) / p;
    ar[i].first = b - a + 1;
    if (i == 0)
      pref[i] = ar[i].first;
    else
      pref[i] = pref[i - 1] * ar[i].first;
  }
  sum += 2.0 / ar[0].first * ar[0].second;
  sum += (ld)ar[n - 1].second / (ar[n - 1].first * ar[n - 2].first) * (ar[n - 2].first - ar[n - 2].second);
  sum += (ld)ar[n - 1].second / (ar[n - 1].first * ar[0].first) * (ar[0].first - ar[0].second);
  for (int i = 1; i < n - 1; i++) {
    ld frac = (ld)ar[i].second / ar[i].first;
    sum += frac + frac / ar[i - 1].first * (ar[i - 1].first - ar[i - 1].second);
  }
  cout << setprecision(6) << fixed;
  cout << sum * 2000.0 << endl;
  return 0;
}
```
