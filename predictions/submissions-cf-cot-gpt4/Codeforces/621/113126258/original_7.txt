The given code does not follow good programming practices. Here are the optimizations and fixes:

1. Array index out of bound: The code tries to access the index of -1 which can lead to undefined behavior. You should never try to access an array out of its bounds.

2. Dynamic array allocation: In C++, it's not recommended to declare arrays of size `n` where `n` is not a constant. Instead, use `std::vector`.

3. Unnecessary conversion to `long double`: There are many places in the code where conversion to `long double` is unnecessary. This not only makes the code hard to read but also can cause precision loss and performance degradation.

4. BigInt multiplication: In the line `pref[i] = pref[i - 1] * ar[i].first;`, you are multiplying two BigInts which can cause overflow and degrade performance. If `pref` is not used anywhere else, then it can be removed.

5. C++ Standard Library: Avoid including `<bits/stdc++.h>` because it includes every standard library in C++, which increases compile time. Instead, only include the libraries that you need.

Now, let's optimize the code:

```cpp
#include <iostream>
#include <vector>
#include <iomanip>

using namespace std;

typedef long long ll;
typedef pair<ll, ll> pll;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n, p;
  cin >> n >> p;

  vector<pll> ar(n);
  long double sum = 0;

  for (int i = 0; i < n; i++) {
    ll a, b;
    cin >> a >> b;
    ar[i].second = b / p - (a - 1) / p;
    ar[i].first = b - a + 1;

    if (i == 0) {
      sum += 2.0 * ar[i].second / ar[i].first;
    } else {
      sum += ar[i].second / ar[i].first;
      sum += ar[i].second * (ar[i - 1].first - ar[i - 1].second) / (ar[i].first * ar[i - 1].first);
    }
  }

  sum += ar[n - 1].second * (ar[n - 2].first - ar[n - 2].second) / (ar[n - 1].first * ar[n - 2].first);
  sum += ar[n - 1].second * (ar[0].first - ar[0].second) / (ar[n - 1].first * ar[0].first);

  cout << setprecision(6) << fixed;
  cout << sum * 2000 << endl;

  return 0;
}
```

In the optimized code, we have removed the negative array index, replaced dynamic array allocation with `std::vector`, removed unnecessary conversions to `long double`, removed the BigInt multiplication, and only included the necessary libraries.