The given code can be optimized in the following manner:

1. **Remove the usage of #define**: Using `#define` for constants is a C legacy. In C++, it is better to use `constexpr` for constant expressions, `using` for type aliases, and inline functions for macros.

2. **Avoid using `bits/stdc++.h`**: It's not a standard header file and it includes practically the whole standard library, which increases compilation time significantly. Include only those header files which are actually needed.

3. **Avoid using namespace std**: It can lead to name clashes in large programs. It's better to use the `std::` prefix when needed.

4. **Avoid accessing out of bounds elements**: The original code tries to access element -1 of the arrays `ar` and `pref`, which is undefined behavior. This needs to be corrected.

5. **Prefer pre-increment over post-increment**: For primitive types like `int`, it doesn't matter, but for more complex types, pre-increment can be faster because it doesn't need to create a temporary object.

6. **Avoid unnecessary type conversions**: The original code is full of redundant type conversions. If the type of a variable is known and correct, there's no need to cast it to the same type.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <iomanip>
#include <vector>
#include <utility>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  int n, p;
  std::cin >> n >> p;

  std::vector<std::pair<long long, long long>> ar(n);
  std::vector<long long> pref(n);

  long double sum = 0;
  for (int i = 0; i < n; ++i) {
    long long a, b;
    std::cin >> a >> b;
    ar[i].second = b / p - (a - 1) / p;
    ar[i].first = b - a + 1;
    pref[i] = (i == 0) ? ar[i].first : pref[i - 1] * ar[i].first;
  }

  sum += 1.0 / ar[0].first;
  sum *= 2;
  sum *= ar[0].second;

  if (n > 1) {
    sum += ar[n - 1].second / ar[n - 1].first / ar[n - 2].first * (ar[n - 2].first - ar[n - 2].second);
    sum += ar[n - 1].second / ar[n - 1].first / ar[0].first * (ar[0].first - ar[0].second);

    for (int i = 1; i < n - 1; ++i) {
      sum += ar[i].second / ar[i].first;
      sum += ar[i].second / ar[i].first / ar[i - 1].first * (ar[i - 1].first - ar[i - 1].second);
    }
  }

  std::cout << std::setprecision(6) << std::fixed;
  std::cout << sum * 2000.0 << std::endl;

  return 0;
}
```
It's important to note that the logic and functionality of the original program is preserved. Also, it's assumed that the inputs to the program are valid and within the expected range. If this is not the case, additional error checking and handling will be required.