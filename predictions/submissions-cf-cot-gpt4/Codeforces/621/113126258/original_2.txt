Optimization Steps:

1. The code uses variable-length arrays, which is not standard in C++. Instead, we will use vector to optimize memory usage. 

2. The code also assigns values to elements at index -1, which is an undefined behavior in C++. We should remove these lines.

3. We can calculate the sum directly within the loop, rather than assigning it to an array and then calculating the sum. This will reduce memory usage.

4. We can also combine all the sum calculations into a single loop to reduce repeated calculations and increase efficiency.

Optimized Program:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define mod (1000000007)
#define pii pair<int, int>
#define pll pair<long long, long long>
#define N ((int)2e5 + 10)
#define forn(i, n) for (int i = 0; i < n; i++)
#define fio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define pb push_back
#define ld long double

int main(void) {
  fio 
  int n, p;
  cin >> n >> p;
  vector<pll> ar(n);
  ld sum = 0;
  for (int i = 0; i < n; i++) {
    ll a, b;
    cin >> a >> b;
    ar[i].second = b / p - (a - 1) / p;
    ar[i].first = b - a + 1;
    if (i == 0) {
      sum += (ld)1 / ar[i].first;
      sum *= 2;
      sum *= ar[i].second;
    } else {
      sum += (ld)ar[i].second / (ld)ar[i].first;
      sum += (ld)ar[i].second / (ld)ar[i].first / (ld)ar[i - 1].first * (ld)(ar[i - 1].first - ar[i - 1].second);
      if (i == n - 1) {
        sum += (ld)ar[n - 1].second / (ld)ar[n - 1].first / (ld)ar[n - 2].first * (ld)(ar[n - 2].first - ar[n - 2].second);
        sum += (ld)ar[n - 1].second / (ld)ar[n - 1].first / (ld)ar[0].first * (ld)(ar[0].first - ar[0].second);
      }
    }
  }
  cout << setprecision(6) << fixed;
  cout << (long double)sum * (long double)2000 << endl;
  return 0;
}
```

Note: Please ensure to handle out of range exceptions as the code does not check if an index is out of range.