#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  int t;
  std::cin >> t;
  while (t--) {
    int n;
    std::cin >> n;
    std::vector<int> ar(n);
    for (int i = 0; i < n; ++i) {
      std::cin >> ar[i];
    }
    std::vector<std::vector<long long>> dp(3, std::vector<long long>(n, 0));
    for (int i = 0; i < n; ++i) {
      dp[0][i + 1] = dp[0][i] + (i & 1 ? 0 : ar[i]);
      if (i + 2 <= n)
        dp[1][i + 2] = std::max(dp[0][i], dp[1][i]) + ar[(i & 1) ? i + 1 : i];
      dp[2][i + 1] = std::max({dp[0][i], dp[1][i], dp[2][i], dp[2][i + 1]}) +
                     (i & 1 ? 0 : ar[i]);
    }
    auto max_val = std::max_element(dp.begin(), dp.end());
    std::cout << *max_val << std::endl;
  }
}