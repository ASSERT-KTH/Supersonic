Optimizations that can be done:

1. Reducing the size of the 'mas' array: The array 'mas' is declared with a size of 5, but we only use 4 elements. We can reduce the size of the array to 4 to save memory.

2. Avoiding unnecessary decrement operations: In the loop where we check for equal elements, we decrement 'ans' for each unequal pair. Instead, we can calculate the difference between 3 and the number of equal elements to avoid unnecessary decrement operations.

3. Removing the use of bits/stdc++.h header: This header includes a lot of unnecessary headers and slows down the compile time, which might be a concern for large projects. We will replace it with necessary headers like iostream and algorithm.

Here's the optimized code:

```cpp
#include <iostream>
#include <algorithm>
using namespace std;

int main() {
  int mas[4], ans = 3, equalElements = 1;
  for (int i = 0; i < 4; ++i) {
    cin >> mas[i];
  }
  sort(mas, mas + 4);
  for (int i = 0; i < 3; ++i) {
    if (mas[i] == mas[i + 1])
      ++equalElements;
  }
  ans -= equalElements;
  cout << ans;
}
```

Please note that the logic of the program is maintained. The 'ans' variable still counts the number of distinct elements in the array, which seems to be the purpose of the original code.