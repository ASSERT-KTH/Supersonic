The given C/C++ program is already fairly optimized. However, there are few small modifications which can be done.

1. Avoid using `#include <bits/stdc++.h>`: This header file includes quite a lot of files, and adds unnecessary overhead. It's better to include only those headers that you are actually using. In this case, you are only using `iostream` for input/output and `algorithm` for the `sort` function.

2. Don't declare variables until they are needed: This will reduce the memory footprint and make the code easier to understand. Here, you don't need to declare `ans` until just before the second loop.

3. Use `std::ios::sync_with_stdio(false)`: This can speed up the I/O operations. It is a way to untie C++'s cin/cout and C's stdin/stdout. It's worth mentioning that you should avoid mixing cin/cout and scanf/printf in the same program if you do this.

Here is the optimized version of the code:

```C++
#include <iostream>
#include <algorithm>

int main() {
    std::ios::sync_with_stdio(false);
    int mas[4];
    for (int i = 0; i < 4; ++i) {
        std::cin >> mas[i];
    }
    std::sort(mas, mas + 4);
    int ans = 3;
    for (int i = 0; i < 3; ++i) {
        if (mas[i] != mas[i + 1])
            --ans;
    }
    std::cout << ans;
}
```

Remember that the effectiveness of these optimizations can vary depending on the specific program and compiler.