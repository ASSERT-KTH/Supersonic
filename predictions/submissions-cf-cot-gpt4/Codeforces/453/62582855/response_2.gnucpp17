#include <bits/stdc++.h>
using namespace std;
...
...
// Here is the optimized code:
...
...
int main() {
  setIO();
  const int MAXV = 61;
  int N;
  re(N);
  vector<int> a(N);
  re(a);
  vector<int> pri;
  FOR(v, 2, MAXV) {
    bool ok = true;
    for (int p : pri) if (v % p == 0) ok = false;
    if (ok) pri.push_back(v);
  }
  vector<int> mask(MAXV);
  int pri_size = pri.size(); // Compute size of pri outside the loop
  FOR(v, 1, MAXV) { 
    for (int i = 0; i < pri_size; i++) if (v % pri[i] == 0) mask[v] |= 1 << i; 
  }
  vector<vector<pair<int, int>>> dp(N + 1, vector<pair<int, int>>(1 << pri_size, {INT_MAX, -1}));
  dp[0][0].first = -1;
  for (int i = 0; i < N; i++) {
    for (int m = 0; m < (1 << pri_size); m++) {
      if (dp[i][m].first < INT_MAX) {
        for (int v = 1; v < MAXV; v++) {
          if (!(mask[v] & m)) {
            dp[i + 1][m ^ mask[v]] = min(dp[i + 1][m ^ mask[v]], make_pair(dp[i][m].first + abs(v - a[i]), v));
          }
        }
      }
    }
  }
  vector<int> b(N);
  int m = min_element(dp.back().begin(), dp.back().end()) - dp.back().begin();
  for (int i = N - 1; i >= 0; i--) {
    b[i] = dp[i + 1][m].second;
    m ^= mask[b[i]];
  }
  for (int x : b) cout << x << ' ';
  cout << '\n';
  return 0;
}