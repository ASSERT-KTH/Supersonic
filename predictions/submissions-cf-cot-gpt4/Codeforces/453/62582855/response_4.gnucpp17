#include <bits/stdc++.h>
using namespace std;

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout << fixed << setprecision(15);

  const int MAXV = 61;
  int N;
  cin >> N;
  
  vector<int> a(N);
  for(int i=0; i<N; ++i) cin >> a[i];

  vector<int> pri;
  pri.reserve(MAXV);
  for(int v=2; v<MAXV; ++v) {
    bool ok = true;
    for(auto p: pri) if(v%p == 0) ok = false;
    if(ok) pri.push_back(v);
  }
  
  vector<int> mask(MAXV);
  for(int v=1; v<MAXV; ++v) 
    for(int i=0; i<pri.size(); ++i) 
      if(v%pri[i] == 0) mask[v] |= 1<<i;
  
  vector<vector<pair<int,int>>> dp(N+1, vector<pair<int,int>>(1<<pri.size(), {INT_MAX, -1}));
  dp[0][0].f = -1;

  for(int i=0; i<N; ++i) 
    for(int m=0; m<(1<<pri.size()); ++m) 
      if(dp[i][m].f < INT_MAX) 
        for(int v=1; v<MAXV; ++v) 
          if(!(mask[v] & m)) 
            dp[i+1][m^mask[v]] = min(dp[i+1][m^mask[v]], make_pair(dp[i][m].f + abs(v - a[i]), v));
  
  vector<int> b(N);
  b.reserve(N);
  int m = 0, min_val = INT_MAX;
  for(int i=0; i<dp.back().size(); ++i)
    if(dp.back()[i].f < min_val) min_val = dp.back()[i].f, m = i;
  for(int i=N-1; i>=0; --i) {
    b[i] = dp[i+1][m].s;
    m ^= mask[b[i]];
  }
  for(auto val: b) cout << val << " ";
  cout << "\n";

  return 0;
}