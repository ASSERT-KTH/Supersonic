In this code, there are few places where we can do some optimization. Here are the steps:

1. Combine `typedef` statements: The `typedef` statements can be combined into a single line to make the code more elegant and easier to read.

2. Remove unnecessary `#pragma` statement: The `#pragma GCC optimize("Ofast")` is a compiler-specific command to optimize the code. However, modern compilers are smart enough to optimize the code automatically. It's better to remove this line to make the code more portable.

3. Avoid global variables: Global variables use more memory and can lead to issues with data sharing in multithreaded applications. Here, `n, a, ps, p, pref` are all global variables which are only used in the `solve` function. They should be declared as local variables in the `solve` function.

4. Avoid unnecessary memory allocation: The `new` operator is used to allocate memory dynamically. The `new` operator is expensive in terms of time and memory. In this code, `new` is used to create `node` objects. It's better to use smart pointers (`unique_ptr` or `shared_ptr`) to manage the memory automatically.

5. Use `auto` to deduce type: In modern C++, `auto` is used to let the compiler deduce the type of a variable automatically. This can make the code easier to read and maintain.

6. Use `std::min` instead of custom `f` function: The `f` function is used to find the minimum of two numbers. However, C++ standard library provides `std::min` function to do this. It's better to use `std::min` instead of custom `f` function.

Now let's generate the optimized code:

```cpp
#include <algorithm>
#include <cmath>
#include <iostream>
#include <set>
#include <string>
#include <vector>
#include <memory>
using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef unique_ptr<node> NodePtr;

struct node {
  ll l, mid, r, val, add;
  NodePtr left, right;
  node(ll l, ll r) : l(l), r(r) {
    add = 0;
    mid = (l + r) / 2;
    val = 0;
  }
};

void solve() {
  ll n;
  const ll maxn = ll(2e5) + 11;
  const ll inf = ll(1e15) + 12;
  const ll mod = ll(1e9) + 7;
  ll a[maxn], ps[maxn], p[maxn], pref[maxn];
  cin >> n;
  for (ll i = 0; i < n; i++) {
    ll cur;
    cin >> cur;
    p[i] = cur;
    ps[cur - 1] = i;
  }
  for (ll i = 0; i < n; i++) {
    ll cur;
    cin >> cur;
    a[i] = cur;
    if (i == 0) {
      pref[i] = cur;
    } else
      pref[i] = pref[i - 1] + cur;
  }
  NodePtr root = make_unique<node>(0, n);
  build(root.get());
  ll ans = min(a[0], a[n - 1]);
  ll mus = 0;
  for (ll i = 0; i < n; i++) {
    add_val(root.get(), ps[i], n, -2 * a[ps[i]]);
    mus += a[ps[i]];
    ll cur = get_min(root.get(), 0, n) + mus;
    ans = min(ans, cur);
  }
  cout << ans << endl;
}

int main() {
  ios::sync_with_stdio();
  solve();
  return 0;
}
```