#include <algorithm>
#include <cmath>
#include <iostream>
#include <set>
#include <string>
#include <vector>
#pragma GCC optimize("Ofast")
typedef long long ll;
typedef long double ld;
const ll maxn = ll(2e5) + 11;
const ll inf = ll(1e15) + 12;
const ll mod = ll(1e9) + 7;
ll n;
ll a[maxn], ps[maxn], p[maxn], pref[maxn];

int main() {
  ios::sync_with_stdio();
  
  struct node {
    ll l, mid, r, val, add;
    node *left, *right;
    node(ll l, ll r) : l(l), r(r) {
      add = 0;
      mid = (l + r) / 2;
      val = 0;
      left = right = nullptr;
    }
  };

  cin >> n;
  for (ll i = 0; i < n; i++) {
    ll cur;
    cin >> cur;
    p[i] = cur;
    ps[cur - 1] = i;
  }
  for (ll i = 0; i < n; i++) {
    ll cur;
    cin >> cur;
    a[i] = cur;
    if (i == 0) {
      pref[i] = cur;
    } else
      pref[i] = pref[i - 1] + cur;
  }
  node *root = new node(0, n);
  build(root);
  ll ans = std::min(a[0], a[n - 1]);
  ll mus = 0;
  for (ll i = 0; i < n; i++) {
    add_val(root, ps[i], n, -2 * a[ps[i]]);
    mus += a[ps[i]];
    ll cur = get_min(root, 0, n) + mus;
    ans = std::min(ans, cur);
  }
  cout << ans << endl;

  return 0;
}