#include <algorithm>
#include <cmath>
#include <iostream>
#include <set>
#include <string>
#include <vector>
#include <memory>
using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;
typedef unique_ptr<node> NodePtr;

struct node {
  ll l, mid, r, val, add;
  NodePtr left, right;
  node(ll l, ll r) : l(l), r(r) {
    add = 0;
    mid = (l + r) / 2;
    val = 0;
  }
};

void solve() {
  ll n;
  const ll maxn = ll(2e5) + 11;
  const ll inf = ll(1e15) + 12;
  const ll mod = ll(1e9) + 7;
  ll a[maxn], ps[maxn], p[maxn], pref[maxn];
  cin >> n;
  for (ll i = 0; i < n; i++) {
    ll cur;
    cin >> cur;
    p[i] = cur;
    ps[cur - 1] = i;
  }
  for (ll i = 0; i < n; i++) {
    ll cur;
    cin >> cur;
    a[i] = cur;
    if (i == 0) {
      pref[i] = cur;
    } else
      pref[i] = pref[i - 1] + cur;
  }
  NodePtr root = make_unique<node>(0, n);
  build(root.get());
  ll ans = min(a[0], a[n - 1]);
  ll mus = 0;
  for (ll i = 0; i < n; i++) {
    add_val(root.get(), ps[i], n, -2 * a[ps[i]]);
    mus += a[ps[i]];
    ll cur = get_min(root.get(), 0, n) + mus;
    ans = min(ans, cur);
  }
  cout << ans << endl;
}

int main() {
  ios::sync_with_stdio();
  solve();
  return 0;
}