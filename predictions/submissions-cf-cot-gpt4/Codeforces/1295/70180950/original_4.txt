Optimization Steps:

1. Avoiding the use of dynamic memory allocation (new keyword): In the given program, dynamic memory allocation is being used to create objects of the node class. Dynamic memory allocation can lead to memory leaks and it is slower than stack allocation. It's better to use stack allocation where possible.

2. Avoid repeated calculations: In the given program, min(root->mid, qr) and max(root->mid, ql) operations are performed multiple times. We can calculate these values once and store them in local variables to be used wherever required.

3. Convert Global Variables to Local Variables: There are a lot of global variables in the code, which can be converted to local variables, thus reducing the memory footprint of the program.

4. In the function `void solve()`, `cur` is defined twice. We can define `cur` once and reuse it.

Optimized code:

```C++
#include <algorithm>
#include <cmath>
#include <iostream>
#include <set>
#include <string>
#include <vector>
#pragma GCC optimize("Ofast")
using namespace std;
typedef long long ll;
typedef long double ld;
#define pll pair<ll, ll>
#define pb push_back
const ll maxn = ll(2e5) + 11;
const ll inf = ll(1e15) + 12;
const ll mod = ll(1e9) + 7;

struct node {
  ll l, mid, r, val, add;
  node *left, *right;
  node(ll l, ll r) : l(l), r(r) {
    add = 0;
    mid = (l + r) / 2;
    val = 0;
    left = right = nullptr;
  }
};

ll f(ll x, ll y) { return min(x, y); }

void build(node &root, ll pref[], ll n) {
  if (root.r - root.l == 1) {
    root.val = pref[root.l];
    if (root.l == n - 1) {
      root.val = inf;
    }
  } else {
    node left_node(root.l, root.mid);
    node right_node(root.mid, root.r);
    build(left_node, pref, n);
    build(right_node, pref, n);
    root.val = f(left_node.val, right_node.val);
  }
}

void push(node &root) {
  if (root.left != nullptr) {
    root.left->add += root.add;
    root.right->add += root.add;
  }
  root.val += root.add;
  root.add = 0;
}

void add_val(node &root, ll ql, ll qr, ll val) {
  push(root);
  if (root.r <= ql || root.l >= qr) {
    return;
  }
  ll mid_min = min(root.mid, qr);
  ll mid_max = max(root.mid, ql);
  if (ql == root.l && root.r == qr) {
    root.add += val;
    push(root);
    return;
  }
  add_val(*root.left, ql, mid_min, val);
  add_val(*root.right, mid_max, qr, val);
  root.val = f(root.left->val, root.right->val);
}

ll get_min(node &root, ll ql, ll qr) {
  push(root);
  if (root.r <= ql || root.l >= qr) {
    return inf;
  }
  ll mid_min = min(root.mid, qr);
  ll mid_max = max(root.mid, ql);
  if (ql == root.l && root.r == qr) {
    return root.val;
  }
  return f(get_min(*root.left, ql, mid_min), get_min(*root.right, mid_max, qr));
}

void solve() {
  ll n;
  cin >> n;
  ll a[maxn], ps[maxn], p[maxn], pref[maxn];
  ll cur;
  for (ll i = 0; i < n; i++) {
    cin >> cur;
    p[i] = cur;
    ps[cur - 1] = i;
  }
  for (ll i = 0; i < n; i++) {
    cin >> cur;
    a[i] = cur;
    if (i == 0) {
      pref[i] = cur;
    } else
      pref[i] = pref[i - 1] + cur;
  }
  node root(0, n);
  build(root, pref, n);
  ll ans = min(a[0], a[n - 1]);
  ll mus = 0;
  for (ll i = 0; i < n; i++) {
    add_val(root, ps[i], n, -2 * a[ps[i]]);
    mus += a[ps[i]];
    ll cur = get_min(root, 0, n) + mus;
    ans = min(ans, cur);
  }
  cout << ans << endl;
}

int main() {
  ios::sync_with_stdio();
  solve();
  return 0;
}
```
Please note that this optimized code will only work if the maximum size of the tree is small enough to fit in the stack memory. If the tree size is large, using dynamic memory allocation is necessary.