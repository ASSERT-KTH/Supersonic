Here are the optimizations steps:

- Combine the two for loops into one. This will reduce the number of iterations over the array `a[]` from 2n to n.
- Replace `int` with `int64_t` for better portability. `long long` isn't always guaranteed to be 64-bit on every platform, but `int64_t` is always 64-bit.
- It's better to use `std::vector` instead of simple array as it is safer and more flexible. Also, size of `was[]` array can be reduced to `n` instead of `100001` which will save memory.
- `std::ios_base::sync_with_stdio(0);` is used to decouple C and C++ standard streams. But we are not using C standard streams in this program. So, we can remove this line.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
    int64_t n, m;
    cin >> n;
    vector<int64_t> a(n), was(n);
    for (int64_t i = 0; i < n; ++i) {
        cin >> a[i];
        was[a[i]] = i;
    }
    cin >> m;
    int64_t first = 0, second = 0;
    while (m--) {
        int64_t x;
        cin >> x;
        first += was[x] + 1;
        second += n - was[x];
    }
    cout << first << ' ' << second;
    return 0;
}
```
Please note that this optimized code assumes that the values of a[i] are less than or equal to n. If this is not the case, you may need to use a std::unordered_map instead of the was[] vector to store the positions of the elements, which will slightly increase memory usage but will still be faster than the original code.