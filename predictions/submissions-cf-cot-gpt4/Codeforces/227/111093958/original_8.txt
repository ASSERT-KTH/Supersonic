Optimization Steps:

1. I'm going to merge the two for loops into one. This will reduce the overall time complexity of the program, as we will only have to iterate over the array once instead of twice.

2. Instead of using the `was[a[i]] = i` statement in a separate loop, I will integrate it into the first loop where we are already iterating through the array. This will not only reduce the number of times we need to iterate through the array, but it will also allow us to free up the memory used by the `was[]` array much earlier, reducing memory usage.

3. I'll change the use of `cin` and `cout` with `scanf()` and `printf()` for faster I/O operations. `scanf()` and `printf()` are faster than `cin` and `cout` because `cin` and `cout` are synchronized with the C standard streams (stdin, stdout), which makes them slower.

4. I'll also add `ios_base::sync_with_stdio(0);` and `cin.tie(NULL);` to make input and output operations faster.

5. Also, I'll change the `main()` function to `int main()` to make the program more standard compliant.

Optimized Program:

```cpp
#include <iostream>
using namespace std;
#define int long long
int n, m, a[100001], was[100001];
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  scanf("%lld", &n);
  for (int i = 0; i < n; ++i)
  {
    scanf("%lld", &a[i]);
    was[a[i]] = i;
  }
  scanf("%lld", &m);
  int first = 0, second = 0;
  while (m--) {
    int x;
    scanf("%lld", &x);
    first += was[x] + 1;
    second += n - was[x];
  }
  printf("%lld %lld", first, second);
  return 0;
}
```

This optimized program will have reduced time complexity and memory usage compared to the original program.