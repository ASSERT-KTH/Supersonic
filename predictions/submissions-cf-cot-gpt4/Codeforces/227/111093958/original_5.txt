Here are some steps to optimize the program:

1. Use `std::ios::sync_with_stdio(false);` and `std::cin.tie(nullptr);` to improve the speed of `cin` and `cout`.
2. Combine the two for-loops into one, reducing the run time of the program. Instead of reading the input and updating the `was` array in separate loops, we can do both in a single loop.
3. Use `std::vector` instead of arrays, it's safer and more flexible because we don't need to know the size of the array at compile time. But since we are not altering the size of the array in this case, we will stick to the array to preserve memory.
4. Instead of using a `#define` directive to create an alias for `long long`, use `typedef` or `using`. This is more C++ styled and safer, since the preprocessor `#define` directive can lead to unexpected results due to it being a simple text substitution.
5. Change the return type of `main` function to `int` to avoid a compiler warning.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;
typedef long long ll;
ll n, m, a[100001], was[100001];

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);

  cin >> n;
  for (ll i = 0; i < n; ++i) {
    cin >> a[i];
    was[a[i]] = i;
  }

  cin >> m;
  ll first = 0, second = 0;
  while (m--) {
    ll x;
    cin >> x;
    first += was[x] + 1;
    second += n - was[x];
  }
  cout << first << ' ' << second;

  return 0;
}
```