In the given program, there are few areas where we can optimize the running time and memory usage:

1. We can combine the two for-loops into a single for-loop. In the first for-loop, we read input into array 'a' and in the second for-loop, we fill the 'was' array using the values from 'a'. This can be done in a single for-loop where we first read the input into 'a' and then immediately fill 'was'. This reduces the running time significantly.

2. For cin and cout operations, using '\n' instead of 'std::endl' can speed up the I/O operations because 'std::endl' always causes a flush operation which is slower.

3. Instead of the 'was' array, we can use a map data structure. Although this will not decrease the memory usage, it will prevent an array out of bounds error if the input numbers are greater than 100001.

Here is the optimized program:
```cpp
#include <iostream>
#include <map>
using namespace std;
#define int long long
int n, m, a[100001];
map<int, int> was;
main() {
  ios_base::sync_with_stdio(0);
  cin.tie(NULL); // This speeds up the cin operations
  cin >> n;
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
    was[a[i]] = i;
  }
  cin >> m;
  int first = 0, second = 0;
  while (m--) {
    int x;
    cin >> x;
    first += was[x] + 1;
    second += n - was[x];
  }
  cout << first << ' ' << second << '\n';
}
```
The optimized program reduces the running time by reducing the number of iterations over the input array and speeds up the cin and cout operations. It also handles the potential array out of bounds error by using a map instead of an array for 'was'.