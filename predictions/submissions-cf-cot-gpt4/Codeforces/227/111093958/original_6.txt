The current program has two separate loops for reading the array and updating the 'was' array. These two operations can be combined into a single loop to reduce the running time. This will have the effect of reducing the number of times the program has to iterate over the data, which should result in a slight performance improvement.

Also, it's better to use std::vector instead of C-style array as it's safer and provides additional functionality. In this case, there is no need for this change as the array size is predefined and there is no operations which can lead to array overflow.

Here's the optimized version of code:

```cpp
#include <iostream>
using namespace std;
#define int long long
int n, m, a[100001], was[100001];
main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0); // Add this line to prevent flushing the cout buffer before each cin operation, which can improve I/O performance.
  cin >> n;
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
    was[a[i]] = i; // Combine two operations into a single loop
  }
  cin >> m;
  int first = 0, second = 0;
  while (m--) {
    int x;
    cin >> x;
    first += was[x] + 1;
    second += n - was[x];
  }
  cout << first << ' ' << second;
}
```

In this optimized version, the two separate loops for reading the array and updating the 'was' array are combined into one. This reduces the number of iterations over the data from 2n to n, which should improve the running time of the program. Additionally, the line "cin.tie(0);" is added to prevent the cout buffer from being flushed before each cin operation, which can improve I/O performance.
