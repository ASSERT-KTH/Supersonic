Here are the steps to optimize the given program:

1. Change the `was` array to a `std::unordered_map`, which will save memory as we only need to store the elements that have been used, not all the 100001 elements. This will also likely improve cache performance as fewer memory locations need to be accessed. 

2. Combine the two for-loops into one. This will reduce the number of iterations and therefore improve the running time.

3. Remove the use of `#define int long long`. This can cause confusion and potentially lead to errors. It's better to be explicit about types. 

4. We can remove the `ios_base::sync_with_stdio(0);` line. This line is used to synchronize C++'s stdio with C's stdio, but since we are not using any C-style input or output operations in this code, it's not needed.

5. Change `main()` to `int main()`. This is a better practice as the main function should return an int.

Here's the optimized program:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;

int main() {
  int n, m;
  cin >> n;
  int a[n];
  unordered_map<int, int> was;
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
    was[a[i]] = i;
  }
  cin >> m;
  long long first = 0, second = 0;
  while (m--) {
    int x;
    cin >> x;
    first += was[x] + 1;
    second += n - was[x];
  }
  cout << first << ' ' << second;
  return 0;
}
```
Please note that the optimization may not significantly improve the performance for small inputs but it will be noticeable for larger inputs. Also, performance can vary depending on the specific system and compiler optimizations.