This program performs two main tasks: (1) it reads a list of numbers, and (2) it queries the positions of certain numbers. The numbers in the list are unique and are between 1 and 100000 inclusive.

Optimizations:

1. Combine the two for loops. There's no need to have two separate loops to read the array and then mark their positions. This can be done in a single loop, which reduces the run time.

2. Remove the use of long long int if it's not needed. If 'n' and 'm' are guaranteed to not exceed the range of int, then using int instead of long long int can save memory. However, if the values can be large, then using long long int is necessary. This is not a strict optimization, but a consideration based on the problem constraints. In this case, given the problem statement, it seems more appropriate to use long long int.

3. When querying the position of a number, the program is calculating 'n - was[x]' for the second sum. If we keep a cumulative sum while reading the numbers, we can get the second sum directly without needing to subtract from 'n' every time, which can save computation time.

Here is the optimized version of the program:

```cpp
#include <iostream>
using namespace std;
#define int long long
int n, m, a[100001], was[100001], sum[100001];
main() {
  ios_base::sync_with_stdio(0);
  cin >> n;
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
    was[a[i]] = i + 1;
    sum[i + 1] = sum[i] + i + 1;
  }
  cin >> m;
  int first = 0, second = 0;
  while (m--) {
    int x;
    cin >> x;
    first += was[x];
    second += sum[n] - sum[was[x] - 1];
  }
  cout << first << ' ' << second;
}
```
In this optimized version, the program reads and marks the positions of the numbers in the same loop, and also keeps a cumulative sum of positions. When querying the position of a number, it simply adds the position to the first sum, and adds the remaining sum from the cumulative sums to the second sum.