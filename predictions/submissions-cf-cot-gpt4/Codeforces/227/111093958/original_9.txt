The main optimization in this code can be achieved by combining the two for loops into one. The first loop is used to read the array elements and the second one is used to update the "was" array. We can combine these operations into a single loop, reducing the number of iterations from 2n to n. This will reduce the running time of the program.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
#define int long long
int n, m, a[100001], was[100001];
main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0); // this line is added to disconnect cin from cout, making cin operations faster
  cin >> n;
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
    was[a[i]] = i; // moved this line from the second loop
  }
  cin >> m;
  int first = 0, second = 0;
  while (m--) {
    int x;
    cin >> x;
    first += was[x] + 1;
    second += n - was[x];
  }
  cout << first << ' ' << second;
}
```

Note that I added `cin.tie(0);` as well. This line disconnects cin from cout, which makes cin operations faster. This is a common optimization for problems where cin is used extensively. It can potentially reduce the running time of the program.