The given program is pretty efficient, but there are a few small changes we can make to improve its performance.

1. Merge the two separate for loops into a single one. This will reduce the number of iterations from 2n to n and improve the cache locality.
2. Move the variable 'x' outside the while loop as it doesn't need to be redeclared each time through the loop.

Below is the optimized program incorporating these changes.

```cpp
#include <iostream>
using namespace std;
#define int long long
int n, m, a[100001], was[100001];
main() {
  ios_base::sync_with_stdio(0);
  cin >> n;
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
    was[a[i]] = i;
  }
  cin >> m;
  int first = 0, second = 0, x;
  while (m--) {
    cin >> x;
    first += was[x] + 1;
    second += n - was[x];
  }
  cout << first << ' ' << second;
}
```

Please note that the code assumes that all the input values are unique and within the range of the arrays. If that's not the case, you'll need additional checks to prevent out-of-bounds access or incorrect results.