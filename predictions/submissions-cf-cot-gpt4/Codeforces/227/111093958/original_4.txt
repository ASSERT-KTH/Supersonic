The provided C/C++ program is already well-optimized in terms of running time and memory usage. However, there are still some small improvements we can make to enhance readability and maintainability, although these won't affect the runtime or memory usage significantly.

Optimization Steps:

1. Combine two for-loops into one: Currently, the program uses two separate for-loops to read the input array and to initialize the 'was' array. This can be done in a single for-loop which can save time when the array size 'n' is significantly large.

2. Use std::vector in place of arrays: Arrays in C/C++ don't provide much flexibility and safety compared to std::vector. For instance, they don't check out of range errors. So, it's always a good practice to use std::vector when dealing with dynamic data.

3. Use fast input/output: This can be done by adding two lines at the beginning of the main() function. This will speed up the program for large inputs.

4. Avoid using namespace std: It's bad practice to use namespace std in C++ programs. It can lead to name conflicts if the program becomes larger or if it's combined with other code.

Here is the optimized code implementing these changes:

```cpp
#include <iostream>
#include <vector>

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);

  long long n, m;
  std::cin >> n;

  std::vector<long long> a(n), was(n+1);
  
  for (long long i = 0; i < n; ++i) {
    std::cin >> a[i];
    was[a[i]] = i;
  }

  std::cin >> m;
  long long first = 0, second = 0;
  
  while (m--) {
    long long x;
    std::cin >> x;
    first += was[x] + 1;
    second += n - was[x];
  }
  
  std::cout << first << ' ' << second;
  return 0;
}
```

Please note, the original program was already optimized and the changes will not significantly improve the performance, but they will enhance the readability and maintainability of the code.