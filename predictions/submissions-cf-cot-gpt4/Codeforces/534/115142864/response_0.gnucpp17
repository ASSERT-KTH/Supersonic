#include <iostream>
#include <algorithm>
#include <cstring>

const int N = 1234;
long long dp[N][N];
int v1, v2, t, d;

int main() {
  std::scanf("%d %d %d %d", &v1, &v2, &t, &d);
  std::memset(dp, -1, sizeof dp);
  
  for (int tt = t; tt >= 1; --tt) {
    for (int speed = 0; speed <= v2; ++speed) {
      if (tt == t) {
        dp[tt][speed] = speed == v2 ? v2 : -1e10;
      } else {
        long long x = -1e9;
        for (int i = 0; i <= d; ++i) {
          if (speed + i < N) {
            x = std::max(x, dp[tt + 1][speed + i]);
          }
          if (speed - i >= 0) {
            x = std::max(x, dp[tt + 1][speed - i]);
          }
        }
        dp[tt][speed] = speed + x;
      }
    }
  }
  
  std::printf("%lld\n", dp[1][v1]);
  return 0;
}