...
template <class T> inline int minimize(T &a, const T &val) {
  return val < a ? a = val, 1 : 0;
}
template <class T> inline int maximize(T &a, const T &val) {
  return a < val ? a = val, 1 : 0;
}
#define IOS ios_base::sync_with_stdio(false); cin.tie(nullptr);

...

ll Ares_KN() {
  ...
  for (const auto &v : g[1])
    if (deg[v] == 1) {
      ...
    } else if (dsu.find(1) == dsu.find(v))
      continue;
    else {
      ...
      chose[v] = true, ++dfs(v);
      if (++cnt == k)
        break;
    }
  ...
  for (const auto &E : edge) {
    ...
  }
  ...
  if (cnt == k) {
    cout << "YES\n";
    for (const auto &x : MST)
      printf("%d %d\n", x.fi, x.se);
    return 0;
  }
  ...
  for (const auto &v : g[1])
    if (!chose[v]) {
      ...
      if (++cnt == k)
        break;
    }
  cout << "YES\n";
  for (const auto &x : MST)
    printf("%d %d\n", x.fi, x.se);
  return 0;
}
int main() {
  IOS Ares_KN();
  cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
  return 0;
}