#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("avx")
#include <algorithm>
#include <bitset>
#include <cassert>
#include <chrono>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#define FOR(i, a, b) for (int i = (a), _b = (b); i <= _b; ++i)
#define FORD(i, a, b) for (int i = (a), _b = (b); i >= _b; --i)
#define REP(i, a) for (int i = 0, _a = (a); i < _a; ++i)
#define REPD(i, a) for (int i = (a)-1; i >= 0; --i)
#define fi first
#define se second
#define PB push_back
#define EB emplace_back
#define MP make_pair
#define sec(x) 1.0 / cos((x))
#define sqr(x) ((x) * (x))
#define SZ(x) ((int)(x).size())
#define __builtin_popcount __builtin_popcountll
mt19937 RNG(chrono::high_resolution_clock::now().time_since_epoch().count());
typedef long long ll;
typedef unsigned long long ull;
typedef std::pair<int, int> pii;
typedef std::pair<ll, ll> pll;
const int MAXN = 2e5 + 100;
const int MOD = 1e9 + 7;
const ll MAXV = 1e9;
const ll INF = 1e16;
inline string toStr(ll x) {
  string tmp = "";
  do
    tmp = char(x % 10 + '0') + tmp;
  while (x /= 10);
  return tmp;
}
inline ll toInt(string s) {
  ll res = 0;
  for (auto x : s)
    res = res * 10 + x - '0';
  return res;
}
ll rnd(int k) {
  if (!k)
    return abs((int)RNG()) % MAXV + 1;
  ll t = abs((int)RNG()) % MAXV + 1;
  return (abs((int)RNG()) % t) + (MAXV - t);
}
ll random_gen(int sign) {
  ll x = rnd(abs((int)RNG()) % 2);
  ll s = abs((int)RNG()) % 2;
  s = !s ? 1 : -1;
  return sign == 1 ? x : sign == -1 ? -x : s * x;
}
const int MAX_NODE = MAXN;
struct DisjointSet {
  struct node {
    int parent, rank;
  } T[MAX_NODE];
  DisjointSet() {
    for (int i = 0; i < MAX_NODE; ++i)
      make(i);
  }
  void make(int u) { T[u].parent = u, T[u].rank = 0; };
  int find(int u) {
    if (T[u].parent == u)
      return u;
    return T[u].parent = find(T[u].parent);
  }
  void merge(int u, int v) {
    u = find(u), v = find(v);
    if (u == v)
      return;
    if (T[u].rank < T[v].rank)
      T[u].parent = v;
    else if (T[u].rank > T[v].rank)
      T[v].parent = u;
    else
      T[v].parent = u, ++T[u].rank;
  }
};
DisjointSet dsu;
int deg[MAXN];
int chose[MAXN];
int par[MAXN];
vector<int> g[MAXN], g_MST[MAXN];
vector<pii> edge;
set<pii> MST;
bool cmp(int u, int v) {
  return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
}
void dfs(int u) {
  for (auto v : g[u])
    if (dsu.find(1) == dsu.find(v))
      continue;
    else {
      dsu.merge(dsu.find(1), dsu.find(v));
      if (u < v)
        MST.insert({u, v});
      else
        MST.insert({v, u});
      g_MST[u].push_back(v), g_MST[v].push_back(u);
      dfs(v);
    }
}
void build_tree(int u) {
  for (auto v : g_MST[u])
    if (par[v] == -1)
      par[v] = u, build_tree(v);
}
int Ares_KN() {
  int n, m, k;
  std::cin >> n >> m >> k;
  while (m--) {
    int u, v;
    std::cin >> u >> v;
    g[u].push_back(v), g[v].push_back(u);
    ++deg[u], ++deg[v];
    edge.emplace_back(u, v);
  }
  if (deg[1] < k)
    return !std::cout << "NO";
  sort(g[1].begin(), g[1].end(), cmp);
  int cnt = 0;
  for (auto v : g[1])
    if (deg[v] == 1)
      ++cnt;
  if (cnt > k)
    return !std::cout << "NO";
  for (auto v : g[1])
    if (deg[v] == 1) {
      dsu.merge(dsu.find(1), dsu.find(v));
      MST.insert({1, v});
      g_MST[1].push_back(v), g_MST[v].push_back(1);
    } else if (dsu.find(1) == dsu.find(v))
      continue;
    else {
      dsu.merge(dsu.find(1), dsu.find(v));
      MST.insert({1, v});
      g_MST[1].push_back(v), g_MST[v].push_back(1);
      chose[v] = true, dfs(v);
      ++cnt;
      if (cnt == k)
        break;
    }
  for (auto E : edge) {
    int u = E.fi, v = E.se;
    if (u == 1 || v == 1)
      continue;
    if (dsu.find(u) == dsu.find(v))
      continue;
    dsu.merge(dsu.find(u), dsu.find(v));
    if (u < v)
      MST.insert({u, v});
    else
      MST.insert({v, u});
    g_MST[u].push_back(v), g_MST[v].push_back(u);
  }
  if (cnt > k || MST.size() < n - 1)
    return !std::cout << "NO";
  if (cnt == k) {
    std::cout << "YES";
    for (auto x : MST)
      std::cout << x.fi << ' ' << x.se << '\n';
    return 0;
  }
  int root = 1;
  memset(par, -1, sizeof(par));
  par[1] = 1;
  build_tree(root);
  vector<pii> res;
  for (auto v : g[1])
    if (!chose[v]) {
      int p = par[v];
      if (p == 1)
        continue;
      if (v < p)
        MST.erase({v, p});
      else
        MST.erase({p, v});
      MST.insert({1, v});
      par[v] = 1;
      ++cnt;
      if (cnt == k)
        break;
    }
  std::cout << "YES";
  for (auto x : MST)
    std::cout << x.fi << ' ' << x.se << '\n';
  return 0;
}
int main() {
  Ares_KN();
  cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
  return 0;
}