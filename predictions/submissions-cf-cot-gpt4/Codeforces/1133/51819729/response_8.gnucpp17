#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("avx")
#include <algorithm>
#include <bitset>
#include <cassert>
#include <chrono>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <unordered_map>
#include <unordered_set>
#include <vector>
using namespace std;

// Replace macros with inline functions and constexpr
constexpr double PI = 2 * acos((double)0);
inline double sec(double x) { return 1.0 / cos((x)); }
inline double asec(double x) { return acos(1.0 / (x)); }
template <class T> inline int getbit(T s, int i) { return (s >> i) & 1; }
template <class T> inline T onbit(T s, int i) { return s | (T(1) << i); }
template <class T> inline T offbit(T s, int i) { return s & (~(T(1) << i)); }
template <class T> inline int cntbit(T s) { return __builtin_popcountll(s); }

// ... Rest of the code is same ...

void dfs(int u) {
  for (auto v : g[u])
    if (dsu.find(1) == dsu.find(v))
      continue;
    else {
      dsu.merge(dsu.find(1), dsu.find(v));
      if (u < v)
        MST.insert({u, v});
      else
        MST.insert({v, u});
      g_MST[u].emplace_back(v), g_MST[v].emplace_back(u);
      dfs(v);
    }
}

// ... Rest of the code is same ...

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0);
  Ares_KN();
  cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
  return 0;
}