The given C++ code performs a complex operation and uses a lot of templates, macros, and structures. However, there are some parts where we can optimize the code.

1. Remove unnecessary `#pragma` directives: The `#pragma` directives are compiler-specific instructions. The first three `#pragma` directives in the program are used for optimization and are specific to GCC compiler. However, the GCC compiler automatically optimizes the code at `O2` level, hence the `#pragma GCC optimize` directive is not needed. The `#pragma GCC target` directive specifies the target processor. Unless you're optimizing the code for a specific processor, you don't need this directive. `#pragma comment(linker, "/stack:200000000")` is specific to the Microsoft compiler, and it's used to set the size of the stack. This is not needed for this program.

2. Remove unused includes: The program includes a lot of headers, but not all of them are used. By removing unnecessary includes, we can reduce the compilation time and memory usage.

3. Avoid global variables: The program declares a lot of global variables. Global variables consume memory for the entire duration of the program. It's a good practice to avoid global variables and use local variables whenever possible. This may reduce the memory usage of the program.

4. Use `std::ios_base::sync_with_stdio(false)`: This is an optimization trick for C++ IO. This decouples `cin`/`cout` streams from `scanf`/`printf` streams and makes `cin`/`cout` faster.

5. Use `'\n'` instead of `std::endl`: `std::endl` inserts a newline character into the output sequence and flushes it, whereas `'\n'` just inserts a newline character. By replacing `std::endl` with `'\n'`, we can make the program faster.

6. Make use of `const` keyword: By using `const`, we can tell the compiler that the variable is read-only. This allows the compiler to perform some optimizations.

7. Use `constexpr` instead of `#define`: `constexpr` is a better alternative to `#define` for defining constants because it respects the scoping rules and is type safe.

8. Avoid using `using namespace std`: This brings all the names in the `std` namespace into the global scope, which can lead to name conflicts. It's better to use the `std::` prefix when needed.

Please find the optimized program below:

```cpp
#include <algorithm>
#include <cassert>
#include <chrono>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using std::cin;
using std::cout;

constexpr int MAXN = 2e5 + 100;
constexpr int MOD = 1e9 + 7;
constexpr long long MAXV = 1e9;
constexpr double eps = 1e-12;
constexpr long long INF = 1e16;

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::pair<ll, ll> pll;

std::mt19937 RNG(chrono::high_resolution_clock::now().time_since_epoch().count());

inline int myrand() { return abs((int)RNG()); }

//... the rest of the code remains the same

int main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  Ares_KN();
  cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
  return 0;
}
```

Please note that the given program is quite large and the above mentioned are only some of the changes that could potentially optimize the program. There might be other parts in the program that can be optimized.