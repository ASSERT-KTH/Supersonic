Step by Step Optimization:

1. Dynamic Memory Allocation: In your code, you are using Variable Length Array (VLA), which is not part of standard C++. Instead, you need to dynamically allocate memory using new keyword.

2. Avoid pow function: In your code, you are using pow function to calculate 10^9 + 10. This involves floating point computations and is slower. Instead, you can directly use the calculated value.

3. Avoid re-computation: In your code, you are calculating 'i - last' multiple times. Instead, you can store the value in a variable and use it.

Optimized Program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
using ull = unsigned long long;
int main() {
  ull n;
  cin >> n;
  ull* a = new ull[n + 1];
  for (ull i = 0; i < n; ++i) {
    cin >> a[i];
  }
  a[n] = 1000000010;
  std::sort(a, a + n + 1);
  ull last = 0;
  ull max_count = 1;
  for (ull i = 0; i < n + 1; ++i) {
    ull count = i - last;
    if (a[i] - a[last] > 5) {
      max_count = std::max(max_count, count);
      last = i;
    }
  }
  std::cout << max_count << std::endl;
  delete[] a;
  return 0;
}
```

Please note that, in C++, always remember to delete dynamically allocated memory to prevent memory leaks.
