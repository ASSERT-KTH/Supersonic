Optimization Steps:

1. Use dynamic memory allocation: Instead of using a static array for 'a', use dynamic memory allocation. It will allow you to allocate the exact amount of memory that you will need for your program and it will be freed after the program is done. This will give you a significant reduction in memory usage.

2. Remove unnecessary uses of math.h: The value of pow(10, 9) + 10 is a constant and it does not change during the run of the program. You can define it as a constant and use that constant in your code. This will reduce the calculation time and improve runtime.

3. Efficient use of sort: Instead of sorting the whole array 'a', sort only till 'n'. This will reduce the time complexity and improve runtime.

Optimized Code:

```C++
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
using ull = unsigned long long;
const ull MAX = pow(10, 9) + 10; // define constant
int main() {
  ull n;
  cin >> n;
  ull *a = new ull[n + 1]; // dynamic memory allocation
  for (ull i = 0; i < n; ++i) {
    cin >> a[i];
  }
  a[n] = MAX;
  std::sort(a, a + n); // sort only till 'n'
  ull last = 0;
  ull max_count = 1;
  for (ull i = 0; i < n + 1; ++i) {
    if (a[i] - a[last] > 5) {
      max_count = std::max(max_count, i - last);
      last += 1;
    }
  }
  std::cout << max_count << std::endl;
  delete[] a; // free allocated memory
  return 0;
}
```

Note: Please be aware that using dynamic memory allocation requires careful management of memory to avoid memory leaks. Always remember to free the memory after you are done using it.