Here are the optimization steps:

1. Instead of using a dynamic array on the stack, use a vector to avoid stack overflow for large inputs.

2. The pow(10, 9) + 10 operation is computationally expensive and it is better to directly assign the result of this operation to a[n].

3. We can also optimize the loop. When a[i] - a[last] > 5, we don't need to increment the last element by 1. Instead, we can set the last element to i because the next comparison should be between a[i+1] and a[i].

Here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
using ull = unsigned long long;
int main() {
  ull n;
  cin >> n;
  vector<ull> a(n + 1);
  for (ull i = 0; i < n; ++i) {
    cin >> a[i];
  }
  a[n] = 1000000010;
  std::sort(a.begin(), a.end());
  ull last = 0;
  ull max_count = 1;
  for (ull i = 1; i <= n; ++i) {
    if (a[i] - a[last] > 5) {
      max_count = std::max(max_count, i - last);
      last = i;
    }
  }
  std::cout << max_count << std::endl;
  return 0;
}
```

Note: In the original code, you had `a[n] = pow(10, 9) + 10;` which is equal to `a[n] = 1000000010;` so I have just replaced the pow function call with the actual value to make it more efficient.