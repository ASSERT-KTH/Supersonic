#include <bits/stdc++.h>
using namespace std;
#define int long long

const int N = 400;
int sz[N];
int a[N];
vector<int> v_i[N], v_e[N];
map<int, int> root_map;

void initialize() {
  for (int i = 1; i <= N - 1; i++) {
    a[i] = i;
    sz[i] = 1;
  }
}

int root(int i) {
  while (a[i] != i) {
    a[i] = a[a[i]];
    i = a[i];
  }
  return i;
}

void merge(int x, int y) {
  int u = root(x);
  int v = root(y);
  if (sz[u] < sz[v]) {
    swap(u, v);
  }
  if (a[v] != a[u]) {
    a[v] = a[u];
    sz[u] += sz[v];
  }
}

int cnt[N];

int32_t main() {
  int n;
  cin >> n;
  initialize();
  int v[n + 1];
  for (int i = 1; i <= n; i++) {
    cin >> v[i];
  }
  string s[n + 1];
  for (int i = 0; i < n; i++) {
    cin >> s[i];
    for (int j = 0; j < n; j++) {
      if (s[i][j] == '1') {
        int root_i = root_map.count(i + 1) ? root_map[i + 1] : root(i + 1);
        int root_j = root_map.count(j + 1) ? root_map[j + 1] : root(j + 1);
        if (root_i != root_j) {
          merge(i + 1, j + 1);
          root_map[j + 1] = root_map[i + 1] = root(i + 1);
        }
      }
    }
  }
  for (int i = 1; i <= n; i++) {
    v_e[root(i)].push_back(v[i]);
    push_heap(v_e[root(i)].begin(), v_e[root(i)].end(), greater<int>());
  }
  for (int i = 1; i <= n; i++) {
    cout << v_e[root(i)][0] << " ";
    pop_heap(v_e[root(i)].begin(), v_e[root(i)].end(), greater<int>());
    v_e[root(i)].pop_back();
  }
  cout << endl;
}