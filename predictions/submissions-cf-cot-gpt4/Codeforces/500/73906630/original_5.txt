The following optimizations can be applied:

1. Reduce the use of global variables: Global variables are usually kept in memory for the entire duration of program, which can be a waste of memory if they are not used throughout the program. In this case, sz, a, v_i, v_e, ans, cnt may not need to be global.

2. Avoid unnecessary calculations: The function root is calculating the root of a number by continuously updating the number itself until it is its own root. This can be made more efficient by introducing a temporary variable to hold the value of the next number to be checked and only updating the original number once the root is found.

3. Avoid unnecessary use of long long int: Long long int uses more memory than int. If the values being stored are guaranteed to not exceed the range of int, then int should be used instead. 

4. Avoid unnecessary initializations: The initialize function is initializing the entire array a and sz up to N. If the actual size needed is only n, then only the first n elements of a and sz should be initialized.

5. Use appropriate data structures: If the order of elements in v_e does not matter, a priority queue can be used instead of a vector. This will keep the elements in sorted order as they are inserted, eliminating the need to sort them later.

Here is the optimized code:

```
#include <bits/stdc++.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define PI 3.14159265
const int MOD = 1e9 + 7;
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(a) (a).begin(), (a).end()
const int N = 400;

int32_t main() {
  IOS;
  int n;
  cin >> n;
  
  int a[N], sz[N], cnt[N];
  vector<int> v_e[N];
  for (int i = 1; i <= n; i++) {
    a[i] = i;
    sz[i] = 1;
  }
  
  int v[n + 1];
  for (int i = 1; i <= n; i++) {
    cin >> v[i];
  }
  
  string s[n + 1];
  for (int i = 0; i < n; i++) {
    cin >> s[i];
    for (int j = 0; j < n; j++) {
      if (s[i][j] == '1') {
        int x = i + 1;
        int y = j + 1;
        while (a[x] != x) x = a[x];
        while (a[y] != y) y = a[y];
        if (x != y) {
          if (sz[x] < sz[y]) swap(x, y);
          a[y] = x;
          sz[x] += sz[y];
        }
      }
    }
  }
  
  for (int i = 1; i <= n; i++) {
    v_e[a[i]].pb(v[i]);
  }
  
  for (int i = 1; i <= n; i++) {
    sort(all(v_e[i]));
  }
  
  for (int i = 1; i <= n; i++) {
    int x = a[i];
    cout << v_e[x][cnt[x]++] << " ";
  }
  
  cout << endl;
}
```