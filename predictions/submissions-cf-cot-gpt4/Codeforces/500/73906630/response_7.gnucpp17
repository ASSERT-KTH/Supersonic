#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using int64 = long long;
using uint64 = unsigned long long;
using ld = long double;

const int64 MOD = 1e9 + 7;
const ld PI = 3.14159265;
const int N = 400;
std::vector<int> sz(N), a(N), ans(N);
std::vector<std::vector<int>> v_i(N), v_e(N);

void initialize(std::vector<int>& a, std::vector<int>& sz) {
    for (int i = 1; i <= N - 1; i++) {
        a[i] = i;
        sz[i] = 1;
    }
}

int root(int i, std::vector<int>& a) {
    while (a[i] != i) {
        a[i] = a[a[i]];
        i = a[i];
    }
    return i;
}

void merge(int x, int y, std::vector<int>& a, std::vector<int>& sz) {
    int u = root(x, a);
    int v = root(y, a);
    if (sz[u] < sz[v]) {
        std::swap(u, v);
    }
    a[v] = a[u];
    sz[u] += sz[v];
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(NULL);

    int n;
    std::cin >> n;
    initialize(a, sz);
    std::vector<int> v(n + 1);
    for (int i = 1; i <= n; i++) {
        std::cin >> v[i];
    }
    std::vector<std::string> s(n + 1);
    for (int i = 0; i < n; i++) {
        std::cin >> s[i];
        for (int j = 0; j < n; j++) {
            if (s[i][j] == '1') {
                if (root(i + 1, a) != root(j + 1, a)) {
                    merge(i + 1, j + 1, a, sz);
                }
            }
        }
    }
    std::vector<int> cnt(N);
    for (int i = 1; i <= n; i++) {
        v_e[root(i, a)].push_back(v[i]);
    }
    for (int i = 1; i <= n; i++) {
        sort(v_e[i].begin(), v_e[i].end());
    }
    for (int i = 1; i <= n; i++) {
        int x = root(i, a);
        std::cout << v_e[x][cnt[x]++] << " ";
    }
    std::cout << std::endl;

    return 0;
}