This program can be optimized by reducing the number of function calls and unnecessary operations. 

Here are the steps to optimize the program:

1. Remove all unnecessary macros and typedef. This does not affect the performance of the program but makes it easier to read and understand.
2. We don't need to use the function `root()` inside the loop in the `merge()` function. We can use the roots directly which are already calculated before calling the `merge()` function.
3. In the main function, instead of calling `root()` function twice for each pair (i, j), we can call it once and store it in a variable.
4. We are using `sort()` function for each element of `v_e[]` which is not efficient. We can first push all the elements in `v_e[]` and then sort them at once.
5. The `all(a)` macro is not necessary. We can directly use `begin()` and `end()` functions in `sort()`.

Now, here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;

const int N = 400;
int sz[N];
int a[N], ans[N];
vector<int> v_i[N], v_e[N];

void initialize() {
  for (int i = 1; i <= N - 1; i++) {
    a[i] = i;
    sz[i] = 1;
  }
}

int root(int i) {
  while (a[i] != i) {
    a[i] = a[a[i]];
    i = a[i];
  }
  return i;
}

void merge(int u, int v) {
  if (sz[u] < sz[v]) {
    swap(u, v);
  }
  a[v] = a[u];
  sz[u] += sz[v];
}

int cnt[N];

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n;
  cin >> n;
  initialize();
  int v[n + 1];
  for (int i = 1; i <= n; i++) {
    cin >> v[i];
  }
  string s[n + 1];
  for (int i = 0; i < n; i++) {
    cin >> s[i];
    for (int j = 0; j < n; j++) {
      if (s[i][j] == '1') {
        int root_i = root(i + 1);
        int root_j = root(j + 1);
        if (root_i != root_j)
          merge(root_i, root_j);
      }
    }
  }
  for (int i = 1; i <= n; i++) {
    v_e[root(i)].push_back(v[i]);
  }
  for (int i = 1; i <= n; i++) {
    sort(v_e[i].begin(), v_e[i].end());
  }
  for (int i = 1; i <= n; i++) {
    int x = root(i);
    cout << v_e[x][cnt[x]++] << " ";
  }
  cout << endl;
  return 0;
}
```
This code is more readable and efficient as it reduces the number of function calls and unnecessary operations.