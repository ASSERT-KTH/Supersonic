The given code is a union-find implementation where after reading the matrix, unions are made and finally, for each i, all the values are sorted that belong to same union and printed.

Optimization steps:

1. We can improve readability by removing the #define boilerplate code and use the standard approach instead.

2. For the data type "int" used in "#define int long long", unless you're dealing with very large numbers that exceed the limit of a normal int, there's no need to use "long long". This would unnecessarily increase the memory usage.

3. Use of "bits/stdc++.h" header file can be avoided as it includes all standard library headers, which increases compilation time. We can only include the necessary libraries.

4. The vectors v_i[N] and v_e[N] are unused and can be removed to reduce memory usage.

5. The "typedef" keyword is used for creating an alias for data types in C and C++. In this program, "typedef unsigned long long ull" and "typedef long double ld" are not used and can be removed.

6. The "const int MOD = 1e9 + 7" is also not used and can be removed.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int N = 400;

int sz[N];
int a[N], ans[N];
vector<int> v_e[N];

void initialize() {
    for (int i = 1; i <= N - 1; i++) {
        a[i] = i;
        sz[i] = 1;
    }
}

int root(int i) {
    while (a[i] != i) {
        a[i] = a[a[i]];
        i = a[i];
    }
    return i;
}

void merge(int x, int y) {
    int u = root(x);
    int v = root(y);
    if (sz[u] < sz[v]) {
        swap(u, v);
    }
    a[v] = a[u];
    sz[u] += sz[v];
}

int cnt[N];

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int n;
    cin >> n;
    
    initialize();
    
    int v[n + 1];
    for (int i = 1; i <= n; i++) {
        cin >> v[i];
    }
    
    string s[n + 1];
    for (int i = 0; i < n; i++) {
        cin >> s[i];
        for (int j = 0; j < n; j++) {
            if (s[i][j] == '1') {
                if (root(i + 1) != root(j + 1)) {
                    merge(i + 1, j + 1);
                }
            }
        }
    }

    for (int i = 1; i <= n; i++) {
        v_e[root(i)].push_back(v[i]);
    }

    for (int i = 1; i <= n; i++) {
        sort(v_e[i].begin(), v_e[i].end());
    }

    for (int i = 1; i <= n; i++) {
        int x = root(i);
        cout << v_e[x][cnt[x]++] << " ";
    }
    
    cout << endl;
    
    return 0;
}
```

In this optimized version, we have removed unused variables, typedefs, and unnecessary header files to reduce memory usage and improve readability. Also, we have replaced the macro with its equivalent standard code.