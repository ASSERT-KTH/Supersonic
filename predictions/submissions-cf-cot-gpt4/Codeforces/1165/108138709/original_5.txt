This program is already quite optimized. However, there are still some small improvements that we can make:

1. Replace `#include <bits/stdc++.h>` with specific includes. This can slightly improve the compile time, and also make the code more portable because `bits/stdc++.h` is not standard.

2. Replace `#define js` with `std::ios_base::sync_with_stdio(false); std::cin.tie(NULL); std::cout.tie(NULL);` directly in the main function. This is clearer and doesn't affect the performance.

3. Replace `#define all(__vv__) (__vv__).begin(), (__vv__).end()` with specific `begin()` and `end()` calls. This can improve readability without affecting performance.

4. Some `#define`s are not used in the program, so we can remove them. This includes `pai`, `ms`, `rep`, `endl`.

5. The `read()` and `print()` functions use the old C-style I/O (using `getchar()` and `putchar()`). Using C++ I/O (such as `cin` and `cout`) can be clearer and doesn't affect performance much.

6. The `gcd()` and `qpow()` functions are not used in the program, so we can remove them.

Here is the optimized program:

```c++
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
typedef long long ll;

const int N = 2e5 + 7;
int n, m;
int k[N], t[N], sum;
std::vector<int> p, s[N];

bool check(int x) {
  std::memset(t, 0, sizeof(t));
  int now = x, ned = sum, cnt = 0;
  int i = std::lower_bound(p.begin(), p.end(), x) - p.begin();
  for(int i = std::min(N - 1, x); i >= 1; --i) {
    now = std::min(now, i);
    if (now == 0 or ned == 0)
      break;
    for (auto &it : s[i]) {
      int buy = std::min(now, k[it] - t[it]);
      t[it] += buy;
      ned -= buy;
      now -= buy;
      cnt += buy;
    }
  }
  return x - cnt >= ned * 2;
}

void solve() {
  std::cin >> n >> m;
  for(int i = 1; i <= n; ++i) {
    std::cin >> k[i];
    sum += k[i];
  }
  for(int i = 1; i <= m; ++i) {
    int d, t;
    std::cin >> d >> t;
    p.push_back(d);
    s[d].push_back(t);
  }
  std::sort(p.begin(), p.end());
  int l = 1, r = sum * 2, ans = 1;
  while (l <= r) {
    int mid = l + r >> 1;
    if (check(mid))
      ans = mid, r = mid - 1;
    else
      l = mid + 1;
  }
  std::cout << ans;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  solve();
  return 0;
}
```
