The main optimization steps would be:

1. Avoid using `#include <bits/stdc++.h>` as it includes a lot of unnecessary headers which can increase compile time. Instead, only include necessary headers. 
2. Avoid using `using namespace std;` as it can cause name clashes. Instead, use `std::`.
3. Avoid using `#define` for loop and other functionality. It can lead to unexpected errors and makes the code less readable. Instead, write out the loops and functions.
4. Avoid using `memset` to initialize arrays. It is error-prone and less readable than other methods. Instead, use `std::fill` or `std::fill_n`.

Here is the optimized version of your code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>

typedef long long ll;
const int INF = 0x3f3f3f3f;
const int N = 2e5 + 7;
int n, m;
int k[N], t[N], sum;
std::vector<int> p, s[N];

ll read() {
  ll s = 0, w = 1;
  char ch = getchar();
  for (; !isdigit(ch); ch = getchar())
    if (ch == '-')
      w = -1;
  for (; isdigit(ch); ch = getchar())
    s = (s << 1) + (s << 3) + (ch ^ 48);
  return s * w;
}

void print(ll x, int op = 10) {
  if (!x) {
    putchar('0');
    if (op)
      putchar(op);
    return;
  }
  char F[40];
  ll tmp = x > 0 ? x : -x;
  if (x < 0)
    putchar('-');
  int cnt = 0;
  while (tmp > 0) {
    F[cnt++] = tmp % 10 + '0';
    tmp /= 10;
  }
  while (cnt > 0)
    putchar(F[--cnt]);
  if (op)
    putchar(op);
}

bool check(int x) {
  std::fill_n(t, n+1, 0);
  int now = x, ned = sum, cnt = 0;
  int i = lower_bound(p.begin(), p.end(), x) - p.begin();
  for (int i = std::min(N - 1, x); i >= 1 ; --i) {
    now = std::min(now, i);
    if (now == 0 or ned == 0)
      break;
    for (auto &it : s[i]) {
      int buy = std::min(now, k[it] - t[it]);
      t[it] += buy;
      ned -= buy;
      now -= buy;
      cnt += buy;
    }
  }
  return x - cnt >= ned * 2;
}

void solve() {
  n = read(), m = read();
  for (int i = 1; i <= n; ++i) {
    k[i] = read();
    sum += k[i];
  }
  for (int i = 1; i <= m; ++i) {
    int d = read(), t = read();
    p.push_back(d);
    s[d].push_back(t);
  }
  sort(p.begin(), p.end());
  int l = 1, r = sum * 2, ans = 1;
  while (l <= r) {
    int mid = l + r >> 1;
    if (check(mid))
      ans = mid, r = mid - 1;
    else
      l = mid + 1;
  }
  print(ans);
}

int main() {
  solve();
  return 0;
}
```

These changes improve the readability and maintainability of the code without affecting the functionality.