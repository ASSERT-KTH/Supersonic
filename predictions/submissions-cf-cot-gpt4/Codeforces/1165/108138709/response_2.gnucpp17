#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <cstring>

#define all(__vv__) (__vv__).begin(), (__vv__).end()
#define ms(__x__, __val__) memset(__x__, __val__, sizeof(__x__))
#define rep(i, sta, en) for (int i = sta; i <= en; ++i)
#define repp(i, sta, en) for (int i = sta; i >= en; --i)

typedef long long ll;

const int N = 2e5 + 7;
int n, m;
int k[N], t[N], sum;
std::set<int> p;
std::vector<int> s[N];

bool check(int x) {
  ms(t, 0);
  int now = x, ned = sum, cnt = 0;
  auto it = p.lower_bound(x);
  repp(i, std::min(N - 1, x), 1) {
    now = std::min(now, i);
    if (now == 0 or ned == 0)
      break;
    for (auto &it : s[i]) {
      int buy = std::min(now, k[it] - t[it]);
      t[it] += buy;
      ned -= buy;
      now -= buy;
      cnt += buy;
    }
  }
  return x - cnt >= ned * 2;
}

void solve() {
  std::cin >> n >> m;
  rep(i, 1, n) {
    std::cin >> k[i];
    sum += k[i];
  }
  rep(i, 1, m) {
    int d, t;
    std::cin >> d >> t;
    p.insert(d);
    s[d].push_back(t);
  }
  int l = 1, r = sum * 2, ans = 1;
  while (l <= r) {
    int mid = l + r >> 1;
    if (check(mid))
      ans = mid, r = mid - 1;
    else
      l = mid + 1;
  }
  std::cout << ans << std::endl;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  
  solve();
  return 0;
}