#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> pai;
#define all(__vv__) (__vv__).begin(), (__vv__).end()
#define ms(__x__, __val__) memset(__x__, __val__, sizeof(__x__))
#define repp(i, sta, en) for (int i = sta; i >= en; --i)
#define rep(i, sta, en) for (int i = sta; i <= en; ++i)
const int dir[][2] = {{0, 1}, {1, 0},  {0, -1}, {-1, 0}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};
const int MOD = 1e9 + 7;
const int INF = 0x3f3f3f3f;
const int N = 2e5 + 7;
int n, m, k[N], t[N], sum;
vector<int> p, s[N];
struct Node {
  ll val;
  int id;
  bool operator<(const Node &opt) const { return val < opt.val; }
};
bool check(int x) {
  ms(t, 0);
  int now = x, ned = sum, cnt = 0;
  int i = lower_bound(all(p), x) - p.begin();
  repp(i, min(N - 1, x), 1) {
    now = min(now, i);
    if (now == 0 or ned == 0)
      break;
    for (auto &it : s[i]) {
      int buy = min(now, k[it] - t[it]);
      t[it] += buy;
      ned -= buy;
      now -= buy;
      cnt += buy;
    }
  }
  return x - cnt >= ned * 2;
}
void solve() {
  cin >> n >> m;
  rep(i, 1, n) {
    cin >> k[i];
    sum += k[i];
  }
  rep(i, 1, m) {
    int d, t;
    cin >> d >> t;
    p.push_back(d);
    s[d].push_back(t);
  }
  sort(all(p));
  int l = 1, r = sum * 2, ans = 1;
  while (l <= r) {
    int mid = l + r >> 1;
    if (check(mid))
      ans = mid, r = mid - 1;
    else
      l = mid + 1;
  }
  cout << ans << '\n';
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  solve();
  return 0;
}