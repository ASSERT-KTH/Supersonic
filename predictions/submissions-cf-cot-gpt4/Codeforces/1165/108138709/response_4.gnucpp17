#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <cstdint>

const int dir[][2] = {{0, 1}, {1, 0},  {0, -1}, {-1, 0},
                      {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};
const int MOD = 1e9 + 7;
const int INF = 0x3f3f3f3f;

struct Node {
  int64_t val;
  int id;
  bool operator<(const Node &opt) const { return val < opt.val; }
};

const int N = 2e5 + 7;

bool check(int x, int sum, std::vector<int>& k, std::vector<int>& t, std::vector<int>& p, std::vector<std::vector<int>>& s) {
  std::fill(t.begin(), t.end(), 0);
  int now = x, ned = sum, cnt = 0;
  int i = std::lower_bound(p.begin(), p.end(), x) - p.begin();
  for (i = std::min(N - 1, x); i >= 1; --i) {
    now = std::min(now, i);
    if (now == 0 or ned == 0)
      break;
    for (auto &it : s[i]) {
      int buy = std::min(now, k[it] - t[it]);
      t[it] += buy;
      ned -= buy;
      now -= buy;
      cnt += buy;
    }
  }
  return x - cnt >= ned * 2;
}

void solve() {
  int n, m, sum = 0;
  std::cin >> n >> m;
  
  std::vector<int> k(n+1, 0), t(n+1, 0);
  for (int i = 1; i <= n; ++i) {
    std::cin >> k[i];
    sum += k[i];
  }
  
  std::vector<int> p;
  std::vector<std::vector<int>> s(N);
  for (int i = 1; i <= m; ++i) {
    int d, t;
    std::cin >> d >> t;
    p.push_back(d);
    s[d].push_back(t);
  }
  
  std::sort(p.begin(), p.end());
  
  int l = 1, r = sum * 2, ans = 1;
  while (l <= r) {
    int mid = l + r >> 1;
    if (check(mid, sum, k, t, p, s))
      ans = mid, r = mid - 1;
    else
      l = mid + 1;
  }
  
  std::cout << ans << std::endl;
}

int main() {
  solve();
  return 0;
}