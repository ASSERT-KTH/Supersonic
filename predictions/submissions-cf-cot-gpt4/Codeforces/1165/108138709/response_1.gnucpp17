#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#define rep(i, sta, en) for (int i = sta; i <= en; ++i)
#define repp(i, sta, en) for (int i = sta; i >= en; --i)
typedef long long ll;
const int N = 2e5 + 7;
int n, m;
int k[N], t[N], sum;
std::vector<int> p, s[N];
bool check(int x) {
  memset(t, 0, sizeof(t));
  int now = x, ned = sum;
  int i = std::lower_bound(p.begin(), p.end(), x) - p.begin();
  repp(i, std::min(N - 1, x), 1) {
    now = std::min(now, i);
    if (now == 0 or ned == 0)
      break;
    for (auto &it : s[i]) {
      int buy = std::min(now, k[it] - t[it]);
      t[it] += buy;
      ned -= buy;
      now -= buy;
    }
  }
  return x - now >= ned * 2;
}
void solve() {
  std::cin >> n >> m;
  rep(i, 1, n) {
    std::cin >> k[i];
    sum += k[i];
  }
  rep(i, 1, m) {
    int d, t;
    std::cin >> d >> t;
    p.push_back(d);
    s[d].push_back(t);
  }
  std::sort(p.begin(), p.end());
  int l = 1, r = sum * 2, ans = 1;
  while (l < r) {
    int mid = l + (r - l) / 2;
    if (check(mid))
      r = mid;
    else
      l = mid + 1;
  }
  std::cout << l;
}
int main() {
  solve();
  return 0;
}