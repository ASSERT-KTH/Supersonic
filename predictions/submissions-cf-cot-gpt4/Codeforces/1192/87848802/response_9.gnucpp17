#include <bits/stdc++.h>
#define x first
#define y second
#define pb push_back
#define eb emplace_back
#define all(a) (a).begin(), (a).end()
#define SZ(a) (int)(a).size()
using namespace std;
typedef pair<int, int> PII;
typedef long long LL;
typedef double DD;
typedef long double LD;
typedef pair<LL, LL> PLL;
typedef pair<DD, DD> PDD;
typedef vector<int> VI;
typedef vector<LL> VL;
const int N = 62;
const int mod = 998244353;
int dp[N][N][N], way[10][N][N];
unordered_map<string, bool> mp;
char s[10];
int dict(char a) {
  if (isalpha(a)) {
    if (isupper(a))
      return a - 'A';
    return a - 'a' + 26;
  }
  return a - '0' + 52;
}
void adding(int &a, int b) {
  if ((a += b) >= mod)
    a -= mod;
}
int add(int a, int b) { return ((a += b) >= mod) ? a - mod : a; }
int mul(int a, int b) { return a * 1ll * b % mod; }
int play(int i, int j, int k) {
  int mx = max(max(i, j), k);
  int mi = min(min(i, j), k);
  return dp[mx][i ^ j ^ k ^ mx ^ mi][mi];
}
void solve() {
  int n;
  scanf("%d", &n);
  for (int i = 1; i <= n; ++i) {
    scanf(" %s", s);
    int len = strlen(s) - 1;
    if (!mp[s])
      way[len][dict(s[0])][dict(s[len])]++, mp[s] = true;
    reverse(s, s + len + 1);
    if (!mp[s])
      way[len][dict(s[0])][dict(s[len])]++, mp[s] = true;
  }
  int ans = 0;
  for (int L = 2; L <= 9; ++L) {
    for (int i = 0; i <= 61; ++i) {
      for (int j = 0; j <= i; ++j) {
        for (int k = 0; k <= j; ++k) {
          dp[i][j][k] = 0;
          for (int l = 0; l <= 61; ++l) {
            int a = (way[L][i][l] * 1ll * way[L][j][l] * way[L][k][l]) % mod;
            adding(dp[i][j][k], a);
          }
        }
      }
    }
    for (int i = 0; i <= 61; ++i) {
      for (int j = 0; j <= i; ++j) {
        for (int k = 0; k <= 61; ++k) {
          for (int l = 0; l <= k; ++l) {
            int a = mul(mul(play(i, k, l), play(j, l, k)),
                        mul(play(i, j, k), play(i, l, j)));
            if (k != l)
              adding(a, a);
            if (i != j)
              adding(a, a);
            adding(ans, a);
          }
        }
      }
    }
  }
  printf("%d\n", ans);
}
int main() {
  solve();
  return 0;
}
