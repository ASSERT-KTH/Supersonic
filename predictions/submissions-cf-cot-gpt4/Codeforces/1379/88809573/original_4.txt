The original code contains several opportunities for optimization in terms of memory and time.

1. Unnecessary #define macros: The macros `mul_mod` and `add_mod` are defined but not used in the code. Removing them will reduce the memory footprint.

2. Unnecessary headers: The headers `<stack>`, `<set>`, `<map>`, `<queue>` are included but not used. Removing them will reduce the compilation time, and possibly the memory footprint.

3. Repeated calculations: The value `m - n + 1` is calculated multiple times. We can calculate it once and store it in a variable. This will reduce the number of calculations and thus the running time.

4. `memset` usage: The `memset` function is used to set the `suf` array to 0, but this is not necessary as the array is overwritten in the next loop. Removing this line will reduce the running time.

5. Unnecessary `temp` variable: The `temp` variable is initialized to 0 for each iteration of the loop. This is not necessary as the value of `temp` is always overwritten. We can remove the initialization to reduce the running time.

Here is the optimized code:

```cpp
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <vector>
using namespace std;
typedef long long ll;
const int maxn = 2e5 + 10;
const int maxm = 5e5 + 10;
int q;
struct node {
  ll a, b;
} f[maxn];
ll ans;
ll A[maxn], B[maxn];
ll suf[maxn];
int n, m;
int main() {
  scanf("%d", &q);
  while (q--) {
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= m; i++) {
      scanf("%lld %lld", &f[i].a, &f[i].b);
      A[i] = f[i].a;
    }
    sort(A + 1, A + 1 + m);
    int diff = m - n + 1;
    for (int i = m; i >= 1; i--)
      suf[i] = suf[i + 1] + A[i];
    ans = 0;
    if (n <= m)
      ans = suf[diff];
    for (int i = 1; i <= m; i++) {
      ll temp;
      int pos = lower_bound(A + 1, A + 1 + m, f[i].b) - A;
      if (pos <= diff)
        continue;
      temp = suf[pos];
      int num = n - (m - pos + 1);
      if (f[i].a < f[i].b)
        temp += f[i].a, num--;
      temp += num * f[i].b;
      ans = max(ans, temp);
    }
    cout << ans << endl;
  }
  return 0;
}
```

Note: The optimized code only makes small modifications to the original one. The logic and the structure of the code remain the same. These modifications aim to reduce the memory footprint and the running time by removing unnecessary headers, macros, calculations, and memory operations.