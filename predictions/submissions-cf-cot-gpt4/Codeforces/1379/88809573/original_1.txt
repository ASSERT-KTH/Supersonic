Let's go step by step for the optimization process:

1. The first observation is that we are using C++ and the `scanf` and `printf` functions are from C. It's better to use C++ IO functions like `cin` and `cout`. However, `scanf` and `printf` are faster than `cin` and `cout`. To get the same speed in C++, we can use `std::ios::sync_with_stdio(false);` and `cin.tie(NULL);` at the beginning of the main function.

2. The memory for array `A` and `suf` is cleared at each query. This is unnecessary and time-consuming, especially when the number of queries (q) is large. We only need to clear memory that we actually used.

3. The `std::lower_bound` function is called inside the for loop. This function has a logarithmic complexity, so calling it multiple times can lead to a significant slowdown. We can reuse the result of the previous call since the array is sorted.

4. The line `temp += num * f[i].b;` can be moved outside the loop since it does not depend on the loop index.

Here is the optimized code:

```cpp
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define mul_mod(a, b, c) a = (a * b) % mod
#define add_mod(a, b, c) a = (a + b) % mod
using namespace std;
typedef long long ll;
const int maxn = 2e5 + 10;
const int maxm = 5e5 + 10;
int q;
struct node {
  ll a, b;
} f[maxn];
ll ans;
ll A[maxn], B[maxn];
ll suf[maxn];
int n, m;
int main() {
  std::ios::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> q;
  while (q--) {
    cin >> n >> m;
    for (int i = 1; i <= m; i++) {
      cin >> f[i].a >> f[i].b;
      A[i] = f[i].a;
    }
    sort(A + 1, A + 1 + m);
    memset(suf, 0, sizeof(ll)*(m+1));
    for (int i = m; i >= 1; i--)
      suf[i] = suf[i + 1] + A[i];
    ans = 0;
    if (n <= m)
      ans = suf[m - n + 1];
    int pos = m;
    for (int i = 1; i <= m; i++) {
      ll temp = 0;
      pos = min(pos, int(lower_bound(A + 1, A + 1 + m, f[i].b) - A));
      if (pos <= m - n + 1)
        continue;
      temp += suf[pos];
      int num = n - (m - pos + 1);
      if (f[i].a < f[i].b)
        temp += f[i].a, num--;
      ans = max(ans, temp);
    }
    ans += num * f[i].b;
    cout << ans << "\n";
  }
  return 0;
}
```

These optimizations should improve the running time and memory usage of the code. However, the exact impact will depend on the specific input data.