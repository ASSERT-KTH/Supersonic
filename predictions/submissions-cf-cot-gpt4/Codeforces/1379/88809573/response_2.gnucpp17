#include <cstdio>
#include <algorithm>
#include <cstring>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define mul_mod(a, b, c) a = (a * b) % mod
#define add_mod(a, b, c) a = (a + b) % mod
using namespace std;
typedef long long ll;
const int maxn = 2e5 + 10;
const int maxm = 5e5 + 10;
int q;
struct node {
  ll a, b;
} f[maxn];
ll ans;
ll A[maxn], B[maxn];
ll suf[maxn];
int n, m;
int main() {
  scanf("%d", &q);
  while (q--) {
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= m; i++) {
      scanf("%lld %lld", &f[i].a, &f[i].b);
      A[i] = f[i].a;
      suf[i] = 0; // reset only the elements that were changed
    }
    sort(A + 1, A + 1 + m);
    for (int i = m; i >= 1; i--)
      suf[i] = suf[i + 1] + A[i];
    ans = 0;
    if (n <= m)
      ans = suf[m - n + 1];
    for (int i = 1; i <= m; i++) {
      ll temp = 0;
      int pos = lower_bound(A + 1, A + 1 + m, f[i].b) - A;
      int num = n - (m - pos + 1);
      if (pos <= num)
        continue;
      temp += suf[pos];
      bool cond = f[i].a < f[i].b; // check condition before loop
      if (cond)
        temp += f[i].a, num--;
      temp += num * f[i].b;
      ans = max(ans, temp);
    }
    printf("%lld\n", ans); // use printf for faster output
  }
  return 0;
}