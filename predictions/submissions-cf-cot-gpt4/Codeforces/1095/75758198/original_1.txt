First of all, the optimization of your program will be done in a few steps:

1. Remove the unnecessary string initialization. In your code, you initialize the string `t` to an empty string, which is unnecessary as the string `t` is immediately assigned a value from the standard input.

2. Instead of using `cout` inside the loop, we can create a string `result` and append the characters to this string. After ending the loop, we print the `result`. This is because the `cout` operation is expensive and could slow down the program if used in a loop.

3. The condition `if (b < n)` doesn't need to be checked in every iteration. Instead, we can use a `while` loop to iterate while `b < n`.

4. The variable `b` is used as an index for `t`, it would be better to use a more descriptive name for it, like `index`.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;

int main() {
  int n;
  cin >> n;
  string t;
  cin >> t;
  
  string result = "";
  int index = 0;
  for (int i = 1; index < n; i++) {
    result += t[index];
    index += i;
  }
  cout << result;

  return 0;
}
```

This optimized code is more efficient in both running time and memory usage. It minimizes the use of `cout`, uses a more efficient loop condition, and removes unnecessary string initialization.