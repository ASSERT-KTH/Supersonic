The original code reads a string and then outputs every i-th character from the string until it reaches the end. It does this by using an if condition inside a for loop to check whether the index is out of bounds. This is unnecessary as the for loop itself can be used to control the iteration.

Here are the step-by-step optimizations:

1. Instead of using 'int b = 0' to increment the index and 'int i' to control the increment amount, you can use just 'int i' for both purposes. This reduces the number of variables and makes the code more readable.

2. The if condition inside the for loop is not needed as the loop condition itself can be used to check whether the index is out of bounds. This reduces the number of comparisons and makes the code run faster.

3. The original code reads an integer 'n' from the input but doesn't use it for anything. You can remove this to simplify the code and reduce memory usage.

4. The original code reads the input string after reading 'n'. However, since 'n' is not used, you can read the string immediately.

5. The original code uses 'cout' inside a loop to output each character separately. This results in multiple calls to 'cout', which is slower than concatenating the characters into a string and outputting the string once after the loop.

Here is the optimized code:

```c++
#include <iostream>
#include <string>
using namespace std;

int main() {
  string t, output = "";
  cin >> t;
  for (int i = 0; i < t.size(); i += (i+1)) {
    output += t[i];
  }
  cout << output;
  return 0;
}
```
This optimized code has fewer variables, fewer comparisons, fewer calls to 'cout', and is simpler and more readable than the original code. It should also run faster and use less memory.