This program reads a string `t` and an integer `n` from the input. Then it outputs every `i`-th character of the string `t`, where `i` runs from 1 to `n`. 

Optimizations:

1. The condition `b < n` is redundant because the loop is already limited by `i <= n`. So, we can remove this condition.
2. The output can be buffered before sending to `cout` to reduce I/O operations, which are generally slow. We can achieve this by storing the output characters in a string and using `cout` only once.
3. There is no need to initialize `t` with an empty string.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
int main() {
  int n, b = 0;
  cin >> n;
  string t, output;
  cin >> t;
  for (int i = 1; i <= n; i++) {
    output += t[b];
    b += i;
  }
  cout << output;
  return 0;
}
```

Note:
This optimized code assumes that the input string `t` and integer `n` are valid. If `n` is larger than the size of `t`, it will attempt to access out-of-bounds characters in `t`. If your program needs to handle such cases, you need to add boundary checks.