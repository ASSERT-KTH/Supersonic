#include <algorithm>
#include <climits>
#include <cmath>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <tuple>
#include <vector>
#define LSOne(S) ((S) & -(S))
const long long P = 1e9 + 7;
const double EPS = 1e-11;
using namespace std;

vector<long long> v(2e5 + 1);
vector<long long> cnt(2e5 + 1, 0);
vector<long long> dp(2e5 + 1, 0);

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  scanf("%d", &t);
  while (t--) {
    int n;
    scanf("%d", &n);
    v.resize(n);
    fill(cnt.begin(), cnt.end(), 0);
    fill(dp.begin(), dp.end(), 0);
    for (int i = 0; i < n; i++) {
      scanf("%lld", &v[i]);
      cnt[v[i]]++;
    }
    sort(v.begin(), v.end());
    long long best = 0;
    for (int i = 1; i <= 2e5; i++) {
      if (cnt[i] == 0)
        continue;
      int sq = sqrt(i);
      for (int j = 2; j <= sq; j++) {
        if (i % j == 0) {
          long long max_dp = max(dp[j], dp[i / j]);
          dp[i] = max(dp[i], max_dp);
        }
      }
      dp[i] = max(dp[i], dp[1]);
      dp[i] += cnt[i];
      best = max(best, dp[i]);
    }
    printf("%d\n", n - best);
  }
}