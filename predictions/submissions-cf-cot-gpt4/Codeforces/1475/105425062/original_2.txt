Firstly, let's optimize the algorithm:

1. We can see that the outer loop iterates through `dp` array and the inner loop iterates from 2 to `sqrt(i)`. The `sqrt(i)` function is called for each `i`, this can be costly. We can calculate the square root before the loop and use it inside the loop. That will save computation time.

2. In the inner loop, we are checking if `i` is divisible by `j` or `i/j`. However, if `i` is divisible by `j`, then it is also divisible by `i/j` (since `i = j * (i/j)`), so checking `dp[i/j]` seems redundant.

3. The `max(dp[i], max(dp[j], dp[i / j]))` line can be simplified because we know that `dp[i]` initially is 0 and `dp[j]` and `dp[i/j]` are always non-negative, so the `max(dp[i]` part isn't necessary.

4. When `cnt[i]` is 0, we don't need to calculate `dp[i]` because it won't be used in the future, so we can continue to the next iteration.

5. The `dp[1]` comparison is not necessary in each iteration. We can keep track of the maximum `dp[i]` value and use it later.

6. `v` vector is sorted but not used.

Here is the optimized version:

```c++
#include <cmath>
#include <iostream>
#include <vector>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    vector<long long> cnt(2e5 + 1, 0);
    for (int i = 0; i < n; i++) {
      long long x;
      cin >> x;
      cnt[x]++;
    }
    vector<long long> dp(2e5 + 1, 0);
    long long best = 0;
    for (int i = 1; i < dp.size(); i++) {
      if (cnt[i] == 0)
        continue;
      int root = sqrt(i);
      for (int j = 2; j <= root; j++) {
        if (i % j == 0) {
          dp[i] = max(dp[i], dp[j]);
        }
      }
      dp[i] += cnt[i];
      best = max(best, dp[i]);
    }
    cout << n - best << '\n';
  }
}
```

This version is more efficient in terms of computation time because it avoids unnecessary calculations and uses only the necessary data structures. It also avoids the cost of sorting which is not used in the program.