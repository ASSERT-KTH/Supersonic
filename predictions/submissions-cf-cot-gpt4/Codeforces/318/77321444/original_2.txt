The given C++ program is already quite optimized in terms of running time and memory usage. However, there are a few minor improvements that can be made to further optimize the program. 

1. Use of Macro: The use of macros (#define) for simple operations like pushing an element in a vector (pb), creating a pair (mp) or defining a vector of long long (vl) is not recommended. These macros are not being used in the program and removing them will reduce the memory footprint of the executable.

2. Unnecessary Variables: The variables 'i' and 'j' are defined but not used anywhere in the program. Removing these will again reduce the memory usage.

3. Bitwise Operation: Bitwise operation 'n & 1' to check if a number is odd can be replaced with the modulus operation 'n % 2'. This is because the bitwise operation can be confusing for some developers and the modulus operation is more universally understood.

4. I/O Speedup: The 'FAST' macro, which speeds up I/O operations, is only useful for very large inputs or outputs. If the inputs or outputs are not large, this code is unnecessary and can be removed.

Here is the optimized version of the program:

```cpp
#include <iostream>
using namespace std;

int32_t main() {
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif

  int t = 1;
  while (t--) {
    int n, k;
    cin >> n >> k;
    if (n % 2) {
      if (k <= (n / 2) + 1) {
        cout << 2 * k - 1 << endl;
      } else {
        cout << 2 * (k - n / 2 - 1) << endl;
      }
    } else {
      if (k <= n / 2) {
        cout << 2 * k - 1 << endl;
      } else
        cout << 2 * (k - n / 2) << endl;
    }
  }
  return 0;
}
```

This optimized version of the program is functionally identical to the original program, but it uses less memory and is slightly more easy to understand due to the removal of unnecessary macros and variables.