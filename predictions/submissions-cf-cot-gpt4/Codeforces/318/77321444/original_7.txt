Here are the steps of optimization:

1. Remove unnecessary macros: The macro `FAST` is used to speed up input/output operations. However, in this specific case, it's not necessary because the amount of data processed is small. Also, the macros `vl`, `pb`, `mp`, and `all` are not being used in the current code. Removing these will help in making the code cleaner and easier to understand.

2. Use of bit manipulation: In the current code, the even and odd scenarios are treated separately. However, the code for both scenarios is nearly identical, except for a minor difference in the calculation of the mid-point. This can be optimized by using a bit manipulation trick to calculate the mid-point for both even and odd numbers.

Here's the optimized code:

```c++
#include <iostream>
using namespace std;

int32_t main() {
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  int t = 1;
  while (t--) {
    int n, k;
    cin >> n >> k;
    int mid = (n + 1) / 2; // This will work for both even and odd numbers
    if (k <= mid) {
      cout << 2 * k - 1 << endl;
    } else {
      cout << 2 * (k - mid) << endl;
    }
  }
  return 0;
}
```

In this optimized code, the redundant macros and bit manipulation have been removed and we calculate the mid point once for both even and odd numbers. This makes the code cleaner and more efficient.