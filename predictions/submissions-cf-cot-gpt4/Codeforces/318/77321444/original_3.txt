The given C/C++ program seems to be already quite optimized. However, there are a few aspects that can be tweaked for slight performance improvement.

1. **Replace division by 2 with bitwise right shift operation:** The division operation is relatively more expensive than the bitwise shift. Replacing division by 2 with bitwise right shift operation can save some CPU cycles.

2. **Avoid repetitive computation of `n/2` and `(n/2) + 1`:** The expressions `n/2` and `(n/2) + 1` are calculated multiple times in the code. It's better to calculate these values once, store them in variables and use these variables in the code. This will reduce the number of calculations and hence, the running time.

Here is the optimized code:

```c++
#include <bits/stdc++.h>
using namespace std;

#define FAST ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define vl vector<long long>
#define pb push_back
#define mp make_pair
#define all(v) v.begin(), v.end()
#define int long long
int i, j;

int32_t main() {
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  FAST;
  int t = 1;
  while (t--) {
    int n, k;
    cin >> n >> k;
    int half_n = n >> 1; //right shift operation
    int half_n_plus_1 = (n >> 1) + 1;
    if (n & 1) {
      if (k <= half_n_plus_1) { //using the computed value
        cout << 2 * k - 1 << endl;
      } else {
        cout << 2 * (k - half_n_plus_1) << endl; //using the computed value
      }
    } else {
      if (k <= half_n) { //using the computed value
        cout << 2 * k - 1 << endl;
      } else
        cout << 2 * (k - half_n) << endl; //using the computed value
    }
  }
  return 0;
}
```

Note: The use of `bits/stdc++.h` header file is discouraged as it includes a large number of header files which increases the compilation time. It is better to include only those header files which are actually needed in the program. However, since the task explicitly mentioned to make only small modifications to the original program, I kept it as is.