This program can be optimized in the following ways:

1. Remove the unused macros: This program defines a number of macros like `vl`, `pb`, `mp` and `all` which are not used anywhere in the program. Removing them would make the code cleaner and a bit faster.

2. Remove the unused global variables: This program declares two global variables `i` and `j` which are not used anywhere in the program. Removing them would save some memory.

3. Avoid using bitwise operations when not necessary: Bitwise operations are usually less readable and slower than arithmetic operations. In this case, the bitwise AND operation `n & 1` can be replaced with `n % 2`, which is more readable and possibly faster.

4. Simplify the conditions: The conditions inside the `if` and `else` blocks are identical, except for the values they compare `k` to. These values can be calculated before the `if` statement to simplify the conditions and avoid repetition.

Here is the optimized version of the program:

```cpp
#include <bits/stdc++.h>
using namespace std;

#define FAST ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)

int main() {
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  FAST;
  int t = 1;
  while (t--) {
    int n, k;
    cin >> n >> k;
    int mid = (n % 2 == 0) ? n / 2 : (n / 2) + 1;
    if (k <= mid) {
      cout << 2 * k - 1 << endl;
    } else {
      cout << 2 * (k - mid) << endl;
    }
  }
  return 0;
}
```

This optimized version of the program should have similar running time to the original one, but it uses less memory and is more readable.