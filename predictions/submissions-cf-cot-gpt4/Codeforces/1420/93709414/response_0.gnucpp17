#include <iostream>
#include <vector>
#include <set>
#include <unordered_set>
#include <map>
#include <unordered_map>
#include <queue>
#include <iomanip>
#include <cmath>
#include <cstring>

using int64_t = long long;

#define ld double
#define F first
#define S second
#define PB push_back
#define forn(i, a, b) for (i = a; i <= b; i++)
#define nfor(i, a, b) for (i = a; i >= b; i--)
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define clr(x, f) memset(x, f, sizeof(x))
#define pii pair<int, int>
#define vi vector<int>
#define vpii vector<pii>
#define vvi vector<vi>
#define si set<int>
#define spii set<pii>
#define usi unordered_set<int>
#define uspii unordered_set<pii>
#define mii map<int, int>
#define umii unordered_map<int, int>
#define pqmx priority_queue<int>
#define pqmn priority_queue<int, vi, greater<int>>
#define setbits(x) __builtin_popcountll(x)
#define tzbits(x) __builtin_ctzll(x)
#define lzbits(x) __builtin_clzll(x)
#define pbits(x) __builtin_parityll(x)
#define gcd __gcd
#define lcm(x, y) ((x) * (y)) / gcd(x, y)
#define endl '\n'
#define sz(s) (int)s.size()
#define sp(x, y) fixed << setprecision(y) << x
const int mod = 1000000007;
const int inf = 1000000000000000000;
const ld PI = 3.1415926535897932384626;
const ld eps = 1e-12;
const int N = 2e6 + 5;

inline int powerm(int base, int exp) {
  int res = 1;
  base %= mod;
  while (exp > 0) {
    if (exp & 1)
      res = (res * base) % mod;
    base = (base * base) % mod;
    exp = exp >> 1;
  }
  return res;
}

inline int power(int base, int exp) {
  int res = 1;
  while (exp > 0) {
    if (exp & 1)
      res = res * base;
    base = base * base;
    exp = exp >> 1;
  }
  return res;
}

inline float powerNeg(float base, int exp) {
  float temp;
  if (exp == 0)
    return 1;
  temp = powerNeg(base, exp / 2);
  if (exp % 2 == 0)
    return temp * temp;
  else {
    if (exp > 0)
      return base * temp * temp;
    else
      return (temp * temp) / base;
  }
}

inline int modinv(int exp) { return powerm(exp, mod - 2); }

void solve() {
  int i, j;
  int n, q;
  std::cin >> n >> q;
  vi a(n);
  forn(i, 0, n - 1) std::cin >> a[i];
  i = 0;
  int ans = 0;
  vi x;
  while (i < n) {
    while (i + 1 < n and a[i] < a[i + 1])
      i++;
    x.PB(a[i]);
    while (i + 1 < n and a[i] > a[i + 1])
      i++;
    x.PB(a[i]);
    i++;
  }
  forn(i, 0, sz(x) - 2) {
    if (i & 1)
      ans -= x[i];
    else
      ans += x[i];
  }
  std::cout << ans << std::endl;
}

int32_t main() {
  std::ios::sync_with_stdio(0);
  std::cin.tie(0);
  std::cout.tie(0);
  int t, T = 1;
  std::cin >> T;
  forn(t, 1, T) { solve(); }
  return 0;
}