Here are some steps to optimize this code:

1. Avoid using `#include <bits/stdc++.h>`. It includes lots of unnecessary headers which increase the compilation time. Instead, include only the necessary headers such as `iostream`, `vector` and `string`.

2. The macro `ceil(n, m)` is unused and can be removed.

3. We can notice that the `std::string` `s` is only used to check whether the character at the position `i` is '1'. This can be replaced by a `std::vector<bool>` to save memory.

4. The macro `all(x)` and `rall(x)` are unused and can be removed.

5. `pref` is a vector of integers. Since we only add 1 and subtract 1 from its elements, it can be a vector of `signed char` instead of `int` to save memory.

6. When the prefix sum `pref[i]` is zero, we count the number of consecutive zeros. Instead of incrementing the counter and checking if it's greater than zero each time, we can just increment the counter by `k + 1`. This reduces the number of iterations in the inner while loop.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <string>
using namespace std;
int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    int n, k, ans = 0;
    cin >> n >> k;
    vector<bool> s(n);
    char c;
    for (int i = 0; i < n; ++i) {
        cin >> c;
        s[i] = (c == '1');
    }
    vector<signed char> pref(n + 1);
    for (int i = 0; i < n; ++i)
      if (s[i])
        pref[max(0, i - k)] += 1, pref[min(n, i + k + 1)] -= 1;
    for (int i = 1; i < n; ++i)
      pref[i] += pref[i - 1];
    for (int i = 0; i < n; ) {
      if (pref[i] == 0) {
        int cnt = 0;
        while (i < n && pref[i] == 0) {
          cnt += k + 1;
          ++ans;
          i += cnt;
        }
      } else {
        ++i;
      }
    }
    cout << ans << '\n';
  }
}
```

Please note that the optimization of the code may vary depending on the specific inputs and the compiler optimizations. It is always recommended to profile the code with realistic inputs to find the most effective optimizations.