Optimization Steps:

1. If we observe the code, we can see that we are using a function `min` and `max` inside a loop. This can be avoided by handling these conditions manually because these functions have overhead. So, we can replace them with simple `if` conditions. 

2. Also, there are two separate loops for calculating prefix sum and doing the main work, we can merge these two loops to save some running time.

3. Moreover, we can remove the usage of `std::vector` as we know the size of the array beforehand. We can use a simple array which is faster than `std::vector`.

4. A minor optimization can be done by removing the usage of `std::endl` and replacing it with `\n` as `std::endl` causes unnecessary flushing of the output buffer.

5. In addition, the `all(x)` and `rall(x)` macro definitions are not used anywhere in the code. They can be removed.

Optimized Code:

```cpp
#include <iostream>
#include <string>
#define ceil(n, m) ((n / m) + (n % m ? 1 : 0))

typedef long long ll;
typedef long double ld;

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    int n, k, ans = 0;
    string s;
    cin >> n >> k >> s;
    int pref[n + 1] = {0};
    for (int i = 0; i < n; ++i)
      if (s[i] == '1') {
        if (i - k >= 0) pref[i - k] += 1;
        if (i + k + 1 <= n) pref[i + k + 1] += -1;
        pref[i] += (i > 0 ? pref[i - 1] : 0);
        if (pref[i] == 0) {
          int cnt = 0;
          while (i < n && pref[i] == 0) {
            ++cnt;
            if (cnt > 0)
              ++ans, cnt = -1 * k;
            ++i;
          }
        }
      }
    cout << ans << '\n';
  }
}
```

Note: This optimization is done by considering the code is written in C++. If the code was written in C, then dynamic memory allocation (malloc or calloc) should be used instead of array declaration `int pref[n + 1] = {0};`.