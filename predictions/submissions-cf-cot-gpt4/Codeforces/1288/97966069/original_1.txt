Optimization steps:

1. Removing unused macros, typedefs and functions. They increase the size of the binary file and can confuse the reader.
2. Reducing the scope of variables. This reduces the time in which the variable has to be kept in memory.
3. As the `solve` function doesn't affect any state outside its scope, it should take its parameters as arguments instead of reading from `cin`. This allows the function to be pure and easier to reason about.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
typedef long long ll;

void solve(ll n, ll d) {
  if (d <= n) {
    cout << "YES" << endl;
    return;
  }
  for (int i = 1; i <= n; i++) {
    ll q = ((d - 1) / (i + 1)) + 1;
    ll t = i + q;
    if (t <= n) {
      cout << "YES" << endl;
      return;
    }
  }
  cout << "NO" << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;
  while (t--) {
    ll n, d;
    cin >> n >> d;
    solve(n, d);
  }

  return 0;
}
```

Please note that the optimization here is minimal as the code was already well optimized. The changes here are mainly to improve readability and maintainability, and will have negligible impact on runtime and memory usage.