Optimization Steps:

1. The first optimization that can be done is to remove the unnecessary includes and defines. Including <bits/stdc++.h> is not recommended as it includes almost all the standard libraries which increases the compile time. Also, the unnecessary defines can be removed to make the code cleaner.

2. The next optimization is to reduce the number of function parameters. The functions pe() and ps() have been overloaded too many times, which can create unnecessary overhead. A variadic function or using a container like vector can solve this issue.

3. The loop condition in solve() function can be optimized. The loop runs from 1 to n, but it can be stopped when i > sqrt(d). This is because for i > sqrt(d), the value of q will always be greater than i, and hence t will always be greater than n. This can reduce the number of iterations significantly when n is very large.

4. The standard output stream cout is not very fast. For faster IO, you can use printf instead of cout.

Optimized Program:

```
#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

typedef long long ll;

int t;

template <typename T>
void printElems(const T& container) {
    for (const auto& elem : container) {
        printf("%d ", elem);
    }
    printf("\n");
}

void solve() {
    ll n, d;
    scanf("%lld %lld", &n, &d);
    if (d <= n) {
        printf("YES\n");
        return;
    }
    for (int i = 1; i <= sqrt(d); i++) {
        ll q = ((d - 1) / (i + 1)) + 1;
        ll t = i + q;
        if (t <= n) {
            printf("YES\n");
            return;
        }
    }
    printf("NO\n");
}

int main() {
    scanf("%d", &t);
    while (t--) {
        solve();
    }
    return 0;
}
```