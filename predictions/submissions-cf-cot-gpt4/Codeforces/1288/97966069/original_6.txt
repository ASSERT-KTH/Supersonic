Optimizations:

1. The `bits/stdc++.h` header includes lots of unnecessary headers which increases compile time. Only include necessary headers instead.

2. Macros (`#define`) are used extensively. This can make the code harder to debug and understand. It's better to use functions or constants instead.

3. The `fastio` macro is used to speed up I/O operations. However, it's generally recommended to avoid this as it can cause problems with interactive problems and reading/writing files. If you really need fast I/O, use `std::ios::sync_with_stdio(false)` and `std::cin.tie(nullptr)` directly in the main function.

4. The `pe` and `ps` template functions are unnecessary since you can use `std::cout` directly. This will make the code cleaner and easier to understand.

5. In the solve function, the loop iterates from 1 to n. This can be optimized by using binary search instead of linear search.

Optimized code:

```c++
#include <iostream>
#include <vector>
using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;

bool check(ll mid, ll n, ll d) {
    ll q = (d - 1) / (mid + 1) + 1;
    ll t = mid + q;
    return t <= n;
}

void solve() {
    ll n, d;
    cin >> n >> d;
    if (d <= n) {
        cout << "YES\n";
        return;
    }

    ll left = 1, right = n;
    while (left < right) {
        ll mid = left + (right - left) / 2;
        if (check(mid, n, d)) {
            right = mid;
        } else {
            left = mid + 1;
        }
    }

    if (check(left, n, d)) {
        cout << "YES\n";
    } else {
        cout << "NO\n";
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int t;
    cin >> t;
    while (t--) {
        solve();
    }

    return 0;
}
```

Remember that any optimization should not change the logic of the program. The above code still follows the logic of the original one.