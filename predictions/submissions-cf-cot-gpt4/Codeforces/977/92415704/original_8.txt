The optimization can be performed in the following ways:

1. Reducing unnecessary operations and checks: In the bfs function, each node is marked as visited twice, first when it is pushed to the queue and then when it is popped from the queue. This redundancy can be avoided by marking a node as visited only once, when it is pushed to the queue.

2. Using Fast IO: The scanf and printf functions are slower compared to cin and cout. To speed up the IO operations, we can use cin and cout along with ios_base::sync_with_stdio(false) and cin.tie(NULL).

3. Using reserve for vector: If we know the size of the vector beforehand, we can reserve the memory in advance to avoid reallocation of memory during runtime.

Optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;

vector<vector<int>> v;
vector<bool> vis;
int nn, ne;

void bfs(int u) {
  nn = 0, ne = 0;
  queue<int> q;
  q.push(u);
  while (!q.empty()) {
    u = q.front();
    q.pop();
    nn++;
    if (v[u].size() == 2)
      ne++;
    for (int i = 0; i < (int)v[u].size(); i++) {
      int p = v[u][i];
      if (!vis[p]) {
        vis[p] = true;
        q.push(p);
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, m, a, b, c = 0;
  cin >> n >> m;

  v.resize(n+1);
  vis.resize(n+1, false);

  while (m--) {
    cin >> a >> b;
    v[a].push_back(b);
    v[b].push_back(a);
  }

  for (int i = 1; i <= n; i++) {
    if (!vis[i]) {
      bfs(i);
      if (nn == ne)
        c++;
    }
  }
  cout << c << "\n";
  return 0;
}
```

In this optimized program, the vector v and vis are resized according to the input size n. The bfs function is modified to mark a node as visited only when it is pushed to the queue. The use of cin and cout along with ios_base::sync_with_stdio(false) and cin.tie(NULL) speeds up the IO operations.