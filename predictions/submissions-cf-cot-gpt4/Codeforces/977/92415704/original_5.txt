Here are the optimizations that can be made:

1. The first optimization is to get rid of the `#include <bits/stdc++.h>`. This header file is not standard and it includes almost all standard C++ libraries which increases the compile time.

2. In the bfs function, we are marking a node as visited twice: once just before pushing it to the queue and again when popping it from the queue. We can remove the second one as it is redundant.

3. Instead of using `scanf` and `printf`, we can use `cin` and `cout` with `ios_base::sync_with_stdio(false); cin.tie(NULL);` to increase the I/O speed.

4. We are using global arrays which are not a good practice. Instead, we can pass them as arguments to the bfs function.

5. We can use `std::vector::reserve` to allocate memory in advance for `v`. This will reduce the number of reallocations when elements are added.

Optimized Code:

```
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

void bfs(int u, vector<int> v[], bool vis[], int& nn, int& ne) {
  nn = 0, ne = 0;
  vis[u] = true;
  queue<int> q;
  q.push(u);
  while (!q.empty()) {
    u = q.front();
    q.pop();
    nn++;
    if (v[u].size() == 2)
      ne++;
    for (int i = 0; i < v[u].size(); ++i) {
      int p = v[u][i];
      if (!vis[p]) {
        vis[p] = true;
        q.push(p);
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, m, a, b, c = 0;
  cin >> n >> m;
  vector<int> v[n+1];
  bool vis[n+1] = {false};
  v->reserve(n+1);
  while (m--) {
    cin >> a >> b;
    v[a].push_back(b);
    v[b].push_back(a);
  }
  for (int i = 1; i <= n; ++i) {
    if (!vis[i]) {
      int nn, ne;
      bfs(i, v, vis, nn, ne);
      if (nn == ne)
        c++;
    }
  }
  cout << c << '\n';
  return 0;
}
```