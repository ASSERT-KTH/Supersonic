This C++ program appears to be reasonably efficient already, but there are a few areas where we could possibly make small improvements:

1. The condition `if (v[u].size() == 2)` inside the while loop in `bfs()` function is checked for every node. If the size of the vector `v[u]` doesn't change during the loop, then the condition will yield the same result every time. It can be checked once before the loop and stored in a boolean variable.

2. There's an unnecessary assignment `vis[u] = true;` inside the while loop in `bfs()` function. We have already set `vis[u]` to true before pushing it to the queue, so this assignment just repeats the work.

3. Reserve memory for each vector in the array `v`. This is likely to improve performance if the vectors will contain many elements.

4. Use pre-increment (++i) instead of post-increment (i++) in the loop. This is because post-increment involves a copy operation, which isn't necessary in this context.

Here's the optimized version of your program:

```cpp
#include <bits/stdc++.h>
using namespace std;
vector<int> v[200010];
bool vis[200010];
int nn, ne;
void bfs(int u) {
  nn = 0, ne = 0;
  vis[u] = true;
  queue<int> q;
  q.push(u);
  bool size_two = (v[u].size() == 2);
  while (!q.empty()) {
    u = q.front();
    q.pop();
    nn++;
    if (size_two)
      ne++;
    for (int i = 0; i < (int)v[u].size(); i++) {
      int p = v[u][i];
      if (!vis[p]) {
        vis[p] = 1;
        q.push(p);
      }
    }
  }
}
int main() {
  int i, j, n, m, a, b, c = 0;
  scanf("%d %d", &n, &m);
  for(i=0; i<n; i++){
    v[i].reserve(m);
  }
  while (m--) {
    scanf("%d %d", &a, &b);
    v[a].push_back(b);
    v[b].push_back(a);
  }
  for (i = 1; i <= n; ++i) {
    if (!vis[i]) {
      bfs(i);
      if (nn == ne)
        c++;
    }
  }
  printf("%d\n", c);
  return 0;
}
```
Please note that these optimizations may not significantly improve the performance of your program. The effectiveness of these optimizations largely depends on the specific input data and the compiler you're using.