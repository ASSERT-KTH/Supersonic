#include <iostream>
#include <vector>
#include <unordered_set>
#include <queue>
using namespace std;

vector<unordered_set<int>> v(200010);
bool vis[200010];
int nn, ne;

void bfs(int u) {
  nn = 0, ne = 0;
  vis[u] = true;
  queue<int> q;
  q.push(u);
  while (!q.empty()) {
    u = q.front();
    q.pop();
    nn++;
    for (int p : v[u]) {
      if (!vis[p]) {
        vis[p] = true;
        q.push(p);
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n, m, a, b, c = 0;
  cin >> n >> m;
  while (m--) {
    cin >> a >> b;
    v[a].insert(b);
    v[b].insert(a);
  }
  for (int i = 1; i <= n; i++) {
    if (!vis[i]) {
      bfs(i);
      if (nn == ne && v[i].size() == 2)
        c++;
    }
  }
  cout << c << '\n';
  return 0;
}