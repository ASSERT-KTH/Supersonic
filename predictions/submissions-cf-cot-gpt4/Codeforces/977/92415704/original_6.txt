The given C++ program is already quite optimized. However, there are some areas where the program can be further optimized:

1. Avoid unnecessary reassignment: in the bfs function, the vis[u] is set to true twice, which is unnecessary. The second assignment (vis[u] = true) can be removed.

2. Use prefix increment: in the for loop, prefix increment (i.e., ++i) is faster than postfix increment (i.e., i++) in C++. This is because the postfix increment involves a temporary variable to store the initial value which leads to an extra move operation.

3. Use fast I/O methods: Instead of using scanf and printf, use cin and cout with ios_base::sync_with_stdio(false) and cin.tie(NULL). This will make I/O operations faster.

4. Use "\n" instead of std::endl: std::endl is slower than "\n" because it causes a flush operation.

Here is the optimized version of the program:

```c++
#include <bits/stdc++.h>
using namespace std;
vector<int> v[200010];
bool vis[200010];
int nn, ne;
void bfs(int u) {
  nn = 0, ne = 0;
  vis[u] = true;
  queue<int> q;
  q.push(u);
  while (!q.empty()) {
    u = q.front();
    q.pop();
    nn++;
    if (v[u].size() == 2)
      ne++;
    for (int i = 0; i < (int)v[u].size(); ++i) {
      int p = v[u][i];
      if (!vis[p]) {
        vis[p] = 1;
        q.push(p);
      }
    }
  }
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int i, j, n, m, a, b, c = 0;
  cin >> n >> m;
  while (m--) {
    cin >> a >> b;
    v[a].push_back(b);
    v[b].push_back(a);
  }
  for (i = 1; i <= n; ++i) {
    if (!vis[i]) {
      bfs(i);
      if (nn == ne)
        c++;
    }
  }
  cout << c << "\n";
  return 0;
}
```