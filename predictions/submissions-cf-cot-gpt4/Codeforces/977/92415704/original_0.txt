The given C++ program performs a Breadth-First Search (BFS) on a graph represented using an adjacency list and counts the number of connected components where each node has exactly two adjacent nodes.

Here are some ways to optimize this program:

1. Removing unnecessary `vis[u] = true;` statement: After a node is inserted into the queue, it's marked as visited. Marking the node as visited again when it's removed from the queue is unnecessary.

2. Using `std::ios::sync_with_stdio(false);` and `std::cin.tie(NULL);` to speed up cin and cout operations: This makes `std::cin` and `std::cout` more efficient by preventing them from syncing with the C-style input/output operations.

3. Using `++i` instead of `i++` in loops: The post-increment (`i++`) creates a copy of `i`, increments `i`, and then returns the copy. The pre-increment (`++i`) directly increments `i` and returns `i`. In this case, the result of the operation isn't used, so the copy is unnecessary.

4. Using `const auto&` in range-based for loops instead of indexing: This improves performance by preventing unnecessary copies and makes the code cleaner.

Here is the optimized version of your program:

```cpp
#include <bits/stdc++.h>
using namespace std;
vector<int> v[200010];
bool vis[200010];
int nn, ne;

void bfs(int u) {
  nn = 0, ne = 0;
  vis[u] = true;
  queue<int> q;
  q.push(u);
  while (!q.empty()) {
    u = q.front();
    q.pop();
    nn++;
    if (v[u].size() == 2)
      ne++;
    for (const auto& p: v[u]) {
      if (!vis[p]) {
        vis[p] = true;
        q.push(p);
      }
    }
  }
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);

  int i, n, m, a, b, c = 0;
  scanf("%d %d", &n, &m);
  while (m--) {
    scanf("%d %d", &a, &b);
    v[a].push_back(b);
    v[b].push_back(a);
  }
  for (i = 1; i <= n; ++i) {
    if (!vis[i]) {
      bfs(i);
      if (nn == ne)
        c++;
    }
  }
  printf("%d\n", c);
  return 0;
}
```