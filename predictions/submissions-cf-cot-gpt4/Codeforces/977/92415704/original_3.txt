Step by step optimization:

1. The "#include <bits/stdc++.h>" includes lots of unnecessary header files which increase the compilation time. Hence, we will replace it with the necessary header files.

2. The variable 'nn' is incremented in each iteration of the while loop in bfs() function. A more efficient way is to calculate the size of the queue at the end of the BFS operation.

3. The "using namespace std;" is considered bad practice in the global scope. It is better to use the "std" prefix where needed.

4. In the bfs() function, 'vis[u]' is set to true twice. We can remove the second assignment inside the while loop as it is redundant.

5. We are using C-style IO functions (scanf and printf) in a C++ program. For consistency, we should use C++ style IO (cin and cout).

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <queue>

std::vector<int> v[200010];
bool vis[200010];
int ne;

void bfs(int u) {
  ne = 0;
  vis[u] = true;
  std::queue<int> q;
  q.push(u);
  while (!q.empty()) {
    u = q.front();
    q.pop();
    if (v[u].size() == 2)
      ne++;
    for (int i = 0; i < (int)v[u].size(); i++) {
      int p = v[u][i];
      if (!vis[p]) {
        vis[p] = true;
        q.push(p);
      }
    }
  }
  if (q.size() == ne)
    return q.size();
  else
    return 0;
}

int main() {
  int n, m, a, b, c = 0;
  std::cin >> n >> m;
  while (m--) {
    std::cin >> a >> b;
    v[a].push_back(b);
    v[b].push_back(a);
  }
  for (int i = 1; i <= n; i++) {
    if (!vis[i]) {
      c += bfs(i);
    }
  }
  std::cout << c << std::endl;
  return 0;
}
```
Please note that in C++, for safety reasons, using scanf and printf is not recommended. Instead, use std::cin and std::cout.