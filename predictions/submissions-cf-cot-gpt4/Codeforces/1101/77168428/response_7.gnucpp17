#include <bits/stdc++.h>
using namespace std;
#pragma GCC optimize("O3")
#define fs first
#define sc second
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define pb push_back
#define MP make_pair
#define sz(x) (int)x.size()
#define fastio ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define sqr(x) ((x) * (x))
const int N = 2e5 + 100;
vector<int> g[N], val(N), d(N), primes;
unordered_map<int, int> dp[N]; // Change map to unordered_map
int ans = 0;

vector<int> get(int x) {
  vector<int> ret;
  for (int i = 2; i * i <= x; i++) {
    if (x % i == 0) {
      ret.pb(i);
      while (x % i == 0)
        x /= i;
    }
  }
  if (x != 1)
    ret.pb(x);
  return ret;
}

struct max2 {
  int x = 0, y = 0;
  max2() {}
  void rlx(int z) {
    if (z >= x)
      y = x, x = z;
    else if (z >= y)
      y = z;
  }
  int sum() { return x + y; }
};

void dfs(int v, int p) {
  vector<int> cur = get(val[v]);
  int curSize = sz(cur); // Store the size of cur to avoid multiple function calls
  vector<max2> t(curSize);
  for (auto u : g[v]) {
    if (u == p)
      continue;
    dfs(u, v);
    for (int i = 0; i < curSize; i++) { // Use stored size
      int x = cur[i];
      if (!dp[u].count(x))
        continue;
      t[i].rlx(dp[u][x]);
    }
  }
  for (int i = 0; i < curSize; i++) { // Use stored size
    int x = cur[i];
    ans = max(ans, t[i].sum() + 1);
    dp[v][x] = t[i].x + 1;
  }
}