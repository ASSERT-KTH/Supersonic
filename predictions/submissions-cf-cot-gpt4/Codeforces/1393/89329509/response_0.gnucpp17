#include <iostream>
#include <algorithm>
#include <iomanip>
#define int long long
using namespace std;

void fast_io() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

signed main() {
  fast_io();
  cout << fixed << setprecision(8);
  const int maxn = 2e3 + 7;
  int ul[maxn][maxn];
  int ur[maxn][maxn];
  int dl[maxn][maxn];
  int dr[maxn][maxn];
  char kek[maxn][maxn];
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      cin >> kek[i][j];
    }
  }
  for (int i = 1; i < n; i++) {
    for (int j = 1; j < m; j++) {
      if (kek[i][j] == kek[i - 1][j] && kek[i][j] == kek[i][j - 1]) {
        ul[i][j] = min(ul[i - 1][j], ul[i][j - 1]) + 1;
      }
      if (kek[i][j] == kek[i - 1][m - j - 1] && kek[i][j] == kek[i][m - j]) {
        ur[i][m - j - 1] = min(ur[i - 1][m - j - 1], ur[i][m - j]) + 1;
      }
    }
  }
  for (int i = n - 2; i >= 0; i--) {
    for (int j = 1; j < m; j++) {
      if (kek[i][j] == kek[i + 1][j] && kek[i][j] == kek[i][j - 1]) {
        dl[i][j] = min(dl[i + 1][j], dl[i][j - 1]) + 1;
      }
      if (kek[i][j] == kek[i + 1][m - j - 1] && kek[i][j] == kek[i][m - j]) {
        dr[i][m - j - 1] = min(dr[i + 1][m - j - 1], dr[i][m - j]) + 1;
      }
    }
  }
  int ans = 0;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      ans += min({ul[i][j], ur[i][j], dl[i][j], dr[i][j]}) + 1;
    }
  }
  cout << ans << endl;
}