Step 1: The array a[1000000] is not used apart from storing the input. We can use a temporary variable instead of this array to reduce memory usage.

Step 2: The check for d[x] % 4 == 0 is redundant in the "+" case because it is always true when d[x] % 2 == 0 is true. Same for d[x] % 4 == 3 in the "-" case, it is always true when d[x] % 2 != 0. We can remove these redundant checks to reduce the number of operations.

Step 3: The check for "k >= 4 && p > 0" can be simplified as "k > p && p > 0". This is because if p > 0, there must be at least 4 elements that are multiples of 2 (from the condition k >= 4), so k > p must be true. This reduces the number of operations.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;

long long n, q, d[1000000], k, x, p;
char c;

int main() {
  cin >> n;
  for (long long i = 0; i < n; i++) {
    cin >> x;
    d[x]++;
    if (d[x] % 2 == 0)
      k++;
    if (d[x] % 4 == 0)
      p++;
  }
  cin >> q;
  while (q--) {
    cin >> c >> x;
    if (c == '+') {
      d[x]++;
      if (d[x] % 2 == 0)
        k++;
    } else {
      d[x]--;
      if (d[x] % 2 != 0)
        k--;
    }
    if (k > p && p > 0)
      cout << "YES\n";
    else
      cout << "NO\n";
  }
  return 0;
}
```
