Here are the steps to optimize the given program:

1. The `#include <bits/stdc++.h>` is a non-standard header file and slows down the compilation process because it includes a lot of unnecessary libraries. It's better to include only the necessary libraries like `iostream`, `vector`, `map`, etc.

2. Use `std::ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` to disable synchronization between the C and C++ standard streams. This can significantly improve the input/output efficiency.

3. `long long i, n, a[1000000], q, d[1000000], k, x, p;` This line is declaring all variables as global which is unnecessary and consumes extra memory. It's better to declare variables where they are needed.

4. In the for loop, `i` is initialized as `1` and `n` is the limit which is not a common practice in C++. It's better to initialize `i` as `0` and `n` as the limit. This can also help to avoid index out of bounds errors.

5. Instead of using arrays `a[1000000]` and `d[1000000]`, we could use `std::vector<long long>`. This allows dynamic memory allocation and is better in terms of memory usage.

6. In the second for loop, instead of checking the condition `q--`, it's better to use `q > 0` as it makes the code more readable.

Now, let's apply these steps to the given program:

```cpp
#include <iostream>
#include <vector>
using namespace std;
int main() {
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    long long n, q, k = 0, x, p = 0;
    cin >> n;
    vector<long long> a(n), d(1000000, 0);
    for (long long i = 0; i < n; i++) {
        cin >> a[i];
        d[a[i]]++;
        if (d[a[i]] % 2 == 0)
            k++;
        if (d[a[i]] % 4 == 0)
            p++;
    }
    cin >> q;
    while (q > 0) {
        char c;
        cin >> c >> x;
        if (c == '+') {
            d[x]++;
            if (d[x] % 4 == 0)
                p++;
            if (d[x] % 2 == 0)
                k++;
        } else {
            d[x]--;
            if (d[x] % 4 == 3)
                p--;
            if (d[x] % 2 != 0)
                k--;
        }
        if (k >= 4 && p > 0)
            cout << "YES\n";
        else
            cout << "NO\n";
        q--;
    }
    return 0;
}
```

This optimized code is more memory efficient and has a better input/output performance.