Here are the steps to optimize the given C/C++ program:

1. Remove the `#include <bits/stdc++.h>` line. This header file is actually a GCC extension that includes most of the standard libraries. It's convenient for competitive programming but not recommended for production code due to its high compilation time. Instead, we'll include only the required headers: `iostream` and `vector`.

2. Use `std::vector` instead of C-style arrays. C-style arrays don't provide the same level of flexibility and safety as `std::vector`. With vectors, we can easily adjust the size dynamically, which can save memory if `n` and `q` are less than 1000000.

3. Use pre-increment (`++x`) instead of post-increment (`x++`) when the result of the operation isn't used. Pre-increment can be more efficient because it doesn't need to create a temporary copy of the variable.

4. Use `std::ios_base::sync_with_stdio(false)` and `std::cin.tie(NULL)`. These lines can significantly speed up the I/O operations. The first line disables the synchronization between the C and C++ standard streams, and the second one unties `cin` from `cout`. It means that we don't need to flush the `cout` buffer before each `cin`.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

long long i, n, q, k, x, p;
char c;
std::vector<long long> a, d;

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  
  std::cin >> n;
  a.resize(n+1);
  d.resize(n+1, 0);
  
  for (i = 1; i <= n; i++) {
    std::cin >> a[i];
    ++d[a[i]];
    if (d[a[i]] % 2 == 0)
      ++k;
    if (d[a[i]] % 4 == 0)
      ++p;
  }
  
  std::cin >> q;
  while (q--) {
    std::cin >> c >> x;
    
    if (c == '+') {
      ++d[x];
      
      if (d[x] % 4 == 0)
        ++p;
      
      if (d[x] % 2 == 0)
        ++k;
    } else {
      --d[x];
      
      if (d[x] % 4 == 3)
        --p;
      
      if (d[x] % 2 != 0)
        --k;
    }
    
    if (k >= 4 && p > 0)
      std::cout << "YES\n";
    else
      std::cout << "NO\n";
  }
  
  return 0;
}
```

This optimized program should have lower memory usage due to the use of `std::vector` and faster running time due to the I/O optimization.