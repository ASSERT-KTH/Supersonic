There are a number of optimizations that can be done in the program to reduce its running time and memory usage.

1. Minimize the use of long long data type: The long long data type consumes more memory than integer data type. Therefore, if possible, use integer data type.
2. Reduce repetitive calculations: In the given program, the modulus operation is used multiple times. To avoid such repetitive operation, you can store the result of modulus operation in a variable and use it when needed.
3. Use pre-increment and pre-decrement operators: Pre-increment (++i) and pre-decrement (--i) operators are faster than post-increment (i++) and post-decrement (i--) operators. Therefore, replace the post operators with the pre operators.

Here is the optimized version of the program:

```
#include <bits/stdc++.h>
using namespace std;
int i, n, a[1000000], q, d[1000000], k, x, p;
char c;
int main() {
  cin >> n;
  for (i = 1; i <= n; i++) {
    cin >> a[i];
    int mod = ++d[a[i]] % 4;
    if (mod % 2 == 0)
      k++;
    if (mod == 0)
      p++;
  }
  for (cin >> q; q--; ) {
    cin >> c >> x;
    int mod;
    if (c == '+') {
      mod = ++d[x] % 4;
      if (mod % 2 == 0)
        k++;
      if (mod == 0)
        p++;
    } else {
      mod = --d[x] % 4;
      if (mod == 3)
        p--;
      if (mod % 2 != 0)
        k--;
    }
    if (k >= 4 && p > 0)
      cout << "YES\n";
    else
      cout << "NO\n";
  }
}
```

Please note that the above optimization may not significantly reduce the running time and memory usage of the program because the main performance bottleneck of this program is its algorithmic complexity, which is not addressed in this optimization.