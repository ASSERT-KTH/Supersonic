The given program can be optimized in a few ways:

1. **Avoid using `#include <bits/stdc++.h>`**: It is a header file in C++ which includes every standard library. Including this can slow down the compiler process, as the compiler needs to parse the entire standard library, which can be heavy.

2. **Avoid using `using namespace std;`**: It can potentially lead to name conflicts, which can lead to variable naming issues later on.

3. **Optimize the Array Size**: The arrays 'a' and 'd' have been given a size of 1000000 without considering the input size 'n'. This can lead to unnecessary memory consumption. The size of these arrays can be assigned dynamically based on the input 'n'. 

4. **Optimize the `if` conditions**: You have two conditions `(d[x] % 4 == 0)` and `(d[x] % 2 == 0)`. The second condition will always be true if the first condition is true, so you could save some calculation time by using an `else if` clause for the second condition.

5. **Avoid I/O inside the loop**: The repeated use of `cout` inside the loop can slow down the program. We can create a string to collect all the output and print it at once after the loop.

Here is the optimized code:

```c++
#include <iostream>
#include <vector>

int main() {
  long long n, q, k = 0, x, p = 0;
  char c;
  std::cin >> n;
  std::vector<long long> a(n+1), d(n+1);
  for(long long i = 1; i <= n; i++) {
    std::cin >> a[i];
    d[a[i]]++;
    if (d[a[i]] % 4 == 0)
      p++;
    else if (d[a[i]] % 2 == 0)
      k++;
  }
  std::cin >> q;
  std::string output;
  while(q--) {
    std::cin >> c >> x;
    if (c == '+') {
      d[x]++;
      if (d[x] % 4 == 0)
        p++;
      else if (d[x] % 2 == 0)
        k++;
    } else {
      d[x]--;
      if (d[x] % 4 == 3)
        p--;
      else if (d[x] % 2 != 0)
        k--;
    }
    output += (k >= 4 && p > 0) ? "YES\n" : "NO\n";
  }
  std::cout << output;
  return 0;
}
```
This optimized code should be faster and consume less memory than the original version.