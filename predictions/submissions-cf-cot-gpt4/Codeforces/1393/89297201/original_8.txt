Here are some steps to optimize the given program:

1. Instead of using `bits/stdc++.h`, we should include only the necessary headers. This reduces the compilation time and makes the program more portable as `bits/stdc++.h` is not standard.
2. The variable `i` is declared as a global variable but it's only used in the `main` function. It should be declared locally in the `main` function.
3. The array `a` is not needed. We can simply use a temporary variable to hold the input for `a[i]`.
4. The checks `d[x] % 4 == 0` and `d[x] % 2 == 0` are done twice if `c == '+'` and `d[x]` is even. Similarly, `d[x] % 4 == 3` and `d[x] % 2 != 0` are done twice if `c == '-'` and `d[x]` is odd. We can eliminate this redundancy by checking if `d[x]` is even or odd first, then do the specific check inside that block.
5. The `cout` statements can be combined into one using the ternary operator.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  long long n, q, d[1000000] = {0}, k = 0, x, p = 0;
  char c;
  
  cin >> n;
  for (long long i = 1; i <= n; i++) {
    cin >> x;
    d[x]++;
    if (d[x] % 2 == 0) {
      k++;
      if (d[x] % 4 == 0)
        p++;
    }
  }
  
  cin >> q;
  while (q--) {
    cin >> c >> x;
    if (c == '+') {
      d[x]++;
      if (d[x] % 2 == 0) {
        k++;
        if (d[x] % 4 == 0)
          p++;
      }
    } else {
      d[x]--;
      if (d[x] % 2 != 0) {
        k--;
        if (d[x] % 4 == 3)
          p--;
      }
    }
    
    cout << ((k >= 4 && p > 0) ? "YES\n" : "NO\n");
  }
  
  return 0;
}
```
This optimized program reduces memory usage by eliminating the array `a` and also reduces computation time by reducing the number of modulo operations. It also combines the `cout` statements into one for cleaner code.