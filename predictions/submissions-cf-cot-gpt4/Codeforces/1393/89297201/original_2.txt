Optimization Steps:

1. We can save the input/output time by using the `ios_base::sync_with_stdio(false); cin.tie(NULL);` line that reduces the time taken to read from stdin and write to stdout.

2. We can reduce the duplication of identical condition checks by storing the result of the modulus operation and reusing it.

3. We can reduce the number of decrement operations by taking advantage of the fact that the counts are always non-negative. Instead of decrementing `k` and `p` when `d[x]` is decreased, we can increment `k` and `p` when `d[x]` is about to reach even or multiple of 4. This can be done by checking `d[x] % 4 == 1` and `d[x] % 2 == 1` respectively for the '+' operation and `d[x] % 4 == 3` and `d[x] % 2 == 0` respectively for the '-' operation.

Optimized Code:

```cpp
#include <bits/stdc++.h>
using namespace std;
long long i, n, a[1000000], q, d[1000000], k, x, p;
char c;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> n;
  for (i = 1; i <= n; i++) {
    cin >> a[i];
    d[a[i]]++;
    int rem2 = d[a[i]] % 2;
    int rem4 = d[a[i]] % 4;
    if (rem2 == 0)
      k++;
    if (rem4 == 0)
      p++;
  }
  for (cin >> q; q--;) {
    cin >> c >> x;
    if (c == '+') {
      d[x]++;
      if (d[x] % 4 == 1)
        p++;
      if (d[x] % 2 == 1)
        k++;
    } else {
      d[x]--;
      if (d[x] % 4 == 3)
        p--;
      if (d[x] % 2 == 0)
        k--;
    }
    if (k >= 4 && p > 0)
      cout << "YES\n";
    else
      cout << "NO\n";
  }
}
```

Note: In real-world programming, you should avoid using `#include <bits/stdc++.h>` as it includes too many unnecessary headers and can slow down your compile time significantly. It's better to just include the libraries that you will actually use.