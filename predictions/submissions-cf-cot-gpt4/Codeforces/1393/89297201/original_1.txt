The original C/C++ program has a few inefficiencies that can be optimized:

1. When calculating `d[x]` mod 4 or 2, the program performs the operation twice. This calculation can be stored in a temporary variable to avoid unnecessary repeat calculations. 

2. The `a` array is not used after the first loop. We can eliminate the use of this array completely by directly reading the input value into a temporary variable and processing it immediately. This will save memory.

3. The `#include <bits/stdc++.h>` directive is not recommended because it includes a lot of unnecessary headers, which can slow down the compilation time. It's better to include only the necessary headers.

4. `i`, `n`, `q`, `k`, `x`, and `p` don't need to be of type `long long`. Changing their types to `int` will save memory.

5. Lastly, `std::ios::sync_with_stdio(false);` and `std::cin.tie(NULL);` can be added to speed up the `cin` and `cout` operations.

Here is the optimized version of the given program:

```cpp
#include <iostream>
#include <vector>

using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    int n;
    cin >> n;

    vector<int> d(1000000, 0);
    int k = 0, p = 0, temp;

    for (int i = 1; i <= n; i++) {
        cin >> temp;
        d[temp]++;
        if (d[temp] % 2 == 0)
            k++;
        if (d[temp] % 4 == 0)
            p++;
    }

    int q;
    cin >> q;
    char c;
    int x;

    while (q--) {
        cin >> c >> x;
        int mod4, mod2;
        if (c == '+') {
            d[x]++;
            mod4 = d[x] % 4;
            mod2 = d[x] % 2;
            if (mod4 == 0)
                p++;
            if (mod2 == 0)
                k++;
        } else {
            d[x]--;
            mod4 = d[x] % 4;
            mod2 = d[x] % 2;
            if (mod4 == 3)
                p--;
            if (mod2 != 0)
                k--;
        }
        if (k >= 4 && p > 0)
            cout << "YES\n";
        else
            cout << "NO\n";
    }

    return 0;
}
```

In this optimized version of the program, the memory usage has been reduced, and the number of calculations has been minimized, which will improve the running time.