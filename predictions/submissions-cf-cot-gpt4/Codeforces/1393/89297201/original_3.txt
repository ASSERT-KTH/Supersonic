The code block you provided is already optimized in many ways, but there's a small modification we can do to slightly improve its performance:

1. Use Fast I/O: In competitive programming, using `scanf` and `printf` functions instead of `cin` and `cout` can save some time because `cin` and `cout` are slower than `scanf` and `printf`. This is because `cin`/`cout` involve more overhead due to synchronization with `std::ios_base::sync_with_stdio(false);`.

2. Use `'\n'` instead of `endl`: `endl` causes a flush operation, which can be expensive in terms of time. Replacing `endl` with `'\n'` will avoid unnecessary flush operations.

Optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
long long i, n, a[1000000], q, d[1000000], k, x, p;
char c;
int main() {
  ios_base::sync_with_stdio(false); 
  cin.tie(NULL);
  
  cin >> n;
  for (i = 1; i <= n; i++) {
    cin >> a[i];
    d[a[i]]++;
    if (d[a[i]] % 2 == 0)
      k++;
    if (d[a[i]] % 4 == 0)
      p++;
  }
  for (cin >> q; q--;) {
    cin >> c >> x;
    if (c == '+') {
      d[x]++;
      if (d[x] % 4 == 0)
        p++;
      if (d[x] % 2 == 0)
        k++;
    } else {
      d[x]--;
      if (d[x] % 4 == 3)
        p--;
      if (d[x] % 2 != 0)
        k--;
    }
    if (k >= 4 && p > 0)
      cout << "YES\n";
    else
      cout << "NO\n";
  }
  return 0;
}
```

Please note, these optimizations are micro-optimizations and their effects on the performance of your program will be minimal. In general, the best way to optimize your code is to use effective data structures and algorithms, and optimize your logic.