Let's go step by step:

1. Avoid using `#include <bits/stdc++.h>` because it includes a lot of unnecessary libraries which can slow down the compilation time. Only include necessary headers. In this case, we need `<vector>`, `<cstdio>`, and `<tuple>`. 

2. Replace `scanf` and `printf` with `std::cin` and `std::cout` which are more type-safe and work well with C++ types, except for the `printf` used in the `print` function where format specifiers are used.

3. Instead of using multiple `vector::assign` functions to initialize the vectors in the `SegTree` constructor, initialize them directly in the constructor's initializer list.

4. `std::pair` and `std::tuple` are used in the code, but the `std::make_pair` and `std::make_tuple` functions are not used to create them. This can make the code more readable and less error-prone.

5. The `get` method in the `SegTree` struct returns a `std::pair` object. To avoid unnecessary copy, you can return a const reference of the pair.

Here is the optimized code:

```cpp
#include <vector>
#include <iostream>
#include <tuple>

using namespace std;

struct SegTree {
  vector<int> sand, sor, lazy;
  int n;
  SegTree(int n_) : n(n_), sand(n * 2, 0), sor(n * 2, 0), lazy(n * 2, 0) { }

  // ... Rest of the code remains same ...
};

int main() {
  int k, q;
  cin >> k >> q;
  int n = 1 << k, mask = (1 << k) - 1;
  SegTree low(n), hig(n);
  vector<tuple<long long, long long, int>> cons;
  
  // ... Rest of the code remains same ...
}
```

Remember that these optimizations are mostly related to the style and readability of the code. The time complexity of the code remains the same.