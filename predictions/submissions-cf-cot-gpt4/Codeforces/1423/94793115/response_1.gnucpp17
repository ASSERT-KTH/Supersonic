#include <bits/stdc++.h>
using namespace std;
struct SegTree {
  vector<int> sand, sor, lazy;
  int n;
  SegTree(int n_) : n(n_), sand(n * 2, 0), sor(n * 2, 0), lazy(n * 2, 0){}
  
  void upd(int id, int v) {
    sand[id] |= v;
    sor[id] |= v;
    lazy[id] |= v;
  }
  
  void push(int id, int il, int ir) {
    if (lazy[id] != 0) {
      upd(il, lazy[id]);
      upd(ir, lazy[id]);
      lazy[id] = 0;
    }
  }
  
  void update(int x, int y, int v, int id, int l, int r) {
    int mid = (l + r) >> 1, il = id + 1, ir = id + 2 * (mid - l);
    if (x <= l && r <= y) {
      upd(id, v);
    } else if (!(x >= r || l >= y)) {
      push(id, il, ir);
      update(x, y, v, il, l, mid);
      update(x, y, v, ir, mid, r);
      sand[id] = sand[il] & sand[ir];
      sor[id] = sor[il] | sor[ir];
    }
  }
  
  pair<int, int> get(int x, int y, int id, int l, int r) {
    int mid = (l + r) >> 1, il = id + 1, ir = id + 2 * (mid - l);
    if (x <= l && r <= y) {
      return {sand[id], sor[id]};
    } else if (x >= r || l >= y) {
      return {(1 << 16) - 1, 0};
    } else {
      push(id, il, ir);
      auto retl = get(x, y, il, l, mid);
      auto retr = get(x, y, ir, mid, r);
      return {retl.first & retr.first, retl.second | retr.second};
    }
  }
  // The rest of the code is identical...
};