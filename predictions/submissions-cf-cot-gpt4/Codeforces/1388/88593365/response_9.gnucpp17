#include <iostream>
#include <vector>
#include <array>
#include <queue>

using ll = long long;
using vi = std::vector<int>;
using ar = std::array<int, 2>;

#define pb push_back
#define all(v) (v).begin(), (v).end()
#define sz(x) (int)(x).size()

struct digraph {
  int n;
  std::vector<vi> adj, adj2;
  digraph(int _n, std::vector<ar> &e) {
    n = _n;
    adj = std::vector<vi>(n);
    adj2 = std::vector<vi>(n);
    for (auto &a : e) {
      adj[a[0]].pb(a[1]);
      adj2[a[1]].pb(a[0]);
    }
  }
  vi toposort() {
    vi d(n);
    std::queue<int> qu;
    for (int i = 0; i < n; ++i) {
      d[i] = sz(adj2[i]);
      if (!d[i])
        qu.push(i);
    }
    vi ans;
    while (qu.size()) {
      int u = qu.front();
      qu.pop();
      for (auto &v : adj[u]) {
        --d[v];
        if (!d[v])
          qu.push(v);
      }
      ans.pb(u);
    }
    if (sz(ans) < n)
      ans.clear();
    return ans;
  }
};

void solve() {
  int n;
  std::cin >> n;
  vi a(n), b(n);
  for (auto &i : a) std::cin >> i;
  for (auto &i : b) std::cin >> i;
  std::vector<ar> e;
  for (int i = 0; i < n; ++i)
    if (~b[i])
      e.pb({i, b[i] - 1});
  digraph g(n, e);
  int ans = 0;
  vi t = g.toposort(), ans1, d;
  for (auto &x : t) {
    if (a[x] > 0) {
      ans1.pb(x);
      ans += a[x];
      if (b[x] >= 0)
        a[b[x] - 1] += a[x];
    } else
      d.pb(x);
  }
  std::reverse(all(d));
  for (auto &x : d) {
    ans += a[x], ans1.pb(x);
  }
  std::cout << ans << "\n";
  for (auto &i : ans1) std::cout << i+1 << " ";
  std::cout << "\n";
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  int T = 1;
  for (int _ = 0; _ < T; ++_) { solve(); }
  return 0;
}