#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
#define CS custom_hash
#define vi vector
#define loop(i, a, b) for (ll i = a; i < b; i++)
#define For(i, n) for (int i = 0; i < (ll)n; i++)
#define Rev(i, n) for (int i = n - 1; i >= 0; i--)
#define Rep(i, n) for (int i = 1; i <= n; ++i)
#define F first
#define S second
#define pb push_back
#define em emplace_back
#define all(v) (v).begin(), (v).end()
#define mems(x, y) memset(x, y, sizeof(x))
#define sz(x) (int)(x).size()
#define mp(a, b) make_pair(a, b)
#define pf(n)                                                                  \
  {                                                                            \
    cout << n << "\n";                                                         \
    return;                                                                    \
  }
#define po(n) cout << n << "\n "
#define ar array
#define endl "\n"
#define PI acos(-1)
#define umap unordered_map
#define gmap gp_hash_table
// Removed multiple definition of debug
#define debug(x...)                                                            \
  cerr << "[" << #x << "] = [";                                                \
  _print(x)
template <class T>
using oset =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define F_OR(i, a, b, s)                                                       \
  for (int i = (a); ((s) > 0 ? i < (b) : i > (b)); i += (s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1)
#define FOR(...) F_ORC(__VA_ARGS__)(__VA_ARGS__)
#define EACH(x, a) for (auto &x : a)
// Passed m by const reference
template <typename T, typename V> void mdebug(const map<T, vi<V>>& m) {
  for (auto x : m) {
    cerr << x.F << " : [ ";
    for (auto c : x.S)
      cerr << c << " ";
    cerr << "]" << endl;
  }
}
// Continued...
// Removed unnecessary reverse operation
void solve() {
  // ...
  EACH(x, t) {
    if (a[x] > 0) {
      ans1.pb(x);
      ans += a[x];
      if (b[x] >= 0)
        a[b[x] - 1] += a[x];
    } else
      d.insert(d.begin(), x);
  }
  EACH(x, d)
  ans += a[x], ans1.pb(x);
  // ...
}
// Continued...