This code is already optimized for memory usage by using the "Sieve of Eratosthenes" algorithm to calculate the least prime factor (lpf) of every number below a limit (N). However, a few small modifications can be done to optimize it further:

1. Avoid multiple memory accesses: Instead of accessing `arr[i]` and `cont[f]` repeatedly in the loop, we can store them in a variable and use it.
2. Reuse calculated values: Instead of calculating `arr[i] / f` repeatedly in the loop, we can store this in a variable and use it.
3. Use prefix sum optimization: Instead of finding the maximum of array `cont` in a separate loop, we can find it while increasing the `cont[f]`.
4. Avoid unnecessary calculations: The condition `lpf[j] == 0` inside the sieve function is unnecessary because for every `j`, `lpf[j]` will be 0 initially.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define N 17000005
int lpf[N];
int cont[N];
void sieve() {
  for (int i = 2; i < N; i++) {
    if (lpf[i] == 0) {
      lpf[i] = i;
      for (ll j = i * (ll)i; j < N; j += i) {
        lpf[j] = i;
      }
    }
  }
}
int main() {
  sieve();
  int n;
  cin >> n;
  int arr[n];
  int mcd = 0;
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
    mcd = __gcd(mcd, arr[i]);
  }
  int maxi = 0;
  for (int i = 0; i < n; i++) {
    arr[i] /= mcd;
    while (arr[i] > 1) {
      int f = lpf[arr[i]];
      arr[i] /= f;
      while (arr[i] % f == 0)
        arr[i] /= f;
      cont[f]++;
      maxi = max(maxi, cont[f]);
    }
  }
  cout << (maxi == 0 ? -1 : n - maxi) << '\n';
  return 0;
}
```

Please note that this optimization only reduces the number of operations and memory accesses in the program, it doesn't change the time complexity. The time complexity of the program is still O(n log log n) for the sieve function, and O(n log n) for the main part of the program.
