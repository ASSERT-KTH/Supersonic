To optimize this program, we will:

1. Avoid using `bits/stdc++.h` as it includes a lot of unnecessary libraries which may increase compilation time. We will include only the necessary libraries.
2. Avoid using `using namespace std;` as it will bring everything from the `std` namespace into the global namespace which can cause naming conflicts and make the code harder to read and understand.
3. Instead of using `#define N 17000005`, we will use a constant variable `const int N = 17000005;`. It's a good practice to use `const` instead of `#define` in C++ because `const` variables have a specific type, they respect the scope rules and they can be debugged.
4. Use `std::ios::sync_with_stdio(false); cin.tie(NULL);` before cin and cout operations to speed up the IO operations.
5. Instead of typing `using ll = long long;`, we can directly use `long long`.
6. Use `std::vector` instead of C-style arrays as it provides dynamic sizes and other functionalities.
7. Use `std::max_element` function to find the maximum element in the array, which is more efficient and readable.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

const int N = 17000005;
int lpf[N];
int cont[N];

void sieve() {
    for (int i = 2; i < N; i++) {
        if (lpf[i] == 0) {
            lpf[i] = i;
            for (long long j = 1LL * i * i; j < N; j += i) {
                if (lpf[j] == 0)
                    lpf[j] = i;
            }
        }
    }
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(NULL);

    sieve();

    int n;
    std::cin >> n;

    std::vector<int> arr(n);
    int mcd = 0;
    
    for (int i = 0; i < n; i++) {
        std::cin >> arr[i];
        mcd = std::__gcd(mcd, arr[i]);
    }
    
    for (int i = 0; i < n; i++)
        arr[i] /= mcd;
    
    for (int i = 0; i < n; i++) {
        while (arr[i] > 1) {
            int f = lpf[arr[i]];
            cont[f]++;
            while (arr[i] % f == 0)
                arr[i] /= f;
        }
    }
    
    int maxi = *std::max_element(cont, cont + N);
    
    if (maxi == 0)
        std::cout << -1 << '\n';
    else
        std::cout << n - maxi << '\n';
    
    return 0;
}
```

This optimized version of the program is more readable, efficient and it follows good coding practices.