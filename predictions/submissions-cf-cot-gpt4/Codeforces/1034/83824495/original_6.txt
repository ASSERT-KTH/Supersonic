The given program calculates the least prime factor of numbers up to a certain limit (N = 17000005), and then it uses this information to perform some operations on an array of integers input by the user. The optimization steps are as follows:

1. The use of `#include <bits/stdc++.h>` is discouraged as it includes all the standard library headers and increases compilation time. Use only the necessary headers.

2. The use of global variables can be reduced. It can slow down the program and can also lead to bugs due to side effects. Here, we can change `lpf` and `cont` arrays to local arrays in `main()` and pass them to `sieve()` function.

3. Dynamic array allocation of `arr` can be replaced with `std::vector<int>` which is safer.

4. The `maxi` computation can be done in the same loop where `cont` is updated. This will save one complete iteration over the `cont` array.

5. The `sieve()` function uses a long long (`ll`) variable `j` for iteration. Since `j` is guaranteed to be below `N`, we can replace `ll` with `int`.

Here's the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

#define N 17000005

void sieve(int lpf[]) {
  for (int i = 2; i < N; i++) {
    if (lpf[i] == 0) {
      lpf[i] = i;
      for (int j = i * i; j < N; j += i) {
        if (lpf[j] == 0)
          lpf[j] = i;
      }
    }
  }
}

int main() {
  int lpf[N] = {0};
  int cont[N] = {0};
  
  sieve(lpf);
  
  int n;
  cin >> n;
  
  vector<int> arr(n);
  int mcd = 0;
  
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
    mcd = __gcd(mcd, arr[i]);
  }

  int maxi = 0;
  for (int i = 0; i < n; i++) {
    arr[i] /= mcd;
    while (arr[i] > 1) {
      int f = lpf[arr[i]];
      cont[f]++;
      maxi = max(maxi, cont[f]);
      while (arr[i] % f == 0)
        arr[i] /= f;
    }
  }

  if (maxi == 0)
    cout << -1 << '\n';
  else
    cout << n - maxi << '\n';
  return 0;
}
```
This optimized code should have a faster execution time and slightly reduced memory usage compared to the original version.