Let's go step by step.

1. In the `sieve()` function, the nested loop where `j` goes through all the multiples of `i` can be optimized. It is not needed to check again `lpf[j] == 0` inside the loop because `j` is always a multiple of `i` and it will not be affected by smaller primes.

2. In the `main()` function, the first loop where the greatest common divisor is calculated, and the second loop where all array elements are divided by the greatest common divisor can be combined into one loop. This will save one pass through the array, reducing time complexity.

3. Also, the two loops where each number is factorized and the maximum count of a factor is found can be combined. This will reduce another pass through the array.

4. Additionally, instead of saving the maximum count in a separate variable `maxi` and updating it in each iteration of the loop, we can use the built-in `max_element()` function after the loop. This function is highly optimized and will provide a significant performance boost.

Here is the optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define N 17000005
int lpf[N];
int cont[N];
void sieve() {
  for (int i = 2; i < N; i++) {
    if (lpf[i] == 0) {
      lpf[i] = i;
      for (ll j = 1LL * i * i; j < N; j += i) {
        lpf[j] = i;
      }
    }
  }
}
int main() {
  sieve();
  int n;
  cin >> n;
  int arr[n];
  int mcd = 0;
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
    mcd = __gcd(mcd, arr[i]);
    arr[i] /= mcd;
    while (arr[i] > 1) {
      int f = lpf[arr[i]];
      cont[f]++;
      while (arr[i] % f == 0)
        arr[i] /= f;
    }
  }
  int maxi = *max_element(cont, cont + N);
  if (maxi == 0)
    cout << -1 << '\n';
  else
    cout << n - maxi << '\n';
  return 0;
}
```
Please note that this optimization only reduces the time complexity. The memory usage is still the same because it depends on the size of the array and the maximum number `N`, which are unchanged.