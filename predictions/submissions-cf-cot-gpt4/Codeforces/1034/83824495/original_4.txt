Looking at this code, the following optimizations can be done:

1. Avoid unnecessary casting: In the line where we find the maximum count `maxi`, it is not necessary to cast `cont[i]` to `int` because it is already `int`. This would save some time because casting operations are not free.

2. Unnecessary repeated calculations: The `arr[i] % f == 0` condition in the nested while loop is calculated twice. We can calculate it once and store it in a variable.

3. Avoiding division operation: Division is a more expensive operation than multiplication. So, instead of dividing `arr[i]` by `f`, we can multiply `arr[i]` by the reciprocal of `f`. 

4. Use of `std::max`: Instead of using the `max` function, we can use an `if` statement. It is marginally faster because it avoids the function call overhead.

Let's apply these optimizations:

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define N 17000005
int lpf[N];
int cont[N];
void sieve() {
  for (int i = 2; i < N; i++) {
    if (lpf[i] == 0) {
      lpf[i] = i;
      for (ll j = 1LL * i * i; j < N; j += i) {
        if (lpf[j] == 0)
          lpf[j] = i;
      }
    }
  }
}
int main() {
  sieve();
  int n;
  cin >> n;
  int arr[n];
  int mcd = 0;
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
    mcd = __gcd(mcd, arr[i]);
  }
  for (int i = 0; i < n; i++) {
    arr[i] /= mcd;
  }
  for (int i = 0; i < n; i++) {
    while (arr[i] > 1) {
      int f = lpf[arr[i]];
      cont[f]++;
      bool condition = arr[i] % f == 0;
      while (condition) {
        arr[i] *= 1.0 / f;
        condition = arr[i] % f == 0;
      }
    }
  }
  int maxi = 0;
  for (int i = 0; i < N; i++) {
    if(cont[i] > maxi){
      maxi = cont[i];
    }
  }
  if (maxi == 0)
    cout << -1 << '\n';
  else
    cout << n - maxi << '\n';
  return 0;
}
```

Please note that these are tiny optimizations and in real-world scenarios, the difference could be negligible. However, in a competitive programming environment, these could make the difference between your solution being accepted or not due to time limits.