Optimization:

1. Reading User Input: Instead of reading the input into an array and then processing the array, we can process the input directly as we read it. This saves us the memory usage of the array and also the time that would have been spent iterating over the array. 

2. Calculating Greatest Common Divisor(GCD): Instead of calculating the GCD in a separate loop, we can calculate it while reading the input. 

3. Division of array elements by GCD: Instead of dividing the array elements by the GCD in a separate loop, we can do it while processing the input. 

4. Factorization and Count: Instead of using two nested while loops, we can use one while loop and one if condition to check the factor and count it. 

5. Finding Maximum: Instead of storing the count in an array and then finding the maximum, we can find the maximum while processing the input. 

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define N 17000005
int lpf[N];
int cont[N];
void sieve() {
  for (int i = 2; i < N; i++) {
    if (lpf[i] == 0) {
      lpf[i] = i;
      for (ll j = 1LL * i * i; j < N; j += i) {
        if (lpf[j] == 0)
          lpf[j] = i;
      }
    }
  }
}
int main() {
  sieve();
  int n;
  cin >> n;
  int mcd = 0, maxi = 0;
  for (int i = 0; i < n; i++) {
    int num;
    cin >> num;
    mcd = __gcd(mcd, num);
    num /= mcd;
    while (num > 1) {
      int f = lpf[num];
      cont[f]++;
      maxi = max(maxi, cont[f]);
      if (num % f == 0)
        num /= f;
    }
  }
  if (maxi == 0)
    cout << -1 << '\n';
  else
    cout << n - maxi << '\n';
  return 0;
}
```
This optimization reduces the number of loops in the program and hence reduces the running time. It also reduces the memory usage by avoiding the use of the array 'arr'.