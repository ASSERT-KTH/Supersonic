Your code is already quite optimized, but there are a few things that can be improved:

1. Redundant Code: There are some unnecessary macros in your code. Macros like "cont", "ff", "ss", "pb", "ins", "mp", "EPS", "INF" are not used in the code. Removing them will not affect the functionality of your code, but it will decrease the size of your code and make it cleaner.

2. Use of bitset: Bitset is a very memory-efficient container that can hold a large number of bits (boolean values). However, in your program, you're using it to represent a boolean array of size `maxN` which is 15000007. This is unnecessarily large for the task at hand. It could be made smaller or replaced with a vector<bool> if the size isn't known at compile time.

3. Use of unordered_map: Unordered maps in C++ are implemented using a hash table. They provide constant time lookups on average. However, if the number of distinct factors is small, it might be more efficient to use a simple array or a vector instead of an unordered map. This is because accessing an element in an array or a vector is generally faster than accessing an element in a hash table.

4. Sieve function: The sieve function can be optimized by iterating the second loop from i^2 to sqrt(maxN) instead of maxN. This is based on the fact that a larger factor of a number is always a multiple of a smaller factor that has already been processed.

Here is the optimized code:

```cpp
#include "bits/stdc++.h"
using namespace std;
#define int long long int
typedef vector<int> vi;
typedef pair<int, int> pi;
const int mod = 1000 * 1000 * 1000 + 7;
const double PI = 3.14159265358979323846264;
#define sz(a) (int)((a).size())
#define ip_arr(a, n) for (int i = 0; i < n; i++) cin >> a[i];
#define sortv(a) sort(a.begin(), a.end())
int gcd(int x, int y) { return y ? gcd(y, x % y) : x; }
void fio() { ios_base::sync_with_stdio(false); cin.tie(NULL); }
#ifndef ONLINE_JUDGE
#define setUpLocal freopen("/Users/asuryana/Documents/CP/input.txt", "r", stdin); freopen("/Users/asuryana/Documents/CP/output.txt", "w", stdout);
#else
#define setUpLocal
#endif
const int maxN = 15000007;
vector<bool> primes(maxN);
int spf[maxN];
void sieve() {
  fill(primes.begin(), primes.end(), true);
  primes[0] = primes[1] = false;
  for (int i = 2; i < maxN; i++) spf[i] = i;
  for (int i = 4; i < maxN; i += 2) {
    if (i != 2) primes[i] = false;
    spf[i] = 2;
  }
  for (int i = 3; i * i <= maxN; i++) {
    if (primes[i]) {
      for (int j = i * i; j < maxN; j += i) {
        primes[j] = false;
        spf[j] = i;
      }
    }
  }
}
vi countOfFactors(maxN);
void factorize(int n) {
  while (n != 1) {
    countOfFactors[spf[n]]++;
    n /= spf[n];
  }
}
void solve() {
  sieve();
  int n;
  cin >> n;
  vi v(n);
  int gcdIs = 0;
  for (int i = 0; i < n; i++) {
    cin >> v[i];
    gcdIs = gcd(gcdIs, v[i]);
  }
  for (int i = 0; i < n; i++) v[i] /= gcdIs;
  for (int eleInArray : v) factorize(eleInArray);
  int keep = 0;
  for (auto i : countOfFactors) keep = max(keep, i);
  keep ? (cout << n - keep) : (cout << "-1");
}
int32_t main() { fio(); setUpLocal; return solve(), 0; }
```