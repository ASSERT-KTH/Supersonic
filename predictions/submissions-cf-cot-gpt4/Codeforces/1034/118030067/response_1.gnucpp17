#include <iostream>
#include <vector>
#include <bitset>
#include <set>
#include <algorithm>

using namespace std;

typedef long long int ll;

const ll INF = LLONG_MAX;
const ll maxN = 15000007;
bitset<maxN> primes;
vector<ll> spf(maxN);

ll gcd(ll x, ll y) { return y ? gcd(y, x % y) : x; }

void sieve() {
  primes.set();
  primes[0] = primes[1] = 0;
  for (ll i = 2; i < maxN; i++)
    spf[i] = i;
  for (ll i = 4; i < maxN; i += 2) {
    if (i != 2)
      primes[i] = 0;
    spf[i] = 2;
  }
  for (ll i = 3; i < maxN; i++) {
    if (primes[i]) {
      for (ll j = i * i; j < maxN; j += i) {
        primes[j] = 0;
        spf[j] = i;
      }
    }
  }
}

vector<ll> countOfFactors(maxN, 0);
void factorize(ll n) {
  set<ll> primeFactors;
  while (n != 1) {
    primeFactors.insert(spf[n]);
    n /= spf[n];
  }
  for (ll i : primeFactors)
    countOfFactors[i]++;
}

void solve() {
  sieve();
  ll n;
  cin >> n;
  vector<ll> v(n);
  ll gcdIs = 0;
  for (ll i = 0; i < n; i++) {
    cin >> v[i];
    gcdIs = gcd(gcdIs, v[i]);
  }
  for (ll i = 0; i < n; i++) {
    v[i] /= gcdIs;
  }
  for (ll eleInArray : v) {
    factorize(eleInArray);
  }
  ll keep = 0;
  for (ll i : countOfFactors) {
    keep = max(keep, i);
  }
  keep ? (cout << n - keep) : (cout << "-1");
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  solve();
  return 0;
}