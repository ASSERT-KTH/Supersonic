Here are some steps we can take to optimize the program:

1. Avoid the use of `bits/stdc++.h` as it includes almost all header files which are not required and increases the compile time. Include only those libraries which are needed.
2. The `unordered_map<int, int> countOfFactors;` is declared globally, which is not good practice. It should be moved to the function where it's used.
3. The `sieve()` function is called every time `solve()` is called. If we are calling solve multiple times, the `sieve()` function will be called multiple times which is unnecessary. We can call the `sieve()` function in `main()` to avoid this.
4. `#define cont continue;` is not used in the program, so it can be removed.
5. The `setUpLocal()` function is used to set up local testing. In a production environment, this function is not required and can be removed.
6. Use `ios::sync_with_stdio(0);cin.tie(0);` to speed up the I/O operations.
7. Instead of using `#define`, we can use inline functions. Inline functions are faster because the compiler replaces the function call with the actual code, and it's better practice than using `#define`. 

Now, let's rewrite the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <bitset>
#include <unordered_map>
using namespace std;
typedef vector<int> vi;
typedef set<int> si;
typedef pair<int, int> pi;
typedef vector<pi> vpi;
typedef map<int, int> mi;
const int maxN = 15000007;
bitset<maxN> primes;
int spf[maxN];

inline int gcd(int x, int y) { return y ? gcd(y, x % y) : x; }

void sieve() {
  primes.set();
  primes[0] = primes[1] = 0;
  for (int i = 2; i < maxN; i++)
    spf[i] = i;
  for (int i = 4; i < maxN; i += 2) {
    if (i != 2)
      primes[i] = 0;
    spf[i] = 2;
  }
  for (int i = 3; i < maxN; i++) {
    if (primes[i]) {
      for (int j = i * i; j < maxN; j += i) {
        primes[j] = 0;
        spf[j] = i;
      }
    }
  }
}

void factorize(int n, unordered_map<int, int>& countOfFactors) {
  set<int> primeFactors;
  while (n != 1) {
    primeFactors.insert(spf[n]);
    n /= spf[n];
  }
  for (int i : primeFactors)
    countOfFactors[i]++;
}

void solve() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  int n;
  cin >> n;
  vi v(n);
  int gcdIs = 0;
  for (int i = 0; i < n; i++) {
    cin >> v[i];
    gcdIs = gcd(gcdIs, v[i]);
  }
  for (int i = 0; i < n; i++) {
    v[i] /= gcdIs;
  }
  unordered_map<int, int> countOfFactors;
  for (int eleInArray : v) {
    factorize(eleInArray, countOfFactors);
  }
  int keep = 0;
  for (auto i : countOfFactors) {
    keep = max(keep, i.second);
  }
  keep ? (cout << n - keep) : (cout << "-1");
}

int main() {
  sieve();
  solve();
  return 0;
}
```