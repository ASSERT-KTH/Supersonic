The given C++ program can be optimized in several ways:

1. **Avoiding Unnecessary Global Variables**: Global variables consume memory for the entire lifetime of program execution. Instead, create variables within the scope that they are needed. 

2. **Avoiding Unnecessary Macro Definitions**: Macros such as 'ff', 'ss', 'pb', 'ins', 'mp' etc. are not used in the program. They are unnecessary and removing them will clean up the code and reduce the memory footprint.

3. **Avoiding Redundant Computations**: The gcd is calculated multiple times in the for loop. Instead, it can be calculated once and stored in a variable for future use.

4. **Unnecessary Function Calls**: The function `fio()` is called once and never again. The two function calls within it can be placed in the main function.

5. **Efficient Data Structures**: A set is used to store prime factors, then iterate over the set to increase the count in the map. This can be optimized by using a map from the beginning to store the prime factors and their counts, eliminating the need for the set.

6. **Unnecessary Type Definitions**: Typedefs like vi, si, pi, vpi, mi are not used in the code. Removing them will clean up the code.

Now let's implement these optimizations:

```cpp
#include "bits/stdc++.h"
using namespace std;
#define int long long int
#define endl '\n'
#define EPS 1e-9
#define INF LLONG_MAX
const int mod = 1000 * 1000 * 1000 + 7;
const double PI = 3.14159265358979323846264;
const int maxN = 15000007;
bitset<maxN> primes;
int spf[maxN];

int gcd(int x, int y) { 
    return y ? gcd(y, x % y) : x; 
}

void sieve() {
  primes.set();
  primes[0] = primes[1] = 0;
  for (int i = 2; i < maxN; i++)
    spf[i] = i;
  for (int i = 4; i < maxN; i += 2) {
    if (i != 2)
      primes[i] = 0;
    spf[i] = 2;
  }
  for (int i = 3; i < maxN; i++) {
    if (primes[i]) {
      for (int j = i * i; j < maxN; j += i) {
        primes[j] = 0;
        spf[j] = i;
      }
    }
  }
}

unordered_map<int, int> countOfFactors;

void factorize(int n) {
  while (n != 1) {
    countOfFactors[spf[n]]++;
    n /= spf[n];
  }
}

void solve() {
  sieve();
  int n;
  cin >> n;
  vector<int> v(n);
  int gcdIs = 0;
  for (int i = 0; i < n; i++) {
    cin >> v[i];
    gcdIs = gcd(gcdIs, v[i]);
  }
  for (int i = 0; i < n; i++) {
    v[i] /= gcdIs;
  }
  for (int eleInArray : v) {
    factorize(eleInArray);
  }
  int keep = 0;
  for (auto i : countOfFactors) {
    keep = max(keep, i.second);
  }
  keep ? (cout << n - keep) : (cout << "-1");
}

int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
#ifndef ONLINE_JUDGE
  freopen("/Users/asuryana/Documents/CP/input.txt", "r", stdin);
  freopen("/Users/asuryana/Documents/CP/output.txt", "w", stdout);
#endif
  solve();
  return 0;
}
```