This program is already quite optimized in terms of memory usage and running time. However, there are a few small tweaks that could potentially improve the performance.

1. Reducing the use of macros: Macros like '#define' are replaced by their value at preprocessing time. If the value of a macro is large and it's used very frequently in the code, it might increase the size of the final machine code. In this case, macros like 'ip_arr' and 'op_arr' are not really necessary and could be removed.

2. Unnecessary 'if' statement in the sieve function: In the sieve function, there is an 'if' statement in the loop for 'i = 4' to 'maxN' that checks 'if (i != 2)'. This condition is always true in this case and this check could be removed.

3. Use 'reserve' for vector: If we know the size of the vector beforehand, we can use the 'reserve' function to preallocate the memory. This can avoid unnecessary reallocations and copies when the vector grows. In this case, we know that the size of the vector 'v' is 'n' so we can use 'reserve' before the loop where we read the values.

4. Use '++i' instead of 'i++': In C++, '++i' can be slightly faster than 'i++' because 'i++' creates a temporary copy of 'i', increments 'i', and then returns the temporary copy while '++i' simply increments 'i' and then returns 'i'. The difference is usually negligible but it could add up in a large loop.

Here is the optimized code:

```cpp
#include "bits/stdc++.h"
using namespace std;
#define int long long int
#define cont continue;
#define ff first
#define ss second
#define pb push_back
#define ins insert
#define mp make_pair
#define endl '\n'
typedef vector<int> vi;
typedef set<int> si;
typedef pair<int, int> pi;
typedef vector<pi> vpi;
typedef map<int, int> mi;
#define EPS 1e-9
#define INF LLONG_MAX
const int mod = 1000 * 1000 * 1000 + 7;
const double PI = 3.14159265358979323846264;
const pi steps[] = {{1, 0},  {0, 1}, {-1, 0},  {0, -1},
                    {1, -1}, {1, 1}, {-1, -1}, {-1, 1}};
#define isPowOfTwo(x) return (x && (!(x & (x - 1))));
#define sz(a) (int)((a).size())
#define present(c, x) ((c).find(x) != (c).end())
#define fill_arr(arr, n, i) fill(arr, arr + n, i)
#define fill_vec(v, n, i) fill(v.begin(), v.begin() + n, i);
#define sortv(a) sort(a.begin(), a.end())
int gcd(int x, int y) { return y ? gcd(y, x % y) : x; }
void fio() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
}
void setUpLocal() {
#ifndef ONLINE_JUDGE
  freopen("/Users/asuryana/Documents/CP/input.txt", "r", stdin);
  freopen("/Users/asuryana/Documents/CP/output.txt", "w", stdout);
#endif
}
const int maxN = 15000007;
bitset<maxN> primes;
int spf[maxN];
void sieve() {
  primes.set();
  primes[0] = primes[1] = 0;
  for (int i = 2; i < maxN; i++)
    spf[i] = i;
  for (int i = 4; i < maxN; i += 2) {
    primes[i] = 0;
    spf[i] = 2;
  }
  for (int i = 3; i < maxN; i++) {
    if (primes[i]) {
      for (int j = i * i; j < maxN; j += i) {
        primes[j] = 0;
        spf[j] = i;
      }
    }
  }
}
unordered_map<int, int> countOfFactors;
void factorize(int n) {
  set<int> primeFactors;
  while (n != 1) {
    primeFactors.insert(spf[n]);
    n /= spf[n];
  }
  for (int i : primeFactors)
    countOfFactors[i]++;
}
void solve() {
  sieve();
  int n;
  cin >> n;
  vi v;
  v.reserve(n);
  int gcdIs = 0;
  for (int i = 0; i < n; ++i) {
    int temp;
    cin >> temp;
    v.push_back(temp);
    gcdIs = gcd(gcdIs, temp);
  }
  for (int i = 0; i < n; ++i) {
    v[i] /= gcdIs;
  }
  for (int eleInArray : v) {
    factorize(eleInArray);
  }
  int keep = 0;
  for (auto i : countOfFactors) {
    keep = max(keep, i.ss);
  }
  keep ? (cout << n - keep) : (cout << "-1");
}
int32_t main() {
  fio();
  setUpLocal();
  return solve(), 0;
}

```