#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <bitset>
#include <unordered_map>

using namespace std;

typedef long long ll;
typedef vector<ll> vi;
typedef pair<ll, ll> pi;
typedef vector<pi> vpi;

const ll mod = 1000000007LL;
const double PI = 3.14159265358979323846264;
const pi steps[] = {{1, 0},  {0, 1}, {-1, 0},  {0, -1},
                    {1, -1}, {1, 1}, {-1, -1}, {-1, 1}};

inline bool isPowOfTwo(ll x) { return x && (!(x & (x - 1))); }
inline ll sz(const auto& a) { return a.size(); }
inline bool present(const auto& c, const auto& x) { return c.find(x) != c.end(); }

ll gcd(ll x, ll y) { return y ? gcd(y, x % y) : x; }

const ll maxN = 15000007;
bitset<maxN> primes;
ll spf[maxN];

void sieve() {
  primes.set();
  primes[0] = primes[1] = 0;
  for (ll i = 2; i < maxN; ++i)
    spf[i] = i;
  for (ll i = 4; i < maxN; i += 2) {
    if (i != 2)
      primes[i] = 0;
    spf[i] = 2;
  }
  for (ll i = 3; i < maxN; ++i) {
    if (primes[i]) {
      for (ll j = i * i; j < maxN; j += i) {
        primes[j] = 0;
        spf[j] = i;
      }
    }
  }
}

unordered_map<ll, ll> countOfFactors;
void factorize(ll n) {
  set<ll> primeFactors;
  while (n != 1) {
    primeFactors.insert(spf[n]);
    n /= spf[n];
  }
  for (const auto& i : primeFactors)
    countOfFactors[i]++;
}

void solve() {
  sieve();
  ll n;
  cin >> n;
  vi v(n);
  ll gcdIs = 0;
  for (ll i = 0; i < n; ++i) {
    cin >> v[i];
    gcdIs = gcd(gcdIs, v[i]);
  }
  for (ll i = 0; i < n; ++i) {
    v[i] /= gcdIs;
  }
  for (const auto& eleInArray : v) {
    factorize(eleInArray);
  }
  ll keep = 0;
  for (const auto& i : countOfFactors) {
    keep = max(keep, i.second);
  }
  keep ? (cout << n - keep) : (cout << "-1");
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  solve();
  return 0;
}