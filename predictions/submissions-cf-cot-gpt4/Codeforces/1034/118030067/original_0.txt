The provided C++ program is already quite optimized in terms of its logic and functionality. However, there are a few small adjustments we can do to optimize the memory and running time.

1. Remove redundant code: The function `fill_arr` and `fill_vec` are defined but not used anywhere in the program. Removing these functions will result in less memory usage.

2. Optimize `sieve` function: In the current implementation, the `sieve` function is checking for all numbers from 2 to maxN to find out if they are prime or not. We can optimize this by only checking for odd numbers after checking for 2. This is because all the even numbers are not prime except for 2. 

3. Remove unnecessary `#define`: The `#define` for `ip_arr` and `op_arr` are not used in the program. Removing these will result in less memory usage.

Here is the optimized code:

```cpp
#include "bits/stdc++.h"
using namespace std;
#define int long long int
#define ff first
#define ss second
#define pb push_back
#define ins insert
#define mp make_pair
#define endl '\n'
typedef vector<int> vi;
typedef set<int> si;
typedef pair<int, int> pi;
typedef vector<pi> vpi;
typedef map<int, int> mi;
#define EPS 1e-9
#define INF LLONG_MAX
const int mod = 1000 * 1000 * 1000 + 7;
const double PI = 3.14159265358979323846264;
const pi steps[] = {{1, 0},  {0, 1}, {-1, 0},  {0, -1},
                    {1, -1}, {1, 1}, {-1, -1}, {-1, 1}};
#define isPowOfTwo(x) return (x && (!(x & (x - 1))));
#define sz(a) (int)((a).size())
#define present(c, x) ((c).find(x) != (c).end())
#define sortv(a) sort(a.begin(), a.end())
int gcd(int x, int y) { return y ? gcd(y, x % y) : x; }
void fio() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
}
void setUpLocal() {
#ifndef ONLINE_JUDGE
  freopen("/Users/asuryana/Documents/CP/input.txt", "r", stdin);
  freopen("/Users/asuryana/Documents/CP/output.txt", "w", stdout);
#endif
}
const int maxN = 15000007;
bitset<maxN> primes;
int spf[maxN];
void sieve() {
  primes.set();
  primes[0] = primes[1] = 0;
  for (int i = 2; i < maxN; i++)
    spf[i] = i;
  for (int i = 4; i < maxN; i += 2) {
    if (i != 2)
      primes[i] = 0;
    spf[i] = 2;
  }
  for (int i = 3; i < maxN; i+=2) {
    if (primes[i]) {
      for (int j = i * i; j < maxN; j += i*2) {
        primes[j] = 0;
        spf[j] = i;
      }
    }
  }
}
unordered_map<int, int> countOfFactors;
void factorize(int n) {
  set<int> primeFactors;
  while (n != 1) {
    primeFactors.insert(spf[n]);
    n /= spf[n];
  }
  for (int i : primeFactors)
    countOfFactors[i]++;
}
void solve() {
  sieve();
  int n;
  cin >> n;
  vi v(n);
  int gcdIs = 0;
  for (int i = 0; i < n; i++) {
    cin >> v[i];
    gcdIs = gcd(gcdIs, v[i]);
  }
  for (int i = 0; i < n; i++) {
    v[i] /= gcdIs;
  }
  for (int eleInArray : v) {
    factorize(eleInArray);
  }
  int keep = 0;
  for (auto i : countOfFactors) {
    keep = max(keep, i.ss);
  }
  keep ? (cout << n - keep) : (cout << "-1");
}
int32_t main() {
  fio();
  setUpLocal();
  return solve(), 0;
}
```
This optimization will not drastically improve the performance or memory usage as the original code was already quite optimized, but it will make a small improvement.