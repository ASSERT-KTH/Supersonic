#include <iostream>
#include <cstdio>
#include <cstdlib>

#define ll long long

inline ll read() {
  ll k;
  std::cin >> k;
  return k;
}

unsigned int n, A, B, C, D;
unsigned int ans;
unsigned int F;
unsigned int p[2500000 + 2];
unsigned int P[1992], l;

inline unsigned int f(unsigned int x) {
  return ((A * x + B) * x + C) * x + D;
}

unsigned int qwq(int x) {
  return (unsigned int)(x - x / 2 - x / 3 - x / 5 + x / 6 + x / 10 + x / 15 -
                        x / 30);
}

bool check(unsigned int i, unsigned int x, unsigned int xx) {
  return i == 2 || i == 3 || i == 5 ||
         ((i & 1) && i % 3 != 0 && i % 5 != 0 &&
          !(p[(x = qwq(i)) >> 5] & ((unsigned int)1 << (x & xx))));
}

void process(unsigned int i, unsigned int &j, unsigned int &F1) {
  j = i;
  F1 = f(i);
  while (j <= n) {
    ans += (n / j) * F1;
    if ((ll)j * (ll)i > n)
      break;
    j *= i;
  }
}

int main() {
  ans = 0;
  unsigned int i, j, x, F1;
  bool flag = false;
  n = read();
  A = read(), B = read(), C = read(), D = read();
  int xx = (1 << 6) - 1;
  for (i = 2; i * 2 <= n; i++) {
    if (check(i, x, xx)) {
      if (!flag) {
        ++l;
        P[l] = i;
      }
      process(i, j, F1);
    }
    if ((ll)P[l] * i > n) {
      flag = true;
    }
    while ((ll)P[l] * i > n)
      l--;
    for (j = 1; j <= l && (ll)P[j] * i <= n; j++) {
      x = P[j] * i;
      if (check(i, x, xx)) {
        x = qwq(x);
        p[x >> 5] |= (unsigned int)1 << (x & xx);
      }
      if (i % P[j] == 0)
        break;
    }
  }
  for (; i <= n; i++) {
    if (check(i, x, xx)) {
      process(i, j, F1);
    }
  }
  std::cout << ans;
  return 0;
}