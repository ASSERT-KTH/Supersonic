#include <bits/stdc++.h>
#define ll long long
using namespace std;

inline ll read() {
  char s;
  ll k = 0, base = 1;
  while ((s = getchar()) != '-' && s != EOF && !(isdigit(s)))
    ;
  if (s == EOF)
    exit(0);
  if (s == '-')
    base = -1, s = getchar();
  while (isdigit(s)) {
    k = k * 10 + (s ^ '0');
    s = getchar();
  }
  return k * base;
}

unsigned int n, A, B, C, D;
unsigned int ans;
unsigned int F[2500000 + 2];
bool isPrime[2500000 + 2];

inline unsigned int f(unsigned int x) {
  return A * x * x * x + B * x * x + C * x + D;
}

void SieveOfEratosthenes() {
    memset(isPrime, true, sizeof(isPrime));
    for (int p = 2; p * p <= n; p++) {
        if (isPrime[p] == true) {
            for (int i = p * p; i <= n; i += p)
                isPrime[i] = false;
        }
    }
}

int main() {
  ans = 0;
  unsigned int i, j;
  n = read();
  A = read(), B = read(), C = read(), D = read();
  
  // Pre-compute the f(i) values
  for (i = 2; i <= n; i++) {
    F[i] = f(i);
  }
  
  SieveOfEratosthenes();
  
  for (i = 2; i <= n; i++) {
    if (isPrime[i]) {
      j = i;
      while (j <= n) {
        ans += (n / j) * F[i];
        if ((ll)j * i > n)
          break;
        j *= i;
      }
    }
  }
  cout << ans;
  return 0;
}