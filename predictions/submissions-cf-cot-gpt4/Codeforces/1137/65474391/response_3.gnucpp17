void up(int u, int t) {
  while (true) {
    int c = a[u].chn;
    int i = a[u].idx;
    auto iter = col[c].lower_bound(i), jter = col[c].begin();
    if (c == a[t].chn and a[t].idx != 0) {
      jter = col[c].lower_bound(a[t].idx);
      if (col[c].count(a[t].idx - 1) == 0) {
        col[c][a[t].idx - 1] = (*jter).se;
        pos[c][(*jter).se].insert(a[t].idx - 1);
      }
    }
    auto jcpy = jter;
    while (iter != jter) {
      int del = (*jter).fi + 1;
      if (jter != col[c].begin()) {
        auto jter_prev = std::prev(jter);
        del -= (*jter_prev).fi + 1;
      }
      update((*jter).se, -del);
      pos[c][(*jter).se].erase((*jter).fi);
      if (pos[c][(*jter).se].empty())
        pos[c].erase((*jter).se);
      ++jter;
    }
    if (iter == col[c].begin()) {
      update((*iter).se, -i - 1);
    } else {
      auto iter_prev = std::prev(iter);
      int p = (*iter_prev).fi;
      update((*iter).se, p - i);
    }
    if ((*iter).fi == i) {
      pos[c][(*iter).se].erase((*iter).fi);
      if (pos[c][(*iter).se].empty())
        pos[c].erase((*iter).se);
    }
    col[c].erase(jcpy, iter);
    col[c][i] = colour;
    pos[c][colour].insert(i);
    iter = col[c].find(i);
    if (iter == col[c].begin()) {
      update(colour, i + 1);
    } else {
      auto iter_prev = std::prev(iter);
      update(colour, i - (*iter_prev).fi);
      if (i == (*iter_prev).fi)
        update(colour, 1);
    }
    if (c == a[t].chn)
      break;
    else
      u = a[chain[c][0]].par;
  }
}