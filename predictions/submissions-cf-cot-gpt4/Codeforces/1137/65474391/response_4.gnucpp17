#include <cstdio>
#include <map>
#include <queue>
#include <set>
#define fi first
#define se second
using namespace std;
const int MAXN = 200005;
struct node {
  int cnt, par, lev, inp;
  int chn, idx, col, adj;
};
int n, q;
vector<int> g[MAXN];
node a[MAXN];
int bit[2 * MAXN];
int chains = 0, timer = 0, colour = 0;
vector<int> chain[MAXN];
map<int, int> col[MAXN];
map<int, set<int>> pos[MAXN];
int root[MAXN];
// replace cin and cout with scanf and printf 
void Init() {
  scanf("%d %d", &n, &q);
  for (int i = 1; i < n; ++i) {
    int u, v;
    scanf("%d %d", &u, &v);
    g[u].push_back(v);
    g[v].push_back(u);
  }
  a[n].par = -1;
  a[n].lev = 1;
  a[n].chn = 0;
  a[n].idx = 0;
  root[0] = n;
  colour = n;
}
// rest of your code
int LCA(int u, int v) {
  if (is_predecessor(u, v))
    return u;
  if (is_predecessor(v, u))
    return v;
  int t = a[u].chn;
  while (!is_predecessor(chain[t][0], v)) {
    t = a[a[chain[t][0]].par].chn;
  }
  int l = 0, r = chain[t].size() - 1, res = 0;
  while (l <= r) {
    int mid = (l + r) / 2;
    bool isPredMidU = is_predecessor(chain[t][mid], u);
    bool isPredMidV = is_predecessor(chain[t][mid], v);
    if (isPredMidU and isPredMidV) {
      res = mid;
      l = mid + 1;
    } else
      r = mid - 1;
  }
  return chain[t][res];
}
// rest of your code
int main() {
  Init();
  // rest of your code
}