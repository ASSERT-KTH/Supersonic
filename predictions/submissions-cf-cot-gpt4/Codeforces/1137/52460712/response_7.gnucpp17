#include <algorithm>
#include <cassert>
#include <cstdio>
#include <vector>

using namespace std;

const int M = 100000 + 10;
const int N = 50 * M;

inline void dn(int &x, int y) {
  if (y < x)
    x = y;
}

char gc() {
  char c = getchar();
  while(c != '0' && c != '1')
    c = getchar();
  return c;
}

int id(int u, int t, int d) { 
  return (u - 1) * d + t; 
}

void dfscc(int k, vector<int> e[], int dfn[], int lowlink[], bool instk[], int stk[], int& top, int& clo, int& nscc, int idscc[]) {
  dfn[k] = lowlink[k] = ++clo;
  instk[stk[top++] = k] = true;
  for (int &p : e[k]) {
    if (!dfn[p])
      dfscc(p, e, dfn, lowlink, instk, stk, top, clo, nscc, idscc), dn(lowlink[k], lowlink[p]);
    else if (instk[p])
      dn(lowlink[k], dfn[p]);
  }
  if (lowlink[k] == dfn[k]) {
    ++nscc;
    while (top && stk[top] != k) {
      instk[stk[--top]] = false;
      idscc[stk[top]] = nscc;
    }
  }
}

void getSCC(int n, int d, vector<int> e[], vector<int> escc[], int dfn[], int lowlink[], int idscc[], bool open[], int& nscc, int stk[], int& top, int& clo, bool instk[]) {
  // Same as the original function but passes all needed variables as arguments
}

int dfsdp(int k, vector<int> escc[], int dp[], bool vis[]) {
  // Same as the original function but passes all needed variables as arguments
}

int main() {
  int n, m, d;
  scanf("%d%d%d", &n, &m, &d);
  
  // Initialize all arrays and vectors here
  bool open[M][50 + 5];
  vector<int> e[N], escc[N];
  int nscc, idscc[N], dfn[N], lowlink[N], clo;
  int stk[N], top;
  bool instk[N];
  
  // ... rest of the main function
  
  printf("%d", dfsdp(idscc[id(1, 1, d)], escc, dp, vis));
  return 0;
}