The optimization will be focused on reducing unnecessary memory usage and improving runtime performance. Here are the steps:

1. Avoid unnecessarily large arrays: The size of the open array is [M][55], where M=100000+10. This is a large amount of memory being allocated. However, we can see that the second dimension of the array is only set to true if gc() - '0' is true. Therefore, we can replace the 2D array with a vector of pairs, where each pair is (u, j) if gc() - '0' is true. This can dramatically reduce memory usage.

2. Cache results of repeated function calls: In the main() function, the id() function is called multiple times with the same arguments. We can cache the results of these calls to avoid repeated computations. This can be done using an auxiliary array or map.

3. Reduce unnecessary vector reallocations: In the getSCC() function, we have a nested loop where we push_back into escc[idscc[k]]. If escc is a vector, this will cause repeated memory reallocations. To avoid this, we can reserve memory beforehand if we know the maximum size.

4. Use getchar_unlocked instead of getchar: In the gc() function, getchar is used to read characters. The getchar function is thread-safe, which means it locks the stdin each time it's called. If we know our program is single-threaded, we can use getchar_unlocked instead, which is faster because it doesn't do any locking.

Here is the optimized program:

```cpp
#include <algorithm>
#include <cassert>
#include <cstdio>
#include <vector>
using namespace std;
const int M = 100000 + 10, N = 50 * M;
inline void dn(int &x, int y) {
  if (y < x)
    x = y;
}
char gc() {
  char c = getchar_unlocked();
  if (c != '0' && c != '1')
    c = getchar_unlocked();
  return c;
}
int n, m, d;
vector<pair<int,int>> open;
int id_cache[N][N];
int id(int u, int t) { 
  if(!id_cache[u][t])
    id_cache[u][t] = (u - 1) * d + t;
  return id_cache[u][t];
}
vector<int> e[N], escc[N];
int nscc, idscc[N], dfn[N], lowlink[N], clo;
int stk[N], top;
bool instk[N];
void dfscc(int k) {
  dfn[k] = lowlink[k] = ++clo;
  instk[stk[top++] = k] = true;
  for (int &p : e[k]) {
    if (!dfn[p])
      dfscc(p), dn(lowlink[k], lowlink[p]);
    else if (instk[p])
      dn(lowlink[k], dfn[p]);
  }
  if (lowlink[k] == dfn[k]) {
    ++nscc;
    while (top && stk[top] != k) {
      instk[stk[--top]] = false;
      idscc[stk[top]] = nscc;
    }
  }
}
void getSCC(int n) {
  for (int k = 1; k <= n; ++k)
    if (!dfn[k])
      dfscc(k);
  for (int k = 1; k <= n; ++k) {
    escc[idscc[k]].reserve(e[k].size());
    for (int &p : e[k]) {
      if (idscc[k] != idscc[p])
        escc[idscc[k]].push_back(idscc[p]);
    }
  }
}
int ops[N];
int dp[N];
bool vis[N];
int dfsdp(int k) {
  if (vis[k])
    return dp[k];
  for (auto p : escc[k])
    dp[k] = max(dp[k], dfsdp(p));
  dp[k] += ops[k];
  vis[k] = 1;
  return dp[k];
}
int main() {
  scanf("%d%d%d", &n, &m, &d);
  for (int i = 1; i <= m; ++i) {
    int u, v;
    scanf("%d%d", &u, &v);
    for (int j = 1; j <= d; ++j)
      e[id(u, j)].push_back(id(v, j % d + 1));
  }
  for (int i = 1; i <= n; ++i)
    for (int j = 1; j <= d; ++j)
      if(gc() - '0')
        open.push_back({i,j});
  getSCC(n * d);
  for (auto &elem : open) {
    int tmp[50], ntmp = 0;
    if (open[elem.first][elem.second]) {
      tmp[ntmp++] = idscc[id(elem.first, elem.second)];
      sort(tmp, tmp + ntmp);
      ntmp = unique(tmp, tmp + ntmp) - tmp;
      for (int j = 0; j < ntmp; ++j)
        ++ops[tmp[j]];
    }
  }
  printf("%d", dfsdp(idscc[id(1, 1)]));
  return 0;
}
```
