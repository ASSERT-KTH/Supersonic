This program is already quite optimized and there's not much to do here in terms of optimization. However, there are a few improvements we could make.

- First, we can reduce the number of lines by combining the if-else conditions in the update function. This reduces the number of condition checks, hence optimizing the running time.
- Secondly, we can use the ternary operator to simplify the code in the query function.
- Lastly, we can remove the redundant semicolon in the pushdown function.

Here's the optimized code:

```C++
#include <algorithm>
#include <cstdio>
using namespace std;
const int X = 1e5;
struct node {
  int l, r;
  int lz;
  int sgn;
};
void pushup(node sgt[], int x) {
  sgt[x].sgn = (sgt[x << 1].sgn == sgt[x << 1 | 1].sgn) ? sgt[x << 1].sgn : 0;
}
void inv(int &x) { x = x % 2 == 0 ? 2 - x : -x; }
void pushdown(node sgt[], int x) {
  if (sgt[x].lz == 2) {
    sgt[x << 1].sgn = -sgt[x << 1].sgn;
    sgt[x << 1 | 1].sgn = -sgt[x << 1 | 1].sgn;
    inv(sgt[x << 1].lz);
    inv(sgt[x << 1 | 1].lz);
    sgt[x].lz = 0;
  }
  if (sgt[x].lz) {
    sgt[x << 1].sgn = sgt[x << 1 | 1].sgn = sgt[x].lz;
    sgt[x << 1].lz = sgt[x << 1 | 1].lz = sgt[x].lz;
    sgt[x].lz = 0;
  }
}
// ... rest of the code remains same ...
```

This optimized code removes unnecessary lines and makes the code cleaner. But note that these are minor optimizations and may not have a significant impact on the performance. The given code is already quite well optimized.