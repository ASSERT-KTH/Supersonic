To optimize this program, we can make the following changes:

1. **Avoid multiple calls to 'inv' function**:
   In the 'pushdown' and 'update' functions, there are multiple calls to the 'inv' function which is not necessary and can be optimized. You can directly calculate the inversion and assign it to the variable. This way, you can reduce the number of function calls which costs CPU cycles and hence enhance the performance.

2. **Avoid unnecessary 'if' conditions**: 
   In the main function, there are conditions if (x == 0) that will never be true because before these conditions there are other conditions that increment or decrement the 'x' variable if it is 0. So, we can remove these unnecessary conditions.

3. **Use 'putchar' instead of 'printf' for single character**: 
   For printing a single character, 'putchar' function is more efficient than 'printf'. So, in the last printf statement, we can replace 'printf' with 'putchar' for printing space or newline character.

Here is the optimized program:

```cpp
#include <algorithm>
#include <cstdio>
using namespace std;
const int X = 1e5;
struct node {
  int l, r;
  int lz;
  int sgn;
};
void pushup(node sgt[], int x) {
  if (sgt[x << 1].sgn == sgt[x << 1 | 1].sgn) {
    sgt[x].sgn = sgt[x << 1].sgn;
  } else {
    sgt[x].sgn = 0;
  }
}
void pushdown(node sgt[], int x) {
  if (sgt[x].lz == 2) {
    sgt[x << 1].sgn = -sgt[x << 1].sgn;
    sgt[x << 1 | 1].sgn = -sgt[x << 1 | 1].sgn;
    sgt[x << 1].lz = (sgt[x << 1].lz % 2 == 0 ? 2 - sgt[x << 1].lz : -sgt[x << 1].lz);
    sgt[x << 1 | 1].lz = (sgt[x << 1 | 1].lz % 2 == 0 ? 2 - sgt[x << 1 | 1].lz : -sgt[x << 1 | 1].lz);
    sgt[x].lz = 0;
  }
  if (sgt[x].lz) {
    sgt[x << 1].sgn = sgt[x].lz;
    sgt[x << 1 | 1].sgn = sgt[x].lz;
    sgt[x << 1].lz = sgt[x].lz;
    sgt[x << 1 | 1].lz = sgt[x].lz;
    sgt[x].lz = 0;
  }
}
//...
void update(node sgt[], int l, int r, int x, int val) {
  if (l <= sgt[x].l && r >= sgt[x].r) {
    if (val == 2) {
      sgt[x].sgn = (sgt[x].sgn % 2 == 0 ? 2 - sgt[x].sgn : -sgt[x].sgn);
      sgt[x].lz = (sgt[x].lz % 2 == 0 ? 2 - sgt[x].lz : -sgt[x].lz);
    } else {
      sgt[x].sgn = val;
      sgt[x].lz = val;
    }
    return;
  }
  //...
}
//...
int main() {
  //...
  while (q--) {
    //...
    if (s == '>') {
      x++;
      //if (x == 0) { x++; }
      //...
    } else {
      x--;
      //if (x == 0) { x--; }
      //...
    }
  }
  for (int i = 0; i < n; i++) {
    //...
    printf("%d", a[i] * r);
    if (i == n - 1) {
      putchar('\n');
    } else {
      putchar(' ');
    }
  }
  return 0;
}
```
Please note that optimization can depend on the specific scenario and data. The above changes are general improvements but may not be the optimal solution in all cases.