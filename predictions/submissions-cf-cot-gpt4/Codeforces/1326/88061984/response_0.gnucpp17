#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;
using lli = long long int;

int kmp(const string& s) {
  vector<int> lps(s.size(), 0);
  for (size_t i = 1; i < s.size(); i++) {
    int previous_index = lps[i - 1];
    while (previous_index > 0 && s[i] != s[previous_index]) {
      previous_index = lps[previous_index - 1];
    }
    lps[i] = previous_index + (s[i] == s[previous_index] ? 1 : 0);
  }
  return lps.back();
}

pair<int, int> remainingStringLongestPallindrome(const string& s) {
  string t = s + "?";
  reverse(s.begin(), s.end());
  t += s;
  int longest_prefix = kmp(t);
  reverse(t.begin(), t.end());
  int longest_suffix = kmp(t);
  return make_pair(longest_prefix, longest_suffix);
}

string longestPrefixSuffixPallindrome(const string& s) {
  int length = 0;
  int n = s.size();
  for (int i = 0, j = n - 1; i < j; i++, j--) {
    if (s[i] != s[j]) {
      break;
    }
    length++;
  }
  int start = length;
  int end = n - length;
  if (end - start > 0) {
    auto [longest_prefix, longest_suffix] = remainingStringLongestPallindrome(s.substr(start, end - start));
    if (longest_prefix > longest_suffix) {
      start += longest_prefix;
    } else {
      end -= longest_suffix;
    }
  }
  return s.substr(0, start) + s.substr(end, n - end);
}

int main() {
  lli t;
  cin >> t;
  while (t--) {
    string str;
    cin >> str;
    string ans = longestPrefixSuffixPallindrome(str);
    cout << ans << endl;
  }
}