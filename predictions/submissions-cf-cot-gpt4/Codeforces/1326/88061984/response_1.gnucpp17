#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;
typedef long long int lli;
#define sf(x) scanf("%d", &x)
#define sfl(x) scanf("%lld", &x)
#define pb push_back
#define fio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define frr(i, a) for (int i = 0; i < a; i++)
#define frl(i, a) for (lli i = 0; i < a; i++)
int kmp(string s) {
  int previous_index = 0;
  for (int i = 1; i < s.size(); i++) {
    while (previous_index > 0 && s[i] != s[previous_index]) {
      previous_index--;
    }
    if (s[i] == s[previous_index]) {
      previous_index++;
    }
  }
  return previous_index;
}
int remainingStringLongestPallindrome(string s) {
  reverse(s.begin(), s.end());
  return kmp(s);
}
string longestPrefixSuffixPallindrome(string s) {
  int length = 0;
  int n = s.size();
  for (int i = 0, j = n - 1; i < j; i++, j--) {
    if (s[i] != s[j]) {
      break;
    }
    length++;
  }
  string ans = s.substr(0, length);
  string remaining = s.substr(length, (n - (2 * length)));
  if (remaining.size()) {
    int longest_prefix = remainingStringLongestPallindrome(remaining);
    reverse(remaining.begin(), remaining.end());
    int longest_suffix = remainingStringLongestPallindrome(remaining);
    if (longest_prefix > longest_suffix) {
      reverse(remaining.begin(), remaining.end());
      ans += remaining.substr(0, longest_prefix);
    } else {
      ans += remaining.substr(0, longest_suffix);
    }
  }
  ans += s.substr(n - length, length);
  return ans;
}
int main() {
  lli t;
  cin >> t;
  while (t--) {
    string str;
    cin >> str;
    string ans = longestPrefixSuffixPallindrome(str);
    cout << ans << endl;
  }
}