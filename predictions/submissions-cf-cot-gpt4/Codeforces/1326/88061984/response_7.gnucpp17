#include <bits/stdc++.h>
using namespace std;
typedef long long int lli;

int kmp(const string& s, int size) {
  vector<int> lps(size, 0);
  for (int i = 1; i < size; i++) {
    int previous_index = lps[i - 1];
    while (previous_index > 0 && s[i] != s[previous_index]) {
      previous_index = lps[previous_index - 1];
    }
    lps[i] = previous_index + (s[i] == s[previous_index] ? 1 : 0);
  }
  return lps[size - 1];
}

int remainingStringLongestPallindrome(const string& s, const string& rev, int size) {
  return kmp(s + "?" + rev, size * 2 + 1);
}

string longestPrefixSuffixPallindrome(const string& s) {
  int length = 0;
  int n = s.size();
  for (int i = 0, j = n - 1; i < j; i++, j--) {
    if (s[i] != s[j]) {
      break;
    }
    length++;
  }
  string remaining = s.substr(length, (n - (2 * length)));
  int remaining_size = remaining.size();
  if (remaining_size) {
    string reverse_remaining = remaining;
    reverse(reverse_remaining.begin(), reverse_remaining.end());
    int longest_prefix = remainingStringLongestPallindrome(remaining, reverse_remaining, remaining_size);
    int longest_suffix = remainingStringLongestPallindrome(reverse_remaining, remaining, remaining_size);
    if (longest_prefix > longest_suffix) {
      remaining = remaining.substr(0, longest_prefix);
    } else {
      reverse_remaining = reverse_remaining.substr(0, longest_suffix);
      remaining = reverse_remaining;
      reverse(remaining.begin(), remaining.end());
    }
  }
  return s.substr(0, length) + remaining + s.substr(n - length, length);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  lli t;
  cin >> t;
  while (t--) {
    string str;
    cin >> str;
    string ans = longestPrefixSuffixPallindrome(str);
    cout << ans << '\n';
  }
}