#include <bits/stdc++.h>
using namespace std;

vector<int> kmp(string &s) {
  vector<int> lps(s.size(), 0);
  for (int i = 1; i < s.size(); i++) {
    int previous_index = lps[i - 1];
    while (previous_index > 0 && s[i] != s[previous_index]) {
      previous_index = lps[previous_index - 1];
    }
    lps[i] = previous_index + (s[i] == s[previous_index] ? 1 : 0);
  }
  return lps;
}

int remainingStringLongestPallindrome(string &s) {
  int original_size = s.size();
  s += '?';
  reverse(s.begin(), s.end());
  vector<int> lps = kmp(s);
  s = s.substr(0, original_size); // restore the original string
  return lps[lps.size() - 1];
}

string longestPrefixSuffixPallindrome(string &s) {
  int length = 0;
  int n = s.size();
  for (int i = 0, j = n - 1; i < j; i++, j--) {
    if (s[i] != s[j]) {
      break;
    }
    length++;
  }
  string ans = s.substr(0, length);
  string remaining = s.substr(length, (n - (2 * length)));
  if (remaining.size()) {
    int longest_prefix = remainingStringLongestPallindrome(remaining);
    reverse(remaining.begin(), remaining.end());
    int longest_suffix = remainingStringLongestPallindrome(remaining);
    string prefix = remaining.substr(0, longest_prefix);
    string suffix = remaining.substr(0, longest_suffix);
    if (longest_prefix > longest_suffix) {
      ans += prefix;
    } else {
      ans += suffix;
    }
  }
  ans += s.substr(n - length, length);
  return ans;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    string str;
    cin >> str;
    string ans = longestPrefixSuffixPallindrome(str);
    cout << ans << endl;
  }
}