#include <bits/stdc++.h>
using namespace std;
typedef long long int lli;
typedef pair<int, int> pii;

#define frr(i, a) for (int i = 0; i < a; i++)
#define frl(i, a) for (lli i = 0; i < a; i++)

int kmp(const string &s, int len) {
  int lps = 0;
  for (int i = 1; i < len; i++) {
    int previous_index = lps;
    while (previous_index > 0 && s[i] != s[previous_index]) {
      previous_index = previous_index - 1;
    }
    lps = previous_index + (s[i] == s[previous_index] ? 1 : 0);
  }
  return lps;
}

int remainingStringLongestPallindrome(const string &s, int start, int end, bool reverse) {
  if (reverse) {
    return kmp(s.substr(start, end-start+1) + '\0' + s.substr(start, end-start+1), 2*(end-start+1));
  } else {
    string str = s.substr(start, end-start+1);
    std::reverse(str.begin(), str.end());
    return kmp(str + '\0' + str, 2*(end-start+1));
  }
}

string longestPrefixSuffixPallindrome(string &s) {
  int length = 0;
  int n = s.size();
  for (int i = 0, j = n - 1; i < j; i++, j--) {
    if (s[i] != s[j]) {
      break;
    }
    length++;
  }
  
  int start = length;
  int end = n - length - 1;
  
  if (end >= start) {
    int longest_prefix = remainingStringLongestPallindrome(s, start, end, false);
    int longest_suffix = remainingStringLongestPallindrome(s, start, end, true);
    if (longest_prefix > longest_suffix) {
      return s.substr(0, length) + s.substr(start, longest_prefix) + s.substr(n - length, length);
    } else {
      return s.substr(0, length) + s.substr(end - longest_suffix + 1, longest_suffix) + s.substr(n - length, length);
    }
  }
  return s.substr(0, length) + s.substr(n - length, length);
}

int main() {
  lli t;
  scanf("%lld", &t);
  while (t--) {
    string str;
    cin >> str;
    string ans = longestPrefixSuffixPallindrome(str);
    printf("%s\n", ans.c_str());
  }
}