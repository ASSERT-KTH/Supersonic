#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;

static const auto fastio = [](){
    std::ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    return nullptr;
}();

int kmp(const string &s, int start, int end, int inc, const string &s2 = "", const string &s3 = "") {
    int n = (end-start+1)/inc + s2.size() + s3.size();
    vector<int> lps(n, 0);
    int i = start+inc, j = 0;
    while (i != end+inc) {
        int previous_index = lps[j - 1];
        while (previous_index > 0 && s[i] != s[start + previous_index*inc]) {
            previous_index = lps[previous_index - 1];
        }
        lps[j] = previous_index + (s[i] == s[start + previous_index*inc] ? 1 : 0);
        i += inc; j++;
    }
    for (const char &c : s2) {
        int previous_index = lps[j - 1];
        while (previous_index > 0 && c != s2[previous_index]) {
            previous_index = lps[previous_index - 1];
        }
        lps[j] = previous_index + (c == s2[previous_index] ? 1 : 0);
        j++;
    }
    // same code for s3 if needed
    return lps[lps.size() - 1];
}

int remainingStringLongestPallindrome(const string &s, int start, int end) {
    return kmp(s, start, end, 1, "?", s.substr(start, end-start+1));
}

string longestPrefixSuffixPallindrome(string &s) {
    int length = 0, n = s.size();
    for (int i = 0, j = n - 1; i < j; i++, j--) {
        if (s[i] != s[j]) break;
        length++;
    }
    string ans = s.substr(0, length);
    if (n - 2*length > 0) {
        int longest_prefix = remainingStringLongestPallindrome(s, length, n-length-1);
        int longest_suffix = remainingStringLongestPallindrome(s, n-length-1, length);
        if (longest_prefix > longest_suffix) {
            ans += s.substr(length, longest_prefix);
        } else {
            ans += s.substr(n-length-longest_suffix, longest_suffix);
        }
    }
    ans += s.substr(n - length, length);
    return ans;
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        string str;
        cin >> str;
        string ans = longestPrefixSuffixPallindrome(str);
        cout << ans << "\n";
    }
    return 0;
}