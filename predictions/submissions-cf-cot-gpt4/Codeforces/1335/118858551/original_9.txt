Here are the steps to optimize your program:

1. Using mod, inf, endl, and fast macros in the code. You can replace the usage of endl with '\n', remove the fast macro as cin.tie(NULL) and cout.tie(NULL) are not actually needed here.

2. The set 's' and map 'm' are being cleared at the end of each test case, which is not necessary because their scope is already limited to the while loop. Hence, they will be automatically cleared at the end of each iteration.

3. Instead of using two separate loops to insert into the set and the map, you can do both operations in a single loop. This reduces the time complexity of your code.

4. Instead of using two separate loops to find the maximum value in the map and to insert into the set and the map, you can find the maximum value while inserting into the map. This further optimizes your code.

Here is the optimized version of your code:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define f(i, a, b) for (int i = a; i < b; i++)
#define ll long long
#define pb push_back
#define mp make_pair
#define vi vector<int>
#define deb(x) cout << #x << " " << x << '\n';
#define ff first
#define ss second
#define mod 998244353
#define inf 4e18
#define all(v) v.begin(), v.end()
const int N = 1e6 + 10;
const ll MOD = (ll)(1e9) + (ll)(7);

int main() {
  ios_base::sync_with_stdio(0);
  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    vi v(n);
    f(i, 0, n) cin >> v[i];
    set<int> s;
    map<int, int> m;
    int M = -1;
    for (auto x : v) {
      s.insert(x);
      m[x]++;
      M = max(M, m[x]);
    }
    if (n >= 2 && m.size() == n) {
      cout << 1 << '\n';
      continue;
    }
    if (s.size() > M) {
      cout << M << '\n';
    } else if (s.size() == M) {
      cout << M - 1 << '\n';
    } else {
      cout << s.size() << '\n';
    }
  }
}
```

This optimized code has a smaller memory footprint and runs faster because it reduces the number of loops and unnecessary operations.