Optimization Steps:

1. The code is including a lot of unnecessary libraries with the #include <bits/stdc++.h> command. We only need to include the required libraries.

2. The code is using two different data structures - set and map - to store the values of the vector. This increases the memory usage of the program. Since we are only using the set to get the unique values and their count, we can achieve this with only the map.

3. The code is using the auto keyword in the loops. While this is not a problem, it can cause problems if the type of the variables in the loops changes. It's better to explicitly specify the type of the variables.

4. The code is using the map to find the max value. We can maintain a max variable to store the max value while inserting the elements into the map. This will reduce the time complexity.

Optimized Program:

```cpp
#include<iostream>
#include<vector>
#include<map>
using namespace std;

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    vector<int> v(n);
    for (int i = 0; i < n; i++)
      cin >> v[i];
    map<int, int> m;
    int M = -1;
    for (int x : v) {
      m[x]++;
      if(m[x] > M)
        M = m[x];
    }
    int s = m.size();
    if (n >= 2 && s == n) {
      cout << 1 << endl;
      continue;
    }
    if (s > M) {
      cout << M << endl;
    } else if (s == M) {
      cout << M - 1 << endl;
    } else {
      cout << s << endl;
    }
    m.clear();
  }
}
```
The optimized program reduces memory usage by eliminating the unnecessary set data structure and uses fewer libraries. It also reduces running time by maintaining a max variable to store the maximum value while inserting elements into the map.