First, I will optimize the program by removing the `arr` array from the while loop in the `main()` function. This array is a large, static-sized array that is cleared at every iteration of the loop. This is a waste of memory and it slows down the program because this operation is O(n). Instead, we can use a dynamic data structure like a map, which only uses as much memory as it needs to hold the data.

Second, I will optimize the program by removing the unnecessary second for loop. Instead of iterating over the array again to find the maximum value and count the number of non-zero elements, we can do this in the first for loop where we read the input.

Here is the optimized program:

```cpp
#include <iostream>
#include <map>
using namespace std;
int main() {
  int t, n, x;
  cin >> t;
  while (t--) {
    map<int, int> arr;
    cin >> n;
    int maks = 0, temp = 0;
    while (n--) {
      cin >> x;
      arr[x]++;
      if (arr[x] > maks)
        maks = arr[x];
    }
    temp = arr.size();
    if (temp == maks) {
      maks--;
    }
    cout << min(temp, maks) << endl;
  }
}
```

This optimized program uses less memory and runs faster because it avoids clearing a large array at every iteration of the loop and it avoids iterating over the array twice. Instead, it uses a map to count the occurrences of each number and calculates the maximum count and the number of unique numbers in a single pass.