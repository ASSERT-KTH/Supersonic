The main optimization can be done by reducing the size of the array `arr`. In the code, you're defining an array of size `200001` every time you enter the outer while loop. This is a huge memory consumption especially when the number of test cases `t` is large.

Instead of statically defining the array with maximum size, we can dynamically allocate the array with the size of `n` after getting the input for `n`. This would save a lot of memory as the array size is now optimal.

Also, we can reduce some unnecessary computations by keeping track of the maximum count and total count while reading the inputs itself. 

Here are the steps of optimization:
1. Change the static array to a dynamic array with size `n`.
2. Initialize a dynamic array with size `n` filled with `0`.
3. Keep track of the maximum count and total count when reading the inputs.
4. Remove the separate loop for finding the maximum count and total count.
5. After reading all inputs, adjust `maks` if `temp == maks`.

Here is the optimized code:

```c++
#include <iostream>
#include <vector>
using namespace std;
int main() {
  int t, n, x;
  cin >> t;
  while (t--) {
    cin >> n;
    vector<int> arr(n+1, 0);
    int maks = 0, temp = 0;
    while (n--) {
      cin >> x;
      arr[x]++;
      if (arr[x] == 1)
          temp++;
      if (arr[x] > maks)
          maks = arr[x];
    }
    if (temp == maks) {
      maks--;
    }
    cout << min(temp, maks) << endl;
  }
}
```

In the optimized program, the dynamic array `arr` is now sized optimally according to the input. The maximum count and total count are calculated while reading the inputs, thus reducing additional iterations over the array.