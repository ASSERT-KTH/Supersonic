The existing solution is already quite optimized and doesn't have any glaring performance issues. However, there are few ways to optimize it further.

1. The array arr[200001] is initialized every time the outer while loop is executed. This is unnecessary and can be moved outside the while loop to save time.
2. Instead of using the range-based for loop, we can use the traditional for loop. The range-based for loop internally uses iterators which might be slower than the index-based access.
3. Also, we can calculate the min(temp, maks) inline instead of doing it after the loop. This could save a few clock cycles.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
int main() {
  int t, n, x;
  cin >> t;
  int arr[200001] = {0};
  while (t--) {
    cin >> n;
    fill(arr, arr+200001, 0);
    while (n--) {
      cin >> x;
      arr[x]++;
    }
    int maks = 0, temp = 0;
    for (int i = 0; i < 200001; i++) {
      if (arr[i]) {
        temp++;
        if (arr[i] > maks)
          maks = arr[i];
      }
    }
    if (temp == maks) {
      maks--;
    }
    cout << ((temp < maks) ? temp : maks) << endl;
  }
}
```
Please note that this optimization won't make a huge difference in the performance but might save a few clock cycles here and there. The overall complexity of the algorithm is still the same.