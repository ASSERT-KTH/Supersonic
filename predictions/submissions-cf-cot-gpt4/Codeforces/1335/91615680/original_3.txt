This C++ program seems to be counting the frequency of input numbers and then printing the smaller value between the number of distinct numbers and the maximum frequency. 

The biggest optimization that can be done here is the use of a std::unordered_map instead of a large array. This will significantly reduce the memory usage. 

Here's why: in the original code, you are using an array of size 200001, which will allocate memory for all those elements irrespective of whether you use them or not. If the actual input numbers are small and sparse, a lot of memory will be wasted. An std::unordered_map, on the other hand, will only use memory for the elements that are actually inserted into it.

Another optimization is to use std::ios_base::sync_with_stdio(false); This will speed up the I/O operations significantly.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int t, n, x;
  cin >> t;
  while (t--) {
    unordered_map<int, int> umap;
    cin >> n;
    while (n--) {
      cin >> x;
      umap[x]++;
    }
    int maks = 0, temp = umap.size();
    for (auto &x : umap) {
      if (x.second > maks)
        maks = x.second;
    }
    if (temp == maks) {
      maks--;
    }
    cout << min(temp, maks) << '\n';
  }
  return 0;
}
```

Please note that using an unordered_map instead of an array may increase the runtime a bit due to the overhead of hashing, but it will significantly reduce the memory usage. If runtime is more important than memory usage in your case, you may prefer to stick with the array.