There are several ways to optimize this program:

1. **Remove unnecessary headers**: The `#include <bits/stdc++.h>` line at the top of the program includes a large number of standard library headers, many of which are not used in this program. Including unnecessary headers increases the compilation time and the memory footprint of the program. 

2. **Avoid using `std::endl`**: The `std::endl` not only inserts a newline character into the output, but also flushes the output stream. This flushing operation can be quite costly, especially when it is done frequently in a tight loop. It's better to use `\n` for line endings.

3. **Prefer pre-increment over post-increment**: In C++, pre-increment (`++i`) can be more efficient than post-increment (`i++`) because the latter requires a copy of the original value to be made, while the former does not. 

4. **Avoid using `std::pair` and other complex types when simple types will do**: The `std::pair` and other similar types are convenient, but they also add a level of complexity and overhead that can be avoided in many cases. 

5. **Avoid unnecessary function calls**: The program contains several function calls that can be inlined or removed entirely. 

The optimized code is as follow:

```
#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <functional>
#include <numeric>
#include <limits>
#include <utility>
#define FOR(i, a, n) for (ll i = (ll)a; i < (ll)n; ++i)
#define REP(i, n) FOR(i, 0, n)

using ll = long long;
const ll MOD = 1000000007;

int u[4010][4010], W[4010][4010];

int main(void) {
  ll N, K;
  std::cin >> N >> K;
  std::vector<ll> A(N);
  REP(i, N) {
    std::cin >> A[i];
    --A[i];
  }
  ll L = 0, R = 0, sum = 0;
  std::vector<ll> appear(100010);
  appear[A[0]]++;
  auto add = [&](ll idx) { sum += appear[A[idx]]++; };
  auto del = [&](ll idx) { sum -= --appear[A[idx]]; };
  while (L < N)
    add(L++);
  while (R < N)
    del(R--);
  std::cout << sum << '\n';
  return 0;
}
```

This optimized program reduces the memory footprint and running time by removing unnecessary headers, using `\n` instead of `std::endl`, preferring pre-increment over post-increment, avoiding the use of `std::pair` and other complex types, and avoiding unnecessary function calls. It also simplifies the program by removing unused code and simplifying the main function.