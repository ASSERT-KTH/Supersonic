This code is already heavily optimized, but there are a few small changes that can be made to improve performance slightly.

1. Avoid using `#include <bits/stdc++.h>`: `<bits/stdc++.h>` is not a standard C++ library. It's a GCC extension that includes basically all standard libraries, which can increase compilation time. Instead, include only the libraries that are actually being used.

2. Avoid using `using namespace std;`: This can cause name conflicts if your program uses or will use libraries with similar names. It's better to prefix standard library calls with `std::` to avoid this problem.

3. Avoid using `auto` when the type is obvious: This can make the code harder to read, especially for larger programs.

4. Avoid using global variables like `int dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};`: These variables are not used and can be removed.

5. Avoid using `getchar()`: It's better to use `cin >>` or `scanf` for input because `getchar` can have issues with buffering.

6. Avoid using `scanf` and `getchar`: Using `cin` and `cout` with `ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` at the beginning of the main function can actually be faster.

Here is the optimized version of the code:

```c++
#include <vector>
#include <iostream>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <limits>
using std::vector;
using std::pair;
using std::cin;
using std::cout;
using std::endl;
using std::set;
using std::map;
using std::min;
using std::max;
using std::function;
using std::ostream;
using std::less;

typedef long long ll;
typedef pair<ll, ll> PII;

#define FOR(i, a, n) for (ll i = (ll)a; i < (ll)n; ++i)
#define REP(i, n) FOR(i, 0, n)
#define ALL(x) x.begin(), x.end()

// ... (rest of the code remains the same)

int main(void) {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cf438F::solve();
  return 0;
}
```

Note: The above optimizations may not result in a noticeable change in running time or memory usage for this specific program, but they are good practices to follow in general.