#include <iostream>
#include <vector>
#include <functional>
#include <map>
#include <set>
#include <limits>

template <typename T> T &chmin(T &a, const T &b) { return a = std::min(a, b); }
template <typename T> T &chmax(T &a, const T &b) { return a = std::max(a, b); }
template <typename T> bool IN(T a, T b, T x) { return a <= x && x < b; }

template <typename T>
vector<T> make_v(size_t a) { return std::vector<T>(a); }
template <typename T, typename... Ts>
auto make_v(size_t a, Ts... ts) {
  return std::vector<decltype(make_v<T>(ts...))>(a, make_v<T>(ts...));
}

template <typename T, typename V>
typename std::enable_if<std::is_class<T>::value == 0>::type fill_v(T &t, const V &v) {
  t = v;
}

template <typename T, typename V>
typename std::enable_if<std::is_class<T>::value != 0>::type fill_v(T &t, const V &v) {
  for (auto &e : t)
    fill_v(e, v);
}

template <class S, class T>
std::ostream &operator<<(std::ostream &out, const std::pair<S, T> &a) {
  out << '(' << a.first << ',' << a.second << ')';
  return out;
}

// Similar templates for vector, set, and map

template <typename T, typename Compare = std::less<T>>
std::vector<std::vector<T>> divide_and_conquer(int h, int w, const std::function<T(int, int)> &f,
                                     const Compare &comp = Compare()) {
  const T inf = std::numeric_limits<T>::max() / 10;
  std::vector<std::vector<T>> dp(h, std::vector<T>(w, inf));
  // Rest of the code
}

// Rest of the code