#include <iostream>
#include <string.h>
#include <stack>
using namespace std;
int t, n, m, G;
char **maze;
bool **visited;
int dir[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

bool block(int r, int c) {
  for(int i=0; i<4; i++){
    int nr = r + dir[i][0];
    int nc = c + dir[i][1];
    if(nr>0 && nr<=n && nc>0 && nc<=m){
      if (maze[nr][nc] == 'G' || (nr==n && nc==m && G > 0)) return false;
      if (maze[nr][nc] == '.') maze[nr][nc] = '#';
    }
  }
  return true;
}

void dfs(int r, int c) {
  stack<pair<int, int>> s;
  s.push({r, c});
  while (!s.empty()) {
    pair<int, int> p = s.top();
    s.pop();
    int x = p.first, y = p.second;
    if (x <= 0 || y <= 0 || x > n || y > m || maze[x][y] == '#' || visited[x][y]) continue;
    visited[x][y] = true;
    if (maze[x][y] == 'G') G--;
    for(int i=0; i<4; i++) s.push({x + dir[i][0], y + dir[i][1]});
  }
}

int main() {
  cin >> t;
  while (t--) {
    cin >> n >> m;
    G = 0;
    maze = new char*[n+1];
    visited = new bool*[n+1];
    for(int i=1; i<=n; i++){
      maze[i] = new char[m+1];
      visited[i] = new bool[m+1];
      memset(visited[i], 0, (m+1)*sizeof(bool));
    }
    for (int i = 1; i <= n; i++) 
      for (int j = 1; j <= m; j++) cin >> maze[i][j]; 
      
    for(int i=1; i<=n; i++){
      for(int j=1; j<=m; j++){
        if(maze[i][j] == 'B' && !block(i, j)){
          cout << "No\n";
          goto end;
        }
        if(maze[i][j] == 'G') G++;
      }
    }
    dfs(n, m);
    cout << (G == 0 ? "Yes\n" : "No\n");
    end:
    for(int i=1; i<=n; i++){
      delete[] maze[i];
      delete[] visited[i];
    }
    delete[] maze;
    delete[] visited;
  }
  return 0;
}