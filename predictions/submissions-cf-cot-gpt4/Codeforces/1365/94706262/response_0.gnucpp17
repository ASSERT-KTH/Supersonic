#include <iostream>
#include <string.h>
using namespace std;
int t, n, m, G;
char maze[51][51] = {0};
bool visited[51][51] = {0};

bool block(int r, int c) {
  int up = r - 1;
  int down = r + 1;
  int left = c - 1;
  int right = c + 1;

  if (up > 0) {
    if (maze[up][c] == 'G' || (up == n && c == m && G > 0)) {
      return false;
    }
    if (maze[up][c] == '.') {
      maze[up][c] = '#';
    }
  }
  if (down <= n) {
    if (maze[down][c] == 'G' || (down == n && c == m && G > 0)) {
      return false;
    }
    if (maze[down][c] == '.') {
      maze[down][c] = '#';
    }
  }
  if (left > 0) {
    if (maze[r][left] == 'G' || (r == n && left == m && G > 0)) {
      return false;
    }
    if (maze[r][left] == '.') {
      maze[r][left] = '#';
    }
  }
  if (right <= m) {
    if (maze[r][right] == 'G' || (r == n && right == m && G > 0)) {
      return false;
    }
    if (maze[r][right] == '.') {
      maze[r][right] = '#';
    }
  }
  return true;
}

void dfs(int r, int c) {
  if (r <= 0 || c <= 0 || r > n || c > m)
    return;
  if (maze[r][c] == '#' || visited[r][c])
    return;
  visited[r][c] = 1;
  if (maze[r][c] == 'G') {
    G--;
  }
  dfs(r + 1, c);
  dfs(r - 1, c);
  dfs(r, c + 1);
  dfs(r, c - 1);
}

int main() {
  cin >> t;
  while (t--) {
    cin >> n >> m;
    bool flag = false;
    G = 0;
    memset(visited, 0, sizeof(visited));
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= m; j++) {
        cin >> maze[i][j];
        if (maze[i][j] == 'G') {
          G++;
        }
      }
    }
    for (int i = 1; i <= n && !flag; i++) {
      for (int j = 1; j <= m && !flag; j++) {
        if (maze[i][j] == 'B') {
          if (!block(i, j)) {
            cout << "No\n";
            flag = true;
            break;
          }
        }
      }
    }
    if (flag) {
      continue;
    }
    dfs(n, m);
    if (G == 0) {
      cout << "Yes\n";
    } else {
      cout << "No\n";
    }
  }
  return 0;
}