Here are the steps that can be taken to optimize the program:

1. Change the Recursive function to an Iterative function: The DFS (Depth-First Search) function is recursive which might lead to a stack overflow if the recursion goes too deep. Changing it to an iterative function using a stack will solve this problem. This change is also beneficial in a performance perspective as recursion has higher overhead compared to iteration.

2. Remove unnecessary condition checks: In your "block" function, you are checking the same condition multiple times which is not necessary and can be avoided.

3. Use fast I/O operations: cin and cout are slower compared to scanf and printf. We can use the latter for faster I/O operations.

Here's the optimized version of the code:

```cpp
#include <cstdio>
#include <string.h>
#include <stack>
using namespace std;
int t, n, m, G;
char maze[51][51] = {0};
bool visited[51][51] = {0};
bool block(int r, int c) {
  int dr[] = {-1,1,0,0};
  int dc[] = {0,0,-1,1};
  for (int i = 0; i < 4; i++) {
    int newr = r + dr[i], newc = c + dc[i];
    if (newr > 0 && newc > 0 && newr <= n && newc <= m) {
      if (maze[newr][newc] == 'G' || (newr == n && newc == m && G > 0)) {
        return false;
      }
      if (maze[newr][newc] == '.') {
        maze[newr][newc] = '#';
      }
    }
  }
  return true;
}
void dfs(int r, int c) {
  stack<pair<int, int>> s;
  s.push({r, c});
  while (!s.empty()) {
    int r = s.top().first;
    int c = s.top().second;
    s.pop();
    if (r <= 0 || c <= 0 || r > n || c > m)
      continue;
    if (maze[r][c] == '#' || visited[r][c])
      continue;
    visited[r][c] = 1;
    if (maze[r][c] == 'G') {
      G--;
    }
    s.push({r + 1, c});
    s.push({r - 1, c});
    s.push({r, c + 1});
    s.push({r, c - 1});
  }
}
int main() {
  scanf("%d", &t);
  while (t--) {
    scanf("%d %d", &n, &m);
    bool flag = false;
    G = 0;
    memset(visited, 0, sizeof(visited));
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= m; j++) {
        scanf(" %c", &maze[i][j]);
      }
    }
    for (int i = 1; i <= n && !flag; i++) {
      for (int j = 1; j <= m && !flag; j++) {
        if (maze[i][j] == 'B') {
          if (!block(i, j)) {
            printf("No\n");
            flag = true;
            break;
          }
        } else if (maze[i][j] == 'G') {
          G++;
        }
      }
    }
    if (flag) {
      continue;
    }
    dfs(n, m);
    if (G == 0) {
      printf("Yes\n");
    } else {
      printf("No\n");
    }
  }
  return 0;
}
```

This code is optimized for running time and memory usage by using an iterative DFS which avoids the risk of a stack overflow, removing repeated conditions, and using faster I/O operations.