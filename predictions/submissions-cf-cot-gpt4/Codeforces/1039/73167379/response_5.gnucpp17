#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <algorithm>
#include <utility>
#include <fstream>

using namespace std;

const int G = 400002;
int a;
vector<int> l[G];
int skok[G], o[G], zam[G], GR[G][2], mxd[G], mxp[G], dp[G][2], sz[G], good[G];
vector<int> gd, bd;

int CALC(int v, int p) {
  mxd[v] = 1;
  sz[v] = 1;
  int c1 = 0, c2 = 0;
  for (int h : l[v]) {
    if (h == p) continue;
    int x = CALC(h, v);
    mxd[v] = max(mxd[v], x + 1);
    sz[v] += sz[h];
    if (x >= c1) c2 = c1, c1 = x;
    else if (x > c2) c2 = x;
  }
  mxp[v] = c1 + c2 + 1;
  return mxd[v];
}

int find_centroid(int v, int p) {
  int MX = 0, num = -1;
  for (int h : l[v]) {
    if (h != p && sz[h] > MX)
      MX = sz[h], num = h;
  }
  return MX > a / 2 ? find_centroid(num, v) : v;
}

void KROLIK(int v) {
  if (good[v]) gd.push_back(v);
  else bd.push_back(v);
  for (int h : l[v]) {
    if (!good[h]) KROLIK(h);
  }
}

void RIP_PAPA(int v, int p) {
  for (int q = 0; q < l[v].size(); q++) {
    if (l[v][q] == p) {
      l[v].erase(l[v].begin() + q);
      break;
    }
  }
  for (int h : l[v]) RIP_PAPA(h, v);
}

int main() {
  cin.tie(0);
  cout.tie(0);
  cin.sync_with_stdio(0);
  cout.sync_with_stdio(0);
  cin >> a;

  for (int q = 0; q < a; q++) {
    for (int h : l[q]) {
      if (min(zam[q], zam[h]) > -1) {
        l[zam[q]].push_back(zam[h]);
      }
    }
  }

  for (int q = 0; q < a; q++) {
    GR[q][0] = l[q].size() ? l[q][0] : a;
    GR[q][1] = l[q].size() ? l[q].back() : q;
  }

  for (int q = 0; q < a; q++) {
    good[q] = sz[q] == mxd[q];
  }

  return 0;
}