#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>
#include <random>

using std::cin;
using std::cout;
using std::endl;
using std::vector;

int main() {
  std::ios::sync_with_stdio(false);
  cin.tie(nullptr);

  int n, m, p;
  cin >> n >> m >> p;
  vector<long long> a(n + 1);
  for (int i = 1; i <= n; i++) {
    for (int j = 0; j < m; j++) {
      char c;
      cin >> c;
      if (c == '1')
        a[i] |= (1ll << j);
    }
  }
  vector<int> id(n + 1);
  std::iota(id.begin(), id.end(), 0);
  std::shuffle(id.begin() + 1, id.end(), std::mt19937(std::chrono::steady_clock::now().time_since_epoch().count()));
  long long ans = 0;
  int num = 0;
  for (int i = 1; i <= std::min(200, n); i++) {
    vector<int> one;
    for (int j = 0; j < m; j++) {
      if (a[id[i]] & (1ll << j))
        one.push_back(j);
    }
    vector<int> dp(1 << one.size());
    for (int j = 1; j <= n; j++) {
      int tmp = 0;
      for (int k = 0; k < one.size(); k++) {
        if (a[j] & (1ll << one[k]))
          tmp |= (1 << k);
      }
      dp[tmp]++;
    }
    for (int j = 0; j < one.size(); j++) {
      for (int k = 0; k < (1 << one.size()); k++) {
        if (k & (1 << j))
          dp[k ^ (1 << j)] += dp[k];
      }
    }
    for (int k = 0; k < (1 << one.size()); k++) {
      if (dp[k] >= (n + 1) / 2 && __builtin_popcount(k) > num) {
        num = __builtin_popcount(k);
        ans = 0;
        for (int j = 0; j < one.size(); j++) {
          if (k & (1 << j))
            ans |= (1ll << one[j]);
        }
      }
    }
  }
  for (int i = 0; i < m; i++) { 
    cout << ((ans >> i) & 1); 
  }
  cout << '\n';
  return 0;
}