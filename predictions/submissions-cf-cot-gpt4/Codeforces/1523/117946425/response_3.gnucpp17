#include <iostream>
#include <vector>
#include <random>
#include <chrono>
#include <algorithm>
#include <numeric>

using ll = long long;
const int mod = 1e9 + 7;
const int inf = 0x3f3f3f3f;
const int maxn = 1e5 + 10;
std::mt19937 rng((unsigned int)std::chrono::steady_clock::now().time_since_epoch().count());

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);

  int n, m, p;
  std::cin >> n >> m >> p;
  std::vector<ll> a(n + 1);

  for (int i = 1; i <= n; i++) {
    for (int j = 0; j < m; j++) {
      char c;
      std::cin >> c;
      if (c == '1')
        a[i] += (1ll << j);
    }
  }

  std::vector<int> id(n + 1);
  std::iota(id.begin(), id.end(), 0);
  std::shuffle(id.begin() + 1, id.end(), rng);

  ll ans = 0;
  int num = 0;

  for (int i = 1; i <= std::min(200, n); i++) {
    std::vector<int> one;
    one.reserve(m);

    for (int j = 0; j < m; j++) {
      if ((a[id[i]] >> j) & 1)
        one.push_back(j);
    }

    std::vector<int> dp(1 << one.size());

    for (int j = 1; j <= n; j++) {
      int tmp = 0;
      for (int k = 0; k < one.size(); k++) {
        if ((a[j] >> one[k]) & 1)
          tmp += (1 << k);
      }
      dp[tmp]++;
    }

    for (int j = 0; j < one.size(); j++) {
      for (int k = 0; k < (1 << one.size()); k++) {
        if (k & (1 << j))
          dp[k ^ (1 << j)] += dp[k];
      }
    }

    for (int k = 0; k < (1 << one.size()); k++) {
      if (dp[k] >= (n + 1) / 2 && __builtin_popcount(k) > num) {
        num = __builtin_popcount(k);
        ans = 0;
        for (int j = 0; j < one.size(); j++) {
          if (k & (1 << j))
            ans += (1ll << one[j]);
        }
      }
    }
  }

  for (int i = 0; i < m; i++) {
    std::cout << ((ans >> i) & 1);
  }

  std::cout << '\n';
  return 0;
}