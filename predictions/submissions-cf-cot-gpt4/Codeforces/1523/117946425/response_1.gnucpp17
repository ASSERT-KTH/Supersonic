#include <bits/stdc++.h>
using namespace std;

template <typename A, typename B>
ostream &operator<<(ostream &os, const pair<A, B> &p) {
  return os << '(' << p.first << ", " << p.second << ')';
}

template <typename T_container, typename T = typename enable_if<
                                    !is_same<T_container, string>::value,
                                    typename T_container::value_type>::type>
ostream &operator<<(ostream &os, const T_container &v) {
  os << '{';
  string sep;
  for (const T &x : v)
    os << sep << x, sep = ", ";
  return os << '}';
}

void dbg_out() {
  cerr << '\n';
}

template <typename Head, typename... Tail>
void dbg_out(Head H, Tail... T) {
  cerr << ' ' << H;
  dbg_out(T...);
}

#ifdef WA_DEBUG
#define dbg(...) cerr << "(" << #__VA_ARGS__ << "):", dbg_out(__VA_ARGS__)
#else
#define dbg(...)
#endif

using ll = long long;
using ull = unsigned long long;
const int mod = 1e9 + 7;
const int inf = 0x3f3f3f3f;
const int maxn = 1e5 + 10;
mt19937 rng((unsigned int)chrono::steady_clock::now().time_since_epoch().count());

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int n, m, p;
  cin >> n >> m >> p;

  vector<ll> a(n + 1);
  for(int i = 1; i <= n; ++i) {
    for(int j = 0; j < m; ++j) {
      char c;
      cin >> c;
      if (c == '1')
        a[i] += (1ll << j);
    }
  }
  
  vector<int> id(min(200, n));
  iota(id.begin(), id.end(), 1);
  shuffle(id.begin(), id.end(), rng);

  long long ans = 0;
  int num = 0;

  for(auto i : id) {
    vector<int> one;
    one.reserve(m);
    for(int j = 0; j < m; ++j) {
      if ((a.at(i) >> j) & 1)
        one.push_back(j);
    }

    vector<int> dp(1 << one.size());
    for(int j = 1; j <= n; ++j) {
      int tmp = 0;
      for(int k = 0; k < one.size(); ++k) {
        if ((a.at(j) >> one.at(k)) & 1)
          tmp += (1 << k);
      }
      dp[tmp]++;
    }

    for(int j = 0; j < one.size(); ++j) {
      for(int k = 0; k < (1 << one.size()); ++k) {
        if (k & (1 << j))
          dp[k ^ (1 << j)] += dp[k];
      }
    }

    for(int k = 0; k < (1 << one.size()); ++k) {
      if (dp[k] >= (n + 1) / 2 && __builtin_popcount(k) > num) {
        num = __builtin_popcount(k);
        ans = 0;
        for(int j = 0; j < one.size(); ++j) {
          if (k & (1 << j))
            ans += (1ll << one.at(j));
        }
      }
    }
  }

  for(int i = 0; i < m; ++i) {
    cout << ((ans >> i) & 1);
  }
  cout << '\n';

  return 0;
}