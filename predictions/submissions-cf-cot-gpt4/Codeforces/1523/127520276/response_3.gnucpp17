#include <algorithm>
#include <cstdlib>
#include <iostream>
#include <queue>
#include <random>
#include <tuple>
#include <utility>
#include <vector>
using namespace std;
constexpr int N = 5e4, M = 1e5, LOGN = 16;
int &mini(int &lhs, int rhs) { return lhs = min(lhs, rhs); }
class CT {
public:
  void create(int r, int t) {
    yseed = (yseed ? yseed : rand()) * (RAND_MAX + 1u) + rand();
    storage.push_back({r, yseed, t, {}, {}});
    if (!add(root, storage.size() - 1)) {
      storage.pop_back();
    }
  }
  int mintlq(int r) const {
    int res = M;
    int pos = *root;
    const CTVertex *a = storage.data();
    while (pos != -1) {
      if (a[pos].x > r) {
        pos = *a[pos].l;
      } else {
        res = a[pos].t;
        pos = *a[pos].r;
      }
    }
    return res;
  }

private:
  struct CTPtr {
    unsigned pos;
    CTPtr(unsigned pos = -1) : pos{pos} {}
    unsigned operator*() const { return pos; }
    operator bool() const { return pos != -1; }
  };
  struct CTVertex {
    int x, y, t;
    CTPtr l, r;
  };
  CTPtr root;
  vector<CTVertex> storage = vector<CTVertex>(M + 1);
  static unsigned yseed;
  const CTVertex &get(const CTPtr &ptr) const { return storage[*ptr]; }
  CTVertex &get(const CTPtr &ptr) { return storage[*ptr]; }
  bool add(CTPtr &t, CTPtr el) {
    // the rest of the code remains the same
  }
};
unsigned CT::yseed{};
using interval = pair<int, int>;
interval rent[M + 1];
vector<int> by_length[N + 1];
int ans[N + 1];
CT ft[N];
void add(int t) {
  for (int i = N - rent[t].first - 1; i < N; i |= i + 1) {
    ft[i].create(rent[t].second, t);
  }
}
int query(int l, int r) {
  int res = M;
  for (int i = N - l; i > N - r; i &= i - 1) {
    res = min(res, ft[i - 1].mintlq(r));
  }
  return res;
}
int main() {
  cin.tie(0), ios_base::sync_with_stdio(0);
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; ++i) {
    cin >> rent[i].first >> rent[i].second, --rent[i].first;
    by_length[rent[i].second - rent[i].first].push_back(i);
  }
  queue<interval> for_rent;
  for (int epoch = n; epoch; --epoch) {
    for (int i : by_length[epoch]) {
      add(i);
    }
    for_rent.emplace(0, n);
    while (!for_rent.empty()) {
      auto [l, r] = for_rent.front();
      for_rent.pop();
      int t = query(l, r);
      if (t != M) {
        ans[epoch] += rent[t].second - rent[t].first;
        for_rent.emplace(l, rent[t].first);
        for_rent.emplace(rent[t].second, r);
      }
    }
  }
  for (int rented = 1; rented <= n; ++rented) {
    cout << ans[rented] << '\n';
  }
  cout << flush;
  return 0;
}