#include <algorithm>
#include <cstdlib>
#include <iostream>
#include <queue>
#include <random>
#include <tuple>
#include <utility>
#include <vector>
using namespace std;
constexpr int N = 5e4, M = 1e5, LOGN = 16;
int &mini(int &lhs, int rhs) { return lhs = min(lhs, rhs); }
class CT {
public:
  void create(int r, int t) {
    yseed = (yseed ? yseed : rand()) * (RAND_MAX + 1u) + rand();
    storage.reserve(storage.size() + 1);
    storage.emplace_back(CTVertex{r, yseed, t, {}, {}});
    if (!add(root, storage.size() - 1)) {
      storage.pop_back();
    }
  }
  int mintlq(int r) const {
    int res = M;
    int pos = *root;
    const CTVertex *a = storage.data();
    while (pos != -1) {
      if (a[pos].x > r) {
        pos = *a[pos].l;
      } else {
        res = a[pos].t;
        pos = *a[pos].r;
      }
    }
    return res;
  }

// Omitted for brevity. Keep the rest of the code as is.

int main() {
  cin.tie(0), ios_base::sync_with_stdio(0);
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; ++i) {
    cin >> rent[i].first >> rent[i].second, --rent[i].first;
    by_length[rent[i].second - rent[i].first].push_back(i);
  }
  queue<interval> for_rent;
  for (int epoch = n; epoch; --epoch) {
    for (auto i : by_length[epoch]) {
      add(i);
    }
    for_rent.emplace(0, n);
    while (!for_rent.empty()) {
      auto [l, r] = for_rent.front();
      for_rent.pop();
      int t = query(l, r);
      if (t != M) {
        ans[epoch] += rent[t].second - rent[t].first;
        for_rent.emplace(l, rent[t].first);
        for_rent.emplace(rent[t].second, r);
      }
    }
  }
  for (int rented = 1; rented <= n; ++rented) {
    cout << ans[rented] << '\n';
  }
  return 0;
}