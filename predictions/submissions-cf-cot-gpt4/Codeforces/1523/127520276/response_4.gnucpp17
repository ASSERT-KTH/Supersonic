#include <algorithm>
#include <cstdlib>
#include <iostream>
#include <queue>
#include <random>
#include <tuple>
#include <utility>
#include <vector>
using namespace std;
constexpr int N = 5e4, M = 1e5, LOGN = 16;
int &mini(int &lhs, int rhs) { return lhs = min(lhs, rhs); }
class CT {
public:
  void create(int r, int t) {
    yseed = (yseed ? yseed : rand()) * (RAND_MAX + 1u) + rand();
    storage.push_back({r, yseed, t, {}, {}});
    if (!add(root, storage.size() - 1)) {
      storage.pop_back();
    }
  }
  int mintlq(int r) const {
    int res = M;
    unsigned pos = root.pos;
    const CTVertex *a = storage.data();
    while (pos != -1) {
      if (a[pos].x > r) {
        pos = a[pos].l.pos;
      } else {
        res = a[pos].t;
        pos = a[pos].r.pos;
      }
    }
    return res;
  }

private:
  struct CTPtr {
    unsigned pos;
    CTPtr(unsigned pos = -1) : pos{pos} {}
    operator bool() const { return pos != -1; }
  };
  struct CTVertex {
    int x, y, t;
    CTPtr l, r;
  };
  CTPtr root;
  vector<CTVertex> storage;
  static unsigned yseed;
  const CTVertex &get(const CTPtr &ptr) const { return storage[ptr.pos]; }
  CTVertex &get(const CTPtr &ptr) { return storage[ptr.pos]; }
  // rest of the code remains unchanged
};
unsigned CT::yseed{};
using interval = pair<int, int>;
interval rent[M + 1];
int by_length[N + 1][N + 1];
int ans[N + 1];
CT ft[N];
// rest of the code remains unchanged