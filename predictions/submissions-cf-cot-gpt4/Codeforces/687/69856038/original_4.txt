The program already looks optimized. But one small thing that could be improved is the use of the standard I/O functions (`scanf` and `printf`). Using C++ I/O functions (`cin` and `cout`) would be faster with the ios_base::sync_with_stdio(false) optimization.

Here's the step by step optimization:

1. Replace `scanf` with `cin` and `printf` with `cout`.
2. Add `ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` at the beginning of main() to speed up cin and cout.
3. Use '\n' instead of std::endl with cout. '\n' doesn't cause flushing of the output buffer, unlike std::endl, hence it's faster.

Here's the optimized program:

```cpp
#include <algorithm>
#include <iostream>
using namespace std;
const int N = 1000, M = N * (N - 1) / 2;
int dsu[N * 2];
int find(int i) { return dsu[i] < 0 ? i : (dsu[i] = find(dsu[i])); }
bool join(int i, int j) {
  i = find(i);
  j = find(j);
  if (i == j)
    return false;
  if (dsu[i] > dsu[j])
    dsu[i] = j;
  else {
    if (dsu[i] == dsu[j])
      dsu[i]--;
    dsu[j] = i;
  }
  return true;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n, m, q;
  cin >> n >> m >> q;
  static int ii[M], jj[M], ww[M], hh[M];
  for (int h = 0; h < m; h++) {
    int i, j, w;
    cin >> i >> j >> w;
    i--, j--;
    ii[h] = i;
    jj[h] = j;
    ww[h] = w;
    hh[h] = h;
  }
  sort(hh, hh + m, [](int a, int b) { return ww[a] > ww[b]; });
  while (q-- > 0) {
    int l, r;
    cin >> l >> r;
    l--, r--;
    fill_n(dsu, n * 2, -1);
    int w = -1;
    for (int h = 0; h < m; h++) {
      int h_ = hh[h];
      if (l <= h_ && h_ <= r) {
        int i = ii[h_];
        int j = jj[h_];
        int i0 = i << 1, i1 = i0 | 1;
        int j0 = j << 1, j1 = j0 | 1;
        if (join(i0, j1) && !join(i1, j0)) {
          w = ww[h_];
          break;
        }
      }
    }
    cout << w << '\n';
  }
}
```