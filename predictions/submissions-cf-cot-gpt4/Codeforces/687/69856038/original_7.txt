The optimization steps for this program would be:

1. Change the scanf and printf functions to cin and cout. The iostream functions are more C++ style and they are safer, although the difference in efficiency here is disputable.

2. Remove the "using namespace std;" global statement. It's a bad practice to use this statement as it can lead to name clashes. Instead, we can use std:: in front of the C++ Standard Library functions.

3. Avoid using the "endl" command for line breaks. Instead, use "\n". The "endl" command flushes the buffer in addition to inserting a new line, which is not needed here and can lead to slower execution times.

4. Make use of const correctness. The function "find" does not modify any member variables and can be declared as a const function. This can allow the compiler to perform certain optimizations.

5. Use pre-increment (++i) instead of post-increment (i++) in for loops. This avoids unnecessary temporary object creation and is generally faster.

6. Remove unnecessary parentheses in return statements.

Here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
const int N = 1000, M = N * (N - 1) / 2;
int dsu[N * 2];
int find(int i) { return dsu[i] < 0 ? i : dsu[i] = find(dsu[i]); }
bool join(int i, int j) {
  i = find(i);
  j = find(j);
  if (i == j)
    return false;
  if (dsu[i] > dsu[j])
    dsu[i] = j;
  else {
    if (dsu[i] == dsu[j])
      --dsu[i];
    dsu[j] = i;
  }
  return true;
}
int main() {
  int n, m, q;
  std::cin >> n >> m >> q;
  static int ii[M], jj[M], ww[M], hh[M];
  for (int h = 0; h < m; ++h) {
    int i, j, w;
    std::cin >> i >> j >> w;
    --i; --j;
    ii[h] = i;
    jj[h] = j;
    ww[h] = w;
    hh[h] = h;
  }
  std::sort(hh, hh + m, [](int a, int b) { return ww[a] > ww[b]; });
  while (--q >= 0) {
    int l, r;
    std::cin >> l >> r;
    --l; --r;
    std::fill_n(dsu, n * 2, -1);
    int w = -1;
    for (int h = 0; h < m; ++h) {
      int h_ = hh[h];
      if (l <= h_ && h_ <= r) {
        int i = ii[h_];
        int j = jj[h_];
        int i0 = i << 1, i1 = i0 | 1;
        int j0 = j << 1, j1 = j0 | 1;
        if (join(i0, j1) && !join(i1, j0)) {
          w = ww[h_];
          break;
        }
      }
    }
    std::cout << w << "\n";
  }
}
```
This version of the code should perform slightly better in terms of running time due to the changes in the input/output functions and the loop incrementation. Other changes are mostly about code style and safety.