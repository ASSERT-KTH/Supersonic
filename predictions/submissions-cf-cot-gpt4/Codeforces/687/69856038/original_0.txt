The given program uses Disjoint Set Union (DSU) and seems like it is solving some kind of graph problem. The optimization can be done to reduce the running time.

Optimization Steps:

1. The `find()` function is already using path compression which is a good optimization technique for DSU.

2. The `join()` function is using union by rank which is another good optimization technique for DSU. 

3. In the `main()` function, we are scanning the edges one by one for each query, which is inefficient. If we sort the queries in non-decreasing order of their right end, we can process all edges only once.

4. For that, we will need to collect all queries first and then sort them.

5. Replace the printf and scanf with cin and cout with ios_base::sync_with_stdio(false) and cin.tie(NULL) which is faster in terms of execution time.

6. Use vectors instead of arrays as they are dynamic and memory efficient.

Here is the optimized code:

```
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
const int N = 1000, M = N * (N - 1) / 2;
int dsu[N * 2];
int find(int i) { return dsu[i] < 0 ? i : (dsu[i] = find(dsu[i])); }
bool join(int i, int j) {
  i = find(i);
  j = find(j);
  if (i == j)
    return false;
  if (dsu[i] > dsu[j])
    dsu[i] = j;
  else {
    if (dsu[i] == dsu[j])
      dsu[i]--;
    dsu[j] = i;
  }
  return true;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, m, q;
  cin >> n >> m >> q;
  vector<int> ii(M), jj(M), ww(M), hh(M), qq(q), ll(q), rr(q), ans(q);
  for (int h = 0; h < m; h++) {
    int i, j, w;
    cin >> i >> j >> w, i--, j--;
    ii[h] = i;
    jj[h] = j;
    ww[h] = w;
    hh[h] = h;
  }
  sort(hh.begin(), hh.end(), [&](int a, int b) { return ww[a] > ww[b]; });
  for (int q_ = 0; q_ < q; q_++) {
    int l, r;
    cin >> l >> r, l--, r--;
    ll[q_] = l;
    rr[q_] = r;
    qq[q_] = q_;
  }
  sort(qq.begin(), qq.end(), [&](int a, int b) { return rr[a] < rr[b]; });
  fill_n(dsu, n * 2, -1);
  int w = -1, h = 0;
  for (int q_ : qq) {
    int l = ll[q_], r = rr[q_];
    for (; h < m && hh[h] <= r; h++) {
      int h_ = hh[h];
      int i = ii[h_];
      int j = jj[h_];
      int i0 = i << 1, i1 = i0 | 1;
      int j0 = j << 1, j1 = j0 | 1;
      if (join(i0, j1) && !join(i1, j0)) {
        w = ww[h_];
        break;
      }
    }
    ans[q_] = w;
  }
  for (int w : ans) cout << w << '\n';
}
```