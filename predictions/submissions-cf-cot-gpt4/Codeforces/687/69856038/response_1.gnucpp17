#include <algorithm>
#include <iostream>
using namespace std;
const int N = 1000, M = N * (N - 1) / 2;
int dsu[N * 2], h[M], ii[M], jj[M], ww[M], qq[M], rr[M], ss[M];
pair<int, int> hh[M];
int find(int i) { return dsu[i] < 0 ? i : (dsu[i] = find(dsu[i])); }
bool join(int i, int j) {
  if ((i = find(i)) == (j = find(j)))
    return false;
  if (dsu[i] > dsu[j])
    dsu[i] = j;
  else {
    if (dsu[i] == dsu[j])
      dsu[i]--;
    dsu[j] = i;
  }
  return true;
}
int main() {
  int n, m, q;
  scanf("%d%d%d", &n, &m, &q);
  for (int h = 0; h < m; h++) {
    scanf("%d%d%d", &ii[h], &jj[h], &ww[h]), ii[h]--, jj[h]--;
    hh[h] = {ww[h], h};
  }
  sort(hh, hh + m);
  reverse(hh, hh + m);
  for (int i = 0; i < q; i++) {
    scanf("%d%d", &qq[i], &rr[i]), qq[i]--;
    ss[i] = i;
  }
  sort(ss, ss + q, [&](int a, int b) { return rr[a] < rr[b]; });
  int j = 0;
  for (int i = 0; i < q; i++) {
    int qi = ss[i];
    fill_n(dsu, n * 2, -1);
    int w = -1;
    while (j < m && qq[qi] <= hh[j].second && hh[j].second <= rr[qi]) {
      int h = hh[j++].second;
      int i0 = ii[h] << 1, i1 = i0 | 1;
      int j0 = jj[h] << 1, j1 = j0 | 1;
      if (join(i0, j1) && !join(i1, j0)) {
        w = ww[h];
        break;
      }
    }
    printf("%d\n", w);
  }
}