#include <iostream>
#include <vector>
#include <cmath>

struct Point {
    int64_t x, y;
    Point(int64_t _x, int64_t _y) : x(_x), y(_y) {}
};

inline int64_t dist(const Point& a, const Point& b) {
    return std::abs(a.x - b.x) + std::abs(a.y - b.y);
}

inline Point next(const Point& temp, int64_t ax, int64_t bx, int64_t ay, int64_t by) {
    return Point(ax * temp.x + bx, ay * temp.y + by);
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);

    int64_t xx, yy, ax, bx, ay, by, xs, ys, t;
    std::cin >> xx >> yy >> ax >> ay >> bx >> by >> xs >> ys >> t;

    Point temp(xx, yy);
    Point tx(xs, ys);

    std::vector<Point> arr;
    int64_t vs = 0;

    int64_t dea = dist(temp, tx);
    if (dea <= t)
        arr.emplace_back(temp);

    temp = next(temp, ax, bx, ay, by);
    vs = (dist(tx, temp) > dea) ? 2 : 1;

    while (vs == 1 || (vs == 2 && dist(tx, temp) <= t)) {
        dea = dist(tx, temp);
        arr.emplace_back(temp);
        temp = next(temp, ax, bx, ay, by);
        if (vs == 1 && dea < dist(tx, temp))
            vs = 2;
    }

    int64_t ans = 0;
    size_t arrSize = arr.size();

    for (size_t i = 0; i < arrSize; i++) {
        size_t j = i;
        int64_t dus = dist(tx, arr[i]);
        int64_t tx = dus;

        if (dus <= t) {
            while (j < arrSize - 1 && dus <= t) {
                j++;
                dus += dist(arr[j], arr[j - 1]);
            }
            ans = std::max(ans, j - i + ((dus <= t) ? 1 : 0));
            dus = tx;
            j = i;

            while (j > 0 && dus <= t) {
                j--;
                dus += dist(arr[j], arr[j + 1]);
            }
            ans = std::max(ans, i - j + ((dus <= t) ? 1 : 0));
        }
    }

    std::cout << ans;
    return 0;
}