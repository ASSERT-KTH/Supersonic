#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <unordered_map>

#define FAST ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
#define ll long long

using std::pair;
using std::vector;
using std::cin;
using std::cout;
using std::max;
using std::abs;

ll xx, yy, ax, bx, ay, by, xs, ys, t;
unordered_map<pair<ll, ll>, ll> distCache;

ll dist(pair<ll, ll> a, pair<ll, ll> b) {
  pair<pair<ll, ll>, pair<ll, ll>> key = {a, b};
  if (distCache.find(key) == distCache.end())
    distCache[key] = abs(a.first - b.first) + abs(a.second - b.second);
  return distCache[key];
}

pair<ll, ll> next(pair<ll, ll> temp) {
  return {ax * temp.first + bx, ay * temp.second + by};
}

int main() {
  FAST;
  cin >> xx >> yy >> ax >> ay >> bx >> by >> xs >> ys >> t;
  pair<ll, ll> temp = {xx, yy}, tx = {xs, ys};
  vector<pair<ll, ll>> arr;
  arr.reserve(100000); // assuming the maximum size
  ll vs = 0, dea = dist(temp, tx);
  if (dea <= t)
    arr.push_back(temp);
  temp = next(temp);
  vs = dist(tx, temp) > dea ? 2 : 1;
  while (vs == 1 || (vs == 2 && dist(tx, temp) <= t)) {
    dea = dist(tx, temp);
    arr.push_back(temp);
    temp = next(temp);
    if (vs == 1 && dea < dist(tx, temp))
      vs = 2;
  }
  ll ans = 0;
  for (int i = 0; i < arr.size(); i++) {
    int j = i;
    ll dus = dist(tx, arr[i]), tx = dus;
    if (dus <= t) {
      while (j < arr.size() - 1 && dus <= t) {
        j++;
        dus += dist(arr[j], arr[j - 1]);
      }
      ans = max(ans, dus <= t ? (ll)j - i + 1 : (ll)j - i);
      dus = tx;
      j = i;
      while (j > 0 && dus <= t) {
        j--;
        dus += dist(arr[j], arr[j + 1]);
      }
      ans = max(ans, dus <= t ? (ll)i - j + 1 : (ll)i - j);
    }
  }
  cout << ans;
}