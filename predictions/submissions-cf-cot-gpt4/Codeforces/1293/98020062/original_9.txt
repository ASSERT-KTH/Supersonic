There are several ways to optimize this program:

1. **Avoid using `bits/stdc++.h`**: This header file includes almost all the header files of the C++ standard library, which increases compilation time. Instead, include only the necessary header files.

2. **Use `unordered_map` instead of `map`**: The `map` in C++ is implemented as a balanced tree structure that is why it is possible to maintain an order between the elements. Time complexity of map operations is O(Log n) while for unordered_set, it is O(1) on average.

3. **Avoid defining unused types and macros**: This includes `#define PI` and `#define hell`, and the typedef `indexed_set`.

4. **Avoid unnecessary function calls in the loop**: In the loop where the binary search is performed, the `min` function is called every time, even if the value has not changed. This can be avoided by first checking if the value is smaller before calling `min`.

Here is the optimized version of the code:

```c++
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <unordered_map>

using namespace std;

typedef long long ll;
typedef pair<ll, ll> pii;
typedef vector<ll> vi;
typedef vector<pii> vii;

#define pb push_back
#define all(a) (a).begin(), (a).end()
#define F first
#define S second
#define sz(x) (ll) x.size()
#define endl '\n'
#define rep(i, a, b) for (ll i = a; i < b; i++)
#define IOS ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);

const ll mod = 1000000007;

ll solve() {
  ll n, s, k;
  cin >> n >> s >> k;
  vi a(k);
  rep(i, 0, k) cin >> a[i];
  ll cnt = INT_MAX;
  sort(all(a));
  for (int i = s - 1010; i <= s + 1010; i++) {
    if (i > 0 and i <= n)
      if (!binary_search(all(a), i)) {
        ll new_cnt = abs(s - i);
        if (new_cnt < cnt) {
          cnt = new_cnt;
        }
      }
  }
  cout << cnt;
  return 0;
}

signed main() {
  IOS
  int t = 1;
  cin >> t;
  while (t--) {
    solve();
    cout << endl;
  }
  return 0;
}

```

This optimized code should have reduced execution time and memory usage compared to the original code.