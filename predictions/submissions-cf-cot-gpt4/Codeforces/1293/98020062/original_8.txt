Here are the steps of optimization:

1. Remove the unused macros and headers. The code contains the "#include <bits/stdc++.h>" line, which includes a lot of unnecessary headers. Some of the macros are also not used in your code, so we can remove them as well.

2. Use unordered_map instead of map. Unordered maps in C++ use a hashing mechanism which makes them faster than map containers.

3. Avoid using "using namespace std". It can cause name collision problems. Use the specific ones like std::vector, std::pair, etc.

4. Use "auto" when the type of the variable can be automatically deduced from its initializer. This can make the code more readable and reduce the chance of typing errors.

5. Instead of using the push_back and pop_back functions, resize the vector to its necessary size at once.

6. Instead of using the endl object to insert a new line, use "\n". endl also flushes the output buffer each time it is called, which can significantly slow down the output.

Here is the optimized version of the code:

```c++
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using std::cin;
using std::cout;
using std::vector;
using std::pair;
using std::make_pair;

const long long hell = 1000000007;
const long long mod = 1000000007;

long long solve() {
  long long n, s, k;
  cin >> n >> s >> k;
  vector<long long> a(k);
  for (auto& i : a) cin >> i;

  long long cnt = INT_MAX;
  std::sort(a.begin(), a.end());
  for (long long i = s - 1010; i <= s + 1010; i++) {
    if (i > 0 && i <= n)
      if (std::binary_search(a.begin(), a.end(), i) == false)
        cnt = std::min(cnt, abs(s - i));
  }
  cout << cnt;
  return 0;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

#ifdef _DEBUG
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif

  int t = 1;
  cin >> t;
  while (t--) {
    solve();
    cout << "\n";
  }
  return 0;
}
```

Note: This is not a complete rewrite. I have essentially taken your code and made some modifications to optimize it.