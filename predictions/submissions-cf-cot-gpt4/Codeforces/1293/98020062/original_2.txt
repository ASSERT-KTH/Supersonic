Here are the optimizations that can be made:

1. The `#define` directives are used to define constants or macros that are being used throughout the program. Some of them are not used and can be removed. 

2. The `#include <bits/stdc++.h>` is a header file that includes most of the Standard Library in one go. This can slow down the compilation time as it includes a lot of unnecessary stuff. It's better to include only the libraries that you need.

3. The `using namespace std;` and `using namespace __gnu_pbds;` directives can cause name clashes if the program is part of a larger project or if these namespaces have common names with your own namespaces or identifiers. It's better to use the `std::` and `__gnu_pbds::` prefixes where needed.

4. The `lexistr` function is not used and can be removed.

5. The `IOS` macro is not used and can be removed. Instead, put the `ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);` in the main function.

6. The `solve` function does not need to return anything. So, it can be made a `void` function.

7. Instead of using `binary_search` on the sorted vector `a` to check if `i` is in `a`, you can put all elements of `a` in a `set` and then just use the `count` function to check if `i` is in the set. This is faster because inserting in a set and searching in a set are both O(log n) operations, whereas sorting a vector is an O(n log n) operation and searching is a O(log n) operation.

8. The `freopen` function is used to redirect input from the standard input to a file. This is only needed when debugging. It can be removed for the optimized version.

Here is the optimized code:

```cpp
#include <iostream>
#include <set>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <cmath>
typedef long long ll;
typedef std::vector<ll> vi;
const ll hell = 1000000007;
const ll mod = 1000000007;

void solve() {
  ll n, s, k;
  std::cin >> n >> s >> k;
  vi a(k);
  std::set<ll> a_set;
  for (ll i = 0; i < k; i++) {
    std::cin >> a[i];
    a_set.insert(a[i]);
  }
  ll cnt = INT_MAX;
  for (ll i = s - 1010; i <= s + 1010; i++) {
    if (i > 0 and i <= n)
      if (a_set.count(i) == 0)
        cnt = std::min(cnt, abs(s - i));
  }
  std::cout << cnt;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);
  ll t;
  std::cin >> t;
  while (t--) {
    solve();
    std::cout << '\n';
  }
  return 0;
}
```