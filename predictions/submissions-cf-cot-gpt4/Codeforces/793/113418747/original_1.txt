Optimization:

1. We can replace `bits/stdc++.h` with explicit includes. `bits/stdc++.h` is not standard. It is quite large and including it can significantly slow down the compilation process.

2. We can replace `scanf` with `cin` for consistency.

3. In the loop where `c[x][y]` is assigned, we check `min(dis, c[x][y])` even when `c[x][y]` is always `INF`. We can remove this check and directly assign `dis` to `c[x][y]`.

4. There are duplicate lines of code in the loop where `f[i][j][k][0]` and `f[i][j][k][1]` are assigned. We can store the minimum value in a local variable and then assign it to `f[i][j][k][0]` and `f[i][j][k][1]`.

Optimized Program:

```cpp
#include <iostream>
#include <algorithm>
using namespace std;
const int INF = 1000000007;
const int N = 81;
int n, m, p;
int c[N][N], f[N][N][N][2];

int main() {
  cin >> n >> p >> m;
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j)
      c[i][j] = INF;
  }
  for (int i = 1, x, y, dis; i <= m; ++i) {
    cin >> x >> y >> dis;
    c[x][y] = dis;
  }
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j) {
      for (int k = 0; k <= p; ++k) {
        f[i][j][k][0] = f[i][j][k][1] = INF;
      }
    }
  }
  for (int i = 1; i <= n; ++i) {
    f[i][i][1][0] = f[i][i][1][1] = 0;
  }
  for (int d = 1; d < n; ++d) {
    for (int i = 1; i + d <= n; ++i) {
      int j = i + d;
      for (int k = 2; k <= p; ++k) {
        int min_val_0 = INF;
        int min_val_1 = INF;
        for (int i2 = i + 1; i2 < j; ++i2) {
          min_val_0 = min(min_val_0, min(f[i2][j][k - 1][0] + c[i][i2], f[i2][j][k - 1][1] + c[i][j]));
          min_val_0 = min(min_val_0, min(f[i2][j][k][0] + c[i][i2], f[i2][j][k][1] + c[i][j]));
        }
        f[i][j][k][0] = min(min_val_0, min(f[j][j][k - 1][0] + c[i][j], f[j][j][k][0] + c[i][j]));
        for (int j2 = j - 1; j2 > i; --j2) {
          min_val_1 = min(min_val_1, min(f[i][j2][k - 1][1] + c[j][j2], f[i][j2][k - 1][0] + c[j][i]));
          min_val_1 = min(min_val_1, min(f[i][j2][k][1] + c[j][j2], f[i][j2][k][0] + c[j][i]));
        }
        f[i][j][k][1] = min(min_val_1, min(f[i][i][k - 1][1] + c[j][i], f[i][i][k][1] + c[j][i]));
      }
    }
  }
  int ans = INF;
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j) {
      ans = min(ans, min(f[i][j][p][0], f[i][j][p][1]));
    }
  }
  cout << (ans == INF ? -1 : ans) << endl;
}
```

This optimized version reduces redundant code lines and computations, resulting in decreased running time and cleaner code.