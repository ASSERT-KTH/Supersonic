The given C/C++ program has several areas that can be optimized for better runtime and memory usage:

1. Using iostream: The iostream should be used instead of bits/stdc++.h as it includes almost all necessary standard libraries which can slow down the compilation process.

2. Use of scanf: The usage of scanf can be replaced by cin for better consistency in the code.

3. Use of Constants: The constant INF is used repeatedly throughout the program. We can use std::numeric_limits<int>::max() instead.

4. Redundant Computations: There are several redundant computations in the for-loop which can be consolidated to reduce the runtime.

5. Removal of redundant operations: Redundant operations can be avoided to reduce the time complexity and improve the performance.

Here is the optimized code:

```cpp
#include <iostream>
#include <limits>
using namespace std;

const int N = 81;
int n, m, p;
int c[N][N], f[N][N][N][2];

int main() {
  cin >> n >> p >> m;
  int INF = numeric_limits<int>::max();
  fill_n(&c[0][0], N*N, INF);
  fill_n(&f[0][0][0][0], N*N*N*2, INF);

  for (int i = 0, x, y, dis; i < m; ++i) {
    cin >> x >> y >> dis;
    c[x][y] = min(dis, c[x][y]);
  }
  for (int i = 1; i <= n; ++i) {
    f[i][i][1][0] = f[i][i][1][1] = 0;
  }
  for (int d = 1; d < n; ++d) {
    for (int i = 1; i + d <= n; ++i) {
      int j = i + d;
      for (int k = 2; k <= p; ++k) {
        for (int i2 = i + 1; i2 < j; ++i2) {
          int temp = min(f[i2][j][k - 1][0] + c[i][i2], f[i2][j][k - 1][1] + c[i][j]);
          f[i][j][k][0] = min(f[i][j][k][0], temp);
        }
        f[i][j][k][0] = min(f[i][j][k][0], f[j][j][k - 1][0] + c[i][j]);
        for (int j2 = j - 1; j2 > i; --j2) {
          int temp = min(f[i][j2][k - 1][1] + c[j][j2], f[i][j2][k - 1][0] + c[j][i]);
          f[i][j][k][1] = min(f[i][j][k][1], temp);
        }
        f[i][j][k][1] = min(f[i][j][k][1], f[i][i][k - 1][1] + c[j][i]);
      }
    }
  }
  int ans = INF;
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j) {
      ans = min(ans, min(f[i][j][p][0], f[i][j][p][1]));
    }
  }
  cout << (ans == INF ? -1 : ans) << endl;
}
```
The code is now more efficient due to the removal of redundant operations, and it's also easier to read and maintain.