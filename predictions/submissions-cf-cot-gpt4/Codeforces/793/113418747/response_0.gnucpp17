#include <bits/stdc++.h>
using namespace std;

const int INF = 1000000007;
const int N = 81;
const int MAX = 100;
int n, m, p;
int c[N][N], f[N][N][N][2];

void fastRead(int &number) {
    bool neg = false;
    register int c;
    number = 0;
    c = getchar();
    if (c=='-') {
        neg = true;
        c = getchar();
    }
    for (; (c>47 && c<58); c=getchar())
        number = number *10 + c - 48;
    if (neg)
        number *= -1;
}

void initArray() {
    memset(f, INF, sizeof(f));
    for (int i = 1; i <= n; ++i) {
        f[i][i][1][0] = f[i][i][1][1] = 0;
    }
}

void updateMin(int &a, int b) {
    a = min(a, b);
}

int main() {
    fastRead(n);
    fastRead(p);
    fastRead(m);
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j)
            c[i][j] = INF;
    }
    for (int i = 1, x, y, dis; i <= m; ++i) {
        fastRead(x);
        fastRead(y);
        fastRead(dis);
        c[x][y] = min(dis, c[x][y]);
    }
    initArray();
    for (int d = 1; d < n; ++d) {
        for (int i = 1; i + d <= n; ++i) {
            int j = i + d;
            for (int k = 2; k <= p; ++k) {
                for (int i2 = i + 1; i2 < j; ++i2) {
                    updateMin(f[i][j][k][0], f[i2][j][k - 1][0] + c[i][i2]);
                    updateMin(f[i][j][k][0], f[i2][j][k - 1][1] + c[i][j]);
                }
                updateMin(f[i][j][k][0], f[j][j][k - 1][0] + c[i][j]);
                for (int j2 = j - 1; j2 > i; --j2) {
                    updateMin(f[i][j][k][1], f[i][j2][k - 1][1] + c[j][j2]);
                    updateMin(f[i][j][k][1], f[i][j2][k - 1][0] + c[j][i]);
                }
                updateMin(f[i][j][k][1], f[i][i][k - 1][1] + c[j][i]);
            }
        }
    }
    int ans = INF;
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
            updateMin(ans, f[i][j][p][0]);
            updateMin(ans, f[i][j][p][1]);
        }
    }
    printf("%d\n", ans == INF ? -1 : ans);
}