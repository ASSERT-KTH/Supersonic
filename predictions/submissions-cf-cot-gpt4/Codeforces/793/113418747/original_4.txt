This program has loops that might be computationally expensive and some redundancy in the code. Here are some optimization steps:

1. The "scanf" function can be replaced with "cin" for better code consistency. This has no performance impact, but it's a good practice to use one method for input throughout the code.
2. The minimum calculation is repeated several times, we can use variables to store the minimum value so as to calculate it only once and save computation time.
3. In the last part of the code where we calculate "ans", we are repeatedly comparing with "INF" in each iteration. Instead of doing this, we can initially set "ans" to INF and then only update it if a smaller value is found. This will save us from unnecessary comparisons.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int INF = 1000000007;
const int N = 81;
int n, m, p;
int c[N][N], f[N][N][N][2];
int main() {
  cin >> n >> p >> m;
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j)
      c[i][j] = INF;
  }
  for (int i = 1, x, y, dis; i <= m; ++i) {
    cin >> x >> y >> dis;
    c[x][y] = min(dis, c[x][y]);
  }
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j) {
      for (int k = 0; k <= p; ++k) {
        f[i][j][k][0] = f[i][j][k][1] = INF;
      }
    }
  }
  for (int i = 1; i <= n; ++i) {
    f[i][i][1][0] = f[i][i][1][1] = 0;
  }
  for (int d = 1; d < n; ++d) {
    for (int i = 1; i + d <= n; ++i) {
      int j = i + d;
      for (int k = 2; k <= p; ++k) {
        for (int i2 = i + 1; i2 < j; ++i2) {
          int temp0 = min(f[i2][j][k - 1][0] + c[i][i2], f[i2][j][k - 1][1] + c[i][j]);
          f[i][j][k][0] = min(f[i][j][k][0], temp0);
          int temp1 = min(f[i][j2][k - 1][1] + c[j][j2], f[i][j2][k - 1][0] + c[j][i]);
          f[i][j][k][1] = min(f[i][j][k][1], temp1);
        }
      }
    }
  }
  int ans = INF;
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j) {
      ans = min(ans, min(f[i][j][p][0], f[i][j][p][1]));
    }
  }
  cout << (ans == INF ? -1 : ans) << endl;
}
```

Please note that the performance of this optimized version may still not be acceptable for very large inputs since the program has a complexity of O(n^4).