The program can be optimized in several ways:

1. Instead of using the `std::cin` and `std::cout` for input and output, we can use `scanf` and `printf` which are faster.

2. The program is using a 4-dimensional array `f` which leads to a high memory usage. We only need the values of the current and the previous step. So, we can reduce the dimension of the array to three by using two 3-dimensional arrays `f1` and `f2` and swapping them after each step.

3. The calculations of `f[i][j][k][0]` and `f[i][j][k][1]` are done multiple times. We can calculate these values only once and store them in a variable.

4. The initial filling of the `f` array can be simplified by using the `std::fill` function from the STL.

5. The checking for the minimum value in the `f` array can be done in a more efficient way by using the `std::min_element` function from the STL.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;

const int INF = 1e9+7;
const int N = 81;
int n, m, p;
int c[N][N], f1[N][N][2], f2[N][N][2];

int main() {
  scanf("%d %d %d", &n, &p, &m);
  
  for (int i = 1; i <= n; ++i) {
    fill(c[i]+1, c[i]+n+1, INF);
  }
  for (int i = 1, x, y, dis; i <= m; ++i) {
    scanf("%d %d %d", &x, &y, &dis);
    c[x][y] = min(dis, c[x][y]);
  }
  for (int i = 1; i <= n; ++i) {
    fill(f2[i][i], f2[i][i]+2, 0);
  }
  for (int d = 1; d < n; ++d) {
    for (int i = 1; i + d <= n; ++i) {
      int j = i + d;
      for (int k = 2; k <= p; ++k) {
        int temp1, temp2;
        for (int i2 = i + 1; i2 < j; ++i2) {
          temp1 = min(f2[i2][j][0] + c[i][i2], f2[i2][j][1] + c[i][j]);
          temp1 = min(temp1, f2[i2][j][0] + c[i][i2]);
          temp1 = min(temp1, f2[i2][j][1] + c[i][j]);
        }
        f1[i][j][0] = min(temp1, f2[j][j][0] + c[i][j]);
        for (int j2 = j - 1; j2 > i; --j2) {
          temp2 = min(f2[i][j2][1] + c[j][j2], f2[i][j2][0] + c[j][i]);
          temp2 = min(temp2, f2[i][j2][1] + c[j][j2]);
          temp2 = min(temp2, f2[i][j2][0] + c[j][i]);
        }
        f1[i][j][1] = min(temp2, f2[i][i][1] + c[j][i]);
      }
    }
    swap(f1, f2);
  }
  int ans = *min_element(f2[1][n], f2[1][n]+2);
  printf("%d\n", ans == INF ? -1 : ans);
  return 0;
}
```
The optimized program is not only faster but also uses less memory.