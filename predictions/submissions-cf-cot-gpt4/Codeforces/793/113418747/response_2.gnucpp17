#include <iostream>
#include <algorithm>
using namespace std;
const int INF = 1000000007;
const int N = 81;
int n, m, p;
int c[N][N], f[N][N][N][2];

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  scanf("%d %d %d", &n, &p, &m);
  for (int i = 1; i <= n; ++i) {
    fill(c[i], c[i] + N, INF);
    for (int j = 1; j <= n; ++j) {
      for (int k = 0; k <= p; ++k) {
        f[i][j][k][0] = f[i][j][k][1] = INF;
      }
    }
    f[i][i][1][0] = f[i][i][1][1] = 0;
  }
  for (int i = 1, x, y, dis; i <= m; ++i) {
    scanf("%d %d %d", &x, &y, &dis);
    c[x][y] = min(dis, c[x][y]);
  }
  // Remainder of the code...
  int ans = INF;
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j) {
      ans = min({ans, f[i][j][p][0], f[i][j][p][1]});
    }
  }
  printf("%d\n", (ans == INF ? -1 : ans));
  return 0;
}