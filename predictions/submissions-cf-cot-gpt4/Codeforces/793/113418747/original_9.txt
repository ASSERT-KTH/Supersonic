The given C++ program reads input from the user to initialize a multi-dimensional array and then performs a series of calculations to find a minimum value in the array. The size of the multi-dimensional array is huge, which may cause memory issues when running the program with large inputs. Also, there are a number of redundant calculations and unoptimized I/O operations that slow down the run-time of the program.

Here are the steps to optimize the program:

1. Use scanf and printf instead of cin and cout for faster I/O operations. cin and cout are slower as they have to sync with the C standard libraries.

2. There are some lines of code which are repetitively calculating the same value. We can assign the calculated value to a variable and use that variable in the lines of code instead of recalculating the same value.

Here's the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int INF = 1000000007;
const int N = 81;
int n, m, p;
int c[N][N], f[N][N][N][2];
int main() {
  scanf("%d %d %d", &n, &p, &m);
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j)
      c[i][j] = INF;
  }
  for (int i = 1, x, y, dis; i <= m; ++i) {
    scanf("%d%d", &x, &y);
    scanf("%d", &dis);
    c[x][y] = min(dis, c[x][y]);
  }
  fill(&f[0][0][0][0], &f[0][0][0][0] + sizeof(f) / sizeof(f[0][0][0][0]), INF);
  for (int i = 1; i <= n; ++i) {
    f[i][i][1][0] = f[i][i][1][1] = 0;
  }
  for (int d = 1; d < n; ++d) {
    for (int i = 1; i + d <= n; ++i) {
      int j = i + d;
      for (int k = 2; k <= p; ++k) {
        for (int i2 = i + 1; i2 < j; ++i2) {
          int temp1 = f[i2][j][k - 1][0] + c[i][i2];
          int temp2 = f[i2][j][k - 1][1] + c[i][j];
          f[i][j][k][0] = min({f[i][j][k][0], temp1, temp2});
          f[i][j][k][1] = min(f[i][j][k][1], temp2);
        }
        f[i][j][k][0] = min(f[i][j][k][0], f[j][j][k - 1][0] + c[i][j]);
        for (int j2 = j - 1; j2 > i; --j2) {
          int temp3 = f[i][j2][k - 1][1] + c[j][j2];
          int temp4 = f[i][j2][k - 1][0] + c[j][i];
          f[i][j][k][1] = min({f[i][j][k][1], temp3, temp4});
        }
        f[i][j][k][1] = min(f[i][j][k][1], f[i][i][k - 1][1] + c[j][i]);
      }
    }
  }
  int ans = INF;
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j) {
      ans = min({ans, f[i][j][p][0], f[i][j][p][1]});
    }
  }
  printf("%d\n", (ans == INF ? -1 : ans));
}
```

Remember that optimization can sometimes make code harder to understand and maintain. It's often a good idea to keep the unoptimized version of your code in comments for reference.