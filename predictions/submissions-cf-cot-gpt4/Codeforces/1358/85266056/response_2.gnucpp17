#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
const long long MOD = 1e9 + 7;
long long getSum(long long n) { return n * (n + 1) / 2; }
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long n, x;
  cin >> n >> x;
  vector<long long> v(n);
  for (long long &x : v)
    cin >> x;
  long long ans = 0;
  int e = 0;
  long long days = 0, sums = 0;
  while (e < 2 * n) {
    long long val = v[e % n];
    days += val;
    sums += getSum(val);
    e++;
    if (days > x) {
        long long diff = days - x;
        int start_val = v[(e - 1) % n];
        if (start_val > diff) {
            sums -= getSum(start_val) - getSum(diff);
            days -= diff;
        } else {
            sums -= getSum(start_val);
            days -= start_val;
        }
    }
    ans = max(ans, sums);
  }
  cout << ans;
  return 0;
}