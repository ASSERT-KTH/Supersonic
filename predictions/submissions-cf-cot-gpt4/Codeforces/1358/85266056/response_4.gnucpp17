#include <iostream>
#include <vector>
using namespace std;
const long long MOD = 1e9 + 7;
long long getSum(long long n) { return n * (n + 1) / 2; }
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long n, x;
  cin >> n >> x;
  vector<long long> v(n);
  for (long long &x : v)
    cin >> x;
  vector<long long> u(n), z(n);
  u[0] = v[0];
  z[0] = getSum(v[0]);
  for (long long i = 1; i < n; i++) {
    u[i] = u[i - 1] + v[i];
    z[i] = z[i - 1] + getSum(v[i]);
  }
  long long ans = 0;
  for (long long i = 0; i < n; i++) {
    long long pos = lower_bound(u.begin(), u.end(), u[i] - x + v[i]) - u.begin();
    long long total = z[i];
    if (pos != 0) {
      total -= z[pos - 1];
      long long diff = x - (u[i] - (pos == 0 ? 0 : u[pos - 1]));
      total += getSum(v[pos] - diff);
    }
    ans = max(ans, total);
  }
  cout << ans;
  return 0;
}