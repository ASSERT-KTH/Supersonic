#include <algorithm>
#include <chrono>
#include <cmath>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>
using namespace std;
const long long MOD = 1e9 + 7;
long long getSum(long long n) { return n * (n + 1) / 2; }
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long n, x;
  cin >> n >> x;
  vector<long long> v(n);
  for (long long &x : v)
    cin >> x;
  vector<long long> u(2*n), z(2*n);
  u[0] = v[0];
  z[0] = getSum(v[0]);
  for (long long i = 1; i < 2*n; i++) {
    u[i] = u[i-1] + v[i%n];
    z[i] = z[i-1] + getSum(v[i%n]);
  }
  long long ans = 0;
  int s = 0, e = 0;
  while (e < 2*n) {
    long long days = u[e] - (s > 0 ? u[s-1] : 0);
    long long sums = z[e] - (s > 0 ? z[s-1] : 0);
    while (days > x) {
      days -= v[s%n];
      sums -= getSum(v[s%n]);
      s++;
    }
    long long diff = max(days - x, 0LL);
    ans = max(ans, sums - getSum(diff));
    e++;
  }
  cout << ans;
  return 0;
}