#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
int n, vis[2 * N], ord[2 * N], ordn, cnt, cmp[2 * N], val[N];
int adj[2 * N][2], adjt[2 * N][2];
int m, st[N], sw[N][2];
int v(int x) { return 2 * x; }
int nv(int x) { return 2 * x + 1; }
void dfs(int x) {
  vis[x] = 1;
  for (int i = 0; i < 2; i++)
    if (!vis[adj[x][i]])
      dfs(adj[x][i]);
  ord[ordn++] = x;
}
void dfst(int x) {
  cmp[x] = cnt, vis[x] = 0;
  for (int i = 0; i < 2; i++)
    if (vis[adjt[x][i]])
      dfst(adjt[x][i]);
}
bool run2sat() {
  for (int i = 1; i <= m; i++) {
    if (!vis[2 * i])
      dfs(2 * i);
    if (!vis[2 * i + 1])
      dfs(2 * i + 1);
  }
  for (int i = ordn - 1; i >= 0; i--)
    if (vis[ord[i]])
      cnt++, dfst(ord[i]);
  for (int i = 1; i <= m; i++) {
    if (cmp[2 * i] == cmp[2 * i + 1])
      return false;
    val[i] = cmp[2 * i] > cmp[2 * i + 1];
  }
  return true;
}
int main() {
  ios_base::sync_with_stdio(0), cin.tie(0);
  cin >> n >> m;
  for (int i = 1; i <= n; i++)
    cin >> st[i];
  int q, a;
  for (int i = 1; i <= m; i++) {
    cin >> q;
    while (q--) {
      cin >> a;
      sw[a][0] ? sw[a][1] = i : sw[a][0] = i;
    }
  }
  for (int i = 1; i <= n; i++) {
    int p = sw[i][0];
    int q = sw[i][1];
    if (!st[i])
      adj[2 * p][0] = 2 * q, adj[2 * p + 1][0] = 2 * q, adj[2 * q][1] = 2 * p, adj[2 * q + 1][1] = 2 * p;
    else
      adj[2 * p][1] = 2 * q, adj[2 * p][0] = 2 * q + 1, adj[2 * q][0] = 2 * p + 1, adj[2 * q][1] = 2 * p;
  }
  cout << (run2sat() ? "YES\n" : "NO\n");
}