#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
int n, vis[2 * N], ord[2 * N], ordn, cnt, cmp[2 * N], val[N];
vector<int> adj[2 * N], adjt[2 * N];
int m, st[N], sw[N][2];
vector<int> stk;

void add(int a, int b) {
  adj[a ^ 1].push_back(b);
  adj[b ^ 1].push_back(a);
  adjt[b].push_back(a ^ 1);
  adjt[a].push_back(b ^ 1);
}
void dfs(int x) {
  vis[x] = 1;
  for (auto v : adj[x])
    if (!vis[v])
      dfs(v);
  ord[ordn++] = x;
}
void dfst(int x) {
  cmp[x] = cnt, vis[x] = 0;
  for (auto v : adjt[x])
    if (vis[v])
      dfst(v);
}
bool run2sat() {
  for (int i = 1; i <= m; ++i) {
    if (!vis[2*i])
      dfs(2*i);
    if (!vis[2*i + 1])
      dfs(2*i + 1);
  }
  for (int i = ordn - 1; i >= 0; --i)
    if (vis[ord[i]])
      ++cnt, dfst(ord[i]);
  for (int i = m; i >= 0; --i)
    if (vis[ord[i]])
      ++cnt, dfst(ord[i]);
  for (int i = 1; i <= m; ++i) {
    if (cmp[2*i] == cmp[2*i + 1])
      return false;
    val[i] = cmp[2*i] > cmp[2*i + 1];
  }
  return true;
}
int main() {
  ios_base::sync_with_stdio(0), cin.tie(0);
  cin >> n >> m;
  for (int i = 1; i <= n; i++)
    cin >> st[i];
  int q, a;
  for (int i = 1; i <= m; i++) {
    cin >> q;
    while (q--) {
      cin >> a;
      sw[a][0] ? sw[a][1] = i : sw[a][0] = i;
    }
  }
  for (int i = 1; i <= n; i++) {
    int p = sw[i][0];
    int q = sw[i][1];
    if (!st[i])
      add(2*p, 2*q), add(2*p + 1, 2*q + 1);
    else
      add(2*p + 1, 2*q), add(2*p, 2*q + 1);
  }
  cout << (run2sat() ? "YES\n" : "NO\n");
}