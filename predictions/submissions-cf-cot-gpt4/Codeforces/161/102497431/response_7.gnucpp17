#include <iostream>
#include <vector>
#include <chrono>
#include <random>
#define pb push_back

typedef long long ll;
typedef unsigned long long ull;

const ll MOD = 1e9 + 7;
const ll llinf = 1ll << 60;
const double PI = 3.14159265;
const int N = 50005;
const int K = 505;

std::mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
std::vector<int> g[N];
ll ans;
int n, k;
ll dp[N][K];

ll mrand(ll B) { return (ull)rng() % B; }

void dfs(int node, int par) {
  for (auto &u : g[node]) {
    if (u == par)
      continue;
    dfs(u, node);
    for (int i = 1; i <= k; i++) {
      dp[node][i] += dp[u][i - 1];
    }
  }
  ans += dp[node][k];
  ll tot = 0;
  for (int i = 1, j = k - 1; i < k; i++, j--) {
    for (auto &u : g[node]) {
      if (u == par)
        continue;
      ll diff = dp[node][j] - dp[u][j - 1];
      tot += (dp[u][i - 1]) * diff;
    }
  }
  ans += tot >> 1;
  dp[node][0] = 1LL;
}

void work() {
  scanf("%d%d", &n, &k);
  for (int i = 0; i < n - 1; i++) {
    int u, v;
    scanf("%d%d", &u, &v);
    --u, --v;
    g[u].pb(v), g[v].pb(u);
  }
  dfs(0, -1);
  printf("%lld\n", ans);
  for (int i = 0; i < n; i++) {
    g[i].clear();
  }
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  work();
  return 0;
}