The given C++ program calculates some properties of a tree with given nodes and edges. The main optimization that can be done in this program is to avoid the unnecessary use of vectors and use arrays instead. In the given program, the vector 'g' is used which can be replaced with arrays.

1. Replace 'vector<int> g[N]' with 'int g[N][N]'. You will also need to modify the way you handle this array in your program.
2. Another optimization is to avoid using 'long long' in functions where 'int' is enough. It will save memory and improve execution speed.
3. The 'z_func' function is not used in the program, you can remove it to save memory space and improve readability.
4. The 'cross' and 'online' functions are also not used and can be removed.
5. To speed up the input/output operations, you can replace 'scanf' and 'printf' with 'cin' and 'cout' and use '\n' instead of 'endl' for new lines as it is faster.

Here is the optimized program:

```C++
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
const ll MOD = 1e9 + 7;
#define pb push_back
#define ff first
#define ss second
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll mrand(ll B) { return (ull)rng() % B; }
const int N = 50005;
const int K = 505;
int g[N][N];
ll ans;
int n, k;
ll dp[N][K];
void dfs(int node, int par) {
  for (int u = 0; u < n; u++) {
    if (u == par || g[node][u] == 0)
      continue;
    dfs(u, node);
    for (int i = 1; i <= k; i++) {
      dp[node][i] += dp[u][i - 1];
    }
  }
  ans += dp[node][k];
  ll tot = 0;
  for (int i = 1, j = k - 1; i < k; i++, j--) {
    for (int u = 0; u < n; u++) {
      if (u == par || g[node][u] == 0)
        continue;
      tot += (dp[u][i - 1]) * (dp[node][j] - dp[u][j - 1]);
    }
  }
  ans += tot >> 1;
  dp[node][0] = 1LL;
}
void work() {
  cin >> n >> k;
  for (int i = 0; i < n - 1; i++) {
    int u, v;
    cin >> u >> v;
    --u, --v;
    g[u][v] = g[v][u] = 1;
  }
  dfs(0, -1);
  cout << ans << '\n';
}
int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  work();
  return 0;
}
```
Note: This code assumes that the original code is correct. The optimizations are based on the original code, and they don't fix any logical errors that might exist in the original code.