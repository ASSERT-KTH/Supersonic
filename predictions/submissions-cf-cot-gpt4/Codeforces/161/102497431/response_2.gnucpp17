#include <vector>
#include <utility>
#include <random>
#include <chrono>
#include <cstdio>
using namespace std;
typedef long long ll;
typedef pair<ll, ll> pll;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll mrand(ll B) { return (ull)rng() % B; }
ll cross(pll p1, pll p2) {
  return p1.first * p2.second - p2.first * p1.second;
}
bool online(pll a, pll b, pll c) {
  pll p1{b.first - a.first, b.second - a.second};
  pll p2{c.first - a.first, c.second - a.second};
  return cross(p1, p2) == 0;
}
void z_func(vector<int> &z, vector<int> &s, int n) {
  int L = 0, R = 0;
  for (int i = 1; i < n; i++) {
    if (i > R) {
      L = R = i;
      while (R < n && s[R - L] == s[R])
        R++;
      z[i] = R - L;
      R--;
    } else {
      int k = i - L;
      if (z[k] < R - i + 1)
        z[i] = z[k];
      else {
        L = i;
        while (R < n && s[R - L] == s[R])
          R++;
        z[i] = R - L;
        R--;
      }
    }
  }
}
const int N = 50005;
const int K = 505;
vector<int> g[N];
void dfs(int node, int par, int k, ll dp[N][K], ll &ans) {
  for (auto &u : g[node]) {
    if (u == par)
      continue;
    dfs(u, node, k, dp, ans);
    for (int i = 1; i <= k; i++) {
      dp[node][i] += dp[u][i - 1];
    }
  }
  ans += dp[node][k];
  ll tot = 0;
  for (int i = 1, j = k - 1; i < k; i++, j--) {
    for (auto &u : g[node]) {
      if (u == par)
        continue;
      tot += (dp[u][i - 1]) * (dp[node][j] - dp[u][j - 1]);
    }
  }
  ans += tot >> 1;
  dp[node][0] = 1LL;
}
void work() {
  int n, k;
  scanf("%d%d", &n, &k);
  ll ans = 0;
  ll dp[N][K] = {0};
  for (int i = 0; i < n - 1; i++) {
    int u, v;
    scanf("%d%d", &u, &v);
    --u, --v;
    g[u].push_back(v), g[v].push_back(u);
  }
  dfs(0, -1, k, dp, ans);
  printf("%lld\n", ans);
}
int main() {
  work();
  return 0;
}