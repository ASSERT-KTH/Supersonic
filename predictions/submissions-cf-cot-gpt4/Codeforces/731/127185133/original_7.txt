Here are the steps to optimize the program:

Step 1: Use vector instead of the array because a vector is a dynamic array and it doesn't require to be initialized with the size.

Step 2: Combine two for loops into one to reduce the time complexity of the program. We don't need to traverse the array twice. We can do the input and the operation in the same loop.

Step 3: Use pre-decrement instead of post-decrement for the operation `a[i + 1]--` as pre-decrement is generally faster than post-decrement.

Step 4: Remove the `#include <bits/stdc++.h>` header file as it includes quite a lot of files, which can lead to a slow compilation process. Instead, include only those header files which are required.

Step 5: Use `std::ios::sync_with_stdio(false);` and `cin.tie(NULL);` to make the input-output faster.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(NULL);

    int n;
    cin >> n;
    vector<int> a(n);
    bool flag = true;

    for (int i = 0; i < n; i++) {
        cin >> a[i];
        if (a[i] & 1) {
            if (i == n - 1 || a[i + 1] == 0) {
                flag = false;
                break;
            } else {
                --a[i + 1];
            }
        }
    }
    cout << (flag ? "YES" : "NO") << "\n";

    return 0;
}
```

This optimized program reduces the time complexity from O(2n) to O(n) and also makes the input-output operations faster. It makes better use of memory by using a vector instead of an array.