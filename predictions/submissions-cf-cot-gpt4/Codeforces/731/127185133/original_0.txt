Optimization Explanation

1. Use of '#include <bits/stdc++.h>' is considered bad practice as it includes a lot of unnecessary libraries, increasing the compile time. Replace it with only the libraries that are used in this program - '#include <iostream>' and '#include <vector>'

2. Dynamic allocation of array 'a' on stack can be troublesome and lead to stack overflow if 'n' is large. Instead use 'std::vector<int>' which will be allocated on heap.

3. Avoid using 'std::endl' as it causes unnecessary flush of the buffer. Instead use '\n' for new line.

4. In the second loop, we are accessing 'a[i+1]' without ensuring 'i+1' is within the bounds of the array, which can lead to undefined behavior. We can avoid this by stopping the loop one element before the end and handling the last element separately.

Optimized Program

```cpp
#include <iostream>
#include <vector>

int main() {
    int n;
    std::cin >> n;
    std::vector<int> a(n);
    int flag = 1;
    for (int i = 0; i < n; i++)
        std::cin >> a[i];
    for (int i = 0; i < n - 1; i++) {
        if (a[i] & 1) {
            if (a[i + 1] == 0) {
                flag = 0;
                break;
            }
            else
                a[i + 1]--;
        }
    }
    if (flag && (a[n - 1] & 1)) {
        flag = 0;
    }
    std::cout << (flag ? "YES" : "NO") << '\n';
    return 0;
}
```
