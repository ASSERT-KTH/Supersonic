#include <iostream>
#include <vector>
#include <algorithm>

const long long MAX_N = 4e5 + 5;
std::vector<long long> seg_tree(4 * MAX_N + 5, 0);
std::vector<long long> a(2 * MAX_N);

void build_tree(int tree_index, int strt_i, int end_i) {
  if (strt_i == end_i) {
    seg_tree[tree_index] = a[strt_i];
    return;
  }
  int mid = (strt_i + end_i) / 2;
  build_tree(tree_index * 2, strt_i, mid);
  build_tree(tree_index * 2 + 1, mid + 1, end_i);
  seg_tree[tree_index] = std::gcd(seg_tree[tree_index * 2], seg_tree[tree_index * 2 + 1]);
}

long long query(int tree_index, int strt_i, int end_i, int q_strt, int q_end) {
  if (strt_i > q_end || end_i < q_strt)
    return 0;
  if (q_strt <= strt_i && q_end >= end_i)
    return seg_tree[tree_index];
  int mid = (strt_i + end_i) / 2;
  long long l = query(2 * tree_index, strt_i, mid, q_strt, q_end);
  long long r = query(2 * tree_index + 1, mid + 1, end_i, q_strt, q_end);
  return std::gcd(l, r);
}

void solve() {
  int n;
  std::cin >> n;
  for (int i = 1; i <= n; ++i) {
    std::cin >> a[i];
    a[i + n] = a[i];
  }
  build_tree(1, 1, 2 * n);
  long long ans = 0, g = 0;
  for (int i = 1; i <= n; ++i) {
    g = std::gcd(g, a[i]);
  }
  for (int i = 1; i <= n; ++i) {
    int r = 2 * n, l = i + 1, cnt = 0;
    long long temp = 1e18;
    if (a[i] == g)
      continue;
    while (l <= r) {
      int mid = (l + r) / 2;
      long long x = query(1, 1, 2 * n, l, mid);
      long long y = std::gcd(x, a[i]);
      if (y == g)
        temp = std::min(temp, mid - l + 1 + (long long)cnt), r = mid - 1;
      else
        a[i] = std::gcd(a[i], x), cnt += mid - l + 1, l = mid + 1;
    }
    ans = std::max(ans, temp);
  }
  std::cout << ans << std::endl;
}

int main() {
  int t;
  std::cin >> t;
  while(t--) {
    solve();
  }
  return 0;
}