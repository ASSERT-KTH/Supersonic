#include <iostream>
#include <vector>

using namespace std;

typedef long long ll;

const ll mod = 1e9 + 7;
const ll INF = 1e18;
const int N = 4e5 + 5;

ll query(vector<ll>& seg_tree, int tree_index, int strt_i, int end_i, int q_strt, int q_end) {
  if (strt_i > q_end || end_i < q_strt)
    return 0;
  if (q_strt <= strt_i && q_end >= end_i)
    return seg_tree[tree_index];
  int mid = (strt_i + end_i) / 2;
  ll l = query(seg_tree, 2 * tree_index, strt_i, mid, q_strt, q_end);
  ll r = query(seg_tree, 2 * tree_index + 1, mid + 1, end_i, q_strt, q_end);
  return __gcd(l, r);
}

void solve() {
  int n;
  cin >> n;
  vector<ll> a(2 * N);
  vector<ll> seg_tree(4 * N + 5, 0);
  for (int i = 1; i < n + 1; ++i) {
    cin >> a[i];
    a[i + n] = a[i];
  }
  int ans = 0, g = 0;
  for (int i = 1; i < n + 1; ++i) g = __gcd(g, a[i]);
  for (int i = 1; i < n + 1; ++i) {
    int r = 2 * n, l = i + 1, temp = INF, cnt = 0;
    if (a[i] == g)
      continue;
    while (l <= r) {
      int mid = (l + r) / 2;
      ll x = query(seg_tree, 1, 1, 2 * n, l, mid);
      ll y = __gcd(x, a[i]);
      if (y == g)
        temp = min(temp, mid - l + 1 + cnt), r = mid - 1;
      else
        a[i] = __gcd(a[i], x), cnt += mid - l + 1, l = mid + 1;
    }
    ans = max(ans, temp);
  }
  cout << ans << "\n";
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  int t = 1;
  cin >> t;
  for (int i = 1; i < t + 1; ++i) { solve(); }
}