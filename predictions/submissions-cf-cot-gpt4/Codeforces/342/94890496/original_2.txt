The given C/C++ code snippet is already quite optimized in terms of modern C++ programming standards. However, there are some steps we can take to optimize the program further.

1. Use 'const' keyword: Using 'const' keyword for the parameters of functions which are not modified inside the function, can give a hint to the compiler about the nature of the variable and can help in optimization.

2. Remove redundant code: The function 'dist()' is called twice to calculate the same value in the 'update()' and 'getans()' functions. We can remove this redundancy by calculating the distance once and storing it in a variable.

3. Avoid using expensive C++ functions: The 'swap()' function can be replaced with a simple if-else condition.

4. Avoid using global variables: If possible avoid using global variables. It can lead to code that is difficult to read and debug. It also restricts code reusability.

5. Use '\n' instead of 'endl': 'endl' causes a flush operation which can be time-consuming when there is a lot of output. So, use '\n' instead of 'endl'.

Here is the optimized code:

```cpp
#include "bits/stdc++.h"
#define ll long long int
#define fast ios_base::sync_with_stdio(0), cin.tie(0)
#define mp(a, b) make_pair(a, b)
#define pb(a) push_back(a)
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define file                                                                   \
  freopen("input.txt", "r", stdin), freopen("output.txt", "w", stdout);
using namespace std;
typedef pair<ll, ll> pairs;
typedef pair<ll, pairs> tpl;
set<ll> v[100001], ct[100001];
ll sub[100001], nc, cr, lca[100001][21], cpar[100001], lv[100001], n, m,
    ans[100001];
void dfs(const ll node, const ll par, const ll lvl) {
  lv[node] = lvl;
  lca[node][0] = par;
  for (auto a : v[node])
    if (a != par)
      dfs(a, node, lvl + 1);
}
void genlca() {
  memset(lca, -1, sizeof(lca));
  dfs(1, -1, 0);
  for (ll i = 1; i <= 20; i++)
    for (ll j = 1; j <= n; j++)
      if (lca[j][i - 1] != -1)
        lca[j][i] = lca[lca[j][i - 1]][i - 1];
}
ll getlca(ll a, ll b) {
  if (lv[a] > lv[b]){
    ll temp = a;
    a = b;
    b = temp;
  }
  ll d = lv[b] - lv[a];
  while (d > 0) {
    ll x = log2(d);
    b = lca[b][x];
    d -= (1 << x);
  }
  if (a == b)
    return a;
  for (ll i = 20; i >= 0; i--)
    if (lca[a][i] != lca[b][i])
      a = lca[a][i], b = lca[b][i];
  return lca[a][0];
}
ll dist(const ll a, const ll b) { return lv[a] + lv[b] - 2 * lv[getlca(a, b)]; }
void dfs(const ll node, const ll par) {
  nc++;
  sub[node] = 1;
  for (auto a : v[node])
    if (a != par)
      dfs(a, node), sub[node] += sub[a];
}
ll getcent(const ll node, const ll par) {
  for (auto a : v[node])
    if (a != par && sub[a] > nc / 2)
      return getcent(a, node);
  return node;
}
ll decom(const ll root) {
  nc = 0;
  dfs(root, -1);
  ll c = getcent(root, -1);
  for (auto a : v[c]) {
    v[a].erase(c);
    ll x = decom(a);
    ct[c].insert(x);
    ct[x].insert(c);
    cpar[x] = c;
  }
  return c;
}
void update(const ll par, const ll node) {
  if (par == -1)
    return;
  ll node_distance = dist(node, par);
  ans[par] = min(ans[par], node_distance);
  update(cpar[par], node);
}
ll getans(const ll par, const ll node) {
  if (par == -1)
    return INT_MAX;
  ll node_distance = dist(node, par);
  return min(getans(cpar[par], node), ans[par] + node_distance);
}
int main() {
  fast;
  cin >> n >> m;
  for (ll i = 1; i < n; i++) {
    ll a, b;
    cin >> a >> b;
    v[a].insert(b);
    v[b].insert(a);
  }
  for (ll i = 0; i <= n; i++)
    ans[i] = INT_MAX;
  genlca();
  cr = decom(1);
  cpar[cr] = -1;
  ans[1] = 0;
  update(cpar[1], 1);
  while (m--) {
    ll a, b;
    cin >> a >> b;
    if (a == 1) {
      ans[b] = 0;
      update(cpar[b], b);
    } else {
      cout << getans(b, b) << "\n";
    }
  }
}
```