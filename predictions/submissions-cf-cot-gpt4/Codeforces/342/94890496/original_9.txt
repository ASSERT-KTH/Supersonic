The code you provided is already optimized in terms of its algorithm. It uses a centroid decomposition of a tree, which is an advanced data structure used to answer queries about paths in the tree in log(n) time. The algorithm is already efficient but there are a few coding practices that can be improved to make the code cleaner and more efficient.

1. Do not include "bits/stdc++.h". It includes more than 100 files, some of which you might not be using at all. This could slow down your compilation time. Instead, include the specific libraries that you are using.

2. The code uses preprocessor macros to define short forms of operations like 'push_back' and 'make_pair'. This is not a good practice as it makes the code harder to read and understand. It’s better to use the original function names.

3. Using the global variables is not a good practice. This can lead to a lot of bugs if you're not careful. Instead, you should pass them as parameters to the functions where they are required.

4. The “fast” macro is used to speed up cin and cout, but the difference is negligible and it can cause problems with cin/cout synchronization. It’s better to remove it. 

5. The function names should be more descriptive to make the code easier to comprehend.

Here is the optimized code:

```C++
#include <iostream>
#include <vector>
#include <set>
#include <cstring>
#include <cmath>
#include <climits>

using namespace std;

typedef long long ll;
typedef pair<ll, ll> pairs;
typedef pair<ll, pairs> tpl;

set<ll> v[100001], ct[100001];
ll sub[100001], nc, cr, lca[100001][21], cpar[100001], lv[100001], n, m, ans[100001];

void dfsDepth(ll node, ll par, ll lvl, ll lv[]) {
  lv[node] = lvl;
  lca[node][0] = par;
  for (auto a : v[node])
    if (a != par)
      dfsDepth(a, node, lvl + 1, lv);
}

void genlca(ll lca[][], ll n, ll lv[]) {
  memset(lca, -1, sizeof(lca));
  dfsDepth(1, -1, 0, lv);
  for (ll i = 1; i <= 20; i++)
    for (ll j = 1; j <= n; j++)
      if (lca[j][i - 1] != -1)
        lca[j][i] = lca[lca[j][i - 1]][i - 1];
}

ll getlca(ll a, ll b, ll lv[], ll lca[][]) {
  if (lv[a] > lv[b])
    swap(a, b);
  ll d = lv[b] - lv[a];
  while (d > 0) {
    ll x = log2(d);
    b = lca[b][x];
    d -= (1 << x);
  }
  if (a == b)
    return a;
  for (ll i = 20; i >= 0; i--)
    if (lca[a][i] != lca[b][i])
      a = lca[a][i], b = lca[b][i];
  return lca[a][0];
}

ll dist(ll a, ll b, ll lv[], ll lca[][]) { return lv[a] + lv[b] - 2 * lv[getlca(a, b, lv, lca)]; }

void dfsSub(ll node, ll par, ll sub[]) {
  nc++;
  sub[node] = 1;
  for (auto a : v[node])
    if (a != par)
      dfsSub(a, node, sub), sub[node] += sub[a];
}

ll getcent(ll node, ll par, ll sub[]) {
  for (auto a : v[node])
    if (a != par && sub[a] > nc / 2)
      return getcent(a, node, sub);
  return node;
}

ll decom(ll root, ll sub[], ll cpar[]) {
  nc = 0;
  dfsSub(root, -1, sub);
  ll c = getcent(root, -1, sub);
  for (auto a : v[c]) {
    v[a].erase(c);
    ll x = decom(a, sub, cpar);
    ct[c].insert(x);
    ct[x].insert(c);
    cpar[x] = c;
  }
  return c;
}

void update(ll par, ll node, ll cpar[], ll ans[]) {
  if (par == -1)
    return;
  ans[par] = min(ans[par], dist(node, par, lv, lca));
  update(cpar[par], node, cpar, ans);
}

ll getans(ll par, ll node, ll cpar[], ll ans[]) {
  if (par == -1)
    return INT_MAX;
  return min(getans(cpar[par], node, cpar, ans), ans[par] + dist(node, par, lv, lca));
}

int main() {
  cin >> n >> m;
  for (ll i = 1; i < n; i++) {
    ll a, b;
    cin >> a >> b;
    v[a].insert(b);
    v[b].insert(a);
  }
  for (ll i = 0; i <= n; i++)
    ans[i] = INT_MAX;
  genlca(lca, n, lv);
  cr = decom(1, sub, cpar);
  cpar[cr] = -1;
  ans[1] = 0;
  update(cpar[1], 1, cpar, ans);
  while (m--) {
    ll a, b;
    cin >> a >> b;
    if (a == 1) {
      ans[b] = 0;
      update(cpar[b], b, cpar, ans);
    } else {
      cout << getans(b, b, cpar, ans) << "\n";
    }
  }
}
```