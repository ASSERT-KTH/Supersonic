#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <set>
#include <unordered_map>
#include <vector>
using namespace std;
#define COUT(x) cout << #x << " = " << (x) << " (L" << __LINE__ << ")" << endl
typedef long long ll;
typedef pair<ll, ll> P;
typedef tuple<ll, ll, ll> triple;
const ll INF = 1e9;
const ll MOD = 1000000007;
void solve() {}
int main(int argc, char **argv) {
  cin.tie(NULL);
  cout.tie(NULL);
  ios_base::sync_with_stdio(false);
  ll n, m, k;
  cin >> n >> m >> k;
  vector<triple> t(2 * n);
  for (ll i = 0; i < n; ++i) {
    ll l, r;
    cin >> l >> r;
    t[2 * i] = {l, 1, i};
    t[2 * i + 1] = {r + 1, -1, i};
  }
  sort(t.begin(), t.end());
  vector<ll> states(1 << k, 0);
  ll sz = 0;
  ll pi = get<2>(t[0]), ni;
  ll pp = get<0>(t[0]), np;
  set<ll> streams;
  for (ll i = 0; i < 2 * n; ++i) {
    ni = get<2>(t[i]);
    np = get<0>(t[i]);
    if (get<1>(t[i]) == -1) {
      --sz;
      streams.erase(ni);
    } else {
      streams.insert(ni);
      ++sz;
    }
    for (ll b = 0; b < (1 << sz); ++b) {
      states[b] = max(states[b], states[b + (1 << sz)]) + (__builtin_popcount(b) % 2) * (np - pp);
    }
    pi = ni;
    pp = np;
  }
  cout << states[0] << " ";
  return 0;
}