#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
typedef long long ll;
void solve() {}
int main() {
  cin.tie(NULL);
  cout.tie(NULL);
  ios_base::sync_with_stdio(false);
  ll n;
  cin >> n;
  vector<vector<ll>> intervals(2 * n, vector<ll>(3));
  for (ll i = 0; i < n; ++i) {
    ll l, r;
    cin >> l >> r;
    intervals[2 * i] = {l, 1, i};
    intervals[2 * i + 1] = {r + 1, -1, i};
  }
  sort(intervals.begin(), intervals.end());
  vector<ll> states(1 << n, 0);
  vector<ll> newstates(1 << n, 0);
  ll sz = 0;
  ll prevIndex = intervals[0][2], newIndex;
  ll prevPos = intervals[0][0], newPos;
  vector<ll> streams;
  for (ll i = 0; i < 2 * n; ++i) {
    newIndex = intervals[i][2];
    newPos = intervals[i][0];
    if (intervals[i][1] == -1) {
      --sz;
      ll gi = 0;
      while (streams[gi] != newIndex) {
        ++gi;
      }
      for (ll b = 0; b < (1 << sz); ++b) {
        ll exp1 = ((b >> gi) << (gi + 1)) + (b % (1 << gi));
        ll exp2 = exp1 + (1 << gi);
        newstates[b] =
            max(states[exp1] + (__builtin_popcount(exp1) % 2) * (newPos - prevPos),
                states[exp2] + (__builtin_popcount(exp2) % 2) * (newPos - prevPos));
      }
      states = newstates;
      streams.erase(streams.begin() + gi);
    } else {
      streams.push_back(newIndex);
      for (ll b = 0; b < (1 << sz); ++b) {
        newstates[b] = states[b] + (__builtin_popcount(b) % 2) * (newPos - prevPos);
        newstates[b + (1 << sz)] =
            states[b] + (__builtin_popcount(b) % 2) * (newPos - prevPos);
      }
      states = newstates;
      ++sz;
    }
    prevIndex = newIndex;
    prevPos = newPos;
  }
  cout << states[0] << " ";
}