#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
typedef long long ll;

void solve() {}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  ll n;
  cin >> n;
  vector<vector<ll>> t(2 * n, vector<ll>(3));
  for(ll i = 0; i < n; ++i) {
    ll l, r;
    cin >> l >> r;
    t[2 * i] = {l, 1, i};
    t[2 * i + 1] = {r + 1, -1, i};
  }
  sort(t.begin(), t.end());
  
  vector<ll> states(1 << n, 0);
  vector<ll> newstates(1 << n, 0);
  states.reserve(1 << n);
  newstates.reserve(1 << n);

  ll sz = 0;
  ll pi = t[0][2], ni;
  ll pp = t[0][0], np;
  vector<ll> streams;
  for(ll i = 0; i < 2 * n; ++i) {
    ni = t[i][2];
    np = t[i][0];
    if (t[i][1] == -1) {
      --sz;
      ll gi = 0;
      while (streams[gi] != ni) {
        ++gi;
      }
      for(ll b = 0; b < (1 << sz); ++b) {
        ll exp1 = ((b >> gi) << (gi + 1)) + (b % (1 << gi));
        ll exp2 = exp1 + (1 << gi);
        newstates[b] =
            max(states[exp1] + ((exp1 & 1) * (np - pp)),
                states[exp2] + ((exp2 & 1) * (np - pp)));
      }
      states = newstates;
      streams.erase(streams.begin() + gi);
    } else {
      streams.push_back(ni);
      for(ll b = 0; b < (1 << sz); ++b) {
        newstates[b] = states[b] + ((b & 1) * (np - pp));
        newstates[b + (1 << sz)] =
            states[b] + ((b & 1) * (np - pp));
      }
      states = newstates;
      ++sz;
    }
    pi = ni;
    pp = np;
  }
  cout << states[0] << "\n";
}