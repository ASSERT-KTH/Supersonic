#include <algorithm>
#include <cstring>
#include <iostream>
#include <stdio.h>
using namespace std;
const int N = 5e5 + 9;
long long a[N], node[4 * N], l[N], r[N], res[N];

void update(int id, int l, int r, int pos, long long x) {
  if (l > pos || r < pos)
    return;
  if (l == r) {
    node[id] = x;
    return;
  }
  int mid = l + ((r - l) >> 1);
  if (pos <= mid)
    update(id << 1, l, mid, pos, x);
  else
    update((id << 1) + 1, mid + 1, r, pos, x);
  node[id] = min(node[id << 1], node[(id << 1) + 1]);
}

int find(int id, int l, int r, int tr, int ph, long long x) {
  if (tr > ph || l > ph || r < tr || node[id] > x)
    return 0;
  if (l == r)
    return r;
  int mid = l + ((r - l) >> 1);
  if (l >= tr && r <= ph) {
    if (node[id] > x)
      return 0;
    if (node[(id << 1) + 1] <= x)
      return find((id << 1) + 1, mid + 1, r, tr, ph, x);
    else
      return find(id << 1, l, mid, tr, ph, x);
  }
  return max(find(id << 1, l, mid, tr, ph, x),
             find((id << 1) + 1, mid + 1, r, tr, ph, x));
}

int main() {
  int n;
  cin >> n;
  for (int i = 1; i <= n; i++)
    cin >> a[i];
  int id;
  id = 0;
  for (int i = 1; i <= n; i++) {
    id = find(1, 1, n, 1, i - 1, a[i]);
    update(1, 1, n, i, a[i]);
    l[i] = l[id] + a[i] * (i - id);
  }
  memset(node, 0, sizeof(node));

  for (int i = n; i >= 1; i--) {
    id = find(1, 1, n, 1, n - i, a[n - i + 1]);
    update(1, 1, n, n - i + 1, a[n - i + 1]);
    r[n - i + 1] = r[id] + a[n - i + 1] * (n - i + 1 - id);
  }
  
  long long sum = 0, pos;
  for (int i = 1; i <= n; i++)
    if (sum < l[i] + r[i] - a[i]) {
      sum = l[i] + r[i] - a[i];
      pos = i;
    }
  long long minn = a[pos];
  res[pos] = a[pos];
  for (int i = pos - 1; i >= 1; i--) {
    minn = min(minn, a[i]);
    res[i] = minn;
  }
  minn = a[pos];
  for (int i = pos + 1; i <= n; i++) {
    minn = min(minn, a[i]);
    res[i] = minn;
  }
  for (int i = 1; i <= n; i++)
    cout << res[i] << " ";
  return 0;
}