Optimization Step by Step:

1. Avoid using `#include <bits/stdc++.h>`: This header file includes quite a lot of headers and can slow down the compilation process significantly. It is better to only include the headers that you actually need.

2. Avoid using 'using namespace std;': It is better to use 'std::' before every standard library object. This can prevent naming conflicts.

3. Use 'auto' for variable types when appropriate: C++ allows you to automatically deduce the type of a variable at compile time. This can make your code cleaner and easier to read.

4. Avoid magic numbers: Numbers like 27, 'bbn' and 'mod' are scattered throughout the code without explanation. It's better to define them as constants at the beginning of your code.

5. Use 'constexpr': For values that are known at compile-time, like 'bbn', 'mod' and 27, use 'constexpr' instead of '#define' or 'const'. 'constexpr' tells the compiler to evaluate the value at compile time, which can lead to performance improvements because the value can be computed once at compile time rather than every time it's used.

6. Use Fast Input/Output operations: In competitive programming, using 'scanf' and 'printf' can provide a significant speed boost over 'cin' and 'cout'.

7. Use '\n' instead of 'endl': 'endl' causes a flush operation, which can be slower than simply using '\n' to create a new line.

Now, let's apply these optimizations to your code:

```cpp
#include <iostream>
#include <set>
#include <cstring>

constexpr int bbn = 200005;
constexpr int mod = 1000000007;
constexpr int alphabets = 27;
typedef long long int LL;

std::set<int> se[alphabets];
char s[bbn];

int main() {
  scanf("%s", s + 1);
  int q;
  scanf("%d", &q);
  int len = std::strlen(s + 1);
  for (int i = 1; i <= len; i++) {
    se[s[i] - 'a'].insert(i);
  }
  while (q--) {
    int x;
    scanf("%d", &x);
    if (x == 1) {
      int p;
      char c;
      scanf("%d %c", &p, &c);
      se[s[p] - 'a'].erase(p);
      se[c - 'a'].insert(p);
      s[p] = c;
    } else if (x == 2) {
      int l, r, sum = 0;
      scanf("%d %d", &l, &r);
      for (int i = 0; i < alphabets - 1; i++) {
        auto p = se[i].lower_bound(l);
        if (p != se[i].end() && *p <= r)
          sum++;
      }
      printf("%d\n", sum);
    }
  }
  return 0;
}
```