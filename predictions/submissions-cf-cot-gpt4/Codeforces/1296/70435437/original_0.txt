The optimization of this program can take several directions:

1. Avoid usage of `#include <bits/stdc++.h>`: This is not a standard header and it does include a lot of unnecessary headers which can increase the compile time. Instead, we can include only the headers we need which are `iostream` and `vector`.

2. Using `vector<int>` instead of an array: It's better to use STL containers as they are more versatile and safe. This doesn't affect performance directly, but it's a good practice to use `vector<int>` instead of C-style arrays. Moreover, since the size of the array 'a' is not known at compile time, it's better to use dynamic array (vector) instead.

3. Avoiding multiple calls to `cin` and `cout`: They are very costly in terms of time. So, it's better to read the input data into a buffer, process it, and then output the results. In this case, we can store the inputs in an array, process it and then output the results.

4. Remove unnecessary operations in for loop: The operation `i++ < n` can be replaced with `i < n`. The postfix increment `i++` creates a copy of `i`, increases the original `i` and returns the copy, but we only need the incremented `i`, so we can use the prefix increment `++i`.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  int test;
  std::cin >> test;
  while (test--) {
    int n;
    std::cin >> n;
    std::vector<int> a(2, 0);
    for (int temp, i = 0; i < n; ++i) {
      std::cin >> temp;
      a[temp % 2]++;
    }
    std::cout << ((a[1] == 0) || (a[0] == 0 && (a[1] % 2 == 0)) ? "NO\n" : "YES\n");
  }
  return 0;
}
```

This code does the same job as the original one, but it's more efficient in terms of running time and memory usage.