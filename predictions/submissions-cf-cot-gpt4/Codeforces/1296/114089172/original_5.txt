Let's go through the program to identify areas of potential optimization:

1. Use of `#include <bits/stdc++.h>`: This header file is not standard, it's quite large and increases the compile time. It's better to include only those libraries which are required.

2. Use of `typedef long long ll;` and `const ll oo = 0x3f3f3f3f;` and `const ll OO = 0x3f3f3f3f3f3f3f3f;`: These lines are not used anywhere in the program, so they can be removed.

3. Use of `template <class T> void sort(vector<T> &a) { sort(a.begin(), a.end()); }` and `void sort(string &s) { sort(s.begin(), s.end()); }`: These functions are not called anywhere in the program, so they also can be removed.

4. Use of `ios::sync_with_stdio(false), cin.tie(nullptr);` in main(): This is used to speed up the reading from stdin, but it's not necessary unless the program is reading huge volumes of data. In this case, the program is not reading such a large amount of data, so this line can be removed.

5. The map `mp` is used to store the sums. Instead of checking whether the map contains a key by `if (mp[sum] != 0)`, it's better to use the `find` function provided by map. `find` is more efficient as it directly checks whether the key exists or not, instead of accessing the key's value and then comparing it.

6. Use of `1e9` for `ans` and `sum`: It's better to define a constant for this value for better readability.

7. Use of `cin` and `cout` for input and output: Using scanf and printf instead can also reduce the runtime.

8. Use of string `s` to store the directions: Instead of using a string, an array of characters can be used to store the directions. This is because arrays are generally faster to access than strings.

Here is the optimized program:

```cpp
#include <iostream>
#include <map>
#define MAX_INT 1e9
using namespace std;

void run_case() {
  int n;
  scanf("%d", &n);
  char s[n+2];
  scanf("%s", s+1);
  map<int, int> mp;
  int sum = 0;
  mp[0] = 1;
  int l = 0, r = 0, ans = MAX_INT;
  for (int i = 1; i <= n; i++) {
    if (s[i] == 'L')
      sum += MAX_INT;
    if (s[i] == 'R')
      sum -= MAX_INT;
    if (s[i] == 'U')
      sum += 7;
    if (s[i] == 'D')
      sum -= 7;
    if (mp.find(sum) != mp.end()) {
      int left = mp[sum];
      int right = i;
      if ((right - left + 1) < ans) {
        ans = right - left + 1;
        l = left;
        r = right;
      }
    }
    mp[sum] = i + 1;
  }
  if (ans == MAX_INT) {
    printf("-1\n");
  } else
    printf("%d %d\n", l, r);
}

int main() {
  int tc;
  scanf("%d", &tc);
  while (tc--)
    run_case();
}
```