#include <iostream>
#include <unordered_map>
#include <vector>
#include <string>
#define INF 1e9

enum Direction {L = 1, R = -1, U = 1, D = -1};

void run_case() {
  int n;
  std::cin >> n;
  std::string s;
  std::cin >> s;
  
  std::unordered_map<long long, int> mp;
  long long sum = 0;
  mp[0] = 1;
  int l = 0, r = 0, ans = INF;
  
  for (int i = 0; i < n; i++) {
    if (s[i] == 'L' || s[i] == 'R')
      sum += Direction(s[i]) * INF;
    else
      sum += Direction(s[i]);
      
    if (mp.find(sum) != mp.end()) {
      int left = mp[sum];
      int right = i;
      if ((right - left + 1) < ans) {
        ans = right - left + 1;
        l = left;
        r = right;
      }
    }
    mp[sum] = i + 1;
  }
  
  if (ans == INF) {
    std::cout << "-1\n";
  } else {
    std::cout << l << " " << r << "\n";
  }
}

int main() {
  int tc = 1;
  std::cin >> tc;
  while (tc--)
    run_case();
}