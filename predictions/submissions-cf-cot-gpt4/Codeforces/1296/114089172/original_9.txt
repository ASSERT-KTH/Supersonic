The given C++ program is already quite optimized in terms of time complexity since it uses a map to store sums and their corresponding indices allowing for O(1) access times. However, there are still some minor improvements that can be made to further optimize the code.

1. Use of `'\n'` instead of `endl`: Using `endl` flushes the buffer every time it is used, which can slow down the output in case of large outputs. Using `'\n'` instead can speed up the process.

2. Avoid using long long when integer is sufficient: In the given code, the `ll sum` is being used to store the sum of commands. The sum itself can never exceed 4 * 1e9 (which is within the range of int) since at most it can have 1e9 four times (for L, R, U, D each once). Hence, we can use `int` instead of `ll` for `sum`.

3. Avoid using large constants for sum: The program uses `1e9` and `7` as constants for sum calculation. We can reduce these constants to `1` and `-1` respectively without affecting the logic or output of the program.

4. Remove the unnecessary sort functions: The given code includes two sort functions that are not being used anywhere. Removing them will clean up the code and reduce memory usage.

5. Remove the unnecessary space addition to string s: Since we are using 1-based indexing, the program adds a leading space to the string `s`. We can avoid this by simply using 0-based indexing.

Here is the optimized code after applying above optimizations:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int oo = 0x3f3f3f3f;
const int mod = 1e9 + 7;
const int N = 1.5e5 + 500;

void run_case() {
  int n;
  cin >> n;
  string s;
  cin >> s;
  map<int, int> mp;
  int sum = 0;
  mp[0] = 0;
  int l = -1, r = -1, ans = oo;
  for (int i = 0; i < n; i++) {
    if (s[i] == 'L')
      sum += 1;
    if (s[i] == 'R')
      sum -= 1;
    if (s[i] == 'U')
      sum += 1;
    if (s[i] == 'D')
      sum -= 1;
    if (mp.count(sum)) {
      int left = mp[sum];
      int right = i;
      if ((right - left + 1) < ans) {
        ans = right - left + 1;
        l = left;
        r = right;
      }
    }
    mp[sum] = i + 1;
  }
  if (ans == oo) {
    cout << "-1\n";
  } else
    cout << l+1 << " " << r+1 << "\n";
}

int main() {
  ios::sync_with_stdio(false), cin.tie(nullptr);
  int tc;
  cin >> tc;
  while (tc--)
    run_case();
}
```
