The given program is already written in an efficient way. However, there are a few minor tweaks that can be done to improve the efficiency:

1. Unnecessary use of <bits/stdc++.h>: This header file includes almost all the standard C++ libraries, which may slow down the compile time. Include only those libraries which are necessary for your program. In this case, we only need <iostream>, <map>, <string>, and <vector>.

2. Unnecessary typedef: The typedef for long long as ll and the constant values oo and OO are not used anywhere in the code. Removing them would save memory.

3. Redundant sort function: The template sort function and the sort function for string are not used in the code. Removing them would save memory.

4. Use enumeration for directions: Using an enumeration for the directions 'L', 'R', 'U', 'D' can make the code more readable. It will also save a little memory as it reduces the number of if statements.

5. Use of constants: The constants used in the program (1e9, 7) can be defined at the start of the program to avoid hardcoding.

6. cin.tie(nullptr): Unbinding std::cin from std::cout can sometimes degrade performance because explicit flushing would need to be performed before each I/O operation. So, removing cin.tie(nullptr) can be considered.

Here is the optimized code:

```cpp
#include <iostream>
#include <map>
#include <string>
#include <vector>

using namespace std;

enum Direction { L = 1e9, R = -1e9, U = 7, D = -7 };

void run_case() {
  int n;
  cin >> n;
  string s;
  cin >> s;
  s = " " + s;
  map<int, int> mp;
  int sum = 0;
  mp[0] = 1;
  int l = 0, r = 0, ans = 1e9;
  for (int i = 1; i <= n; i++) {
    switch (s[i]) {
      case 'L':
        sum += L;
        break;
      case 'R':
        sum += R;
        break;
      case 'U':
        sum += U;
        break;
      case 'D':
        sum += D;
        break;
    }
    if (mp[sum] != 0) {
      int left = mp[sum];
      int right = i;
      if ((right - left + 1) < ans) {
        ans = right - left + 1;
        l = left;
        r = right;
      }
    }
    mp[sum] = i + 1;
  }
  if (ans == 1e9) {
    cout << "-1\n";
  } else
    cout << l << " " << r << "\n";
}

int main() {
  ios::sync_with_stdio(false);
  int tc = 1;
  cin >> tc;
  while (tc--)
    run_case();
}
```

This optimized version of the program includes only the necessary libraries, removes unused typedef and functions, uses enumeration for readability and memory efficiency, defines constants at the start of the program to avoid hardcoding, and avoids unbinding std::cin from std::cout.