This code is already quite optimized, however, there are a few small changes that can be made to further optimize it:

1. The sorting functions for vectors and strings are unnecessary. Sorting is not used in this program. Therefore, these functions can be removed.

2. The use of `bits/stdc++.h` header is discouraged because it includes a lot of unnecessary libraries, which can slow down compilation time significantly. It's better to include only the libraries that are used in the code.

3. `ll oo` and `ll OO` are declared but not used in the program, we can remove those.

4. `const ll mod = 1e9 + 7;` and `const int N = 1.5e5 + 500;` are also declared but not used, we can remove those as well.

5. `ios::sync_with_stdio(false), cin.tie(nullptr);` These lines are used to speed up I/O operations, but they are not necessary in this particular program because there's not much I/O happening.

6. Use `'\n'` instead of `endl`. `endl` not only inserts a newline, but also flushes the stream, which can be time-consuming.

Here's the optimized code:

```cpp
#include <iostream>
#include <string>
#include <map>
using namespace std;
typedef long long ll;

void run_case() {
  int n;
  cin >> n;
  string s;
  cin >> s;
  s = " " + s;
  map<ll, int> mp;
  ll sum = 0;
  mp[0] = 1;
  int l = 0, r = 0, ans = 1e9;
  for (int i = 1; i <= n; i++) {
    if (s[i] == 'L')
      sum += 1e9;
    else if (s[i] == 'R')
      sum -= 1e9;
    else if (s[i] == 'U')
      sum += 7;
    else if (s[i] == 'D')
      sum -= 7;
    if (mp[sum] != 0) {
      int left = mp[sum];
      int right = i;
      if ((right - left + 1) < ans) {
        ans = right - left + 1;
        l = left;
        r = right;
      }
    }
    mp[sum] = i + 1;
  }
  if (ans == 1e9) {
    cout << "-1\n";
  } else
    cout << l << " " << r << '\n';
}

int main() {
  int tc = 1;
  cin >> tc;
  while (tc--)
    run_case();
}
```

Note: This optimization focuses on readability and compilation time. Since this code is quite optimized already, these changes won't significantly affect runtime or memory usage.