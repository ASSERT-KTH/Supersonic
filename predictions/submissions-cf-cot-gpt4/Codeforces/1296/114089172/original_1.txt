The main optimization for the given program could be done by reducing the constant values used and by avoiding the use of std::map. It is known that std::map in C++ STL uses a self-balancing binary search tree (Red-Black Tree) internally. Hence, operations like insertion and search take O(log(n)) time. We could use a unordered_map instead which takes O(1) time on average for search and insert operations.

The constants used in the program (like 1e9 and 7 for encoding directions) are quite large and could potentially lead to overflow issues. We can change these constants to smaller values (like 1,2,3,4) without affecting the logic of the program, as there is no overlap in the values assigned to each direction.

Step-by-step optimization:

1. Replace the `map` with `unordered_map` to speed up lookups from O(log n) to O(1) in average case.
2. Use smaller constants to encode directions to avoid potential overflow issues.
3. Remove the `sort` functions as they are not used in the code.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const ll oo = 0x3f3f3f3f;
const ll OO = 0x3f3f3f3f3f3f3f3f;
const ll mod = 1e9 + 7;
const int N = 1.5e5 + 500;
void run_case() {
  int n;
  cin >> n;
  string s;
  cin >> s;
  s = " " + s;
  unordered_map<ll, int> mp;
  ll sum = 0;
  mp[0] = 1;
  int l = 0, r = 0, ans = oo;
  for (int i = 1; i <= n; i++) {
    if (s[i] == 'L')
      sum += 1;
    else if (s[i] == 'R')
      sum -= 1;
    else if (s[i] == 'U')
      sum += 2;
    else if (s[i] == 'D')
      sum -= 2;
    if (mp[sum] != 0) {
      int left = mp[sum];
      int right = i;
      if ((right - left + 1) < ans) {
        ans = right - left + 1;
        l = left;
        r = right;
      }
    }
    mp[sum] = i + 1;
  }
  if (ans == oo) {
    cout << "-1\n";
  } else
    cout << l << " " << r << "\n";
}
int main() {
  ios::sync_with_stdio(false), cin.tie(nullptr);
  int tc = 1;
  cin >> tc;
  while (tc--)
    run_case();
}
```
I have removed the `sort` functions as they are not used in the code. If you need them, you can add them back.