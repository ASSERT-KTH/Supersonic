Here are some potential optimizations for the given program:

1. Use an unordered_map instead of map: An `unordered_map` in C++ uses a hash table as its underlying data structure. This provides an average time complexity of O(1) for insertions, deletions, and access of elements. On the other hand, a `map` in C++ uses a Red-Black Tree as its underlying data structure, providing a time complexity of O(log n) for these operations. Therefore, using an `unordered_map` instead of `map` will provide a speed up.

2. Use switch-case instead of multiple if statements: `switch-case` statements are generally faster than `if-else` statements when there are more than two conditions to check, and the switch expression is of integral or enumeration type. The reason is that `switch` cases use a jump table which allows the compiler to jump directly to the code for the matching case label, rather than having to evaluate each condition.

3. Remove unnecessary constant definitions: The constants `oo`, `OO`, `mod`, and `N` are defined but not used in the program. Removing these will save memory.

Now let's apply these optimizations to the program:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
template <class T> void sort(vector<T> &a) { sort(a.begin(), a.end()); }
void sort(string &s) { sort(s.begin(), s.end()); }
void run_case() {
  int n;
  cin >> n;
  string s;
  cin >> s;
  s = " " + s;
  unordered_map<ll, int> mp;
  ll sum = 0;
  mp[0] = 1;
  int l = 0, r = 0, ans = 1e9;
  for (int i = 1; i <= n; i++) {
    switch(s[i]) {
      case 'L': sum += 1e9; break;
      case 'R': sum -= 1e9; break;
      case 'U': sum += 7; break;
      case 'D': sum -= 7; break;
    }
    if (mp[sum] != 0) {
      int left = mp[sum];
      int right = i;
      if ((right - left + 1) < ans) {
        ans = right - left + 1;
        l = left;
        r = right;
      }
    }
    mp[sum] = i + 1;
  }
  if (ans == 1e9) {
    cout << "-1\n";
  } else
    cout << l << " " << r << "\n";
}
int main() {
  ios::sync_with_stdio(false), cin.tie(nullptr);
  int tc = 1;
  cin >> tc;
  while (tc--)
    run_case();
}
```
This optimized program should run faster and use less memory than the original version.