Optimization Steps:

1. Avoid using `#include <bits/stdc++.h>`: This header file is quite heavy as it includes all the Standard Library headers, which increases the compilation time.
2. Avoid using `using namespace std;`: This can cause name collisions.
3. Avoid using `typedef long long ll;`: It's better to use the explicit type for better readability and maintenance.
4. Avoid using `ios::sync_with_stdio(false), cin.tie(nullptr);`: This will not have any significant performance improvement for this program.
5. Use `unordered_map` instead of `map`: `unordered_map` has a better average complexity for insertion and access (constant time O(1)), compared to `map` (logarithmic time O(log(n))).
6. Do not add a whitespace to the string `s`, it is unnecessary and increases memory usage.
7. Avoid using large constant values (like 1e9) for simple operations. Instead, use smaller values or even better, use an enum to represent directions.
8. Instead of checking if `mp[sum] != 0`, you can use `mp.find(sum) != mp.end()`. This avoids the unnecessary default initialization of the map element.

Optimized Program:

```cpp
#include <iostream>
#include <unordered_map>
#include <vector>
#include <string>
#define INF 1e9

enum Direction {L = 1, R = -1, U = 1, D = -1};

void run_case() {
  int n;
  std::cin >> n;
  std::string s;
  std::cin >> s;
  
  std::unordered_map<long long, int> mp;
  long long sum = 0;
  mp[0] = 1;
  int l = 0, r = 0, ans = INF;
  
  for (int i = 0; i < n; i++) {
    if (s[i] == 'L' || s[i] == 'R')
      sum += Direction(s[i]) * INF;
    else
      sum += Direction(s[i]);
      
    if (mp.find(sum) != mp.end()) {
      int left = mp[sum];
      int right = i;
      if ((right - left + 1) < ans) {
        ans = right - left + 1;
        l = left;
        r = right;
      }
    }
    mp[sum] = i + 1;
  }
  
  if (ans == INF) {
    std::cout << "-1\n";
  } else {
    std::cout << l << " " << r << "\n";
  }
}

int main() {
  int tc = 1;
  std::cin >> tc;
  while (tc--)
    run_case();
}
```

Please note that the `enum Direction` is used to represent the change in position for the four directions. The use of `enum` makes the code more readable and maintainable. Also, the strings are indexed from `0` instead of `1` to make the code simpler.