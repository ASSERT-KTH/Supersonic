Optimization Steps:

1. The `<bits/stdc++.h>` is a GCC specific header file which includes almost all standard libraries. It is not recommended to use it in production code as it increases compilation time and it is not standard. So, it is better to include only necessary standard libraries. 

2. Constants are defined as `ll` (long long) where `int` would suffice. This unnecessarily increases memory usage.

3. The `sort` functions are not used in the code and can be removed.

4. `ios::sync_with_stdio(false)` and `cin.tie(nullptr)` are used to untie C and C++ standard streams and to disable synchronization. However, they are not needed here as we are not using any C standard streams in our code.

5. `typedef long long ll` is not required because it is not used frequently in code.

6. The map `mp` is used to store the indices of the string. But as the keys are not sorted, we could use an `unordered_map` instead of `map` which will give us average constant time complexity.

7. The large numbers `1e9` and `7` are used to differentiate between the characters 'L', 'R', 'U', and 'D'. Instead of using such large numbers, we can use `1`, `-1`, `2`, and `-2` respectively. 

8. The large number `1e9` is used as a placeholder for an unattainable maximum value. We can use `INT_MAX` for this purpose.

9. The `run_case` function could return the values `l` and `r` instead of directly printing them. This would make the function more reusable.


Optimized code:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>
#include <climits>
using namespace std;

const int mod = 1e9 + 7;
const int N = 1.5e5 + 500;

void run_case() {
  int n;
  cin >> n;
  string s;
  cin >> s;
  s = " " + s;
  unordered_map<int, int> mp;
  int sum = 0;
  mp[0] = 1;
  int l = 0, r = 0, ans = INT_MAX;
  for (int i = 1; i <= n; i++) {
    if (s[i] == 'L')
      sum += 1;
    if (s[i] == 'R')
      sum -= 1;
    if (s[i] == 'U')
      sum += 2;
    if (s[i] == 'D')
      sum -= 2;
    if (mp[sum] != 0) {
      int left = mp[sum];
      int right = i;
      if ((right - left + 1) < ans) {
        ans = right - left + 1;
        l = left;
        r = right;
      }
    }
    mp[sum] = i + 1;
  }
  if (ans == INT_MAX) {
    cout << "-1\n";
  } else
    cout << l << " " << r << "\n";
}

int main() {
  int tc = 1;
  cin >> tc;
  while (tc--)
    run_case();
}
```
