The given code is already pretty optimized with respect to both running time and memory usage. It uses a segment tree for efficient range queries and binary search for finding frequency of elements. However, there is one possible optimization that we can apply here related to the usage of the `std::vector` container.

In C++, `std::vector` dynamically allocates memory as needed. If the size of the vector exceeds its capacity, it needs to reallocate memory, which may be an expensive operation. This can be avoided by reserving memory in advance if we know the maximum number of elements that the vector will hold.

In the given code, we know that the `store` vector in the `SegTree` struct will hold at most `n+1` elements and in the `solve` function, we know that the `arr` vector will hold at most `n` elements. Hence, we can reserve memory for these vectors in advance to avoid unnecessary reallocations.

Here is the optimized code:

```c++
#include <bits/stdc++.h>
typedef long long ll;
typedef long double ld;
#define FASTIO                                                                 \
  ios_base::sync_with_stdio(false);                                            \
  cin.tie(NULL);                                                               \
  cout.tie(NULL);
#define PRECISION std::cout << std::fixed << std::setprecision(20);
using namespace std;
struct SegTree {
  vector<int> tree, arr;
  vector<vector<int>> store;
  int n;
  SegTree(int n, vector<int> _arr) : n(n) {
    tree.resize(4 * n);
    store.resize(n + 1);
    arr.reserve(n); // Reserve memory for arr vector
    arr = _arr;
    for (int i = 0; i < n; i++)
      store[arr[i]].push_back(i);
    build(0, n - 1, 0);
  }
  // rest of the code remains same
};
void solve() {
  int n, q;
  cin >> n >> q;
  vector<int> arr;
  arr.reserve(n); // Reserve memory for arr vector
  vector<vector<int>> store(n + 1);
  for (int i = 0; i < n; i++)
    cin >> arr[i], store[arr[i]].push_back(i);
  SegTree tree(n, arr);
  // rest of the code remains same
}
// rest of the code remains same
```

Please note that this optimization might not have a noticeable effect on the running time, especially for small inputs, but it is a good practice to reserve memory for vectors if the maximum size is known in advance.