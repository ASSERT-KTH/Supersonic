The given code is already quite optimized, but there are few things we can adjust to make it a bit more efficient.

1. Unnecessary `#define FASTIO` and `#define PRECISION`: These are not used in the code. We can remove these.
2. Unnecessary usage of `std::` in some places: We have `using namespace std;` at the beginning of the code, so we don't need to use `std::` before `cout`, `fixed`, and `setprecision`.
3. Avoid copying vectors during function calls: In the `SegTree` constructor, we are copying `_arr` vector which can be avoided by passing it as a constant reference.
4. Use `emplace_back` instead of `push_back`: `emplace_back` constructs the object in place and is generally faster than `push_back`.
5. Avoid performing multiple lookups in `store` vector: In `merge` function, we are performing four lookups in the `store` vector which can be reduced to two by storing the iterators returned by `lower_bound`.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
typedef long long ll;
typedef long double ld;
using namespace std;

struct SegTree {
  vector<int> tree, arr;
  vector<vector<int>> store;
  int n;

  SegTree(int n, const vector<int>& _arr) : n(n), arr(_arr) {
    tree.resize(4 * n);
    store.resize(n + 1);
    for (int i = 0; i < n; i++)
      store[arr[i]].emplace_back(i);
    build(0, n - 1, 0);
  }

  int merge(int lval, int rval, int sl, int sr) {
    auto lstart = lower_bound(store[lval].begin(), store[lval].end(), sl);
    auto rstart = lower_bound(store[rval].begin(), store[rval].end(), sl);
    int cntl = upper_bound(lstart, store[lval].end(), sr) - lstart;
    int cntr = upper_bound(rstart, store[rval].end(), sr) - rstart;
    return cntl >= cntr ? lval : rval;
  }

  void build(int ss, int se, int si) {
    if (ss == se) {
      tree[si] = arr[ss];
    } else {
      int mid = ss + se >> 1;
      build(ss, mid, 2 * si + 1);
      build(mid + 1, se, 2 * si + 2);
      tree[si] = merge(tree[2 * si + 1], tree[2 * si + 2], ss, se);
    }
  }

  int query(int qs, int qe) { return query(qs, qe, 0, n - 1, 0, qs, qe); }

  int query(int qs, int qe, int ss, int se, int si, int sl, int sr) {
    if (ss >= qs && se <= qe) {
      return tree[si];
    }
    int mid = ss + se >> 1;
    if (qe <= mid) {
      return query(qs, qe, ss, mid, 2 * si + 1, sl, sr);
    } else if (qs >= mid + 1) {
      return query(qs, qe, mid + 1, se, 2 * si + 2, sl, sr);
    } else {
      return merge(query(qs, qe, ss, mid, 2 * si + 1, sl, sr),
                   query(qs, qe, mid + 1, se, 2 * si + 2, sl, sr), sl, sr);
    }
  }
};

void solve() {
  int n, q;
  cin >> n >> q;
  vector<int> arr(n);
  vector<vector<int>> store(n + 1);
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
    store[arr[i]].emplace_back(i);
  }
  SegTree tree(n, arr);
  while (q--) {
    int l, r;
    cin >> l >> r;
    l--;
    r--;
    int x = tree.query(l, r);
    auto start = lower_bound(store[x].begin(), store[x].end(), l);
    int mx = upper_bound(start, store[x].end(), r) - start;
    int len = (r - l + 1);
    int extra = len - mx;
    int left = max(0, mx - extra - 1);
    cout << fixed << setprecision(20) << 1 + left << "\n";
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t = 1;
  for (int i = 1; i <= t; i++) {
    solve();
  }
}
```