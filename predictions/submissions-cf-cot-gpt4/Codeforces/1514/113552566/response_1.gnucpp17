#include <bits/stdc++.h>
typedef long long ll;
typedef long double ld;

const std::ios_base::sync_with_stdio(false);
const std::cin.tie(NULL);
const std::cout.tie(NULL);

struct SegTree {
  std::vector<int> tree, arr;
  std::vector<std::vector<int>> store;
  int n;
  SegTree(int n, std::vector<int> _arr) : n(n) {
    tree.resize(4 * n);
    store.resize(n + 1);
    arr = _arr;
    for (int i = 0; i < n; i++)
      store[arr[i]].push_back(i);
    build(0, n - 1, 0);
  }
  int getMajority(int lval, int rval, int sl, int sr) {
    int cntl = std::upper_bound(store[lval].begin(), store[lval].end(), sr) -
               std::lower_bound(store[lval].begin(), store[lval].end(), sl);
    int cntr = std::upper_bound(store[rval].begin(), store[rval].end(), sr) -
               std::lower_bound(store[rval].begin(), store[rval].end(), sl);
    if (cntl >= cntr) {
      return lval;
    } else {
      return rval;
    }
  }
  // other methods...
};

void solve() {
  int n, q;
  std::cin >> n >> q;
  std::vector<int> arr(n);
  std::vector<std::vector<int>> store(n + 1);
  for (int i = 0; i < n; i++)
    std::cin >> arr[i], store[arr[i]].push_back(i);
  SegTree tree(n, arr);
  while (q--) {
    int l, r;
    std::cin >> l >> r;
    l--;
    r--;
    int x = tree.query(l, r);
    int mx = std::upper_bound(store[x].begin(), store[x].end(), r) -
             std::lower_bound(store[x].begin(), store[x].end(), l);
    int len = (r - l + 1);
    int extra = len - mx;
    int left = max(0, mx - extra - 1);
    std::cout << 1 + left << "\n";
  }
}

int main() {
  std::cout << std::fixed << std::setprecision(20);
  int t = 1;
  for (int i = 1; i <= t; i++) {
    solve();
  }
}