#include <iostream>
#include <vector>
#include <algorithm>

typedef long long ll;
typedef long double ld;

#define FASTIO                                                                 \
  std::ios_base::sync_with_stdio(false);                                        \
  std::cin.tie(NULL);                                                               \
  std::cout.tie(NULL);

struct SegTree {
  std::vector<int> tree, arr;
  std::vector<std::vector<int>> store;
  int n;
  SegTree(int n, std::vector<int> _arr) : n(n), tree(4 * n), store(n + 1), arr(_arr) {
    for (int i = 0; i < n; i++)
      store[arr[i]].push_back(i);
    build(0, n - 1, 0);
  }
  // rest of the code remains same
};

void solve() {
  int n, q;
  std::cin >> n >> q;
  std::vector<int> arr(n);
  std::vector<std::vector<int>> store(n + 1);
  for (int i = 0; i < n; i++)
    std::cin >> arr[i], store[arr[i]].push_back(i);
  SegTree tree(n, arr);
  while (q--) {
    int l, r;
    std::cin >> l >> r;
    l--;
    r--;
    int x = tree.query(l, r);
    int mx = upper_bound(store[x].begin(), store[x].end(), r) -
             lower_bound(store[x].begin(), store[x].end(), l);
    int len = (r - l + 1);
    int extra = len - mx;
    int left = std::max(0, mx - extra - 1);
    std::cout << 1 + left << "\n";
  }
}

int main() {
  FASTIO;
  solve();
}