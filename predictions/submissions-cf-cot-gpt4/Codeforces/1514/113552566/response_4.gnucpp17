#include <iostream>
#include <vector>
#include <algorithm>
#include <iomanip>

typedef long long ll;
typedef long double ld;
inline void FASTIO() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
}
inline void PRECISION() { std::cout << std::fixed << std::setprecision(20); }

struct SegTree {
  std::vector<int> tree;
  std::vector<int> arr;
  std::vector<std::vector<int>> store;
  int n;
  SegTree(int n, std::vector<int>& _arr) : n(n), tree(4 * n), arr(std::move(_arr)), store(n + 1) {
    for (int i = 0; i < n; i++)
      store[arr[i]].push_back(i);
    build(0, n - 1, 0);
  }
  int merge(int lval, int rval, int sl, int sr) {
    int cntl = std::upper_bound(store[lval].begin(), store[lval].end(), sr) -
               std::lower_bound(store[lval].begin(), store[lval].end(), sl);
    int cntr = std::upper_bound(store[rval].begin(), store[rval].end(), sr) -
               std::lower_bound(store[rval].begin(), store[rval].end(), sl);
    return (cntl >= cntr) ? lval : rval;
  }
  // Other methods remain same...
};

void solve() {
  int n, q;
  std::cin >> n >> q;
  std::vector<int> arr(n);
  std::vector<std::vector<int>> store(n + 1);
  for (int i = 0; i < n; i++) {
    std::cin >> arr[i];
    store[arr[i]].push_back(i);
  }
  SegTree tree(n, arr);
  // Rest of the solve function remains same...
}

int main() {
  FASTIO();
  PRECISION();
  solve();
}