#include <bits/stdc++.h>
typedef long long ll;
typedef long double ld;
#define FASTIO                                                                 \
  ios_base::sync_with_stdio(false);                                            \
  cin.tie(NULL);                                                               \
  cout.tie(NULL);
#define PRECISION std::cout << std::fixed << std::setprecision(20);
using namespace std;
struct SegTree {
  vector<int> tree, arr;
  vector<vector<int>> store;
  int n;
  SegTree(int n, vector<int> _arr) : n(n) {
    tree.resize(4 * n);
    store.resize(n + 1);
    arr = _arr;
    for (int i = 0; i < n; i++)
      store[arr[i]].push_back(i);
    build(0, n - 1, 0);
  }
  int merge(int lval, int rval, int sl, int sr) {
    int cntl = upper_bound(store[lval].begin(), store[lval].end(), sr) -
               lower_bound(store[lval].begin(), store[lval].end(), sl);
    int cntr = upper_bound(store[rval].begin(), store[rval].end(), sr) -
               lower_bound(store[rval].begin(), store[rval].end(), sl);
    if (cntl >= cntr) {
      return lval;
    } else {
      return rval;
    }
  }
  void build(int ss, int se, int si) {
    if (ss == se) {
      tree[si] = arr[ss];
    } else {
      int mid = ss + se >> 1;
      build(ss, mid, 2 * si + 1);
      build(mid + 1, se, 2 * si + 2);
      tree[si] = merge(tree[2 * si + 1], tree[2 * si + 2], ss, se);
    }
  }
  pair<int, int> query(int qs, int qe) {
    return query(qs, qe, 0, n - 1, 0, qs, qe);
  }
  pair<int, int> query(int qs, int qe, int ss, int se, int si, int sl, int sr) {
    if (ss >= qs && se <= qe) {
      return {
          upper_bound(store[tree[si]].begin(), store[tree[si]].end(), sr) -
              lower_bound(store[tree[si]].begin(), store[tree[si]].end(), sl),
          tree[si]};
    }
    int mid = ss + se >> 1;
    if (qe <= mid) {
      return query(qs, qe, ss, mid, 2 * si + 1, sl, sr);
    } else if (qs >= mid + 1) {
      return query(qs, qe, mid + 1, se, 2 * si + 2, sl, sr);
    } else {
      return max(query(qs, qe, ss, mid, 2 * si + 1, sl, sr),
                 query(qs, qe, mid + 1, se, 2 * si + 2, sl, sr));
    }
  }
};
void solve() {
  int n, q;
  cin >> n >> q;
  vector<int> arr(n);
  vector<vector<int>> store(n + 1);
  for (int i = 0; i < n; i++)
    cin >> arr[i], store[arr[i]].push_back(i);
  SegTree tree(n, arr);
  while (q--) {
    int l, r;
    cin >> l >> r;
    l--;
    r--;
    int x = tree.query(l, r).second;
    int mx = upper_bound(store[x].begin(), store[x].end(), r) -
             lower_bound(store[x].begin(), store[x].end(), l);
    int len = (r - l + 1);
    int extra = len - mx;
    int left = max(0, mx - extra - 1);
    cout << 1 + left << "\n";
  }
}
int main() {
  FASTIO;
  PRECISION;
  int t = 1;
  for (int i = 1; i <= t; i++) {
    solve();
  }
}
