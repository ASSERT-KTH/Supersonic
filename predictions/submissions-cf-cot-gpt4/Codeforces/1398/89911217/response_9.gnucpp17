#include <bits/stdc++.h>

#define _ ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define endl '\n'

const long long inf = 0x3f3f3f3f3f3f3f3LL;
const long long mod = (long long)1e9 + 7;

using namespace std;

template <class T, class T2> void smin(T &a, T2 val) {
  if (a > val)
    a = val;
}

template <class T, class T2> void smax(T &a, T2 val) {
  if (a < val)
    a = val;
}

const int N = 210;
int len[3];
vector<int> v[3];
int red, green, blue;
long long dp[N][N][N];

long long solve(int idx0, int idx1, int idx2) {
  if (idx0 == len[0] && idx1 == len[1] && idx2 == len[2]) return 0;

  int idx0_lim = min(N - 1, idx0);
  int idx1_lim = min(N - 1, idx1);
  int idx2_lim = min(N - 1, idx2);

  long long &ans = dp[idx0_lim][idx1_lim][idx2_lim];
  
  if (ans != -1) return ans;

  ans = 0;
  if (idx0 < len[0] && idx1 < len[1]) smax(ans, v[0][idx0] * v[1][idx1] + solve(idx0 + 1, idx1 + 1, idx2));
  if (idx0 < len[0] && idx2 < len[2]) smax(ans, v[0][idx0] * v[2][idx2] + solve(idx0 + 1, idx1, idx2 + 1));
  if (idx1 < len[1] && idx2 < len[2]) smax(ans, v[1][idx1] * v[2][idx2] + solve(idx0, idx1 + 1, idx2 + 1));
  smax(ans, solve(idx0 + 1, idx1, idx2));
  smax(ans, solve(idx0, idx1 + 1, idx2));
  smax(ans, solve(idx0, idx1, idx2 + 1));

  return ans;
}

int main() {
  _ 
  for (int i = 0; i < 3; ++i) {
    cin >> len[i];
    v[i].resize(len[i]);
  }
  for (int i = 0; i < 3; ++i) {
    for (int j = 0; j < len[i]; ++j) {
      cin >> v[i][j];
    }
    sort(v[i].rbegin(), v[i].rend());
  }
  memset(dp, -1, sizeof dp);
  cout << solve(0, 0, 0) << endl;
  return 0;
}