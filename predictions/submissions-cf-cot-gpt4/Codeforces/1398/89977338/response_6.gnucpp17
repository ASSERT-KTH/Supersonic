#include <bits/stdc++.h>

long long n, x, y, lp[MAXN + 1], res[MAXN];
bool can[MAXN];
std::vector<int> pr;

void SieveOfEratosthenes() {
  for (long long i = 2; i <= MAXN; i++) {
    if (lp[i] == 0)
      lp[i] = i, pr.push_back(i);
    for (long long j = 0; j < pr.size() && pr[j] <= lp[i] && i * pr[j] <= MAXN; ++j)
      lp[i * pr[j]] = pr[j];
  }
}

// ... rest of the code ...

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);

  SieveOfEratosthenes();
  std::cin >> n >> x >> y;
  int OFFSET = x;
  std::vector<long long> l(2 * OFFSET + 1), r(2 * OFFSET + 1);
  
  // ... rest of the code ...

  for (long long i = 0; i <= q; i++)
    res[i] = -1;

  // ... rest of the code ...

  for (long long i = 0; i < q; i++) 
    std::cout << res[i] << " \n"[i == q - 1];

  return 0;
}