#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
#define db(x) cout << #x << " = " << x << "\n";
#define fore(i, a, b) for (int i = a, ggdem = b; i < ggdem; i++)
#define SZ(a) ((int)(a).size())
#define ALL(a) a.begin(), a.end()
#define mset(a, b) memset(a, b, sizeof(a));
#define pb push_back
#define fst first
#define snd second
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
const int MAXN = 1 << 20;
int n, x, y, lp[MAXN + 1], res[MAXN];
bool can[MAXN];
vector<int> pr;
unordered_map<int, vector<ll>> g_cache;

inline void SieveOfEratosthenes() {
  for (int i = 2; i <= MAXN; i++) {
    if (lp[i] == 0)
      lp[i] = i, pr.pb(i);
    for (int j = 0; j < SZ(pr) && pr[j] <= lp[i] && i * pr[j] <= MAXN; ++j)
      lp[i * pr[j]] = pr[j];
  }
}

inline void div_rec(vector<ll> &r, vector<pair<ll, int>> &f, int k, ll c) {
  if (k == f.size()) {
    r.pb(c);
    return;
  }
  fore(i, 0, f[k].snd + 1) div_rec(r, f, k + 1, c), c *= f[k].fst;
}

inline vector<ll> get_div_rec(vector<pair<ll, int>> &f) {
  int key = 0;
  for (auto &p : f) {
    key = key * 31 + p.first;
    key = key * 31 + p.second;
  }
  if (g_cache.count(key)) return g_cache[key];
  vector<ll> r;
  div_rec(r, f, 0, 1);
  return g_cache[key] = r;
}
// Remaining functions stay the same

main() {
  // Rest of the code stays the same
  fore(i, 0, q) cout << res[i] << " \n"[i == q - 1];
}