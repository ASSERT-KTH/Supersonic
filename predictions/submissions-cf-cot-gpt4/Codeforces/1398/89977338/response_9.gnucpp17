#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <chrono>
#include <cstring>

using namespace std;
using ll = long long;
using ii = pair<int, int>;
using tf = ll;
using poly = vector<tf>;

const int MAXN = 1 << 20;
int n, x, y, lp[MAXN + 1], res[MAXN];
bool can[MAXN];
vector<int> pr;

void SieveOfEratosthenes() {
  for (int i = 2; i <= MAXN; i++) {
    if (lp[i] == 0)
      lp[i] = i, pr.push_back(i);
    for (int j = 0; j < pr.size() && pr[j] <= lp[i] && i * pr[j] <= MAXN; ++j)
      lp[i * pr[j]] = pr[j];
  }
}

void div_rec(vector<ll> &r, vector<pair<ll, int>> &f, int k, ll c) {
  if (k == f.size()) {
    r.push_back(c);
    return;
  }
  for (int i = 0; i <= f[k].second; ++i) {
    div_rec(r, f, k + 1, c);
    c *= f[k].first;
  }
}

// Continue from here...

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  
  SieveOfEratosthenes();
  cin >> n >> x >> y;
  int OFFSET = x;
  poly l(2 * OFFSET + 1), r(2 * OFFSET + 1);
  for (int i = 0; i <= n; ++i) {
    int X;
    cin >> X;
    l[X + OFFSET]++;
    r[-X + OFFSET]++;
  }
  
  // Continue from here...
  
  return 0;
}