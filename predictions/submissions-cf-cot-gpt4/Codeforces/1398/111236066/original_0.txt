The original code is already quite optimized, but there are a few small changes we can make to improve performance and readability:

1. Avoid using long long int (int64) when int (int32) is sufficient. This can save memory and CPU cycles. However, in this case, the int type is defined as long long, so this is not an issue.

2. The macro for w(t) is less readable and could be replaced with a regular loop in the main function.

3. The range macro is not used and can be removed.

4. Use ++i instead of i++ inside the loop for a slight performance gain. In this case, the difference is negligible, but it's a good practice to follow.

5. The isPrime function is not used and can be removed.

6. The "using namespace std" and "using namespace __gnu_pbds" could lead to name clashes in larger projects. In this case, it's not a performance issue, but a good coding practice.

Here is the optimized version of your program:

```cpp
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define mt make_tuple
#define pii std::pair<int, int>
#define vi std::vector<int>
#define mii std::map<int, int>
#define pqb std::priority_queue<int>
#define pqs std::priority_queue<int, vi, std::greater<int>>
#define setbits(x) __builtin_popcountll(x)
#define MOD 1000000007
#define inf 1e18
#define trace(x) cerr << #x << ": " << x << " " << endl;
#define FIO std::ios_base::sync_with_stdio(0);std::cin.tie(0);std::cout.tie(0)
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
typedef tree<int, null_type, std::less<int>, rb_tree_tag,
             tree_order_statistics_node_update>
    pbds;

void solve() {
  int n;
  std::cin >> n;
  std::string s;
  std::cin >> s;
  mii cnt;
  cnt[1]++;
  int pre = 0;
  int ans = 0;
  for (int i = 0; i < n; ++i) {
    int d = s[i] - '0';
    pre += d;
    ans += cnt[pre - i];
    cnt[pre - i]++;
  }
  std::cout << ans << std::endl;
}

int main() {
  FIO;
  int t;
  std::cin >> t;
  for(int i=0; i<t; i++)
    solve();
  return 0;
}
```