Here are the steps to optimize the given C++ program:

1. Remove the unnecessary `#include <bits/stdc++.h>`. This header file includes almost all the standard C++ libraries. It may save you a few keystrokes while coding but it increases the compilation time significantly as the compiler has to process a lot of unnecessary stuff. Include only required headers.

2. Remove the `using namespace std;` and `using namespace __gnu_pbds;`. This may lead to name clashes because all the entities in the `std` and `__gnu_pbds` namespaces will be dumped in the global namespace.

3. Remove the unused `typedef` for `pbds` as it's not used in the code.

4. Remove the unused function `isPrime()` as it's not used in the code.

5. Remove the unused macro `MOD` and `inf` as they are not used in the code.

6. Remove the unused macro `FIO` as it's not used in the code.

7. Remove the unused macro `range` as it's not used in the code.

8. The `trace` macro isn't used in the code and can be removed.

9. The macro `mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());` is not used and can be removed.

The following is the optimized program:

```cpp
#include <iostream>
#include <map>
#include <string>

#define ff first
#define ss second
#define int long long
#define pb push_back
#define mp make_pair
#define mt make_tuple
#define pii pair<int, int>
#define vi vector<int>
#define mii map<int, int>
#define pqb priority_queue<int>
#define pqs priority_queue<int, vi, greater<int>>
#define setbits(x) __builtin_popcountll(x)

void solve() {
  int n;
  std::cin >> n;
  std::string s;
  std::cin >> s;
  mii cnt;
  cnt[1]++;
  int pre = 0;
  int ans = 0;
  for (int i = 0; i < n; i++) {
    int d = s[i] - '0';
    pre += d;
    ans += cnt[pre - i];
    cnt[pre - i]++;
  }
  std::cout << ans << std::endl;
}

int32_t main() {
  int t;
  std::cin >> t;
  while (t--) 
      solve();
  return 0;
}
```