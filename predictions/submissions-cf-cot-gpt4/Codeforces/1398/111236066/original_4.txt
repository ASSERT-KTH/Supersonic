The optimization steps are as follows:

1. Avoid using `#include <bits/stdc++.h>` because this header file includes a lot of unnecessary libraries, which increases compilation time. Instead, include only necessary libraries.
2. Avoid defining macros for common operations. It makes the code harder to read and does not provide any significant performance improvements.
3. Use pre-increment (++i) instead of post-increment (i++) in loops. It can be faster because it doesn't need to make a copy of the value to return, while post-increment does.
4. The `isPrime` function is not used anywhere in the program, so it can be removed.
5. The `rng` variable is not used, so it can be removed.
6. `typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;` is not used, so it can be removed.
7. Replacing the `map` with `unordered_map` can improve the performance because `unordered_map` has an average time complexity of O(1) for insertions, deletions and search operations, while `map` has a time complexity of O(log(n)).
   
Optimized program:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>
using namespace std;

void solve() {
  int n;
  cin >> n;
  string s;
  cin >> s;
  unordered_map<int, int> cnt;
  cnt[1]++;
  int pre = 0;
  int ans = 0;
  for (int i = 0; i < n; ++i) {
    int d = s[i] - '0';
    pre += d;
    ans += cnt[pre - i];
    cnt[pre - i]++;
  }
  cout << ans << endl;
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
  return 0;
}
```
This program has the same functionality as the original program but is more efficient in terms of memory usage and running time.