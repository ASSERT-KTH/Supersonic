#include <bits/stdc++.h>
using namespace std;
template <typename T> class LazySegmentTree {
  // ... (same as before)

public:
  LazySegmentTree(int n) {
    this->n = n;
    arr = vector<T>(4 * n);
    lazy = vector<T>(4 * n);
  }
  void refresh() {
    fill(arr.begin(), arr.end(), T());
    fill(lazy.begin(), lazy.end(), T());
  }
  // ... (same as before)
};

// ... (same as before)

bool is_possible(int mid, LazySegmentTree<Sum>& stree) {
  stree.refresh();
  // ... (same as before)
}

int main() {
  // ... (same as before)
  LazySegmentTree<Sum> stree(n + 1);
  while (left < right) {
    int mid = (left + right) / 2;
    if (is_possible(mid, stree)) {
      right = mid;
    } else {
      left = mid + 1;
    }
  }
  // ... (same as before)
}