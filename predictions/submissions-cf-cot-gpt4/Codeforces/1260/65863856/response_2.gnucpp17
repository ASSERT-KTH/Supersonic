#include <bits/stdc++.h>
using namespace std;

template <typename T> class LazySegmentTree {
  int n;
  vector<T> arr;
  vector<T> lazy;

  // ... rest of the class ...

public:
  LazySegmentTree(int n) {
    // round up to the next highest power of 2
    int size = pow(2, ceil(log2(n)));
    this->n = size;
    arr = vector<T>(2 * size);
    lazy = vector<T>(2 * size);
  }

  // ... rest of the class ...
};

struct Sum {
  int val;
  bool marker;
  
  // ... rest of the struct ...

  bool operator!=(const Sum &other) const {
    return val != other.val;
  }

  void update_lazy_with_val(Sum val) {
    this->val = val.val;
    this->marker = true; // mark it as true
  }
  
  // ... rest of the struct ...
};

bool is_possible(LazySegmentTree<Sum>& stree, int mid, int n, const vector<int>& l, const vector<int>& r, const vector<int>& d, const vector<int>& a) {
  int min_agility = a[mid];
  for (int i = 0; i < d.size(); i++) {
    if (d[i] > min_agility) {
      stree.range_update(l[i] - 1, r[i], Sum(1));
    }
  }
  int req_time = n + 1 + 2 * stree.range_query(0, n + 1).val;
  return req_time <= t;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  
  // ... input code ...
  
  LazySegmentTree<Sum> stree(n + 1); // create tree once
  int left = 0;
  int right = m - 1;
  while (left < right) {
    int mid = (left + right) / 2;
    if (is_possible(stree, mid, n, l, r, d, a)) { // pass tree to is_possible
      right = mid;
    } else {
      left = mid + 1;
    }
  }

  // ... rest of the code ...
}