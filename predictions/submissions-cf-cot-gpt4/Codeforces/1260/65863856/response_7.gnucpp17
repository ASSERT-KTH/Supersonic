#include <vector>
#include <algorithm>
#include <cstdio>
using namespace std;
template <typename T> class LazySegmentTree {
  int n;
  vector<T> arr;
  vector<T> lazy;

  // Rest of the code is same
  
public:
  LazySegmentTree(int n) {
    this->n = n;
    arr = vector<T>(4 * n);
    lazy = vector<T>(4 * n);
  }
  T range_query(int l, int r) {
    if(l >= r) return T();
    return query(0, 0, n, l, r);
  }
  T point_query(int idx) { return range_query(idx, idx + 1); }
  void range_update(int l, int r, T val) {
    if(l < r){
      update(0, 0, n, l, r, val);
    }
  }
  void point_update(int idx, T val) { range_update(idx, idx + 1, val); }
};

// Rest of the code is same

void update_val_with_lazy(Sum lazy, int left_node, int right_node) {
  if(lazy.val != 0)
    this->val = (right_node - left_node);
}

// Rest of the code is same

int main() {
  int m, n, k, t;
  scanf("%d %d %d %d", &m, &n, &k, &t);
  int *a = new int[m];
  int *l = new int[k];
  int *r = new int[k];
  int *d = new int[k];
  for (int i = 0; i < m; i++) {
    scanf("%d", &a[i]);
  }
  for (int i = 0; i < k; i++) {
    scanf("%d %d %d", &l[i], &r[i], &d[i]);
  }
  sort(a, a + m);
  int left = 0;
  int right = m - 1;
  while (left < right) {
    int mid = (left + right) / 2;
    if (is_possible(mid)) {
      right = mid;
    } else {
      left = mid + 1;
    }
  }
  if (!is_possible(left)) {
    left += 1;
  }
  int sent = m - left;
  printf("%d\n", sent);
  delete[] a;
  delete[] l;
  delete[] r;
  delete[] d;
}