The given C++ code can be optimized in few ways:

1. Avoid using `pow` function to calculate the power of 2. It is slower and less accurate for integer math. Use bitwise shift operator instead.

2. Avoid recalculating `l * t` twice. Store it in a temporary variable.

3. The `#define` macros for I/O such as `read` and `print` are not used in the code. They can be removed.

4. The `#pragma` directives are compiler specific (GCC in this case) and might not be needed. They should generally be used when you're sure that they will improve the performance which is not always guaranteed. 

5. Use `'\n'` instead of `endl` to avoid unnecessary flushing of the output stream.

Here is the optimized version of the code:

```cpp
#include <bits/stdc++.h>
#define int long long
#define mod 1000000007
#define pb push_back
#define all(v) (v).begin(), (v).end()
#define RUN ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define debug(output) cout << #output << "=" << output << endl
using namespace std;
signed main() {
  RUN;
  int test = 1;
  while (test--) {
    int n, q;
    cin >> n >> q;
    vector<int> value(n + 1);
    for (int i = 0; i < n; i++)
      cin >> value[i];
    map<int, int> mp;
    for (int i = 0; i < n; i++) {
      mp[value[i]]++;
    }
    while (q--) {
      int b;
      cin >> b;
      int sum = 0;
      int t = 1 << 31;
      for (; t >= 1; t = t / 2) {
        int l = min(mp[t], b / t);
        int temp = l * t;
        sum += l;
        b -= temp;
      }
      if (b == 0)
        cout << sum << '\n';
      else
        cout << -1 << '\n';
    }
  }
}
```

Please note that the optimization changes are minor because the original code itself was pretty optimized and well-written.