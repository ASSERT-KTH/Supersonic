Optimization steps:

1. Remove `#include <bits/stdc++.h>` because it includes a large number of standard library headers, which can significantly increase compilation time. Instead, include only the necessary headers.
2. Avoid using global variables. In this case, `n`, `a[mx]`, `ans`, `k`, `s` and `m` are global variables. We can move them inside the `main` function or the function where they are used.
3. Use `const` keyword for constant values like `dx`, `dy` and `PI`.
4. Remove unused variables like `ans` and `k`.
5. Instead of sorting the entire array `a`, we can use a `std::set` to keep the elements sorted and unique as they are inserted. Therefore, the sorting step can be removed.
6. `typedef long long ll` is not needed; `long long` is used only twice in the program.

Optimized program:

```cpp
#include <iostream>
#include <set>
#include <map>
#include <algorithm>

using namespace std;

void solve() {
    int n;
    cin >> n;
    set<int> s;
    map<int, int> m;
    for (int i = 0; i < n; i++) {
        int a;
        cin >> a;
        if (a != 1 && m[a - 1] == 0) {
            s.insert(a - 1);
            m[a - 1]++;
        } else if (m[a] == 0) {
            s.insert(a);
            m[a]++;
        } else if (m[a + 1] == 0) {
            s.insert(a + 1);
            m[a + 1]++;
        }
    }
    cout << s.size() << endl;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    solve();
    return 0;
}
```

In the optimized program, unnecessary headers and global variables were removed, and the computation was simplified by taking advantage of the properties of the `std::set` data structure.