The given C/C++ program has a few areas which can be optimized:

1. Array "a" is of size 1e6 + 123. This array could be replaced with a vector, which would be dynamic in nature and consume memory only as per the requirement. It would optimize memory usage.

2. The use of set "s" can be avoided. Instead, the size of map "m" can be printed directly as it also stores unique elements, which is similar to set "s". This reduces the space complexity of the program.

3. Instead of checking the count of each element in map "m" by using m[a[i]-1] == 0, m[a[i]] == 0, and m[a[i]+1] == 0, we can use the insert operation of map which returns a pair with its second element as a boolean indicating whether the insertion took place or not. This would reduce the running time of the program.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define el << endl
#define PI 3.141592653589793238
#define _test_                                                                 \
  int t;                                                                       \
  cin >> t;                                                                    \
  while (t--)
#define optimize()                                                             \
  ios_base::sync_with_stdio(0);                                                \
  cin.tie(0);                                                                  \
  cout.tie(0)
#define file()                                                                 \
  freopen("input.txt", "r", stdin);                                            \
  freopen("output.txt", "w", stdout)
ll gcd(ll a, ll b) { return __gcd(a, b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }
int dx[] = {0, 0, +1, -1, +1, -1, -1, +1};
int dy[] = {+1, -1, 0, 0, +1, -1, +1, -1};

void _case_() {
  int n;
  cin >> n;
  vector<int> a(n);
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  sort(a.begin(), a.end());
  map<int, int> m;
  for (int i = 0; i < n; i++) {
    if (a[i] != 1 && m.insert({a[i] - 1, 1}).second) continue;
    if (m.insert({a[i], 1}).second) continue;
    m.insert({a[i] + 1, 1});
  }
  cout << m.size() el;
}
int main() {
  optimize();
  _case_();
  return 0;
}
```
This optimized version of the program would significantly improve both time complexity and space complexity.