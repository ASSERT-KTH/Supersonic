The given C++ program can be optimized in the following ways:

1. **Memory Usage**: The program uses an array 'a' of size 1e6 + 123 (1000123). If 'n' (the number of inputs) is considerably smaller than this, a large amount of memory is wasted. Instead, the size of the array 'a' should be dynamically allocated based on 'n'. 

2. **Running Time**: The program uses a `std::set` to store unique values and a `std::map` to count the occurrences of each value. However, both of these data structures have a relatively high insertion time complexity of O(log n). If the program uses a `std::unordered_set` and `std::unordered_map`, the average time complexity for insertions is O(1), which can reduce the running time. 

Now, let's optimize the program:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

#define PI 3.141592653589793238
#define el << '\n'

ios_base::sync_with_stdio(0);
cin.tie(0);
cout.tie(0);

ll gcd(ll a, ll b) { return __gcd(a, b); }
ll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }

int dx[] = {0, 0, +1, -1, +1, -1, -1, +1};
int dy[] = {+1, -1, 0, 0, +1, -1, +1, -1};

unordered_set<int> s;
unordered_map<int, int> m;

void solve() {
  int n;
  cin >> n;
  vector<int> a(n); // Changed from static to dynamic memory allocation
  for (auto &val : a) cin >> val;
  
  sort(a.begin(), a.end());
  
  for (auto val : a) {
    if (val != 1 && m[val - 1] == 0) {
      s.insert(val - 1);
      m[val - 1]++;
    } else if (m[val] == 0) {
      s.insert(val);
      m[val]++;
    } else if (m[val + 1] == 0) {
      s.insert(val + 1);
      m[val + 1]++;
    }
  }
  
  cout << s.size() el;
}

int main() {
  solve();
  return 0;
}
```
This optimized program has a reduced memory footprint and a potentially faster running time.