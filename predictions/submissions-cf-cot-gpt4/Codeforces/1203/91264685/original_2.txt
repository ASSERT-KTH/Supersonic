First, let's look at the program and see how we can optimize it.

1. The macro definitions for `el`, `_test_`, `optimize()`, `file()` and `_case_()` are not standard and are not improving the readability of the code but rather making it harder to understand. We can replace them with their actual code.

2. The function `gcd()` is only used within `lcm()` and since `lcm()` is not being used at all, we can remove these two functions.

3. The `PI`, `dx`, `dy` and `k` variables are not used anywhere in the program and can be removed.

4. The `set<int> s` and `map<int, int> m` can be declared inside the `_case_()` function since they are only used there. This can save memory if `_case_()` is not executed.

5. If we look at the section where we are checking `if (a[i] != 1 and m[a[i] - 1] == 0)`, we can see that we are checking for `a[i] - 1` in both the `set` and `map`. We can optimize this by using only the `map` which in average case has a O(1) lookup time, and then we can convert the `map` to a `set` at the end.

Here is the optimized version of the program considering these points:

```cpp
#include <iostream>
#include <set>
#include <map>
#include <algorithm>
using namespace std;

const int mx = 1e6 + 123;
int n, a[mx];

void solve() {
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  sort(a, a + n);
  map<int, int> m;
  for (int i = 0; i < n; i++) {
    if (a[i] != 1 && m[a[i] - 1] == 0) {
      m[a[i] - 1]++;
    } else if (m[a[i]] == 0) {
      m[a[i]]++;
    } else if (m[a[i] + 1] == 0) {
      m[a[i] + 1]++;
    }
  }
  set<int> s(m.begin(), m.end());
  cout << s.size() << endl;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  solve();
  return 0;
}
```

This optimized version should run faster and use less memory than the original program.