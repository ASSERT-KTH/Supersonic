Your program is overall well-structured and efficient, but there is room for some minor optimizations:

1. **Unnecessary #define statements**: Some of the #define statements are not used in the code and can be removed, such as _test_, file(), PI, dx[], and dy[].

2. **Unnecessary variables**: The variables ans and k are declared but not used anywhere in the program. These can be removed.

3. **Reducing the usage of std namespace**: Using entire std namespace is not a good practice because it may lead to naming conflicts. It's better to use using std::cin, std::cout, etc.

4. **Using unordered_map instead of map**: A map in C++ internally uses a Red-Black tree, which gives a time complexity of O(logN) for insertions and deletions while unordered_map uses hashing, so average time complexity for insertions and deletions is O(1).

5. **Optimize the gcd and lcm functions**: The lcm function can be optimized by using the built-in __gcd function directly instead of invoking the gcd function.

Optimized program:

```cpp
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <set>
using std::cin;
using std::cout;
using std::endl;
using std::unordered_map;
using std::set;
typedef long long ll;

#define optimize()                                                             \
  ios_base::sync_with_stdio(0);                                                \
  cin.tie(0);                                                                  \
  cout.tie(0)

ll lcm(ll a, ll b) { return a * (b / __gcd(a, b)); }

const int mx = 1e6 + 123;
int n, a[mx];
set<int> s;
unordered_map<int, int> m;

void _case_() {
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  sort(a, a + n);
  for (int i = 0; i < n; i++) {
    if (a[i] != 1 and m[a[i] - 1] == 0) {
      s.insert(a[i] - 1);
      m[a[i] - 1]++;
    } else if (m[a[i]] == 0) {
      s.insert(a[i]);
      m[a[i]]++;
    } else if (m[a[i] + 1] == 0) {
      s.insert(a[i] + 1);
      m[a[i] + 1]++;
    }
  }
  cout << s.size() << endl;
}

int main() {
  optimize();
  _case_();
  return 0;
}
```

Please remember that these optimizations may not bring significant performance improvements as they are minor optimizations. The bigger performance improvement can be achieved by optimizing the algorithm and data structures used. In this case, the algorithm is already optimal.