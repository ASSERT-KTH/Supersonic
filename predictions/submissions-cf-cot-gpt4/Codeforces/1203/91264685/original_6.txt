Before we start, remember that in C++ optimization, there are trade-offs. The code might be optimized for a specific scenario but not for others. Also, the optimization might depend on the specific compiler and the machine architecture.

Step by step optimization:

1. Remove unnecessary headers: `#include<bits/stdc++.h>` is not a standard header and it includes a lot of unnecessary headers which can increase the compilation time. Only include the necessary headers.

2. Avoid using `using namespace std;` as it can lead to naming conflicts.

3. Use `constexpr` for constants: `constexpr` tells the compiler that the variable is constant and known at compile time. This can make the program faster.

4. Avoid using macro for function like `_test_` and `_case_`: Function-like macros are generally considered bad practice in C++ due to lack of type safety and other issues. Use inline functions instead.

5. `optimize()` macro: This macro is used to speed up I/O operations. However, it's often unnecessary and may cause bugs and compatibility issues. Remove it.

6. `file()` macro: This macro is used to redirect stdin and stdout to files. However, it's often unnecessary and may cause bugs and compatibility issues. Remove it.

7. Minimize the use of std::map and std::set: These data structures are usually slower than arrays or vectors due to their internal tree structure. In this case, the map `m` can be replaced by a vector because the keys are within a known range.

8. Reduce the number of lookups in the map `m` and set `s`: Each lookup in a map or set takes logarithmic time. Instead of checking the existence of a key and then incrementing its value, you can directly increment it. Also, instead of checking the size of the set `s` at the end, you can increment a counter each time you insert a new element.

Here is the optimized program:

```cpp
#include <iostream>
#include <algorithm>
#include <vector>

constexpr int mx = 1e6 + 123;

int main() {
  int n;
  std::cin >> n;

  std::vector<int> a(n);
  for (int i = 0; i < n; i++) {
    std::cin >> a[i];
  }

  std::sort(a.begin(), a.end());

  std::vector<int> m(mx, 0);
  int s_size = 0;

  for (int i = 0; i < n; i++) {
    if (a[i] != 1 && m[a[i] - 1] == 0) {
      m[a[i] - 1]++;
      s_size++;
    } else if (m[a[i]] == 0) {
      m[a[i]]++;
      s_size++;
    } else if (m[a[i] + 1] == 0) {
      m[a[i] + 1]++;
      s_size++;
    }
  }

  std::cout << s_size << "\n";

  return 0;
}
```