The program can be optimized in the following ways:

1. Avoid including `<bits/stdc++.h>`: This header file includes quite a lot of headers and increases compilation time. It's better to include only the headers that are actually needed.

2. Avoid using `using namespace std;`: This may lead to naming conflicts.

3. Avoid using macros for functions: Instead of using macros for functions like `_test_`, `_case_`, `optimize` and `file`, use actual functions. Macros can make debugging difficult and can lead to unexpected results due to lack of type safety.

4. `std::map` and `std::set` can be replaced by `std::unordered_map` and `std::unordered_set` respectively: `std::unordered_map` and `std::unordered_set` have average constant-time complexity for search, insert, and remove operations compared to `std::map` and `std::set` which have logarithmic time complexity. However, remember that `std::unordered_map` and `std::unordered_set` have worse worst-case time complexities.

5. Avoid using global variables: It's a bad practice to use global variables, as it could lead to naming conflicts, and it's harder to debug and maintain such code.

Here's the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>

long long gcd(long long a, long long b) {
  return std::__gcd(a, b);
}

long long lcm(long long a, long long b) {
  return a * (b / gcd(a, b));
}

void optimizeIO() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);
}

void processCase() {
  int n;
  std::cin >> n;
  std::vector<int> a(n);
  for (int i = 0; i < n; i++) {
    std::cin >> a[i];
  }
  std::sort(a.begin(), a.end());
  std::unordered_set<int> s;
  std::unordered_map<int, int> m;
  for (int i = 0; i < n; i++) {
    if (a[i] != 1 && m[a[i] - 1] == 0) {
      s.insert(a[i] - 1);
      m[a[i] - 1]++;
    } else if (m[a[i]] == 0) {
      s.insert(a[i]);
      m[a[i]]++;
    } else if (m[a[i] + 1] == 0) {
      s.insert(a[i] + 1);
      m[a[i] + 1]++;
    }
  }
  std::cout << s.size() << "\n";
}

int main() {
  optimizeIO();
  processCase();
  return 0;
}
```
Please note that it's not always possible to optimize for both running time and memory usage at the same time because they can often be trade-offs. In this case, we are optimizing for running time. The memory usage might increase slightly due to the use of `unordered_map` and `unordered_set` over `map` and `set`.