Optimization Steps:

1. Instead of using switch-case, we can use an array of strings. It reduces the number of comparisons, leading to a faster execution time. The case values are consecutive and start from 1, making them perfect for array indexing.
2. We can use an array of string literals to store the possible outcomes and directly access the outcome using the calculated index, eliminating the need for the switch statement. This approach is faster because it uses direct memory access instead of multiple comparisons.
3. We don't need to store the result of the max operation in a variable 'n'. We can directly use it as an index. This reduces memory usage.
4. Instead of using 'std::endl', we can use '\n' for newline. The former flushes the stream, which is an expensive operation and not needed here.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int a, b;
  cin >> a >> b;

  const char* outcomes[] = {"1/6", "1/3", "1/2", "2/3", "5/6", "1/1"};
  cout << outcomes[6 - max(a, b)] << '\n';

  return 0;
}
```
This program has the same functionality as the original, but it is more efficient in terms of memory and speed.