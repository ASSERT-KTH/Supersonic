The code takes two integers as input, calculates the maximum of them, subtracts the result from 7, and then uses a switch case to print a possible fraction based on the result.

To optimize the code:

1. We can get rid of the variable `n` altogether and directly use the calculated value in the switch statement. This will save some memory as we are reducing the number of variables.
2. We can replace the `switch`-`case` statement with a constant array of strings. It reduces the control flow instructions (i.e., jumps) which may lead to better performance due to improved pipeline efficiency. In addition, using array indexing instead of a switch-case statement can be faster because it involves less branching.

Here's the optimized version of the program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int a, b;
  cin >> a >> b;

  const char* results[] = {"1/6", "1/3", "1/2", "2/3", "5/6", "1/1"};
  cout << results[7 - max(a, b) - 1];

  return 0;
}
```

In this optimized version, the program directly accesses the corresponding string in the `results` array with the index calculated from `7 - max(a, b) - 1`. The "-1" is necessary because arrays in C++ are 0-based.