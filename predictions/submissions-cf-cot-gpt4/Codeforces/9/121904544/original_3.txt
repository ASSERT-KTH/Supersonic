The program can be optimized in the following ways:

1. Remove usage of 'switch' statement: The 'switch' statement is not efficient when there are only a limited number of cases. Here, we can use an array of strings to store the possible outcomes and directly access the required string using the index.

2. Use 'std::ios_base::sync_with_stdio(false)': This line of code will help to speed up the I/O operations in C++. It is especially useful when the program involves heavy I/O operations.

3. Avoid using 'std::endl': Instead of using 'std::endl' to insert a new line, we can use '\n'. 'std::endl' not only inserts a new line, but also flushes the output buffer, which is not required in this case.

4. 'return 0' at the end of the main function is not necessary in C++.

So, the optimized version of the program is:

```cpp
#include <iostream>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    int a, b;
    cin >> a >> b;
    string outcomes[] = {"1/6", "1/3", "1/2", "2/3", "5/6", "1/1"};
    
    cout << outcomes[6 - max(a, b)] << '\n';
}
```

In this optimized version, we have reduced the complexity of the program by removing the 'switch' statement and storing the possible outcomes in an array. This way, we can directly access the required outcome using the index. We have also used 'ios_base::sync_with_stdio(false)' and 'cin.tie(NULL)' to speed up the I/O operations. Furthermore, we are using '\n' instead of 'std::endl' to insert a new line, which is faster because it does not flush the output buffer.