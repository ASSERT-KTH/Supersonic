The given code is already quite optimized in terms of time complexity. It has a time complexity of O(n+m) which is essentially linear. It reads a series of numbers, counts how many are even and how many are odd, and then does that again with another series of numbers. It then prints out the sum of the product of the number of odd numbers in both series and the product of the number of even numbers in both series.

However, there are still a few minor improvements that could be made:

1. It's generally advisable not to use `#include <bits/stdc++.h>` because it includes a lot of unnecessary libraries, increasing the compilation time and memory usage. Instead, you should only include the libraries you need. In this case, we only need `<iostream>`.

2. You can avoid using the ternary operator in the loops for checking if the number is even or odd. Instead, you could use the bitwise AND operator (&) with 1 to check if a number is odd (n & 1) or even (!(n & 1)).

Below is the optimized code:

```cpp 
#include <iostream>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int t;
    cin >> t;
    while (t--) {
        long long temp, n, m, a = 0, b = 0, c = 0, d = 0;
        cin >> n;
        for (int i = 0; i < n; i++) {
            cin >> temp;
            if(temp & 1) a++; 
            else c++;
        }
        cin >> m;
        for (int i = 0; i < m; i++) {
            cin >> temp;
            if(temp & 1) b++; 
            else d++;
        }
        cout << a * b + c * d << "\n";
    }
    return 0;
}
```

Remember that the optimizations here are minor and in the grand scheme of things, they won't make a significant difference in the performance of this specific program. However, they are generally good practices to follow.