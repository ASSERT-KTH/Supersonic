Firstly, we can remove the unnecessary usage of `bits/stdc++.h`. We only need `iostream` and `ios` for this program. `bits/stdc++.h` is a heavy include and it is not recommended to use it, especially when we are only using a few standard libraries.

Secondly, we can replace the post-increment (`a++` and `c++`) with pre-increment (`++a` and `++c`). The post-increment has to store the original value, increment the variable, and then return the original value, which is more costly than pre-increment, which just increments the variable and returns the new value. The same goes for `b++` and `d++`.

Thirdly, we can use `ios::sync_with_stdio(false)` and `cin.tie(NULL)` to decouple `cin` and `cout` from `scanf` and `printf` which makes the program faster. However, we don't need `cout.tie(NULL)` as it has no effect on the performance of the program.

Fourthly, variables `a`, `b`, `c` and `d` should be declared in the scope where they are used.

Here's the optimized code:

```cpp
#include <iostream>
using namespace std;
int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    long long temp, n, m;
    long long a = 0, c = 0;
    cin >> n;
    for (int i = 0; i < n; i++) {
      cin >> temp;
      temp % 2 ? ++a : ++c;
    }
    long long b = 0, d = 0;
    cin >> m;
    for (int i = 0; i < m; i++) {
      cin >> temp;
      temp % 2 ? ++b : ++d;
    }
    cout << a * b + c * d << "\n";
  }
  return 0;
}
```