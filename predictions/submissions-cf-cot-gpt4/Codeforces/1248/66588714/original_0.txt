Optimization Steps:

1. The synchronization between the C and C++ standard streams is by default turned on, this makes C++ streams run slower. The line 'ios_base::sync_with_stdio(false);' turns off this synchronization which speeds up the I/O operations but we cannot mix the C and C++ style I/O after this line. This is already done in your code.

2. With the line 'cin.tie(NULL);' and 'cout.tie(NULL);', we untie cin from cout. Tied streams ensure that one stream is flushed automatically before each I/O operation on the other stream. This is good for interactive console programs, but in competitive programming, it is unnecessary overhead.

3. Using 'endl' to end a line does flushing which is an unnecessary overhead in some programs. So, '\n' is used instead of 'endl' for better performance. This is already done in your code.

4. The variables a, b, c, d are reset to 0 for each test case. Instead of resetting them in every while loop iteration, we can define them inside the loop. This will ensure they are created and destroyed for each test case, freeing up memory when not needed.

5. The variable temp is used to store the input temporarily. We can define it inside the loop to free up memory when it's not needed.

6. The ternary operator is used to calculate a, b, c, and d. While it's a neat way of writing the code, if-else might be faster due to branch prediction in modern CPUs.

Optimized Program:

```cpp
#include <bits/stdc++.h>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    long long n, m;
    cin >> n;
    long long a = 0, c = 0;
    for (int i = 0; i < n; i++) {
      long long temp;
      cin >> temp;
      if(temp % 2)
        a++;
      else
        c++;
    }
    cin >> m;
    long long b = 0, d = 0;
    for (int i = 0; i < m; i++) {
      long long temp;
      cin >> temp;
      if(temp % 2)
        b++;
      else
        d++;
    }
    cout << a * b + c * d << "\n";
  }
  return 0;
}
```