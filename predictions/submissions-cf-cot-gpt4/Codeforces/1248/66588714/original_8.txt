The given C++ program runs in O(n + m) time complexity and O(1) space complexity, which is already optimal for this specific code. The program is already optimized for running time and memory usage. 

However, there are a few small points that could be improved:

1. The `#include <bits/stdc++.h>` is generally not recommended because it includes all the standard library headers which can slow down the compile time. It's better to include only those headers that are actually being used.

2. The explicit `NULL` keyword for `cin.tie` and `cout.tie` is unnecessary, `nullptr` is preferred in modern C++ because it provides stronger type safety.

3. Variables `temp`, `a`, `b`, `c` and `d` could be declared right at the place where they are first used to reduce their scope and improve readability.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  int t;
  cin >> t;
  while (t--) {
    long long n, m, a = 0, c = 0;
    cin >> n;
    for (int i = 0; i < n; i++) {
      long long temp;
      cin >> temp;
      temp % 2 ? a++ : c++;
    }
    long long b = 0, d = 0;
    cin >> m;
    for (int i = 0; i < m; i++) {
      long long temp;
      cin >> temp;
      temp % 2 ? b++ : d++;
    }
    cout << a * b + c * d << "\n";
  }
  return 0;
}
```

Again, these are just minor improvements and won't have a significant effect on the program's performance because it's already optimal.