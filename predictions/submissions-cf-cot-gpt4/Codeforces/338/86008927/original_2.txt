Here are some steps to optimize the given C/C++ program:

1. Avoid using `#include<bits/stdc++.h>` as it includes all the standard library files in C++, which increases the compilation time. Instead, include only the necessary header files.

2. The `binmul` function makes recursive calls, which can be expensive in terms of time and space complexity. This can be converted into an iterative function.

3. The `lcm` function calculates the Least Common Multiple (LCM) of two numbers. This can be optimized by using the formula `LCM(a,b) = (a*b) / GCD(a,b)` directly, instead of making function calls to calculate GCD and then LCM.

4. The `gcdEx` function is a bit complex due to multiple variable assignments and function calls. This can be simplified using a while loop.

5. Instead of using multiple `printf` statements to print "NO" and then exiting, create a function `printNoAndExit` which does this. This will reduce the redundancy in the code.

6. Instead of using `scanf` and `printf`, use `cin` and `cout` for input and output. They are faster and more efficient in C++.

Now, let's implement these optimizations:

```c++
#include <iostream>
#include <vector>
#include <chrono>
#include <random>
#define fastIO std::ios_base::sync_with_stdio(false); std::cin.tie(0); std::cout.tie(0)
#define NAME "File"
using ll = long long;

std::mt19937 rnd(std::chrono::high_resolution_clock::now().time_since_epoch().count());
const ll LINF = (ll)2e18;

ll gcd(ll a, ll b) {
  while (b) {
    a %= b;
    std::swap(a, b);
  }
  return a;
}

ll lcm(ll a, ll b) {
  ll d = gcd(a, b);
  a /= d;
  if (a > LINF / b) {
    printNoAndExit();
  }
  return a * b;
}

ll binmul(ll a, ll b, ll mod) {
  ll result = 0;
  while (b > 0) {
    if (b & 1) {
      result = (result + a) % mod;
    }
    a = (2 * a) % mod;
    b >>= 1;
  }
  return result;
}

void printNoAndExit() {
  std::cout << "NO\n";
  exit(0);
}

// Rest of the code remains same

int main(void) {
  fastIO;
  auto start = std::chrono::high_resolution_clock::now();
  run();
  auto end = std::chrono::high_resolution_clock::now();
  std::cerr << "Execution time: "
            << std::chrono::duration_cast<std::chrono::milliseconds>(end -
                                                                     start)
                   .count()
            << " ms" << std::endl;
  return 0;
}
```

Please note that the optimization provided here is for the given code only. There might be other specific optimization techniques based on the actual problem you are trying to solve. Also, the optimization assumes that you have a good understanding of what the original code is doing.