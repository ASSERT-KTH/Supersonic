#include <iostream>
#include <algorithm>
#include <cstring>

typedef long long ll;
const int maxn = 100005;
ll arr1[maxn], arr2[maxn];
ll dp[maxn][3];
int n;

ll dpF(int i, int last) {
  if (i == n)
    return 0LL;
  if (dp[i][last] != -1)
    return dp[i][last];
  ll option1 = 0LL, option2 = 0LL, option3 = 0LL;
  if (last != 1)
    option1 = arr1[i] + dpF(i + 1, 1);
  if (last != 2)
    option2 = arr2[i] + dpF(i + 1, 2);
  option3 = dpF(i + 1, last);
  return dp[i][last] = std::max({option1, option2, option3});
}

void solve() {
  std::memset(dp, -1, sizeof(dp));
  std::cin >> n;
  for (int i = 0; i < n; ++i) std::cin >> arr1[i];
  for (int i = 0; i < n; ++i) std::cin >> arr2[i];
  std::cout << dpF(0, 0) << "\n";
}

int main() {
  solve();
  return 0;
}