#include <iostream>
#include <algorithm>
#include <vector>
#include <cstring>
using std::cin;
using std::cout;
using std::endl;
using std::vector;
using std::max;
typedef long long ll;

ll dpF(int i, int last, int n, vector<ll>& arr1, vector<ll>& arr2, vector<vector<ll> >& dp) {
  if (i == n)
    return 0LL;
  if (dp[i][last] != -1)
    return dp[i][last];
  ll op1 = 0LL, op2 = 0LL, op3 = 0LL;
  if (last != 1)
    op1 = arr1[i] + dpF(i + 1, 1, n, arr1, arr2, dp);
  if (last != 2)
    op2 = arr2[i] + dpF(i + 1, 2, n, arr1, arr2, dp);
  op3 = dpF(i + 1, last, n, arr1, arr2, dp);
  return dp[i][last] = max({op1, op2, op3});
}

void solve() {
  int n;
  cin >> n;
  vector<ll> arr1(n), arr2(n);
  vector<vector<ll> > dp(n, vector<ll>(3, -1));
  for(int i=0; i<n; i++) 
    cin >> arr1[i];
  for(int i=0; i<n; i++) 
    cin >> arr2[i];
  cout << dpF(0, 0, n, arr1, arr2, dp) << "\n";
}

int main() {
  int t;
  t = 1;
  for(int i=0; i<t; i++) { 
    solve(); 
  }
  return 0;
}