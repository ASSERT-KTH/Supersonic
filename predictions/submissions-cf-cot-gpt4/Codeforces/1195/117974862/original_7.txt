The given program can be optimised in the following ways:

1. Removing `using namespace std`: It's a bad practice to use the `using namespace std;` statement as it may lead to naming conflicts.

2. Avoiding `#include <bits/stdc++.h>`: Including this header file adds extra compilation time as it includes all the standard libraries which may not be necessary for the program.

3. Removing unused Macros: Many macros defined in the program are not used. These can be removed to clean up the code and make it more readable.

4. Replacing `memset` with loop initialization: `memset` is used to initialize the `dp` array to `-1`. This can be replaced by a nested loop which could be more cache-friendly.

5. Avoiding `max` function with initializer list: Instead of using `max` function with an initializer list, we can use the regular `max` function to find the maximum of three numbers. This will avoid the creation of a temporary array.

6. Removing redundant `using namespace std;`: There are two `using namespace std;` statements in the code. One can be removed.

Here is the optimised program according to the above steps:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

typedef long long ll;

const int maxn = 100005;

ll arr1[maxn], arr2[maxn];
ll dp[maxn][3];
int n;

ll dpF(int i, int last) {
    if (i == n) return 0LL;
    if (dp[i][last] != -1) return dp[i][last];
    ll op1 = 0LL, op2 = 0LL, op3 = 0LL;
    if (last != 1) op1 = arr1[i] + dpF(i + 1, 1);
    if (last != 2) op2 = arr2[i] + dpF(i + 1, 2);
    op3 = dpF(i + 1, last);
    return dp[i][last] = std::max(op1, std::max(op2, op3));
}

void solve() {
    for(int i = 0; i < maxn; i++)
        for(int j = 0; j < 3; j++)
            dp[i][j] = -1;
    std::cin >> n;
    for(int i = 0; i < n; ++i) std::cin >> arr1[i];
    for(int i = 0; i < n; ++i) std::cin >> arr2[i];
    std::cout << dpF(0, 0) << "\n";
}

int main() {
    solve();
    return 0;
}
```