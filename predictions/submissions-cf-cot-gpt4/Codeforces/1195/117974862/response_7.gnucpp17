#include <iostream>
#include <vector>
#include <algorithm>

typedef long long ll;

const int maxn = 100005;

ll arr1[maxn], arr2[maxn];
ll dp[maxn][3];
int n;

ll dpF(int i, int last) {
    if (i == n) return 0LL;
    if (dp[i][last] != -1) return dp[i][last];
    ll op1 = 0LL, op2 = 0LL, op3 = 0LL;
    if (last != 1) op1 = arr1[i] + dpF(i + 1, 1);
    if (last != 2) op2 = arr2[i] + dpF(i + 1, 2);
    op3 = dpF(i + 1, last);
    return dp[i][last] = std::max(op1, std::max(op2, op3));
}

void solve() {
    for(int i = 0; i < maxn; i++)
        for(int j = 0; j < 3; j++)
            dp[i][j] = -1;
    std::cin >> n;
    for(int i = 0; i < n; ++i) std::cin >> arr1[i];
    for(int i = 0; i < n; ++i) std::cin >> arr2[i];
    std::cout << dpF(0, 0) << "\n";
}

int main() {
    solve();
    return 0;
}