#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <array>

typedef long long ll;
typedef std::array<ll, 100005> arr_ll;
typedef std::array<arr_ll, 3> arr_2d_ll;
const int INF = 1e9;
const double diff = 10e-6;
const int maxn = 100005;
const double PI = acos(-1);

ll dpF(int i, int last, int n, arr_ll& arr1, arr_ll& arr2, arr_2d_ll& dp) {
  if (i == n)
    return 0LL;
  if (dp[i][last] != -1)
    return dp[i][last];
  ll op1 = 0LL, op2 = 0LL, op3 = 0LL;
  if (last != 1)
    op1 = arr1[i] + dpF(i + 1, 1, n, arr1, arr2, dp);
  if (last != 2)
    op2 = arr2[i] + dpF(i + 1, 2, n, arr1, arr2, dp);
  op3 = dpF(i + 1, last, n, arr1, arr2, dp);
  return dp[i][last] = std::max({op1, op2, op3});
}

void solve() {
  arr_2d_ll dp;
  arr_ll arr1, arr2;
  int n;
  std::memset(&dp[0], -1, sizeof(dp));
  std::cin >> n;
  for(int i=0; i<n; ++i) std::cin >> arr1[i];
  for(int i=0; i<n; ++i) std::cin >> arr2[i];
  std::cout << dpF(0, 0, n, arr1, arr2, dp) << "\n";
}

int main() {
  solve();
  return 0;
}