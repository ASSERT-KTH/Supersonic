The optimization of this code will be done by making the following changes:

1. Remove the first loop: It does nothing but increment and then decrement `i` in each iteration. This is a waste of CPU cycles and does not contribute to the output of the program. This is the major time complexity optimization in this code.

2. Change the return type of `main()`: To be compliant with the C++ standard, the `main()` function should return an `int`.

3. Declare `n` inside `main()`: `n` should not be a global variable if it's only used inside `main()`. This is a memory usage optimization in this code.

4. Use `putchar()` instead of `printf()`: As `printf()` can print more complex strings, it is slower than `putchar()`. As we only need to print a single character, we can use `putchar()`.

Here is the optimized program:

```cpp
#pragma G++ optimize("-O2")
#include <cstdio>

int main() {
  int n;
  for (scanf("%d", &n); n--; putchar('0' + n % 2));
  return 0;
}
```

Note: The string '0' + n % 2 will yield '0' if n % 2 is 0 and '1' if n % 2 is 1. This is because in ASCII, '0' + 1 is '1'. This is a clever trick to convert an integer to a character without using itoa().