The given code has a couple of unnecessary operations that are slowing down its execution and increasing memory usage.

Optimization steps:

1) The first loop in the program increments 'i', then immediately decrements it. This does nothing in terms of computation and just wastes CPU cycles. We can remove this loop altogether.

2) The second loop reads an integer 'n' from the input, then decrements 'n' until it reaches zero, printing the remainder of 'n' divided by 2 each time. This operation can be made more efficient. Instead of using the '%' operator, which is relatively slow, we can use bitwise AND operator '&' with 1. This operation will return a similar result - 1 if 'n' is odd and 0 if 'n' is even.

Optimized code:

```
#pragma G++ optimize("-O2")
#include <cstdio>
int n;
main() {
  for (scanf("%d", &n); n--; printf("%d", n & 1))
    ;
}
```

This optimized code has removed the unnecessary first loop and has improved the efficiency of computation in the second loop.