#include <algorithm>
#include <iostream>
using namespace std;
#define rep(i, N) for (int i = 0; i < (N); i++)
const int MAXN = 1000000;
int freq[MAXN], cfreq[MAXN];
bool isvalid(int, int, int, int);
int T;
int main() {
  std::ios::sync_with_stdio(false);
  int t, b = -1, x;
  cin >> T;
  rep(t, T) {
    int k;
    cin >> k;
    freq[k]++;
    b = max(b, k);
  }
  rep(t, T) if (t > 0 && (freq[t] != (t << 2))) break;
  x = t;
  int n, m, y;
  bool found = false;
  for (n = 1; n * n <= T && !found; n++)
    if (T % n == 0) {
      m = T / n;
      y = n + m - b - x;
      if (isvalid(n, m, x, y) || isvalid(m, n, x, y)) {
        cout << n << " " << m << "\n" << x << " " << y << "\n";
        found = true;
      }
    }
  if (!found) cout << -1 << "\n";
  return 0;
}
inline bool isvalid(int n, int m, int x, int y) {
  if (x < 1 || x > n || y < 1 || y > m)
    return false;
  rep(i, MAXN) cfreq[i] = 0;
  x--; y--;
  for (int i = 0; i < n; i++) {
    int dx = abs(x - i);
    for (int j = 0; j < m; j++) cfreq[dx + abs(y - j)]++;
  }
  rep(i, T) if (cfreq[i] != freq[i]) return false;
  return true;
}