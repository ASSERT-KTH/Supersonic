The given C++ code first reads a number `n` from the input and then `n` more numbers that are stored in the `cont` array. Then it calculates the number of unique numbers from the end of the `cont` array to the beginning and stores the result for each position in the `cnt` array. Finally, it sums up the number of unique elements after each position in `cont` and outputs this sum.

The main performance issue in this code is the use of a set to calculate the number of unique elements after each position in `cont`. This can be optimized by using a frequency map instead of a set and count variable. This will reduce the time complexity of the code from O(n log n) to O(n), as the operations on a frequency map are done in constant time.

The second optimization can be done by minimizing the use of the `used` array. Instead of checking and updating the `used` array in the second loop, we can check and update the frequency map.

The third optimization can be done by reducing the size of `cnt` array. Instead of storing the count of unique numbers for all positions, we can store it only for the current and the next positions. This will reduce the memory usage of the code.

Here is the optimized version of the code:

```C++
#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    int n;
    vector<int> cont(100005);
    vector<int> freq(100005, 0);
    while (cin >> n) {
        int unique_count = 0;
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            cin >> cont[i];
        }
        for (int i = n - 1; i >= 0; i--) {
            if (freq[cont[i]]++ == 0) {
                unique_count++;
            }
            cont[i] = unique_count;
        }
        unique_count = 0;
        fill(freq.begin(), freq.end(), 0);
        for (int i = 0; i < n - 1; i++) {
            if (freq[cont[i]]++ == 0) {
                ans += cont[i + 1] - unique_count;
            }
        }
        cout << ans << "\n";
    }
    return 0;
}
```

In the optimized code, I first read all numbers from the input into the `cont` array. Then I count the number of unique numbers from the end of `cont` to the beginning and store the result in the same array. In the second loop, I sum up the number of unique elements after each position in `cont` and output the sum. I use a frequency map `freq` to count the number of occurrences of each number and a variable `unique_count` to count the number of unique numbers.