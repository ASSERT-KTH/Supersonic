Optimization Steps:

1. The first optimization we can do is to remove `#include <bits/stdc++.h>` since it includes a lot of libraries which we might not be using in our program. This can reduce the compilation time significantly. Instead, we can include only those headers which we are using in our program.

2. The second optimization is to declare variables when they are needed. This will help in reducing memory usage.

3. The third optimization is about using `unordered_set` instead of `set`. `unordered_set` has an average time complexity of O(1) for insertions and lookups while `set` has a time complexity of O(log n). This optimization will reduce the runtime of the program.

4. The fourth optimization is to use `fill_n` instead of `memset`. `fill_n` is a standard C++ function and it can be a safer option than `memset` when dealing with non-POD types. It's also more idiomatic in C++.

5. The fifth optimization is to use prefix increment (++i) instead of postfix (i++) where the result is unused. Prefix increment could be faster because it doesn't need to create a copy.

Now let's apply these optimizations to the program:

```c++
#include <iostream>
#include <unordered_set>
#include <algorithm>
using namespace std;

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  while (true) {
    int n;
    cin >> n;
    if(cin.eof()) break;
    int cont[100005];
    int used[100005] = {0};
    int cnt[100005];
    long long ans = 0;
    for (int i = 0; i < n; ++i) {
      cin >> cont[i];
    }
    unordered_set<int> st;
    for (int i = n - 1; i >= 0; --i) {
      st.insert(cont[i]);
      cnt[i] = st.size();
    }
    for (int i = 0; i < n - 1; ++i) {
      if (!used[cont[i]]) {
        used[cont[i]] = 1;
        ans += cnt[i + 1];
      }
    }
    cout << ans << endl;
  }
}
```
Note that this is only a very basic optimization and depending on the specific requirements and constraints of your program, further optimization may be possible.