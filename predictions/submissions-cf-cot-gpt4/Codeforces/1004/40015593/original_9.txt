The main points of optimization for this program are:

1. Memory allocation: The arrays "cont", "used" and "cnt" are allocated with 100005 elements, which may be unnecessary and waste memory if "n" is significantly small. To optimize memory usage, dynamic memory allocation can be used to allocate only required memory.

2. Use of std::set: In this program, std::set is used to store unique elements of "cont" array in reverse order and get the count of unique elements till "i". But maintaining a std::set is not necessary as we can just use a boolean array "used" to track if an element is already encountered or not and a counter to count the number of unique elements till "i".

Here is the optimized code:

```c++
#include <iostream>
using namespace std;

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  int n;
  while (cin >> n) {
    int* cont = new int[n];
    int* used = new int[n]();
    int* cnt = new int[n]();
    long long ans = 0;
    int unique_count = 0;
    for (int i = 0; i < n; i++) {
      cin >> cont[i];
    }

    for (int i = n - 1; i >= 0; i--) {
      if (!used[cont[i]]) {
        used[cont[i]] = 1;
        unique_count++;
      }
      cnt[i] = unique_count;
    }

    fill_n(used, n, 0); // Reset the used array to 0 for the next loop

    for (int i = 0; i < n - 1; i++) {
      if (!used[cont[i]]) {
        used[cont[i]] = 1;
        ans += cnt[i + 1];
      }
    }
    cout << ans << endl;

    // Don't forget to deallocate the dynamically allocated memory
    delete[] cont;
    delete[] used;
    delete[] cnt;
  }
  return 0;
}
```

In this optimized code, the program uses dynamic memory allocation to allocate only the required amount of memory for arrays "cont", "used" and "cnt". It also replaced the use of std::set with a boolean array "used" to keep track of the elements already encountered and a counter to count the unique elements. This optimizes both the running time and memory usage of the program.