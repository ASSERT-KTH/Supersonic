Here are the steps to optimize the program:

1. We can avoid using `#include<bits/stdc++.h>` because it includes almost all the standard libraries which increases the compilation time. Instead, we only include the libraries that we need such as `iostream`, `cstring`, and `set`.

2. We could reduce the memory usage by using dynamic memory allocation for arrays `cont`, `used`, and `cnt`. This would allow us to allocate only the memory that we need based on the value of `n` which we get as an input.

3. Instead of using `std::cin` and `std::cout`, we can use scanf and printf which are faster in terms of I/O operations. 

Here is the optimized program:

```cpp
#include <iostream>
#include <cstring>
#include <set>

using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
    while (scanf("%d", &n) != EOF) {
        int* cont = new int[n];
        int* used = new int[n]();
        int* cnt = new int[n];

        for (int i = 0; i < n; i++) {
            scanf("%d", &cont[i]);
        }

        set<int> st;
        for (int i = n - 1; i >= 0; i--) {
            st.insert(cont[i]);
            cnt[i] = st.size();
        }

        long long ans = 0;
        for (int i = 0; i < n - 1; i++) {
            if (!used[cont[i]]) {
                used[cont[i]] = 1;
                ans += cnt[i + 1];
            }
        }

        printf("%lld\n", ans);
        delete[] cont;
        delete[] used;
        delete[] cnt;
    }
    return 0;
}
```

Please note that if the number of elements `n` is always less than or equal to `100005`, then the initial version of the program is more preferable as dynamic memory allocation and deallocation come with their own overheads.