Here are the optimization steps:

1. Avoid using `#include <bits/stdc++.h>`: This header file includes a lot of unnecessary stuff which increases compilation time. Instead, include only the necessary libraries.

2. Avoid using `using namespace std;`: This line can lead to name conflict if the program is big and complex.

3. Avoid using global variables: Unless absolutely necessary, avoid using global variables. They can lead to unexpected behavior due to side-effects.

4. Use `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(NULL);`: This can significantly increase the speed of cin and cout.

5. Use `std::unordered_set` instead of `std::set`: `std::unordered_set` has a constant time complexity for insert and find operations while `std::set` has a logarithmic time complexity.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_set>
#include <cstring>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  
  int n;
  while (std::cin >> n) {
    int cont[100005];
    int used[100005] = {0};
    int cnt[100005];
    long long ans = 0;
    for (int i = 0; i < n; i++) {
      std::cin >> cont[i];
    }
    std::unordered_set<int> st;
    for (int i = n - 1; i >= 0; i--) {
      st.insert(cont[i]);
      cnt[i] = st.size();
    }
    for (int i = 0; i < n - 1; i++) {
      if (!used[cont[i]]) {
        used[cont[i]] = 1;
        ans += cnt[i + 1];
      }
    }
    std::cout << ans << "\n";
  }
  return 0;
}
```

Please note that changing `std::set` to `std::unordered_set` may affect the output if the order of the elements matters. In this case, it seems that the order does not matter, hence the change. If the order matters, keep using `std::set`.