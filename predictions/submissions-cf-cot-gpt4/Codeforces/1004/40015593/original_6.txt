The optimization steps are as follows:

1. Reduce the scope of variables: Variables `n`, `m`, `cont`, `used`, and `cnt` are declared globally, which is not a good practice and it also increases the extent of the memory used. We should declare them locally where they are used.

2. Avoid `#include <bits/stdc++.h>`: Including this header file includes more than what is needed, which increases the compilation time.

3. Avoid using `memset`: It's better to use vector initialization instead of `memset` because `memset` works byte by byte which could lead to bugs when working with types larger than `char`.

4. Use `std::ios_base::sync_with_stdio(false)` which may speed up `cin` and `cout` stream.

5. The `set<int> st` doesn't need to be cleared in every loop since we are not using it outside the loop. So, we can just declare it inside the loop.

6. Avoid using `std::endl`, use `"\n"` instead. `std::endl` forces a flushing stream which can slow down the program, while `"\n"` does not.

Here's the optimized program:

```C++
#include <iostream>
#include <vector>
#include <set>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  int n;
  while (std::cin >> n) {
    std::vector<int> cont(n), used(n), cnt(n);
    long long ans = 0;
    for (int i = 0; i < n; i++) {
      std::cin >> cont[i];
    }
    for (int i = n - 1; i >= 0; i--) {
      std::set<int> st;
      st.insert(cont[i]);
      cnt[i] = st.size();
    }
    for (int i = 0; i < n - 1; i++) {
      if (!used[cont[i]]) {
        used[cont[i]] = 1;
        ans += cnt[i + 1];
      }
    }
    std::cout << ans << "\n";
  }
  return 0;
}
```