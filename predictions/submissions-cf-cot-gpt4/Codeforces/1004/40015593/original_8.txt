The optimization steps would be:

1. **Stop using `<bits/stdc++.h>`**: This header file is quite large and includes a lot of unnecessary things which can increase your compile time.

2. **Use `std::ios_base::sync_with_stdio(false)`**: It is used to unsync the I/O of C and C++. This can cause a significant increase in speed when handling large amounts of input.

3. **Optimize the usage of `std::set`**: To reduce the number of insertions, we can check if the element already exists in the set before inserting it.

4. **Avoid using `sizeof()` in `memset()`**: It computes the size at compile time, which can lead to unexpected results if the size of the array changes. Instead, use a constant value that matches the size of your array.

5. **Use `std::unordered_set` instead of `std::set`**: `std::unordered_set` has an average time complexity of O(1) for search, insert, and remove operations while `std::set` has a time complexity of O(log n). If the order of elements doesn't matter, `std::unordered_set` is a better choice.

6. **Avoid using large global arrays**: If the size of the array is only known at runtime, it's better to use `std::vector` or allocate memory dynamically. For this problem, we know that the array size is fixed and will not exceed 100005, so we can safely use an array. But avoid using a global array if the size is not fixed.

The optimized code is as follows:

```cpp
#include <iostream>
#include <unordered_set>
#include <vector>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::vector<int> cont(100005);
  std::vector<int> used(100005);
  std::vector<int> cnt(100005);
  int n;
  while (std::cin >> n) {
    std::fill(used.begin(), used.end(), 0);
    long long ans = 0;
    for (int i = 0; i < n; i++) {
      std::cin >> cont[i];
    }
    std::unordered_set<int> st;
    for (int i = n - 1; i >= 0; i--) {
      if(st.find(cont[i]) == st.end()){
        st.insert(cont[i]);
        cnt[i] = st.size();
      }
    }
    for (int i = 0; i < n - 1; i++) {
      if (!used[cont[i]]) {
        used[cont[i]] = 1;
        ans += cnt[i + 1];
      }
    }
    std::cout << ans << "\n";
  }
}
```