This program is already quite optimized, but there are still a few small changes we can make to improve the efficiency.

1. The `memset` function is used to set the memory of the `used` array to 0. However, this function is called for every iteration of the `while` loop. We can move this function call into the loop where the `used` array is actually used, right before the second `for` loop, to ensure it's only called when necessary. 

2. In the first `for` loop, it reads n integers into the `cont` array. We can optimize this by using `std::ios::sync_with_stdio(false)` and `std::cin.tie(NULL)` to fasten the I/O operations.

3. The `set<int> st` is used to keep track of unique elements in the `cont` array. However, a set in C++ is typically implemented as a red-black tree, and insertions take O(log n) time. We can replace `set` with `unordered_set` to reduce the time complexity to O(1) for insertions and checks.

4. The second `for` loop goes through the `cont` array and checks whether each element has been used. If not, it increases the `ans` variable by the number of unique elements remaining. Instead of checking whether the element has been used with an `if` statement, we could directly increase the `ans` variable and then mark the element as used.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, m;
int cont[100005];
int used[100005];
int cnt[100005];

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);

  while (cin >> n) {
    for (int i = 0; i < n; i++) {
      cin >> cont[i];
    }

    unordered_set<int> st;
    for (int i = n - 1; i >= 0; i--) {
      st.insert(cont[i]);
      cnt[i] = st.size();
    }

    memset(used, 0, sizeof(used));
    long long ans = 0;
    for (int i = 0; i < n - 1; i++) {
      ans += cnt[i + 1] * (!used[cont[i]]);
      used[cont[i]] = 1;
    }

    cout << ans << "\n";
  }
}
```
This optimized version reduces the time complexity of inserting elements into the set and checking whether an element has been used. Furthermore, it minimizes the number of `memset` calls.