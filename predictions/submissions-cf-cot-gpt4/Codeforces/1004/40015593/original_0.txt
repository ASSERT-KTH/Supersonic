Optimization can be done in 2 steps:

1. Removal of #include <bits/stdc++.h>: This header file includes many unnecessary header files, which can slow down the compilation process. Instead of bits/stdc++.h, let's include only necessary header files such as iostream, set and memset (which is in the cstring header).

2. Use of std::ios::sync_with_stdio(0) and std::cin.tie(0): This is used to speed up cin and cout. However, in this program, the input and output are not mixed, so we don't need to use these.

Here is the optimized program:

```cpp
#include <iostream>
#include <set>
#include <cstring>
using namespace std;
int n, m;
int cont[100005];
int used[100005];
int cnt[100005];
int main() {
  while (cin >> n) {
    memset(used, 0, sizeof(used));
    long long ans = 0;
    for (int i = 0; i < n; i++) {
      cin >> cont[i];
    }
    set<int> st;
    for (int i = n - 1; i >= 0; i--) {
      st.insert(cont[i]);
      cnt[i] = st.size();
    }
    for (int i = 0; i < n - 1; i++) {
      if (!used[cont[i]]) {
        used[cont[i]] = 1;
        ans += cnt[i + 1];
      }
    }
    cout << ans << endl;
  }
}
```
Note that the actual performance improvement will depend on the specific inputs given to the program. The main advantage of these optimizations is faster compilation, and the runtime may also be slightly improved due to the removal of the sync_with_stdio(0) and cin.tie(0) calls.