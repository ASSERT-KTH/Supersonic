The given code has several parts that can be optimized:

1. **Using memset unnecessarily**: The `memset` function is being used to initialize the `arr` and `ans` arrays. However, this is unnecessary because these arrays are being filled with values later in the code. Removing these lines will save some time.

2. **Unnecessary calculation in loops**: There are several places in the code where calculations are being performed inside loops where they could be calculated once outside the loop and the result used inside the loop.

3. **Excessive use of unordered_map**: The unordered_map `m1` is iterated over multiple times, which could be reduced to once to save time.

4. **Unnecessary value initialization**: The `ans` array is being initialized with 0 and later some values are being set to -1 and then reset to 0. This is unnecessary and can be avoided.

5. **Use of goto statements**: Goto statements are considered bad practice because they can make the code harder to understand and debug. They can be replaced with a simple break statement.

Here is the optimized code with these changes:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 2e5 + 50;
int arr[maxn];
int ans[maxn];

int main() {
  int t;
  scanf("%d", &t);
  while (t--) {
    unordered_map<int, vector<int>> m1;
    int n, k;
    scanf("%d%d", &n, &k);
    for (int i = 1; i <= n; i++) {
      scanf("%d", arr + i);
      m1[arr[i]].push_back(i);
    }
    int cnt = 0;
    int color = 0;
    for (auto& x : m1) {
      int len = x.second.size();
      if (len >= k) {
        for (int i = 0; i < len; i++) {
          if (i < k) {
            ans[x.second[i]] = ++color % k;
          } else {
            ans[x.second[i]] = 0;
          }
        }
      } else {
        cnt += len;
      }
    }
    cnt -= cnt % k;
    if (cnt > 0) {
      for (auto& x : m1) {
        for (auto i : x.second) {
          if (ans[i] == 0) {
            ans[i] = ++color % k;
            if (--cnt <= 0) break;
          }
        }
        if (cnt <= 0) break;
      }
    }
    for (int i = 1; i <= n; i++) {
      printf("%d ", ans[i]);
    }
    printf("\n");
  }
  return 0;
}
```

This optimized code will run faster and use less memory than the original code.