Optimization Steps:

1) Instead of initializing arrays with memset in each iteration, it would be better to initialize it with zero during declaration, and then just reset the used part of the array in each iteration.

2) Instead of using unordered_map which has a worst-case complexity of O(N) in some operations, we can use map because it has a guaranteed log(N) complexity.

3) We can use a reference for the 'x' in for-each loops to avoid making copies of the objects.

4) Instead of printing values one by one, we can store them in a string and print it once, it will reduce I/O operations.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 2e5 + 50;
int arr[maxn] = {0};
int ans[maxn] = {0};

int main() {
  int t;
  scanf("%d", &t);
  while (t--) {
    map<int, vector<int>> m1;
    int n, k;
    scanf("%d%d", &n, &k);
    for (int i = 1; i <= n; i++) {
      scanf("%d", arr + i);
      m1[arr[i]].push_back(i);
    }
    int cnt = 0;
    int color = 0;
    for (auto &x : m1) {
      if (x.second.size() >= k) {
        int len = x.second.size();
        for (int i = 0; i < len; i++) {
          if (i >= k) {
            ans[x.second[i]] = -1;
          } else {
            ans[x.second[i]] = ++color;
            color %= k;
          }
        }
      } else {
        int len = x.second.size();
        cnt += len;
      }
    }
    cnt -= cnt % k;
    for (auto &s : m1) {
      for (auto x : s.second) {
        if (cnt <= 0)
          goto _out;
        if (ans[x] == 0) {
          ans[x] = ++color;
          color %= k;
          if (--cnt <= 0)
            goto _out;
        }
      }
    }
  _out:
    for (int i = 1; i <= n; i++) {
      if (ans[i] == -1) {
        ans[i] = 0;
      }
      arr[i] = 0; //reset used part of arr
      ans[i] = 0; //reset used part of ans
    }
    string res = "";
    for (int i = 1; i <= n; i++) {
      res += to_string(ans[i]) + " ";
    }
    printf("%s\n", res.c_str());
  }
  return 0;
}
```