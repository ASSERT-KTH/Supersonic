#include <iostream>
#include <vector>
using namespace std;

int parent[100005], rank[100005];
int n, hb, currURoad;

int find_set(int ii) {
    if (ii != parent[ii])
        parent[ii] = find_set(parent[ii]);
    return parent[ii];
}

void union_sets(int a, int b) {
    int aa = find_set(a);
    int bb = find_set(b);
    if (aa != bb) {
        if(rank[aa] < rank[bb])
            swap(aa, bb);
        parent[bb] = aa;
        if(rank[aa] == rank[bb])
            rank[aa]++;
    } else
        cout << a << ' ' << b << '\n';
}

int main() {
    cin >> n;
    for (int i = 0; i < n; i++) {
        parent[i] = i;
        rank[i] = 0;
    }
    for (int i = 1; i < n; i++) {
        int rd1, rd2;
        cin >> rd1 >> rd2;
        union_sets(rd1 - 1, rd2 - 1);
    }
    hb = -1;
    for (int i = 0; i < n; i++)
        if (parent[i] == i)
            if (hb == -1)
                hb = i;
            else {
                cout << hb + 1 << ' ' << i + 1 << '\n';
                currURoad++;
            }
}