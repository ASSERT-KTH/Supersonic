Here are some optimization steps:

1. `#include <bits/stdc++.h>`: This header file includes most of the standard library files in C++ which can increase the compile time. It's better to use specific header files. In this program, we need `iostream`, `vector` and `utility`.

2. `cin.tie(0)`, `cout.tie(0)`: These two commands are used to untie cin and cout from each other which means they are not flushed automatically before each I/O operation. But in this program, there isn't any scenario where cin and cout are interchanged frequently, so these lines are not necessary.

3. `parent.resize(n)`: Resizing a vector is a costly operation. We can avoid resizing by declaring its size at the time of declaration itself.

4. `union_sets(rd1 - 1, rd2 - 1)`: Instead of subtracting 1 each time we call the function, we can subtract it while taking the input which will reduce the number of operations.

5. `uselessRoads.push_back({a, b})`: It's better to use `emplace_back` instead of `push_back` as it constructs the pair in place thereby avoiding the need for a temporary pair object.

6. `cout << uselessRoads[currURoad].first + 1 << ' '`: Instead of adding 1 each time we print the value, we can store it as `uselessRoads[currURoad].first + 1` in the vector itself which will reduce the number of operations.

Here is the optimized program:

```c++
#include <iostream>
#include <vector>
#include <utility>
using namespace std;

vector<int> parent;
vector<pair<int, int>> uselessRoads;
int n, hb, currURoad;

int find_set(int ii) {
  if (ii == parent[ii])
    return ii;
  return parent[ii] = find_set(parent[ii]);
}

void union_sets(int a, int b) {
  int aa = find_set(a);
  int bb = find_set(b);
  if (aa != bb)
    parent[bb] = aa;
  else
    uselessRoads.emplace_back(a+1, b+1);
}

int main() {
  ios_base::sync_with_stdio(0);
#ifdef fileIO
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  cin >> n;
  parent = vector<int>(n);
  for (int i = 0; i < n; i++)
    parent[i] = i;
  for (int i = 1; i < n; i++) {
    int rd1, rd2;
    cin >> rd1 >> rd2;
    union_sets(rd1 - 1, rd2 - 1);
  }
  cout << uselessRoads.size() << '\n';
  hb = -1;
  for (int i = 0; i < n; i++)
    if (parent[i] == i)
      if (hb == -1)
        hb = i;
      else {
        cout << uselessRoads[currURoad].first << ' '
             << uselessRoads[currURoad].second << ' ' << hb + 1 << ' '
             << i + 1 << '\n';
        currURoad++;
      }
}
```