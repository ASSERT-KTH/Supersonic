The above code's main time-consuming operations are the union operations in the union_sets function, and the find operation in the find_set function. These operations have a time complexity of O(n) in the worst case scenario.

The union by rank and path compression techniques can be used to optimize these operations. With these techniques, the time complexity of these operations can be reduced to almost O(1).

Union by rank involves attaching the smaller depth tree under the root of the larger depth tree. Path compression is a technique where each node found in the path of a traversal operation is made the direct child of the root. These techniques result in an optimal tree, hence reducing the time complexity of the operations.

Also, by declaring the variables hb and currURoad as global variables, memory is unnecessarily used throughout the entire program, even when they are not needed. It would be better to declare them in the main function where they are used.

Here's the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
vector<int> parent, rank;
vector<pair<int, int>> uselessRoads;
int n;

int find_set(int ii) {
  if (ii != parent[ii])
    parent[ii] = find_set(parent[ii]);
  return parent[ii];
}

void union_sets(int a, int b) {
  int aa = find_set(a);
  int bb = find_set(b);
  if (aa != bb) {
    if (rank[aa] < rank[bb])
      swap(aa, bb);
    parent[bb] = aa;
    if (rank[aa] == rank[bb])
      rank[aa]++;
  } else {
    uselessRoads.push_back({a, b});
  }
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
#ifdef fileIO
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  cin >> n;
  parent.resize(n);
  rank.resize(n, 0);
  for (int i = 0; i < n; i++)
    parent[i] = i;
  for (int i = 1; i < n; i++) {
    int rd1, rd2;
    cin >> rd1 >> rd2;
    union_sets(rd1 - 1, rd2 - 1);
  }
  cout << uselessRoads.size() << '\n';
  int hb = -1, currURoad = 0;
  for (int i = 0; i < n; i++)
    if (parent[i] == i)
      if (hb == -1)
        hb = i;
      else {
        cout << uselessRoads[currURoad].first + 1 << ' '
             << uselessRoads[currURoad].second + 1 << ' ' << hb + 1 << ' '
             << i + 1 << '\n';
        currURoad++;
      }
}
```

In the above code, the rank vector is used to keep track of the depth of each tree. In the union_sets function, the smaller depth tree gets attached under the root of the larger depth tree. This is done by swapping aa and bb if rank[aa] is smaller than rank[bb], and then setting parent[bb] to aa. In case of equal ranks, the rank of aa is increased by 1. This ensures that the depth of the trees remains minimal. 

In the main function, the variables hb and currURoad are declared locally as they are only used in this function. This optimizes memory usage.