The given code seems to be a part of "Union-Find" algorithm on a graph. It's already well optimized. However, there are still a few things we can do to make it a little bit faster and use memory more efficiently.

1. Instead of using vector<pair<int, int>> to store the useless roads, we can use two separate integer arrays. Since we know the maximum size of the useless roads can be n-1, we can initialize these arrays with the fixed size of n-1. This would reduce the overhead of using vector and pair classes.

2. We can avoid multiple access to the same element of the parent array in the find_set and union_sets functions by storing the result of parent[ii] and parent[bb] in a variable.

3. Instead of using cin and cout for input/output, we can use scanf and printf which are faster.

Here is the optimized version of the given code:

```cpp
#include <bits/stdc++.h>
using namespace std;
int parent[100001], uselessRoads1[100001], uselessRoads2[100001];
int n, hb, currURoad;
int find_set(int ii) {
  int parent_ii = parent[ii];
  if (ii == parent_ii)
    return ii;
  return parent[ii] = find_set(parent_ii);
}
void union_sets(int a, int b) {
  int aa = find_set(a);
  int bb = find_set(b);
  if (aa != bb)
    parent[bb] = aa;
  else {
    uselessRoads1[currURoad] = a;
    uselessRoads2[currURoad] = b;
    currURoad++;
  }
}
int main() {
  ios_base::sync_with_stdio(0);
#ifdef fileIO
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  scanf("%d", &n);
  for (int i = 0; i < n; i++)
    parent[i] = i;
  for (int i = 1; i < n; i++) {
    int rd1, rd2;
    scanf("%d%d", &rd1, &rd2);
    union_sets(rd1 - 1, rd2 - 1);
  }
  printf("%d\n", currURoad);
  hb = -1;
  for (int i = 0; i < n; i++)
    if (parent[i] == i)
      if (hb == -1)
        hb = i;
      else {
        printf("%d %d %d %d\n", uselessRoads1[currURoad] + 1, uselessRoads2[currURoad] + 1, hb + 1, i + 1);
        currURoad++;
      }
}
```

Remember that you must set the size of the parent, uselessRoads1, and uselessRoads2 arrays according to the maximum possible value of n.