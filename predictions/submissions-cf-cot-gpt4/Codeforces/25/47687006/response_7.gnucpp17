#include <bits/stdc++.h>
using namespace std;
vector<int> parent, rank;
pair<int, int> firstUselessRoad;
bool uselessRoadFound = false;
int n;

int find_set(int ii) {
  if (ii != parent[ii])
    parent[ii] = find_set(parent[ii]);
  return parent[ii];
}

void union_sets(int a, int b) {
  int aa = find_set(a);
  int bb = find_set(b);
  if (aa != bb) {
    if (rank[aa] < rank[bb])
      swap(aa, bb);
    parent[bb] = aa;
    if (rank[aa] == rank[bb])
      rank[aa]++;
  } else if (!uselessRoadFound) {
    firstUselessRoad = {a, b};
    uselessRoadFound = true;
  }
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
#ifdef fileIO
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  cin >> n;
  parent.resize(n);
  rank.resize(n, 0);
  for (int i = 0; i < n; i++)
    parent[i] = i;
  for (int i = 1; i < n; i++) {
    int rd1, rd2;
    cin >> rd1 >> rd2;
    union_sets(rd1 - 1, rd2 - 1);
  }
  int hb = -1;
  for (int i = 0; i < n; i++)
    if (parent[i] == i)
      if (hb == -1)
        hb = i;
      else {
        cout << firstUselessRoad.first + 1 << ' '
             << firstUselessRoad.second + 1 << ' ' << hb + 1 << ' '
             << i + 1 << '\n';
        break;
      }
}