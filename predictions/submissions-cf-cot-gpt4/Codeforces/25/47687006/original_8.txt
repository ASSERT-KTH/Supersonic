This program is a classic example of the Disjoint Set Union(DSU) problem. It uses DSU to find and union sets and keeps track of the "useless roads" in a vector of pairs. The optimization can be done in several areas.

1. Use `ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)` only when necessary. These lines disable synchronization between C and C++ standard streams which can potentially speed up I/O operations but it's not always required and can lead to unexpected behavior. In this case, we're not dealing with large I/O so these can be removed.

2. `#ifdef fileIO` is not needed unless you want to switch between file input/output and standard input/output. 

3. We can avoid the overhead of dynamic memory allocation caused by vector resize if the size is known beforehand.

4. The `find_set` function can be optimized by using path compression technique. 

5. In the `union_sets` function, we can implement Union by Rank to optimize it. 

6. Instead of using a vector to store useless roads, we can directly print them which will save memory.

Here's the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int parent[100005], rank[100005];
int n, hb, currURoad;

int find_set(int ii) {
    if (ii != parent[ii])
        parent[ii] = find_set(parent[ii]);
    return parent[ii];
}

void union_sets(int a, int b) {
    int aa = find_set(a);
    int bb = find_set(b);
    if (aa != bb) {
        if(rank[aa] < rank[bb])
            swap(aa, bb);
        parent[bb] = aa;
        if(rank[aa] == rank[bb])
            rank[aa]++;
    } else
        cout << a << ' ' << b << '\n';
}

int main() {
    cin >> n;
    for (int i = 0; i < n; i++) {
        parent[i] = i;
        rank[i] = 0;
    }
    for (int i = 1; i < n; i++) {
        int rd1, rd2;
        cin >> rd1 >> rd2;
        union_sets(rd1 - 1, rd2 - 1);
    }
    hb = -1;
    for (int i = 0; i < n; i++)
        if (parent[i] == i)
            if (hb == -1)
                hb = i;
            else {
                cout << hb + 1 << ' ' << i + 1 << '\n';
                currURoad++;
            }
}
```
The changes made in this code are:
1. Removed unnecessary I/O optimization and file I/O related code.
2. Changed `parent` from dynamic array(vector) to static array and added `rank` array for Union by Rank optimization.
3. Optimized `find_set` function by using path compression.
4. Optimized `union_sets` function by using Union by Rank.
5. Removed `uselessRoads` vector and printed useless roads directly in `union_sets`.