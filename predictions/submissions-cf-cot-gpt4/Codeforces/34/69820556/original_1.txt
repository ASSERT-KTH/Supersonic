Optimization Steps:

1. The program includes both `#include <bits/stdc++.h>` and individual library files. `<bits/stdc++.h>` is a header file in GCC, which includes most of the standard library files in C++. However, it's not a good practice to use it because it includes more files than necessary. Hence, we will remove the inclusion of `<bits/stdc++.h>` and keep the necessary library files only.

2. The program uses Variable Length Array (VLA), `int arr[n];`. VLA is not part of standard C++, although some compilers like GCC support it as an extension. It's better to use `std::vector<int>` than VLA because it dynamically manages memory.

3. The program first sorts the array and then checks for the negative numbers. We can avoid sorting the whole array, which takes O(n log n) time complexity, by using priority queue which will reduce the time complexity to O(n log m).

4. The program uses `abs(sum)` to get the absolute value of sum. It's unnecessary because sum is always less than or equal to zero. We can just multiply sum by -1 to get the absolute value.

Optimized Program:

```cpp
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int main() {
  int n, m;
  cin >> n >> m;
  vector<int> arr(n);
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }
  priority_queue<int, vector<int>, greater<int>> pq(arr.begin(), arr.end());
  int sum = 0;
  for (int i = 0; i < m; i++) {
    if (pq.top() < 0) {
      sum += pq.top();
      pq.pop();
    } else {
      break;
    }
  }
  cout << -sum << endl;
  return 0;
}
```
