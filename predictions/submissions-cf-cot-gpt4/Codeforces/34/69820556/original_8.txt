Although, the given program is already quite optimized, here are few steps we can take to improve it further:

1. We can remove unnecessary headers. The header file `bits/stdc++.h` is a gcc specific library that includes almost every standard library. As such, it's not portable and should be avoided. Also, headers like `algorithm`, `array` and `string` are not used in the code, so we can remove them.

2. The use of Variable Length Arrays (VLAs) is not part of the C++ standard. We can use a `std::vector<int>` instead of `int arr[n]`. A vector is a dynamic array that can grow and shrink at execution time.

3. The program is using the `std::sort` function to sort the array in ascending order, and then loops through the sorted array to calculate the sum of the negative elements. We can eliminate the sort step by simply iterating once through the array and summing the negative numbers as we go.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;
int main() {
  int n, m;
  cin >> n >> m;
  vector<int> arr(n);
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }
  int sum = 0;
  for (int i = 0; i < n; i++) {
    if (arr[i] < 0)
      sum += arr[i];
  }
  cout << abs(sum) << endl;
  return 0;
}
```
This program does exactly the same thing as the original program, but it avoids sorting the array and uses a vector instead of a VLA.