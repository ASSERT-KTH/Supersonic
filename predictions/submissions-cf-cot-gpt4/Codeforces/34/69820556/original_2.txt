Step 1: Remove redundant includes
The first optimization would be to remove unnecessary includes. `#include <bits/stdc++.h>` is a header file that includes almost all standard library. Since you already included the necessary libraries, you don't need to include `<bits/stdc++.h>`. This will reduce the compilation time.

Step 2: Allocate array dynamically
In C/C++, declaring an array like `int arr[n];` where `n` is not a constant is not recommended. Instead, you can allocate the array dynamically which is more efficient and safe.

Step 3: Use STL accumulate function
Instead of using a for loop to calculate the sum, you can use the `accumulate` function from the STL which is more efficient and makes your code cleaner.

Step 4: Avoid unnecessary condition checking
In the original code, a condition check `if (arr[i] < 0)` is done for each element until `m` elements. Since the array is sorted, once you find a positive number, all subsequent numbers will be positive. So, you can break the loop when you find the first positive number, which will save unnecessary iterations.

Here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;

int main() {
  int n, m;
  cin >> n >> m;
  vector<int> arr(n);
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }
  sort(arr.begin(), arr.end());
  int sum = 0;
  auto end = (m <= n) ? arr.begin() + m : arr.end(); // Avoid going out of bounds
  auto it = find_if(arr.begin(), end, [](int i) { return i >= 0; });
  sum = accumulate(arr.begin(), it, 0);
  cout << abs(sum) << endl;
  return 0;
}
```

Remember that these optimizations are minor and depending on the compiler and the specific hardware, they may not lead to significant performance improvements. However, they make the code cleaner and more maintainable.