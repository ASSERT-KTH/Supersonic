Here are the optimization steps:

1. Avoid using `#define` for constants and use `const` instead, because `#define` does not have any scope and type. On the other hand, `const` has a scope and type, and it is safer to use.
2. Avoid using `#include <bits/stdc++.h>` because it includes more files than you need, which increases compilation time. Include only the necessary files.
3. Avoid using `ios_base::sync_with_stdio(false)`, `cin.tie(NULL)`, and `cout.tie(NULL)` if you are not mixing `cin/cout` with `scanf/printf`. These statements are used to unsync the C++ standard streams with their C counterparts, but they are not needed if you're only using cin and cout for input and output.
4. Use `std::array` instead of C-style arrays (`ll sch[n + 1] = {0};`) because std::array provides bounds checking and other useful methods.
5. Avoid using `memset` for initializing arrays. It's error-prone and less readable. Use `std::fill` or `std::fill_n` instead.
6. You can reduce the number of iterations in the loop by using a more efficient data structure such as `std::priority_queue` or `std::set` instead of a `vector`.
7. Avoid using `std::endl` which flushes the buffer unnecessarily and can harm performance. Use "\n" instead.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <array>

using namespace std;
using ll = long long;
using pll = pair<ll, ll>;
constexpr ll INF = LLONG_MAX;
constexpr ll MOD = 1e9 + 7;

int main() {
  ll n, m;
  cin >> n >> m;
  vector<array<ll, 4>> a(m + 1);
  array<ll, 100005> sch{}; // assuming n <= 10^5

  for (ll i = 1; i <= m; i++) {
    cin >> a[i][1] >> a[i][0] >> a[i][2];
    sch[a[i][0]] = m + 1;
    a[i][3] = i;
  }
  
  sort(a.begin() + 1, a.end());
  
  for (ll i = 1; i <= m; i++) {
    ll cnt = a[i][2];
    for (ll j = a[i][1]; j < a[i][0]; j++) {
      if (!sch[j]) {
        cnt--;
        sch[j] = a[i][3];
        if (!cnt)
          break;
      }
    }
    if (cnt) {
      cout << -1;
      return 0;
    }
  }
  
  for (ll i = 1; i <= n; i++)
    cout << sch[i] << " ";
  
  return 0;
}
```
Note: This code assumes that n is less than or equal to 10^5. If n can be greater, adjust the size of the `sch` array accordingly.