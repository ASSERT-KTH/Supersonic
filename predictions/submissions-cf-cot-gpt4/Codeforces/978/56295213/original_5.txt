Optimization steps:

1. Instead of using `#include <bits/stdc++.h>`, include only the necessary libraries. Using `bits/stdc++.h` includes all the standard library files, which increases compilation time.

2. The usage of `#define IOS` and the subsequent block of code is unnecessary and can be removed. This is not doing any performance optimization, instead it's just changing the synchronization of the standard streams. 

3. Replace `memset` function with `std::fill` function. `memset` is not type safe and can lead to bugs if used improperly. In contrast, `std::fill` is type safe.

4. Avoid using `using namespace std;`. This directive pulls in everything from the `std` namespace into the global namespace and can lead to name clashes.

5. Replace C-style arrays with std::vector. The advantage of using std::vector is that it is a dynamic array and it can resize itself automatically when an element is inserted or deleted.

6. Avoid using macros for constants like `INF`, `PI`, `MOD`. Instead, use `const` or `constexpr`.

7. Use pre-increment (`++i`) instead of post-increment (`i++`) for non-primitive types like iterators or complex class types. This is more efficient as post-increment involves a copy of the object.

8. Use `"\n"` instead of `endl` to print a newline. `endl` causes a flush of the output buffer, which can be expensive in terms of time.

Here is the optimized code:

```cpp
#include <vector>
#include <iostream>
#include <algorithm>
#include <climits>

using ll = long long;
constexpr ll MOD = 1e9 + 7;
constexpr ll INF = LLONG_MAX;

int main() {
    ll n, m;
    std::cin >> n >> m;
    std::vector<std::vector<ll>> a(m + 1, std::vector<ll>(4, 0));
    std::vector<ll> sch(n + 1, 0);
    for (ll i = 1; i <= m; i++) {
        std::cin >> a[i][1] >> a[i][0] >> a[i][2];
        sch[a[i][0]] = m + 1;
        a[i][3] = i;
    }
    std::sort(a.begin() + 1, a.end());
    for (ll i = 1; i <= m; ++i) {
        ll cnt = a[i][2];
        for (ll j = a[i][1]; j < a[i][0]; ++j) {
            if (!sch[j]) {
                --cnt;
                sch[j] = a[i][3];
                if (!cnt)
                    break;
            }
        }
        if (cnt) {
            std::cout << -1;
            return 0;
        }
    }
    for (ll i = 1; i <= n; ++i)
        std::cout << sch[i] << " ";
    std::cout << "\n";
}
```