Here are a few optimizations you can make:

1. Use std::ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); only when you are doing a lot of I/O operations. If you are using it in a smaller program, it might actually make your program slower. Here you only have a few cin and cout, so you can remove these lines.

2. std::memset is used to fill a block of memory with a particular value. It can only be used with plain old data types(C like data types). It can't be used with data types that have a non-trivial constructor/destructor. So it's better not to use it unless necessary. Here you're not using mem(a, b), so you can remove this line.

3. The #define macro is frequently used in C/C++ programming. But macros are not type-safe and do not respect scopes which can lead to errors if not used carefully. In C++, it's better to use const or constexpr for constants, and inline or templates for functions. So replace #define with const/constexpr.

4. Instead of declaring the vector with a predefined size and values and then reading values into it, you can reduce memory usage by only declaring the vector and then using push_back() method to insert values into it on the fly. This way, only the memory which is actually required will be allocated.

5. For the array sch[n + 1] = {0}, in C++, the size of the array should be a constant expression, and variable-length arrays are not allowed in standard C++. So you should use a vector instead of the array.

Here's the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef pair<ll, ll> pll;

const ll INF = LLONG_MAX;
const ll MOD = 1e9 + 7;
const double PI = acos(-1);

int main() {
  ll n, m;
  cin >> n >> m;
  vector<pll> a;
  vector<ll> sch(n + 1, m + 1);
  for (ll i = 1; i <= m; i++) {
    ll x, y, z;
    cin >> x >> y >> z;
    a.push_back(make_pair(y, make_pair(x, make_pair(z, i))));
    sch[y] = m + 1;
  }
  sort(a.begin(), a.end());
  for (ll i = 0; i < m; i++) {
    ll cnt = a[i].second.second.first;
    for (ll j = a[i].second.first; j < a[i].first; j++) {
      if (sch[j] == m + 1) {
        cnt--;
        sch[j] = a[i].second.second.second;
        if (!cnt)
          break;
      }
    }
    if (cnt) {
      cout << -1;
      return 0;
    }
  }
  for (ll i = 1; i <= n; i++)
    cout << sch[i] << " ";
}
```
Please note that the changes may affect the program's performance depending on the specific use case, hardware, and compiler.