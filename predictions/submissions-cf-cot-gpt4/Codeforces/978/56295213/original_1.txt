This program can be optimized in the following ways:

1. Reduce the use of macros: Macros are processed by the preprocessor and can lead to code that is hard to understand and debug. Constants and inline functions are preferred over macros in modern C++.

2. Avoid using `bits/stdc++.h`: This header file is quite large and including it can increase the compilation time. It's better to include only the necessary header files. 

3. Use `std::ios::sync_with_stdio(false)` and `std::cin.tie(NULL)` only when necessary. If you do not use C-style I/O functions `printf` and `scanf`, then it is not necessary to use these two lines.

4. Avoid using `memset` with non-character types: It might not work as expected due to object representation rules in C++. For zero-initialization, you can use value-initialization syntax in C++ (`= {}`).

5. Avoid using `using namespace std`: This can cause name collisions, which can be hard to debug. It's better to use the `std::` prefix when using standard library features.

6. Use `std::array` instead of C-style arrays: `std::array` is a container that encapsulates fixed size arrays, and does not decay to pointer when passed to a function.

7. Use pre-increment (`++i`) instead of post-increment (`i++`) in loops. Pre-increment avoids unnecessary temporary object creation and is generally more efficient.

8. Use `std::endl` only when you want to flush the buffer, otherwise use `"\n"` for a newline character. `std::endl` is slower because it forces a flush operation.

Optimized program:
```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <array>

constexpr long long INF = LLONG_MAX;
constexpr double PI = acos(-1);
constexpr long long MOD = 1e9 + 7;

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  long long n, m;
  std::cin >> n >> m;
  
  std::vector<std::vector<long long>> a(m + 1, std::vector<long long>(4, 0));
  std::array<long long, 1001> sch = {}; // assuming maximum value of n is 1000

  for (long long i = 1; i <= m; ++i) {
    std::cin >> a[i][1] >> a[i][0] >> a[i][2];
    sch[a[i][0]] = m + 1;
    a[i][3] = i;
  }

  std::sort(a.begin() + 1, a.end());

  for (long long i = 1; i <= m; ++i) {
    long long cnt = a[i][2];
    for (long long j = a[i][1]; j < a[i][0]; ++j) {
      if (!sch[j]) {
        --cnt;
        sch[j] = a[i][3];
        if (!cnt)
          break;
      }
    }
    if (cnt) {
      std::cout << -1;
      return 0;
    }
  }

  for (long long i = 1; i <= n; ++i)
    std::cout << sch[i] << " ";
  std::cout << "\n";

  return 0;
}
```
Please ensure the maximum possible value of `n` and adjust the size of `sch` accordingly.