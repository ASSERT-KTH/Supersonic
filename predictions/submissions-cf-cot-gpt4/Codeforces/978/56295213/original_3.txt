Optimization Step-by-step Explanation:

1. Don't use `#include <bits/stdc++.h>`: This header file includes too many header files, which increases the compilation time. Instead, include only those header files which are necessary for your program.

2. Avoid using `#define`: `#define` is processed by preprocessor which may lead to unexpected results. Use constant variables instead.

3. Avoid using `using namespace std`: It can cause name collision problem if the program gets large. It's better to use `std::`.

4. Optimize `memset()`: The `memset()` function is used here to initialize the array `sch[]`. However, `memset()` is a byte-level function. It's a better practice to initialize array using fill_n() function from the algorithm library.

5. Reuse the variable `i` in the second loop: The variable `i` has been declared and used before. We can reuse it in the second loop.

Optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

const long long INF = LLONG_MAX;
const double PI = acos(-1);
const long long MOD = 1e9 + 7;

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  long long n, m;
  std::cin >> n >> m;
  std::vector<std::vector<long long>> a(m + 1, std::vector<long long>(4, 0));
  std::vector<long long> sch(n + 1, 0);
  
  for (long long i = 1; i <= m; i++) {
    std::cin >> a[i][1] >> a[i][0] >> a[i][2];
    sch[a[i][0]] = m + 1;
    a[i][3] = i;
  }

  std::sort(a.begin() + 1, a.end());

  for (long long i = 1; i <= m; i++) {
    long long cnt = a[i][2];
    for (long long j = a[i][1]; j < a[i][0]; j++) {
      if (!sch[j]) {
        cnt--;
        sch[j] = a[i][3];
        if (!cnt)
          break;
      }
    }
    if (cnt) {
      std::cout << -1;
      return 0;
    }
  }

  for (long long i = 1; i <= n; i++)
    std::cout << sch[i] << " ";
}
```
Please note that the above optimizations are mainly for best coding practices and may not drastically improve the performance of the program. If the program is still slow, you may need to consider algorithmic optimizations.