Optimization Steps:

1. Avoid using `#include <bits/stdc++.h>` as it includes a lot of unnecessary libraries which increases compilation time. Instead, include only the necessary libraries like `<iostream>`, `<vector>`, `<algorithm>`, and `<cstring>`.

2. Avoid using `using namespace std;`. It can cause naming conflicts as it includes all the names in the `std` namespace.

3. Avoid using macros for common terms. They are not type-safe and can lead to harder-to-debug errors. For example, `#define ll long long int` and `#define pb push_back` are not advised.

4. Instead of using `memset` to initialize an array, use fill_n in C++. `memset` is not type safe and can lead to unexpected behavior.

5. You can reduce the size of the 2D vector `a` to `m` instead of `m+1` and iterate from `0` to `m` instead of `1` to `m`. This reduces the memory usage.

6. `ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);` are used to speed up the cin and cout operations. Unless you are doing a lot of input/output operations, these lines are not necessary.

Optimized Code:
```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
using std::cin;
using std::cout;
using std::vector;
using std::pair;
using std::fill_n;
using std::sort;

int main() {
  long long int n, m;
  cin >> n >> m;
  vector<vector<long long int>> a(m, vector<long long int>(4, 0));
  vector<long long int> sch(n+1, 0);
  for (int i = 0; i < m; i++) {
    cin >> a[i][1] >> a[i][0] >> a[i][2];
    sch[a[i][0]] = m + 1;
    a[i][3] = i;
  }
  sort(a.begin(), a.end());
  for (int i = 0; i < m; i++) {
    long long int cnt = a[i][2];
    for (long long int j = a[i][1]; j < a[i][0]; j++) {
      if (!sch[j]) {
        cnt--;
        sch[j] = a[i][3];
        if (!cnt)
          break;
      }
    }
    if (cnt) {
      cout << -1;
      return 0;
    }
  }
  for (long long int i = 1; i <= n; i++)
    cout << sch[i] << " ";
}
```