We can optimize the code in the following ways:

1. Removing unnecessary usage of `#include <bits/stdc++.h>`: This header file includes quite a large number of standard C++ libraries, which increases the compilation time. Instead, we can include only those libraries which are actually needed in the code.

2. Avoid the use of `#define`: The use of `#define` for constants is not recommended in C++. We should use `constexpr` instead.

3. Removing `#define IOS` and the corresponding macro expansion: While using cin and cout in a loop can cause a significant time delay, in this particular case it's not needed as we're not performing any heavy I/O bound operations.

4. Avoid using `memset`: In the given code, `memset` is used to initialize the array `sch`. However, `memset` can cause issues when used with non-POD (Plain Old Data) types. Instead, we can initialize the array directly in its declaration.

5. Reducing the size of array `a`: The size of array `a` is `m+1` but the index `0` is never used, hence we can reduce its size to `m`.

6. Use prefix increment (`++i`) instead of post-fix increment (`i++`): The prefix increment is more efficient than post-fix increment in C++ as post-fix increment involves a copy operation.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
using ll = long long;
constexpr ll INF = LLONG_MAX;
constexpr ll MOD = 1e9 + 7;

int main() {
  ll n, m;
  cin >> n >> m;
  vector<vector<ll>> a(m, vector<ll>(4, 0));
  vector<ll> sch(n+1, 0);
  for (ll i = 0; i < m; ++i) {
    cin >> a[i][1] >> a[i][0] >> a[i][2];
    sch[a[i][0]] = m+1;
    a[i][3] = i+1;
  }
  sort(a.begin(), a.end());
  for (ll i = 0; i < m; ++i) {
    ll cnt = a[i][2];
    for (ll j = a[i][1]; j < a[i][0]; ++j) {
      if (!sch[j]) {
        --cnt;
        sch[j] = a[i][3];
        if (!cnt)
          break;
      }
    }
    if (cnt) {
      cout << -1;
      return 0;
    }
  }
  for (ll i = 1; i <= n; ++i)
    cout << sch[i] << " ";
}
```