Step 1:
The "#include <bits/stdc++.h>" is generally not recommended because it includes all the standard library headers at once, which can significantly slow down the compilation time and increase the memory footprint. Instead, we should only include the headers which are actually used in the program.

Step 2:
The macro "IOS" is unnecessary and can be removed. The statements inside it can be placed directly in the main() function. Macro usage often makes code harder to debug and understand.

Step 3:
The "mem(a, b)" macro is not necessary and can be removed. The array sch[] is already initialized to zero during its declaration.

Step 4:
The vector<vector<ll>> a can be replaced by a vector of tuples or pairs for better readability and less memory usage. Instead of accessing the elements as a[i][j], we can give them meaningful names like a[i].start, a[i].end, etc.

Step 5:
Instead of using the sort function on the entire vector a, we can use it only on the range which we are actually using, i.e., from a.begin() + 1 to a.end().

Step 6:
As per the context of the code, it seems like the value of a[i][3] is always equal to i. So, we can remove the line "a[i][3] = i;" and replace all occurrences of "a[i][3]" with "i".

Step 7:
In the second for loop, instead of breaking the loop when cnt becomes zero, we can put the condition "!cnt" in the for loop itself to make it more readable.

Here is the optimized code after applying these steps:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll, ll> pll;
typedef vector<pll> vpll;

#define INF LLONG_MAX
#define MOD 1e9 + 7

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  ll n, m;
  cin >> n >> m;
  
  vector<tuple<ll, ll, ll>> a(m + 1);
  vll sch(n + 1, m + 1);
  
  for (ll i = 1; i <= m; i++) {
    cin >> get<1>(a[i]) >> get<0>(a[i]) >> get<2>(a[i]);
    sch[get<0>(a[i])] = m + 1;
  }
  
  sort(a.begin() + 1, a.end());
  
  for (ll i = 1; i <= m; i++) {
    ll cnt = get<2>(a[i]);
    for (ll j = get<1>(a[i]); j < get<0>(a[i]) && cnt; j++) {
      if (!sch[j]) {
        cnt--;
        sch[j] = i;
      }
    }
    if (cnt) {
      cout << -1;
      return 0;
    }
  }
  
  for (ll i = 1; i <= n; i++)
    cout << sch[i] << " ";
  
  return 0;
}
```

This optimized program has improved readability, better memory usage, and faster compilation time.