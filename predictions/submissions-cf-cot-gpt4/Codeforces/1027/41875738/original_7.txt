Firstly, there are several optimizations that can be made to this code.

1. Use "ios_base::sync_with_stdio(false);" and "cin.tie(NULL);". This command helps to speed up the cin and cout operations.

2. It is not recommended to use "scanf" and "printf" together with "cin" and "cout". Use only "cin" and "cout".

3. The size of "v1" and "v2" vectors is set to a constant number 200010. We can declare these vectors without any initial size and use "reserve" function to allocate memory when we know the size "n" after getting input. It saves the memory as we are not allocating unnecessary space.

4. Instead of using "for" loop to check the size of "v1[source]" and "v2[source]", we can use "for-each" loop which is more efficient and cleaner.

5. The "cost" array can be a vector and can be resized after getting input size "n".

6. We can avoid the use of global variables and pass them as parameters to the functions.

Here is the optimized code with the mentioned changes:

```cpp
#include <bits/stdc++.h>
#define ll long long int
using namespace std;

void dfs(int source, vector<vector<int>>& v1, vector<int>& vis, stack<int>& st) {
  vis[source] = true;
  for (auto& i : v1[source]) {
    if (!vis[i]) {
      dfs(i, v1, vis, st);
    }
  }
  st.push(source);
}

void dfs2(int source, int val, vector<vector<int>>& v2, vector<int>& vis, vector<int>& par, vector<int>& cost, ll& temp) {
  temp = min(temp, (ll)cost[source]);
  vis[source] = false;
  par[source] = val;
  for (auto& i : v2[source]) {
    if (vis[i]) {
      dfs2(i, val, v2, vis, par, cost, temp);
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n;
  cin >> n;
  
  vector<int> cost(n+1);
  vector<int> par(n+1);
  vector<int> vis(n+1);
  vector<vector<int>> v1(n+1), v2(n+1);
  
  iota(par.begin(), par.end(), 0);
  
  for (int i = 1; i <= n; i++)
    cin >> cost[i];
  for (int i = 1; i <= n; i++) {
    int x;
    cin >> x;
    v1[i].push_back(x);
    v2[x].push_back(i);
  }
  
  ll ans = 0;
  stack<int> st;
  for (int i = 1; i <= n; i++) {
    if (!vis[i])
      dfs(i, v1, vis, st);
  }
  while (!st.empty()) {
    int top = st.top();
    st.pop();
    if (vis[top]) {
      ll temp = 10000000000;
      dfs2(top, top, v2, vis, par, cost, temp);
      cost[top] = temp;
      ans += temp;
    }
  }
  
  for (int i = 1; i <= n; i++) {
    for (auto& child : v1[i]) {
      if (par[i] != par[child]) {
        ans -= cost[par[i]];
        cost[par[i]] = 0;
      }
    }
  }
  cout << ans << endl;
  return 0;
}
```
This optimized version of the program should work faster and use less memory.