This C++ program can be optimized in several ways. Here are the steps we'll take to optimize it:

1. Instead of using `scanf` function to read integers from input, we can use `cin` for consistency and better stream handling.
2. We'll limit the size of our arrays to `n` instead of a fixed size (`200010`). This will save memory.
3. For the 'dfs' and 'dfs2' functions, instead of using a for-loop, we can use a range-based for-loop. This is more readable and efficient as it avoids the need for accessing vector elements by index.
4. Instead of making a separate loop to initialize `par[i] = i`, we can initialize it inside the loop where cost is being read.
5. For the final loop, instead of iterating over the entire array `v1`, we can iterate only till `n`. This should speed up the execution time by avoiding unnecessary iterations.

Here's the optimized code:

```c++
#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define mp make_pair
using namespace std;

int main() {
  int n;
  cin >> n;
  
  vector<int> v1[n+1], v2[n+1];
  int cost[n+1];
  int par[n+1];
  bool vis[n+1] = {0};
  stack<int> st;
  ll temp;

  for (int i = 1; i <= n; i++) {
    par[i] = i;    // Initialize par[i] here
    cin >> cost[i];     // Use cin instead of scanf
  }

  for (int i = 1; i <= n; i++) {
    int x;
    cin >> x;      // Use cin instead of scanf
    v1[i].pb(x);
    v2[x].pb(i);
  }

  auto dfs = [&](auto&& dfs, int source) -> void {
    vis[source] = true;
    for (auto& el : v1[source]) {
      if (!vis[el]) {
        dfs(dfs, el);
      }
    }
    st.push(source);
  };

  auto dfs2 = [&](auto&& dfs2, int source, int val) -> void {
    temp = min(temp, (ll)cost[source]);
    vis[source] = false;
    par[source] = val;
    for (auto& el : v2[source]) {
      if (vis[el]) {
        dfs2(dfs2, el, val);
      }
    }
  };

  ll ans = 0;
  for (int i = 1; i <= n; i++) {
    if (!vis[i])
      dfs(dfs, i);
  }

  while (!st.empty()) {
    int top = st.top();
    st.pop();
    if (vis[top]) {
      temp = 10000000000;
      dfs2(dfs2, top, top);
      cost[top] = temp;
      ans += temp;
    }
  }

  for (int i = 1; i <= n; i++) {
    for (auto& child : v1[i]) {
      if (par[i] != par[child]) {
        ans -= cost[par[i]];
        cost[par[i]] = 0;
      }
    }
  }

  cout << ans << endl;
  return 0;
}
```

Remember that in C++, the size of an array must be known at compile time. In real-world scenarios, it's better to use `std::vector` instead of arrays with fixed size. This task required minimal changes to the original program, so we didn't use vectors for all arrays.