This program seems to be implementing the Kosaraju's algorithm, which is used to find strongly connected components in a graph. The optimization steps are as follows:

1. Remove unnecessary includes: the preprocessor directive `#include <bits/stdc++.h>` includes a lot of unnecessary libraries which could slow down the compile time, so it's better to include only required libraries. 

2. Avoid using `scanf` and `printf` together with cin and cout in C++. Mixing these IO operations can lead to unnecessary overhead because of synchronization. So, stick with cin and cout for consistency. 

3. Use prefix increment instead of postfix where necessary. Prefix increment (++i) is generally faster than postfix increment (i++) because postfix increment creates a temporary object and returns that. 

4. Use `reserve()` function to preallocate memory for vectors v1 and v2. It can reduce the time spent on memory reallocation while pushing back elements to the vector.

5. Use `ios_base::sync_with_stdio(false); cin.tie(NULL);` at the beginning of main to turn off synchronization between C and C++ standard streams which can speed up cin and cout operations.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <stack>
#define ll long long int

using namespace std;

vector<vector<int>> v1(200010), v2(200010);
int cost[200010];
int par[200010];
bool vis[200010];
stack<int> st;
ll temp;

void dfs(int source) {
  vis[source] = true;
  for (auto& i : v1[source]) {
    if (!vis[i]) {
      dfs(i);
    }
  }
  st.push(source);
}

void dfs2(int source, int val) {
  temp = min(temp, (ll)cost[source]);
  vis[source] = false;
  par[source] = val;
  for (auto& i : v2[source]) {
    if (vis[i]) {
      dfs2(i, val);
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n;
  cin >> n;
  for (int i = 0; i < 200010; ++i)
    par[i] = i;
  
  for (int i = 1; i <= n; ++i)
    cin >> cost[i];
  
  for (int i = 1; i <= n; ++i) {
    int x;
    cin >> x;
    v1[i].push_back(x);
    v2[x].push_back(i);
  }
  
  ll ans = 0;
  for (int i = 1; i <= n; ++i) {
    if (!vis[i])
      dfs(i);
  }
  
  while (!st.empty()) {
    int top = st.top();
    st.pop();
    
    if (vis[top]) {
      temp = 10000000000;
      dfs2(top, top);
      cost[top] = temp;
      ans += temp;
    }
  }
  
  for (int i = 0; i < 200010; ++i) {
    for (auto& child : v1[i]) {
      if (par[i] != par[child]) {
        ans -= cost[par[i]];
        cost[par[i]] = 0;
      }
    }
  }
  
  cout << ans << endl;
  
  return 0;
}
```