#include<iostream>
#include<vector>
#include<stack>

#define ll long long int

using namespace std;

void dfs(int source, vector<int> v[], bool vis[], stack<int> &st) {
  vis[source] = true;
  for (auto &i : v[source]) {
    if (!vis[i]) {
      dfs(i, v, vis, st);
    }
  }
  st.push(source);
}

void dfs2(int source, int val, vector<int> v[], int cost[], bool vis[], int par[], ll &temp) {
  temp = min(temp, (ll)cost[source]);
  vis[source] = false;
  par[source] = val;
  for (auto &i : v[source]) {
    if (vis[i]) {
      dfs2(i, val, v, cost, vis, par, temp);
    }
  }
}

int main() {
  int n;
  cin >> n;

  vector<int> v1[200010], v2[200010];
  int cost[200010];
  int par[200010];
  bool vis[200010] = {false};

  for (int i = 0; i < 200010; i++)
    par[i] = i;

  for (int i = 1; i <= n; i++)
    cin >> cost[i];

  for (int i = 1; i <= n; i++) {
    int x;
    cin >> x;
    v1[i].push_back(x);
    v2[x].push_back(i);
  }

  ll ans = 0;
  stack<int> st;
  for (int i = 1; i <= n; i++) {
    if (!vis[i])
      dfs(i, v1, vis, st);
  }
  while (!st.empty()) {
    int top = st.top();
    st.pop();
    if (vis[top]) {
      ll temp = 10000000000;
      dfs2(top, top, v2, cost, vis, par, temp);
      cost[top] = temp;
      ans += temp;
    }
  }
  for (int i = 0; i < 200010; i++) {
    for (auto &child : v1[i]) {
      if (par[i] != par[child]) {
        ans -= cost[par[i]];
        cost[par[i]] = 0;
      }
    }
  }
  cout << ans << endl;
  return 0;
}