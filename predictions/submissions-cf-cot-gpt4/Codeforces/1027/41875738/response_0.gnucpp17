#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define mp make_pair
using namespace std;

int main() {
  int n;
  cin >> n;
  
  vector<int> v1[n+1], v2[n+1];
  int cost[n+1];
  int par[n+1];
  bool vis[n+1] = {0};
  stack<int> st;
  ll temp;

  for (int i = 1; i <= n; i++) {
    par[i] = i;    // Initialize par[i] here
    cin >> cost[i];     // Use cin instead of scanf
  }

  for (int i = 1; i <= n; i++) {
    int x;
    cin >> x;      // Use cin instead of scanf
    v1[i].pb(x);
    v2[x].pb(i);
  }

  auto dfs = [&](auto&& dfs, int source) -> void {
    vis[source] = true;
    for (auto& el : v1[source]) {
      if (!vis[el]) {
        dfs(dfs, el);
      }
    }
    st.push(source);
  };

  auto dfs2 = [&](auto&& dfs2, int source, int val) -> void {
    temp = min(temp, (ll)cost[source]);
    vis[source] = false;
    par[source] = val;
    for (auto& el : v2[source]) {
      if (vis[el]) {
        dfs2(dfs2, el, val);
      }
    }
  };

  ll ans = 0;
  for (int i = 1; i <= n; i++) {
    if (!vis[i])
      dfs(dfs, i);
  }

  while (!st.empty()) {
    int top = st.top();
    st.pop();
    if (vis[top]) {
      temp = 10000000000;
      dfs2(dfs2, top, top);
      cost[top] = temp;
      ans += temp;
    }
  }

  for (int i = 1; i <= n; i++) {
    for (auto& child : v1[i]) {
      if (par[i] != par[child]) {
        ans -= cost[par[i]];
        cost[par[i]] = 0;
      }
    }
  }

  cout << ans << endl;
  return 0;
}