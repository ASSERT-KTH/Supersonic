This program is quite complex and already seems optimized in many ways. However, there are a few minor improvements that could be made to potentially increase its efficiency:

1. Reserve Memory for Vectors: The vectors v1 and v2 are used to store integers, but there is no reservation of memory beforehand. Using the reserve() function for vectors can speed up the process of adding elements to vectors because it prevents unnecessary re-allocations and copying of data.

2. Use Fast I/O Operations: Instead of using the traditional cin and cout for input and output operations, we can use faster methods. This can be achieved using ios_base::sync_with_stdio(false) and cin.tie(NULL).

3. Use memset for Initialization: Instead of using a for loop to initialize the par array, we could use the memset function which may be faster.

Here's the optimized version of the code following these steps:

```cpp
#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define mp make_pair
using namespace std;
vector<int> v1[200010], v2[200010];
int cost[200010];
int par[200010];
bool vis[200010];
stack<int> st;
ll temp;

void dfs(int source) {
  vis[source] = true;
  for (int i = 0; i < v1[source].size(); i++) {
    if (!vis[v1[source][i]]) {
      dfs(v1[source][i]);
    }
  }
  st.push(source);
}

void dfs2(int source, int val) {
  temp = min(temp, (ll)cost[source]);
  vis[source] = false;
  par[source] = val;
  for (int i = 0; i < v2[source].size(); i++) {
    if (vis[v2[source][i]]) {
      dfs2(v2[source][i], val);
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n;
  cin >> n;
  v1->reserve(n);
  v2->reserve(n);

  memset(par, 0, sizeof(par));

  for (int i = 1; i <= n; i++)
    scanf("%d", &cost[i]);
  for (int i = 1; i <= n; i++) {
    int x;
    scanf("%d", &x);
    v1[i].pb(x);
    v2[x].pb(i);
  }
  ll ans = 0;
  for (int i = 1; i <= n; i++) {
    if (!vis[i])
      dfs(i);
  }
  while (!st.empty()) {
    int top = st.top();
    st.pop();
    if (vis[top]) {
      temp = 10000000000;
      dfs2(top, top);
      cost[top] = temp;
      ans += temp;
    }
  }
  for (int i = 0; i < 200010; i++) {
    for (int j = 0; j < v1[i].size(); j++) {
      int child = v1[i][j];
      if (par[i] != par[child]) {
        ans -= cost[par[i]];
        cost[par[i]] = 0;
      }
    }
  }
  cout << ans << endl;
  return 0;
}
```