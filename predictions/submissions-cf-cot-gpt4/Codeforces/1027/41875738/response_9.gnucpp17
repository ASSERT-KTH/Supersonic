#include <stdio.h>
#include <stack>
#include <vector>
using namespace std;

void dfs(int source, vector<int> v1[], bool vis[], stack<int>& st) {
  vis[source] = true;
  for (int i = 0; i < v1[source].size(); ++i) {
    if (!vis[v1[source][i]]) {
      dfs(v1[source][i], v1, vis, st);
    }
  }
  st.push(source);
}

void dfs2(int source, int val, vector<int> v2[], int cost[], bool vis[], int par[], long long int& temp) {
  temp = min(temp, (long long int)cost[source]);
  vis[source] = false;
  par[source] = val;
  for (int i = 0; i < v2[source].size(); ++i) {
    if (vis[v2[source][i]]) {
      dfs2(v2[source][i], val, v2, cost, vis, par, temp);
    }
  }
}

int main() {
  int n;
  scanf("%d", &n);

  vector<int> v1[200010], v2[200010];
  int cost[200010];
  int par[200010];
  bool vis[200010];
  stack<int> st;
  long long int temp;

  for (int i = 0; i < 200010; ++i)
    par[i] = i;
  for (int i = 1; i <= n; ++i)
    scanf("%d", &cost[i]);
  for (int i = 1; i <= n; ++i) {
    int x;
    scanf("%d", &x);
    v1[i].push_back(x);
    v2[x].push_back(i);
  }
  long long int ans = 0;
  for (int i = 1; i <= n; ++i) {
    if (!vis[i])
      dfs(i, v1, vis, st);
  }
  while (!st.empty()) {
    int top = st.top();
    st.pop();
    if (vis[top]) {
      temp = 10000000000;
      dfs2(top, top, v2, cost, vis, par, temp);
      cost[top] = temp;
      ans += temp;
    }
  }
  for (int i = 0; i < 200010; ++i) {
    for (int j = 0; j < v1[i].size(); ++j) {
      int child = v1[i][j];
      if (par[i] != par[child]) {
        ans -= cost[par[i]];
        cost[par[i]] = 0;
      }
    }
  }
  printf("%lld\n", ans);
  return 0;
}