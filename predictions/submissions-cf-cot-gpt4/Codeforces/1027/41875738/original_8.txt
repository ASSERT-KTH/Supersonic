The above program seems to be a part of a graph problem where it uses a depth-first search (DFS) to traverse the graph. However, there are several areas where the program's performance can be improved.

1. Use of "#include <bits/stdc++.h>": This header file includes almost all standard libraries, which increases the compilation time. It is better to include only those libraries that are being used in the program.

2. Avoid unnecessary use of global variables: Global variables consume memory for the entire runtime of the program. So if the variable is not required for the whole program, you can declare it inside the function or the block where it is needed. For example, variables like "temp" can be declared inside the main function.

3. Avoid using "scanf" and "printf" with "cin" and "cout": Mixing C-style I/O with C++ can slow down the input/output operations due to synchronization. It's better to stick with either C-style or C++-style I/O. I will use C++-style I/O for the optimized code.

4. Use of ranged-based for loops instead of traditional for loops: This can help eliminate use of indexing and thus make code simpler and easier to read.

5. Use of "auto": The auto keyword in C++ can be used to save time writing out complex data types.

Here is the optimized version of your program:

```cpp
#include<iostream>
#include<vector>
#include<stack>

#define ll long long int

using namespace std;

void dfs(int source, vector<int> v[], bool vis[], stack<int> &st) {
  vis[source] = true;
  for (auto &i : v[source]) {
    if (!vis[i]) {
      dfs(i, v, vis, st);
    }
  }
  st.push(source);
}

void dfs2(int source, int val, vector<int> v[], int cost[], bool vis[], int par[], ll &temp) {
  temp = min(temp, (ll)cost[source]);
  vis[source] = false;
  par[source] = val;
  for (auto &i : v[source]) {
    if (vis[i]) {
      dfs2(i, val, v, cost, vis, par, temp);
    }
  }
}

int main() {
  int n;
  cin >> n;

  vector<int> v1[200010], v2[200010];
  int cost[200010];
  int par[200010];
  bool vis[200010] = {false};

  for (int i = 0; i < 200010; i++)
    par[i] = i;

  for (int i = 1; i <= n; i++)
    cin >> cost[i];

  for (int i = 1; i <= n; i++) {
    int x;
    cin >> x;
    v1[i].push_back(x);
    v2[x].push_back(i);
  }

  ll ans = 0;
  stack<int> st;
  for (int i = 1; i <= n; i++) {
    if (!vis[i])
      dfs(i, v1, vis, st);
  }
  while (!st.empty()) {
    int top = st.top();
    st.pop();
    if (vis[top]) {
      ll temp = 10000000000;
      dfs2(top, top, v2, cost, vis, par, temp);
      cost[top] = temp;
      ans += temp;
    }
  }
  for (int i = 0; i < 200010; i++) {
    for (auto &child : v1[i]) {
      if (par[i] != par[child]) {
        ans -= cost[par[i]];
        cost[par[i]] = 0;
      }
    }
  }
  cout << ans << endl;
  return 0;
}
```

In the optimized version of the program, I have moved the global variables to inside the main function or to the function parameters where they are needed. Also, I have replaced "scanf" and "printf" with "cin" and "cout", and utilized "auto" and ranged-based for loops where possible to make the code more readable and efficient. The functionality of the program remains the same.
