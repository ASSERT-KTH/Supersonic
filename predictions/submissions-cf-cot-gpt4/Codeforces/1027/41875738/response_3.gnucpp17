#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
vector<int> v1[200010], v2[200010];
int cost[200010];
int par[200010];
bool vis[200010];
stack<int> st;
ll temp;

void dfs(int source) {
  vis[source] = true;
  for (auto &i : v1[source])
    if (!vis[i]) dfs(i);
  st.push(source);
}

void dfs2(int source, int val) {
  temp = min(temp, (ll)cost[source]);
  vis[source] = false;
  par[source] = val;
  for (auto &i : v2[source])
    if (vis[i]) dfs2(i, val);
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL);
  
  int n;
  cin >> n;
  
  memset(par, 0, sizeof(par));
  memset(cost, 0, sizeof(cost));
  memset(vis, false, sizeof(vis));
  
  for (int i = 1; i <= n; i++) cin >> cost[i];
  for (int i = 1; i <= n; i++) {
    int x;
    cin >> x;
    v1[i].push_back(x);
    v2[x].push_back(i);
  }
  
  ll ans = 0;
  for (int i = 1; i <= n; i++)
    if (!vis[i]) dfs(i);
  
  while (!st.empty()) {
    int top = st.top(); st.pop();
    if (vis[top]) {
      temp = 10000000000;
      dfs2(top, top);
      cost[top] = temp;
      ans += temp;
    }
  }
  
  for (int i = 0; i < 200010; i++) {
    for (auto &j : v1[i]) {
      int child = j;
      if (par[i] != par[child]) {
        ans -= cost[par[i]];
        cost[par[i]] = 0;
      }
    }
  }
  
  cout << ans << endl;
  
  return 0;
}