#include <iostream>
#include <vector>
#define ll long long int
using namespace std;

void dfs(int source, vector<vector<int>>& v1, vector<bool>& vis, vector<int>& st) {
  vis[source] = true;
  for (auto& i : v1[source]) {
    if (!vis[i]) {
      dfs(i, v1, vis, st);
    }
  }
  st.push_back(source);
}

ll dfs2(int source, int val, vector<int>& cost, vector<vector<int>>& v2, vector<bool>& vis, vector<int>& par) {
  ll temp = min(static_cast<ll>(cost[source]), 10000000000LL);
  vis[source] = false;
  par[source] = val;
  for (auto& i : v2[source]) {
    if (vis[i]) {
      temp = min(temp, dfs2(i, val, cost, v2, vis, par));
    }
  }
  return temp;
}

int main() {
  ios::sync_with_stdio(false);
  int n;
  cin >> n;
  vector<int> cost(n+1), par(n+1), st;
  vector<vector<int>> v1(n+1), v2(n+1);
  vector<bool> vis(n+1, false);

  for (int i = 1; i <= n; i++)
    cin >> cost[i];

  for (int i = 1; i <= n; i++) {
    int x;
    cin >> x;
    v1[i].push_back(x);
    v2[x].push_back(i);
  }

  ll ans = 0;
  for (int i = 1; i <= n; i++) {
    if (!vis[i])
      dfs(i, v1, vis, st);
  }

  while (!st.empty()) {
    int top = st.back();
    st.pop_back();
    if (vis[top]) {
      cost[top] = dfs2(top, top, cost, v2, vis, par);
      ans += cost[top];
    }
  }

  for (int i = 1; i <= n; i++) {
    for (auto& child : v1[i]) {
      if (par[i] != par[child]) {
        ans -= cost[par[i]];
        cost[par[i]] = 0;
      }
    }
  }

  cout << ans << endl;
  return 0;
}