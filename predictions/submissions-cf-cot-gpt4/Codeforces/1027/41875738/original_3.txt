This program seems to be a part of an implementation of Kosaraju's algorithm to find strongly-connected components (SCC) in a directed graph. There are several ways we can optimize this program:

1. Use `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)`: This is a way to make i/o operations faster. It is a common way to optimize C++ programs where the bottleneck is the i/o operations.

2. Replace the recursion in the depth-first search (DFS) function with a loop: This can avoid stack overflow issues when dealing with large inputs. It also reduces function call overhead.

3. Use adjacency lists instead of adjacency matrices: The given program uses adjacency matrices which can consume unnecessary memory when the graph is sparse. Using adjacency lists can save memory in such cases.

4. Avoid unnecessary computations: The `dfs2` function seems to be recomputing the minimum cost for nodes in the same SCC repeatedly. We can avoid this by storing the minimum cost for each SCC when it is first computed.

5. Use memset to initialize array: Instead of using a for loop to initialize our arrays, we can use the `memset` function, which is generally faster.

Here is the optimized version of the program:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
vector<int> v1[200010], v2[200010];
int cost[200010];
int par[200010];
bool vis[200010];
stack<int> st;
ll temp;

void dfs(int source) {
  vis[source] = true;
  for (auto &i : v1[source])
    if (!vis[i]) dfs(i);
  st.push(source);
}

void dfs2(int source, int val) {
  temp = min(temp, (ll)cost[source]);
  vis[source] = false;
  par[source] = val;
  for (auto &i : v2[source])
    if (vis[i]) dfs2(i, val);
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL);
  
  int n;
  cin >> n;
  
  memset(par, 0, sizeof(par));
  memset(cost, 0, sizeof(cost));
  memset(vis, false, sizeof(vis));
  
  for (int i = 1; i <= n; i++) cin >> cost[i];
  for (int i = 1; i <= n; i++) {
    int x;
    cin >> x;
    v1[i].push_back(x);
    v2[x].push_back(i);
  }
  
  ll ans = 0;
  for (int i = 1; i <= n; i++)
    if (!vis[i]) dfs(i);
  
  while (!st.empty()) {
    int top = st.top(); st.pop();
    if (vis[top]) {
      temp = 10000000000;
      dfs2(top, top);
      cost[top] = temp;
      ans += temp;
    }
  }
  
  for (int i = 0; i < 200010; i++) {
    for (auto &j : v1[i]) {
      int child = j;
      if (par[i] != par[child]) {
        ans -= cost[par[i]];
        cost[par[i]] = 0;
      }
    }
  }
  
  cout << ans << endl;
  
  return 0;
}
```

Please note that some of the changes are not possible to implement without changing the structure of the code significantly. The given task asked for small modifications, thus such changes were not included in the optimized code.