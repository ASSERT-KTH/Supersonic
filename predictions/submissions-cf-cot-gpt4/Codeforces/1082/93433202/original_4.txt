This program already has some optimization applied (like using a priority_queue to quickly access the greatest element). However, there are a few minor modifications that can be done to optimize this program further.

1. Use '\n' instead of endl to reduce the time taken in flushing the output buffer every time we print a line.

2. Avoid using 'sz(x)' multiple times. Instead, calculate it once and reuse it. 

3. Instead of using 'using namespace std', specify 'std::' before every standard library function to avoid any possible naming conflicts.

4. Avoid using 'bits/stdc++.h' as it includes a lot of unnecessary headers which increases compilation time. Include only the necessary headers.

Here is the optimized code:
```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#define S second
#define F first
#define PB push_back

typedef long long ll;
const int md = 1e9 + 7;
int main() {
  std::ios::sync_with_stdio(0);
  std::cin.tie(0);
  std::cout.tie(0);
  int n;
  std::cin >> n;
  int t[n];
  int sum = 0;
  for (int i = 0; i < n; i++) {
    std::cin >> t[i];
    sum += t[i];
  }
  if (sum > 2 * n * (n - 1) || sum < 2 * n - 2) {
    std::cout << "NO";
    return 0;
  }
  std::vector<int> one, two;
  for (int i = 0; i < n; i++) {
    if (t[i] == 1)
      one.PB(i);
    else
      two.PB(i);
  }
  std::vector<std::pair<int, int>> ans;
  size_t two_size = two.size();
  for (int i = 1; i < two_size; i++) {
    ans.PB({two[i - 1], two[i]});
    t[two[i - 1]]--, t[two[i]]--;
  }
  int f2 = std::min(2, (int)one.size());
  for (int i = 0; i < f2; i++) {
    if (i == 0)
      ans.PB({one[i], two[0]}), t[two[0]]--;
    else
      ans.PB({one[i], two[two_size - 1]}), t[two[two_size - 1]]--;
  }
  std::priority_queue<std::pair<int, int>> q;
  for (auto x : two) {
    q.push({t[x], x});
  }
  for (int i = f2; i < one.size(); i++) {
    int x = q.top().S;
    q.pop();
    if (t[x] == 0) {
      std::cout << "NO";
      return 0;
    }
    ans.PB({one[i], x});
    t[x]--;
    q.push({t[x], x});
  }
  std::cout << "YES"
       << " " << two_size + f2 - 1 << '\n';
  std::cout << ans.size() << '\n';
  for (auto x : ans)
    std::cout << x.F + 1 << " " << x.S + 1 << " " << '\n';
}
```