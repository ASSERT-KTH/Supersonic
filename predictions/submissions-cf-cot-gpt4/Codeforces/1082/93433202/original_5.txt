Your code is already well-optimized in terms of algorithmic complexity. However, we can make some changes to make it even more efficient. Here are some steps for optimization:

1. File Inclusion: It's not recommended to include the `<bits/stdc++.h>` header file because it includes a lot of unnecessary header files which increases the compilation time. It is good practice to include only those libraries which are used in the program.

2. Avoid using `#pragma GCC optimize("O2")`: This line is used to force the GCC compiler to optimize the code, but it's not recommended to use this unless you know what you're doing. It's better to let the compiler decide how to optimize your code.

3. Use `std::ios_base::sync_with_stdio(false)` instead of `ios::sync_with_stdio(0)`. It is a more common way to turn off the synchronization of all the C++ standard streams with their corresponding C standard streams.

4. Use `std::vector<int>` instead of dynamic array: It's safer and offers some benefits over C-style arrays, such as automatic memory management.

5. Reserve Memory for `std::vector`: If you know the maximum size of a vector at initialization, you can reserve the memory for it, which can prevent unnecessary memory reallocations.

6. Avoid using `using namespace std;`: This line can cause name conflicts, and it's considered bad practice. It's better to use `std::` before every standard function.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#define S second
#define F first
#define PB push_back
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define L(x) 2 * x
#define R(x) 2 * x + 1
#define M(x, y) (x + y) / 2
typedef long long ll;
const int md = 1e9 + 7;
int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);
  int n;
  std::cin >> n;
  std::vector<int> t(n);
  int sum = 0;
  for (int i = 0; i < n; i++) {
    std::cin >> t[i];
    sum += t[i];
  }
  if (sum > 2 * n * (n - 1) || sum < 2 * n - 2) {
    std::cout << "NO";
    return 0;
  }
  std::vector<int> one, two;
  one.reserve(n);
  two.reserve(n);
  for (int i = 0; i < n; i++) {
    if (t[i] == 1)
      one.PB(i);
    else
      two.PB(i);
  }
  std::vector<std::pair<int, int>> ans;
  ans.reserve(n);
  for (int i = 1; i < sz(two); i++) {
    ans.PB({two[i - 1], two[i]});
    t[two[i - 1]]--, t[two[i]]--;
  }
  int f2 = std::min(2, sz(one));
  for (int i = 0; i < f2; i++) {
    if (i == 0)
      ans.PB({one[i], two[0]}), t[two[0]]--;
    else
      ans.PB({one[i], two[sz(two) - 1]}), t[two[sz(two) - 1]]--;
  }
  std::priority_queue<std::pair<int, int>> q;
  for (auto x : two) {
    q.push({t[x], x});
  }
  for (int i = f2; i < sz(one); i++) {
    int x = q.top().S;
    q.pop();
    if (t[x] == 0) {
      std::cout << "NO";
      return 0;
    }
    ans.PB({one[i], x});
    t[x]--;
    q.push({t[x], x});
  }
  std::cout << "YES"
       << " " << sz(two) + f2 - 1 << '\n';
  std::cout << sz(ans) << '\n';
  for (auto x : ans)
    std::cout << x.F + 1 << " " << x.S + 1 << " " << '\n';
}
```