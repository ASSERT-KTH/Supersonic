The given code is already quite optimized. It employs several techniques such as the use of `push_back` function for vector, priority queue, and efficient use of loops. However, we can still make a few changes to improve its performance.

Optimization Steps:

1. Avoiding use of `#include <bits/stdc++.h>`: This header file includes almost all standard libraries, which can slow down the compile time. Instead, we include only the libraries we need.

2. Avoiding use of `using namespace std;`: This can cause name clashing issues. So, we will avoid it. 

3. Avoiding use of C-style array `int t[n];`: Instead, we will use `std::vector<int> t(n);` which is safer and offers more functionalities. 

4. Avoiding use of `#define`: Instead, we will use `const` or `constexpr` for defining constants.

5. Using `reserve` function for vectors: This function reserves the specified number of memory for the vector in advance which reduces the time needed for reallocation of memory when elements are added.

6. Avoiding use of `endl`: `endl` performs more operations than needed by also flushing the stream. We will use `"\n"` instead.

7. Using `std::ios_base::sync_with_stdio(false);`: This can speed up the I/O operations.

Here is the optimized code with these changes:

```cpp
#include <iostream>
#include <vector>
#include <queue>

constexpr int md = 1e9 + 7;
constexpr int two = 2;

int main() {
  std::ios_base::sync_with_stdio(false);
  int n;
  std::cin >> n;
  std::vector<int> t(n);
  int sum = 0;
  for (int i = 0; i < n; i++) {
    std::cin >> t[i];
    sum += t[i];
  }
  if (sum > two * n * (n - 1) || sum < two * n - two) {
    std::cout << "NO\n";
    return 0;
  }
  std::vector<int> one, twoVec;
  for (int i = 0; i < n; i++) {
    if (t[i] == 1)
      one.push_back(i);
    else
      twoVec.push_back(i);
  }
  std::vector<std::pair<int, int>> ans;
  ans.reserve(n); // reserve memory
  for (int i = 1; i < twoVec.size(); i++) {
    ans.push_back({twoVec[i - 1], twoVec[i]});
    t[twoVec[i - 1]]--, t[twoVec[i]]--;
  }
  int f2 = std::min(two, static_cast<int>(one.size()));
  for (int i = 0; i < f2; i++) {
    if (i == 0)
      ans.push_back({one[i], twoVec[0]}), t[twoVec[0]]--;
    else
      ans.push_back({one[i], twoVec[twoVec.size() - 1]}), t[twoVec[twoVec.size() - 1]]--;
  }
  std::priority_queue<std::pair<int, int>> q;
  for (auto x : twoVec) {
    q.push({t[x], x});
  }
  for (int i = f2; i < one.size(); i++) {
    int x = q.top().second;
    q.pop();
    if (t[x] == 0) {
      std::cout << "NO\n";
      return 0;
    }
    ans.push_back({one[i], x});
    t[x]--;
    q.push({t[x], x});
  }
  std::cout << "YES "
       << twoVec.size() + f2 - 1 << "\n";
  std::cout << ans.size() << "\n";
  for (auto x : ans)
    std::cout << x.first + 1 << " " << x.second + 1 << " \n";
}
```