#include <iostream>
#include <vector>
#include <queue>
#include <utility>

using namespace std;
using ll = long long;
constexpr int mod = 1e9 + 7;

inline int sz(const auto& x) { return static_cast<int>(x.size()); }
inline int L(int x) { return 2 * x; }
inline int R(int x) { return 2 * x + 1; }
inline int M(int x, int y) { return (x + y) / 2; }

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int n;
  cin >> n;
  vector<int> t(n);
  int sum = 0;
  for (int i = 0; i < n; i++) {
    cin >> t[i];
    sum += t[i];
  }
  if (sum > 2 * n * (n - 1) || sum < 2 * n - 2) {
    cout << "NO";
    return 0;
  }

  vector<int> one, two;
  for (int i = 0; i < n; i++) {
    if (t[i] == 1)
      one.push_back(i);
    else
      two.push_back(i);
  }

  vector<pair<int, int>> ans;
  for (int i = 1; i < sz(two); i++) {
    ans.push_back({two[i - 1], two[i]});
    t[two[i - 1]]--, t[two[i]]--;
  }

  int f2 = min(2, sz(one));
  for (int i = 0; i < f2; i++) {
    if (i == 0)
      ans.push_back({one[i], two[0]}), t[two[0]]--;
    else
      ans.push_back({one[i], two[sz(two) - 1]}), t[two[sz(two) - 1]]--;
  }

  priority_queue<pair<int, int>> q;
  for (auto x : two) {
    q.push({t[x], x});
  }
  for (int i = f2; i < sz(one); i++) {
    int x = q.top().second;
    q.pop();
    if (t[x] == 0) {
      cout << "NO";
      return 0;
    }
    ans.push_back({one[i], x});
    t[x]--;
    q.push({t[x], x});
  }

  cout << "YES " << sz(two) + f2 - 1 << "\n";
  cout << sz(ans) << "\n";
  for (auto x : ans)
    cout << x.first + 1 << " " << x.second + 1 << "\n";
}