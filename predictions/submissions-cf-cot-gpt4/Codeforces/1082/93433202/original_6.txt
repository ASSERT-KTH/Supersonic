Here are the steps to optimize the program:

1. The use of `#include <bits/stdc++.h>` is not recommended as it includes all the standard libraries, which increases the compilation time. Replace it with the specific libraries needed for this program.

2. The use of `#pragma GCC optimize("O2")` is not required unless you are specifically optimizing for a GCC compiler. Removing this will make the code more portable across different compilers.

3. `#define` macros like `S`, `F`, `PB`, `sz`, `all`, `L`, `R`, and `M` are used to shorten the code but they decrease readability and may lead to errors. Replace these macros with their actual expressions.

4. Avoid using `using namespace std;` because it can cause name collisions when the program gets larger or when it uses third-party libraries.

5. Use `std::vector` instead of raw arrays for `t`. This will make the code safer because it avoids potential array overrun errors and it will also dynamically manage its memory size according to its usage.

6. It is not necessary to use `std::priority_queue` for sorting the pairs. A sorted `std::vector` is sufficient and will be faster. Also, you will be able to avoid unnecessary push and pop operations.

7. Replace `typedef long long ll;` and `const int md = 1e9 + 7;` as they are not being used in the program.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  std::ios::sync_with_stdio(0);
  std::cin.tie(0);
  std::cout.tie(0);
  
  int n;
  std::cin >> n;
  
  std::vector<int> t(n);
  int sum = 0;
  for (int i = 0; i < n; i++) {
    std::cin >> t[i];
    sum += t[i];
  }
  
  if (sum > 2 * n * (n - 1) || sum < 2 * n - 2) {
    std::cout << "NO";
    return 0;
  }
  
  std::vector<int> one, two;
  for (int i = 0; i < n; i++) {
    if (t[i] == 1)
      one.push_back(i);
    else
      two.push_back(i);
  }
  
  std::vector<std::pair<int, int>> ans;
  for (int i = 1; i < two.size(); i++) {
    ans.push_back({two[i - 1], two[i]});
    t[two[i - 1]]--, t[two[i]]--;
  }
  
  int f2 = std::min(2, (int)one.size());
  for (int i = 0; i < f2; i++) {
    if (i == 0)
      ans.push_back({one[i], two[0]}), t[two[0]]--;
    else
      ans.push_back({one[i], two[two.size() - 1]}), t[two[two.size() - 1]]--;
  }
  
  std::sort(two.begin(), two.end());
  
  for (int i = f2; i < one.size(); i++) {
    int x = two.back();
    two.pop_back();
    if (t[x] == 0) {
      std::cout << "NO";
      return 0;
    }
    ans.push_back({one[i], x});
    t[x]--;
  }
  
  std::cout << "YES"
       << " " << two.size() + f2 - 1 << '\n';
  std::cout << ans.size() << '\n';
  for (auto x : ans)
    std::cout << x.first + 1 << " " << x.second + 1 << " " << '\n';
}
```