The code you provided is already quite optimized, but there are a few micro-optimizations that can be applied:

- The `sz(x)` function is used to return the size of a container. This can be replaced with the `.size()` member function, which is more intuitive and has the same effect. It also eliminates the need for an extra function call.

- The `all(x)` macro is used to represent the begin and end of a container, which is used in range-based for loops and some STL functions. However, this macro is not used in the provided code, so it can be removed.

- The `using namespace std;` statement is generally avoided in professional C++ code, because it can lead to name clashes. It is better to use the `std::` prefix where necessary.

- The variables `one`, `two`, and `ans` are all `std::vector`'s that use the `push_back()` function to insert elements. Reserving space in these vectors before inserting elements can reduce the number of memory allocations and improve performance. The maximum size of these vectors can be estimated as `n`.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#define S second
#define F first
#define PB push_back
#define L(x) 2 * x
#define R(x) 2 * x + 1
#define M(x, y) (x + y) / 2
typedef long long ll;
const int md = 1e9 + 7;
int main() {
  std::cin.tie(0);
  std::cout.tie(0);
  std::ios::sync_with_stdio(0);
  int n;
  std::cin >> n;
  int t[n];
  int sum = 0;
  for (int i = 0; i < n; i++) {
    std::cin >> t[i];
    sum += t[i];
  }
  if (sum > 2 * n * (n - 1) || sum < 2 * n - 2) {
    std::cout << "NO";
    return 0;
  }
  std::vector<int> one, two;
  one.reserve(n);
  two.reserve(n);
  for (int i = 0; i < n; i++) {
    if (t[i] == 1)
      one.PB(i);
    else
      two.PB(i);
  }
  std::vector<std::pair<int, int>> ans;
  ans.reserve(n);
  for (int i = 1; i < two.size(); i++) {
    ans.PB({two[i - 1], two[i]});
    t[two[i - 1]]--, t[two[i]]--;
  }
  int f2 = std::min(2, (int)one.size());
  for (int i = 0; i < f2; i++) {
    if (i == 0)
      ans.PB({one[i], two[0]}), t[two[0]]--;
    else
      ans.PB({one[i], two[two.size() - 1]}), t[two[two.size() - 1]]--;
  }
  std::priority_queue<std::pair<int, int>> q;
  for (auto x : two) {
    q.push({t[x], x});
  }
  for (int i = f2; i < one.size(); i++) {
    int x = q.top().S;
    q.pop();
    if (t[x] == 0) {
      std::cout << "NO";
      return 0;
    }
    ans.PB({one[i], x});
    t[x]--;
    q.push({t[x], x});
  }
  std::cout << "YES"
       << " " << two.size() + f2 - 1 << std::endl;
  std::cout << ans.size() << std::endl;
  for (auto x : ans)
    std::cout << x.F + 1 << " " << x.S + 1 << " " << std::endl;
}
```

Just a note, significant optimization would require more substantial code changes, which you asked to avoid.