The program is already quite optimized and well-written, but there are still some areas where we can make some improvements:

1. Use `std::ios_base::sync_with_stdio(false)` to unsync the C++ standard streams with their C counterparts to gain some performance.

2. Use `reserve()` function to preallocate memory for vectors `one`, `two`, and `ans` to reduce the number of reallocations and copies during the program execution.

3. Instead of using `push()` to insert elements into the priority queue, we can use `emplace()` which constructs the new element in place, thus eliminating the need for a temporary object and a copy.

4. When we have finished with using vector `two`, we can use `shrink_to_fit()` to free unused capacity, thereby reducing memory usage.

5. Use '\n' instead of `endl` to avoid unnecessary flush of the stream.

Here is the optimized program:

```c++
#include <bits/stdc++.h>
#pragma GCC optimize("O2")
#define S second
#define F first
#define PB push_back
#define all(x) x.begin(), x.end()
#define L(x) 2 * x
#define R(x) 2 * x + 1
#define M(x, y) (x + y) / 2
using namespace std;
typedef long long ll;
const int md = 1e9 + 7;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  int n;
  cin >> n;
  int t[n];
  int sum = 0;
  for (int i = 0; i < n; i++) {
    cin >> t[i];
    sum += t[i];
  }
  if (sum > 2 * n * (n - 1) || sum < 2 * n - 2) {
    cout << "NO";
    return 0;
  }
  vector<int> one, two;
  one.reserve(n);
  two.reserve(n);
  for (int i = 0; i < n; i++) {
    if (t[i] == 1)
      one.PB(i);
    else
      two.PB(i);
  }
  vector<pair<int, int>> ans;
  ans.reserve(n);
  for (int i = 1; i < two.size(); i++) {
    ans.PB({two[i - 1], two[i]});
    t[two[i - 1]]--, t[two[i]]--;
  }
  int f2 = min(2, (int)one.size());
  for (int i = 0; i < f2; i++) {
    if (i == 0)
      ans.PB({one[i], two[0]}), t[two[0]]--;
    else
      ans.PB({one[i], two[two.size() - 1]}), t[two[two.size() - 1]]--;
  }
  priority_queue<pair<int, int>> q;
  for (auto x : two) {
    q.emplace(t[x], x);
  }
  two.shrink_to_fit();
  for (int i = f2; i < one.size(); i++) {
    int x = q.top().S;
    q.pop();
    if (t[x] == 0) {
      cout << "NO";
      return 0;
    }
    ans.PB({one[i], x});
    t[x]--;
    q.emplace(t[x], x);
  }
  cout << "YES"
       << " " << two.size() + f2 - 1 << '\n';
  cout << ans.size() << '\n';
  for (auto x : ans)
    cout << x.F + 1 << " " << x.S + 1 << " " << '\n';
}
```