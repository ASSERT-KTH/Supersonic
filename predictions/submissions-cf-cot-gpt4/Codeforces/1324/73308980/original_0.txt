The existing program is already quite optimized. However, there are a few minor changes we can make to improve it slightly:

1. Avoid multiplication operation: Instead of checking if `odd * even` is non-zero to output "NO", we can directly check if both `odd` and `even` are non-zero. This avoids the multiplication operation. Although the performance impact is negligible, if this code is part of a hot path (a part of the software that is frequently executed), it could potentially lead to some performance improvement.

2. Use Fast I/O: The current program already uses fast Input/Output (I/O) by calling `ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);`. These lines make I/O operations faster by not synchronizing C++ I/O streams with C I/O streams and untying cin from cout.

3. Avoiding unnecessary variables: The existing code is already efficient and does not use unnecessary variables.

The below code implements the above optimization:

```c++
#include <iostream>
using namespace std;
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  int t, n, tmp, odd, even;
  cin >> t;
  while (t--) {
    cin >> n;
    odd = even = 0;
    for (int i = 0; i < n; i++) {
      cin >> tmp;
      if (tmp & 1)
        odd++;
      else
        even++;
    }
    if (odd && even) // avoiding multiplication
      cout << "NO\n";
    else
      cout << "YES\n";
  }
  return 0;
}
```

Please note that the optimization of code depends heavily on the specific context and the hardware where the program will be running. The above suggestions provide general guidelines and may not result in significant performance improvements in this specific case. It's always a good idea to profile the software using tools like gprof or Valgrind to identify the actual performance bottlenecks.