The main optimization for this code is to break the loop as soon as it's clear that there are both even and odd numbers in the sequence (since the presence of both makes odd * even non-zero). As it stands, the original code iterates through the entire sequence regardless.

This optimization can be done by checking the 'odd' and 'even' counters immediately after incrementing them. If both are non-zero, we break the loop and print "NO".

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  int t, n, tmp, odd, even;
  cin >> t;
  while (t--) {
    cin >> n;
    odd = even = 0;
    for (int i = 0; i < n; i++) {
      cin >> tmp;
      if (tmp & 1) {
        odd++;
        if (even) break;  // Added this line
      } else {
        even++;
        if (odd) break;  // Added this line
      }
    }
    if (odd && even)
      cout << "NO\n";
    else
      cout << "YES\n";
  }
  return 0;
}
```

This optimized code will have faster execution times for sequences that contain both even and odd numbers, especially if the sequences are long, as it will break out of the loop as soon as it finds both an even and an odd number.