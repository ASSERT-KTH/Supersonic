The given code reads `t` test cases and for each test case, it reads `n` numbers and counts the number of odd and even numbers. If both odd and even numbers are present, it prints "NO", otherwise it prints "YES". 

Optimization Steps:

1) Instead of using two counters for odd and even numbers, we can use a single boolean variable. This will reduce the memory usage. 

2) As soon as we find both an odd and an even number, we can break the loop because we have enough information to print "NO". This will reduce the running time.

3) The condition `if (odd * even)` is equivalent to `if (odd && even)`. The latter is more readable and does not involve multiplication.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  int t, n, tmp;
  cin >> t;
  while (t--) {
    cin >> n;
    bool odd = false, even = false;
    for (int i = 0; i < n; i++) {
      cin >> tmp;
      if (tmp & 1)
        odd = true;
      else
        even = true;
      if (odd && even)
        break;
    }
    if (odd && even)
      cout << "NO\n";
    else
      cout << "YES\n";
  }
  return 0;
}
```

This version uses less memory by using boolean variables instead of integer counters. It also potentially runs faster, because it breaks out of the loop as soon as it finds both an odd and an even number.