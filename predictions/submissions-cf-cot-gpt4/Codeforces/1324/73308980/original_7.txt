The given C++ program reads a number of test cases, and for each test case, it reads a number of integers and checks whether there are both even and odd numbers among them. If there are both even and odd numbers, it outputs "NO", otherwise it outputs "YES". The program is already quite efficient, but there are a few small optimizations that can be made.

1. Remove the use of temporary variable tmp: The variable tmp is used to read each integer and check if it is even or odd. Instead of using this variable, you can check the evenness or oddness of the integers directly as you read them.

2. Stop reading and checking numbers as soon as you find both an even and an odd number: Once you have found both an even and an odd number, you know you will output "NO", so there is no need to read and check the rest of the numbers. You can break out of the loop as soon as you find both an even and an odd number.

3. Combine the two if conditions: You can combine the two if conditions into one, which checks if there is at least one odd number and one even number. If so, it outputs "NO", otherwise it outputs "YES".

Optimized program:

```cpp
#include <iostream>
using namespace std;
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  int t, n, odd, even;
  cin >> t;
  while (t--) {
    cin >> n;
    odd = even = 0;
    for (int i = 0; i < n; i++) {
      int num;
      cin >> num;
      if (num & 1)
        odd++;
      else
        even++;
      if (odd && even) {
        cout << "NO\n";
        break;
      }
    }
    if (!odd || !even)
      cout << "YES\n";
  }
  return 0;
}
```
Note: You need to ensure you break out of the inner loop only, not the entire test case loop. If you find both even and odd numbers within a test case, you need to skip to the next test case, not exit the program.