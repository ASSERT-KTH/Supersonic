Your program is already quite optimized, but there are a few micro-optimizations that can be done. 

1. Remove unnecessary initialization: In your program, the variables 'odd' and 'even' are being initialized to 0 before the loop starts. This initialization is not required as these variables are being set to 0 at the start of each iteration of the 'while' loop. So, this extra initialization can be removed.

2. Reduce number of output operations: In each iteration of the 'while' loop, either "NO\n" or "YES\n" is being output. This operation can be costly in terms of time. Instead of outputting in each iteration, we can store the results in a string and output the string after the 'while' loop ends.

3. Use bitwise operator instead of multiplication: In your program, you are checking the product of 'odd' and 'even' to decide whether to output "NO\n" or "YES\n". Instead of multiplication, you can use the bitwise AND operator (&) which is faster.

Here's your optimized code:

```cpp
#include <iostream>
#include <string>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif

  int t, n, tmp, odd, even;
  cin >> t;
  string result;
  while (t--) {
    cin >> n;
    odd = even = 0;
    for (int i = 0; i < n; i++) {
      cin >> tmp;
      if (tmp & 1)
        odd++;
      else
        even++;
    }
    result += (odd & even) ? "NO\n" : "YES\n";
  }
  cout << result;
  return 0;
}
```

Please note that these are micro-optimizations and may not significantly improve the running time or memory usage of your program. In fact, in some cases, micro-optimization can make the code harder to read and maintain. So, use them judiciously.
