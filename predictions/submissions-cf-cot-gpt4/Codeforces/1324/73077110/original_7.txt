This C++ program doesn't have many opportunities for optimization as it is already quite efficient. However, there are few small tweaks that can be made:

1. Move the declaration of `v`, `v1` and `ans` to the global scope. This avoids re-creating these variables every time `solve()` is called.
2. It's generally faster to preallocate memory for vector `v` and `v1` before the loop, reducing the cost of memory reallocation during runtime.
3. Use `std::ios::sync_with_stdio(false); std::cin.tie(NULL); std::cout.tie(NULL);` instead of defining `IOS` macro.
4. No need to check `if (it == v.end())`, since if `it == v.end()`, `v.end() - it` would be zero and `temp` would be zero as well. Removing this check can save some time.
5. The `T` variable is not needed since it's always 1. Thus, the while loop isn't necessary.

Here is the optimized version of the program:

```cpp
#include <bits/stdc++.h>
#define ll long long
#define deb(x) cout << #x << "=" << x << endl;
#define endl '\n'
#define M 1000000007
#define int long long
using namespace std;

ll n;
ll a[100005], b[100005];
std::vector<ll> v, v1;
ll ans = 0;

void solve() {
  cin >> n;
  v.reserve(n);
  v1.reserve(n);
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
  }
  for (int i = 0; i < n; ++i) {
    cin >> b[i];
    v.push_back(a[i] - b[i]);
    v1.push_back(b[i] - a[i]);
  }
  sort(v.begin(), v.end());
  sort(v1.begin(), v1.end());
  for (int i = 0; i < n; ++i) {
    auto it = upper_bound(v.begin(), v.end(), v1[i]);
    ll temp = v.end() - it;
    if (v1[i] < 0)
      temp--;
    ans += temp;
  }
  cout << ans / 2 << endl;
}

int32_t main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  solve();
  return 0;
}
```
This version of the program should execute faster and use less memory than the original one.