The program is already quite optimized in terms of running time and memory usage. However, there are minor optimizations that can be applied:

1. Removing the `#include <string>` library: This library is not used in the program and including it unnecessarily might increase the compilation time. Removing it will make the program slightly more memory efficient.

2. Using `'\n'` instead of `endl`: The `endl` manipulator in C++ not only inserts a newline but also flushes the output buffer, which can slow down the program if you are using it frequently. As we are not reading any input after writing output here, we can replace `endl` with `'\n'`, which will insert a newline without flushing the buffer.

3. Reducing scope of variable 'a': The scope of the variable 'a' can be reduced to the loop where it is being used.

Here is your optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  int n;
  cin >> n;
  for (int i = 0; i < n; i++) {
    int a;
    cin >> a;
    if (a == 1) {
      cout << "HARD" << '\n';
      return 0;
    }
  }
  cout << "EASY" << '\n';
  return 0;
}
```