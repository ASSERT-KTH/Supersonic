The given C++ program is already optimized in terms of running time and memory usage. It reads an integer, `n`, then reads `n` integers, breaking the loop and outputting "HARD" as soon as it encounters a `1`, and outputs "EASY" if it finishes the loop without encountering a `1`.

Here are a few minor optimizations that could be applied:

1. We can avoid flushing the output buffer using `endl`; we can use `'\n'` instead. While `endl` does the same thing as `'\n'`, it also flushes the output buffer, which can take some time. Since we don't need the output to be immediately visible, we can use `'\n'` for a slight performance improvement.

2. The variable `a` can be moved inside the loop to slightly reduce its scope. This is more about good coding practice than an optimization, but it can help avoid bugs.

Optimized code:

```C++
#include <iostream>
#include <string>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  int n;
  cin >> n;
  for (int i = 0; i < n; i++) {
    int a;
    cin >> a;
    if (a == 1) {
      cout << "HARD" << '\n';
      return 0;
    }
  }
  cout << "EASY" << '\n';
  return 0;
}
```
Remember, these are very minor optimizations and in most scenarios, the performance difference would be negligible. The original code is already pretty efficient.