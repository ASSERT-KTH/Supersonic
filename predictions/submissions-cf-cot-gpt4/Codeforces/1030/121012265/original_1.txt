The given program is actually quite optimized already. It uses the ios_base::sync_with_stdio(false) to unsynchronize the C++ standard streams with their C counterparts to gain extra performance. 

However, there is a small optimization we can make to reduce the memory usage. The variable 'a' which is declared outside the loop, can be declared inside the loop to reduce its scope and lifetime. This way, 'a' will be created and destroyed on each iteration, freeing up a little bit of memory each time. 

Here's the optimized code:

```cpp
#include <iostream>
#include <string>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  int n;
  cin >> n;
  for (int i = 0; i < n; i++) {
    int a;
    cin >> a;
    if (a == 1) {
      cout << "HARD" << endl;
      return 0;
    }
  }
  cout << "EASY" << endl;
  return 0;
}
```

However, note that this optimization is very minimal and may not have a significant impact on the overall performance of the program. In practice, where 'a' is declared would likely make no noticeable difference in terms of memory management, because the memory for a single integer is very small and modern operating systems handle this kind of memory allocation and deallocation very efficiently.