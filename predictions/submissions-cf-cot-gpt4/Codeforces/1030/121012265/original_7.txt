This program is already quite optimized. It reads a number of test cases and then reads each case. If it encounters a '1', it outputs "HARD" and terminates. If it reads all cases without encountering a '1', it outputs "EASY".

However, there are a few small changes that could be made:

1. Declare the variables as late as possible. Declaration of 'a' can be moved inside the loop. This change could potentially increase the performance of the program as the variable 'a' is not required to be in memory for the entire duration of the program.

2. Using '\n' instead of 'endl'. The 'endl' function in C++ outputs a newline and then flushes the output buffer. This can result in slower output if you're doing a lot of output operations, because each flush requires the operating system to do work. If all you want to do is output a newline, you can just output '\n' and it will be faster. In this case, the difference will be negligible, but it's a good habit to get into.

Here's the optimized version:

```cpp
#include <iostream>
#include <string>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  int n;
  cin >> n;
  for (int i = 0; i < n; i++) {
    int a;
    cin >> a;
    if (a == 1) {
      cout << "HARD" << '\n';
      return 0;
    }
  }
  cout << "EASY" << '\n';
  return 0;
}
```

Remember that the differences here will be minuscule and likely unnoticeable in practice. This code was already quite efficient.