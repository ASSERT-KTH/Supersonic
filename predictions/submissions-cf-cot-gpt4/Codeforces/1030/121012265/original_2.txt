This program is already quite optimized, but there are a few small changes that can be made to save a bit of memory and possibly a small amount of time.

1. The variable 'a' is declared outside of the loop. This means that the memory for 'a' is allocated for the entire duration of the program, even though it is only used inside the loop. By moving the declaration of 'a' inside the loop, we save a small amount of memory.

2. The 'endl' manipulator flushes the output buffer. In this case, it is unnecessary to flush the buffer every time we print a string. We can replace 'endl' with '\n' to avoid the unnecessary flush.

Optimized program:

```cpp
#include <iostream>
#include <string>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  int n;
  cin >> n;
  for (int i = 0; i < n; i++) {
    int a;
    cin >> a;
    if (a == 1) {
      cout << "HARD" << "\n";
      return 0;
    }
  }
  cout << "EASY" << "\n";
  return 0;
}
```

Please note that the optimizations made in this case are quite small and might not make a noticeable difference in this particular program due to its simplicity. The real benefit of such optimizations becomes noticeable when dealing with larger and more complex programs.