The given program is already optimized in terms of both memory usage and running time. It reads an integer `n` from the standard input and then reads `n` integers. It checks each input integer `a`, and if it encounters `a` equals to `1` it prints "HARD" and stops immediately. If there's no `a` equals to `1` in all `n` inputs, it prints "EASY". 

This program's time complexity is O(n) as the loop will run at most `n` times. Memory usage is constant as it only uses a few variables (`n`, `a`, `i`).

The `ios_base::sync_with_stdio(false);` line is already there to optimize the i/o operations. This line disables the synchronization between the C and C++ standard streams. By default, all standard streams are synchronized at the beginning of the program. Disabling the synchronization can speed up the i/o operations, but we need to be aware that we can't safely mix the C and C++ style i/o after this line.

The only possible optimization could be removing the `#include <string>` line as it is not used in the program. 

Here is the optimized program:

```
#include <iostream>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  int n, a;
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> a;
    if (a == 1) {
      cout << "HARD" << endl;
      return 0;
    }
  }
  cout << "EASY" << endl;
  return 0;
}
```