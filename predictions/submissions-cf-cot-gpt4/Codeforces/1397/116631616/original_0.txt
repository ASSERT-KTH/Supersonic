To optimize the given C++ code, the key point we should focus on is the nested for-loop that calculates power and sum in the main function. This is the most time-consuming part of the original code. Therefore, we can use a dynamic programming approach to reduce the number of repeated calculations.

Here is the step by step optimization:

1. Instead of calculating the power inside the inner loop, we could maintain a variable 'curr_pow' which is updated in each iteration by multiplying the previous value by 'i'. This will reduce the time complexity of the inner loop from O(n^2) to O(n).

2. The check for overflow can be moved outside the inner loop. We only need to check for overflow when updating 'curr_pow' and 'sum', not for every element in the array.

3. The original code calculates 'abs(arr[j] - pow(i, j))' even when 'dont' is true. We can avoid this by breaking the loop immediately after 'dont' is set to true.

4. The 'dont' flag can be removed by modifying the condition of the inner loop. If 'curr_pow' or 'sum' overflows, we can break the inner loop directly.

Here is the optimized code:

```cpp
#include "bits/stdc++.h"
using namespace std;
typedef long long ll;
#define all(arr) arr.begin(), arr.end()

template <typename T> void print(T &&t) { cout << t << '\n'; }

const ll INF = 1e18;

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int n;
    cin >> n;
    vector<ll> arr(n);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    sort(all(arr));
    ll ans = INF;
    for (ll i = 0; i < 1e5; i++) {
        ll sum = 0, curr_pow = 1;
        for (int j = 0; j < n; j++) {
            if (curr_pow > INF || sum > INF) {
                sum = INF;
                break;
            }
            sum += abs(arr[j] - curr_pow);
            curr_pow *= i;
        }
        ans = min(ans, sum);
    }
    print(ans);
}
```

Please note that the optimized code may still take a long time to run if 'n' or the elements in the array are very large, because the time complexity of the overall algorithm is still O(n^2). Further optimization would require a more efficient algorithm or data structure.