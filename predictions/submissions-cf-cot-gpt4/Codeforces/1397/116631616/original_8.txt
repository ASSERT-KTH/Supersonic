First, let's look at the main block of the code, where the optimization is needed.

1. Computation of power i^j is repeated twice. It is better to compute it once and store it in a variable for further usage. This will reduce the number of operations and hence, the running time.

2. The condition `(pow(i, j) < 0 or sum < 0)` seems to be unnecessary because `i`, `j`, and `sum` are all non-negative integers, so their powers or the sum will never be negative.

3. Instead of checking `(pow(i, j) > 1e18 or sum > 1e18)`, it's better to calculate `temp = pow(i, j)` and then check if `temp > 1e18 - sum`, because `sum + temp` is what we are actually concerned about. This will prevent possible overflows in `sum + temp`.

4. Using `pow(i, j)` is not efficient when j becomes large. This results in unnecessary computation time. We can instead maintain a running product that gets multiplied by i at each step.

Here is the optimized code:

```cpp
signed main() {
  speedUP();
  int n;
  cin >> n;
  vector<int> arr(n);
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }
  sort(all(arr));
  ll ans = 1e18;
  for (int i = 0; i < 1e5; i++) {
    ll sum = 0, dont = 0;
    ll p = 1; // Running product
    for (int j = 0; j < n; j++) {
      if (p > 1e18 || sum > 1e18 - p) {
        dont = 1;
        break;
      }
      sum += abs(arr[j] - p);
      p *= i; // Multiply the running product by i
    }
    if (!dont) {
      ans = min(ans, sum);
    }
  }
  print(ans);
}
```

This optimized version reduces repeated computations and unnecessary checks, and also avoids possible overflows. It also reduces the time complexity of the power operation from O(j) to O(1).