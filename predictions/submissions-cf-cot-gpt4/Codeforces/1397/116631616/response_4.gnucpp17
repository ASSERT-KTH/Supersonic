#include "bits/stdc++.h"
#include <random>
using namespace std;
using ll = long long;
#define fi first
#define se second
#define ld long double
#define pi 3.14159265
#define all(arr) arr.begin(), arr.end()
#define pb push_back
#define ReadInputFile()                                                        \
  freopen("input.txt", "r", stdin);                                            \
  freopen("output.txt", "w", stdout);
#define speedUP()                                                              \
  ios_base::sync_with_stdio(false);                                            \
  cin.tie(nullptr);
#define print2d(mat, n, m)                                                     \
  {                                                                            \
    for (int i = 0; i < n; i++) {                                              \
      for (int j = 0; j < m; j++) {                                            \
        cout << mat[i][j] << " ";                                              \
      }                                                                        \
      cout << endl;                                                            \
    }                                                                          \
  }
const long long int mod = 1e9 + 7;

// ... rest of the code ...

// Optimized version of rotateArray
vector<long long> rotateArray(vector<long long> &arr, long long d) {
  long long n = arr.size();
  vector<long long> tmp(n);
  for (long long i = 0; i < n; i++) {
    tmp[i] = arr[(n + i - d) % n];
  }
  return tmp;
}

signed main() {
  speedUP();
  int n;
  cin >> n;
  vector<int> arr(n);
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }
  sort(all(arr));
  long long ans = 1e18;
  for (int i = 0; i < 1e5; i++) {
    long long sum = 0, dont = 0, base = 1;
    for (int j = 0; j < n; j++) {
      if (j > 0) {
        if (base > 1e18 / i) { // check for overflow
          dont = 1;
          break;
        }
        base *= i;
      }
      if (sum > 1e18 - abs(arr[j] - base)) { // check for overflow
        dont = 1;
        break;
      }
      sum += abs(arr[j] - base);
    }
    if (!dont) {
      ans = min(ans, sum);
    }
  }
  cout << ans << '\n';
}