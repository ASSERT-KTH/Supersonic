#include <iostream>
#include <cmath>
#include <algorithm>
using namespace std;
using ll = long long;
const ll INF = 1e18;
void testcase();
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  testcase();
  return 0;
}
void testcase() {
  int n;
  cin >> n;
  ll max_num = 0, sum = 0;
  for (int i = 0; i < n; i++) {
    ll temp;
    cin >> temp;
    sum += temp;
    max_num = max(max_num, temp);
  }
  ll c = 1;
  ll newcount = 0;
  ll count = INF;
  unsigned int counter = (unsigned int)pow(max_num, 1.0 / (n - 1)) + n + 1;
  while (counter--) {
    newcount = 0;
    ll xx = 1;
    for (int i = 0; i < n; i++) {
      newcount += abs(xx - vec[i]);
      xx *= c;
      if (newcount > count)
        break;
    }
    if (newcount < count)
      count = newcount;
    if (count == 0)
      break;
    c++;
  }
  count = min({count, sum, (ll)n});
  cout << count << endl;
}