There are some ways to optimize the given code:

1. Reduce the number of calculations in the loop.

2. The "pow" function is an expensive function call in terms of computation. We can replace it with a multiplication operation which is less expensive.

3. We can move the `ans = min(ans, sum);` statement inside the inner loop and add a break condition to stop the loop when `sum` is no longer smaller than `ans`.

4. The sort function is not necessary in this program because we are not using any property of the sorted array in our algorithm. Removing it will decrease the complexity of the program.

Here is the optimized version of the code:

```cpp
#include <bits/stdc++.h>
#define ll long long
#define rep(i, s, e) for (int i = s; i < e; i++)
using namespace std;
const int maxn = 1e5 + 5;
ll n, c, sum, ans = 0, a[maxn], powVal;

int main() {
  ios::sync_with_stdio(0); 
  cin.tie(0); 
  cout.tie(0);
  cin >> n;
  rep(i, 0, n) cin >> a[i], ans += a[i];
  for (c = 1; c <= 1000000; c++) {
    sum = 0;
    powVal = 1;
    for (int i = 0; i < n; i++) {
      sum += abs(powVal - a[i]);
      powVal *= c;
      if (sum >= ans)
        break;
    }
    if(sum < ans){
        ans = sum;
    }
    else{
        break;
    }
  }
  cout << ans << endl;
  return 0;
}
```

Note: The `#define IOS` and `#define mem(a, n)` are removed because they are not used in the code. Also, the `const int INF` is removed because it is not used in the code.