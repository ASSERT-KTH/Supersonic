Here are some optimizations that we can make to the given code:

1. Remove unnecessary preprocessor commands: The preprocessor command `#include <bits/stdc++.h>` includes many unnecessary libraries that could slow down the compilation time.

2. Limit the use of global variables: In the given code, the variables `n`, `c`, `sum`, `ans` and `a` are all global variables. This can increase the memory usage of the program. We can put these variables inside the `main` function to limit their scope and reduce memory usage.

3. Use binary exponentiation: The expression `pow(c, i)` in the loop can be replaced with binary exponentiation, which is faster and more efficient. 

4. Use `std::ios_base::sync_with_stdio(false)` and `std::cin.tie(nullptr)` to speed up I/O operations.

Here's the optimized code:

```cpp
#include <iostream>
#include <algorithm>
#include <cmath>
#define ll long long
#define rep(i, s, e) for (int i = s; i < e; i++)

using namespace std;

const int maxn = 1e5 + 5;

ll binary_exp(ll base, ll exponent) {
    ll result = 1;
    while (exponent > 0) {
        if (exponent & 1)
            result *= base;
        base *= base;
        exponent >>= 1;
    }
    return result;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);

  ll n, c, sum, ans = 0;
  ll a[maxn];
  
  cin >> n;
  rep(i, 0, n) {
    cin >> a[i];
    ans += a[i];
  }
  sort(a, a + n);
  for (c = 1; c <= 1000000; c++) {
    sum = 0;
    for (int i = 0; i < n; i++) {
      sum += abs(binary_exp(c, i) - a[i]);
      if (sum >= ans)
        break;
    }
    ans = min(ans, sum);
  }
  cout << ans << endl;
  return 0;
}
```

Remember that the `binary_exp` function is a more efficient way to calculate `pow(c, i)`. Also, moving global variables inside `main` reduces memory usage and improves encapsulation.