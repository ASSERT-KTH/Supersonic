There are several optimization steps we can make here:

1. Instead of using `pow(c, i)`, we can calculate the power iteratively, this would be faster and save memory.
2. The `sum` is calculated from scratch for each `c`, instead, we can calculate the difference between the current `c` and the previous one and add it to the `sum`.
3. The `break` statement is useless here, since `sum` can only get larger after an iteration, so if `sum` is already larger than `ans` once, it will be for all future iterations as well.
4. We could exit the loop as soon as `sum` exceeds `ans`, since it will not get smaller for larger `c`.

Here is the optimized program:

```c++
#include <bits/stdc++.h>
#define ll long long
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) a *b / (__gcd(a, b))
#define rep(i, s, e) for (int i = s; i < e; i++)
#define mem(a, n) memset(a, n, sizeof a)
#define IOS                                                                    \
  ios::sync_with_stdio(0);                                                     \
  cin.tie(0);                                                                  \
  cout.tie(0);
using namespace std;
const int INF = 0x3f3f3f3f;
const int maxn = 1e5 + 5;
ll n, c, sum, ans = 0, a[maxn];
int main() {
  IOS;
  cin >> n;
  rep(i, 0, n) cin >> a[i], ans += a[i];
  sort(a, a + n);
  ll prev_pow = 1;
  for (c = 1; c <= 1000000; c++) {
    if(c > 1) {
      for(int i = 0; i < n; i++) {
        sum += abs(prev_pow * c - a[i]) - abs(prev_pow - a[i]);
        if(sum >= ans) {
          cout << ans << endl;
          return 0;
        }
      }
    }
    ans = min(ans, sum);
    prev_pow *= c;
  }
  cout << ans << endl;
  return 0;
}
```
Please note that this optimized version might overflow for large inputs. To avoid this, you could use `__int128` or `__float128` (GCC only) or use a library that supports arbitrary precision arithmetic.