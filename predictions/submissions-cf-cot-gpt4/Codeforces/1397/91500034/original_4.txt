Let's analyze the code and identify areas which can be optimized:

1. The major time complexity comes from the nested for loop where for each 'c' from 1 to 1000000, we calculate the sum of absolute difference between 'c' power 'i' and 'a[i]'. We can optimize this part by reducing the upper limit of the outer loop. As we're sorting the array 'a' and then calculating the sum, after a certain point the value of 'c' power 'i' will always be larger than 'a[i]', thus increasing the sum. Hence, we can break out of the loop as soon as we see that 'c' power 'i' is greater than the maximum element in 'a'. This will drastically reduce the number of iterations for the outer loop.

2. The inner loop has a break condition which checks if 'sum' is greater than 'ans'. However, 'ans' is being updated in each iteration of the outer loop. So, we can optimize this by keeping track of a 'prev_ans' which stores the value of 'ans' from the previous iteration. We update 'prev_ans' only when 'ans' actually gets updated i.e., when 'sum' is less than 'ans'.

3. Also, the pow function is computationally expensive, we can replace it with repeated multiplication which will be faster. 

4. The 'mem' macro is not used in the program, so we can remove that.

Let's optimize the code according to these points:

```cpp
#include <bits/stdc++.h>
#define ll long long
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) a *b / (__gcd(a, b))
#define rep(i, s, e) for (int i = s; i < e; i++)
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
using namespace std;
const int INF = 0x3f3f3f3f;
const int maxn = 1e5 + 5;
ll n, c, sum, ans = 0, a[maxn], max_val = 0;
int main() {
  IOS;
  cin >> n;
  rep(i, 0, n) {
    cin >> a[i]; 
    ans += a[i];
    max_val = max(max_val, a[i]); // calculate the maximum value in 'a'
  }
  sort(a, a + n);
  ll prev_ans = ans;
  for (c = 1; c * c <= max_val; c++) { // reduce the upper limit of outer loop
    sum = 0;
    ll pow_val = 1; // to store value of 'c' power 'i'
    for (int i = 0; i < n; i++) {
      sum += abs(pow_val - a[i]);
      pow_val *= c; // calculate power using repeated multiplication
      if (sum >= prev_ans)
        break;
    }
    if(sum < ans) {
      ans = min(ans, sum);
      prev_ans = ans; // update 'prev_ans' when 'ans' is updated
    }
  }
  cout << ans << endl;
  return 0;
}
```
This program should have lesser running time as well as memory usage than the original one.