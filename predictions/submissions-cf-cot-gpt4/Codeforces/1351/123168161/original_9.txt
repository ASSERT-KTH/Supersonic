Optimization Steps:
1. We can remove the `#include <bits/stdc++.h>` and replace it with specific includes. The `<bits/stdc++.h>` header file includes quite a lot of headers, many of which you probably won't use, thus increasing the compilation time.

2. The `std::endl` not only inserts a newline, but it also flushes the output buffer. In this context, flushing the buffer is not necessary. We can replace it with '\n' to reduce the time taken by the program.

3. If we want to optimize for memory, we can avoid using extra variables `max1` and `max2`. We can directly use `std::max` and `std::min` in the if condition.

4. Instead of using `std::cin` and `std::cout`, we can use faster input-output methods by using `scanf` and `printf`.

The optimized program after applying these steps is as follows:

```cpp
#include <iostream>
#include <algorithm>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int t;
  scanf("%d", &t);
  while (t--) {
    int a1, b1, a2, b2;
    scanf("%d %d %d %d", &a1, &b1, &a2, &b2);
    if (max(a1, b1) == max(a2, b2) && min(a1, b1) + min(a2, b2) == max(a1, b1))
      printf("YES\n");
    else
      printf("NO\n");
  }
  return 0;
}
```

Please note that the `ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` are used to speed up the cin/cout operations by decoupling C++ standard streams from their C counterparts. However, in this case, since we are using `scanf` and `printf` instead of `cin` and `cout`, these lines are not necessary, but I've included them for completeness.