The given program is quite efficient. However, there are small modifications that we can make to further optimize it. 

1. Instead of using the `bits/stdc++.h` header, we will include only the headers that we need. This will reduce the compilation time because `bits/stdc++.h` includes a lot of unnecessary stuff. In this case, we need `iostream` and `algorithm`.

2. We are currently calculating minimum and maximum for each pair, twice. We can calculate it once and store the values for later use.

3. We can use '\n' instead of `endl` to avoid unnecessary flushing of the buffer, which can slow down the program.

Now, let's apply these modifications to the program.

```cpp
#include <iostream>
#include <algorithm>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int t;
    cin >> t;
    while (t--) {
        int a1, b1, a2, b2;
        cin >> a1 >> b1 >> a2 >> b2;
        int min1 = min(a1, b1), min2 = min(a2, b2);
        int max1 = max(a1, b1), max2 = max(a2, b2);
        if (max1 == max2 && min1 + min2 == max1)
            cout << "YES" << '\n';
        else
            cout << "NO" << '\n';
    }
    return 0;
}
```

This optimized version of the program performs the same task, but with a smaller memory footprint and less computing time.