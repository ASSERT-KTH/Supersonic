#include <unordered_set>
#include <vector>
#include <iostream>
#include <string>

typedef long long ll;

const int base = 257;
const int mod = 1e9 + 7;
const int N = 1e6;

std::unordered_set<ll> st;
ll f[N];

void init() {
    f[0] = 1;
    for (int i = 1; i < N; i++)
        f[i] = f[i - 1] * base % mod;
}

ll get_hash(const std::string& s) {
    ll val = 0;
    for (int i = 0; i < s.size(); i++) {
        val = (val * base + s[i]) % mod;
    }
    return val;
}

bool check(const std::string& t) {
    ll original_hash = get_hash(t);
    for (int i = 0; i < t.size(); i++) {
        char original_char = t[i];
        for (char c = 'a'; c <= 'c'; c++) {
            if (c != original_char) {
                std::string copy(t);
                copy[i] = c;
                ll new_hash = get_hash(copy);
                if (st.find(new_hash) != st.end())
                    return true;
            }
        }
    }
    return false;
}

int main() {
    init();
    int n, m;
    std::cin >> n >> m;

    std::string s;
    s.reserve(N);
    for (int i = 0; i < n; i++) {
        std::cin >> s;
        st.insert(get_hash(s));
    }

    std::string t;
    t.reserve(N);
    for (int i = 0; i < m; i++) {
        std::cin >> t;
        std::cout << (check(t) ? "YES" : "NO") << std::endl;
    }

    return 0;
}