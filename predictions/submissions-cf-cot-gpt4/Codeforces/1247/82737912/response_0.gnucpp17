#include <iostream>
#include <vector>

using namespace std;

typedef long long ll;
typedef vector<string> vecs;
typedef vector<vector<vector<ll>>> vec3;
typedef vector<vector<vector<vector<ll>>>> vec4;

const ll mod = 1000000007;

ll power(ll x, ll y) {
    ll res = 1ll;
    while (y > 0) {
        if (y & 1)
            res = res * x;
        y >>= 1;
        x = x * x;
    }
    return res;
}

void solve(vecs &arr, vec3 &cum, vec4 &dp, ll n, ll m) {
    for (int i = n - 1; i >= 0; i--) {
        for (int j = 0; j < m; j++) {
            cum[i][j][0] = cum[i + 1][j][0];
            if (arr[i][j] == 'R')
                cum[i][j][0]++;
        }
    }
    for (int j = m - 1; j >= 0; j--) {
        for (int i = 0; i < n; i++) {
            cum[i][j][1] = cum[i][j + 1][1];
            if (arr[i][j] == 'R')
                cum[i][j][1]++;
        }
    }
    for (int i = n - 1; i >= 0; i--) {
        for (int j = m - 1; j >= 0; j--) {
            if (i == n - 1 || j == m - 1) {
                if (i == n - 1 && j == m - 1)
                    dp[i][j][0][0] = dp[i][j][0][1] = arr[i][j] == 'R' ? 0 : 1;
                else if (arr[i][j] != 'R')
                    dp[i][j][0][0] = dp[i][j][0][1] =
                        (dp[i + 1][j][0][0] + dp[i][j + 1][0][1]) % mod;
            } else {
                dp[i][j][0][0] =
                    (dp[i + 1][j + 1][1][0] -
                     dp[n - cum[i][j][0] + (arr[i][j] == 'R' ? 1 : 0)][j + 1][1][0] +
                     dp[i + 1][j + 1][1][1] - dp[i + 1][m - cum[i][j][1]][1][1] +
                     (2ll * mod)) %
                    mod;
                dp[i][j][0][1] =
                    (dp[i + 1][j + 1][1][0] - dp[n - cum[i][j][0]][j + 1][1][0] +
                     dp[i + 1][j + 1][1][1] -
                     dp[i + 1][m - cum[i][j][1] + (arr[i][j] == 'R' ? 1 : 0)][1][1] +
                     (2ll * mod)) %
                    mod;
            }
            dp[i][j][1][0] = (dp[i + 1][j][1][0] + dp[i][j][0][0]) % mod;
            dp[i][j][1][1] = (dp[i][j + 1][1][1] + dp[i][j][0][1]) % mod;
        }
    }
    cout << dp[0][0][0][1] << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);                                                              
    cout.tie(NULL);
    ll n, m;
    cin >> n >> m;
    vecs arr(n);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    vec3 cum(n + 1, vector<vector<ll>>(m + 1, vector<ll>(2, 0)));
    vec4 dp(n + 1, vector<vector<vector<ll>>>(m + 1, vector<vector<ll>>(2, vector<ll>(2, 0))));
    solve(arr, cum, dp, n, m);
}