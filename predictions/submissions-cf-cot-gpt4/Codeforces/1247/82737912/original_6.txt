This C++ program is already pretty optimized. However, there are a few small changes that can be made to potentially improve performance:

1. `ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);`: These lines speed up C++ I/O, but if you're mixing C and C++ I/O (i.e., using both printf/scanf and cin/cout), it can cause issues. In your case, you're only using C++ I/O, so it's fine. However, you only need to call this once, so it should be in main rather than a #define.

2. `#define ll long long int`: Typedef would be a better choice here for type aliasing as it is the C++ way. `typedef long long int ll;`

3. `#define fr(i, a, b)` and `#define frn(i, a, b)`: These macros are unnecessary and make the code harder to read. Use regular for loops instead.

4. `#define __`: This is a bad practice. Never use double underscore in identifiers. The C++ Standard reserves all identifiers that contain a double underscore, or start with an underscore followed by an uppercase letter, for implementation (compiler, standard library) use.

5. The `power` function can be optimized using modulo properties. The complexity of power function can be reduced from O(n) to O(log(n)). 

6. Avoid using `#define mod 1000000007`. It's better to use `const ll mod = 1000000007;`.

7. Avoid using `bits/stdc++.h` as it includes all of the standard library and increases compile times. Include only the headers that you need.

Here's the optimized version of your program:

```C++
#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

typedef long long int ll;
typedef vector<string> ve;
const ll mod = 1000000007;

ll power(ll x, ll y) {
  ll res = 1ll;
  x = x % mod;
  while (y > 0) {
    if (y & 1)
      res = (res*x) % mod;
    y = y>>1; 
    x = (x*x) % mod;  
  }
  return res;
}

void solve() {
  // Your code...
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  ll tes = 1;
  while (tes--) {
    solve();
  }
}
```

Please replace "// Your code..." with your actual code.