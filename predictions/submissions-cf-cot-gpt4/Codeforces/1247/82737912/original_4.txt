This code is already quite optimized. However, there are still some small modifications that can be made to improve it:

1. Unused Macros: There are some macros in the code which are not used in the program. They are just increasing the size of the code without any benefits. We can remove these unused macros to make our code cleaner.

2. Unnecessary type casting: In power function there is unnecessary type casting of 1 to 1ll. We can remove it.

3. Unnecessary use of std::endl: std::endl is used, which is slower than '\n' because it forces a flush operation, which can be expensive in terms of time. So we can replace std::endl with '\n'.

4. Avoid using 'using namespace std': This is not an optimization but a good practice. It is recommended to avoid using the entire std namespace to prevent naming conflicts.

Now let's incorporate these modifications to the code:

```cpp
#include <bits/stdc++.h>
#define ll long long int
#define mod 1000000007
#define ve vector
#define sz(a) (int)((a).size())
const ll inf = 9e18;

ll tes, n, m;
ve<std::string> arr(2e3 + 1);
ve<ve<ve<ll>>> cum(2e3 + 1, ve<ve<ll>>(2e3 + 1, ve<ll>(2, 0)));
ve<ve<ve<ve<ll>>>> dp(2e3 + 1,
                      ve<ve<ve<ll>>>(2e3 + 1, ve<ve<ll>>(2, ve<ll>(2, 0))));
                      
ll power(ll x, ll y) {
  ll res = 1;
  while (y > 0) {
    if (y & 1)
      res = res * x;
    y >>= 1;
    x = x * x;
  }
  return res;
}

void solve() {
  std::cin >> n >> m;
  for (int i = 0; i < n; i++)
    std::cin >> arr[i];
  for (int i = n - 1; i > -1; i--) {
    for (int j = 0; j < m; j++) {
      cum[i][j][0] = cum[i + 1][j][0];
      if (arr[i][j] == 'R')
        cum[i][j][0]++;
    }
  }
  for (int j = m - 1; j > -1; j--) {
    for (int i = 0; i < n; i++) {
      cum[i][j][1] = cum[i][j + 1][1];
      if (arr[i][j] == 'R')
        cum[i][j][1]++;
    }
  }
  for (int i = n - 1; i > -1; i--) {
    for (int j = m - 1; j > -1; j--) {
      if (i == n - 1 || j == m - 1) {
        if (i == n - 1 && j == m - 1)
          dp[i][j][0][0] = dp[i][j][0][1] = arr[i][j] == 'R' ? 0 : 1;
        else if (arr[i][j] != 'R')
          dp[i][j][0][0] = dp[i][j][0][1] =
              (dp[i + 1][j][0][0] + dp[i][j + 1][0][1]) % mod;
      } else {
        dp[i][j][0][0] =
            (dp[i + 1][j + 1][1][0] -
             dp[n - cum[i][j][0] + (arr[i][j] == 'R' ? 1 : 0)][j + 1][1][0] +
             dp[i + 1][j + 1][1][1] - dp[i + 1][m - cum[i][j][1]][1][1] +
             (2ll * mod)) %
            mod;
        dp[i][j][0][1] =
            (dp[i + 1][j + 1][1][0] - dp[n - cum[i][j][0]][j + 1][1][0] +
             dp[i + 1][j + 1][1][1] -
             dp[i + 1][m - cum[i][j][1] + (arr[i][j] == 'R' ? 1 : 0)][1][1] +
             (2ll * mod)) %
            mod;
      }
      dp[i][j][1][0] = (dp[i + 1][j][1][0] + dp[i][j][0][0]) % mod;
      dp[i][j][1][1] = (dp[i][j + 1][1][1] + dp[i][j][0][1]) % mod;
    }
  }
  std::cout << dp[0][0][0][1] << '\n';
}

int main(void) {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  tes = 1;
  while (tes--) {
    solve();
  }
}
```
