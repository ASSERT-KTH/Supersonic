The given code is a dynamic programming solution for a problem and it is already optimized in many ways. However, there are still some improvements that can be made in terms of readability, maintainability, and slight performance improvement.

Here are the steps that can be followed for optimization:

1. Preprocessor directive: #include <bits/stdc++.h> is actually a GCC-specific header file that includes almost all Standard Library headers. This convenience comes at a cost: it greatly increases compilation time and it's not portable. We should replace this with the specific headers that are needed.

2. Unnecessary use of macros: Macros like #define are processed by the preprocessor before compilation. It replaces all instances of the macro in the code with its definition. This can lead to unwanted side effects and makes the code harder to read and debug. We should replace macros with constant variables, inline functions, or use the auto keyword, as appropriate.

3. Functions: The power function can be replaced with the inbuilt pow() function for readability.

4. Variable declaration: Variables should be declared as close as possible to where they are used. This makes the code easier to read and can also improve performance.

5. Memory usage: The code is using 4-D vector dp of size 2e3+1 which is taking a huge amount of memory. The dimensions of the vector 'dp' can be reduced by noting that the current state only depends on the next state. So we can reduce the dimensions of 'dp' from 4 to 2, and use two 2-D arrays 'dp_curr' and 'dp_next' to store the current and next states respectively.

6. The standard main function signature in C++ is int main(), not int32_t main(void).

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

const long long mod = 1e9 + 7;
const long long inf = 9e18;
const long double pi = 2 * acos(0.0);
vector<string> arr(2e3 + 1);
vector<vector<vector<long long>>> cum(2e3 + 1, vector<vector<long long>>(2e3 + 1, vector<long long>(2, 0)));
vector<vector<long long>> dp_curr(2e3 + 1, vector<long long>(2, 0));
vector<vector<long long>> dp_next(2e3 + 1, vector<long long>(2, 0));

void solve() {
    long long n, m;
    cin >> n >> m;
    for(int i = 0; i < n; i++)
        cin >> arr[i];
    for(int i = n - 1; i >= 0; i--) {
        for(int j = 0; j < m; j++) {
            cum[i][j][0] = cum[i + 1][j][0];
            if(arr[i][j] == 'R')
                cum[i][j][0]++;
        }
    }
    for(int j = m - 1; j >= 0; j--) {
        for(int i = 0; i < n; i++) {
            cum[i][j][1] = cum[i][j + 1][1];
            if(arr[i][j] == 'R')
                cum[i][j][1]++;
        }
    }
    for(int i = n - 1; i >= 0; i--) {
        for(int j = m - 1; j >= 0; j--) {
            if(i == n - 1 || j == m - 1) {
                if(i == n - 1 && j == m - 1)
                    dp_curr[0][0] = dp_curr[0][1] = arr[i][j] == 'R' ? 0 : 1;
                else if(arr[i][j] != 'R')
                    dp_curr[0][0] = dp_curr[0][1] = (dp_next[0][0] + dp_curr[0][1]) % mod;
            } else {
                dp_curr[0][0] = (dp_next[1][0] - dp_next[n - cum[i][j][0] + (arr[i][j] == 'R' ? 1 : 0)][0] + dp_next[1][1] - dp_next[i + 1][m - cum[i][j][1]][1] + (2ll * mod)) % mod;
                dp_curr[0][1] = (dp_next[1][0] - dp_next[n - cum[i][j][0]][0] + dp_next[1][1] - dp_next[i + 1][m - cum[i][j][1] + (arr[i][j] == 'R' ? 1 : 0)][1] + (2ll * mod)) % mod;
            }
            dp_curr[1][0] = (dp_next[1][0] + dp_curr[0][0]) % mod;
            dp_curr[1][1] = (dp_curr[1][1] + dp_curr[0][1]) % mod;
        }
        dp_next = dp_curr;
    }
    cout << dp_curr[0][1] << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int tests = 1;
    while(tests--) {
        solve();
    }
    return 0;
}
```
Note: The optimized code may not show significant performance improvement as much of the work done by the program is necessary for its functionality. The main improvement here is in terms of code clarity and decreased memory usage by reducing the dimensions of 'dp' from 4 to 2. This should also lead to a small improvement in performance.