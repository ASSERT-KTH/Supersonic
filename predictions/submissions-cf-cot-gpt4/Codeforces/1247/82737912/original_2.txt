The given code is already quite optimized in terms of standard C++ programming. However, it can still be optimized further by minimizing the use of macros, which can make the code more readable and easier to debug. Macros can be replaced with inline functions and constant expressions. 

Also, the `power` function can be optimized to reduce computation time. In the current implementation, the `power` function is using a loop to calculate the power of a number. This can be optimized by using the `pow` function from the C++ standard library.

Here are the steps to optimize the code:

1. Replace the macros with inline functions and constant expressions.
2. Replace the `power` function with the `pow` function from the C++ standard library.
3. Remove unnecessary macros like `__` and `deci` which are not used in the code.

Here is the optimized code based on these steps:

```cpp
#include <bits/stdc++.h>
#include <iostream>

using namespace std;
using ll = long long;
using ld = long double;
using ve = vector;
using pii = pair<int, int>;
using pll = pair<ll, ll>;

constexpr ll mod = 1000000007;
constexpr ll inf = 9e18;
constexpr ld pi = 2 * acos(0.0);

inline void fastio() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
}

inline ll power(ll x, ll y) {
  return pow(x, y);
}

inline void inarr(vector<ll> &arr, int n) {
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }
}

inline void outarr(const vector<ll> &arr, int n) {
  for (int i = 0; i < n; i++) {
    cout << arr[i] << ' ';
  }
}

void solve() {
  // ... same as before ...
}

int main(void) {
  fastio();
  int tes = 1;
  while (tes--) {
    solve();
  }
}
```
Note: This optimization may not significantly improve the run-time or memory usage but it improves the readability of the code and makes it easier to debug and maintain.