#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

const long long mod = 1e9 + 7;
const long long inf = 9e18;
const long double pi = 2 * acos(0.0);
vector<string> arr(2e3 + 1);
vector<vector<vector<long long>>> cum(2e3 + 1, vector<vector<long long>>(2e3 + 1, vector<long long>(2, 0)));
vector<vector<long long>> dp_curr(2e3 + 1, vector<long long>(2, 0));
vector<vector<long long>> dp_next(2e3 + 1, vector<long long>(2, 0));

void solve() {
    long long n, m;
    cin >> n >> m;
    for(int i = 0; i < n; i++)
        cin >> arr[i];
    for(int i = n - 1; i >= 0; i--) {
        for(int j = 0; j < m; j++) {
            cum[i][j][0] = cum[i + 1][j][0];
            if(arr[i][j] == 'R')
                cum[i][j][0]++;
        }
    }
    for(int j = m - 1; j >= 0; j--) {
        for(int i = 0; i < n; i++) {
            cum[i][j][1] = cum[i][j + 1][1];
            if(arr[i][j] == 'R')
                cum[i][j][1]++;
        }
    }
    for(int i = n - 1; i >= 0; i--) {
        for(int j = m - 1; j >= 0; j--) {
            if(i == n - 1 || j == m - 1) {
                if(i == n - 1 && j == m - 1)
                    dp_curr[0][0] = dp_curr[0][1] = arr[i][j] == 'R' ? 0 : 1;
                else if(arr[i][j] != 'R')
                    dp_curr[0][0] = dp_curr[0][1] = (dp_next[0][0] + dp_curr[0][1]) % mod;
            } else {
                dp_curr[0][0] = (dp_next[1][0] - dp_next[n - cum[i][j][0] + (arr[i][j] == 'R' ? 1 : 0)][0] + dp_next[1][1] - dp_next[i + 1][m - cum[i][j][1]][1] + (2ll * mod)) % mod;
                dp_curr[0][1] = (dp_next[1][0] - dp_next[n - cum[i][j][0]][0] + dp_next[1][1] - dp_next[i + 1][m - cum[i][j][1] + (arr[i][j] == 'R' ? 1 : 0)][1] + (2ll * mod)) % mod;
            }
            dp_curr[1][0] = (dp_next[1][0] + dp_curr[0][0]) % mod;
            dp_curr[1][1] = (dp_curr[1][1] + dp_curr[0][1]) % mod;
        }
        dp_next = dp_curr;
    }
    cout << dp_curr[0][1] << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int tests = 1;
    while(tests--) {
        solve();
    }
    return 0;
}