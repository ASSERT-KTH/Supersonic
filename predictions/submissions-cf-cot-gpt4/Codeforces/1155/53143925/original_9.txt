Let's see how we can optimize this code:

1. Replace the recursive gcd function with an iterative one. The recursive version can cause stack overflow if the depth of recursion is too large. The iterative version doesn't have this problem and is generally faster.

2. Instead of using the `scanf` and `printf` functions for input/output, use the `cin` and `cout` functions, which are more C++ idiomatic. Also use `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` to improve the speed of `cin` and `cout`.

3. The `flag` variable is not used anywhere in the code, so remove it.

4. The `num` array can be replaced with a single variable `prev` to store the previous `x[i]` value. Then, the difference `x[i] - prev` can be used directly, which saves memory.

5. The `x` array is only used to store input and output `x[1]`. So it can be replaced with a single variable.

Here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <set>
#include <string>
#include <vector>
using namespace std;
typedef long long LL;
const int maxn = 3 * 1e5 + 10;
LL p[maxn];
LL gcd(LL x, LL y) { while (y) { LL t = x % y; x = y; y = t; } return x; }
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, m;
  LL x1, prev, mid;
  cin >> n >> m;
  cin >> x1;
  cin >> prev;
  mid = prev - x1;
  for (int i = 2; i < n; i++) {
    LL xi;
    cin >> xi;
    mid = gcd(mid, xi - prev);
    prev = xi;
  }
  for (int i = 0; i < m; i++) {
    cin >> p[i];
  }
  for (int i = 0; i < m; i++) {
    if (mid % p[i] == 0) {
      cout << "YES\n" << x1 << " " << i+1 << "\n";
      return 0;
    }
  }
  cout << "NO\n";
  return 0;
}
```

In the code above, the complexity is still O(n + m) as in the original code, but the memory usage is reduced and the risk of stack overflow is eliminated. Also, the input/output operations are faster.