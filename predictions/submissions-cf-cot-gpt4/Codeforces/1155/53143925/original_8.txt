The main optimization here is to use I/O functions that are faster than scanf() and printf() in C++. The standard C++ I/O functions (cin, cout) are considerably slower than C I/O (scanf, printf) due to their synchronization with C's stdio buffers. We can turn this synchronization off using "ios_base::sync_with_stdio(false)" to make cin/cout to work as fast as scanf/printf. 

Another small optimization is to use pre-increment (++i) instead of post-increment (i++) in loops. Pre-increment is generally faster than post-increment in C++ because post-increment needs to create a copy of the object to return, which takes extra time.

The optimized version of the given code is as follows:

```c++
#include <algorithm>
#include <iostream>
#include <set>
#include <string>
#include <vector>
using namespace std;
typedef long long LL;
const int maxn = 3 * 1e5 + 10;
LL x[maxn], p[maxn], num[maxn];
LL gcd(LL x, LL y) { return y == 0 ? x : gcd(y, x % y); }
int main() {
  ios_base::sync_with_stdio(false); // turn off synchronization
  cin.tie(NULL); // untie cin from cout
  int n, m, flag = 0;
  cin >> n >> m;
  for (int i = 1; i <= n; ++i) { // pre-increment instead of post-increment
    cin >> x[i];
    num[i] = x[i] - x[i - 1];
  }
  for (int i = 1; i <= m; ++i) { // pre-increment instead of post-increment
    cin >> p[i];
  }
  LL mid = num[2];
  for (int i = 3; i <= n; ++i) { // pre-increment instead of post-increment
    mid = gcd(mid, num[i]);
  }
  for (int i = 1; i <= m; ++i) { // pre-increment instead of post-increment
    if (mid % p[i] == 0) {
      cout << "YES\n" << x[1] << " " << i << "\n";
      return 0;
    }
  }
  cout << "NO\n";
  return 0;
}
```

Remember that these improvements are relatively minor and may not significantly impact the overall performance of your code. The main performance of your code depends on the efficiency of your algorithms and data structures.