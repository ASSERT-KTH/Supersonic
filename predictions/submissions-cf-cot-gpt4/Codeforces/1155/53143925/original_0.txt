Step-by-step optimization:

1. Use `std::ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` to speed up the execution. The first one is to untie `cin` from `cout` to speed up `iostream`. The second one is to untie `cin` from `cout` to make sure they are not waited for each other.

2. Use `printf` and `scanf` only: Mixing `cin`/`cout` with `scanf`/`printf` can slow down the execution because it requires some additional synchronization every time the stream is switched. So, it's better to use only one type of them. 

3. Replace the `printf("YES\n");` and `printf("NO\n");` with `puts("YES");` and `puts("NO");`. The `puts` function is faster because it doesn't need to parse the formatted string.

4. Avoid unnecessary calculations in the loop. The `mid` variable can be calculated while reading the input values.

5. Use the `break` statement: When we find a valid `p[i]`, we can break the loop.

Here is the optimized program:

```cpp
#include <cstdio>

typedef long long LL;
const int maxn = 3 * 1e5 + 10;
LL x[maxn], num[maxn], p[maxn];

LL gcd(LL x, LL y) { 
    return y == 0 ? x : gcd(y, x % y); 
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
  
    int n, m;
    scanf("%d %d", &n, &m);
  
    for (int i = 1; i <= n; i++) {
        scanf("%lld", &x[i]);
        if (i > 1)
            num[i - 1] = x[i] - x[i - 1];
    }
  
    LL mid = num[1];
    for (int i = 2; i < n; i++) {
        mid = gcd(mid, num[i]);
    }
  
    for (int i = 1; i <= m; i++) {
        scanf("%lld", &p[i]);
        if (mid % p[i] == 0) {
            puts("YES");
            printf("%lld %d\n", x[1], i);
            return 0;
        }
    }
  
    puts("NO");
    return 0;
}
```
