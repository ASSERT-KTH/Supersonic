#include <algorithm>
#include <cstdio>
#include <iostream>
#include <set>
#include <string>
#include <vector>
using namespace std;
typedef long long LL;
const int maxn = 3 * 1e5 + 10;
LL x[maxn], p[maxn], num[maxn];

LL binary_gcd(LL u, LL v) {
  if (u == v)
    return u;
  if (u == 0)
    return v;
  if (v == 0)
    return u;
  if (~u & 1)
    if (v & 1)
      return binary_gcd(u >> 1, v);
    else
      return binary_gcd(u >> 1, v >> 1) << 1;
  if (~v & 1)
    return binary_gcd(u, v >> 1);
  if (u > v)
    return binary_gcd((u - v) >> 1, v);
  return binary_gcd((v - u) >> 1, u);
}

int main() {
  int n, m, flag = 0;
  scanf("%d %d", &n, &m);
  for (int i = 1; i <= n; i++) {
    scanf("%lld", &x[i]);
    num[i] = x[i] - x[i - 1];
  }
  for (int i = 1; i <= m; i++) {
    scanf("%lld", &p[i]);
  }
  LL mid = num[2];
  for (int i = 3; i <= n; i++) {
    mid = binary_gcd(mid, num[i]);
  }
  for (int i = 1; i <= m; i++) {
    if (mid % p[i] == 0) {
      printf("YES\n");
      printf("%lld %d\n", x[1], i);
      return 0;
    }
  }
  printf("NO\n");
  return 0;
}