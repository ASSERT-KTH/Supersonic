This C++ program can be optimized in terms of memory and running time as follows:

1. **Don't use the `std::set` and `std::string` headers**: Since they are not being used in this program, they can be removed to reduce the memory footprint.

2. **Use `std::ios_base::sync_with_stdio(false);`:** This line of code will make the I/O operations faster, which can be beneficial if there is a lot of I/O happening in the program.

3. **Use `std::cin.tie(NULL);`:** This line of code is used to untie `cin` from `cout`. By default, before every I/O operation, all the output buffers are flushed. This line of code will stop this unnecessary flushing, making the program faster.

4. **Reduce the number of variables**: The variable `flag` is not being used in the program, so it can be removed.

5. **Reduce the number of function calls**: Instead of calling `printf` twice in the loop, we can call it only once, which will make the program faster.

Here is the optimized C++ program:

```cpp
#include <algorithm>
#include <cstdio>
#include <vector>
using namespace std;
typedef long long LL;
const int maxn = 3 * 1e5 + 10;
LL x[maxn], p[maxn], num[maxn];

LL gcd(LL x, LL y) { 
    return y == 0 ? x : gcd(y, x % y); 
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
  
    int n, m;
    scanf("%d %d", &n, &m);
    for (int i = 1; i <= n; i++) {
        scanf("%lld", &x[i]);
        num[i] = x[i] - x[i - 1];
    }
    for (int i = 1; i <= m; i++) {
        scanf("%lld", &p[i]);
    }
    LL mid = num[2];
    for (int i = 3; i <= n; i++) {
        mid = gcd(mid, num[i]);
    }
    for (int i = 1; i <= m; i++) {
        if (mid % p[i] == 0) {
            printf("YES\n%lld %d\n", x[1], i);
            return 0;
        }
    }
    printf("NO\n");
    return 0;
}
```