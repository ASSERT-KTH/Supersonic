This program is already quite optimized, but there are a few small changes that could be made to improve it.

Optimization Steps:

1. Avoid using `#include <bits/stdc++.h>`: This header file is quite large and includes more than what's necessary, which can slow down compilation time. Instead, only include the necessary libraries, such as `#include <iostream>`, `#include <map>`, etc.

2. Use `std::ios_base::sync_with_stdio(false); cin.tie(NULL);` to make `cin` and `cout` faster, which can be beneficial for dealing with large amounts of input or output.

3. Remove the function `gcd` as it is not being used anywhere in the code.

4. The `getprime` function can be optimized by replacing `for (auto p : primes)` with `for (int j=0; p=primes[j], j<primes.size(); j++)`. This avoids creating a new copy of `p` for each iteration.

Here is the optimized code:

```cpp
#include <iostream>
#include <map>
#include <vector>
#include <cmath>

using namespace std;

long long mul(long long a, long long b, long long mod) {
    long long ret = 0;
    while (b) {
        if (b & 1) {
            ret += a;
            ret %= mod;
        }
        a <<= 1;
        a %= mod;
        b >>= 1;
    }
    return ret;
}

long long pow(long long a, long long b, long long mod) {
    long long ret = 1;
    while (b) {
        if (b & 1)
            ret = mul(ret, a, mod);
        a = mul(a, a, mod);
        b >>= 1;
    }
    return ret;
}

bool check(long long a, long long n) {
    long long x = n - 1;
    int t = 0;
    while ((x & 1) == 0) {
        x >>= 1;
        t++;
    }
    x = pow(a, x, n);
    long long y;
    for (int i = 1; i <= t; i++) {
        y = mul(x, x, n);
        if (y == 1 && x != 1 && x != n - 1)
            return true;
        x = y;
    }
    if (y != 1)
        return true;
    return false;
}

// Rest of the code remains the same ...

int main() {
    ios_base::sync_with_stdio(false); 
    cin.tie(NULL); 

    // Rest of the main function remains the same...
}
```

Remember that in highly optimized code like this, the potential for further optimization may be limited without a significant rewrite. It's also important to note that these optimizations may not greatly impact runtime, especially if the code is already well-optimized.