#include <iostream>
#include <cstdio>
#include <vector>
#include <map>
#include <cmath>
#include <cstdlib>

long long gcd(long long a, long long b) {
  return b == 0 ? a : gcd(b, a % b);
}

long long mul(long long a, long long b, long long mod) {
  return (a * b) % mod;
}

long long pow(long long a, long long b, long long mod) {
  return std::pow(a, b) % mod;
}

bool check(long long a, long long n) {
  long long x = n - 1;
  int t = 0;
  while ((x & 1) == 0) {
    x >>= 1;
    ++t;
  }
  x = pow(a, x, n);
  long long y;
  for (int i = 1; i <= t; ++i) {
    y = mul(x, x, n);
    if (y == 1 && x != 1 && x != n - 1)
      return true;
    x = y;
  }
  return y != 1;
}

long long Pollard_rho(long long n, int c) {
  long long i = 1, k = 2, x, y, d;
  y = x = rand() % n;
  while (true) {
    ++i;
    x = (mul(x, x, n) + c) % n;
    d = gcd(y - x, n);
    if (d > 1 && d < n)
      return d;
    if (y == x)
      break;
    if (i == k) {
      y = x;
      k <<= 1;
    }
  }
  return true;
}

void factorize(long long n, std::map<long long, int> &cnt, int c = 107) {
  if (n == 1)
    return;
  if (Miller_Rabin(n)) {
    ++cnt[n];
    return;
  }
  long long p = n;
  while (p >= n)
    p = Pollard_rho(p, c--);
  long long n_div_p = n / p;
  factorize(p, cnt, c);
  factorize(n_div_p, cnt, c);
}

void dfs(std::map<long long, int>::iterator it, long long val, std::map<long long, int>& cnt) {
  if (it == cnt.end()) {
    long long a = val;
    long long b = cur / val;
    if (a <= 100000 && b <= 100000 && c[a] && c[b]) {
      if (a == b)
        ans += c[a] * (c[a] - 1);
      else
        ans += c[a] * c[b];
    }
  } else {
    std::map<long long, int>::iterator nit = it;
    ++nit;
    for (int i = 0; i <= it->second; i++) {
      dfs(nit, val, cnt);
      val *= it->first;
    }
  }
}

// Rest of the code...