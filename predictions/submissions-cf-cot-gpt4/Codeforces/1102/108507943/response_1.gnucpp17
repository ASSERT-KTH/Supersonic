#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

void replace(string &s, int x, int n, vector<int> &count, bool is_forward) {
  int start = is_forward ? 0 : n - 1;
  int end = is_forward ? n : -1;
  int step = is_forward ? 1 : -1;
  for (int i = start; i != end; i += step) {
    if (count[x] < n / 3 && (((s[i] - '0' > x) && is_forward) || ((s[i] - '0' < x) && !is_forward)) && count[s[i] - '0'] > n / 3) {
      count[x]++;
      count[s[i] - '0']--;
      s[i] = x + '0';
    }
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  int n;
  string s;
  cin >> n;
  cin >> s;
  int max_digit = *max_element(s.begin(), s.end()) - '0';
  vector<int> count(max_digit + 1, 0);
  for (int i = 0; i < n; i++) {
    count[s[i] - '0']++;
  }
  replace(s, 0, n, count, true);
  replace(s, 1, n, count, true);
  replace(s, 2, n, count, false);
  replace(s, 1, n, count, false);
  cout << s;
}