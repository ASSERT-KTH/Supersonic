Optimization Steps:

1. `#include <bits/stdc++.h>`: This header file in C++ includes most of the header files. The problem is that it includes unnecessary header files which might not be used in the program. This can increase the compilation time. We should only include the header files that we are using in our program.

2. `#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)`: This macro is used to speed up the input-output operations in C++. However, it is not a good programming practice to use it. We will remove it and use std::ios_base::sync_with_stdio(false) directly in the main function.

3. `#define int long long`: This macro replaces int with long long int which may lead to unexpected results, especially with the functions not returning the int value. Hence it is better not to use such macros.

4. The forward and backward functions are almost identical. The only difference is the order in which they iterate over the string. To reduce code duplication, we can create a single function that accepts an additional boolean parameter indicating the direction.

5. `#define Mod 10000007`: This macro is not used anywhere in the program. We can remove it.

6. The count vector is initialized with three elements, but the size of the count vector is not dynamic. If the string contains digits greater than 2, it will lead to out of range errors. We should calculate the maximum digit in the string and initialize the count vector accordingly.

Optimized Program:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

void replace(string &s, int x, int n, vector<int> &count, bool is_forward) {
  int start = is_forward ? 0 : n - 1;
  int end = is_forward ? n : -1;
  int step = is_forward ? 1 : -1;
  for (int i = start; i != end; i += step) {
    if (count[x] < n / 3 && (((s[i] - '0' > x) && is_forward) || ((s[i] - '0' < x) && !is_forward)) && count[s[i] - '0'] > n / 3) {
      count[x]++;
      count[s[i] - '0']--;
      s[i] = x + '0';
    }
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  int n;
  string s;
  cin >> n;
  cin >> s;
  int max_digit = *max_element(s.begin(), s.end()) - '0';
  vector<int> count(max_digit + 1, 0);
  for (int i = 0; i < n; i++) {
    count[s[i] - '0']++;
  }
  replace(s, 0, n, count, true);
  replace(s, 1, n, count, true);
  replace(s, 2, n, count, false);
  replace(s, 1, n, count, false);
  cout << s;
}
```
