The given code can be optimized for running time and memory usage by making the following changes:

1. Change the use of "#define int long long" to "typedef long long int" to avoid confusion and potential problems with the preprocessor.

2. Avoid using "#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)", instead, you can just place the three lines in the main function. "#define" can sometimes lead to unexpected results.

3. The function forward() and backward() have almost the same code except for the loop direction, so we can merge them into one function to save memory. We can add a direction parameter to the function to control the loop direction.

4. The calculation of "n/3" is repeated many times. We can calculate it once and store it in a variable.

5. In the main function, instead of calling the forward() and backward() function for each digit separately, we can use a loop to call them.

Here is the optimized code:

```c++
#include <bits/stdc++.h>
using namespace std;

typedef long long int ll;

void rearrange(string &s, int x, int n, vector<int> &count, int direction, int limit) {
  if(direction == 1) {
    for (int i = 0; i < n; i++) {
      if (count[x] < limit && s[i] - '0' > x && count[s[i] - '0'] > limit) {
        count[x]++;
        count[s[i] - '0']--;
        s[i] = x + '0';
      }
    }
  } else {
    for (int i = n - 1; i >= 0; i--) {
      if (count[x] < limit && s[i] - '0' < x && count[s[i] - '0'] > limit) {
        count[x]++;
        count[s[i] - '0']--;
        s[i] = x + '0';
      }
    }
  }
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  ll n;
  vector<int> count(3, 0);
  string s;
  cin >> n;
  cin >> s;
  int limit = n / 3;
  for (int i = 0; i < n; i++) {
    count[s[i] - '0']++;
  }
  for(int i = 0; i < 3; i++) {
    rearrange(s, i, n, count, 1, limit);
  }
  for(int i = 2; i >= 0; i--) {
    rearrange(s, i, n, count, -1, limit);
  }
  cout << s;
}
```
This optimized code performs better in terms of running time and memory usage as it avoids unnecessary function calls and repeated calculations.