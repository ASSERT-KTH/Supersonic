#include <bits/stdc++.h>
using namespace std;
#define int long long
#define endl '\n'
const int nmmx = 31, kmx = 51;
int dp[nmmx][nmmx][kmx];
int solve(int n, int m, int k) {
  if (dp[n][m][k] != -1)
    return dp[n][m][k];
  if (n * m == k || !k)
    return dp[n][m][k] = 0;
  dp[n][m][k] = 1e18;
  for (int i = 1; i <= n - 1; ++i) {
    for (int j = 0; j <= min(k, i*m); ++j) {
      dp[n][m][k] = min(dp[n][m][k], m * m + solve(i, m, j) + solve(n - i, m, k - j));
    }
  }
  for (int i = 1; i <= m - 1; ++i) {
    for (int j = 0; j <= min(k, n*i); ++j) {
      dp[n][m][k] = min(dp[n][m][k], n * n + solve(n, i, j) + solve(n, m - i, k - j));
    }
  }
  return dp[n][m][k];
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  memset(dp, -1, sizeof(dp));
  solve(30, 30, 50);
  int t;
  scanf("%lld", &t);
  while (t--) {
    int n, m, k;
    scanf("%lld %lld %lld", &n, &m, &k);
    printf("%lld\n", solve(n, m, k));
  }
  return 0;
}