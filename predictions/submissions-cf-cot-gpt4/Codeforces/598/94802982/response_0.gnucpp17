#include <iostream>
#include <algorithm>
#include <cstring>

typedef long long ll;
constexpr ll nmmx = 31, kmx = 51;

ll dp[nmmx][nmmx][kmx];

ll solve(ll n, ll m, ll k) {
  ll &ans = dp[n][m][k];
  if (ans != -1)
    return ans;
  if (n * m == k || !k)
    return ans = 0;
  ans = 1e18;
  for (ll i = 1; i <= n - 1; ++i) {
    for (ll j = 0; j <= k; ++j) {
      ans = std::min(ans, m * m + solve(i, m, j) + solve(n - i, m, k - j));
    }
  }
  for (ll i = 1; i <= m - 1; ++i) {
    for (ll j = 0; j <= k; ++j) {
      ans = std::min(ans, n * n + solve(n, i, j) + solve(n, m - i, k - j));
    }
  }
  return ans;
}

int main() {
  std::ios::sync_with_stdio(0);
  std::cin.tie(0);
  
  std::memset(dp, -1, sizeof(dp));
  for (ll i = 1; i < nmmx; i++)
    for (ll j = 1; j < nmmx; j++)
      for (ll k = 0; k < kmx; k++)
        solve(i, j, k);

  ll t;
  std::cin >> t;
  while (t--) {
    ll n, m, k;
    std::cin >> n >> m >> k;
    std::cout << dp[n][m][k] << "\n";
  }
  return 0;
}