First, here is the step by step optimization:

1. The `#include <bits/stdc++.h>` directive can be replaced with the individual includes that we need (like `#include <iostream>`). This is because including `bits/stdc++.h` includes more libraries than needed which can slow down compilation time.

2. The macro `#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);` is used to speed up input and output in C++, but it's used inappropriately here. The `fast` macro should be expanded inside the `main` function, not at global namespace level.

3. The `g(int n)` function is inefficient. It's using a while loop to count the digits in `n` but this loop will never terminate if `n` is zero or negative. This is because the condition `while(n--)` will be always true for negative `n` and the decrement `n--` will make `n` negative if `n` is zero. This can cause an infinite loop. A better way to count digits in `n` is to use `log10(n) + 1`.

4. The `while (g(x) != c)` loop inside `solve()` function can be optimized. This loop is used to find the smallest number with `c` digits. But it's very inefficient to find this number by doubling `x` until `g(x) == c`. A better way is to use the formula `pow(10, c - 1)` to find the smallest number with `c` digits.

5. The `while (g(i) != a)` and `while (g(j) != b)` loops can be optimized similarly.

6. The `#ifndef ONLINE_JUDGE` directive is not necessary and can be removed.

Here is the optimized code:

```cpp
#include <iostream>
#include <cmath>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

#define INF 1e18
#define pb push_back
#define pob pop_back
#define ff first
#define ss second
#define PI 3.141592653589793238462
#define setbits __builtin_popcountll
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()

int g(int n) {
  return log10(n) + 1;
}

void solve() {
  int a, b, c;
  cin >> a >> b >> c;
  int x = pow(10, c - 1);
  int ans1 = pow(10, a - 1);
  int ans2 = pow(10, b - 1);
  cout << ans1 << " " << ans2 << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  int t = 1;
  cin >> t;
  while (t--) {
    solve();
  }
  return 0;
}
```