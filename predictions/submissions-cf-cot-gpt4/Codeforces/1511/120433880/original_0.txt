The given program has quite a few areas where we can make minor changes to optimize the run-time and memory usage. Here are the steps we could take to optimize this code:

1. Avoid Including Whole Libraries: The first line of the program is '#include <bits/stdc++.h>'. This header file includes every standard library. Although this line makes it easy to use any function or object from the standard library, it's not recommended for production code, as it increases the compilation time significantly. We will replace it by including only the specific libraries that we need.

2. Namespace Usage: The 'using namespace std;' is a directive that brings in everything from the std namespace into the global scope, which can cause name conflicts in larger projects. However, in this code, it is not causing any issue. Since we are optimizing, we will replace 'std::' explicitly wherever required.

3. Unused Macros: The code includes a lot of macros which are not used anywhere in the code. We will remove these unused macros to clean up the code and reduce memory usage.

4. Avoiding I/O Speed-Up: The macro 'fast' is used to speed up I/O operations, which is good for competitive programming but not necessary in production code. We will remove it.

5. Function g(): This function increments 'cnt' until 'n' becomes zero, but it also divides 'n' by 10 in every iteration. It will run infinitely for 'n' greater than 0. We will modify it to stop the loop when 'n' becomes zero.

6. Extra Variables: In the 'solve' function, the variables 'i' and 'j' are assigned the value of 'x' and then used to calculate 'ans1' and 'ans2'. We can directly use 'x' to calculate 'ans1' and 'ans2', eliminating the need for 'i' and 'j'.

Here is the optimized code:

```cpp
#include <iostream>
#include <cmath>

int g(int n) {
  int cnt = 0;
  while (n > 0) {
    cnt++;
    n /= 10;
  }
  return cnt;
}

void solve() {
  int a, b, c;
  std::cin >> a >> b >> c;
  int x = 1;
  while (g(x) != c) {
    x *= 2;
  }
  while (g(x) != a) {
    x *= 2;
  }
  int ans1 = x;
  while (g(x) != b) {
    x *= 5;
  }
  int ans2 = x;
  std::cout << ans1 << " " << ans2 << std::endl;
}

int main() {
  int t = 1;
  std::cin >> t;
  while (t--) {
    solve();
  }
  return 0;
}
```

These changes should make the code more memory efficient and also slightly faster by removing unnecessary variables and operations.
