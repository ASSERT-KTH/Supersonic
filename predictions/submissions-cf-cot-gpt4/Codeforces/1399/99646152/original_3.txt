Optimization Steps:

1. Avoid Recomputation: In the main function, `(a[i] - ma)` and `(b[i] - mo)` are being computed multiple times. We can compute these once and store them in variables to avoid recomputation, thus saving time.

2. Avoid unnecessary operations: The condition check `if (a[i] > ma && b[i] > mo)` is unnecessary because the following `else if` conditions are checking `a[i] > ma` and `b[i] > mo` separately.

The optimized code with these changes is as follows:

```cpp
#pragma GCC optimize("O2")
#include <bits/stdc++.h>
using namespace std;
#define rep(i, n) for (int i = 0; i < (n); i++)
#define for1(i, n) for (int i = 1; i <= n; i++)
#define FOR(i, a, b) for (int i = (a); i <= (b); i++)
#define FORD(i, a, b) for (int i = (a); i >= (b); i--)
#define nx cout << "\n";
const int INF = 1 << 29;
const int MOD = 1e9 + 7;
#define pp pair<ll, ll>
#define ppi pair<int, int>
typedef long long int ll;
#define pri(x) printf("%d ", x);
bool isPowerOfTwo(ll x) { return x && (!(x & (x - 1))); }
void fastio() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
}
long long binpow(long long a, long long b) {
  long long res = 1;
  while (b > 0) {
    if (b & 1)
      res = res * a;
    a = a * a;
    b >>= 1;
  }
  return res;
}
const int dx[] = {1, 0, -1, 0, 1, 1, -1, -1};
const int dy[] = {0, -1, 0, 1, 1, -1, -1, 1};
int main() {
  fastio();
  int tc = 1;
  cin >> tc;
  while (tc--) {
    int n;
    cin >> n;
    ll a[n], b[n];
    rep(i, n) cin >> a[i];
    rep(i, n) cin >> b[i];
    ll ma = *min_element(a, a + n), mo = *min_element(b, b + n);
    ll ans = 0;
    rep(i, n) {
      ll a_diff = a[i] - ma;
      ll b_diff = b[i] - mo;
      if (a_diff > 0 || b_diff > 0) {
        int x = min(a_diff, b_diff);
        a[i] -= x;
        b[i] -= x;
        ans += x;
        if (a_diff > 0)
          ans += a_diff;
        else
          ans += b_diff;
      }
    }
    cout << ans;
    nx;
  }
  return 0;
}
```

Here, we have computed `a_diff` and `b_diff` only once and reused them wherever necessary. Also, removed the unnecessary condition check, making the code more efficient.