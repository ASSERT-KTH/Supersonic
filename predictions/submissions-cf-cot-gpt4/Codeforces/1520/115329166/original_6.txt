The given piece of code is already optimized for running time and memory usage to a good degree. However, we can make a few minor optimizations related to code readability and maintenance. Specifically:

1. Remove unnecessary macros: Macros such as `#define FAST`, `#define ll2 int64_t`, `#define dob double`, `#define mp(x, y) make_pair(x, y)`, `#define pi 3.1415926`, `#define pb(x) push_back(x)`, `#define deb(x) cout << #x << " : " << x << endl;`, `#define deb2(x, y) cout << #x << " : " << x << "\t" << #y << " : " << y << endl;`, `#define deb3(x, y, z)`, `#define ff first`, `#define ss second`, `#define Vp vector<pair<ll, ll>>`, `#define V vector`, `#define sort(a) sort(a.begin(), a.end())`, `#define rev(a) reverse(a.begin(), a.end())`, `#define M map`, `#define fix fixed << setprecision(15)` are not used in the code, removing them will not affect the functionality of the program, but it can improve readability and maintenance.

2. Avoid using `#include <bits/stdc++.h>`: This header file is quite large and including it can significantly increase the compilation time. Instead, include only those header files which are actually used in the program. In this case, only `<iostream>`, `<vector>`, `<string>`, and `<climits>` are required.

3. Avoid using `using namespace std`: This can cause name conflicts in larger programs. It is better to use the std:: prefix whenever a standard library function or type is used.

4. Removal of unused variables: The variables `j`, `k`, `x`, `m` are defined but not used anywhere in the program.

5. Combined multiple output operations into one: The `endl` is basically equivalent to a '\n' followed by a flush operation. The flush operation is computationally expensive. As the output is only needed once per test case, we can replace `endl` with '\n'.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <string>
#include <climits>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  
  int t = 1;
  std::cin >> t;
  while (t--) {
    std::string s;
    long long int n;
    std::cin >> n;
    std::cin >> s;
    std::vector<long long int> left(n + 1, 0), right(n + 1, 0);
    long long int star = 0;
    for (long long int i = 0; i < n; i++) {
      if (s[i] == '.') {
        left[i + 1] = left[i] + star;
      } else {
        star++;
        left[i + 1] = left[i];
      }
    }
    star = 0;
    for (long long int i = n - 1; i >= 0; i--) {
      if (s[i] == '.') {
        right[i] = right[i + 1] + star;
      } else {
        star++;
        right[i] = right[i + 1];
      }
    }
    long long int ans = LLONG_MAX;
    for (long long int i = 1; i <= n; i++) {
      ans = std::min(ans, left[i] + right[i]);
    }
    for (long long int i = 0; i < n; i++) {
      ans = std::min(ans, left[i] + right[i - 1]);
    }
    std::cout << ans << "\n";
  }
  return 0;
}
```

Please note that these changes should provide minor improvements in the time and space complexity of the program. The major time complexity is determined by the two for-loops which iterate over `n`, making the time complexity O(n). The space complexity is also O(n) due to the use of the `left` and `right` vectors. These cannot be improved without changing the logic of the program.