Here are the steps to optimize the code:

1. Avoid using #define for common operations like sort, reverse, push_back and make_pair. Instead, use them directly in the code. This improves code readability and doesn't really affect performance.

2. Avoid using #define for common variables like first, second, etc. Using the original variables improves code readability and doesn't affect performance.

3. Avoid using the "bits/stdc++.h" header. It includes a lot of unnecessary libraries that can slow down the program. Instead, include only the necessary libraries.

4. Remove the #define FAST code. It's a common practice to use this to speed up I/O operations in competitive programming, but it's generally not recommended in production code. In this case, the code does not involve a significant amount of I/O operations, so it doesn't provide a significant performance boost.

5. Do not declare variables at the top of the file as global variables. Declare them where they are used. This makes the code easier to understand and reduces the chance of errors.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;

const int MOD = 1e9 + 7;
const int nax = 1e6 + 10;

int main() {
  int t = 1;
  cin >> t;
  while (t--) {
    string s;
    int n;
    cin >> n;
    cin >> s;
    vector<int> left(n + 1, 0), right(n + 1, 0);
    int star = 0;
    for (int i = 0; i < n; i++) {
      if (s[i] == '.') {
        left[i + 1] = left[i] + star;
      } else {
        star++;
        left[i + 1] = left[i];
      }
    }
    star = 0;
    for (int i = n - 1; i >= 0; i--) {
      if (s[i] == '.') {
        right[i] = right[i + 1] + star;
      } else {
        star++;
        right[i] = right[i + 1];
      }
    }
    int ans = INT_MAX;
    for (int i = 1; i <= n; i++) {
      ans = min(ans, left[i] + right[i]);
    }
    for (int i = 0; i < n; i++) {
      ans = min(ans, left[i] + right[i - 1]);
    }
    cout << ans << endl;
  }
}
```

Note: This optimization is based on memory usage and readability. The running time of the program is mostly determined by the algorithm used, and the current algorithm is already optimal for this task.