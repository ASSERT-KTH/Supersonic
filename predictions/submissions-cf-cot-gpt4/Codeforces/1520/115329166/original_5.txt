The optimization steps are as follows:

1. Avoid `#include <bits/stdc++.h>`: This header file includes too many headers that your program might not need, and thus increases the compilation time.

2. Avoid using `using namespace std`: This can cause name clashes because it includes all names from the `std` namespace into the global namespace.

3. Avoid using `#define`: Instead of `#define`, we can use `const` variables or `typedef` / `using`, which are type-checked.

4. Avoid using `ll2 int64_t`: `ll2` is redundant, because `ll` is already defined as `long long int` which is equivalent to `int64_t`.

5. Avoid using `sort(a)`, `rev(a)`: These are not a good approach because they only work with types that have a `.begin()` and `.end()`. It's better to call these functions explicitly where required.

6. The macro `#define forr(z, y) for (int i = z; i < y; i++)` is not used in the code, so we can remove it.

7. The vector `right` is filled in reverse order, but it's not necessary to fill it completely before using it. We can fill it on the fly in the second loop.

8. The second loop for calculating `ans` seems to be an error in the original code, because `right[i - 1]` would result in access of `-1` index at first iteration, which is undefined behavior. As per the logic of the program, we don't need this loop.

Let's implement these optimizations:

```c++
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using std::cin;
using std::cout;
using std::endl;
using std::vector;
using std::min;
using std::string;

const int MOD = 1e9 + 7;
const int nax = 1e6 + 10;

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int t = 1;
  cin >> t;
  while (t--) {
    string s;
    long long int n;
    cin >> n;
    cin >> s;
    vector<long long int> left(n + 1, 0);
    long long int star = 0;
    for (int i = 0; i < n; i++) {
      if (s[i] == '.') {
        left[i + 1] = left[i] + star;
      } else {
        star++;
        left[i + 1] = left[i];
      }
    }
    long long int ans = LLONG_MAX;
    long long int right = 0;
    star = 0;
    for (int i = n - 1; i >= 0; i--) {
      if (s[i] == '.') {
        right += star;
      } else {
        star++;
      }
      ans = min(ans, left[i] + right);
    }
    cout << ans << endl;
  }
}
```
This optimized code has better readability, avoids potential name clashes and undefined behavior, and should also run faster and use less memory.