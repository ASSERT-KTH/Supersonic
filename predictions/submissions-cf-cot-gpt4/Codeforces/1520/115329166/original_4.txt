Here are some steps we can do to optimize the provided code:

1. Replace `#include <bits/stdc++.h>` with only the libraries that are being used. `bits/stdc++.h` includes large number of standard C++ libraries, and many of them might not be used in the program, causing unnecessary increase in compilation time.
2. Remove `#define FAST` macro, it's not used in the code.
3. Remove other unused macros like `#define ll2`, `#define dob`, `#define mp(x, y)`, `#define pi`, `#define pb(x)`, `#define deb(x)`, `#define deb2(x, y)`, `#define deb3(x, y, z)`, `#define ff`, `#define ss`, `#define forr(z, y)`, `#define rfor(z, y)`, `#define Vp`, `#define V`, `#define sort(a)`, `#define rev(a)`, `#define M`, `#define fix`.
4. Use `std::ios_base::sync_with_stdio(false); cin.tie(NULL);` to speed up cin and cout.
5. Remove unused global variables `j, k, x, m`.
6. Reduce the size of `left` and `right` arrays to `n` instead of `n+1` to save memory.
7. Combine the two loops to calculate `ans` into a single loop.
8. Remove the second loop for `ans` calculation as it appears to be unnecessary and possibly a source of bugs (since it accesses `right[i - 1]` where `i` can be `0`, this can lead to out-of-bounds access).

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;
#define ll long long int
const int MOD = 1e9 + 7;
const int nax = 1e6 + 10;
ll i, n;

int main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  ll t = 1;
  cin >> t;
  while (t--) {
    string s;
    cin >> n;
    cin >> s;
    vector<ll> left(n, 0), right(n, 0);
    ll star = 0;
    for (i = 0; i < n; i++) {
      if (s[i] == '.') {
        left[i] = (i > 0 ? left[i - 1] : 0) + star;
      } else {
        star++;
        left[i] = i > 0 ? left[i - 1] : 0;
      }
    }
    star = 0;
    for (i = n - 1; i >= 0; i--) {
      if (s[i] == '.') {
        right[i] = (i < n - 1 ? right[i + 1] : 0) + star;
      } else {
        star++;
        right[i] = i < n - 1 ? right[i + 1] : 0;
      }
    }
    ll ans = LLONG_MAX;
    for (i = 0; i < n; i++) {
      ans = min(ans, left[i] + (i < n - 1 ? right[i + 1] : 0));
    }
    cout << ans << endl;
  }
  return 0;
}
```