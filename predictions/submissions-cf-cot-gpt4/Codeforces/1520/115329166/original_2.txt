This code can be optimized in terms of memory usage and running time.

Here are the steps to optimize the code:

1. Instead of using two different vectors 'left' and 'right', we can use a single vector to save space.
2. The macro 'forr' and 'rfor' are used for looping, but the index 'i' is declared as a global variable which could potentially cause problems if your program grows, especially in multithreaded programs. It would be better to declare 'i' in the scope of the loop. 
3. The use of '#define' for simple functions such as 'min', 'max', 'sort', 'reverse' is unnecessary and could be removed to make the code more readable.
4. The variables 'i', 'j', 'k', 'x', 'n', 'm' are declared globally but are only used in the main function, so they should be declared there to reduce the scope and improve manageability.
5. The vectors 'left' and 'right' are initialized with 'n+1' size with all values as 0, but we can make use of 'push_back' function to insert elements only when needed, saving space.
6. The '#define' for 'll2' as 'int64_t' is unnecessary as 'long long int' is already 64 bit.
7. The '#define' for 'dob' as 'double' is unnecessary and can be removed to improve readability.
8. The 't' variable is set to 1 and then immediately overwritten with a value from 'cin'. The initial assignment is unnecessary.
9. The 'ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);' lines are used to speed up cin and cout, but in this code, there is not much I/O happening, so we can remove these lines. 

Optimized code:
```cpp
#include <bits/stdc++.h>
#include <fstream>
using namespace std;

#define ll long long int
#define pi 3.1415926
#define ff first
#define ss second
#define M map
#define fix fixed << setprecision(15)
const int MOD = 1e9 + 7;
const int nax = 1e6 + 10;

int main() {
  ll t;
  cin >> t;
  while (t--) {
    string s;
    ll n;
    cin >> n;
    cin >> s;
    vector<ll> moves(n + 1, 0);
    ll star = 0;
    for (ll i = 0; i < n; i++) {
      if (s[i] == '.') {
        moves[i + 1] = moves[i] + star;
      } else {
        star++;
        moves[i + 1] = moves[i];
      }
    }
    star = 0;
    ll ans = LLONG_MAX;
    for (ll i = n - 1; i >= 0; i--) {
      ans = min(ans, moves[i] + star);
      if (s[i] != '.') {
        star++;
      }
    }
    cout << ans << endl;
  }
}
```

This optimized code is more readable and uses less memory.