#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <cmath>
#include <iomanip>

using namespace std;

using vi = vector<int>;
using vvi = vector<vi>;
using pii = pair<int, int>;
using vpii = vector<pii>;
using vvpii = vector<vpii>;

inline void rep(int &i, int a, int b) { for (i = a; i <= b; i++); }
inline void per(int &i, int b, int a) { for (i = b; i >= a; i--); }

const int N = 2e2 + 10;
const int inf = 1e18 + 10;

void solve(int n, int a[], int b[], int pos[]) {
  cin >> n;
  int i;
  rep(i, 1, n) cin >> a[i] >> b[i];
  int total = accumulate(b + 1, b + 1 + n, 0);
  vvi dp(N * N, vi(N, -inf));
  dp[0][0] = 0;
  int ans = -inf;
  int cap = 0;
  rep(i, 1, n) {
    auto &tmp = dp;
    cap += a[i];
    int c, k;
    per(c, 100 * 100 + 10, 1) per(k, n, 1) if (c >= a[i]) {
      tmp[c][k] = max(dp[c - a[i]][k - 1] + b[i], dp[c][k]);
    }
  }
  rep(i, 1, n) {
    ans = -inf;
    auto &tmp = dp;
    int c;
    rep(c, 1, 100 * 100 + 10) ans =
        max(min(tmp[c][i] + (total - tmp[c][i]) / 2, c), ans);
    cout << fixed << setprecision(20) << ans << " ";
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int a[N], b[N], pos[N];
  int n;
  solve(n, a, b, pos);
  return 0;
}