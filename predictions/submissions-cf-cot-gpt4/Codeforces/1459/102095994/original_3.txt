The given C++ code includes some redundant elements and some optimizations can be made to improve its performance.

Here is the step by step optimization:

1. Remove unused includes and defines: The `#include <bits/stdc++.h>` line includes most of the C++ libraries, so all other #include lines except `#include <bits/stdc++.h>` are redundant and can be removed. Also, unused #define macros can be removed.

2. Avoid using `using namespace std;`: This can cause name conflicts. You should always specify std:: before using any standard library function.

3. Remove unused variables and code: Variables `xx` and `t` and the while loop in the main function are not used and can be removed.

4. Use `std::ios::sync_with_stdio(false);` and `std::cin.tie(nullptr);` at the beginning of the main function. This can significantly speed up the cin and cout operations.

5. Reduce the scope of variables: Declaring and initializing variables as late as possible can save memory. For example, variable `tmp` can be declared inside the loop.

6. Avoid unnecessary type casting: Casting `tmp[c][k]` and `c` to double is unnecessary, because they are already of type double.

Here is the optimized version of the code:

```cpp
#include <bits/stdc++.h>

#define double long double
#define int long long int
#define ll int
#define rep(i, a, b) for (int i = a; i <= b; i++)
#define per(i, b, a) for (int i = b; i >= a; i--)

using vi = std::vector<double>;
using vvi = std::vector<vi>;

const int N = 2e2 + 10;
const int inf = 1e18 + 10;

int n, a[N], b[N];

void solve() {
  std::cin >> n;
  rep(i, 1, n) std::cin >> a[i] >> b[i];
  double total = std::accumulate(b + 1, b + 1 + n, 0);
  vvi dp(N * N, vi(N, -inf));
  dp[0][0] = 0;
  double ans = -inf;
  int cap = 0;
  rep(i, 1, n) {
    cap += a[i];
    per(c, 100 * 100 + 10, 1) per(k, n, 1) if (c >= a[i]) {
      dp[c][k] = std::max(dp[c - a[i]][k - 1] + b[i], dp[c][k]);
    }
  }
  rep(k, 1, n) {
    ans = -inf;
    rep(c, 1, 100 * 100 + 10) ans =
        std::max(std::min(dp[c][k] + (total - dp[c][k]) / 2.0, c), ans);
    std::cout << std::fixed << std::setprecision(20) << ans << " ";
  }
}

int32_t main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  solve();
  return 0;
}
```