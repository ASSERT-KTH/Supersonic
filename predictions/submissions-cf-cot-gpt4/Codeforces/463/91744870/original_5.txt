This program seems to be quite optimal in terms of time complexity as it is. However, there are a few changes that can be made to increase readability and potentially improve performance:

1. Avoid `#include <bits/stdc++.h>` as it includes more files than necessary, slowing down the compilation time. Instead, include only the necessary files.
2. Avoid using `#define`, it can lead to code that is harder to read and debug. It's better to use functions or constants.
3. For the `fast` macro, `std::ios_base::sync_with_stdio(false);` is used often but it can cause unwanted side effects if you are mixing `printf/scanf` with `cin/cout` (you're not in this code, but still worth mentioning). It's better to use `cin/cout` or `printf/scanf` consistently.
4. The `cp()` function is empty and unused, so it can be removed.
5. You could define 'n' as a constant if it doesnâ€™t change in the program. This will help the compiler optimize the code.
6. The size of `a` is not known at compile-time, so it's better to use `std::vector` instead of a raw array.

Here is the optimized code:

```c++
#include <iostream>
#include <vector>
#include <map>

using namespace std;
typedef long long ll;
typedef pair<ll, ll> pll;
typedef vector<ll> vi;

const double pi = 3.14159265358979323846;

vector<pll> ans(2);
vi sum(2);

void update(int c, int i, int j, ll val) {
    if (val > sum[c]) {
        sum[c] = val;
        ans[c].first = i;
        ans[c].second = j;
    }
}

void solve() {
    ll n;
    cin >> n;
    vector<vector<ll>> a(n, vector<ll>(n));
    sum[0] = sum[1] = -1;
    map<ll, ll> cnt, cnt1;
    for(ll i = 0; i < n; i++) {
        for(ll j = 0; j < n; j++) {
            cin >> a[i][j];
            cnt[i + j] += a[i][j];
            cnt1[i - j] += a[i][j];
        }
    }
    for(ll i = 0; i < n; i++) {
        for(ll j = 0; j < n; j++) {
            update((i + j) % 2, i, j, cnt[i + j] + cnt1[i - j] - a[i][j]);
        }
    }
    cout << sum[0] + sum[1] << "\n";
    for (auto it : ans) {
        cout << it.first + 1 << " " << it.second + 1 << " ";
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    ll t = 1;
    while (t--)
        solve();
    return 0;
}
```
Please note that these are minor optimizations and improvements in readability but won't dramatically decrease runtime or memory usage, as the original code is already quite efficient. For further optimization, you would need to revise the algorithm itself.