This C++ program can be optimized by reducing the number of operations and memory usage.

Here's what we can do step by step:

1. Unnecessary Macros:
   The program is using some unnecessary macros like `pb`, `eb`, `sq`. These are not used and can be removed.

2. Dynamic Memory Allocation:
   The program allocates memory for the 2D array `a` on the stack. This is not safe for large values of `n` and can lead to a stack overflow. Instead, we can allocate `a` on the heap with `new`.

3. Loop Unrolling:
   We can merge the two nested loops that update `cnt` and `cnt1` into a single loop. This reduces the number of iterations.

4. Remove Unnecessary Map:
   The program uses two maps `cnt` and `cnt1`. However, we can replace them with two 2D arrays `cnt` and `cnt1` to avoid the overhead of a map.

Here is the optimized version of the program:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<ll> vi;
typedef vector<bool> vb;
#define mp make_pair
#define all(x) x.begin(), x.end()
#define allr(x) x.rbegin(), x.rend()
#define deb(x) cout << #x << "=" << x << "\n"
#define deb2(x, y) cout << #x << "=" << x << " " << #y << "=" << y << "\n"
#define fi first
#define se second
#define fast ios_base::sync_with_stdio(0); cin.tie(NULL)
const double pi = 3.14159265358979323846;

pll ans[2];
vi sum(2);

void update(int c, int i, int j, ll val) {
  if (val > sum[c]) {
    sum[c] = val;
    ans[c].fi = i;
    ans[c].se = j;
  }
}

void solve() {
  ll n;
  cin >> n;
  ll **a = new ll*[n];
  for(int i = 0; i < n; ++i) {
    a[i] = new ll[n];
  }
  sum[0] = sum[1] = -1;
  ll cnt[n][n], cnt1[n][n];
  for(int i=0; i<n; i++) {
    for(int j=0; j<n; j++) {
      cin >> a[i][j];
      cnt[i + j] += a[i][j];
      cnt1[i - j] += a[i][j];
      update((i + j) % 2, i, j, cnt[i + j] + cnt1[i - j] - a[i][j]);
    }
  }
  cout << sum[0] + sum[1] << "\n";
  for (auto it : ans) {
    cout << it.fi + 1 << " " << it.se + 1 << " ";
  }
  for(int i = 0; i < n; ++i) {
    delete [] a[i];
  }
  delete [] a;
}

int main() {
  fast;
  ll t = 1;
  while (t--)
    solve();
  return 0;
}
```
Please note that these optimizations are not guaranteed to work in all cases, and the results may vary depending on the specific compiler and hardware used.