This program can be optimized mainly in two major steps:

1. Memory Optimization: The 2-D array `a` in the `solve` function is only used to read input and it is not necessary to store the values for computation. Hence, we can save memory by not storing them in a 2-D array and instead, directly add them to the maps `cnt` and `cnt1` while reading.

2. Time Optimization: Currently, we are processing the same `(i, j)` pair twice, once when updating the `cnt` map and once when updating the `cnt1` map. We can merge these two steps into one and eliminate the need for the double loop.

Below is the optimized version of the code:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<ll, ll> pll;
typedef vector<ll> vi;
#define mp make_pair
#define all(x) x.begin(), x.end()
#define fast ios_base::sync_with_stdio(0); cin.tie(NULL)
const double pi = 3.14159265358979323846;

pll ans[2];
vi sum(2);

void update(int c, int i, int j, ll val) {
  if (val > sum[c]) {
    sum[c] = val;
    ans[c].first = i;
    ans[c].second = j;
  }
}

void solve() {
  ll n;
  cin >> n;
  sum[0] = sum[1] = -1;
  map<ll, ll> cnt, cnt1;
  for(ll i = 0; i < n; i++) {
    for(ll j = 0; j < n; j++) {
      ll a;
      cin >> a;
      cnt[i + j] += a;
      cnt1[i - j] += a;
      update((i + j) % 2, i, j, cnt[i + j] + cnt1[i - j] - a);
    }
  }
  cout << sum[0] + sum[1] << "\n";
  cout << ans[0].first+1 << " " << ans[0].second+1 << " ";
  cout << ans[1].first+1 << " " << ans[1].second+1 << " ";
}

int main() {
  fast;
  ll t = 1;
  while (t--)
    solve();
  return 0;
}
```

Note: In competitive programming, it is common to use `#include <bits/stdc++.h>` and `using namespace std;` for convenience. But in production code, it is recommended to include only the necessary libraries and avoid `using namespace std;` to prevent naming conflicts.