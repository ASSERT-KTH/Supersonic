The main optimization in this program would be to change the 2D array "a" to a 1D array for reducing spatial complexity. However, this would require a full rewrite of the code, which is not what you're asking. So, I'll provide a different optimization.

The first optimization is to avoid the usage of 'bits/stdc++.h'. This header file includes a lot of unnecessary files which increases the compilation time.

Secondly, it is not necessary to use 'typedef' in C++11 and later, because 'using' can be used to create an alias template, which is more powerful and flexible.

Thirdly, the 'fast' macro is defined but not used in the program. We can remove it to make the program more readable.

Finally, the 'cp' function is empty and not used in the program, so we can remove it to make the program more readable.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
#include <map>
using namespace std;
using ll = long long;
using pll = pair<ll, ll>;
using vi = vector<ll>;
const double pi = 3.14159265358979323846;
pll ans[2];
vi sum(2);
void update(int c, int i, int j, ll val) {
  if (val > sum[c]) {
    sum[c] = val;
    ans[c].first = i;
    ans[c].second = j;
  }
}
void solve() {
  ll n;
  cin >> n;
  ll a[n][n];
  sum[0] = sum[1] = -1;
  map<ll, ll> cnt, cnt1;
  for (int i=0;i<n;i++) {
    for(int j=0;j<n;j++) {
      cin >> a[i][j];
      cnt[i + j] += a[i][j];
      cnt1[i - j] += a[i][j];
    }
  }
  for (int i=0;i<n;i++) {
    for(int j=0;j<n;j++) {
      update((i + j) % 2, i, j, cnt[i + j] + cnt1[i - j] - a[i][j]);
    }
  }
  cout << sum[0] + sum[1] << "\n";
  for (auto it : ans) {
    cout << it.first + 1 << " " << it.second + 1 << " ";
  }
}
int main() {
  ll t = 1;
  while (t--)
    solve();
  return 0;
}
```

Keep in mind that these are minor improvements and the overall performance gain might be negligible. The major performance gain can be achieved by changing the data structure and algorithm used in the program.