The given C++ program can be optimized in several ways:

1. Avoid using `#include <bits/stdc++.h>`: While this header file includes most of the standard libraries, it is not a standard header file. Including it in the program makes the compilation slow. It is better to include only the libraries that are being used in the program.

2. Avoid using `namespace std`: This can lead to name conflicts when the program becomes large. It is better to use `std::` prefix with every standard library object.

3. Avoid using `typedef`: Modern C++ encourages the use of using declarations instead of typedefs.

4. Avoid using `#define`: They are harder to debug, and don't respect scope. Inline functions and constants can be used instead.

5. Use `std::array` instead of C-style arrays: They are safer and have the same performance characteristics.

6. Avoid using global variables: They can lead to hard-to-find bugs.

7. Use `std::ios_base::sync_with_stdio(false)` and `std::cin.tie(NULL)` only if mixing C and C++ IO operations.

Let's apply these optimizations to the given program:

```c++
#include <iostream>
#include <vector>
#include <map>
#include <array>

using ll = long long;
using Pair = std::pair<int, int>;
using Vector = std::vector<ll>;
using Map = std::map<ll, ll>;

constexpr double PI = 3.14159265358979323846;

void solve() {
  ll n;
  std::cin >> n;
  std::array<std::array<ll, 500>, 500> a;
  Vector sum(2, -1);
  std::array<Pair, 2> ans;
  Map cnt, cnt1;

  for(int i = 0; i < n; i++) {
    for(int j = 0; j < n; j++) {
      std::cin >> a[i][j];
      cnt[i + j] += a[i][j];
      cnt1[i - j] += a[i][j];
    }
  }

  for(int i = 0; i < n; i++) {
    for(int j = 0; j < n; j++) {
      ll val = cnt[i + j] + cnt1[i - j] - a[i][j];
      if (val > sum[(i + j) % 2]) {
        sum[(i + j) % 2] = val;
        ans[(i + j) % 2] = {i, j};
      }
    }
  }

  std::cout << sum[0] + sum[1] << "\n";
  for (const auto& it : ans) {
    std::cout << it.first + 1 << " " << it.second + 1 << " ";
  }
}

int main() {
  ll t = 1;
  while (t--)
    solve();
  return 0;
}
```

Note: This optimized program assumes that the maximum value of `n` is 500. If `n` can be greater than 500, then you may need to dynamically allocate the `a` array.