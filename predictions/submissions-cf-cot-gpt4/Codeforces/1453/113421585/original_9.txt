Optimization steps:

1. Use `ios_base::sync_with_stdio(false); cin.tie(NULL);`: This line of code will make input and output operations more efficient, which can be useful in a large program with many such operations. This makes I/O operations faster by decoupling C's standard streams from the C++ standard streams, and unties the cin stream from the cout stream.

2. Use `unordered_set` instead of `set`: `unordered_set` has an average time complexity of O(1) for insertions, deletions and searches, whereas for `set` these operations take O(log n) time. This can significantly speed up the process if there are many elements.

Here's the optimized code:

```cpp
#include <iostream>
#include <unordered_set>
using namespace std;

typedef long long ll;
#define INF 1000000000

ll BSDK() {
  int n, j, m, a;
  unordered_set<int> s;
  scanf("%d %d", &n, &m);
  for (j = 0; j < n; j++) {
    scanf("%d", &a);
    s.insert(a);
  }
  for (j = 0; j < m; j++) {
    scanf("%d", &a);
    s.insert(a);
  }
  return n + m - s.size();
}

int main() {
  ios_base::sync_with_stdio(false); 
  cin.tie(NULL);
  int t, i;
  scanf("%d", &t);
  for (i = 0; i < t; i++) {
    printf("%lld\n", BSDK());
  }
}
```

Note: The choice between `set` and `unordered_set` will depend on whether or not the order of elements matters. In this particular case, the order does not matter, so `unordered_set` is the more efficient choice. However, if the order does matter, `set` would be the appropriate choice.