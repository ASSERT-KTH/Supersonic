The program can be optimized with the following steps:

1. Remove the unused variables and libraries: The variables `r`, `c`, `p` and `mod` are not used anywhere in the program. The libraries `algorithm`, `climits`, `cmath`, `cstdlib`, `ctime`, `map`, `set`, `stack`, `string` are also not used. Removing these will reduce memory usage.

2. Use `std::ios::sync_with_stdio(0)` and `std::cin.tie(0)` to speed up cin and cout. This is because they disable the synchronization between the C and C++ standard streams.

3. Instead of using `adj[i].begin()`, use `auto it = adj[i].begin()`. This would save time of typing and less prone to errors.

4. Use `emplace_back()` instead of `push_back()`. It constructs the object in-place and is generally more efficient.

5. Use prefix increment `++i` instead of postfix `i++` in loops. Prefix increment avoids unnecessary temporary object construction and destruction and is generally more efficient.

Here is the optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;

typedef pair<int, int> pi;
#define pb push_back

int t, n, m;
vector<pi> adj[300005];
bool match[300005];
vector<int> matching;

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  
  cin >> t;
  while (t--) {
    cin >> n >> m;
    matching.clear();
    for (int i = 1; i <= 3 * n; ++i) {
      adj[i].clear();
    }
    memset(match, 0, sizeof(match));
    for (int i = 1; i <= m; ++i) {
      int x, y;
      cin >> x >> y;
      adj[x].emplace_back(y, i);
    }
    for (int i = 1; i <= 3 * n; ++i) {
      if (match[i] == true)
        continue;
      for (auto it = adj[i].begin(); it != adj[i].end(); ++it) {
        int nd = (*it).first;
        int ed = (*it).second;
        if (match[nd] == false) {
          matching.pb(ed);
          match[nd] = true;
          match[i] = true;
          break;
        }
      }
    }
    if (matching.size() >= n) {
      cout << "Matching" << '\n';
      for (int i = 0; i < n; ++i) {
        cout << matching[i] << " ";
      }
      cout << '\n';
      continue;
    }
    vector<int> v;
    for (int i = 1; i <= 3 * n; ++i) {
      if (match[i] == false)
        v.pb(i);
    }
    if (v.size() >= n) {
      cout << "IndSet" << '\n';
      for (int i = 0; i < n; ++i) {
        cout << v[i] << " ";
      }
    } else
      cout << "Impossible";
    cout << '\n';
    v.clear();
  }
}
```