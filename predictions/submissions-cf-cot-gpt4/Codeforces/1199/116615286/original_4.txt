Step 1: Remove unnecessary includes
You are including <bits/stdc++.h> which already includes all the standard library headers. All subsequent includes are thus unnecessary. Additionally, including <bits/stdc++.h> is generally discouraged due to the time it takes to compile and because it is not a standard library header.

Step 2: Use `std::ios::sync_with_stdio(false)` and `std::cin.tie(nullptr)` at the start of main
The macro `FAST` is a common practice in competitive programming to speed up iostream, but it is better to place it at the start of the main function for readability and consistency.

Step 3: Use `std::vector::reserve(size_t n)` to pre-allocate memory
This function will pre-allocate memory for the vectors `matching` and `v`, which can improve performance because it prevents multiple reallocations and copies when the vector grows.

Step 4: Avoid `std::endl`
Use '\n' instead of `std::endl` to avoid unnecessary flushing of the output buffer, which can slow down your program. 

Here is the optimized program:

```
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pi;

const int mod = 1000000007;
const int MAXN = 300005;

int r[4] = {1, 0, 0, -1};
int c[4] = {0, -1, 1, 0};
char p[4] = {'D', 'L', 'R', 'U'};
vector<pi> adj[MAXN];
bool match[MAXN];
vector<int> matching;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int t, n, m;
    cin >> t;
    while (t--) {
        cin >> n >> m;
        matching.reserve(n);
        matching.clear();

        for (int i = 1; i <= 3 * n; i++) {
            adj[i].clear();
            match[i] = false;
        }

        for (int i = 1; i <= m; i++) {
            int x, y;
            cin >> x >> y;
            adj[x].push_back(make_pair(y, i));
        }

        for (int i = 1; i <= 3 * n; i++) {
            if (match[i])
                continue;
            for (auto& [nd, ed] : adj[i]) {
                if (!match[nd]) {
                    matching.push_back(ed);
                    match[nd] = match[i] = true;
                    break;
                }
            }
        }

        if (matching.size() >= n) {
            cout << "Matching\n";
            for (int i = 0; i < n; i++)
                cout << matching[i] << " ";
            cout << '\n';
            continue;
        }

        vector<int> v;
        v.reserve(n);
        for (int i = 1; i <= 3 * n; i++)
            if (!match[i])
                v.push_back(i);

        if (v.size() >= n) {
            cout << "IndSet\n";
            for (int i = 0; i < n; i++)
                cout << v[i] << " ";
        } else
            cout << "Impossible";
        cout << '\n';
    }
    return 0;
}
```