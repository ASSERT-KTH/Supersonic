Here are the steps to optimize the program:

1. Remove unused libraries: The first line in the program `#include <bits/stdc++.h>` already includes most of the C++ libraries. Therefore, the subsequent include statements are unnecessary and can be removed.

2. Avoid using `endl`: The `endl` manipulator not only inserts a newline, but also flushes the output buffer. The '\n' character can be used instead of `endl` to avoid unnecessary flushing of the output buffer, which can slow down the program.

3. Use `reserve()` for vectors: If you know the size of the vector beforehand, you can use the `reserve()` function. This will allocate memory for the vector at once and avoid reallocations when elements are inserted.

4. Avoid unnecessary uses of `std::pair` and `std::make_pair`: You can directly make use of structured binding introduced in C++17 to simplify your code and make it more readable.

5. Use `ios::sync_with_stdio(0)` and `cin.tie(0)`: This can speed up the I/O operations in C++. 

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
int mod = 1000000007;
#define pi pair<int, int>
#define pb push_back
int r[4] = {1, 0, 0, -1};
int c[4] = {0, -1, 1, 0};
char p[4] = {'D', 'L', 'R', 'U'};
int t, n, m;
vector<pi> adj[300005];
bool match[300005];
vector<int> matching;
int main() {
  FAST;
  cin >> t;
  matching.reserve(300005);
  while (t--) {
    cin >> n >> m;
    matching.clear();
    for (int i = 1; i <= 3 * n; i++) {
      adj[i].clear();
    }
    memset(match, 0, sizeof(match));
    for (int i = 1; i <= m; i++) {
      int x, y;
      cin >> x >> y;
      adj[x].pb({y, i});
    }
    for (int i = 1; i <= 3 * n; i++) {
      if (match[i] == true)
        continue;
      for (auto &[nd, ed] : adj[i]) {
        if (match[nd] == false) {
          matching.pb(ed);
          match[nd] = true;
          match[i] = true;
          break;
        }
      }
    }
    if (matching.size() >= n) {
      cout << "Matching" << '\n';
      for (int i = 0; i < n; i++) {
        cout << matching[i] << " ";
      }
      cout << '\n';
      continue;
    }
    vector<int> v;
    v.reserve(300005);
    for (int i = 1; i <= 3 * n; i++) {
      if (match[i] == false)
        v.pb(i);
    }
    if (v.size() >= n) {
      cout << "IndSet" << '\n';
      for (int i = 0; i < n; i++) {
        cout << v[i] << " ";
      }
    } else
      cout << "Impossible";
    cout << '\n';
    v.clear();
  }
}
```