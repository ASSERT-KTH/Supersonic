This given C++ program doesn't seem to have any big optimization opportunities as most of the operations are already efficient.

However, there are a few small improvements that can be made:

1. Use `reserve()` for vectors. This will allocate memory at once and avoid re-allocation when elements are added or removed.

2. Use `ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);` instead of the macro `FAST`.

3. Remove the unused headers. The `#include <bits/stdc++.h>` already includes most of the standard library headers.

4. Since `vector<int> v` and `vector<int> matching` are used in a loop, you can declare them outside of the loop to avoid creating and destroying them every iteration.

5. Avoid calling `matching.size()` multiple times by storing it in a variable.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
int mod = 1000000007;
#define pi pair<int, int>
#define pb push_back
int r[4] = {1, 0, 0, -1};
int c[4] = {0, -1, 1, 0};
char p[4] = {'D', 'L', 'R', 'U'};
int t, n, m;
vector<pair<int, int>> adj[300005];
bool match[300005];
vector<int> matching;
vector<int> v;

int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
  cin >> t;
  matching.reserve(300005);
  v.reserve(300005);
  while (t--) {
    cin >> n >> m;
    matching.clear();
    for (int i = 1; i <= 3 * n; i++) {
      adj[i].clear();
    }
    memset(match, 0, sizeof(match));
    for (int i = 1; i <= m; i++) {
      int x;
      int y;
      cin >> x >> y;
      adj[x].pb(make_pair(y, i));
    }
    for (int i = 1; i <= 3 * n; i++) {
      vector<pair<int, int>>::iterator it = adj[i].begin();
      if (match[i] == true)
        continue;
      for (; it != adj[i].end(); it++) {
        int nd = (*it).first;
        int ed = (*it).second;
        if (match[nd] == false) {
          matching.pb(ed);
          match[nd] = true;
          match[i] = true;
          break;
        }
      }
    }
    int matchingSize = matching.size();
    if (matchingSize >= n) {
      cout << "Matching" << '\n';
      for (int i = 0; i < n; i++) {
        cout << matching[i] << " ";
      }
      cout << '\n';
      continue;
    }
    v.clear();
    for (int i = 1; i <= 3 * n; i++) {
      if (match[i] == false)
        v.pb(i);
    }
    if (v.size() >= n) {
      cout << "IndSet" << '\n';
      for (int i = 0; i < n; i++) {
        cout << v[i] << " ";
      }
    } else
      cout << "Impossible";
    cout << '\n';
  }
}
```

Note: The optimizations made here are minor and may not result in a significant performance improvement. The most expensive operations in your code are likely the I/O operations and the loop, neither of which can be much optimized without changing the algorithm or the data structures used.