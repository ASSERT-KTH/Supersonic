Your program doesn't have a major issue that is causing it to run slowly or consume too much memory. However, there are a few minor tweaks that can be made to make it more efficient:

1. Memory Allocation: Instead of clearing and reallocating memory for the vector `matching` and `adj[i]` for each test case, we can declare them inside the while loop. This way, they will be destroyed and recreated for each test case, which could be faster than clearing and reallocating memory.

2. Avoiding unnecessary operations: In the second for loop, you have an iterator `it` that you initialize to `adj[i].begin()` and then check if `match[i] == true` to decide whether to continue. You can check `match[i]` before creating the iterator to avoid unnecessary operations.

3. Avoiding redundant checks: In the part where you check `if (matching.size() >= n)` and `if (v.size() >= n)`, the else clause prints "Impossible". However, due to the nature of the problem and the way the program is written, this case will never occur. Therefore, this check is unnecessary and can be removed.

Here is the optimized version of your program:

```C++
#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
int mod = 1000000007;
#define pi pair<int, int>
#define pb push_back
int r[4] = {1, 0, 0, -1};
int c[4] = {0, -1, 1, 0};
char p[4] = {'D', 'L', 'R', 'U'};
int t, n, m;

int main() {
  FAST;
  cin >> t;
  while (t--) {
    cin >> n >> m;
    vector<pair<int, int>> adj[300005];
    bool match[300005];
    vector<int> matching;
    for (int i = 1; i <= 3 * n; i++) {
      match[i] = 0;
    }
    for (int i = 1; i <= m; i++) {
      int x;
      int y;
      cin >> x >> y;
      adj[x].pb(make_pair(y, i));
    }
    for (int i = 1; i <= 3 * n; i++) {
      if (match[i] == true)
        continue;
      for (auto it : adj[i]) {
        int nd = it.first;
        int ed = it.second;
        if (match[nd] == false) {
          matching.pb(ed);
          match[nd] = true;
          match[i] = true;
          break;
        }
      }
    }
    if (matching.size() >= n) {
      cout << "Matching" << '\n';
      for (int i = 0; i < n; i++) {
        cout << matching[i] << " ";
      }
      cout << '\n';
      continue;
    }
    vector<int> v;
    for (int i = 1; i <= 3 * n; i++) {
      if (match[i] == false)
        v.pb(i);
    }
    cout << "IndSet" << '\n';
    for (int i = 0; i < n; i++) {
      cout << v[i] << " ";
    }
    cout << '\n';
  }
}
```