The following optimizations can be made:


1. The #include <bits/stdc++.h> includes all the standard library files which increase the compilation time. We should only include those files which are needed.

2. The same header file <string> is included twice, we only need to include it once.

3. The mod variable is declared as int but it's not used anywhere in the program. We can remove it.

4. The variables t, n, m are declared globally but they are only used in the main function. It's better to declare them in the main function to reduce the scope and improve memory usage.

5. The usage of std::endl flushes the buffer and it's slower than '\n'. We should use '\n' for a new line.

6. We can use reserve() function for vector 'matching' and 'v' to avoid reallocation of memory when the size of the vector increases. The size will be 'n' as it's the maximum number of elements can be pushed into the vector.

7. Instead of calling the function 'pb', we can use 'emplace_back'. It constructs the element in-place and is generally more efficient.

Here is the optimized program:


```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#define FAST ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
typedef long long ll;
typedef unsigned long long ull;
using namespace std;
#define pb push_back
int r[4] = {1, 0, 0, -1};
int c[4] = {0, -1, 1, 0};
char p[4] = {'D', 'L', 'R', 'U'};
vector<pair<int, int>> adj[300005];
bool match[300005];
vector<int> matching, v;

int main() {
  FAST;
  int t, n, m;
  cin >> t;
  while (t--) {
    cin >> n >> m;
    matching.reserve(n);
    matching.clear();
    v.reserve(n);
    v.clear();
    for (int i = 1; i <= 3 * n; i++) {
      adj[i].clear();
    }
    memset(match, 0, sizeof(match));
    for (int i = 1; i <= m; i++) {
      int x, y;
      cin >> x >> y;
      adj[x].emplace_back(y, i);
    }
    for (int i = 1; i <= 3 * n; i++) {
      vector<pair<int, int>>::iterator it = adj[i].begin();
      if (match[i] == true)
        continue;
      for (; it != adj[i].end(); it++) {
        int nd = (*it).first;
        int ed = (*it).second;
        if (match[nd] == false) {
          matching.emplace_back(ed);
          match[nd] = true;
          match[i] = true;
          break;
        }
      }
    }
    if (matching.size() >= n) {
      cout << "Matching" << '\n';
      for (int i = 0; i < n; i++) {
        cout << matching[i] << " ";
      }
      cout << '\n';
      continue;
    }
    for (int i = 1; i <= 3 * n; i++) {
      if (match[i] == false)
        v.emplace_back(i);
    }
    if (v.size() >= n) {
      cout << "IndSet" << '\n';
      for (int i = 0; i < n; i++) {
        cout << v[i] << " ";
      }
    } else
      cout << "Impossible";
    cout << '\n';
  }
}
```