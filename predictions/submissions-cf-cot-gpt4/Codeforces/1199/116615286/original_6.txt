There are a few optimizations that can be applied to this program:

1. Redundant Header Files: The program includes "bits/stdc++.h" which internally includes all the standard library header files. Including specific header files like "algorithm", "climits", etc. again is redundant and increases the compilation time. So, the specific headers which are already included in "bits/stdc++.h" can be removed.

2. Use of Macros: The program uses 'pb' macro for 'push_back'. Although this is not a performance optimization, it's a good practice to use original function names for readability and maintainability of the code.

3. Unnecessary Clearing of Vector: The vector 'v' is cleared at the end of each test case, but it's not necessary because 'v' is local to each test case and will automatically get destroyed at the end of each test case. So, 'v.clear()' can be removed.

4. Use of Iterators: In C++11 and later, range-based for loops provide a simpler and cleaner way to iterate over elements in a vector. So, we can replace the traditional iterator-based loop with a range-based for loop.

5. Use of memset: 'memset' is used to initialize 'match' array. As 'match' is a boolean array, we can use 'std::fill_n' from algorithm library which is safer and more idiomatic in C++.

Here is the optimized code considering the above points:

```cpp
#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);

typedef long long ll;
typedef unsigned long long ull;
int mod = 1000000007;
using namespace std;
#define pi pair<int, int>

int r[4] = {1, 0, 0, -1};
int c[4] = {0, -1, 1, 0};
char p[4] = {'D', 'L', 'R', 'U'};
int t, n, m;
vector<pair<int, int>> adj[300005];
bool match[300005];
vector<int> matching;

int main() {
  FAST;
  cin >> t;
  while (t--) {
    cin >> n >> m;
    matching.clear();
    for (int i = 1; i <= 3 * n; i++) {
      adj[i].clear();
    }
    fill_n(match, 300005, false);
    for (int i = 1; i <= m; i++) {
      int x, y;
      cin >> x >> y;
      adj[x].push_back(make_pair(y, i));
    }
    for (int i = 1; i <= 3 * n; i++) {
      if (match[i] == true)
        continue;
      for (const auto &edge : adj[i]) {
        int nd = edge.first;
        int ed = edge.second;
        if (match[nd] == false) {
          matching.push_back(ed);
          match[nd] = true;
          match[i] = true;
          break;
        }
      }
    }
    if (matching.size() >= n) {
      cout << "Matching" << '\n';
      for (int i = 0; i < n; i++) {
        cout << matching[i] << " ";
      }
      cout << '\n';
      continue;
    }
    vector<int> v;
    for (int i = 1; i <= 3 * n; i++) {
      if (match[i] == false)
        v.push_back(i);
    }
    if (v.size() >= n) {
      cout << "IndSet" << '\n';
      for (int i = 0; i < n; i++) {
        cout << v[i] << " ";
      }
    } else
      cout << "Impossible";
    cout << '\n';
  }
}
```