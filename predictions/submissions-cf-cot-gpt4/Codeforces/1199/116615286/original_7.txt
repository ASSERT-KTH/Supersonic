1. Avoid using "#include <bits/stdc++.h>" as it includes a lot of unnecessary libraries, increasing the compile time. Instead, include only the necessary libraries.

2. The use of "ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);" may not be necessary in this case, as there are no mixed inputs/outputs (like cin and scanf, cout and printf). So, removing it should not affect the program.

3. The "mod" variable is declared but not used in the program, so it can be removed.

4. Try to avoid using global variables when they can be local. Here, variables like "t", "n", "m" can be declared inside the main() function.

5. The "r", "c", and "p" arrays are declared but not used in the program, so they can be removed.

6. Instead of clearing vector "v" at the end of the while loop, it can be declared inside the loop. This way, it will automatically get destroyed at the end of each iteration, which may save memory overhead.

7. Instead of using 'endl', use '\n' for newline, as 'endl' flushes the output buffer every time and may slow down the program.

Here's the optimized version of the program:

```c++
#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

int main() {
  int t;
  cin >> t;
  while (t--) {
    int n, m;
    cin >> n >> m;
    vector<int> matching;
    vector<pair<int, int>> adj[300005];
    bool match[300005];
    memset(match, 0, sizeof(match));
    for (int i = 1; i <= m; i++) {
      int x, y;
      cin >> x >> y;
      adj[x].push_back(make_pair(y, i));
    }
    for (int i = 1; i <= 3 * n; i++) {
      if (match[i] == true)
        continue;
      for (auto it = adj[i].begin(); it != adj[i].end(); it++) {
        int nd = (*it).first;
        int ed = (*it).second;
        if (match[nd] == false) {
          matching.push_back(ed);
          match[nd] = true;
          match[i] = true;
          break;
        }
      }
    }
    if (matching.size() >= n) {
      cout << "Matching" << '\n';
      for (int i = 0; i < n; i++)
        cout << matching[i] << " ";
      cout << '\n';
      continue;
    }
    vector<int> v;
    for (int i = 1; i <= 3 * n; i++)
      if (match[i] == false)
        v.push_back(i);
    if (v.size() >= n) {
      cout << "IndSet" << '\n';
      for (int i = 0; i < n; i++)
        cout << v[i] << " ";
    } else
      cout << "Impossible";
    cout << '\n';
  }
  return 0;
}
```
