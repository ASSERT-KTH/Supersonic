#include <iostream>
#include <algorithm>
#include <vector>
#include <array>

#define MOD 1000000007

typedef long long int ll;

ll gcd(ll a, ll b) {
  if (a < 0)
    a = -a;
  if (b < 0)
    b = -b;
  if (a < b)
    std::swap(a, b);
  if (b == 0)
    return a;
  if (a % b == 0)
    return b;
  return gcd(b, a % b);
}

ll lcm(ll a, ll b) {
  ll c = gcd(a, b);
  return a * b / c;
}

ll pow(ll n, ll k) {
  if (k < 0)
    return 0;
  ll ret = 1;
  ll now = n;
  while (k > 0) {
    if (k & 1)
      ret *= now;
    now *= now;
    k /= 2;
  }
  return ret;
}

ll modexp(ll n, ll k, ll md) {
  ll ret = 1;
  ll now = n;
  now %= md;
  while (k > 0) {
    if (k % 2 == 1) {
      ret *= now;
      ret %= md;
    }
    now *= now;
    now %= md;
    k /= 2;
  }
  return ret;
}

ll popcount(ll n) {
  ll ret = 0;
  ll u = n;
  while (u > 0) {
    ret += u % 2;
    u /= 2;
  }
  return ret;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  ll n, t;
  std::cin >> n >> t;

  std::vector<ll> a(n);
  for (ll &num : a) {
    std::cin >> num;
  }

  std::vector<ll> b(n + 1, 0);
  ll sum = 0;
  for (ll i = 0; i < n; ++i) {
    sum += a[i];
    b[i + 1] = sum;
  }

  int maxlen = 0;
  for (ll i = 1; i <= n; ++i) {
    ll to = b[i - 1] + t;
    auto it = std::upper_bound(b.begin(), b.end(), to);
    int len = it - b.begin() - i;
    maxlen = std::max(maxlen, len);
  }

  std::cout << maxlen << " ";
  
  return 0;
}