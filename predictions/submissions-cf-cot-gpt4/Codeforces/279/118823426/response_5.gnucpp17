#include <iostream>
#include <vector>
#include <algorithm>

using std::cin;
using std::cout;
using std::vector;
using std::upper_bound;

typedef long long ll;

ll gcd(ll a, ll b) {
  while (b != 0) {
    a %= b;
    std::swap(a, b);
  }
  return a;
}

ll lcm(ll a, ll b) {
  ll c = gcd(a, b);
  return a / c * b;
}

ll pow(ll n, ll k) {
  ll ret = 1;
  while (k > 0) {
    if (k & 1)
      ret *= n;
    n *= n;
    k >>= 1;
  }
  return ret;
}

ll modexp(ll n, ll k, ll md) {
  ll ret = 1;
  n %= md;
  while (k > 0) {
    if (k & 1) ret = (ret * n) % md;
    n = (n * n) % md;
    k >>= 1;
  }
  return ret;
}

ll popcount(ll n) {
  return __builtin_popcountll(n);
}

int main() {
  ll n, t;
  cin >> n >> t;
  vector<ll> a(n);
  for (ll i = 0; i < n; i++) cin >> a[i];
  vector<ll> b(n + 1, 0);
  for (ll i = 0; i < n; i++) b[i + 1] = b[i] + a[i];
  int maxlen = 0;
  for (ll i = 1; i <= n; i++) {
    ll to = b[i - 1] + t;
    auto it = upper_bound(b.begin(), b.end(), to);
    int len = (it - b.begin()) - i;
    maxlen = std::max(maxlen, len);
  }
  cout << maxlen << " ";
  return 0;
}