Optimization Steps:

1. Avoid using #include <bits/stdc++.h> as it includes a lot of unnecessary files which can increase the compile time. Instead, include only the necessary files.

2. Avoid using the namespace declaration 'using namespace std;'. This will load all the standard library functions which we may not use in our program. This will increase the compile-time and run-time.

3. Avoid defining macros that are not used in the code. In this code, macros like DOTEST(t), TEST, pb, mp, per(i, a, n) are not used and thus can be removed.

4. The array 'a' and 'b' can be declared as static arrays. This will reduce memory usage as static variables are stored in the data segment of the program's memory space.

5. The pow function implementation can be optimized by using the standard library function std::pow instead of writing our own implementation.

6. The gcd and lcm functions can be optimized by using the standard library function std::gcd and std::lcm instead of writing our own implementation.

7. The modexp and popcount functions are not used in the program and can be removed.

8. In the main function, instead of using the auto keyword to declare 'it', we can use an explicit type. This will avoid unnecessary type deduction which can increase compile time.

9. Instead of using the upper_bound function which has a complexity of O(logN), we can use a two-pointer approach to find the maximum length. This will reduce the time complexity to O(N).

Now let's write the optimized code.

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

typedef long long int ll;

ll pow(ll n, ll k) {
  return std::pow(n, k);
}

int main() {
  std::ios_base::sync_with_stdio(0);
  std::cin.tie(nullptr);

  ll n, t;
  std::cin >> n >> t;
  static ll a[100005];
  for(ll i=0; i<n; i++) std::cin >> a[i];
  static ll b[100005] = {0};
  ll sum = 0;
  for(ll i = 0; i < n; i++) {
    sum += a[i];
    b[i + 1] = sum;
  }
  int maxlen = 0;
  int j = 0;
  for(int i = 1; i <= n; i++) {
    while(b[i] - b[j] > t) j++;
    maxlen = std::max(maxlen, i - j);
  }
  std::cout << maxlen << " ";
}
```
This code is optimized for running time and memory usage.