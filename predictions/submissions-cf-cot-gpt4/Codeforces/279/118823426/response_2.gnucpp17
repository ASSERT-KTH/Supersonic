#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
using VI = vector<int>;
using ll = long long int;
using VLL = vector<ll>;
using PII = pair<int, int>;
using PLL = pair<ll, ll>;
using db = double;
using maxheap = priority_queue<ll>;
using minheap = priority_queue<ll, vector<ll>, greater<ll>>;
#define MOD 1000000007
#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define rep(i, a, n) for (ll i = a; i < n; i++)
#define per(i, a, n) for (ll i = n - 1; i >= a; i--)
ll gcd(ll a, ll b) {
  a = abs(a);
  b = abs(b);
  return (b == 0) ? a : gcd(b, a % b);
}
ll lcm(ll a, ll b) {
  return a * b / gcd(a, b);
}
ll pow(ll n, ll k) {
  ll ret = 1, now = n;
  while (k > 0) {
    if (k & 1)
      ret *= now;
    now *= now;
    k >>= 1;
  }
  return ret;
}
ll modexp(ll n, ll k, const ll md = MOD) {
  ll ret = 1, now = n % md;
  while (k > 0) {
    if (k & 1) {
      ret *= now;
      ret %= md;
    }
    now *= now;
    now %= md;
    k >>= 1;
  }
  return ret;
}
ll popcount(ll n) {
  ll ret = 0;
  while (n > 0) {
    ret += n & 1;
    n >>= 1;
  }
  return ret;
}
int main() {
  ll n, t;
  cin >> n >> t;
  VLL a(n), b(n + 1, 0);
  ll sum = 0;
  rep(i, 0, n) {
    cin >> a[i];
    sum += a[i];
    b[i + 1] = sum;
  }
  int maxlen = 0;
  rep(i, 1, n + 1) {
    ll to = b[i - 1] + t;
    auto it = upper_bound(all(b), to);
    int len = (it - b.begin()) - i;
    maxlen = max(maxlen, len);
  }
  cout << maxlen;
  return 0;
}