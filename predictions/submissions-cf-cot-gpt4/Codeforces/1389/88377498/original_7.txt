Optimization Steps:

1. Remove unnecessary includes: The first line `#include <bits/stdc++.h>` includes all standard library headers. But this can slow down the compilation time because it includes more files than you actually need.

2. You are using `cin` and `cout` for input/output. These are slower compared to `scanf` and `printf`. You can speed this up by using `scanf` and `printf` instead.

3. The macros are trying to make the code shorter, but they actually make it harder to read and understand. Macros are replaced by the preprocessor before the actual compilation begins. They are not type safe and make debugging harder.

4. Do not use `using namespace std`. It can cause name clashes, which can lead to bugs.

5. The array `a` is initialized with a constant size of 12. It might be possible to reduce the size of the array if it is not necessary to have it this large.

6. Avoid using complex functions when simple ones will do. For example, the function `bigmod` could be replaced with the standard modulus operator `%`.

7. Avoid defining global variables unless absolutely necessary. Global variables consume memory for the lifetime of the program and can lead to bugs due to side effects.

Optimized Code:

```
#include <iostream>
#include <cstring>
#include <cmath>

typedef long long int ll;

ll fx[4] = {1, -1, 0, 0};
ll fy[4] = {0, 0, 1, -1};
ll ox8[] = {0, 0, 1, 1, 1, -1, -1, -1};
ll oy8[] = {1, -1, 1, -1, 0, 0, -1, 1};

template <class T>
T gcd(T a, T b) {
  return (b != 0 ? gcd<T>(b, a % b) : a);
}

template <class T> 
T lcm(T a, T b) {
  return (a / gcd<T>(a, b) * b);
}

ll pw(ll a, ll b) {
  ll ans = 1;
  for (ll i = 1; i <= b; ++i)
    ans = (ans * a);
  return ans;
}

bool sort2val(const std::pair<int, int> &a, const std::pair<int, int> &b) {
  if (a.second == b.second)
    return a.first < b.first;
  return a.second < b.second;
}

void solve() {
  std::string s;
  std::cin >> s;
  ll cr_h = 0, a[12];
  memset(a, 0, sizeof(a));
  for(int i = 0; i < s.size(); i++) a[s[i] - '0']++;
  for(int i = 0; i < 10; i++) cr_h = std::max(cr_h, a[i]);
  for(int i = 0; i < 10; i++) {
    for(int j = 0; j < 10; j++) {
      ll koita = 0;
      ll ekhn_ache = i;
      for(int p = 0; p < s.size(); p++) {
        if (s[p] - '0' == ekhn_ache) {
          koita++;
          ekhn_ache = i + j - ekhn_ache;
        }
      }
      if (koita & 1)
        --koita;
      cr_h = std::max(cr_h, koita);
    }
  }
  std::cout << s.size() - cr_h << "\n";
}

int main() {
  long long t;
  std::cin >> t;
  while(t--){
    solve();
  }
  return 0;
}
```