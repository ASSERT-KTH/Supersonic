Step 1: Include only necessary libraries
The first line `#include <bits/stdc++.h>` already includes most of the other headers like `<cmath>`, `<cstdlib>`, `<cstring>`, `<iostream>`, and `<iterator>`. So, we can remove these redundant includes.

Step 2: Remove unused macros
The macro `mxi` is unused. So, we can remove it.

Step 3: Avoid using `using namespace std;`
This is not an optimization but it's a good practice to avoid `using namespace std;` because it can lead to name clashes.

Step 4: Avoid using `ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);`
These lines are used to sync the C++ standard streams with the C standard streams which is not required in this program.

Step 5: Avoid using `memset` for non-trivial data types
The `memset` function is used for setting values for trivial data types. Using `memset` to set values for non-trivial data types can cause unexpected results.

Step 6: Use prefix increment/decrement operators for non-complex types
For non-complex types like built-in types and pointers, the prefix and postfix increment/decrement operators are equivalent in their effect. But for objects of class types, the prefix version can be more efficient because it doesn't need to create and destroy a temporary object. So, it's a good practice to use the prefix version for non-complex types. We can replace `rep0(p, 0, s.size())` with `rep0(p, 0, s.length())`.

Here is the optimized code:

```
#include <bits/stdc++.h>
#define test long long t; std::cin >> t; while (t--)
#define ses "\n"
#define whp " "
#define mp std::make_pair
#define PII std::pair<long long, long long>
#define pf std::printf
#define sf std::scanf
#define ff first
#define ss second
#define ALL(x) x.begin(), x.end()
#define pb push_back
#define rep0(i, a, b) for (int i = a; i < b; i++)
#define rep1(i, a, b) for (int i = a; i <= b; i++)
#define rep0in(i, a, b) for (int i = a - 1; i >= b; i--)
#define rep1in(i, a, b) for (int i = a; i > b; i--)
#define repv(i, a) for (auto i = a.begin(); i != a.end(); ++i)
#define INF 0x3f3f3f3f
#define PI acos(-1)
#define what_is(x) std::cout << x << ses;
typedef long long v99;
typedef unsigned long long ull;
v99 fx[4] = {1, -1, 0, 0};
v99 fy[4] = {0, 0, 1, -1};
v99 ox8[] = {0, 0, 1, 1, 1, -1, -1, -1};
v99 oy8[] = {1, -1, 1, -1, 0, 0, -1, 1};
bool sort2val(const std::pair<int, int> &a, const std::pair<int, int> &b) {
  if (a.second == b.second)
    return a.first < b.first;
  return a.second < b.second;
}
template <class T> T gcd(T a, T b) { return (b != 0 ? gcd<T>(b, a % b) : a); }
template <class T> T lcm(T a, T b) { return (a / gcd<T>(a, b) * b); }
v99 pw(v99 a, v99 b) {
  v99 ans = 1;
  for (v99 i = 1; i <= b; ++i)
    ans = (ans * a);
  return ans;
}
template <class T> inline T bigmod(T n, T p, T m) {
  if (p == 0)
    return 1;
  else if (p % 2 == 0) {
    v99 val = bigmod(n, p / 2, m);
    return (T)((val * val) % m);
  } else
    return (T)(((v99)n * (v99)bigmod(n, p - 1, m)) % m);
}
void solve() {
  std::string s;
  std::cin >> s;
  v99 cr_h = 0, a[12] = {0};
  rep0(i, 0, s.length()) a[s[i] - '0']++;
  rep0(i, 0, 10) cr_h = std::max(cr_h, a[i]);
  rep0(i, 0, 10) {
    rep0(j, 0, 10) {
      v99 koita = 0;
      v99 ekhn_ache = i;
      rep0(p, 0, s.length()) {
        if (s[p] - '0' == ekhn_ache) {
          koita++;
          ekhn_ache = i + j - ekhn_ache;
        }
      }
      if (koita & 1)
        --koita;
      cr_h = std::max(cr_h, koita);
    }
  }
  std::cout << s.length() - cr_h << ses;
}
int main() {
  test solve();
  return 0;
}
```
