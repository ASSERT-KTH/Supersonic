Here are the steps to optimize the code:

1. The first and most important thing you should optimize is the usage of the `#include <bits/stdc++.h>` header. This header file includes almost all standard library headers and increases compilation time. Instead, only include the headers that you actually use in your code.

2. Use `std::ios_base::sync_with_stdio(false)` and `std::cin.tie(NULL)` to speed up I/O operations.

3. Use `std::vector<int>` instead of C-style array for `a` in `solve()`. This is safer and more C++-like.

4. Instead of using `memset` to clear the vector `a`, use the `std::fill` function which is safer and more expressive.

5. The code uses `typedef long long v99`. This is confusing and hampers readability. Better to just use `long long`.

6. Avoid using macros for simple code snippets like `ses` and `whp`. They don't improve performance and can reduce readability. Instead, use `std::endl` and `" "` directly in the code.

7. The use of `rep0` and `rep1` macros can be replaced with range-based for loops or standard for loops, which are more expressive and readable.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;

long long fx[4] = {1, -1, 0, 0};
long long fy[4] = {0, 0, 1, -1};
long long ox8[] = {0, 0, 1, 1, 1, -1, -1, -1};
long long oy8[] = {1, -1, 1, -1, 0, 0, -1, 1};

void solve() {
  string s;
  cin >> s;
  long long cr_h = 0;
  vector<long long> a(12, 0);
  
  for (auto ch : s) a[ch - '0']++;
  
  for (int i = 0; i < 10; i++) cr_h = max(cr_h, a[i]);
  
  for (int i = 0; i < 10; i++) {
    for (int j = 0; j < 10; j++) {
      long long koita = 0;
      long long ekhn_ache = i;
      for (auto ch : s) {
        if (ch - '0' == ekhn_ache) {
          koita++;
          ekhn_ache = i + j - ekhn_ache;
        }
      }
      if (koita & 1)
        --koita;
      cr_h = max(cr_h, koita);
    }
  }
  cout << s.size() - cr_h << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long t;
  cin >> t;
  while (t--)
    solve();
  return 0;
}
```