Step 1: Avoid using `#include <bits/stdc++.h>`. This header file includes too many standard libraries which can significantly increase your compile time. Instead, include only the necessary libraries.

Step 2: The `lef` variable is global and is used to check if we can go left or not. But it can be replaced with a local variable inside the function `f`. This will not only reduce the scope of the variable but will also avoid potential issues due to its global nature.

Step 3: There's unnecessary duplication in the computation and assignment of `dp[i][z]` and the return statement in function `f`. This can be simplified by returning `dp[i][z]` only once.

Step 4: Instead of initializing `arr` with `n` at runtime, which is considered a bad practice in C++, we will use a vector to store these values. This will allow us to benefit from the dynamic resizing of vectors.

Step 5: We are using `memset` to set all values in the `dp` array to 0. But this is a C function and we are working with C++. So, we can use `std::fill` instead, which is more idiomatic in C++.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

#define ll long long
#define N 100005
#define mod 1000000007
#define dd double
#define rep(i, n) for (int i = 0; i < n; i++)
#define REP(i, a, b) for (int i = a; i < b; i++)
#define pb push_back
#define mp make_pair
#define F first
#define S second

long long int dp[100001][6];

long long int f(int i, int k, int z, vector<int>& arr, bool lef = true) {
  if(k == 0 || i < 0)
    return 0;
  
  long long int left = 0;
  long long int right = 0;

  if(dp[i][z])
    return dp[i][z];

  if(z && lef) {
    left = f(i - 1, k - 1, z - 1, arr, false);
  }

  right = f(i + 1, k - 1, z, arr, true);

  dp[i][z] = arr[i] + max(left, right);

  return dp[i][z];
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif

  int t;
  cin >> t;
  while(t--) {
    int n, k, z;
    cin >> n >> k >> z;

    long long int ans = 0;

    vector<int> arr(n);

    rep(i, n) {
      cin >> arr[i];
    }

    ans = arr[0] + f(1, k, z, arr);

    cout << ans << endl;

    fill(&dp[0][0], &dp[0][0] + sizeof(dp)/sizeof(long long), 0);
  }

#ifndef ONLINE_JUDGE
  cout << "\nTime Elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " sec\n";
#endif

  return 0;
}
```