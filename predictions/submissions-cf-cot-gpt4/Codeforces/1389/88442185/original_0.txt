Here are some optimization steps:

1. Avoid `#include <bits/stdc++.h>`: This header file includes quite a lot of standard libraries which might not be used in this program. It leads to an unnecessary increase in the compilation time. Instead, we should only include the libraries that we are using in the program.

2. Avoid Macro if possible: Macros in C/C++ are prone to errors and do not provide type checking. If possible, use constants or inline functions depending upon the use case.

3. Avoid Global Variables: Global variables remain in memory for the lifetime of the program, thereby increasing the memory usage.

4. Unnecessary use of `lef` variable: We can see that the variable `lef` is toggled multiple times but its initial value is always true. It's better to remove it and directly use true/false where it's needed.

5. `memset` in each test case: Instead of resetting the dp array after each test case, we can initialize it to -1 at the start and then check if dp[i][z] != -1 instead of checking if dp[i][z] is true or false. This way we can avoid the overhead of resetting the array after each test case which leads to an unnecessary increase in time complexity.

6. Remove unused macros and variables: The macros and variables which are not being used in the program can be removed.

Here is the optimized code:

```cpp
#include <iostream>
#include <cstring>

using namespace std;

#define N 100005

long long dp[N][6];

long long f(int i, int k, int z, int arr[]) {
  if (k == 0 || i < 0)
    return 0;
  long long left = 0;
  long long right = 0;
  if (dp[i][z] != -1)
    return dp[i][z];
  if (z) {
    left = f(i - 1, k - 1, z - 1, arr);
  }
  right = f(i + 1, k - 1, z, arr);
  return dp[i][z] = arr[i] + max(left, right);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int t;
  cin >> t;
  memset(dp, -1, sizeof(dp));
  while (t--) {
    int n, k, z;
    cin >> n >> k >> z;
    int arr[n];
    for (int i = 0; i < n; i++) {
      cin >> arr[i];
    }
    cout << arr[0] + f(1, k, z, arr) << "\n";
  }
  return 0;
}
```
This optimized code will have less compilation time, less memory usage and less runtime.