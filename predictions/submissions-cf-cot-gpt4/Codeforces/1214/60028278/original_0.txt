Here are the steps to optimize the given program:

1. The "vis" boolean array is initialized with the size of maxn, which is a huge number. It's better to initialize it with the size of n*m to save memory.

2. Instead of using std::string for the "mz" array, we can use a character array 'mz' to improve performance as string objects have overheads.

3. The queue 'q' is declared but not used anywhere in the program. We should remove it to save memory.

4. The 'ans' variable is also declared but not used anywhere. We should remove it.

5. We should use '\n' instead of 'endl' for line breaks as 'endl' causes unnecessary flushes of the output buffer, which can slow down the program.

6. Using std::ios_base::sync_with_stdio(false); and std::cin.tie(NULL); can speed up input/output operations.

Here is the optimized program:

```cpp
#include <algorithm>
#include <cstring>
#include <iostream>
#include <map>
#include <stdio.h>
#include <vector>
using namespace std;
#define ll long long
typedef pair<int, int> pii;
int n, m;
char mz[1000005][1000005];
bool vis[1000005][1000005];
bool dfs(int x, int y) {
  if (x >= n || y >= m || mz[x][y] == '#' || vis[x][y])
    return false;
  if (x == n - 1 && y == m - 1)
    return true;
  if (x || y)
    vis[x][y] = 1;
  return dfs(x + 1, y) || dfs(x, y + 1);
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    cin >> mz[i];
  }
  if (!dfs(0, 0))
    cout << 0 << '\n';
  else {
    vis[0][0] = 0;
    if (!dfs(0, 0))
      cout << 1 << '\n';
    else
      cout << 2 << '\n';
  }
  return 0;
}
```

Please note that this code assumes that the number of rows and columns (n and m) will not exceed 1000005. If it can be larger than 1000005, you will need to dynamically allocate the 'mz' and 'vis' arrays.