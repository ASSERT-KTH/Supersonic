#include <algorithm>
#include <cstring>
#include <iostream>
#include <map>
#include <queue>
#include <stdio.h>
#include <string>
#include <vector>
using namespace std;
#define ll long long
typedef pair<int, int> pii;
int n, m, ans;
string mz[1005];
queue<pii> q;
bool vis[1005][1005];

bool bfs(int x, int y) {
  if(mz[0][0] == '#') return false;
  memset(vis, false, sizeof(vis));
  q.push({x, y});
  vis[x][y] = true;
  while (!q.empty()) {
    pii p = q.front();
    q.pop();
    if (p.first == n - 1 && p.second == m - 1) return true;
    if (p.first + 1 < n && mz[p.first + 1][p.second] != '#' && !vis[p.first + 1][p.second]) {
      q.push({p.first + 1, p.second});
      vis[p.first + 1][p.second] = true;
    }
    if (p.second + 1 < m && mz[p.first][p.second + 1] != '#' && !vis[p.first][p.second + 1]) {
      q.push({p.first, p.second + 1});
      vis[p.first][p.second + 1] = true;
    }
  }
  return false;
}
int main() {
  cin.sync_with_stdio(false);
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    cin >> mz[i];
  }
  int cnt = bfs(0, 0) + bfs(0, 0);
  cout << cnt;
  return 0;
}