Here are the optimizations that can be made to the program:

1. The `using namespace std;` statement can be removed. This is because using the entire std namespace can lead to name collisions. Instead, only use the specific components you need from the std namespace.

2. `#define ll long long` is not used in the code and can be removed.

3. I/O operations (cin, cout) can be made faster by adding `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(NULL);` to the main function. This will speed up cin and cout operations.

4. The DFS function can be optimized by eliminating redundant calculations. The operation `x * m + y` is performed multiple times in the function. This operation can be calculated once and stored in a variable, reducing the number of multiplications.

5. Using `std::vector<bool>` instead of raw array for `vis`. This will reduce memory usage significantly when n, m are large.

Now, let's apply these optimizations to the code:

```cpp
#include <algorithm>
#include <cstring>
#include <iostream>
#include <map>
#include <queue>
#include <stdio.h>
#include <string>
#include <vector>

typedef std::pair<int, int> pii;
const int maxn = 1e6 + 5;
int n, m;
std::string mz[maxn];
std::queue<pii> q;
std::vector<bool> vis(maxn, false);

bool dfs(int x, int y) {
  int idx = x * m + y;
  if (x >= n || y >= m || mz[x][y] == '#' || vis[idx])
    return false;
  if (x == n - 1 && y == m - 1)
    return true;
  if (x || y)
    vis[idx] = true;
  return dfs(x + 1, y) || dfs(x, y + 1);
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  
  std::cin >> n >> m;
  for (int i = 0; i < n; i++) {
    std::cin >> mz[i];
  }
  if (!dfs(0, 0))
    std::cout << 0;
  else {
    vis[0] = false;
    if (!dfs(0, 0))
      std::cout << 1;
    else
      std::cout << 2;
  }
  return 0;
}
```
The above code has the same logic as the original code but is more optimized in terms of running time and memory usage.