#include <iostream>
#include <fstream>
#include <vector>
#include <deque>
#include <algorithm>

#ifdef INFOARENA
ifstream in("bellmanford.in");
ofstream out("bellmanford.out");
#else
#define in std::cin
#define out std::cout
#endif

const int NMax = 1e7 + 5;

int main() {
  int N, M;
  in >> N >> M;
  
  std::vector<int> heights;
  std::vector<long long> costs;
  heights.reserve(NMax);
  costs.reserve(NMax);

  for (int i = 1; i <= N; ++i) {
    int K;
    in >> K;
    std::vector<int> heightsOfBlock(K), costsOfBlock(K);
    for (int j = 0; j < K; ++j) {
      in >> heightsOfBlock[j];
    }
    for (int j = 0; j < K; ++j) {
      in >> costsOfBlock[j];
    }

    int Q;
    in >> Q;
    for (int i = 1; i <= Q; ++i) {
      int id, mult;
      in >> id >> mult;
      for (int j = 0; j < K; ++j) {
        heights.push_back(heightsOfBlock[id]);
        costs.push_back(static_cast<long long>(mult) * costsOfBlock[id]);
      }
    }
  }

  std::deque<std::pair<int, long long>> stackPushLeft, stackPushRight;
  std::vector<long long> dp(M+1, 0);
  for (int i = 1; i <= M; ++i) {
    long long minLeft = dp[i - 1];
    while (!stackPushLeft.empty() &&
           i - heights[i] + 1 <= stackPushLeft.back().first) {
      minLeft = std::min(minLeft, stackPushLeft.back().second);
      stackPushLeft.pop_back();
    }
    dp[i] = minLeft + costs[i];
    long long valHere = dp[i - 1];
    minLeft = std::min(minLeft, valHere);
    stackPushLeft.push_back({i, minLeft});
    int idx = -1;
    while (!stackPushRight.empty() &&
           ((idx = stackPushRight.back().first) || true) &&
           idx + heights[idx] - 1 < i) {
      stackPushRight.pop_back();
    }
    if (!stackPushRight.empty()) {
      long long dpPlusCost = stackPushRight.back().second;
      dp[i] = std::min(dp[i], dpPlusCost);
    }
    long long dpPlusCost = dp[i - 1] + costs[i];
    if (!stackPushRight.empty()) {
      dpPlusCost = std::min(dpPlusCost, stackPushRight.back().second);
    }
    stackPushRight.push_back({i, dpPlusCost});
  }
  out << dp[M] << '\n';
  return 0;
}