#include <bits/stdc++.h>
using namespace std;

#define in cin
#define out cout

using ll = long long;

const int NMax = 1e7 + 5;

int height[NMax];
ll cost[NMax], dp[NMax];

int main() {
  int N, M;
  in >> N >> M;
  
  int curr = 0;
  for (int i = 1; i <= N; ++i) {
    int K;
    in >> K;
    for (int j = 1; j <= K; ++j) {
      in >> height[++curr];
    }
    for (int j = 1; j <= K; ++j) {
      int c;
      in >> c;
      cost[curr-K+j] = 1LL * c;
    }
  }
  
  int Q;
  in >> Q;

  vector<pair<int, ll>> stackPushLeft, stackPushRight;
  for (int i = 1; i <= M; ++i) {
    ll minLeft = dp[i - 1];
    while (stackPushLeft.size() && i - height[i] + 1 <= stackPushLeft.back().first) {
      minLeft = min(minLeft, stackPushLeft.back().second);
      stackPushLeft.pop_back();
    }
    dp[i] = minLeft + cost[i];
    stackPushLeft.push_back({i, min(minLeft, dp[i - 1])});
    
    if (stackPushRight.size()) {
      dp[i] = min(dp[i], stackPushRight.back().second);
    }
    stackPushRight.push_back({i, min(dp[i - 1] + cost[i], stackPushRight.empty() ? dp[i - 1] + cost[i] : stackPushRight.back().second)});
  }
  out << dp[M] << '\n';
  return 0;
}