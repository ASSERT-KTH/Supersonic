#include <bits/stdc++.h>
using namespace std;
...
int main() {
  ...
  for (int i = 1; i <= N; ++i) {
    ...
  }
  int Q, curr = 0;
  in >> Q;
  for (int i = 1; i <= Q; ++i) {
    ...
  }
  vector<pair<int, ll>> stackPushLeft, stackPushRight;
  for (int i = 1; i <= M; ++i) {
    ll minLeft = dp[i - 1];
    int stackPushLeftSize = stackPushLeft.size();
    while (stackPushLeftSize &&
           i - height[i] + 1 <= stackPushLeft.back().first) {
      minLeft = min(minLeft, stackPushLeft.back().second);
      stackPushLeft.pop_back();
      stackPushLeftSize--;
    }
    dp[i] = minLeft + cost[i];
    ll valHere = dp[i - 1];
    minLeft = min(minLeft, valHere);
    stackPushLeft.push_back({i, minLeft});
    int idx = -1;
    int stackPushRightSize = stackPushRight.size();
    while (stackPushRightSize &&
           ((idx = stackPushRight.back().first) || true) &&
           idx + height[idx] - 1 < i) {
      stackPushRight.pop_back();
      stackPushRightSize--;
    }
    if (stackPushRightSize) {
      ll dpPlusCost = stackPushRight.back().second;
      dp[i] = min(dp[i], dpPlusCost);
    }
    ll dpPlusCost = dp[i - 1] + cost[i];
    if (stackPushRightSize) {
      dpPlusCost = min(dpPlusCost, stackPushRight.back().second);
    }
    stackPushRight.push_back({i, dpPlusCost});
  }
  out << dp[M] << '\n';
  return 0;
}