#include <algorithm>
#include <cmath>
#include <cstdio>
#include <vector>
#include <map>
using namespace std;
struct dat {
  static int n;
  vector<int> A;
  map<int, int> M;
  dat *next = NULL;
  inline int count(int p, int x) const {
    map<int, int>::const_iterator it;
    while (p > size()) {
      it = M.find(x);
      if (it != M.end()) p -= size();
    }
    int ans = 0;
    for (int i = 0; i < p; i++)
      ans += A[i] == x;
    return ans;
  }
  inline void insert(int p, int x) {
    if (p > size()) {
      next->insert(p - size(), x);
      return;
    }
    A.insert(A.begin() + p, x);
    M[x]++;
    split();
  }
  // remaining functions remain same...
  void split() {
    if (size() < n << 1)
      return;
    dat *tmp = next;
    if (tmp == NULL) tmp = new dat;
    while (size() > n)
      tmp->push_front(pop_back());
    tmp->next = next;
    next = tmp;
  }
  // remaining functions remain same...
};
int dat::n;
int main() {
  int n, m, last = 0;
  scanf("%d", &n);
  dat::n = ceil(sqrt(n << 2));
  dat *D = new dat, *cur = D;
  for (int i = 0; i < n; i++) {
    if (cur->size() >= dat::n) {
      cur->next = new dat;
      cur = cur->next;
    }
    int x;
    scanf("%d", &x);
    cur->push_back(x);
  }
  scanf("%d", &m);
  int op, l, r, k;
  while (m-- > 0) {
    scanf("%d%d%d%d", &op, &l, &r, &k);
    l = (l + last - 1) % n + 1;
    r = (r + last - 1) % n + 1;
    k = (k + last - 1) % n + 1;
    if (l > r)
      swap(l, r);
    if (op == 1)
      D->insert(l - 1, D->erase(r));
    else {
      l = D->count(l - 1, k);
      r = D->count(r, k);
      printf("%d\n", last = r - l);
    }
  }
}