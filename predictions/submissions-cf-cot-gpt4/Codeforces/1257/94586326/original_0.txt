The optimization steps are as follows:

1. Reducing 'cout' operations: ‘cout’ operation is a costly operation in terms of time and hence it is better to reduce such operations. Instead of two 'cout' operations, we can combine them into one.

2. Avoiding unnecessary copying: In the for loop where you iterate over the map, you are copying the entire vector for each element. This can be avoided by declaring the vector as a reference which will save both time and space.

3. Avoiding unnecessary computations: In the inner for loop, you are always adding 1 to the result of the subtraction. This can be avoided by initiating 'minres' to 'LLONG_MAX - 1' and eliminating the '+1' from the subtraction operation.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
#define endl '\n'
#define rep(i, n) for (int i = 0; i < n; i++)
#define all(v) v.begin(), v.end()
#define F first
#define S second
#define debug1(a) cout << #a << " " << (a) << endl;
#define debug2(a, b) cout << #a << " " << (a) << " " << #b << " " << (b) << endl;
#define debug3(a, b, c) cout << #a << " " << (a) << " " << #b << " " << (b) << " " << #c << " " << (c) << endl;

void solve() {
  ll n;
  cin >> n;
  map<ll, vector<ll>> m;
  rep(i, n) {
    ll val;
    cin >> val;
    m[val].push_back(i + 1);
  }
  ll minres = LLONG_MAX - 1;
  for (auto &x : m) {
    vector<ll> &v = x.second;
    if (v.size() > 1) {
      for (int i = 1; i < v.size(); i++) {
        if ((v[i] - v[i - 1]) > 0) {
          minres = min(minres, v[i] - v[i - 1]);
        }
      }
    }
  }
  cout << ((minres == LLONG_MAX - 1) ? -1 : minres) << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
}
```