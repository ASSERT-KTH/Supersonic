Here are several optimization steps:

1. Remove the `bits/stdc++.h` header file. This file is large and includes almost everything, which is not necessary for the program. Instead, include only the necessary files, such as `iostream`, `vector`, `set`, `map`, and `algorithm`.

2. The `comp` function is not needed. You can use the built-in `greater<int>()` function from `algorithm` std library when sorting in reverse order.

3. The `used` map can be replaced by a set. The map is essentially storing a boolean flag indicating whether an element has been "used". This can be achieved with a set by simply checking if the element is already in the set. This way, the program avoids having to allocate extra space for the boolean value in the map.

4. No need to check `if (!used[even[i]])`. This is because the numbers are already unique in the `even` vector due to the previous checks with the `set`.

5. The `pb` macro is not necessary. Instead, use `push_back` directly for better readability.

6. The `signed` keyword before `main()` function is not necessary.

Here is the optimized code:

```
#include <iostream>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

int main() {
  int t;
  cin >> t;
  while (t--) {
    int n, res = 0;
    cin >> n;
    vector<int> even;
    set<int> st;
    for (int i = 0; i < n; i++) {
      int x;
      cin >> x;
      if (x % 2 == 0 && !st.count(x))
        even.push_back(x);
      st.insert(x);
    }
    sort(even.begin(), even.end(), greater<int>());
    for (int i = 0; i < even.size(); i++) {
      int b = even[i];
      while (b % 2 == 0) {
        b /= 2;
        ++res;
      }
    }
    cout << res << endl;
  }
  return 0;
}
```