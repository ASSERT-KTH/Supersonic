Here are the steps to optimize the given program:

1. Instead of using std::set and std::vector to store the input numbers, we can use std::unordered_set which has an average time complexity of O(1) for insert and find operations. This would speed up the program.

2. Instead of sorting the 'even' vector in decreasing order, we can sort it in increasing order. This way, we don't need to maintain a separate 'used' map to keep track of the numbers already processed. This would reduce the memory usage.

3. In the loop where 'b' is divided by 2 until it's no longer divisible by 2, we can replace the division operation with a right shift operation. This is because dividing by 2 is equivalent to shifting the bits of the number one position to the right. Bitwise operations are faster than arithmetic operations.

4. We don't need to explicitly return 0 at the end of the main function. The C++ standard guarantees that the main function will return 0 if control reaches the end of the function without encountering a return statement.

Here is the optimized code:

```C++
#include <bits/stdc++.h>
using namespace std;

bool comp(int a, int b) { return a < b; }

int main() {
  int t;
  cin >> t;
  while (t--) {
    int n, res = 0;
    cin >> n;
    vector<int> even;
    unordered_set<int> st;
    for (int i = 0; i < n; i++) {
      int x;
      cin >> x;
      if (x % 2 == 0 && st.find(x) == st.end())
        even.push_back(x);
      st.insert(x);
    }
    sort(even.begin(), even.end(), comp);
    for (int i = 0; i < even.size(); i++) {
      int b = even[i];
      while (b % 2 == 0) {
        b >>= 1;
        ++res;
      }
    }
    cout << res << endl;
  }
}
```
This version of the program should run faster and use less memory than the original version.