Optimization Steps:

1. Avoid using 'bits/stdc++.h' as it includes a lot of unnecessary headers which can slow down the compile time. Instead, include only the necessary libraries.
2. The 'set' 'st' is used to avoid duplicate entries in 'even'. Instead of inserting all elements into 'st' and 'even', check if the element is even first and then check if it already exists in 'even'. If it doesn't exist, insert it into 'even'. This way we avoid duplicate entries in 'even' and we don't need 'st' anymore.
3. The 'map' 'used' is used to avoid processing the same number more than once. Instead of using a 'map', we can use a 'set' here as well. A 'set' has a faster search time of O(1) compared to a 'map' which has a search time of O(log(n)).
4. Instead of using 'push_back' to insert elements into 'even', use 'emplace_back' which can be faster as it constructs the element in place and doesn't require a copy.

Optimized Program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
using namespace std;

bool comp(int a, int b) { return a > b; }

int main() {
  int t;
  cin >> t;
  while (t--) {
    int n, res = 0;
    cin >> n;
    vector<int> even;
    for (int i = 0; i < n; i++) {
      int x;
      cin >> x;
      if (x % 2 == 0 && find(even.begin(), even.end(), x) == even.end())
        even.emplace_back(x);
    }
    sort(even.begin(), even.end(), comp);
    set<int> used;
    for (int i = 0; i < even.size(); i++) {
      if (!used.count(even[i])) {
        int b = even[i];
        while (b % 2 == 0) {
          used.insert(b);
          b /= 2;
          ++res;
        }
      }
    }
    cout << res << endl;
  }
  return 0;
}
```

Please note that find operation is an O(n) operation. The optimization here is more focused towards reducing memory usage by removing the set 'st' and map 'used'. However, if you are working with large data, you might want to consider using a different data structure or approach that has a faster search time.