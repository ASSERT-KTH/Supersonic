Optimizations:

1. Memory Optimization: Avoid using map data structure. In this case, usage of "used" map is unnecessary as we are already using set "st" to store the unique numbers. As the "even" vector contains only unique even numbers, we don't need to check again if the number is used or not.

2. Time Optimization: Avoid unnecessary sorting. In this program, sorting the "even" vector doesn't help to achieve the required functionality. Therefore, sorting can be avoided which reduces time complexity from O(n log n) to O(n).

3. Code Simplification: Use of "comp" function to sort in reverse order is not necessary as we are not utilizing the sorted order.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
#define int long long
using namespace std;

signed main() {
  int t;
  cin >> t;
  while (t--) {
    int n, res = 0;
    cin >> n;
    vector<int> even;
    set<int> st;
    for (int i = 0; i < n; i++) {
      int x;
      cin >> x;
      if (x % 2 == 0 && !st.count(x)) {
        even.push_back(x);
        st.insert(x);
      }
    }
    
    for (int i = 0; i < even.size(); i++) {
      int b = even[i];
      while (b % 2 == 0) {
        b /= 2;
        ++res;
      }
    }
    cout << res << endl;
  }
  return 0;
}
```
This code performs the same functionality as the original program but with optimized memory usage and running time.