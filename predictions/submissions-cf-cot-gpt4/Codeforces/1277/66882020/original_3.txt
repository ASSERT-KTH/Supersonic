This program is optimized by minimizing the number of operations performed and by reducing memory usage. Below are the steps for optimization:

1. Use unordered_set instead of set: unordered_set in C++ is implemented using a hash table, and hence has an average time complexity of O(1) for search, insert, and delete operations as compared to set which has O(log n) time complexity for the same operations. This will speed up the program.

2. Use reserve function for vector: When objects are added to a vector, if the vector's capacity is not enough to hold the new object, the vector will reallocate memory which is an expensive operation. By calling reserve function, you can avoid multiple reallocations.

3. Check if the number is even before inserting it into the unordered set.

4. Remove the map 'used', because its functionality is already covered by the unordered set 'st'.

5. Remove the unused macro 'pb'.

Here is the optimized version of the program:

```cpp
#include <bits/stdc++.h>
#define int long long
using namespace std;
bool comp(int a, int b) { return a > b; }
signed main() {
  ios_base::sync_with_stdio(false); //Speed up cin/cout
  cin.tie(NULL); //Untie cin/cout

  int t;
  cin >> t;
  while (t--) {
    int n, res = 0;
    cin >> n;
    vector<int> even;
    even.reserve(n); //Reserve space for 'n' elements in vector
    unordered_set<int> st;
    for (int i = 0; i < n; i++) {
      int x;
      cin >> x;
      if (x % 2 == 0) {
        if (st.find(x) == st.end()) //Check if 'x' is not in set before pushing it to vector
          even.push_back(x);
        st.insert(x);
      }
    }
    sort(even.begin(), even.end(), comp);
    for (int i = 0; i < even.size(); i++) {
      int b = even[i];
      while (b % 2 == 0) {
        b /= 2;
        ++res;
      }
    }
    cout << res << "\n";
  }
  return 0;
}
```

Remember to compile with optimization flags, for example: `g++ -O3 code.cpp -o code`