#include <bits/stdc++.h>
using namespace std;
long long gcd(long long a, long long b) {
  if (b == 0)
    return a;
  else
    return gcd(b, a % b);
}
int bsearch(int l, int h, int a[], int key) {
  while (l <= h) {
    int m = (l + h) / 2;
    if (a[m] == key) 
      return m;
    else if (a[m] < key)
      l = m + 1;
    else
      h = m - 1;
  }
  return -1;
}
long long bin(long long a, long long b, long long m) {
  a = a % m;
  long long res = 1;
  while (b > 0) {
    if (b & 1)
      res = res * a % m;
    a = a * a % m;
    b = b >> 1;
  }
  return res;
}
int ncr(int n, int r) {
  long long res = 1;
  for (int i = 0; i < r; i++) 
    res = res * (n - i) / (i + 1);
  return res;
}
int find(int i, vector<int> &p) {
  if(p[i] != i)
    p[i] = find(p[i], p);
  return p[i];
}
void join(int u, int v, vector<int> &p) {
  int x = find(u, p);
  int y = find(v, p);
  if(x != y)
      p[x] = p[y];
}
void dfs(int x, vector<int> ad[], vector<int> &vis, int cat[], int m, int cc,
         int &an) {
  vis[x] = 1;
  if (cat[x - 1] == 1) {
    cc++;
    m = max(m, cc);
  } else {
    cc = 0;
    m = max(m, cc);
  }
  if (ad[x].size() == 1 && x != 1 && m <= m) 
    an++;
  for (int i = 0; i < ad[x].size(); i++) 
    if (vis[ad[x][i]] == 0)
      dfs(ad[x][i], ad, vis, cat, m, cc, an);
}
int main() {
  int n, m;
  scanf("%d %d", &n, &m);
  int cat[n];
  for (int i = 0; i < n; i++) 
    scanf("%d", &cat[i]);
  int an = 0;
  if (n == 2) {
    if (cat[1] == 0 || cat[0] + cat[1] <= m)
      an++;
    printf("%d\n", an);
    return 0;
  }
  vector<int> ad[n + 1];
  for (int i = 0; i < n - 1; i++) {
    int x, y;
    scanf("%d %d", &x, &y);
    ad[x].push_back(y);
    ad[y].push_back(x);
  }
  vector<int> vis(n + 1, 0);
  dfs(1, ad, vis, cat, 0, 0, an);
  printf("%d\n", an);
  return 0;
}