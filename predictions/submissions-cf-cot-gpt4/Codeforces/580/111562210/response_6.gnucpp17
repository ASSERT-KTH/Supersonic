#include <bits/stdc++.h>
using namespace std;

int find(int i, vector<int> &p) {
    while (p[i] != i)
        i = p[i];
    return i;
}

void join(int u, int v, vector<int> &p) {
    int x = find(u, p);
    int y = find(v, p);
    p[x] = p[y];
}

void dfs(int x, vector<int> ad[], vector<int> &vis, int cat[], int &m, int &cc,
         vector<int> &ans, int flag) {
    vis[x] = 1;
    if (flag) {
        if (cat[x - 1] == 1) {
            ++cc;
            m = max(m, cc);
        } else {
            m = max(m, cc);
            cc = 0;
        }
    } else {
        if (cat[x - 1] == 1) {
            ++cc;
            m = max(m, cc);
        } else {
            cc = 0;
            m = max(m, cc);
        }
    }
    if (ad[x].size() == 1 && x != 1) {
        ans.push_back(m);
    }
    for (int i = 0; i < ad[x].size(); ++i) {
        if (vis[ad[x][i]] == 0)
            dfs(ad[x][i], ad, vis, cat, m, cc, ans, cat[x - 1]);
    }
}

int main() {
    int n, m;
    cin >> n >> m;
    int cat[n];
    for (int i = 0; i < n; ++i) {
        cin >> cat[i];
    }
    int an = 0;
    if (n == 2) {
        if (cat[1] == 0 || cat[0] + cat[1] <= m)
            ++an;
        cout << an << endl;
        return 0;
    }
    vector<int> ad[n + 1];
    for (int i = 0; i < n - 1; ++i) {
        int x, y;
        cin >> x >> y;
        ad[x].push_back(y);
        ad[y].push_back(x);
    }
    vector<int> vis(n + 1, 0);
    vector<int> ans;
    int cc = 0;
    dfs(1, ad, vis, cat, m, cc, ans, cat[0]);
    for (int i = 0; i < ans.size(); ++i) {
        if (ans[i] <= m)
            ++an;
    }
    cout << an << endl;
    return 0;
}