The first optimization that can be applied is to remove unnecessary header files. Not all of the headers included are actually used in the code. For example, 'bitset', 'cmath', 'cstring', 'map', 'queue', 'set', 'stack', 'string', 'time.h', 'unordered_map', 'unordered_set' are not used and can be removed.

Secondly, we can remove the RAND macro definition because it is also not used in the code.

Thirdly, the MAX macro is not needed because we can use the built-in 'max' function.

Fourthly, we can remove the use of 'using namespace std;'. It's a good practice to avoid 'using namespace std;' in code, as it can lead to name clashes.

Finally, CEIL macro is not used in the code, we can remove it.

Now, let me show you the optimized code:

```C++
#include <algorithm>
#include <cstdio>
#include <vector>
#define ll long long
#define LINF 0x3f3f3f3f3f3f3f3f
#define INF 0x3f3f3f3f
#define PI 3.14159265
#define MIN(x, y) ((x) > (y) ? (y) : (x))
#define ABS(x) ((x) > 0 ? ((x) : -(x)))
const int MAXN = 2e5 + 5;
const ll MOD = 1e9 + 7;
int N, M, K, Q;
int A[MAXN];
int psum[MAXN];
int func(int pos) {
  if (psum[pos] > M)
    return 0;
  int temp = M - psum[pos];
  int cnt = pos;
  for (int i = pos + K; i <= N; i += K) {
    if (A[i] > temp) {
      for (int j = i - K + 1; j <= N; ++j) {
        if (A[j] <= temp) {
          temp -= A[j];
          ++cnt;
        } else
          break;
      }
      break;
    } else {
      temp -= A[i];
      cnt += K;
    }
  }
  return cnt;
}
void solve(int testNum) {
  int i, j;
  scanf("%d%d%d", &N, &M, &K);
  for (i = 1; i <= N; ++i) {
    scanf("%d", &A[i]);
  }
  std::sort(A + 1, A + 1 + N);
  for (i = 1; i <= N; ++i)
    psum[i] = psum[i - 1] + A[i];
  if (psum[N] <= M) {
    printf("%d\n", N);
    return;
  }
  int cnt = 0;
  for (i = 0; i <= N; ++i) {
    cnt = std::max(cnt, func(i));
  }
  printf("%d\n", cnt);
  return;
}
int main() {
  int T;
  scanf("%d", &T);
  for (int t = 1; t <= T; ++t) {
    solve(t);
  }
  return 0;
}
```