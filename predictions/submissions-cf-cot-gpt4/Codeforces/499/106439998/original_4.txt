Step 1: Avoid `#include<bits/stdc++.h>`, and only include necessary libraries. It's not considered good practice to include `bits/stdc++.h` because it includes more than what is needed, and it's not standard. Instead, we will include only what we need: `iostream`, `map`, `vector`, and `string`.

Step 2: Replace the `map<string, string>` with `unordered_map<string, string>`. Since we are not ordering the keys, an unordered_map will give us quicker search times (average constant time (`O(1)`) compared to logarithmic time (`O(log(n))` for map).

Step 3: Eliminate the use of the `vector<string> v`, and the associated loop to populate it. This can be done by replacing the `for` loop that checks if `z` is in `v` with a direct check if `z` is in the `unordered_map`. This change reduces the time complexity from `O(n*m)` to `O(n)` and reduces memory usage by not storing an extra copy of the keys in `v`.

Here's the optimized code:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>

using namespace std;

int main() {
  int n, m;
  cin >> n >> m;
  unordered_map<string, string> mp;

  for (int i = 0; i < m; i++) {
    string x, y;
    cin >> x >> y;
    mp[x] = (x.length() <= y.length()) ? x : y;
  }

  for (int i = 0; i < n; i++) {
    string z;
    cin >> z;
    if (mp.find(z) != mp.end()) {
      cout << mp[z] << " ";
    }
  }
  
  return 0;
}
```
Note: The `else continue` in the original code is redundant and has been removed in the optimized code. In a `for` loop, if the condition in the `if` statement is not met, the loop will automatically continue to the next iteration.