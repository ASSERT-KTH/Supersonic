#include <iostream>
#include <vector>
#include <queue>
#include <cmath>

#define INF 1 << 30
#define MAXN 1000005
#define MOD 1e9 + 7

using namespace std;

typedef long long ll;

typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> new_data_set;

const double PI = acos(-1.0);

vector<int> graph[MAXN];
int par[MAXN];
int n;
vector<int> vec;

pair<int, int> dfs(int u, int p = -1, int dist = 0) {
  par[u] = p;
  pair<int, int> x = make_pair(dist, u);
  for (int v : graph[u]) {
    if (v == p)
      continue;
    x = max(x, dfs(v, u, dist + 1));
  }
  return x;
}

void bfs() {
  queue<int> Q;
  vector<int> d(n + 1, -1);
  for (int v : vec) {
    d[v] = 0;
    Q.push(v);
  }
  while (!Q.empty()) {
    int u = Q.front();
    Q.pop();
    for (int v : graph[u]) {
      if (d[v] == -1) {
        d[v] = d[u] + 1;
        Q.push(v);
      }
    }
  }
  pair<int, int> ret = make_pair(d[1], 1);
  for (int i = 2; i <= n; i++) {
    ret = max(ret, make_pair(d[i], i));
  }
  cout << vec.size() - 1 + ret.first << endl;
  cout << vec[0] << " " << ret.second << " " << vec.back() << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

  cin >> n;
  for (int i = 1; i < n; i++) {
    int u, v;
    cin >> u >> v;
    graph[u].push_back(v);
    graph[v].push_back(u);
  }
  pair<int, int> da = dfs(1);
  pair<int, int> df = dfs(da.second);
  int v = df.second;
  while (v != da.second) {
    vec.push_back(v);
    v = par[v];
  }
  vec.push_back(da.second);
  if (vec.size() == n) {
    cout << n - 1 << endl;
    cout << vec[0] << " " << vec[1] << " " << vec.back() << endl;
  } else {
    bfs();
  }
  return 0;
}