#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <cmath>
#include <ctime>
#include <queue>
#include <algorithm>
#include <functional>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
typedef long long ll;
typedef std::pair<ll, ll> pll;
typedef __gnu_pbds::tree<int, __gnu_pbds::null_type, std::less_equal<int>, __gnu_pbds::rb_tree_tag,
             __gnu_pbds::tree_order_statistics_node_update> new_data_set;
const ll mod = 1e9 + 7;
const int N = 3e5 + 5;
std::vector<int> graph[N];
int par[N];
int n;
std::vector<int> vec;
inline void normal(ll &a) {
  a %= mod;
  (a < 0) && (a += mod);
}
inline ll modMul(ll a, ll b) {
  a %= mod, b %= mod;
  return (a * b) % mod;
}
inline ll modAdd(ll a, ll b) {
  a %= mod, b %= mod;
  return (a + b) % mod;
}
inline ll modSub(ll a, ll b) {
  a %= mod, b %= mod;
  a -= b;
  normal(a);
  return a;
}
inline ll modPow(ll b, ll p) {
  ll r = 1;
  while (p) {
    if (p & 1)
      r = modMul(r, b);
    b = modMul(b, b);
    p >>= 1;
  }
  return r;
}
inline ll modInverse(ll a) { return modPow(a, mod - 2); }
inline ll modDiv(ll a, ll b) { return modMul(a, modInverse(b)); }
pll dfs(int u, int p = -1, int dist = 0) {
  par[u] = p;
  auto x = std::make_pair(dist, u);
  for (auto v : graph[u]) {
    if (v == p)
      continue;
    x = std::max(x, dfs(v, u, dist + 1));
  }
  return x;
}
void bfs() {
  std::queue<int> Q;
  std::vector<int> d(n + 1, -1);
  for (auto v : vec) {
    d[v] = 0;
    Q.push(v);
  }
  while (!Q.empty()) {
    int u = Q.front();
    Q.pop();
    for (auto v : graph[u]) {
      if (d[v] == -1) {
        d[v] = d[u] + 1;
        Q.push(v);
      }
    }
  }
  auto ret = std::make_pair(d[1], 1);
  for (int i = 2; i <= n; i++) {
    ret = std::max(ret, std::make_pair(d[i], i));
  }
  std::cout << (int)vec.size() - 1 + ret.first << std::endl;
  std::cout << vec[0] << " " << ret.second << " " << vec.back() << std::endl;
  return;
}
int main() {
  std::cin >> n;
  for (int i = 1; i < n; i++) {
    int u, v;
    std::cin >> u >> v;
    graph[u].push_back(v);
    graph[v].push_back(u);
  }
  auto da = dfs(1);
  auto df = dfs(da.second);
  int v = df.second;
  while (v != da.second) {
    vec.push_back(v);
    v = par[v];
  }
  vec.push_back(da.second);
  if ((int)vec.size() == n) {
    std::cout << n - 1 << std::endl;
    std::cout << vec[0] << " " << vec[1] << " " << vec.back() << std::endl;
  } else {
    bfs();
  }
}