Here is the step-by-step optimization for the given C/C++ program:

1. Remove `#include <algorithm>` and `#include <vector>`: The headers `<algorithm>` and `<vector>` are not used in the program, so they can be removed to reduce the compilation time.

2. Remove `#define ll long long int`, `#define M 1000000007`, `#define D 998244353`, and `#define PI 3.14159265`: These macros are not used in the program, so they can be removed to improve the readability of the code.

3. Remove function `bool sortbysec`: This function is not used in the program, so it can be removed to improve the readability of the code.

4. Replace `while (tests-- > 0)` with `if (tests > 0)`: Since `tests` is always equal to `1`, we can replace the `while` loop with an `if` statement to improve the readability of the code.

5. Replace `for (int i = 0; i < max(2 * q, q + 100); i++)` with `for (int i = 0; i < 2 * q + 100; i++)`: Since `2 * q` is always less than `q + 100` when `q` is a non-negative integer, we can simplify `max(2 * q, q + 100)` to `2 * q + 100` to improve the performance of the code.

Now, I will generate the optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int tests = 1;
  if (tests > 0) {
    int q, x;
    cin >> q >> x;
    int a[x] = {0};
    set<int> s;
    for(int i = 0; i < 2 * q + 100; i++)
      s.insert(i);
    while (q-- > 0) {
      int y;
      cin >> y;
      int z = a[y % x] * x + y % x;
      s.erase(z);
      a[y % x]++;
      cout << *(s.begin()) << endl;
    }
  }
  return 0;
}
```
This optimized program has the same functionality as the original one but with enhanced performance and readability.