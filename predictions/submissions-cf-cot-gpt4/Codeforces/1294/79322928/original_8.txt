The code has several inefficiencies that can be optimized:

1. Using `#include <bits/stdc++.h>` is bad practice because it includes too many unnecessary header files, which can slow down the compilation time. We will remove it and only include the necessary headers.
2. The array `a[x]` is declared inside a while loop. This may lead to unnecessary memory allocation and deallocation in each iteration. In this case, it's not a problem since the loop only runs once, but for good practices, we'll take it outside and initialize it when we know the value of `x`.
3. Using a `set` to keep track of the minimum value and removing elements from it can be expensive in terms of time complexity. Instead, we can keep a variable `minVal` to store the minimum value so far. Every time we update `a[y % x]`, we can update `minVal` if necessary.
4. The function `sortbysec` is declared but not used, so we will remove it.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>

#define ll long long int
#define M 1000000007
#define D 998244353
#define PI 3.14159265

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int tests = 1;
  while (tests-- > 0) {
    int q, x;
    cin >> q >> x;
    vector<int> a(x, 0);
    int minVal = 0;
    
    while (q-- > 0) {
      int y;
      cin >> y;
      int z = a[y % x] * x + y % x;

      if (z == minVal) {
        while (a[minVal % x] > 0) {
          a[minVal % x]--;
          minVal++;
        }
      } else {
        a[y % x]++;
      }
      
      cout << minVal << endl;
    }
  }
  
  return 0;
}
```

Please note that this optimization may not always yield the correct output if the incoming values `y` are not in sequential order. The original code allows non-sequential input because it uses a `set` to keep track of all available numbers. If non-sequential input is expected, the original code's approach is necessary despite its higher time complexity.