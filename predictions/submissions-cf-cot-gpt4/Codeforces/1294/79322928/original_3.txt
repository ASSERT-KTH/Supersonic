The program contains some redundant and inefficient code. Here's how it can be optimized:

1. Remove `#include <algorithm>` and `<bits/stdc++.h>`. You don't need `<algorithm>` because you don't use any algorithms from the library in the code, and `<bits/stdc++.h>` is a heavy library that includes a lot of unnecessary headers, which might slow down compilation time. Also, `<bits/stdc++.h>` is not a standard library, it's just a convenience library supported by some compilers. So, it's not portable.

2. Remove `#define PI 3.14159265`, `#define M 1000000007` and `#define D 998244353` because these constants aren't used in the program.

3. Remove `bool sortbysec(const pair<int, int> &a, const pair<int, int> &b)` function because it's not used in the program.

4. Instead of declaring `int a[x] = {0};` after reading `x`, you can use a vector because the size of an array should be constant in C++.

5. Also, you can use std::priority_queue instead of std::set to improve the performance of the program.

Here's the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int q, x;
  cin >> q >> x;
  
  vector<int> a(x, 0);
  priority_queue<int, vector<int>, greater<int>> pq;
  
  for (int i = 0; i < max(2 * q, q + 100); i++)
      pq.push(i);
  
  while (q-- > 0) {
    int y;
    cin >> y;
    int z = a[y % x] * x + y % x;
    
    while (!pq.empty() && pq.top() == z) {
      pq.pop();
      a[y % x]++;
      z = a[y % x] * x + y % x;
    }

    if(!pq.empty())
      cout << pq.top() << "\n";
  }
  return 0;
}
```
Remember that modifying a code for optimization can sometimes make it less readable. It's always a trade-off between readability and performance. In this case, the code is still quite readable and understandable.