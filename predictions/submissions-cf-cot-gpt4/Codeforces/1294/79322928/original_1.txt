The given program is a C++ program which seems to be a solution to a competitive programming problem. Here are the optimization steps:

1. Remove unnecessary headers: The header `<bits/stdc++.h>` is a compilation of all standard C++ headers. So, including this along with other headers like `<algorithm>` and `<vector>` is unnecessary and increases compilation time. So, we will remove the `<algorithm>` and `<vector>` headers.

2. Use `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(NULL);` only if necessary: These two lines are used to speed up the input/output operations by decoupling C's stdio buffers from C++'s streams. However, this comes with the drawback that you can't properly mix C and C++ style I/O after you've decoupled them. If we're not doing any heavy I/O in our program, we might not need these lines.

3. Avoid using `std::endl` if '\n' is enough: `std::endl` not only inserts a newline character, but also flushes the output buffer, which can be an unnecessary overhead when printing a lot of data. So, replace `std::endl` with '\n'.

4. Avoid unnecessary computations in a loop: In the loop `for (int i = 0; i < max(2 * q, q + 100); i++)`, the `max(2 * q, q + 100)` calculation is done in every iteration, which can be avoided by calculating it once before the loop.

5. Avoid calculating `y % x` twice: In the line `int z = a[y % x] * x + y % x;`, the modulo operation `y % x` is performed twice. This can be eliminated by calculating it once and storing it in a variable.

Here's the optimized program:

```cpp
#include <bits/stdc++.h>
#define ll long long int
#define M 1000000007
#define D 998244353
#define PI 3.14159265
using namespace std;
bool sortbysec(const pair<int, int> &a, const pair<int, int> &b) {
  return (a.second < b.second);
}
int main() {
  int tests = 1;
  while (tests-- > 0) {
    int q, x;
    cin >> q >> x;
    int a[x] = {0};
    set<int> s;
    int limit = max(2 * q, q + 100);
    for (int i = 0; i < limit; i++)
      s.insert(i);
    while (q-- > 0) {
      int y;
      cin >> y;
      int mod = y % x;
      int z = a[mod] * x + mod;
      s.erase(z);
      a[mod]++;
      cout << *(s.begin()) << '\n';
    }
  }
  return 0;
}
```
Note: `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(NULL);` are commented out as they are not necessary here. Uncomment them if you are doing heavy I/O operations.