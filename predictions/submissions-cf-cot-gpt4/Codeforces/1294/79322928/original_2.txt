Here are the steps for optimization:

1. Remove `#include <algorithm>` and `#include <vector>`. These headers are not used in the program. Removing them will reduce the compilation time and memory usage.

2. Remove `#include <bits/stdc++.h>`. This header includes all standard library headers, which causes longer compile time and higher memory usage. Instead, only include the necessary headers used in the program. 

3. Remove the unused `sortbysec` function. This function is not used in the program. Removing it will reduce the memory usage.

4. Remove the loop `for (int i = 0; i < max(2 * q, q + 100); i++)`. This loop fills the set with numbers, but the set only needs to contain the numbers as they are needed. Instead of filling the set at the start, insert the numbers into the set as they are needed during the loop `while (q-- > 0)`.

5. Replace `int a[x] = {0};` with `vector<int> a(x, 0);`. The size of an array must be a constant in C++, but `x` is not constant. This is not standard C++, although it may be accepted by some compilers. The standard way to create an array with variable size is to use a `std::vector`.

Here's the optimized code:

```cpp
#include <iostream>
#include <set>
#define ll long long int
#define M 1000000007
#define D 998244353
#define PI 3.14159265
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int tests = 1;
  while (tests-- > 0) {
    int q, x;
    cin >> q >> x;
    vector<int> a(x, 0);
    set<int> s;
    int max_z = 0;
    while (q-- > 0) {
      int y;
      cin >> y;
      int z = a[y % x] * x + y % x;
      s.insert(z);
      a[y % x]++;
      while (s.count(max_z)) {
        max_z++;
      }
      cout << max_z << endl;
    }
  }
  return 0;
}
```
In this optimized code, the set `s` only contains the numbers as they are needed, and the variable `max_z` keeps track of the smallest number not in the set. This way, the time complexity of the loop is O(1) for each iteration, which greatly improves the running time of the program.