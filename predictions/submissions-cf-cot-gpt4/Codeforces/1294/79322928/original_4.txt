Here are the steps for optimization:

1. Remove the unused "#include <vector>" as it is not used in the program.
2. Remove the unused "bool sortbysec(const pair<int, int> &a, const pair<int, int> &b)" function as it is not used in the program.
3. Remove the unused macros "M", "D", and "PI" as they are not used in the program.
4. The line "ios_base::sync_with_stdio(false);" and "cin.tie(NULL);" is used to speed up the cin and cout. However, it can lead to problems if you mix cin/cout and scanf/printf in the same program. We can remove them if we only use cin and cout in the program.
5. Instead of using "while (tests-- > 0)" which only runs once, we can directly put the code block inside it to the main function.
6. Instead of using "while (q-- > 0)", we can use a for loop to make it more readable.
7. The line "for (int i = 0; i < max(2 * q, q + 100); i++)" is used to initialize a set. However, we can initialize it with the maximum possible size "q+100" directly to save computation time.

Now the optimized program is:

```c++
#include <bits/stdc++.h>
#define ll long long int
using namespace std;

int main() {
  int q, x;
  cin >> q >> x;
  int a[x] = {0};
  set<int> s;
  for (int i = 0; i < q + 100; i++)
    s.insert(i);
  for (int i = 0; i < q; i++) {
    int y;
    cin >> y;
    int z = a[y % x] * x + y % x;
    s.erase(z);
    a[y % x]++;
    cout << *(s.begin()) << endl;
  }
  return 0;
}
```
Please note that the optimization here is mainly for improving readability and eliminating unused code, the time complexity and space complexity remain the same as the original program. The actual running time and memory usage are highly dependent on the input size and the specific running environment.