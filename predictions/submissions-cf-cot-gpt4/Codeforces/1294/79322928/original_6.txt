The optimization techniques that could be applied here include:

1. Avoiding precomputation: The set "s" is pre-populated with a potentially large number of elements (2*q or q+100), but in reality, we only need the smallest number not present in "a". We can calculate this value on the fly instead of storing all potential values in advance.

2. Minimizing console I/O: Console I/O operations are relatively slow, and can significantly impact the performance of a program if called frequently. Instead of outputting the result after each query, we could store the results in a vector and output them all at once after all queries have been processed.

3. Removing unnecessary header: The #include <bits/stdc++.h> already includes all the standard library headers, so #include <vector> and #include <algorithm> are redundant and can be removed.

4. Using "fast I/O" techniques: We are already using the ios_base::sync_with_stdio(false) and cin.tie(NULL) to speed up I/O operations, but we could also replace cin and cout with scanf and printf for even faster I/O.

Here is the optimized version of the program:

```cpp
#include <bits/stdc++.h>
#define ll long long int
#define M 1000000007
#define D 998244353
#define PI 3.14159265
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int tests = 1;
  while (tests-- > 0) {
    int q, x;
    scanf("%d %d", &q, &x);
    int a[x] = {0};
    int minVal = 0;
    vector<int> results;
    results.reserve(q);
    while (q-- > 0) {
      int y;
      scanf("%d", &y);
      a[y % x]++;
      while (a[minVal / x] > minVal % x)
        minVal++;
      results.push_back(minVal);
    }
    for (const auto &val : results)
      printf("%d\n", val);
  }
  return 0;
}
```

This optimized program should run faster and use less memory than the original program.