Here's an explanation of the optimizations:

1. `#include <bits/stdc++.h>`: This header file includes all the standard library header files in C++. While it's convenient for competitive programming purposes, it's generally not recommended for production code because it increases the compile time. We should only include the header files that we are using.

2. `#define ll long long int`, `#define M 1000000007`, `#define D 998244353`, `#define PI 3.14159265` : These definitions are not used in the code and are therefore unnecessary.

3. The `sortbysec` function is not used anywhere in the code. Therefore, we can remove it.

4. `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` are used for faster input/output in competitive programming, but they are not necessary here as there is no heavy I/O operation.

5. `int a[x] = {0}`: Variable-length arrays are not standard in C++. Instead, we should use a `vector<int>`.

6. The loop `for (int i = 0; i < max(2 * q, q + 100); i++)` repeatedly calls `max(2 * q, q + 100)`. It's better to calculate this value once and store it in a variable.

7. We can move the `int z` calculation and `s.erase(z)` inside the `while (q-- > 0)` loop. This way, they are only calculated and executed when necessary, saving some time.

8. We can change `int tests = 1; while (tests-- > 0)` to a simple `for` loop to improve readability.

Here's the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <set>
using namespace std;

int main() {
  int q, x;
  cin >> q >> x;
  vector<int> a(x, 0);
  set<int> s;
  int maxVal = max(2 * q, q + 100);
  for (int i = 0; i < maxVal; i++)
    s.insert(i);
  for (int tests = 0; tests < 1; ++tests) {
    while (q-- > 0) {
      int y;
      cin >> y;
      int z = a[y % x] * x + y % x;
      s.erase(z);
      a[y % x]++;
      cout << *(s.begin()) << endl;
    }
  }
  return 0;
}
```