There are a few optimizations we can make to this program:

1. Avoid unnecessary includes: The line `#include <bits/stdc++.h>` is a header file in g++ that includes every standard library. Including it will actually increase your compile time significantly. Also, `<algorithm>` and `<vector>` are included but not used in the program. Removing these includes will reduce compile time.

2. Replace cin and cout with scanf and printf: cin and cout are significantly slower than scanf and printf. If you're doing a lot of IO, this can create a bottleneck in your program. 

3. Avoid unnecessary calculations: In the loop where the set `s` is populated, it's not necessary to calculate `max(2*q, q+100)` every iteration. Calculate it once and store the value in a variable.

4. Reordering statements: If we move the `a[y%x]++` line before calculating `z`, we can avoid the multiplication in the `z` calculation. This is because `a[y%x]` is incremented after `z` is used, so the effect is the same.

Here is the optimized version of the code:

```c++
#include <set>
#include <stdio.h>
#define ll long long int
#define M 1000000007
#define D 998244353
#define PI 3.14159265

bool sortbysec(const pair<int, int> &a, const pair<int, int> &b) {
  return (a.second < b.second);
}

int main() {
  int tests = 1;
  
  while (tests-- > 0) {
    int q, x;
    scanf("%d %d", &q, &x);
    int a[x] = {0};
    set<int> s;
    int max_val = max(2 * q, q + 100);
    for (int i = 0; i < max_val; i++)
      s.insert(i);
    while (q-- > 0) {
      int y;
      scanf("%d", &y);
      a[y % x]++;
      int z = a[y % x] + y % x;
      s.erase(z);
      printf("%d\n", *(s.begin()));
    }
  }
  return 0;
}
```
Note: Please ensure that these optimizations are applicable and beneficial to your specific use case as different compilers and situations may behave differently.