Your code is already fairly optimized, but there are a few changes we could make to improve it further. Here is a step by step explanation of the optimization:

1. Remove unnecessary parts of the code:
    - The '#import <cstdio>' is a directive from Objective-C and is not needed in C/C++. The equivalent in C++ is '#include <cstdio>'.
    
2. Improve code readability:
    - It is generally a good practice to write clear and understandable code. This includes using meaningful variable names, adding comments, and avoiding complex expressions.
    - In the first loop, instead of using '^' (bitwise XOR operator) to compare characters, we can use '!=' (not equal operator) which is more intuitive.
    - Similarly, in the second loop, we can simplify the expression by storing the result in a separate variable.

3. Reduce memory usage:
    - The array 'f' is initialized with a size of 1000005 which might be too large depending on the input. Instead, we can dynamically allocate memory based on the input size 'n'.
    
Here is the optimized version of your code:

```cpp
#include <cstdio>

char s[1000005];
int *f, n, k, i = 2, j, x = 1;

int main() {
  scanf("%d%d%s", &n, &k, s + 1);
  f = new int[n + 1];
  while (i <= n) {
    while (j && s[j + 1] != s[i])
      j = f[j];
    if (s[j + 1] == s[i])
      ++j;
    f[i++] = j;
  }
  for (; x <= n; ++x) {
    int result = ((x / (x - f[x]) / k) > ((x - 1) / (x - f[x]) / (k + 1)));
    putchar(result + 48);
  }
  delete[] f;
  return 0;
}
```

Note that this code performs the same operations as your original code but is slightly more optimized and easier to understand.