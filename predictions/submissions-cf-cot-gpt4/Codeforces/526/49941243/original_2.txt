Optimization Details:

1. Minimize the memory usage by using the pointer to get the input string 's' instead of allocating it as a large static array.
2. The expression `(s[j + 1] ^ s[i]) || ++j;` could be replaced with an if condition for better readability. This won't necessarily optimize performance but it will make the code easier to understand and maintain.
3. The `putchar` expression is quite complex and can be broken down into simpler expressions. This can help to reduce the computational complexity and hence optimize the running time.
4. Use `int main()` instead of `main()`. Although both work, the former is more standard.

Optimized Program:

```c
#include <cstdio>

int f[1000005], n, k, i = 2, j, x = 1;
char *s;

int main() {
  s = new char[n+1];
  scanf("%d%d%s", &n, &k, s + 1);
  while (i <= n) {
    while (j && s[j + 1] != s[i])
      j = f[j];
    if(s[j + 1] == s[i]) 
      ++j;
    f[i++] = j;
  }
  while(x <= n) {
    int current = x / (x - f[x]) / k;
    int previous = (x - 1) / (x - f[x]) / (k + 1);
    putchar((current > previous) + 48);
    ++x;
  }
  delete [] s;
  return 0;
}
```
Note: Please pay attention to input array size before using dynamic allocation as it may lead to bad_alloc exception if the required memory is not available.