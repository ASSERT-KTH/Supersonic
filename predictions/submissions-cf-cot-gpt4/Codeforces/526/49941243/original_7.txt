The given program is already fairly optimized for memory usage and run-time, but there are few things that can be optimized:

1. Use of bitwise XOR operator (^) in the place of logical operator (!=) is not recommended. It makes the code less readable and the performance benefits are negligible. Use != operator instead of ^. Modern compilers can optimize these operations.

2. The C-style cast of an integer to a char in the putchar function call is not necessary. putchar() function prototype is int putchar(int char), so it can take integer as an argument.

3. Avoid magic numbers. Magic numbers are literal numbers that appear directly in source code. For example, '48' in your code is a magic number. It is not immediately clear why '48' is used. Better practice is to use a named constant.

4. You can combine the two for loops into a single loop to reduce the number of iterations.

Here's the optimized version of your program:

```cpp
#import <cstdio>
char s[1000005];
int f[1000005], n, k, i = 2, j, x = 1;
const int ASCII_OFFSET = 48;
main() {
  for (scanf("%d%d%s", &n, &k, s + 1); i <= n; i++, x++) {
    while (j && s[j + 1] != s[i])
      j = f[j];
    if(s[j + 1] == s[i])
      ++j;
    f[i] = j;
    putchar(((x / (x - f[x]) / k) > ((x - 1) / (x - f[x]) / (k + 1))) + ASCII_OFFSET);
  }
}
```
In this version, we have replaced the bitwise XOR operator (^) with the inequality operator (!=) to increase readability. Also, we have combined the two for loops to reduce the number of iterations. This will improve the running time of the program. 

Moreover, we got rid of the magic number '48' and replaced it with a named constant 'ASCII_OFFSET'. This can help future developers understand the purpose of the code. Finally, we got rid of the unnecessary C-style cast in the putchar function call to improve readability.