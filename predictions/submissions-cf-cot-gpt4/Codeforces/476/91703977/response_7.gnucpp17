#include <bits/stdc++.h>
using namespace std;
using ld = long double;
const int mod = 1000000007;
const int inf = 1000000000000000;
const int infty = 1000000000000000000LL;
const int md = 998244353;
const double PI = acos(-1.0);
int l[1001][1001] = {0};
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cout << setprecision(15) << fixed;
  auto initialize = []() {
    l[0][0] = 1;
    for (int i = 1; i < 1001; i++) {
      l[i][0] = 1;
      for (int j = 1; j < i + 1; j++) {
        l[i][j] = (l[i - 1][j - 1] + l[i - 1][j]);
      }
    }
  };
  initialize();
  auto solve = []() {
    string a, b;
    cin >> a >> b;
    ld prob;
    int apos = 0;
    for (auto i : a) {
      apos += i == '+';
      apos -= i == '-';
    }
    int bpos = 0, amb = 0;
    for (auto i : b)
      amb += i == '?';
    int diff = 0;
    int r = 0;
    for (auto i : b) {
      r += i == '+';
      r -= i == '-';
    }
    diff = apos - r;
    if (amb == 0 && diff == 0) {
      prob = 1;
      cout << prob << "\n";
      return;
    } else if (amb == 0 && diff != 0) {
      prob = 0;
      cout << prob << "\n";
      return;
    }
    int u = (amb + diff) / 2;
    int v = amb - u;
    if ((amb + diff) & 1 || (u < 0 || v < 0)) {
      prob = 0;
      cout << prob << "\n";
      return;
    }
    ld q = pow(2, amb);
    ld p = l[amb][u];
    prob = p / q;
    cout << prob << "\n";
  };
  int t = 1;
  for (int i = 1; i <= t; i++) {
    solve();
  }
  return 0;
}