The given code is a competitive programming code which includes various utility functions like gcd, lcm, prime factors, binary power etc. The main function of the code is to get the edges of a graph. Here are a few optimization steps:

1. **Use of `auto` keyword**: The use of `auto` keyword can save time in writing the type of a variable and make the code cleaner. This does not affect the program runtime nor memory but improves the coding experience.

2. **Avoid unnecessary type casting**: There are some unnecessary type casting in the code. For example, `sz(edges)` is used where `edges.size()` is enough and more readable.

3. **Avoid unnecessary variables**: In the `test()` function, the `sum` variable is not needed since the `total_sum` already contains the sum of the values.

4. **Avoid unnecessary function calls**: The function `primefactor()` is called every time the `main()` function is called. However, the function does not depend on any variable and thus can be called only once and its result stored for later use.

5. **Avoid unnecessary `if` condition**: In the `test()` function, the condition `if (n - 1 != 1)` is redundant because `n` is always greater than 2.

Here is the modified code:

```
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pb push_back
#define mp make_pair
using pi = pair<int, int>;
using vi = vector<int>;
#define ff first
#define ss second
#define all(x) x.begin(), x.end()
const int NUM = 1000030;
const int N = 1000000;
vector<int> lp, sieve;
vector<int> pr;
void primefactor();
int binpow(int a, int b);
int binpow(int a, int b, int mod);
int gcd(int a, int b);
int lcm(int a, int b);
bool comp(int a, int b);
int inversemod(int a, int mod);
void calc_sieve();
void test() {
  int n, m;
  cin >> n >> m;
  if (n == 2) {
    cout << 2 << " " << 2 << endl;
    cout << 1 << " " << 2 << " " << 2 << endl;
    return;
  }
  auto total_sum = *lower_bound(all(pr), n);
  cout << 2 << " " << total_sum << endl;
  vector<pair<pi, int>> edges;
  edges.pb(mp(mp(1, n), 2));
  for (int i = 2; i < n - 1; i++) {
    edges.pb(mp(mp(1, i), 1));
  }
  edges.pb(mp(mp(1, n - 1), total_sum - (n - 1)));
  m -= edges.size();
  for (int i = 2; i <= n; i++) {
    if (m == 0)
      break;
    for (int j = i + 1; j <= n; j++) {
      if (m == 0)
        break;
      edges.pb(mp(mp(i, j), max(total_sum - (n - 1), 2ll) + 1));
      m--;
    }
  }
  for (const auto& edge : edges) {
    cout << edge.ff.ff << " " << edge.ff.ss << " " << edge.ss << "\n";
  }
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  primefactor();
  int t = 1;
  while (t--)
    test();
  return 0;
}
void calc_sieve() {
  sieve.resize(NUM + 1, 0);
  for (int x = 2; x <= NUM; x++) {
    if (sieve[x])
      continue;
    for (int u = x; u <= NUM; u += x) {
      sieve[u] = x;
    }
  }
}
void primefactor() {
  lp.resize(N + 1, 0);
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (auto j = 0; j < pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}
int binpow(int a, int b) {
  int res = 1;
  while (b > 0) {
    if (b & 1)
      res = res * a;
    a = a * a;
    b >>= 1;
  }
  return res;
}
int binpow(int a, int b, int mod) {
  int res = 1;
  while (b > 0) {
    if (b & 1)
      res = (res * a) % mod;
    a = (a * a) % mod;
    b >>= 1;
  }
  return res % mod;
}
int gcd(int a, int b) {
  if (b == 0)
    return a;
  else
    return gcd(b, a % b);
}
int lcm(int a, int b) { return ((a / gcd(a, b)) * b); }
bool comp(int a, int b) { return a > b; }
int inversemod(int a, int mod) { return binpow(a, mod - 2, mod); }
```