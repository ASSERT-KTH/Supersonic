Your program is quite complex and has numerous dependencies and functions. However, there are still some potential optimizations. Here are a few steps:

1. Avoiding the use of `#include <bits/stdc++.h>`: This is an internal non-standard header file used in GCC, and it includes a lot of unnecessary header files which increase compilation time. So, we can replace it with the necessary header files only.

2. Reducing function calls: In your original program, the `sz()` function is called multiple times. Instead of calling it repeatedly, we can store the result in a variable and use that variable.

3. Reserve space for vectors: If you know the maximum size your vector can grow to, call `reserve()` function to pre-allocate memory. It can save time as it avoids re-allocation and copying of vectors when they grow.

4. Reducing the use of `std::endl`: `std::endl` causes a flushing of the output buffer every time it's called, which could slow down your program. A "\n" doesn't flush the buffer, so it could be faster.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
#define int long long
#define pb push_back
#define mp make_pair
using pi = pair<int, int>;
using vi = vector<int>;
using vvi = vector<vector<int>>;
#define ff first
#define ss second
#define N 1000000
vector<int> lp, pr;
void primefactor();
int binpow(int a, int b);
int binpow(int a, int b, int mod);
int gcd(int a, int b);
int lcm(int a, int b);
bool comp(int a, int b);
int inversemod(int a, int mod);
void test() {
  int n, m;
  cin >> n >> m;
  if (n == 2) {
    cout << 2 << " " << 2 << "\n";
    cout << 1 << " " << 2 << " " << 2 << "\n";
    return;
  }
  int total_sum = *lower_bound(pr.begin(), pr.end(), n);
  cout << 2 << " " << total_sum << "\n";
  vector<pair<pi, int>> edges;
  int sum = 2;
  edges.pb(mp(mp(1, n), 2));
  for (int i = 2; i < n - 1; i++) {
    edges.pb(mp(mp(1, i), 1));
    sum++;
  }
  if (n - 1 != 1)
    edges.pb(mp(mp(1, n - 1), total_sum - sum));
  int edges_size = edges.size();
  m -= edges_size;
  for (int i = 2; i <= n; i++) {
    if (m == 0)
      break;
    for (int j = i + 1; j <= n; j++) {
      if (m == 0)
        break;
      edges.pb(mp(mp(i, j), max(total_sum - sum, 2ll) + 1));
      m--;
    }
  }
  for (int i = 0; i < edges_size; i++) {
    cout << edges[i].ff.ff << " " << edges[i].ff.ss << " " << edges[i].ss
         << "\n";
  }
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  primefactor();
  int t = 1;
  while (t--)
    test();
  return 0;
}
void primefactor() {
  lp.resize(N + 1, 0);
  pr.reserve(N + 1);
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (int j = 0; j < (int)pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}
int binpow(int a, int b) {
  int res = 1;
  while (b > 0) {
    if (b & 1)
      res = res * a;
    a = a * a;
    b >>= 1;
  }
  return res;
}
int binpow(int a, int b, int mod) {
  int res = 1;
  while (b > 0) {
    if (b & 1)
      res = (res * a) % mod;
    a = (a * a) % mod;
    b >>= 1;
  }
  return res % mod;
}
int gcd(int a, int b) {
  if (b == 0)
    return a;
  else
    return gcd(b, a % b);
}
int lcm(int a, int b) { return ((a / gcd(a, b)) * b); }
bool comp(int a, int b) { return a > b; }
int inversemod(int a, int mod) { return binpow(a, mod - 2, mod); }
```

Remember, these optimizations may not drastically improve your program's performance due to the complexity of the operations you're performing. However, following these practices can lead to better performance in large-scale programs.