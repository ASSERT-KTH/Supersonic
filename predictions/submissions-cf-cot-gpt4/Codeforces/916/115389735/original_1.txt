Here are some possible optimizations for this program:

1. Avoid using `#include <bits/stdc++.h>`: This header file includes lots of unnecessary files which can slow down the compilation time. Instead, only include the necessary libraries for your program.

2. Avoid using `#define` for constants: Instead of `#define`, use `const` variables, as they are type-safe.

3. Avoid unnecessary calculations in a loop: In the main loop of the `test()` function, there are repeated calculations of `max(total_sum - sum, 2ll) + 1`. It's better to calculate it once outside the loop and use the result inside the loop.

4. Use `reserve()` for vectors: If you know the maximum size of your vector, you can use `reserve()` to preallocate memory. This can reduce the time spent on memory reallocation when the vector grows.

5. Avoid unnecessary usage of `std::pair` and `std::vector`: In the `test()` function, there is a vector of pairs, which is used to store the edges. Instead of storing all edges in a vector and then printing them, you can print each edge right after it's calculated.

Here's the optimized program:

```C++
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
using pi = pair<int, int>;
using vi = vector<int>;
using vvi = vector<vi>;

const int NUM = 1000030;
const int N = 1000000;
vi lp, pr;

void primefactor();
void test();

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  primefactor();
  test();
  return 0;
}

void primefactor() {
  lp.resize(N + 1, 0);
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (int j = 0; j < pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}

void test() {
  int n, m;
  cin >> n >> m;
  if (n == 2) {
    cout << 2 << " " << 2 << endl;
    cout << 1 << " " << 2 << " " << 2 << "\n";
    return;
  }
  int total_sum = *lower_bound(pr.begin(), pr.end(), n);
  cout << 2 << " " << total_sum << "\n";
  int sum = 2;
  cout << 1 << " " << n << " " << 2 << "\n";
  for (int i = 2; i < n - 1; i++) {
    cout << 1 << " " << i << " " << 1 << "\n";
    sum++;
  }
  if (n - 1 != 1)
    cout << 1 << " " << n - 1 << " " << total_sum - sum << "\n";
  m -= n;
  int add_weight = max(total_sum - sum, 2ll) + 1;
  for (int i = 2; i <= n; i++) {
    if (m == 0)
      break;
    for (int j = i + 1; j <= n; j++) {
      if (m == 0)
        break;
      cout << i << " " << j << " " << add_weight << "\n";
      m--;
    }
  }
}
```

Note: This optimized code assumes that your environment supports C++11 or later. If not, you need to replace the range-based for loop with a traditional for loop, and replace `nullptr` with `NULL` or `0`.