Here are several steps to optimize the existing C++ code:

1. Avoid using `#include <bits/stdc++.h>`: This header file is quite large and includes a lot of libraries that are not needed in the code, which can slow down the compilation time. Instead, include only the necessary headers.

2. Remove unused functions: Functions like `binpow`, `gcd`, `lcm`, `comp`, `inversemod`, and `calc_sieve` are not used in the code. Removing these will save space and increase readability.

3. Use `reserve()` function for vector `edges`: This will reserve memory for the vector in advance, reducing the number of memory reallocations, and thus, speeding up the program.

4. Avoid using `using namespace std;`: This can cause name clashes, as it imports all the names from the std namespace into the global namespace. Explicitly using `std::` before standard library components would be prefered.

5. Avoid using macros for constant definitions: Using `const` or `constexpr` for defining constants like `NUM` and `N` is more safe and recommended in modern C++.

Now, I will implement these modifications into the code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

const int NUM = 1000030;
const int N = 1000000;

std::vector<int> lp, pr;

void primefactor() {
  lp.resize(N + 1, 0);
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (size_t j = 0; j < pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}

void test() {
  int n, m;
  std::cin >> n >> m;
  if (n == 2) {
    std::cout << 2 << " " << 2 << std::endl;
    std::cout << 1 << " " << 2 << " " << 2 << std::endl;
    return;
  }
  int total_sum = *std::lower_bound(pr.begin(), pr.end(), n);
  std::cout << 2 << " " << total_sum << std::endl;
  std::vector<std::pair<std::pair<int, int>, int>> edges;
  edges.reserve(n);
  int sum = 2;
  edges.push_back({{1, n}, 2});
  for (int i = 2; i < n - 1; i++) {
    edges.push_back({{1, i}, 1});
    sum++;
  }
  if (n - 1 != 1)
    edges.push_back({{1, n - 1}, total_sum - sum});
  m -= edges.size();
  for (int i = 2; i <= n; i++) {
    if (m == 0)
      break;
    for (int j = i + 1; j <= n; j++) {
      if (m == 0)
        break;
      edges.push_back({{i, j}, std::max(total_sum - sum, 2ll) + 1});
      m--;
    }
  }
  for (unsigned int i = 0; i < edges.size(); i++) {
    std::cout << edges[i].first.first << " " << edges[i].first.second << " " << edges[i].second
         << "\n";
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  primefactor();
  int t = 1;
  while (t--)
    test();
  return 0;
}
```