#include <iostream>
#include <vector>
#include <algorithm>

#define int long long
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(x) x.begin(), x.end()
#define sz(x) (int)(x).size()

const int N = 1000000;

using pi = std::pair<int, int>;

std::vector<int> lp;
std::vector<int> pr;

void primefactor() {
  lp.resize(N + 1, 0);
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.pb(i);
    }
    for (int j = 0; j < sz(pr) && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}

void test() {
  int n, m;
  std::cin >> n >> m;
  if (n == 2) {
    std::cout << 2 << " " << 2 << std::endl;
    std::cout << 1 << " " << 2 << " " << 2 << std::endl;
    return;
  }
  int total_sum = *lower_bound(all(pr), n);
  std::cout << 2 << " " << total_sum << std::endl;
  std::vector<std::pair<pi, int>> edges;
  int sum = 2;
  edges.pb(mp(pi(1, n), 2));
  for (int i = 2; i < n - 1; i++) {
    edges.pb(mp(pi(1, i), 1));
    sum++;
  }
  if (n - 1 != 1)
    edges.pb(mp(pi(1, n - 1), total_sum - sum));
  m -= sz(edges);
  for (int i = 2; i <= n; i++) {
    if (m == 0)
      break;
    for (int j = i + 1; j <= n; j++) {
      if (m == 0)
        break;
      edges.pb(mp(pi(i, j), std::max(total_sum - sum, 2ll) + 1));
      m--;
    }
  }
  for (int i = 0; i < sz(edges); i++) {
    std::cout << edges[i].ff.ff << " " << edges[i].ff.ss << " " << edges[i].ss << "\n";
  }
}

signed main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  primefactor();
  int t = 1;
  while (t--)
    test();
  return 0;
}