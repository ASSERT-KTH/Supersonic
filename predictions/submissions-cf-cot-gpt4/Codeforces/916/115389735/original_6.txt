This program is already quite optimized, but there are some small improvements that can be made. Here they are, step by step:

1. Avoid using `#include <bits/stdc++.h>`. This header file includes almost all standard library headers and increases the compilation time. Include only those libraries that are needed.

2. The `using namespace std;` statement can lead to name conflicts in larger projects when different libraries have functions with the same names. This might not be a problem in this particular program, but it's still better to avoid it to make code safer and more reliable.

3. The binary exponentiation functions `binpow(int a, int b)` and `binpow(int a, int b, int mod)` are never used in the program and can be removed to reduce the code size.

4. The function `inversemod(int a, int mod)`, which calculates the modular inverse using the binary exponentiation, is not used and can be removed.

5. The `gcd(int a, int b)` and `lcm(int a, int b)` functions are not used and can be removed.

6. The function `comp(int a, int b)` is not used and can be removed.

7. The function `calc_sieve()` is not used and can be removed.

8. The variable `sieve` is not used and can be removed.

After applying these optimizations, the code looks like this:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

#define int long long
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(x) x.begin(), x.end()
#define sz(x) (int)(x).size()

const int N = 1000000;

using pi = std::pair<int, int>;

std::vector<int> lp;
std::vector<int> pr;

void primefactor() {
  lp.resize(N + 1, 0);
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.pb(i);
    }
    for (int j = 0; j < sz(pr) && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}

void test() {
  int n, m;
  std::cin >> n >> m;
  if (n == 2) {
    std::cout << 2 << " " << 2 << std::endl;
    std::cout << 1 << " " << 2 << " " << 2 << std::endl;
    return;
  }
  int total_sum = *lower_bound(all(pr), n);
  std::cout << 2 << " " << total_sum << std::endl;
  std::vector<std::pair<pi, int>> edges;
  int sum = 2;
  edges.pb(mp(pi(1, n), 2));
  for (int i = 2; i < n - 1; i++) {
    edges.pb(mp(pi(1, i), 1));
    sum++;
  }
  if (n - 1 != 1)
    edges.pb(mp(pi(1, n - 1), total_sum - sum));
  m -= sz(edges);
  for (int i = 2; i <= n; i++) {
    if (m == 0)
      break;
    for (int j = i + 1; j <= n; j++) {
      if (m == 0)
        break;
      edges.pb(mp(pi(i, j), std::max(total_sum - sum, 2ll) + 1));
      m--;
    }
  }
  for (int i = 0; i < sz(edges); i++) {
    std::cout << edges[i].ff.ff << " " << edges[i].ff.ss << " " << edges[i].ss << "\n";
  }
}

signed main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  primefactor();
  int t = 1;
  while (t--)
    test();
  return 0;
}
```

Please note that this optimization focuses on the code quality and readability, not on the algorithm's time or memory complexity. To optimize the algorithm itself, a solid understanding of the problem is required. For instance, the prime factor generation could potentially be optimized, but it heavily depends on the problem's specifics whether this would lead to noticeable improvements.