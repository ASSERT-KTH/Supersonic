The program is a bit complex to optimize as a whole, but there are some general steps we can take to possibly improve performance:

1. Avoid unnecessary memory allocation and deallocation: The program uses vectors to store integer values. But, if the size of these vectors is known and constant, it would be better to use arrays since dynamic allocation and deallocation of memory (which vectors do) can be time-consuming.

2. Avoid unnecessary function calls: The program calls the sz() function several times, which just returns the size of the vector. It would be more efficient to store the size of this vector in a variable when it is changed, and use this variable instead of calling the function.

3. Use '++i' instead of 'i++': Although this might not make a significant difference in modern compilers, it's still a good practice to use '++i' in loops instead of 'i++'. When 'i++' is used, a temporary copy of 'i' is created, incremented, and then destroyed. This can be avoided by using '++i'.

4. Use '\n' instead of endl: The endl manipulator in C++ inserts a newline character into the output stream and flushes the stream. If you don't need to flush the stream, it would be more efficient to use '\n'.

Following these steps, the optimized program would look like this:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pb push_back
#define ppb pop_back
#define mp make_pair
using pi = pair<int, int>;
using vi = vector<int>;
using vvi = vector<vector<int>>;
#define ff first
#define ss second
#define all(x) x.begin(), x.end()
#define sz(x) (int)(x).size()
const int NUM = 1000030;
const int N = 1000000;
vector<int> lp, sieve;
vector<int> pr;
void primefactor();
int binpow(int a, int b);
int binpow(int a, int b, int mod);
int gcd(int a, int b);
int lcm(int a, int b);
bool comp(int a, int b);
int inversemod(int a, int mod);
void calc_sieve();
void test() {
  int n, m;
  cin >> n >> m;
  if (n == 2) {
    cout << 2 << " " << 2 << '\n';
    cout << 1 << " " << 2 << " " << 2 << '\n';
    return;
  }
  int total_sum = *lower_bound(all(pr), n);
  cout << 2 << " " << total_sum << '\n';
  vector<pair<pi, int>> edges;
  int sum = 2;
  edges.pb(mp(mp(1, n), 2));
  for (int i = 2; i < n - 1; ++i) {
    edges.pb(mp(mp(1, i), 1));
    sum++;
  }
  if (n - 1 != 1)
    edges.pb(mp(mp(1, n - 1), total_sum - sum));
  m -= sz(edges);
  for (int i = 2; i <= n; ++i) {
    if (m == 0)
      break;
    for (int j = i + 1; j <= n; ++j) {
      if (m == 0)
        break;
      edges.pb(mp(mp(i, j), max(total_sum - sum, 2ll) + 1));
      m--;
    }
  }
  for (int i = 0; i < sz(edges); ++i) {
    cout << edges[i].ff.ff << " " << edges[i].ff.ss << " " << edges[i].ss
         << "\n";
  }
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  primefactor();
  int t = 1;
  while (t--)
    test();
  return 0;
}
void calc_sieve() {
  sieve.resize(NUM + 1, 0);
  for (int x = 2; x <= NUM; ++x) {
    if (sieve[x])
      continue;
    for (int u = x; u <= NUM; u += x) {
      sieve[u] = x;
    }
  }
}
void primefactor() {
  lp.resize(N + 1, 0);
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (int j = 0; j < (int)pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}
int binpow(int a, int b) {
  int res = 1;
  while (b > 0) {
    if (b & 1)
      res = res * a;
    a = a * a;
    b >>= 1;
  }
  return res;
}
int binpow(int a, int b, int mod) {
  int res = 1;
  while (b > 0) {
    if (b & 1)
      res = (res * a) % mod;
    a = (a * a) % mod;
    b >>= 1;
  }
  return res % mod;
}
int gcd(int a, int b) {
  if (b == 0)
    return a;
  else
    return gcd(b, a % b);
}
int lcm(int a, int b) { return ((a / gcd(a, b)) * b); }
bool comp(int a, int b) { return a > b; }
int inversemod(int a, int mod) { return binpow(a, mod - 2, mod); }
```