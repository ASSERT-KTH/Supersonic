The given code is well-written but there are still some possible optimizations that can be performed to improve its memory usage and running time.

Here are the steps for optimization:

1. Avoid using `#include <bits/stdc++.h>`: This header file includes most of the standard library header files, which increases the compile time. It's better to include only the necessary header files.

2. Avoid using `#define` for simple functions: The `#define` directive is processed by the preprocessor and it can slow down the compilation time. We can replace `#define` directives with inlined functions or constants.

3. Minimize function calls inside loops: Function calls inside loops can slow down the program, especially if the function being called is complex.

4. Use `reserve()` for vectors: If we know the size of a vector beforehand, we can use the `reserve()` function to preallocate memory. This can avoid multiple reallocations.

5. Avoid using `using namespace std`: It's generally a bad practice to use this because it can lead to name conflicts.

After applying these optimizations, the optimized code is as follows:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using std::cin;
using std::cout;
using std::endl;
using std::vector;
using std::pair;

typedef long long int ll;
typedef pair<ll, ll> pll;
typedef vector<ll> vll;
typedef vector<vll> vvll;

const ll NUM = 1000030;
const ll N = 1000000;
vector<ll> lp, sieve;
vll pr;

void primefactor();
ll binpow(ll a, ll b);
ll binpow(ll a, ll b, ll mod);
ll gcd(ll a, ll b);
ll lcm(ll a, ll b);
bool comp(ll a, ll b);
ll inversemod(ll a, ll mod);
void calc_sieve();

void test() {
  ll n, m;
  cin >> n >> m;
  if (n == 2) {
    cout << 2 << " " << 2 << endl;
    cout << 1 << " " << 2 << " " << 2 << endl;
    return;
  }
  ll total_sum = *lower_bound(pr.begin(), pr.end(), n);
  cout << 2 << " " << total_sum << endl;
  vector<pair<pll, ll>> edges;
  edges.reserve(n * (n - 1) / 2);
  ll sum = 2;
  edges.push_back({{1, n}, 2});
  for (ll i = 2; i < n - 1; i++) {
    edges.push_back({{1, i}, 1});
    sum++;
  }
  if (n != 2)
    edges.push_back({{1, n - 1}, total_sum - sum});
  m -= edges.size();
  for (ll i = 2; i <= n; i++) {
    if (m == 0)
      break;
    for (ll j = i + 1; j <= n; j++) {
      if (m == 0)
        break;
      edges.push_back({{i, j}, std::max(total_sum - sum, 2ll) + 1});
      m--;
    }
  }
  for (const auto &edge : edges) {
    cout << edge.first.first << " " << edge.first.second << " " << edge.second
         << "\n";
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  primefactor();
  test();
  return 0;
}

void calc_sieve() {
  sieve.resize(NUM + 1, 0);
  for (ll x = 2; x <= NUM; x++) {
    if (sieve[x])
      continue;
    for (ll u = x; u <= NUM; u += x) {
      sieve[u] = x;
    }
  }
}

void primefactor() {
  lp.resize(N + 1, 0);
  for (ll i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (ll j = 0; j < pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}

ll binpow(ll a, ll b) {
  ll res = 1;
  while (b > 0) {
    if (b & 1)
      res = res * a;
    a = a * a;
    b >>= 1;
  }
  return res;
}

ll binpow(ll a, ll b, ll mod) {
  ll res = 1;
  while (b > 0) {
    if (b & 1)
      res = (res * a) % mod;
    a = (a * a) % mod;
    b >>= 1;
  }
  return res % mod;
}

ll gcd(ll a, ll b) {
  if (b == 0)
    return a;
  else
    return gcd(b, a % b);
}

ll lcm(ll a, ll b) { return ((a / gcd(a, b)) * b); }

bool comp(ll a, ll b) { return a > b; }

ll inversemod(ll a, ll mod) { return binpow(a, mod - 2, mod); }
```

Please note that the optimizations in this code mainly focus on improving compilation time, memory usage, and code readability. The actual runtime performance may vary depending on the specific input data and the hardware used to run the program.