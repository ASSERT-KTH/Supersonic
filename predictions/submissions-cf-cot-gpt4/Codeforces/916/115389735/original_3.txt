The given code calculates the prime numbers up to a limit and calculates some graph edges. The optimization steps can be:

1. Avoid using `#define` macros: In C++, it's better to use `const` or `constexpr` for constants and inline functions instead of macros.
2. `#include <bits/stdc++.h>`: This is a GCC extension that includes most standard library headers. It's better to include only the headers that you actually use. This can reduce compile time and also make your code portable to other compilers.
3. Avoid using `using namespace std;`: This is generally considered bad practice. It can potentially lead to name clashes which can be hard to debug.
4. Use `reserve()` before pushing back into vectors: If you know the size of a vector before pushing back, you can use `reserve()` to avoid unnecessary reallocations.
5. Use algorithms from the standard library: The standard library provides many algorithms which are often optimized and can simplify your code.
6. Use `endl` judiciously: `endl` is more than a newline, it also flushes the output buffer. If you're writing a lot of data, this can slow down your program. You can use '\n' instead when flushing isn't necessary.
7. Remove unused functions: Functions like `binpow()`, `gcd()`, `lcm()`, `comp()`, `inversemod()` and `calc_sieve()` are not used in the program. Removing them can reduce the size of binary file.
8. Use prefix increment: In C++, prefix increment (`++i`) can be faster than postfix (`i++`), especially for complex types.

Let's apply these optimizations to your code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using pi = std::pair<int, int>;
using vi = std::vector<int>;
using vvi = std::vector<std::vector<int>>;

constexpr int NUM = 1000030;
constexpr int N = 1000000;

std::vector<int> lp, sieve;
std::vector<int> pr;

void primefactor() {
  lp.resize(N + 1, 0);
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (int j = 0; j < static_cast<int>(pr.size()) && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}

void test() {
  int n, m;
  std::cin >> n >> m;

  if (n == 2) {
    std::cout << 2 << " " << 2 << '\n';
    std::cout << 1 << " " << 2 << " " << 2 << '\n';
    return;
  }

  int total_sum = *std::lower_bound(pr.begin(), pr.end(), n);
  std::cout << 2 << " " << total_sum << '\n';

  std::vector<std::pair<pi, int>> edges;
  edges.reserve(n-1);

  int sum = 2;
  edges.push_back({{1, n}, 2});

  for (int i = 2; i < n - 1; ++i) {
    edges.push_back({{1, i}, 1});
    ++sum;
  }
  if (n - 1 != 1)
    edges.push_back({{1, n - 1}, total_sum - sum});
  m -= edges.size();

  for (int i = 2; i <= n; ++i) {
    if (m == 0)
      break;
    for (int j = i + 1; j <= n; ++j) {
      if (m == 0)
        break;
      edges.push_back({{i, j}, std::max(total_sum - sum, 2ll) + 1});
      --m;
    }
  }

  for (const auto& edge : edges) {
    std::cout << edge.first.first << " " << edge.first.second << " " << edge.second << '\n';
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);

  primefactor();

  int t = 1;
  while (t--)
    test();

  return 0;
}
```