This C++ program can be optimized in the following ways:

1. The 'pr' array is used to represent whether a number is prime or not. It is initialized with a size of maxn + 100, but the numbers greater than maxn are never used in the program. We can reduce the size of the array to maxn + 1 to save memory.

2. The 'pint' vector is used to store prime numbers. Instead of storing all prime numbers up to maxn, we can store only the prime numbers that are factors of p. This will reduce the size of the 'pint' vector, and will also reduce the time complexity of the 'fac' function from O(n) to O(sqrt(n)).

3. The 'fac' function calculates the prime factors of p. After finding a prime factor, it divides p by that prime factor until p is no longer divisible by it. However, it continues to check the rest of the numbers in 'pint' even after p has been reduced to 1. We can add a condition to break the loop when p becomes 1.

4. The 'solve' function is called twice with the same argument x, which leads to redundant calculations. We can store the result of the first call and reuse it.

Here is the optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 1.8e7;
bool pr[maxn + 1];
vector<long long> pint, f;
void fac(int x) {
  f.clear();
  for (auto i : pint) {
    if (x % i != 0)
      continue;
    if (i * i > x)
      break;
    f.push_back(i);
    while (x % i == 0)
      x /= i;
    if (x == 1)
      break;
  }
  if (x != 1)
    f.push_back(x);
}
int solve(int val) {
  int ret = 0;
  int lim = 1 << f.size();
  for (int j = 1; j < lim; j++) {
    int tp = 1, ct = 0;
    for (int i = 0; i < (int)f.size(); i++) {
      if ((j >> i) & 1) {
        tp *= f[i];
        ct++;
      }
    }
    ret += (ct % 2 ? 1 : -1) * val / tp;
  }
  return val - ret;
}
int cas, x, p, k;
int main() {
  memset(pr, true, sizeof(pr));
  pr[0] = pr[1] = false;
  for (int i = 2; i <= maxn; i++)
    if (pr[i])
      for (int j = 2; j * i <= maxn; j++)
        pr[i * j] = false;
  cin >> cas;
  while (cas--) {
    scanf("%d%d%d", &x, &p, &k);
    pint.clear();
    for (int i = 2; i * i <= p; i++)
      if (p % i == 0) {
        pint.push_back(i);
        while (p % i == 0)
          p /= i;
      }
    if (p > 1)
      pint.push_back(p);
    fac(p);
    int a1 = solve(x), L = x + 1, R = maxn, ans = 0;
    while (L <= R) {
      int mid = (L + R) / 2;
      int val = solve(mid) - a1;
      if (val >= k)
        R = mid - 1, ans = mid;
      else
        L = mid + 1;
    }
    printf("%d\n", ans);
  }
  return 0;
}
```