The given C++ program is not very well optimized, but there are several areas where we can optimize it for better performance.

1. **Avoid global variables**: Global variables have a global lifetime and they occupy memory for the entire duration of the program. This can lead to an unnecessary increase in memory usage. Therefore, it is better to declare variables where they are needed.

2. **Avoid using `memset`**: Using `memset` to initialize arrays is not a good practice in C++. It's better to use `std::fill_n` or `std::fill` which are safer and more efficient.

3. **Use an efficient algorithm to generate prime numbers**: The current algorithm to generate prime numbers in the program is not very efficient. A more efficient algorithm like the Sieve of Eratosthenes can be used to generate prime numbers.

4. **Avoid repeated calculations**: The program calculates the value of `f.size()` repeatedly in the `solve` function. It's better to calculate it once and store the result in a variable.

5. **Use `ios_base::sync_with_stdio(false)`**: This can significantly increase I/O speed in some cases.

Here is the optimized version of the given code:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 1.8e7;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  vector<bool> pr(maxn + 100, true);
  pr[0] = pr[1] = false;
  
  vector<long long> pint, f;
  
  for (int i = 2; i * i <= maxn; i++)
    if (pr[i])
      for (int j = i * i; j <= maxn; j += i)
        pr[j] = false;

  for (int i = 2; i <= maxn; i++)
    if (pr[i])
      pint.push_back(i);
  
  int cas, x, p, k;
  cin >> cas;
  while (cas--) {
    cin >> x >> p >> k;
    
    f.clear();
    for (auto i : pint) {
      if (p % i != 0)
        continue;
      if (i * i > p)
        break;
      f.push_back(i);
      while (p % i == 0)
        p /= i;
    }
    if (p != 1)
      f.push_back(p);
      
    int a1 = 0, L = x + 1, R = maxn, ans = 0;
    int lim = 1 << f.size();
    for (int j = 1; j < lim; j++) {
      int tp = 1, ct = 0;
      for (int i = 0; i < (int)f.size(); i++) {
        if ((j >> i) & 1) {
          tp *= f[i];
          ct++;
        }
      }
      a1 += (ct % 2 ? 1 : -1) * x / tp;
    }
    
    while (L <= R) {
      int mid = (L + R) / 2;
      int val = a1 - x / mid;
      if (val >= k)
        R = mid - 1, ans = mid;
      else
        L = mid + 1;
    }
    
    cout << ans << '\n';
  }
  return 0;
}
```
Please note that the above optimizations would not drastically reduce the time complexity or memory usage, but they might help to make the code run faster and use less memory.