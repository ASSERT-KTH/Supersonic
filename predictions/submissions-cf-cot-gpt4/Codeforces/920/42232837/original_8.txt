Here are some steps to optimize this C/C++ program:

1. Avoid the use of `#include <bits/stdc++.h>` as it includes a lot of unnecessary libraries, which may increase the compilation time and program size. Replace it by including only the libraries that are needed for this program, like `#include <vector>` and `#include <cstdio>`.

2. In the `fac` function, we can save time by reducing the number of divisions. To do that, after we find a factor, we should divide `x` by `i` until `x` is no longer divisible by `i`. This can be done with a while loop. This reduces the number of times we check if `x` is divisible by `i`.

3. In the `main` function, replace the `scanf` function with `cin`. This is because `cin` is faster than `scanf` in C++. Similarly, replace `printf` with `cout`.

4. In the `main` function, a binary search is used. It can be optimized by using bitwise shift operation to calculate the mid value, which is faster than division.

Here is the optimized program:

```cpp
#include <vector>
#include <cstdio>
using namespace std;
const int maxn = 1.8e7;
bool pr[maxn + 100];
vector<long long> pint, f;
void fac(int x) {
  f.clear();
  for (auto i : pint) {
    if (x % i == 0) {
      f.push_back(i);
      while (x % i == 0)
        x /= i;
    }
    if (i * i > x)
      break;
  }
  if (x != 1)
    f.push_back(x);
}
int solve(int val) {
  int ret = 0;
  int lim = 1 << f.size();
  for (int j = 1; j < lim; j++) {
    int tp = 1, ct = 0;
    for (int i = 0; i < (int)f.size(); i++) {
      if ((j >> i) & 1) {
        tp *= f[i];
        ct++;
      }
    }
    ret += (ct % 2 ? 1 : -1) * val / tp;
  }
  return val - ret;
}
int cas, x, p, k;
int main() {
  memset(pr, true, sizeof(pr));
  pr[0] = pr[1] = false;
  for (int i = 2; i <= maxn; i++)
    if (pr[i])
      for (int j = 2; j * i <= maxn; j++)
        pr[i * j] = false;
  for (int i = 2; i <= maxn; i++)
    if (pr[i])
      pint.push_back(i);
  cin >> cas;
  while (cas--) {
    cin >> x >> p >> k;
    fac(p);
    int a1 = solve(x), L = x + 1, R = maxn, ans = 0;
    while (L <= R) {
      int mid = L + ((R - L) >> 1);
      int val = solve(mid) - a1;
      if (val >= k)
        R = mid - 1, ans = mid;
      else
        L = mid + 1;
    }
    cout << ans << '\n';
  }
  return 0;
}
```

Note: The optimized program assumes the C++ standard is C++11 or later, because auto type and cin/cout are used.