Optimization Steps:

1. Avoid using `#include <bits/stdc++.h>`: This header file includes quite a lot of files, which can increase the compile time. Instead, only include those libraries that are actually needed.

2. Avoid using namespace std: Using the line `using namespace std;` can cause conflict if we have a function with the same name in the std namespace.

3. Use `vector<bool>` instead of `bool[]`: For the `pr[]` array, using `vector<bool>` instead of `bool[]` can save memory as `vector<bool>` is a space-efficient specialization of `vector`.

4. Use `ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);`: These lines can speed up I/O operations, which can be beneficial when the program involves heavy I/O operations.

5. Avoid using `scanf` and `printf`: Instead of `scanf` and `printf`, you can use `cin` and `cout` which are easier to use and less prone to errors.

6. Use `reserve()` for vector: If the size of the vector is known in advance, using `reserve()` can avoid unnecessary reallocations and copies.

Optimized Program:

```
#include <iostream>
#include <vector>
#include <cstring>

const int maxn = 1.8e7;
std::vector<bool> pr(maxn + 100, true);
std::vector<long long> pint, f;

void fac(int x) {
  f.clear();
  for (auto i : pint) {
    if (x % i != 0)
      continue;
    if (i * i > x)
      break;
    f.push_back(i);
    while (x % i == 0)
      x /= i;
  }
  if (x != 1)
    f.push_back(x);
}

int solve(int val) {
  int ret = 0;
  int lim = 1 << f.size();
  for (int j = 1; j < lim; j++) {
    int tp = 1, ct = 0;
    for (size_t i = 0; i < f.size(); i++) {
      if ((j >> i) & 1) {
        tp *= f[i];
        ct++;
      }
    }
    ret += (ct % 2 ? 1 : -1) * val / tp;
  }
  return val - ret;
}

int main() {
  ios_base::sync_with_stdio(false); 
  cin.tie(NULL); 
  cout.tie(NULL);
  
  pr[0] = pr[1] = false;
  for (int i = 2; i <= maxn; i++)
    if (pr[i])
      for (int j = 2; j * i <= maxn; j++)
        pr[i * j] = false;
  for (int i = 2; i <= maxn; i++)
    if (pr[i])
      pint.push_back(i);

  int cas, x, p, k;
  cin >> cas;
  while (cas--) {
    cin >> x >> p >> k;
    fac(p);
    int a1 = solve(x), L = x + 1, R = maxn, ans = 0;
    while (L <= R) {
      int mid = (L + R) / 2;
      int val = solve(mid) - a1;
      if (val >= k)
        R = mid - 1, ans = mid;
      else
        L = mid + 1;
    }
    cout << ans << "\n";
  }
  return 0;
}
```