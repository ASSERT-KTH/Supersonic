This program calculates prime numbers and solves a problem related to number theory. Here are the steps to optimize this program:

1. **Avoid using `#include <bits/stdc++.h>`**: This header file includes a lot of unnecessary headers, which can increase the compile time. Instead, we should only include the headers that we actually need. In this case, we need `<iostream>`, `<vector>`, `<cstring>` and `<cmath>`.

2. **Avoid using `namespace std`**: Using `namespace std` can lead to name conflicts. Instead, we should use `std::` prefix before using the standard library functions or classes.

3. **Avoid using `scanf` and `printf`**: These are C style I/O functions, and they are slower than C++ I/O functions. Instead, we should use `std::cin` and `std::cout`.

4. **Use `std::vector<bool>` for `pr` array**: The `std::vector<bool>` specialization is a space efficient specialization of `std::vector` for boolean values. Each value is stored in 1 bit instead of using a whole `bool` (which actually takes more than 1 bit of space).

5. **Use `std::bitset` for `pr` array**: If the maximum size is known and fixed, `std::bitset` is even more efficient than `std::vector<bool>`. It also stores boolean values in 1 bit each.

6. **Use `reserve` for `pint` and `f` vectors**: If we know the maximum possible size of the vector, we should call `reserve` to avoid reallocations.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <cstring>
#include <cmath>
#include <bitset>

const int maxn = 1.8e7;
std::bitset<maxn + 100> pr;
std::vector<long long> pint, f;
pint.reserve(maxn);
f.reserve(maxn);

void fac(int x) {
  f.clear();
  for (auto i : pint) {
    if (x % i != 0)
      continue;
    if (i * i > x)
      break;
    f.push_back(i);
    while (x % i == 0)
      x /= i;
  }
  if (x != 1)
    f.push_back(x);
}

int solve(int val) {
  int ret = 0;
  int lim = 1 << f.size();
  for (int j = 1; j < lim; j++) {
    int tp = 1, ct = 0;
    for (int i = 0; i < (int)f.size(); i++) {
      if ((j >> i) & 1) {
        tp *= f[i];
        ct++;
      }
    }
    ret += (ct % 2 ? 1 : -1) * val / tp;
  }
  return val - ret;
}

int main() {
  pr.set();
  pr[0] = pr[1] = false;
  for (int i = 2; i <= maxn; i++)
    if (pr[i])
      for (int j = 2; j * i <= maxn; j++)
        pr[i * j] = false;
  for (int i = 2; i <= maxn; i++)
    if (pr[i])
      pint.push_back(i);
  int cas, x, p, k;
  std::cin >> cas;
  while (cas--) {
    std::cin >> x >> p >> k;
    fac(p);
    int a1 = solve(x), L = x + 1, R = maxn, ans = 0;
    while (L <= R) {
      int mid = (L + R) / 2;
      int val = solve(mid) - a1;
      if (val >= k)
        R = mid - 1, ans = mid;
      else
        L = mid + 1;
    }
    std::cout << ans << "\n";
  }
  return 0;
}
```
Please note that `std::bitset` and `std::vector<bool>` trade off memory efficiency for time efficiency. They are slower than ordinary arrays or `std::vector`s because they need to pack and unpack individual bits. If the program is too slow, you may need to revert to using `std::vector<bool>` or even an ordinary array or `std::vector`.