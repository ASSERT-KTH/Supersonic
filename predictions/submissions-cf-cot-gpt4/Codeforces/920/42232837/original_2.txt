Here's the step by step optimization for your given C/C++ program:

1. **Avoid using `#include <bits/stdc++.h>`**: This header file includes nearly all the standard libraries. This can increase compile time because you are loading a lot of unnecessary libraries. 

2. **Avoid using `using namespace std;`**: It can cause a collision if there are functions or variables with the same name in different namespaces.

3. **Avoid using `memset`**: In modern C++, we should initialize the array to a certain value when we declare it. It's more safe and efficient.

4. **Avoid using `scanf` and `printf`**: In C++, we should use `std::cin` and `std::cout` for input and output. They are easier to use and safer.

5. **Avoid using magic numbers**: Numbers like 1.8e7 should be declared as constants with expressive names at the top of the file.

6. **Use pre-increment/decrement operators when the result of operation is not used**: Pre-increment/decrement operators are more efficient than post-increment/decrement operators because they don't need to store the original value.

7. **Use `const` or `constexpr` for variables that don't change**: This can help the compiler optimize the code.

Here's your optimized program:

```cpp
#include <vector>
#include <iostream>

constexpr int MAXN = 18'000'000;
bool primes[MAXN + 100] = {false, false};
std::vector<long long> primeIntegers, factors;

void calculateFactors(int x) {
  factors.clear();
  for (auto i : primeIntegers) {
    if (x % i != 0)
      continue;
    if (i * i > x)
      break;
    factors.push_back(i);
    while (x % i == 0)
      x /= i;
  }
  if (x != 1)
    factors.push_back(x);
}

int solve(int val) {
  int result = 0;
  int limit = 1 << factors.size();
  for (int j = 1; j < limit; ++j) {
    int temp = 1, count = 0;
    for (int i = 0; i < static_cast<int>(factors.size()); ++i) {
      if ((j >> i) & 1) {
        temp *= factors[i];
        ++count;
      }
    }
    result += (count % 2 ? 1 : -1) * val / temp;
  }
  return val - result;
}

int main() {
  for (int i = 2; i <= MAXN; ++i) {
    if (primes[i])
      for (int j = 2; j * i <= MAXN; ++j)
        primes[i * j] = false;
    else
      primes[i] = true;
  }

  for (int i = 2; i <= MAXN; ++i)
    if (primes[i])
      primeIntegers.push_back(i);

  int cases;
  std::cin >> cases;
  while (cases--) {
    int x, p, k;
    std::cin >> x >> p >> k;
    calculateFactors(p);
    int a1 = solve(x), L = x + 1, R = MAXN, ans = 0;
    while (L <= R) {
      int mid = (L + R) / 2;
      int val = solve(mid) - a1;
      if (val >= k)
        R = mid - 1, ans = mid;
      else
        L = mid + 1;
    }
    std::cout << ans << "\n";
  }
  return 0;
}
```

Note: This code can still be optimized more, but as per your request, I made minimum changes to the original code.