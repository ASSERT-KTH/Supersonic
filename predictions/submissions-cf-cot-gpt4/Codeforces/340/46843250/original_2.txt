Optimizations:

1. `#include <bits/stdc++.h>`: This header file includes lots of unnecessary headers which can increase the compilation time. We should only include the necessary headers.

2. `#define pb push_back`: Using macros for shortening the code is not considered a good programming practice. Instead, we should use functions or methods provided by C++ STL.

3. `#define F first`, `#define S second`: Same as above. Instead, use pair.first and pair.second which are more readable and maintainable.

4. `#define all(x) x.begin(), x.end()`, `#define Sort(x) sort(all(x))`, `#define sz(x) x.size()`: Same as above.

5. `#define debug(x) cerr << #x << " = " << x << endl`: This line is not used in the code, so we can remove it.

6. `sync ios::sync_with_stdio(0), cin.tie(0)`: This line is used to speed up reading from stdin and writing to stdout, but in this case there is only one input operation, so it is unnecessary.

7. `typedef`: Using `typedef` is not recommended in modern C++. Instead, we should use `using` keyword to create alias.

8. `ll pow(ll a, ll b)`: This function is not used in the code, so we can remove it.

9. `ll mod(ll n)`: This function is not used in the code, so we can remove it.

10. `ll gcd(ll a, ll b)`: This function is not used in the code, so we can remove it.

11. `ll a[MAXN]`: This array is not used in the code, so we can remove it.

12. `multiset<ll> s`: Instead of using `multiset`, we can use `set` as we are not handling duplicates.

13. `int Main()`: The function name should start with a lowercase letter, and it should return a value.

Here is the optimized code:

```cpp
#include <iostream>
#include <set>
#include <vector>

using namespace std;
using ll = long long;
const ll MOD = 1e9 + 7;

int main() {
  ll n;
  cin >> n;
  vector<ll> a(n);
  for (int i = 0; i < n; i++)
    cin >> a[i];
  set<ll> s;
  for (int i = 0; i < n; i++) {
    auto it = s.lower_bound(a[i]);
    if (it != s.end())
      s.erase(it);
    s.insert(a[i]);
  }
  cout << s.size();
  return 0;
}
```