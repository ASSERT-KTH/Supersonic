This C++ program doesn't need significant optimization in terms of memory usage and running time as it's already well-structured and efficient. However, there are still a few tweaks that can be made to enhance the performance slightly.

Optimization Steps:

1. Directly using `#include <bits/stdc++.h>` is not recommended as it includes a lot of unnecessary headers, increasing the compilation time. Instead, you should include only the headers that you need.

2. The `sync` macro is used to sync C++ stdio with C stdio. This is not necessary here as we are not using C stdio in this program. Removing this will slightly improve the running time.

3. The `pow` function is implemented recursively which is less efficient compared to iterative implementation in terms of both time and space complexity. We can use the built-in `pow` function from the math library.

4. The `Main` function is called only once, so the loop is unnecessary.

5. The `Main` function should return 0 to indicate successful termination.

6. The function `sz(s)` can be replaced with `s.size()`.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
using namespace std;
typedef long long ll;
const ll MAXN = 1e5 + 300;
ll a[MAXN];
multiset<ll> s;
int Main() {
  ll n;
  cin >> n;
  for (int i = 0; i < n; i++)
    cin >> a[i];
  for (int i = 0; i < n; i++) {
    auto it = s.lower_bound(a[i]);
    if (it != s.end())
      s.erase(it);
    s.insert(a[i]);
  }
  cout << s.size();
  return 0;
}
int main() {
  Main();
  return 0;
}
```

Please note that, as the original code is quite optimized, these changes will not lead to significant improvements in real-world scenarios. The improvement will be more noticeable in large-scale programs or systems.