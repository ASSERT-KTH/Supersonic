Before we proceed with the optimization, let's understand what this program does. It appears to implement a Disjoint Set Union (DSU) data structure, which is a data structure that tracks a partition of a set into disjoint (non-overlapping) subsets.

Now, let's see what we can optimize:

1. The `root` function can be optimized using path compression. Path compression is a technique where, when finding the root of an element, we make every element in the path point to the root directly. This can significantly speed up future queries.

2. The `mrg` function merges two sets. The function can be optimized by using union by rank. In union by rank, we always attach the smaller tree to the root of the larger tree.

3. Instead of using `#define` for macros, it's better to use `typedef` or `using` statements for type aliases and `const` for constants.

4. The `main` function should have a return type of `int`.

5. The global variables should be avoided as much as possible.

6. `#include <bits/stdc++.h>` is not a good practice as it includes a lot of unnecessary files, slowing down the compilation process.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <utility>
using namespace std;

const int MAX = 2e5;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pair<int, pii>> vpiii;

int root(vi &par, int x) {
    if (par[x] != x)
        par[x] = root(par, par[x]);
    return par[x];
}

int mrg(vi &par, vi &sz, int x, int y) {
    int tmp;
    x = root(par, x), y = root(par, y);
    if (x == y)
        return 0;
    if (sz[x] < sz[y])
        swap(x, y);
    par[y] = x, tmp = sz[x] * sz[y], sz[x] += sz[y];
    return tmp;
}

void dsu(vi &par, vi &sz, vi &PS, vpiii &e, int n) {
    for (int i = 0; i < n - 1; i++)
        PS[e[i].first] += mrg(par, sz, e[i].second.first, e[i].second.second);
    for (int i = 1; i <= MAX; i++)
        PS[i] += PS[i - 1];
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int n, m, u, v, w, q;
    cin >> n >> m;
    
    vpiii e(n);
    for (int i = 0; i < n - 1; i++) {
        cin >> u >> v >> w;
        e[i] = {w, {u, v}};
    }
    sort(e.begin(), e.end());
    
    vi par(n+1), sz(n+1, 1), PS(MAX+1, 0);
    for (int i = 1; i <= n; i++)
        par[i] = i;
    
    dsu(par, sz, PS, e, n);
    
    while (m--) {
        cin >> q;
        cout << PS[q] << ' ';
    }
    
    return 0;
}
```
In this code, I've replaced macros with `typedef` and `const` statements, used path compression and union by rank in `root` and `mrg` functions respectively, moved the global variables into the main function, and added a return type to the main function. I've also replaced the `#include <bits/stdc++.h>` header file with the specific header files needed for the program.