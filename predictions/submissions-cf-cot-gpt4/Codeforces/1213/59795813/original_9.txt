Here are the steps to optimize the provided C/C++ program:

1. Remove the use of `#include <bits/stdc++.h>`, as it includes more headers than needed, which might slow down the compilation process. Instead, include only the necessary headers. 

2. The macro `#define pb push_back` is not recommended because it reduces code readability. It's better to use `push_back` directly.

3. The `__gcd` function is not used in the code, so the macro `#define gcd __gcd` can be removed.

4. Replace `#define int long long` with `typedef long long int`. This is because `#define` can lead to unexpected results due to the preprocessor's text substitution.

5. The use of `ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);` is good for fast I/O operations in competitive programming but it can lead to unexpected results and it's not recommended in production code.

6. Instead of using the MAX constant as the size of the array, we can dynamically allocate the memory for the array based on the input size `n`. This can save memory space.

7. The main function should be declared as `int main()`, not `main()`.

Here is the optimized C/C++ code based on the above steps:

```
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;
typedef long long int int;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef map<int, int> mi;
const int MAX = 2e5;
int n, m, u, q, v, w, k, *par, *sz, *PS;
vector<pair<int, pii>> e;

int root(int x) { return par[x] = (par[x] == x ? x : root(par[x])); }

int mrg(int x, int y) {
  int tmp;
  x = root(x), y = root(y);
  if (x == y)
    return 0;
  if (sz[x] < sz[y])
    swap(x, y);
  par[y] = x, tmp = sz[x] * sz[y], sz[x] += sz[y];
  return tmp;
}

void dsu() {
  for (int i = 0; i < n - 1; i++)
    PS[e[i].first] += mrg(e[i].second.first, e[i].second.second);
  for (int i = 1; i <= MAX; i++)
    PS[i] += PS[i - 1];
}

int main() {
  cin >> n >> m;
  par = new int[n+1];
  sz = new int[n+1];
  PS = new int[n+1];
  for (int i = 0; i < n - 1; i++) {
    cin >> u >> v >> w;
    e.push_back({w, {u, v}});
  }
  sort(e.begin(), e.end());
  for (int i = 1; i <= n; i++)
    par[i] = i, sz[i] = 1;
  dsu();
  while (m--) {
    cin >> q;
    cout << PS[q] << ' ';
  }
  delete[] par;
  delete[] sz;
  delete[] PS;
  return 0;
}
```
Remember to free the allocated memory at the end of the program to avoid memory leaks.