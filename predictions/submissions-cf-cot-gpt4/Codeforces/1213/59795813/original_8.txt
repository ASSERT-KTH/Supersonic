The primary optimizations that could be done here are:

1. Unnecessary usage of 'long long int': You have used 'long long int' for every int variable in your program. Even though this type can handle very large numbers, it consumes a lot of memory (8 bytes). You should use 'int' instead, unless the range of values required by your program exceeds what 'int' can handle.
   
2. Use of 'using namespace std': This usage brings everything in the 'std' namespace into the global namespace, which can potentially lead to naming conflicts. It is more efficient to use the 'std::' scope resolution operator when needed.
   
3. Unnecessary usage of macros: You have used macros like '#define pb push_back' which is not recommended. It makes the code less readable and harder to debug. It's better to use the actual function calls.
   
4. Avoid using '#include <bits/stdc++.h>': This header file includes too many unnecessary libraries that can increase the compilation time. It's better to only include the libraries that you need.

Here is the optimized version of your program:

```cpp
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>

const int MAX = 2e5;
int n, m, u, q, v, w, k, par[MAX], sz[MAX], PS[MAX];
std::vector<std::pair<int, std::pair<int, int>>> e;

int root(int x) { 
    return par[x] = (par[x] == x ? x : root(par[x])); 
}

int mrg(int x, int y) {
    int tmp;
    x = root(x), y = root(y);
    if (x == y)
      return 0;
    if (sz[x] < sz[y])
      std::swap(x, y);
    par[y] = x, tmp = sz[x] * sz[y], sz[x] += sz[y];
    return tmp;
}

void dsu() {
    for (int i = 0; i < n - 1; i++)
      PS[e[i].first] += mrg(e[i].second.first, e[i].second.second);
    for (int i = 1; i <= MAX; i++)
      PS[i] += PS[i - 1];
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0);
    std::cout.tie(0);
    std::cin >> n >> m;
    for (int i = 0; i < n - 1; i++) {
        std::cin >> u >> v >> w;
        e.push_back({w, {u, v}});
    }
    std::sort(e.begin(), e.end());
    for (int i = 1; i <= n; i++)
      par[i] = i, sz[i] = 1;
    dsu();
    while (m--) {
        std::cin >> q;
        std::cout << PS[q] << ' ';
    }
    return 0;
}
```

Note: As you didn't specify the purpose of the program, I've made the optimizations based on general best practices.