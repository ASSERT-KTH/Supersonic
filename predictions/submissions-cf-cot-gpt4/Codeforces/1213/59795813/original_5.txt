This program is quite well optimized already, but there are a few changes that can be made to further improve its efficiency:

1. Replace `#include <bits/stdc++.h>` with specific headers: `#include <bits/stdc++.h>` includes a lot of unnecessary headers, which increases the compilation time. Instead, we should only include the headers that we need.

2. Avoid using `#define`: It's better to use `typedef` or `using` for type aliases and `const` for constants. The `#define` directive does not respect scope and can lead to unexpected results.

3. Use `std::ios::sync_with_stdio(false)` and `std::cin.tie(nullptr)` only once: There is no need to use these twice, once is enough.

4. Avoid using global variables: Global variables can lead to unexpected results and make the program harder to debug. It's better to pass these variables as parameters to functions or use local variables.

5. Use `std::vector::reserve`: If we know the size of a vector beforehand, we can use `reserve` to preallocate memory, which can improve performance.

Here is the optimized program:

```c++
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>

using int64 = long long;
using pii = std::pair<int, int>;
using vi = std::vector<int>;
using mi = std::map<int, int>;

const int MAX = 2e5;

int root(int x, std::vector<int>& par) { return par[x] = (par[x] == x ? x : root(par[x], par)); }

int mrg(int x, int y, std::vector<int>& par, std::vector<int>& sz) {
  int tmp;
  x = root(x, par), y = root(y, par);
  if (x == y)
    return 0;
  if (sz[x] < sz[y])
    std::swap(x, y);
  par[y] = x, tmp = sz[x] * sz[y], sz[x] += sz[y];
  return tmp;
}

void dsu(int n, std::vector<std::pair<int, pii>>& e, std::vector<int>& PS, std::vector<int>& par, std::vector<int>& sz) {
  for (int i = 0; i < n - 1; i++)
    PS[e[i].first] += mrg(e[i].second.first, e[i].second.second, par, sz);
  for (int i = 1; i <= MAX; i++)
    PS[i] += PS[i - 1];
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int n, m, u, q, v, w;
  std::cin >> n >> m;
  std::vector<std::pair<int, pii>> e;
  e.reserve(n-1);
  for (int i = 0; i < n - 1; i++) {
    std::cin >> u >> v >> w;
    e.push_back({w, {u, v}});
  }
  std::sort(e.begin(), e.end());
  std::vector<int> par(n+1), sz(n+1, 1), PS(MAX+1, 0);
  for (int i = 1; i <= n; i++)
    par[i] = i;
  dsu(n, e, PS, par, sz);
  while (m--) {
    std::cin >> q;
    std::cout << PS[q] << ' ';
  }
  return 0;
}
```

In the optimized code, the operations are the same as in the original program, but we've made the changes described above to improve efficiency.