#include <iostream>
#include <vector>
#include <map>
#include <algorithm>

const int MAX = 2e5;
std::vector<std::pair<int, std::pair<int, int>>> e;
std::vector<int> par(MAX), sz(MAX), PS(MAX);

int root(int x) {
    return par[x] == x ? x : (par[x] = root(par[x]));
}

int mrg(int x, int y) {
    x = root(x), y = root(y);
    if (x == y)
        return 0;
    if (sz[x] < sz[y])
        std::swap(x, y);
    int tmp = sz[x] * sz[y];
    par[y] = x, sz[x] += sz[y];
    return tmp;
}

void dsu(int n) {
    for (int i = 0; i < n - 1; i++)
        PS[e[i].first] += mrg(e[i].second.first, e[i].second.second);
    for (int i = 1; i <= MAX; i++)
        PS[i] += PS[i - 1];
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int n, m, u, v, w, q;
    std::cin >> n >> m;
    for (int i = 0; i < n - 1; i++) {
        std::cin >> u >> v >> w;
        e.push_back({w, {u, v}});
    }
    std::sort(e.begin(), e.end());
    for (int i = 1; i <= n; i++)
        par[i] = i, sz[i] = 1;
    dsu(n);
    while (m--) {
        std::cin >> q;
        std::cout << PS[q] << ' ';
    }
    return 0;
}