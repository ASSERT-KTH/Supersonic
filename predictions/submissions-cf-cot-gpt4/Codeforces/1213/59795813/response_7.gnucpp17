#include <iostream>
#include <vector>
#include <algorithm>
#include <utility>
using namespace std;

const int MAX = 2e5;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pair<int, pii>> vpiii;

int root(vi &par, int x) {
    if (par[x] != x)
        par[x] = root(par, par[x]);
    return par[x];
}

int mrg(vi &par, vi &sz, int x, int y) {
    int tmp;
    x = root(par, x), y = root(par, y);
    if (x == y)
        return 0;
    if (sz[x] < sz[y])
        swap(x, y);
    par[y] = x, tmp = sz[x] * sz[y], sz[x] += sz[y];
    return tmp;
}

void dsu(vi &par, vi &sz, vi &PS, vpiii &e, int n) {
    for (int i = 0; i < n - 1; i++)
        PS[e[i].first] += mrg(par, sz, e[i].second.first, e[i].second.second);
    for (int i = 1; i <= MAX; i++)
        PS[i] += PS[i - 1];
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int n, m, u, v, w, q;
    cin >> n >> m;
    
    vpiii e(n);
    for (int i = 0; i < n - 1; i++) {
        cin >> u >> v >> w;
        e[i] = {w, {u, v}};
    }
    sort(e.begin(), e.end());
    
    vi par(n+1), sz(n+1, 1), PS(MAX+1, 0);
    for (int i = 1; i <= n; i++)
        par[i] = i;
    
    dsu(par, sz, PS, e, n);
    
    while (m--) {
        cin >> q;
        cout << PS[q] << ' ';
    }
    
    return 0;
}