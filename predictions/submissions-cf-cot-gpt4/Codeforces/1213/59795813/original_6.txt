Optimization Steps:

1. Remove `#include <bits/stdc++.h>`: This header file is quite large and slows down the compilation process. It includes practically everything from the standard library. It's better to include only what you need. This won't affect the runtime but will help to speed up the compilation process.

2. Avoid using `#define`: It's better to use `const` or `inline` functions instead of `#define` for constants and simple functions. This is because `#define` is processed by the preprocessor and doesn't have any type safety. 

3. Use `std::ios::sync_with_stdio(false);` and `std::cin.tie(nullptr);` only once: These lines make `cin` and `cout` as fast as `printf` and `scanf` but they should not be used when `cin/cout` and `printf/scanf` are mixed.

4. Avoid using `using namespace std;`: It's a bad practice to use `using namespace std;` because if the std namespace contains a name that is also used in other parts of your program, it can lead to name collisions.

5. Use `std::vector` instead of C-style arrays: This will automatically manage memory for you and provides a number of useful functions.

6. Avoid global variables: Global variables can make a program hard to debug and understand. It's better to pass these as parameters to your functions where possible.

Here is the optimized version of your program:

```C++
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>

const int MAX = 2e5;
std::vector<std::pair<int, std::pair<int, int>>> e;
std::vector<int> par(MAX), sz(MAX), PS(MAX);

int root(int x) {
    return par[x] == x ? x : (par[x] = root(par[x]));
}

int mrg(int x, int y) {
    x = root(x), y = root(y);
    if (x == y)
        return 0;
    if (sz[x] < sz[y])
        std::swap(x, y);
    int tmp = sz[x] * sz[y];
    par[y] = x, sz[x] += sz[y];
    return tmp;
}

void dsu(int n) {
    for (int i = 0; i < n - 1; i++)
        PS[e[i].first] += mrg(e[i].second.first, e[i].second.second);
    for (int i = 1; i <= MAX; i++)
        PS[i] += PS[i - 1];
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int n, m, u, v, w, q;
    std::cin >> n >> m;
    for (int i = 0; i < n - 1; i++) {
        std::cin >> u >> v >> w;
        e.push_back({w, {u, v}});
    }
    std::sort(e.begin(), e.end());
    for (int i = 1; i <= n; i++)
        par[i] = i, sz[i] = 1;
    dsu(n);
    while (m--) {
        std::cin >> q;
        std::cout << PS[q] << ' ';
    }
    return 0;
}
```

Please note that the optimization of code is very subjective and can depend on the specific use case, the specific hardware where the program will run, and other factors. Therefore, the optimized version might still not be the best version for your specific situation.