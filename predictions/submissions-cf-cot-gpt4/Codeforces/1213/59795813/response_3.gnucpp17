#include <iostream>
#include <vector>
#include <algorithm>
#include <map>

using int64 = long long;
using Pair = std::pair<int64, int64>;
using Vector = std::vector<int64>;
using Map = std::map<int64, int64>;
const int64 MAX = 2e5;
Vector par(MAX), sz(MAX), PS(MAX);
std::vector<Pair> e;

int64 root(int64 x) { 
    if(par[x] != x) {
        par[x] = root(par[x]);
    }
    return par[x];
}

int64 mrg(int64 x, int64 y) {
  int64 tmp;
  x = root(x), y = root(y);
  if (x == y)
    return 0;
  if (sz[x] < sz[y])
    std::swap(x, y);
  par[y] = x, tmp = sz[x] * sz[y], sz[x] += sz[y];
  return tmp;
}

void dsu(int64 n) {
  for (int64 i = 0; i < n - 1; i++)
    PS[e[i].first] += mrg(e[i].second.first, e[i].second.second);
  for (int64 i = 1; i <= MAX; i++)
    PS[i] += PS[i - 1];
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);
  int64 n, m, u, q, v, w;
  std::cin >> n >> m;
  for (int64 i = 0; i < n - 1; i++) {
    std::cin >> u >> v >> w;
    e.push_back({w, {u, v}});
  }
  std::sort(e.begin(), e.end());
  for (int64 i = 1; i <= n; i++)
    par[i] = i, sz[i] = 1;
  dsu(n);
  while (m--) {
    std::cin >> q;
    std::cout << PS[q] << ' ';
  }
  return 0;
}