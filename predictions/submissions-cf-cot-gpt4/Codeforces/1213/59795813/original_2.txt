The given code is a Disjoint Set Union (DSU) implementation used to handle and solve problems related to connectivity in a graph. The code is already fairly optimized, but a few minor changes could potentially improve it slightly.

Optimization Steps:

1. Avoid using `bits/stdc++.h`: It is not a standard header file and it includes quite a lot of files which can increase the compilation time. We should include only the necessary header files such as `iostream`, `vector`, `algorithm`, etc.

2. Avoid using `#define`: Use `typedef` or `using` instead to define types. It will make the code cleaner and easier to understand.

3. Avoid using `long long` when `int` is enough: The `long long` type uses more memory compared to `int`. If we are sure that the number will not exceed the limit of `int`, we can use `int` to save space.

4. Pass complex data types by reference: When a function receives a complex data type (like a vector or a map), it should receive it by reference to avoid copying the data.

5. Use prefix increment: When the result of the increment operation is not used, prefix increment is faster.

Optimized Code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pair<int, pii>> vpii;

const int MAX = 2e5;
int n, m, u, q, v, w, k, par[MAX], sz[MAX], PS[MAX];
vpii e;

int root(int x) { return par[x] = (par[x] == x ? x : root(par[x])); }

int mrg(int x, int y) {
  int tmp;
  x = root(x), y = root(y);
  if (x == y)
    return 0;
  if (sz[x] < sz[y])
    swap(x, y);
  par[y] = x, tmp = sz[x] * sz[y], sz[x] += sz[y];
  return tmp;
}

void dsu() {
  for (int i = 0; i < n - 1; ++i)
    PS[e[i].first] += mrg(e[i].second.first, e[i].second.second);
  for (int i = 1; i <= MAX; ++i)
    PS[i] += PS[i - 1];
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cin >> n >> m;
  for (int i = 0; i < n - 1; ++i) {
    cin >> u >> v >> w;
    e.push_back({w, {u, v}});
  }
  sort(e.begin(), e.end());
  for (int i = 1; i <= n; ++i)
    par[i] = i, sz[i] = 1;
  dsu();
  while (m--) {
    cin >> q;
    cout << PS[q] << ' ';
  }

  return 0;
}
```

This optimized code should have similar performance to the original code. However, it would be more maintainable and easier to understand.