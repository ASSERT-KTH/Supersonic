Here are the steps to optimize the above code:

1. Remove the `#include <bits/stdc++.h>` directive. It is not recommended to include this header file as it includes a large number of standard C++ libraries, slowing down the compile time. Instead, only include the libraries that are being used in the code.
   
2. Remove `#define pb push_back`, `#define F first`, `#define S second`, `#define gcd __gcd`. These macros are not used in the code.

3. Remove `typedef pair<int, int> pii;`, `typedef vector<int> vi;`, `typedef map<int, int> mi;` these are not used in the code.

4. `using namespace std;` It's not recommended to use this in the global scope in a large program as it can cause name conflicts. However, in this case, it's a small program and it doesn't seem like there would be any conflicts.

5. `int root(int x) { return par[x] = (par[x] == x ? x : root(par[x])); }` This function can be optimized by using path compression in Disjoint Set Union (DSU). This technique flattens the structure of the tree whenever the root() function is called.

6. `void dsu() { for (int i = 0; i < n - 1; i++) PS[e[i].F] += mrg(e[i].S.F, e[i].S.S);  for (int i = 1; i <= MAX; i++) PS[i] += PS[i - 1]; }` This function can be optimized by using a range check for i in the second loop as the value of n is not necessarily equal to MAX. In this way, we avoid unnecessary iterations.

7. In the main() function, `sort(e.begin(), e.end());` sort the vector e based on the weight of the edges. Instead of sorting the entire vector, we can sort only the required elements, i.e., `sort(e.begin(), e.begin()+n-1);`. This will reduce the time complexity from O(n log n) to O(k log k) where k = n-1.

8. `while (m--) { cin >> q; cout << PS[q] << ' '; }` Instead of reading and writing in each iteration, we can store all the queries in a vector and then execute them. This reduces the IO time.

Here is the optimized code:

```
#include <iostream>
#include <vector>
#include <algorithm>

#define int long long
const int MAX = 2e5;
int n, m, u, q, v, w, k, par[MAX], sz[MAX], PS[MAX];
std::vector<std::pair<int, std::pair<int, int>>> e;

int root(int x) {
    if (par[x] != x) {
        par[x] = root(par[x]);
    }
    return par[x];
}

int mrg(int x, int y) {
    int tmp;
    x = root(x), y = root(y);
    if (x == y)
        return 0;
    if (sz[x] < sz[y])
        std::swap(x, y);
    par[y] = x, tmp = sz[x] * sz[y], sz[x] += sz[y];
    return tmp;
}

void dsu() {
    for (int i = 0; i < n - 1; i++)
        PS[e[i].first] += mrg(e[i].second.first, e[i].second.second);
    for (int i = 1; i <= n; i++)
        PS[i] += PS[i - 1];
}

main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0);
    std::cout.tie(0);
    std::cin >> n >> m;
    for (int i = 0; i < n - 1; i++) {
        std::cin >> u >> v >> w;
        e.push_back({w, {u, v}});
    }
    std::sort(e.begin(), e.begin()+n-1);
    for (int i = 1; i <= n; i++)
        par[i] = i, sz[i] = 1;
    dsu();
    std::vector<int> queries;
    while (m--) {
        std::cin >> q;
        queries.push_back(q);
    }
    for (const auto &query : queries) {
        std::cout << PS[query] << ' ';
    }
}
```