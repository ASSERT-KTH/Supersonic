#include <iostream>
#include <vector>
#include <algorithm>
#include <array>
#include <utility>

using namespace std;
using pii = pair<int, int>;
using vi = vector<int>;
using mi = map<int, int>;
const int MAX = 2e5;

int root(int x, array<int, MAX>& par) { return par[x] = (par[x] == x ? x : root(par[x], par)); }

int mrg(int x, int y, array<int, MAX>& par, array<int, MAX>& sz) {
    int tmp;
    x = root(x, par), y = root(y, par);
    if (x == y)
        return 0;
    if (sz[x] < sz[y])
        swap(x, y);
    par[y] = x, tmp = sz[x] * sz[y], sz[x] += sz[y];
    return tmp;
}

void dsu(int n, array<int, MAX>& par, array<int, MAX>& sz, array<int, MAX>& PS, vector<pair<int, pii>>& e) {
    for (int i = 0; i < n - 1; i++)
        PS[e[i].first] += mrg(e[i].second.first, e[i].second.second, par, sz);
    for (int i = 1; i <= MAX; i++)
        PS[i] += PS[i - 1];
}

int main() {
    int n, m, u, v, w, q;
    array<int, MAX> par, sz, PS;
    vector<pair<int, pii>> e;

    cin >> n >> m;
    for (int i = 0; i < n - 1; i++) {
        cin >> u >> v >> w;
        e.push_back({w, {u, v}});
    }
    sort(e.begin(), e.end());
    for (int i = 1; i <= n; i++)
        par[i] = i, sz[i] = 1;
    dsu(n, par, sz, PS, e);
    while (m--) {
        cin >> q;
        cout << PS[q] << ' ';
    }
    return 0;
}