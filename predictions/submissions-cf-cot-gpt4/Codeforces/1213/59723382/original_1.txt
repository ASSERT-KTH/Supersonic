The optimization steps include:

1. Removing the `#include <bits/stdc++.h>` as it includes a lot of unnecessary libraries, which increases the compile time. Instead, we can include only the libraries that are used in the program.
2. Removing the `using namespace std;` statement. It is a bad practice to use it in a larger program as it can cause name conflicts.
3. Removing the `ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);` lines. These lines make input/output operations faster by decoupling `cin`/`cout` from `scanf`/`printf`. However, in this program, only cin/cout are used, so these lines are unnecessary.
4. The array `v` is only used inside the while loop, so we can declare it inside the loop to free up memory when it's not used.
5. `long long _d = (d + d) % 10;` operation can be moved inside the while loop because it only needs to be calculated once inside the loop.
6. We can reduce the number of times `v[i][d]` is accessed by storing its value in a variable.

Here is the optimized program:

```cpp
#include <iostream>
#define TASK "C"

int main() {
#ifndef ONLINE_JUDGE
  freopen(TASK ".inp", "r", stdin);
  freopen(TASK ".out", "w", stdout);
#endif
  int q;
  std::cin >> q;
  while (q--) {
    long long n, m;
    std::cin >> n >> m;
    long long k = n / m;
    long long d = m % 10;
    long long cnt = 1;
    int v[20][20];
    v[1][d] = d;
    long long _d;
    do {
      _d = (_d + d) % 10;
      ++cnt;
      v[cnt][d] = _d;
    } while (_d != d);
    long long o = 0;
    for (int i = 1; i <= cnt; ++i){
      int value = v[i][d];
      o += value;
    }
    long long res = (k / cnt) * o;
    for (int i = 1; i <= k % cnt; ++i){
      int value = v[i][d];
      res += value;
    }
    std::cout << res << '\n';
  }
  return 0;
}
```
