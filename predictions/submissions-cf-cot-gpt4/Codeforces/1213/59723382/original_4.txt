First, here are some general optimization steps that I considered:

1. Remove unnecessary `#include <bits/stdc++.h>`. This header file includes practically all C++ standard library headers which can slow down the compile time significantly. It's better to include only the necessary headers.

2. Remove `ios_base::sync_with_stdio(0);`, `cin.tie(0);`, and `cout.tie(0);`. These can slow down the execution time. They are used to untie cin and cout streams and to turn off synchronization with the C standard streams. But in this case, we are not using C standard streams at all. And since the program is not input/output heavy, the performance benefit of turning off synchronization can be negligible while it could potentially mess up the order of output. 

3. Use `constexpr` for `base` and `mod`. The `constexpr` keyword means that the value, or return value, is constant and, where possible, is computed at compile time. 

4. The array `v` is not required to be two-dimensional. It can be replaced by a one-dimensional array and this will save a lot of memory.

5. Move variable declaration closer to their use. This will make the code cleaner and easier for the compiler to optimize.

6. Remove unused variables `base` and `mod`.

Here is the optimized version of your C++ program:

```cpp
#include <iostream>
using namespace std;

int v[20];

int main() {
#ifndef ONLINE_JUDGE
#define TASK "C"
  freopen(TASK ".inp", "r", stdin);
  freopen(TASK ".out", "w", stdout);
#endif
  int q;
  cin >> q;
  while (q--) {
    long long n, m;
    cin >> n >> m;
    long long k = n / m;
    long long d = m % 10;
    long long cnt = 1;
    long long _d = (d + d) % 10;
    v[1] = d;
    while (_d != d) {
      ++cnt;
      v[cnt] = _d;
      _d = (_d + d) % 10;
    }
    long long o = 0;
    for (int i = 1; i <= cnt; ++i)
      o += v[i];
    long long res = (k / cnt) * o;
    for (int i = 1; i <= k % cnt; ++i)
      res += v[i];
    cout << res << '\n';
  }
  return 0;
}
```