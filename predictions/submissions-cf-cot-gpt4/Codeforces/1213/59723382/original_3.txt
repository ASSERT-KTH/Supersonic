The optimization can be achieved in the following ways:

1. Avoid unnecessary computation: The 2D array `v` is frequently recalculated for every query `q`, even when the input `m` is the same as before. This is unnecessary and inefficient. You can use a memoization technique to store previous results and avoid recalculating them.

2. Remove unnecessary IO operations: The `ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);` are not necessary in this case and can be removed. These are used when we want to sync the C++ standard streams with the C standard streams, but in this case, we are not using any C standard stream.

3. Avoid using the `bits/stdc++.h` header: This header file includes almost all standard libraries in C++ which makes the program slower and increases memory usage. Use specific header files based on your need. In this case, we only need `iostream`.

4. Use pre-increment: Pre-increment is generally faster than post-increment. Use `++i` instead of `i++`.

Let's make these changes to the code:

```cpp
#include <iostream>
using namespace std;

const long long base = 31;
const long long mod = 1e9 + 7;
int v[20][20];
int cnt[20] = {0};
long long o[20] = {0};

int main() {
#ifndef ONLINE_JUDGE
#define TASK "C"
  freopen(TASK ".inp", "r", stdin);
  freopen(TASK ".out", "w", stdout);
#endif
  int q;
  cin >> q;
  while (q--) {
    long long n, m;
    cin >> n >> m;
    long long k = n / m;
    long long d = m % 10;
    if (cnt[d] == 0) {
      long long _d = (d + d) % 10;
      v[1][d] = d;
      while (_d != d) {
        v[++cnt[d]][d] = _d;
        _d = (_d + d) % 10;
      }
      for (int i = 1; i <= cnt[d]; ++i)
        o[d] += v[i][d];
    }
    long long res = (k / cnt[d]) * o[d];
    for (int i = 1; i <= k % cnt[d]; ++i)
      res += v[i][d];
    cout << res << '\n';
  }
  return 0;
}
```