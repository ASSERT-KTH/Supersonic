Optimization Steps:

1. Remove `#include <bits/stdc++.h>`: This header file includes a lot of unnecessary header files, which increases the compilation time. Replace it with the specific header files that are needed.

2. Remove `using namespace std;`: This line can cause naming conflicts in larger programs. It's better to use `std::` prefix for the functions and objects in the `std` namespace.

3. Make constants `constexpr`: `base` and `mod` are constants and should be declared as `constexpr` for better optimization by the compiler.

4. Reduce scope of variables: Variables `q`, `n`, `m`, `k`, `d`, `cnt`, `_d`, `o`, `res` are only used inside the main loop. They should be declared inside the loop to reduce their scope and make the program more readable.

5. Use prefix increment (++i) instead of postfix increment (i++): In loops, use of prefix increment is more efficient than postfix increment as it avoids unnecessary temporary object creation.

6. Use '\n' instead of `std::endl`: `std::endl` causes the buffer to flush which can slow down the program. Instead, use '\n'.

After these optimizations, here's the optimized code:

```cpp
#include <iostream>
#include <cstdio>

constexpr long long base = 31;
constexpr long long mod = 1e9 + 7;
int v[20][20];

int main() {
#ifndef ONLINE_JUDGE
#define TASK "C"
  freopen(TASK ".inp", "r", stdin);
  freopen(TASK ".out", "w", stdout);
#endif
  std::ios_base::sync_with_stdio(0);
  std::cin.tie(0);
  std::cout.tie(0);

  int q;
  std::cin >> q;
  while (q--) {
    long long n, m;
    std::cin >> n >> m;
    long long k = n / m;
    long long d = m % 10;
    long long cnt = 1;
    long long _d = (d + d) % 10;
    v[1][d] = d;
    while (_d != d) {
      ++cnt;
      v[cnt][d] = _d;
      _d = (_d + d) % 10;
    }
    long long o = 0;
    for (int i = 1; i <= cnt; ++i)
      o += v[i][d];
    long long res = (k / cnt) * o;
    for (int i = 1; i <= k % cnt; ++i)
      res += v[i][d];
    std::cout << res << '\n';
  }
  return 0;
}
```
Please note: These are general practices for optimizing and improving the readability of C++ code. The actual performance gain might vary depending on the compiler and system the code is run on. Also, specific performance optimization strategies might be needed for specific use-cases.