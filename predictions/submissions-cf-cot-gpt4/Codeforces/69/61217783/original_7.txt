The given C++ program reads a number `n` from the user, then it reads `n` sets of three numbers each. It sums the numbers in each set separately. At the end, it checks if all three sums are zero, and outputs "YES" if they are, and "NO" otherwise.

The original code is efficient in terms of time complexity because it performs operations in O(n) time. However, it can be optimized in terms of memory usage by not storing the intermediate sums of x, y, and z. Instead, we can directly add the input values to the sum variables.

Also, we can optimize the program by avoiding multiple `cout` statements and instead using a ternary operator to decide what to print. This reduces the number of branches in the program and improves readability.

Here's your optimized program:

```c++
#include <iostream>
using namespace std;
int main() {
  int n, x, y, z;
  int sum_x = 0, sum_y = 0, sum_z = 0;
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> x >> y >> z;
    sum_x += x;
    sum_y += y;
    sum_z += z;
  }
  cout << ((sum_x == 0 && sum_y == 0 && sum_z == 0) ? "YES" : "NO");
  return 0;
}
```

This version of the program behaves exactly the same way as the original, but it uses less memory and has less branching.