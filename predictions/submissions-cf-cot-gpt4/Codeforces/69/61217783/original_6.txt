The given C++ program is already quite efficient, but there are a few micro-optimizations that can be applied:

1. Input/Output Stream Optimization:
The line "cin >> n;" can be slow if we are reading a lot of inputs because by default in C++, the synchronization of all the C++ standard streams with their corresponding C standard streams is turned on at the start of the program execution, which results in slowing down the process of input/output operations. This extra overhead can be avoided by using "std::ios_base::sync_with_stdio(false);".

2. Avoid Repeated Function Calls:
The expressions "sum_x == 0", "sum_y == 0", and "sum_z == 0" are repeatedly checked in the if condition. If the values of sum_x, sum_y, and sum_z are large, these comparisons can take a substantial amount of time. We can avoid this by checking their sum once and storing the result in a variable. 

3. Fast Output:
If we are writing a lot of outputs, we can use "\n" instead of endl to avoid the unnecessary flushing of the buffer which is done by endl.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n;
  cin >> n;
  int sum_x = 0, sum_y = 0, sum_z = 0;
  for (int i = 0; i < n; i++) {
    int x, y, z;
    cin >> x >> y >> z;
    sum_x += x;
    sum_y += y;
    sum_z += z;
  }
  int total_sum = sum_x + sum_y + sum_z;
  if (total_sum == 0) {
    cout << "YES" << "\n";
  } else {
    cout << "NO" << "\n";
  }
  return 0;
}
```
Please note these are micro-optimizations, and these will not have a noticeable effect on small inputs. These are typically useful when dealing with large inputs where the time complexity of the program is a concern.