The given C++ program is already fairly optimal in terms of time and space complexity. However, one small optimization can be made to stop the loop as soon as we know the sum won't be zero. This will not change the worst-case scenario but will potentially save some computations in the average case.

Optimization Steps:

1. As soon as the sum of x, y, and z is not zero, there is no need to continue with the loop, because the final result will be "NO" no matter what. So, we can break the loop as soon as the sum of x, y, or z is non-zero.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;
int main() {
  int n;
  cin >> n;
  int sum_x = 0, sum_y = 0, sum_z = 0;
  for (int i = 0; i < n; i++) {
    int x, y, z;
    cin >> x >> y >> z;
    sum_x += x;
    sum_y += y;
    sum_z += z;
    if (sum_x != 0 || sum_y != 0 || sum_z != 0) {
      cout << "NO";
      return 0;
    }
  }
  cout << "YES";
  return 0;
}
```
Please note that this optimization assumes that the input values for x, y, and z can be trusted to be correct. If there is a chance that the input could be faulty and further error checking is needed, this optimization may not be suitable.