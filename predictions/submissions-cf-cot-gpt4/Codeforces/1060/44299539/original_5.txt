The optimization can be done in two steps:

1. Pre-computation of minimum sums: Currently, in the inner while loop, the minimum sums for arrays 'n' and 'm' are being calculated with the help of nested loops. This is inefficient and can be improved by pre-computing the minimum sums before entering the while loop.

2. Replacing division operation with shift operation: The division operation is more expensive than the shift operation. Thus, replacing the division operation with the equivalent shift operation can improve the efficiency of the program.

Here's the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
long long n[2001], m[2001], min_n[2001], min_m[2001];

int main() {
  long long s_n, s_m, t, N, M, x, min_n = 1, max_n, mid_n, min_m = 1, max_m,
                                  mid_m, ans = 0, col;
  cin >> N >> M;
  max_n = N;
  
  for (long long i = 1; i <= N; i++) {
    cin >> t;
    n[i] = t + n[i - 1];
    min_n[i] = min(n[i], min_n[i-1]);
  }
  
  for (long long j = 1; j <= M; j++) {
    cin >> t;
    m[j] = t + m[j - 1];
    min_m[j] = min(m[j], min_m[j-1]);
  }
  
  cin >> x;
  
  for (int n_i = 1; n_i <= N; n_i++) {
    min_m = 1;
    max_m = M;
    while (min_m <= max_m) {
      mid_m = (min_m + max_m) >> 1; // Replaces division with shift operation
      s_n = min_n[n_i];
      s_m = min_m[mid_m];
      if (s_m * s_n <= x) {
        ans = max(ans, mid_m * n_i);
        min_m = mid_m + 1;
      } else
        max_m = mid_m - 1;
    }
  }
  
  cout << ans;
  
  return 0;
}
```

Please note that the above program will only work if the arrays 'n' and 'm' are sorted in ascending order.