Optimization steps:

1. Remove `#include <bits/stdc++.h>`: Including this header file is not considered a good practice as it includes a lot of unnecessary things which increase compilation time.

2. Replace `bits/stdc++.h` with necessary header files such as `iostream` and `algorithm`.

3. Global variables: Avoid using global variables if they are not necessary. However, in this case, `n` and `m` arrays are needed globally, so we can't change that. 

4. Calculate `s_n` outside the inner loop: The `s_n` value is calculated for each iteration of the `mid_m` loop, which is unnecessary. We can calculate it once for each `n_i` and save a lot of computation.

5. Use prefix sum: Use prefix sum technique to optimize the process of calculating `s_n` and `s_m`.

Here is the optimized code:

```cpp
#include <iostream>
#include <algorithm>
using namespace std;

long long n[2001], m[2001];

int main() {
  long long s_n, s_m, t, N, M, x, min_n = 1, max_n, mid_n, min_m = 1, max_m,
                                  mid_m, ans = 0, col;
  cin >> N >> M;
  max_n = N;
  for (long long i = 1; i <= N; i++) {
    cin >> t;
    n[i] = t + n[i - 1];
  }
  for (long long j = 1; j <= M; j++) {
    cin >> t;
    m[j] = t + m[j - 1];
  }
  cin >> x;
  for (int n_i = 1; n_i <= N; n_i++) {
    min_m = 1;
    max_m = M;
    s_n = 10e10;
    for (int i = n_i; i <= N; i++)
      s_n = min(s_n, n[i] - n[i - n_i]);
    while (min_m <= max_m) {
      mid_m = (min_m + max_m) / 2;
      s_m = 10e10;
      for (int i = mid_m; i <= M; i++)
        s_m = min(s_m, m[i] - m[i - mid_m]);
      if (s_m * s_n <= x) {
        ans = max(ans, mid_m * n_i);
        min_m = mid_m + 1;
      } else
        max_m = mid_m - 1;
    }
  }
  cout << ans;
  return 0;
}
```
This code is optimized in terms of running time. For memory optimization, we need to consider other techniques as this code is already quite efficient in memory usage.