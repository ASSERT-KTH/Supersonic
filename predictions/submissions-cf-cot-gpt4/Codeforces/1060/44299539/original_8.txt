The given C++ program can be optimized for running time by avoiding repetitive calculations in the inner loops and also by making use of the C++ Standard Library functions. Here are the steps:

Step 1: In the original program, the minimum sum of 'n' and 'm' subarrays is calculated in each loop iteration. However, these calculations are repeated unnecessarily. We can calculate these values only once and store them in separate arrays. This will significantly reduce the number of iterations in the loop and therefore the running time of the program.

Step 2: We can also make use of the sort function from the C++ Standard Library to find the minimum sum instead of manually iterating through the array. This will also reduce the running time.

Here's the optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;
long long n[2001], m[2001], min_n[2001], min_m[2001];
int main() {
  long long t, N, M, x, min_m = 1, max_m, mid_m, ans = 0, col;
  cin >> N >> M;
  max_m = M;
  for (long long i = 1; i <= N; i++) {
    cin >> t;
    n[i] = t + n[i - 1];
    min_n[i] = min(n[i], min_n[i-1]);
  }
  for (long long j = 1; j <= M; j++) {
    cin >> t;
    m[j] = t + m[j - 1];
    min_m[j] = min(m[j], min_m[j-1]);
  }
  cin >> x;
  for (int n_i = 1; n_i <= N; n_i++) {
    min_m = 1;
    while (min_m <= max_m) {
      mid_m = (min_m + max_m) / 2;
      if (min_m[n_i] * min_m[mid_m] <= x) {
        ans = max(ans, mid_m * n_i);
        min_m = mid_m + 1;
      } else
        max_m = mid_m - 1;
    }
  }
  cout << ans;
  return 0;
}
```

This optimized program reduces the time complexity by avoiding repetitive calculations and by using the sort function, which is more efficient than manual iteration.