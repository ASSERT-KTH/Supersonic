The given program seems to be a graph computation with DFS (Depth-First Search). The main optimization that can be performed here is to avoid redundant computations. In the `answer()` function, the DFS is performed for every node irrespective of whether the node has been visited before or not. This results in redundant computation as the DFS is performed again for nodes that have been visited while calculating the answer for previous nodes.

We can avoid this redundancy by checking whether a node has been visited before performing DFS for that node. It can be done by checking whether `ans[i]` is greater than zero before calling the `answer(i)` function.

Here is the optimized version of the code:

```cpp
#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define ll long long
#define MOD 1000000007
using namespace std;
int n, m;
vector<int> graph[500001];
int ans[500001];
int num() {
  int res;
  cin >> res;
  return res;
}
int answer(int i) {
  if (ans[i] > 0)
    return ans[i];
  stack<int> s;
  s.push(i);
  vector<int> list;
  bitset<500001> bs;
  bs.set(i);
  while (!s.empty()) {
    int now = s.top();
    s.pop();
    list.pb(now);
    for (int next : graph[now])
      if (!bs[next]) {
        bs.set(next);
        s.push(next);
      }
  }
  int res = list.size();
  for (int next : list)
    ans[next] = res;
  return res;
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(NULL);
  cout.tie(NULL);
  n = num();
  m = num();
  for (int i = 0; i < m; i++) {
    int l = num() - 1;
    if (l < 0)
      continue;
    int a = num();
    while (l-- > 0) {
      int b = num();
      graph[a].pb(b);
      graph[b].pb(a);
      a = b;
    }
  }
  for (int i = 1; i <= n; i++)
    if (ans[i] <= 0) // Check whether the node has been visited before performing DFS
      cout << answer(i) << " ";
  cout << endl;
}
```

The key point here is to prevent redundant computation which can save both time and memory. The DFS is performed only once for each node and the result is stored in `ans[]` array which can be used whenever the result for that node is required. This is a form of `Memoization`, a technique used in dynamic programming to speed up computations by storing the results of expensive function calls and reusing them when same inputs occur again.