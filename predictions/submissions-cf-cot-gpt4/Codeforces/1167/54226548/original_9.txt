Here are some steps to optimize the given C/C++ program.

1. The first thing we can do to make the program run faster is to use faster input/output methods. The use of cin and cout is slower than scanf and printf. So, we can replace cin and cout with scanf and printf.

2. The num() function reads a number from the input and returns it. This function is unnecessary. We can directly use scanf to read the input in the main function. This will reduce the function call overhead.

3. We are using push_back to add elements to the vector. Instead of push_back, if we use emplace_back, it will be faster since emplace_back constructs the element in place and does not require a copy.

4. We are using bitset to keep track of visited nodes. A simple boolean array would suffice for this purpose and it will be faster.

Let's modify the code based on these optimizations.

```cpp
#include <cstdio>
#include <vector>
#include <stack>
#define em emplace_back
#define ll long long
#define MOD 1000000007
using namespace std;
int n, m;
vector<int> graph[500001];
int ans[500001];
bool visited[500001];

int answer(int i) {
  if (ans[i] > 0)
    return ans[i];
  stack<int> s;
  s.push(i);
  vector<int> list;
  visited[i] = true;
  while (!s.empty()) {
    int now = s.top();
    s.pop();
    list.em(now);
    for (int next : graph[now])
      if (!visited[next]) {
        visited[next] = true;
        s.push(next);
      }
  }
  int res = list.size();
  for (int next : list)
    ans[next] = res;
  return res;
}

int main() {
  scanf("%d %d", &n, &m);
  for (int i = 0; i < m; i++) {
    int l;
    scanf("%d", &l);
    l--;
    if (l < 0)
      continue;
    int a;
    scanf("%d", &a);
    while (l-- > 0) {
      int b;
      scanf("%d", &b);
      graph[a].em(b);
      graph[b].em(a);
      a = b;
    }
  }
  for (int i = 1; i <= n; i++)
    printf("%d ", answer(i));
  printf("\n");
}
```