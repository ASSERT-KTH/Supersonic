#include<iostream>
#include<vector>
#include<algorithm>
#include<iomanip>

using lli = long long int;
using vi = std::vector<int>;

double c, m, p, v;
lli nc, nm, nv, mx, mc;
std::vector<std::vector<double>> dp;

double getAns(lli cntC, lli cntM, double c, double m, double p, double v) {
    if (dp[cntC][cntM] != -1.0) return dp[cntC][cntM];
    if (c <= 1e-14 && m <= 1e-14) {
        return dp[cntC][cntM] = (double)(cntC + cntM + 1);
    }
    double temp = 0;
    if (c > 1e-14) {
        temp += c * getAns(cntC + 1, cntM, std::max(0.0, c - v), m + std::min(c, v) / 2, p + std::min(c, v) / 2, v);
    }
    if (m > 1e-14) {
        temp += m * getAns(cntC, cntM + 1, c + std::min(m, v) / 2, std::max(0.0, m - v), p + std::min(m, v) / 2, v);
    }
    temp += (cntC + cntM + 1) * p;
    return dp[cntC][cntM] = temp;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(NULL);
    int t;
    std::cin >> t;
    while (t--) {
        std::cin >> c >> m >> p >> v;
        nc = c * 10000;
        nm = m * 10000;
        nv = v * 10000;
        mx = (nc + nv - 1) / nv + (nc + nm + nv - 1) / nv + 1;
        mc = (nc + nm + nv - 1) / nv;
        dp = std::vector<std::vector<double>>(mx+1, std::vector<double>(mc+1, -1.0));
        std::cout << std::setprecision(15) << getAns(0, 0, c, m, p, v) << std::endl;
    }
    return 0;
}