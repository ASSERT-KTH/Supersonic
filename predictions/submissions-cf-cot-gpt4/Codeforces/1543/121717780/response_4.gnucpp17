#include <bits/stdc++.h>
#define present(container, element) (container.find(element) != container.end()
#define all(c) c.begin(), c.end()
#define lli long long int
#define vi vector<int>
#define cpresent(container, element) (find(all(container), element) != container.end())
#define tr(container, it) for (auto it = container.begin(); it != container.end(); it++)
using namespace std;

double c, m, p, v;
lli nc, nm, nv, mx, mc;
double dp[105][105][105];
double eps = 1e-14;

double getAns(lli cntC, lli cntM, double p) {
  if(dp[cntC][cntM][p] != -1) {
    return dp[cntC][cntM][p];
  }

  double temp = 0;
  if (cntC > 0 && cntM > 0) {
    temp += cntC * getAns(cntC - 1, cntM, p + min(cntC, v)) +
            cntM * getAns(cntC, cntM - 1, p + min(cntM, v)) +
            cntC + cntM + p;
  } else if (cntC > 0) {
    temp += cntC * getAns(cntC - 1, cntM, p + min(cntC, v)) + cntC + cntM + p;
  } else if (cntM > 0) {
    temp += cntM * getAns(cntC, cntM - 1, p + min(cntM, v)) + cntC + cntM + p;
  } else {
    temp = p;
  }

  dp[cntC][cntM][p] = temp;
  return temp;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    cin >> c >> m >> p >> v;
    nc = c * 10000;
    nm = m * 10000;
    nv = v * 10000;
    mx = (nc + nv - 1) / nv + (nc + nm + nv - 1) / nv + 1;
    mc = (nc + nm + nv - 1) / nv;
    memset(dp, -1, sizeof(dp));
    cout << setprecision(15) << getAns(nc, nm, nv) << endl;
  }
  return 0;
}