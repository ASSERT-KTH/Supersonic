The main opportunity for optimization in this code is memoization. The recursive function `getAns` is called multiple times with the same parameters, but the result of these calls is not stored. This means that the same calculations are performed over and over again, which is not efficient. By storing the results of the function calls in the `dp` array, we can avoid these repetitive calculations and significantly speed up the program.

Also, in the main function, the nested for-loop is used to initialize the `dp` array to `-1`. This can be optimized by using `std::fill` function from STL which is more efficient.

Here is the optimized version of the code:

```C++
#include <bits/stdc++.h>
#define present(container, element) (container.find(element) != container.end()
#define all(c) c.begin(), c.end()
#define lli long long int
#define vi vector<int>
#define cpresent(container, element)                                           \
  (find(all(container), element) != container.end())
#define tr(container, it)                                                      \
  for (auto it = container.begin(); it != container.end(); it++)
using namespace std;

double c, m, p, v;
lli nc, nm, nv, mx, mc;
double dp[1005][1005];
double eps = 1e-14;

double getAns(lli cntC, lli cntM, double c, double m, double p, double v) {
  if (dp[cntC][cntM] > -0.5) {
    return dp[cntC][cntM];
  }

  if (c <= eps && m <= eps) {
    return dp[cntC][cntM] = (double)(cntC + cntM + 1);
  }

  double temp = 0;
  if (c > eps && m > eps) {
    temp += c * getAns(cntC + 1, cntM, c - v, m + min(c / 2, v / 2),
                       p + min(c / 2, v / 2), v) +
            m * getAns(cntC, cntM + 1, c + min(m / 2, v / 2), m - v,
                       p + min(m / 2, v / 2), v) +
            (cntC + cntM + 1) * p;
  } else if (c > eps) {
    temp += c * getAns(cntC + 1, cntM, c - v, m, p + min(c, v), v) +
            (cntC + cntM + 1) * p;
  } else {
    temp += m * getAns(cntC, cntM + 1, c, m - v, p + min(m, v), v) +
            (cntC + cntM + 1) * p;
  }

  return dp[cntC][cntM] = temp;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;

  while (t--) {
    cin >> c >> m >> p >> v;
    nc = c * 10000;
    nm = m * 10000;
    nv = v * 10000;

    mx = (nc + nv - 1) / nv + (nc + nm + nv - 1) / nv + 1;
    mc = (nc + nm + nv - 1) / nv;

    fill(&dp[0][0], &dp[0][0] + sizeof(dp) / sizeof(dp[0][0]), -1);
    cout << setprecision(15) << getAns(0, 0, c, m, p, v) << endl;
  }

  return 0;
}
```
In the optimized version, a check is added at the beginning of the `getAns` function to see if the result of the function call is already stored in the `dp` array. If it is, the stored result is returned, otherwise the function proceeds as before. At the end of the function, the result is stored in the `dp` array before it is returned.

In the main function, the nested for-loop is replaced with a single call to `std::fill`. This function fills a range of elements with a certain value, in this case `-1`. The range is specified by two pointers, the first pointing to the beginning of the array and the second pointing to one past the end of the array. The `sizeof` operator is used to calculate the number of elements in the array.