#include <bits/stdc++.h>
#define present(container, element) (container.find(element) != container.end())
#define all(c) c.begin(), c.end()
#define lli long long int
#define vi vector<int>
#define cpresent(container, element)                                           \
  (find(all(container), element) != container.end())
#define tr(container, it)                                                      \
  for (auto it = container.begin(); it != container.end(); it++)
using namespace std;
double c, m, p, v;
lli mx, mc;
double dp[1005][1005];
double eps = 1e-14;
double getAns(lli cntC, lli cntM) {
  if (c <= eps && m <= eps) {
    return (double)(cntC + cntM + 1);
  }
  if(dp[cntC][cntM] != -1){
    return dp[cntC][cntM];
  }
  double temp = 0;
  if (c > eps && m > eps) {
    temp += c * getAns(cntC + 1, cntM) +
            m * getAns(cntC, cntM + 1) +
            (cntC + cntM + 1) * p;
  } else if (c > eps) {
    temp += c * getAns(cntC + 1, cntM) +
            (cntC + cntM + 1) * p;
  } else {
    temp += m * getAns(cntC, cntM + 1) +
            (cntC + cntM + 1) * p;
  }
  dp[cntC][cntM] = temp;
  return temp;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    cin >> c >> m >> p >> v;
    mx = (c + v - 1) / v + (c + m + v - 1) / v + 1;
    mc = (c + m + v - 1) / v;
    for (int i = 0; i < mx; i++) {
      for (int j = 0; j < mc; j++) {
        dp[i][j] = -1;
      }
    }
    cout << setprecision(15) << getAns(0, 0) << endl;
  }
  return 0;
}