#include <bits/stdc++.h>
using namespace std;
double c, m, p, v;
double dp[1005][1005];
double eps = 1e-14;

double getAns(int cntC, int cntM, double c, double m, double p, double v) {
  if (c <= eps && m <= eps) {
    return (double)(cntC + cntM + 1);
  }
  
  // Check if the result is already computed
  if (dp[cntC][cntM] > -0.5) {
    return dp[cntC][cntM];
  }

  double temp = 0;
  if (c > eps && m > eps) {
    temp += c * getAns(cntC + 1, cntM, max(0.0, c - v), m + min(c / 2, v / 2),
                       p + min(c / 2, v / 2), v) +
            m * getAns(cntC, cntM + 1, c + min(m / 2, v / 2), max(0.0, m - v),
                       p + min(m / 2, v / 2), v) +
            (cntC + cntM + 1) * p;
  } else if (c > eps) {
    temp += c * getAns(cntC + 1, cntM, max(0.0, c - v), m, p + min(c, v), v) +
            (cntC + cntM + 1) * p;
  } else {
    temp += m * getAns(cntC, cntM + 1, c, m - v, p + min(m, v), v) +
            (cntC + cntM + 1) * p;
  }
  
  // Store the result
  dp[cntC][cntM] = temp;
  return temp;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    cin >> c >> m >> p >> v;
    // Initialize the dp array with -1
    memset(dp, -1, sizeof(dp));
    cout << setprecision(15) << getAns(0, 0, c, m, p, v) << endl;
  }
  return 0;
}