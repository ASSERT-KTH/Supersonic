Here are some optimization steps:

1. Include only necessary headers: The program includes `<bits/stdc++.h>`. This header file includes almost all standard C++ libraries, which increases the compilation time. You should include only those libraries that are actually needed by your program.

2. Avoid Macros: The use of macros can make the code harder to read and debug. Instead of using macros, consider using inline functions, constants, and typedefs.

3. Use C++ Standard bool literals: Instead of `or` and `and`, use `||` and `&&` as they are the standard bool literals in C++.

4. Avoid using modulo operation: The modulo operation is computationally expensive. In the function `pow`, you are using the modulo operation at each step of the calculation, which could be optimized.

5. Use bitwise operators: In the prime function, the division operation can be replaced by a bitwise shift operator to improve performance.

6. Use '\n' instead of `std::endl`: The `std::endl` not only inserts a newline, but also flushes the output stream, which is more time-consuming.

Here is the optimized program:

```cpp
#include <iostream>
#include <algorithm>
using namespace std;
typedef long long ll;

const int mod = 1e9 + 7;

ll pow(ll x, ll n) {
  ll result = 1;
  while (n != 0) {
    if ((n & 1) == 1) {
      result = (result * x) % mod;
    }
    x = (x * x) % mod;
    n >>= 1;
  }
  return result;
}

int prime(int x) {
  int res = 0, i;
  for (i = 2; i * i <= x; i++) {
    while (x % i == 0) {
      x >>= i;
      res++;
    }
  }
  if (x > 1)
    res++;
  return res;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  int N;
  cin >> N;
  while (N--) {
    ll a, b;
    cin >> a >> b;
    if (a == 0 || b == 0) {
      cout << max(a, b) << ' ' << 0 << '\n';
      continue;
    }
    if (a == b && a != 0) {
      cout << 0 << ' ' << 0 << '\n';
      continue;
    }
    if (b > a)
      swap(a, b);
    cout << a - b << ' ' << min(a % (a - b), a - b - a % (a - b)) << '\n';
  }
  return 0;
}
```
