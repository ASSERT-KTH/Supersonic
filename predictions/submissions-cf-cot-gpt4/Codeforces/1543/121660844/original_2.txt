The optimization steps are as follows:

1. We can remove `#define ll long long`,  `#define eb emplace_back`, `#define pb push_back`, `#define ff first`, `#define ss second`, `#define gcd __gcd`, `#define fast ios::sync_with_stdio(0); cin.tie(0);` and `const int mod = 1e9 + 7;` as they are not used anywhere in the code.

2. The functions `int pow(ll x, ll n)` and `int prime(int x)` are also not used in the code and can be removed.

3. The I/O can be sped up by removing synchronization with the standard C I/O functions. We can achieve this by including `std::ios_base::sync_with_stdio(false);` in the main function.

4. `'\n'` is faster than `endl` because `endl` causes a flush operation, which can be a costly operation in terms of time. The code already uses `'\n'`, so no changes are needed in this regard.

5. We can avoid the use of `std::max` and `std::min` functions as they add function call overhead. Since these operations are simple, we can use ternary operations to get the maximum or minimum of two numbers.

6. The `swap(a, b);` operation can be avoided by directly performing the operations in the `cout` statement. This will save some time and memory as swapping involves temporary storage and multiple assignment operations.

Here is the optimized code:

```cpp
#include <iostream>

using namespace std;

int main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(0);
  
  int N;
  cin >> N;
  
  while (N--) {
    long long a, b;
    cin >> a >> b;
    
    if (a == 0 or b == 0) {
      cout << (a > b ? a : b) << ' ' << 0 << '\n';
      continue;
    }
    if (a == b) {
      cout << 0 << ' ' << 0 << '\n';
      continue;
    }
    long long high = a > b ? a : b;
    long long low = a < b ? a : b;
    long long diff = high - low;
    cout << diff << ' ' << ((high % diff) < (diff - high % diff) ? high % diff : diff - high % diff) << '\n';
  }
  return 0;
}
```