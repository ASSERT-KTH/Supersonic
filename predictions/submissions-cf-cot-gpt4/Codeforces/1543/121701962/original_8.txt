This program is already quite optimized but there are a few changes that can be made to improve it slightly.

1. Remove unused macros, functions, and libraries: Unused code increases the size of the compiled binary and can sometimes slow down compilation. In this case, the libraries `#define fr first`, `#define sc second`, `#define pb push_back`, `#define ppb pop_back`, `#define all(x) (x).begin(), (x).end()`, `#define rall(x) (x).rbegin(), (x).rend()`, `repb` loop and `gcd` function are not used and can be removed.

2. Avoid using Variable-Length Arrays (VLA): The size of arrays in C++ should be known at compile time. Using Variable-Length Arrays where the size is determined at runtime can lead to unpredictable behavior and is not recommended. Instead, we can use `std::vector<int>` which automatically manages memory.

3. Avoid unnecessary condition checking: The `if` conditions used to decide which computation to perform can be simplified. The `if (sum % n == 0)` check is unnecessary because the same condition is checked again in the `else if (!x)` block. We can rearrange the conditions to avoid this.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;
#define int long long
#define rep(i, start, end) for (int i = start; i < end; i++)
const int mod = 1e9 + 7;

void solve() {
  int n, sum = 0;
  cin >> n;
  vector<int> a(n);
  rep(i, 0, n) {
    cin >> a[i];
    sum += a[i];
  }
  
  if (sum < n) {
    cout << sum * (n - sum) << endl;
  } else {
    int x = sum % n;
    if (x != 0)
      cout << x * (n - x) << endl;
    else
      cout << 0 << endl;
  }
}

signed main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  int t = 1;
  cin >> t;
  while (t--)
    solve();
  return 0;
}
```

This optimized code should run faster and use less memory than the original program.