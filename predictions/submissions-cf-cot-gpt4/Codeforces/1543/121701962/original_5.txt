Here are the steps to optimize the provided C++ code:

1. Avoid using `#include <bits/stdc++.h>` because it includes all the standard library headers which increases compilation time. Instead, only include the headers that are needed.

2. Replace `#define int long long` with a typedef which is more C++ style and less error-prone.

3. The vector `vi` and operations `pb` and `ppb` are not used in the code, so they can be removed.

4. The function `gcd` is not used in the code, so it can be removed.

5. The `avg` variable is declared but not used, so it can be removed.

6. The use of `x` to store the result of `sum % n == 0` seems unnecessary. We can directly use this condition in the `if` statement.

7. Dynamic array allocation with `int a[n];` is not standard in C++. Use `std::vector<int>` instead.

8. `ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);` are used to speed up cin and cout, but in this case, it's unnecessary as we're not doing heavy I/O operations.

Here's the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

typedef long long ll;

const ll mod = 1e9 + 7;

void solve() {
  ll n, sum = 0;
  cin >> n;
  vector<ll> a(n);
  for (ll i = 0; i < n; i++) {
    cin >> a[i];
    sum += a[i];
  }
  if (sum < n) {
    cout << sum * (n - sum) << endl;
  } else if (sum % n == 0) {
    cout << 0 << endl;
  } else {
    ll x = sum % n;
    cout << x * (n - x) << endl;
  }
}

int main() {
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  ll t = 1;
  cin >> t;
  while (t--)
    solve();
  return 0;
}
```