Optimization Steps:

1. Use "std::ios_base::sync_with_stdio(false);" instead of "ios::sync_with_stdio(0);" to disable the synchronization of all the C++ standard streams with their corresponding C standard streams. The standard streams are not thread-safe in C++, so disabling synchronization can result in faster I/O operations.

2. Replace vector<int> with array<int> for memory efficiency. However, this code doesn't use vectors, so we can ignore this step for this problem.

3. We can use "mod" operator once instead of twice to calculate sum % n.

4. The condition "if (sum < n)" can be removed because if sum is less than n, then sum % n will be equal to sum and the else condition will handle the logic.

5. Use "\n" instead of "endl". The "endl" manipulator writes a newline and then flushes the stream. But if you don't need to flush the stream, you can get a little performance gain by just writing '\n'.

Here's the optimized code:
```cpp
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define fr first
#define sc second
#define rep(i, start, end) for (int i = start; i < end; i++)
#define repb(i, start, end) for (int i = start; i >= end; i--)
const int mod = 1e9 + 7;
int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b); }
void solve() {
  int n, sum = 0;
  cin >> n;
  int a[n];
  rep(i, 0, n) {
    cin >> a[i];
    sum += a[i];
  }
  int x = sum % n;
  if (x == 0) {
    cout << 0 << "\n";
  } else {
    cout << x * (n - x) << "\n";
  }
}
signed main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  int t = 1;
  cin >> t;
  while (t--)
    solve();
  return 0;
}
```
