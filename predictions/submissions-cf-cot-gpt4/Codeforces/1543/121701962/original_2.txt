Here are some optimizations we can make:

1. Avoid Dynamic Array: The statement `int a[n];` creates a dynamic array which is not allowed in C++ standards. It can slow down the program and can be a potential cause for a crash. We can use `std::vector<int>` to solve this problem. Also, using vector will automatically manage the memory for us.

2. Avoid Redundant Checks: The program checks `if (sum % n == 0)` to set the value of `x`, and later checks the value of `x` twice to decide which operation to perform. We can simplify this by directly checking `if (sum % n == 0)` and `if (sum < n)` in the decision-making part of the code. This will eliminate the need for the boolean variable `x`.

3. Use std::ios_base::sync_with_stdio(false): This can speed up the I/O operations. It disables the synchronization between the C and C++ standard streams. By default, it provides unnecessary overhead. In competitive programming, where large inputs/outputs are involved, it can be helpful to gain some speed.

4. Precompute `sum % n`: We are computing `sum % n` twice, we can avoid this by precomputing it and storing it in a variable.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define all(x) (x).begin(), (x).end()
#define rep(i, start, end) for (int i = start; i < end; i++)
const int mod = 1e9 + 7;
int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b); }
void solve() {
  int n, sum = 0;
  cin >> n;
  vector<int> a(n);
  rep(i, 0, n) {
    cin >> a[i];
    sum += a[i];
  }
  if (sum < n) {
    cout << sum * (n - sum) << endl;
  } else if (sum % n == 0) {
    cout << 0 << endl;
  } else {
    int x = sum % n;
    cout << x * (n - x) << endl;
  }
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  int t = 1;
  cin >> t;
  while (t--)
    solve();
  return 0;
}
```
Note: Including `<bits/stdc++.h>` is discouraged as it includes a lot of unnecessary headers, which can slow down the compilation time. It's better to include only the headers that are actually used. But in competitive programming, it's commonly used for the sake of convenience.