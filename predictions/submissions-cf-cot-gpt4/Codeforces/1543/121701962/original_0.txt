Here are the steps for optimization:

1. Remove the #include <bits/stdc++.h>. It includes a lot of unnecessary libraries and can slow down the compilation time. Instead, include only the necessary libraries.

2. Replace the macros like '#define int long long' with typedef or using keyword which is a better practice in C++. Also, replace other macros with inline functions where possible.

3. The array 'a' is created for every function call of 'solve'. Instead, we can create a global array once and reuse it. This will save time for memory allocation.

4. The program checks if 'sum' is divisible by 'n' twice. We can store this result and use it to avoid calculating it twice.

5. In the if-else construct, there is no need to check '!x' because if the program execution reaches this stage, then 'x' is definitely false.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

typedef long long ll;
const int MAXN = 2e5 + 5;
ll a[MAXN]; // global array
const ll mod = 1e9 + 7;

inline ll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }

void solve() {
  ll n, sum = 0;
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    sum += a[i];
  }
  bool isDivisible = sum % n == 0;
  if (sum < n) {
    cout << sum * (n - sum) << endl;
  } else if (isDivisible) {
    cout << 0 << endl;
  } else {
    ll remainder = sum % n;
    cout << remainder * (n - remainder) << endl;
  }
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  int t = 1;
  cin >> t;
  while (t--)
    solve();
  return 0;
}
```

The optimized code is more efficient in terms of both time and memory.