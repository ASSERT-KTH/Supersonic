Optimization Steps:

1. Avoid using `#include <bits/stdc++.h>` because this header file includes quite a lot of headers, some of which you may not need, thus increasing the compilation time.
2. Replace `#define int long long` with `typedef long long int ll`. This is more idiomatic and less prone to errors. Also, it's good practice to use specific types such as `int64_t` or `int32_t` from the `<cstdint>` header, which are guaranteed to be the same size on all platforms.
3. Avoid using `#define` for simple functions. Instead, use inline functions or lambdas for better type safety and readability.
4. Avoid using `#define` for loops. Instead, use normal for loops or range-based for loops that are easier to understand and debug.
5. The variable `avg` is declared but never used; it can be removed.
6. The boolean variable `x` can be replaced by the condition `sum % n` for simplicity.
7. The gcd function is unused and can be removed.
8. Dynamic allocation of the array `a` can be replaced by a vector for better memory management.

Now, let's rewrite the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <cstdint>

using namespace std;

typedef long long int ll;

void solve() {
    ll n, sum = 0;
    cin >> n;
    vector<ll> a(n);
    
    for(ll &val : a) {
        cin >> val;
        sum += val;
    }
    
    if(sum < n) {
        cout << sum * (n - sum) << "\n";
    } else if(sum % n == 0) {
        cout << 0 << "\n";
    } else {
        ll x = sum % n;
        cout << x * (n - x) << "\n";
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    ll t = 1;
    cin >> t;
    while(t--) {
        solve();
    }

    return 0;
}
```

Note: Always remember that optimizing code for running time and memory usage usually comes at the cost of readability and maintainability. Therefore, such optimizations should be done keeping the trade-off in mind.