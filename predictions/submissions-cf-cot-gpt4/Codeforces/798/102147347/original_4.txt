Optimization can be done in the following ways:

1. Replace the gcd() function with a more efficient version: The gcd() function uses subtraction which is inefficient. We can replace it with a version that uses modulo operation, which is faster.

2. Avoid repetitive calculations: In the main loop, there are multiple instances where the same calculation is done multiple times. We can store the result of these calculations in variables to avoid redoing them.

3. Reduce the size of the dp array: The dp array has a fixed size of 200,000. This is wasteful if n is much smaller than this. We can instead create the dp array with size n+3 to save memory.

4. Avoid unnecessary checks: There are multiple checks if dp[i - 1][0] or dp[i - 1][1] is not equal to inf. We can avoid this by initializing dp[i][0] and dp[i][1] to dp[i - 1][0] and dp[i - 1][1] respectively.

5. Use bitwise operations: The code uses the modulo operation to check if a number is even or odd. A faster way to do this is to use bitwise AND with 1.

Here is the optimized code:

```c++
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define rep(i, n) for (long long(i) = 0; (i) < (n); ++(i))
#define ref(i, a, b) for (long long(i) = (a); (i) <= (b); ++(i))
#define endl '\n'
#define st first
#define nd second
#define pb push_back
#define mp make_pair
const int mx = 2e6 + 5;
int inf = 2e9;
int gcd(int a, int b) {
  while (b != 0) {
    int temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  ll n;
  cin >> n;
  vector<int> a(n + 3);
  rep(i, n) { cin >> a[i + 1]; }
  int faust = gcd(a[1], a[2]);
  ref(i, 3, n) { faust = gcd(faust, a[i]); }
  a[n + 1] = 2;
  vector<vector<int>> dp(n + 3, vector<int>(2, inf));
  dp[0][0] = 0;
  if (faust > 1) {
    cout << "YES" << endl;
    cout << 0 << endl;
    return 0;
  }
  ref(i, 1, n) {
    bool ai_odd = a[i] & 1;
    bool ai1_odd = a[i + 1] & 1;
    dp[i][0] = min(dp[i - 1][0], dp[i - 1][1]);
    dp[i][1] = inf;
    if (ai_odd && ai1_odd) {
      dp[i][1] = dp[i - 1][0] + 1;
    } else if (ai_odd && !ai1_odd) {
      dp[i][1] = dp[i - 1][0] + 2;
    } else if (!ai_odd && ai1_odd) {
      dp[i][1] = dp[i][0] + 2;
    } else if (!ai_odd && !ai1_odd) {
      dp[i][1] = dp[i][0];
    }
  }
  cout << "YES" << endl;
  cout << min(dp[n][0], dp[n][1]) << endl;
}
```
This version of the code performs the same function as the original, but it is more efficient in terms of both time and space.