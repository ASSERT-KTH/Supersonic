Let's start by analyzing the given code. There are a couple of things that we can do to optimize this program:

1. The gcd function uses subtraction, which can be replaced by the modulus operation to reduce the number of operations.

2. The gcd function is being called multiple times. Instead, we can use the Euclidean algorithm to find the gcd of numbers in linear time.

3. The input of the program is read using cin, which is slower than scanf in C++. To improve the speed of the program, we can use scanf instead of cin.

4. The program uses a 2-dimensional dp array which can be reduced to 1-dimensional, since we only need to store the previous state.

5. The conditions inside the second loop are very complicated and can be simplified. It checks all combinations of even and odd numbers, but it could be replaced with a simple check if the current number is odd. 

Now let's implement these optimizations:

```cpp
#include <stdio.h>
#include <vector>
#include <algorithm>
using namespace std;
#define ll long long
#define inf 2e9

int gcd(int a, int b) {
    while (b) {
        a %= b;
        swap(a, b);
    }
    return a;
}

int main() {
    ll n;
    scanf("%lld", &n);
    vector<int> a(n + 2);
    int dp[2] = {0, inf};
    for (int i = 1; i <= n; ++i) {
        scanf("%d", &a[i]);
    }
    int g = a[1];
    for (int i = 2; i <= n; ++i) {
        g = gcd(g, a[i]);
    }
    if (g > 1) {
        printf("YES\n0\n");
        return 0;
    }
    for (int i = 2; i <= n + 1; ++i) {
        if (a[i] % 2 == 0) {
            dp[1] = min({dp[1] + 2, dp[0] + 2});
        } else if (a[i - 1] % 2 == 1) {
            dp[1] = min(dp[0] + 1, dp[1]);
            dp[0] = inf;
        } else {
            dp[1] = min(dp[0] + 1, dp[1] + 2);
            swap(dp[0], dp[1]);
        }
    }
    printf("YES\n%d\n", min(dp[0], dp[1]));
    return 0;
}
```

This code is now more readable, uses less memory and should execute faster.
