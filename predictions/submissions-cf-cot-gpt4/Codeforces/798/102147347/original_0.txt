Optimization Steps:

1. The gcd function can be optimized by using the Euclidean algorithm, which is more efficient than the subtraction method used in the original program. The Euclidean algorithm calculates the gcd(a, b) = gcd(b, a mod b).

2. The code has a repeated calculation of the modulus operation. We can calculate the modulus once and store it in a variable to avoid repeated calculations.

3. The input reading part can be optimized by using the "sync_with_stdio" and "tie" functions. These functions disable the synchronization between the C and C++ standard streams and untie the cin from cout, respectively.

4. The code has a repeated calculation of the minimum value between dp[i - 1][0] and dp[i - 1][1]. We can calculate it once and store it in a variable to avoid repeated calculations.

Optimized Program:

```c++
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define rep(i, n) for (long long(i) = 0; (i) < (n); ++(i))
#define ref(i, a, b) for (long long(i) = (a); (i) <= (b); ++(i))
#define endl '\n'
#define st first
#define nd second
#define pb push_back
#define mp make_pair
const int mx = 2e6 + 5;
int inf = 2e9;
int gcd(int a, int b) {
  while (b != 0) {
    int t = b;
    b = a % b;
    a = t;
  }
  return a;
}
int dp[200000][2];
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  ll n;
  cin >> n;
  vector<int> a(n + 24);
  rep(i, n) { cin >> a[i + 1]; }
  int faust = gcd(a[1], a[2]);
  ref(i, 3, n) { faust = gcd(faust, a[i]); }
  a[n + 1] = 2;
  dp[0][1] = inf;
  dp[0][0] = 0;
  for (int i = 1; i <= n + 2; ++i) {
    rep(j, 2) dp[i][j] = inf;
  }
  if (faust > 1) {
    cout << "YES" << endl;
    cout << 0 << endl;
    return 0;
  }
  ref(i, 1, n) {
    int ai = a[i] % 2;
    int ai_p1 = a[i + 1] % 2;
    int dp_i_0 = dp[i - 1][0];
    int dp_i_1 = dp[i - 1][1];
    int dp_min = min(dp_i_0, dp_i_1);
    if (ai and ai_p1) {
      if (dp_i_1 != inf)
        dp[i][0] = dp_i_1;
      if (dp_i_0 != inf)
        dp[i][1] = dp_i_0 + 1;
    } else if (ai and !ai_p1) {
      if (dp_i_1 != inf) {
        dp[i][0] = dp_i_1;
      }
      if (dp_i_0 != inf)
        dp[i][1] = dp_i_0 + 2;
    } else if (!ai and ai_p1) {
      if (dp_i_0 != inf or dp_i_1 != inf)
        dp[i][0] = dp_min;
      if (dp_i_0 != inf or dp_i_1 != inf)
        dp[i][1] = dp_min + 2;
    } else if (!ai and !ai_p1) {
      if (dp_i_0 != inf or dp_i_1 != inf)
        dp[i][0] = dp_min;
      dp[i][1] = dp[i][0];
    }
  }
  cout << "YES" << endl;
  if (inf == dp[n][0])
    cout << dp[n][1] << endl;
  else
    cout << dp[n][0] << endl;
}
```
