The program can be optimized in the following ways:

1. Avoid recalculating the modulo operation: In the main function, the modulo operation is performed multiple times on the same value. Calculating the modulo operation is a relatively expensive operation, so its results can be stored and reused. 

2. Simplify the gcd function: Instead of checking for zero and then subtracting, we can use the modulo operation to simplify the gcd calculation. This should result in fewer recursive calls.

3. Reduce memory usage of the dp array: Since the dp array only ever uses the current and previous index, we can reduce its size to just two elements and swap them out as needed. This significantly reduces its memory usage.

4. Remove unnecessary checks for inf: We initialize the dp array with inf, so we know that dp[i][j] will always be inf or less. Therefore, the checks for inf in the main function are unnecessary and can be removed.

Here is the optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define rep(i, n) for (long long(i) = 0; (i) < (n); ++(i))
#define ref(i, a, b) for (long long(i) = (a); (i) <= (b); ++(i))
#define endl '\n'
#define st first
#define nd second
#define pb push_back
#define mp make_pair
const int mx = 2e6 + 5;
int inf = 2e9;

int gcd(int a, int b) {
  if (b == 0)
    return a;
  else
    return gcd(b, a % b);
}

int dp[2][2];

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  ll n;
  cin >> n;
  vector<int> a(n + 24);
  rep(i, n) { cin >> a[i + 1]; }
  int faust = gcd(a[1], a[2]);
  ref(i, 3, n) { faust = gcd(faust, a[i]); }
  a[n + 1] = 2;

  dp[0][1] = inf;
  dp[0][0] = 0;

  if (faust > 1) {
    cout << "YES" << endl;
    cout << 0 << endl;
    return 0;
  }

  ref(i, 1, n) {
    bool curr = i & 1;
    bool prev = !curr;
    
    int ai_even = a[i] % 2 == 0;
    int ai1_even = a[i + 1] % 2 == 0;

    dp[curr][0] = ai_even && ai1_even ?
      min(dp[prev][0], dp[prev][1]) :
      (ai_even && !ai1_even || !ai_even && ai1_even ?
        min(dp[prev][0], dp[prev][1]) : dp[prev][1]);
    
    dp[curr][1] = ai_even && ai1_even ?
      dp[curr][0] :
      (ai_even && !ai1_even || !ai_even && ai1_even ?
        min(dp[prev][1] + 2, dp[prev][0] + 2) : dp[prev][0] + 1);
  }

  cout << "YES" << endl;
  cout << min(dp[n & 1][0], dp[n & 1][1]) << endl;
}
```