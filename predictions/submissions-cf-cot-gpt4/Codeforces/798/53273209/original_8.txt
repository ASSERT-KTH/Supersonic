The given C++ program reads a number 'n' and 'n' strings from input. It tries to make all strings equal by cyclically shifting the characters in them. The program counts the shifts required for each string and outputs the minimum shifts required to make all strings equal, if possible.

Optimization can be done in the following way:
1. Instead of using 'vector<string> B = A;' in each iteration which copies all strings from 'A' to 'B', we can just use a single string variable and copy only the string which is being processed. This will save both time and space.
2. The 'while' loop can be optimized by calculating the shifts required directly instead of doing each shift and checking for equality.
3. If a string can't be made equal to the target string, then no need to check for other strings, we can break the loop and output -1.

Optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int n;
  cin >> n;
  vector<string> A(n);
  for (string& x : A) cin >> x;
  if (n == 1) {
    cout << 0;
    return 0;
  }
  int ans = 1000001;
  for (int i = 0; i < n; i++) {
    int counter = 0;
    for (int j = 0; j < n; j++) {
      if (j == i) continue;
      string B = A[j];
      size_t pos = B.find(A[i]);
      if (pos == string::npos) {
        cout << -1;
        return 0;
      }
      counter += pos;
      B = B.substr(pos) + B.substr(0, pos);
      if (B != A[i]) {
        cout << -1;
        return 0;
      }
    }
    ans = min(ans, counter);
  }
  cout << ans;
  return 0;
}
```
In the optimized program, we only make a copy of the string being processed and calculate the shifts required directly instead of doing each shift and checking. This reduces the complexity of the program from O(n^3) to O(n^2).