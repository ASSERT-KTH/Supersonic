Here are the steps to optimize this program:

1. Reserve memory for vector A: When you know the size of the vector in advance, you should reserve memory for it to avoid reallocation while pushing back elements. This will improve the runtime of the program.

2. Use `std::move` to avoid copying strings: When you push a string `x` into vector `A`, you are copying the string which can be expensive for large strings. Instead, you can use `std::move` which will move the string instead of copying it.

3. Avoid recreating vector B: In the code, vector B is recreated in each iteration of the outer loop which can be avoided. Instead, we can create it once and clear it in each iteration.

4. Avoid unnecessary string operations: In the inner loop, we are performing a lot of string operations like erasing the first character and appending it at the end. Instead, we can use a single operation `std::rotate` which rotates the string in place.

5. Avoid checking if `z > 50` in each iteration: Instead of checking this condition in each iteration, we can check it once after the while loop.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int n;
  cin >> n;
  vector<string> B;
  vector<string> A;
  A.reserve(n); // reserve memory for vector A
  for (int i = 0; i < n; i++) {
    string x;
    cin >> x;
    A.push_back(std::move(x)); // use std::move to avoid copying strings
  }
  if (n == 1) {
    cout << 0;
    return 0;
  }
  int ans = 1000001;
  int counter = 0;
  B = A; // create vector B once outside the loop
  for (int i = 0; i < n; i++) {
    B.clear(); // clear vector B in each iteration
    B = A;
    string s = B[i];
    for (int j = 0; j < n; j++) {
      int z = 0;
      while (B[j] != s) {
        std::rotate(B[j].begin(), B[j].begin() + 1, B[j].end()); // rotate the string in place
        counter++;
        z++;
      }
      if (z > 50) { // check if z > 50 once after the while loop
        cout << -1;
        return 0;
      }
    }
    ans = min(ans, counter);
    counter = 0;
  }
  cout << ans;
}
```
Note: Be aware that using `std::move` will leave `x` in a valid but unspecified state, so it should not be used after being moved.