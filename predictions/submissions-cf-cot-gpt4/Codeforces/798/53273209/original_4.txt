Optimization Steps:
1. Declare the string 'x' before the loop. We don't need to create a new string every time we read a string.
2. Use 'reserve()' function to avoid multiple reallocations while pushing strings to the vector 'A'. The reserve() function in C++ STL is used to reserve capacity for a vector. This function sets the capacity of the vector to at least the specified size. This can decrease the number of reallocations.
3. 'B' vector is not needed as we can perform the operations directly on 'A'. This can save memory.
4. In the outer loop, we can avoid copying the entire vector 'A' to 'B' by saving the string 's' and restoring it after processing. This reduces the time complexity from O(n^2) to O(n).
5. Avoid using 'erase' function in the inner loop. The 'erase' function is O(n) in complexity, making the overall complexity of the loop O(n^3). Instead, use substring function and string concatenation which are O(n) in complexity, making the overall complexity O(n^2).
6. Declare 'z' and 'counter' as 'long long' to avoid integer overflow if 'n' is large.

Optimized Program:

```
#include <bits/stdc++.h>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n;
  cin >> n;
  vector<string> A;
  A.reserve(n);

  string x;
  for (int i = 0; i < n; i++) {
    cin >> x;
    A.push_back(x);
  }

  if (n == 1) {
    cout << 0;
    return 0;
  }

  long long ans = LLONG_MAX;
  long long counter = 0;
  
  for (int i = 0; i < n; i++) {
    string s = A[i];
    for (int j = 0; j < n; j++) {
      long long z = 0;
      while (A[j] != s) {
        s = s.substr(1) + s[0];
        counter++;
        z++;
        if (z > 50) {
          cout << -1;
          return 0;
        }
      }
    }
    ans = min(ans, counter);
    counter = 0;
    A[i] = s;
  }
  cout << ans;
}
```
Note: It's always better to avoid `#include <bits/stdc++.h>` because it includes a lot of unnecessary headers, which increases the compilation time. Instead, include only the headers that you need.