The program you provided is already quite optimized and follows good practices for C++ programming. However, there are minor optimizations that can be done.

1. Unnecessary `#define fast` macro:
   The `fast` macro is used to speed up I/O operations by unsyncing C++ and C I/O operations and untie cin from cout. However, in this program, the I/O operations are already minimal and this macro does not significantly help in performance. Additionally, `srand(time(NULL));` is there to seed the random number generator but it is not used in this program.

2. Use `++i` instead of `i++`:
   Although modern compilers can optimize `i++` in loops, using `++i` is a good practice as it could potentially be faster than `i++` in some cases. This is because `i++` creates a temporary copy of `i`, increments the original `i`, and then returns the temporary copy, while `++i` simply increments the original `i`.

3. Unnecessary use of `vector<ll> a(n + 1)`:
   The program creates a vector of size `n + 1`, but the index `0` is not used in the program. This wastes memory. We can simply declare the vector with size `n` and change the loops to run from `0` to `n` instead of `1` to `n`.

4. Unnecessary `endl` in `cout`:
   `endl` not only inserts a newline, but also flushes the output buffer. This can slow down the program if the output operation is performed many times. Instead, we can use `"\n"` to insert a newline without flushing the output buffer.

5. Remove extra semicolon:
   There is an extra semicolon after the cout statement in the second loop. It doesn't affect performance, but it's redundant and can be removed for cleaner code.

Here is the optimized version of the code:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define ll long long int

int main() {
  ll n;
  cin >> n;
  vector<ll> a(n);
  for (ll i = 0; i < n; ++i) {
    cin >> a[i];
  }
  sort(a.begin(), a.end());
  for (ll i = 1; i < n; ++i) {
    a[i] += a[i - 1];
  }
  ll m;
  cin >> m;
  for (ll i = 0; i < m; ++i) {
    ll x;
    cin >> x;
    cout << a[n-1] - a[n - x] + a[n - x - 1] << "\n";
  }
  return 0;
}
```
