Step by step optimization:

1. Use specific standard library headers instead of <bits/stdc++.h> because the latter includes the entire standard library which increases compilation time.

2. Remove the use of `#define fast` and `srand(time(NULL))`. The first line is used to speed up cin and cout, but in this case, it does not provide any significant performance improvement. The second line is used to seed the random number generator, but it is not used in this program.

3. Remove the use of `#define ll long long int` and `#define pb push_back`, since they are not used frequently in this code.

4. In the for loop where the vector `a` is filled with input elements, it would be more efficient to start from index 0 instead of 1. This way, we avoid having to allocate an extra element in the vector (i.e., `n+1` elements instead of `n`).

5. The sort function can be optimized by using `std::partial_sort` if only a certain number of smallest elements are required.

6. Remove the extra semicolon at the end of the second for loop.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

  long long int n;
  cin >> n;

  vector<long long int> a(n);
  for (long long int i = 0; i < n; i++) {
    cin >> a[i];
  }

  sort(a.begin(), a.end());

  for (long long int i = 1; i < n; i++) {
    a[i] += a[i - 1];
  }

  long long int m;
  cin >> m;

  long long int x;
  for (long long int i = 0; i < m; i++) {
    cin >> x;
    cout << a[n-1] - a[n - x] + a[n - x - 1] << endl;
  }

  return 0;
}
```

Please note that the overall structure of the code is kept intact to preserve the logic of the original code. However, some of the improvements may not significantly improve the runtime or memory usage if the input size (`n` and `m`) is small. The improvements will become noticeable when dealing with larger inputs.