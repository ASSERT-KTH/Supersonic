Here are some optimization steps we can apply to the given C++ program:

1. **Avoid using <bits/stdc++.h>**: This header file includes quite a lot of headers, which can slow down the compilation process significantly. It should be replaced with only those headers which are actually used in the program.

2. **Replace #define with const or constexpr**: The #define preprocessor directive does not respect scope and type rules of C++. It is safer to use const or constexpr for defining constants.

3. **Avoid using 'endl'**: The 'endl' not only breaks the line, but also flushes the output buffer, which can slow down the program if used in a loop. It's better to use '\n' for breaking the line.

4. **Use pre-increment instead of post-increment**: For non-primitive types like iterators (which we use with vector), pre-increment (++i) can be faster than post-increment (i++).

5. **Avoid using 'ios_base::sync_with_stdio(false)' and 'cin.tie(0)'**: These are used to speed up cin/cout by disconnecting them from C's stdin/stdout. But in this program, we are using both cin/cout and printf/scanf, which can cause problems if they are disconnected.

Now, let's implement these optimizations in the code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdlib>

using namespace std;

const long long int ll = 0;
const auto fast = ios_base::sync_with_stdio(false);

int main() {
  srand(time(NULL));
  
  ll n;
  cin >> n;
  vector<ll> a(n + 1);
  for (ll i = 1; i <= n; ++i) {
    cin >> a[i];
  }
  sort(a.begin(), a.end());
  for (ll i = 1; i <= n; ++i) {
    a[i] += a[i - 1];
  }
  ll m;
  cin >> m;
  ll x;
  for (ll i = 0; i < m; ++i) {
    cin >> x;
    cout << a[n] - a[n - x + 1] + a[n - x] << '\n';
  }
  return 0;
}
```
