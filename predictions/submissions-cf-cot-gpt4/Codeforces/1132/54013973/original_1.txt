Optimizations:

1. "bits/stdc++.h" is a heavy header file, which includes almost all standard library headers. This could slow down compile time. We will replace it with the specific headers we need.
2. "fast" macro is used to speed up the input/output in the code, but in our case, we know that cin and cout are used, so we can directly put the relevant code in the main function. This will improve readability and maintainability.
3. We will also remove the unnecessary semicolon after the last cout line in the for loop.
4. The use of `srand(time(NULL));` is unnecessary in the provided code as it is not using any random function from the standard library. So we can remove it to clean up the code.
5. The use of a "ll" macro for long long int could be seen as a bad practice because it decreases code readability. It is better to use the original type instead of hiding it behind a macro.
6. We can avoid adding elements to the vector after sorting by reading the input directly into the vector before sorting.
7. The `a[n - x + 1]` operation in the last cout line is being subtracted, then added back in the next operation `a[n - x]`. This operation can be omitted without changing the result.

Optimized Code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  
  long long int n;
  cin >> n;
  vector<long long int> a(n + 1);
  
  for (long long int i = 1; i <= n; i++) {
    cin >> a[i];
  }
  
  sort(a.begin(), a.end());
  
  for (long long int i = 1; i <= n; i++) {
    a[i] += a[i - 1];
  }
  
  long long int m;
  cin >> m;
  long long int x;
  
  for (long long int i = 0; i < m; i++) {
    cin >> x;
    cout << a[n] - a[n - x] << endl;
  }
  
  return 0;
}
```

Please note that "using namespace std" is generally considered a bad practice in larger projects because it can lead to name clashes. But in this case, where the code is small and there's no risk of name clashes, it's fine.