Before we start with the optimization, let's understand the original code. This is a C++ program that takes an input 'n', accepts 'n' long long int values and sorts them. Then it performs a cumulative sum on the sorted vector. Afterwards, it reads 'm' and performs 'm' queries on the vector.

Here are some steps to optimize the given code:

1. Do not use `#define fast` and `srand(time(NULL));`: 
    The macro `fast` is used to optimize I/O operations in competitive programming. However, it's not recommended in production code due to it potentially causing bugs and being non-portable. 

2. Avoid using `#define` for constants: 
    `#define` does not respect scope and type. It's better to use `const` or `constexpr` for constants. 

3. Avoid using `#include <bits/stdc++.h>`: 
    This header is actually not a standard header and it includes a lot of unnecessary code, which can slow down the compilation process. It's better to include only headers that are required.

4. Avoid using `using namespace std;`: 
    This can cause name clashes if the standard library has a name that you want to use in your code. It's better to use the `std::` prefix when needed.

5. Instead of using `vector<ll> a(n + 1);` and then starting your loop from 1, just use `vector<ll> a(n);` and start your loop from 0. This will remove the need to add +1 to 'n' and thus save some memory.

6. The last output line `cout << a[n] - a[n - x + 1] + a[n - x] << endl;` can be simplified by precomputing the values of `a[n - x + 1]` and `a[n - x]`.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);

  long long int n;
  std::cin >> n;
  std::vector<long long int> a(n);
  for (long long int i = 0; i < n; i++) {
    std::cin >> a[i];
  }
  std::sort(a.begin(), a.end());
  for (long long int i = 1; i < n; i++) {
    a[i] += a[i - 1];
  }
  long long int m;
  std::cin >> m;
  long long int x;
  for (long long int i = 0; i < m; i++) {
    std::cin >> x;
    long long int temp1 = a[n - x + 1];
    long long int temp2 = a[n - x];
    std::cout << a[n] - temp1 + temp2 << std::endl;
  }
  return 0;
}
```

Please note that optimizing the code for runtime and memory usage depends on the specific use case. The provided optimizations are general guidelines and may not always result in significant improvements.