The program you have written is quite efficient. However, there are minor optimizations we can make to improve the performance:

1. `#include <bits/stdc++.h>`: This is a non-standard header file and includes a lot of unnecessary files which can slow down the compilation process. It's better to include only those header files which are actually used in the program.

2. `using namespace std;`: This line of code can cause name clash problems when the program gets bigger, so it's better to avoid it and use the `std::` prefix where needed.

3. `#define fast ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0); srand(time(NULL));`: These lines are used to speed up I/O operations in competitive programming. But they can actually slow down the program in some cases. Also, using `srand(time(NULL));` without `<ctime>` included is wrong. It's better to remove these lines for a small program.

4. `#define ll long long int`: This line is used to shorten the code in competitive programming. But it can make the program less readable. It's better to use `long long` directly.

5. `#define pb push_back`: This line is used to shorten the code in competitive programming. But it can make the program less readable. It's better to use `push_back()` directly.

6. `vector<ll> a(n + 1);` and `for (i = 1; i <= n; i++)`: In C++, arrays and vectors are 0-indexed, so it's better to use 0-indexing.

7. `for (i = 1; i <= n; i++) { a[i] += a[i - 1]; }`: This loop can be made more efficient by using `std::partial_sum`.

8. `cout << a[n] - a[n - x + 1] + a[n - x] << endl; ;`: The extra `;` is not needed.

Here's the optimized version of your code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>

int main() {
  long long n;
  std::cin >> n;
  std::vector<long long> a(n);
  for (long long i = 0; i < n; i++) {
    std::cin >> a[i];
  }
  std::sort(a.begin(), a.end());
  std::partial_sum(a.begin(), a.end(), a.begin());
  long long m;
  std::cin >> m;
  long long x;
  for (long long i = 0; i < m; i++) {
    std::cin >> x;
    std::cout << a[n-1] - a[n-x] + a[n-x-1] << std::endl;
  }
  return 0;
}
```

In this optimized version, the program only includes necessary headers, uses 0-indexing for vectors, uses `std::partial_sum` to calculate the prefix sum, and removes some unnecessary code to make it more readable.