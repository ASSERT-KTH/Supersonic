#include <iostream>
#include <vector>
#include <cstdio>

const int MAX_N = 200000 + 13;
const long long INF = 1000000000000000000LL;
int n, k;
long long a[MAX_N];
int b[MAX_N];
long long cur[MAX_N];
std::vector<int> qr[MAX_N];

bool check(long long x, long long* cur) {
  for (int i = 0; i < k; i++) qr[i].clear();
  for (int i = 0; i < n; i++) {
    long long t = cur[i] / b[i] + 1;
    cur[i] %= b[i];
    if (t < k)
      qr[t].push_back(i);
  }
  int lst = 0;
  for (int t = 0; t < k; t++) {
    while (lst < k && qr[lst].empty())
      ++lst;
    if (lst <= t)
      return false;
    if (lst == k)
      return true;
    int i = qr[lst].back();
    if (cur[i] + x < b[i]) {
      cur[i] += x;
      continue;
    }
    qr[lst].pop_back();
    long long nt = (cur[i] + x) / b[i];
    cur[i] = (cur[i] + x) % b[i];
    if (lst + nt < k)
      qr[lst + nt].push_back(i);
  }
  return true;
}

int main() {
  std::scanf("%d%d", &n, &k);
  for (int i = 0; i < n; i++) std::scanf("%lld", &a[i]);
  for (int i = 0; i < n; i++) std::scanf("%d", &b[i]);
  for (int i = 0; i < n; i++) cur[i] = a[i];
  long long l = 0, r = INF;
  while (l < r - 1) {
    long long m = (l + r) / 2;
    if (check(m, cur))
      r = m;
    else
      l = m;
  }
  if (!check(r, cur))
    std::puts("-1");
  else
    std::printf("%lld\n", check(l, cur) ? l : r);
  return 0;
}