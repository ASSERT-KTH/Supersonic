The given C++ program is quite optimized in terms of running time and memory usage. However, here are a few steps to optimize it further:

1. Avoid unnecessary function calls in loops: The function check() is called multiple times within the while loop in the main() function and in printf(). This could be optimized by storing the result of check(r) in a boolean variable and reusing it.

2. Avoid unnecessary computation in loops: In the check() function, there are repeated computations of (cur[i] + x) in the last while loop. This could be optimized by storing the computed value in a variable and reusing it.

3. Preprocessing: Sort the input array 'a' in decreasing order, which can help to check the conditions in a faster manner.

4. Use \n instead of endl: Use \n for a new line instead of endl, as endl is slower because it involves additional flush operation.

5. Use cin/cout.tie(0): This step disconnects cin from cout. Flushing the output before taking input takes time, so this step improves the I/O operation time.

After applying the above optimizations, the optimized code is:

```cpp
#include <bits/stdc++.h>
#define forn(i, n) for (int i = 0; i < int(n); i++)
using namespace std;
const int N = 200 * 1000 + 13;
const long long INF64 = 1e18;
int n, k;
long long a[N];
int b[N];
long long cur[N];
vector<int> qr[N];
bool check(long long x) {
  forn(i, k) qr[i].clear();
  forn(i, n) cur[i] = a[i];
  forn(i, n) {
    long long t = cur[i] / b[i] + 1;
    cur[i] %= b[i];
    if (t < k)
      qr[t].push_back(i);
  }
  int lst = 0;
  forn(t, k) {
    while (lst < k && qr[lst].empty())
      ++lst;
    if (lst <= t)
      return false;
    if (lst == k)
      return true;
    int i = qr[lst].back();
    long long temp = cur[i] + x;
    if (temp < b[i]) {
      cur[i] = temp;
      continue;
    }
    qr[lst].pop_back();
    long long nt = temp / b[i];
    cur[i] = temp % b[i];
    if (lst + nt < k)
      qr[lst + nt].push_back(i);
  }
  return true;
}
int main() {
  ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
  scanf("%d%d", &n, &k);
  forn(i, n) scanf("%lld", &a[i]);
  forn(i, n) scanf("%d", &b[i]);
  sort(a, a+n, greater<int>());
  
  long long l = 0, r = INF64;
  while (l < r - 1) {
    long long m = (l + r) / 2;
    if (check(m))
      r = m;
    else
      l = m;
  }
  bool flag = check(r);
  if (!flag)
    puts("-1");
  else
    printf("%lld\n", flag ? l : r);
  return 0;
}
```
