The given code is already quite optimized in terms of its algorithmic complexity. However, there are still a few things we can do:

1. **Avoiding Recalculations**: In the main function, we are calling `check()` function multiple times with the same arguments, once for verifying the condition and again for printing the result. Each call to `check()` function involves a non-trivial amount of computation. We can avoid these recalculations by storing the result of `check()` in a variable and using it.
   
2. **Inlining forn Loop Macro**: It's a small optimization but inlining the 'forn' macro will slightly improve the performance as the function call overhead will be eliminated. Modern compilers do this automatically but doing it manually doesn't hurt.

3. **Avoiding Division and Modulus Operations**: Division and modulus are costly operations in terms of CPU time. In the `check()` function, we are dividing and getting modulus of cur[i] twice. We can optimize it by storing the result in a temporary variable and reusing it.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 200 * 1000 + 13;
const long long INF64 = 1e18;
int n, k;
long long a[N];
int b[N];
long long cur[N];
vector<int> qr[N];

bool check(long long x) {
  for(int i = 0; i < k; i++) qr[i].clear();
  for(int i = 0; i < n; i++) {
    cur[i] = a[i];
    long long div = cur[i] / b[i];
    long long mod = cur[i] % b[i];
    long long t = div + 1;
    cur[i] = mod;
    if (t < k)
      qr[t].push_back(i);
  }
  int lst = 0;
  for(int t = 0; t < k; t++) {
    while (lst < k && qr[lst].empty())
      ++lst;
    if (lst <= t)
      return false;
    if (lst == k)
      return true;
    int i = qr[lst].back();
    if (cur[i] + x < b[i]) {
      cur[i] += x;
      continue;
    }
    qr[lst].pop_back();
    long long sum = cur[i] + x;
    long long nt = sum / b[i];
    cur[i] = sum % b[i];
    if (lst + nt < k)
      qr[lst + nt].push_back(i);
  }
  return true;
}

int main() {
  scanf("%d%d", &n, &k);
  for(int i = 0; i < n; i++) scanf("%lld", &a[i]);
  for(int i = 0; i < n; i++) scanf("%d", &b[i]);
  long long l = 0, r = INF64;
  while (l < r - 1) {
    long long m = (l + r) / 2;
    bool check_m = check(m);
    if (check_m)
      r = m;
    else
      l = m;
  }
  bool check_r = check(r);
  bool check_l = check(l);
  if (!check_r)
    puts("-1");
  else
    printf("%lld\n", check_l ? l : r);
  return 0;
}
```

These optimizations aim to reduce the number of unnecessary calculations and costly operations, resulting in a more efficient program.
