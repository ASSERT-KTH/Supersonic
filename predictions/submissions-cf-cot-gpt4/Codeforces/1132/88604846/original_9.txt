This program seems to be well optimized for the most part, but there are a few areas that could be improved:

1. Header File: The #include <bits/stdc++.h> is a GCC specific library that includes most of the standard libraries. It's great for competitive programming, but isn't portable. Switching to only the required libraries will decrease compilation time.

2. Input/Output: Using scanf and printf for basic input/output is okay, but cin and cout are more C++ idiomatic and easier to read.

3. Division and Modulo: The code performs both a division and a modulo operation on the same numbers in a few places. Since both of these operations are expensive, it would be better to perform the division once, save the result, and then calculate the modulo from the saved result.

4. Repeated Function Calls: The function check is called up to three times with the same argument in the main function. It would be more efficient to call it once, save the result, and then use that result in the if statement.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>

#define forn(i, n) for (int i = 0; i < int(n); i++)

using namespace std;
const int N = 200 * 1000 + 13;
const long long INF64 = 1e18;
int n, k;
long long a[N];
int b[N];
long long cur[N];
vector<int> qr[N];

bool check(long long x) {
  forn(i, k) qr[i].clear();
  forn(i, n) cur[i] = a[i];
  forn(i, n) {
    long long div = cur[i] / b[i];
    long long mod = cur[i] % b[i];
    if (div + 1 < k)
      qr[div + 1].push_back(i);
    cur[i] = mod;
  }
  int lst = 0;
  forn(t, k) {
    while (lst < k && qr[lst].empty())
      ++lst;
    if (lst <= t)
      return false;
    if (lst == k)
      return true;
    int i = qr[lst].back();
    if (cur[i] + x < b[i]) {
      cur[i] += x;
      continue;
    }
    qr[lst].pop_back();
    long long div = (cur[i] + x) / b[i];
    long long mod = (cur[i] + x) % b[i];
    if (lst + div < k)
      qr[lst + div].push_back(i);
    cur[i] = mod;
  }
  return true;
}

int main() {
  cin >> n >> k;
  forn(i, n) cin >> a[i];
  forn(i, n) cin >> b[i];
  long long l = 0, r = INF64;
  while (l < r - 1) {
    long long m = (l + r) / 2;
    if (check(m))
      r = m;
    else
      l = m;
  }
  bool checkResult = check(r);
  if (!checkResult)
    cout << "-1" << endl;
  else {
    checkResult = check(l);
    cout << (checkResult ? l : r) << endl;
  }
  return 0;
}
```
Note: While cin and cout are generally slower than scanf and printf, the difference is negligible for most purposes. If the input/output speed is a concern in this case, you might want to stick with scanf and printf.