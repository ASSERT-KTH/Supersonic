The given C++ program seems to be a solution for a competitive programming problem. It's already optimized in terms of algorithmic complexity, but there are several things we can do to make it slightly faster and reduce its memory usage:

1. Use `ios_base::sync_with_stdio(false); cin.tie(NULL);` at the beginning of the main function to speed up I/O operations.
2. Use array instead of vector for `qr` to avoid dynamic memory allocation.
3. Remove `forn` macro and use regular for loops. Macros are generally discouraged in C++ because they can lead to hard-to-find bugs.
4. In the `check` function, there's an unnecessary repeated call to `check` in the last printf. We could avoid this by storing its value in a variable.
5. Use `printf` and `scanf` for I/O operation, they are faster.
6. Avoid using `bits/stdc++.h` as it includes more files than needed, instead include necessary files.

Optimized code:
```
#include <cstdio>
#include <algorithm>

const int N = 200 * 1000 + 13;
const long long INF64 = 1e18;
int n, k;
long long a[N];
int b[N];
long long cur[N];
int qr[N][N];
bool check(long long x) {
  for (int i = 0; i < k; i++) qr[i][0] = 0;
  for (int i = 0; i < n; i++) {
    cur[i] = a[i];
    long long t = cur[i] / b[i] + 1;
    cur[i] %= b[i];
    if (t < k)
      qr[t][++qr[t][0]] = i;
  }
  int lst = 0;
  for (int t = 0; t < k; t++) {
    while (lst < k && qr[lst][0] == 0)
      ++lst;
    if (lst <= t)
      return false;
    if (lst == k)
      return true;
    int i = qr[lst][qr[lst][0]--];
    if (cur[i] + x < b[i]) {
      cur[i] += x;
      continue;
    }
    long long nt = (cur[i] + x) / b[i];
    cur[i] = (cur[i] + x) % b[i];
    if (lst + nt < k)
      qr[lst + nt][++qr[lst + nt][0]] = i;
  }
  return true;
}
int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL);
  scanf("%d%d", &n, &k);
  for (int i = 0; i < n; i++) scanf("%lld", &a[i]);
  for (int i = 0; i < n; i++) scanf("%d", &b[i]);
  long long l = 0, r = INF64;
  while (l < r - 1) {
    long long m = (l + r) / 2;
    if (check(m))
      r = m;
    else
      l = m;
  }
  bool r_check = check(r);
  bool l_check = check(l);
  if (!r_check)
    puts("-1");
  else
    printf("%lld\n", l_check ? l : r);
  return 0;
}
```

Please note that this is just a small optimization. The main bottleneck of this code is definitely the algorithmic complexity and without changing the algorithm, we cannot achieve significant optimization.