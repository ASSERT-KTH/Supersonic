The optimization steps are as follows:
1. The #include <bits/stdc++.h> is not recommended to be used as it includes many unnecessary headers. It is better to include only those headers that are actually required in the code. This would reduce the compilation time.
2. The macro 'all' is not used anywhere in the code, so it can be removed.
3. The macro 'm_p' is not used anywhere in the code, so it can be removed.
4. The macro 'pw' is not used anywhere in the code, so it can be removed.
5. The variable 'M' is not used anywhere in the code, so it can be removed.
6. The variables 'tox' and 'toy' are not used anywhere in the code, so they can be removed.
7. The variable 'inf' is not used anywhere in the code, so it can be removed.
8. The function 'precalc' is called only once. So, it would be more efficient to make it inline, which could potentially save some time during function calls.

Now, the optimized code looks like this:

```cpp
#include <iostream>
#include <vector>
#include <cmath>

#define ll long long
#define pii pair<int, int>
#define piii pair<pii, pii>
#define sz(x) (int)x.size()
#define f first
#define s second

using namespace std;

const int N = 5e6 + 2;
int val[N];
bool is[N];
int cnt[N];
ll pref[N];
const ll to = sqrt(N) + 1;

inline void precalc() {
  for (int i = 0; i < N; i++) {
    val[i] = i;
  }
  for (int i = 2; i < to; i++) {
    if (is[i])
      continue;
    int j = 2 * i;
    while (j < N) {
      is[j] = 1;
      while (val[j] % i == 0) {
        val[j] /= i;
        cnt[j]++;
      }
      j += i;
    }
  }
  for (int i = 0; i < N; i++) {
    if (val[i] != 1) {
      cnt[i]++;
    }
  }
  for (int i = 1; i < N; i++) {
    pref[i] = pref[i - 1] + cnt[i];
  }
}

int a, b;
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  precalc();
  int t;
  cin >> t;
  while (t--) {
    cin >> a >> b;
    cout << pref[a] - pref[b] << '\n';
  }
  return 0;
}
```