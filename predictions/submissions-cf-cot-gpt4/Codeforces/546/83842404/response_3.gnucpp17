#include <iostream>
#include <vector>
#include <cmath>
#include <bitset>
using namespace std;
const int N = 5e6 + 2;
bitset<N> is;
vector<int> val(N), cnt(N);
vector<long long> pref(N);
void precalc(int n) {
    for (int i = 0; i <= n; i++) {
        val[i] = i;
    }
    int to = sqrt(n) + 1;
    for (int i = 2; i <= to; i++) {
        if (is[i])
            continue;
        for (int j = 2*i; j <= n; j += i) {
            is[j] = 1;
            while (val[j] % i == 0) {
                val[j] /= i;
                cnt[j]++;
            }
        }
    }
    for (int i = 0; i <= n; i++) {
        if (val[i] != 1) {
            cnt[i]++;
        }
    }
    for (int i = 1; i <= n; i++) {
        pref[i] = pref[i - 1] + cnt[i];
    }
}
int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int t, max_query = 0;
    cin >> t;
    vector<pair<int, int>> queries(t);
    for (int i = 0; i < t; i++) {
        cin >> queries[i].first >> queries[i].second;
        max_query = max(max_query, queries[i].first);
    }
    precalc(max_query);
    for (const auto &query : queries) {
        cout << pref[query.first] - pref[query.second] << '\n';
    }
    return 0;
}