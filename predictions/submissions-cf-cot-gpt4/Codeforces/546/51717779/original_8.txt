The given program is reading three numbers: `k`, `n`, and `w`. Then it calculates a sum `dem` of the series `k`, `2k`, `3k`, ..., `wk`. If this sum `dem` is less than or equal to `n`, it prints `0`. Otherwise, it prints the difference `dem - n`.

The optimization can be done by replacing the for loop with an arithmetic progression formula. The formula for the sum of the first `n` natural numbers is `n * (n+1) / 2`. Here `n` is `w` in this case and each term is multiplied by `k` (common difference). This will reduce the time complexity from O(n) to O(1) as we are removing the loop.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
int main() {
  int_least64_t k, n, w, dem = 0;
  cin >> k >> n >> w;
  dem = k * w * (w+1) / 2;
  if (dem <= n) {
    cout << 0;
  } else
    cout << dem - n;
  return 0;
}
```

This optimized program will have a faster running time and almost the same memory usage as the original program because the number of variables has not been increased or decreased.