Sure, there are a few optimizations we can make here.

1. First, we can calculate `dem` without the loop. The loop is calculating a sequence's sum, which is a well-known formula: `sum = n * (n + 1) / 2`. We multiply it by `k` to get `dem`.
2. Second, we can reduce the number of `cout` statements. We can use the max function to ensure that we never print a negative value. This removes the need for the if-else statement.
3. Third, instead of using `bits/stdc++.h` which includes quite a lot of unnecessary stuff, we can use only the specific libraries we need, which are `iostream` and `algorithm`.

Here's the optimized code:

```cpp
#include <iostream>
#include <algorithm>
using namespace std;

int main() {
  int_least64_t k, n, w;
  cin >> k >> n >> w;
  int_least64_t dem = k * w * (w + 1) / 2;
  cout << max(int_least64_t(0), dem - n);
  return 0;
}
```

This optimized version of the program calculates `dem` in constant time instead of linear time, and it uses less memory by including only the necessary libraries. It also reduces the number of `cout` statements, which can be a relatively slow operation.