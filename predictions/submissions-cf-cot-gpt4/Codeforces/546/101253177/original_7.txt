The given code is simple and does not have much scope for optimization, but still, there are a few things we can do to improve it.

1. Instead of using 'cout' for output, we can use 'printf'. 'printf' is faster than 'cout' because 'cout' involves some overheads which slow it down.

2. We can reduce the use of 'n' variable by performing all operations on the input directly.

3. '#include <bits/stdc++.h>' includes all standard library in C++ which makes the compilation slow. It is better to include only those libraries which are necessary.

4. We can avoid the use of namespace 'std' by using 'std::' with cin, cout and endl. This optimization is not about performance, but it's about avoiding naming collisions that can cause bugs.

Here's the optimized version of the code according to the steps mentioned above:

```cpp
#include <cstdio>

int main() {
  long d, k, n;
  std::scanf("%ld %ld %ld", &d, &k, &n);
  long total = d * n * (n + 1) / 2;
  total -= k;
  if (total > 0)
    std::printf("%ld", total);
  else
    std::printf("0");
}
```
This version of the program should run slightly faster and use slightly less memory than the original version.