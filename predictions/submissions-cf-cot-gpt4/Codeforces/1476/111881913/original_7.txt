There are a few optimizations we can make to this code:

1. **Avoid using `#include <bits/stdc++.h>`:** This header file includes a lot of unnecessary libraries, increasing the compile time. It's better to include only the libraries that are being used in your code. In this case, we are using `std::vector`, `std::cin` and `std::cout`, so we need to include `<vector>` and `<iostream>`.

2. **Use `ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);` to speed up I/O operations:** By default, cin and cout are synchronized with stdio. You can optimize these operations with these two lines.

3. **Minimize the number of divisions and modulo operations:** Division and modulo operations are expensive in terms of CPU time. The division and modulo operations could be replaced with a single division and a comparison for efficiency.

Here is the optimized version of the code with all these changes:

```cpp
#include <iostream>
#include <vector>

#define ull unsigned long long int

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  int t;
  cin >> t;
  
  while (t--) {
    ull n, k;
    cin >> n >> k;
    
    vector<ull> v(n);
    for (int i = 0; i < n; i++) {
      cin >> v[i];
    }
    
    ull ans = 0;
    ull sum = v[0];
    
    for (int i = 1; i < n; i++) {
      if ((v[i] * 100) > sum * k) {
        ull x = (v[i] * 100 - sum * k + k - 1) / k;
        ans += x;
        sum += x;
      }
      sum += v[i];
    }
    cout << ans << '\n';
  }
  return 0;
}
```

This optimized version reduces the number of expensive operations and unnecessary inclusions, which should improve both the running time and memory usage.