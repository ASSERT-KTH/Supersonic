The provided C/C++ program is already quite optimized, but there are a few things we could do to potentially improve it further.

1. Avoid unnecessary division and modulus operations: In the program, the division and modulus operation with 'k' are performed multiple times. Since these are expensive operations, we can reduce them by using a single division operation and storing the result, and then using this result for further calculations.

2. Reserve vector memory: By default, the vector dynamically resizes itself while elements are inserted, which could potentially be an expensive operation. Since we know the size of the vector 'v' at the time of its creation, we can reserve the required memory in advance.

Now, let's make these changes in the program:

```cpp
#include <bits/stdc++.h>
#define ull unsigned long long int
using namespace std;
int main() {
  int t;
  cin >> t;
  while (t--) {
    ull n, k;
    cin >> n >> k;
    vector<ull> v;
    v.reserve(n);
    for (int i = 0; i < n; i++) {
      ull temp;
      cin >> temp;
      v.push_back(temp);
    }
    ull ans = 0;
    ull sum = v[0];
    for (int i = 1; i < n; i++) {
      if ((v[i] * 100) > sum * k) {
        ull x = v[i] * 100 - sum * k;
        ull division_result = x / k;
        if (x % k != 0) {
          ans += division_result + 1;
          sum += division_result + 1;
        } else {
          ans += division_result;
          sum += division_result;
        }
      }
      sum += v[i];
    }
    cout << ans << endl;
  }
}
```
This optimized version of the program should run faster and use memory more efficiently than the original version.