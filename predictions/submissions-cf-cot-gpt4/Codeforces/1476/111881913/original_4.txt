Step-by-step Optimization:

1. I/O Stream Optimization: The cin and cout operations are a bit slower which can be optimized by adding `ios_base::sync_with_stdio(false); cin.tie(NULL);` after the main function. This line makes input and output more efficient.

2. Use `'\n'` instead of `endl` : The endl implies a '\n' character, and then a flush operation. Flushing operation is heavy and it slows down the operation.

3. Remove the usage of 'ull x': The variable 'x' is used to hold the intermediate result of the expression 'v[i] * 100 - sum * k'. We can get rid of 'x' by directly using the expression. It reduces unnecessary memory usage. 

Optimized Program:
```
#include <bits/stdc++.h>
#define ull unsigned long long int
using namespace std;
int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    ull n, k;
    cin >> n >> k;
    vector<ull> v(n);
    for (int i = 0; i < n; i++) {
      cin >> v[i];
    }
    ull ans = 0;
    ull sum = v[0];
    for (int i = 1; i < n; i++) {
      if ((v[i] * 100) > sum * k) {
        if ((v[i] * 100 - sum * k) % k != 0) {
          ans += ((v[i] * 100 - sum * k) / k) + 1;
          sum += ((v[i] * 100 - sum * k) / k + 1);
        } else {
          ans += ((v[i] * 100 - sum * k) / k);
          sum += ((v[i] * 100 - sum * k) / k);
        }
      }
      sum += v[i];
    }
    cout << ans << '\n';
  }
}
```
