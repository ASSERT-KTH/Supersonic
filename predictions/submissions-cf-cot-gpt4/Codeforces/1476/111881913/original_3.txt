Optimization Steps:

1. Instead of using `std::vector` for storing the input, an `std::array` could be used. This would allow the compiler to optimize the usage of the container, because the size of an `array` is fixed at compile time. However, this won't be possible if the input size `n` is not known at compile time. So, we will stick with `std::vector`.
2. When checking whether `x % k != 0`, the expression `x / k` is computed twice when `x % k != 0`. To avoid this redundant computation, we can calculate `x / k` once and store it in a variable.
3. `#include <bits/stdc++.h>` includes a lot of unnecessary headers and increases compilation time. It is better to include only the necessary headers.

Optimized Program:

```cpp
#include <iostream>
#include <vector>

#define ull unsigned long long int

using namespace std;

int main() {
    int t;
    cin >> t;
    while (t--) {
        ull n, k;
        cin >> n >> k;
        vector<ull> v(n);
        for (int i = 0; i < n; i++) {
            cin >> v[i];
        }
        ull ans = 0;
        ull sum = v[0];
        for (int i = 1; i < n; i++) {
            if ((v[i] * 100) > sum * k) {
                ull x = v[i] * 100 - sum * k;
                ull xDivK = x / k;
                if (x % k != 0) {
                    ans += xDivK + 1;
                    sum += xDivK + 1;
                } else {
                    ans += xDivK;
                    sum += xDivK;
                }
            }
            sum += v[i];
        }
        cout << ans << endl;
    }
}
```
