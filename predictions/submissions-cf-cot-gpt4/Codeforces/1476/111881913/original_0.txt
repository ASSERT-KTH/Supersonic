Step 1: The header file `#include <bits/stdc++.h>` is a GCC-specific library that includes most of the standard libraries in C++. Although it is very convenient to use for competitive programming, it's not recommended for production use because it's non-standard and non-portable. We can include only the libraries that are necessary (`iostream` and `vector` in this case) to optimize the compilation time.

Step 2: The `using namespace std;` statement can lead to name clashes because it imports all names from the std namespace into the global namespace. It's better to use the std:: prefix where necessary.

Step 3: The `cin` and `cout` streams can be slow. We can speed up the input/output operations by using `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(NULL);` at the beginning of the main function. This will untie `cin` from `cout`, and stop them from automatically flushing the standard streams before each Input/Output operation.

Step 4: Within the while loop, we can avoid the second addition operation to `sum` by merging it with the first addition operation.

Here's the optimized version of the program:

```cpp
#include <iostream>
#include <vector>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  
  int t;
  std::cin >> t;
  
  while (t--) {
    unsigned long long int n, k;
    std::cin >> n >> k;
    
    std::vector<unsigned long long int> v(n);
    
    for (int i = 0; i < n; i++) {
      std::cin >> v[i];
    }
    
    unsigned long long int ans = 0;
    unsigned long long int sum = v[0];
    
    for (int i = 1; i < n; i++) {
      if ((v[i] * 100) > sum * k) {
        unsigned long long int x = v[i] * 100 - sum * k;
        
        if (x % k != 0) {
          ans += (x / k) + 1;
          sum = sum + v[i] + (x / k + 1);
        } else {
          ans += (x / k);
          sum = sum + v[i] + (x / k);
        }
      } else {
        sum += v[i];
      }
    }
    
    std::cout << ans << "\n";
  }
}
```