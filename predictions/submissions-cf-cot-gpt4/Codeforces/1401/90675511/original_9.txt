The given program can be optimized in several ways:

1. Avoiding the use of Variable-Length Arrays (VLAs): In C++, Variable-Length Arrays (VLAs) are not part of the standard. Instead, dynamic allocation should be used.

2. Reducing the number of loops: The loops can be combined to reduce time complexity. The loop that finds the minimum and the one that populates `b` and `c` arrays can be merged. 

3. Avoiding unnecessary variables: The `flag` variable is not necessary. We can break the loop and print "NO" as soon as we find `a[i] > a[i+1]`.

4. Optimizing the use of the sort function: Instead of sorting the whole array, we only need to sort the elements that are divisible by the minimum element. This can be achieved by using a vector and its associated sort function.

5. Using `std::endl` can cause unnecessary flushing of the stream, which can slow down the program. We should use "\n" instead.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  int t;
  cin >> t;
  while(t--) {
    int n;
    cin >> n;
    vector<int> a(n), b, c;
    int m = INT_MAX;
    for (int i = 0; i < n; i++) {
      cin >> a[i];
      m = min(m, a[i]);
    }
    for (int i = 0; i < n; i++) {
      if (a[i] % m == 0) {
        b.push_back(i);
        c.push_back(a[i]);
      }
    }
    sort(c.begin(), c.end());
    for (int i = 0; i < c.size(); i++)
      a[b[i]] = c[i];
    for (int i = 0; i < n - 1; i++)
      if (a[i] > a[i + 1]) {
        cout << "NO\n";
        goto end;
      }
    cout << "YES\n";
    end:;
  }
  return 0;
}
```

This optimized program reduces the number of loops, avoids using variable-length arrays, and reduces the time complexity of the sorting operation. It also avoids unnecessary stream flushing by using "\n" instead of `std::endl`.