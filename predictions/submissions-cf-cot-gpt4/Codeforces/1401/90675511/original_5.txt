Let's go step by step in optimizing the program:

1. Remove `#include<bits/stdc++.h>` and include only the necessary headers. `bits/stdc++.h` is known to increase compile time. Here we only need `#include<iostream>` and `#include<algorithm>`. 

2. Remove `ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);` unless you are doing competitive programming and every millisecond counts, it is not necessary to include these lines.

3. You are using variable length arrays `a[n], b[n], c[n];` which are not standard in C++. Instead of them, you can use `std::vector<int>` because it is more flexible and safer.

4. You don't need to sort the entire array again. You only need to check if the array is sorted or not. For this, you can use `std::is_sorted()` function from `<algorithm>`.

5. The three separate loops can be reduced to two loops. 

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
  int t;
  cin >> t;
  while(t--) {
    int n;
    cin >> n;
    vector<int> a(n), b(n), c(n);
    int m = INT_MAX;
    for (int i = 0; i < n; i++) {
      cin >> a[i];
      if (a[i] < m)
        m = a[i];
    }
    int k = 0;
    for (int i = 0; i < n; i++) {
      if (a[i] % m == 0) {
        b[k] = i;
        c[k] = a[i];
        k++;
      }
    }
    sort(c.begin(), c.begin() + k);
    for (int i = 0; i < k; i++)
      a[b[i]] = c[i];

    if (!is_sorted(a.begin(), a.end()))
      cout << "NO\n";
    else
      cout << "YES\n";
  }
  return 0;
}
```

This code is more optimized in terms of running time. The memory usage depends on the size of the input. It is not possible to optimize it further without a complete rewrite of the code.