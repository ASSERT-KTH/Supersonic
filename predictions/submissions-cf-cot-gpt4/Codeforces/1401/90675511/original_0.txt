In the given program, I can see a couple of areas where we can optimize:

1. We are using three arrays `a`, `b` and `c`. We can remove the usage of `b` array completely. Instead of storing indices, we can use a vector of pairs to store the elements and their indices together.

2. Since we are already sorting the array `c`, we don't need to check if the array `a` is sorted again. We can directly replace values in `a` with sorted values from `c`.

3. `#include <bits/stdc++.h>` is not a standard header file and it includes a lot of unnecessary libraries which increases the compilation time. It's better to include only the necessary libraries.

Now let's write the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int t;
    cin >> t;

    while(t--) {
        int n;
        cin >> n;
        
        vector<int> a(n);
        vector<pair<int, int>> vec;
        int m = INT_MAX;

        for (int i = 0; i < n; i++) {
            cin >> a[i];
            if (a[i] < m)
                m = a[i];
            if (a[i] % m == 0)
                vec.push_back({a[i], i});
        }

        sort(vec.begin(), vec.end());

        for (int i = 0; i < vec.size(); i++)
            a[vec[i].second] = vec[i].first;

        bool isSorted = true;
        for (int i = 1; i < n; i++){
            if (a[i] < a[i - 1]){
                isSorted = false;
                break;
            }
        }
        if (isSorted)
            cout << "YES" << "\n";
        else
            cout << "NO" << "\n";
    }
    return 0;
}
```