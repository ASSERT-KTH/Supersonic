#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
#pragma GCC optimize("O3")
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("unroll-loops")
#define mod 1000000007
#define ll long long
#define ip pair<int, int>
#define inf 1000000000
#define nl "\n"
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<pair<int, int>> vip;
typedef vector<pair<ll, ll>> vll;

inline ll read() {
  register ll x = 0, f = 1;
  char ch = getchar();
  while (!isdigit(ch)) {
    if (ch == '-')
      f = -1;
    ch = getchar();
  }
  while (isdigit(ch)) {
    x = (x << 3) + (x << 1) + ch - '0';
    ch = getchar();
  }
  return (f == 1) ? x : -x;
}

int gcd(int a, int b) {
  while (b != 0) {
    int t = b;
    b = a % b;
    a = t;
  }
  return a;
}

ip slope(int x1, int y1, int x2, int y2) {
  int tmp1 = x2 - x1, tmp2 = y2 - y1;
  int tmp3 = gcd(abs(tmp1), abs(tmp2));
  if (tmp1 == 0 && tmp2 == 0)
    return {0, 0};
  if (tmp1 == 0)
    return {1, 0};
  if (tmp2 == 0)
    return {0, 1};
  tmp1 /= tmp3, tmp2 /= tmp3;
  if (tmp1 < 0)
    tmp1 *= -1, tmp2 *= -1;
  return {tmp2, tmp1};
}

ip cept(int x1, int y1, int x2, int y2) {
  int tmp1 = y2 * x1 - x2 * y1, tmp2 = x2 - x1;
  int tmp3 = gcd(abs(tmp1), abs(tmp2));
  if (tmp1 == 0 && tmp2 == 0)
    return {0, 0};
  if (tmp1 == 0)
    return {0, 1};
  if (tmp2 == 0)
    return {x1, 0};
  tmp1 /= tmp3, tmp2 /= tmp3;
  if (tmp1 < 0)
    tmp1 *= -1, tmp2 *= -1;
  return {tmp1, tmp2};
}

int main() {
  ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
  int n;
  cin >> n;
  vip a(n);
  for (int i = 0; i < n; i++)
    cin >> a[i].first >> a[i].second;
  unordered_set<pair<ip, ip>> s;
  unordered_map<ip, unordered_set<ip>> mp;
  for (int i = 0; i < n; i++)
    for (int j = i + 1; j < n; j++) {
      ip s1 = slope(a[i].first, a[i].second, a[j].first, a[j].second);
      ip c = cept(a[i].first, a[i].second, a[j].first, a[j].second);
      s.insert({s1, c});
      mp[s1].insert(c);
    }
  ll x = 0;
  for (auto &i : mp) {
    int si = i.second.size();
    x += 1LL * si * (si - 1) / 2;
  }
  ll si = s.size();
  cout << si * (si - 1) / 2 - x;
}