#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;

#define mod 1000000007
#define ok order_of_key
#define fo find_by_order
#define ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>
#define ll long long
#define rep(i, a, b) for (int i = (a); i < (b); i++)
#define repp(i, n) for (int i = (0); i < (n); i++)
#define repr(i, n) for (int i = (n); i >= 0; i--)
#define lb lower_bound
#define ub upper_bound
#define gcd(a, b) __gcd((a), (b))
typedef pair<int, int> ip;

ip slope(int x1, int y1, int x2, int y2) {
    int tmp1 = x2 - x1, tmp2 = y2 - y1;
    int tmp3 = gcd(abs(tmp1), abs(tmp2));
    tmp1 /= tmp3, tmp2 /= tmp3;
    if (tmp1 < 0)
        tmp1 *= -1, tmp2 *= -1;
    return {tmp2, tmp1};
}

ip cept(int x1, int y1, int x2, int y2) {
    int tmp1 = y2 * x1 - x2 * y1, tmp2 = x2 - x1;
    int tmp3 = gcd(abs(tmp1), abs(tmp2));
    tmp1 /= tmp3, tmp2 /= tmp3;
    if (tmp1 < 0)
        tmp1 *= -1, tmp2 *= -1;
    return {tmp1, tmp2};
}

int main() {
    ios_base::sync_with_stdio(false);
    int n;
    cin >> n;
    ip a[n];
    repp(i, n) cin >> a[i].first >> a[i].second;
    set<pair<ip, ip>> s;
    map<ip, set<ip>> mp;
    repp(i, n) {
        rep(j, i + 1, n) {
            ip s1 = slope(a[i].first, a[i].second, a[j].first, a[j].second);
            ip c = cept(a[i].first, a[i].second, a[j].first, a[j].second);
            s.insert({s1, c});
            mp[s1].insert(c);
        }
    }
    int x = 0;
    for (auto i : mp) {
        int si = i.second.size();
        x += 1LL * si * (si - 1) / 2;
    }
    int si = s.size();
    cout << si * (si - 1) / 2 - x;
}