Here are some optimization steps:

1. Remove duplicated "using namespace std;" line: This line appears twice in the code. Removing one will not impact the functionality but will make the code cleaner.

2. Remove unutilized variables: The variables, `ld`, `ll`, `INF`, `pi`, `INF64`, `mod`, and `mxN` are not used in the code at all. Removing these will reduce memory usage.

3. Reduce redundant computation: `st.upper_bound(f)` is computed twice in the code. Storing this value in a variable and reusing it will reduce computation time.

4. Use `printf` and `scanf` instead of `cin` and `cout`: `printf` and `scanf` are faster than `cin` and `cout`. Additionally, `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` are used with `cin` and `cout` to make them as fast as `scanf` and `printf`, but we can skip these statements by directly using `scanf` and `printf`.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
#define pb push_back
#define print(x) cerr << "[" << #x << ": " << x << "]";
#define println(x) cerr << "[" << #x << ": " << x << "]\n";
#define show(v)                                                                \
  for (int i = 0; i < (int)v.size(); ++i)                                      \
    cout << v[i] << (i == (int)v.size() - 1 ? "\n" : " ");
#define debug(v)                                                               \
  for (int i = 0; i < (int)v.size() - 1; ++i) {                                \
    print(i);                                                                  \
    cout << "   ";                                                             \
    println(v[i])                                                              \
  }
using namespace std;
clock_t time_p = clock();
void Time() {
  time_p = clock() - time_p;
  cerr << "Time Taken : " << (float)(time_p) / CLOCKS_PER_SEC << "\n";
}

void solve() {
  int n;
  scanf("%d", &n);
  multiset<int> st;
  int mp[100005];
  memset(mp, 0, sizeof(mp));
  int ans = 0;
  map<int, int> cnt;
  set<int> cst;
  for (int i = 0; i < n; ++i) {
    int x;
    scanf("%d", &x);
    if (mp[x]) {
      auto idx = st.find(mp[x]);
      cnt[mp[x]]--;
      st.erase(idx);
    }
    mp[x]++;
    cnt[mp[x]]++;
    cst.insert(x);
    st.insert(mp[x]);
    auto f = *st.begin();
    auto sec = st.upper_bound(f);
    if (sec == st.end())
      sec--;
    auto s = *sec;
    int w = cnt[f], y = cnt[s];
    if (cst.size() == 1)
      ans = i;
    if (max(w, y) == i + 1 && f == 1)
      ans = i;
    if (f * w + s * y == i + 1) {
      if (y == 1) {
        if (s == 1 || s - 1 == f)
          ans = i;
      } else if (w == 1) {
        if (f == 1 || f - 1 == s)
          ans = i;
      } else if (y == 1 && w == 1) {
        if (max(f, s) - 1 == min(f, s) || min(f, s) == 1)
          ans = i;
      }
    }
  }
  ans++;
  printf("%d\n", ans);
}

int main() {
  solve();
  Time();
  return 0;
}
```