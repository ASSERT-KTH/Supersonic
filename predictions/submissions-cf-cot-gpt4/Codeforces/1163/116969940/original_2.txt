The provided program has several areas that could be optimized for better performance and memory usage. Here are the steps for optimization:

1. Remove the duplicate `using namespace std;` line.

2. Avoid using `#include <bits/stdc++.h>`. It is a GCC specific library which includes almost all standard C++ libraries. This might increase the compile time drastically. Instead, include only the specific libraries you need.

3. Remove unused macros (like pb, ld, ll, lld, print, println, show, debug). They just increase the size of your code and make it harder to understand.

4. Remove unused variables (`pi`, `INF`, `INF64`, `mod`, `mxN`). They just occupy memory and are not being used anywhere in the program.

5. Avoid using `std::endl` when you want to just print a line break. `std::endl` also flushes the output which might affect performance. Use "\n" instead.

6. Remove the `Time()` function if you don't need to measure the execution time of your program.

7. The `clock_t time_p = clock();` line at the beginning of the program is also unnecessary if you don't need to measure the execution time.

8. Remove `ios_base::sync_with_stdio(0);`, `cin.tie(NULL);`, `cout.tie(NULL);`. These are usually used to speed up cin and cout, but in this program, we have only one cin and one cout, so these lines might not be necessary.

Here is the optimized program:

```cpp
#include <iostream>
#include <set>
#include <map>
#include <cstring>

using namespace std;

void solve() {
    int n;
    cin >> n;
    multiset<int> st;
    int mp[100005];
    memset(mp, 0, sizeof(mp));
    int ans = 0;
    map<int, int> cnt;
    set<int> cst;
    for (int i = 0; i < n; ++i) {
        int x;
        cin >> x;
        if (mp[x]) {
            auto idx = st.find(mp[x]);
            cnt[mp[x]]--;
            st.erase(idx);
        }
        mp[x]++;
        cnt[mp[x]]++;
        cst.insert(x);
        st.insert(mp[x]);
        auto f = *st.begin();
        auto sec = st.upper_bound(f);
        if (sec == st.end())
            sec--;
        auto s = *sec;
        int w = cnt[f], y = cnt[s];
        if (cst.size() == 1)
            ans = i;
        if (max(w, y) == i + 1 && f == 1)
            ans = i;
        if (f * w + s * y == i + 1) {
            if (y == 1) {
                if (s == 1 || s - 1 == f)
                    ans = i;
            } else if (w == 1) {
                if (f == 1 || f - 1 == s)
                    ans = i;
            } else if (y == 1 && w == 1) {
                if (max(f, s) - 1 == min(f, s) || min(f, s) == 1)
                    ans = i;
            }
        }
    }
    ans++;
    cout << ans << "\n";
}

int main() {
    solve();
    return 0;
}
```

This optimized program is smaller, uses less memory, and should run a little bit faster.