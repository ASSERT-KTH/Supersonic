The given code can be optimized in the following ways:

1. Remove Repeated Includes: The `using namespace std;` directive is included twice. We only need to include it once.

2. Unnecessary Macros: The macros `pb`, `ld`, `ll`, `lld`, `print`, `println`, `show` and `debug` are not used in the code. Removing them will reduce memory overhead and make the code cleaner.

3. Unused Constants: The constants `INF`, `pi`, `INF64`, `mod` and `mxN` are not used in the code. Removing them will again reduce memory overhead.

4. Unnecessary Timing Function: The `Time` function is not necessary unless you want to time the execution of your code. If not needed, it can be removed.

5. Use of `memset`: The `memset` function is used to set all values of the array `mp` to 0. C++ provides a way to initialize all elements of an array to 0 at the time of declaration, so we can use that instead of `memset`.

6. Unnecessary Variables: The variable `t` is declared but not used in the program. It can be removed.

By applying the above recommendations, the optimized code becomes:

```cpp
#include <bits/stdc++.h>
using namespace std;

void solve() {
  int n;
  cin >> n;
  multiset<int> st;
  int mp[100005] = {0};
  int ans = 0;
  map<int, int> cnt;
  set<int> cst;
  for (int i = 0; i < n; ++i) {
    int x;
    cin >> x;
    if (mp[x]) {
      auto idx = st.find(mp[x]);
      cnt[mp[x]]--;
      st.erase(idx);
    }
    mp[x]++;
    cnt[mp[x]]++;
    cst.insert(x);
    st.insert(mp[x]);
    auto f = *st.begin();
    auto sec = st.upper_bound(f);
    if (sec == st.end())
      sec--;
    auto s = *sec;
    int w = cnt[f], y = cnt[s];
    if (cst.size() == 1)
      ans = i;
    if (max(w, y) == i + 1 && f == 1)
      ans = i;
    if (f * w + s * y == i + 1) {
      if (y == 1) {
        if (s == 1 || s - 1 == f)
          ans = i;
      } else if (w == 1) {
        if (f == 1 || f - 1 == s)
          ans = i;
      } else if (y == 1 && w == 1) {
        if (max(f, s) - 1 == min(f, s) || min(f, s) == 1)
          ans = i;
      }
    }
  }
  ans++;
  cout << ans << endl;
}

int main() {
  ios_base ::sync_with_stdio(0);
  cin.tie(NULL);
  cout.tie(NULL);
  cout.precision(35);
  solve();
  return 0;
}
```

This version of the code is more memory efficient and cleaner.