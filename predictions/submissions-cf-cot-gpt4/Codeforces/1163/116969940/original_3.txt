Optimization Step-by-Step:

1. Remove the repeated line `using namespace std;`. This is not an optimization but it's good practice to not have redundant code.

2. Avoid `#include <bits/stdc++.h>` as it includes all the standard libraries which can slow down the compilation time. Instead, include only the necessary libraries. 

3. Avoid using `#define pb push_back`. It is not used in the code.

4. Avoid using `#define ld long double`. It is not used in the code.

5. Avoid using `#define ll long long`. It is not used in the code.

6. Avoid using `#define lld long double`. It is not used in the code.

7. Avoid using `#define print(x) cerr << "[" << #x << ": " << x << "]";`. It is not used in the code.

8. Avoid using `#define println(x) cerr << "[" << #x << ": " << x << "]\n";`. It is not used in the code.

9. Avoid using `#define show(v)`. It is not used in the code.

10. Avoid using `#define debug(v)`. It is not used in the code.

11. Remove unused constants `INF`, `pi`, `INF64`, `mod`, `mxN`.

12. Remove `clock_t time_p = clock();` and `void Time()`. These are not necessary for the function of the program and just add extra time. 

13. Remove `ios_base ::sync_with_stdio(0);`, `cin.tie(NULL);`, `cout.tie(NULL);`, `cout.precision(35);`. These statements are unnecessary for this code. They are usually used to speed up input/output in competitive programming, but this code doesn't have large amounts of input/output where this would be necessary.

14. Remove the variable `t` as it's not used.

Here is the optimized code:

```cpp
#include <iostream>
#include <set>
#include <map>
#include <cstring>
using namespace std;

void solve() {
    int n;
    cin >> n;
    multiset<int> st;
    int mp[100005];
    memset(mp, 0, sizeof(mp));
    int ans = 0;
    map<int, int> cnt;
    set<int> cst;
    for (int i = 0; i < n; ++i) {
        int x;
        cin >> x;
        if (mp[x]) {
            auto idx = st.find(mp[x]);
            cnt[mp[x]]--;
            st.erase(idx);
        }
        mp[x]++;
        cnt[mp[x]]++;
        cst.insert(x);
        st.insert(mp[x]);
        auto f = *st.begin();
        auto sec = st.upper_bound(f);
        if (sec == st.end())
            sec--;
        auto s = *sec;
        int w = cnt[f], y = cnt[s];
        if (cst.size() == 1)
            ans = i;
        if (max(w, y) == i + 1 && f == 1)
            ans = i;
        if (f * w + s * y == i + 1) {
            if (y == 1) {
                if (s == 1 || s - 1 == f)
                    ans = i;
            } else if (w == 1) {
                if (f == 1 || f - 1 == s)
                    ans = i;
            } else if (y == 1 && w == 1) {
                if (max(f, s) - 1 == min(f, s) || min(f, s) == 1)
                    ans = i;
            }
        }
    }
    ans++;
    cout << ans << endl;
}

int main() {
    solve();
    return 0;
}
```