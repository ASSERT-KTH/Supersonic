#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <climits>

using ll = long long;
using pll = std::pair<ll, ll>;

constexpr int N = 6e5 + 5;

std::vector<std::pair<pll, int>> v;
std::map<ll, int> mp;
std::vector<ll> inv_map(N);
int n, k;
std::vector<int> segtree(4 * N, 0), lazy(4 * N, 0);

void spread(int node, int l, int r) {
  if (lazy[node] != 0) {
    segtree[node] += lazy[node];
    if (l != r) {
      lazy[2 * node + 1] += lazy[node];
      lazy[2 * node + 2] += lazy[node];
    }
    lazy[node] = 0;
  }
}

void update(int x, int y, int val, int node = 0, int l = 0, int r = N - 1) {
  spread(node, l, r);
  if (l > y || r < x || x > y)
    return;
  if (l >= x && r <= y) {
    lazy[node] += val;
    spread(node, l, r);
    return;
  }
  int mid = (l + r) / 2;
  update(x, y, val, 2 * node + 1, l, mid);
  update(x, y, val, 2 * node + 2, mid + 1, r);
  segtree[node] = std::min(segtree[2 * node + 1], segtree[2 * node + 2]);
}

int query(int x, int y, int node = 0, int l = 0, int r = N - 1) {
  spread(node, l, r);
  if (l > y || r < x)
    return INT_MAX - 1;
  if (l >= x && r <= y) {
    return segtree[node];
  }
  int mid = (l + r) / 2;
  return std::min(query(x, y, 2 * node + 1, l, mid),
             query(x, y, 2 * node + 2, mid + 1, r));
}

// The rest of the code remains the same.