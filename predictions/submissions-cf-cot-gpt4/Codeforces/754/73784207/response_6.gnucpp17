#include<iostream>
#include<vector>
#include<map>
#include<algorithm>
#include<limits>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const int N = 6e5 + 5;

void fast() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
}

void update(int x, int y, int val, vector<int> &segtree, vector<int> &lazy, int node = 0, int l = 0, int r = N - 1) {
  //...
  update(x, y, val, segtree, lazy, 2 * node + 1, l, mid);
  update(x, y, val, segtree, lazy, 2 * node + 2, mid + 1, r);
  //...
}

int query(int x, int y, const vector<int> &segtree, vector<int> &lazy, int node = 0, int l = 0, int r = N - 1) {
  //...
  return min(query(x, y, segtree, lazy, 2 * node + 1, l, mid),
             query(x, y, segtree, lazy, 2 * node + 2, mid + 1, r));
}

void solve(vector<pll> &v, map<ll, int> &mp, vector<ll> &inv_map, vector<int> &segtree, vector<int> &lazy, int n, int k) {
  //...
}

int main() {
  fast();
  int n, k;
  cin >> n >> k;
  vector<pll> v;
  v.reserve(n);
  for (int i = 1; i <= n; ++i) {
    ll a, b;
    cin >> a >> b;
    v.push_back({{a, b}, i});
  }
  map<ll, int> mp;
  vector<ll> inv_map(N);
  vector<int> segtree(4 * N, 0);
  vector<int> lazy(4 * N, 0);
  solve(v, mp, inv_map, segtree, lazy, n, k);
}