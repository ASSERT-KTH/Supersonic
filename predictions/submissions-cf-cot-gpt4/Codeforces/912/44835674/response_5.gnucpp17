#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cassert>
#include <random>

const long long MAX = 1e18;
const int maxN = 16;
int p[maxN];
int n;

bool prime(int x) {
  for (int d = 2; d * d <= x; ++d) {
    if (x % d == 0) {
      return false;
    }
  }
  return true;
}

void safe_mul(long long &a, int b) {
  if (a <= MAX / b) {
    a *= b;
  } else {
    a = -1;
  }
}

void gen_all(const std::vector<int> &src, std::vector<long long> &dest, long long cur = 1, int ind = 0) {
  if (ind == src.size()) {
    dest.push_back(cur);
    return;
  }
  while (cur != -1) {
    gen_all(src, dest, cur, ind + 1);
    safe_mul(cur, src[ind]);
  }
}

long long cnt(long long val, const std::vector<long long> &A, const std::vector<long long> &B) {
  int ind = B.size() - 1;
  long long res = 0;
  for (const auto &e : A) {
    if (e > val)
      break;
    res += std::upper_bound(B.begin(), B.end(), val / e) - B.begin();
  }
  return res;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  
  std::cin >> n;
  for(int i = 0; i < n; i++)
    std::cin >> p[i];
  
  std::vector<long long> A, B;
  {
    const int B_sz = 9;
    std::vector<int> pA;
    for(int i = B_sz; i < n; i++)
      pA.push_back(p[i]);
    gen_all(pA, A);
    std::vector<int> pB;
    for(int i = 0; i < std::min(B_sz, n); i++)
      pB.push_back(p[i]);
    gen_all(pB, B);
  }
  
  std::sort(A.begin(), A.end()), std::sort(B.begin(), B.end());
  
  long long k;
  std::cin >> k;
  long long l = 0, r = 1e18;
  while (l + 1 != r) {
    auto m = (l + r) / 2;
    if (cnt(m, A, B) >= k)
      r = m;
    else
      l = m;
  }
  std::cout << r;
}