#ifndef DBG
#define NDEBUG
#endif
#include <bits/stdc++.h>
using namespace std;
#define cn const
#define cauto cn auto
#define FOR(i, from, to) for (int i = (from); i <= (to); ++i)
#define FORN(i, n) FOR(i, 0, (n)-1)
#define mp make_pair
#define pb push_back
#define F first
#define S second
#define X F
#define Y S
#define CONT(c) begin(c), end(c)
#define ARR(a, sz) (a), ((a) + (sz))
using ll = long long;
using ull = unsigned long long;
using uint = unsigned;
using dd = long double;
#ifdef DBG
cn bool dbg = true;
#else
cn bool dbg = false;
#endif
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
template <typename Key>
using ordered_set =
    __gnu_pbds::tree<Key, __gnu_pbds::null_type, std::less<Key>,
                     __gnu_pbds::rb_tree_tag,
                     __gnu_pbds::tree_order_statistics_node_update>;
template <typename Key, typename Value>
using ordered_map =
    __gnu_pbds::tree<Key, Value, std::less<Key>, __gnu_pbds::rb_tree_tag,
                     __gnu_pbds::tree_order_statistics_node_update>;
template <typename T> constexpr T sqr(const T &x) { return x * x; }
inline ll rd() {
  ll x;
  cin >> x;
  return x;
}
mt19937 gen(29);
cn int maxN = 16;
int p[maxN];
int n;
bool prime(int x) {
  for (int d = 2; d * d <= x; d++)
    if (x % d == 0)
      return false;
  return x > 1;
}
void gen_max_test() {
  freopen("input.txt", "w", stdout);
  cout << maxN << "\n";
  int last = 1;
  FORN(i, maxN) {
    while (!prime(++last)) {
    }
    cout << last << " ";
  }
}
cn ll MAX = 1e18;
inline void safe_mul(ll &a, int b) {
  if (a <= MAX / b)
    a *= b;
  else
    a = -1;
}
void gen_all(cn vector<int> &src, vector<ll> &dest) {
  int n = src.size();
  dest.resize(1 << n);
  for (int mask = 0; mask < (1 << n); ++mask) {
    dest[mask] = 1;
    for (int i = 0; i < n; ++i) {
      if (mask & (1 << i)) {
        safe_mul(dest[mask], src[i]);
      }
    }
  }
}
ll cnt(const vector<ll> &A, const vector<ll> &B, ll val) {
  int ind = B.size() - 1;
  ll res = 0;
  for (cauto e : A) {
    if (e > val)
      break;
    res += upper_bound(CONT(B), val / e) - begin(B);
  }
  return res;
}
int main() {
#ifdef MY
  freopen("input.txt", "r", stdin);
#else
#define TASKNAME ""
#endif
  if (!dbg) {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
  }
  cin >> n;
  FORN(i, n)
  cin >> p[i];
  vector<int> pA, pB;
  vector<ll> A, B;
  {
    cn int B_sz = 9;
    FOR(i, B_sz, n - 1)
    pA.pb(p[i]);
    gen_all(pA, A);
    FORN(i, min(B_sz, n))
    pB.pb(p[i]);
    gen_all(pB, B);
  }
  sort(CONT(A)), sort(CONT(B));
  cn int k = rd();
  ll l = 0, r = 1e18;
  while (l + 1 != r) {
    cauto m = (l + r) / 2;
    if (cnt(A, B, m) >= k)
      r = m;
    else
      l = m;
  }
  cout << r << "\n";
}