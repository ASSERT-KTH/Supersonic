#include <bits/stdc++.h>
using namespace std;
using ll = long long;

const int maxN = 16;
int p[maxN];
int n;

bool prime(int x) {
  for (int d = 2; d * d <= x; ++d)
    if (x % d == 0)
      return false;
  return true;
}

const ll MAX = 1e18;
void safe_mul(ll &a, int b) {
  if (a <= MAX / b)
    a *= b;
  else
    a = -1;
}

void gen_all(const vector<int> &src, vector<ll> &dest, ll cur = 1, int ind = 0) {
  if (ind == src.size()) {
    dest.push_back(cur);
    return;
  }
  while (cur != -1) {
    gen_all(src, dest, cur, ind + 1);
    safe_mul(cur, src[ind]);
  }
}

vector<ll> A, B;

ll cnt(ll val) {
  int ind = B.size() - 1;
  ll res = 0;
  for (const auto &e : A) {
    if (e > val)
      break;
    res += upper_bound(B.begin(), B.end(), val / e) - B.begin();
  }
  return res;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  
  cin >> n;
  for (int i = 0; i < n; ++i)
    cin >> p[i];
    
  const int B_sz = 9;
  vector<int> pA(n - B_sz);
  for (int i = B_sz; i < n; ++i)
    pA[i - B_sz] = p[i];
  gen_all(pA, A);
  
  vector<int> pB(min(B_sz, n));
  for (int i = 0; i < min(B_sz, n); ++i)
    pB[i] = p[i];
  gen_all(pB, B);
  
  sort(A.begin(), A.end());
  sort(B.begin(), B.end());
  
  int k;
  cin >> k;
  ll l = 0, r = 1e18;
  
  while (l + 1 != r) {
    auto m = (l + r) / 2;
    if (cnt(m) >= k)
      r = m;
    else
      l = m;
  }
  
  cout << r;
}