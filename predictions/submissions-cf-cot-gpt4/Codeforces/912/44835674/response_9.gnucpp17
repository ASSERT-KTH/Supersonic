#ifndef DBG
#define NDEBUG
#endif
#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <cassert>
#include <cmath>
#define cn const
#define cauto cn auto
#define FOR(i, from, to) for (int i = (from); i <= (to); ++i)
#define FORN(i, n) FOR(i, 0, (n)-1)
#define endl "\n"
#define pb push_back
#define CONT(c) begin(c), end(c)
#define ARR(a, sz) (a), ((a) + (sz))
using ll = long long;
#ifdef DBG
cn bool dbg = true;
#else
cn bool dbg = false;
#endif
cn int maxN = 16;
int p[maxN];
int n;
bool prime(int x) {
  for (int d = 2; d*d <= x; d++)
    if (x % d == 0)
      return false;
  return true;
}
cn ll MAX = 1e18;
void safe_mul(ll &a, int b) {
  if (a <= MAX / b)
    a *= b;
  else
    a = -1;
}
void gen_all(cn vector<int> &src, vector<ll> &dest, ll cur = 1, int ind = 0) {
  if (ind == src.size()) {
    dest.pb(cur);
    return;
  }
  while (cur != -1) {
    gen_all(src, dest, cur, ind + 1);
    safe_mul(cur, src[ind]);
  }
}
ll cnt(ll val, cn vector<ll> &A, cn vector<ll> &B) {
  int ind = B.size() - 1;
  ll res = 0;
  for (cauto e : A) {
    if (e > val)
      break;
    res += upper_bound(CONT(B), val / e) - begin(B);
  }
  return res;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cin >> n;
  FORN(i, n)
  cin >> p[i];
  vector<ll> A, B;
  {
    cn int B_sz = 9;
    vector<int> pA;
    FOR(i, B_sz, n - 1)
    pA.pb(p[i]);
    gen_all(pA, A);
    vector<int> pB;
    FORN(i, min(B_sz, n))
    pB.pb(p[i]);
    gen_all(pB, B);
  }
  sort(CONT(A)), sort(CONT(B));
  cn int k = n;
  ll l = 0, r = 1e18;
  while (l + 1 != r) {
    cauto m = (l + r) / 2;
    if (cnt(m, A, B) >= k)
      r = m;
    else
      l = m;
  }
  cout << r;
}