The given program is not poorly optimized in terms of algorithm complexity. However, there are few things that can be optimized to improve the performance of the program.

1. **Avoid using #include <bits/stdc++.h>**: This header file includes almost all standard C++ libraries, which can slow down the compilation process. It's better to include only the libraries that are actually used in the program.

2. **Avoid using 'using namespace std'**: It's a bad practice to use 'using namespace std' in C++ programs. It can lead to name clashes if the program uses variables or functions with names that are the same as functions or variables in the std namespace.

3. **Avoid defining the same macros multiple times**: In the given program, '#define pb push_back' is defined twice. This redundancy can be removed.

4. **Use the prefix increment operator when the value of the loop variable is not used in the loop**: The prefix increment operator is faster because it increments the value in place and does not create a copy. So, replace 'i++' with '++i' in all for-loops.

5. **Reserve space for the vector if the size is known beforehand**: Calling 'push_back' on a vector can lead to multiple reallocations and copies when the vector grows. To avoid this, call 'reserve' on the vector when the size is known beforehand.

Here's the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

#define all(dp2) (dp2).begin(), (dp2).end()
#define F first
#define S second
#define Th third
#define nl cout << endl;

using lld = long double;
using ll = long long int;
using ar = std::vector<ll>;
using mat = std::vector<std::vector<ll>>;

mat cn(ll n, ll m) { return std::vector<std::vector<ll>>(n, std::vector<ll>(m)); }
ll const MOD = 1000000007;

template <class T> inline bool chmin(T &a, T b) { return a > b ? a = b, 1 : 0; }
template <class T> inline bool chmadp2(T &a, T b) { return a < b ? a = b, 1 : 0; }
template <class T> inline void add(T &a, T b) { a += b; a >= MOD ? a - MOD : a; }
template <class T> inline void sub(T &a, T b) { a -= b; a < 0 ? a + MOD : a; }
template <class T> inline void mul(T &a, T b) { return (a * b) % MOD; }

template <typename T> std::ostream &operator<<(std::ostream &out, const std::vector<T> &v) {
  for (auto &dp2 : v)
    out << dp2 << ' ';
  return out;
}
template <class T> void remDup(std::vector<T> &v) {
  std::sort(all(v));
  v.erase(unique(all(v)), end(v));
}

bool comp1(char &s1, char &s2) { return s1 > s2; }

class Pair {
public:
  ll first, second;
};
bool comp3(const Pair &a, const Pair &b) { return a.F > b.F; }

class Trips {
public:
  ll first, second, third;
};
bool comp4(const Trips &a, const Trips &b) { return a.Th > b.Th; }

void readArray(ll a[], int n) {
  for (ll i = 0; i < n; ++i)
    cin >> a[i];
}

ll const inf = 1e9 + 7;
int const madp2n = 5e5 + 1;

void solve() {
  ll t1 = 1;
  for (ll tt = 1; tt <= t1; ++tt) {
    int n, m, T;
    cin >> n >> m >> T;
    std::vector<std::pair<int, int>> adj[n + 1];
    for (int i = 0; i < m; ++i) {
      int u, v, w;
      cin >> u >> v >> w;
      adj[u].push_back({v, w});
    }
    std::vector<std::vector<int>> dp(n + 1, std::vector<int>(n + 1, inf));
    std::vector<std::vector<int>> par(n + 1, std::vector<int>(n + 1, -1));
    dp[1][1] = 0;
    std::vector<ll> indc(n + 1, -1);
    for (int j = 1; j < n; ++j) {
      for (int i = 1; i <= n; ++i) {
        for (auto e : adj[i]) {
          ll to = e.F;
          if (dp[to][j + 1] > dp[i][j] + e.S && dp[i][j] + e.S <= T) {
            indc[to] = i;
            dp[to][j + 1] = dp[i][j] + e.S;
            par[to][j + 1] = i;
          }
        }
      }
    }
    int res = 0;
    for (int i = 1; i <= n; ++i)
      if (dp[n][i] <= T)
        res = i;
    std::vector<int> ans;
    ans.reserve(res);
    int cur = n;
    int jumps = res;
    ans.push_back(cur);
    while (jumps > 1) {
      ans.push_back(par[cur][jumps]);
      cur = par[cur][jumps];
      --jumps;
    }
    std::reverse(all(ans));
    cout << res << endl;
    for (ll i : ans)
      cout << i << " ";
  }
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  solve();
  return 0;
}
```