#include <bits/stdc++.h>
#define all(dp2) (dp2).begin(), (dp2).end()
#define F first
#define S second
#define pb push_back
#define f(i, a, b) for (ll i = a; i < b; i++)
#define what_is(dp2) cerr << #dp2 << " is " << dp2 << endl;
using lld = long double;
using ll = long long int;
using ar = std::vector<ll>;
using mat = std::vector<std::vector<ll>>;
mat cn(ll n, ll m) { return std::vector<std::vector<ll>>(n, std::vector<ll>(m)); }
ll const MOD = 1000000007;
template <class T> inline bool chmin(T &a, const T &b) { return a > b ? a = b, 1 : 0; }
template <class T> inline bool chmadp2(T &a, const T &b) {
  return a < b ? a = b, 1 : 0;
}
template <class T> inline void remDup(std::vector<T> &v) {
  sort(all(v));
  v.erase(unique(all(v)), std::end(v));
}
template <typename T> std::ostream &operator<<(std::ostream &out, const std::vector<T> &v) {
  for (const auto &dp2 : v)
    out << dp2 << ' ';
  return out;
}
bool comp1(char &s1, char &s2) { return s1 > s2; }
class Pair {
public:
  ll first, second;
};
bool comp2(const Pair &a, const Pair &b) { return a.first > b.first; }
class Trips {
public:
  ll first, second, third;
};
bool comp3(const Trips &a, const Trips &b) { return a.third > b.third; }
void readArray(ll a[], int n) {
  for (ll i = 0; i < n; i++)
    std::cin >> a[i];
}
void solve() {
  ll t1 = 1;
  for (ll tt = 1; tt <= t1; tt++) {
    int n, m, T;
    std::cin >> n >> m >> T;
    std::vector<std::pair<int, int>> adj[n + 1];
    for (int i = 0; i < m; i++) {
      int u, v, w;
      std::cin >> u >> v >> w;
      adj[u].pb({v, w});
    }
    std::vector<std::vector<int>> dp(n + 1, std::vector<int>(n + 1, 1e9 + 7));
    std::vector<std::vector<int>> par(n + 1, std::vector<int>(n + 1, -1));
    dp[1][1] = 0;
    std::vector<ll> indc(n + 1, -1);
    for (int j = 1; j < n; j++) {
      for (int i = 1; i <= n; i++) {
        for (auto e : adj[i]) {
          ll to = e.F;
          if (dp[to][j + 1] > dp[i][j] + e.S && dp[i][j] + e.S <= T) {
            indc[to] = i;
            dp[to][j + 1] = dp[i][j] + e.S;
            par[to][j + 1] = i;
          }
        }
      }
    }
    int res = 0;
    for (int i = 1; i <= n; i++)
      if (dp[n][i] <= T)
        res = i;
    std::vector<int> ans;
    int cur = n;
    int jumps = res;
    ans.pb(cur);
    while (jumps > 1) {
      ans.pb(par[cur][jumps]);
      cur = par[cur][jumps];
      jumps--;
    }
    reverse(all(ans));
    std::cout << res << "\n";
    for (ll i : ans)
      std::cout << i << " ";
  }
}
int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  solve();
  return 0;
}