Here are the optimizations that can be made:

1. Instead of using `#include <bits/stdc++.h>`, include only those libraries which are actually used in the program. This will reduce the compilation time.

2. Remove unused macros. `#define pb push_back`, `#define endl "\n"`, `#define ub upper_bound`, `#define lb lower_bound`, `#define pf pop_front`, `#define all(v) (v).begin(), (v).end()`, `#define fi first`, `#define se second` are not used in the program. Removing them will make your code cleaner and easier to read.

3. Avoid using `using namespace std;`. It can cause name collisions, which is a problem if you're using multiple libraries. Instead, use `std::` before every standard library object.

4. In the function `fun()`, the set `f` is cleared and then the same element is inserted again. This can be avoided by inserting the element only if it is not found.

5. `cin` and `cout` are slower than `scanf` and `printf`. If you want your program to run faster, consider using `scanf` and `printf`.

6. If the performance is a concern, avoid using `std::endl` to end lines. `std::endl` not only inserts a newline, but it also flushes the output buffer, which can be a costly operation. If you want to insert a newline, use `'\n'`.

7. `srand(time(0));` is not necessary if you're not using `rand()` function in your program.

Here is the optimized version of your program:

```cpp
#include <iostream>
#include <set>
#include <ctime>

void fun() {
  int n, r;
  std::cin >> n >> r;
  std::set<int> f;
  int a[n];
  for (auto &i : a)
    std::cin >> i;
  for (int i = 0; i < n; i++) {
    int k = 1;
    for (int j = 2; j * j <= a[i]; j++) {
      int kk = 0;
      while (a[i] % j == 0)
        a[i] /= j, kk++;
      if (kk & 1)
        k *= j;
    }
    if (a[i] != 1)
      k *= a[i];
    a[i] = k;
  }
  int ans = 1;
  for (int i = 0; i < n; i++) {
    if (f.find(a[i]) == f.end())
      f.insert(a[i]);
    else {
      ans++; 
      f.clear();
      f.insert(a[i]);
    }
  }
  std::cout << ans << '\n';
}

int main() {
  int t = 1;
  std::cin >> t;
  while (t--) {
    fun();
  }
}
```
