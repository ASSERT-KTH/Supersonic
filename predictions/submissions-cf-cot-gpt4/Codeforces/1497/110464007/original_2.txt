The given C++ code can be optimized mainly in terms of memory and runtime performance. Here are the steps for optimization:

1. Remove unused Macros: The given code has several unused macros like `pb`, `endl`, `ub`, `lb`, `pf`, `all`, `fi`, `se` and `fast`. Removing these will reduce memory usage and increase readability of the code.

2. Avoid `#include <bits/stdc++.h>`: This header file includes quite a lot of standard library headers which increases compilation time. It's better to include only the required headers.

3. Using Fast Input/Output: Instead of using `cin` and `cout`, using `scanf` and `printf` can be faster.

4. Use `unordered_set` instead of `set`: `unordered_set` generally provides faster insert and find operations compared to `set`.

5. Remove the unnecessary clear and insert operations: In the original code, for each element in the array, it is checking if it exists in the set or not. If it exists, it increases the counter, clears the set and inserts the element again. This is unnecessary since we can simply continue without clearing and inserting again.

Here's the optimized code:

```cpp
#include <iostream>
#include <unordered_set>
#include <cmath>
using namespace std;

void fun() {
    int n, r;
    scanf("%d %d", &n, &r);
    unordered_set<int> f;
    int a[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }
    
    for (int i = 0; i < n; i++) {
        int k = 1;
        for (int j = 2; j * j <= a[i]; j++) {
            int kk = 0;
            while (a[i] % j == 0)
                a[i] /= j, kk++;
            if (kk & 1)
                k *= j;
        }
        if (a[i] != 1)
            k *= a[i];
        a[i] = k;
    }
    
    int ans = 1;
    for (int i = 0; i < n; i++) {
        if (f.find(a[i]) != f.end())
            ans++;
        else
            f.insert(a[i]);
    }
    printf("%d\n", ans);
}

int main() {
    int t = 1;
    scanf("%d", &t);
    while (t--) {
        fun();
    }
    return 0;
}
```
Remember these optimizations are based on best practices and may not result in significant performance improvement for small inputs. The real difference is noticeable with larger inputs.