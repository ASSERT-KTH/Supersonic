The main optimization in this code can be done in the elimination of perfect square factors from the numbers in the array. Currently, the code is repeatedly dividing the number by j*j till it is no longer divisible. This is an O(n) operation. Instead, we can use the square root operation which is O(1) to eliminate all the perfect square factors at once.

Another minor optimization can be made in the part where the set is cleared. Instead of clearing and re-inserting the current number, we can keep the current number in the set and continue the iteration from the next number.

Here's the step-by-step optimization:

1. For eliminating perfect square factors, we can use the square root function of math library. The idea is to take the square root of a number and then square it again. If the resulting number is less than the original number, that means original number had some perfect square factor. We continue this process until the resulting number is equal to the original number. This ensures all perfect square factors are eliminated.

2. For the set clearing part, instead of clearing and re-inserting the current number, we can keep the current number in the set and continue the iteration from the next number. This is because the current number is already unique and doesn't need to be checked again.

Here's the optimized code:

```cpp
#include <algorithm>
#include <cmath>
#include <iostream>
#include <set>
#include <utility>
#include <vector>
using namespace std;
#define _rep(i, x, y) for (int i = (int)x; i < (int)y; ++i)
#define PII pair<int, int>
#define eb emplace_back
#define pb push_back
#define fi first
#define se second
#define PQ priority_queue
#define all(x) (x).begin(), (x).end()
typedef long long ll;
typedef vector<int> VI;
constexpr int mod = 1e9 + 7;
constexpr int KINF = 0x3f3f3f3f;
constexpr int INF = 0x7f7f7f7f;
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr), cout.tie(nullptr);
  int _;
  cin >> _;
  while (_--) {
    int n, k;
    cin >> n >> k;
    VI a(n);
    _rep(i, 0, n) {
      cin >> a[i];
      int sq;
      while ((sq = sqrt(a[i])) * sq != a[i]) {
        a[i] = sq;
      }
    }
    set<int> s;
    int ans = 1;
    _rep(i, 0, n) {
      if (s.count(a[i])) {
        ans++;
      } else {
        s.insert(a[i]);
      }
    }
    cout << ans << endl;
  }
  return 0;
}
```

Please note that the complexity of sqrt function can vary depending on the implementation, but it is usually faster than the repeated division approach.