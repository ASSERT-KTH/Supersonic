Here is the optimized version of your code with explanations below:

Optimization Step by Step:

1. In the function `ans`, the check `if (m == 0) return false;` is unnecessary because the loop wouldn't execute anyway if m is zero.

2. The condition `if (arr[0] == 1 || arr[m - 1] == n) return true;` is also not necessary because the following loop will cover these cases.

3. In the main function, you create a new vector `tempv` every time you find a divisor and then push it into the `v` vector. This process is unnecessary, which wastes both time and memory. You only need the largest pair of divisors. So, you can replace the vectors with two integer variables to store the largest pair of divisors.

4. Also, instead of calculating the size of `v` and storing it in a variable `vs`, you can directly use `v.size()` because it's a constant time operation.

5. The use of `bits/stdc++.h` is discouraged as it includes all standard libraries which can slow down the compile process. Instead, include only those libraries which are required.

Optimized Code:

```cpp
#include <iostream>
#include <cmath>
using namespace std;

bool ans(int arr[], int m, int n) {
  int c = 1;
  for (int i = 1; i < m; i++) {
    if (arr[i] == arr[i - 1] + 1)
      c++;
    else
      c = 1;
    if (c == 3) {
      return true;
    }
  }
  return false;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, d;
  cin >> n;
  if (n < 25)
    cout << -1 << endl;
  else {
    int divisor1 = 0, divisor2 = 0;
    for (int i = 1; i <= sqrt(n); i++) {
      if (n % i == 0) {
        divisor1 = i;
        divisor2 = n / i;
      }
    }
    if (divisor1 >= 5 && divisor2 >= 5) {
      int r = divisor1;
      int c = divisor2;
      char vow[] = {'a', 'e', 'i', 'o', 'u'};
      int imain = 0;
      for (int i = 0; i < r; i++) {
        int icopy = imain % 5;
        for (int j = 0; j < c; j++) {
          cout << vow[icopy];
          icopy = (icopy + 1) % 5;
        }
        imain = (imain + 1) % 5;
      }
    } else {
      cout << -1 << endl;
    }
  }
}
```
Note that this code is optimized for both runtime and memory usage.