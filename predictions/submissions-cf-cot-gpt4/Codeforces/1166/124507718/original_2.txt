The program you provided is already quite optimized. However, there are few minor improvements that could be made.

1. The function `ans` is defined but not used in the program anywhere. If it is not needed, it can be removed to reduce the overall size of the code.

2. Instead of using the vector of vectors to store the pairs of factors, we can just keep track of the maximum pair of factors whose values are both greater than or equal to 5. This will reduce the memory usage of the program and also slightly improve the runtime, as we won't have to push back into the vector for each pair of factors.

3. In the factorization loop, we need to only check up to `sqrt(n)`, but the check `if (n % i == 0)` is done twice when `i = sqrt(n)`. This can be optimized.

Here is the optimized version of your code considering the above points:

```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
    cin >> n;
    if (n < 25) {
        cout << -1 << endl;
    } else {
        int r = -1, c = -1;
        for (int i = 1; i * i <= n; ++i) {
            if (n % i == 0) {
                if (i >= 5 && n / i >= 5) {
                    r = i;
                    c = n / i;
                }
            }
        }
        if (r != -1 && c != -1) {
            char vow[] = {'a', 'e', 'i', 'o', 'u'};
            for (int i = 0; i < r; ++i) {
                for (int j = 0; j < c; ++j) {
                    cout << vow[(i + j) % 5];
                }
            }
        } else {
            cout << -1 << endl;
        }
    }
    return 0;
}
```

In this optimized program, I removed the unused function `ans`; replaced the vector of vectors with two integers `r` and `c` to keep track of the maximum pair of factors; and optimized the factorization loop to prevent redundant checks when `i = sqrt(n)`. Also, while printing the vowels, I used `(i + j) % 5` directly in the index instead of creating and updating `imain` and `icopy`. This simplifies the code and avoids unnecessary memory usage.