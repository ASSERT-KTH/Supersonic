Optimization Steps:

1. Instead of storing pairs of divisors in a 2D vector, we can directly keep track of the maximum pair of divisors that are both greater than or equal to 5. This will save memory as we don't need to store all divisors, just the pair that we are interested in.

2. The vector `tempv` that is being used to store divisor pairs is not necessary. Instead, we can directly compare and store the divisor pairs in variables `r` and `c`.

3. We don't need to use the `bool ans()` function as it is not being used anywhere in the code.

4. We can directly print the characters instead of storing them in an array. This can save some memory.

5. The `d` variable in the main function is declared but not used anywhere. We can remove it.

Optimized Code:

```cpp
#include <iostream>
#include <cmath>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n, r = 0, c = 0;
  cin >> n;
  
  if (n < 25) {
    cout << -1 << endl;
  } else {
    for (int i = 1; i <= sqrt(n); i++) {
      if (n % i == 0) {
        if (i >= 5 && n / i >= 5) {
          r = i;
          c = n / i;
        }
      }
    }
    if (r) {
      char vow[] = {'a', 'e', 'i', 'o', 'u'};
      int imain = 0;
      for (int i = 0; i < r; i++) {
        int icopy = imain % 5;
        for (int j = 0; j < c; j++) {
          cout << vow[icopy];
          icopy = (icopy + 1) % 5;
        }
        imain = (imain + 1) % 5;
      }
    } else {
      cout << -1 << endl;
    }
  }
}
```

This version of the program uses less memory by not storing unnecessary values in vectors and variables. It also has a slightly improved running time because it uses fewer operations.