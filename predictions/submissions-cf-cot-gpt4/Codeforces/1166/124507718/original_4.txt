Here are some steps to optimize your code:

1. Remove the `#include <bits/stdc++.h>` header. It's a GCC extension that includes most of the standard libraries. It's not good to use it because it includes a lot more than you need, slowing down the compilation process. Instead, include only the specific libraries you need (`iostream`, `vector`, `cmath` in this case).

2. Instead of pushing back a vector into another vector, it's more efficient to use `emplace_back` which constructs the object in place. This can reduce the overhead of temporary objects being created.

3. The function `ans` is not used anywhere in the code. So, its presence will use some memory unnecessarily. It can be removed.

4. The `vow` array doesn't need to be declared for each iteration. Declare it outside the loop to save memory.

5. The variables `n` and `d` are declared but `d` is not used anywhere in the program. Remove it to save memory.

6. Initialize the vector `tempv` at the time of declaration to save some time.

7. Instead of using `endl`, use `'\n'` which is faster because `endl` cause flushing of the stream which can slow down the program.

Here is the optimized code:

```c++
#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n;
  cin >> n;
  if (n < 25)
    cout << -1 << '\n';
  else {
    vector<vector<int>> v;
    for (int i = 1; i <= sqrt(n); i++) {
      if (n % i == 0) {
        v.emplace_back(vector<int>{i, n / i});
      }
    }
    int vs = v.size();
    if (v[vs - 1][0] >= 5 && v[vs - 1][1] >= 5) {
      int r = v[vs - 1][0];
      int c = v[vs - 1][1];
      char vow[] = {'a', 'e', 'i', 'o', 'u'};
      for (int i = 0, imain = 0; i < r; i++, imain = (imain + 1) % 5) {
        for (int j = 0, icopy = imain % 5; j < c; j++, icopy = (icopy + 1) % 5) {
          cout << vow[icopy];
        }
        cout << '\n';
      }
    } else {
      cout << -1 << '\n';
    }
  }
  return 0;
}
```
