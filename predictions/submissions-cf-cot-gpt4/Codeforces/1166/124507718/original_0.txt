Optimization Step by Step:

1. In the function 'ans,' the 'c' variable is incremented even when 'arr[i]' and 'arr[i-1]' are not consecutive. This incrementation is not useful. Therefore, we can remove it. 

2. We are using 'vector<vector<int>>' which is a 2D dynamic array. We don't need to store all the pairs of numbers that can multiply to give 'n'. We just need the last pair. So instead of using a 2D vector, we can use two integer variables to store the last pair.

3. In the loop that finds the factors of 'n', we don't need to calculate 'sqrt(n)' in each iteration. We can compute 'sqrt(n)' once and store it in a variable and use this variable in the loop condition. This will save computation time.

4. The 'tempv' vector is pushed back into the 'v' vector even when the current pair of numbers don't satisfy the condition 'i>=5' and 'n/i >=5'. We can check this condition before pushing the vector and hence avoid unnecessary memory allocation. 

5. We don't need the 'd' variable in the main function as it is never used.

Optimized Program:

```cpp
#include <bits/stdc++.h>
using namespace std;

bool ans(int arr[], int m, int n) {
  if (m == 0)
    return false;
  if (arr[0] == 1 || arr[m - 1] == n)
    return true;
  int c = 1;
  for (int i = 1; i < m; i++) {
    if (arr[i] == arr[i - 1] + 1)
      c++;
    if (c == 3) {
      return true;
    }
  }
  return false;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n;
  cin >> n;
  if (n < 25)
    cout << -1 << endl;
  else {
    int r = -1, c = -1;
    int sqrtn = sqrt(n);
    for (int i = 1; i <= sqrtn; i++) {
      if (n % i == 0 && i >= 5 && n / i >= 5) {
        r = i;
        c = n / i;
      }
    }
    if (r != -1 && c != -1) {
      char vow[] = {'a', 'e', 'i', 'o', 'u'};
      int imain = 0;
      for (int i = 0; i < r; i++) {
        int icopy = imain % 5;
        for (int j = 0; j < c; j++) {
          cout << vow[icopy];
          icopy = (icopy + 1) % 5;
        }
        imain = (imain + 1) % 5;
      }
    } else {
      cout << -1 << endl;
    }
  }
}
```
Note: The optimization of the function 'ans' is not reflected in the final code as this function is never called in the main function. The function can be removed if not required.