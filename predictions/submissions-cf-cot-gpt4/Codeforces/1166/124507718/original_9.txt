Let's go through the code and point out the areas which can be optimized.

1. Instead of using 'bits/stdc++.h' you can use only needed libraries. This will reduce the compilation time of the program. 

2. In the function 'ans' it iterates through the entire array even if the condition 'c == 3' is met. We can break the loop when the condition is met to optimize the time.

3. In the main function, instead of storing the factors of number 'n' in a 2D vector and then checking the last element, we can simply store the last valid pair of factors in two separate variables. This will save a lot of memory as we do not need to store all the factors.

4. We are pushing back elements to a temporary vector and then pushing this vector to another vector. This can be simplified by directly pushing back the values into the main vector.

Optimized program:

```
#include <iostream>
#include <cmath>
using namespace std;

bool ans(int arr[], int m, int n) {
  if (m == 0)
    return false;
  if (arr[0] == 1 || arr[m - 1] == n)
    return true;
  int c = 1;
  for (int i = 1; i < m; i++) {
    if (arr[i] == arr[i - 1] + 1)
      c++;
    else
      c = 1;
    if (c == 3) {
      return true;
      break;  // breaks the loop when c == 3
    }
  }
  return false;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, r = -1, c = -1;
  cin >> n;
  if (n < 25)
    cout << -1 << endl;
  else {
    for (int i = 1; i <= sqrt(n); i++) {
      if (n % i == 0) {
        if (i >= 5 && n / i >= 5) {
          r = i;  // storing the factor directly in r and c
          c = n / i;
        }
      }
    }
    if (r != -1 && c != -1) {
      char vow[] = {'a', 'e', 'i', 'o', 'u'};
      int imain = 0;
      for (int i = 0; i < r; i++) {
        int icopy = imain % 5;
        for (int j = 0; j < c; j++) {
          cout << vow[icopy];
          icopy = (icopy + 1) % 5;
        }
        imain = (imain + 1) % 5;
      }
    } else {
      cout << -1 << endl;
    }
  }
  return 0;
}
```

The optimized program has lesser memory usage because it does not store all the factors of 'n' in a 2D vector and it has lesser time complexity because the loop in the function 'ans' breaks when 'c == 3'.