Here are some of the possible optimizations:

1. Reduce the number of vector operations: In the current code, a vector of integer vectors is used to store each pair of factors of the user input number. But the program only needs the last pair of factors that both are greater or equal to 5. So, we can replace the vector of vectors with two integer variables and update them in the loop.

2. Remove unnecessary variable 'imain': The variable 'imain' is used to calculate 'icopy', but it is not necessary as we can calculate 'icopy' directly from 'i'.

3. Use 'printf' instead of 'cout': This will slightly improve the performance because 'printf' is faster than 'cout'.

Here is the optimized code:

```c++
#include <cmath>
#include <cstdio>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, d, factor1 = 0, factor2 = 0;
  cin >> n;
  if (n < 25)
    printf("-1\n");
  else {
    for (int i = 1; i <= sqrt(n); i++) {
      if (n % i == 0) {
        factor1 = i;
        factor2 = n / i;
      }
    }
    if (factor1 >= 5 && factor2 >= 5) {
      char vow[] = {'a', 'e', 'i', 'o', 'u'};
      for (int i = 0; i < factor1; i++) {
        int icopy = i % 5;
        for (int j = 0; j < factor2; j++) {
          printf("%c", vow[icopy]);
          icopy = (icopy + 1) % 5;
        }
      }
    } else {
      printf("-1\n");
    }
  }
  return 0;
}
```

This optimized code will perform the same functionality as the original code but with less memory usage and faster execution time.