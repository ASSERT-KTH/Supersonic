Here are the steps of optimization:

1. The function `ans` is not used in the program. So, it can be removed.
2. In the current code, you are storing all the divisors of number `n` in a 2D vector `v` and then you are only using the last pair of divisors which are greater than or equal to 5. You can avoid the use of vector by keeping track of the last pair of divisors which are greater than or equal to 5 inside the loop itself.
3. You are using a temporary vector `tempv` to store the pair of factors and then you are pushing this into `v`. This is unnecessary as you are only interested in the last pair of factors which are greater than or equal to 5.
4. Instead of using `sqrt(n)` which involves a floating point operation, you can use `i * i <= n` which involves only integer operations and is faster.
5. The character array `vow` can be made `const` as you are not modifying it.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n;
  cin >> n;
  if (n < 25) {
    cout << -1 << endl;
    return 0;
  } 
  int r = -1, c = -1;
  for (int i = 1; i * i <= n; i++) {
    if (n % i == 0) {
      if (i >= 5 && n / i >= 5) {
        r = i;
        c = n / i;
      }
    }
  }
  
  if (r != -1 && c != -1) {
    const char vow[] = {'a', 'e', 'i', 'o', 'u'};
    for (int i = 0, imain = 0; i < r; i++, imain = (imain + 1) % 5) {
      for (int j = 0, icopy = imain; j < c; j++, icopy = (icopy + 1) % 5) {
        cout << vow[icopy];
      }
    }
  } else {
    cout << -1 << endl;
  }
  return 0;
}
```

This optimized version of the code reduces memory usage by avoiding unnecessary vector and reduces running time by avoiding unnecessary floating point operation, and improves code readability.