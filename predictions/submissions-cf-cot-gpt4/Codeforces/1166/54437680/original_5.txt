Step by step optimization:

1. Use of `#include <bits/stdc++.h>` is generally discouraged because it includes a lot of unnecessary header files which increases compilation time. We should only include the headers that we need.

2. `using namespace std;` is also discouraged as it can cause name clashes. A better practice is to use `std::` before the standard library functions.

3. `#define int long long` is not a good practice. It can lead to confusion. It's better to use `typedef` or `using` keywords.

4. The function `findbestr` is not used at all, so we can remove it to reduce memory usage.

5. There is no need to check `inp > 0 ? inp : -inp` because the `sort` function will handle the negatives. We can directly insert the input into the array.

6. We don't need to use `all(arr)` macro, we can directly use `arr.begin(), arr.end()`.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

typedef long long ll;
typedef std::vector<int> vi;

int main() {
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  int n, inp;
  std::cin >> n;
  vi arr(n);
  for (int i = 0; i < n; ++i) {
    std::cin >> arr[i];
  }
  std::sort(arr.begin(), arr.end());
  int l = 0, count = 0;
  for (int i = 0; i < n; ++i) {
    while (2 * arr[l] < arr[i])
      l++;
    count += i - l;
  }
  std::cout << count;
}
```