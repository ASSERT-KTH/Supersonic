The code you provided is already quite optimized, but there are few things we could do to improve it further. 

1. Use `unordered_map` instead of `map`: `std::map` in C++ uses a red-black tree internally which causes log(n) time complexity for insertion and retrieval whereas `std::unordered_map` uses a hash table resulting in an average time complexity of O(1) for same operations. But space complexity is higher for `unordered_map` than `map`.

2. Reserve space for `unordered_map`: Since we know the size of the array `adj`, we can reserve that much space for `unordered_map` to prevent unnecessary rehashes during insertions. 

3. Reduce number of global variables: Global variables consume memory for the entire lifetime of the program. Making variables local to a function where they are needed can save memory.

With those in mind, let's optimize the code:

```cpp
#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define ar array
#define ull unsigned ll

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

void solve(ull adj[], int n, ll& ans) {
  unordered_map<ull, int> mp;
  mp.reserve(n);
  for (int i = 0; i < n; ++i)
    ans += mp[adj[i]]++;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);

  const int mxN = 1e6;
  int n, m;
  ull val[mxN], adj[mxN] = {0};
  ll ans = 0;

  cin >> n >> m;
  for (int i = 0; i < n; ++i)
    val[i] = rng();
  for (int i = 0; i < m; ++i) {
    int u, v;
    cin >> u >> v, --u, --v;
    adj[u] += val[v];
    adj[v] += val[u];
  }
  solve(adj, n, ans);
  for (int i = 0; i < n; ++i)
    adj[i] += val[i];
  solve(adj, n, ans);
  cout << ans;
  return 0;
}
```