Here are some steps you can take to optimize the given C++ code.

1. Instead of using `std::map` which has a log(n) complexity for insertion and access, you can use `std::unordered_map` which has an average constant time complexity for those operations.

2. `ios::sync_with_stdio(0); cin.tie(0);` are used to unlink C and C++ standard streams which can make input/output operations faster, but in this case, it is not necessary because we are not using printf/scanf or other C standard streams. So, it can be removed.

3. In the main function, you are adding `val[i]` to `adj[i]` twice, once before the first call to `solve()` and once after. This can be optimized by doing this operation only once at the beginning.

4. The solve function is called twice with the exact same code. This is unnecessary and can be optimized by calling it only once after all the required operations are done.

5. The `adj` array is of type `unsigned long long` and is initialized with zero. It remains zero until it is used in the `main()` function. It can be optimized by declaring it in the `main()` function to reduce memory usage.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define ull unsigned ll
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
const int mxN = 1e6;
int n, m;
ull val[mxN];
ll ans;
void solve(ull adj[]) {
  unordered_map<ull, int> mp;
  for (int i = 0; i < n; ++i)
    ans += mp[adj[i]]++;
}
int main() {
  cin >> n >> m;
  ull adj[n] = {0};
  for (int i = 0; i < n; ++i)
    val[i] = rng();
  for (int i = 0; i < m; ++i) {
    int u, v;
    cin >> u >> v, --u, --v;
    adj[u] += val[v];
    adj[v] += val[u];
  }
  for (int i = 0; i < n; ++i)
    adj[i] += val[i];
  solve(adj);
  cout << ans;
  return 0;
}
```

Note: In the optimized code, I have used variable-length arrays which is a non-standard feature in C++. If you want to stick to the standard, you can use dynamic allocation with new/delete or use `std::vector` instead.