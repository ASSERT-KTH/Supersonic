Firstly, we can use an unordered_map instead of a map. The reason is that map in C++ is implemented as a Red-Black Tree, which has a time complexity of O(log(n)) for insertions, deletions, and search. On the other hand, an unordered_map is implemented as a Hash Table, where average case time complexity for search, insert and delete operation is O(1). 

Secondly, we can create a function to remove the repeating code in the main function. 

Here is the optimized version of the program:

```
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define ar array
#define ull unsigned ll
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
const int mxN = 1e6;
int n, m;
ull val[mxN], adj[mxN];
ll ans;

void calculate() {
  unordered_map<ull, int> mp;
  for (int i = 0; i < n; ++i)
    ans += mp[adj[i]]++;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cin >> n >> m;
  for (int i = 0; i < n; ++i)
    val[i] = rng();
  for (int i = 0; i < m; ++i) {
    int u, v;
    cin >> u >> v, --u, --v;
    adj[u] += val[v];
    adj[v] += val[u];
  }
  calculate();
  for (int i = 0; i < n; ++i)
    adj[i] += val[i];
  calculate();
  cout << ans;
  return 0;
}
```

In this optimized version, we have replaced map with unordered_map and created a function 'calculate' to remove code redundancy. This has optimized the program in terms of both running time and memory usage.