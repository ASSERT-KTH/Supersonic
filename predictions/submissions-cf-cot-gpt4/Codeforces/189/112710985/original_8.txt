The given program calculates the maximum possible sum of A, B, and C such that A*a + B*b + C*c equals 'n', where 'n', 'a', 'b', and 'c' are inputs and A, B, and C are non-negative integers. 

To optimize this program, we can limit the loop iterations for A and B to 'n/a' and 'n/b' respectively. This is because A and B cannot be larger than 'n/a' and 'n/b' respectively if A*a + B*b + C*c equals 'n'. 

This reduces the number of iterations and hence the running time. The memory usage is already optimized as we are using only a constant amount of extra space.

Here's the optimized version of your program:

```c++
#include <iostream>
using namespace std;
int main() {
  int n, a, b, c;
  cin >> n >> a >> b >> c;
  int ans = 0;
  for (int A = 0; A*a <= n; A++) {
    for (int B = 0; B*b <= n - A*a; B++) {
      int C = (n - (A * a + B * b)) / c;
      if (C >= 0 && (n - (A * a + B * b)) % c == 0) {
        ans = max(ans, A + B + C);
      }
    }
  }
  cout << ans << endl;
  return 0;
}
```