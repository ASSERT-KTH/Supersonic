The optimization steps are as follows:

1. Remove unnecessary '#include <bits/stdc++.h>' header file. It includes a lot of files which can slow down the compilation process. Instead, include only those header files which are required. In this case, '#include <vector>' and '#include <iostream>' are required.

2. Avoid using 'using namespace std'. It can lead to name collision if the program is large and complex.

3. Avoid using global variables if they can be avoided. Global variables stay in memory till the program is running which increases memory usage. In this case, 'n', 'm', 'k', 'ban', 'slf', 'used', 'cnt', 'res' and 'all' can be made local to 'main' and passed to 'rec' function as arguments.

4. Use 'std::ios::sync_with_stdio(false)' and 'std::cin.tie(NULL)' for faster I/O operations.

Here is the optimized code based on the above steps:

```cpp
#include <vector>
#include <iostream>

const int N = 200200;
const int mod = 1e9 + 7;

void rec(int i, int k, int used[10], int slf[10][10], int ban[10][10][10], int cnt[10][10], int &res, int &all) {
  if (i == k + 1) {
    res += 1;
    return;
  }
  int sv[10][10];
  for (int j = 0; j < i; j++) {
    if (used[i] & (1 << j) || slf[i][j])
      continue;
    for (int h = i + 1; h <= k; h++) {
      sv[i][h] = used[h];
      used[h] |= ban[i][j][h];
    }
    all += cnt[i][j];
    rec(i + 1, k, used, slf, ban, cnt, res, all);
    all -= cnt[i][j];
    for (int h = i + 1; h <= k; h++) {
      used[h] = sv[i][h];
    }
  }
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);
  
  int n, m, k;
  std::cin >> n >> m >> k;
  
  int ban[10][10][10] = {0}, slf[10][10] = {0};
  int used[10] = {0}, cnt[10][10] = {0};
  int res = 0, all = 0;
  
  std::vector<std::pair<int, int>> v[N], g[N];
  
  // Rest of the code as it is...
  
  rec(1, k, used, slf, ban, cnt, res, all);
  std::cout << res << "\n";
}
```
Please note that some of the optimizations like avoiding global variables may not be applicable if the code is part of a larger program where these variables are shared across multiple functions or files.