The optimization steps would be:

1. Replace `bits/stdc++.h` with specific header files. Using `bits/stdc++.h` increases compilation time as it includes all the standard libraries, most of which are not used in the program, so it's better to include only the necessary headers.

2. Replace `using namespace std;` with using individual elements of the `std` namespace. This is because `using namespace std;` can lead to naming conflicts if the program is extended or used as part of a larger project.

3. Use `ios_base::sync_with_stdio(false); cin.tie(NULL);` to disable the synchronization of all the C++ standard streams with their corresponding standard C streams. This can make I/O operations faster.

4. Use `reserve` method for `vector` to avoid reallocation.

5. Use `emplace_back` instead of `push_back` to avoid unnecessary copy.

6. Use `vector<bool>` to represent boolean arrays, which is more memory-efficient than `bool[]`.

Optimized program:

```c++
#include <iostream>
#include <algorithm>
#include <vector>
#define N 100005
using std::cin;
using std::cout;
using std::vector;
using std::sort;
using std::ios_base;
int n, x, y, t;
vector<vector<int>> tree(N);
int c[N], par[N], h[N], ve[N];
vector<bool> ans(N), yes;
bool cmp(int x, int y) { return h[x] > h[y]; }
void built_h(int i, int k) {
  for (int j = 0; j < tree[i].size(); j++) {
    if (par[i] != tree[i][j]) {
      h[tree[i][j]] = k + 1;
      built_h(tree[i][j], k + 1);
    }
  }
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> n;
  tree.reserve(n);
  ans.reserve(n);
  for (int i = 1; i <= n; i++) {
    ve[i] = i;
    cin >> x >> y;
    if (x == -1)
      t = i, par[i] = i;
    else
      par[i] = x;
    c[i] = y;
    if (x != -1)
      tree[x].emplace_back(i);
  }
  h[t] = 1;
  built_h(t, 1);
  sort(ve + 1, ve + n + 1, cmp);
  for (int i = 1; i <= n; i++) {
    bool ok = false;
    for (int j = 0; j < tree[ve[i]].size(); j++)
      if (!c[tree[ve[i]][j]]) {
        ok = true;
        break;
      }
    if (!c[ve[i]])
      ok = true;
    if (!ok)
      ans[ve[i]] = true, yes = true;
  }
  if (!yes)
    cout << -1;
  else
    for (int i = 1; i <= n; i++)
      if (ans[i])
        cout << i << " ";
}
```

Please note that these are general practices for writing efficient C++ code. The actual performance gain depends on the specific program and the compiler used.