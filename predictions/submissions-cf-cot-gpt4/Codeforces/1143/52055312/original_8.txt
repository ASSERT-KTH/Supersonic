This C++ program has a few areas that can be optimized for better performance.

1. Avoiding the use of "#include <bits/stdc++.h>": This header file includes a lot of unnecessary headers, which can slow down the compilation process. Instead, only include the headers that are needed. In this case, we only need <vector>, <iostream>, and <algorithm>.

2. Avoiding the use of "using namespace std": It's considered a bad practice because it can lead to name clashes. It's better to use "std::" before standard library objects.

3. Reducing the number of iterations: In the second for loop in the main function, there is another for loop that iterates through the tree[ve[i]] vector. This can be optimized by using the "any_of" algorithm from the standard library, which checks if any element in the range satisfies the condition.

4. Use reserve() for vector: If you know the size of the vector in advance, it's a good practice to reserve the memory before pushing the elements into the vector. It avoids the unnecessary re-allocation of memory when the vector grows.

Here's the optimized code:

```cpp
#include <vector>
#include <iostream>
#include <algorithm>

#define N 100005

int n, x, y, t;
std::vector<std::vector<int>> tree(N);
int c[N], par[N], h[N], ve[N];
bool ans[N], yes;
bool cmp(int x, int y) { return h[x] > h[y]; }

void built_h(int i, int k) {
  for (int j = 0; j < tree[i].size(); j++) {
    if (par[i] != tree[i][j]) {
      h[tree[i][j]] = k + 1;
      built_h(tree[i][j], k + 1);
    }
  }
}

int main() {
  std::cin >> n;
  for (int i = 1; i <= n; i++) {
    ve[i] = i;
    std::cin >> x >> y;
    if (x == -1)
      t = i, par[i] = i;
    else
      par[i] = x;
    c[i] = y;
    if (x != -1) {
      tree[x].reserve(n);
      tree[x].push_back(i);
    }
  }
  h[t] = 1;
  built_h(t, 1);
  std::sort(ve + 1, ve + n + 1, cmp);
  for (int i = 1; i <= n; i++) {
    bool ok = std::any_of(tree[ve[i]].begin(), tree[ve[i]].end(), [](int j){ return !c[j];});
    if (!c[ve[i]])
      ok = true;
    if (!ok)
      ans[ve[i]] = true, yes = true;
  }
  if (!yes)
    std::cout << -1;
  else
    for (int i = 1; i <= n; i++)
      if (ans[i])
        std::cout << i << " ";
}
```

This optimized code should have a better running time and memory usage than the original code.