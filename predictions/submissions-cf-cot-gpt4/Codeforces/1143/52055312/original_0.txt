This program is a kind of depth-first search in a tree. Optimizations can be done in the following areas:

1. Eliminate the use of global variables: Global variables are usually avoided because they can lead to hard-to-find bugs due to unexpected side effects.

2. Use reserve() for vector: When we know the size of the vector beforehand, we can use reserve() to avoid unnecessary resizing of the vector which takes additional time.

3. Use references in the function parameters: This avoids copying the value when the function is called and can improve the performance of the program.

4. Use `emplace_back()` instead of `push_back()`: `emplace_back()` constructs the object in-place, whereas `push_back()` constructs a temporary object and then copies or moves it into the vector. So, `emplace_back()` can be faster as it avoids this unnecessary copy or move operation.

5. Avoid reduntant calculations: Instead of calling `tree[ve[i]].size()` repeatedly in loop condition, it can be calculated once and stored in a variable.

Here is the optimized program:

```cpp
#include <bits/stdc++.h>
#define N 100005
using namespace std;

bool cmp(int x, int y, const vector<int>& h) { return h[x] > h[y]; }

void built_h(int i, int k, const vector<vector<int>>& tree, vector<int>& par, vector<int>& h) {
  for (int j = 0; j < (int)tree[i].size(); j++) {
    if (par[i] != tree[i][j]) {
      h[tree[i][j]] = k + 1;
      built_h(tree[i][j], k + 1, tree, par, h);
    }
  }
}

int main() {
  int n, x, y, t;
  vector<vector<int>> tree(N);
  vector<int> c(N), par(N), h(N), ve(N);
  vector<bool> ans(N);
  bool yes = false;

  cin >> n;
  for (int i = 1; i <= n; i++) {
    ve[i] = i;
    cin >> x >> y;
    if (x == -1)
      t = i, par[i] = i;
    else
      par[i] = x;
    c[i] = y;
    if (x != -1)
      tree[x].emplace_back(i);
  }
  h[t] = 1;
  built_h(t, 1, tree, par, h);
  sort(ve.begin() + 1, ve.begin() + n + 1, [&](int a, int b){ return cmp(a, b, h); });
  for (int i = 1; i <= n; i++) {
    bool ok = false;
    int treeSize = tree[ve[i]].size();
    for (int j = 0; j < treeSize; j++)
      if (!c[tree[ve[i]][j]]) {
        ok = true;
        break;
      }
    if (!c[ve[i]])
      ok = true;
    if (!ok)
      ans[ve[i]] = true, yes = true;
  }
  if (!yes)
    cout << -1;
  else
    for (int i = 1; i <= n; i++)
      if (ans[i])
        cout << i << " ";
}
```
