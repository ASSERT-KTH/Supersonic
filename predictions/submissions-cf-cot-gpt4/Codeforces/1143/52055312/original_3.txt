This program performs a depth-first search on a tree. The optimization techniques I'll be using are:

1. Using references when accessing elements from the tree vector to avoid copying elements.
2. Replacing the 'for loop' in the built_h function with a 'for-each loop' in order to iterate directly over the elements in the 'tree' vector, which improves code readability and can also potentially improve performance.
3. Using 'reserve' function for 'tree' vector to avoid dynamic memory reallocation which will improve the performance.
4. Using 'emplace_back' instead of 'push_back' while inserting the element to vector to avoid extra copy construction and destruction.

Here is the optimized program:

```cpp
#include <bits/stdc++.h>
#define N 100005
using namespace std;
int n, x, y, t;
vector<vector<int>> tree(N);
int c[N], par[N], h[N], ve[N];
bool ans[N], yes;
bool cmp(int x, int y) { return h[x] > h[y]; }
void built_h(int i, int k) {
  for (auto& child : tree[i]) {
    if (par[i] != child) {
      h[child] = k + 1;
      built_h(child, k + 1);
    }
  }
}
int main() {
  cin >> n;
  tree.reserve(n+1); // reserve memory for vector
  for (int i = 1; i <= n; i++) {
    ve[i] = i;
    cin >> x >> y;
    if (x == -1)
      t = i, par[i] = i;
    else
      par[i] = x;
    c[i] = y;
    if (x != -1)
      tree[x].emplace_back(i); // use emplace_back instead of push_back
  }
  h[t] = 1;
  built_h(t, 1);
  sort(ve + 1, ve + n + 1, cmp);
  for (int i = 1; i <= n; i++) {
    bool ok = false;
    for (auto& child : tree[ve[i]]) // replace for loop with for-each loop
      if (!c[child]) {
        ok = true;
        break;
      }
    if (!c[ve[i]])
      ok = true;
    if (!ok)
      ans[ve[i]] = true, yes = true;
  }
  if (!yes)
    cout << -1;
  else
    for (int i = 1; i <= n; i++)
      if (ans[i])
        cout << i << " ";
}
```
Please note that these changes will provide a small performance boost and can depend on the compiler and specific situation.