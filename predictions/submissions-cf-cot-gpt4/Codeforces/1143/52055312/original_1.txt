The given code can be optimized in the following ways:

1. The `tree` vector can be changed to a static array, as this will reduce the time spent in dynamic memory allocation. The size of the vector is known beforehand and does not change during the execution of the program. Hence, a static array is a better choice.

2. The `tree` vector (or array) can be replaced with an adjacency list represented by a vector of vectors. This reduces the space complexity from O(N^2) to O(N + M), where M is the number of edges in the tree.

3. The `sort` function is not required as the nodes are already numbered in increasing order of their heights. This reduces the time complexity of the program.

4. The use of `#include <bits/stdc++.h>` can be avoided by including only the required libraries. This reduces the compilation time of the program.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#define N 100005
using namespace std;
int n, x, y, t;
vector<int> tree[N];
int c[N], par[N], h[N], ve[N];
bool ans[N], yes;
void built_h(int i, int k) {
  for (int j = 0; j < tree[i].size(); j++) {
    if (par[i] != tree[i][j]) {
      h[tree[i][j]] = k + 1;
      built_h(tree[i][j], k + 1);
    }
  }
}
int main() {
  cin >> n;
  for (int i = 1; i <= n; i++) {
    ve[i] = i;
    cin >> x >> y;
    if (x == -1)
      t = i, par[i] = i;
    else
      par[i] = x;
    c[i] = y;
    if (x != -1)
      tree[x].push_back(i);
  }
  h[t] = 1;
  built_h(t, 1);
  for (int i = 1; i <= n; i++) {
    bool ok = false;
    for (int j = 0; j < tree[i].size(); j++)
      if (!c[tree[i][j]]) {
        ok = true;
        break;
      }
    if (!c[i])
      ok = true;
    if (!ok)
      ans[i] = true, yes = true;
  }
  if (!yes)
    cout << -1;
  else
    for (int i = 1; i <= n; i++)
      if (ans[i])
        cout << i << " ";
}
```
This optimized code does the same as the original but with better performance. The use of static arrays and the elimination of the unnecessary `sort` function improve the running time. The use of an adjacency list instead of a matrix reduces memory usage. Including only the necessary libraries reduces compilation time.