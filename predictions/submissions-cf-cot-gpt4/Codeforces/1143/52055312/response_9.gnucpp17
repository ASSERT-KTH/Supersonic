#include <iostream>
#include <vector>
#include <algorithm>

#define N 100005

bool cmp(int x, int y, int h[]) {
    return h[x] > h[y];
}

void built_h(int i, int k, int h[], int par[], std::vector<int> tree[]) {
    for (int j = 0; j < tree[i].size(); j++) {
        if (par[i] != tree[i][j]) {
            h[tree[i][j]] = k + 1;
            built_h(tree[i][j], k + 1, h, par, tree);
        }
    }
}

int main() {
    int n, x, y, t;
    std::vector<int> tree[N];
    int c[N], par[N], h[N], ve[N];
    bool ans[N];

    std::cin >> n;
    for (int i = 1; i <= n; i++) {
        ve[i] = i;
        std::cin >> x >> y;
        if (x == -1)
            t = i, par[i] = i;
        else
            par[i] = x;
        c[i] = y;
        if (x != -1)
            tree[x].push_back(i);
    }
    h[t] = 1;
    built_h(t, 1, h, par, tree);
    std::sort(ve + 1, ve + n + 1, [&h](int a, int b) {return cmp(a, b, h);});
    bool flag = false;
    for (int i = 1; i <= n; i++) {
        bool ok = false;
        for (int j = 0; j < tree[ve[i]].size() && !ok; j++)
            if (!c[tree[ve[i]][j]]) {
                ok = true;
            }
        if (!c[ve[i]])
            ok = true;
        if (!ok)
            ans[ve[i]] = true, flag = true;
    }
    if (!flag)
        std::cout << -1;
    else
        for (int i = 1; i <= n; i++)
            if (ans[i])
                std::cout << i << " ";
}