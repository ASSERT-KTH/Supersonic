The given C++ program can be optimized in the following ways:

1. Avoiding `#include <bits/stdc++.h>`: This header file includes a large number of standard C++ libraries. It's not efficient to include it unless every included library is used in the program. We should only include the necessary libraries.

2. Avoiding global variables: Global variables are stored in the heap, which is slower to access than the stack (where local variables are stored).

3. Reducing function calls: We can reduce function calls within loops to save time. The `cmp` function can be replaced by a lambda function in the `sort` call.

4. Avoiding unnecessary computations: In the `built_h` function, instead of checking if `par[i]` does not equal `tree[i][j]` for every `j`, we can remove `par[i]` from `tree[i]` before the loop.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

void built_h(int i, int k, vector<vector<int>>& tree, vector<int>& h, vector<int>& par) {
  for (int j = 0; j < tree[i].size(); j++) {
    h[tree[i][j]] = k + 1;
    built_h(tree[i][j], k + 1, tree, h, par);
  }
}

int main() {
  int n, x, y, t;
  cin >> n;
  
  vector<vector<int>> tree(n+1);
  vector<int> c(n+1), par(n+1), h(n+1), ve(n+1);
  vector<bool> ans(n+1);
  bool yes = false;

  for (int i = 1; i <= n; i++) {
    ve[i] = i;
    cin >> x >> y;
    if (x == -1)
      t = i, par[i] = i;
    else
      par[i] = x;
    c[i] = y;
    if (x != -1)
      tree[x].push_back(i);
  }
  h[t] = 1;
  built_h(t, 1, tree, h, par);
  sort(ve.begin()+1, ve.end(), [&h](int a, int b) { return h[a] > h[b]; });
  for (int i = 1; i <= n; i++) {
    bool ok = false;
    for (int j = 0; j < tree[ve[i]].size(); j++)
      if (!c[tree[ve[i]][j]]) {
        ok = true;
        break;
      }
    if (!c[ve[i]])
      ok = true;
    if (!ok)
      ans[ve[i]] = true, yes = true;
  }
  if (!yes)
    cout << -1;
  else
    for (int i = 1; i <= n; i++)
      if (ans[i])
        cout << i << " ";
}

```
Please note that optimizing a program can sometimes make it harder to understand, so it's important to strike a balance between efficiency and readability.