Here are the optimization steps:

1. Instead of using `#include <bits/stdc++.h>`, which includes all standard libraries, we can include only the necessary libraries. This will speed up the compilation time.

2. We can avoid multiple indexing by storing `tree[ve[i]]` in a local variable in the last for loop inside main(). This will reduce the running time.

3. Also, we can exit the loop as soon as `ok = true` is found.

4. Instead of using a vector of vectors for `tree`, we can use an array of vectors. This will save memory as the size of the tree is fixed.

Here is the optimized code:

```c++
#include <iostream>
#include <vector>
#include <algorithm>
#define N 100005
using namespace std;
int n, x, y, t;
vector<int> tree[N];
int c[N], par[N], h[N], ve[N];
bool ans[N], yes;
bool cmp(int x, int y) { return h[x] > h[y]; }
void built_h(int i, int k) {
  for (int j = 0; j < tree[i].size(); j++) {
    if (par[i] != tree[i][j]) {
      h[tree[i][j]] = k + 1;
      built_h(tree[i][j], k + 1);
    }
  }
}
int main() {
  cin >> n;
  for (int i = 1; i <= n; i++) {
    ve[i] = i;
    cin >> x >> y;
    if (x == -1)
      t = i, par[i] = i;
    else
      par[i] = x;
    c[i] = y;
    if (x != -1)
      tree[x].push_back(i);
  }
  h[t] = 1;
  built_h(t, 1);
  sort(ve + 1, ve + n + 1, cmp);
  for (int i = 1; i <= n; i++) {
    bool ok = false;
    auto &currentTree = tree[ve[i]];
    for (int j = 0; j < currentTree.size() && !ok; j++)
      if (!c[currentTree[j]]) {
        ok = true;
      }
    if (!c[ve[i]])
      ok = true;
    if (!ok)
      ans[ve[i]] = true, yes = true;
  }
  if (!yes)
    cout << -1;
  else
    for (int i = 1; i <= n; i++)
      if (ans[i])
        cout << i << " ";
}
```
This optimized code should run faster and use less memory than the original code.