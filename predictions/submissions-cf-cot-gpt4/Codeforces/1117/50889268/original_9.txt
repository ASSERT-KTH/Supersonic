This code is already quite optimized, but there are a few small tweaks we can make to further improve its performance:

1. Pass the vectors by reference in the `check()` function. This will eliminate the need for the function to create a copy of the vectors every time it is called, reducing both runtime and memory usage.

2. Using prefix increment (++i) in loops instead of postfix (i++). Although most modern compilers will optimize this, it's a good practice to use prefix increment when the return value is not used because it avoids unnecessary copy.

3. Reserve space for vectors. If the size of the vector is known in advance, reserving the space can avoid unnecessary reallocations and copies as the vector grows.

4. Remove the `#include <bits/stdc++.h>` line. This header file includes quite a lot of unnecessary libraries, which increases the compilation time. Replace it with only the needed headers.

Here is the modified version of the code:

```c++
#include <iostream>
#include <vector>
#include <string>
#define ll long long
using namespace std;
ll x1, y1, x2, y2;
bool check(const vector<ll>& x, const vector<ll>& y, int n, ll pos) {
  ll full_periods = pos / n;
  ll this_day = pos % n;
  ll current_x = x1 + full_periods * x[n] + x[this_day];
  ll current_y = y1 + full_periods * y[n] + y[this_day];
  return abs(x2 - current_x) + abs(y2 - current_y) <= pos;
}
int main() {
  int n;
  string s;
  cin >> x1 >> y1 >> x2 >> y2;
  cin >> n >> s;
  vector<ll> x, y;
  x.reserve(n + 1);
  y.reserve(n + 1);
  x.push_back(0);
  y.push_back(0);
  for (int i = 0; i < n; ++i) {
    if (s[i] == 'U')
      y[i + 1]++;
    if (s[i] == 'D')
      y[i + 1]--;
    if (s[i] == 'L')
      x[i + 1]--;
    if (s[i] == 'R')
      x[i + 1]++;
    x[i + 1] += x[i], y[i + 1] += y[i];
  }
  ll l = 0, r = 1e18;
  while (r - l > 1) {
    ll mid = (l + r) / 2;
    if (check(x, y, n, mid)) {
      r = mid;
    } else {
      l = mid;
    }
  }
  if (r > 1e17) {
    cout << -1;
  } else {
    cout << r;
  }
}
```
