This program attempts to find the minimum number of days to reach a certain point (x2, y2) from an initial point (x1, y1) by following a repetitive pattern of movement, given by the string 's'. The main optimization can be done at the point of the binary search.

Step by step optimization:

1. Instead of performing a binary search on a significantly large range (0 to 1e18), you can reduce the range to the maximum possible distance that can be covered. This maximum distance can be the sum of the absolute differences of the x and y coordinates of the given points and the length of the string (which represents the maximum number of steps that can be taken in one day). This reduces the number of iterations in the binary search, thus optimizing the running time.

2. The variables 'current_x' and 'current_y' are recalculated in every call to the 'check' function. This can lead to unnecessary computation, especially when 'full_periods' remains the same. To reduce this, you can compute 'full_periods' in the main function and pass it as a parameter to the 'check' function, so that it's computed only when 'mid' changes.

3. Use '\n' instead of 'endl' to print output. '\n' is faster as 'endl' causes unnecessary flushing of the buffer.

Optimized program:

```cpp
#include <bits/stdc++.h>
#define ll long long
using namespace std;
ll x1, y1, x2, y2;
bool check(vector<ll> x, vector<ll> y, int n, ll pos, ll full_periods) {
  ll this_day = pos % n;
  ll current_x = x1 + full_periods * x[n] + x[this_day];
  ll current_y = y1 + full_periods * y[n] + y[this_day];
  return abs(x2 - current_x) + abs(y2 - current_y) <= pos;
}
int main() {
  int n;
  string s;
  cin >> x1 >> y1 >> x2 >> y2;
  cin >> n >> s;
  vector<ll> x(n + 1, 0), y(n + 1, 0);
  for (int i = 0; i < n; ++i) {
    if (s[i] == 'U')
      y[i + 1]++;
    if (s[i] == 'D')
      y[i + 1]--;
    if (s[i] == 'L')
      x[i + 1]--;
    if (s[i] == 'R')
      x[i + 1]++;
    x[i + 1] += x[i], y[i + 1] += y[i];
  }
  ll max_distance = abs(x2 - x1) + abs(y2 - y1) + n;
  ll l = 0, r = max_distance;
  while (r - l > 1) {
    ll mid = (l + r) / 2;
    ll full_periods = mid / n;
    if (check(x, y, n, mid, full_periods)) {
      r = mid;
    } else {
      l = mid;
    }
  }
  if (r >= max_distance) {
    cout << -1;
  } else {
    cout << r;
  }
  cout << '\n';
}
```

This optimized program has reduced time complexity due to the reduced range of binary search and fewer computations in the 'check' function. It has the same space complexity as the original program as the data structures used have not been changed.