Here are some optimization points:

1. `check` function is called multiple times with the same `x`, `y` and `n` values. We can optimize it using memoization. But since `pos` is a unique value for each call, we will not use memoization in this context.
2. The `for` loop updating `x` and `y` can be optimized by removing the redundant condition checks. Instead of checking for four different characters (U, D, L, R), we can switch on `s[i]` and handle the four cases.
3. The `while` loop in the `main` function can be optimized by reducing the number of arithmetic operations. Currently, the `mid` is calculated in every iteration which is not necessary. We can optimize it by calculating `mid` only when `r` or `l` is updated.
4. We should avoid using `#include <bits/stdc++.h>` because it includes a lot of unnecessary headers, leading to increased compile time. Instead, we can include only the headers that we need.
5. Instead of using `using namespace std;`, it's better to use `std::` before each standard library object. This will prevent namespace pollution and confusion with names from the `std` namespace.
6. The variable `n` can be `const` as its value does not change after initialization.

Here is the optimized version of the given code:

```c++
#include <iostream>
#include <vector>

typedef long long ll;

ll x1, y1, x2, y2;

bool check(const std::vector<ll>& x, const std::vector<ll>& y, const ll pos, const int n) {
  ll full_periods = pos / n;
  ll this_day = pos % n;
  ll current_x = x1 + full_periods * x[n] + x[this_day];
  ll current_y = y1 + full_periods * y[n] + y[this_day];
  return abs(x2 - current_x) + abs(y2 - current_y) <= pos;
}

int main() {
  const int n;
  std::string s;
  std::cin >> x1 >> y1 >> x2 >> y2;
  std::cin >> n >> s;
  std::vector<ll> x(n + 1, 0), y(n + 1, 0);
  for (int i = 0; i < n; ++i) {
    switch (s[i]) {
      case 'U': 
        y[i + 1]++;
        break;
      case 'D':
        y[i + 1]--;
        break;
      case 'L':
        x[i + 1]--;
        break;
      case 'R':
        x[i + 1]++;
        break;
    }
    x[i + 1] += x[i], y[i + 1] += y[i];
  }
  ll l = 0, r = 1e18;
  ll mid = (l + r) / 2;
  while (r - l > 1) {
    if (check(x, y, mid, n)) {
      r = mid;
    } else {
      l = mid;
    }
    mid = (l + r) / 2;
  }
  if (r > 1e17) {
    std::cout << -1;
  } else {
    std::cout << r;
  }
}
```