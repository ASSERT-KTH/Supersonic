Here are the optimization steps:

1. Avoid using `bits/stdc++.h` as it includes more than required header files which increases compilation time.
2. Use prefix sum instead of summing up in every iteration.
3. Avoid using global variables as they reside in memory for the lifetime of the program.
4. Avoid using `std::endl` as it is slower due to additional flushing operation.
5. Use `'\n'` instead of `std::endl`.
6. Use fast input and output by using `ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);`.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <cmath>
#define ll long long
using namespace std;

bool check(vector<ll> &x, vector<ll> &y, ll x1, ll y1, ll x2, ll y2, int n, ll pos) {
    ll full_periods = pos / n;
    ll this_day = pos % n;
    ll current_x = x1 + full_periods * x[n] + x[this_day];
    ll current_y = y1 + full_periods * y[n] + y[this_day];
    return abs(x2 - current_x) + abs(y2 - current_y) <= pos;
}

int main() {
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    ll x1, y1, x2, y2;
    int n;
    string s;
    cin >> x1 >> y1 >> x2 >> y2;
    cin >> n >> s;
    vector<ll> x(n + 1, 0), y(n + 1, 0);
    for (int i = 0; i < n; ++i) {
        x[i + 1] += x[i] + (s[i] == 'R') - (s[i] == 'L');
        y[i + 1] += y[i] + (s[i] == 'U') - (s[i] == 'D');
    }
    ll l = 0, r = 1e18;
    while (r - l > 1) {
        ll mid = (l + r) / 2;
        if (check(x, y, x1, y1, x2, y2, n, mid)) {
            r = mid;
        } else {
            l = mid;
        }
    }
    if (r > 1e17) {
        cout << -1 << '\n';
    } else {
        cout << r << '\n';
    }
}
```

The optimization steps are simple and they help in reducing the time and memory consumption of the program. This is achieved by avoiding unnecessary operations, using optimized input/output functions, and avoiding unnecessary memory usage.