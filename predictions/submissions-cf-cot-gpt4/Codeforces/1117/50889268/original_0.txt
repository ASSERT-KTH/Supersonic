This program is relatively optimized, but there's one small optimization you can make: reduce the number of if statements in the for loop by mapping each character to a pair of directions.

Optimization steps:

1. Replace the four if statements with a map that associates each character with a pair of directions.
2. Use this map to update x[i + 1] and y[i + 1] in a single line.

Here's the optimized code:

```cpp
#include <bits/stdc++.h>
#define ll long long
using namespace std;
ll x1, y1, x2, y2;
map<char, pair<int, int>> direction = { {'U', {0, 1}}, {'D', {0, -1}}, {'L', {-1, 0}}, {'R', {1, 0}} };

bool check(vector<ll> x, vector<ll> y, int n, ll pos) {
  ll full_periods = pos / n;
  ll this_day = pos % n;
  ll current_x = x1 + full_periods * x[n] + x[this_day];
  ll current_y = y1 + full_periods * y[n] + y[this_day];
  return abs(x2 - current_x) + abs(y2 - current_y) <= pos;
}

int main() {
  int n;
  string s;
  cin >> x1 >> y1 >> x2 >> y2;
  cin >> n >> s;
  vector<ll> x(n + 1, 0), y(n + 1, 0);
  for (int i = 0; i < n; ++i) {
    x[i + 1] += x[i] + direction[s[i]].first;
    y[i + 1] += y[i] + direction[s[i]].second;
  }
  ll l = 0, r = 1e18;
  while (r - l > 1) {
    ll mid = (l + r) / 2;
    if (check(x, y, n, mid)) {
      r = mid;
    } else {
      l = mid;
    }
  }
  if (r > 1e17) {
    cout << -1;
  } else {
    cout << r;
  }
}
```

This optimized code reduces the number of if statements executed in each iteration of the for loop from four to zero, which can significantly speed up the program when the string s is long.