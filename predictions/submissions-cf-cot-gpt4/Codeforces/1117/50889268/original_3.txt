Optimization Steps:

1. The vectors x and y are being passed by value to the function `check`. This will create a copy of the vectors which is unnecessary and can be avoided by passing the vectors by reference.

2. `std::ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` can be added to the start of the main function. The first line will decouple C and C++ standard streams, and the second line will untie cin from cout. Both these lines will make I/O operations faster, which is useful when dealing with large amounts of input and output.

3. The variable `s` is being checked in each iteration of the for-loop to see which character it contains. Instead of checking for all four conditions independently, we can use if-else if statements. This way, as soon as a match is found, the remaining conditions are not checked, reducing unnecessary comparisons.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
#define ll long long
using namespace std;
ll x1, y1, x2, y2;

bool check(const vector<ll>& x, const vector<ll>& y, int n, ll pos) {
  ll full_periods = pos / n;
  ll this_day = pos % n;
  ll current_x = x1 + full_periods * x[n] + x[this_day];
  ll current_y = y1 + full_periods * y[n] + y[this_day];
  return abs(x2 - current_x) + abs(y2 - current_y) <= pos;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n;
  string s;
  
  cin >> x1 >> y1 >> x2 >> y2;
  cin >> n >> s;
  
  vector<ll> x(n + 1, 0), y(n + 1, 0);
  for (int i = 0; i < n; ++i) {
    if (s[i] == 'U')
      y[i + 1]++;
    else if (s[i] == 'D')
      y[i + 1]--;
    else if (s[i] == 'L')
      x[i + 1]--;
    else if (s[i] == 'R')
      x[i + 1]++;
    x[i + 1] += x[i], y[i + 1] += y[i];
  }
  
  ll l = 0, r = 1e18;
  while (r - l > 1) {
    ll mid = (l + r) / 2;
    if (check(x, y, n, mid)) {
      r = mid;
    } else {
      l = mid;
    }
  }
  
  if (r > 1e17) {
    cout << -1;
  } else {
    cout << r;
  }
}
```