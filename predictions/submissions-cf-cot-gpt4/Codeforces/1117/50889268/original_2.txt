The optimization steps for this program would be:

1. Avoid using `#include <bits/stdc++.h>`: This header file includes quite a lot of other header files, which can significantly slow down the compilation time. We would replace it with only the header files that we need.

2. Avoid using `using namespace std;`: This can cause name clashes, which can be hard to debug.

3. Use `ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);`: This will make cin and cout faster, which will help when dealing with large inputs and outputs.

4. Use prefix increment (`++i`) instead of postfix increment (`i++`): Prefix increment is generally faster than postfix increment in C++ as postfix increment creates a copy of the object and then increments it.

5. Avoid unnecessary vector resizing: In the original code, the vectors `x` and `y` are resized to `n+1` even before the value of `n` is known. This is unnecessary and can be avoided by resizing the vector after the value of `n` is known.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <cmath>
#define ll long long

ll x1, y1, x2, y2;

bool check(std::vector<ll> &x, std::vector<ll> &y, int n, ll pos) {
  ll full_periods = pos / n;
  ll this_day = pos % n;
  ll current_x = x1 + full_periods * x[n] + x[this_day];
  ll current_y = y1 + full_periods * y[n] + y[this_day];
  return abs(x2 - current_x) + abs(y2 - current_y) <= pos;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL); 
  cout.tie(NULL);

  int n;
  std::string s;

  std::cin >> x1 >> y1 >> x2 >> y2;
  std::cin >> n >> s;

  std::vector<ll> x(n + 1, 0), y(n + 1, 0);

  for (int i = 0; i < n; ++i) {
    if (s[i] == 'U')
      ++y[i + 1];
    if (s[i] == 'D')
      --y[i + 1];
    if (s[i] == 'L')
      --x[i + 1];
    if (s[i] == 'R')
      ++x[i + 1];
    x[i + 1] += x[i], y[i + 1] += y[i];
  }

  ll l = 0, r = 1e18;

  while (r - l > 1) {
    ll mid = (l + r) / 2;
    if (check(x, y, n, mid)) {
      r = mid;
    } else {
      l = mid;
    }
  }

  if (r > 1e17) {
    std::cout << -1;
  } else {
    std::cout << r;
  }
}
```

The above code is optimized for faster input/output and memory usage. It also follows good coding practices.