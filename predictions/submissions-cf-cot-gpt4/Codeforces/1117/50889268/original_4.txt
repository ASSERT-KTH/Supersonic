The given code is a relatively optimized one, but there are a few minor improvements we can make.

1. Inline Function Call: The function `check()` is only called once, and it is relatively small. We can inline the function which might give a minor speed improvement. This is because function calls involve a certain amount of overhead, such as storing the function's return address and cleaning up the function's local variables. By inlining the function, we eliminate this overhead.

2. Avoid Recalculation: In the loop where we process the string `s`, we are accessing `x[i+1]` and `y[i+1]` multiple times. Instead of recalculating these indices, we can store them in temporary variables.

3. Use Pre-Increment: Use pre-increment (`++i`) instead of post-increment (`i++`) in loops. While this doesn't make a difference in simple loops, in more complex situations (e.g., when using iterators) pre-increment can be slightly more efficient.

4. Avoid Unused Variable: The `string s` is only used to store the input temporarily. We can eliminate this string and directly read the input into the variables `x` and `y`.

Optimized program:

```cpp
#include <bits/stdc++.h>
#define ll long long
using namespace std;
ll x1, y1, x2, y2;

int main() {
  int n;
  cin >> x1 >> y1 >> x2 >> y2;
  cin >> n;
  vector<ll> x(n + 1, 0), y(n + 1, 0);
  char dir;
  for (int i = 0; i < n; ++i) {
    cin >> dir;
    ll &xi = x[i + 1], &yi = y[i + 1];  // Avoid recalculations
    if (dir == 'U')
      yi++;
    else if (dir == 'D')
      yi--;
    else if (dir == 'L')
      xi--;
    else if (dir == 'R')
      xi++;
    xi += x[i], yi += y[i];
  }
  ll l = 0, r = 1e18;
  while (r - l > 1) {
    ll mid = (l + r) / 2;
    // Inline check function
    ll full_periods = mid / n;
    ll this_day = mid % n;
    ll current_x = x1 + full_periods * x[n] + x[this_day];
    ll current_y = y1 + full_periods * y[n] + y[this_day];
    if (abs(x2 - current_x) + abs(y2 - current_y) <= mid) {
      r = mid;
    } else {
      l = mid;
    }
  }
  if (r > 1e17) {
    cout << -1;
  } else {
    cout << r;
  }
}
```
Please note that these are minor optimizations and may not significantly improve the performance of this program. The most computationally intensive part of this program (the binary search loop) is already quite optimized.