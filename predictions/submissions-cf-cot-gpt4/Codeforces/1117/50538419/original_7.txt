The given C/C++ code finds the maximum length of the same consecutive elements in an array.

Optimization steps:

1. The array size is M (100001), but it can be optimized to only use the necessary size, which is 'n'. This will reduce memory usage.

2. The 'i' variable is declared globally but it can be declared inside the for loop to reduce the scope.

3. Two separate loops are used to find the maximum number and to count the maximum number of consecutive elements. This can be reduced to one loop to minimize the running time.

4. The 'mx' variable is initialized to -1. But if the array contains negative numbers, this will fail. So, it's better to initialize it with the first element of the array.

5. The 'ans' variable is initialized to 1. But if the array contains only unique elements, the answer should be 0. So, initialize it with 0.

6. 'max(cnt, ans)' is used twice which can be reduced to one time by updating the 'ans' variable in the second loop.

Optimized Program:
```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> arr(n);
    cin >> arr[0];
    int mx = arr[0], cnt = 1, ans = 0;
    for (int i = 1; i < n; i++) {
        cin >> arr[i];
        if (arr[i] > mx) {
            mx = arr[i];
            cnt = 1;
        } else if (arr[i] == mx) {
            cnt++;
        } else {
            ans = max(ans, cnt);
            cnt = 1;
        }
    }
    ans = max(ans, cnt);
    cout << ans << '\n';
}
```
This optimized program uses less memory by using a dynamic array (vector) and reduces running time by using one loop instead of two. Also, the scope of the 'i' variable has been reduced and edge cases have been handled by initializing 'mx' and 'ans' properly.