Optimization steps:

1. The first optimization could be related to the usage of `bits/stdc++.h`. This is a non-standard header file and it includes a lot of unnecessary stuff that might not be required in your program. Using it will increase the compilation time and it's not portable. So, it's better to include only those header files which are required in your program.

2. Using global variables for `n`, `i`, `mx`, `cnt` and `ans` is not a good practice. These variables can be local to the `main` function. It can potentially save memory, as global variables exist for the duration of the program, but local variables only exist for the duration of the function.

3. Instead of scanning the array twice, once for finding the maximum element and second time for counting the maximum sequence, both these operations can be done in a single pass. This would save time.

4. Using `'\n'` instead of `endl` to print a newline character is faster as `endl` causes a flush operation, which can be slow.

5. The usage of `#define M 100001` for the array size can be replaced with a constant variable for better type safety.

Here is the optimized version of your program:

```cpp
#include <iostream>
#include <algorithm>

const int M = 100001;

int main() {
    int arr[M], n, mx = -1, cnt = 0, ans = 1;
    std::cin >> n;
    for (int i = 0; i < n; i++) {
        std::cin >> arr[i];
        if (i == 0 || arr[i] != arr[i-1]) {
            cnt = (arr[i-1] == mx) ? cnt : 0;
            mx = std::max(mx, arr[i]);
        }
        cnt++;
        ans = std::max(ans, cnt);
    }
    std::cout << ans << '\n';
    return 0;
}
```
This program does both finding the maximum and counting the maximum sequence in one pass over the array. It first checks if the current element is different from the previous one. If it is, it resets the counter if the previous element was not the maximum. Then it updates the maximum and increments the counter. Finally, it updates the maximum sequence length if necessary.