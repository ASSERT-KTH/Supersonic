Here are the steps for optimization:

1. The `#include <bits/stdc++.h>` directive is generally discouraged because it includes a lot of unnecessary files, which can increase compilation time. It's better to include only the necessary libraries. Here we only need `iostream`, `algorithm` and `vector`.

2. Global variables are usually best avoided. In this case, we can declare all the variables we need inside the `main` function.

3. Instead of using an array `arr` with a fixed size of `M` (100001), we can use a `vector<int>`. This will use only as much memory as needed for the input size `n`.

4. The counting of the maximum number's occurrences can be done in one single for loop to reduce the running time.

5. We can use `std::ios::sync_with_stdio(0);` and `cin.tie(0);` to speed up the input/output operations.

Here is the optimized program based on these steps:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  std::ios::sync_with_stdio(0);
  std::cin.tie(0);

  int n;
  std::cin >> n;

  std::vector<int> arr(n+1);
  int mx = -1, cnt = 0, ans = 0;
  
  for (int i = 1; i <= n; i++) {
    std::cin >> arr[i];
    if (arr[i] > mx) {
      mx = arr[i];
      cnt = 1;
    } else if (arr[i] == mx) {
      cnt++;
    } else {
      ans = std::max(ans, cnt);
      cnt = 0;
    }
  }
  ans = std::max(ans, cnt);
  
  std::cout << ans << '\n';
}
```

This optimized version of the program uses less memory and is faster because it only does a single pass through the array, and it only includes the necessary libraries. It also uses faster I/O operations.