The optimization steps are as follows:

1. `#include <bits/stdc++.h>`: This header file is actually quite heavy because it includes all the standard library headers. It can slow down the compilation. So instead of this, we should include only those header files which we actually need in our program.

2. Global variables: Here, variables are declared globally. It's not a good practice to declare all the variables globally. We should declare them in the scope where they are needed. In this case, all these variables can be declared inside the main function.

3. Avoid unnecessary memory usage: The array `arr` is of size `M=100001` which might be too large for most inputs. Instead, we can dynamically allocate memory for the array based on the value of `n`.

4. Unnecessary checks: `max(cnt, ans)` is called twice. We can avoid the second call by making sure we update `ans` one last time after the second loop.

Here's the optimized version of the program:

```cpp
#include <iostream>
#include <algorithm>
using namespace std;

int main() {
  int n;
  cin >> n;
  
  int* arr = new int[n+1]; // dynamically allocated array
  int mx = -1, cnt = 0, ans = 1;

  for (int i = 1; i <= n; i++) {
    cin >> arr[i];
    if (arr[i] > mx)
      mx = arr[i];
  }

  for (int i = 1; i <= n; i++) {
    if (arr[i] == mx)
      cnt++;
    else {
      ans = max(ans, cnt);
      cnt = 0;
    }
  }
  
  ans = max(ans, cnt); // update answer one last time
  cout << ans << '\n';

  delete[] arr; // free the dynamically allocated memory
  return 0;
}
```
This program includes only the necessary headers, reduces the scope of variables, uses dynamic memory allocation for the array based on the input size, and avoids unnecessary checks. Thus, it should run faster and use less memory.