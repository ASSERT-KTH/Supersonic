To optimize the above C/C++ code, we can follow the below steps:

1. Remove `#include <bits/stdc++.h>`: It is not a standard header file and it includes almost all standard header files which slow down the compile time. We can include only those header files which are needed for our program. In this case, we need `iostream` for input/output and `algorithm` for the `max` function.

2. Move variable declaration inside the main function: Global variables are stored in heap memory and take up space for the entire duration of the program which might not be efficient. Moving them inside the main function will make them local and they will be stored on the stack which is faster to access and they will be destroyed when they go out of scope.

3. Avoid using `using namespace std;`: It's generally a bad practice to use this statement in a program because it can lead to name conflicts. We should use `std::` prefix before the standard functions and classes.

4. Use prefix increment (++i) instead of postfix increment (i++): In C++, the prefix increment operator (++i) could be faster than the postfix increment operator (i++) because the postfix increment operator involves a copy of the object which may be expensive for complex objects. Although for built-in types like int, the performance difference is negligible but it's a good practice to use prefix increment operator in loops.

Here is the optimized version of the provided C/C++ code:

```cpp
#include <iostream>
#include <algorithm>

int main() {
    const int M = 100001;
    int arr[M], n, mx = -1, cnt = 0, ans = 1;
    std::cin >> n;
    for (int i = 1; i <= n; ++i) {
        std::cin >> arr[i];
        if (arr[i] > mx)
            mx = arr[i];
    }
    for (int i = 1; i <= n; ++i) {
        if (arr[i] == mx)
            cnt++;
        else {
            ans = std::max(ans, cnt);
            cnt = 0;
        }
    }
    std::cout << std::max(cnt, ans) << '\n';
}
```