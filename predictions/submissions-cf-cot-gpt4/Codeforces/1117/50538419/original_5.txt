Step 1: Avoid using `#include <bits/stdc++.h>`. It includes lots of unnecessary headers, which increases the compile time. Instead, include only the headers that are required for your program.

Step 2: Avoid using `using namespace std`. It can cause naming conflicts, which are hard to debug. Instead, use `std::` qualifier before using classes and objects of the `std` namespace.

Step 3: The `arr` array has size `M` which is `100001`, but its size should be `n+1`, because `n` is the number of elements in the array. Hence, we can declare the `arr` array after getting the value of `n`.

Step 4: The `arr` array is being traversed twice. It can be optimized to be traversed only once. In the first traversal, we can find the maximum element and count the maximum consecutive occurrences. In the second traversal, we are just counting the maximum consecutive occurrences of the maximum element, which can be done in the first traversal itself.

Here is the optimized version of your code:

```cpp
#include <iostream>
#include <algorithm>

int main() {
    int n, mx = -1, cnt = 0, ans = 1;
    std::cin >> n;
    int* arr = new int[n+1];
    for (int i = 1; i <= n; i++) {
        std::cin >> arr[i];
        if (arr[i] > mx) {
            mx = arr[i];
            cnt = 1;
        } else if (arr[i] == mx) {
            cnt++;
            ans = std::max(ans, cnt);
        } else {
            cnt = 0;
        }
    }
    std::cout << ans << '\n';
    delete[] arr;
    return 0;
}
```

This optimized program follows good C++ practices and also optimizes the program for running time by traversing the array only once.