The existing program is already quite optimized. However, there are a few minor changes that we can make to slightly improve performance:

1. Replace `bits/stdc++.h` with specific library includes: `bits/stdc++.h` is not a standard library. It includes a lot of unnecessary headers, which can increase compile time. Instead, we should only include the headers we need, in this case `iostream`, `algorithm` and `vector`.

2. Avoid global variables: Global variables can increase memory usage and make code harder to understand and debug. We can move `arr`, `n`, `i`, `mx`, `cnt` and `ans` inside the `main` function to avoid this.

3. Use `std::vector` instead of a C-style array: `std::vector` is safer and more flexible than C-style arrays. In this case, we can use it to automatically manage the size of `arr`, instead of manually managing it with `M` and `n`.

4. Pass `std::ios_base::sync_with_stdio(false)` to `std::cin` to speed up I/O: By default, `std::cin` and `std::cout` are synchronized with `stdio`, which can slow down I/O. We can disable this synchronization to speed up I/O.

Here is the optimized code:

```cpp
#include <iostream>
#include <algorithm>
#include <vector>

int main() {
  std::ios_base::sync_with_stdio(false);
  int n, mx = -1, cnt, ans = 1;
  std::cin >> n;
  std::vector<int> arr(n);
  for (int i = 0; i < n; i++) {
    std::cin >> arr[i];
    if (arr[i] > mx)
      mx = arr[i];
  }
  for (int i = 0; i < n; i++) {
    if (arr[i] == mx)
      cnt++;
    else {
      ans = std::max(ans, cnt);
      cnt = 0;
    }
  }
  std::cout << std::max(cnt, ans) << '\n';
}
```

Note that the above changes are generally good practices for writing efficient and maintainable C++ code. However, they may not significantly improve the running time or memory usage of this specific program, because the original program is already quite efficient.