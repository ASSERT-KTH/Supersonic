The given program contains a few inefficiencies that can be improved:

1. The program performs two passes through the array - one to find the maximum element and another to count the maximum sequence of this element. This can be optimized to a single pass by performing both operations together. 

2. The program includes `<bits/stdc++.h>` which is not a standard library in C++. This library includes nearly all the standard libraries which might slow down the compilation time. It's better to include only the required libraries.

3. The use of global variables can make a program harder to understand and debug because they can be changed by any part of the program at any time. It's better to keep the scope of variables as local as possible.

Optimization Steps:
1. Remove the usage of `<bits/stdc++.h>`.
2. Declare `arr`, `n`, `i`, `mx`, `cnt`, and `ans` inside the main function to limit their scope.
3. Combine the two loops into a single loop to improve efficiency.

Here is the optimized program:

```cpp
#include <iostream>
#include <algorithm>
using namespace std;

int main() {
  int n, mx = -1, cnt = 0, ans = 1;
  cin >> n;
  int arr[n];
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
    if (arr[i] > mx) {
      mx = arr[i];
      cnt = 1;
    } else if (arr[i] == mx) {
      cnt++;
    } else {
      ans = max(ans, cnt);
      cnt = 0;
    }
  }
  cout << max(cnt, ans) << '\n';
}
```
In the optimized code, it's important to note that `mx` and `cnt` are reset every time a new maximum is found. The `cnt` variable is reset to 0 every time a non-maximum element is encountered, and `ans` is updated with the maximum count of consecutive maximum elements found so far. This ensures that the count of the maximum sequence of the maximum element is correctly found in a single pass through the array.