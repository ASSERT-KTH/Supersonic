There are a few things we can do here to optimize the code:

1. `abs(floor(a[i]) - a[i])` is computed twice for each `i`, once in the first loop and once in the second loop. We can instead compute it once and store it in a separate vector, say `b`.

2. `floor(a[i])` is also computed twice. We can follow the same procedure as the above point and store it in a vector, say `floors`.

3. `llround(tot)` can be replaced with a simple casting operation to `long long`.

4. If `rem` is not less than 0, all values from the second loop will be the same as `floors[i]`. This can be optimized to avoid all those unnecessary computations.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> pi;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.precision(20);
  int n;
  cin >> n;
  vector<double> a(n), b(n), floors(n);
  double tol = 1.e-7;
  int ent = 0;
  double tot = 0.;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    floors[i] = floor(a[i]);
    b[i] = abs(floors[i] - a[i]);
    if (b[i] < tol) {
      ent++;
    }
    tot += floors[i];
  }
  ll rem = (ll)tot;
  cerr << "rem " << rem << endl;
  if(rem < 0) {
    for (int i = 0; i < n; i++) {
      if (b[i] > tol) {
        cout << floors[i] + 1 << "\n";
        rem++;
      } else
        cout << floors[i] << "\n";
    }
  } else {
    for (int i = 0; i < n; i++) {
      cout << floors[i] << "\n";
    }
  }
}
```

Note that this optimization will increase memory usage slightly because we are storing the values of `floors` and `b`. If your memory is limited, you may not want to do this.