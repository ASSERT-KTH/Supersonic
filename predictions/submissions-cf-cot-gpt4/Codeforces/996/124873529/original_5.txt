The given program is complex to start with and contains a lot of unnecessary macros and functions which are not being used. However, the task is to make small modifications to optimize the program.

1. Remove unused macros and functions: The given program contains a lot of macros and functions which are not being used in the program, removing them will make the code clean and easy to understand. This includes power, mod, fun, vint, vbool, vpii, vpll, unm, uns, forv, forin, retf, T, etc.

2. Avoid unnecessary calculations: In the for loop where you are taking input and calculating the value of each element in array arr, you are also calculating the ceiling of the value divided by n. Instead, you can perform integer division and then add 1 if it's not perfectly divisible. This will avoid the conversion of integer to double and then again to integer which is costly in terms of time.

3. Avoid recalculating the same value: In the second for loop, you are calculating the minimum value in the arr and its index. Instead of updating the minimum value and index every time in the loop, you can calculate the minimum value first and then find its index using std::min_element and std::distance from the STL. This will avoid recalculating the same value.

Optimized program:

```C++
#include <bits/stdc++.h>
#define forloop(i, begin, end) for (int i = begin; i < end; i++)
#define ll long long int
#define nl "\n"
#define ravi ios_base::sync_with_stdio(false);
#define parmar2002 cin.tie(NULL); cout.tie(NULL);
using namespace std;
void solve();
int main() {
  ravi parmar2002 solve();
  return 0;
}
void solve() {
  int n;
  cin >> n;
  vector<ll> arr(n);
  forloop(i, 0, n) {
    cin >> arr[i];
    arr[i] -= i;
    if (arr[i] <= 0) {
      cout << i + 1 << nl;
      return;
    }
    arr[i] = arr[i] / n + (arr[i] % n != 0);
  }
  auto min_it = min_element(arr.begin(), arr.end());
  cout << distance(arr.begin(), min_it) + 1 << nl;
}
```
This optimized program will have the same functionality but better performance in terms of time and memory.