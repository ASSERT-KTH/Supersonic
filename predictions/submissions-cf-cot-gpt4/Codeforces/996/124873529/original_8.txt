Here are the optimization steps:

1. Replace `bits/stdc++.h` with specific headers. Using `bits/stdc++.h` includes a lot of unnecessary headers which increases the compilation time.

2. Replace `#define` macros with inline functions or constants wherever possible. Macros are replaced by preprocessor before compilation which can lead to unexpected results. It's better to use inline functions which are type safe and can have scope.

3. Remove the unnecessary macros that are not used in the code.

4. The function `fun()` is not used, so it can be removed.

5. The lambda functions `power` and `mod` are not used, so they can be removed.

6. `ans` variable is not used, so it can be removed.

7. `ravi` and `parmar2002` are not necessary, so they can be removed.

8. Use `std::min_element` function to find the minimum element instead of the manual loop. This can make the code more readable and efficient.

Here is the optimized code:
```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;

inline void solve() {
  int n;
  cin >> n;
  vector<long long> arr(n);
  for(int i = 0; i < n; i++) {
    cin >> arr[i];
    arr[i] -= i;
    if (arr[i] <= 0){
      cout << i + 1 << "\n";
      return;
    }
    arr[i] = ceil(double(arr[i]) / n);
  }
  auto minElementIndex = min_element(arr.begin(), arr.end()) - arr.begin();
  cout << minElementIndex + 1;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  solve();
  return 0;
}
```
