The code you've posted is a bit complex and doing a lot of things at once. However, I can point out a few general areas where you might be able to optimize it.

1. Avoid unnecessary arithmetic operations: In your `solve` function, subtracting `i` from `arr[i]` for each iteration and then immediately checking if `arr[i]` is less than or equal to 0 is not necessary. You can optimize this by simply checking if `arr[i] - i` is less than or equal to 0.

2. Minimize usage of expensive functions: The `ceil` function is relatively expensive in terms of performance. If you can find a way to avoid using it, that could potentially speed up your code.

3. Avoid repeated computations: You're recalculating `arr[i]` multiple times, it would be better to store it in a variable.

4. Use more efficient data structures: Your code uses a vector `arr`. If you don't need the dynamic resizing capabilities of a vector, you might get better performance with a plain array.

Here's an optimized version of your code with above changes:

```cpp
#include <bits/stdc++.h>
#define forloop(i, begin, end) for (int i = begin; i < end; i++)
#define ll long long int
#define ld long double
#define ravi ios_base::sync_with_stdio(false);
#define parmar2002 cin.tie(NULL); cout.tie(NULL);
#define nl "\n"
using namespace std;

void solve();
int main() {
  ravi parmar2002 solve();
  return 0;
}

void solve() {
  int n;
  cin >> n;
  vector<ll> arr(n);
  int mn = INT_MAX, mni;
  forloop(i, 0, n) {
    cin >> arr[i];
    if (arr[i] - i <= 0) {
      cout << i+1 << nl;
      return;
    }
    arr[i] = (arr[i] - i + n - 1) / n;
    if (mn > arr[i]) {
      mn = arr[i];
      mni = i;
    }
  }
  cout << mni + 1;
}
```

This version of the code performs less arithmetic operations, does not use the `ceil` function, and avoids repeated computations by storing the result in a variable `arr[i]`. The code also removes many unnecessary macros and functions that were not being used. It is always good to remove unused code to make it cleaner and more readable. This does not affect the runtime of the program, but it makes the program easier to maintain, which is also an important aspect of optimization.