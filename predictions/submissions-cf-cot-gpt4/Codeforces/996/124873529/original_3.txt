Here are some optimization steps that we can follow:

1. Reducing the number of macro definitions: Many of the macro definitions are not used in the given program, so we can remove them to clean up the code and reduce memory usage.

2. Optimizing the input/output operations: By using the 'scanf' and 'printf' functions instead of 'cin' and 'cout', we can speed up the input/output operations.

3. Reducing the number of function calls: In the 'fun' function which is unused, there are recursive calls. Although it's not used in the main routine, if it was, it would make sense to optimize it with dynamic programming to reduce the number of function calls.

4. Avoiding floating point division and using integer division instead: In the calculation of 'arr[i]', we can avoid using the 'ceil' function and floating point division and use integer division instead to speed up the calculation.

After applying these optimizations, the optimized program is:

```cpp
#include <bits/stdc++.h>
#define ll long long int
using namespace std;

void solve() {
  int n;
  scanf("%d", &n);
  vector<ll> arr(n);
  for(int i = 0; i < n; i++) {
    scanf("%lld", &arr[i]);
    arr[i] = (max(arr[i] - i, 0LL) + n - 1) / n;
    if(arr[i] == 0) {
      printf("%d", i + 1);
      return;
    }
  }
  int mni = min_element(arr.begin(), arr.end()) - arr.begin();
  printf("%d", mni + 1);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  solve();
  return 0;
}
```

Please note that some of the macro definitions and functions have been removed since they were not used in the program. The floating point division has been replaced with integer division, and the 'ceil' function is removed. We directly print the output when we find the first negative or zero value in the array, which could potentially save some computation time. Also, the 'min_element' function from the STL is used to find the minimum element in the array, which could be faster than the manual iteration in the original program.