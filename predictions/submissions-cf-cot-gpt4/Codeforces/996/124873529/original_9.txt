This program is already very well written, but there are a few minor improvements that can be done.
Here are the steps for optimizations:
1. Remove unnecessary macros: Macros like `whole`, `wholer`, `len`, `endline`, `retf`, `unm`, `uns`, `forv`, `forin`, `ret`, `F`, `S` are not being used in the program, so they can be removed.
2. Avoid using `std::endl` in favor of "\n": `std::endl` can potentially slow down the program because it forces a flush of the output stream buffer, whereas "\n" doesn't. However, this program uses `"\n"` so no change is needed.
3. Avoid use of `std::ios_base::sync_with_stdio(false)`: If you're mixing `cin/cout` with `printf/scanf`, you should not use `std::ios_base::sync_with_stdio(false)`. This program doesn't use `printf/scanf`, so we can leave the `ios_base::sync_with_stdio(false)` statement.
4. Reduce the scope of variables: The variable `int ans = 0;` is defined globally but never used, so it should be removed. Also, the `int mn = INT_MAX, mni;` variables can be initialized inside the second for loop.
5. Avoid using `bits/stdc++.h`: This is a header file in GCC, but it is not a standard library and it includes a lot of unnecessary stuff. It's better to include only the necessary headers.

Here is the optimized code:

```cpp
#include <vector>
#include <iostream>
#include <cmath>
#include <climits>

using namespace std;

#define forloop(i, begin, end) for (int i = begin; i < end; i++)
#define ravi ios_base::sync_with_stdio(false);
#define parmar2002 cin.tie(NULL); cout.tie(NULL);
#define nl "\n"
#define vll vector<long long int>

void solve();

int main() {
  ravi parmar2002 solve();
  return 0;
}

void solve() {
  int n;
  cin >> n;
  vll arr(n);
  forloop(i, 0, n) {
    cin >> arr[i];
    arr[i] -= i;
    if (arr[i] <= 0) {
      cout << i + 1 << nl;
      return;
    }
    arr[i] = ceil(double(arr[i]) / n);
  }
  int mn = INT_MAX, mni;
  forloop(i, 0, n) {
    if (mn > arr[i]) {
      mn = arr[i];
      mni = i;
    }
  }
  cout << mni + 1 << nl;
}
```

Note: Be aware that these optimizations will not drastically improve the performance of the program, but are rather general best practices for writing efficient C++ code.