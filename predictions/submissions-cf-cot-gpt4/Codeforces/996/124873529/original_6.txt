This code can be optimized in a few ways:

1. Removing unused functions and macros: There are several functions and macros that are defined but never used in the code. These include `power`, `mod`, `fun`, `T`, `retf`, `vint`, `vld`, `vbool`, `vpii`, `vpll`, `unm`, `uns`, `forv`, `forin`, `ret`, `F`, and `S`. Removing these will reduce the memory footprint of the code.

2. Reducing the number of operations: In your `solve` function, you loop through `arr` twice - once to input the elements and adjust them, and once to find the minimum value. This can be optimized by keeping track of the minimum value and its index during the first loop.

3. Removing unnecessary calculations: The `ceil` function is used to divide the element `arr[i]` by `n` and round up to the nearest integer. However, as both `arr[i]` and `n` are integers, this division is already an integer division and will automatically round down. To achieve the same effect as `ceil`, you can add `n-1` to `arr[i]` before dividing by `n`. This will round up for all positive values of `arr[i]`, and is faster than using `ceil`.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
#define forloop(i, begin, end) for (int i = begin; i < end; i++)
#define ll long long int
#define ravi ios_base::sync_with_stdio(false);
#define parmar2002 cin.tie(NULL); cout.tie(NULL);
#define nl "\n"
using namespace std;

void solve() {
  int n;
  cin >> n;
  vector<ll> arr(n);
  int mn = INT_MAX, mni;
  
  forloop(i, 0, n) {
    cin >> arr[i];
    arr[i] = (arr[i] - i + n - 1) / n;
    if (arr[i] <= 0) {
      cout << i + 1 << nl;
      return;
    }
    if (mn > arr[i]) {
      mn = arr[i];
      mni = i;
    }
  }
  
  cout << mni + 1 << nl;
}

int main() {
  ravi parmar2002 solve();
  return 0;
}
```

In the above code, we've removed the unused macros and functions, and combined the two loops into one. We've also replaced the `ceil` function with a faster equivalent operation.