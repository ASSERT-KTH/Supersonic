This program is quite efficient already, but there are still several possible optimizations.

1. The function `fun` is a recursive function that calls itself twice. This can cause a large number of function calls for large inputs, leading to a stack overflow. However, the function `fun` is not used in this program, so it can be removed to save memory.

2. The macro for `finout` which is used for file input/output redirection is not used in this program, and can be removed to save memory.

3. The macro for `sclock` and `eclock` which is used for time measurement is not used in this program, and can be removed to save memory.

4. The macro for `T(T)` which is used for test case is not used in this program, and can be removed to save memory.

5. The lambda functions `power` and `mod` are not used in this program, and can be removed to save memory.

6. The integer `ans` is not used in this program, and can be removed to save memory.

7. The vector `arr` is read and modified in two separate loops. These operations can be combined into a single loop to save time.

8. The calculation of the value `arr[i]` can be simplified and the `ceil` function can be avoided to save time.

Now, let's apply these modifications to the original code:

```cpp
#include <bits/stdc++.h>
#define forloop(i, begin, end) for (int i = begin; i < end; i++)
#define ll long long int
#define nl "\n"
#define ravi ios_base::sync_with_stdio(false);
#define parmar2002 cin.tie(NULL); cout.tie(NULL);
#define ret(x) { cout << x << nl; return; };
#define F first
#define S second
using namespace std;
void solve();
int main() {
  ravi parmar2002 solve();
  return 0;
}
void solve() {
  int n;
  cin >> n;
  int mn = INT_MAX, mni;
  forloop(i, 0, n) {
    ll x;
    cin >> x;
    x = (x - i + n - 1) / n;  // this is equivalent to ceil((x - i) / n)
    if (x <= 0)
      ret(i + 1);
    if (mn > x) {
      mn = x;
      mni = i;
    }
  }
  cout << mni + 1;
}
```

This optimized code is smaller, simpler, and faster than the original code.