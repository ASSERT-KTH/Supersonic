Optimization Steps:

1. Reduce the usage of macros: They can often lead to hard-to-debug issues, and are generally considered bad practice in modern C++. Replace them with functions or inline functions wherever possible.
2. Move the power and mod lambda functions inside the solve function: These functions are not being used anywhere else in the program, so it'll save some memory to move them inside the solve function.
3. Use `std::min_element` to find the minimum element in the array: This will eliminate the need for the second for loop in the solve function, reducing the time complexity from O(2n) to O(n).
4. Use `std::distance` to find the index of the minimum element: This will replace the need for manually tracking the index of the minimum element, reducing the amount of code and simplifying the program.
5. Remove the unused `fun` function: This will save some memory.
6. Remove the unused `ans` variable: This will save some memory.
7. Remove unnecessary includes: `bits/stdc++.h` is a non-standard header file and it includes a lot of unnecessary stuff, which can slow down the compilation time. Replace it with only the necessary includes.

Optimized Code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
#include <cmath>

using namespace std;

void solve() {
    int n;
    cin >> n;
    vector<long long> arr(n);
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
        arr[i] -= i;
        if (arr[i] <= 0) {
            cout << i + 1 << "\n";
            return;
        }
        arr[i] = ceil(double(arr[i]) / n);
    }
    auto min_iter = min_element(arr.begin(), arr.end());
    cout << distance(arr.begin(), min_iter) + 1;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    solve();
    return 0;
}
```
