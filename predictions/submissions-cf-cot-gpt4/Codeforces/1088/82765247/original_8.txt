Optimization Steps:

1. Since the main bottleneck in this problem is the two nested loops which makes the time complexity of the program as O(n^2), we can optimize this by avoiding the inner loop which is used to update the elements of the vector 'v'. Instead of updating the elements of the vector 'v' every time in the inner loop, we can keep track of the total addition made to the vector 'v' in a variable. And while checking the value of 'v[i]', we can take this total addition into account.

2. Remove the unused macros and typedefs. It will not affect the performance of the program, but it will make the program more readable, and it will use less memory.

3. Remove 'v[0] = -1;' as it's not used in your program.

Optimized Code:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long int lli;
#define pb push_back
#define fi first
#define se second

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  lli n;
  cin >> n;
  vector<lli> v(n + 1);
  vector<pair<lli, pair<lli, lli>>> pp;
  lli total_add = 0;
  for (lli i = 1; i <= n; i++) {
    cin >> v[i];
  }
  for (lli i = n; i >= 1; i--) {
    v[i] += total_add;
    if (v[i] > i) {
      lli rem = (v[i] - i) % (n + 1);
      pp.pb({1, {i, n + 1 - rem}});
      total_add += n + 1 - rem;
    } else {
      pp.pb({1, {i, i - v[i]}});
      total_add += i - v[i];
    }
  }
  pp.pb({2, {n, n + 1}});
  cout << pp.size() << "\n";
  for (auto i : pp) {
    cout << i.fi << " " << i.se.fi << " " << i.se.se << "\n";
  }
}
```

Note: The above code is assuming that the 'v' vector is a 1-based indexed vector and the 'pp' vector is to store the actions (with their details) performed on the 'v' vector.