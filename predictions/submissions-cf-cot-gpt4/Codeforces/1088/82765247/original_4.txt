The given C++ code can be optimized in the following ways.

1. Reduce the usage of vector `v`: Instead of storing all elements in the vector `v`, we can directly read the input and perform the required operations. This will reduce memory usage.

2. Reduce the usage of vector `pp`: The vector `pp` is used to store pairs of data, which are then printed out at the end of the program. Instead of storing all these pairs and printing them all at once, we can print them directly when they are generated. This will reduce memory usage.

3. Avoid unnecessary calculations: In the `for` loops that update the elements of `v`, there are calculations that are repeated in each iteration. These calculations can be done once outside the loop and the result can be reused in the loop.

Here is the optimized version of the given program:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long int lli;
#define S 1000001
#define M 1000000007
#define nl cout << "\n";
#define fast ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define f0(s, a, b) for (lli s = a; s < b; s++)
#define f1(s, a, b) for (lli s = a; s <= b; s++)
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define print(x) cout << #x << "=" << x << "\n";
#define out(x) cout << x;
#define Y cout << "YES\n";
#define N cout << "NO\n";
int main() {
  fast
  lli n;
  cin >> n;
  lli v;
  lli count = 0;
  for (lli i = n; i >= 1; i--) {
    cin >> v;
    if (v > i) {
      lli rem = (v - i) % (n + 1);
      cout << 1 << " " << i << " " << n + 1 - rem << "\n";
      count++;
    } else {
      cout << 1 << " " << i << " " << i - v << "\n";
      count++;
    }
  }
  cout << 2 << " " << n << " " << n + 1 << "\n";
  count++;
  cout << count << "\n";
}
```
Please note that the above optimized code assumes that the input values are correct and does not include any error checking or validation. Depending on the specific requirements of your application, you might need to add additional code to handle possible error conditions.