This C++ program is already well-structured and efficient in many ways, but there are a few areas where we can make it more efficient in terms of running time and memory usage:

1. Reduction of I/O Operations: The `ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);` has been used to decrease the time taken for cin and cout operations. However, this program doesn't have much cin and cout operations. So, we can remove these lines of code.

2. Avoiding 'bits/stdc++.h': The header file 'bits/stdc++.h' includes quite a lot of files, which increases the compilation time. It's better to include only those header files which are actually being used in the program.

3. Avoiding unnecessary macros: The macros definitions are not being used in the entire program. Removing them will reduce memory usage.

4. Vector resizing instead of initialization: Initializing the vector `v` with `n+1` size and then changing `v[0]` is more performance-consuming than just declaring the vector and using `push_back` to add elements.

5. Avoiding unnecessary pairs: The pair of pairs `pp` could be replaced with a struct to make the code more readable and efficient.

6. Reducing the number of if-else checks: In the second for loop, we can reduce the number of if-else checks by pre-calculating the value to be added to `v[j]` and storing it in the variable.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;
typedef long long int lli;

struct ppStruct {
  lli first, second, third;
};

int main() {
  lli n;
  cin >> n;
  vector<lli> v;
  v.push_back(-1); // Pushing -1 at the 0th index
  vector<ppStruct> pp;
  for (lli i = 1; i <= n; i++) {
    lli temp;
    cin >> temp;
    v.push_back(temp);
  }
  for (lli i = n; i >= 1; i--) {
    lli addVal;
    if (v[i] > i) {
      lli rem = (v[i] - i) % (n + 1);
      pp.push_back({1, i, n + 1 - rem});
      addVal = n + 1 - rem;
    } else {
      pp.push_back({1, i, i - v[i]});
      addVal = i - v[i];
    }
    for (lli j = 1; j <= i; j++) {
      v[j] += addVal;
    }
  }
  pp.push_back({2, n, n + 1});
  cout << pp.size() << "\n";
  for (auto i : pp) {
    cout << i.first << " " << i.second << " " << i.third << "\n";
  }
  return 0;
}
```

Please note that this code is optimized for running time and memory usage but the readability and ease of understanding of the code have been slightly compromised.