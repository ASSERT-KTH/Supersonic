We can optimize the given program in several ways:

1. **Avoid using `#include <bits/stdc++.h>`**: This header file includes almost all the standard C++ libraries, which can increase the compilation time. It is better to include only the necessary header files.

2. **Avoid using `using namespace std;`**: This can lead to name conflicts when the program becomes larger and more complex. It is better to use `std::` before each standard library object.

3. **Avoid using `typedef`**: Modern C++ provides the using directive which is more readable and flexible. 

4. **Avoid using macros for common operations**: Macros like `cout << "\n";` or `cout << "NO\n";` can reduce readability. It's generally better to write the operation directly where needed.

5. **Avoid unnecessary memory allocations and calculations**: In the for loop where we're populating the pp vector, we're recalculating values and allocating new memory for each iteration which could be avoided.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>

using lli = long long int;
using pair_type = std::pair<lli, std::pair<lli, lli>>;

int main() {
  lli n;
  std::cin >> n;
  std::vector<lli> v(n + 1);
  std::vector<pair_type> pp;
  for (lli i = 1; i <= n; i++) {
    std::cin >> v[i];
  }
  v[0] = -1;
  for (lli i = n; i >= 1; i--) {
    lli val1, val2;
    if (v[i] > i) {
      val1 = n + 1 - (v[i] - i) % (n + 1);
      pp.push_back({1, {i, val1}});
      for (lli j = 1; j <= i; j++) {
        v[j] += val1;
      }
    } else {
      val2 = i - v[i];
      pp.push_back({1, {i, val2}});
      for (lli j = 1; j <= i; j++) {
        v[j] += val2;
      }
    }
  }
  pp.push_back({2, {n, n + 1}});
  std::cout << pp.size() << "\n";
  for (const auto& i : pp) {
    std::cout << i.first << " " << i.second.first << " " << i.second.second << "\n";
  }
}
```

This version of the program avoids unnecessary memory allocations, uses more readable and flexible modern C++ features, and only includes necessary header files.