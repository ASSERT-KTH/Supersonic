Step by step optimization:

1) Reducing the number of `#define` macros will make the code cleaner and more readable. These macros are not necessary and can lead to confusion and potential errors.

2) Instead of using `cout` and `cin` for input and output, using `printf` and `scanf` can improve the running time as they are faster.

3) The use of `bits/stdc++.h` is not recommended because it includes a lot of unnecessary libraries which increases the compilation time. It's better to include only the libraries that are needed.

4) Instead of using the `vector<pair<lli, pair<lli, lli>>>` data structure, you can use arrays which will reduce the memory usage.

5) Instead of two separate for loops for incrementing the elements of the vector `v`, you can merge them into one loop. This will reduce the time complexity.

6) It's better to use '\n' instead of `endl` for new line. `endl` causes unnecessary flushing of the buffer, thus slowing down the output.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <utility>

typedef long long int lli;

int main() {
  lli n;
  scanf("%lld", &n);
  lli v[n + 1];
  lli pp[n+1][3];
  lli pp_size = 0;

  for (lli i = 1; i <= n; i++) {
    scanf("%lld", &v[i]);
  }

  v[0] = -1;
  for (lli i = n; i >= 1; i--) {
    lli rem = 0;
    if (v[i] > i) {
      rem = (v[i] - i) % (n + 1);
      pp[pp_size][0] = 1;
      pp[pp_size][1] = i;
      pp[pp_size][2] = n + 1 - rem;
    } else {
      pp[pp_size][0] = 1;
      pp[pp_size][1] = i;
      pp[pp_size][2] = i - v[i];
      rem = v[i];
    }
    pp_size++;
    
    for (lli j = 1; j <= i; j++) {
      v[j] = v[j] + i - rem;
    }
  }

  pp[pp_size][0] = 2;
  pp[pp_size][1] = n;
  pp[pp_size][2] = n + 1;
  pp_size++;

  printf("%lld\n", pp_size);
  for (lli i = 0; i < pp_size; i++) {
    printf("%lld %lld %lld\n", pp[i][0], pp[i][1], pp[i][2]);
  }

  return 0;
}
```
This code is more efficient in terms of running time and memory usage. It uses arrays instead of vectors and pairs, and uses `scanf` and `printf` for input and output. The two for loops for incrementing the elements of the vector `v` have been merged into one loop.