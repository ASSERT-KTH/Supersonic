This program can be optimized in two ways:

1. Avoiding unnecessary usage of `std::vector::push_back()` method: In the current code, `pp` vector is being filled using `push_back()`. This method may trigger reallocation (and thus copying) of the entire vector when it needs to grow, which is a potentially expensive operation. It's better to reserve memory in advance if we know the maximum size of the vector. In this case, we know that the maximum size of the `pp` vector will be `n+1`.

2. Avoiding unnecessary computation in the main loop: In the current code, we are incrementing each element of the `v` vector in a loop. This operation is done `n` times, which results in a computation complexity of O(n^2). We can reduce this to O(n) by just storing the increment value, and adding it when we output the vector.

Here is the optimized version of the code:

```
#include <bits/stdc++.h>
using namespace std;
typedef long long int lli;
typedef unsigned long long int ulli;
typedef long double ld;
#define S 1000001
#define M 1000000007
#define nl cout << "\n";
#define er cout << "\n***********\n";
#define fast                                                                   \
  ios_base::sync_with_stdio(false);                                            \
  cin.tie(NULL);                                                               \
  cout.tie(NULL);
#define test                                                                   \
  lli t;                                                                       \
  cin >> t;                                                                    \
  while (t--)
#define f0(s, a, b) for (lli s = a; s < b; s++)
#define f1(s, a, b) for (lli s = a; s <= b; s++)
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define print(x) cout << #x << "=" << x << "\n";
#define out(x) cout << x;
#define Y cout << "YES\n";
#define N cout << "NO\n";
int main() {
  lli n;
  cin >> n;
  vector<lli> v(n + 1);
  vector<pair<lli, pair<lli, lli>>> pp(n+1); // reserve memory in advance
  vector<lli> increments(n + 1, 0); // new vector to store increments
  for (lli i = 1; i <= n; i++) {
    cin >> v[i];
  }
  v[0] = -1;
  lli pp_index = 0; // keep track of the current index in pp
  for (lli i = n; i >= 1; i--) {
    if (v[i] > i) {
      lli rem = (v[i] - i) % (n + 1);
      pp[pp_index++] = {1, {i, n + 1 - rem}};
      increments[i] += n + 1 - rem; // store the increment
    } else {
      pp[pp_index++] = {1, {i, i - v[i]}};
      increments[i] += i - v[i]; // store the increment
    }
  }
  pp[pp_index++] = {2, {n, n + 1}};
  cout << pp_index << "\n";
  for (lli i = 0; i < pp_index; i++) {
    cout << pp[i].fi << " " << pp[i].se.fi + increments[pp[i].se.fi] << " " << pp[i].se.se + increments[pp[i].se.se] << "\n";
  }
}
```