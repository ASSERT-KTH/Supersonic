This program can be optimized in the following ways:

1. Input/Output Optimizations: Fast I/O techniques are already being used in the program. However, the use of `endl` should be avoided as it is slower due to the additional flush operation. Instead, "\n" should be used.

2. Loop Optimizations: The loops where elements of the vector `v` are updated can be optimized. Instead of going through each element one by one and updating them, a common increment can be maintained which gets added to each element when they are accessed. This will reduce the time complexity from O(n^2) to O(n).

3. Use of `std::vector::reserve`: Memory reallocations can be expensive. The `std::vector` function `reserve` can be used to pre-allocate memory, reducing the number of reallocations.

4. Use of `std::ios_base::sync_with_stdio(false);`: This line makes C++ standard streams unsynchronized, which makes them faster.

Here is the optimized version of your program:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long int lli;
#define S 1000001
#define fast ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

int main() {
  fast
  lli n;
  cin >> n;
  vector<lli> v(n + 1);
  vector<pair<lli, pair<lli, lli>>> pp;
  pp.reserve(n); // Memory reservation
  lli common_increment = 0; // Common increment
  for (lli i = 1; i <= n; i++) {
    cin >> v[i];
  }
  v[0] = -1;
  for (lli i = n; i >= 1; i--) {
    v[i] += common_increment; // Add common increment
    if (v[i] > i) {
      lli rem = (v[i] - i) % (n + 1);
      pp.push_back({1, {i, n + 1 - rem}});
      common_increment += n + 1 - rem; // Update common increment
    } else {
      pp.push_back({1, {i, i - v[i]}});
      common_increment += i - v[i]; // Update common increment
    }
  }
  pp.push_back({2, {n, n + 1}});
  cout << pp.size() << "\n";
  for (auto i : pp) {
    cout << i.first << " " << i.second.first << " " << i.second.second << "\n";
  }
}
```

This optimized version reduces the time complexity from O(n^2) to O(n), and uses `std::vector::reserve` to reduce memory reallocation. It also replaces `endl` with "\n" for faster output and adds `std::ios_base::sync_with_stdio(false);` for faster I/O.