This program can be optimized in the following ways:

1. Avoid using `#include <bits/stdc++.h>` as it includes a lot of unnecessary libraries and slows down the compilation time. Instead, only include necessary libraries.
2. Instead of using `typedef`, use `using` keyword for type aliasing as `using` is more versatile.
3. Minimize the use of macros. They can lead to code that is hard to understand and debug.
4. In the for loop where you're updating the vector `v`, the same value is added to every element. Instead of using a for loop, you can keep track of the total sum that needs to be added and add it when you're accessing the element. This will reduce the time complexity from O(n^2) to O(n).
5. Use '\n' instead of `endl` as it does not cause unnecessary flushes which can slow down the program.

Here is the optimized version of your code:

```cpp
#include <iostream>
#include <vector>
using namespace std;
using lli = long long int;
constexpr int S = 1000001;
constexpr int M = 1000000007;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  lli t;
  cin >> t;
  
  while (t--) {
    lli n;
    cin >> n;
    vector<lli> v(n + 1);
    vector<pair<lli, pair<lli, lli>>> pp;
    lli add = 0;

    for (lli i = 1; i <= n; i++) {
      cin >> v[i];
    }
    v[0] = -1;
    for (lli i = n; i >= 1; i--) {
      v[i] += add;
      if (v[i] > i) {
        lli rem = (v[i] - i) % (n + 1);
        pp.push_back({1, {i, n + 1 - rem}});
        add += n + 1 - rem;
      } else {
        pp.push_back({1, {i, i - v[i]}});
        add += i - v[i];
      }
    }
    pp.push_back({2, {n, n + 1}});
    cout << pp.size() << "\n";
    for (auto i : pp) {
      cout << i.first << " " << i.second.first << " " << i.second.second << "\n";
    }
  }
  return 0;
}
```

The optimized code reduces the time complexity, uses more modern C++ features, and is more readable. The use of `vector::push_back` instead of `vector::pb` (by defining a macro) is also more standard and understandable to other developers.