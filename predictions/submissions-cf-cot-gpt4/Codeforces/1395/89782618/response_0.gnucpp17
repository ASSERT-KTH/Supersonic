#include <algorithm>
#include <bitset>
#include <iostream>
#include <limits>
#include <vector>
#include <unordered_map>
using namespace std;

typedef pair<int, int> pii;
unordered_map<pii, int> dp;

int recurse(const vector<int> &a, const vector<int> &b, int index = 0, int OR = 0) {
  if (index == a.size()) {
    return OR;
  }
  pii key = make_pair(index, OR);
  if (dp.find(key) != dp.end())
    return dp[key];
  int answer = numeric_limits<int>::max();
  int bSize = b.size();
  for (int i = 0; i < bSize; ++i) {
    int ret = recurse(a, b, index + 1, OR | (a[index] & b[i]));
    answer = min(answer, ret);
  }
  return dp[key] = answer;
}

int main(int argc, char const *argv[]) {
  int n, m;
  cin >> n >> m;
  vector<int> a(n), b(m);
  for (int i = 0; i < n; ++i)
    cin >> a[i];
  for (int i = 0; i < m; ++i)
    cin >> b[i];
  cout << recurse(a, b) << '\n';
  return 0;
}