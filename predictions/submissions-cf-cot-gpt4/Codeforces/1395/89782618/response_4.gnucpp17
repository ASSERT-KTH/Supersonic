#include <algorithm>
#include <bitset>
#include <iostream>
#include <limits>
#include <vector>
using namespace std;
int recurse(const vector<int> &a, const vector<int> &b, vector<int> &dp,
            int index = 0, int OR = 0) {
  if (index == a.size()) {
    return OR;
  }
  int dp_index = index * (1 << 9) + OR;
  if (dp[dp_index] != -1)
    return dp[dp_index];
  int answer = numeric_limits<int>::max();
  for (int i = 0; i < b.size(); ++i) {
    int ret = recurse(a, b, dp, index + 1, OR | (a[index] & b[i]));
    if (ret < answer)
      answer = ret;
  }
  return dp[dp_index] = answer;
}
int main(int argc, char const *argv[]) {
  int n, m;
  cin >> n >> m;
  vector<int> a(n), b(m);
  for (int i = 0; i < n; ++i)
    cin >> a[i];
  for (int i = 0; i < m; ++i)
    cin >> b[i];
  vector<int> dp(n * (1 << 9), -1);
  cout << recurse(a, b, dp) << '\n';
  return 0;
}