#include <algorithm>
#include <bitset>
#include <iostream>
#include <limits>
#include <vector>
#include <iterator>
using namespace std;
inline int recurse(const vector<int> &a, const vector<int> &b, vector<vector<int>> &dp,
            int index = 0, int OR = 0) {
  if (index == a.size()) {
    return OR;
  }
  if (dp[index][OR] != -1)
    return dp[index][OR];
  int answer = numeric_limits<int>::max();
  for (int i = 0; i < b.size(); ++i) {
    int ret = recurse(a, b, dp, index + 1, OR | (a[index] & b[i]));
    answer = min(answer, ret);
  }
  return dp[index][OR] = answer;
}
int main(int argc, char const *argv[]) {
  std::ios::sync_with_stdio(false);
  cin.tie(NULL);
  int n, m;
  cin >> n >> m;
  vector<int> a(n), b(m);
  copy_n(istream_iterator<int>(cin), n, begin(a));
  copy_n(istream_iterator<int>(cin), m, begin(b));
  vector<vector<int>> dp(n, vector<int>(1 << 9, -1));
  cout << recurse(a, b, dp) << '\n';
  return 0;
}