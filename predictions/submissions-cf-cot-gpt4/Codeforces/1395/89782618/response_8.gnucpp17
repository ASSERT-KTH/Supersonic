#include <algorithm>
#include <bitset>
#include <iostream>
#include <limits>
#include <vector>
using namespace std;
vector<vector<int>> dp;
vector<int> precomputed_min_OR;

void precompute(const vector<int> &a, const vector<int> &b){
    precomputed_min_OR.resize(a.size(), numeric_limits<int>::max());
    for(int i=0; i<a.size(); ++i)
        for(int j=0; j<b.size(); ++j)
            precomputed_min_OR[i] = min(precomputed_min_OR[i], a[i] & b[j]);
}

int recurse(const vector<int> &a, int index = 0, int OR = 0) {
  if (index == a.size()) {
    return OR;
  }
  if (dp[index][OR] != -1)
    return dp[index][OR];
  return dp[index][OR] = min(recurse(a, index + 1, OR), recurse(a, index + 1, OR | precomputed_min_OR[index]));
}

int main(int argc, char const *argv[]) {
  int n, m;
  cin >> n >> m;
  vector<int> a(n), b(m);
  for (int i = 0; i < n; ++i)
    cin >> a[i];
  for (int i = 0; i < m; ++i)
    cin >> b[i];
  dp.resize(n, vector<int>(1 << 9, -1));
  precompute(a, b);
  cout << recurse(a) << '\n';
  for(auto &row : dp)
    fill(row.begin(), row.end(), -1);
  return 0;
}
