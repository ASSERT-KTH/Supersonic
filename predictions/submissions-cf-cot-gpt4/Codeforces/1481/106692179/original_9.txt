Here are the steps to optimize the given program:

1. Avoid using `#include<bits/stdc++.h>`: This header file includes quite a lot of headers. It might increase the compile time and is not a standard header file in C++.

2. Avoid using variable length arrays: `ll h[n];` and `ll diff[n] = {0};` These are not standard in C++. Instead, use `std::vector`. It will also manage memory better than a raw array.

3. Use prefix sum in the `diff` array: Instead of calculating the sum at the end, you can calculate the sum while filling the `diff` array. So, we can avoid the second loop that calculates the sum.

4. Avoid unnecessary continue statement: In the loop where you calculate the `diff` array, the `continue` statement is unnecessary. You can remove it.

5. Avoid the calculation if the sum is less than `k`: Currently, you are continuing the calculation even if the sum is less than `k`. You can break the loop and print `-1` immediately after you know that the sum is less than `k`.

6. Use prefix sum for `h` array: In your innermost loop, you are checking if `h[i] < h[i + 1]`. Instead, you can calculate a prefix maximum array for `h` and check `h[i] < prefix_max[i + 1]`. This way, you don't need to check `h[i + 1]` for every `i`, which can save you some time.

Optimized program:

```C++
#include <iostream>
#include <vector>
#define ll long long int
using namespace std;
int main() {
  int tc;
  cin >> tc;
  while (tc--) {
    ll k, sum = 0;
    int n;
    cin >> n >> k;
    vector<ll> h(n), diff(n), prefix_max(n);
    for (int i = 0; i < n; i++) {
      cin >> h[i];
    }
    ll maax = h[n - 1];
    for (int i = n - 1; i >= 0; i--) {
      if (h[i] > maax) {
        maax = h[i];
      } else {
        diff[i] = maax - h[i];
      }
      sum += diff[i];
      if(sum >= k){
        break;
      }
    }
    if (sum < k) {
      cout << "-1\n";
      continue;
    }
    int flag = 0;
    ll ans;
    prefix_max[n - 1] = h[n - 1];
    for (int i = n - 2; i >= 0; i--) {
      prefix_max[i] = max(h[i], prefix_max[i + 1]);
    }
    while (k-- && flag == 0) {
      for (int i = 0; i < n; i++) {
        if (i != n - 1 && h[i] < prefix_max[i + 1]) {
          h[i]++;
          ans = i + 1;
          break;
        } else {
          if (i == n - 1)
            flag = 1;
        }
      }
    }
    if (flag == 1)
      cout << "-1\n";
    else
      cout << ans << endl;
  }
  return 0;
}
```