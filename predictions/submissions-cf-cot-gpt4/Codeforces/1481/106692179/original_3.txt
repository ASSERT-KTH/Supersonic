The given program has some redundancies that can be improved for better performance in terms of running time and memory usage.

1. Redundant `#include <bits/stdc++.h>`. This is a header file that includes almost all the standard libraries. It's not recommended to use this header file as it causes the compiler to include and compile all standard libraries which increases the compilation time and program size. You need to include only the necessary header files.

2. Variable `maax` is initialized with the last element of the array `h`, then in the loop, the same initialization happens again. This is not necessary and can be avoided.

3. You are using a separate array `diff` to store the difference between the maximum element and the current element. This array is then used to calculate the sum. Instead of using a separate array, you can calculate the sum directly.

4. In the while loop, there's a check for `flag` at the end of each iteration inside the for loop, which is unnecessary because the for loop will always end when `i == n-1`, so you can directly check `flag` after the for loop.

5. The `flag` variable is not reset to 0 for each test case.

Here is the optimized code:

```cpp
#include <iostream>
#define ll long long int
using namespace std;

int main() {
  int tc;
  cin >> tc;
  while (tc--) {
    ll k, sum = 0;
    int n;
    cin >> n >> k;
    ll h[n];
    for (int i = 0; i < n; i++) {
      cin >> h[i];
    }
    ll maax = 0;
    for (int i = n - 1; i >= 0; i--) {
      if (h[i] > maax) {
        maax = h[i];
      } else {
        sum += maax - h[i];
      }
    }
    if (sum < k) {
      cout << "-1\n";
      continue;
    }
    int flag = 0;
    ll ans;
    while (k--) {
      for (int i = 0; i < n; i++) {
        if (i != n - 1 && h[i] < h[i + 1]) {
          h[i]++;
          ans = i + 1;
          break;
        } else {
          if (i == n - 1)
            flag = 1;
        }
      }
      if (flag == 1) {
          break;
      }
    }
    if (flag == 1)
      cout << "-1\n";
    else
      cout << ans << endl;
    flag = 0;
  }
  return 0;
}
```
Note: This code assumes that the input is always valid and within the range supported by the data types used. If this is not the case, you should add appropriate error checks.