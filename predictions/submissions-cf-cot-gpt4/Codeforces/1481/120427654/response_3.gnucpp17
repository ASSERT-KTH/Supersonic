#include <iostream>
#include <vector>
#include <algorithm>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;

typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::pair<long double, pii> muchie;
typedef tree<ll, null_type, less_equal<ll>, rb_tree_tag,
             tree_order_statistics_node_update>
    OST;

const ll NMAX = 100001;
const ll INF = (1LL << 60);
const ll HALF = (1LL << 59);
const ll MOD = 1000000007;
const ll BLOCK = 518;
const ll base = 31;
const ll nr_of_bits = 21;
const ll LIMIT = 1000;
int dp[BLOCK][NMAX];
int cnt[NMAX];
std::vector<int> lvl[NMAX];
std::vector<int> v[NMAX];
std::vector<int> levelecu[NMAX];
int mp[NMAX] = {0};
int l[NMAX];
int depth;
char cul[NMAX];
int cc[NMAX];
void DFS(int node, int p, int level) {
  lvl[level].push_back(node);
  depth = std::max(depth, level);
  for (int x : v[node]) {
    if (x == p)
      continue;
    DFS(x, node, level + 1);
  }
}
int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  
  int n, x, i;
  std::cin >> n >> x;
  int a = x;
  int b = n - x;
  for (i = 2; i <= n; i++) {
    std::cin >> x;
    v[x].push_back(i);
    v[i].push_back(x);
  }
  for (i = 1; i <= n; i++) {
    cnt[i] = v[i].size() - (i != 1);
  }
  DFS(1, 0, 1);
  for (i = 1; i <= n; i++) {
    if (lvl[i].size() == 0)
      continue;
    levelecu[lvl[i].size()].push_back(i);
    mp[lvl[i].size()]++;
  }
  int c = 0;
  dp[0][0] = 1;
  
  // more code here...
  
  return 0;
}