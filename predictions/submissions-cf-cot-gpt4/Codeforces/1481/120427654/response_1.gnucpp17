#include <stdio.h>
#include <vector>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<long double, pii> muchie;
typedef tree<ll, null_type, less_equal<ll>, rb_tree_tag,
             tree_order_statistics_node_update>
    OST;
const ll NMAX = 100001;
const ll INF = (1LL << 60);
const ll HALF = (1LL << 59);
const ll MOD = 1000000007;
const ll BLOCK = 518;
const ll base = 31;
const ll nr_of_bits = 21;
const ll LIMIT = 1000;
int dp[BLOCK][NMAX];
int cnt[NMAX];
vector<int> lvl[NMAX];
vector<int> v[NMAX];
vector<int> levelecu[NMAX];
int mp[NMAX] = {0};
int l[NMAX] = {0};
int depth;
char cul[NMAX];
int cc[NMAX];
void DFS(int node, int p, int level) {
  lvl[level].push_back(node);
  depth = max(depth, level);
  for (auto x : v[node]) {
    if (x == p)
      continue;
    DFS(x, node, level + 1);
  }
}
int main() {
  int n, x, i;
  scanf("%d %d", &n, &x);
  int a = x;
  int b = n - x;
  for (i = 2; i <= n; i++) {
    scanf("%d", &x);
    v[x].push_back(i);
    v[i].push_back(x);
  }
  for (i = 1; i <= n; i++) {
    cnt[i] = v[i].size() - (i != 1);
  }
  DFS(1, 0, 1);
  for (i = 1; i <= n; i++) {
    if (lvl[i].empty())
      continue;
    levelecu[lvl[i].size()].push_back(i);
    mp[lvl[i].size()]++;
  }
  int c = 0;
  dp[0][0] = 1;
  for (i = 1; i <= n; i++) {
    if (mp[i] == 0) continue;
    ++c;
    cc[c] = i;
    int val = i;
    int freq = mp[i];
    for (int j = 0; j < val; j++) {
      l[j] = -1;
    }
    for (int j = 0; j <= a; j++) {
      if (dp[c - 1][j])
        l[j % val] = j;
      int rest = j % val;
      if (l[rest] != -1 && (j - l[rest]) / val <= freq) {
        dp[c][j] = 1;
      }
    }
  }
  // Rest of the code remains the same
}