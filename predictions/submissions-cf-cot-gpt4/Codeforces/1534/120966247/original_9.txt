The given program is already quite optimized, but there are still a few things we can improve for running time and memory usage.

1. In the `dfs` function, the `for` loop iterates over the vector `e[u]` using index. It is more efficient to use an iterator or range-based `for` loop in C++.

2. In the `qmi` function, `s % N` is unnecessary at the end since `s` is always kept under `N` by the `s = s * x % N` operation.

3. In the `main` function, instead of using `memset` to initialize `vis`, we can use `std::fill` which is more idiomatic in C++ and slightly faster.

4. Clearing `e[i]` for each test case is necessary, but for the last test case, it is not needed. We can save some time by skipping this operation for the last test case.

Here is the optimized code:

```cpp
#include <cstring>
#include <iostream>
#include <vector>
using namespace std;
#define int long long
const int N = 1e9 + 7;
int t, n, cnt;
int a[400005], vis[400005];
vector<int> e[400005];
void dfs(int u) {
  vis[u] = 1;
  for (auto v : e[u]) {
    if (!vis[v])
      dfs(v);
  }
}
int qmi(int cnt) {
  int x = 2, s = 1;
  while (cnt) {
    if (cnt & 1)
      s = s * x % N;
    x = x * x % N;
    cnt >>= 1;
  }
  return s;
}
signed main() {
  cin >> t;
  while (t--) {
    cin >> n;
    cnt = 0;
    fill(vis, vis+n+1, 0);
    for (int i = 1; i <= n; i++) {
      cin >> a[i];
      if (t)
        e[i].clear();
    }
    for (int v, i = 1; i <= n; i++) {
      cin >> v;
      e[a[i]].push_back(v);
    }
    for (int i = 1; i <= n; i++)
      if (!vis[a[i]])
        cnt++, dfs(a[i]);
    cout << qmi(cnt) << endl;
  }
  return 0;
}
```

Note: This is a micro-optimization, the performance gain might not be noticeable unless you are dealing with a large amount of data.