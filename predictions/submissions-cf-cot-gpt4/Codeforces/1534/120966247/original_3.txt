The program can be optimized in a few ways:

1. I/O Optimization: Input and output operations are quite slow in C++. We can speed them up with the help of `ios_base::sync_with_stdio(false); cin.tie(NULL);` before the start of main(). This unties C++ standard streams from their corresponding C streams.

2. Avoiding function call overhead: In the program, we are using `e[u].size()` in the loop condition. It's better to store the size in a variable before the loop starts. This way, we avoid calling the size function at each iteration.

3. Memory Optimization: Instead of declaring an array `a[400005]` and `vis[400005]` of size 400005, we can declare a dynamic array of size `n` which is the maximum size our program will need at runtime.

4. Use of `std::vector<bool>`: We can use `std::vector<bool>` for `vis`, as it uses 1 bit per boolean value whereas the `int` uses 4 bytes. This will reduce memory usage.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
using namespace std;
#define int long long
const int N = 1e9 + 7;
int t, n, cnt;
vector<int> a;
vector<bool> vis;
vector<int> e[400005];
void dfs(int u) {
  vis[u] = 1;
  for (int i = 0, n = e[u].size(); i < n; ++i) {
    int v = e[u][i];
    if (!vis[v])
      dfs(v);
  }
}
int qmi(int cnt) {
  int x = 2, s = 1;
  while (cnt) {
    if (cnt & 1)
      s = s * x % N;
    x = x * x % N;
    cnt >>= 1;
  }
  return s % N;
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> t;
  while (t--) {
    cin >> n;
    cnt = 0;
    a.resize(n+1);
    vis.resize(n+1);
    fill(vis.begin(), vis.end(), false);
    for (int i = 1; i <= n; i++) {
      cin >> a[i];
      e[i].clear();
    }
    for (int i = 1; i <= n; i++) {
      int v; cin >> v;
      e[a[i]].push_back(v);
    }
    for (int i = 1; i <= n; i++)
      if (!vis[a[i]])
        cnt++, dfs(a[i]);
    cout << qmi(cnt) << '\n';
  }
  return 0;
}
```

NOTE: The optimization is done without altering the logic of the original code. If the logic can be improved, further optimizations may be possible.