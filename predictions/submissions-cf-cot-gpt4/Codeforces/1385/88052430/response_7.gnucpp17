#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

template <typename T>
using ordered_multiset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define int long long
#define ld long double
#define MOD 1000000007
#define precise(i) fixed << setprecision(10) << i
#define endl '\n'
#define debug cout << "\n========================================\n";
#define err1(a) cout << #a << " " << a << endl;
#define err2(a, b) cout << #a << " " << a << " " << #b << " " << b << endl;
#define err3(a, b, c)                                                          \
  cout << #a << " " << a << " " << #b << " " << b << " " << #c << " " << c     \
       << endl;
#define err4(a, b, c, d)                                                       \
  cout << #a << " " << a << " " << #b << " " << b << " " << #c << " " << c     \
       << " " << #d << " " << d << endl;
#define all(a) a.begin(), a.end()
#define show(a)                                                                \
  for (auto xyz : a)                                                           \
    cout << xyz << " ";                                                        \
  cout << endl;
#define PQ priority_queue
#define LB lower_bound
#define UB upper_bound
#define fr first
#define sc second
#define sz(x) (int)(x).size()

vector<int> visited, being_visited, TS;
vector<vector<int>> g;

bool dfs(int i) {
  if (visited[i]) {
    return 0;
  } else if (being_visited[i]) {
    return 1;
  } else {
    being_visited[i] = 1;
    for (auto j : g[i]) {
      if (dfs(j))
        return 1;
    }
  }
  being_visited[i] = 0;
  visited[i] = 1;
  TS.push_back(i);
  return 0;
}

void solve() {
  int n, m;
  cin >> n >> m;
  visited.resize(n + 1, 0);
  being_visited.resize(n + 1, 0);
  TS.clear();
  g.resize(n + 1);
  vector<set<int>> G(n + 1);

  for (int i = 0; i < m; ++i) {
    int t, x, y;
    cin >> t >> x >> y;
    if (t)
      g[x].push_back(y);
    G[x].insert(y);
    G[y].insert(x);
  }

  for (int i = 1; i <= n; ++i) {
    bool ch = 1;
    if (g[i].size() == 0 and G[i].size() > 0) {
      for (auto j : G[i]) {
        ch &= (!G[j].count(i));
      }
    } else {
      ch = 0;
    }
    if (ch) {
      for (auto j : G[i]) {
        g[i].push_back(j);
      }
    }
  }

  auto havecycle = [&]() {
    for (int i = 1; i <= n; ++i) {
      if (!visited[i]) {
        if (dfs(i)) {
          return 1;
        }
      }
    }
    return 0;
  };

  if (havecycle()) {
    cout << "NO" << endl;
    return;
  }
  reverse(all(TS));
  vector<int> map(n + 1);
  for (int i = 0; i < n; ++i)
    map[TS[i]] = i;
  cout << "YES" << endl;
  for (int i = 1; i <= n; ++i) {
    for (auto j : G[i]) {
      if (map[j] < map[i])
        cout << j << " " << i << '\n';
    }
  }
}

signed main() {
  int t = 1;
  for (cin >> t; t--; solve())
    ;
}