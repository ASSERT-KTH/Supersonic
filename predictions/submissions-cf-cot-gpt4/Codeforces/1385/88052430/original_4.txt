This program seems to be optimized already for running time and memory usage. However, a few optimizations can still be attempted:

1. Avoid using `#include <bits/stdc++.h>`: This line includes a lot of unnecessary headers which can increase compilation time. Include only necessary headers individually.

2. Avoid using `using namespace std`: This can result in name clashes because it includes all names from the `std` namespace into the global namespace.

3. Remove unused macros: The macros `err1`, `err2`, `err3`, `err4` are not used in the program.

4. The `dfs` function checks if a node is visited after checking if it's being visited, which can be optimized by checking if a node is visited first.

5. Use `std::ios::sync_with_stdio(false)` and `std::cin.tie(NULL)` in the `main` function only. There is no need to use them in every function.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <iomanip>

#define int long long
#define ld long double
#define MOD 1000000007
#define f(i, a, b) for (int i = a; i < b; ++i)
#define endl '\n'
#define all(a) a.begin(), a.end()
#define sz(x) (int)(x).size()

bool dfs(int i, std::vector<int> &visited, std::vector<int> &being_visited, std::vector<int> &TS, std::vector<std::vector<int>> &g) {
  if (visited[i]) {
    return 0;
  }
  being_visited[i] = 1;
  for (auto j : g[i]) {
    if (dfs(j, visited, being_visited, TS, g))
      return 1;
  }
  being_visited[i] = 0;
  visited[i] = 1;
  TS.push_back(i);
  return 0;
}

void solve() {
  int n, m;
  std::cin >> n >> m;
  std::vector<int> visited(n + 1, 0), being_visited(n + 1, 0), TS;
  std::vector<std::vector<int>> g(n + 1);
  std::vector<std::set<int>> G(n + 1);
  f(i, 0, m) {
    int t, x, y;
    std::cin >> t >> x >> y;
    if (t)
      g[x].push_back(y);
    G[x].insert(y);
    G[y].insert(x);
  }
  f(i, 1, n + 1) {
    bool ch = 1;
    if (g[i].size() == 0 and G[i].size() > 0) {
      for (auto j : G[i]) {
        ch &= (!G[j].count(i));
      }
    } else {
      ch = 0;
    }
    if (ch) {
      for (auto j : G[i]) {
        g[i].push_back(j);
      }
    }
  }
  auto havecycle = [&]() {
    f(i, 1, n + 1) {
      if (!visited[i]) {
        if (dfs(i, visited, being_visited, TS, g)) {
          return 1;
        }
      }
    }
    return 0;
  };
  if (havecycle()) {
    std::cout << "NO" << endl;
    return;
  }
  reverse(all(TS));
  std::map<int, int> map;
  f(i, 0, n) map[TS[i]] = i;
  std::cout << "YES" << endl;
  f(i, 1, n + 1) {
    for (auto j : G[i]) {
      if (map[j] < map[i])
        std::cout << j << " " << i << endl;
    }
  }
}

signed main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);
  int t = 1;
  for (std::cin >> t; t--; solve());
}
```
Please note that these changes may reduce the runtime of the program depending on the compiler and the input size, but they will not change the algorithmic complexity of the program.