This program contains a lot of macro definitions, unused code, and non-optimal variable types. Here's how we can optimize it:

1. Avoid using `#include <bits/stdc++.h>`. This header file includes too many libraries which can increase the compile time. Include only the necessary libraries.

2. Remove unused template definitions, like `ordered_set` and `ordered_multiset` which are not used in the program.

3. The `fastio` macro is used to speed up I/O operations, but it can cause problems when combined with standard C I/O functions. Since we're not using any of these in the program, we can safely remove it.

4. Using `#define int long long` can increase memory usage and running time because `long long` uses more memory than `int` and operations on `long long` are slower. Use `int` where possible.

5. Some macro definitions like `fr`, `sc`, `LB`, `UB`, `PQ`, `show`, `err1` to `err4` and `debug` are not used in the program. Remove them to clean up the code.

6. The `precise` macro is not used in the program. If you want to control the precision of floating point numbers in the output, it's better to use `std::setprecision` and `std::fixed` directly at the place where you need them.

7. Instead of using `vector<set<int>> G(n + 1);` which consumes more memory, use `vector<vector<bool>> G(n + 1, vector<bool>(n + 1, false));` to keep track of the edges in the graph. This will reduce memory usage and checking if an edge exists between two vertices can be done in constant time. 

After making these optimizations, below is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <iomanip>

using namespace std;

#define f(i, a, b) for (int i = a; i < b; ++i)
#define endl '\n'
#define all(a) a.begin(), a.end()

bool dfs(int i, vector<int> &visited, vector<int> &being_visited,
         vector<int> &TS, vector<vector<int>> &g) {
  if (visited[i]) {
    return 0;
  } else if (being_visited[i]) {
    return 1;
  } else {
    being_visited[i] = 1;
    for (auto j : g[i]) {
      if (dfs(j, visited, being_visited, TS, g))
        return 1;
    }
  }
  being_visited[i] = 0;
  visited[i] = 1;
  TS.push_back(i);
  return 0;
}

void solve() {
  int n, m;
  cin >> n >> m;
  vector<int> visited(n + 1, 0), being_visited(n + 1, 0), TS;
  vector<vector<int>> g(n + 1);
  vector<vector<bool>> G(n + 1, vector<bool>(n + 1, false));
  f(i, 0, m) {
    int t, x, y;
    cin >> t >> x >> y;
    if (t)
      g[x].push_back(y);
    G[x][y] = true;
    G[y][x] = true;
  }
  f(i, 1, n + 1) {
    bool ch = 1;
    if (g[i].size() == 0 and count(all(G[i]), true) > 0) {
      for (int j = 1; j <= n; ++j) {
        if (G[i][j])
          ch &= (!G[j][i]);
      }
    } else {
      ch = 0;
    }
    if (ch) {
      for (int j = 1; j <= n; ++j) {
        if (G[i][j])
          g[i].push_back(j);
      }
    }
  }
  auto havecycle = [&]() {
    f(i, 1, n + 1) {
      if (!visited[i]) {
        if (dfs(i, visited, being_visited, TS, g)) {
          return 1;
        }
      }
    }
    return 0;
  };
  if (havecycle()) {
    cout << "NO" << endl;
    return;
  }
  reverse(all(TS));
  map<int, int> map;
  f(i, 0, n) map[TS[i]] = i;
  cout << "YES" << endl;
  f(i, 1, n + 1) {
    for (int j = 1; j <= n; ++j) {
      if (G[i][j] && map[j] < map[i])
        cout << j << " " << i << endl;
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  int t = 1;
  for (cin >> t; t--; solve())
    ;
}
```
