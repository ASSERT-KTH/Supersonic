The given C++ program already appears to be quite optimized. However, there are a few tweaks that can be made in order to further optimize the program:

1. Minimize the use of global macros. It is generally bad practice to define macros globally, as it can lead to conflicts and make the code harder to maintain and understand. In this case, most of the defined macros are not used in the code, so they can be removed to save memory.

2. Avoid using `std::endl` in favor of '\n'. The `std::endl` not only inserts a newline, but also flushes the stream, which can impact performance. If flushing the stream is not necessary, it is more efficient to use '\n'.

3. The `#define` for `int long long` can cause confusion and should be avoided. It would be better to use `typedef` or `using` to create an alias for `long long int`.

4. The `show` macro is unused and can be removed.

5. The `debug` and `err` macros seem to be used for debugging purposes, and are not used in the code. They can be removed.

6. Use pre-increment (++i) instead of post-increment (i++) in for loops. Pre-increment is more efficient as it does not make a copy of the object like post-increment does.

Optimized Code:
```c++
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T>
using ordered_multiset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

typedef long long int int64;

#define MOD 1000000007
#define precise(i) fixed << setprecision(10) << i
#define all(a) a.begin(), a.end()
#define fr first
#define sc second
#define sz(x) (int)(x).size()

bool dfs(int i, vector<int> &visited, vector<int> &being_visited, vector<int> &TS, vector<vector<int>> &g) {
  if (visited[i]) {
    return 0;
  } else if (being_visited[i]) {
    return 1;
  } else {
    being_visited[i] = 1;
    for (auto j : g[i]) {
      if (dfs(j, visited, being_visited, TS, g))
        return 1;
    }
  }
  being_visited[i] = 0;
  visited[i] = 1;
  TS.push_back(i);
  return 0;
}

void solve() {
  int64 n, m;
  cin >> n >> m;
  vector<int> visited(n + 1, 0), being_visited(n + 1, 0), TS;
  vector<vector<int>> g(n + 1);
  vector<set<int>> G(n + 1);
  
  for (int i = 0; i < m; ++i) {
    int t, x, y;
    cin >> t >> x >> y;
    if (t)
      g[x].push_back(y);
    G[x].insert(y);
    G[y].insert(x);
  }
  
  for (int i = 1; i <= n; ++i) {
    bool ch = 1;
    if (g[i].size() == 0 and G[i].size() > 0) {
      for (auto j : G[i]) {
        ch &= (!G[j].count(i));
      }
    } else {
      ch = 0;
    }
    if (ch) {
      for (auto j : G[i]) {
        g[i].push_back(j);
      }
    }
  }
  
  auto havecycle = [&]() {
    for (int i = 1; i <= n; ++i) {
      if (!visited[i]) {
        if (dfs(i, visited, being_visited, TS, g)) {
          return 1;
        }
      }
    }
    return 0;
  };
  
  if (havecycle()) {
    cout << "NO" << '\n';
    return;
  }
  reverse(all(TS));
  map<int, int> map;
  for (int i = 0; i < n; ++i) map[TS[i]] = i;
  cout << "YES" << '\n';
  for (int i = 1; i <= n; ++i) {
    for (auto j : G[i]) {
      if (map[j] < map[i])
        cout << j << " " << i << '\n';
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  int64 t = 1;
  for (cin >> t; t--; solve())
    ;
}
```