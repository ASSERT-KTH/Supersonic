#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
template <typename T>
using ordered_set = __gnu_pbds::tree<T, __gnu_pbds::null_type, std::less<T>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;
template <typename T>
using ordered_multiset = __gnu_pbds::tree<T, __gnu_pbds::null_type, std::less_equal<T>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL);
#define int long long
#define precise(i) std::fixed << std::setprecision(10) << i
#define f(i, a, b) for (short i = a; i < b; ++i)
#define all(a) a.begin(), a.end()
#define PQ std::priority_queue
#define LB std::lower_bound
#define UB std::upper_bound
#define fr first
#define sc second
#define sz(x) (short)(x).size()

bool dfs(int i, std::vector<int>& visited, std::vector<int>& being_visited, std::vector<int>& TS, std::vector<std::vector<int>>& g) {
  if (visited[i]) {
    return false;
  } else if (being_visited[i]) {
    return true;
  } else {
    being_visited[i] = 1;
    for (auto j : g[i]) {
      if (dfs(j, visited, being_visited, TS, g))
        return true;
    }
  }
  being_visited[i] = 0;
  visited[i] = 1;
  TS.push_back(i);
  return false;
}

void solve() {
  int n, m;
  std::cin >> n >> m;
  std::vector<int> visited(n + 1, 0), being_visited(n + 1, 0), TS;
  TS.reserve(n + 1);
  std::vector<std::vector<int>> g(n + 1);
  std::vector<std::set<int>> G(n + 1);
  f(i, 0, m) {
    int t, x, y;
    std::cin >> t >> x >> y;
    if (t)
      g[x].push_back(y);
    G[x].insert(y);
    G[y].insert(x);
  }
  f(i, 1, n + 1) {
    bool ch = true;
    if (g[i].size() == 0 && G[i].size() > 0) {
      for (auto j : G[i]) {
        ch &= (!G[j].count(i));
      }
    } else {
      ch = false;
    }
    if (ch) {
      for (auto j : G[i]) {
        g[i].push_back(j);
      }
    }
  }
  auto havecycle = [&]() {
    f(i, 1, n + 1) {
      if (!visited[i]) {
        if (dfs(i, visited, being_visited, TS, g)) {
          return true;
        }
      }
    }
    return false;
  };
  if (havecycle()) {
    std::cout << "NO\n";
    return;
  }
  std::reverse(all(TS));
  std::map<int, int> map;
  f(i, 0, n) map[TS[i]] = i;
  std::cout << "YES\n";
  f(i, 1, n + 1) {
    for (auto j : G[i]) {
      if (map[j] < map[i])
        std::cout << j << " " << i << "\n";
    }
  }
}

signed main() {
  fastio int t = 1;
  for (std::cin >> t; t--; solve())
    ;
}