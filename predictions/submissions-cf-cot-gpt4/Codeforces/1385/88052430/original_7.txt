The provided C++ code is already optimized in many ways, but we can still do some little optimizations to further reduce the memory usage and potentially improve the running time.

1. Use of `#define`: This is a preprocessor command that is used to define constants or macros. In this code, it's used to define some common operations like `f(i, a, b) for (int i = a; i < b; ++i)`. This is a good practice because it makes the code shorter and easier to read. However, the use of these macros can make debugging much harder because error messages will refer to the macro name instead of the actual code. Therefore, it's better to use the actual for loop instead of the macro `f(i, a, b)`.

2. Use of `map<int, int>`: In the solve() function, a `map<int, int>` is created. This data structure is not efficient in terms of memory usage and access time. It would be better to use an array or vector (if the key values are not too large), which would improve the access time to O(1) and reduce the memory usage.

3. Use of `vector<int>`: In the dfs() function, the vectors `visited`, `being_visited`, and `TS` are passed by reference. This is good because it avoids creating copies of these vectors. However, these vectors are also passed to the dfs() function recursively, which means that they are potentially created and destroyed many times. To optimize this, the vectors could be declared as global variables or as member variables of a class. This way, they would be created only once and reused in each call to dfs().

4. Use of `cout << endl;`: this operation is less efficient than `cout << '\n';` because endl causes a flush operation, which can be slow. It's better to use `'\n'` to print a newline character and flush the output only when it's necessary.

5. Use of `ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);`: These lines make input and output more efficient. However, in this specific program they are not necessary because there is no interaction with the user during the execution of the program. Therefore, these lines could be removed to simplify the code.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

template <typename T>
using ordered_multiset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define int long long
#define ld long double
#define MOD 1000000007
#define precise(i) fixed << setprecision(10) << i
#define endl '\n'
#define debug cout << "\n========================================\n";
#define err1(a) cout << #a << " " << a << endl;
#define err2(a, b) cout << #a << " " << a << " " << #b << " " << b << endl;
#define err3(a, b, c)                                                          \
  cout << #a << " " << a << " " << #b << " " << b << " " << #c << " " << c     \
       << endl;
#define err4(a, b, c, d)                                                       \
  cout << #a << " " << a << " " << #b << " " << b << " " << #c << " " << c     \
       << " " << #d << " " << d << endl;
#define all(a) a.begin(), a.end()
#define show(a)                                                                \
  for (auto xyz : a)                                                           \
    cout << xyz << " ";                                                        \
  cout << endl;
#define PQ priority_queue
#define LB lower_bound
#define UB upper_bound
#define fr first
#define sc second
#define sz(x) (int)(x).size()

vector<int> visited, being_visited, TS;
vector<vector<int>> g;

bool dfs(int i) {
  if (visited[i]) {
    return 0;
  } else if (being_visited[i]) {
    return 1;
  } else {
    being_visited[i] = 1;
    for (auto j : g[i]) {
      if (dfs(j))
        return 1;
    }
  }
  being_visited[i] = 0;
  visited[i] = 1;
  TS.push_back(i);
  return 0;
}

void solve() {
  int n, m;
  cin >> n >> m;
  visited.resize(n + 1, 0);
  being_visited.resize(n + 1, 0);
  TS.clear();
  g.resize(n + 1);
  vector<set<int>> G(n + 1);

  for (int i = 0; i < m; ++i) {
    int t, x, y;
    cin >> t >> x >> y;
    if (t)
      g[x].push_back(y);
    G[x].insert(y);
    G[y].insert(x);
  }

  for (int i = 1; i <= n; ++i) {
    bool ch = 1;
    if (g[i].size() == 0 and G[i].size() > 0) {
      for (auto j : G[i]) {
        ch &= (!G[j].count(i));
      }
    } else {
      ch = 0;
    }
    if (ch) {
      for (auto j : G[i]) {
        g[i].push_back(j);
      }
    }
  }

  auto havecycle = [&]() {
    for (int i = 1; i <= n; ++i) {
      if (!visited[i]) {
        if (dfs(i)) {
          return 1;
        }
      }
    }
    return 0;
  };

  if (havecycle()) {
    cout << "NO" << endl;
    return;
  }
  reverse(all(TS));
  vector<int> map(n + 1);
  for (int i = 0; i < n; ++i)
    map[TS[i]] = i;
  cout << "YES" << endl;
  for (int i = 1; i <= n; ++i) {
    for (auto j : G[i]) {
      if (map[j] < map[i])
        cout << j << " " << i << '\n';
    }
  }
}

signed main() {
  int t = 1;
  for (cin >> t; t--; solve())
    ;
}
```