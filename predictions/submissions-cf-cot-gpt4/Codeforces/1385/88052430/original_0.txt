The code is quite optimized already, but there are few modifications that can be made.

1. The use of 'bits/stdc++.h' is generally discouraged. It's better to include only the specific libraries that you need. This can decrease the compilation time.

2. The 'using namespace std' is also discouraged as it can lead to name clashes. It's better to use the std:: prefix when needed.

3. The 'fastio' macro is not standard. It's better to explicitly write 'std::ios_base::sync_with_stdio(false); std::cin.tie(NULL); std::cout.tie(NULL);' in the main function.

4. The use of '#define' for common keywords is not recommended. It might improve readability, but it can confuse the reader if they're not familiar with your macros. In addition, it doesn't provide any type-safety.

5. Instead of using 'f' macro for 'for loop', it's better to use the normal 'for loop'. It's more readable and less prone to errors.

6. The use of 'endl' is slower than '\n', because 'endl' includes a flush operation.

7. There are several variables that are not used in the code, such as 'ordered_set', 'ordered_multiset', 'ld', 'MOD', 'precise', 'debug', 'err1', 'err2', 'err3', 'err4', 'PQ', 'LB', 'UB', 'fr', 'sc', 'sz'. It's better to remove them.

So, here is the optimized version of the code:

```
#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>

bool dfs(int i, std::vector<int> &visited, std::vector<int> &being_visited,
         std::vector<int> &TS, std::vector<std::vector<int>> &g) {
  if (visited[i]) {
    return 0;
  } else if (being_visited[i]) {
    return 1;
  } else {
    being_visited[i] = 1;
    for (auto j : g[i]) {
      if (dfs(j, visited, being_visited, TS, g))
        return 1;
    }
  }
  being_visited[i] = 0;
  visited[i] = 1;
  TS.push_back(i);
  return 0;
}

void solve() {
  int n, m;
  std::cin >> n >> m;
  std::vector<int> visited(n + 1, 0), being_visited(n + 1, 0), TS;
  std::vector<std::vector<int>> g(n + 1);
  std::vector<std::set<int>> G(n + 1);
  for (int i = 0; i < m; ++i) {
    int t, x, y;
    std::cin >> t >> x >> y;
    if (t)
      g[x].push_back(y);
    G[x].insert(y);
    G[y].insert(x);
  }
  for (int i = 1; i < n + 1; ++i) {
    bool ch = 1;
    if (g[i].size() == 0 and G[i].size() > 0) {
      for (auto j : G[i]) {
        ch &= (!G[j].count(i));
      }
    } else {
      ch = 0;
    }
    if (ch) {
      for (auto j : G[i]) {
        g[i].push_back(j);
      }
    }
  }
  auto havecycle = [&]() {
    for (int i = 1; i < n + 1; ++i) {
      if (!visited[i]) {
        if (dfs(i, visited, being_visited, TS, g)) {
          return 1;
        }
      }
    }
    return 0;
  };
  if (havecycle()) {
    std::cout << "NO" << '\n';
    return;
  }
  reverse(TS.begin(), TS.end());
  std::map<int, int> map;
  for (int i = 0; i < n; ++i) map[TS[i]] = i;
  std::cout << "YES" << '\n';
  for (int i = 1; i < n + 1; ++i) {
    for (auto j : G[i]) {
      if (map[j] < map[i])
        std::cout << j << " " << i << '\n';
    }
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  int t = 1;
  for (std::cin >> t; t--; solve())
    ;
  return 0;
}
```