The code is a mixture of C and C++. This code is solving a graph problem. The optimization can be done in the following ways:

1. Avoid using `#include <bits/stdc++.h>`. It includes a lot of unnecessary libraries which can increase compilation time.

2. The `typedef` in C++ can be replaced by `using`. For example, `typedef long long int LL;` can be replaced by `using LL = long long int;`. It is more readable and modern.

3. Avoid using macros for loops and common operations. Macros can make the code harder to read and debug. We should replace them with functions or just write the loop in place.

4. Avoid using global variables if they are not necessary. In this code, `topo_order`, `ts`, `possible`, `directed_edges`, and `undirected_edges` are global, but they can be made local.

5. The `calloc` function is used to allocate memory for the `topo_order` array. It is not necessary to use dynamic memory allocation in this case because we know the size of `topo_order` at compile time.

6. According to C++ guidelines, you should not use C-style casts. Instead, you can use static_cast, dynamic_cast, const_cast, and reinterpret_cast.

7. Avoid using `endl` for newlines, as it flushes the output buffer which can slow down the program. Use `"\n"` instead.

8. The `read_and_query` function is doing too much. It reads input, processes it, and prints the result. We can divide it into smaller functions.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <utility>

using namespace std;
using LL = long long int;
using ULL = unsigned long long;
using pii = pair<int, int>;
using plli = pair<LL, LL>;
using pdd = pair<double, double>;

void dfs(int node, vector<bool> &visited, vector<int> *g, vector<int> &ts) {
  visited[node] = true;
  for (int next : g[node]) {
    if (!visited[next]) {
      dfs(next, visited, g, ts);
    }
  }
  ts.push_back(node);
}

void compute(int n, int m, vector<int> *g, vector<int> &topo_order, vector<int> &ts, vector<pii> &directed_edges, vector<pii> &undirected_edges) {
  vector<bool> visited(n + 1, false);
  for (int i = 1; i <= n; ++i) {
    if (!visited[i]) {
      dfs(i, visited, g, ts);
    }
  }
  int order = 0;
  for (int i = n - 1; i >= 0; --i) { topo_order[ts[i]] = order++; }
  bool possible = true;
  for (auto &e : directed_edges) {
    if (topo_order[e.first] > topo_order[e.second]) {
      possible = false;
      break;
    }
  }
  if (!possible) {
    cout << "NO\n";
    return;
  }
  cout << "YES\n";
  for (auto &p : directed_edges) {
    cout << p.first << " " << p.second << "\n";
  }
  for (auto &p : undirected_edges) {
    if (topo_order[p.first] < topo_order[p.second]) {
      cout << p.first << " " << p.second << "\n";
    } else {
      cout << p.second << " " << p.first << "\n";
    }
  }
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    int n, m;
    cin >> n >> m;
    vector<int> g[n + 1];
    int t, u, v;
    vector<pii> directed_edges, undirected_edges;
    vector<int> ts, topo_order(n + 1);
    for (int i = 0; i < m; ++i) {
      cin >> t >> u >> v;
      if (t == 0) {
        undirected_edges.push_back({u, v});
      } else {
        directed_edges.push_back({u, v});
        g[u].push_back(v);
      }
    }
    compute(n, m, g, topo_order, ts, directed_edges, undirected_edges);
  }
  return 0;
}
```