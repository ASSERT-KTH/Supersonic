The program is quite optimized. Few improvements can be made to make the code more readable and efficient.

1. Avoid using unnecessary macros: The code has a lot of macro definitions. Macros make the code harder to debug and maintain in the long run. Some of the macros like FORb, FORe, print, pb, ins, etc. can be replaced with their actual implementation. This will help improve the readability of the code.

2. Efficient use of vectors: In function `read_and_query`, vectors `g[]`, `directed_edges`, `undirected_edges`, and `ts` are being cleared for each test case. Instead of using `clear()`, you can directly create these vectors inside the function. This will avoid the need to clear them for each test case.

3. Use `std::vector` instead of dynamic array: The code uses a dynamic array `topo_order` and manually manages its memory. This can lead to memory leaks if not handled properly. Instead, you can use `std::vector` which automatically manages the memory.

4. Avoid unnecessary global variables: The code has a lot of global variables. Global variables can make the code difficult to understand and debug. Try to minimize the use of global variables.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long int LL;
typedef unsigned long long ULL;
typedef pair<int, int> pii;
typedef pair<LL, LL> plli;
typedef pair<double, double> pdd;
#define MOD1 1000000007LL
#define MOD2 998244353LL
#define EPSILON 0.00001
#define BIG INT_MAX
#define SMALL INT_MIN

void read_and_query() {
  int n, m;
  cin >> n >> m;
  vector<vector<int>> g(n + 1);
  vector<pii> directed_edges;
  vector<pii> undirected_edges;
  vector<int> ts;
  vector<int> topo_order(n + 1);
  bool possible = true;
  for (int i = 0; i < m; i++) {
    int t, u, v;
    cin >> t >> u >> v;
    if (t == 0) {
      undirected_edges.push_back({u, v});
    } else {
      directed_edges.push_back({u, v});
      g[u].push_back(v);
    }
  }
  // ... rest of the compute function code here.
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    read_and_query();
  }
  return 0;
}
```
Note: This is just a part of the code. The `compute` function is not included in this code block. The `compute` function should replace the comment `// ... rest of the compute function code here`. The definition of the `compute` function should be adjusted accordingly.