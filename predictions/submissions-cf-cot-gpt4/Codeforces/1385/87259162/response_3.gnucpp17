#include <iostream>
#include <vector>
#include <utility>

using namespace std;
using LL = long long int;
using ULL = unsigned long long;
using pii = pair<int, int>;
using plli = pair<LL, LL>;
using pdd = pair<double, double>;

void dfs(int node, vector<bool> &visited, vector<int> *g, vector<int> &ts) {
  visited[node] = true;
  for (int next : g[node]) {
    if (!visited[next]) {
      dfs(next, visited, g, ts);
    }
  }
  ts.push_back(node);
}

void compute(int n, int m, vector<int> *g, vector<int> &topo_order, vector<int> &ts, vector<pii> &directed_edges, vector<pii> &undirected_edges) {
  vector<bool> visited(n + 1, false);
  for (int i = 1; i <= n; ++i) {
    if (!visited[i]) {
      dfs(i, visited, g, ts);
    }
  }
  int order = 0;
  for (int i = n - 1; i >= 0; --i) { topo_order[ts[i]] = order++; }
  bool possible = true;
  for (auto &e : directed_edges) {
    if (topo_order[e.first] > topo_order[e.second]) {
      possible = false;
      break;
    }
  }
  if (!possible) {
    cout << "NO\n";
    return;
  }
  cout << "YES\n";
  for (auto &p : directed_edges) {
    cout << p.first << " " << p.second << "\n";
  }
  for (auto &p : undirected_edges) {
    if (topo_order[p.first] < topo_order[p.second]) {
      cout << p.first << " " << p.second << "\n";
    } else {
      cout << p.second << " " << p.first << "\n";
    }
  }
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    int n, m;
    cin >> n >> m;
    vector<int> g[n + 1];
    int t, u, v;
    vector<pii> directed_edges, undirected_edges;
    vector<int> ts, topo_order(n + 1);
    for (int i = 0; i < m; ++i) {
      cin >> t >> u >> v;
      if (t == 0) {
        undirected_edges.push_back({u, v});
      } else {
        directed_edges.push_back({u, v});
        g[u].push_back(v);
      }
    }
    compute(n, m, g, topo_order, ts, directed_edges, undirected_edges);
  }
  return 0;
}