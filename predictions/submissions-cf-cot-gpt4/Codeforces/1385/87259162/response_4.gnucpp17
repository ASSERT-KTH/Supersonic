#include <iostream>
#include <vector>

using namespace std;
using LL = long long int;
using ULL = unsigned long long;
using pii = pair<int, int>;
using plli = pair<LL, LL>;
using pdd = pair<double, double>;

#ifdef _WIN32
#define gx getchar
#define px putchar
#define ps putchar(' ')
#define pn putchar('\n')
#else
#define gx getchar_unlocked
#define px putchar_unlocked
#define ps putchar_unlocked(' ')
#define pn putchar_unlocked('\n')
#endif

const int len = 200001;
vector<int> g[len];
vector<pii> directed_edges, undirected_edges;
vector<int> ts;
int *topo_order;
bool possible;

void dfs(int node, vector<bool> &visited) {
  visited[node] = true;
  for (int next : g[node]) {
    if (!visited[next]) {
      dfs(next, visited);
    }
  }
  ts.push_back(node);
}

void compute(int n, int m) {
  vector<bool> visited(n + 1, false);
  for(int i = 1; i < n + 1; i++) {
    if (!visited[i]) {
      dfs(i, visited);
    }
  }
  int order = 0;
  for(int i = n - 1; i >= 0; i--) { topo_order[ts[i]] = order++; }
  for (auto &e : directed_edges) {
    if (topo_order[e.first] > topo_order[e.second]) {
      possible = false;
      break;
    }
  }
  if (!possible) {
    cout << "NO" << endl;
    return;
  }
  cout << "YES" << endl;
  for (auto &p : directed_edges) {
    cout << p.first << " " << p.second << endl;
  }
  for (auto &p : undirected_edges) {
    if (topo_order[p.first] < topo_order[p.second]) {
      cout << p.first << " " << p.second << endl;
    } else {
      cout << p.second << " " << p.first << endl;
    }
  }
  free(topo_order);
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    int n, m;
    cin >> n >> m;
    for(int i = 0; i < n + 1; i++) { g[i].clear(); }
    int t, u, v;
    directed_edges.clear();
    undirected_edges.clear();
    ts.clear();
    topo_order = (int *)calloc(n + 1, sizeof(int));
    possible = true;
    for(int i = 0; i < m; i++) {
      cin >> t >> u >> v;
      if (t == 0) {
        undirected_edges.push_back({u, v});
      } else {
        directed_edges.push_back({u, v});
        g[u].push_back(v);
      }
    }
    compute(n, m);
  }
  return 0;
}