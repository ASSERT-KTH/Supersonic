#include <vector>
#include <iostream>
#include <utility>

using LL = long long int;
using ULL = unsigned long long;
using pii = std::pair<int, int>;
using plli = std::pair<LL, LL>;
using pdd = std::pair<double, double>;

const int len = 200001;
std::vector<int> g[len];
std::vector<pii> directed_edges, undirected_edges;
std::vector<int> ts;
int* topo_order;
bool possible;

void dfs(int node, std::vector<bool>& visited) {
    visited[node] = true;
    for (int next : g[node]) {
        if (!visited[next]) {
            dfs(next, visited);
        }
    }
    ts.push_back(node);
}

void compute(int n, int m) {
    std::vector<bool> visited(n + 1, false);
    for (int i = 1; i < n + 1; i++) {
        if (!visited[i]) {
            dfs(i, visited);
        }
    }
    int order = 0;
    for (int i = n - 1; i >= 0; i--) {
        topo_order[ts[i]] = order++;
    }
    for (auto& e : directed_edges) {
        if (topo_order[e.first] > topo_order[e.second]) {
            possible = false;
            break;
        }
    }
    if (!possible) {
        std::cout << "NO\n";
        return;
    }
    std::cout << "YES\n";
    for (auto& p : directed_edges) {
        std::cout << p.first << " " << p.second << '\n';
    }
    for (auto& p : undirected_edges) {
        if (topo_order[p.first] < topo_order[p.second]) {
            std::cout << p.first << " " << p.second << '\n';
        } else {
            std::cout << p.second << " " << p.first << '\n';
        }
    }
    delete[] topo_order;
}

void read_and_query() {
    int n, m;
    std::cin >> n >> m;
    for (int i = 0; i < n + 1; i++) {
        g[i].clear();
    }
    int t, u, v;
    directed_edges.clear();
    undirected_edges.clear();
    ts.clear();
    topo_order = new int[n + 1];
    possible = true;
    for (int i = 0; i < m; i++) {
        std::cin >> t >> u >> v;
        if (t == 0) {
            undirected_edges.push_back({u, v});
        } else {
            directed_edges.push_back({u, v});
            g[u].push_back(v);
        }
    }
    compute(n, m);
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0);
    
    int t;
    std::cin >> t;
    while (t--) {
        read_and_query();
    }
    return 0;
}