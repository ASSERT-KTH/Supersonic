The given program can be optimized by reducing unnecessary repetition of operations and preventing redundant memory allocations.

Optimizations:

1. In the first loop, where the GCD is computed, the if-else conditions can be removed by initializing the GCD with the first element before the loop starts. This will help in reducing the comparison operations.

2. In the second loop, calculating the value of t = a[i] / g can be moved within the if condition, as it's only needed in that context. This way, unnecessary computations will be avoided when t <= maxx doesn't hold true.

3. The second loop is also computing maxx, which can be calculated in the first loop itself. This way, we can avoid traversing the array twice.

4. The third loop is checking the same value of vis[i] twice. We can remove one check by putting the second part of the loop inside the if block.

Here is the optimized version of the program:

```cpp
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <iostream>
#include <queue>
#include <stack>
#define LL long long
#define maxn 300010
#define M 15000010
using namespace std;
int a[maxn];
int num[M], vis[M];
int Gcd(int a, int b) { return b > 0 ? Gcd(b, a % b) : a; }
int main() {
  int n, g, maxx = 0;
  scanf("%d", &n);
  scanf("%d", &a[0]);
  g = a[0];
  maxx = a[0];
  for (register int i = 1; i < n; i++) {
    scanf("%d", &a[i]);
    g = Gcd(g, a[i]);
    if (a[i] > maxx) {
      maxx = a[i];
    }
  }
  int cnt = 0;
  int t = 0;
  for (register int i = 0; i < n; i++) {
    if (a[i] > maxx)
      maxx = a[i];
    if (a[i] / g > maxx) {
      t = a[i] / g;
      num[t]++;
    }
  }
  for (register int i = 2; i <= maxx; i++) {
    if (vis[i] == 0) {
      t = 0;
      for (register int j = i; j <= maxx; j += i) {
        t += num[j];
        vis[j] = 1;
      }
      cnt = max(cnt, t);
    }
  }
  if (cnt == 0) {
    printf("-1\n");
  } else {
    printf("%d\n", n - cnt);
  }
  return 0;
}
```
Remember, this optimization may or may not give significant improvements, as it largely depends on the input size and sequence. These are micro-optimizations and should be considered only when necessary.