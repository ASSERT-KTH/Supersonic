Base on the provided code, here are some optimization steps:

1. First, we can remove unused or unnecessary includes. 
   - Header files such as `<algorithm>`, `<cmath>`, `<ctime>`, `<queue>`, and `<stack>` are not used in this program.

2. Secondly, optimize the Gcd function.
   - We can use the ternary operator inside the function to simplify the code.
   - If `b` equals `0`, return `a`. Otherwise, return `Gcd(b, a % b)`.
   - This makes the function more readable and slightly faster since we remove one comparison operation.

3. Thirdly, optimize the main function.
   - In the first for loop, we don't need to check `i == 1` and `i > 1` for every iteration.
   - We can calculate `g` for the first two elements before the loop, and then start the loop from the third element (`i = 2`).
   - This can slightly speed up the execution time of the loop.

4. Lastly, optimize the printf statements.
   - Instead of using two printf statements, we can use one with a ternary operator to select the correct output.

Here is the optimized code:

```cpp
#include <cstdio>
#include <cstring>

#define LL long long
#define maxn 300010
#define M 15000010

using namespace std;

int a[maxn];
int num[M], vis[M];

int Gcd(int a, int b) { return b ? Gcd(b, a % b) : a; }

int main() {
  int n, g;
  scanf("%d", &n);
  
  scanf("%d", &a[0]);
  scanf("%d", &a[1]);
  g = Gcd(a[0], a[1]);

  for (register int i = 2; i < n; i++) {
    scanf("%d", &a[i]);
    g = Gcd(g, a[i]);
  }
  
  int maxx = 0, t;
  for (register int i = 0; i < n; i++) {
    t = a[i] / g;
    num[t]++;
    if (t > maxx) {
      maxx = t;
    }
  }
  
  int cnt = 0;
  t = 0;
  for (register int i = 2; i <= maxx; i++) {
    if (vis[i] == 0) {
      t = 0;
      for (register int j = i; j <= maxx; j += i) {
        t += num[j];
        vis[j] = 1;
      }
      if (t > cnt) {
        cnt = t;
      }
    }
  }
  
  printf("%d\n", cnt == 0 ? -1 : n - cnt);

  return 0;
}
```

Please note that the optimization of the code may have a negligible impact on the actual running time, especially for small-sized inputs.