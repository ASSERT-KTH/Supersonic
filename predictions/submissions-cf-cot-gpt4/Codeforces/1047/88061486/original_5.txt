Here are some potential optimizations:

1. The gcd calculation can be optimized by removing the recursion and using a while loop instead. This would save on the overhead of function calls, making the program run faster.

2. We can reduce the number of times the 'vis' array is accessed by checking if 'num[i]' is greater than 0 before checking 'vis[i]'. This is because if 'num[i]' is 0, then 'vis[i]' will also be 0, so we can avoid an unnecessary array access.

3. The 'num' array is initialized to 0's by default, so we can remove the initialization loop.

4. The 'scanf' and 'printf' functions are slower than 'cin' and 'cout', so we can replace them to speed up the input and output operations.

5. The 'maxx' variable is not necessary as we can use the 'M' constant instead.

Here is the optimized code:

```cpp
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <iostream>
#include <queue>
#include <stack>
#define LL long long
#define maxn 300010
#define M 15000010
using namespace std;
int a[maxn];
int num[M], vis[M];
int Gcd(int a, int b) { while (b != 0) { int rem = a % b; a = b; b = rem; } return a; }
int main() {
  ios::sync_with_stdio(false); // Make cin and cout faster
  cin.tie(NULL);
  int n, g;
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    if (i == 1) {
      g = Gcd(a[0], a[1]);
    } else if (i > 1) {
      g = Gcd(g, a[i]);
    }
  }
  int t;
  for (int i = 0; i < n; i++) {
    t = a[i] / g;
    num[t]++;
  }
  int cnt = 0;
  t = 0;
  for (int i = 2; i <= M; i++) {
    if (num[i] > 0 && vis[i] == 0) {
      t = 0;
      for (int j = i; j <= M; j += i) {
        t += num[j];
        vis[j] = 1;
      }
      if (t > cnt) {
        cnt = t;
      }
    }
  }
  if (cnt == 0) {
    cout << "-1\n";
  } else {
    cout << n - cnt << "\n";
  }
  return 0;
}
```

Please verify the correctness of the optimized code by testing it with various test cases.