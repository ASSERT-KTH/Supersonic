The given C/C++ program can be optimized in several ways:

1. **Pre-calculation**: The gcd of the array is calculated in each step of the input reading. We can instead read all the inputs first and then calculate the gcd in one go.

2. **Avoiding unnecessary checks**: In the part where you check the `vis[i]` array, the program is checking all the numbers up to `maxx`, but it should actually check up to the square root of `maxx` because a larger number cannot be a factor of `maxx`.

3. **Memory usage**: `num` and `vis` arrays are large and their size is fixed. If the maximum number in the input is small, then a lot of memory is wasted. We can use a map instead of an array to store only the necessary elements. This can significantly reduce memory usage when the input numbers are sparse.

Here is the optimized code:

```cpp
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <iostream>
#include <queue>
#include <stack>
#include <map>
#define LL long long
#define maxn 300010
using namespace std;
int a[maxn];
map<int, int> num, vis;
int Gcd(int a, int b) { return b > 0 ? Gcd(b, a % b) : a; }

int main() {
  int n, g;
  scanf("%d", &n);
  for (register int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
  }
  g = a[0];
  for (register int i = 1; i < n; i++) {
    g = Gcd(g, a[i]);
  }
  int maxx = 0, t;
  for (register int i = 0; i < n; i++) {
    t = a[i] / g;
    num[t]++;
    if (t > maxx) {
      maxx = t;
    }
  }
  int cnt = 0;
  t = 0;
  for (register int i = 2; i <= sqrt(maxx); i++) {
    if (vis[i] == 0) {
      t = 0;
      for (register int j = i; j <= maxx; j += i) {
        t += num[j];
        vis[j] = 1;
      }
      if (t > cnt) {
        cnt = t;
      }
    }
  }
  if (cnt == 0) {
    printf("-1\n");
  } else {
    printf("%d\n", n - cnt);
  }
  return 0;
}
```

Please note that using a map can slow down the program a bit compared to using an array, but it significantly reduces memory usage when the numbers are sparse. If the input numbers are dense and close to each other, the original version with arrays may be faster.