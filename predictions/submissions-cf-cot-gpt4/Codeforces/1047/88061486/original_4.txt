This C/C++ program is mainly optimized for running time and we can do that by avoiding unnecessary computations.

Steps to optimize the code:

1. Remove the unnecessary `vis` array. We will perform the operation `t += num[j];` for each `j` whether `vis[j]` is 0 or not.

2. Replace the `if` statement inside the `for` loop with a `max` function. This will remove the need for the `if` statement and will reduce the number of branches in the code, which will help improve performance.

Here is the optimized code:

```cpp
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <iostream>
#include <queue>
#include <stack>
#define LL long long
#define maxn 300010
#define M 15000010
using namespace std;
int a[maxn];
int num[M];
int Gcd(int a, int b) { return b > 0 ? Gcd(b, a % b) : a; }
int main() {
  int n, g;
  scanf("%d", &n);
  for (register int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
    if (i == 1) {
      g = Gcd(a[0], a[1]);
    } else if (i > 1) {
      g = Gcd(g, a[i]);
    }
  }
  int maxx = 0, t;
  for (register int i = 0; i < n; i++) {
    t = a[i] / g;
    num[t]++;
    if (t > maxx) {
      maxx = t;
    }
  }
  int cnt = 0;
  for (register int i = 2; i <= maxx; i++) {
    t = 0;
    for (register int j = i; j <= maxx; j += i) {
      t += num[j];
    }
    cnt = max(cnt, t);
  }
  if (cnt == 0) {
    printf("-1\n");
  } else {
    printf("%d\n", n - cnt);
  }
  return 0;
}
```

Please note that this optimized version may not provide a significant speedup, as the optimizations are minor and the time complexity of the algorithm remains the same.