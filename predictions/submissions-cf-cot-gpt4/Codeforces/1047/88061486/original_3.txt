Here are the steps to optimize the program:

1. Remove unused libraries: The program has several included libraries that are not being used. We can remove these to clean up the code and reduce the memory footprint.

2. Avoid repeated calculations: The Gcd function is called repeatedly in the main function for the same values. We can avoid this by storing the results of the Gcd function in an array, and then looking up the result instead of calculating it each time. This is known as memoization and can significantly reduce the running time of the program, at the cost of slightly increased memory usage.

3. Use fast I/O methods: To reduce the time taken for input/output operations, we can use faster methods for input and output than scanf and printf, such as cin and cout with ios::sync_with_stdio(0) and cin.tie(0).

Optimized code:

```C++
#include <cstdio>
#define LL long long
#define maxn 300010
#define M 15000010
int a[maxn];
int num[M], vis[M];
int gcd[M]; // array to store results of Gcd function
int Gcd(int a, int b) {
  if(gcd[a] != 0) return gcd[a]; // if result is already calculated, return it
  return gcd[a] = b > 0 ? Gcd(b, a % b) : a; // otherwise, calculate and store the result
}
int main() {
  ios::sync_with_stdio(0); cin.tie(0); // fast I/O
  int n, g;
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    if (i == 1) {
      g = Gcd(a[0], a[1]);
    } else if (i > 1) {
      g = Gcd(g, a[i]);
    }
  }
  int maxx = 0, t;
  for (int i = 0; i < n; i++) {
    t = a[i] / g;
    num[t]++;
    if (t > maxx) {
      maxx = t;
    }
  }
  int cnt = 0;
  t = 0;
  for (int i = 2; i <= maxx; i++) {
    if (vis[i] == 0) {
      t = 0;
      for (int j = i; j <= maxx; j += i) {
        t += num[j];
        vis[j] = 1;
      }
      if (t > cnt) {
        cnt = t;
      }
    }
  }
  if (cnt == 0) {
    cout << "-1\n";
  } else {
    cout << n - cnt << "\n";
  }
  return 0;
}
```
Please note that in some competitive programming environments, the speedup from std::ios_base::sync_with_stdio(false); std::cin.tie(NULL); might not be noticeable. It is recommended to measure the performance difference in the specific environment where the code will be run. Also, mixing std::scanf()/printf() with std::cin/cout after toggling sync_with_stdio could lead to undefined behaviour.