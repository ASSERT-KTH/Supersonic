The optimization steps are as follows:

1. Unnecessary includes: The program includes some libraries that are not used (algorithm, cmath, ctime, queue, stack). Removing these unnecessary includes will slightly decrease the time required to compile the program, and it will also make the code cleaner. 

2. Repeated calculation: The code calculates the same GCD multiple times in the for loop. We can use an array to store the already calculated GCDs and directly use them when needed.

3. The line "t = a[i] / g;" is inside the loop, but the value of "g" doesn't change during the loop. We can calculate it once before the loop and use the result in the loop.

4. The block "if (t > cnt) { cnt = t; }" can be merged into one line to make the code more readable.

5. The printf function can be replaced with cout for consistency. Also, endl should be used after outputting a line.

Here is the optimized program:

```cpp
#include <cstdio>
#include <cstring>
#include <iostream>
#define LL long long
#define maxn 300010
#define M 15000010
using namespace std;
int a[maxn], gcd[maxn];
int num[M], vis[M];
int Gcd(int a, int b) { return b > 0 ? Gcd(b, a % b) : a; }
int main() {
  int n, g;
  scanf("%d", &n);
  for (register int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
    if (i == 1) {
      g = gcd[i] = Gcd(a[0], a[1]);
    } else if (i > 1) {
      g = gcd[i] = Gcd(gcd[i-1], a[i]);
    }
  }
  int maxx = 0, t, g_over = a[0] / g;
  for (register int i = 0; i < n; i++) {
    t = a[i] / g_over;
    num[t]++;
    if (t > maxx) {
      maxx = t;
    }
  }
  int cnt = 0;
  t = 0;
  for (register int i = 2; i <= maxx; i++) {
    if (vis[i] == 0) {
      t = 0;
      for (register int j = i; j <= maxx; j += i) {
        t += num[j];
        vis[j] = 1;
      }
      cnt = max(cnt, t);
    }
  }
  if (cnt == 0) {
    cout << "-1" << endl;
  } else {
    cout << n - cnt << endl;
  }
  return 0;
}
```

Please note that this code may not work correctly if the input is not as expected. You should add some error checks to make it more robust. Moreover, the micro-optimization of using "register" keyword for loop variables is generally unnecessary as modern compilers are smart enough to make such optimizations themselves.