This program seems to be well optimized already. However, there are a few minor changes that can be made for the sake of code readability and slight performance improvement:

1. Remove unused library inclusions: The libraries `<algorithm>`, `<cmath>`, `<ctime>`, `<queue>`, and `<stack>` are not used in the code. This does not impact running time, but it does reduce the code size and improves readability.

2. Use `std::ios::sync_with_stdio(false)` and `cin.tie(NULL)`: These lines can speed up `cin` and `cout` operations by disabling synchronization between C and C++ I/O streams and unties `cin` from `cout`.

3. Switch from `scanf` and `printf` to `cin` and `cout`: In general, `cin` and `cout` are slower than `scanf` and `printf`, but with the above-mentioned changes, their speed will be roughly equivalent.

4. Avoid recalculating `a[i] / g` in the second loop: By storing the result in `t` before using it to increment `num[t]`, you can avoid having to recalculate it to compare with `maxx`.

Here's the optimized code:

```cpp
#include <iostream>
#include <cstdio>
#include <cstring>
#define LL long long
#define maxn 300010
#define M 15000010
using namespace std;

int a[maxn];
int num[M], vis[M];

int Gcd(int a, int b) { return b > 0 ? Gcd(b, a % b) : a; }

int main() {
  std::ios::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n, g;
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    if (i == 1) {
      g = Gcd(a[0], a[1]);
    } else if (i > 1) {
      g = Gcd(g, a[i]);
    }
  }
  int maxx = 0;
  int t;
  for (int i = 0; i < n; i++) {
    t = a[i] / g;
    num[t]++;
    if (t > maxx) {
      maxx = t;
    }
  }
  int cnt = 0;
  t = 0;
  for (int i = 2; i <= maxx; i++) {
    if (vis[i] == 0) {
      t = 0;
      for (int j = i; j <= maxx; j += i) {
        t += num[j];
        vis[j] = 1;
      }
      if (t > cnt) {
        cnt = t;
      }
    }
  }
  if (cnt == 0) {
    cout << "-1\n";
  } else {
    cout << n - cnt << "\n";
  }
  return 0;
}
```

Please note that the optimization effects might be minimal for small inputs, but could be more noticeable for larger inputs.