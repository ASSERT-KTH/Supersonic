Here are the steps to optimize the given code:

1. Avoid using `#include <bits/stdc++.h>` because it includes a lot of headers that you might not need in your program, which may increase compilation time. Instead, include only the necessary headers.

2. Use `ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);` only if you are using both scanf/printf and cin/cout in your program. It synchronizes C++ standard streams with standard C streams and unties cin from cout. In your case, you are not using scanf/printf, so it's not needed.

3. Avoid using macros like `#define ll long long` or `#define pb push_back`. It's not a good practice because it could lead to confusing code. It's better to use `using ll = long long;` and `vector::push_back`.

4. The `shuffle` function is not needed because the order of the numbers does not matter. Removing it will improve the performance of the code.

5. Instead of using `d[cur - 1] = d[cur] + 1; q.push(cur - 1);` and `d[cur + 1] = d[cur] + 1; q.push(cur + 1);` separately, we can use a loop to reduce code redundancy.

Here's the optimized version of your code:

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <queue>
#include <chrono>
using namespace std;
using ll = long long;
const int INF = 0x3f3f3f3f;
const int mod = 1e9 + 7;

struct custom_hash {
  static uint64_t splitmix64(uint64_t x) {
    x += 0x9e3779b97f4a7c15;
    x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
    x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
    return x ^ (x >> 31);
  }
  size_t operator()(uint64_t x) const {
    static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
    return splitmix64(x + FIXED_RANDOM);
  }
};

void solve() {
  int n, m;
  cin >> n >> m;
  vector<ll> v(n);
  for (ll &x : v)
    cin >> x;
  unordered_map<ll, ll, custom_hash> d;
  queue<ll> q;
  for (ll i = 0; i < n; i++) {
    d[v[i]] = 0LL;
    q.push(v[i]);
  }
  vector<ll> res;
  ll mini_sum = 0LL;
  while (!q.empty()) {
    if ((int)res.size() == m)
      break;
    ll cur = q.front();
    q.pop();
    if (d[cur] != 0) {
      res.push_back(cur);
      mini_sum += d[cur];
    }
    ll directions[2] = {-1, 1};
    for (auto direction : directions) {
      if (!d.count(cur + direction)) {
        d[cur + direction] = d[cur] + 1;
        q.push(cur + direction);
      }
    }
  }
  cout << mini_sum << "\n";
  for (ll x : res)
    cout << x << " ";
  cout << "\n";
}

int main() {
  int t = 1;
  while (t--) {
    solve();
  }
  return 0;
}
```