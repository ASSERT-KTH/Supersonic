#include<iostream>
#include<vector>
#include<unordered_map>
#include<queue>
#include<chrono>
#include<random>

typedef long long ll;
typedef std::vector<int> vi;
typedef std::vector<ll> vll;
const int INF = 0x3f3f3f3f;
const int mod = 1e9 + 7;

struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }
    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM =
            std::chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};

std::mt19937 rng(time(0));

void solve() {
    int n, m;
    std::cin >> n >> m;
    vi v(n);
    for (auto &x : v)
        std::cin >> x;
    std::unordered_map<ll, ll, custom_hash> d;
    std::deque<ll> q;
    for (int i = 0; i < n; i++) {
        d[v[i]] = 0LL;
        q.push_back(v[i]);
    }
    vll res;
    ll mini_sum = 0LL;
    while (!q.empty()) {
        if ((int)res.size() == m)
            break;
        ll cur = q.front();
        q.pop_front();
        if (d[cur] != 0) {
            res.push_back(cur);
            mini_sum += d[cur];
        }
        if (!d.count(cur - 1)) {
            d[cur - 1] = d[cur] + 1;
            q.push_back(cur - 1);
        }
        if (!d.count(cur + 1)) {
            d[cur + 1] = d[cur] + 1;
            q.push_back(cur + 1);
        }
    }
    std::shuffle(res.begin(), res.end(), rng);
    std::cout << mini_sum << "\n";
    for (auto x : res)
        std::cout << x << " ";
    std::cout << "\n";
}

int main() {
    int t = 1;
    while (t--) {
        solve();
    }
    return 0;
}