The program can be optimized in the following ways:

1. Instead of using `#include <bits/stdc++.h>`, include only necessary libraries. `bits/stdc++.h` is a GCC specific library that includes many standard libraries. This will speed up the compilation time.

2. The `custom_hash` function seems to be overcomplicating things without any clear benefit. The standard hash function provided by C++ should be enough for most purposes.

3. The shuffle operation at the end is unnecessary if the order does not matter. It is a costly operation that can be removed to improve performance.

4. Instead of checking whether the map contains a key before inserting (`if (!d.count(cur - 1))`), we can just try to insert and use the return value to check whether the insertion took place.

5. Remove unnecessary macros and typedefs that are not used in the code.

Optimized code:

```C++
#include <iostream>
#include <unordered_map>
#include <vector>
#include <queue>

using namespace std;
using ll = long long;
using vi = vector<int>;
using vll = vector<long long>;

void solve() {
  int n, m;
  cin >> n >> m;
  vi v(n);
  for (auto &x : v)
    cin >> x;
  unordered_map<ll, ll> d;
  queue<ll> q;
  for (int i = 0; i < n; i++) {
    d[v[i]] = 0LL;
    q.push(v[i]);
  }
  vll res;
  ll mini_sum = 0LL;
  while (!q.empty()) {
    if ((int)res.size() == m)
      break;
    ll cur = q.front();
    q.pop();
    if (d[cur] != 0) {
      res.push_back(cur);
      mini_sum += d[cur];
    }
    auto [it, inserted] = d.insert({cur - 1, d[cur] + 1});
    if (inserted)
      q.push(cur - 1);
    tie(it, inserted) = d.insert({cur + 1, d[cur] + 1});
    if (inserted)
      q.push(cur + 1);
  }
  cout << mini_sum << "\n";
  for (auto x : res)
    cout << x << " ";
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int t = 1;
  while (t--) {
    solve();
  }
  return 0;
}
```

Note: The optimizations are relative to the original code provided and may not represent the best possible implementation for the given problem. The main focus is on improving the efficiency of the original code.