#include <iostream>
#include <unordered_map>
#include <vector>
#include <queue>

using namespace std;
using ll = long long;
using vi = vector<int>;
using vll = vector<long long>;

void solve() {
  int n, m;
  cin >> n >> m;
  vi v(n);
  for (auto &x : v)
    cin >> x;
  unordered_map<ll, ll> d;
  queue<ll> q;
  for (int i = 0; i < n; i++) {
    d[v[i]] = 0LL;
    q.push(v[i]);
  }
  vll res;
  ll mini_sum = 0LL;
  while (!q.empty()) {
    if ((int)res.size() == m)
      break;
    ll cur = q.front();
    q.pop();
    if (d[cur] != 0) {
      res.push_back(cur);
      mini_sum += d[cur];
    }
    auto [it, inserted] = d.insert({cur - 1, d[cur] + 1});
    if (inserted)
      q.push(cur - 1);
    tie(it, inserted) = d.insert({cur + 1, d[cur] + 1});
    if (inserted)
      q.push(cur + 1);
  }
  cout << mini_sum << "\n";
  for (auto x : res)
    cout << x << " ";
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int t = 1;
  while (t--) {
    solve();
  }
  return 0;
}