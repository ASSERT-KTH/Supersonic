Here are some possible optimization techniques for the provided code:

1. Avoid `#include <bits/stdc++.h>`: `<bits/stdc++.h>` is not a standard header file of GNU C++ library. It is a GCC specific library that includes every standard library. Though it reduces the time taken to write all the multiple includes, it increases the compilation time as it adds extra load. Using only the required libraries will reduce the memory usage.

2. Avoid using `using namespace std;`: It is considered a bad practice in C++ as it may lead to naming conflicts. It is better to use `std::` before every Standard Library type.

3. Unnecessary use of `#define`: The `#define` directive substitutes a preprocessor macro and it has been used here for defining constant values and functions which can be replaced with constant variables and inline functions for better debugging and type checking.

4. Use of `std::ios::sync_with_stdio(false), std::cin.tie(nullptr), std::cout.tie(nullptr);` in `main()` function: This is used to untie `cin` and `cout` and disable synchronization of all the C++ standard streams with their corresponding C standard streams. But in this code, there are no C standard streams present. So, this can be removed.

5. Use of `std::queue<ll>`: `std::queue` is used here for BFS queue. We can replace it with `std::deque` which allows efficient pop and push operations from both ends.

Here is the optimized code:

```cpp
#include<iostream>
#include<vector>
#include<unordered_map>
#include<queue>
#include<chrono>
#include<random>

typedef long long ll;
typedef std::vector<int> vi;
typedef std::vector<ll> vll;
const int INF = 0x3f3f3f3f;
const int mod = 1e9 + 7;

struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }
    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM =
            std::chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};

std::mt19937 rng(time(0));

void solve() {
    int n, m;
    std::cin >> n >> m;
    vi v(n);
    for (auto &x : v)
        std::cin >> x;
    std::unordered_map<ll, ll, custom_hash> d;
    std::deque<ll> q;
    for (int i = 0; i < n; i++) {
        d[v[i]] = 0LL;
        q.push_back(v[i]);
    }
    vll res;
    ll mini_sum = 0LL;
    while (!q.empty()) {
        if ((int)res.size() == m)
            break;
        ll cur = q.front();
        q.pop_front();
        if (d[cur] != 0) {
            res.push_back(cur);
            mini_sum += d[cur];
        }
        if (!d.count(cur - 1)) {
            d[cur - 1] = d[cur] + 1;
            q.push_back(cur - 1);
        }
        if (!d.count(cur + 1)) {
            d[cur + 1] = d[cur] + 1;
            q.push_back(cur + 1);
        }
    }
    std::shuffle(res.begin(), res.end(), rng);
    std::cout << mini_sum << "\n";
    for (auto x : res)
        std::cout << x << " ";
    std::cout << "\n";
}

int main() {
    int t = 1;
    while (t--) {
        solve();
    }
    return 0;
}
```
