This program is already quite optimized and uses modern C++ features. However, there are a few potential improvements that could be made:

1. The main optimization would be to reduce the use of `std::unordered_map` which has a high overhead due to its underlying data structure (usually a hash table). Instead, we could use a `std::vector` or a `std::array` if the range of the keys is known and not too large. However, this doesn't seem to be possible here because the keys are not in a small range.

2. The function `std::shuffle` is used here to randomize the order of the elements in the `res` vector. If we don't need the elements in a completely random order, but just in a non-deterministic order, we could instead just insert each new element at a random position in the vector. This would save us the overhead of the `std::shuffle` function at the end.

3. The use of `push_back()` on a vector can potentially cause a re-allocation of the underlying array if the vector's capacity is exceeded. This can be avoided by reserving enough space in the vector from the start if the final size of the vector is known or can be estimated. In this case, we could reserve space for `m` elements in the `res` vector from the start.

4. The `custom_hash` function seems to be quite complex and could potentially be a bottleneck. If the standard hash function is sufficient for our purposes, we could use that instead to save time.

5. The `ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);` line is used to speed up I/O operations by unsyncing C++'s I/O streams from C's. However, this makes it impossible to mix C++ and C I/O in the same program. If we know that the program will only use C++ I/O, this is fine, but if we need to use C I/O as well, we should remove this line.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define ull unsigned long long
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define PI 3.1415926535897932384626
#define deb(x) cout << #x << "=" << x << endl
#define deb2(x, y) cout << #x << "=" << x << ", " << #y << "=" << y << endl
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<ull> vull;
typedef vector<pii> vpii;
typedef vector<pll> vpll;
typedef vector<vi> vvi;
typedef vector<vll> vvll;
typedef vector<vull> vvull;
const int INF = 0x3f3f3f3f;
const int mod = 1e9 + 7;
mt19937 rng(time(0));

void solve() {
  int n, m;
  cin >> n >> m;
  vi v(n);
  for (auto &x : v)
    cin >> x;
  unordered_map<ll, ll> d;
  queue<ll> q;
  for (int i = 0; i < n; i++) {
    d[v[i]] = 0LL;
    q.push(v[i]);
  }
  vll res;
  res.reserve(m);  // Reserve space in vector
  ll mini_sum = 0LL;
  while (!q.empty()) {
    if ((int)res.size() == m)
      break;
    ll cur = q.front();
    q.pop();
    if (d[cur] != 0) {
      res.pb(cur);
      mini_sum += d[cur];
    }
    if (!d.count(cur - 1)) {
      d[cur - 1] = d[cur] + 1;
      q.push(cur - 1);
    }
    if (!d.count(cur + 1)) {
      d[cur + 1] = d[cur] + 1;
      q.push(cur + 1);
    }
  }
  cout << mini_sum << "\n";
  for (auto x : res)
    cout << x << " ";
  cout << "\n";
}

int main() {
  int t = 1;
  while (t--) {
    solve();
  }
  return 0;
}
```
Please note that it is not possible to optimize this program significantly without changing its logic.