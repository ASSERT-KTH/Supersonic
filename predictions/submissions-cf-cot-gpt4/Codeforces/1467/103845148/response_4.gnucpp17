#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
#define ll long long

int kitne(vector<int>& a, ll ind) {
    ll n = a.size();
    int cnt = 0;
    if (ind - 1 >= 0 && ind + 1 < n) {
      if ((a[ind] > a[ind + 1] && a[ind] > a[ind - 1]) ||
          (a[ind] < a[ind - 1] && a[ind] < a[ind + 1]))
        cnt++;
    }
    if (ind - 2 >= 0 && ind < n) {
      if ((a[ind - 1] > a[ind] && a[ind - 1] > a[ind - 2]) ||
          (a[ind - 1] < a[ind - 2] && a[ind - 1] < a[ind]))
        cnt++;
    }
    if (ind + 1 < n && ind - 1 >= 0) {
      if ((a[ind + 1] > a[ind] && a[ind + 1] > a[ind - 1]) ||
          (a[ind + 1] < a[ind - 1] && a[ind + 1] < a[ind]))
        cnt++;
    }
    return cnt;
}
void hn_bhai() {
    ll n;
    cin >> n;
    vector<int> a(n);
    for (ll i = 0; i < n; i++)
      cin >> a[i];
    ll tot = 0;
    for (ll i = 1; i < n - 1; i++) {
      if ((a[i] > a[i + 1] && a[i] > a[i - 1]) ||
          (a[i] < a[i - 1] && a[i] < a[i + 1]))
        tot++;
    }
    int p = 0;
    for (ll i = 1; i < n - 1; i++) {
      int temp = kitne(a, i);
      ll val = a[i];
      a[i] = a[i - 1];
      int newTemp = kitne(a, i);
      p = max(p, temp - newTemp);
      a[i] = a[i + 1];
      newTemp = kitne(a, i);
      p = max(p, temp - newTemp);
      a[i] = val;
    }
    cout << tot - p << endl;
}
int main() {
    int t;
    cin >> t;
    while (t--)
      hn_bhai();
    return 0;
}