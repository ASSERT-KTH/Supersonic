#include <iostream>
#include <vector>
#include <chrono>
using namespace std;

constexpr int EPS = 1e-9;
constexpr int INF = 1e9;
constexpr int MOD = 1000000007;
constexpr char ENDL = '\n';
using V = vector<int>;
using ll = long long;

void solve() {
  string s;
  cin >> s;
  int n = s.size();
  int ans = INF;
  vector<vector<int>> next(n, vector<int>(4, -1));
  next[n - 1][s[n - 1] - '0'] = n - 1;
  for (int i = n - 2; i >= 0; i--) {
    next[i] = next[i + 1];
    next[i][s[i] - '0'] = i;
    if (next[i][1] == -1 || next[i][2] == -1 || next[i][3] == -1) {
      continue;
    }
    int len;
    if (s[i] == '1') {
      len = max(next[i][2], next[i][3]) - i;
    } else if (s[i] == '2') {
      len = max(next[i][1], next[i][3]) - i;
    } else {
      len = max(next[i][1], next[i][2]) - i;
    }
    ans = min(ans, len);
  }
  if (ans == INF) {
    cout << 0 << ENDL;
  } else {
    cout << (ans + 1) << ENDL;
  }
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(NULL);
  cout.tie(NULL);
  srand(chrono::steady_clock::now().time_since_epoch().count());
  ll TC;
  cin >> TC;
  while (TC--)
    solve();
}