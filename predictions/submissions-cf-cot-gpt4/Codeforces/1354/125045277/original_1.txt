Here are the steps to optimize the given code:

1. Remove unnecessary macros: In this program, several macros are defined but not all of them are used. This occupies unnecessary space in memory. We will remove unused macros such as `EPS`, `MOD`, `pdb`, `ldb`, `pq`, `str`, `uint`, `ull`, `umap`, `uset`, `pf`, `dbg`, `sqr` and `all`.

2. Optimize loop and conditionals: The loop running from `n-2` to `0` can be optimized. Instead of calculating `len` inside each conditional, we can calculate it once and update its value only when `len` is greater than the current `i`.

3. Optimize output: Instead of checking if `ans` is equal to `INF` to print `0`, we can directly print `ans == INF ? 0 : ans+1`.

Here's the optimized code based on the steps above:

```cpp
#pragma GCC optimize("-Ofast")
#pragma GCC optimize("unroll-loops")
#include <algorithm>
#include <chrono>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
using namespace std;
#define INF (int)1e9
#define endl '\n'
#define V vector
#define ll long long
#define ff first
#define ss second
#define pb push_back
#define rep(i, a, b) for (int i = (a); i < (b); i++)
#define tsc                                                                    \
  ll TC;                                                                       \
  cin >> TC;                                                                   \
  while (TC--)                                                                 \
    solve();

void solve() {
  string s;
  cin >> s;
  int n = s.size();
  int ans = INF;
  V<V<int>> next(n, V<int>(4, -1));
  next[n - 1][s[n - 1] - '0'] = n - 1;
  for (int i = n - 2; i >= 0; i--) {
    next[i] = next[i + 1];
    next[i][s[i] - '0'] = i;
    if (next[i][1] == -1 || next[i][2] == -1 || next[i][3] == -1) {
      continue;
    }
    int len = max({next[i][1], next[i][2], next[i][3]}) - i;
    ans = min(ans, len);
  }
  cout << (ans == INF ? 0 : ans + 1) << endl;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(NULL);
  cout.tie(NULL);
  srand(chrono::steady_clock::now().time_since_epoch().count());
  tsc;
}
```

This optimized code will reduce memory usage and slightly improve running time.