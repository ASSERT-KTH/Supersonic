The given C++ program is already highly optimized with the use of `#pragma` directives, judicious use of `#define` macros, and use of the `std::vector` data structure. Here are a few ways to optimize it further:

1. Avoid computing `s[i] - '0'` multiple times: This operation is getting computed multiple times in the loop. We can compute it once, store it in a variable, and reuse it.

2. Avoid `max` computations inside `if` and `else if` blocks: The same `max` operation is being performed in each of the conditions. We can compute it once and reuse it.

3. Avoid computing `n-1` multiple times: This operation is being computed multiple times outside and inside the loop. We can compute it once and reuse it.

Here is the optimized version of the program:

```cpp
#pragma GCC optimize("-Ofast")
#pragma GCC optimize("unroll-loops")
#include <algorithm>
#include <chrono>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
using namespace std;
#define EPS 1e-9
#define INF (int)1e9
#define MOD 1000000007
#define endl '\n'
#define V vector
#define db double
#define ldb long double
#define ll long long
#define pq priority_queue
#define str string
#define uint unsigned int
#define ull unsigned long long
#define umap unordered_map
#define uset unordered_set
#define ff first
#define ss second
#define pb push_back
#define pf push_front
#define dbg(x) cout << "?" << #x << " " << (x) << endl;
#define rep(i, a, b) for (int i = (a); i < (b); i++)
#define sqr(x) ((x) * (x))
#define all(x) (x).begin(), (x).end()
#define tsc                                                                    \
  ll TC;                                                                       \
  cin >> TC;                                                                   \
  while (TC--)                                                                 \
    solve();
void solve() {
  string s;
  cin >> s;
  int n = s.size();
  int n_1 = n - 1;
  int ans = INF;
  V<V<int>> next(n, V<int>(4, -1));
  next[n_1][s[n_1] - '0'] = n_1;
  for (int i = n - 2; i >= 0; i--) {
    next[i] = next[i + 1];
    int s_i = s[i] - '0';
    next[i][s_i] = i;
    if (next[i][1] == -1 || next[i][2] == -1 || next[i][3] == -1) {
      continue;
    }
    int max_len = max(next[i][1], max(next[i][2], next[i][3]));
    int len = max_len - i;
    ans = min(ans, len);
  }
  if (ans == INF) {
    cout << 0 << endl;
  } else {
    cout << (ans + 1) << endl;
  }
}
int main() {
  ios::sync_with_stdio(0);
  cin.tie(NULL);
  cout.tie(NULL);
  srand(chrono::steady_clock::now().time_since_epoch().count());
  tsc;
}
```