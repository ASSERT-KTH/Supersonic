#pragma GCC optimize("-Ofast")
#pragma GCC optimize("unroll-loops")
#include <algorithm>
#include <chrono>
#include <cmath>
#include <iostream>
#include <string>
#include <vector>
#include <set>
using namespace std;
#define INF (int)1e9
#define endl '\n'
#define V vector
#define str string

void solve() {
  string s;
  cin >> s;
  int n = s.size();
  int ans = INF;
  V<int> next1(4, -1), next2(4, -1);
  V<int> *curr = &next1, *prev = &next2;
  set<int> chars;
  (*curr)[s[n - 1] - '0'] = n - 1;
  chars.insert(s[n - 1] - '0');
  for (int i = n - 2; i >= 0; i--) {
    swap(curr, prev);
    *curr = *prev;
    (*curr)[s[i] - '0'] = i;
    chars.insert(s[i] - '0');
    bool found = true;
    for (auto c : chars) {
      if ((*curr)[c] == -1) {
        found = false;
        break;
      }
    }
    if (!found) {
      continue;
    }
    int len = 0;
    for (auto c : chars) {
      len = max(len, (*curr)[c]);
    }
    len -= i;
    ans = min(ans, len);
  }
  if (ans == INF) {
    cout << 0 << endl;
  } else {
    cout << (ans + 1) << endl;
  }
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(NULL);
  cout.tie(NULL);
  srand(chrono::steady_clock::now().time_since_epoch().count());
  int TC;
  cin >> TC;
  while (TC--)
    solve();
}