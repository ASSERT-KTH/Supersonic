#pragma GCC optimize("-Ofast")
#pragma GCC optimize("unroll-loops")
#include <algorithm>
#include <chrono>
#include <iostream>
#include <string>
#include <vector>
using namespace std;
#define INF (int)1e9
#define endl '\n'
#define V vector

void solve() {
  string s;
  cin >> s;
  int n = s.size();
  int ans = INF;

  // Convert string to integer array
  V<int> s_int(n);
  for (int i = 0; i < n; ++i) {
    s_int[i] = s[i] - '0';
  }
  
  V<V<int>> next(n, V<int>(4, -1));
  next[n - 1][s_int[n - 1]] = n - 1;
  
  // Keep track of max values
  V<int> max_next(n, -1);
  
  for (int i = n - 2; i >= 0; i--) {
    next[i] = next[i + 1];
    next[i][s_int[i]] = i;
    
    // Update max values
    max_next[i] = max({next[i][1], next[i][2], next[i][3]});
    
    if (max_next[i] == -1) continue;

    int len = max_next[i] - i;
    
    // Update min value
    ans = min(ans, len);
  }
  
  if (ans == INF) {
    cout << 0 << endl;
  } else {
    cout << (ans + 1) << endl;
  }
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(NULL);
  cout.tie(NULL);
  srand(chrono::steady_clock::now().time_since_epoch().count());

  int TC;
  cin >> TC;
  while (TC--)
    solve();
}