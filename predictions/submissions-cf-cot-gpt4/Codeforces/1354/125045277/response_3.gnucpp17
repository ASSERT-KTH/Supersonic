#include <algorithm>
#include <chrono>
#include <iostream>
#include <string>
#include <vector>

constexpr int INF = 1e9;
constexpr char NEW_LINE = '\n';

void solve() {
  std::string s;
  std::cin >> s;
  const int n = s.size();
  int ans = INF;
  std::vector<std::vector<int>> next(n, std::vector<int>(4, -1));
  next[n - 1][s[n - 1] - '0'] = n - 1;
  for (int i = n - 2; i >= 0; i--) {
    next[i] = next[i + 1];
    next[i][s[i] - '0'] = i;
    if (next[i][1] == -1 || next[i][2] == -1 || next[i][3] == -1) {
      continue;
    }
    int len;
    if (s[i] == '1') {
      len = std::max(next[i][2], next[i][3]) - i;
    } else if (s[i] == '2') {
      len = std::max(next[i][1], next[i][3]) - i;
    } else {
      len = std::max(next[i][1], next[i][2]) - i;
    }
    ans = std::min(ans, len);
  }
  if (ans == INF) {
    std::cout << 0 << NEW_LINE;
  } else {
    std::cout << (ans + 1) << NEW_LINE;
  }
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  srand(static_cast<unsigned int>(std::chrono::steady_clock::now().time_since_epoch().count()));
  long long TC;
  std::cin >> TC;
  while (TC--) {
    solve();
  }
  return 0;
}