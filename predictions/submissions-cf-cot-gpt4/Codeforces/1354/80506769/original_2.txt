Here are some optimization steps:

1. Remove unused include <bits/stdc++.h> and include necessary libraries as this will reduce compilation time.
2. Instead of using 'long long', use 'int64_t' from <cstdint> which will make sure that the size of the integer is always 64-bits on any platform. 
3. The 'check' function can be inlined. This means the compiler will replace the function call with the actual function code, reducing the overhead of a function call.
4. The 'while' loop can be unrolled partially: this means executing the body of the loop multiple times per iteration. This reduces the overhead of loop condition checking. Since the loop count is known to be even (2*n), we can unroll it by two.
5. The 'rep' macro can be replaced with a traditional 'for' loop. Macros can lead to increased compilation time and code bloat.
6. The iOS_base::sync_with_stdio(0); and cin.tie(0) are not needed as there are no mixed input/output operations with cin/cout and scanf/printf.

Here is the optimized program:

```cpp
#include <iostream>
#include <cmath>
#include <iomanip>
#include <cstdint>

const double esp = 1e-8;
const double pi = acos(-1);

inline bool check(double l, double x, double y) {
  double p = l / 2;
  if (x >= -p && x <= p && y >= -p && y <= p)
    return true;
  return false;
}

int main() {
  std::cout << std::setprecision(9) << std::fixed;
  int64_t ct;
  std::cin >> ct;
  while (ct--) {
    int64_t n;
    std::cin >> n;
    double angle = (pi / n);
    double c = 1 / sqrt(2 - 2 * cos(angle));
    double l = 0, r = 200;
    for (int i = 0; i < 200; ++i) {
      double m = (r + l) * 0.5;
      bool ok = true;
      for (int64_t j = 0; j < 2 * n; j+=2) {
        double x = c * cos(j * angle + pi / 4);
        double y = c * sin(j * angle + pi / 4);
        ok = check(m, x, y);
        if (!ok) {
            x = c * cos((j+1) * angle + pi / 4);
            y = c * sin((j+1) * angle + pi / 4);
            ok = check(m, x, y);
        }
        if (!ok) {
            break;
        }
      }
      if (ok)
        r = m;
      else
        l = m;
    }
    std::cout << l << "\n";
  }

  return 0;
}
```

This optimized version of the program should run faster and consume less memory than the original one.