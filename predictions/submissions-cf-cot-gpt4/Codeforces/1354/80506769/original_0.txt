Here are the steps to optimize the provided code:

1. Remove `#include <bits/stdc++.h>`: This header file is quite large and including it slows down the compile time. Instead, you should include only the necessary standard libraries. In this code, we only need `iostream`, `cmath`, and `iomanip`.

2. Avoid using `#define int long long`: This can be confusing and potentially lead to bugs. It's better to be explicit about types in your code.

3. Avoid using macros for loops: The use of `#define rep(i, x, y) for (int i = x; i < (y); ++i)` is not recommended as it makes the code less readable. It's better to use standard for loops.

4. Use `constexpr` for constant values: `esp`, `pi` and `IOS` should be declared as `constexpr` which tells the compiler that the value is constant and can be computed at compile time. This can help with optimization.

5. Avoid using `ios_base::sync_with_stdio(0); cin.tie(0);`: These lines are used to optimize I/O operations. But in this case, the amount of input/output is not that large to require these optimizations.

6. Avoid unnecessary checks in the performance-critical loop: You are performing the `check` function call inside the loop `rep(j, 0, 2 * n)`, which can be expensive. Instead, you can directly use the condition of the `check` function in the loop.

7. Limit the scope of variables: Declare the variables `x` and `y` inside the loop where they are used.

Here's the optimized version of your code:

```C++
#include <iostream>
#include <cmath>
#include <iomanip>

using namespace std;

constexpr double esp = 1e-8;
constexpr double pi = acos(-1);

int main() {
    cout << setprecision(9) << fixed;
    int ct;
    cin >> ct;
    while (ct--) {
        int n;
        cin >> n;
        double angle = (pi / n);
        double c = 1 / sqrt(2 - 2 * cos(angle));
        double l = 0, r = 200;
        for(int i = 0; i < 200; ++i) {
            double m = (r + l) * 0.5;
            bool ok = true;
            for(int j = 0; j < 2 * n; ++j) {
                double x = c * cos(j * angle + pi / 4);
                double y = c * sin(j * angle + pi / 4);
                double p = m / 2;
                ok = (x >= -p) && (x <= p) && (y >= -p) && (y <= p);
                if (!ok)
                    break;
            }
            if (ok)
                r = m;
            else
                l = m;
        }
        cout << l << "\n";
    }
    return 0;
}
```
Remember that the effectiveness of optimizations can vary depending on the specific compiler and system architecture. It's always a good idea to measure performance before and after applying optimizations to ensure they're having the desired effect.
