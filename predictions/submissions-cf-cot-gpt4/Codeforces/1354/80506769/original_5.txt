Here are the optimizations I propose:

1. The `acos(-1)` function call to calculate the value of pi can be replaced with a constant declaration. This function call is not necessary and it can be computed during compile time which would save some computation time.

2. The `sqrt` function in the calculation of `c` is called in every iteration of the outer while loop. Since it only depends on `n`, we can move this calculation out of the while loop so it's only calculated once per each value of `n`, instead of `200` times.

3. Instead of using the `check` function to check if the point falls within the square, you can directly write the condition in the if statement. This would save the overhead time of function call.

4. The variables `x` and `y` are recalculated in every iteration of the inner loop. We can use the properties of sin and cos to avoid this recalculation. 

The optimized program is as follows:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define rep(i, x, y) for (int i = x; i < (y); ++i)
#define IOS ios_base::sync_with_stdio(0); cin.tie(0)
const double esp = 1e-8;
const double pi = 3.14159265358979323846;
signed main() {
  IOS;
  cout << setprecision(9) << fixed;
  int ct;
  cin >> ct;
  while (ct--) {
    int n;
    cin >> n;
    double angle = (pi / n);
    double c = 1 / sqrt(2 - 2 * cos(angle));
    double l = 0, r = 200;
    double p, x = c * cos(pi / 4), y = c * sin(pi / 4), dx = cos(angle), dy = sin(angle);
    rep(i, 0, 200) {
      double m = (r + l) * 0.5;
      p = m / 2;
      bool ok = true;
      rep(j, 0, 2 * n) {
        ok = (x >= -p and x <= p and y >= -p and y <= p);
        if (!ok)
          break;
        double nx = x * dx - y * dy;
        y = x * dy + y * dx;
        x = nx;
      }
      if (ok)
        r = m;
      else
        l = m;
    }
    cout << l << "\n";
  }
}
```