This program can be optimized for both running time and memory usage by doing the following:

1. Avoid using the `bits/stdc++.h` header as it includes all the standard libraries, which increases compilation time. Include only the necessary libraries.
2. Avoid using the `using namespace std;` statement. This statement can cause name conflicts and can slow down the lookup of the standard library functions.
3. Using `#define` for constant values and loops is not recommended in C++. Instead, we can use const and inline functions.
4. The `double p = l / 2;` line inside the `check()` function is calculated every time the function is called. This can be optimized by passing the pre-calculated value from the main function.
5. The `ok` variable is always true at the beginning of the loop. Instead of assigning it to true at the beginning of each iteration, we can assign it right before the loop and reset it only when necessary.
6. In the second loop, the cos and sin functions are called with the same argument twice. We can store the result of cos and sin in a variable and use it later in the code.
7. Instead of checking `ok` in the second loop and breaking out early, we can use it as the condition for the loop. This way, the loop will automatically terminate when `ok` is false.

Here is the optimized code:

```cpp
#include <iostream>
#include <cmath>
#include <iomanip>

const double ESP = 1e-8;
const double PI = std::acos(-1);

inline bool check(double half_l, double x, double y) {
  return x >= -half_l && x <= half_l && y >= -half_l && y <= half_l;
}

int main() {
  std::ios_base::sync_with_stdio(0);
  std::cin.tie(0);

  std::cout << std::setprecision(9) << std::fixed;
  int ct;
  std::cin >> ct;
  while (ct--) {
    int n;
    std::cin >> n;
    double angle = (PI / n);
    double c = 1 / std::sqrt(2 - 2 * std::cos(angle));
    double l = 0, r = 200;
    for(int i = 0; i < 200; i++) {
      double m = (r + l) * 0.5;
      bool ok = true;
      int j = 0;
      while(ok && j < 2 * n) {
        double angle_j = j * angle + PI / 4;
        double x = c * std::cos(angle_j);
        double y = c * std::sin(angle_j);
        ok = check(m * 0.5, x, y);
        j++;
      }
      if (ok)
        r = m;
      else
        l = m;
    }
    std::cout << l << "\n";
  }
}
```
