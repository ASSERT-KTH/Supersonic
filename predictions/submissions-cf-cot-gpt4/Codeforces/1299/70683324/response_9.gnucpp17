#include <bits/stdc++.h>

typedef long long int lli;
typedef std::pair<lli, lli> ii;
typedef std::vector<ii> vii;
typedef std::vector<lli> vi;

class CMP {
public:
  bool operator()(ii a, ii b) {
    return !(a.first < b.first || (a.first == b.first && a.second <= b.second));
  }
};

void add(std::map<lli, lli> &m, lli x, lli cnt = 1) {
  auto jt = m.find(x);
  if (jt == m.end())
    m.insert({x, cnt});
  else
    jt->second += cnt;
}

void del(std::map<lli, lli> &m, lli x, lli cnt = 1) {
  auto jt = m.find(x);
  if (jt->second <= cnt)
    m.erase(jt);
  else
    jt->second -= cnt;
}

bool cmp(const ii &a, const ii &b) {
  return a.first < b.first || (a.first == b.first && a.second < b.second);
}

void addLine(vii &c, ii z) {
  lli n = c.size();
  while (n > 1) {
    ii x = c[n - 2], y = c[n - 1];
    if ((x.second - y.second) * (z.first - y.first) >= (y.second - z.second) * (y.first - x.first))
      break;
    c.pop_back();
    n--;
  }
  c.push_back(z);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cout << std::fixed << std::setprecision(10);

  lli n;
  cin >> n;
  vi a;
  a.reserve(n);
  a.push_back(0);

  for (lli i = 0; i < n; ++i) {
    cin >> lli in;
    a.push_back(in + a.back());
  }

  vii c;
  vi dd(n + 1, 0);
  for (lli i = n; i >= 1; --i) {
    addLine(c, {-i, a[i]});
    lli l = 0, r = c.size();
    while (r - l > 1) {
      lli mi = (l + r) / 2;
      if (c[mi].first * (c[mi].second - c[mi - 1].second) +
              c[mi].second * (c[mi - 1].first - c[mi].first) >=
          a[i - 1] * (c[mi - 1].first - c[mi].first) -
              (c[mi].second - c[mi - 1].second) * (i - 1))
        l = mi;
      else
        r = mi;
    }
    dd[i] = -c[l].first;
  }

  lli i = 1;
  while (i <= n) {
    lli j = dd[i];
    const double m = (a[j] - a[i - 1]) / static_cast<double>(j - i + 1);
    while (i <= j) {
      printf("%.9lf\n", m);
      i++;
    }
  }

  return 0;
}