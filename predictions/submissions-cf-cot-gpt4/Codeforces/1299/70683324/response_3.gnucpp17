#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("-ffloat-store")
#include <bits/stdc++.h>
using namespace std;
#define fo(i, n) for (i = 0; i < (n); ++i)
#define repD(i, j, n) for (i = (j); i >= (n); --i)
typedef long long int lli;
typedef double mytype;
typedef pair<lli, lli> ii;
typedef vector<ii> vii;
typedef vector<lli> vi;
const lli INF = 0xFFFFFFFFFFFFFFFL;
lli seed;
mt19937 rng(seed = chrono::steady_clock::now().time_since_epoch().count());
inline lli rnd(lli l = 0, lli r = INF) {
  return uniform_int_distribution<lli>(l, r)(rng);
}
void addLine(vii &c, ii z) {
  lli n = c.size();
  while (n > 1) {
    ii x = c[n - 2], y = c[n - 1];
    if ((x.second - y.second) * (z.first - y.first) >= (y.second - z.second) * (y.first - x.first))
      break;
    c.pop_back();
    n--;
  }
  c.push_back(z);
}
int main(void) {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cout << std::fixed << std::setprecision(10);
  lli n, i, j, in;
  cin >> n;
  vi a;
  a.reserve(n);
  a.push_back(0);
  fo(i, n) {
    cin >> in;
    a.push_back(in + a.back());
  }
  vii c;
  vi dd(n + 1, 0);
  repD(i, n, 1) {
    addLine(c, {-i, a[i]});
    lli l = 0, r = c.size();
    while (r - l > 1) {
      lli mi = (l + r) / 2;
      if (c[mi].first * (c[mi].second - c[mi - 1].second) +
              c[mi].second * (c[mi - 1].first - c[mi].first) >=
          a[i - 1] * (c[mi - 1].first - c[mi].first) -
              (c[mi].second - c[mi - 1].second) * (i - 1))
        l = mi;
      else
        r = mi;
    }
    dd[i] = -c[l].first;
  }
  i = 1;
  stringstream ss;
  while (i <= n) {
    j = dd[i];
    const mytype m = (a[j] - a[i - 1]) / (mytype)(j - i + 1);
    for (; i <= j; i++)
      ss << m << '\n';
  }
  cout << ss.str();
  return 0;
}