#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("-ffloat-store")
#include <bits/stdc++.h>
#include <iostream>

#define all(x) begin(x), end(x)
#define sz(x) (int)(x).size()
#define pb push_back
#define mp make_pair
#define X first
#define Y second
#define endl "\n"
typedef long long int lli;
typedef double mytype;
typedef std::pair<lli, lli> ii;
typedef std::vector<ii> vii;
typedef std::vector<lli> vi;
clock_t time_p = clock();

void aryanc403() {
#ifdef ARYANC403
  time_p = clock() - time_p;
  std::cerr << "Time Taken : " << (float)(time_p) / CLOCKS_PER_SEC << "\n";
#endif
}

const lli INF = 0xFFFFFFFFFFFFFFFL;
lli seed;
std::mt19937 rng(seed = std::chrono::steady_clock::now().time_since_epoch().count());
inline lli rnd(lli l = 0, lli r = INF) {
  return std::uniform_int_distribution<lli>(l, r)(rng);
}

class CMP {
public:
  bool operator()(ii a, ii b) {
    return !(a.X < b.X || (a.X == b.X && a.Y <= b.Y));
  }
};

void add(std::map<lli, lli> &m, lli x, lli cnt = 1) {
  m[x] += cnt;
}

void del(std::map<lli, lli> &m, lli x, lli cnt = 1) {
  auto jt = m.find(x);
  if (jt->Y <= cnt)
    m.erase(jt);
  else
    m[x] -= cnt;
}

bool cmp(const ii &a, const ii &b) {
  return a.X < b.X || (a.X == b.X && a.Y < b.Y);
}

const lli mod = 1000000007L;
const lli maxN = 1000000L;
lli T, n, i, j, k, in, cnt, l, r, u, v, x, y;
lli m;
std::string s;
vi a;

void addLine(vii &c, ii z) {
  lli n = sz(c);
  while (n > 1) {
    ii x = c[n - 2], y = c[n - 1];
    if ((x.Y - y.Y) * (z.X - y.X) >= (y.Y - z.Y) * (y.X - x.X))
      break;
    c.pop_back();
    n--;
  }
  c.pb(z);
}

int main(void) {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  std::cout << std::fixed << std::setprecision(10);
  {
    std::cin >> n;
    a.clear();
    a.reserve(n);
    a.pb(0);
    for (i = 0; i < n; ++i) {
      std::cin >> in;
      a.pb(in + a.back());
    }
    vii c;
    vi dd(n + 1, 0);
    for (i = n; i >= 1; --i) {
      addLine(c, {-i, a[i]});
      lli l = 0, r = sz(c);
      while (r - l > 1) {
        lli mi = (l + r) / 2;
        if (c[mi].X * (c[mi].Y - c[mi - 1].Y) +
                c[mi].Y * (c[mi - 1].X - c[mi].X) >=
            a[i - 1] * (c[mi - 1].X - c[mi].X) -
                (c[mi].Y - c[mi - 1].Y) * (i - 1))
          l = mi;
        else
          r = mi;
      }
      dd[i] = -c[l].X;
    }
    i = 1;
    while (i <= n) {
      j = dd[i];
      const mytype m = (a[j] - a[i - 1]) / (mytype)(j - i + 1);
      while (i <= j) {
        printf("%.9lf\n", m);
        ++i;
      }
    }
  }
  aryanc403();
  return 0;
}