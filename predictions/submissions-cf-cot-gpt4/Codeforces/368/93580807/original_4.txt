First, let's go through the code and understand what parts can be optimized:

1. `#include <bits/stdc++.h>`: This is not a standard header file and it includes a large number of standard C++ libraries which increases the compilation time. It would be better to include only the necessary header files. 

2. `cin.tie(NULL); cout.tie(NULL);`: These lines are redundant since we already have `ios::sync_with_stdio(false);` which should unbind the C++ standard streams from their corresponding C streams.

3. `using namespace std;`: Using the standard namespace in global scope is generally not a good practice, especially in large programs, as it can lead to name clashes.

4. The `read` function reads from the `cin`, which can be slow. We can use `scanf` instead of `cin` to speed up input.

5. The `set` data structure in C++ is implemented as a binary search tree. The `find` operation has a time complexity of O(log n). Using an `unordered_set` instead of `set` can speed up the `find` operation to O(1) on average.

Now, let's optimize the code:

```cpp
#include <iostream>
#include <vector>
#include <unordered_set>

void read(std::vector<int> &v) {
  for (auto &x : v)
    scanf("%d", &x);
}

void solve(int n, int m) {
  std::vector<int> v(n);
  read(v);
  std::unordered_set<int> s;
  int cont = 0;
  for (int i = v.size() - 1; i >= 0; i--) {
    if (s.find(v[i]) == s.end()) {
      s.insert(v[i]);
      cont++;
    }
    v[i] = cont;
  }
  int q;
  for (int i = 0; i < m; i++) {
    scanf("%d", &q);
    printf("%d\n", v[q - 1]);
  }
}

int main() {
  int n, m;
  std::ios::sync_with_stdio(false);
  std::cin >> n >> m;
  solve(n, m);
  return 0;
}
```

This optimized program should run faster and use less memory than the original program.