Here are the steps for optimization:

1. The `set<int> s` declaration can be replaced with an `unordered_set<int> s`. Unordered sets are hashed containers and perform lookup, insert and delete operations in constant time O(1) on average, which is faster compared to the O(log n) for ordered set.

2. Avoid using `v.size()` inside the for loop condition, it will be called in each iteration. Instead, store the size in a variable before the loop starts.

3. Instead of using `find()` and `insert()` separately, you can directly use `insert()`. It returns a pair, the second of which is a bool indicating whether or not the insert took place. This will decrease the number of lookups in the set.

4. `ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);` can be placed at the start of the main function. This is mainly because this statement turns off the synchronization of all the C++ standard streams with their corresponding standard C streams if it is called before the program performs its first input or output operation. 

Here is the optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;

void read(vector<int> &v) {
  for (auto &x : v)
    cin >> x;
}

void solve(int n, int m) {
  vector<int> v(n);
  read(v);
  unordered_set<int> s;
  int cont = 0;
  int size = v.size();
  for (int i = size - 1; i >= 0; i--) {
    if (s.insert(v[i]).second) {
      cont++;
    }
    v[i] = cont;
  }
  int q;
  for (int i = 0; i < m; i++) {
    cin >> q;
    cout << v[q - 1] << endl;
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  int n, m;
  cin >> n >> m;
  solve(n, m);
}
```