Optimization Step by Step:

1. Replace `set<int>` with `unordered_set<int>`: `set` is an ordered collection while `unordered_set` is unordered. `unordered_set` has constant time complexity for insert and find operations, while `set` has logarithmic time complexity. This will reduce the running time.

2. Call `reserve` method on `unordered_set` before inserting elements: It will allocate the required memory at once, preventing multiple reallocations and copies as the size grows.

3. Avoid calling `vector::size` method in loop condition: `v.size() - 1` is calculated on each iteration in the original program, but the size of the vector remains constant during the loop execution. Store the size in a variable before the loop and use that variable in the loop condition, which will reduce the running time.

4. Remove `read` function and directly use `cin` to read vector elements in `solve` function: This will avoid the overhead of function call and reduce the running time.

5. Use '\n' instead of `endl` for new lines: `endl` causes an unnecessary flush operation, using '\n' will improve performance.

Optimized Program:

```cpp
#include <bits/stdc++.h>
using namespace std;

void solve(int n, int m) {
  vector<int> v(n);
  for (auto &x : v)
    cin >> x;

  unordered_set<int> s;
  s.reserve(n);

  int cont = 0;
  int size = v.size();
  for (int i = size - 1; i >= 0; i--) {
    if (s.find(v[i]) == s.end()) {
      s.insert(v[i]);
      cont++;
    }
    v[i] = cont;
  }

  int q;
  for (int i = 0; i < m; i++) {
    cin >> q;
    cout << v[q - 1] << '\n';
  }
}

int main() {
  int n, m;
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cin >> n >> m;
  solve(n, m);
}
```
