Step 1:
We can avoid the cost of searching for an element in the set before inserting it by directly attempting to insert the element. The insert method returns a pair, where the second element of the pair is a boolean indicating whether the insert was successful (i.e., the element was not already present in the set).

Step 2:
We don't need to store the size of the vector in a variable because the size function is usually an O(1) operation in C++. We can directly use v.size() in the loop.

Step 3:
Using reserve function for vector v to avoid the cost of reallocations as the vector grows.

Step 4:
Instead of using 'ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);' in main function, we can put them at the start of the program to make all the input/output operations faster from the starting point.

Optimized Program:

```cpp
#include <bits/stdc++.h>
using namespace std;

ios::sync_with_stdio(false);
cin.tie(NULL);
cout.tie(NULL);

void read(vector<int> &v) {
  for (auto &x : v)
    cin >> x;
}

void solve(int n, int m) {
  vector<int> v;
  v.reserve(n);
  read(v);
  set<int> s;
  int cont = 0;
  for (int i = v.size() - 1; i >= 0; i--) {
    if (s.insert(v[i]).second) {
      cont++;
    }
    v[i] = cont;
  }
  int q;
  for (int i = 0; i < m; i++) {
    cin >> q;
    cout << v[q - 1] << endl;
  }
}

int main() {
  int n, m;
  cin >> n >> m;
  solve(n, m);
}
```