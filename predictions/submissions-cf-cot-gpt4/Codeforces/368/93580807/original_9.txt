Here are some steps that can be taken to optimize this code:

1. **Avoid using `#include <bits/stdc++.h>`**: This header file includes quite a lot of headers, many of which you probably don't need. This will slow down the compilation time and increase memory usage. Instead, only include the headers that you need, such as `<iostream>`, `<vector>`, and `<set>`.

2. **Avoid using `using namespace std;`**: This statement can cause name clashes because it imports all the names from the `std` namespace into the global namespace. It's better to use the `std::` prefix when using standard library objects.

3. **Use `unordered_set` instead of `set`**: The `unordered_set` data structure provides constant time complexity for insertions and deletions, while `set` provides logarithmic time complexity.

4. **Use `reserve` for vector**: If you know the size of the vector beforehand, use `reserve` to avoid unnecessary reallocations.

5. **Use Fast I/O Techniques**: This code already uses fast I/O techniques such as `ios::sync_with_stdio(false)`, `cin.tie(NULL)`, and `cout.tie(NULL)`. These techniques can significantly speed up I/O operations.

So, the optimized code would look like this:

```cpp
#include <iostream>
#include <vector>
#include <unordered_set>

void read(std::vector<int> &v) {
  for (auto &x : v)
    std::cin >> x;
}

void solve(int n, int m) {
  std::vector<int> v(n);
  read(v);
  std::unordered_set<int> s;
  v.reserve(n);
  int cont = 0;
  for (int i = v.size() - 1; i >= 0; i--) {
    if (s.find(v[i]) == s.end()) {
      s.insert(v[i]);
      cont++;
    }
    v[i] = cont;
  }
  int q;
  for (int i = 0; i < m; i++) {
    std::cin >> q;
    std::cout << v[q - 1] << "\n";
  }
}

int main() {
  int n, m;
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  std::cin >> n >> m;
  solve(n, m);
}
```
