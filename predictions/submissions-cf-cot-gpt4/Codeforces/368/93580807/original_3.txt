Here are some optimizations that we can apply:

1. **Reserve Space for Vector**: We know the size of the vector 'v' beforehand. So, we can reserve space for 'n' elements which will prevent reallocation of memory when elements are added to the vector.

2. **Use `unordered_set` instead of `set`**: A `set` in C++ is implemented as a binary search tree and so, search operation takes O(logn) time. But an `unordered_set` is implemented using a hash table where search operation takes O(1) on an average.

3. **Reduce the Number of I/O Operations**: We can reduce the number of I/O operations by buffering the output and then printing it at once. Each I/O operation is costly and so reducing the number of such operations can improve the performance of the program.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;

void read(vector<int> &v) {
  for (auto &x : v)
    cin >> x;
}

void solve(int n, int m) {
  vector<int> v(n);
  v.reserve(n);
  read(v);
  unordered_set<int> s;
  int cont = 0;
  for (int i = v.size() - 1; i >= 0; i--) {
    if (s.find(v[i]) == s.end()) {
      s.insert(v[i]);
      cont++;
    }
    v[i] = cont;
  }
  int q;
  stringstream ss;
  for (int i = 0; i < m; i++) {
    cin >> q;
    ss << v[q - 1] << '\n';
  }
  cout << ss.str();
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int n, m;
  cin >> n >> m;
  solve(n, m);
}
```
This optimized code will run faster and use memory more efficiently than the original code.