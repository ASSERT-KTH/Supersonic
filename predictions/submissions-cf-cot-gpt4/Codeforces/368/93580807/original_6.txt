Optimization Steps:

1. In the `solve` function, instead of using `set`, we can use a `unordered_set`. `unordered_set` has a better average case time complexity for inserts and lookups (O(1)) compared to `set` (O(logN)).

2. Instead of checking if an element is in the set and then inserting it, we can directly insert it and check the return value of `insert` to know if the element was inserted or was already there. This saves us one lookup operation.

3. We can reserve memory for the unordered set in advance to avoid rehashing during the execution. This can be done using the `reserve` function. In this case, we can reserve `n` elements as that is the maximum size our set can grow to.

4. We can also avoid checking the size of vector `v` in every iteration by storing it in a variable before the loop.

Optimized Program:

```cpp
#include <bits/stdc++.h>
using namespace std;
void read(vector<int> &v) {
  for (auto &x : v)
    cin >> x;
}
void solve(int n, int m) {
  vector<int> v(n);
  read(v);
  unordered_set<int> s;
  s.reserve(n);
  int cont = 0;
  int size = v.size();
  for (int i = size - 1; i >= 0; i--) {
    if (s.insert(v[i]).second) {
      cont++;
    }
    v[i] = cont;
  }
  int q;
  for (int i = 0; i < m; i++) {
    cin >> q;
    cout << v[q - 1] << '\n';
  }
}
int main() {
  int n, m;
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cin >> n >> m;
  solve(n, m);
}
```

Note: The `'\n'` character is generally faster than `endl` because `endl` causes a flush operation, which can be slow.