The first optimization you can do is to avoid calling `v.size()` repeatedly in the loop, and instead, save it in a variable. You can create a variable `int size = v.size() - 1;` and use this variable in the loop condition. This small optimization can save the time taken by the `size()` function call on each iteration.

The second optimization is in the set insert and find operations. Instead of calling `find` and then `insert` on the set, you can directly call `insert`. The set `insert` method returns a pair, where the second value is a boolean that is `true` if the insertion took place and `false` if the element was already present. This way, you can reduce the number of set operations from 2 to 1 for each element in the worst case.

Here is the optimized code:

```
#include <bits/stdc++.h>
using namespace std;
void read(vector<int> &v) {
  for (auto &x : v)
    cin >> x;
}
void solve(int n, int m) {
  vector<int> v(n);
  read(v);
  set<int> s;
  int cont = 0;
  int size = v.size() - 1;
  for (int i = size; i >= 0; i--) {
    if (s.insert(v[i]).second) {
      cont++;
    }
    v[i] = cont;
  }
  int q;
  for (int i = 0; i < m; i++) {
    cin >> q;
    cout << v[q - 1] << endl;
  }
}
int main() {
  int n, m;
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cin >> n >> m;
  solve(n, m);
}
```
This optimized program does the same operations but in a more efficient way. It avoids the repeated call to `size()` and reduces the number of set operations, hence reducing the running time.