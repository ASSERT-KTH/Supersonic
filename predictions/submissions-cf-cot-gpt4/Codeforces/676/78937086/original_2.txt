The optimization of this code can be achieved by making small changes that may affect the performance of the code significantly. Here are the steps:

1. Avoid using "#include <bits/stdc++.h>" since it includes all of the standard library headers, which makes the code slower to compile and increases memory usage. Includes only the standard library headers that are necessary for the program.

2. The use of "using namespace std;" is generally discouraged as it could lead to name clashes.

3. Instead of using "#define" to define constants, use "const" keyword which is safer.

4. Reduce the use of long long (ll) data type if you don't need very large numbers. Use int instead.

5. You can remove the fastexpp function, it's not being used anywhere.

6. Remove the "invmod" function, it's not being used anywhere.

7. Instead of using the "push_back()" function to add elements to the vector, you can use the "emplace_back()" function, which constructs the object in place and reduces the overhead of temporary object creation.

8. Avoid using the "std::endl" to print a newline character and flush the stream. Use "\n" instead.

Here is the optimized code:

```c++
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

const int MOD = 1000000007;
const int mods = 1000000009;
const int mods1 = 37;
const int mods2 = 715827883;
typedef long long ll;
typedef std::pair<int, int> pii;
typedef std::pair<ll, ll> pll;
typedef std::vector<int> vi;
typedef std::vector<ll> vl;
typedef std::vector<pii> vii;
typedef std::vector<pll> vll;
int TestMillerRabin[12] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37};

// ... rest of the code remains same ...

// Use emplace_back() instead of push_back()
values.emplace_back(s);

// Use '\n' instead of endl
cout << "Yes\n";
```

Remember, these are just small optimization techniques used in C++. The major optimization of the code depends upon the logic and algorithms used.