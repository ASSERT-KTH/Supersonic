#include <iostream>
#include <vector>
#include <string>
#define MOD 1000000007
typedef long long ll;

using namespace std;

ll fastexp(ll x, ll y, ll p) {
  ll ans = 1;
  while (y > 0) {
    if (y & 1)
      ans = (1LL * ans * x) % p;
    y = y >> 1;
    x = (1LL * x * x) % p;
  }
  return ans % p;
}

bool check_composite(ll n, ll a, ll d, int s) {
  ll x = fastexp(a, d, n);
  if (x == 1 || x == n - 1)
    return false;
  for (int r = 1; r < s; r++) {
    x = (1LL * x * x) % n;
    if (x == n - 1)
      return false;
  }
  return true;
}

int TestMillerRabin[12] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37};

bool isPrime(ll p) {
  if (p <= 1)
    return false;
  int r = 0;
  ll d = p - 1;
  while (!(d & 1)) {
    d >>= 1;
    r++;
  }
  for (int i = 0; i < 12; i++) {
    if (check_composite(p, TestMillerRabin[i], d, r))
      return false;
  }
  return true;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n, k;
  cin >> n >> k;
  int played = 0;
  vector<ll> fv;

  for (int i = 0; i < n + 1; i++) {
    string s;
    cin >> s;
    if (s != "?") {
      fv.push_back(stoi(s));
      played++;
    }
  }

  if (k == 0) {
    if (fv[0] == 0 || (fv.empty() && played % 2 == 1))
      cout << "Yes";
    else
      cout << "No";
    return 0;
  }

  if (played == n + 1) {
    vector<ll> mm(fv.size() + 5);
    mm[0] = 1;
    for (int i = 1; i < mm.size(); i++) {
      mm[i] = (1LL * mm[i - 1] * k) % MOD;
    }
    ll fv1 = 0;
    for (int i = 0; i < fv.size(); i++) {
      fv1 = (fv1 + (1LL * fv[i] * mm[i]) % MOD) % MOD;
    }
    if (fv1 == 0)
      cout << "Yes";
    else
      cout << "No";
    return 0;
  }

  if (played % 2 == ((n + 1 - played) % 2))
    cout << "Yes";
  else
    cout << "No";

  return 0;
}