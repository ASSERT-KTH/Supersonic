The given code is already optimized in many aspects, but there are a few things that can be improved.

1. `#include <bits/stdc++.h>` is not recommended because this header file includes too many header files which can increase compile time. It's better to include only necessary header files. 

2. Using `#define` for common operations can make code easier to read but it can also make debugging harder and the code less portable. In this case, it would be better to use inline functions or constexpr for constants like `pi` and `EPS`.

3. The macro `SPEED` is used to speed up I/O operations by disabling synchronization of C++ and C standard streams, but it's not used in the code. It can be removed.

4. The macro `READ` and `WRITE` are defined but not used. These can be removed.

5. The use of `scanf` and `printf` is not recommended in C++. It's better to use `cin` and `cout` which are safer and more idiomatic.

6. The `vis` and `dp` arrays are unnecessarily large. They should be sized based on the actual requirements of your program.

7. The function `gcd` is not used in the code. It can be removed.

Here is the optimized code:

```cpp
#include <iostream>
#include <queue>
#include <cstring>
#include <utility>
using namespace std;

typedef pair<int, int> pii;

const int mx = 6005;
bool vis[mx][mx];
pii dp[mx][mx];

int s, d;

bool bfs() {
  queue<pii> q;
  q.push(make_pair(s, 0));
  vis[s][0] = true;
  pii p;
  int f = 1, mul, sum;
  while (!q.empty()) {
    p = q.front();
    q.pop();
    for (int i = f; i < 10; i++) {
      sum = p.first - i;
      mul = (p.second * 10 + i) % d;
      if (sum == 0 && mul == 0) {
        dp[sum][mul] = make_pair(p.first, p.second);
        return true;
      }
      if (sum >= 0 && !vis[sum][mul]) {
        vis[sum][mul] = true;
        q.push(make_pair(sum, mul));
        dp[sum][mul] = make_pair(p.first, p.second);
      }
    }
    f = 0;
  }
  return false;
}

void print(int sum, int mul) {
  if (sum == s && mul == 0)
    return;
  print(dp[sum][mul].first, dp[sum][mul].second);
  cout << dp[sum][mul].first - sum;
}

int main() {
  cin >> d >> s;
  memset(vis, 0, sizeof(vis));
  memset(dp, 0, sizeof(dp));
  if (bfs()) {
    print(0, 0);
  } else
    cout << -1 << endl;
  return 0;
}
```