The given C++ code is already quite optimized for memory usage and running time. However, there are still a few areas where it could be improved:

1. Replace `#include <bits/stdc++.h>` with specific headers: Including `bits/stdc++.h` is not a good practice because it includes more than 100 files, which can slow down the compile time.

2. Avoid using macros: Macros like `#define` can make the code harder to understand and debug. Replace them with appropriate functions or variables.

3. Use vector instead of arrays: Using a vector can be more flexible because it can dynamically resize itself when elements are added or removed.

4. Avoid using global variables: Global variables are usually a bad idea because they can be accessed from anywhere in the code, which can lead to unexpected behavior and bugs.

5. The `gcd` and `lcm` functions are not being used, so remove them to save memory.

6. Use `std::array` instead of C-style array for `fx`, `fy`, and `dir`. It's safer and provides more features.

7. Remove unused `cmp`, `cmp1`, and `compare` functions.

8. Use `std::pair` and `std::queue` from the STL instead of defining your own.

Optimized program:

```cpp
#include <iostream>
#include <queue>
#include <array>
#include <vector>
#include <utility>
using namespace std;

const int mx = 6000;
typedef pair<int, int> pii;

vector<vector<int>> vis(mx, vector<int>(mx));
vector<vector<pii>> dp(mx, vector<pii>(mx));
int s, d;

int bfs() {
    queue<pii> q;
    q.push(make_pair(s, 0));
    vis[s][0] = 1;
    pii p;
    int f = 1, mul, sum;
    while (!q.empty()) {
        p = q.front();
        q.pop();
        for (int i = f; i < 10; i++) {
            sum = p.first;
            sum -= i;
            mul = p.second;
            mul *= 10;
            mul += i;
            mul %= d;
            if (sum == 0 && mul == 0) {
                dp[sum][mul] = make_pair(p.first, p.second);
                return 1;
            }
            if (sum >= 0 && !vis[sum][mul]) {
                vis[sum][mul] = 1;
                q.push(make_pair(sum, mul));
                dp[sum][mul] = make_pair(p.first, p.second);
            }
        }
        f = 0;
    }
    return 0;
}

void print(int sum, int mul) {
    if (sum == s && mul == 0)
        return;
    print(dp[sum][mul].first, dp[sum][mul].second);
    cout << dp[sum][mul].first - sum;
}

int main() {
    cin >> d >> s;
    if (bfs() == 1) {
        print(0, 0);
    } else
        cout << -1 << endl;
    return 0;
}
```

The optimized program has the same functionality as the original one, but it's more readable and maintainable. The running time and memory usage should also be improved due to the removal of unused code and the use of more efficient data structures.