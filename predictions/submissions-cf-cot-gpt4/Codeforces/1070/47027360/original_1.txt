Optimization Strategy:

1. **Remove unnecessary headers**: The inclusion of "bits/stdc++.h" is generally discouraged as it includes lots of unnecessary headers. It's better to include only the headers that you need.

2. **Remove unused variables and macros**: The given code has many unused variables and macros. These take up memory and removing them can improve memory efficiency.

3. **Replace macros with inline functions**: This is more of a good practice than an optimization. Inline functions provide type safety and are generally preferred over macros.

4. **Replace slow I/O functions with faster ones**: The scanf function is generally slower than cin. We can replace scanf with cin to improve I/O efficiency.

5. **Replace recursive function calls with iterative approach**: When the depth of recursion is too high, it can lead to stack overflow. We can replace the recursive function call in the print function with an iterative approach.

Optimized Program:

```cpp
#include <iostream>
#include <queue>
#include <vector>
using namespace std;

typedef pair<int, int> pii;

int vis[6000][600];
pii dp[6000][600];

int bfs(int s, int d) {
  queue<pii> q;
  q.push(make_pair(s, 0));
  vis[s][0] = 1;
  pii p;
  int f = 1, mul, sum;
  while (!q.empty()) {
    p = q.front();
    q.pop();
    for (int i = f; i < 10; i++) {
      sum = p.first;
      sum -= i;
      mul = p.second;
      mul *= 10;
      mul += i;
      mul %= d;
      if (sum == 0 && mul == 0) {
        dp[sum][mul] = make_pair(p.first, p.second);
        return 1;
      }
      if (sum >= 0 && !vis[sum][mul]) {
        vis[sum][mul] = 1;
        q.push(make_pair(sum, mul));
        dp[sum][mul] = make_pair(p.first, p.second);
      }
    }
    f = 0;
  }
  return 0;
}

void print(int sum, int mul) {
  vector<int> nums;
  while (sum != 0 || mul != 0) {
    nums.push_back(dp[sum][mul].first - sum);
    int temp_sum = dp[sum][mul].first;
    int temp_mul = dp[sum][mul].second;
    sum = temp_sum;
    mul = temp_mul;
  }
  for (int i = nums.size() - 1; i >= 0; --i) {
    cout << nums[i];
  }
}

int main() {
  int d, s;
  cin >> d >> s;
  if (bfs(s, d) == 1) {
    print(0, 0);
  } else
    cout << -1 << endl;
  return 0;
}
```

Note: This is a breadth-first search algorithm and by nature BFS has a time complexity of O(V + E) where V is the number of vertices and E is the number of edges in the graph. This is quite optimal for this kind of problem.