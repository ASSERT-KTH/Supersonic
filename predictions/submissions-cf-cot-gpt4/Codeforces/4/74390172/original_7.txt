Step 1: Remove Unused Constants and Functions
We can see that there are unused constants and functions in the code. The constants `POSITIVE_INFINITY`, `NEGATIVE_INFINITY`, `MOD`, `PI` and functions `bigMod`, `invMod` are not used anywhere in the code. Removing these will reduce the memory footprint of the code.

Step 2: Use `'\n'` instead of `endl`
Using `'\n'` is faster than `endl`. The `endl` will flush the buffer along with inserting a new line, which makes it slower.

Step 3: Use Pre-Increment Operator in `it->second++;`
Pre-increment operator is faster than post-increment operator. It's a good practice to use pre-increment operator if the old value is not required.

Step 4: Use `auto` for Iterator Type
It is better to use `auto` for the iterator type, as it makes the code easier to read and maintain.

After applying these optimizations, the optimized code is as follows:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define FASTER ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);

int main() {
  FASTER;
  int n;
  cin >> n;
  unordered_map<string, int> mp;
  mp.reserve(1 << 18);
  mp.max_load_factor(0.25);
  while (n--) {
    string ar;
    cin >> ar;
    auto it = mp.find(ar);
    if (it == mp.end()) {
      cout << "OK\n";
      mp[ar] = 1;
    } else {
      cout << ar << it->second << '\n';
      ++it->second;
    }
  }
  return 0;
}
```