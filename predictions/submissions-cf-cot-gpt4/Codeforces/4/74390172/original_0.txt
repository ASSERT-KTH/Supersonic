The given C/C++ program seems to be well-optimized, but we can still make some small tweaks to make it run slightly faster. 

1. Unnecessary definitions: The program has some definitions that are not needed like `ll`, `ull`, `ld`, `PI`, `POSITIVE_INFINITY`, `NEGATIVE_INFINITY`, `bigMod`, `invMod`, `MOD`, and `N`. These can be removed to save memory.

2. Unnecessary stream sync: The macro `FASTER` is used to speed up the input/output operations by unsynchronizing C++ streams with the standard C streams and untie `cin` from `cout`. However, this program only uses `cin` and `cout`, not the C streams. Thus, it's safe to remove `ios_base::sync_with_stdio(false)`. 

3. C++ Standard Library: The program uses `#include <bits/stdc++.h>`, which includes all standard C++ libraries. This is a GCC extension and is not portable. It also increases the compilation time. It's better to just include necessary headers.

Here's the optimized version of the program considering these points:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>
using namespace std;

int main() {
  cin.tie(NULL);                                                               
  cout.tie(NULL);
  
  int n;
  cin >> n;
  
  unordered_map<string, int> mp;
  mp.reserve(1 << 18);
  mp.max_load_factor(0.25);
  
  while (n--) {
    string ar;
    cin >> ar;
    
    auto it = mp.find(ar);
    if (it == mp.end()) {
      cout << "OK\n";
      mp[ar] = 1;
    } else {
      cout << ar << it->second << "\n";
      it->second++;
    }
  }
  return 0;
}
```

Note: This optimization is minor and won't have a significant impact on running time or memory usage. The given program was already quite well written and optimized.