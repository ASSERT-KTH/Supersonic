Optimization Steps:

1. Remove unnecessary `#include <bits/stdc++.h>` and replace it with specific includes. `#include <bits/stdc++.h>` includes a lot of unnecessary stuff which can increase compile time. It is better to include what you need one by one: `#include <iostream>`, `#include <unordered_map>`, and `#include <string>`.

2. Remove unused typedefs. In this code `ll`, `ull`, `ld`, `POSITIVE_INFINITY`, `NEGATIVE_INFINITY`, `MOD`, `PI`, `bigMod`, `invMod`, `N` are not used anywhere. So, it's better to remove them to reduce the memory footprint.

3. Avoid unnecessary macro `FASTER`. It is better to use the optimization lines directly in the main function rather than creating a macro.

Optimized Program:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n;
  cin >> n;
  
  unordered_map<string, int> mp;
  mp.reserve(1 << 18);
  mp.max_load_factor(0.25);
  
  while (n--) {
    string ar;
    cin >> ar;
    auto it = mp.find(ar);
    if (it == mp.end()) {
      cout << "OK\n";
      mp[ar] = 1;
    } else {
      cout << ar << it->second << "\n";
      it->second++;
    }
  }
  
  return 0;
}
```

This optimized code has fewer lines, is cleaner, and uses less memory. The functionality remains the same.