This program is already quite well optimized, especially with the usage of unordered_map and the reserve and max_load_factor calls to optimize hash map performance. However, there are a few small modifications we can make to further optimize it:

1. Remove unnecessary #include <bits/stdc++.h>: This header file includes almost all standard library headers which is not necessary and increases the compilation time. Include only the necessary header files.

2. Remove unnecessary typedefs: If these typedefs aren't being used, they're just taking up memory and increasing the size of the executable. Let's remove the unused typedefs.

3. Remove unnecessary constants: The constants POSITIVE_INFINITY, NEGATIVE_INFINITY, PI, and N are not being used in the code. We can remove these to reduce memory usage.

4. Remove unnecessary template functions: The functions bigMod and invMod are not used in the code, so we can remove these to reduce memory usage and the size of the executable.

5. Remove unnecessary #define FASTER: The macro about input/output is not needed here as the program is not dealing with extensive input/output operations. It only increases the complexity of the code.

6. Use '\n' instead of std::endl: '\n' is faster than std::endl because std::endl forces a flushing stream, which is usually unnecessary and incurs a performance penalty.

Here is the optimized code:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>
using namespace std;

int main() {
  int n;
  cin >> n;

  unordered_map<string, int> mp;
  mp.reserve(1 << 18);
  mp.max_load_factor(0.25);

  while (n--) {
    string ar;
    cin >> ar;
    auto it = mp.find(ar);
    if (it == mp.end()) {
      cout << "OK\n";
      mp.insert(make_pair(ar, 1));
    } else {
      cout << ar << it->second << "\n";
      it->second++;
    }
  }

  return 0;
}
```