Step 1: Using `std::unordered_map` instead of `std::map` - As the order of elements does not matter in your input, using an `unordered_map` can provide faster lookups, insertions, and deletions on average.

Step 2: Using `auto` in combination with `unordered_map::insert` - This will reduce the number of lookups in the `unordered_map` from two (`find` and `[]`) to just one.

Step 3: Using `'\n'` instead of `endl` - `'\n'` is faster because `endl` causes a flush operation, which is generally unnecessary and can negatively impact performance. 

Optimized Code:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;
int main() {
  ios::sync_with_stdio(0); cin.tie(0);
  int n;
  string s;
  cin >> n;
  unordered_map<string, int> db;
  while (n--) {
    cin >> s;
    auto result = db.insert({s, 0});
    if (result.second) {
      cout << "OK" << '\n';
    } else {
      cout << s << ++result.first->second << '\n';
    }
  }
  return 0;
}
```

The `insert` function returns a pair consisting of an iterator to the inserted element (or to the element that prevented the insertion) and a bool denoting whether the insertion took place. If the insertion took place, the `second` member of the pair is true, otherwise, false. By using `insert`, we only perform a single lookup in the unordered_map.