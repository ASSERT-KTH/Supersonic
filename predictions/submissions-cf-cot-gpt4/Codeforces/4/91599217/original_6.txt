The given program reads a list of strings from input, then checks if the string already exists in a map. If it does not exist, it prints "OK" and inserts the string into the map. If it does already exist, it prints the string along with its occurrence count and increments the count.

Here are steps to optimize the given program:

1. Use `unordered_map` instead of `map`. `unordered_map` has constant time complexity for insert and find operations, while `map` has logarithmic time complexity for these operations. This will speed up the program.

2. Use `std::endl` instead of '\n'. The `std::endl` manipulator does two things: it inserts a newline character into the output sequence (like `'\n'`), and it flushes the output buffer. This can slow down the output, especially when outputting a lot of data in a loop. So, `'\n'` is more efficient than `std::endl`.

3. Use `auto` for the map iterator. This makes the code cleaner and easier to read.

Here is the optimized program:

```c++
#include <algorithm>
#include <iostream>
#include <unordered_map>
using namespace std;
int main() {
  ios::sync_with_stdio(0), cin.tie(0);
  int n;
  string s;
  cin >> n;
  unordered_map<string, int> db;
  while (n--) {
    cin >> s;
    auto it = db.find(s);
    if (it == db.end()) {
      cout << "OK" << '\n';
      db[s] = 1;
    } else {
      cout << s << it->second++ << '\n';
    }
  }
  return 0;
}
```
This program will run faster and use less memory than the original one.