The primary optimization can be done in the map lookup part. Currently, the code performs the lookup twice if the string is present in the map (once for the `find()` operation and once for the increment operation). We can reduce this to a single lookup operation. 

We can use the `std::map::operator[]` method which directly returns a reference to the value that is mapped to a key equivalent to key, performing an insertion if such key does not already exist. So, we don't need to check if the string is in the map or not. 

The optimized code is as follows:

```cpp
#include <iostream>
#include <map>
using namespace std;
int main() {
  ios::sync_with_stdio(0); cin.tie(0);
  int n;
  string s;
  cin >> n;
  map<string, int> db;
  while (n--) {
    cin >> s;
    if (db[s]++ == 0) {
      cout << "OK" << '\n';
    } else {
      cout << s << db[s]-1 << '\n';
    }
  }
  return 0;
}
```
In this optimized code, the `db[s]++` operation will increase the count of the string `s` and return the value before the increment. So if the string `s` is not in the map, `db[s]` will return 0, and if the string `s` is in the map, `db[s]` will return the count before incrementing. Therefore, we don't need to use `find()` to check if the string is in the map or not. This reduces the number of lookups in the map, improving the time efficiency of the program.