This C++ program is already quite optimized, it makes use of STL containers and functions to achieve its purpose. However, there are a few potential places for optimization:

1. The `std::map` container has a logarithmic complexity for insertion and search operations. In this case, where the keys are strings, it may be more efficient to use an `std::unordered_map` instead, which has an average case constant time complexity for these operations, due to its underlying hash table implementation.

2. In the else branch, the program is doing multiple output operations, which can be slow. It's generally more efficient to construct the string to be output first, then output it in a single operation.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;
int main() {
  ios::sync_with_stdio(0), cin.tie(0);
  int n;
  string s;
  cin >> n;
  unordered_map<string, int> db;
  while (n--) {
    cin >> s;
    if (db.find(s) == db.end()) {
      cout << "OK" << '\n';
      db[s] = 1;
    } else {
      cout << s << ++db[s] << '\n';
    }
  }
  return 0;
}
```

In this optimized version, the `std::map` has been replaced with `std::unordered_map` to potentially speed up insertions and lookups. The else branch has been modified to perform a single output operation, which should be faster than multiple output operations. The value of `db[s]` is incremented before it's output, so the updated value is shown immediately.