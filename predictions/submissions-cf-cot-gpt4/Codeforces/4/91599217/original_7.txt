Here is the optimized program:

```
#include <iostream>
#include <unordered_map>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int n;
  string s;
  cin >> n;
  unordered_map<string, int> db;
  while (n--) {
    cin >> s;
    auto& dbVal = db[s];
    if (dbVal == 0) {
      cout << "OK" << '\n';
    } else {
      cout << s << dbVal << '\n';
    }
    ++dbVal;
  }
  return 0;
}
```

Step by step optimization:

1. `ios_base::sync_with_stdio(false);` and `cin.tie(nullptr);`:

   These two lines of code disable the synchronization of all the C++ standard streams with their corresponding C streams. This can potentially speed up input/output operations, but must be done at the start of the program before any I/O operations.

2. `unordered_map<string, int> db;` instead of `map<string, int> db;`:

   An unordered_map is generally faster for lookups than a map because it uses a hash table for storage, as opposed to a map which uses a tree structure. The trade-off is that an unordered_map may use more memory, but in this case, it's a worthy trade-off for the speed increase.

3. `auto& dbVal = db[s];`:

   Instead of performing two lookups in the map (one for the if statement and one for the increment), we store a reference to the value in the map and then perform operations on that reference. This reduces the number of lookups from 2 to 1, which can significantly speed up the program if the map is large.

4. `if (dbVal == 0)` instead of `if (db.find(s) == db.end())`:

   The use of `db[s]` will return 0 if the key does not exist in the map. This is faster than using `find` because it only requires one lookup instead of two.

5. `++dbVal;` instead of `db[s] = 1;` or `db[s]++`:

   We can simply increment our referenced value from the map. This is faster than two separate operations (lookup and assignment) in the original code.