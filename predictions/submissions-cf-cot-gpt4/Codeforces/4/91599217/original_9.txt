The program you've provided is implemented quite efficiently already, but there are a few minor optimizations we can consider.

1. Unnecessary header: The `<algorithm>` header is included in the program but it is not used anywhere. Removing it will reduce the compilation time as the compiler will not have to process this header.

2. Unnecessary check with `find`: The map's `operator[]` will create an element with the key if it doesn't exist. Hence, we don't need to perform a separate check with `find`.

3. Use '\n' instead of endl: The endl manipulator performs a flush operation, which can be expensive in terms of performance. Using '\n' instead of endl will improve the performance.

4. Fast IO operations: `ios::sync_with_stdio(0), cin.tie(0);` these two lines of code are used to speed up input/output operations in C++. They are used to untie cin and cout and turn off synchronization with the standard C I/O library. This can significantly improve the performance of I/O-heavy programs.

Here is the optimized code:

```cpp
#include <iostream>
#include <map>
using namespace std;

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  
  int n;
  string s;
  cin >> n;
  
  map<string, int> db;
  while (n--) {
    cin >> s;
    if (db[s] == 0) {
      cout << "OK" << '\n';
    } else {
      cout << s << db[s] << '\n';
    }
    db[s]++;
  }
  return 0;
}
```

This version of the program avoids the unnecessary `find` operation, which may improve runtime slightly. It also gets rid of the unused `<algorithm>` header, which will reduce compilation time.