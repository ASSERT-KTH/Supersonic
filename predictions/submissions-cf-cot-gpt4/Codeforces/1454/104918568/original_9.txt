Let's optimize the given code step by step.

1. Include only necessary headers: The header file `bits/stdc++.h` is quite large and includes a lot of unnecessary stuff which increases compilation time. It's better to include only the headers that are actually needed. In this case, `iostream`, `map` and `cmath`.

2. Calculate square root once: In the `isPrime` function, the square root of `n` is calculated in every loop iteration. You can calculate it once before the loop and store the result in a variable.

3. Remove unused function: The function `isPrime` is not used in the program, so it can be removed.

4. Avoid dynamic size array: In the `solve` function, the size of `a` is determined at runtime, which is not a good practice in C++. Instead, a vector can be used.

5. No need to store values in array or vector: Actually, we don't need to store the values in an array or vector. We can check the map directly after each input to see if it's a unique element.

6. Use auto keyword: For the iterator `it`, use the `auto` keyword to make the code cleaner.

Here is the optimized code:

```cpp
#include <iostream>
#include <map>
#include <cmath>
using namespace std;

void solve() {
  int n;
  cin >> n;
  map<int, int> m;
  int uniqueIndex = -1;
  for (int i = 0; i < n; i++) {
    int x;
    cin >> x;
    m[x]++;
    if(m[x] == 1) {
      uniqueIndex = i + 1;
    }
    else if(uniqueIndex == i) {
      uniqueIndex = -1;
    }
  }
  cout << uniqueIndex << endl;
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
}
```