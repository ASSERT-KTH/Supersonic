To optimize the provided C/C++ code, we can apply several methods:

1. **Avoid Recalculation**: In the `isPrime` function, the `sqrt(n)` is recalculated in every iteration. We can calculate it once and store the result in a variable to avoid extra computation.

2. **Use Vector Instead of Array**: In C++, it's better to use `std::vector` instead of C-style arrays. This will prevent potential out-of-bounds access and memory leak problems.

3. **Unnecessary map usage**: In the `solve` function, the map `m` is used to count the occurrences of each number in the array. However, we can simply use a vector of the size `n+1` to count the occurrences instead. This will reduce the time complexity from O(log(n)) for map operations to O(1) for vector operations.

4. **Avoid Unnecessary Iteration**: In the for-loop where you iterate over the map, you again iterate over the array to find the index of the element which occurs only once. You can avoid this by storing the index in the map itself.

Below is the optimized code considering above suggestions:

```cpp
#include <bits/stdc++.h>
using namespace std;

bool isPrime(int n) {
    if (n <= 1)
        return false;
    int limit = sqrt(n);
    for (int i = 2; i <= limit; i++) {
        if (n % i == 0)
            return false;
    }
    return true;
}

void solve() {
    int n;
    cin >> n;
    vector<int> a(n);
    vector<pair<int,int>> m(n+1, make_pair(0, -1));
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        m[a[i]].first++;
        m[a[i]].second = i;
    }
    for (auto &it : m) {
        if (it.first == 1) {
            cout << it.second + 1 << endl;
            return;
        }
    }
    cout << -1 << endl;
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
}
```

Note: `#include <bits/stdc++.h>` already includes `<math.h>`, so importing math.h separately is not necessary.