Optimization Steps:

1. Remove `#include <bits/stdc++.h>`: This header file is quite large and including it significantly slows down the compile time. It also is not a standard library, but rather a GCC extension, so it's not portable to other compilers.

2. Combine and reduce header files: The `#include <math.h>` can be replaced by `#include <cmath>`. The functionality of both is the same, but `<cmath>` is a C++ version of `<math.h>` and it is better to use C++ headers in C++ code.

3. Avoid calling `sqrt()` in a loop: The `sqrt()` function is expensive in terms of CPU time. Instead of calling it in each iteration of the loop, we can calculate it once and store the result, then use this stored result in our loop.

4. Avoid using VLA (Variable Length Array): The size of arrays in C++ should be known at compile time. Using a variable to define the size of an array (like `int a[n];`) is a non-standard extension which is not supported by all compilers. We can use `std::vector<int>` instead.

5. Use `auto` for iterators: Using `auto` can make the code cleaner and easier to read and maintain.

6. Avoid multiple iterations: The current code iterates over the array and map multiple times. We can optimize this by keeping track of the first occurrence of each element while reading the input. 

Here is the optimized program:

```
#include <iostream>
#include <vector>
#include <map>
#include <cmath>
using namespace std;

bool isPrime(int n) {
  if (n <= 1)
    return false;
  int sqrtN = sqrt(n);
  for (int i = 2; i <= sqrtN; i++) {
    if (n % i == 0)
      return false;
  }
  return true;
}

void solve() {
  int n;
  cin >> n;
  vector<int> a(n);
  map<int, pair<int, int>> m;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    if(m.count(a[i]) == 0) {
      m[a[i]] = {i, 1};
    } else {
      m[a[i]].second++;
    }
  }
  for (auto& it : m) {
    if (it.second.second == 1) {
      cout << it.second.first + 1 << endl;
      return;
    }
  }
  cout << -1 << endl;
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
}
```
