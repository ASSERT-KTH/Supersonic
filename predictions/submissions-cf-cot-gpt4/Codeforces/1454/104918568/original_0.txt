Here are the steps to optimize the given C/C++ program:

1. The `#include<bits/stdc++.h>` is generally considered bad practice since it includes a lot of unnecessary headers that can slow down the compilation time. Instead, include only the headers that are necessary for the program.

2. The function `isPrime` is not used anywhere in the code, so it can be removed to save memory.

3. The array `a` is only used to find the index of the first unique element. This can be done more efficiently by storing the pairs (element, index) in the map instead of just the count. This way, the index of the first unique element can be found directly from the map without having to search the array. This reduces the time complexity from quadratic to linear.

4. The map `m` can be declared as `unordered_map` instead of `map`. An `unordered_map` has an average time complexity of O(1) for insertions, deletions, and searches, compared to a `map` which has a time complexity of O(log n). This can significantly speed up the program if the number of elements is large.

5. The usage of `std::endl` can slow down the output due to the fact that it forces a flushing of the output buffer. Using `'\n'` instead can speed up the output.

Here is the optimized program:

```c++
#include <iostream>
#include <unordered_map>
using namespace std;

void solve() {
  int n;
  cin >> n;
  unordered_map<int, pair<int, int>> m;
  for (int i = 0; i < n; i++) {
    int x;
    cin >> x;
    if (m.count(x) == 0) {
      m[x] = {i, 1};
    } else {
      m[x].second++;
    }
  }
  for (const auto& it : m) {
    if (it.second.second == 1) {
      cout << it.second.first + 1 << '\n';
      return;
    }
  }
  cout << -1 << '\n';
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
}
```