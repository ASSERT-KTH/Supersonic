The first optimization that can be made is to avoid calculating the square root on each iteration in the isPrime function. This is a computationally expensive operation. Instead, we can calculate the square root once before entering the loop. 

The second optimization that can be made is in the solve function. Currently, for every unique value in the map, you're iterating over the entire array a again to find the index of that value. This is unnecessary and can be avoided by storing the indices of each value directly in the map. Instead of using a map of int to int, you can use a map of int to vector and store all indices of each value in the vector. Then, if the size of the vector is 1, you can output the index directly without needing to search through the array a again.

Here is the optimized code:

```
#include <bits/stdc++.h>
#include <math.h>
using namespace std;
bool isPrime(int n) {
  if (n <= 1)
    return false;
  int limit = sqrt(n);
  for (int i = 2; i <= limit; i++) {
    if (n % i == 0)
      return false;
  }
  return true;
}
void solve() {
  int n;
  cin >> n;
  map<int, vector<int>> indices;
  for (int i = 0; i < n; i++) {
    int x;
    cin >> x;
    indices[x].push_back(i + 1);
  }
  map<int, vector<int>>::iterator it;
  for (it = indices.begin(); it != indices.end(); it++) {
    if (it->second.size() == 1) {
      cout << it->second[0] << endl;
      return;
    }
  }
  cout << -1 << endl;
  return;
}
int main() {
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
}
```

Please note that the isPrime function is not being used in the original code. So if it's not needed in the future, it can be removed to save memory.