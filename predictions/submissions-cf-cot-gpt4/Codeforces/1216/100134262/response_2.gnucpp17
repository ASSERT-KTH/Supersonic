#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <iostream>
#include <vector>
#include <map>
#include <algorithm>

constexpr int MAXN = 301;
constexpr int mod = 1000000007;
constexpr int largeNumber = 1e18;

using namespace std;

int smallestPrimeFactor[MAXN];

void sieve() {
  smallestPrimeFactor[1] = 1;
  for (int i = 2; i < MAXN; i++)
    smallestPrimeFactor[i] = i;
  for (int i = 4; i < MAXN; i += 2)
    smallestPrimeFactor[i] = 2;
  for (int i = 3; i * i < MAXN; i++) {
    if (smallestPrimeFactor[i] == i) {
      for (int j = i * i; j < MAXN; j += i)
        if (smallestPrimeFactor[j] == j)
          smallestPrimeFactor[j] = i;
    }
  }
}

map<int, int> getFactor(int number) {
  map<int, int> primeFactorCount;
  while (number > 1) {
    primeFactorCount[smallestPrimeFactor[number]]++;
    number /= smallestPrimeFactor[number];
  }
  return primeFactorCount;
}

int power(int base, int exponent) {
  int result = 1;
  if (base == 0)
    return 0;
  while (exponent > 0) {
    if (exponent & 1)
      result = (result * base);
    exponent = exponent >> 1;
    base = (base * base);
  }
  return result;
}

int gcd(int a, int b) {
  if (a == 0)
    return b;
  return gcd(b % a, a);
}

int inverse(int a, int p) { return power(a, p - 2); }

int ncr(int n, int r, int p) {
  if (r > n)
    return 0;
  if (r == 0)
    return 1;
  return (smallestPrimeFactor[n] * inverse(smallestPrimeFactor[r], p) % p * inverse(smallestPrimeFactor[n - r], p) % p) % p;
}

int main() {
  ios_base::sync_with_stdio(false);                                            
  cin.tie(NULL);

  sieve();

  // Rest of the code goes here...

  return 0;
}