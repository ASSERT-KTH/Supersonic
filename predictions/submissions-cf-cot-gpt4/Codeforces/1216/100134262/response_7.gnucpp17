#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma comment(linker, "/stack:200000000")
#include <map>
#include <iostream>
#include <string>
#define int long long
#define double long double
#define endl '\n'
#define MAXN 301
#define NUM_ELEM 4000000
#define INF 1e18
#define fast ios_base::sync_with_stdio(false); cin.tie(NULL);
#define mod 1000000007
using namespace std;
int spf[MAXN];
const int fac[MAXN];
void sieve() {
  spf[1] = 1;
  for (int i = 2; i < MAXN; i++)
    spf[i] = i;
  for (int i = 4; i < MAXN; i += 2)
    spf[i] = 2;
  for (int i = 3; i * i < MAXN; i++) {
    if (spf[i] == i) {
      for (int j = i * i; j < MAXN; j += i)
        if (spf[j] == j)
          spf[j] = i;
    }
  }
}
map<int, int> getfactor(int a) {
  map<int, int> m;
  while (a > 1) {
    m[spf[a]]++;
    a /= spf[a];
  }
  return m;
}
int power(int x, int y, int p) {
  int res = 1;
  if (x == 0)
    return 0;
  while (y > 0) {
    if (y & 1)
      res = (res * x);
    y = y >> 1;
    x = (x * x);
  }
  return res;
}
int inverse(int a, int p) { return power(a, p - 2, p); }
int ncr(int n, int r, int p) {
  if (r > n)
    return 0;
  if (r == 0)
    return 1;
  return (fac[n] * inverse(fac[r], p) % p * inverse(fac[n - r], p) % p) % p;
}
int dp[NUM_ELEM], lazy[NUM_ELEM];
void push(int id, int l, int r) {
  dp[id] = min(dp[id], lazy[id]);
  if (l != r) {
    lazy[id << 1] = min(lazy[id << 1], lazy[id]);
    lazy[id << 1 | 1] = min(lazy[id << 1 | 1], lazy[id]);
  }
  lazy[id] = INF;
}
void solve() {
  for (int i = 0; i <= NUM_ELEM; i++) {
    dp[i] = INF;
    lazy[i] = INF;
  }
  int n, k;
  cin >> n >> k;
  string s;
  cin >> s;
  int m = 2 * n;
  for (int i = 1; i <= n; i++) {
    if (i == 1)
      upd(1, 1, m, i, i, i);
    else
      upd(1, 1, m, i, i, get(1, 1, m, i - 1, i - 1) + i);
    if (i <= k + 1 && s[i - 1] == '1')
      upd(1, 1, m, i + 1, i + k, i);
    else if (s[i - 1] == '1' && i >= k + 2) {
      int gg = get(1, 1, m, i - k - 1, i);
      upd(1, 1, m, i - k, i + k, gg + i);
    }
  }
  cout << get(1, 1, m, n, n) << endl;
}
signed main() {
  fast int test = 1;
  while (test--) {
    solve();
  }
}