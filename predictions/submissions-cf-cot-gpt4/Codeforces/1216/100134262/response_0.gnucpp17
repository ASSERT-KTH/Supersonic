#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma comment(linker, "/stack:200000000")
#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

#define int long long
#define endl '\n'
#define mod 1000000007
#define MAXN 301
#define ll unsigned long long

void sieve() {
    int spf[MAXN];
    spf[1] = 1;
    for (int i = 2; i < MAXN; i++)
        spf[i] = i;
    for (int i = 4; i < MAXN; i += 2)
        spf[i] = 2;
    for (int i = 3; i * i < MAXN; i++) {
        if (spf[i] == i) {
            for (int j = i * i; j < MAXN; j += i)
                if (spf[j] == j)
                    spf[j] = i;
        }
    }
}

std::map<int, int> getfactor(int a, int spf[]) {
    std::map<int, int> m;
    while (a > 1) {
        m[spf[a]]++;
        a /= spf[a];
    }
    return m;
}

int power(int x, int y) {
    int res = 1;
    if (x == 0)
        return 0;
    while (y > 0) {
        if (y & 1)
            res = (res * x);
        y = y >> 1;
        x = (x * x);
    }
    return res;
}

int gcd(int a, int b) {
    if (a == 0)
        return b;
    return gcd(b % a, a);
}

int inverse(int a, int p) { return power(a, p - 2); }

int ncr(int n, int r, int p, int fac[]) {
    if (r > n)
        return 0;
    if (r == 0)
        return 1;
    return (fac[n] * inverse(fac[r], p) % p * inverse(fac[n - r], p) % p) % p;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    int test = 1;
    while (test--) {
        solve();
    }
}