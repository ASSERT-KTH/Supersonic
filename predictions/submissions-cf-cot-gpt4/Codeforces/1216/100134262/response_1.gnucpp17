#include <map>
#include <vector>
#include <iostream>

using std::map;
using std::vector;
using std::pair;
using std::cout;
using std::cin;
using std::endl;

const int MAXN = 301;
const long long mod = 1000000007;
const long long ll = 1e18;
const int MAXDP = 2000001;

long long spf[MAXN];
long long dp[MAXDP];
long long lazy[MAXDP];

void sieve() {
    spf[1] = 1;
    for (long long i = 2; i < MAXN; i++)
        spf[i] = i;
    for (long long i = 4; i < MAXN; i += 2)
        spf[i] = 2;
    for (long long i = 3; i * i < MAXN; i++) {
        if (spf[i] == i) {
            for (long long j = i * i; j < MAXN; j += i)
                if (spf[j] == j)
                    spf[j] = i;
        }
    }
}

map<long long, long long> getFactor(long long a) {
    map<long long, long long> m;
    while (a > 1) {
        m[spf[a]]++;
        a /= spf[a];
    }
    return m;
}

long long power(long long x, long long y, long long p) {
    long long res = 1;
    if (x == 0)
        return 0;
    while (y > 0) {
        if (y & 1)
            res = (res * x);
        y = y >> 1;
        x = (x * x);
    }
    return res;
}

long long gcd(long long a, long long b) {
    if (a == 0)
        return b;
    return gcd(b % a, a);
}

long long inverse(long long a, long long p) {
    return power(a, p - 2, p);
}

long long ncr(long long n, long long r, long long p) {
    if (r > n)
        return 0;
    if (r == 0)
        return 1;
    return (fac[n] * inverse(fac[r], p) % p * inverse(fac[n - r], p) % p) % p;
}

void push(int id, int l, int r) {
    dp[id] = std::min(dp[id], lazy[id]);
    if (l != r) {
        lazy[id << 1] = std::min(lazy[id << 1], lazy[id]);
        lazy[(id << 1) | 1] = std::min(lazy[(id << 1) | 1], lazy[id]);
    }
    lazy[id] = ll;
}

void upd(int id, int l, int r, int lq, int rq, int val) {
    push(id, l, r);
    if (l > r || l > rq || r < lq)
        return;
    if (lq <= l && r <= rq) {
        lazy[id] = std::min(lazy[id], val);
        push(id, l, r);
        return;
    }
    int mid = (l + r) >> 1;
    upd(id << 1, l, mid, lq, rq, val);
    upd((id << 1) | 1, mid + 1, r, lq, rq, val);
    dp[id] = std::min(dp[id << 1], dp[(id << 1) | 1]);
}

long long get(int id, int l, int r, int lq, int rq) {
    push(id, l, r);
    if (l > r || l > rq || r < lq)
        return ll;
    if (lq <= l && r <= rq)
        return dp[id];
    int mid = (l + r) >> 1;
    return std::min(get(id << 1, l, mid, lq, rq),
                    get((id << 1) | 1, mid + 1, r, lq, rq));
}

void solve() {
    for (int i = 0; i <= MAXDP; i++) {
        dp[i] = ll;
        lazy[i] = ll;
    }
    int n, k;
    cin >> n >> k;
    string s;
    cin >> s;
    int m = 2 * n;
    for (int i = 1; i <= n; i++) {
        if (i == 1)
            upd(1, 1, m, i, i, i);
        else
            upd(1, 1, m, i, i, get(1, 1, m, i - 1, i - 1) + i);
        if (i <= k + 1 && s[i - 1] == '1')
            upd(1, 1, m, i + 1, i + k, i);
        else if (s[i - 1] == '1' && i >= k + 2) {
            long long gg = get(1, 1, m, i - k - 1, i);
            upd(1, 1, m, i - k, i + k, gg + i);
        }
    }
    cout << get(1, 1, m, n, n) << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    solve();
    return 0;
}