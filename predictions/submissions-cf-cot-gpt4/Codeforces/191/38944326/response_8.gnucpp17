#include <algorithm>
#include <cstdio>
#include <unordered_map>
#include <utility>
#include <vector>
using namespace std;
const int N = 100001;
int par[N], hev[N], siz[N], dep[N], top[N], dif[N], bak[N];
vector<int> edg[N];
int u[N], v[N];
unordered_map<int, unordered_map<int, int>> ans;

void dfs(int u) {
  siz[u] = 1;
  hev[u] = -1;
  for (int v : edg[u]) {
    if (v == par[u])
      continue;
    par[v] = u;
    dep[v] = dep[u] + 1;
    dfs(v);
    siz[u] += siz[v];
    if (hev[u] == -1 || siz[v] > siz[hev[u]])
      hev[u] = v;
  }
}

void dfs2(int u) {
  for (int v : edg[u]) {
    if (v == par[u])
      continue;
    if (v == hev[u])
      top[v] = top[u];
    else
      top[v] = v;
    dfs2(v);
  }
}

void dfs3(int u, int cnt) {
  for (int v : edg[u]) {
    if (v == par[u])
      continue;
    auto &ref = ans[min(u, v)][max(u, v)];
    if (v == hev[u]) {
      ref += cnt + dif[u];
      dfs3(v, cnt + dif[u]);
    } else {
      ref += bak[v];
      dfs3(v, 0);
    }
  }
}

int main() {
  int n, k;
  scanf("%d\n", &n);
  for (int i = 0; i < n; i++)
    edg[i].clear();
  for (int i = 0; i < n - 1; i++) {
    scanf("%d%d", &u[i], &v[i]);
    u[i]--;
    v[i]--;
    if (u[i] > v[i])
      swap(u[i], v[i]);
    edg[u[i]].push_back(v[i]);
    edg[v[i]].push_back(u[i]);
    ans[u[i]][v[i]] = 0;
  }
  par[0] = 0;
  dep[0] = 0;
  dfs(0);
  top[0] = 0;
  dfs2(0);
  for (int i = 0; i < n; i++) {
    dif[i] = 0;
    bak[i] = 0;
  }
  scanf("%d\n", &k);
  while (k--) {
    int u, v;
    scanf("%d%d", &u, &v);
    u--;
    v--;
    while (true) {
      if (top[u] == top[v]) {
        if (dep[u] > dep[v])
          swap(u, v);
        dif[u]++;
        dif[v]--;
        break;
      }
      if (dep[top[u]] > dep[top[v]])
        swap(u, v);
      dif[top[v]]++;
      dif[v]--;
      bak[top[v]]++;
      v = par[top[v]];
    }
  }
  dfs3(0, 0);
  printf("%d", ans[u[0]][v[0]]);
  for (int i = 1; i < n - 1; i++)
    printf(" %d", ans[u[i]][v[i]]);
  printf("\n");
}