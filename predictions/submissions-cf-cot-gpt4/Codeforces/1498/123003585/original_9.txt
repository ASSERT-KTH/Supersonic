To optimize the given C/C++ program for running time and memory usage, we can make the following changes:

1. Use `std::unordered_map` instead of `std::map`: `std::unordered_map` is a hash table based container that stores key-value pairs in no particular order. It provides constant time complexity for search, insert, and delete operations which is faster than `std::map` which provides logarithmic time complexity.

2. Use `std::ios_base::sync_with_stdio(false)` and `std::cin.tie(NULL)`: These two lines ensures that C++ standard streams are untied from their corresponding C standard streams, which can speed up I/O operations.

3. Use `std::cin` and `std::cout` instead of `scanf` and `printf`: It is recommended to use C++ style I/O (cin/cout) instead of C style I/O (scanf/printf) in C++ programs.

4. Instead of traversing the entire map for every element in array, we can start from the end and break the loop as soon as we find a suitable weight. This approach reduces the number of iterations in the second loop.

5. Use `reserve()` function to avoid unnecessary memory reallocations.

Here is the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n_sets;
  cin >> n_sets;
  
  for (int set_number = 1; set_number <= n_sets; set_number++) {
    int n, W;
    cin >> n >> W;
    vector<int> a(n);
    for (int i = 0; i < n; i++)
      cin >> a[i];
    sort(a.begin(), a.end(), greater<int>());
    unordered_map<int, int> x;
    x.reserve(n);
    x[W] = 200000;
    
    for (int i : a) {
      int remain = W - i;
      int best_w = W;
      
      for (auto it = x.rbegin(); it != x.rend(); ++it) {
        if (it->first - i >= 0 && it->second != 0 && it->first - i < remain) {
          best_w = it->first;
          remain = it->first - i;
          break;
        }
      }
      
      x[best_w]--;
      if (!x[best_w])
        x.erase(best_w);
      x[remain]++;
    }
    
    cout << 200000 - x[W] << "\n";
  }
  
  return 0;
}
```
