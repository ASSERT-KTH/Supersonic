The given program has several parts that can be optimized for running time and memory usage.

1. The map x is used to keep track of the remaining spaces in the knapsacks. However, for each weight a[i] in the input, it iterates through the whole map to find the best knapsack that can accommodate it. This is an O(n^2) operation which is highly inefficient. Instead, we can use a multiset to keep track of the remaining spaces. A multiset in C++ is a type of associative container that stores elements in a non-descending order and allows duplicate keys. The advantage of multiset is that it maintains its elements in sorted order automatically after insertion/deletion. This can reduce the time complexity from O(n^2) to O(n log n).

2. The program reads the input using scanf and writes the output using printf. These are C-style I/O functions and are slower compared to their C++ counterparts cin and cout. However, if we use cin and cout directly, the I/O operations may still be the bottleneck of the program. To solve this, we can use the ios_base::sync_with_stdio(false) to untie the cin and cout from the printf and scanf, which will make them faster.

3. The program uses a variable-length array a to store the weights. Variable-length arrays are not a standard feature in C++. It is better to use a vector instead, which is more flexible and safer.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <set>
#include <vector>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n_sets;
  cin >> n_sets;

  for (int set_number = 1; set_number <= n_sets; set_number++) {
    int n, W;
    cin >> n >> W;
    vector<int> a(n);
    for (int i = 0; i < n; i++)
      cin >> a[i];
    sort(a.rbegin(), a.rend());
    multiset<int> x;
    x.insert(W);
    for (int i : a) {
      auto it = x.lower_bound(i);
      if (it != x.end()) {
        int remain = *it - i;
        x.erase(it);
        x.insert(remain);
      } else {
        x.insert(W - i);
      }
    }
    cout << W * n_sets - accumulate(x.begin(), x.end(), 0) << '\n';
  }
  return 0;
}
```
Please note that the above code assumes that the input is valid and does not contain any error. If the input may contain errors, you should add error checking code to handle it properly.