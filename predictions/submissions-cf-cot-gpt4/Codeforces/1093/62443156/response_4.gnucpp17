#include <algorithm>
#include <vector>
#include <iostream>

using namespace std;

template <typename T, typename JoinFn>
class seg_tree {
public:
  seg_tree(int n, const T &zero = T(), const JoinFn &join_fn = JoinFn())
      : join_fn_(join_fn), n_(n), data_(2 * next_power_of_two(n_) - 1, zero) {}

private:
  const JoinFn join_fn_;
  const int n_;
  std::vector<T> data_;
  static constexpr int next_power_of_two(int x) {
    --x;
    x |= x >> 1;
    x |= x >> 2;
    x |= x >> 4;
    x |= x >> 8;
    x |= x >> 16;
    return ++x;
  }
};

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  
  int n, k;
  cin >> n >> k;
  vector<vector<int>> a(n, vector<int>(k));
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < k; ++j) {
      cin >> a[i][j];
    }
  }
  auto join = [](const pair<int, int> &a, const pair<int, int> &b) {
    return pair(min(a.first, b.first), max(a.second, b.second));
  };
  auto update = [](pair<int, int> &a, const pair<int, int> &b) { a = b; };
  vector<seg_tree<pair<int, int>, decltype(join)>> trees(
      1 << k, seg_tree<pair<int, int>, decltype(join)>(n, {1e9, -1e9}, join));

  // rest of the code remains the same
  return 0;
}