#include <iostream>
#include <vector>
#include <map>
using namespace std;

struct MinMax {
    int min, max;
};

class SegTree {
public:
    SegTree(int n): n_(n), data_(2 * next_power_of_two(n_) - 1, {1e9, -1e9}) {}
    void update(int pos, const MinMax &val);
    MinMax query(int first, int last) const;
    // ... rest of the functions ...

private:
    int n_;
    vector<MinMax> data_;
    // ... rest of the members ...
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int n, k;
    cin >> n >> k;
    vector<vector<int>> a(n, vector<int>(k));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < k; ++j) {
            cin >> a[i][j];
        }
    }

    map<int, SegTree> trees;
    int q;
    cin >> q;
    while (q--) {
        int type;
        cin >> type;
        if (type == 1) {
            int i;
            cin >> i;
            --i;
            vector<int> b(k);
            for (int j = 0; j < k; ++j) {
                cin >> b[j];
            }
            for (int mask = 0; mask < (1 << k); ++mask) {
                if (trees.find(mask) != trees.end()) {
                    int val = 0;
                    for (int j = 0; j < k; ++j) {
                        if (mask & (1 << j)) {
                            val += b[j];
                        } else {
                            val -= b[j];
                        }
                    }
                    trees[mask].update(i, {val, val});
                }
            }
        } else {
            int l, r;
            cin >> l >> r;
            --l, --r;
            int ans = -1e9;
            for (int mask = 0; mask < (1 << k); ++mask) {
                if (trees.find(mask) == trees.end()) {
                    for (int i = 0; i < n; ++i) {
                        int val = 0;
                        for (int j = 0; j < k; ++j) {
                            if (mask & (1 << j)) {
                                val += a[i][j];
                            } else {
                                val -= a[i][j];
                            }
                        }
                        trees[mask].update(i, {val, val});
                    }
                }
                auto a = trees[mask].query(l, r);
                ans = max(ans, a.max - a.min);
            }
            cout << ans << '\n';
        }
    }
    return 0;
}