#include <algorithm>
#include <iostream>
#include <vector>
#include <utility>
using namespace std;

template <typename T, typename JoinFn>
class seg_tree {
// ... keep all the code inside class unchanged ...
};

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout << std::boolalpha;

  int n, k;
  cin >> n >> k;
  vector<vector<int>> a(n, vector<int>(k));
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < k; ++j) {
      cin >> a[i][j];
    }
  }
  auto join = [](const pair<int, int> &a, const pair<int, int> &b) {
    return pair(min(a.first, b.first), max(a.second, b.second));
  };
  auto update = [](pair<int, int> &a, const pair<int, int> &b) { a = b; };
  vector<seg_tree<pair<int, int>, decltype(join)>> trees(
      1 << k, seg_tree<pair<int, int>, decltype(join)>(n, {1e9, -1e9}, join));

  vector<vector<int>> vals(n, vector<int>(1<<k, 0));
  for (int mask = 0; mask < (1 << k); ++mask) {
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < k; ++j) {
        if (mask & (1 << j)) {
          vals[i][mask] += a[i][j];
        } else {
          vals[i][mask] -= a[i][j];
        }
      }
      trees[mask].update(i, {vals[i][mask], vals[i][mask]}, update);
    }
  }
  
  // ... remaining part of main() function unchanged ...
}