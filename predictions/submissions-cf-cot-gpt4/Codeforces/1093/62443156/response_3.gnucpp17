#include <vector>
#include <iostream>
#include <chrono>
#include <random>
#include <utility>
using namespace std;


template <typename T, typename JoinFn> class seg_tree {
public:
  seg_tree(size_t n, const T &zero = T(), const JoinFn &join_fn = JoinFn())
      : join_fn_(join_fn), n_(n), data_(2 * next_power_of_two(n_) - 1, zero) {}
  seg_tree(const std::vector<T> &data, const JoinFn &join_fn = JoinFn())
      : join_fn_(join_fn), n_(data.size()), data_(2 * next_power_of_two(n_) - 1) {
    init(0, 0, n_ - 1, data);
  }
  size_t size() const { return n_; }

  template <typename UpdateFn>
  void update(size_t pos, const T &val, UpdateFn update_fn) {
    update(0, 0, n_ - 1, pos, val, update_fn);
  }

  T query(size_t pos) const { return query(pos, pos); }
  T query(size_t first, size_t last) const {
    return query(0, 0, n_ - 1, first, last);
  }

private:
  const JoinFn join_fn_;
  const size_t n_;
  std::vector<T> data_;

  static constexpr size_t next_power_of_two(size_t x) {
    --x;
    x |= x >> 1;
    x |= x >> 2;
    x |= x >> 4;
    x |= x >> 8;
    x |= x >> 16;
    return ++x;
  }

  void init(size_t node, size_t t_first, size_t t_last, const std::vector<T> &data) {
    if (t_first == t_last) {
      data_[node] = data[t_first];
    } else {
      size_t t_mid = (t_first + t_last) >> 1;
      init(2 * node + 1, t_first, t_mid, data);
      init(2 * node + 2, t_mid + 1, t_last, data);
      data_[node] = join_fn_(data_[2 * node + 1], data_[2 * node + 2]);
    }
  }

  template <typename UpdateFn>
  void update(size_t node, size_t t_first, size_t t_last, size_t pos, const T &val,
              UpdateFn update_fn) {
    if (t_first == t_last) {
      update_fn(data_[node], val);
    } else {
      size_t t_mid = (t_first + t_last) >> 1;
      if (pos <= t_mid) {
        update(2 * node + 1, t_first, t_mid, pos, val, update_fn);
      } else {
        update(2 * node + 2, t_mid + 1, t_last, pos, val, update_fn);
      }
      data_[node] = join_fn_(data_[2 * node + 1], data_[2 * node + 2]);
    }
  }

  T query(size_t node, size_t t_first, size_t t_last, size_t first, size_t last) const {
    if (first <= t_first && t_last <= last) {
      return data_[node];
    }
    size_t t_mid = (t_first + t_last) >> 1;
    if (last <= t_mid) {
      return query(2 * node + 1, t_first, t_mid, first, last);
    }
    if (t_mid < first) {
      return query(2 * node + 2, t_mid + 1, t_last, first, last);
    }
    return join_fn_(query(2 * node + 1, t_first, t_mid, first, last),
                    query(2 * node + 2, t_mid + 1, t_last, first, last));
  }
};

int main() {
  std::mt19937 rng(std::chrono::high_resolution_clock::now().time_since_epoch().count());
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout << std::boolalpha;

  size_t n, k;
  cin >> n >> k;

  vector<vector<int>> a(n, vector<int>(k));

  for (auto &row : a) {
    for (auto &cell : row) {
      cin >> cell;
    }
  }

  auto join = [](const pair<int, int> &a, const pair<int, int> &b) {
    return pair(min(a.first, b.first), max(a.second, b.second));
  };
  auto update = [](pair<int, int> &a, const pair<int, int> &b) { a = b; };

  vector<seg_tree<pair<int, int>, decltype(join)>> trees;
  trees.reserve(1 << k);

  for (size_t mask = 0; mask < (1 << k); ++mask) {
    seg_tree<pair<int, int>, decltype(join)> tree(n, {1e9, -1e9}, join);
    for (size_t i = 0; i < n; ++i) {
      int val = 0;
      for (size_t j = 0; j < k; ++j) {
        if (mask & (1 << j)) {
          val += a[i][j];
        } else {
          val -= a[i][j];
        }
      }
      tree.update(i, {val, val}, update);
    }
    trees.emplace_back(tree);
  }

  size_t q;
  cin >> q;

  while (q--) {
    int type;
    cin >> type;
    if (type == 1) {
      size_t i;
      cin >> i;
      --i;
      vector<int> b(k);
      for (auto &value : b) {
        cin >> value;
      }
      for (size_t mask = 0; mask < (1 << k); ++mask) {
        int val = 0;
        for (size_t j = 0; j < k; ++j) {
          if (mask & (1 << j)) {
            val += b[j];
          } else {
            val -= b[j];
          }
        }
        trees[mask].update(i, {val, val}, update);
      }
    } else {
      size_t l, r;
      cin >> l >> r;
      --l, --r;
      int ans = -1e9;
      for (const auto &tree : trees) {
        auto a = tree.query(l, r);
        ans = max(ans, a.second - a.first);
      }
      cout << ans << '\n';
    }
  }

  return 0;
}