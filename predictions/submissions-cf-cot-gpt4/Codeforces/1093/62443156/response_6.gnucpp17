#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <cctype>
#include <chrono>
#include <cmath>
#include <cstdlib>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <optional>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <string_view>
#include <tuple>
#include <type_traits>
#include <utility>
#include <vector>
#include <memory>
using namespace std;

// ... rest of the program is the same until ...

int main() {
  std::mt19937 rng(
      std::chrono::high_resolution_clock::now().time_since_epoch().count());
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout << std::boolalpha;
  std::cerr << std::boolalpha;
  int n, k;
  cin >> n >> k;
  vector<vector<int>> a(n, vector<int>(k));
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < k; ++j) {
      cin >> a[i][j];
    }
  }
  auto join = [](const pair<int, int> &a, const pair<int, int> &b) {
    return pair(min(a.first, b.first), max(a.second, b.second));
  };
  auto update = [](pair<int, int> &a, const pair<int, int> &b) { a = b; };
  vector<std::unique_ptr<seg_tree<pair<int, int>, decltype(join)>>> trees;
  for (int mask = 0; mask < (1 << k); ++mask) {
    trees.push_back(std::make_unique<seg_tree<pair<int, int>, decltype(join)>>(n, {1e9, -1e9}, join));
    for (int i = 0; i < n; ++i) {
      int val = 0;
      for (int j = 0; j < k; ++j) {
        if (mask & (1 << j)) {
          val += a[i][j];
        } else {
          val -= a[i][j];
        }
      }
      trees[mask]->update(i, {val, val}, update);
    }
  }
  
  // ... rest of the program is the same, but with "->" used to access members of trees ...
}