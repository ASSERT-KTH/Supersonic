#include <iostream>
#include <vector>
#include <queue>
#include <string>
#include <sstream>
#include <iomanip>

using std::vector;
using std::queue;
using std::string;
using std::stringstream;
using std::cin;
using std::cout;

typedef long long ll;
typedef vector<int> vi;

class graphNode {
public:
  vi adj, wt;
  int a;
  graphNode() { a = 0; }
};

class graph {
public:
  int n;
  vector<graphNode> nodes;
  graph(int nodeNumber) {
    n = nodeNumber;
    nodes.resize(n + 1);
  }
  void addEdge(int a, int b, bool weighted = false, int weight = 0) {
    nodes[a].adj.push_back(b);
    nodes[b].adj.push_back(a);
    if (weighted) {
      nodes[a].wt.push_back(weight);
      nodes[b].wt.push_back(weight);
    }
  }
  ll findans(vector<int> &powr) {
    vector<bool> visited(n + 1, false);
    vi col(n + 1);
    vi grcol(3);
    grcol[1] = 1;
    ll res = 1;
    for (int c = 1; c <= n; ++c) {
      if (!visited[c]) {
        col[c] = 1;
        if (!bfs(c, col, visited, grcol)) {
          return 0;
        } else {
          res = (res * (powr[grcol[1]] + powr[grcol[2]])) % 998244353;
        }
        grcol[2] = 0;
        grcol[1] = 1;
      }
    }
    return res;
  }
  bool bfs(int p, vi &col, vector<bool> &visited, vi &grcol) {
    queue<int> q;
    visited[p] = true;
    q.push(p);
    while (!q.empty()) {
      int itr = q.front();
      q.pop();
      int chcol = (col[itr] == 2) ? 1 : 2;
      for (int i = 0; i < nodes[itr].adj.size(); ++i) {
        int k = nodes[itr].adj[i];
        if (col[k] == 0 || col[k] == chcol) {
          if (col[k] == 0) {
            col[k] = chcol;
            grcol[chcol]++;
          }
        } else
          return false;
        if (!visited[nodes[itr].adj[i]]) {
          visited[k] = true;
          q.push(k);
        }
      }
    }
    return true;
  }
};

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  vector<int> powr(3 * 100000);
  ll k = 1;
  for (int c = 0; c < 3 * 100000; ++c) {
    powr[c] = k;
    k = (k * 2) % 998244353;
  }
  int t;
  cin >> t;
  while(t--) {
    int n, m;
    cin >> n >> m;
    graph mygraph(n);
    for (int c = 0; c < m; ++c) {
      int a, b;
      cin >> a >> b;
      mygraph.addEdge(a, b);
    }
    cout << mygraph.findans(powr) << '\n';
  }
  return 0;
}