#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<string> vs;

#define pb push_back
#define sz(k) k.size()
#define mod 998244353
#define MAX 20000000

class graphNode {
public:
  vi adj;
  int a;
  graphNode() { a = 0; }
};

class graph {
public:
  int n;
  vector<graphNode> nodes;
  graph(int nodeNumber) {
    n = nodeNumber;
    nodes.resize(n + 1);
  }
  void addEdge(int a, int b) {
    nodes[a].adj.pb(b);
    nodes[b].adj.pb(a);
  }
  ll findans(vi &powr) {
    vector<bool> visited(n + 1, false);
    vi col(n + 1);
    vi grcol(3);
    grcol[1] = 1;
    ll res = 1;
    for (int c = 1; c < n + 1; c++) {
      if (!visited[c]) {
        col[c] = 1;
        if (!bfs(c, col, visited, grcol)) {
          return 0;
        } else {
          res = (res * (powr[grcol[1]] + powr[grcol[2]])) % mod;
        }
        grcol[2] = 0;
        grcol[1] = 1;
      }
    }
    return res;
  }
  bool bfs(int p, vi &col, vector<bool> &visited, vi &grcol) {
    queue<int> q;
    visited[p] = true;
    q.push(p);
    while (!q.empty()) {
      int itr = q.front();
      q.pop();
      int chcol = (col[itr] == 2) ? 1 : 2;
      int adj_size = sz(nodes[itr].adj);
      for (int i = 0; i < adj_size; i++) {
        int k = nodes[itr].adj[i];
        if (col[k] == 0 || col[k] == chcol) {
          if (col[k] == 0) {
            col[k] = chcol;
            grcol[chcol]++;
          }
        } else
          return false;
        if (!visited[k]) {
          visited[k] = true;
          q.push(k);
        }
      }
    }
    return true;
  }
};

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  vector<ll> powr(3 * 100000);
  ll k = 1;
  for (int c = 0; c < 3 * 100000; c++) {
    powr[c] = k;
    k = (k * 2) % mod;
  }
  ll o;
  cin >> o;
  while (o--) {
    int n, m;
    cin >> n >> m;
    graph mygraph(n);
    for (int c = 0; c < m; c++) {
      int a, b;
      cin >> a >> b;
      mygraph.addEdge(a, b);
    }
    cout << mygraph.findans(powr) << endl;
  }
  return 0;
}