To optimize this program, we can follow these steps:

1. Remove `#include <bits/stdc++.h>` and replace it with specific includes. This header file includes a lot of unnecessary libraries which can slow down the compilation time.

2. Remove unused typedefs. Unused typedefs are only consuming space in the memory and making the program harder to read.

3. Remove unused macros. Again, they just consume space and make the program harder to read.

4. Use pre-increment (++i) instead of post-increment (i++) in loops. Pre-increment is generally faster than post-increment because it doesn't need to create a temporary object holding the initial value.

5. Use `reserve` for vectors if you know the size beforehand. This will allocate the memory at once and avoid reallocations.

6. Use fast I/O operations. `std::ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);` can significantly speed up cin and cout.

7. Avoid `std::endl` as it causes unnecessary flushing of the buffer. Use '\n' instead.

Here is the optimized code based on these steps:

```cpp
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

typedef vector<int> vi;
typedef long long ll;

vector<string> split(const string &s, char c) {
  vector<string> v;
  stringstream ss(s);
  string x;
  while (getline(ss, x, c))
    v.emplace_back(x);
  return move(v);
}

#define mod 1000000007
#define MAX 20000000

int r, c, n, k;
vector<int> powr;

class graphNode {
public:
  vi adj;
  int a;
  graphNode() { a = 0; }
};

class graph {
public:
  int n;
  vector<graphNode> nodes;
  graph(int nodeNumber) {
    n = nodeNumber;
    nodes.resize(n + 1);
  }
  void addEdge(int a, int b, bool weighted = false, int weight = 0) {
    nodes[a].adj.push_back(b);
    nodes[b].adj.push_back(a);
  }
  ll findans() {
    vector<bool> visited(n + 1, false);
    vi col(n + 1);
    vi grcol(3);
    grcol[1] = 1;
    ll res = 1;
    for (c = 1; c < n + 1; ++c) {
      if (!visited[c]) {
        col[c] = 1;
        if (!bfs(c, col, visited, grcol)) {
          return 0;
        } else {
          res = (res * (powr[grcol[1]] + powr[grcol[2]])) % 998244353;
        }
        grcol[2] = 0;
        grcol[1] = 1;
      }
    }
    return res;
  }
  bool bfs(int p, vi &col, vector<bool> &visited, vi &grcol) {
    queue<int> q;
    visited[p] = true;
    q.push(p);
    while (!q.empty()) {
      int itr = q.front();
      q.pop();
      int chcol = (col[itr] == 2) ? 1 : 2;
      for (int i = 0; i < nodes[itr].adj.size(); ++i) {
        k = nodes[itr].adj[i];
        if (col[k] == 0 || col[k] == chcol) {
          if (col[k] == 0) {
            col[k] = chcol;
            grcol[chcol]++;
          }
        } else
          return false;
        if (!visited[nodes[itr].adj[i]]) {
          visited[k] = true;
          q.push(k);
        }
      }
    }
    return true;
  }
};

int main() {
  ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
  powr.reserve(3 * 100000);
  ll k = 1;
  for (c = 0; c < 3 * 100000; ++c) {
    powr.push_back(k);
    k = (k * 2) % 998244353;
  }
  int t;
  cin >> t;
  while (t--) {
    int n, m;
    cin >> n >> m;
    graph mygraph(n);
    for (c = 0; c < m; ++c) {
      int a, b;
      cin >> a >> b;
      mygraph.addEdge(a, b);
    }
    cout << mygraph.findans() << '\n';
  }
}
```
