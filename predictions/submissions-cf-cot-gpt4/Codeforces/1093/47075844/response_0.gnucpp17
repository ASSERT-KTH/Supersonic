#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;

class graphNode {
public:
  vi adj;
  int a = 0;
};

class graph {
public:
  int n;
  vector<graphNode> nodes;
  graph(int nodeNumber) : n(nodeNumber), nodes(nodeNumber) {}

  void addEdge(int a, int b) {
    nodes[a].adj.push_back(b);
    nodes[b].adj.push_back(a);
  }

  ll findans(vi& powr) {
    vi visited(n, 0);
    vi col(n, 0);
    vi grcol(3, 0);
    grcol[1] = 1;
    ll res = 1;
    for (int c = 0; c < n; c++) {
      if (!visited[c]) {
        col[c] = 1;
        if (!bfs(c, col, visited, grcol, powr)) {
          return 0;
        } else {
          res = (res * (powr[grcol[1]] + powr[grcol[2]])) % 998244353;
        }
        grcol[2] = 0;
        grcol[1] = 1;
      }
    }
    return res;
  }

  bool bfs(int p, vi &col, vi &visited, vi &grcol, vi& powr) {
    queue<int> q;
    visited[p] = 1;
    q.push(p);
    while (!q.empty()) {
      int itr = q.front();
      q.pop();
      int chcol = (col[itr] == 2) ? 1 : 2;
      for (auto k : nodes[itr].adj) {
        if (col[k] == 0 || col[k] == chcol) {
          if (col[k] == 0) {
            col[k] = chcol;
            grcol[chcol]++;
          }
        } else
          return false;
        if (!visited[k]) {
          visited[k] = 1;
          q.push(k);
        }
      }
    }
    return true;
  }
};

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;
  vi powr(3 * 100000);
  ll k = 1;
  for (int c = 0; c < 3 * 100000; c++) {
    powr[c] = k;
    k = (k * 2) % 998244353;
  }
  while(t--) {
    int n, m;
    cin >> n >> m;
    graph mygraph(n);
    for (int c = 0; c < m; c++) {
      int u, v;
      cin >> u >> v;
      mygraph.addEdge(u, v);
    }
    cout << mygraph.findans(powr) << '\n';
  }
}