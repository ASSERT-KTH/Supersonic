Step 1: Avoid `#include <bits/stdc++.h>` because it includes a lot of unnecessary headers which increases the compilation time. Instead, include only the necessary headers.

Step 2: Remove the `dragonforce()` macros. These are mostly used for competitive programming to speed up cin and cout operations, but they can cause problems in real-world applications. 

Step 3: Some of the macros (such as `test()`, `input(vec)`, `output(vec, x)`, `sz(k)`, `ln(s)`, `pb`, `mp`, `all(x)`, `finc(i, x, y)`, `fdec(i, x, y)`, `fincp(itr, x)`, `fdecp(itr, x)`, `PI`, `E`, `by(x)`, `grsort()`, `F`, `S`, `mem(a, x)`, `mnv(v)`, `mxv(v)`, `pr(x)`) are not used in the program and removing them can reduce the compile-time. 

Step 4: In the class `graph`, `addEdge` method, there is no point in storing the weights if it's not a weighted graph. So, checking `weighted` before pushing the weight can save some memory.

Step 5: In `findans()` function, instead of creating `col`, `visited`, `grcol` vectors every time, consider making them member variables of the graph class and just resetting their values in `findans()`.

Step 6: Use prefix increment (++i) instead of postfix (i++) in loops as prefix increment is faster, it can avoid unnecessary temporary object creation.

Here is the optimized program:
```cpp
#include <iostream>
#include <vector>
#include <queue>

using namespace std;
typedef long long ll;

class graphNode {
public:
  vector<int> adj;
  graphNode() {}
};

class graph {
public:
  int n;
  vector<graphNode> nodes;
  vector<bool> visited;
  vector<int> col;
  vector<int> grcol;
  vector<ll> powr;
  int k;

  graph(int nodeNumber) {
    n = nodeNumber;
    nodes.resize(n + 1);
    visited.resize(n + 1, false);
    col.resize(n + 1);
    grcol.resize(3);

    powr.resize(3 * 100000);
    ll k = 1;
    for (int c = 0; c < 3 * 100000; ++c) {
      powr[c] = k;
      k = (k * 2) % 998244353;
    }
  }

  void addEdge(int a, int b) {
    nodes[a].adj.push_back(b);
    nodes[b].adj.push_back(a);
  }

  ll findans() {
    fill(visited.begin(), visited.end(), false);
    fill(col.begin(), col.end(), 0);
    fill(grcol.begin(), grcol.end(), 0);
    ll res = 1;
    for (int c = 1; c < n + 1; ++c) {
      if (!visited[c]) {
        col[c] = 1;
        if (!bfs(c)) {
          return 0;
        } else {
          res = (res * (powr[grcol[1]] + powr[grcol[2]])) % 998244353;
        }
        grcol[2] = 0;
        grcol[1] = 1;
      }
    }
    return res;
  }

  bool bfs(int p) {
    queue<int> q;
    visited[p] = true;
    q.push(p);
    while (!q.empty()) {
      int itr = q.front();
      q.pop();
      int chcol = (col[itr] == 2) ? 1 : 2;
      for (int i = 0; i < nodes[itr].adj.size(); ++i) {
        k = nodes[itr].adj[i];
        if (col[k] == 0 || col[k] == chcol) {
          if (col[k] == 0) {
            col[k] = chcol;
            grcol[chcol]++;
          }
        } else
          return false;
        if (!visited[nodes[itr].adj[i]]) {
          visited[k] = true;
          q.push(k);
        }
      }
    }
    return true;
  }
};

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;

  while (t--) {
    int n, m;
    cin >> n >> m;
    graph mygraph(n);
    for (int c = 0; c < m; ++c) {
      int a, b;
      cin >> a >> b;
      mygraph.addEdge(a, b);
    }
    cout << mygraph.findans() << endl;
  }
}
```
Please note that the code provided is optimized as per the provided code snippet, and it assumes that the provided code is correct. If there are errors in the original code, those errors might still persist.