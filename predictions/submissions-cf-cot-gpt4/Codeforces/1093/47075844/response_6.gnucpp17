#include <iostream>
#include <sstream>
#include <vector>
#include <queue>
#include <iomanip>
#include <string.h>

using pii = std::pair<int, int>;
using vi = std::vector<int>;
using ll = long long;
using ull = unsigned long long;
using vs = std::vector<std::string>;
const ll mod = 1000000007;
const ll MAX = 20000000;
vi powr;
vi split(const std::string &s, char c) {
  vi v;
  std::stringstream ss(s);
  std::string x;
  while (std::getline(ss, x, c))
    v.push_back(std::stoi(x));
  return v;
}
class graphNode {
public:
  vi adj;
  int a;
  graphNode() { a = 0; }
};
class graph {
public:
  int n;
  std::vector<graphNode> nodes;
  graph(int nodeNumber) {
    n = nodeNumber;
    nodes.reserve(n + 1);
  }
  void addEdge(int a, int b) {
    nodes[a].adj.push_back(b);
    nodes[b].adj.push_back(a);
  }
  ll findans() {
    std::vector<bool> visited(n + 1, false);
    vi col(n + 1);
    vi grcol(3);
    grcol[1] = 1;
    ll res = 1;
    for (int c = 1; c < n + 1; c++) {
      if (!visited[c]) {
        col[c] = 1;
        if (!bfs(c, col, visited, grcol)) {
          return 0;
        } else {
          res = (res * (powr[grcol[1]] + powr[grcol[2]])) % 998244353;
        }
        grcol[2] = 0;
        grcol[1] = 1;
      }
    }
    return res;
  }
  bool bfs(int p, vi &col, std::vector<bool> &visited, vi &grcol) {
    std::queue<int> q;
    visited[p] = true;
    q.push(p);
    while (!q.empty()) {
      int itr = q.front();
      q.pop();
      int chcol = (col[itr] == 2) ? 1 : 2;
      for (int i = 0; i < nodes[itr].adj.size(); i++) {
        int k = nodes[itr].adj[i];
        if (col[k] == 0 || col[k] == chcol) {
          if (col[k] == 0) {
            col[k] = chcol;
            grcol[chcol]++;
          }
        } else
          return false;
        if (!visited[nodes[itr].adj[i]]) {
          visited[k] = true;
          q.push(k);
        }
      }
    }
    return true;
  }
};
int main() {
  std::ios::sync_with_stdio(0);
  std::cin.tie(0);
  powr.reserve(3 * 100000);
  ll k = 1;
  for (int c = 0; c < 3 * 100000; c++) {
    powr[c] = k;
    k = (k * 2) % 998244353;
  }
  int o;
  std::cin >> o;
  while (o--) {
    int n, m;
    std::cin >> n >> m;
    graph mygraph(n);
    for (int c = 0; c < m; c++) {
      int a, b;
      std::cin >> a >> b;
      mygraph.addEdge(a, b);
    }
    std::cout << mygraph.findans() << '\n';
  }
}