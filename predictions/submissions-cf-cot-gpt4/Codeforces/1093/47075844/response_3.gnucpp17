#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <queue>
#include <iomanip>

using std::cin;
using std::cout;
using std::endl;
using std::vector;
using std::string;
using std::stringstream;
using std::queue;
using std::fixed;
using std::setprecision;
using std::pair;
using std::make_pair;
using std::move;

typedef pair<int, int> pi;
typedef vector<int> vi;
typedef long long ll;
typedef vector<string> vs;

vector<string> split(const string &s, char c) {
  vector<string> v;
  stringstream ss(s);
  string x;
  while (getline(ss, x, c))
    v.push_back(move(x));
  return move(v);
}

template <typename T, typename... Args> inline string arrStr(T arr, int n) {
  stringstream s;
  s << "[";
  for (int i = 0; i < n - 1; ++i)
    s << arr[i] << ",";
  s << arr[n - 1] << "]";
  return move(s.str());
}

#define debug(x) { cerr << #x << " = " << x << endl; }
#define sz(k) (k.size())
#define ln(s) (s.length())
#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define PI (acos(-1.0))
#define E 2.71828182845904523536
#define F first
#define S second
#define mem(a, x) memset(a, x, sizeof(a))
#define mnv(v) *min_element(v.begin(), v.end())
#define mxv(v) *max_element(v.begin(), v.end())
#define pr(x) cout << fixed << setprecision(x);
#define dragonforce() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); cerr.tie(NULL);

template <class t = int> t get() {
  t a;
  cin >> a;
  return a;
}

class graphNode {
public:
  vi adj, wt;
  int a;
  graphNode() { a = 0; }
};

class graph {
public:
  int n;
  vector<graphNode> nodes;
  graph(int nodeNumber) {
    n = nodeNumber;
    nodes.resize(n + 1);
  }
  void addEdge(int a, int b, bool weighted = false, int weight = 0) {
    nodes[a].adj.pb(b);
    nodes[b].adj.pb(a);
    if (weighted) {
      nodes[a].wt.pb(weight);
      nodes[b].wt.pb(weight);
    }
  }
  ll findans(vector<int>& powr) {
    vector<bool> visited(n + 1, false);
    vi col(n + 1);
    vi grcol(3);
    grcol[1] = 1;
    ll res = 1;
    for (int c = 1; c < n + 1; ++c) {
      if (!visited[c]) {
        col[c] = 1;
        if (!bfs(c, col, visited, grcol, powr)) {
          return 0;
        } else {
          res = (res * (powr[grcol[1]] + powr[grcol[2]])) % 998244353;
        }
        grcol[2] = 0;
        grcol[1] = 1;
      }
    }
    return res;
  }
  bool bfs(int p, vi &col, vector<bool> &visited, vi &grcol, vector<int>& powr) {
    queue<int> q;
    visited[p] = true;
    q.push(p);
    while (!q.empty()) {
      int itr = q.front();
      q.pop();
      int chcol = (col[itr] == 2) ? 1 : 2;
      for (int i = 0; i < sz(nodes[itr].adj); ++i) {
        int k = nodes[itr].adj[i];
        if (col[k] == 0 || col[k] == chcol) {
          if (col[k] == 0) {
            col[k] = chcol;
            grcol[chcol]++;
          }
        } else
          return false;
        if (!visited[nodes[itr].adj[i]]) {
          visited[k] = true;
          q.push(k);
        }
      }
    }
    return true;
  }
};

int main() {
  dragonforce();
  vector<int> powr(3 * 100000);
  ll k = 1;
  for (int c = 0; c < 3 * 100000; ++c) {
    powr[c] = k;
    k = (k * 2) % 998244353;
  }
  ll o;
  cin >> o;
  while (o--) {
    int n, m;
    cin >> n >> m;
    graph mygraph(n);
    for (int c = 0; c < m; ++c) {
      mygraph.addEdge(get(), get());
    }
    cout << mygraph.findans(powr) << endl;
  }
}