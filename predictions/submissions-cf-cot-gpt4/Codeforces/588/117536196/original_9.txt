This C++ code is already quite optimized. However, there are a couple of small improvements we can make.

1. The `#include <bits/stdc++.h>` is actually a quite heavy header file which includes a lot of unnecessary stuff that slows down the compilation process. Instead, it's better to include only the necessary header files that we need. In this case, we only need `iostream`.

2. `using namespace std;` is generally considered bad practice because it can lead to naming conflicts. It's better to use `std::` before standard library functions and classes when necessary.

3. The types of `a`, `p`, and `m` can be changed to `int`. This will not affect the memory usage because `short` and `int` both take up the same amount of memory space in most of the modern machines, and `int` could possibly lead to faster computation because it is the native word size of CPUs.

4. We can directly return `sum` instead of printing it and then returning 0. This will have a negligible effect on the running time, but it's slightly more concise and it's a good practice to directly return the result if possible.

Here is the optimized code:

```cpp
#include <iostream>

int main() {
  int n;
  std::cin >> n;
  int a, p, m = 101;
  long int sum = 0;
  while (n--) {
    std::cin >> a >> p;
    m = m > p ? p : m;
    sum += a * m;
  }
  return sum;
}
```

Note: This code will not print `sum` to the console. If you want to print `sum`, you can add `std::cout << sum;` before `return sum;`.