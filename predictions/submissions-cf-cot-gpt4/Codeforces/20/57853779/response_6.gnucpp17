#include <bits/stdc++.h>
using namespace std;
#define int long long
const int INF = 1e18;
const int maxn = 100005;
struct edge {
  int a, b, w;
};
int32_t main() {
  int n, m;
  cin >> n >> m;
  if (m == 0) {
    cout << "-1" << endl;
    return 0;
  }
  vector<edge> edges(m);
  for (int i = 0; i < m; i++) {
    cin >> edges[i].a >> edges[i].b >> edges[i].w;
  }
  sort(edges.begin(), edges.end(), [](const edge &e1, const edge &e2) {
    return e1.a < e2.a;
  });
  vector<int> adj(n+1);
  for (int i = 0; i < m; i++) {
    adj[edges[i].a]++;
  }
  int x = 1;
  vector<bool> processed(n+1, false);
  vector<int> distance(n+1, INF);
  vector<int> p(n+1, -1);
  distance[x] = 0;
  using pii = pair<int, int>;
  priority_queue<pii> q;
  q.push({0, x});
  while (!q.empty()) {
    int a = q.top().second;
    q.pop();
    if (processed[a])
      continue;
    processed[a] = true;
    for (int i = adj[a-1]; i < adj[a]; i++) {
      int b = edges[i].b, w = edges[i].w;
      if (distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        p[b] = a;
        if (!processed[b]) {
          q.push({-distance[b], b});
        }
      }
    }
  }
  if (p[n] == -1) {
    cout << "-1" << endl;
    return 0;
  }
  deque<int> path;
  for (int v = n; v != x; v = p[v]) {
    path.push_front(v);
  }
  path.push_front(x);
  for (auto i : path)
    cout << i << ' ';
  cout << endl;
}