The given C++ program is a typical implementation of the Dijkstra's algorithm for finding the shortest path in a graph. Here are some ways we can optimize it:

1. The adjacency list is currently being stored as an array of vectors of pairs. This is not the most efficient way to store a graph. It would be more efficient to store it as a list of edges, and sort this list by the starting node of each edge.

2. The program currently pushes each node into the priority queue every time its shortest path estimate is updated. It would be more efficient to use a decrease-key operation instead, which would avoid having duplicate entries in the priority queue.

3. The distance and processed vectors are currently initialized with a size of maxn. This is wasteful if the actual number of nodes is much smaller than maxn. It would be more efficient to initialize these vectors with the actual number of nodes after reading the input.

4. The program currently checks whether a node has been processed after removing it from the priority queue. It would be more efficient to do this check before inserting a node into the priority queue, which would avoid the overhead of removing and re-inserting nodes.

5. The program currently uses a vector to store the shortest path. It would be more efficient to use a deque instead, which has constant-time insertion at both ends.

Here is the optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define int long long
const int INF = 1e18;
const int maxn = 100005;
struct edge {
  int a, b, w;
};
int32_t main() {
  int n, m;
  cin >> n >> m;
  if (m == 0) {
    cout << "-1" << endl;
    return 0;
  }
  vector<edge> edges(m);
  for (int i = 0; i < m; i++) {
    cin >> edges[i].a >> edges[i].b >> edges[i].w;
  }
  sort(edges.begin(), edges.end(), [](const edge &e1, const edge &e2) {
    return e1.a < e2.a;
  });
  vector<int> adj(n+1);
  for (int i = 0; i < m; i++) {
    adj[edges[i].a]++;
  }
  int x = 1;
  vector<bool> processed(n+1, false);
  vector<int> distance(n+1, INF);
  vector<int> p(n+1, -1);
  distance[x] = 0;
  using pii = pair<int, int>;
  priority_queue<pii> q;
  q.push({0, x});
  while (!q.empty()) {
    int a = q.top().second;
    q.pop();
    if (processed[a])
      continue;
    processed[a] = true;
    for (int i = adj[a-1]; i < adj[a]; i++) {
      int b = edges[i].b, w = edges[i].w;
      if (distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        p[b] = a;
        if (!processed[b]) {
          q.push({-distance[b], b});
        }
      }
    }
  }
  if (p[n] == -1) {
    cout << "-1" << endl;
    return 0;
  }
  deque<int> path;
  for (int v = n; v != x; v = p[v]) {
    path.push_front(v);
  }
  path.push_front(x);
  for (auto i : path)
    cout << i << ' ';
  cout << endl;
}
```
Please note that the above solution assumes that the nodes are 1-indexed. If the nodes are 0-indexed, the adj vector should be constructed differently.