To optimize this C/C++ program, you can take several steps including:

1. Instead of using `#include <bits/stdc++.h>`, only include the necessary libraries. This can reduce the compilation time.
2. Use `ios_base::sync_with_stdio(false); cin.tie(NULL);` to speed up cin and cout operations.
3. Use references to avoid copying data in the for-each loop where you process the adjacency list.
4. Instead of using `push` and `pop` operations for priority_queue, use `emplace` which is more efficient as it constructs the element in place and doesn't require a copy.
5. Avoid using `vector<bool>` as it is a bitset and not a container of bools, which may lead to slower performance due to bit manipulation it does.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

#define int long long
const int INF = 1e18;
const int maxn = 100005;

int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, m;
  cin >> n >> m;
  if (m == 0) {
    cout << "-1\n";
    return 0;
  }
  vector<pair<int, int>> adj[maxn];
  for (int i = 0; i < m; i++) {
    int a, b, w;
    cin >> a >> b >> w;
    adj[a].emplace_back(b, w);
    adj[b].emplace_back(a, w);
  }
  int x = 1;
  vector<char> processed(maxn, false);
  vector<int> distance(maxn, INF);
  vector<int> p(maxn, -1);
  distance[x] = 0;
  using pii = pair<int, int>;
  priority_queue<pii> q;
  q.emplace(0, x);
  while (!q.empty()) {
    int a = q.top().second;
    q.pop();
    if (processed[a])
      continue;
    processed[a] = true;
    for (auto &u : adj[a]) {
      int b = u.first, w = u.second;
      if (distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        p[b] = a;
        q.emplace(-distance[b], b);
      }
    }
  }
  if (p[n] == -1) {
    cout << "-1\n";
    return 0;
  }
  vector<int> path;
  for (int v = n; v != x; v = p[v]) {
    path.push_back(v);
  }
  path.push_back(x);
  reverse(path.begin(), path.end());
  for (auto i : path)
    cout << i << ' ';
  cout << "\n";
}
```

This program should run faster and use less memory than the original one.