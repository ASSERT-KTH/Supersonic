Here are some potential optimizations for this code:

1. **Avoid preprocessor macros:** In C++, using `#define` for constants is not a good practice, because it does not respect scope and type. We can replace it with `const` or `constexpr` which are safer.

2. **Avoid using `bits/stdc++.h` header:** This header includes almost all standard library headers which increases compilation time. It's better to include only those headers which you really need for your program.

3. **Avoid using `using namespace std`:** This can cause name clashes, which can lead to bug-prone code. It's better to use `std::` prefix when using standard library functions and classes.

4. **Use `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)`:** These lines will make your program slightly faster by decoupling `cin` and `cout` and not flushing `cout` buffer every time before `cin` requests input.

5. **Avoid creating unnecessary temporary variables:** In the for loop where we are iterating over the adjacency list, we are creating unnecessary temporary pairs. We can use const reference to avoid this.

Here's the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

constexpr int INF = 1e18;
constexpr int maxn = 100005;

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  
  int n, m;
  std::cin >> n >> m;
  
  if (m == 0) {
    std::cout << "-1\n";
    return 0;
  }
  
  std::vector<std::pair<int, int>> adj[maxn];
  
  for (int i = 0; i < m; i++) {
    int a, b, w;
    std::cin >> a >> b >> w;
    adj[a].push_back({b, w});
    adj[b].push_back({a, w});
  }
  
  int x = 1;
  std::vector<bool> processed(maxn, false);
  std::vector<int> distance(maxn, INF);
  std::vector<int> p(maxn, -1);
  distance[x] = 0;
  
  using pii = std::pair<int, int>;
  std::priority_queue<pii> q;
  q.push({0, x});
  
  while (!q.empty()) {
    int a = q.top().second;
    q.pop();
    
    if (processed[a])
      continue;
      
    processed[a] = true;
    
    for (const auto& u : adj[a]) {
      int b = u.first, w = u.second;
      
      if (distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        p[b] = a;
        q.push({-distance[b], b});
      }
    }
  }
  
  if (p[n] == -1) {
    std::cout << "-1\n";
    return 0;
  }
  
  std::vector<int> path;
  
  for (int v = n; v != x; v = p[v]) {
    path.push_back(v);
  }
  
  path.push_back(x);
  std::reverse(path.begin(), path.end());
  
  for (auto i : path)
    std::cout << i << ' ';
  
  std::cout << '\n';

  return 0;
}
```
