The given program seems to implement Dijkstra's algorithm for finding the shortest path in a graph with non-negative weights. Here are some possible optimization steps:

1. Reduce use of long long int to int.
2. Use scanf/printf instead of cin/cout for faster I/O.
3. Avoid using 'bits/stdc++.h' as it includes more files than required. Instead, include only those header files which are used in the program.
4. Instead of using a pair for storing edges, use an array of structure.
5. Use array instead of vector for storing graph edges, distances, and processed vertices.

Here is the optimized version of the given program:

```cpp
#include <cstdio>
#include <queue>
#include <vector>
#include <algorithm>

using namespace std;

const int INF = 1e9;
const int maxn = 100005;

struct Edge {
    int v, w;
};

vector<Edge> adj[maxn];
bool processed[maxn];
int distance[maxn];
int p[maxn];

int main() {
    int n, m;
    scanf("%d %d", &n, &m);
    if (m == 0) {
        printf("-1\n");
        return 0;
    }
    for (int i = 0; i < m; i++) {
        int a, b, w;
        scanf("%d %d %d", &a, &b, &w);
        adj[a].push_back({b, w});
        adj[b].push_back({a, w});
    }
    int x = 1;
    fill(processed, processed + maxn, false);
    fill(distance, distance + maxn, INF);
    fill(p, p + maxn, -1);
    distance[x] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;
    q.push({0, x});
    while (!q.empty()) {
        int a = q.top().second;
        q.pop();
        if (processed[a])
            continue;
        processed[a] = true;
        for (auto u : adj[a]) {
            int b = u.v, w = u.w;
            if (distance[a] + w < distance[b]) {
                distance[b] = distance[a] + w;
                p[b] = a;
                q.push({distance[b], b});
            }
        }
    }
    if (p[n] == -1) {
        printf("-1\n");
        return 0;
    }
    vector<int> path;
    for (int v = n; v != x; v = p[v]) {
        path.push_back(v);
    }
    path.push_back(x);
    reverse(path.begin(), path.end());
    for (auto i : path)
        printf("%d ", i);
    printf("\n");

    return 0;
}
```

Please note that `scanf/printf` are used instead of `cin/cout` for faster I/O, and `array` is used instead of `vector` to store graph edges, distances, and processed vertices. Also, `queue` is used with `greater` comparator for min heap.