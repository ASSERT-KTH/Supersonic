#include <bits/stdc++.h>
#define int long long

const int INF = 1e18;
const int maxn = 100005;

int32_t main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  int n, m;
  std::cin >> n >> m;
  if (m == 0) {
    std::cout << "-1\n";
    return 0;
  }
  std::vector<std::pair<int, int>> adj[maxn];
  for (int i = 0; i < m; ++i) {
    int a, b, w;
    std::cin >> a >> b >> w;
    adj[a].emplace_back(b, w);
    adj[b].emplace_back(a, w);
  }
  int x = 1;
  std::vector<bool> processed(maxn, false);
  std::vector<int> distance(maxn, INF);
  std::vector<int> p(maxn, -1);
  distance[x] = 0;
  using pii = std::pair<int, int>;
  std::priority_queue<pii> q;
  q.push({0, x});
  while (!q.empty()) {
    int a = q.top().second;
    q.pop();
    if (processed[a])
      continue;
    processed[a] = true;
    for (const std::pair<int, int>& u : adj[a]) {
      int b = u.first, w = u.second;
      if (distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        p[b] = a;
        q.push({-distance[b], b});
      }
    }
  }
  if (p[n] == -1) {
    std::cout << "-1\n";
    return 0;
  }
  std::vector<int> path;
  path.reserve(maxn);
  for (int v = n; v != x; v = p[v]) {
    path.push_back(v);
  }
  path.push_back(x);
  reverse(path.begin(), path.end());
  for (int i : path)
    std::cout << i << ' ';
  std::cout << std::endl;
}