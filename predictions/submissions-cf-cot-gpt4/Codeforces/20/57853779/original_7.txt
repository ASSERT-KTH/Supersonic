Here are the potential optimizations:

1. Include only the necessary headers: The program includes a large header file, `#include <bits/stdc++.h>`, which includes many unnecessary headers, increasing compilation time. Only include the headers that are explicitly used in the program.

2. Avoid global variables: The use of global variables increases memory usage and can make code harder to understand and debug. In this case, `const int maxn = 100005;` and `const int INF = 1e18;` are declared globally. It's better to declare these within the function where they're used.

3. Optimize the use of std::vector: It's more memory efficient to assign the size of a vector at the time of its creation, if known, to avoid additional memory allocations. Here, a known size is assigned during the creation of `vector<bool> processed(maxn, false);`, `vector<int> distance(maxn, INF);`, and `vector<int> p(maxn, -1);` which is good.

4. Unnecessary use of `std::pair`: This program uses a pair of integers in several places. However, the use of `std::pair` can be avoided in some situations, reducing memory usage and potentially improving runtime performance.

5. Using `std::ios::sync_with_stdio(false);` and `cin.tie(NULL);`: These commands can make input and output more efficient, reducing the program's runtime.

6. Using `'\n'` instead of `std::endl`: `std::endl` causes an unnecessary flush operation, which can slow down output operations.

Optimized code: 

```
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int32_t main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);

  const int INF = 1e18;
  const int maxn = 100005;

  int n, m;
  cin >> n >> m;
  if (m == 0) {
    cout << "-1\n";
    return 0;
  }

  vector<vector<pair<int, int>>> adj(maxn);
  for (int i = 0; i < m; i++) {
    int a, b, w;
    cin >> a >> b >> w;
    adj[a].push_back({b, w});
    adj[b].push_back({a, w});
  }

  int x = 1;
  vector<bool> processed(maxn, false);
  vector<int> distance(maxn, INF);
  vector<int> p(maxn, -1);
  distance[x] = 0;

  priority_queue<pair<int, int>> q;
  q.push({0, x});
  while (!q.empty()) {
    int a = q.top().second;
    q.pop();
    if (processed[a])
      continue;
    processed[a] = true;
    for (auto u : adj[a]) {
      int b = u.first, w = u.second;
      if (distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        p[b] = a;
        q.push({-distance[b], b});
      }
    }
  }
  if (p[n] == -1) {
    cout << "-1\n";
    return 0;
  }
  vector<int> path;
  for (int v = n; v != x; v = p[v]) {
    path.push_back(v);
  }
  path.push_back(x);
  reverse(path.begin(), path.end());
  for (auto i : path)
    cout << i << ' ';
  cout << '\n';
}
```