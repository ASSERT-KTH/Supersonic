The given program implements Dijkstra's shortest path algorithm using a priority queue. The main optimizations are related to input/output operations, memory usage, and avoiding unnecessary operations. Here are the steps for optimization:

1. **Input/Output Operations**: `std::ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);` can be used to speed up cin and cout operations.

2. **Avoid unnecessary memory usage**: In the given code, vectors `processed`, `distance`, and `p` are initialized with a maximum size of maxn. However, they should be initialized with size `n+1` to reduce memory usage.

3. **Avoid unnecessary operations**: The code checks `if (processed[a])` after popping `a` from the priority queue. If `a` is processed, it continues with the next iteration. Instead, we can check if `a` is processed before pushing it into the queue. This can reduce the number of unnecessary operations.

4. **Use auto& in range-based for loops**: When iterating over `adj[a]`, use `auto& u` instead of `auto u` to avoid creating copies of the elements.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;

#define int long long
const int INF = 1e18;
const int maxn = 100005;

int32_t main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n, m;
    cin >> n >> m;
    if (m == 0) {
        cout << "-1" << endl;
        return 0;
    }
    vector<pair<int, int>> adj[maxn];
    for (int i = 0; i < m; i++) {
        int a, b, w;
        cin >> a >> b >> w;
        adj[a].push_back({b, w});
        adj[b].push_back({a, w});
    }
    int x = 1;
    vector<bool> processed(n + 1, false);
    vector<int> distance(n + 1, INF);
    vector<int> p(n + 1, -1);
    distance[x] = 0;

    using pii = pair<int, int>;
    priority_queue<pii> q;
    q.push({0, x});
    while (!q.empty()) {
        int a = q.top().second;
        q.pop();
        if (processed[a]) continue;
        processed[a] = true;
        for (auto& u : adj[a]) {
            int b = u.first, w = u.second;
            if (!processed[b] && distance[a] + w < distance[b]) {
                distance[b] = distance[a] + w;
                p[b] = a;
                q.push({-distance[b], b});
            }
        }
    }
    if (p[n] == -1) {
        cout << "-1" << endl;
        return 0;
    }
    vector<int> path;
    for (int v = n; v != x; v = p[v]) {
        path.push_back(v);
    }
    path.push_back(x);
    reverse(path.begin(), path.end());
    for (auto i : path)
        cout << i << ' ';
    cout << endl;
    return 0;
}
```

This optimized code should have improved running time and memory usage compared to the original code.
