The given program is already quite optimized, but there are a few small improvements that can be made. 

1. Avoiding Unnecessary Copies in Loops - the loop that iterates over the adjacency list for a given node makes a copy of each pair. This can be avoided by using a reference.

2. Reducing Number of Global Variables - the script uses a global constant maxn, which is not necessary as the size of the vectors can be set dynamically.

3. Avoiding Repeated Computation - the distance computation distance[a] + w is performed twice. It can be computed once and stored in a variable.

4. Reducing Input/Output Overhead - In C++, cin and cout are slower than scanf and printf. By using the latter, the I/O operations can be speeded up.

5. Optimizing Data Structures - instead of using a pair of int, int for the adjacency list, a struct can be used. This makes code easier to read and can help compiler optimization.

The optimized program will look like this:

```c++
#include <cstdio>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;
#define int long long
const int INF = 1e18;
struct edge {int to, w;};
int32_t main() {
  int n, m;
  scanf("%lld %lld", &n, &m);
  if (m == 0) {
    printf("-1\n");
    return 0;
  }
  vector<vector<edge>> adj(n+1);
  for (int i = 0; i < m; i++) {
    int a, b, w;
    scanf("%lld %lld %lld", &a, &b, &w);
    adj[a].push_back({b, w});
    adj[b].push_back({a, w});
  }
  int x = 1;
  vector<bool> processed(n+1, false);
  vector<int> distance(n+1, INF);
  vector<int> p(n+1, -1);
  distance[x] = 0;
  using pii = pair<int, int>;
  priority_queue<pii> q;
  q.push({0, x});
  while (!q.empty()) {
    int a = q.top().second;
    q.pop();
    if (processed[a])
      continue;
    processed[a] = true;
    for (auto& u : adj[a]) {
      int b = u.to, w = u.w;
      int new_dist = distance[a] + w;
      if (new_dist < distance[b]) {
        distance[b] = new_dist;
        p[b] = a;
        q.push({-distance[b], b});
      }
    }
  }
  if (p[n] == -1) {
    printf("-1\n");
    return 0;
  }
  vector<int> path;
  for (int v = n; v != x; v = p[v]) {
    path.push_back(v);
  }
  path.push_back(x);
  reverse(path.begin(), path.end());
  for (auto i : path)
    printf("%lld ", i);
  printf("\n");
}
```