Here are some steps we can take to optimize the given C/C++ code:

1. `#include <bits/stdc++.h>` is not a standard C/C++ library. It's actually a GCC extension that includes almost all the libraries, which results in increased compilation time. It's better to include only the libraries that we need.

2. `using namespace std;` can cause name collisions, which can be a problem with large programs. It is better to use std:: before each standard library object.

3. `freopen` is used to redirect the standard input and output to files. However, if you are not dealing with files, you can remove these lines to make the program faster.

4. `typedef` is used to create aliases. However, its use is not recommended in modern C++. It's better to use `using` instead.

5. `#define` can be replaced with constant variables or inline functions, which are type-safe.

6. `scanf` is faster than `cin` for reading input, so replace `cin` with `scanf`.

7. The `memset` function is not type safe and may lead to bugs. It's better to initialize arrays in a loop.

8. The last part of the program prints the variable `nb` after each iteration. It's faster to store the results in a string and print them all at once at the end of the program.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cstdio>

using ll = long long;
using vi = std::vector<int>;
using vl = std::vector<ll>;

const int MAX = (1 << 19);
int A[MAX];
int dp[MAX][19];

ll lcm(ll a, ll b) { return a * b / std::__gcd(a, b); }

int main() {
  int n, m;
  scanf("%d %d", &n, &m);
  for (int i = 0; i < MAX; i++) A[i] = i;
  for (int i = 0; i < n; i++) {
    int x, y;
    scanf("%d %d", &x, &y);
    A[x] = std::max(A[x], y);
  }
  dp[0][0] = A[0];
  for (int i = 1; i < (1 << 19); i++) {
    dp[i][0] = A[i] = std::max(A[i], A[i - 1]);
  }
  for (int j = 1; j < 19; j++) {
    for (int i = 0; i < MAX; i++) {
      dp[i][j] = dp[dp[i][j - 1]][j - 1];
    }
  }
  std::string result;
  while (m--) {
    int l, r, nb = 0;
    scanf("%d %d", &l, &r);
    for (int j = 18; j >= 0; j--) {
      if (dp[l][j] < r) {
        nb += 1 << j;
        l = dp[l][j];
      }
    }
    if (dp[l][0] >= r)
      nb++;
    else
      nb = -1;
    result += std::to_string(nb) + "\n";
  }
  std::cout << result;
  return 0;
}
```