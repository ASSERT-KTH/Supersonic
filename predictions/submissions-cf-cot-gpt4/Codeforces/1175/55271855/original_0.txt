The program you provided could be optimized in the following ways:

1. Remove unnecessary `#include <bits/stdc++.h>`: This header file includes almost all the standard libraries which can slow down the compilation process. So, include only those libraries which are necessary for your program.

2. Remove unnecessary typedefs: The typedefs `vi` and `vl` are not used in the code, so we can remove them.

3. Use scanf instead of cin: scanf is generally faster than cin.

4. Use printf instead of cout: printf is generally faster than cout.

5. Avoid multiple array accesses: There are multiple array accesses in the code which can be avoided by using temporary variables.

Let's apply those optimizations to your code:

```cpp
#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;
typedef long long ll;
#define all(a) a.begin(), a.end()
#define mem(A, v) memset(A, v, sizeof(A));
#define show(x) printf("%d\n", x)
#define forn(i, n) for (i = 0; i < n; i++)
int const MAX = (1 << 19);
int A[MAX];
int dp[MAX][19];
ll lcm(ll a, ll b) { return a * b / __gcd(a, b); }
int main() {
  int n, m, i;
  scanf("%d %d", &n, &m);
  forn(i, MAX) A[i] = i;
  forn(i, n) {
    int x, y;
    scanf("%d %d", &x, &y);
    A[x] = max(A[x], y);
  }
  dp[0][0] = A[0];
  for (int i = 1; i < (1 << 19); i++) {
    dp[i][0] = A[i] = max(A[i], A[i - 1]);
  }
  for (int j = 1; j < 19; j++) {
    for (int i = 0; i < MAX; i++) {
      dp[i][j] = dp[dp[i][j - 1]][j - 1];
    }
  }
  while (m--) {
    int l, r, nb = 0, x;
    scanf("%d %d", &l, &r);
    for (int j = 18; j >= 0; j--) {
      if (dp[l][j] < r) {
        nb += 1 << j;
        l = dp[l][j];
      }
    }
    if (dp[l][0] >= r)
      nb++;
    else
      nb = -1;
    show(nb);
  }
  return 0;
}
```

Note: We have replaced `cin` with `scanf` and `cout` with `printf` for faster I/O operations. We have also removed unnecessary typedefs and header files. The logic of the code remains the same, only the I/O operations and some unnecessary parts of code are optimized.