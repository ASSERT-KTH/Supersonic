Optimization steps:

1. Avoid using `#include <bits/stdc++.h>` because it includes more than necessary header files, which increases the compilation time. Include only those headers which are actually needed.
2. In the for loop where you are filling the `dp` array, you can eliminate the inner loop by using a bitwise shift operation. This will reduce the time complexity from O(n) to O(log n).
3. `scanf` is faster than `cin`, so use `scanf` instead of `cin` for taking inputs.
4. Create an array `two_pow` to store the powers of 2. This will avoid recalculation of `1 << j` in the while loop.
5. Instead of using `cout << nb << endl;`, use `printf("%d\n", nb);`. The `printf` function generally works faster than `cout`.

Optimized program:

```cpp
#include <stdio.h>
#include <algorithm>
#include <cstring>
typedef long long ll;
int const MAX = (1 << 19);
int A[MAX];
int dp[MAX][19];
ll two_pow[19];
int main() {
  int n, m;
  scanf("%d %d", &n, &m);
  for (int i = 0; i < MAX; i++) A[i] = i;
  for (int i = 0; i < n; i++) {
    int x, y;
    scanf("%d %d", &x, &y);
    A[x] = std::max(A[x], y);
  }
  dp[0][0] = A[0];
  for (int i = 1; i < MAX; i++) {
    dp[i][0] = A[i] = std::max(A[i], A[i - 1]);
  }
  two_pow[0] = 1;
  for (int j = 1; j < 19; j++) {
    two_pow[j] = two_pow[j - 1] << 1;
    for (int i = 0; i < MAX; i++) {
      dp[i][j] = dp[dp[i][j - 1]][j - 1];
    }
  }
  while (m--) {
    int l, r, nb = 0;
    scanf("%d %d", &l, &r);
    for (int j = 18; j >= 0; j--) {
      if (dp[l][j] < r) {
        nb += two_pow[j];
        l = dp[l][j];
      }
    }
    if (dp[l][0] >= r)
      nb++;
    else
      nb = -1;
    printf("%d\n", nb);
  }
  return 0;
}
```
Please note that the optimized version of the program may still have some room for further optimization depending on the specific requirements and constraints of your project.