Here are the optimizations step by step:

1. Remove the usage of `#include <bits/stdc++.h>`: This header file is quite large and including it can significantly increase the compilation time. Replace it with only the necessary standard libraries.

2. Remove the usage of `using namespace std;`: It's generally a bad practice to use the entire standard namespace in a global context as it can lead to name clashes. It's better to prefix the standard library functions and classes with `std::` whenever they are used.

3. Avoid the use of macros for common functions: Macros like `forn(i, n)` and `show(x)` do not provide any performance benefits and reduce code readability. It's better to use regular loops and function calls.

4. Avoid unnecessary memory allocations: The array `A[MAX]` and the 2D array `dp[MAX][19]` are allocated with maximum size at the beginning of the program. This can be a waste of memory if the actual input is significantly smaller than the maximum size. In this case, however, the size is dependent on the pre-defined constant `MAX`, so changing this would require a significant rewrite of the program.

5. Use `std::ios_base::sync_with_stdio(false);`: This can potentially speed up I/O operations by unsynchronizing C++'s I/O streams with C's.

Now let's implement these optimizations in the code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
typedef long long ll;
typedef std::vector<int> vi;
typedef std::vector<ll> vl;
ll lcm(ll a, ll b) { return a * b / __gcd(a, b); }
int const MAX = (1 << 19);
int A[MAX];
int dp[MAX][19];

int main() {
  std::ios_base::sync_with_stdio(false);
  int n, m;
  std::cin >> n >> m;
  for(int i = 0; i < MAX; i++) A[i] = i;
  for(int i = 0; i < n; i++) {
    int x, y;
    std::cin >> x >> y;
    A[x] = std::max(A[x], y);
  }
  dp[0][0] = A[0];
  for (int i = 1; i < (1 << 19); i++) {
    dp[i][0] = A[i] = std::max(A[i], A[i - 1]);
  }
  for (int j = 1; j < 19; j++) {
    for (int i = 0; i < MAX; i++) {
      dp[i][j] = dp[dp[i][j - 1]][j - 1];
    }
  }
  while (m--) {
    int l, r, nb = 0;
    std::cin >> l >> r;
    for (int j = 18; j >= 0; j--) {
      if (dp[l][j] < r) {
        nb += 1 << j;
        l = dp[l][j];
      }
    }
    if (dp[l][0] >= r)
      nb++;
    else
      nb = -1;
    std::cout << nb << std::endl;
  }
  return 0;
}
```

Please note that these optimizations are mostly related to best practices and may not significantly improve the run-time or memory usage of the program. For more substantial improvements, a deeper understanding of the algorithm and its input would be needed.