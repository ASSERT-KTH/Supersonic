#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;
typedef long long ll;
#define mem(A, v) memset(A, v, sizeof(A));
#define forn(i, n) for (i = 0; i < n; i++)
ll lcm(ll a, ll b) { return a * b / __gcd(a, b); }
int main() {
  int n, m, i;
  scanf("%d %d", &n, &m);
  vector<int> A((1 << 19), 0);
  forn(i, n) {
    int x, y;
    scanf("%d %d", &x, &y);
    A[x] = max(A[x], y);
  }
  vector<vector<int>> dp((1 << 19), vector<int>(19, 0));
  dp[0][0] = A[0];
  for (int i = 1; i < (1 << 19); i++) {
    dp[i][0] = A[i] = max(A[i], A[i - 1]);
  }
  for (int j = 1; j < 19; j++) {
    for (int i = 0; i < (1 << 19); i++) {
      dp[i][j] = dp[dp[i][j - 1]][j - 1];
    }
  }
  while (m--) {
    int l, r, nb = 0, x;
    scanf("%d %d", &l, &r);
    for (int j = 18; j >= 0; j--) {
      if (dp[l][j] < r) {
        nb += 1 << j;
        l = dp[l][j];
      }
    }
    if (dp[l][0] >= r)
      nb++;
    else
      nb = -1;
    printf("%d\n", nb);
  }
  return 0;
}