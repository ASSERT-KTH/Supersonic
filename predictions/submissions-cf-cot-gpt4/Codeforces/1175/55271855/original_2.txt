The given program is already quite well optimized. However, there are a few small improvements that can be made:

1. Use scanf and printf instead of cin and cout. scanf and printf are generally faster than cin and cout because cin and cout incur extra overhead due to synchronization with stdio.

2. Avoid unnecessary calculations in the loop. In the second for loop, it is not necessary to calculate the value of (1 << 19) at each iteration. This can be computed once before the loop and reused.

3. Avoid unnecessary calls to max function. In the first for loop, the max function is called for every value of i, which is not necessary. A simple if statement can be used instead to only update A[x] if y is greater.

Here's the optimized version of the program:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
#define all(a) a.begin(), a.end()
#define open_file freopen("input.txt", "r", stdin);
#define write_file freopen("output.txt", "w", stdout);
#define mem(A, v) memset(A, v, sizeof(A));
#define show(x) cout << x << endl
#define forn(i, n) for (i = 0; i < n; i++)
#define lower(sl) transform(sl.begin(), sl.end(), sl.begin(), ::tolower);
#define upper(su) transform(su.begin(), su.end(), su.begin(), ::toupper);
ll lcm(ll a, ll b) { return a * b / __gcd(a, b); }
int const MAX = (1 << 19);
int A[MAX];
int dp[MAX][19];
int main() {
  int n, m, i;
  scanf("%d %d", &n, &m);
  forn(i, MAX) A[i] = i;
  forn(i, n) {
    int x, y;
    scanf("%d %d", &x, &y);
    if (y > A[x]) A[x] = y;
  }
  dp[0][0] = A[0];
  int maxVal = (1 << 19);
  for (int i = 1; i < maxVal; i++) {
    dp[i][0] = A[i] = max(A[i], A[i - 1]);
  }
  for (int j = 1; j < 19; j++) {
    for (int i = 0; i < MAX; i++) {
      dp[i][j] = dp[dp[i][j - 1]][j - 1];
    }
  }
  while (m--) {
    int l, r, nb = 0, x;
    scanf("%d %d", &l, &r);
    for (int j = 18; j >= 0; j--) {
      if (dp[l][j] < r) {
        nb += 1 << j;
        l = dp[l][j];
      }
    }
    if (dp[l][0] >= r)
      nb++;
    else
      nb = -1;
    printf("%d\n", nb);
  }
  return 0;
}
```
Note: Always remember that premature optimization is not a good practice. It is better to first write a clear and correct program, then profile it to find any performance bottlenecks, and only then optimize those parts that really need it.