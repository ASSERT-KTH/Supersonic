The given program is well optimized in terms of its algorithm, but there are still a few small improvements that can be made. Here are the changes I would suggest:

1. Remove unnecessary macros: The `F`, `S`, `gcd` and `lcm` macros are not used in the program. Removing them will not improve the performance, but it will make the code cleaner.

2. Use `std::ios::sync_with_stdio(false)`: This disables the synchronization between the C and C++ standard streams. This can make I/O operations faster, but it may cause problems if you mix C and C++ style I/O in your program. Since you are not doing this, it is safe to use.

3. Use `std::cin.tie(nullptr)` and `std::cout.tie(nullptr)`: This unties cin from cout. By default, cin is tied to cout to ensure a sensible order of output and input operations. If you are not alternating between input and output in your program, it is safe and potentially faster to untie them.

4. Use `std::vector` instead of array: In C++, it is generally recommended to use `std::vector` instead of arrays. This is because vectors are more dynamic and have many built-in functions that can simplify code and sometimes make it faster.

Here is the optimized version of the program:

```cpp
#include <bits/stdc++.h>
#define int long long
#define hell 1000000007
#define endl "\n"
#define ONLINE_JUDGE
using namespace std;

int expo(int base, int exponent, int mod = hell) {
  int ans = 1;
  base %= mod;
  while (exponent != 0) {
    if (exponent & 1)
      ans = (1LL * ans * base) % mod;
    base = (1LL * base * base) % mod;
    exponent >>= 1;
  }
  return ans % mod;
}

int inverse(int x) { return expo(x, hell - 2, hell); }

void solve() {
  int n, t;
  cin >> n >> t;
  vector<int> a(n);
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  int curMid = 1;
  for (int i = 0; i < n; i++) {
    int r;
    if (t % 2 == 0 && a[i] == t / 2) {
      r = (curMid++) % 2;
    } else if (2 * a[i] < t) {
      r = 0;
    } else {
      r = 1;
    }
    cout << r << " ";
  }
  cout << endl;
}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  int t = 1;
  cin >> t;
  while (t--) {
    solve();
  }
}
```

Please note that these optimizations may have only a marginal impact on the performance of your program. The main factor affecting the performance of a program is the efficiency of its algorithm, which is already quite good in your case.