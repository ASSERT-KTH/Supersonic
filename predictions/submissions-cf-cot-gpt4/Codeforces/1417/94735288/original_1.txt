Here are the optimization steps:

1. Replacing the use of "bits/stdc++.h" header file with the specific header files needed. This header file is quite heavy and includes more than what you actually need, slowing down the compilation process.
2. The "cin" and "cout" are slower for input and output operations. We can use "scanf" and "printf" for faster operations.
3. Avoiding the use of long long int when int can do the job. This will reduce memory usage.
4. Avoiding the use of "endl" to break lines since it is slower due to its flushing property. We can use "\n" instead.
5. Reducing the number of redundant modulus operations in the "expo" function. Modulus operations are computationally expensive, so reducing them can save running time.

Here is the optimized program:

```cpp
#include <iostream>
#include <stdio.h>
#define hell 1000000007
#define F first
#define S second
#define ONLINE_JUDGE
#define gcd(a, b) __gcd((a), (b))
#define lcm(a, b) ((a) * (b)) / gcd(a, b)

using namespace std;

int expo(int base, int exponent, int mod = hell) {
  int ans = 1;
  base %= mod;
  while (exponent != 0) {
    if (exponent & 1)
      ans = (ans * base) % mod;
    base = (base * base) % mod;
    exponent >>= 1;
  }
  return ans;
}

int inverse(int x) { return expo(x, hell - 2, hell); }

void solve() {
  int n, t;
  scanf("%d%d", &n, &t);
  int a[n];
  int i;
  for (i = 0; i < n; i++) {
    scanf("%d", &a[i]);
  }
  int curMid = 1;
  for (i = 0; i < n; i++) {
    int r;
    if (t % 2 == 0 && a[i] == t / 2) {
      r = (curMid++) % 2;
    } else if (2 * a[i] < t) {
      r = 0;
    } else {
      r = 1;
    }
    printf("%d ", r);
  }
  printf("\n");
}

int main() {
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  int t = 1;
  scanf("%d", &t);
  while (t--) {
    solve();
  }
}
```
Please note that any optimization heavily depends on the specific requirements and constraints of your program. Some methods can even degrade performance if applied in the wrong context, so it's always important to understand the trade-offs involved when optimizing a program.