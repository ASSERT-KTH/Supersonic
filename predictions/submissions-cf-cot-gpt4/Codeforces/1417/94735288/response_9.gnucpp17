#include <iostream>
#include <algorithm>

const int hell = 1000000007;

int gcd(int a, int b) {
  return std::__gcd(a, b);
}

int lcm(int a, int b) {
  return (a * b) / gcd(a, b);
}

int expo(int base, int exponent, int mod = hell) {
  int ans = 1;
  base %= mod;
  while (exponent != 0) {
    if (exponent & 1)
      ans = (static_cast<long long>(ans) * base) % mod;
    base = (static_cast<long long>(base) * base) % mod;
    exponent >>= 1;
  }
  return ans % mod;
}

int inverse(int x) {
  return expo(x, hell - 2, hell);
}

void solve() {
  int n, t;
  std::cin >> n >> t;
  int* a = new int[n];
  for (int i = 0; i < n; i++) {
    std::cin >> a[i];
  }
  int curMid = 1;
  for (int i = 0; i < n; i++) {
    int r;
    if (t % 2 == 0 && a[i] == t / 2) {
      r = (curMid++) % 2;
    } else if (2 * a[i] < t) {
      r = 0;
    } else {
      r = 1;
    }
    std::cout << r << " ";
  }
  std::cout << "\n";
  delete[] a;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  int t = 1;
  std::cin >> t;
  while (t--) {
    solve();
  }
}