1. The first optimization will be to remove the unnecessary #include <bits/stdc++.h> and replace it with the specific libraries needed. This will reduce compilation time as it includes a lot of unnecessary libraries.

2. The second optimization will be in the function "solve". Instead of reading the array element and immediately processing it, it is better to first read all elements and then process them. This will improve cache performance as it allows for better memory locality.

3. The third optimization is to avoid using 'endl' as it forces a flush operation, which is slower. Instead, use '\n' to print a newline character.

4. The fourth optimization is to avoid the use of long long int when it's not necessary. The 'int' type should be enough for this problem, this will save memory space.

Optimized code:
```C++
#include <iostream>
#include <vector>
#define hell 1000000007
using namespace std;

int expo(int base, int exponent, int mod = hell) {
  int ans = 1;
  base %= mod;
  while (exponent != 0) {
    if (exponent & 1)
      ans = (1LL * ans * base) % mod;
    base = (1LL * base * base) % mod;
    exponent >>= 1;
  }
  return ans % mod;
}

int inverse(int x) { return expo(x, hell - 2, hell); }

void solve() {
  int n, t;
  cin >> n >> t;
  vector<int> a(n);
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
  }
  int curMid = 1;
  for (int i = 0; i < n; ++i) {
    int r;
    if (t % 2 == 0 && a[i] == t / 2) {
      r = (curMid++) % 2;
    } else if (2 * a[i] < t) {
      r = 0;
    } else {
      r = 1;
    }
    cout << r << " ";
  }
  cout << '\n';
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
}
```