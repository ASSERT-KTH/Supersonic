The existing code is already pretty optimized. However, there are few things that we can do to make it even better:

1. Instead of using `#define`, we can use `const` or `constexpr` for constant values. This is because `#define` does not respect scope and can lead to bugs that are hard to find.
2. The function `expo` is a bit optimized version of modular exponentiation, but it can be improved by removing the final modulus operation, as it won't change the result.
3. `cin` and `cout` are generally slower than `scanf` and `printf`. However, if we still want to use them, we can eliminate the need for `endl` by replacing it with `'\n'`. The reason is `endl` not only adds a newline but also flushes the stream, which can slow down the I/O operations.
4. The array `a` is dynamically allocated on the stack. This could cause a stack-overflow for large inputs. We can use `std::vector` instead to allocate it on the heap.
5. You don't need to declare `i` outside the for loop, declare it within the loop itself.

Optimized code:

```
#include <bits/stdc++.h>
using namespace std;

const int hell = 1000000007;
constexpr int MOD = hell;
constexpr char ENDL = '\n';
constexpr bool ONLINE_JUDGE = true;

int expo(int base, int exponent, int mod = MOD) {
  int ans = 1;
  base %= mod;
  while (exponent != 0) {
    if (exponent & 1)
      ans = (1LL * ans * base) % mod;
    base = (1LL * base * base) % mod;
    exponent >>= 1;
  }
  return ans;
}

int inverse(int x) { return expo(x, MOD - 2, MOD); }

void solve() {
  int n, t;
  cin >> n >> t;
  vector<int> a(n);
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  int curMid = 1;
  for (int i = 0; i < n; i++) {
    int r;
    if (t % 2 == 0 && a[i] == t / 2) {
      r = (curMid++) % 2;
    } else if (2 * a[i] < t) {
      r = 0;
    } else {
      r = 1;
    }
    cout << r << " ";
  }
  cout << ENDL;
}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif

  int t = 1;
  cin >> t;
  while (t--) {
    solve();
  }
}
```