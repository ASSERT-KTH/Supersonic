The given C++ program reads from an input file and writes to an output file. It also performs some computations on arrays. Here are some optimization suggestions:

1. Reduce unnecessary includes: The `#include <bits/stdc++.h>` is a header file in GNU GCC, which includes almost all standard libraries. But it can slow down the compilation process as it includes more libraries than needed. It's better to only include necessary libraries.

2. Reduce the use of global arrays: Global arrays occupy space for the entire duration of the program, which is not efficient. Local arrays or vectors should be used instead.

3. Replace macros with inline functions or constexpr, if possible: This can improve readability and maintainability of the code.

4. Avoid using `endl` to break lines in output as it is slower due to the flushing of the output buffer. Use `'\n'` instead.

5. Use prefix increment (++i) instead of postfix increment (i++): In C++, the prefix increment is slightly faster as it does not need to store the previous value.

6. Use `std::ios::sync_with_stdio(false)`, `std::cin.tie(NULL)` and `std::cout.tie(NULL)` at the start of main function: It can speed up the I/O operations.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
#include <cstring>

using namespace std;

typedef long long ll;

void INPUT() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    INPUT();

    int n, m, k;
    cin >> n >> m >> k;

    vector<ll> arr(n);
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }

    vector<ll> a(m), b(m), c(m), ans(n, 0), op(m + 1, 0);
    for (int i = 0; i < m; ++i) {
        cin >> a[i] >> b[i] >> c[i];
    }

    for (int i = 0; i < k; ++i) {
        int x, y;
        cin >> x >> y;
        op[x - 1]++;
        op[y]--;
    }

    for (int i = 1; i < m; ++i) {
        op[i] += op[i - 1];
    }

    for (int i = 0; i < m; ++i) {
        ans[a[i] - 1] += op[i] * c[i];
        ans[b[i]] -= op[i] * c[i];
    }

    for (int i = 1; i < n; ++i) {
        ans[i] += ans[i - 1];
    }

    for (int i = 0; i < n; ++i) {
        cout << ans[i] + arr[i] << " ";
    }

    cout << '\n';

    return 0;
}
```
In this program, we have replaced arrays with vectors, moved global variables to local, used prefix increments instead of postfix, and made some improvements in the I/O operations.