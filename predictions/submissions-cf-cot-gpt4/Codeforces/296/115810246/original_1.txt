This program can be optimized by minimizing the number of operations performed in the loops. 

Here are the steps for optimization:
1. The first loop is reading from the standard input and storing the values in an array. This operation can't be optimized further as it's necessary to read all the values.

2. The second and third loops are also reading from the standard input and storing the values in an array. These loops are doing the same operation, so they can be merged into one loop. This will reduce the number of iterations to `m+k` instead of `2m+k`.

3. The fourth and fifth loops are updating the values in the array. These loops can be merged into one loop. This will reduce the number of iterations to `m` instead of `2m`.

4. The last loop is printing the values in the array. This operation can't be optimized further as it's necessary to print all the values.

Here is the optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
#define el '\n'
#define PI 3.14159265359
#define MP make_pair
#define pb(v) push_back(v)
#define all(v) (v).begin(), (v).end()
#define sz(v) ((int)((v).size()))
#define clr(v, d) memset(v, d, sizeof(v))
const double EPS = 1e-9;
const int MOD = 1e9 + 7;
int dx[8] = {0, 0, 1, -1, -1, 1, -1, 1}, dy[8] = {1, -1, 0, 0, -1, -1, 1, 1};
void INPUT() {
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
}
void OUTPUT() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
}
ll a[100005], b[100005], c[100005], ans[100005], op[100005];
int main() {
  INPUT();
  OUTPUT();
  int n, m, k;
  cin >> n >> m >> k;
  ll arr[n];
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }
  for (int i = 0; i < m; i++) {
    cin >> a[i] >> b[i] >> c[i];
  }
  for (int i = 0; i < k; i++) {
    int x, y;
    cin >> x >> y;
    op[x - 1]++;
    op[y]--;
    if(i<m){
      op[i+1] += op[i];
      ans[a[i] - 1] += op[i] * c[i];
      ans[b[i]] -= op[i] * c[i];
    }
  }
  cout << ans[0] + arr[0] << " ";
  for (int i = 1; i < n; i++) {
    ans[i] += ans[i - 1];
    cout << ans[i] + arr[i] << " ";
  }
  cout << el;
  return 0;
}
```
This optimized program reduces the number of operations and thus improves the running time. It doesn't change the memory usage because the number and size of variables remain the same.