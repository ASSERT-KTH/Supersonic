This program seems to be well-optimized in terms of its algorithm. However, there are still some things that could be improved upon:

1. **Remove unnecessary macros and typedefs:** Macros like `#define el '\n'` and `#define all(v) (v).begin(), (v).end()` are unnecessary and make the code harder to read. It's better to just use the actual values directly in the code.

2. **Avoid using `#include <bits/stdc++.h>`:** This is a non-standard header file and includes a lot of unnecessary libraries, which increases the compilation time. It's better to include only the libraries that are actually used in the program.

3. **Use `std::ios::sync_with_stdio(false)` and `std::cin.tie(NULL)` globally:** These lines make input and output more efficient in C++. It's better to set them globally at the beginning of `main()`, instead of inside the `OUTPUT()` function.

4. **Avoid using global arrays:** Global arrays can lead to problems with data encapsulation and make it harder to understand the program. It's better to define the arrays inside `main()` where they're used.

5. **Use `std::vector` instead of C-style arrays:** `std::vector` is more flexible and safer to use than C-style arrays. It automatically manages its own memory and provides useful functions like `push_back()` and `size()`.

6. **Avoid using `freopen()` for input and output redirection:** This is non-standard and can cause problems with some compilers. It's better to use standard input and output or file streams.

Below is the optimized version of the code based on these suggestions:

```cpp
#include <iostream>
#include <vector>

using namespace std;
typedef long long ll;

const int MOD = 1e9 + 7;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n, m, k;
  cin >> n >> m >> k;
  
  vector<ll> arr(n), a(m), b(m), c(m), ans(n, 0), op(m + 1, 0);
  
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }
  
  for (int i = 0; i < m; i++) {
    cin >> a[i] >> b[i] >> c[i];
  }
  
  for (int i = 0; i < k; i++) {
    int x, y;
    cin >> x >> y;
    op[x - 1]++;
    op[y]--;
  }
  
  for (int i = 1; i <= m; i++) {
    op[i] += op[i - 1];
  }
  
  for (int i = 0; i < m; i++) {
    ans[a[i] - 1] += op[i] * c[i];
    ans[b[i]] -= op[i] * c[i];
  }
  
  cout << ans[0] + arr[0] << " ";
  
  for (int i = 1; i < n; i++) {
    ans[i] += ans[i - 1];
    cout << ans[i] + arr[i] << " ";
  }
  
  cout << '\n';
  
  return 0;
}
```

Note that the modifications are small and the overall structure of the program remains the same. The changes are mainly focused on improving the readability, maintainability, and efficiency of the code.