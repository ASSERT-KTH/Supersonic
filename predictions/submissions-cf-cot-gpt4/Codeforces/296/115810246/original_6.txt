Step 1: Including Specific Libraries
The #include <bits/stdc++.h> directive includes all the standard libraries, which can slow down the compilation time. We should instead include only the libraries that we need. In this case, we need iostream and vector. 

Step 2: Avoiding Macros
Macros can make the code harder to debug and understand. It's better to use constant variables, inline functions, or template functions instead. For example, instead of using #define el '\n', you can use the constant variable char EL = '\n'.

Step 3: Avoiding Global Variables
Global variables can make the code harder to understand and debug, and they can also lead to problems with thread safety. We should move the variables a, b, c, ans, and op inside the main function.

Step 4: Avoiding Large Statically Allocated Arrays
Statically allocated arrays like a[100005], b[100005], c[100005], ans[100005], and op[100005] can consume a lot of memory, even if we are not using all the elements. We should instead use dynamically allocated arrays or std::vector.

Step 5: Avoiding Unnecessary File I/O
The program contains code to redirect the standard input and output to files. This is not necessary in most cases and can slow down the program. We should remove this code.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

using namespace std;

const double EPS = 1e-9;
const int MOD = 1e9 + 7;
const int DX[8] = {0, 0, 1, -1, -1, 1, -1, 1};
const int DY[8] = {1, -1, 0, 0, -1, -1, 1, 1};

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n, m, k;
  cin >> n >> m >> k;

  vector<long long> arr(n), a(m), b(m), c(m), ans(n), op(m);

  for (int i = 0; i < n; i++)  cin >> arr[i];
  for (int i = 0; i < m; i++)  cin >> a[i] >> b[i] >> c[i];

  for (int i = 0; i < k; i++) {
    int x, y;
    cin >> x >> y;
    op[x - 1]++;
    op[y]--;
  }

  for (int i = 1; i < m; i++) op[i] += op[i - 1];

  for (int i = 0; i < m; i++) {
    ans[a[i] - 1] += op[i] * c[i];
    ans[b[i]] -= op[i] * c[i];
  }

  cout << ans[0] + arr[0] << " ";

  for (int i = 1; i < n; i++) {
    ans[i] += ans[i - 1];
    cout << ans[i] + arr[i] << " ";
  }

  cout << '\n';

  return 0;
}
```