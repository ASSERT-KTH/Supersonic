This C++ program is already well-written and optimized. However, some minor improvements can be made:

1. The use of `#include <bits/stdc++.h>` is discouraged as it includes a lot of unnecessary libraries, which can slow down the compilation time. It's recommended to include only the libraries that are actually used in your code. 

2. The use of `freopen` for input and output file streams is generally discouraged because it can cause issues if the files are not present or not accessible. It's better to handle file operations with more error checking, but in competitive programming, it's usually fine.

3. The use of `typedef` can be replaced with `using` which is more modern and readable.

4. The `clr` macro is defined but not used anywhere in the code, so it can be removed.

5. The `IOS_BASE::sync_with_stdio(false), cin.tie(NULL), and cout.tie(NULL)` can be placed in the main function before any input or output operation for better practice.

6. The size of the arrays `a`, `b`, `c`, `ans`, `op` can be dynamically allocated depending on the size of `n` and `m` to save memory.

7. The variable `arr` can be declared as a `vector` to utilize dynamic memory allocation.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;
using ll = long long;
using vi = vector<int>;
#define el '\n'
#define PI 3.14159265359
#define MP make_pair
#define pb(v) push_back(v)
#define all(v) (v).begin(), (v).end()
#define sz(v) ((int)((v).size()))
const double EPS = 1e-9;
const int MOD = 1e9 + 7;
int dx[8] = {0, 0, 1, -1, -1, 1, -1, 1}, dy[8] = {1, -1, 0, 0, -1, -1, 1, 1};

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  int n, m, k;
  cin >> n >> m >> k;
  vector<ll> arr(n), a(m), b(m), c(m), ans(n, 0), op(m, 0);
  
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }
  for (int i = 0; i < m; i++) {
    cin >> a[i] >> b[i] >> c[i];
  }
  for (int i = 0; i < k; i++) {
    int x, y;
    cin >> x >> y;
    op[x - 1]++;
    op[y]--;
  }
  for (int i = 1; i < m; i++) {
    op[i] += op[i - 1];
  }
  for (int i = 0; i < m; i++) {
    ans[a[i] - 1] += op[i] * c[i];
    ans[b[i]] -= op[i] * c[i];
  }
  cout << ans[0] + arr[0] << " ";
  for (int i = 1; i < n; i++) {
    ans[i] += ans[i - 1];
    cout << ans[i] + arr[i] << " ";
  }
  cout << el;
  return 0;
}
```
Please note that this optimized code is assuming that the input file stream is managed elsewhere, possibly by a competitive programming platform. If you are running this code in a local environment, you need to ensure the input data is provided properly.