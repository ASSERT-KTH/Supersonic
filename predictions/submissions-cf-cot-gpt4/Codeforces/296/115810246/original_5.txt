The given program seems to be quite well optimized already, but there are a few small changes that can be made to further optimize it.

Optimization Steps:
1. Avoid unnecessary I/O operations: The `ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);` commands are used to decouple the C++ standard streams from their corresponding C standard streams. This can significantly speed up I/O operations, but it's only beneficial if the program makes a lot of them, and if the program mixes C++ and C I/O. In this scenario, we are not mixing C++ and C I/O, hence these commands are not needed.

2. Avoid using `#define`: It's generally better to use `constexpr` for constants. This gives you type safety, and it's the modern C++ way of doing things.

3. Avoid excessive use of macros: For simple operations like `all(v)` and `sz(v)`, it's better not to use macros. Macros are harder to debug and can lead to unexpected behavior due to lack of type safety.

4. Use vector instead of arrays: To further optimize memory usage, use vectors instead of arrays. This allows dynamic memory allocation, which can save memory when the array size is not known at compile time.

5. Use `auto` to avoid explicit type declaration: This makes the code easier to read and maintain.

6. Use '\n' instead of `endl`: The `endl` manipulator writes a newline and flushes the stream. If you don't need to flush the stream, '\n' is faster.

Optimized Code:
```
#include <iostream>
#include <vector>

constexpr char NEWLINE = '\n';
constexpr double PI = 3.14159265359;
constexpr double EPS = 1e-9;
constexpr int MOD = 1e9 + 7;
int dx[8] = {0, 0, 1, -1, -1, 1, -1, 1}, dy[8] = {1, -1, 0, 0, -1, -1, 1, 1};

using namespace std;
using ll = long long;
using vi = vector<int>;

void INPUT() {
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
}

int main() {
  INPUT();
  int n, m, k;
  cin >> n >> m >> k;
  vector<ll> arr(n), a(m), b(m), c(m), ans(n), op(m);
  for (auto &i : arr) {
    cin >> i;
  }
  for (int i = 0; i < m; i++) {
    cin >> a[i] >> b[i] >> c[i];
  }
  for (int i = 0; i < k; i++) {
    int x, y;
    cin >> x >> y;
    op[x - 1]++;
    op[y]--;
  }
  for (int i = 1; i < m; i++) {
    op[i] += op[i - 1];
  }
  for (int i = 0; i < m; i++) {
    ans[a[i] - 1] += op[i] * c[i];
    ans[b[i]] -= op[i] * c[i];
  }
  cout << ans[0] + arr[0] << " ";
  for (int i = 1; i < n; i++) {
    ans[i] += ans[i - 1];
    cout << ans[i] + arr[i] << " ";
  }
  cout << NEWLINE;
  return 0;
}
```