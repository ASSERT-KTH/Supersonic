Here are the optimizations that we can do:

1. Instead of using `#include <bits/stdc++.h>`, include only the headers that are used in the program. The `bits/stdc++.h` include is not standard and is quite heavy, including a lot of headers that are not needed in this program. This can reduce the compilation time.

2. Avoid using `using namespace std;`. This can prevent naming conflicts.

3. Avoid using `#define` for functions like `push_back` and `make_pair`. Use the functions directly instead. This can improve readability.

4. The `clr` macro is not used in the code, it can be removed.

5. `EPS`, `MOD`, `dx` and `dy` are defined but not used in the code. They can be removed.

6. Remove `INPUT()` function if it's not needed. You will usually not need to manually read from a file in competitive programming.

7. `ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);` are used to speed up cin and cout, but if `scanf` and `printf` are used instead of `cin` and `cout`, they can be removed.

Here's the simplified code after applying these optimizations:

```cpp
#include <iostream>
#include <vector>

typedef long long ll;
typedef std::vector<int> vi;

const int MAXN = 100005;
ll a[MAXN], b[MAXN], c[MAXN], ans[MAXN], op[MAXN];

int main() {
  int n, m, k;
  scanf("%d %d %d", &n, &m, &k);
  
  std::vector<ll> arr(n);
  for (int i = 0; i < n; i++) {
    scanf("%lld", &arr[i]);
  }
  
  for (int i = 0; i < m; i++) {
    scanf("%lld %lld %lld", &a[i], &b[i], &c[i]);
  }
  
  for (int i = 0; i < k; i++) {
    int x, y;
    scanf("%d %d", &x, &y);
    op[x - 1]++;
    op[y]--;
  }
  
  for (int i = 1; i < m; i++) {
    op[i] += op[i - 1];
  }
  
  for (int i = 0; i < m; i++) {
    ans[a[i] - 1] += op[i] * c[i];
    ans[b[i]] -= op[i] * c[i];
  }
  
  printf("%lld ", ans[0] + arr[0]);
  for (int i = 1; i < n; i++) {
    ans[i] += ans[i - 1];
    printf("%lld ", ans[i] + arr[i]);
  }
  
  printf("\n");
  return 0;
}
```

Note: If you're not familiar with `scanf` and `printf`, you can keep using `cin` and `cout`, but remember to include `ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);` to speed them up.