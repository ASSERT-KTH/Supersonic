This program is already quite optimized and uses efficient data structures like arrays for storing data. However, there are a few changes we can make to further optimize the program.

1. Avoid using `#include <bits/stdc++.h>`. This header file includes all standard libraries, which can increase the compilation time. Instead, include only those libraries that are needed in the code.

2. Avoid using `using namespace std`. It can cause naming conflicts on a larger codebase. Instead, use the `std::` prefix when needed. 

3. The `INPUT()` and `OUTPUT()` functions are called once and they are not required to be separate functions. You can directly put their contents in the main function.

4. Reduce the number of global variables. Global variables consume memory for the entire lifetime of the program. Instead, declare them in the main function where they are used.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>

#define el '\n'
#define MP make_pair
#define all(v) (v).begin(), (v).end()

const double EPS = 1e-9;
const int MOD = 1e9 + 7;
int dx[8] = {0, 0, 1, -1, -1, 1, -1, 1}, dy[8] = {1, -1, 0, 0, -1, -1, 1, 1};

int main() {
  #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
  #endif

  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  long long a[100005], b[100005], c[100005], ans[100005], op[100005];
  int n, m, k;
  std::cin >> n >> m >> k;
  long long arr[n];
  for (int i = 0; i < n; i++) {
    std::cin >> arr[i];
  }
  for (int i = 0; i < m; i++) {
    std::cin >> a[i] >> b[i] >> c[i];
  }
  for (int i = 0; i < k; i++) {
    int x, y;
    std::cin >> x >> y;
    op[x - 1]++;
    op[y]--;
  }
  for (int i = 1; i < m; i++) {
    op[i] += op[i - 1];
  }
  for (int i = 0; i < m; i++) {
    ans[a[i] - 1] += op[i] * c[i];
    ans[b[i]] -= op[i] * c[i];
  }
  std::cout << ans[0] + arr[0] << " ";
  for (int i = 1; i < n; i++) {
    ans[i] += ans[i - 1];
    std::cout << ans[i] + arr[i] << " ";
  }
  std::cout << el;
  return 0;
}
```

These changes mainly improve the maintainability of the code and reduce the chance of bugs. The computational complexity and memory usage of the program remain the same. It should be noted that the optimization of the program strongly depends on the specific problem and the constraints given in the problem.