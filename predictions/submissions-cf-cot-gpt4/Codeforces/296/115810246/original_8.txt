The given C++ program can be optimized by reducing the use of global variables and eliminating unnecessary macros. The optimization process involves the following steps:

1. Remove the unnecessary macros and include only the necessary header files instead of including `<bits/stdc++.h>`, which includes a large number of unnecessary files, slowing down the compilation process.

2. Instead of using global arrays like `a[100005], b[100005], c[100005], ans[100005], op[100005]`, we can declare them inside the main function. This will reduce memory usage as the memory for these arrays will be allocated only when the main function is called, and it will be released when the main function finishes.

3. The `INPUT` and `OUTPUT` functions are used to speed up input and output operations. These functions are usually used in competitive programming where time is critical. In a normal program, these functions may not be necessary.

4. The use of `typedef` for defining `long long` as `ll` and `vector<int>` as `vi` is unnecessary in this code as these types are only used once. Directly using these types in the code will improve readability.

Here is the optimized version of the given program:

```cpp
#include <iostream>
#include <vector>

using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n, m, k;
    cin >> n >> m >> k;
    vector<long long> arr(n), a(m), b(m), c(m), ans(n), op(m);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    for (int i = 0; i < m; i++) {
        cin >> a[i] >> b[i] >> c[i];
    }
    for (int i = 0; i < k; i++) {
        int x, y;
        cin >> x >> y;
        op[x - 1]++;
        op[y]--;
    }
    for (int i = 1; i < m; i++) {
        op[i] += op[i - 1];
    }
    for (int i = 0; i < m; i++) {
        ans[a[i] - 1] += op[i] * c[i];
        ans[b[i]] -= op[i] * c[i];
    }
    cout << ans[0] + arr[0] << " ";
    for (int i = 1; i < n; i++) {
        ans[i] += ans[i - 1];
        cout << ans[i] + arr[i] << " ";
    }
    cout << '\n';

    return 0;
}
```

This optimized code has better memory usage and improved readability without changing the functionality of the original program.