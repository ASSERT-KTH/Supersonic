Step 1: Avoid the Double Square Root Operation
In the main method, we are calculating the square root of 'a' twice, once to assign it to 'trex', and again when comparing it with 'a'. This is unnecessary and can be optimized by simply using the 'crex' variable which has already stored the square of 'trex'.

Step 2: Avoid Repeatedly Checking Same Prime Numbers
The 'isPrime' array is being recalculated for every input, which is unnecessary. We can calculate it once at the start of the program and reuse it for all inputs. This optimizes memory usage as well as running time.

Step 3: Avoid Repeatedly Initializing 'isPrime' Array
The 'isPrime' array is being initialized to 'true' for every element, which is unnecessary. By default, all elements of a boolean array in C++ are 'false'. We can optimize this by only setting 'isPrime' to 'true' for prime numbers.

Optimized Code:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define endl "\n"
#define MAX 1000001

bool isPrime[MAX];

void sieve() {
  isPrime[0] = isPrime[1] = false;
  for (int i = 2; i * i < MAX; i++) {
    if (!isPrime[i]) {
      for (int j = i * i; j < MAX; j += i) {
        isPrime[j] = false;
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(0);
  
  ll n, a;
  cin >> n;
  
  // Calculate the sieve once for all inputs
  sieve();
  
  for (int i = 0; i < n; i++) {
    cin >> a;
    ll trex = sqrt(a);
    ll crex = trex * trex;
    // Use 'crex' instead of calculating square root again
    if (a == crex) {
      if (isPrime[trex]) {
        cout << "YES" << endl;
      } else {
        cout << "NO" << endl;
      }
    } else {
      cout << "NO" << endl;
    }
  }
  
  return 0;
}
```

Remember to run the program in a C++11 or later environment due to the use of 'auto'.