Optimization steps:

1. We can optimize the `power` function. It currently does not handle a situation when `b_power` is even. If `b_power` is even, we can use a formula `(a^b)^2 = a^(2*b)`. Also, you can calculate the power modulo MOD to avoid overflow. But this function is not used in the main, so you can remove it.

2. The `sieve` function is initialized with a boolean array `isPrime` where every number is initially considered as prime (`isPrime[i] = true`). Instead of initializing every number as a prime, we can initialize only the odd numbers as prime. Because, except 2, no other even number can be a prime.

3. In the `sieve` function, the inner loop can start from `i*i` and only needs to check for the odd multiples of i (because even multiples are not prime).

4. In the main function, it is not necessary to calculate `trex` and `crex` values each time. You can directly compare `a` with `trex * trex`.

5. Instead of using `endl` to create a new line, we can use `"\n"` because `endl` flushes the output stream after inserting a new line, which takes more time.

Optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define MOD 1000000007

bool isPrime[1000001];

void sieve(ll maxPrime) {
  isPrime[0] = isPrime[1] = false;
  for (int i = 2; i <= maxPrime; i++) {
    isPrime[i] = i%2 == 0 ? false : true;
  }
  for (int i = 3; i * i <= maxPrime; i = i+2) {
    if (isPrime[i]) {
      for (int j = i * i; j <= maxPrime; j += 2*i) {
        isPrime[j] = false;
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(0);
  ll n, a;
  cin >> n;
  sieve(1000000);
  for (int i = 0; i < n; i++) {
    cin >> a;
    ll trex = sqrt(a);
    if (a == trex * trex && isPrime[trex]) {
      cout << "YES\n";
    } else {
      cout << "NO\n";
    }
  }
  return 0;
}
```
Please note that `#include <bits/stdc++.h>` and `using namespace std;` are not recommended in large projects as they can lead to longer compile times and potential naming conflicts.