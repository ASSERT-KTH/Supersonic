Here are some steps to optimize the given C/C++ program:

1. Avoid using the preprocessor directive `#include <bits/stdc++.h>` because it includes too many unnecessary libraries which slows down the compilation process.
2. Avoid using `#define` for constants. Instead, use `const` keyword. It is more type-safe.
3. Instead of initializing all elements of `isPrime` array to `true` in the `sieve` function, initialize it as `true` during declaration.
4. In the `sieve` function, start the loop from `2` instead of `0` to avoid unnecessary comparisons.
5. In the `power` function, the result should be calculated modulo MOD to avoid overflow.
6. In the `main` function, calculate the square of `trex` once and store it in `crex` to reuse it, instead of calculating it twice.

Here is the optimized version of the program:

```cpp

#include <iostream>
#include <cmath>

using namespace std;
const long long MOD = 1000000007;

long long power(long long a_power, long long b_power) {
  long long result_power = 1;
  while (b_power > 0) {
    if (b_power & 1) {
      result_power = (result_power * a_power) % MOD;
    }
    a_power = (a_power * a_power) % MOD;
    b_power /= 2;
  }
  return result_power;
}

bool isPrime[1000001] = {false, false, true};

void sieve(long long maxPrime) {
  for (int i = 2; i * i <= maxPrime; i++) {
    if (isPrime[i]) {
      for (int j = i * i; j <= maxPrime; j += i) {
        isPrime[j] = false;
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(0);
  long long n, a;
  cin >> n;
  long long trex, crex;
  sieve(1000000);
  for (int i = 0; i < n; i++) {
    cin >> a;
    trex = sqrt(a);
    crex = trex * trex;
    if (a == crex) {
      if (isPrime[trex]) {
        cout << "YES" << endl;
      } else {
        cout << "NO" << endl;
      }
    } else {
      cout << "NO" << endl;
    }
  }
  return 0;
}

```

I've also noticed that the `power` function is defined but not used in the program. If it's not needed, it can be removed to save memory.