Optimizations:

1. The 'power' function is unused in this code, so we can safely remove it to save space.
2. 'bits/stdc++.h' is a header file in GCC that includes most of the standard library files. It's convenient but it can slow down the compile process as it includes a lot of files that are not necessary. It's better to include only what we need. 
3. The sieve function can be optimized. When initializing the array to true, we can start the loop from 2 because 0 and 1 are already set to false.
4. Also, in the sieve function, we are iterating till maxPrime. We should only iterate till sqrt(maxPrime) as any factor of the number will always be less than or equal to sqrt(number). This will reduce the time complexity from O(n) to O(sqrt(n)).
5. In the main function, we are calculating sqrt(a) and storing it in 'trex'. Then, we are again calculating 'trex*trex' and storing it in 'crex', but 'crex' is not being used anywhere, so we can remove this line.
6. We can calculate 'trex*trex' once and store it in a variable to avoid calculating it multiple times.
7. Instead of using "endl", we can use "\n" as it is faster because "endl" causes a flush operation, which can be a performance bottleneck.

Optimized program:

```cpp
#include <iostream>
#include <vector>
#include <cmath>
using namespace std;
#define ll long long

vector<bool> isPrime(1000001, true);

void sieve(ll maxPrime) {
  isPrime[0] = isPrime[1] = false;
  for (int i = 2; i * i <= maxPrime; i++) {
    if (isPrime[i]) {
      for (int j = i * i; j <= maxPrime; j += i) {
        isPrime[j] = false;
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  ll n, a;
  cin >> n;
  ll trex;
  sieve(1000000);
  for (int i = 0; i < n; i++) {
    cin >> a;
    trex = sqrt(a);
    ll crex = trex * trex;
    if (a == crex) {
      if (isPrime[trex]) {
        cout << "YES\n";
      } else {
        cout << "NO\n";
      }
    } else {
      cout << "NO\n";
    }
  }
  return 0;
}
```