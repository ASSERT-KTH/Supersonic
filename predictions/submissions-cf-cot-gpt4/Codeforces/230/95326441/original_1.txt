Optimization Steps:

1. Using "#include <bits/stdc++.h>" is not recommended as it includes a lot of unnecessary libraries, thereby increasing the compile time. We will include only the libraries that are needed.

2. The isPrime array can be changed to a boolean vector, which can be dynamically sized according to the input. This will optimize the memory usage.

3. The sieve function is called only once and with a fixed parameter, so it does not need to be a function. We can integrate it into main to save the overhead of a function call.

4. In the main loop, we calculate "sqrt(a)" and "trex * trex" twice. We can optimize this by calculating it only once.

5. The "endl" in "cout" flushes the output buffer every time, which is a time-consuming operation. Using "\n" instead of "endl" will speed up the output.

6. The power function is unused in the code, so we can remove it.

Optimized Program:

```cpp
#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n;
  cin >> n;
  
  int maxPrime = 1000000;
  vector<bool> isPrime(maxPrime+1, true);
  isPrime[0] = isPrime[1] = false;
  for (int i = 2; i * i <= maxPrime; i++) {
    if (isPrime[i]) {
      for (int j = i * i; j <= maxPrime; j += i) {
        isPrime[j] = false;
      }
    }
  }
  
  for (int i = 0; i < n; i++) {
    long long a, trex;
    cin >> a;
    trex = sqrt(a);
    long long crex = trex * trex;
    if (a == crex && isPrime[trex]) {
      cout << "YES\n";
    } else {
      cout << "NO\n";
    }
  }
  return 0;
}
```

This version of the program is more efficient in terms of memory usage and running time.