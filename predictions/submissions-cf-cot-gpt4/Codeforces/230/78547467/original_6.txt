Before providing the optimized code, let's first describe the optimization step by step.

1. `#include <bits/stdc++.h>`: This header file includes almost every standard library. Including this file can increase compile time. It's better to include only those files which are needed.

2. Unused Variables: The variables `cnt` and `minm` are declared but not used anywhere. They can be removed.

3. `ll int a, ans[n] = {0}, cnt = 1, minm;`: Here, a VLA (Variable Length Array) is declared, which is not part of the C++ standard. It's better to use `std::vector`.

4. `for (int t = 0; t < n; ++t) {...}`: You have two similar loops in the program. The second loop is just for printing the output. You can combine the input-taking and output-giving inside one loop.

5. `ll int root = sqrt(a);`: The `sqrt` function returns a `double` and you are assigning it to `ll int` (long long int). This can cause a loss of precision. You should use `auto` keyword or `double` to declare `root`.

6. Constants: The constant value `1000001` is used multiple times in the program. It's better to declare it as a constant variable.

Now, let's implement these optimizations:

```cpp
#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

const int MAX = 1000001;
vector<int> spf(MAX);

void SPF() {
  spf[0] = spf[1] = -1;
  for (int i = 2; i < MAX; ++i)
    spf[i] = i;
  for (int i = 2; i * i < MAX; ++i) {
    if (spf[i] == i) {
      for (int j = i; j * i < MAX; ++j)
        spf[i * j] = i;
    }
  }
}

int main() {
  SPF();
  int n;
  cin >> n;

  for (int t = 0; t < n; ++t) {
    long long a;
    cin >> a;
    auto root = sqrt(a);
    if (a != 1 && root * root == a && spf[static_cast<int>(root)] == static_cast<int>(root))
      cout << "YES" << endl;
    else
      cout << "NO" << endl;
  }
  return 0;
}
```

In this optimized program, we have improved the readability and maintainability and also saved some memory by removing unused variables.