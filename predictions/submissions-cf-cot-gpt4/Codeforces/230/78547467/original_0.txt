The given C/C++ program is a sieve of smallest prime factors (SPF), which is used to determine if a number is a perfect square of a prime number. It does this by precomputing an array of smallest prime factors for numbers between 0 and 1000001, then, given a number, it checks if the number is a perfect square and if the square root of the number is its own smallest prime factor.

We can optimize this program by:

1. Avoiding the use of the global variable `spf`. Instead, we can pass `spf` as a reference to the `SPF` function. This will reduce the memory footprint of the global scope.
2. Using `std::vector` instead of a raw array for `ans`. This is because the size of `ans` depends on the input `n`, which could lead to a stack overflow for large inputs. `std::vector` allocates memory on the heap, avoiding this issue.
3. Calculating the square root only once in the loop where it's used. Right now, the square root is calculated twice which is unnecessary and could slow down the program. We can calculate it once and store the result in a variable.

Here is the optimized code:

```c++
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define mod 1000000007
#define endl "\n"

void SPF(int spf[1000001]) {
  spf[0] = spf[1] = -1;
  for (int i = 2; i < 1000001; ++i)
    spf[i] = i;
  for (int i = 2; i * i < 1000001; ++i) {
    if (spf[i] == i) {
      for (int j = i; j * i < 1000001; ++j)
        spf[i * j] = i;
    }
  }
}

int main() {
  int spf[1000001];
  SPF(spf);
  int n;
  cin >> n;
  ll int a;
  vector<ll int> ans(n, 0);
  for (int t = 0; t < n; ++t) {
    cin >> a;
    ll int root = sqrt(a);
    if (a != 1 && root * root == a && spf[root] == root)
      ans[t] = 1;
  }
  for (int t = 0; t < n; ++t) {
    if (ans[t] == 1)
      cout << "YES" << endl;
    else
      cout << "NO" << endl;
  }
  return 0;
}
```
Note: `#include <bits/stdc++.h>` and `using namespace std;` are not considered good practice as they can lead to name clashes and increased compile time. It would be better to include only the necessary libraries and use the `std::` prefix where necessary. However, since the original code uses them and the instructions were to make small modifications, I kept them in the optimized code.