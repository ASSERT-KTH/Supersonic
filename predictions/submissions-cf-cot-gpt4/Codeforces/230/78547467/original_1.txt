Step 1: Avoid using `#include <bits/stdc++.h>` in C++, as it includes a lot of unnecessary headers which increases the compile time. Instead, include only the necessary headers.

Step 2: Instead of using `#define`, use `const` for constant values. This is safer as it respects the scope and provides type safety.

Step 3: Avoid using `endl` for line breaks, instead use "\n". `endl` causes unnecessary flushes of the stream which can degrade performance. 

Step 4: Instead of computing `sqrt(a)` twice, compute it once and store it in a variable.

Step 5: If the number of queries is large, instead of printing the result immediately, store it in a string and print it out at the end. This can make the output operations faster.

Optimized Program:

```cpp
#include <iostream>
#include <cmath>
#include <vector>
using namespace std;

const int MAX_N = 1000001;
const int MOD = 1000000007;
int spf[MAX_N];
void SPF() {
  spf[0] = spf[1] = -1;
  for (int i = 2; i < MAX_N; ++i)
    spf[i] = i;
  for (int i = 2; i * i < MAX_N; ++i) {
    if (spf[i] == i) {
      for (int j = i; j * i < MAX_N; ++j)
        spf[i * j] = i;
    }
  }
}

int main() {
  SPF();
  int n;
  cin >> n;
  long long int a;
  vector<bool> ans(n, false);
  string result;
  for (int t = 0; t < n; ++t) {
    cin >> a;
    long long int root = sqrt(a);
    if (a != 1 && root * root == a && spf[root] == root)
      ans[t] = true;
  }
  for (int t = 0; t < n; ++t) {
    result += (ans[t] ? "YES\n" : "NO\n");
  }
  cout << result;
  return 0;
}
```