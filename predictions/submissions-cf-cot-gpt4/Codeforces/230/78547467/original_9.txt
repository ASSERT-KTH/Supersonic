Sure, we can make a few optimizations to this program.

1. Avoid using `bits/stdc++.h` as this includes a lot of unnecessary libraries, which increases the compilation time. Instead, use specific libraries that are required only. In this case, we can use `iostream`, `cmath` and `vector`.

2. Avoid using `#define` for constants. Instead, use `const` keyword. `const` is type safe, and it's a better practice to use it in C++.

3. Avoid using global variables as much as possible. In this case, we can include the `spf` array inside the `SPF` function and return a vector.

4. Use `std::vector` instead of C-style arrays. `std::vector` is a safer, more flexible and feature-rich alternative.

5. Use `std::ios::sync_with_stdio(false)` and `std::cin.tie(NULL)` at the beginning of the `main` function to speed up the I/O operations.

6. Instead of checking and outputting the results in separate loops, we can combine these into a single loop to save time.

Here's the optimized program:

```cpp
#include <iostream>
#include <cmath>
#include <vector>

const long long MOD = 1000000007;
const std::string NEW_LINE = "\n";

std::vector<int> SPF() {
    const int maxN = 1000001;
    std::vector<int> spf(maxN);
    spf[0] = spf[1] = -1;
    for (int i = 2; i < maxN; ++i)
        spf[i] = i;
    for (int i = 2; i * i < maxN; ++i) {
        if (spf[i] == i) {
            for (int j = i; j * i < maxN; ++j)
                spf[i * j] = i;
        }
    }
    return spf;
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(NULL);

    auto spf = SPF();

    int n;
    std::cin >> n;
    long long a;
    for (int t = 0; t < n; ++t) {
        std::cin >> a;
        long long root = sqrt(a);
        if (a != 1 && root * root == a && spf[root] == root)
            std::cout << "YES" << NEW_LINE;
        else
            std::cout << "NO" << NEW_LINE;
    }
    return 0;
}
```

You would need to compile this program with C++11 or newer.