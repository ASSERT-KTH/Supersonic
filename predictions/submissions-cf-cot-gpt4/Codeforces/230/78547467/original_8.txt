The given program calculates smallest prime factors for numbers up to 1000001 and then checks if the input numbers are perfect squares of prime numbers or not. 

Optimization steps:

1. Use fast IO: In C++, standard IO operations are slower. We can use `ios_base::sync_with_stdio(false); cin.tie(NULL);` to speed up IO operations.

2. Avoid repeated computation of sqrt: We can avoid repeated computation of the square root of the same number. Instead, we can store the value and reuse it.

3. Avoid the use of `endl`: `endl` is slower compared to '\n' because endl causes a flush operation which slows down the program.

4. Use vector instead of array for storing the answer: Vectors are dynamic and use exactly as much memory as needed. This makes them more memory efficient than arrays.

Optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define mod 1000000007
int spf[1000001];
void SPF() {
  spf[0] = spf[1] = -1;
  for (int i = 2; i < 1000001; ++i)
    spf[i] = i;
  for (int i = 2; i * i < 1000001; ++i) {
    if (spf[i] == i) {
      for (int j = i; j * i < 1000001; ++j)
        spf[i * j] = i;
    }
  }
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  SPF();
  int n;
  cin >> n;
  ll int a;
  vector<bool> ans(n, false);
  for (int t = 0; t < n; ++t) {
    cin >> a;
    ll int root = sqrt(a);
    if (a != 1 && root * root == a && spf[root] == root)
      ans[t] = true;
  }
  for (bool isPrimeSquare : ans) {
    if (isPrimeSquare)
      cout << "YES\n";
    else
      cout << "NO\n";
  }
  return 0;
}
```
This optimized program is faster and more memory efficient compared to the original one.