Here are the optimizations I am considering:

1. **Avoiding unnecessary computation**: The given code calculates Sieve of Eratosthenes (spf[]) for all numbers till 1000001, but we need the smallest prime factor only till sqrt(1000001) because the program is checking if a number is a perfect square of a prime number or not. So, we can reduce the range of Sieve of Eratosthenes to sqrt(1000001).

2. **Avoiding unnecessary memory usage**: The array ans[] is used to store the result of whether a number is a perfect square of a prime number or not. However, instead of storing the results, we could print them directly, saving memory.

3. **Avoiding multiple passes over data**: We have two separate loops, one for reading and processing the data (calculating ans[]), and another for printing the results. We can combine these into a single loop.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define mod 1000000007
#define endl "\n"
#define MAX 1001
int spf[MAX];
void SPF() {
  spf[0] = spf[1] = -1;
  for (int i = 2; i < MAX; ++i)
    spf[i] = i;
  for (int i = 2; i * i < MAX; ++i) {
    if (spf[i] == i) {
      for (int j = i; j * i < MAX; ++j)
        spf[i * j] = i;
    }
  }
}
int main() {
  SPF();
  int n;
  cin >> n;
  ll int a, root;
  for (int t = 0; t < n; ++t) {
    cin >> a;
    root = sqrt(a);
    if (a != 1 && root * root == a && spf[root] == root)
      cout << "YES" << endl;
    else
      cout << "NO" << endl;
  }
  return 0;
}
```
In this code, the array `spf` is created with size `MAX = 1001` which is approximately the square root of `1000001`. The `SPF` function is also updated to calculate the Sieve of Eratosthenes only till `MAX`. Inside the main function, the result of whether a number is a perfect square of a prime number is directly printed instead of being stored in an array. The processing and printing of the results are done in a single loop.