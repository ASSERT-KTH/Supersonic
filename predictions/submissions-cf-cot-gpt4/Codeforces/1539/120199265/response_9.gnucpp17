#include <bits/stdc++.h>
using namespace std;
constexpr long long int INF = 1e18;
constexpr int N = 2e5;
constexpr int MOD = 1e9 + 7;

struct node {
  int mx, mi, lz;
} st[1 << 20];

template <class A> void write(A x) { cout << x; }
template <class H, class... T> void write(const H &h, const T &... t) {
  write(h);
  write(t...);
}

void print() { cout << "\n"; }
template <class H, class... T> void print(const H &h, const T &... t) {
  write(h);
  if (sizeof...(t))
    write(' ');
  print(t...);
}

void apply(int i, int x, int l2, int r2) {
  st[i].mx -= x;
  st[i].mi -= x;
  if (st[i].lz == -MOD)
    st[i].lz = 0;
  st[i].lz += x;
}

void push(int i, int l2, int mid, int r2) {
  if (st[i].lz == -MOD)
    return;
  apply(2 * i, st[i].lz, l2, mid);
  apply(2 * i + 1, st[i].lz, mid + 1, r2);
  st[i].lz = -MOD;
}

void build(int n, int l1, int x, int i = 1, int l2 = 0, int r2 = n - 1) {
  if (l2 == r2) {
    st[i].mx = x;
    st[i].mi = x;
    st[i].lz = -MOD;
    return;
  }
  int mid = (l2 + r2) / 2;
  if (l1 <= mid)
    build(n, l1, x, 2 * i, l2, mid);
  else
    build(n, l1, x, 2 * i + 1, mid + 1, r2);
  st[i].mx = max(st[2 * i].mx, st[2 * i + 1].mx);
  st[i].mi = min(st[2 * i].mi, st[2 * i + 1].mi);
  st[i].lz = -MOD;
}

// ... Rest of the code remains same, just replace all instances of global variable `n` with local variable `n` in `solve()` function