
#include <bits/stdc++.h>
using namespace std;
#define fast ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define int long long int
#define pint array<int, 3>
#define INF (int)1e18
#define sz(x) (int)(x).size()
const long double pi = acos(-1);
// ... rest of the utility functions
const int N = 2e5;
const int MOD = 1e9 + 7;
int n;
struct node {
  int mx, mi, lz;
} st[1 << 20];
//... rest of the segment tree functions
void solve() {
  int n1;
  cin >> n1;
  int arr[n1];
  vector<pint> b(n1);
  vector<int> del;
  for (int i = 0; i < n1; i++) {
    cin >> arr[i];
    b[i] = {arr[i], i};
  }
  n = n1 + 1;
  for (int i = 0; i < n; i++)
    build(i, i);
  sort(b.begin(), b.end());
  int ans[n1] = {0};
  for (int i = n1 - 1; i >= 0; i--) {
    int cur = b[i][0];
    while (i >= 0 && b[i][0] == cur) {
      int j = b[i][1];
      int p = qry1(j + 1, j + 1), q = qry2(0, j), r = qry1(j + 1, n - 1);
      del.push_back(b[i][1]);
      ans[j] = (p - q + r - p - 1) / 2;
      i--;
    }
    for (auto u : del) {
      upd(u + 1, n - 1, 2);
    }
    del.clear();
    i++;
  }
  for (int i = 0; i < n; i++)
    build(i, i);
  for (int i = 0; i < n1; i++) {
    int cur = b[i][0];
    while (i < n1 && b[i][0] == cur) {
      int j = b[i][1];
      int p = qry1(j + 1, j + 1), q = qry2(0, j), r = qry1(j + 1, n - 1);
      del.push_back(b[i][1]);
      ans[j] = max(ans[j], (p - q + r - p) / 2);
      i++;
    }
    for (auto u : del) {
      upd(u + 1, n - 1, 2);
    }
    del.clear();
    i--;
  }
  for (int i = 0; i < n1; i++)
    cout << ans[i] << " ";
}
int32_t main() {
  fast;
  clock_t time = clock();
  int t = 1;
  for (int i = 0; i < t; i++) {
    solve();
  }
  double time_taken = ((double)(clock() - time)) / CLOCKS_PER_SEC;
  deb(time_taken);
  return 0;
}