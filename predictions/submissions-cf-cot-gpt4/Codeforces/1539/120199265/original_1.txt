The given C++ program seems to be quite complex and well-optimized already, but there are a few minor improvements we can make to further optimize it.

1. Remove unnecessary macro: The macro `#define fast` is used to speed up the input/output process by tying the standard input/output to null. However, this program does not seem to have any heavy input/output operations, so this macro is unnecessary. 

2. Avoid using `#include <bits/stdc++.h>`: This header file includes almost all the necessary libraries in C++. Including this header file can increase the compilation time as the compiler needs to process all of them, regardless of whether they are used in the program or not. It's always a good practice to include only the necessary libraries.

3. Avoid unnecessary type conversions: In the `to_string()` functions, there are some unnecessary type conversions happening which can be avoided. For example, the `char` to `string` conversion in the function `to_string(const char *s) { return string(s); }` is not required because `s` is already a string.

4. Use `reserve()` for vectors: When you know the size of the vector beforehand, it is a good practice to use the `reserve()` function. This will preallocate memory for the vector and avoid reallocations when elements are added to the vector.

Here is the optimized version of the code considering the points mentioned above:

```C++
#include <iostream>
#include <vector>
#include <string>
#include <bitset>
#include <algorithm>
#include <cmath>
#include <ctime>
using namespace std;
#define int long long int
#define pint array<int, 3>
#define INF (int)1e18
const long double pi = acos(-1);
string to_string(bool b) { return b ? "true" : "false"; }
string to_string(const char *s) { return s; }
string to_string(string s) { return s; }
template <size_t S> string to_string(bitset<S> b) {
  string res;
  res.reserve(S);
  for (int i = 0; i < b.size(); i++)
    res += char('0' + b[i]);
  return res;
}
//... Rest of the program remains the same ...
```

Please note that these optimizations are minor and might not result in a significant improvement in the performance. The most critical part for the performance is the algorithmic complexity of the program, and it seems to be already quite optimized in your case.