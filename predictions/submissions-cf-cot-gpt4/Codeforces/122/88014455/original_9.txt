Here are some optimization steps that can be applied to this program:

1. Avoid using `#include <bits/stdc++.h>`: It includes a lot of unnecessary libraries, which increases the compilation time. Instead, include only the necessary headers such as `iostream` and `vector`.

2. Replace `#define` with `constexpr`: `constexpr` is type safe and checked at compile time. It can help the compiler catch errors.

3. Remove unnecessary macros and functions: Macros like `fio`, `I`, `cr`, `R`, `reg`, and functions like `_min`, `_max` are not used in this program, so they should be removed.

4. Use `std::endl` instead of `"\n"`: `std::endl` flushes the output buffer, which is useful if you want to see output immediately.

5. Avoid using `using namespace std`: It can lead to name collision and makes the code harder to debug. It's better to use `std` scope explicitly.

6. Move `divisors[]` array into `solve()` function: The `divisors[]` array is used only in `solve()` function, so it's better to limit its scope to that function. This will also save memory as the array will be created only when `solve()` is called, and destroyed when it returns.

Now, let's write the optimized program:

```cpp
#include <iostream>
#include <vector>

constexpr long long ll = long long;
constexpr long double ld = long double;
constexpr int vi = vector<int>;
constexpr int pi = pair<int, int>;

void solve() {
  int divisors[] = {4, 7, 44, 47, 74, 77, 444, 447, 474, 477, 744, 747, 774, 777};
  ll n;
  std::cin >> n;
  for(ll i = 0; i < 14; i++){
    if(n % divisors[i] == 0){
      std::cout << "YES" << std::endl;
      return;
    }
  }
  std::cout << "NO" << std::endl;
}

int main() {
  // uncomment these if you want to read from a file
  // freopen("input.txt", "r", stdin);
  // freopen("output.txt", "w", stdout);
  
  solve();
  return 0;
}
```

Please note that some of your original program's features (macros, custom functions) were not used, so they were removed in the optimized version. If you need them in your larger project, you might want to keep them.