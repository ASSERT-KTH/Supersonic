The given C++ program is already quite optimized in terms of running time. However, there are a few steps we could take to improve the memory usage and readability:

1. Removal of unnecessary macros: While macros such as `#define ll long long` and `#define ld long double` can make the code more readable, they're not really necessary and can be removed to save memory.

2. Reduce use of inline functions: The `_min` and `_max` functions are declared as inline, which means every time they're called, they're not actually invoked as functions but their code is directly inserted at the call site. This could increase the memory usage if these functions are called multiple times. However, in this program, these functions are not used at all, so we can remove them.

3. Remove unnecessary `#include <bits/stdc++.h>`: This header file includes almost all standard library headers, which could significantly increase compile time and memory usage. It's always better to include only the specific headers that are actually used in the program.

4. Remove unused typedefs and macros: The `vi`, `pi`, `R`, `reg`, `cr` and `mp` are not used in the program and can be removed.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int divisors[] = {4, 7, 44, 47, 74, 77, 444, 447, 474, 477, 744, 747, 774, 777};

void solve() {
  long long n;
  cin >> n;

  for (int i = 0; i < 14; i++) {
    if (n % divisors[i] == 0) {
      cout << "YES\n";
      return;
    }
  }

  cout << "NO\n";
}

int main() {
  ios_base::sync_with_stdio(false);                                           
  cin.tie(NULL);

  solve();
  return 0;
}
```

This optimized program has the exact same functionality as the original one but with less memory usage and improved readability.