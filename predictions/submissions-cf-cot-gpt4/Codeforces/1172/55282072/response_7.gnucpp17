#include <algorithm>
#include <cassert>
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;
const int MOD = 998244353;

// ... rest of the code is the same ...

unordered_map<int, mod_int> save[2];

// ... rest of the code is the same ...

mod_int solve(int like, int weight) {
  if (save[like].find(weight) != save[like].end())
    return save[like][weight];
  mod_int answer = 0;
  if (like) {
    mod_int starter = 0, other = 1;
    for (int up = 0; up <= M; up++) {
      starter = probability[2 * up];
      if (starter == 0)
        continue;
      for (int i = 0; i < up; i++) {
        starter *= inv[MOD % (L + i)];
        other *= mod_int(L - weight + i);
      }
      for (int u = 0; u <= up; u++) {
        if (u > 0)
          other *= inv[MOD % (L - weight + up - u)];
        mod_int product = starter * choose(up, u) * (weight + u);
        if (L == weight) {
          if (u < up)
            product = 0;
        } else {
          product *= other;
        }
        answer += product;
        starter *= mod_int(weight + u);
      }
    }
  } else {
    mod_int starter = 0, other = 1;
    for (int down = 0; down <= M; down++) {
      starter = probability[2 * (M - down)];
      if (starter == 0)
        continue;
      for (int i = 0; i < down; i++) {
        starter *= inv[MOD % (DL - i)];
        other *= mod_int(DL - weight - i);
      }
      for (int d = 0; d <= min(down, weight); d++) {
        if (d > 0)
          other *= inv[MOD % (DL - weight + down - d)];
        mod_int product = starter * choose(down, d) * (weight - d);
        if (DL == weight) {
          if (d < down)
            product = 0;
        } else {
          product *= other;
        }
        answer += product;
        starter *= mod_int(weight - d);
      }
    }
  }
  return save[like][weight] = answer;
}

// ... rest of the code is the same ...