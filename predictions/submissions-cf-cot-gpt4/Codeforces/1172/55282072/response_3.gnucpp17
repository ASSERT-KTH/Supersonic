#include <algorithm>
#include <cassert>
#include <iostream>
#include <map>
#include <vector>
using namespace std;
const int MOD = 998244353;
struct mod_int {
  // same code as before...
};
vector<mod_int> factorial, inv_factorial;
vector<mod_int> inv;
void prepare_factorials(int max) {
  inv.assign(max + 1, 1);
  // same code as before...
}
mod_int choose(int n, int r) {
  // same code as before...
}
int N, M;
int L, DL;
vector<int> likes;
vector<int> weights;
vector<mod_int> probability;
map<int, mod_int> save[2];
mod_int solve(int like, int weight) {
  if (save[like].find(weight) != save[like].end())
    return save[like][weight];
  // same code as before...
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  prepare_factorials(4.1e5);
  cin >> N >> M;
  likes.reserve(N);
  weights.reserve(N);
  for (int &like : likes)
    cin >> like;
  for (int &weight : weights)
    cin >> weight;
  L = DL = 0;
  for (int i = 0; i < N; i++)
    if (likes[i])
      L += weights[i];
    else
      DL += weights[i];
  probability.reserve(2 * M + 1);
  probability[M] = 1;
  for (int iter = 0; iter < M; iter++) {
    vector<mod_int> new_probability(2 * M + 1, 0);
    for (int i = -M; i <= M; i++) {
      if ((i + iter) % 2 != 0 || abs(i) > iter)
        continue;
      int up = (iter + i) / 2, down = (iter - i) / 2;
      if (down > DL)
        continue;
      mod_int like_probability = mod_int(L + up) / mod_int(L + DL + i);
      mod_int dislike_probability = mod_int(1) - like_probability;
      new_probability[M + i + 1] += probability[M + i] * like_probability;
      new_probability[M + i - 1] += probability[M + i] * dislike_probability;
    }
    swap(probability, new_probability);
  }
  for (int i = 0; i < N; i++) {
    mod_int answer = mod_int(weights[i]) * solve(likes[i], 1);
    cout << (int)answer << '\n';
  }
}