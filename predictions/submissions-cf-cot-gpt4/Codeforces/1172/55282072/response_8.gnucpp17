#include <algorithm>
#include <cassert>
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;
// ...
vector<mod_int> likes;
vector<mod_int> weights; // store weights as mod_int
// ...
unordered_map<int, mod_int> save[2]; // use unordered_map instead of map
mod_int solve(int like, int weight) {
  auto it = save[like].find(weight);
  if (it != save[like].end())
    return it->second;
  mod_int answer = 0;
  // ...
  save[like].insert_or_assign(weight, answer); // use insert_or_assign
  return answer;
}
int main() {
  // ...
  weights.reserve(N); // reserve memory for vectors
  for (mod_int &like : likes) // use mod_int for iteration
    cin >> like;
  for (mod_int &weight : weights) // use mod_int for iteration
    cin >> weight;
  // ...
  for (int i = 0; i < N; i++) {
    mod_int answer = weights[i] * solve(likes[i], 1); // no need to multiply by mod_int
    cout << (int)answer << '\n';
  }
}