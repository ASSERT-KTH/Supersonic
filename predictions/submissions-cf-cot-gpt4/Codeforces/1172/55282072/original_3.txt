This code is already quite efficient. It uses various techniques such as memoization and dynamic programming to solve the task efficiently. Here are some minor improvements we can do:

1. Use reserve method: When we know the size of the vector in advance, we can use the reserve method to allocate memory at once. It can improve performance by avoiding reallocation of memory.

2. Reduce function calls: Function calls have overhead in terms of time. In some places in the code, we are repeatedly calling the same functions with the same arguments which can be avoided by storing the result in a variable and using that variable.

3. Pass by reference: In some places in the code, we are passing objects by value to the function. This will create a copy of the object which can increase memory usage. Instead, we can pass the objects by reference which will not create a copy of the object.

4. Avoid unnecessary computation: In some places in the code, we are computing the same values repeatedly inside a loop. These computations can be moved outside the loop or stored in a variable to avoid unnecessary computation.

Here is the optimized code:

```C++
#include <algorithm>
#include <cassert>
#include <iostream>
#include <map>
#include <vector>
using namespace std;
const int MOD = 998244353;
struct mod_int {
  // same code as before...
};
vector<mod_int> factorial, inv_factorial;
vector<mod_int> inv;
void prepare_factorials(int max) {
  inv.assign(max + 1, 1);
  // same code as before...
}
mod_int choose(int n, int r) {
  // same code as before...
}
int N, M;
int L, DL;
vector<int> likes;
vector<int> weights;
vector<mod_int> probability;
map<int, mod_int> save[2];
mod_int solve(int like, int weight) {
  if (save[like].find(weight) != save[like].end())
    return save[like][weight];
  // same code as before...
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  prepare_factorials(4.1e5);
  cin >> N >> M;
  likes.reserve(N);
  weights.reserve(N);
  for (int &like : likes)
    cin >> like;
  for (int &weight : weights)
    cin >> weight;
  L = DL = 0;
  for (int i = 0; i < N; i++)
    if (likes[i])
      L += weights[i];
    else
      DL += weights[i];
  probability.reserve(2 * M + 1);
  probability[M] = 1;
  for (int iter = 0; iter < M; iter++) {
    vector<mod_int> new_probability(2 * M + 1, 0);
    for (int i = -M; i <= M; i++) {
      if ((i + iter) % 2 != 0 || abs(i) > iter)
        continue;
      int up = (iter + i) / 2, down = (iter - i) / 2;
      if (down > DL)
        continue;
      mod_int like_probability = mod_int(L + up) / mod_int(L + DL + i);
      mod_int dislike_probability = mod_int(1) - like_probability;
      new_probability[M + i + 1] += probability[M + i] * like_probability;
      new_probability[M + i - 1] += probability[M + i] * dislike_probability;
    }
    swap(probability, new_probability);
  }
  for (int i = 0; i < N; i++) {
    mod_int answer = mod_int(weights[i]) * solve(likes[i], 1);
    cout << (int)answer << '\n';
  }
}
```

Here's a summary of changes:

1. `likes.reserve(N)` and `weights.reserve(N)` - used to allocate memory in advance.
2. `probability.reserve(2 * M + 1)` - used to allocate memory in advance.
