This C++ program is already very well written and optimized. It uses a lot of advanced C++ techniques to improve performance. However, here are a few minor tweaks that could be made to further optimize the code:

1. Avoiding unnecessary use of mod_int objects: In the operator overload functions, when a mod_int object is created and immediately used, it could be avoided by directly using the integer value.

2. Reducing the amount of calculations: In the "solve" function, calculations that are used repeatedly could be moved out of the loop and calculated once, then reused.

3. Using unordered_map instead of map: The map data structure in C++ is implemented as a red-black tree and has an average-time complexity of O(log n) for search, insert, and delete operations. However, the unordered_map data structure, which is implemented as a hash table, has an average-time complexity of O(1) for search, insert, and delete operations. This can be a significant performance boost if the map has a large number of elements.

4. Try to avoid division operation. Division is expensive in terms of computing time. If it's possible to replace division with multiplication, then do it. In the code, we can see that division is used several times, and it's possible to use multiplication instead.

Here's the optimized code:

```cpp
#include <algorithm>
#include <cassert>
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;
const int MOD = 998244353;

// ... rest of the code is the same ...

unordered_map<int, mod_int> save[2];

// ... rest of the code is the same ...

mod_int solve(int like, int weight) {
  if (save[like].find(weight) != save[like].end())
    return save[like][weight];
  mod_int answer = 0;
  if (like) {
    mod_int starter = 0, other = 1;
    for (int up = 0; up <= M; up++) {
      starter = probability[2 * up];
      if (starter == 0)
        continue;
      for (int i = 0; i < up; i++) {
        starter *= inv[MOD % (L + i)];
        other *= mod_int(L - weight + i);
      }
      for (int u = 0; u <= up; u++) {
        if (u > 0)
          other *= inv[MOD % (L - weight + up - u)];
        mod_int product = starter * choose(up, u) * (weight + u);
        if (L == weight) {
          if (u < up)
            product = 0;
        } else {
          product *= other;
        }
        answer += product;
        starter *= mod_int(weight + u);
      }
    }
  } else {
    mod_int starter = 0, other = 1;
    for (int down = 0; down <= M; down++) {
      starter = probability[2 * (M - down)];
      if (starter == 0)
        continue;
      for (int i = 0; i < down; i++) {
        starter *= inv[MOD % (DL - i)];
        other *= mod_int(DL - weight - i);
      }
      for (int d = 0; d <= min(down, weight); d++) {
        if (d > 0)
          other *= inv[MOD % (DL - weight + down - d)];
        mod_int product = starter * choose(down, d) * (weight - d);
        if (DL == weight) {
          if (d < down)
            product = 0;
        } else {
          product *= other;
        }
        answer += product;
        starter *= mod_int(weight - d);
      }
    }
  }
  return save[like][weight] = answer;
}

// ... rest of the code is the same ...
```

Remember that these are minor optimizations and the actual performance improvement may vary depending on the specific workload and computing environment. Also, readability and maintainability of the code should not be compromised for minor performance gains.