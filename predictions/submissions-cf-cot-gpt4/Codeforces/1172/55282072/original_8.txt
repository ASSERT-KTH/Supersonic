This program is already quite optimized, but there are a few changes we can make to potentially improve performance. 

1. One basic optimization we could make is to reserve memory for the `std::vector` objects. This could potentially improve performance by reducing the number of memory allocations. 
2. The `std::map` objects in the `solve()` function could be replaced with `std::unordered_map` to speed up the lookup time from O(log n) to O(1) on average. However, it's worth noting that `std::unordered_map` uses more memory than `std::map`.
3. In the `solve()` function, before inserting a value into a map, we are checking whether the key already exists in the map. This results in two lookups: one for `std::map::find` and one for `std::map::operator[]`. We can optimize this by using `std::map::insert_or_assign`, which ensures only one lookup is performed.
4. Before calling `solve()`, we are multiplying `weights[i]` by `mod_int`. Since this operation is performed in every iteration, it could be beneficial to store `weights[i]` as `mod_int` to avoid multiple conversions.

Let's apply these optimizations to the code:

```cpp
#include <algorithm>
#include <cassert>
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;
// ...
vector<mod_int> likes;
vector<mod_int> weights; // store weights as mod_int
// ...
unordered_map<int, mod_int> save[2]; // use unordered_map instead of map
mod_int solve(int like, int weight) {
  auto it = save[like].find(weight);
  if (it != save[like].end())
    return it->second;
  mod_int answer = 0;
  // ...
  save[like].insert_or_assign(weight, answer); // use insert_or_assign
  return answer;
}
int main() {
  // ...
  weights.reserve(N); // reserve memory for vectors
  for (mod_int &like : likes) // use mod_int for iteration
    cin >> like;
  for (mod_int &weight : weights) // use mod_int for iteration
    cin >> weight;
  // ...
  for (int i = 0; i < N; i++) {
    mod_int answer = weights[i] * solve(likes[i], 1); // no need to multiply by mod_int
    cout << (int)answer << '\n';
  }
}
```

Remember that performance improvements can vary based on the specific inputs and the hardware where the program is run. Always make sure to measure the real-world performance of your optimized program to ensure that it's actually faster.