The given program is a well-optimized one. However, there are some small optimizations which we can do to slightly improve the performance. 

1. In the `mod_int` struct, we have a `mod_inv` function. This function is using the extended Euclidean algorithm to find the modular inverse of a number. But instead of using this algorithm, we can use Fermat's little theorem to find the modular inverse of a number which is faster. According to Fermat's little theorem, if we have a number `a` and a prime number `p`, then `a^(p-1) % p = 1`. So, the modular inverse of `a` under mod `p` is `a^(p-2) % p`.

2. In the `solve` function, we are storing the answer in a map. But we can use an array instead of a map which will be faster because accessing an element in an array is an O(1) operation, whereas for a map it's an O(log n) operation.

3. We are using `assert` in the `pow` function which is used for debugging purposes. But we can remove this `assert` in the final version of the program because it will slightly improve the performance.

Let's implement these optimizations.
```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
const int MOD = 998244353;
struct mod_int {
  int val;
  mod_int(long long v = 0) {
    if (v < 0)
      v = v % MOD + MOD;
    if (v >= MOD)
      v %= MOD;
    val = v;
  }
  mod_int pow(long long p) const {
    mod_int a = *this, result = 1;
    while (p > 0) {
      if (p & 1)
        result *= a;
      a *= a;
      p >>= 1;
    }
    return result;
  }
  mod_int inv() const {
    return pow(MOD - 2);
  }
  // other functions remain the same...
};

mod_int save[2][200005]; // Assuming the maximum value of weight is 200000. You can change it according to your needs.

mod_int solve(int like, int weight) {
  if (save[like][weight].val != -1)
    return save[like][weight];
  // other code remains the same...
}

int main() {
  // other code remains the same...
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 200005; j++)
      save[i][j] = mod_int(-1);
  // other code remains the same...
}
```
These small optimizations can slightly improve the performance of the program. However, the given program is already a well-optimized one.