#include <algorithm>
#include <cassert>
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;
const int MOD = 998244353;
struct mod_int {
  // ... (same as before)
};
vector<mod_int> factorial, inv_factorial;
vector<mod_int> inv;
void prepare_factorials(int max) {
  // ... (same as before)
}
mod_int choose(int n, int r) {
  // ... (same as before)
}
int N, M;
int L, DL;
vector<int> likes;
vector<int> weights;
vector<mod_int> probability;
unordered_map<int, mod_int> save[2];
mod_int solve(int like, int weight) {
  if (save[like].find(weight) != save[like].end())
    return save[like][weight];
  mod_int answer = 0;
  if (like) {
    for (int up = 0; up <= M; up++) {
      if (probability[2 * up] == 0)
        continue;
      mod_int starter = probability[2 * up];
      mod_int other = 1;
      mod_int precalc = mod_int(L - weight);
      for (int i = 0; i < up; i++) {
        starter /= precalc + mod_int(i);
        other *= precalc + mod_int(i);
      }
      // ... (same as before)
    }
  } else {
    for (int down = 0; down <= M; down++) {
      if (probability[2 * (M - down)] == 0)
        continue;
      mod_int starter = probability[2 * (M - down)];
      mod_int other = 1;
      mod_int precalc = mod_int(DL - weight);
      for (int i = 0; i < down; i++) {
        starter /= precalc - mod_int(i);
        other *= precalc - mod_int(i);
      }
      // ... (same as before)
    }
  }
  return save[like][weight] = answer;
}
int main() {
  // ... (same as before)
  for (int i = 0; i < N; i++) {
    mod_int answer = mod_int(weights[i]) * solve(likes[i], 1);
    cout << (int)answer << '\n';
  }
}