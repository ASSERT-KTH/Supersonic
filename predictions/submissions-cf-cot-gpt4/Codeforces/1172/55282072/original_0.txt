To optimize this code, we can follow these steps:

1. Use unordered_map instead of map: In C++, map is implemented as a Red-Black Tree, and it always maintains a sorted order of its elements. Because of this, the insert operation in map takes O(log n) time. On the other hand, unordered_map is implemented using Hash Table, and its insert operation can be done in O(1) time if the hash function is a good one. So, replacing map with unordered_map can speed up the program.

2. Pre-calculate the inverse of numbers: The code has a loop where it calculates the inverse of i for every i from 2 to max. This could be optimized by pre-calculating the inv[] array outside the loop.

Here's the optimized code:

```cpp
#include <algorithm>
#include <cassert>
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;
const int MOD = 998244353;
struct mod_int {
  // same as original
};

vector<mod_int> factorial, inv_factorial;
vector<mod_int> inv;
void prepare_factorials(int max) {
  inv.assign(max + 1, 1);
  for (int p = 2; p * p <= MOD; p++)
    assert(MOD % p != 0);
  for (int i = 2; i <= max; i++)
    inv[i] = inv[MOD % i] * (MOD - MOD / i);
  factorial.resize(max + 1);
  inv_factorial.resize(max + 1);
  factorial[0] = inv_factorial[0] = 1;
  for (int i = 1; i <= max; i++) {
    factorial[i] = i * factorial[i - 1];
    inv_factorial[i] = inv[i] * inv_factorial[i - 1];
  }
}

mod_int choose(int n, int r) {
  assert(0 <= r && r <= n);
  return factorial[n] * inv_factorial[r] * inv_factorial[n - r];
}

int N, M;
int L, DL;
vector<int> likes;
vector<int> weights;
vector<mod_int> probability;
unordered_map<int, mod_int> save[2];

mod_int solve(int like, int weight) {
  // same as original
}

int main() {
  // same as original
}
```

Please note that these optimizations are mainly aimed at reducing the running time. The memory usage of the program won't be significantly reduced by these optimizations. In fact, in some cases, using unordered_map could increase the memory usage due to the additional space required by the hash table. But given the nature of this program, the extra space required is unlikely to be significant.