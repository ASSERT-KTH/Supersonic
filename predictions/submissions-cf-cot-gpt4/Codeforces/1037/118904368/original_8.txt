Here's how we can optimize the program:

1. Optimize memory usage: Instead of reading all elements into an array and sorting it, we can just keep track of the median as we read each element. This avoids the need for the array and the sort operation, reducing memory usage and runtime.

2. Optimize runtime: The while loops iterate over the array from the middle to the ends. Instead, we can calculate the sum of differences from the median in one pass as we read each element.

3. Make code cleaner: The two while loops are very similar and can be combined into one loop.

Here's the optimized code:

```cpp
#include <iostream>
using namespace std;
int main() {
  int n;
  long long s;
  cin >> n >> s;
  long long l = 0, r = 0;
  for (int i = 0; i < n; i++) {
    long long x;
    cin >> x;
    if (x > s)
      l += x - s;
    else if (x < s)
      r += s - x;
  }
  cout << max(l, r);
  return 0;
}
```

This version of the program does not require an array and does not sort the elements, so it saves memory and runtime. The logic of the two while loops is combined into the for loop, making the code cleaner and easier to read.