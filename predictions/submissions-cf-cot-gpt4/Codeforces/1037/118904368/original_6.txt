Optimization Steps:

1. Use static array instead of dynamic array: Dynamic arrays in C++ are a bit slower than static arrays due to extra overhead of memory allocation at runtime. If the maximum size of `n` is known and not very large, you can use a static array.

2. Avoid division operation: Division operation in CPU is more costly than multiplication and addition. Here, you are dividing `n` by 2 to find the mid of the array. You can shift right by 1 bit to get the mid of the array, which is equivalent to dividing it by 2, but faster.

3. Use `ios_base::sync_with_stdio(false); cin.tie(NULL);` to speed up cin and cout operations.

4. Avoid unnecessary checking in the while loop: In the while loop, you are checking `i >= 0` and `j <= n - 1` which is not required as `i` and `j` will always be within the range.

5. Use `std::ios::sync_with_stdio(false)` and `std::cin.tie(NULL)` to disable synchronization between the C and C++ standard streams, which can potentially speed up input/output operations.

Optimized Program:

```cpp
#include <algorithm>
#include <iostream>
using namespace std;
const int MAXN = 1e6;
int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL);
  int n;
  long long s;
  cin >> n >> s;
  long long a[MAXN];
  for (int i = 0; i < n; i++)
    cin >> a[i];
  sort(a, a + n);
  int mid = n >> 1;
  int i = mid, j = mid;
  long long l = 0, r = 0;
  while (a[i] > s) {
    l += a[i] - s;
    i--;
  }
  while (a[j] < s) {
    r += s - a[j];
    j++;
  }
  cout << max(l, r);
  return 0;
}
```
Note: This optimization assumes that the maximum size of `n` is known and is equal to 10^6. Please replace `MAXN` with the correct value if it's different.