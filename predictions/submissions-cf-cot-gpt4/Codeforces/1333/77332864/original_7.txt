There are several ways we can optimize this C/C++ program:

1. Use Fast I/O: Instead of using the standard input/output functions like `scanf()` and `printf()`, you can use faster methods to read from and write to the console. This is usually done by syncing with `stdio` and untieing `cin` from `cout`.

2. Avoid Dynamic Memory Allocation for Arrays: Instead of using `std::vector<long long> v(n + 1)` and `std::vector<long long> cnt(n + 1, 0)` which involves dynamic memory allocation, you can declare a static array which is faster. However, the size of the array should not be too large to avoid stack overflow.

3. Inline Small Functions: This program doesn't have any function to inline, but as a general rule, inlining small functions can improve performance by avoiding function call overhead.

4. Avoid Using `std::map`: `std::map` in C++ is a Red-Black Tree based associative container that stores elements in a sorted order. Searching, insertion, and removal of elements takes O(log n) time. If we can, we should use `std::unordered_map` which has an average time complexity of O(1) for search, insert, and delete but it does not store elements in any particular order.

Due to the constraints of the problem, we cannot apply optimization 2 and 4. So, the optimized code is:

```C++
#include <bits/stdc++.h>
using namespace std;
#define FAST_IO ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
int main() {
  FAST_IO
  int n;
  cin >> n;
  long long ans = n * 1LL * (n + 1) / 2LL;
  vector<long long> v(n + 1), cnt(n + 1, 0);
  for (int i = 1; i <= n; i++)
    cin >> v[i];
  map<long long, long long> mp, vis;
  mp[0] = 0;
  vis[0] = 1;
  long long mx = 0;
  for (int i = 1; i <= n; i++) {
    cnt[i] = cnt[i - 1] + v[i];
    if (vis[cnt[i]]) {
      long long l = max(0LL, mp[cnt[i]] - mx);
      long long r = n - i;
      if (mp[cnt[i]] - mx >= 0) {
        ans -= (l * r) + l + r;
        if (i - mp[cnt[i]] != n || !mx)
          ans--;
      }
      mx = max(mp[cnt[i]] + 1, mx);
    }
    mp[cnt[i]] = i;
    vis[cnt[i]] = 1;
  }
  cout << ans << endl;
}
```

Here, `FAST_IO` is a macro used to make reading from and writing to the console faster. It does so by desyncing C++'s I/O streams with their C counterparts and by untieing `cin` from `cout`. This can significantly reduce the I/O time in programs that perform a large number of I/O operations.