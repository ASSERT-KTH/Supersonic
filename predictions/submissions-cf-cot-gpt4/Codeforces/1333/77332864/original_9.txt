The given program is already quite optimized, but there are still a few steps that can be taken to optimize it further.

Step 1: Instead of using std::map, use std::unordered_map, which provides constant time average complexity for search, delete and insert operations, while std::map provides Logarithmic in size.

Step 2: Instead of using std::vector, use a simple array, which is faster than a vector because std::vector provides dynamic size, which the given program does not require.

Step 3: Instead of using std::max function, use a simple if condition to avoid function call overhead.

Step 4: Instead of using scanf and printf, use cin and cout with std::ios_base::sync_with_stdio(false). This will make I/O operations faster.

Here is the optimized program:

```c++
#include <bits/stdc++.h>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n;
  cin >> n;
  long long ans = n * 1LL * (n + 1) / 2LL;
  long long v[n + 1], cnt[n + 1] = {0};
  unordered_map<long long, long long> mp, vis;
  mp[0] = 0;
  vis[0] = 1;
  long long mx = 0;
  for (int i = 1; i <= n; i++) {
    cin >> v[i];
    cnt[i] = cnt[i - 1] + v[i];
    if (vis[cnt[i]]) {
      long long l = mp[cnt[i]] - mx > 0 ? mp[cnt[i]] - mx : 0LL;
      long long r = n - i;
      if (mp[cnt[i]] - mx >= 0) {
        ans -= (l * r) + l + r;
        if (i - mp[cnt[i]] != n || !mx)
          ans--;
      }
      if (mp[cnt[i]] + 1 > mx)
        mx = mp[cnt[i]] + 1;
    }
    mp[cnt[i]] = i;
    vis[cnt[i]] = 1;
  }
  cout << ans << "\n";
  return 0;
}
```
Please note that this optimization is minimal and the speed gain may not be very significant as the original program was already quite optimized. The change in performance will also depend on the nature of the input data.