Step 1: <bits/stdc++.h> is a header file in C++ which includes most of the libraries. It's not a good practice to include this file because it increases the compilation time and also it's not portable. As it's a GCC specific feature, it's not available on all compilers. So, replace it with the necessary libraries.

Step 2: The stdio functions (scanf and printf) are faster than cin and cout in C++. So it's better to use these for input and output.

Step 3: The program uses two separate maps to track the count and visibility of elements. Instead of two maps, we can use a single map of pairs, reducing memory usage.

Step 4: You are using long long for all your variables even when int would suffice. This unnecessarily increases the memory consumption of your program.

Step 5: Instead of performing calculations inside the if condition, perform them outside and store the result in a variable. This will reduce the number of calculations performed.

Step 6: Use pre-increment instead of post-increment. Pre-increment is faster because it doesnâ€™t need to create a copy of i before incrementing it.

Optimized code:

```cpp
#include <iostream>
#include <vector>
#include <map>

using namespace std;

int main() {
    int n;
    scanf("%d", &n);
    long long ans = (long long)n * (n + 1) / 2;
    vector<long long> v(n + 1), cnt(n + 1, 0);
    for (int i = 1; i <= n; ++i)
        scanf("%lld", &v[i]);
    map<long long, pair<long long, bool>> mp;
    mp[0] = {0, true};
    long long mx = 0;
    for (int i = 1; i <= n; ++i) {
        cnt[i] = cnt[i - 1] + v[i];
        if (mp[cnt[i]].second) {
            long long l = max(0LL, mp[cnt[i]].first - mx);
            long long r = n - i;
            long long l_times_r_plus_l_plus_r = (l * r) + l + r;
            if (mp[cnt[i]].first - mx >= 0) {
                ans -= l_times_r_plus_l_plus_r;
                if (i - mp[cnt[i]].first != n || !mx)
                    --ans;
            }
            mx = max(mp[cnt[i]].first + 1, mx);
        }
        mp[cnt[i]] = {i, true};
    }
    printf("%lld\n", ans);
}
```