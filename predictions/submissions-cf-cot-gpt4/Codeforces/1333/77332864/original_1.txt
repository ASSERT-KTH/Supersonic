The given C++ program is reading an integer `n` and a sequence of `n` integers, and then performing some computations. Here are the optimizations we can make:

1. Avoid using `#include <bits/stdc++.h>`: This header file includes most of the C++ Standard Library in one go, which increases compilation time. It's better to include only the libraries that we need.

2. Avoid using `using namespace std`: This line is generally considered bad practice because it can lead to name clashes if the program gets bigger or if you decide to use libraries that have functions or classes with the same names as those in the `std` namespace.

3. Use `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)`: These lines improve I/O efficiency, which can be significant when dealing with large inputs. This will disable the synchronization between the C and C++ standard streams.

4. Use `unordered_map` instead of `map`: `unordered_map` is generally faster than `map` for lookup, insertion, and removal operations, because it uses hashing, while `map` uses a binary search tree. This could be a significant speedup if `n` is large.

Here is the optimized version of your program:

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <cstdio>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  
  int n;
  scanf("%d", &n);
  long long ans = n * 1LL * (n + 1) / 2LL;
  
  std::vector<long long> v(n + 1), cnt(n + 1, 0);
  for (int i = 1; i <= n; i++)
    scanf("%lld", &v[i]);
  
  std::unordered_map<long long, long long> mp, vis;
  mp[0] = 0;
  vis[0] = 1;
  
  long long mx = 0;
  for (int i = 1; i <= n; i++) {
    cnt[i] = cnt[i - 1] + v[i];
    if (vis[cnt[i]]) {
      long long l = std::max(0LL, mp[cnt[i]] - mx);
      long long r = n - i;
      if (mp[cnt[i]] - mx >= 0) {
        ans -= (l * r) + l + r;
        if (i - mp[cnt[i]] != n || !mx)
          ans--;
      }
      mx = std::max(mp[cnt[i]] + 1, mx);
    }
    mp[cnt[i]] = i;
    vis[cnt[i]] = 1;
  }
  printf("%lld\n", ans);
}
```

Please note that in some cases, using `unordered_map` may not result in a speedup, especially if the hash function for the keys is poor and causes many collisions. But in general, for simple types like `long long`, the default hash function should be quite efficient.