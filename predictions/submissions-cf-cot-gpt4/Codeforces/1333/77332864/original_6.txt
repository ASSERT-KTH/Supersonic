Step 1:
We will use `unordered_map` instead of `map` for `mp` and `vis`. `unordered_map` has a constant lookup time O(1) on average while `map` has a log(n) lookup time. This will improve the performance significantly if `n` is large.

Step 2:
We will change the computation of `l` and `r` to avoid the redundant computation. `l` is not dependent on the loop, so it is not necessary to compute `l` in every iteration. We will compute `l` only when `vis[cnt[i]]` is true. `r` is the difference between `n` and `i`, and it is always decremented in every iteration. So, we will initialize `r` to `n` outside the loop and decrement it in every iteration.

Step 3:
We will change the computation of `ans` to avoid the redundant computation. `l * r`, `l`, `r` and `1` are always subtracted from `ans` when `mp[cnt[i]] - mx >= 0`. So, we will compute `l*r + l + r + 1` once and subtract it from `ans`.

Step 4:
We will replace `scanf` and `printf` with `cin` and `cout` as they are more C++-style and a bit faster.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
  int n;
  cin >> n;
  long long ans = n * 1LL * (n + 1) / 2LL;
  vector<long long> v(n + 1), cnt(n + 1, 0);
  for (int i = 1; i <= n; i++)
    cin >> v[i];
  unordered_map<long long, long long> mp, vis;
  mp[0] = 0;
  vis[0] = 1;
  long long mx = 0;
  long long r = n;
  for (int i = 1; i <= n; i++, r--) {
    cnt[i] = cnt[i - 1] + v[i];
    if (vis[cnt[i]]) {
      long long l = max(0LL, mp[cnt[i]] - mx);
      if (mp[cnt[i]] - mx >= 0) {
        long long total = (l * r) + l + r + 1;
        ans -= total;
        if (i - mp[cnt[i]] == n && mx)
          ans++;
      }
      mx = max(mp[cnt[i]] + 1, mx);
    }
    mp[cnt[i]] = i;
    vis[cnt[i]] = 1;
  }
  cout << ans << "\n";
}
```