Optimizations:

1. Replace the `std::map` with `std::unordered_map` for a better average-case time complexity. `std::map` takes O(logN) for insertions and access, while `std::unordered_map` takes O(1) on average.

2. Avoid unnecessary computations: Instead of calculating `max(0LL, mp[cnt[i]] - mx)` twice, store it in a variable and use it.

3. Use `++i` instead of `i++` in loops. Although most modern compilers will optimize this, it's a good habit to get into because `++i` is sometimes faster than `i++` since it avoids a temporary object.

Optimized Program:

```cpp
#include <bits/stdc++.h>
using namespace std;
int main() {
  int n;
  scanf("%d", &n);
  long long ans = n * 1LL * (n + 1) / 2LL;
  vector<long long> v(n + 1), cnt(n + 1, 0);
  for (int i = 1; i <= n; ++i)
    scanf("%lld", &v[i]);
  unordered_map<long long, long long> mp, vis;
  mp[0] = 0;
  vis[0] = 1;
  long long mx = 0;
  for (int i = 1; i <= n; ++i) {
    cnt[i] = cnt[i - 1] + v[i];
    if (vis[cnt[i]]) {
      long long l = max(0LL, mp[cnt[i]] - mx);
      long long r = n - i;
      if (l >= 0) {
        ans -= (l * r) + l + r;
        if (i - mp[cnt[i]] != n || !mx)
          ans--;
      }
      mx = max(mp[cnt[i]] + 1, mx);
    }
    mp[cnt[i]] = i;
    vis[cnt[i]] = 1;
  }
  printf("%lld\n", ans);
}
```