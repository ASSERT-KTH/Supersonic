Here are the optimizations that can be done:

1. Use "unordered_map" instead of "map": "map" in C++ is implemented as a Red-Black Tree which has a time complexity of O(Log n) for insertion and access. To optimize this, we can use "unordered_map" which has an average time complexity of O(1) for both insertion and access.

2. Reduce the scope of variables: The variables "l", "r" are declared for every iteration of the loop which makes them occupy memory unnecessarily. We can optimize this by declaring them once outside the loop.

3. Remove unnecessary zero initialization: In the given code, the map "mp" is being initialized with zero which is unnecessary as the map in C++ automatically initializes its elements to zero.

4. Use an array instead of vector where possible: Vector in C++ uses dynamic memory allocation which may lead to extra overhead in terms of performance. To optimize this, we can use an array instead of vector where possible.

Now, let us see the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
int main() {
  int n;
  scanf("%d", &n);
  long long ans = n * 1LL * (n + 1) / 2LL;
  long long v[n + 1], cnt[n + 1] = {0};
  for (int i = 1; i <= n; i++)
    scanf("%lld", &v[i]);
  unordered_map<long long, long long> mp, vis;
  vis[0] = 1;
  long long mx = 0;
  long long l, r;
  for (int i = 1; i <= n; i++) {
    cnt[i] = cnt[i - 1] + v[i];
    if (vis[cnt[i]]) {
      l = max(0LL, mp[cnt[i]] - mx);
      r = n - i;
      if (mp[cnt[i]] - mx >= 0) {
        ans -= (l * r) + l + r;
        if (i - mp[cnt[i]] != n || !mx)
          ans--;
      }
      mx = max(mp[cnt[i]] + 1, mx);
    }
    mp[cnt[i]] = i;
    vis[cnt[i]] = 1;
  }
  printf("%lld\n", ans);
}
```
Please note, the final choice of data structures and optimization techniques depends on the specific constraints and requirements of the problem you are solving. For example, if the number of elements is expected to be small, the overhead of using an unordered_map might outweigh its benefits. Similarly, if the range of the integers in the input is small, an array might be a better choice than a map or unordered_map.