The given C/C++ program is somewhat optimized already. However, there are some improvements that can be done:

1. First, include only necessary headers instead of using `#include <bits/stdc++.h>`. This header file includes almost all the standard C++ libraries, which increases the compile time.

2. Second, use `ios_base::sync_with_stdio(false); cin.tie(NULL);` at the beginning of the main function to turn off the synchronisation of all the C++ standard streams with their corresponding standard C streams. This can make I/O operations faster.

3. Third, switch from `scanf` and `printf` to `cin` and `cout` after turning off the synchronization. It's more idiomatic for C++ and can be faster when synchronization is off.

4. Fourth, if the `vis` map only contains 1's and 0's, it would be more efficient to use a `std::vector<bool>`, which uses approximately 1 bit per bool, instead of `std::map<long long, long long>`.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <map>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false); 
    cin.tie(NULL);

    int n;
    cin >> n;
  
    long long ans = n * 1LL * (n + 1) / 2LL;
    vector<long long> v(n + 1), cnt(n + 1, 0);
    vector<bool> vis(n + 1, 0);
  
    for (int i = 1; i <= n; i++)
        cin >> v[i];

    map<long long, long long> mp;
    mp[0] = 0;
    vis[0] = 1;

    long long mx = 0;
    for (int i = 1; i <= n; i++) {
        cnt[i] = cnt[i - 1] + v[i];
        if (vis[cnt[i]]) {
            long long l = max(0LL, mp[cnt[i]] - mx);
            long long r = n - i;
            if (mp[cnt[i]] - mx >= 0) {
                ans -= (l * r) + l + r;
                if (i - mp[cnt[i]] != n || !mx)
                    ans--;
            }
            mx = max(mp[cnt[i]] + 1, mx);
        }
        mp[cnt[i]] = i;
        vis[cnt[i]] = 1;
    }
    cout << ans << "\n";
}
```

This version of the program should have a shorter compile time and a slightly faster I/O. However, the algorithm itself is already optimized.