The optimization will be focused on the check function. This function has a complexity of O(n) where n is the number of digits in the number. It is because for each digit, a modulo operation is performed. The modulo operation is quite costly, so if we can reduce the number of modulos, we can speed up the program.

Optimization Steps:
1. Instead of converting the number to a string, we can use a while loop to iterate over the digits of the number. It will reduce the memory usage as no new string is created, and it will also reduce the time complexity as there is no need to find the length of the string.
2. We can break the loop as soon as we find a digit that doesn't divide the number. There is no need to check the remaining digits if we already know that the number is not what we are looking for. This optimization will significantly speed up the program for large numbers.

Here is the optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define ll long long

bool check(ll n) {
  ll temp = n;
  while (temp > 0) {
    int digit = temp % 10;
    if (digit != 0 && n % digit != 0) {
      return false;
    }
    temp /= 10;
  }
  return true;
}

void solve() {
  ll n;
  cin >> n;
  while (true) {
    if (check(n)) {
      cout << n << "\n";
      break;
    }
    else
      n++;
  }
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  int t = 1;
  cin >> t;
  while (t--) {
    solve();
  }
  return 0;
}
```

The other code lines are not modified because they are either necessary for the program to function correctly or they are already optimized.