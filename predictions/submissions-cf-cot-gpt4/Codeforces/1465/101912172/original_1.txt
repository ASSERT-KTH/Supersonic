Your code is already quite optimized but there are a few areas where we can make small changes to improve performance.

1. Remove unused macros: You have defined several macros like `si(x)`, `sl(x)`, `ss(s)`, etc. which are not used in your code. Removing them will not affect the performance, but it will improve readability and reduce memory footprint.

2. Inline small functions: In your code, `check(ll n)` is a small function which is called in a loop. Inlining this function may improve the performance by avoiding the function call overhead.

3. Avoid string conversion and division operation in check function: Converting the number to string in each iteration and then converting each digit back to an integer is quite costly. Also, the modulus operation is computationally expensive. We can optimize this by using a while loop and the remainder and quotient operation to get each digit of the number. 

4. Use increment operator: Using increment operator (n++) inside the if condition in solve() function can make the code cleaner.

Here is your optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define fast ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)

inline bool check(ll n) {
  ll temp = n;
  while(temp != 0){
    ll digit = temp%10;
    if(digit != 0 && n % digit != 0){
      return false;
    }
    temp /= 10;
  }
  return true;
}

void solve() {
  ll n;
  cin >> n;
  while (!check(n)) {
      n++;
  }
  cout << n << "\n";
}

int main() {
  fast;
  int t = 1;
  cin >> t;
  while (t--) {
    solve();
  }
  return 0;
}
```
This code should run a bit faster and use a bit less memory than the original code.