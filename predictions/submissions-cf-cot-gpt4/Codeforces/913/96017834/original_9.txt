Step 1: The function "answer(bool v)" is called multiple times in the function "solve". This function call can be avoided by directly printing the result inside the solve function.

Step 2: Instead of using "std::vector<std::vector<size_t>> g", we can use a 2D array, which is faster to access than a vector. However, this might not be feasible if "n" is a large number.

Step 3: The loop inside the "solve" function can be optimized by breaking the loop as soon as the condition "k < 3" is met.

Step 4: The "size_t x" in the range-based loop causes an unnecessary copy. We can replace it with "const auto& x".

Here is your optimized program:

```cpp
#include <iostream>
#include <vector>

void solve(const std::vector<std::vector<size_t>>& g) {
  const size_t n = g.size();
  for (size_t i = 0; i < n; ++i) {
    if (g[i].empty())
      continue;
    unsigned k = 0;
    for (const auto& x : g[i]) {
      k += g[x].empty();
      if (k >= 3) 
        break;
    }
    if (k < 3) {
      std::cout << "No\n";
      return;
    }
  }
  std::cout << "Yes\n";
}

int main() {
  size_t n;
  std::cin >> n;
  std::vector<std::vector<size_t>> g(n);
  for (size_t i = 1; i < n; ++i) {
    unsigned p;
    std::cin >> p;
    g[p - 1].push_back(i);
  }
  solve(g);
  return 0;
}
```

Please note that the optimization for the usage of 2D arrays is not included in this code, as it depends on the maximum value of "n" and could potentially lead to memory issues.