Optimization Steps:

1. The `answer` function is called multiple times in the `solve` function. Instead, we can use a `bool` flag to determine the result and print the result once at the end of the `solve` function. This reduces the number of times we need to call the `answer` function, hence improving the running time.

2. When we check if `k < 3`, we can break the loop as soon as `k` reaches 3. This way, we don't need to iterate through all elements in `g[i]`, hence saving some time.

3. Instead of using `std::vector<std::vector<size_t>>`, we can use a vector of lists. Because lists are implemented as doubly-linked lists, they have constant time complexity for insertions and deletions, whereas vectors have linear time complexity for insertions and deletions. This can save some time when the `push_back` function is called.

4. By default, `std::cin` and `std::cout` are synchronized with `stdio`, which can make I/O operations slow. We can disable this synchronization for faster I/O.

Optimized Program:

```cpp
#include <iostream>
#include <list>
#include <vector>
void solve(const std::vector<std::list<size_t>> &g) {
  const size_t n = g.size();
  bool result = true;
  for (size_t i = 0; i < n; ++i) {
    if (g[i].empty())
      continue;
    unsigned k = 0;
    for (const size_t x : g[i]) {
      if (g[x].empty())
        ++k;
      if (k == 3)
        break;
    }
    if (k < 3){
      result = false;
      break;
    }
  }
  std::cout << (result ? "Yes" : "No") << '\n';
}
int main() {
  std::ios::sync_with_stdio(false);
  size_t n;
  std::cin >> n;
  std::vector<std::list<size_t>> g(n);
  for (size_t i = 1; i < n; ++i) {
    unsigned p;
    std::cin >> p;
    g[p - 1].push_back(i);
  }
  solve(g);
  return 0;
}
```

However, it's important to note that the above optimizations might not always lead to noticeable improvements, especially for small inputs. Profiling the program with different inputs can help identify which optimizations are effective.