This program is already quite optimized, but there are a few minor improvements that can be made to potentially improve performance.

1. **Reserve memory for vector**: When we know the size of vector in advance, we can reserve the memory using the `reserve` function. This will prevent unnecessary reallocations when elements are added to the vector.

2. **Access vector elements directly using index**: Using range-based for loop is more readable and less error-prone, but accessing the elements directly using index can be slightly faster.

Let's modify the program step by step.

First, let's reserve memory for the vector `g`. It's size is known in advance (`n`), so we can reserve that much space:

```cpp
std::vector<std::vector<size_t>> g(n);
for (size_t i = 0; i < n; ++i) {
  g[i].reserve(n);
}
```

Next, let's replace the range-based for loop with a traditional for loop:

```cpp
for (size_t i = 0; i < n; ++i) {
    if (g[i].empty())
      continue;
    unsigned k = 0;
    for (size_t j = 0; j < g[i].size(); ++j)
      k += g[g[i][j]].empty();
    if (k < 3)
      return answer(false);
  }
```

Here's the optimized program:

```cpp
#include <iostream>
#include <vector>

void answer(bool v) {
  constexpr const char *s[2] = {"No", "Yes"};
  std::cout << s[v] << '\n';
}

void solve(const std::vector<std::vector<size_t>> &g) {
  const size_t n = g.size();
  for (size_t i = 0; i < n; ++i) {
    if (g[i].empty())
      continue;
    unsigned k = 0;
    for (size_t j = 0; j < g[i].size(); ++j)
      k += g[g[i][j]].empty();
    if (k < 3)
      return answer(false);
  }
  answer(true);
}

int main() {
  size_t n;
  std::cin >> n;
  std::vector<std::vector<size_t>> g(n);
  for (size_t i = 0; i < n; ++i) {
    g[i].reserve(n);
  }
  for (size_t i = 1; i < n; ++i) {
    unsigned p;
    std::cin >> p;
    g[p - 1].push_back(i);
  }
  solve(g);
  return 0;
}
```

Please note that these optimizations may not bring substantial improvements, but in a very large-scale scenario, they could potentially make a difference.