Explanation of optimization steps:

1. Changing the data structure: We are currently using an adjacency list to store our graph. But since we only care about the number of nodes, we can use an array or vector to store the degree of each node. This will reduce the memory usage and also improve the running time because we do not have to traverse the list of each node.

2. Reducing function calls: Instead of calling `answer()` function twice, we can use a boolean variable to store the result and call it once at the end.

3. Using `ios_base::sync_with_stdio(false)`: This will disable the synchronization between the C and C++ standard streams. By default, all standard streams are synchronized, which ensures a proper interleaved mixture of C and C++ I/O. But this synchronization causes a significant performance hit. Since we are not mixing C and C++ I/O in our program, we can safely disable it.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

void answer(bool v) {
  constexpr const char *s[2] = {"No", "Yes"};
  cout << s[v] << '\n';
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  size_t n;
  cin >> n;
  vector<size_t> degree(n, 0);
  for (size_t i = 1; i < n; ++i) {
    unsigned p;
    cin >> p;
    degree[p - 1]++;
  }

  bool isTree = true;
  for (size_t i = 0; i < n; ++i) {
    if (degree[i] > 0 && degree[i] < 3) {
      isTree = false;
      break;
    }
  }

  answer(isTree);
  return 0;
}
```

Note: `cin.tie(NULL);` unties `cin` from `cout`. By default, before any I/O operation on `cin`, all the buffered data in `cout` is flushed. This is to ensure a logical order of I/O operations in case they are mixed. But since we are not mixing input and output in our program, we can safely untie them to reduce unnecessary flushes and improve performance.