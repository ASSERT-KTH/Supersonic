The steps to optimize the C/C++ program:

1. Use `std::ios::sync_with_stdio(false); std::cin.tie(NULL);` before any I/O operations to speed up cin and cout.
2. Instead of checking if each node's connected nodes are empty, keep track of the number of empty nodes. If the counter is less than 3 for any node, then immediately return false without checking the rest of the nodes.
3. Instead of using `g[p - 1].push_back(i);` directly, reserve the size of the vector before inserting elements into it to avoid re-allocation of memory.

Here is the optimized program:

```c++
#include <iostream>
#include <vector>

void answer(bool v) {
  constexpr const char *s[2] = {"No", "Yes"};
  std::cout << s[v] << '\n';
}

void solve(const std::vector<std::vector<size_t>> &g) {
  const size_t n = g.size();
  for (size_t i = 0; i < n; ++i) {
    if (g[i].empty()) continue;
    unsigned k = 0;
    for (const size_t x : g[i]) {
      if (g[x].empty()) {
        ++k;
        if (k >= 3) break;
      }
    }
    if (k < 3) return answer(false);
  }
  answer(true);
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);

  size_t n;
  std::cin >> n;
  std::vector<std::vector<size_t>> g(n);

  for (size_t i = 1; i < n; ++i) {
    unsigned p;
    std::cin >> p;
    g[p - 1].reserve(n);
    g[p - 1].push_back(i);
  }

  solve(g);
  return 0;
}
```
