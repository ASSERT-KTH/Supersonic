Here are the steps to optimize the given program:

1. Switch from `scanf` to `cin` for consistency and potentially better performance.
2. The `pop_front` function is unnecessary. We can directly use `d.pop_front()` to remove the front element and `d.front()` to access the front element of the deque.
3. The `finalarray` vector is not required because the `deq` deque is already there. Instead of pushing elements to `finalarray`, we can keep them in `deq`.
4. Instead of always checking whether `deq.front() == mx`, we can add a counter i.e., `pos` which will be decremented in each iteration. When `pos` is zero, it means that we have reached the maximum element. This will reduce the number of comparisons.
5. We're storing pairs of elements (`v.push_back(make_pair(a, b));`) even after hitting the maximum element. We can avoid this by adding a check on `pos`.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
typedef unsigned long long ULL;
typedef long long LL;
#define FOR(i, a, b) for (int i = (a); i <= (b); ++i)
#define REP(i, n) FOR(i, 0, (int)(n - 1))
using namespace std;

int main() {
  int n, q;
  cin >> n >> q;
  deque<int> deq;
  vector<pair<int, int>> v;
  int mx = -1;
  int pos;
  REP(i, n) {
    int temp;
    cin >> temp;
    deq.push_back(temp);
    if (temp > mx) {
      mx = temp;
      pos = i;
    }
  }
  int cnt = 0;
  while (pos != 0) {
    int a = deq.front(); deq.pop_front();
    int b = deq.front(); deq.pop_front();
    if (a > b) {
      deq.push_front(a);
      deq.push_back(b);
    } else {
      deq.push_front(b);
      deq.push_back(a);
    }
    v.push_back(make_pair(a, b));
    cnt++;
    pos--;
  }
  REP(i, q) {
    LL query;
    cin >> query;
    if (query <= cnt) {
      printf("%d %d\n", v[query - 1].first, v[query - 1].second);
    } else {
      query -= cnt + 1;
      query %= n - 1;
      printf("%d %d\n", mx, deq[query + 1]);
    }
  }
  return 0;
}
```
