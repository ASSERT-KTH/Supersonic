This program does a lot of unnecessary deque manipulations, which can be expensive. Instead, we can keep track of the maximum value and its position, and directly move to that position when needed.

Optimization steps:

1. Instead of pushing back the smaller number to the deque, it's more efficient to just keep the larger number in the front and push back the smaller number. This way, we can avoid unnecessary `deq.push_front()` calls.

2. We don't need to check if `deq.front() == mx` in every iteration, since we know that the maximum number will eventually come to the front. So we can just break the loop when `cnt` becomes equal to `pos`.

3. We can eliminate the `pop_front(deq)` function and directly use the `deque::pop_front()` function. It has the same functionality and it's more clear and concise.

4. We can also eliminate the `while (!deq.empty())` loop by directly copying all elements from `deq` to `finalarray` using the `std::copy` function.

5. Finally, we should avoid using `scanf` and `printf` for I/O in C++ as they are slower than `cin` and `cout`. We should also use `'\n'` instead of `endl` to avoid unnecessary flushing of the output stream.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
typedef unsigned long long ULL;
typedef long long LL;
#define FOR(i, a, b) for (int i = (a); i <= (b); ++i)
#define REP(i, n) FOR(i, 0, (int)(n - 1))
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n, q;
  cin >> n >> q;
  deque<int> deq;
  vector<pair<int, int>> v;
  int mx = -1;
  int pos;
  REP(i, n) {
    int temp;
    cin >> temp;
    deq.push_back(temp);
    if (temp > mx) {
      mx = temp;
      pos = i;
    }
  }
  vector<int> finalarray;
  int cnt = 0;
  while (true) {
    if (cnt == pos) {
      finalarray.insert(finalarray.end(), deq.begin(), deq.end());
      break;
    }
    int a = deq.front();
    deq.pop_front();
    int b = deq.front();
    deq.pop_front();
    if (a > b) {
      deq.push_front(a);
      deq.push_back(b);
    } else {
      deq.push_front(b);
      deq.push_back(a);
    }
    v.push_back(make_pair(a, b));
    cnt++;
  }
  REP(i, q) {
    LL query;
    cin >> query;
    if (query <= cnt) {
      cout << v[query - 1].first << ' ' << v[query - 1].second << '\n';
    } else {
      query -= cnt + 1;
      query %= n - 1;
      cout << mx << ' ' << finalarray[query + 1] << '\n';
    }
  }
  return 0;
}
```
Note: Using `#include <bits/stdc++.h>` and `using namespace std;` is not recommended in production code as it includes unnecessary headers and can lead to naming conflicts. I've kept them here to stay close to the original code.