Here are the optimization steps:

1. Avoid using `#include <bits/stdc++.h>`. It includes a lot of unnecessary headers which increases compilation time. Instead, include only those headers which are needed in your program.

2. `using namespace std;` is generally considered bad practice in C++. It can lead to name clashes in larger programs. Instead, use `std::` prefix before standard library objects.

3. The `pop_front()` function is unnecessary. You can use `front()` and `pop_front()` of `deque` directly in the code. This would avoid function call overhead and improve runtime.

4. Instead of using `scanf` and `printf`, use `std::cin` and `std::cout`. It is more C++ style and can be faster with `ios_base::sync_with_stdio(false);` and `cin.tie(NULL);`

5. Instead of using `make_pair(a, b)`, use `{a, b}` to construct the pair. It's more modern and readable.

Here is the optimized code:

```cpp
#include <iostream>
#include <deque>
#include <vector>

typedef unsigned long long ULL;
typedef long long LL;

#define FOR(i, a, b) for (int i = (a); i <= (b); ++i)
#define REP(i, n) FOR(i, 0, (int)(n - 1))

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  int n, q;
  std::cin >> n >> q;

  std::deque<int> deq;
  std::vector<std::pair<int, int>> v;

  int mx = -1;
  int pos;

  REP(i, n) {
    int temp;
    std::cin >> temp;
    deq.push_back(temp);
    if (temp > mx) {
      mx = temp;
      pos = i;
    }
  }

  std::vector<int> finalarray;
  int cnt = 0;

  while (true) {
    if (deq.front() == mx) {
      while (!deq.empty()) {
        finalarray.push_back(deq.front());
        deq.pop_front();
      }
      break;
    }
    int a = deq.front();
    deq.pop_front();
    int b = deq.front();
    deq.pop_front();
    if (a > b) {
      deq.push_front(a);
      deq.push_back(b);
    } else {
      deq.push_front(b);
      deq.push_back(a);
    }
    v.push_back({a, b});
    cnt++;
  }

  REP(i, q) {
    LL query;
    std::cin >> query;
    if (query <= cnt) {
      std::cout << v[query - 1].first << " " << v[query - 1].second << "\n";
    } else {
      query -= cnt + 1;
      query %= n - 1;
      std::cout << mx << " " << finalarray[query + 1] << "\n";
    }
  }

  return 0;
}
```
Please note that these optimizations are quite minor (especially in terms of runtime) and the overall algorithmic complexity of the program remains the same. For more significant improvements, you would need to look into optimizing the algorithm itself.