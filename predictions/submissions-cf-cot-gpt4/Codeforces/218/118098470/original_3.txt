The given C++ program can be optimized in several ways. 

1. Arrays in C++ are 0-indexed, but this program uses 1-indexing. This wastes the 0th entry of the array, wasting memory. Changing to 0-indexing will make the program slightly more efficient and idiomatic.

2. The algorithm calls `max_element` inside a loop, which is inefficient. This results in a time complexity of O(n^2). Instead, we can use a priority queue to keep track of the largest element in the array in O(log n) time, reducing the overall time complexity to O(n log n).

3. The array `a` is sorted in ascending order, but then the elements are processed in descending order. It would be more efficient to sort them in descending order to start with, eliminating the need to iterate the array backwards.

Here's an optimized version of this program with these improvements:

```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
    int n, m, k;
    scanf("%d%d", &n, &m);
    k = n;
    vector<int> a(m);
    priority_queue<int> pq;
    for (int i = 0; i < m; i++) {
        scanf("%d", &a[i]);
        pq.push(a[i]);
    }
    sort(a.rbegin(), a.rend());
    int sum = 0, sum1 = 0;
    for (int i = 0; i < m && k > 0; i++) {
        for (int j = 0; j < a[i] && k > 0; j++) {
            sum += a[i] - j;
            k--;
        }
    }
    for (int i = 0; i < n; i++) {
        sum1 += pq.top();
        int temp = pq.top();
        pq.pop();
        if (temp > 1) {
            pq.push(temp - 1);
        }
    }
    printf("%d %d\n", sum1, sum);
    return 0;
}
```
This optimized program has a lower time complexity and uses memory more efficiently than the original.