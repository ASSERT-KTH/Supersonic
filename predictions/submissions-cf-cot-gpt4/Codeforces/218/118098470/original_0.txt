Optimization Steps:

1. Instead of using `bits/stdc++.h`, we will include only the required headers. This reduces the compile time and also it is a good practice to include only what is necessary for the code.
2. We will use `std::ios_base::sync_with_stdio(false); std::cin.tie(NULL);` before any I/O operations to make them faster.
3. We will replace scanf and printf with cin and cout as they are more type-safe and easier to use.
4. Instead of finding the max element in every iteration of the second loop, we can maintain a priority queue (max heap), which will give us the maximum element in O(1) time. This will reduce the time complexity from O(n*m) to O(n log m).
5. We will use `std::vector<int>` instead of a raw array, which is safer and more flexible.

Optimized Program:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, m, sum = 0, sum1 = 0, k;
  cin >> n >> m;
  k = n;

  vector<int> a(m+1);
  priority_queue<int> maxHeap;
  for (int i = 1; i <= m; i++) {
    cin >> a[i];
    maxHeap.push(a[i]);
  }
  sort(a.begin() + 1, a.end());

  for (int i = 1; i <= m; i++) {
    for (int j = 0; j < a[i] && k > 0; j++, k--) {
      sum = sum + a[i] - j;
    }
  }

  for (int i = 1; i <= n; i++) {
    int maximum = maxHeap.top();
    maxHeap.pop();
    sum1 = sum1 + maximum;
    if (maximum > 1)
      maxHeap.push(maximum - 1);
  }

  cout << sum1 << " " << sum << "\n";
  return 0;
}
```