The program can be optimized in the following ways:

1. Avoid using `#include <bits/stdc++.h>`: This header file includes practically every Standard Library header, which may considerably slow down the compilation process. We should only include the headers that we need.

2. Avoid using `using namespace std`: This can potentially lead to name clashes, which can be especially problematic in larger programs. It's generally better to use the `std::` prefix when accessing Standard Library functions.

3. Using `std::priority_queue` instead of `std::max_element`: The `std::max_element` function has a time complexity of O(n), which can be costly when it's called in a loop. `std::priority_queue` is a heap-based data structure that allows us to access the maximum element in O(1) time.

4. Avoiding unnecessary computations: In the first loop that calculates `sum`, we don't need to subtract `j` from `a[i]` on each iteration. We can instead multiply `a[i]` by the number of elements we're adding, then subtract the sum of the first `j` natural numbers (`j*(j+1)/2`).

Here's the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

int main() {
    int n, m, sum = 0, sum1 = 0;
    std::scanf("%d%d", &n, &m);
    std::vector<int> a(m+1);
    std::priority_queue<int> pq;
    for (int i = 1; i <= m; i++) {
        std::scanf("%d", &a[i]);
        pq.push(a[i]);
    }
    std::sort(a.begin()+1, a.end());
    for (int i = 1; i <= m; i++) {
        int count = std::min(n, a[i]);
        sum += count * a[i] - count * (count - 1) / 2;
        n -= count;
        if (n == 0) break;
    }
    while (n--) {
        sum1 += pq.top();
        int t = pq.top();
        pq.pop();
        pq.push(t-1);
    }
    std::printf("%d %d\n", sum1, sum);
    return 0;
}
```

This optimized version is much more efficient in terms of both runtime and memory usage.