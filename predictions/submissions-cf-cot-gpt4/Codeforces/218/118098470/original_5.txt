The steps to consider while optimizing this code are:

1. The inclusion of `<bits/stdc++.h>` is discouraged, as it includes all the libraries which can slow down the compilation process. It is better to include only necessary libraries. 

2. In the second loop, `max_element` function is called for each iteration. This function scans the entire array to find the maximum. As a result, it causes a time complexity of `O(n*m)`. To improve the runtime, a priority queue can be used. A priority queue allows us to fetch the maximum element in `O(1)` time complexity. 

3. The array `a` is 1-indexed. Shifting it to 0-indexing is more conventional and less confusing in C++. 

4. Using `scanf` and `printf` is a C-style I/O. It's better to use C++ I/O (cin, cout) as they are more secure and less error-prone. 

5. Use of meaningful variable names enhances the readability of the code.

Here is the optimized code:

```cpp
#include <iostream>
#include <algorithm>
#include <queue>

using namespace std;

int main() {
    int n, m, k;
    cin >> n >> m;
    k = n;
    
    priority_queue<int> pq;
    for (int i = 0; i < m; i++) {
        int temp;
        cin >> temp;
        pq.push(temp);
    }

    int sum = 0;
    for (int i = 0; i < m; i++) {
        int top = pq.top();
        for (int j = 0; j < top; j++) {
            if (k > 0) {
                sum += top - j;
                k--;
            }
        }
        pq.pop();
    }
    
    int sum1 = 0;
    while (!pq.empty() && n--) {
        sum1 += pq.top();
        int temp = pq.top() - 1;
        pq.pop();
        pq.push(temp);
    }
    
    cout << sum1 << " " << sum << "\n";
    return 0;
}
```
Please note that the way the priority queue is used in the optimized code, it might not behave exactly as the original code if the array `a` contains duplicate elements.