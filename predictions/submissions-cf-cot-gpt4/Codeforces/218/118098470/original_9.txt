This program can be optimized in several ways:

1. Use `std::ios::sync_with_stdio(false); std::cin.tie(NULL);` to speed up I/O operations.
2. Instead of using `scanf` and `printf`, use `std::cin` and `std::cout` which are faster.
3. The second loop is used to find the maximum element in the array for each iteration. This is not optimal. We can use a priority queue to always get the maximum element in O(log n) time. This step significantly reduces the time complexity from O(n^2) to O(n log n).
4. The first loop can also be optimized. No need to loop from 0 to a[i], it is enough to subtract the minimum between k and a[i] from the sum and decrease k by the same amount. This step reduces the time complexity from O(n*m) to O(m).

Here is the optimized version of the program:

```cpp
#include <bits/stdc++.h>
using namespace std;

int a[1020];

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(NULL);

    int n, m, sum = 0, sum1 = 0, k;
    cin >> n >> m;
    k = n;
    priority_queue<int> pq;

    for (int i = 0; i < m; i++) {
        cin >> a[i];
        pq.push(a[i]);
    }

    for (int i = 0; i < m; i++) {
        int min_val = min(k, a[i]);
        sum += min_val * (a[i] - min_val + 1) / 2;
        k -= min_val;
        if (k == 0) break;
    }

    for (int i = 0; i < n; i++) {
        int max_val = pq.top();
        sum1 += max_val;
        pq.pop();
        pq.push(max_val - 1);
    }

    cout << sum1 << " " << sum << "\n";

    return 0;
}
```
Note: The `bits/stdc++.h` header file is a GNU GCC extension and not part of the C++ standard. It includes all standard C++ headers and is typically used in competitive programming. However, it's not recommended for production code. It's better to include only the headers that you need.