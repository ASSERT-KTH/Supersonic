This program can be optimized in the following ways:

1. Eliminate the use of `<bits/stdc++.h>`. This header file includes most of the standard library in C++, which is quite large and can slow down the compilation process. Including only the necessary libraries will speed up this process. In this case, we'll include `<stdio.h>` for standard input/output operations, `<algorithm>` for `sort()` and `max_element()` functions and `<vector>` for dynamic array.

2. Using `std::vector<int>` instead of a C-style array. This will make the code more robust and safer, as `std::vector` manages its own memory.

3. The inner loop in the first sum calculation isn't necessary. We just multiply `(a[i] * (a[i] + 1))/2` (sum of 1 to `a[i]`) and subtract `(j * (j + 1))/2` (sum of 1 to `j`) where `j = max(0, a[i] - k)`. This reduces the time complexity from O(n*m) to O(m).

4. We don't need to find the maximum element for each iteration in the second sum. We can just iterate in reverse order, which would be more efficient.

5. Replacing `scanf` and `printf` with C++'s `cin` and `cout` would make the code more consistent, but they're slower than the C-style functions. So, we'll keep `scanf` and `printf`.

Below is the optimized code:

```cpp
#include <vector>
#include <algorithm>
#include <stdio.h>

int main() {
  int n, m, k;
  scanf("%d%d", &n, &m);
  k = n;
  
  std::vector<int> a(m + 1);
  
  for (int i = 1; i <= m; i++) {
    scanf("%d", &a[i]);
  }
  
  std::sort(a.begin() + 1, a.end());
  
  int sum = 0;
  for (int i = 1; i <= m; i++) {
    int j = std::max(0, a[i] - k);
    sum += ((a[i] * (a[i] + 1)) / 2) - ((j * (j + 1)) / 2);
    k -= a[i] - j;
  }

  int sum1 = 0;
  for (int i = m; i >= m - n + 1; i--) {
    sum1 += a[i];
    a[i - 1] += a[i];
  }
  
  printf("%d %d\n", sum1, sum);
  return 0;
}
```