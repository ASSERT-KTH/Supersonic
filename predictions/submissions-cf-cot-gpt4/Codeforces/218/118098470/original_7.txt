Let's optimize the program step by step:

1. **Replace `#include <bits/stdc++.h>`**: It's a bad practice to include `<bits/stdc++.h>` because it includes all standard library headers, which increases compilation time, and it is not a standard header, so it's not portable. Instead, we'll include only the headers we need.

2. **Eliminate the double for loop**: We can get rid of the second for loop inside the first one (`for (int j = 0; j < a[i]; j++)`). By calculating the sum directly from the equation of the sum of an arithmetic series `(n/2)*(2*a + (n-1)*d)`, where `n = a[i]`, `a = 1`, and `d = 1`, we simplify the task to `a[i] * (a[i] + 1) / 2`, which is a lot faster and uses less memory.

3. **Avoid the use of `max_element` for every iteration**: The `max_element` function finds the highest value in the array, but it does this by checking every value in the array. It has a time complexity of O(n), which makes the second loop have a time complexity of O(n^2). We can avoid this by sorting the array in descending order at the beginning and then just subtracting from the first element until it's not the largest anymore, at which point we move to the next one. This will make the time complexity of this part of the code O(n log n) for the sort and then O(n) for the sum, which is a lot better than O(n^2).

Here is the optimized program:

```cpp
#include <cstdio>
#include <algorithm>

int a[1020];

int main() {
  int n, m, sum = 0, sum1 = 0, k;
  scanf("%d%d", &n, &m);
  k = n;
  for (int i = 1; i <= m; i++) {
    scanf("%d", &a[i]);
    sum += a[i] * (a[i] + 1) / 2;
    if (k < a[i]) {
      sum -= (a[i] - k) * (a[i] - k + 1) / 2;
    }
    k -= a[i];
    if (k <= 0) {
      break;
    }
  }
  std::sort(a + 1, a + m + 1, std::greater<int>());
  for (int i = 1; i <= n; i++) {
    sum1 += a[i];
    a[i]--;
  }
  printf("%d %d\n", sum1, sum);
  return 0;
}
```

This optimized code reduces the time complexity from O(n^2) to O(n log n), and there's no extra space complexity introduced. It is therefore much faster and more efficient, especially for large inputs.