The given C/C++ program can be optimized for running time via the following steps:

1. The inner loop in the first for-loop is traversing 'a[i]' times, which can be optimized by calculating the sum of first 'a[i]' natural numbers directly using the formula n*(n+1)/2. This will reduce the time complexity from O(n^2) to O(n).

2. The maximum element is being found in the second for-loop by traversing the array each time from 1 to 'm'. The maximum element and its index can be stored in a variable and updated only when the current maximum is being used. This will reduce the time complexity from O(n*m) to O(n).

Here is the optimized code:

```C++
#include <bits/stdc++.h>
using namespace std;
int a[1020];
int main() {
  int n, m, sum = 0, sum1 = 0, k;
  scanf("%d%d", &n, &m);
  k = n;
  for (int i = 1; i <= m; i++) {
    scanf("%d", &a[i]);
  }
  sort(a + 1, a + m + 1);
  for (int i = 1; i <= m; i++) {
    int temp = min(k, a[i]);
    sum += temp * (a[i] + a[i] - temp + 1) / 2;
    k -= temp;
  }

  int max_index = m;
  for (int i = 1; i <= n; i++) {
    sum1 += a[max_index];
    if (--a[max_index] == 0 && max_index > 1) {
      max_index--;
    }
  }
  printf("%d %d\n", sum1, sum);
  return 0;
}
```
This code will run faster than the original one due to a reduction in time complexity. The memory usage remains the same as no extra space is used.