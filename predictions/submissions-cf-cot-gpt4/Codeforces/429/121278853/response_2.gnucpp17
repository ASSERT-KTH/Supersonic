#include <iostream>
#include <vector>
#include <algorithm>

typedef long long int ll;
typedef std::vector<int> vi;
typedef std::vector<ll> vll;
typedef std::vector<vll> vvll;

#define MOD 1000000007
#define MAX 200007

ll mul(ll a, ll b) { return ((a * b) % MOD); }
ll add(ll a, ll b) { return ((a + b) % MOD); }
ll sub(ll a, ll b) { return (((a - b) % MOD + MOD) % MOD); }
ll mpow(ll a, ll b) {
  ll ans = 1;
  ll po = a;
  while (b != 0) {
    if (b % 2) {
      ans = (ans * po) % MOD;
    }
    po = (po * po) % MOD;
    b /= 2;
  }
  return ans;
}

ll n, ans;
vll init(100100), goal(100100), res;
vvll g(100100);

void dfs(ll node, ll par, ll pre, ll ppre) {
  if (ppre) {
    init[node] ^= 1;
  }
  if (init[node] != goal[node]) {
    ans++;
    res.push_back(node);
    ppre ^= 1;
  }
  for (auto v : g[node]) {
    if (v == par)
      continue;
    dfs(v, node, ppre, pre);
  }
}

void solve() {
  std::cin >> n;
  for(ll i=0; i<n-1; i++) {
    ll a, b;
    std::cin >> a >> b;
    g[a].push_back(b);
    g[b].push_back(a);
  }
  for(ll i=0; i<n; i++) { std::cin >> init[i+1]; }
  for(ll i=0; i<n; i++) { std::cin >> goal[i+1]; }
  dfs(1, 0, 0, 0);
  std::cout << ans << '\n';
  for (auto v : res) {
    std::cout << v << '\n';
  }
}

int main() {
  solve();
  return 0;
}