#include <iostream>
#include <vector>
using namespace std;

typedef long long int ll;
typedef vector<ll> vll;

const ll mod = int(1e9 + 7);

ll mul(ll a, ll b) { return ((a % mod) * (b % mod)) % mod; }
ll add(ll a, ll b) { return ((a % mod) + (b % mod)) % mod; }
ll sub(ll a, ll b) {
  ll ans = ((a % mod) - (b % mod)) % mod;
  ans %= mod;
  ans = (ans + mod) % mod;
  return ans;
}

ll n, init[100100], goal[100100], ans;
vector<ll> g[100100];
vll res;

void dfs(ll node, ll par, ll pre, ll ppre) {
  if (ppre) {
    init[node] ^= 1;
  }
  if (init[node] != goal[node]) {
    ans++;
    res.push_back(node);
    ppre ^= 1;
  }
  for (auto v : g[node]) {
    if (v == par)
      continue;
    dfs(v, node, ppre, pre);
  }
}

void solve() {
  cin >> n;
  res.reserve(n);
  for(int i=0;i<n-1;i++) {
    ll a, b;
    cin >> a >> b;
    g[a].push_back(b);
    g[b].push_back(a);
  }
  for(int i=0;i<n;i++) { cin >> init[i + 1]; }
  for(int i=0;i<n;i++) { cin >> goal[i + 1]; }
  dfs(1, 0, 0, 0);
  cout << ans << '\n';
  for (auto v : res) {
    cout << v << '\n';
  }
}

int main() {
  solve();
  return 0;
}