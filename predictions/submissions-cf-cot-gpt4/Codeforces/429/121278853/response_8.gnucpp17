#include <bits/stdc++.h>
using namespace std;

#define fast ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0)
#define fr(l, h) for (ll i = l; i < h; i++)
#define repo(i, b) for (ll i = 0; i < b; i++)
#define endl '\n'
#define pb push_back

typedef long long int ll;
typedef vector<ll> vll;
#define MAX 200007
#define MOD int(1e9 + 7)

vll g[MAX];
vll res;
ll init[MAX], goal[MAX], ans, n;

ll mul(ll a, ll b) { a %= MOD; b %= MOD; return (a * b) % MOD; }
ll add(ll a, ll b) { a %= MOD; b %= MOD; return (a + b) % MOD; }
ll sub(ll a, ll b) { return ((a % MOD) - (b % MOD) + MOD) % MOD; }

void dfs(ll node, ll par, ll pre, ll ppre) {
  if (ppre) {
    init[node] ^= 1;
  }
  if (init[node] != goal[node]) {
    ans++;
    res.pb(node);
    ppre ^= 1;
  }
  for (auto v : g[node]) {
    if (v == par)
      continue;
    dfs(v, node, ppre, pre);
  }
}

void solve() {
  cin >> n;
  res.reserve(n); // reserving space for 'res' vector
  repo(i, n - 1) {
    ll a, b;
    cin >> a >> b;
    g[a].pb(b);
    g[b].pb(a);
  }
  repo(i, n) { cin >> init[i + 1]; }
  repo(i, n) { cin >> goal[i + 1]; }
  dfs(1, 0, 0, 0);
  cout << ans << endl;
  for (auto v : res) {
    cout << v << endl;
  }
}

signed main() {
  fast;
  solve();
}