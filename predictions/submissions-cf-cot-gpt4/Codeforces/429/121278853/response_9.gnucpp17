#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

#define fr(l, h) for (ll i = l; i < h; i++)
#define rep(i, a, b) for (ll i = a; i < b; i++)
#define repo(i, b) for (ll i = 0; i < b; i++)
#define repb(i, a, b) for (ll i = b - 1; i >= a; i--)
#define repbo(i, b) for (ll i = b - 1; i >= 0; i--)
#define endl '\n'
#define MP make_pair
typedef long long int ll;
typedef unsigned long long int ull;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef pair<int, int> pi;
typedef pair<ll, ll> pll;
typedef vector<pi> vpi;
typedef vector<string> vs;
#define MAX 200007
#define MOD int(1e9 + 7)
#define mod int(1e9 + 7)
#define INF ll(8230219982008199610)
#define MINF ll(-8230219982008199610)
#define IL INT_MAX
#define MIL INT_MIN
#define PI 2 * acos(0.0)
#define mem(a, n) memset(a, n, sizeof(a))
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) (a * (b / gcd(a, b)))
#define sz(x) int(x.size())
#define pb push_back
#define ff first
#define ss second

ll mul(ll a, ll b) { return ((a % MOD) * (b % MOD)) % MOD; }
ll add(ll a, ll b) { return ((a % MOD) + (b % MOD)) % MOD; }
ll sub(ll a, ll b) {
  ll ans = ((a % mod) - (b % mod)) % mod;
  ans %= mod;
  ans = (ans + mod) % mod;
  return ans;
}

ll n, init[100100], goal[100100], ans;
vector<ll> g[100100];
vll res;

void dfs(ll node, ll par, ll pre, ll ppre) {
  if (ppre) {
    init[node] ^= 1;
  }
  if (init[node] != goal[node]) {
    ans++;
    res.pb(node);
    ppre ^= 1;
  }
  for (ll v : g[node]) {
    if (v == par)
      continue;
    dfs(v, node, ppre, pre);
  }
}

void solve() {
  cin >> n;
  repo(i, n - 1) {
    ll a, b;
    cin >> a >> b;
    g[a].pb(b);
    g[b].pb(a);
  }
  repo(i, n) { cin >> init[i + 1]; }
  repo(i, n) { cin >> goal[i + 1]; }
  dfs(1, 0, 0, 0);
  cout << ans << '\n';
  for (ll v : res) {
    cout << v << '\n';
  }
}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  ll t;
  solve();
}