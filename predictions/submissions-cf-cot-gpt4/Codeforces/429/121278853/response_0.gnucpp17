#include <iostream>
#include <vector>
using namespace std;

using ll = long long int;
using vll = vector<ll>;
using vvll = vector<vll>;

#define MOD int(1e9 + 7)
#define mod int(1e9 + 7)

ll mul(ll a, ll b) { return ((a % MOD) * (b % MOD)) % MOD; }
ll add(ll a, ll b) { return ((a % MOD) + (b % MOD)) % MOD; }
ll sub(ll a, ll b) {
  ll ans = ((a % mod) - (b % mod)) % mod;
  ans %= mod;
  ans = (ans + mod) % mod;
  return ans;
}

ll n, init[100100], goal[100100], ans;
vvll g(100100);
vll res;

void dfs(ll node, ll par, ll pre, ll ppre) {
  if (ppre) {
    init[node] ^= 1;
  }
  if (init[node] != goal[node]) {
    ans++;
    res.push_back(node);
    ppre ^= 1;
  }
  for (auto v : g[node]) {
    if (v == par)
      continue;
    dfs(v, node, ppre, pre);
  }
}

void solve() {
  cin >> n;
  for(ll i = 0; i < n - 1; i++) {
    ll a, b;
    cin >> a >> b;
    g[a].push_back(b);
    g[b].push_back(a);
  }
  for(ll i = 0; i < n; i++) { cin >> init[i + 1]; }
  for(ll i = 0; i < n; i++) { cin >> goal[i + 1]; }
  dfs(1, 0, 0, 0);
  cout << ans << '\n';
  for (auto v : res) {
    cout << v << '\n';
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  solve();
  return 0;
}