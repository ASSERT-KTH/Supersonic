#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

typedef long long int ll;
typedef vector<ll> vll;
typedef vector<vll> vvll;

void dfs(ll node, ll par, ll pre, ll ppre, ll& ans, vll& res, vvll& g, vll& init, vll& goal) {
  if (ppre) {
    init[node] ^= 1;
  }
  if (init[node] != goal[node]) {
    ans++;
    res.push_back(node);
    ppre ^= 1;
  }
  for (auto v : g[node]) {
    if (v == par)
      continue;
    dfs(v, node, ppre, pre, ans, res, g, init, goal);
  }
}

void solve() {
  ll n;
  cin >> n;
  vvll g(n + 1);
  for(ll i = 0; i < n - 1; i++) {
    ll a, b;
    cin >> a >> b;
    g[a].push_back(b);
    g[b].push_back(a);
  }
  vll init(n + 1), goal(n + 1);
  for(ll i = 1; i <= n; i++) { cin >> init[i]; }
  for(ll i = 1; i <= n; i++) { cin >> goal[i]; }
  ll ans = 0;
  vll res;
  dfs(1, 0, 0, 0, ans, res, g, init, goal);
  cout << ans << '\n';
  for (auto v : res) {
    cout << v << '\n';
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  solve();
}