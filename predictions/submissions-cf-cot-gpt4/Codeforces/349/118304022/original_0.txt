The optimization can be made in several ways:

1. Avoid Variable-Length Arrays: Variable-Length Arrays are not part of the ISO C++ standards and hence it is not advisable to use them. We can use `vector<int>` instead of `int a[n];`

2. Avoid using bits/stdc++.h: This header file includes most of the standard C++ libraries and is heavy which slows down the compilation process. We should include only those libraries which are used in our program.

3. Avoid using #define for verdict: Macros are not type safe, and they are not recommended in C++. We can use a function to get the verdict.

4. Avoid using multiset for st: Multiset is not the best choice here as it allows multiple instances of elements. We can use set instead which will reduce memory usage.

5. Avoid using namespace std: It is a bad practice to use namespace std as it may lead to name collision and unexpected results.

Here is the optimized program:

```cpp
#include <iostream>
#include <set>
#include <vector>

std::string verdict(bool ok) {
    return ok ? "YES" : "NO";
}

int main() {
    int n;
    std::cin >> n;
    std::vector<int> a(n);
    std::set<int, std::greater<>> st;
    const int coins[] = {75, 50, 25};
    for (auto &i : a)
        std::cin >> i;
    bool ok = true;
    for (int i : a) {
        int ret = i - 25;
        if (ret) {
            for (int coin : coins) {
                while (ret && st.count(coin) && ret >= coin)
                    ret -= coin, st.erase(st.find(coin));
            }
            if (ret) {
                ok = false;
                break;
            }
        }
        st.insert(i);
    }
    std::cout << verdict(ok) << '\n';
    return 0;
}
```
This optimized version of the program should have better performance and memory usage.