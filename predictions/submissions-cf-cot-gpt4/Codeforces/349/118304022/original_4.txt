This program seems to process a sequence of integer values representing coins and checks whether it's possible to give change for each coin in the sequence. The original code is almost optimal, but some small changes can be made to make it slightly more efficient.

Optimization steps:
1. Use `std::array` instead of C-style array for `coins`.
2. Instead of using `multiset<int, greater<>>` which uses a lot of memory and time due to rebalancing, consider using `unordered_multiset` that provides constant time insertion and deletion.
3. Instead of `st.count(coin)` and `st.find(coin)` which results in two searches in the multiset for the same coin, consider using `st.find(coin)` directly and check if it's `end()`. This will reduce the number of searches in the multiset from 2 to 1 for each coin.
4. Move the `st.insert(i);` statement into the `if (ret == 0)` block. This way, the coin is only inserted into the set if it's possible to give change for it. This can slightly reduce the memory usage of the program.

Optimized code:
```cpp
#include <bits/stdc++.h>
using namespace std;
#define verdict (ok ? "YES" : "NO")
int main() {
  int n;
  cin >> n;
  vector<int> a(n);
  unordered_multiset<int> st;
  const array<int, 3> coins = {75, 50, 25};
  for (auto &i : a)
    cin >> i;
  bool ok = true;
  for (int i : a) {
    int ret = i - 25;
    if (ret) {
      for (int coin : coins) {
        auto it = st.find(coin);
        while (ret && it != st.end() && ret >= coin) {
          ret -= coin;
          st.erase(it);
          it = st.find(coin);
        }
      }
      if (ret) {
        ok = false;
        break;
      } else {
        st.insert(i);
      }
    } else {
      st.insert(i);
    }
  }
  cout << verdict << '\n';
  return 0;
}
```
Please note that the use of `#include <bits/stdc++.h>` and `using namespace std;` is considered bad practice in C++ because it includes a lot of unnecessary code and using directives can cause name collisions. However, since you asked for small modifications to the original code, I kept these lines.