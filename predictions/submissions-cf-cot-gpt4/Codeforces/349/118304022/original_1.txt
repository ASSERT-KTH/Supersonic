The existing program has a few areas we can optimize:

1. Dynamic Array Allocation: In C++, it is not recommended to create an array with a size that is not a compile-time constant. Here, an array 'a' is created with size 'n', which is a runtime value. To correct this, you can use a `std::vector` instead of a plain array. It will automatically manage the memory for you, and it's much safer to use.

2. Unnecessary `std::multiset` Operations: The find operation on the `std::multiset` is not necessary because the erase operation in `std::multiset` also finds the element and removes it. We can avoid the extra find operation by directly calling erase with the value.

3. Use Early Exit: Instead of checking the boolean 'ok' at the end, we can exit the program as soon as 'ok' is false. This will save some unnecessary loop iterations.

4. Avoid using `#define`: Instead of using a macro for the verdict, you can directly print the outcome in the `cout` statement itself.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <set>

int main() {
  int n;
  std::cin >> n;
  std::vector<int> a(n);
  std::multiset<int, std::greater<>> st;
  const int coins[] = {75, 50, 25};

  for (auto &i : a)
    std::cin >> i;
  
  for (int i : a) {
    int ret = i - 25;
    if (ret) {
      for (int coin : coins) {
        while (ret && st.count(coin) && ret >= coin) {
          ret -= coin;
          st.erase(coin);
        }
      }
      if (ret) {
        std::cout << "NO" << '\n';
        return 0;
      }
    }
    st.insert(i);
  }
  std::cout << "YES" << '\n';
  return 0;
}
```
The optimization mainly includes using `std::vector` instead of an array, removing unnecessary operations on `std::multiset`, early exiting, and avoiding the use of macros.