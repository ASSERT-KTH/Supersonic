Here are the steps to optimize the provided code:

1. Remove `#include <ios>`: This header file is not required in your code. Removing it will reduce the size of your executable file.

2. Use `std::ios::sync_with_stdio(false)` and `std::cin.tie(NULL)`: These two lines disable the synchronization of all the C++ standard streams with their corresponding standard C streams if it is called before the program performs its first input or output operation. Adding `std::cout.tie(NULL)` can also potentially speed up the output as well.

3. Pass by reference, not by value: This can significantly improve the performance of your program as passing by value can be expensive in terms of memory and time for large objects.

4. Use `reserve()` function: When you know the number of elements that will be inserted into the vector, use the `reserve()` function to allocate the memory in advance. This can significantly improve the performance by avoiding reallocations.

5. Use `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(NULL);`: This will make input and output more efficient. It can significantly speed up the cin and cout performance.

6. Use prefix increment (++i) instead of postfix (i++): In C++, the prefix increment operator (++i) is generally more efficient than the postfix increment operator (i++) for objects.

Here is your optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;

void compute_depth(int u, int p, vector<vector<int>>& adj, vector<int>& depth) {
  for (int v : adj[u]) {
    if (v != p) {
      depth[v] = depth[u] + 1;
      compute_depth(v, u, adj, depth);
    }
  }
}

void compute_below(int u, int p, vector<vector<int>>& adj, vector<int>& below) {
  for (int v : adj[u]) {
    if (v != p) {
      compute_below(v, u, adj, below);
      below[u] += below[v] + 1;
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n, k;
  cin >> n >> k;

  vector<vector<int>> adj(n);
  adj.reserve(n);

  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    cin >> u >> v;
    --u;
    --v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }

  vector<int> depth(n), below(n), score(n);
  depth.reserve(n);
  below.reserve(n);
  score.reserve(n);

  compute_depth(0, -1, adj, depth);
  compute_below(0, -1, adj, below);

  for (int i = 0; i < n; ++i) {
    score[i] = depth[i] - below[i];
  }

  sort(score.begin(), score.end(), greater<int>());
  cout << accumulate(score.begin(), score.begin() + k, 0ll) << '\n';
}
```