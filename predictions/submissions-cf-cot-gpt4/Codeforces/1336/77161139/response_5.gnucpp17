#include <algorithm>
#include <ios>
#include <iostream>
#include <numeric>
#include <vector>
#include <queue>
using namespace std;

void compute_depth(int u, int p, vector<vector<int>> &adj, vector<int> &depth) {
  for (int v : adj[u]) {
    if (v != p) {
      depth[v] = depth[u] + 1;
      compute_depth(v, u, adj, depth);
    }
  }
}

void compute_below(int u, int p, vector<vector<int>> &adj, vector<int> &below) {
  for (int v : adj[u]) {
    if (v != p) {
      compute_below(v, u, adj, below);
      below[u] += below[v] + 1;
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int n, k;
  cin >> n >> k;
  vector<vector<int>> adj(n);
  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    std::cin >> u >> v;
    --u;
    --v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  vector<int> depth(n);
  compute_depth(0, -1, adj, depth);
  vector<int> below(n);
  compute_below(0, -1, adj, below);

  // Use a priority queue to keep track of the 'k' largest scores
  priority_queue<int, vector<int>, greater<int>> pq;
  for (auto i = 0; i < n; ++i) {
    int score = depth[i] - below[i];
    if (pq.size() < k) {
      pq.push(score);
    } else if (score > pq.top()) {
      pq.pop();
      pq.push(score);
    }
  }

  // Compute the sum of the 'k' largest scores
  long long sum = 0;
  while (!pq.empty()) {
    sum += pq.top();
    pq.pop();
  }
  cout << sum << '\n';
}