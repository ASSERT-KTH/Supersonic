The program is already quite optimized, but there are some small improvements that could be made. 

1. Avoid pass by value: In the function compute_depth and compute_below, the adj vector is passed by value, which means that a copy of the vector is created each time. This could be avoided by passing by reference.

2. Reserve memory for vectors: When you know the size of the vector in advance, it's better to use reserve function to avoid extra memory reallocations.

3. Avoid multiple accesses to the same element in vector: In the loop of compute_depth and compute_below, the element of vector "v" is accessed multiple times. It's better to use a reference to "v" to avoid multiple accesses.

Here is the optimized code:

```cpp
#include <algorithm>
#include <ios>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;
void compute_depth(int u, int p, const vector<vector<int>>& adj, vector<int>& depth) {
  for (const int& v : adj[u]) {
    if (v != p) {
      depth[v] = depth[u] + 1;
      compute_depth(v, u, adj, depth);
    }
  }
}
void compute_below(int u, int p, const vector<vector<int>>& adj, vector<int>& below) {
  for (const int& v : adj[u]) {
    if (v != p) {
      compute_below(v, u, adj, below);
      below[u] += below[v] + 1;
    }
  }
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int n, k;
  cin >> n >> k;
  vector<vector<int>> adj(n);
  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    std::cin >> u >> v;
    --u;
    --v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  vector<int> depth(n);
  compute_depth(0, -1, adj, depth);
  vector<int> below(n);
  compute_below(0, -1, adj, below);
  vector<int> score;
  score.reserve(n);
  for (int i = 0; i < n; ++i) {
    score[i] = depth[i] - below[i];
  }
  sort(score.begin(), score.end(), greater<int>());
  cout << accumulate(score.begin(), score.begin() + k, 0ll) << '\n';
}
```