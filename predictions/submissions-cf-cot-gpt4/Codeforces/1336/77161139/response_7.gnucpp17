#include <algorithm>
#include <ios>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;

void compute(int u, int p, vector<vector<int>>& adj, vector<int>& depth, vector<int>& below) {
  for (int v : adj[u]) {
    if (v != p) {
      depth[v] = depth[u] + 1;
      compute(v, u, adj, depth, below);
      below[u] += below[v] + 1;
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int n, k;
  cin >> n >> k;
  
  vector<vector<int>> adj(n);
  adj.reserve(n); // reserve space for n elements
  
  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    cin >> u >> v;
    --u;
    --v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  
  vector<int> depth(n), below(n);
  compute(0, -1, adj, depth, below);
  
  vector<int> score(n);
  for (int i = 0; i < n; ++i) {
    score[i] = depth[i] - below[i];
  }
  
  sort(score.begin(), score.end(), greater<int>());
  cout << accumulate(score.begin(), score.begin() + k, 0ll) << '\n';
}