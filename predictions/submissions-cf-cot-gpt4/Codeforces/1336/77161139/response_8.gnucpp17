#include <algorithm>
#include <ios>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;

void compute(int u, int p, vector<vector<int>> &adj, vector<int> &depth, vector<int> &below, vector<int> &score, vector<bool>& visited) {
  visited[u] = true;
  for (int v : adj[u]) {
    if (!visited[v]) {
      depth[v] = depth[u] + 1;
      compute(v, u, adj, depth, below, score, visited);
      below[u] += below[v] + 1;
    }
  }
  score[u] = depth[u] - below[u];
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int n, k;
  cin >> n >> k;
  vector<vector<int>> adj(n);
  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    cin >> u >> v;
    --u;
    --v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  vector<int> depth(n), below(n), score(n);
  vector<bool> visited(n, false);
  compute(0, -1, adj, depth, below, score, visited);
  sort(score.begin(), score.end(), greater<int>());
  long long result = 0;
  for(int i = 0; i < k; ++i)
    result += score[i];
  cout << result << '\n';
}