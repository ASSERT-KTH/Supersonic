This program is already quite efficient, but there are a few optimizations we can make:

1. In the `compute_depth` and `compute_below` functions, instead of iterating over the adjacency list with a range-based for loop, we can use a traditional for loop and use indexing to access the elements. This will avoid the creation of temporary variables and should be faster.

2. In the main function, instead of creating a separate vector for `score`, we can directly calculate the score in the `depth` vector itself, thereby saving memory space and reducing the time taken to fill up another vector.

Here is the optimized version of the program:

```cpp
#include <algorithm>
#include <ios>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;

void compute_depth(int u, int p, vector<vector<int>> &adj, vector<int> &depth) {
  for (int i = 0; i < adj[u].size(); ++i) {
    int v = adj[u][i];
    if (v != p) {
      depth[v] = depth[u] + 1;
      compute_depth(v, u, adj, depth);
    }
  }
}

void compute_below(int u, int p, vector<vector<int>> &adj, vector<int> &below) {
  for (int i = 0; i < adj[u].size(); ++i) {
    int v = adj[u][i];
    if (v != p) {
      compute_below(v, u, adj, below);
      below[u] += below[v] + 1;
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  int n, k;
  cin >> n >> k;
  vector<vector<int>> adj(n);
  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    cin >> u >> v;
    --u;
    --v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  
  vector<int> depth(n);
  compute_depth(0, -1, adj, depth);
  
  vector<int> below(n);
  compute_below(0, -1, adj, below);
  
  for (int i = 0; i < n; ++i) {
    depth[i] -= below[i];
  }
  
  sort(depth.begin(), depth.end(), greater<int>());
  
  cout << accumulate(depth.begin(), depth.begin() + k, 0ll) << '\n';
}
```
Please note that the above code assumes that the adjacency list is not going to be used again in the program. If it is, you might want to create a copy of it before modifying.