Here are a few optimizations you can make based on the given code:

1. **Pass vectors by reference and use const when appropriate:** This will prevent unnecessary copies of the vectors from being created, which will save both time and memory.

2. **Use reserve() for vectors:** If you know the size of the vector beforehand, using reserve() can prevent unnecessary reallocations and copies as the vector grows, thereby saving time.

3. **Combine compute_depth and compute_below functions:** You can combine these two functions into a single function. This will prevent the need to traverse the adjacency list twice, thereby saving time.

Here's the optimized code based on these optimizations:

```cpp
#include <algorithm>
#include <ios>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;

void compute(int u, int p, vector<vector<int>>& adj, vector<int>& depth, vector<int>& below) {
  for (int v : adj[u]) {
    if (v != p) {
      depth[v] = depth[u] + 1;
      compute(v, u, adj, depth, below);
      below[u] += below[v] + 1;
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int n, k;
  cin >> n >> k;
  
  vector<vector<int>> adj(n);
  adj.reserve(n); // reserve space for n elements
  
  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    cin >> u >> v;
    --u;
    --v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  
  vector<int> depth(n), below(n);
  compute(0, -1, adj, depth, below);
  
  vector<int> score(n);
  for (int i = 0; i < n; ++i) {
    score[i] = depth[i] - below[i];
  }
  
  sort(score.begin(), score.end(), greater<int>());
  cout << accumulate(score.begin(), score.begin() + k, 0ll) << '\n';
}
```

In the above code, I have merged the two functions compute_depth and compute_below into a single function compute. This will save time as it prevents the need to traverse the adjacency list twice. Also, I used reserve() for the adjacency list vector, which can prevent unnecessary reallocations and copies, thereby saving time. The vectors depth and below are passed by reference to the function compute, which will prevent unnecessary copies from being created.