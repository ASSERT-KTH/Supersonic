This program seems to be well optimized in terms of logic and structure. However, there are still some minor improvements that can be made.

1. Use 'const reference' in the range-based for loop: In the 'compute_depth' and 'compute_below' functions, we are using range-based for loop to iterate over the adjacency list. This creates a copy of each element in the list. To avoid this, we can use a constant reference to each element, which will improve the performance when dealing with large data.

2. Reserve memory for vectors: When we know the size of the vector in advance, we can use the reserve function to preallocate memory. This will reduce the number of reallocations and copies when elements are added to the vector.

Optimized code:

```cpp
#include <algorithm>
#include <ios>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;
void compute_depth(int u, int p, const vector<vector<int>> &adj, vector<int> &depth) {
  for (const int &v : adj[u]) {
    if (v != p) {
      depth[v] = depth[u] + 1;
      compute_depth(v, u, adj, depth);
    }
  }
}
void compute_below(int u, int p, const vector<vector<int>> &adj, vector<int> &below) {
  for (const int &v : adj[u]) {
    if (v != p) {
      compute_below(v, u, adj, below);
      below[u] += below[v] + 1;
    }
  }
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int n, k;
  cin >> n >> k;
  vector<vector<int>> adj(n);
  adj.reserve(n);
  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    std::cin >> u >> v;
    --u;
    --v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  vector<int> depth(n);
  compute_depth(0, -1, adj, depth);
  vector<int> below(n);
  compute_below(0, -1, adj, below);
  vector<int> score(n);
  score.reserve(n);
  for (int i = 0; i < n; ++i) {
    score[i] = depth[i] - below[i];
  }
  sort(score.begin(), score.end(), greater<int>());
  cout << accumulate(score.begin(), score.begin() + k, 0ll) << '\n';
}
```

These optimizations might not have a noticeable impact on small inputs, but for large inputs, they can help reduce the running time and memory usage.