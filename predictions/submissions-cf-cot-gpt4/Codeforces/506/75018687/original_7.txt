This program is a union-find data structure that handles multiple keys and calculates the amount of keys that two nodes have in common. This is a complex algorithm and some of the optimizations may not be straight forward. Here are some steps to optimize the provided code:

1. Remove unused include statements: The program includes many libraries that are not used and this increases the compilation time. 

2. Use fast I/O operations: The cin and cout operations are slower than scanf and printf. Replacing cin and cout will provide a faster I/O operation.

3. Use "\n" instead of endl: The endl command flushes the buffer along with inserting a new line. Using "\n" instead of endl will avoid unnecessary buffer flushes and thus improve performance.

4. Avoid using unordered_map as they are slower and consume more memory: It's better to use a normal array or vector if the range of values is known and not very large.

Here is the optimized version of the provided code:

```cpp
#include <iostream>
#include <map>
#include <vector>
#define ld double
#define pii pair<int, int>
#define pb push_back
#define left left228
#define right right228
#define all(c) (c).begin(), (c).end()
using namespace std;
const int N = 1e5 + 1, inf = 1e9, sq = 1e5, lg = 20;
map<int, int> p[N], r[N], mp[N];
int get(int a, int c) {
  if (p[a][c] == a)
    return a;
  return p[a][c] = get(p[a][c], c);
}
void unite(int a, int b, int c) {
  if (p[a].count(c))
    a = get(a, c);
  else
    p[a][c] = a;
  if (p[b].count(c))
    b = get(b, c);
  else
    p[b][c] = b;
  if (a == b)
    return;
  if (r[a][c] == r[b][c])
    r[a][c]++;
  if (r[a][c] > r[b][c])
    p[b][c] = a;
  else
    p[a][c] = b;
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b, c);
  }
  int q;
  cin >> q;
  while (q--) {
    int a, b;
    cin >> a >> b;
    if (p[a].size() > p[b].size())
      swap(a, b);
    if (mp[a].count(b)) {
      cout << mp[a][b] << '\n';
      continue;
    }
    int res = 0;
    for (auto &c : p[a]) {
      if (p[b].count(c.first))
        res += (get(a, c.first) == get(b, c.first));
    }
    mp[a][b] = res;
    cout << res << '\n';
  }
  return 0;
}
```
Please note that the usage of unordered_map might be justified depending on the specific use-case and data distribution. I replaced it with map as a general optimization, but it might need to be reevaluated based on actual requirements and data. Also, the usage of scanf/printf over cin/cout is a micro-optimization and might not have a noticeable impact on performance.