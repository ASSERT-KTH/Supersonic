The provided code seems to be implementing a kind of Disjoint Set Union (DSU) to track the connections between different nodes. It's a little hard to optimize without knowing the specific problem that this code is trying to solve. However, there are still a few general points that could be optimized:

1. Using `unordered_map` is slower than using array-like data structures due to the overhead of hashing. If the keys you are storing are not too large, consider using `vector` or a C-style array for higher performance.

2. The `get` function is implementing path compression in DSU. It can be optimized by eliminating the if condition using `p[a][c] = get(p[a][c], c);` directly.

3. Avoid using `count` function to check for the existence of a key in `unordered_map`. Instead use `find` function and compare with `end()`, it's faster.

4. In the main loop, avoid recalculating `mp[a][b]` if it already exists. Instead, calculate it only once and store it in the map.

Here is the optimized code:

```cpp
#include <algorithm>
#include <assert.h>
#include <chrono>
#include <cstring>
#include <ctime>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <iomanip>
#include <iostream>
#include <map>
#include <math.h>
#include <queue>
#include <random>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#define try fck
#define ld double
#define pii pair<int, int>
#define pb push_back
#define left left228
#define ignore die
#define right right228
#define all(c) (c).begin(), (c).end()
#define fast ios_base::sync_with_stdio(0); cin.tie(0);  cout.tie(0)
using namespace std;
const int N = 1e5 + 1, inf = 1e9, sq = 1e5, lg = 20;
unordered_map<int, int> p[N], r[N], mp[N];

int get(int a, int c) {
  return p[a][c] = p[a][c] == a ? a : get(p[a][c], c);
}

void unite(int a, int b, int c) {
  a = p[a].find(c) != p[a].end() ? get(a, c) : p[a][c] = a;
  b = p[b].find(c) != p[b].end() ? get(b, c) : p[b][c] = b;

  if (a == b) return;
  
  if (r[a][c] == r[b][c])
    r[a][c]++;
  if (r[a][c] > r[b][c])
    p[b][c] = a;
  else
    p[a][c] = b;
}

signed main() {
  fast;
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b, c);
  }
  int q;
  cin >> q;
  while (q--) {
    int a, b;
    cin >> a >> b;
    if (p[a].size() > p[b].size()) swap(a, b);

    int res = 0;
    if (mp[a].find(b) == mp[a].end()) {
      for (auto &c : p[a]) {
        if (p[b].find(c.first) != p[b].end())
          res += (get(a, c.first) == get(b, c.first));
      }
      mp[a][b] = res;
    } else {
      res = mp[a][b];
    }

    cout << res << '\n';
  }
  exit(0);
}
```