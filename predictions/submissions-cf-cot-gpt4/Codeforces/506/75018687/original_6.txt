Step 1:
The first optimization would be to remove unused includes to reduce the compile-time and the size of the binary file. This might not significantly improve the execution speed of the program, but it is good practice to only include what's necessary.

Step 2:
The next optimization would be to reduce the number of times the unordered_map is accessed. It's generally faster to access a local variable than an element in an unordered_map due to the overhead of hashing. So we can store the result of "p[a].count(c)" and "p[b].count(c)" in local variables instead of accessing the unordered_map multiple times.

Step 3:
The same optimization can be applied to "get(a, c.first)" and "get(b, c.first)". We can store the result in local variables instead of calling the function twice.

Step 4:
The line "mp[a][b] = res;" is executed every time in the while loop. We can move this line outside the loop to execute it only once.

Optimized code:

```cpp
#include <algorithm>
#include <assert.h>
#include <chrono>
#include <iostream>
#include <unordered_map>
#include <vector>

#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
using namespace std;

const int N = 1e5 + 1;

unordered_map<int, int> p[N], r[N], mp[N];

int get(int a, int c) {
  if (p[a][c] == a)
    return a;
  return p[a][c] = get(p[a][c], c);
}

void unite(int a, int b, int c) {
  bool a_exists = p[a].count(c);
  bool b_exists = p[b].count(c);

  if (a_exists)
    a = get(a, c);
  else
    p[a][c] = a;

  if (b_exists)
    b = get(b, c);
  else
    p[b][c] = b;

  if (a == b)
    return;

  if (r[a][c] == r[b][c])
    r[a][c]++;

  if (r[a][c] > r[b][c])
    p[b][c] = a;
  else
    p[a][c] = b;
}

signed main() {
  fast;
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b, c);
  }
  int q;
  cin >> q;
  while (q--) {
    int a, b;
    cin >> a >> b;
    if (p[a].size() > p[b].size())
      swap(a, b);

    if (mp[a].count(b)) {
      cout << mp[a][b] << endl;
      continue;
    }
    int res = 0;
    for (auto &c : p[a]) {
      int get_a = get(a, c.first);
      int get_b = get(b, c.first);
      if (p[b].count(c.first))
        res += (get_a == get_b);
    }
    mp[a][b] = res;
    cout << res << '\n';
  }
  return 0;
}
```