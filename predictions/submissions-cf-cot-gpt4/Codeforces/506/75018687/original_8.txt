The given program appears to be implementing a disjoint-set data structure. The first optimization that can be done is to replace the unordered_map data structures with vector data structures. We can do this by declaring a maximum constant value for the elements in the set and then use this value to define the size of the vector. This will improve the time complexity from O(log n) to O(1), which is a significant improvement.

However, it's worth noting that this optimization is dependent on the maximum value of the elements in the set. If this value is too high, the memory usage might increase significantly. This is why it's important to choose an appropriate data structure based on the specific requirements and constraints of your program.

Another potential optimization is to reduce the use of the 'count' function, which is used to check if an element exists in a container. Instead, we can use the 'find' function, which also checks for the existence of an element but does not count the number of occurrences.

Lastly, we can remove the 'exit(0);' at the end of the program, as it is not necessary. The program will automatically exit when it reaches the end of the main function.

Here's the optimized version of the program:
```c++
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

const int N = 1e5 + 1, inf = 1e9, sq = 1e5, lg = 20;
vector<int> p[N], r[N];
int mp[N][N];

int get(int a, int c) {
  if (p[a][c] == a)
    return a;
  return p[a][c] = get(p[a][c], c);
}

void unite(int a, int b, int c) {
  if (p[a][c] != 0)
    a = get(a, c);
  else
    p[a][c] = a;
  if (p[b][c] != 0)
    b = get(b, c);
  else
    p[b][c] = b;
  if (a == b)
    return;
  if (r[a][c] == r[b][c])
    r[a][c]++;
  if (r[a][c] > r[b][c])
    p[b][c] = a;
  else
    p[a][c] = b;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b, c);
  }
  int q;
  cin >> q;
  while (q--) {
    int a, b;
    cin >> a >> b;
    if (p[a].size() > p[b].size())
      swap(a, b);
    if (mp[a][b] != 0) {
      cout << mp[a][b] << endl;
      continue;
    }
    int res = 0;
    for (int c = 0; c < p[a].size(); c++) {
      if (p[b][c] != 0)
        res += (get(a, c) == get(b, c));
    }
    mp[a][b] = res;
    cout << res << '\n';
  }
  return 0;
}
```
Please note that these optimizations are made under assumptions about the maximum size of the input. If these assumptions are not valid, the optimizations may not bring the desired effect and could potentially degrade performance.