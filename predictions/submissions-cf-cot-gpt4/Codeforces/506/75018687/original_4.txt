The given C++ program is a bit complex and has a lot of things going on. It uses unordered_map, which can be expensive in terms of memory usage. It has functions for union-find, which is used for disjoint set operations. The main optimization here would be to reduce the number of calls to these functions and to reduce the size of the unordered_map. 

Step 1: Use vector instead of unordered_map where possible:
In the get and unite functions, we can replace the unordered_map with vector. Since the maximum value of 'c' is not given and we cannot guarantee the range of 'c', it's not feasible to use vector instead of map. So we have to remain with unordered_map.

Step 2: Reduce the number of calls to the get function:
In the while loop where it's calculating 'res', it's calling the 'get' function twice for the same values. We can optimize this by calling it once and storing the result in a variable to be used later.

Step 3: Reserve memory for vectors:
For vectors like p, r, and mp, we can reserve memory in advance if we know the number of elements that are going to be inserted. This can avoid reallocation of memory which is expensive. But since the sizes are not known in advance, this optimization is not possible.

After making these optimizations, the code is as follows:

```cpp
#include <algorithm>
#include <assert.h>
#include <chrono>
#include <cstring>
#include <ctime>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <iomanip>
#include <iostream>
#include <map>
#include <math.h>
#include <queue>
#include <random>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#define try fck
#define ld double
#define pii pair<int, int>
#define pb push_back
#define left left228
#define ignore die
#define right right228
#define all(c) (c).begin(), (c).end()
#define fast                                                                   \
  ios_base::sync_with_stdio(0);                                                \
  cin.tie(0);                                                                  \
  cout.tie(0)
using namespace std;
const int N = 1e5 + 1, inf = 1e9, sq = 1e5, lg = 20;
unordered_map<int, int> p[N], r[N], mp[N];
int get(int a, int c) {
  if (p[a][c] == a)
    return a;
  return p[a][c] = get(p[a][c], c);
}
void unite(int a, int b, int c) {
  if (p[a].count(c))
    a = get(a, c);
  else
    p[a][c] = a;
  if (p[b].count(c))
    b = get(b, c);
  else
    p[b][c] = b;
  if (a == b)
    return;
  if (r[a][c] == r[b][c])
    r[a][c]++;
  if (r[a][c] > r[b][c])
    p[b][c] = a;
  else
    p[a][c] = b;
}
signed main() {
  fast;
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b, c);
  }
  int q;
  cin >> q;
  while (q--) {
    int a, b;
    cin >> a >> b;
    if (p[a].size() > p[b].size())
      swap(a, b);
    if (mp[a].count(b)) {
      cout << mp[a][b] << endl;
      continue;
    }
    int res = 0;
    for (auto &c : p[a]) {
      if (p[b].count(c.first)) {
        int getResult = get(a, c.first);
        res += (getResult == get(b, c.first));
      }
    }
    mp[a][b] = res;
    cout << res << '\n';
  }
  exit(0);
}
```

Please note that this optimization will have a minimal impact on the overall performance as the original code is already quite efficient. The major bottleneck in this code would be the union-find operations which cannot be significantly optimized further.