#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

const int N = 1e5 + 1, inf = 1e9, sq = 1e5, lg = 20;
vector<int> p[N], r[N];
int mp[N][N];

int get(int a, int c) {
  if (p[a][c] == a)
    return a;
  return p[a][c] = get(p[a][c], c);
}

void unite(int a, int b, int c) {
  if (p[a][c] != 0)
    a = get(a, c);
  else
    p[a][c] = a;
  if (p[b][c] != 0)
    b = get(b, c);
  else
    p[b][c] = b;
  if (a == b)
    return;
  if (r[a][c] == r[b][c])
    r[a][c]++;
  if (r[a][c] > r[b][c])
    p[b][c] = a;
  else
    p[a][c] = b;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b, c);
  }
  int q;
  cin >> q;
  while (q--) {
    int a, b;
    cin >> a >> b;
    if (p[a].size() > p[b].size())
      swap(a, b);
    if (mp[a][b] != 0) {
      cout << mp[a][b] << endl;
      continue;
    }
    int res = 0;
    for (int c = 0; c < p[a].size(); c++) {
      if (p[b][c] != 0)
        res += (get(a, c) == get(b, c));
    }
    mp[a][b] = res;
    cout << res << '\n';
  }
  return 0;
}