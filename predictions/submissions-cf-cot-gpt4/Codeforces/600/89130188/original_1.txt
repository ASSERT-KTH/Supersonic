The given C++ program performs some complex calculations involving recursive DFS (depth-first search) over a graph and maintaining several maps and variables for counting and marking purposes. 

Here are the steps to optimize this code:

1. **Avoid using `#include <bits/stdc++.h>`**: This header file includes a lot of unnecessary header files which increases compilation time. Replace it with only the necessary header files needed for your program.

2. **Avoid using `using namespace std`**: This line can cause problems if the standard library has functions that have the same name as your own functions.

3. **Prefer pre-increment over post-increment**: `++i` is usually faster than `i++` because `i++` needs to create a temporary variable and return the unincremented version of it.

4. **Avoid using `long double`**: `long double` is 128-bit on some platforms and 64-bit on others, and it is often slower than `double`. In your case, you have declared `pi` as `long double`, but you never used it, so just remove it.

5. **Use `reserve()` function for vectors**: If you know the size of a vector beforehand, you can use `reserve()` function to prevent reallocation and copying of vectors whenever it grows in size.

6. **Reuse the variable instead of creating new temporary variables**: Reusing variables can save memory.

7. **Minimize the use of `std::map`**: `std::map` is a red-black tree and it's slower than `std::unordered_map` which is a hash table. However, if you need to maintain the order of elements, you should still use `std::map`.

Here's the optimized code:

```C++
#include <iostream>
#include <vector>
#include <unordered_map>
#define pb push_back
#define lll long long
#define llf __float128
#define lld long double

const lll NR = 5e5 + 10, oo = 1e18 + 10, MOD = 1e9 + 7;
std::vector<lll> v[NR];
lll n, m, sz[NR], big[NR];
lll ans[NR], c[NR];

void dfs1(lll nod, lll prt) {
  sz[nod] = 1;
  for (auto it : v[nod]) {
    if (it == prt)
      continue;
    dfs1(it, nod);
    sz[nod] += sz[it];
    big[nod] = std::max(big[nod], sz[it]);
  }
}

void dfs2(lll nod, lll prt, std::unordered_map<lll, lll> &mapp, lll &l_max) {
  lll nod_boss = -1, l = 0, max_ = 0, sum = 0;
  for (auto it : v[nod]) {
    if (it == prt)
      continue;
    if (big[nod] == sz[it]) {
      nod_boss = it;
      dfs2(it, nod, mapp, l);
      sum = ans[it];
      max_ = l;
      break;
    }
  }
  mapp[c[nod]] = mapp[c[nod]] + 1;
  if (mapp[c[nod]] == max_) {
    sum += c[nod];
  }
  if (mapp[c[nod]] > max_) {
    max_ = mapp[c[nod]];
    sum = c[nod];
  }
  for (auto it : v[nod]) {
    if (it == prt || it == nod_boss)
      continue;
    std::unordered_map<lll, lll> temp;
    dfs2(it, nod, temp, l);
    for (auto it2 : temp) {
      mapp[it2.first] = mapp[it2.first] + it2.second;
      if (mapp[it2.first] == max_) {
        sum += it2.first;
      }
      if (mapp[it2.first] > max_) {
        max_ = mapp[it2.first];
        sum = it2.first;
      }
    }
  }
  l_max = max_;
  ans[nod] = sum;
}

int main() {
  lll i, j, x, y;
  std::ios::sync_with_stdio(0);
  std::cin.tie(0);
  std::cout.tie(0);
  std::unordered_map<lll, lll> temp;
  std::cin >> n;
  for (i = 1; i <= n; ++i) {
    std::cin >> c[i];
  }
  for (i = 1; i < n; ++i) {
    std::cin >> x >> y;
    v[x].pb(y);
    v[y].pb(x);
  }
  dfs1(1, 0);
  dfs2(1, 0, temp, x);
  for (i = 1; i <= n; ++i)
    std::cout << ans[i] << ' ';
  std::cout << '\n';
  return 0;
}
```
Please note, this optimization does not guarantee that the program will run faster or use less memory on your specific machine, because the behavior of the program can vary depending on the input size and data, the specific C++ compiler, the machine architecture, etc. It is always a good idea to test your program under various conditions to ensure that the optimization works as expected.