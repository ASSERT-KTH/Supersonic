Optimization Steps:

1. Use an unordered_map instead of a map for mapp and temp in the dfs2 function. Unordered maps are faster because they provide constant time lookup on average compared to log(N) in map. However, unordered_maps use more memory than maps.

2. Use ++mapp[c[nod]] instead of mapp[c[nod]] = mapp[c[nod]] + 1 and similarly for mapp[it2.first] in the dfs2 function. This change will make the code more readable and slightly faster because the map element is accessed only once.

3. Instead of using the auto keyword in range-based for loops, specify the actual type to help the compiler optimize the code.

Optimized Program:

```cpp
#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define lll long long
#define llf __float128
#define lld long double
using namespace std;
const lll NR = 5e5 + 10, oo = 1e18 + 10, MOD = 1e9 + 7;
const long double pi = 2 * acos(0.0);
vector<lll> v[NR];
lll n, m, sz[NR], big[NR];
lll ans[NR], c[NR];
void dfs1(lll nod, lll prt) {
  sz[nod] = 1;
  for (lll it : v[nod]) {
    if (it == prt)
      continue;
    dfs1(it, nod);
    sz[nod] += sz[it];
    big[nod] = max(big[nod], sz[it]);
  }
}
void dfs2(lll nod, lll prt, unordered_map<lll, lll> &mapp, lll &l_max) {
  lll nod_boss = -1, l = 0, max_ = 0, sum = 0;
  for (lll it : v[nod]) {
    if (it == prt)
      continue;
    if (big[nod] == sz[it]) {
      nod_boss = it;
      dfs2(it, nod, mapp, l);
      sum = ans[it];
      max_ = l;
      break;
    }
  }
  ++mapp[c[nod]];
  if (mapp[c[nod]] == max_) {
    sum += c[nod];
  }
  if (mapp[c[nod]] > max_) {
    max_ = mapp[c[nod]];
    sum = c[nod];
  }
  for (lll it : v[nod]) {
    if (it == prt || it == nod_boss)
      continue;
    unordered_map<lll, lll> temp;
    dfs2(it, nod, temp, l);
    for (pair<lll, lll> it2 : temp) {
      ++mapp[it2.first];
      if (mapp[it2.first] == max_) {
        sum += it2.first;
      }
      if (mapp[it2.first] > max_) {
        max_ = mapp[it2.first];
        sum = it2.first;
      }
    }
  }
  l_max = max_;
  ans[nod] = sum;
}
signed main() {
  lll i, j, x, y;
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  unordered_map<lll, lll> temp;
  cin >> n;
  for (i = 1; i <= n; ++i) {
    cin >> c[i];
  }
  for (i = 1; i < n; ++i) {
    cin >> x >> y;
    v[x].pb(y);
    v[y].pb(x);
  }
  dfs1(1, 0);
  dfs2(1, 0, temp, x);
  for (i = 1; i <= n; ++i)
    cout << ans[i] << ' ';
  cout << '\n';
  return 0;
}
```