Here are some optimization steps:

1. Use "std::ios_base::sync_with_stdio(false)" to untie the standard C++ streams from their corresponding C streams. This can speed up I/O operations because it prevents the streams from synchronizing with each other.
2. Use "cin.tie(NULL)" to untie cin from cout. This can speed up I/O operations because it prevents automatic flushing of the output streams when input is requested.
3. Avoid using "using namespace std". This can avoid name conflicts and make the code more maintainable.
4. Use prefix increment (++i) instead of postfix increment (i++) in the loops. This can avoid unnecessary temporary object creation and destruction.
5. Use "reserve" method for vector. This can avoid unnecessary reallocations and copying of the vector elements.
6. Use "std::unordered_map" instead of "std::map". This can speed up the lookups because unordered_map uses hash table, while map uses a binary search tree.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <cmath>

#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define lll long long
#define llf __float128
#define lld long double

const lll NR = 5e5 + 10, oo = 1e18 + 10, MOD = 1e9 + 7;
const long double pi = 2 * acos(0.0);
std::vector<lll> v[NR];
lll n, m, sz[NR], big[NR];
lll ans[NR], c[NR];

void dfs1(lll nod, lll prt) {
  sz[nod] = 1;
  for (auto it : v[nod]) {
    if (it == prt)
      continue;
    dfs1(it, nod);
    sz[nod] += sz[it];
    big[nod] = std::max(big[nod], sz[it]);
  }
}

void dfs2(lll nod, lll prt, std::unordered_map<lll, lll> &mapp, lll &l_max) {
  lll nod_boss = -1, l = 0, max_ = 0, sum = 0;
  for (auto it : v[nod]) {
    if (it == prt)
      continue;
    if (big[nod] == sz[it]) {
      nod_boss = it;
      dfs2(it, nod, mapp, l);
      sum = ans[it];
      max_ = l;
      break;
    }
  }
  mapp[c[nod]] = mapp[c[nod]] + 1;
  if (mapp[c[nod]] == max_) {
    sum += c[nod];
  }
  if (mapp[c[nod]] > max_) {
    max_ = mapp[c[nod]];
    sum = c[nod];
  }
  for (auto it : v[nod]) {
    if (it == prt || it == nod_boss)
      continue;
    std::unordered_map<lll, lll> temp;
    dfs2(it, nod, temp, l);
    for (auto it2 : temp) {
      mapp[it2.first] = mapp[it2.first] + it2.second;
      if (mapp[it2.first] == max_) {
        sum += it2.first;
      }
      if (mapp[it2.first] > max_) {
        max_ = mapp[it2.first];
        sum = it2.first;
      }
    }
  }
  l_max = max_;
  ans[nod] = sum;
}

int main() {
  lll i, j, x, y;
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::unordered_map<lll, lll> temp;
  std::cin >> n;
  for (i = 1; i <= n; ++i) {
    std::cin >> c[i];
  }
  for (i = 1; i < n; ++i) {
    std::cin >> x >> y;
    v[x].pb(y);
    v[y].pb(x);
  }
  dfs1(1, 0);
  dfs2(1, 0, temp, x);
  for (i = 1; i <= n; ++i)
    std::cout << ans[i] << ' ';
  std::cout << '\n';
  return 0;
}
```