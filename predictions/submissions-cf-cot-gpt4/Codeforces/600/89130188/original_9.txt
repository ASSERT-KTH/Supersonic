This is a complex C++ program that involves depth-first search on a tree and manipulation of maps. Here are some steps to optimize this code:

1. **Avoid using `#include <bits/stdc++.h>`**: This header file includes almost all standard libraries which may slow down the compilation time. Instead, you can include only those libraries which are required.

2. **Use `unordered_map` instead of `map`**: In this code, we are using `map` for storing and accessing elements. 'map' in C++ STL is implemented using Self-Balancing Binary Search Tree where each insertion or deletion operation takes O(Log n) time. We can use 'unordered_map' instead which is implemented using Hash Table and takes O(1) on average for search, insert and delete operations.

3. **Avoid using `long long` and `long double` unless necessary**: These data types use more memory than standard `int` and `double`. If the data you are working with can fit into `int` and `double`, using these would save memory.

4. **Avoid using global variables**: This program uses a lot of global variables. Using global variables can make the program harder to understand and debug, and it can also lead to unexpected behavior. It also increases the memory usage of the program. It's better to pass these variables as function arguments.

5. **Avoid using `auto` for iteration**: While `auto` can make the code more readable, it can also lead to a performance decrease as the compiler has to deduce the type of the variable on its own.

Based on the above optimizations, here's how the optimized code might look like:

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;

const long long NR = 5e5 + 10;

void dfs1(long long nod, long long prt, vector<long long> v[], long long sz[], long long big[]) {
  sz[nod] = 1;
  for (int i = 0; i < v[nod].size(); i++) {
    long long it = v[nod][i];
    if (it == prt)
      continue;
    dfs1(it, nod, v, sz, big);
    sz[nod] += sz[it];
    big[nod] = max(big[nod], sz[it]);
  }
}

void dfs2(long long nod, long long prt, unordered_map<long long, long long> &mapp, long long &l_max, vector<long long> v[], long long sz[], long long big[], long long ans[], long long c[]) {
  // (The rest of the code remains same as original.)
}

int main() {
  long long n, m, sz[NR], big[NR];
  long long ans[NR], c[NR];
  vector<long long> v[NR];
  
  // (The rest of the code remains same as original.)
  
  return 0;
}
```

Please note that `__float128` is a GCC extension and not part of the C++ Standard. If you need to use this type, you may have to use `#ifdef` guards to ensure your code is portable.