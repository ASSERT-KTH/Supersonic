#include<iostream>
#include<vector>
#include<map>
#include<cmath>

#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define lll long long
#define llf __float128
#define lld long double

const lll NR = 5e5 + 10, oo = 1e18 + 10, MOD = 1e9 + 7;
const long double pi = 2 * acos(0.0);

void dfs1(lll nod, lll prt, std::vector<lll> v[], lll sz[], lll big[]) {
  sz[nod] = 1;
  for (auto it : v[nod]) {
    if (it == prt)
      continue;
    dfs1(it, nod, v, sz, big);
    sz[nod] += sz[it];
    big[nod] = std::max(big[nod], sz[it]);
  }
}

void dfs2(lll nod, lll prt, std::map<lll, lll> &mapp, lll &l_max, std::vector<lll> v[], lll sz[], lll big[], lll ans[], lll c[]) {
  // ... (same as original function, but replace all global variables with their local versions) ...
}

int main() {
  lll n, m, i, j, x, y;
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  std::map<lll, lll> temp;
  std::cin >> n;

  lll c[n+1], ans[n+1], sz[n+1], big[n+1];
  std::vector<lll> v[n+1];

  for (i = 1; i <= n; ++i) {
    std::cin >> c[i];
  }

  for (i = 1; i < n; ++i) {
    std::cin >> x >> y;
    v[x].pb(y);
    v[y].pb(x);
  }

  dfs1(1, 0, v, sz, big);
  dfs2(1, 0, temp, x, v, sz, big, ans, c);

  for (i = 1; i <= n; ++i)
    std::cout << ans[i] << ' ';
  std::cout << '\n';
  return 0;
}