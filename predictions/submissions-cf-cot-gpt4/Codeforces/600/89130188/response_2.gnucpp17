#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define lll long long
#define llf __float128
#define lld long double
using namespace std;
const lll NR = 5e5 + 10, oo = 1e18 + 10, MOD = 1e9 + 7;
const long double pi = 2 * acos(0.0);
vector<lll> v[NR];
void dfs1(lll nod, lll prt, vector<lll>& sz, vector<lll>& big) {
  sz[nod] = 1;
  for (auto it : v[nod]) {
    if (it == prt)
      continue;
    dfs1(it, nod, sz, big);
    sz[nod] += sz[it];
    big[nod] = max(big[nod], sz[it]);
  }
}

void dfs2(lll nod, lll prt, unordered_map<lll, lll> &mapp, lll &l_max, vector<lll>& sz, vector<lll>& big, vector<lll>& ans, vector<lll>& c) {
  lll nod_boss = -1, l = 0, max_ = 0, sum = 0;
  for (auto it : v[nod]) {
    if (it == prt)
      continue;
    if (big[nod] == sz[it]) {
      nod_boss = it;
      dfs2(it, nod, mapp, l, sz, big, ans, c);
      sum = ans[it];
      max_ = l;
      break;
    }
  }

  mapp[c[nod]]++;
  if (mapp[c[nod]] == max_) {
    sum += c[nod];
  }
  if (mapp[c[nod]] > max_) {
    max_ = mapp[c[nod]];
    sum = c[nod];
  }
  for (auto it : v[nod]) {
    if (it == prt || it == nod_boss)
      continue;
    unordered_map<lll, lll> temp;
    dfs2(it, nod, temp, l, sz, big, ans, c);
    for (auto it2 : temp) {
      mapp[it2.first] += it2.second;
      if (mapp[it2.first] == max_) {
        sum += it2.first;
      }
      if (mapp[it2.first] > max_) {
        max_ = mapp[it2.first];
        sum = it2.first;
      }
    }
  }
  l_max = max_;
  ans[nod] = sum;
}

signed main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  lll n;
  cin >> n;
  vector<lll> c(n+1), sz(n+1), big(n+1), ans(n+1);
  for (lll i = 1; i <= n; ++i) {
    cin >> c[i];
  }
  v.reserve(n+1);
  for (lll i = 1; i < n; ++i) {
    lll x, y;
    cin >> x >> y;
    v[x].pb(y);
    v[y].pb(x);
  }
  dfs1(1, 0, sz, big);
  lll x;
  unordered_map<lll, lll> temp;
  dfs2(1, 0, temp, x, sz, big, ans, c);
  for (lll i = 1; i <= n; ++i)
    cout << ans[i] << ' ';
  cout << '\n';
  return 0;
}