This program is already optimized in terms of algorithmic complexity. It performs a depth-first search (DFS) on a tree which is an O(n) operation where n is the number of nodes in the tree. However, there are some smaller optimizations that can be made to improve the overall performance of the program:

1. Use Fast I/O: The program is already using fast I/O methods (ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)) to speed up the input output operations which is good practice. 

2. Avoid Global Variables: The program uses a lot of global variables which increase the memory footprint and can cause problems for large inputs. Ideally, the global variables should be passed as parameters to functions or declared inside functions where they are required.

3. Reduce Scope of Variables: Variables like x, y, i, j are declared at the start of main() and have a larger scope than necessary. They can be declared inside the loop where they are used to reduce their scope and improve readability.

4. Use std::unordered_map Instead of std::map: The program uses std::map which is a balanced binary search tree with log(n) time complexity for insertions, deletions and search operations. If the order of elements is not important, we can use std::unordered_map instead which is a hash table and has an average time complexity of O(1) for these operations.

5. Use reserve() for std::vector: If the size of the vector is known in advance, calling reserve() can preallocate the required memory and prevent multiple reallocations.

Optimized program:

```cpp
#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define lll long long
#define llf __float128
#define lld long double
using namespace std;
const lll NR = 5e5 + 10, oo = 1e18 + 10, MOD = 1e9 + 7;
const long double pi = 2 * acos(0.0);
vector<lll> v[NR];
void dfs1(lll nod, lll prt, vector<lll>& sz, vector<lll>& big) {
  sz[nod] = 1;
  for (auto it : v[nod]) {
    if (it == prt)
      continue;
    dfs1(it, nod, sz, big);
    sz[nod] += sz[it];
    big[nod] = max(big[nod], sz[it]);
  }
}

void dfs2(lll nod, lll prt, unordered_map<lll, lll> &mapp, lll &l_max, vector<lll>& sz, vector<lll>& big, vector<lll>& ans, vector<lll>& c) {
  lll nod_boss = -1, l = 0, max_ = 0, sum = 0;
  for (auto it : v[nod]) {
    if (it == prt)
      continue;
    if (big[nod] == sz[it]) {
      nod_boss = it;
      dfs2(it, nod, mapp, l, sz, big, ans, c);
      sum = ans[it];
      max_ = l;
      break;
    }
  }

  mapp[c[nod]]++;
  if (mapp[c[nod]] == max_) {
    sum += c[nod];
  }
  if (mapp[c[nod]] > max_) {
    max_ = mapp[c[nod]];
    sum = c[nod];
  }
  for (auto it : v[nod]) {
    if (it == prt || it == nod_boss)
      continue;
    unordered_map<lll, lll> temp;
    dfs2(it, nod, temp, l, sz, big, ans, c);
    for (auto it2 : temp) {
      mapp[it2.first] += it2.second;
      if (mapp[it2.first] == max_) {
        sum += it2.first;
      }
      if (mapp[it2.first] > max_) {
        max_ = mapp[it2.first];
        sum = it2.first;
      }
    }
  }
  l_max = max_;
  ans[nod] = sum;
}

signed main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  lll n;
  cin >> n;
  vector<lll> c(n+1), sz(n+1), big(n+1), ans(n+1);
  for (lll i = 1; i <= n; ++i) {
    cin >> c[i];
  }
  v.reserve(n+1);
  for (lll i = 1; i < n; ++i) {
    lll x, y;
    cin >> x >> y;
    v[x].pb(y);
    v[y].pb(x);
  }
  dfs1(1, 0, sz, big);
  lll x;
  unordered_map<lll, lll> temp;
  dfs2(1, 0, temp, x, sz, big, ans, c);
  for (lll i = 1; i <= n; ++i)
    cout << ans[i] << ' ';
  cout << '\n';
  return 0;
}
```