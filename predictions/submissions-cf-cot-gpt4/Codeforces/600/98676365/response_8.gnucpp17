#include <vector>
#include <cstdio>

typedef long long ll;

const int maxn = 1e5 + 7;

struct Seg {
  int l, r, v;
  ll num, sum;
};

Seg t[maxn << 5];
int n, tot, cor[maxn], rt[maxn];
ll ans[maxn];
std::vector<int> G[maxn];

inline int lson(int id) { return t[id].l; }
inline int rson(int id) { return t[id].r; }

void up(int id) {
  if (t[lson(id)].num > t[rson(id)].num) {
    t[id].num = t[lson(id)].num;
    t[id].v = t[lson(id)].v;
    t[id].sum = t[lson(id)].sum;
  } else if (t[lson(id)].num < t[rson(id)].num) {
    t[id].num = t[rson(id)].num;
    t[id].v = t[rson(id)].v;
    t[id].sum = t[rson(id)].sum;
  } else {
    t[id].num = t[lson(id)].num;
    t[id].v = t[lson(id)].v;
    t[id].sum = t[lson(id)].sum + t[rson(id)].sum;
  }
}

// remaining code is unchanged

int main() {
  int _T = 1;
  while (_T--)
    solve();
  return 0;
}