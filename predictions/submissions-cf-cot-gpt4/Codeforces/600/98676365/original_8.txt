This is a complex data structure problem that uses Segment Trees. However, there are few areas where the code can be optimized:

1. Avoiding `#include <bits/stdc++.h>`: This is a bulky header file and including it can slow down the compilation process. We should include only the necessary headers.

2. Avoiding 'using namespace std': This can lead to name clashes, which can be very difficult to debug. 

3. Avoiding Macros: Macros don't respect scope, which could result in unexpected behaviour, and they can make debugging difficult. In the given program, macros can be replaced with inline functions.

4. Reducing Global Variables: Excessive use of global variables can make the program hard to understand and debug. We can encapsulate these variables inside a class or pass them as function arguments.

5. Optimize `read` function: The `read` function can be optimized by using `scanf` instead of `getchar`.

Here is the optimized code:

```cpp
#include <vector>
#include <cstdio>

typedef long long ll;

const int maxn = 1e5 + 7;

struct Seg {
  int l, r, v;
  ll num, sum;
};

Seg t[maxn << 5];
int n, tot, cor[maxn], rt[maxn];
ll ans[maxn];
std::vector<int> G[maxn];

inline int lson(int id) { return t[id].l; }
inline int rson(int id) { return t[id].r; }

void up(int id) {
  if (t[lson(id)].num > t[rson(id)].num) {
    t[id].num = t[lson(id)].num;
    t[id].v = t[lson(id)].v;
    t[id].sum = t[lson(id)].sum;
  } else if (t[lson(id)].num < t[rson(id)].num) {
    t[id].num = t[rson(id)].num;
    t[id].v = t[rson(id)].v;
    t[id].sum = t[rson(id)].sum;
  } else {
    t[id].num = t[lson(id)].num;
    t[id].v = t[lson(id)].v;
    t[id].sum = t[lson(id)].sum + t[rson(id)].sum;
  }
}

// remaining code is unchanged

int main() {
  int _T = 1;
  while (_T--)
    solve();
  return 0;
}
```

Please note that this optimization might not give any significant improvement in runtime because the main logic of the program (which is in the Segment Trees and DFS) hasn't been changed. The changes are made from good programming practices perspective.