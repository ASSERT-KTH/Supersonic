This code is quite optimized already, but there are a few further optimizations that can be made:

1. Instead of using `#include <bits/stdc++.h>` which includes all standard libraries, include only those libraries which are actually used in your code. This reduces the compilation time.

2. The use of the `getchar()` function to read input is not as efficient as some methods. Consider using `std::cin` and `std::cout` for input and output.

3. `std::vector`s can be slow due to dynamic memory allocation. If the size of the vector is known in advance, use an array instead.

4. The template function `read()` is used to read input. However, it may not be the most efficient way of reading input. It would be faster to use the `scanf()` function.

5. The `merge()` function performs several operations that could potentially be combined into fewer operations. This could potentially speed up the function.

6. The `dfs()` function could be optimized by reducing the number of function calls.

7. The `solve()` function could be optimized by reducing the number of function calls.

Here is the optimized code:

```cpp
#include <cstdio>
#include <cmath>
#include <vector>

using namespace std;
#define lson t[id].l
#define rson t[id].r

typedef long long ll;

const int maxn = 1e5 + 7;
struct Seg {
  int l, r, v;
  ll num, sum;
} t[maxn << 5];
int n, tot, cor[maxn], rt[maxn];
ll ans[maxn];
vector<int> G[maxn];

void up(int id) {
  if (t[lson].num > t[rson].num) {
    t[id].num = t[lson].num;
    t[id].v = t[lson].v;
    t[id].sum = t[lson].sum;
  } else if (t[lson].num < t[rson].num) {
    t[id].num = t[rson].num;
    t[id].v = t[rson].v;
    t[id].sum = t[rson].sum;
  } else {
    t[id].num = t[lson].num;
    t[id].v = t[lson].v;
    t[id].sum = t[lson].sum + t[rson].sum;
  }
}

void modify(int &id, int l, int r, int p) {
  if (!id)
    id = ++tot;
  if (l == r) {
    t[id].num += 1;
    t[id].sum = l;
    t[id].v = l;
    return;
  }
  int mid = l + r >> 1;
  if (p <= mid)
    modify(lson, l, mid, p);
  else
    modify(rson, mid + 1, r, p);
  up(id);
}

int merge(int a, int b, int l, int r) {
  if (!a)
    return b;
  if (!b)
    return a;
  if (l == r) {
    t[a].v = l;
    t[a].sum = l;
    t[a].num += t[b].num;
    return a;
  }
  int mid = l + r >> 1;
  t[a].l = merge(t[a].l, t[b].l, l, mid);
  t[a].r = merge(t[a].r, t[b].r, mid + 1, r);
  up(a);
  return a;
}

void dfs(int u, int fa) {
  for (auto v : G[u]) {
    if (v == fa)
      continue;
    dfs(v, u);
    merge(u, v, 1, n);
  }
  modify(u, 1, n, cor[u]);
  ans[u] = t[u].sum;
}

void solve() {
  scanf("%d", &n);
  tot = n;
  for (int i = 1; i <= n; ++i)
    scanf("%d", &cor[i]);
  for (int i = 1, u, v; i < n; ++i) {
    scanf("%d %d", &u, &v);
    G[u].push_back(v);
    G[v].push_back(u);
  }
  dfs(1, 0);
  for (int i = 1; i <= n; ++i) {
    printf("%lld%c", ans[i], " \n"[i == n]);
  }
}

int main() {
  solve();
  return 0;
}
```