The given C++ code uses a segment tree to solve a problem. However, there are a few areas where we can improve the memory usage and running time:

1. **Avoid using `#include <bits/stdc++.h>`**: This header file includes quite a lot of standard library files, and it can lead to a slower compile time. Include only the necessary libraries.

2. **Avoid using `using namespace std;`**: This can possibly lead to name clashes, which can be hard to debug.

3. **Avoid using `#define` macros**: Using `#define` to create shortcuts for `lson` and `rson` makes the code harder to read and understand. It is better to use proper function or method names.

4. **Avoid using `getchar()` function for input**: It is slower than other input methods like `cin` or `scanf`. In competitive programming, we often use faster input methods.

5. **Use `scanf` instead of `printf` for faster output**: `scanf` is generally faster than `printf`.

6. **Avoid using global variables**: Global variables are accessible from anywhere in the code, which can lead to bugs that are hard to debug. It's better to pass variables as function parameters or use local variables.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <cctype>
typedef long long ll;

const int maxn = 1e5 + 7;
struct Seg {
  int l, r, v;
  ll num, sum;
} t[maxn << 5];
int n, tot, cor[maxn], rt[maxn];
ll ans[maxn];
std::vector<int> G[maxn];

void up(int id) {
  if (t[t[id].l].num > t[t[id].r].num) {
    t[id].num = t[t[id].l].num;
    t[id].v = t[t[id].l].v;
    t[id].sum = t[t[id].l].sum;
  } else if (t[t[id].l].num < t[t[id].r].num) {
    t[id].num = t[t[id].r].num;
    t[id].v = t[t[id].r].v;
    t[id].sum = t[t[id].r].sum;
  } else {
    t[id].num = t[t[id].l].num;
    t[id].v = t[t[id].l].v;
    t[id].sum = t[t[id].l].sum + t[t[id].r].sum;
  }
}

void modify(int &id, int l, int r, int p) {
  if (!id)
    id = ++tot;
  if (l == r) {
    t[id].num += 1;
    t[id].sum = l;
    t[id].v = l;
    return;
  }
  int mid = l + r >> 1;
  if (p <= mid)
    modify(t[id].l, l, mid, p);
  else
    modify(t[id].r, mid + 1, r, p);
  up(id);
}

int merge(int a, int b, int l, int r) {
  if (!a)
    return b;
  if (!b)
    return a;
  if (l == r) {
    t[a].v = l;
    t[a].sum = l;
    t[a].num += t[b].num;
    return a;
  }
  int mid = l + r >> 1;
  t[a].l = merge(t[a].l, t[b].l, l, mid);
  t[a].r = merge(t[a].r, t[b].r, mid + 1, r);
  up(a);
  return a;
}

void dfs(int u, int fa) {
  for (auto v : G[u]) {
    if (v == fa)
      continue;
    dfs(v, u);
    merge(u, v, 1, n);
  }
  modify(u, 1, n, cor[u]);
  ans[u] = t[u].sum;
}

void solve() {
  std::cin >> n;
  tot = n;
  for (int i = 1; i <= n; ++i)
    std::cin >> cor[i];
  for (int i = 1, u, v; i < n; ++i) {
    std::cin >> u >> v;
    G[u].push_back(v);
    G[v].push_back(u);
  }
  dfs(1, 0);
  for (int i = 1; i <= n; ++i) {
    std::cout << ans[i] << (i == n ? "\n" : " ");
  }
}

int main() {
  solve();
  return 0;
}
```
In this code, we are using `std::cin` and `std::cout` for input and output, which are faster than `getchar()` and `printf()`. We have removed `#define` macros and replaced them with proper function names for better readability. We have also removed the usage of `#include <bits/stdc++.h>` and `using namespace std;` for better coding practices.