The given program is already quite optimized. Nonetheless, there are few areas where we can make small modifications to improve its performance in terms of running time and memory usage.

1. Avoid using `#include <bits/stdc++.h>`
    The `<bits/stdc++.h>` header file includes quite a lot of headers, many of which are not being used in this program. This can slow down compilation time. Instead, only include the header files that are actually needed.

2. Use of Macros:
    Macros like `#define lson t[id].l` and `#define rson t[id].r` increase the readability of the code, but they can make debugging difficult, as they are replaced by the preprocessor before the compiler actually sees the code. 

3. Use of Global Variables:
    It is generally a good practice to avoid global variables. They can make the code hard to understand and debug, and lead to naming conflicts. Instead, use local variables and pass them to functions as needed.

4. Redundant Conditions in `up()` function:
    The `up()` function has redundant conditions, where it checks `t[lson].num > t[rson].num` and `t[lson].num < t[rson].num` separately, but performs very similar actions in both cases. This can be simplified.

5. I/O Operations:
    The `printf()` function is slower than `cout` with ios_base::sync_with_stdio(false) and cin.tie(NULL). So, replace `printf()` with `cout`.

Here's the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <cstdio>
using namespace std;

typedef long long ll;

const int maxn = 1e5 + 7;

struct Seg {
  int l, r, v;
  ll num, sum;
};

Seg t[maxn << 5];

void up(int id) {
  if (t[t[id].l].num >= t[t[id].r].num) {
    t[id].num = t[t[id].l].num;
    t[id].v = t[t[id].l].v;
    t[id].sum = t[t[id].l].sum;
  }
  if (t[t[id].l].num == t[t[id].r].num)
    t[id].sum += t[t[id].r].sum;
}

// other functions remain the same

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int _T = 1;
  while (_T--)
    solve();
  return 0;
}
```
