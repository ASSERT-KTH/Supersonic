#include <iostream>
#include <cstdio>

typedef long long ll;

const int maxn = 1e5 + 7;
struct Seg {
  int l, r, v;
  ll num, sum;
} t[maxn << 5];
int n, tot, cor[maxn], rt[maxn];
ll ans[maxn];
int G[maxn][10]; // Assuming maximum 10 connections per node.

inline int lson(int id) { return t[id].l; }
inline int rson(int id) { return t[id].r; }

void read(int &x) {
  int f = 0;
  x = 0;
  char ch = getchar();
  for (; !isdigit(ch); ch = getchar())
    f |= (ch == '-');
  for (; isdigit(ch); ch = getchar())
    x = x * 10 + ch - '0';
  if (f)
    x = -x;
}

void up(int id) {
  if (t[lson(id)].num > t[rson(id)].num) {
    t[id].num = t[lson(id)].num;
    t[id].v = t[lson(id)].v;
    t[id].sum = t[lson(id)].sum;
  } else if (t[lson(id)].num < t[rson(id)].num) {
    t[id].num = t[rson(id)].num;
    t[id].v = t[rson(id)].v;
    t[id].sum = t[rson(id)].sum;
  } else {
    t[id].num = t[lson(id)].num;
    t[id].v = t[lson(id)].v;
    t[id].sum = t[lson(id)].sum + t[rson(id)].sum;
  }
}

void modify(int &id, int l, int r, int p) {
  if (!id)
    id = ++tot;
  if (l == r) {
    t[id].num += 1;
    t[id].sum = l;
    t[id].v = l;
    return;
  }
  int mid = l + r >> 1;
  if (p <= mid)
    modify(t[id].l, l, mid, p);
  else
    modify(t[id].r, mid + 1, r, p);
  up(id);
}

int merge(int a, int b, int l, int r) {
  if (!a)
    return b;
  if (!b)
    return a;
  if (l == r) {
    t[a].v = l;
    t[a].sum = l;
    t[a].num += t[b].num;
    return a;
  }
  int mid = l + r >> 1;
  t[a].l = merge(t[a].l, t[b].l, l, mid);
  t[a].r = merge(t[a].r, t[b].r, mid + 1, r);
  up(a);
  return a;
}

void dfs(int u, int fa) {
  for (int i = 0; G[u][i] != 0; ++i) {
    int v = G[u][i];
    if (v == fa)
      continue;
    dfs(v, u);
    merge(u, v, 1, n);
  }
  modify(u, 1, n, cor[u]);
  ans[u] = t[u].sum;
}

void solve() {
  read(n);
  tot = n;
  for (int i = 1; i <= n; ++i)
    read(cor[i]);
  for (int i = 1, u, v; i < n; ++i) {
    read(u), read(v);
    G[u][i] = v;
    G[v][i] = u;
  }
  dfs(1, 0);
  for (int i = 1; i <= n; ++i) {
    printf("%lld%c", ans[i], i == n ? '\n' : ' ');
  }
}

int main() {
  solve();
  return 0;
}