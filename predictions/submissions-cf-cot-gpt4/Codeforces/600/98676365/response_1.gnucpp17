#include <iostream>
#include <vector>
#include <algorithm>
#define ll long long

inline void read(ll &x) {
  bool f = 0;
  x = 0;
  char ch = getchar();
  for (; !isdigit(ch); ch = getchar())
    f = (ch == '-');
  for (; isdigit(ch); ch = getchar())
    x = x * 10 + ch - '0';
  if (f)
    x = -x;
}

const int maxn = 1e5 + 7;
struct Seg {
  int l, r, v;
  ll num, sum;
} *t = new Seg[maxn << 5];
int n, tot, *cor = new int[maxn], *rt = new int[maxn];
ll *ans = new ll[maxn];
std::vector<int> *G = new std::vector<int>[maxn];

void up(int id) {
  if (t[id].l > t[id].r) {
    t[id].num = t[t[id].l].num;
    t[id].v = t[t[id].l].v;
    t[id].sum = t[t[id].l].sum;
  } else if (t[id].l < t[id].r) {
    t[id].num = t[t[id].r].num;
    t[id].v = t[t[id].r].v;
    t[id].sum = t[t[id].r].sum;
  } else {
    t[id].num = t[t[id].l].num;
    t[id].v = t[t[id].l].v;
    t[id].sum = t[t[id].l].sum + t[t[id].r].sum;
  }
}

void dfs(int u, int fa) {
  for (auto v : G[u]) {
    if (v == fa)
      continue;
    dfs(v, u);
    merge(u, v, 1, n);
  }
  modify(u, 1, n, cor[u]);
  ans[u] = t[u].sum;
}

void solve() {
  read(n);
  tot = n;
  for (int i = 1; i <= n; ++i)
    read(cor[i]);
  for (int i = 1, u, v; i < n; ++i) {
    read(u), read(v);
    G[u].push_back(v);
    G[v].push_back(u);
  }
  dfs(1, 0);
  for (int i = 1; i <= n; ++i) {
    std::cout << ans[i] << (i == n ? "\n" : " ");
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  int _T = 1;
  while (_T--)
    solve();
  delete[] t;
  delete[] cor;
  delete[] rt;
  delete[] ans;
  delete[] G;
  return 0;
}