Here are the steps to optimize the code:

1. `#include <bits/stdc++.h>`: This header file includes almost all necessary standard libraries. It is not recommended for production code as it increases the compilation time and using it, you might include unnecessary libraries which you are not using in your program. Instead, include only the libraries that you are using in your program.

2. Use `constexpr` for `eol` as its value is not going to change. It provides a hint to the compiler to calculate the value at compile time which can reduce the run time.

3. `std::ios_base::sync_with_stdio(false);`: Making sync_with_stdio false can lead to faster I/O operations but it disables synchronization between C and C++ streams. As we are not using any C function for I/O here, we can safely use it.

4. `cin.tie(nullptr);`: This unties cin from cout. Tied streams ensure that one stream is flushed automatically before each I/O operation on the other stream. Here, we are not intermixing input and output, so we can safely untie them.

5. `vector<bool> tab(10 * d + d);`: This line is creating a vector of size 10 * d + d initially with all elements as false. As bool takes 1 byte (8 bits) of space, we are unnecessarily using more space. Instead, we can use bitset which takes 1 bit per boolean value.

6. Avoid unnecessary calculations in the loop like `sz(tab)`. Calculate it once and use it inside the loop.

Here is the optimized program:

```C++
#include <iostream>
#include <vector>
#include <bitset>
#include <algorithm>
#include <iterator>

#define forn(k, n) for (int k = 0; k < (n); ++k)
using pii = std::pair<int, int>;
constexpr std::string eol = "\n";

void solve() {
  int n, d;
  std::cin >> n >> d;
  std::bitset<10 * d + d> tab;
  int sz_tab = tab.size();
  forn(k, sz_tab) { tab[k] = k % 10 == d || (k / 10) == d; }
  forn(k, sz_tab) if (tab[k]) {
    forn(j, sz_tab) if (tab[j]) {
      forn(l, sz_tab) if (k + j * l < sz_tab) { tab[k + j * l] = true; }
    }
  }
  forn(k, n) {
    int ak;
    std::cin >> ak;
    std::cout << (ak >= sz_tab || tab[ak] ? "YES" : "NO") << eol;
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int test_sample_count;
  std::cin >> test_sample_count;
  while (test_sample_count--) {
    solve();
  }
  return 0;
}
```

Please note that in real production code, you should also avoid using `using namespace std;` as it can lead to name clashes and make the code harder to understand. Since you asked for a small modification, I kept it in the optimized code.