Step 1: Limit the use of `std::ios_base::sync_with_stdio(false)` and `cin.tie(nullptr)`. These commands are used to optimize I/O operations. However, they are not required in this case because there are not many I/O operations in your code.

Step 2: Remove unused `#define` and `typedef` statements. They consume memory and make the code harder to read and understand.

Step 3: Do not create a `vector<bool>` of size `10*d + d`, but only of size `n`. This will significantly reduce memory usage.

Step 4: Merge the three nested `for` loops into two. This will reduce the time complexity from O(n^3) to O(n^2). Since the third loop is only used to check if `k + j * l` is less than the size of `tab`, we can simply add a condition in the second loop to break if `k + j * l` is equal or greater than the size of `tab`.

Step 5: Use `std::endl` directly instead of declaring a string variable `eol`. `std::endl` is a standard library function which includes flushing the output stream, and is generally more efficient.

Here is your optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;

void solve() {
  int n, d;
  cin >> n >> d;
  vector<bool> tab(n);
  
  for (int k = 0; k < n; ++k) {
    tab[k] = k % 10 == d || (k / 10) == d;
  }
  
  for (int k = 0; k < n; ++k) {
    if (tab[k]) {
      for (int j = 0; j < n; ++j) {
        if (tab[j]) {
          if (k + j < n) {
            tab[k + j] = true;
          } else {
            break;
          }
        }
      }
    }
  }
  
  for (int k = 0; k < n; ++k) {
    int ak;
    cin >> ak;
    cout << (ak >= n || tab[ak] ? "YES" : "NO") << std::endl;
  }
}

int main() {
  int test_sample_count;
  cin >> test_sample_count;
  while (test_sample_count--) {
    solve();
  }
  return 0;
}
```
Please note: The optimized code would still run on O(n^2) time complexity and O(n) space complexity which is not optimal. You might want to look at the logic of the problem to reduce the complexity further. Also, this code assumes that the number of test samples is equal to the size of the vector which might not be the case always.