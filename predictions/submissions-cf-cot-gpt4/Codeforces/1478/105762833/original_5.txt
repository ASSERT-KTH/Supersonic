The original program has several inefficiencies:

1. It includes the header file `<bits/stdc++.h>`, which is not recommended because it includes a lot of unnecessary libraries, increasing the compilation time. Instead, only the necessary libraries should be included.

2. The program uses the `forn` macro, which is unnecessary and makes the code less readable. It would be better to use standard `for` loops.

3. The `sz` function is converting the size of the container to an `int`. This can potentially cause problems if the container's size is more than `INT_MAX`. It would be safer to use the container's size type.

4. The `solve` function is too long and doing many things. It would be better to split it into smaller functions each doing one thing.

5. The program is reading input using `cin`, which can be slow. It would be faster to read input using `scanf`.

6. The program is using `vector<bool>`, which can be slower than `vector<int>` because it does specific bit manipulations.

7. The `solve` function is doing an unnecessary calculation in the innermost `for` loop. This can be optimized.

Here is the optimized version of your program:

```cpp
#include <iostream>
#include <vector>
#include <utility>
#include <iterator>
#include <algorithm>

using namespace std;
using pii = pair<int, int>;
const string eol = "\n";

vector<int> prepareTab(int d) {
    vector<int> tab(10 * d + d);
    for (int k = 0; k < tab.size(); ++k) {
        tab[k] = k % 10 == d || (k / 10) == d;
    }
    return tab;
}

void processTab(vector<int>& tab) {
    for (int k = 0; k < tab.size(); ++k) if (tab[k]) {
        for (int j = 0; j < tab.size(); ++j) if (tab[j] && k + j < tab.size()) {
            tab[k + j] = true;
        }
    }
}

void solve() {
    int n, d;
    scanf("%d %d", &n, &d);
    vector<int> tab = prepareTab(d);
    processTab(tab);
    for (int k = 0; k < n; ++k) {
        int ak;
        scanf("%d", &ak);
        printf("%s\n", (ak >= tab.size() || tab[ak] ? "YES" : "NO"));
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int test_sample_count;
    scanf("%d", &test_sample_count);
    while (test_sample_count--) {
        solve();
    }
    return 0;
}
```
This optimized version of the program should run faster and use less memory than the original version.