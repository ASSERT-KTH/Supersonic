The current program has multiple areas where optimization can be achieved. Here are the points that could be optimized:

1. The "#include <bits/stdc++.h>" header file includes lots of unnecessary header files, which increases compilation time. Include only necessary header files.

2. Avoid using "using namespace std". It can lead to name conflicts.

3. Instead of using "long long" for integer types, use "int64_t" to ensure consistency across different platforms.

4. Instead of using both "signed" and "int" in main function, just use "int".

5. The "void fast(void)" function is unnecessary as the code is not being used for online judging. Thus, it should be removed.

6. The "getN" function is called inside a loop. If "getN" is called multiple times with same parameters, it could lead to redundant calculations which could be avoided by memoization (storing the results of expensive function calls and reusing the results when the same inputs occur again).

7. The "solve" function could be made more efficient by using "reserve" function to allocate memory for vectors in advance to avoid reallocations during the runtime. 

8. Instead of using "endl", "\n" should be preferred as "endl" causes unnecessary flushing of the output buffer which could lead to decrease in performance.

Optimized Program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>
#define mod 1000000007

int64_t getN(int64_t n, int64_t x, std::unordered_map<int64_t, int64_t>& memo) {
  if(memo.find(n) != memo.end()){
    return memo[n];
  }
  int64_t cnt = 0;
  while (n > 0 && n % x == 0) {
    ++cnt;
    n /= x;
  }
  memo[n] = cnt;
  return cnt;
}

void solve() {
  int64_t n, x;
  std::cin >> n >> x;
  std::vector<int64_t> a(n), b(n);
  a.reserve(n);
  b.reserve(n);
  std::unordered_map<int64_t, int64_t> memo;
  for (auto &c : a)
    std::cin >> c;
  int64_t sum = 0;
  for (int64_t i = 0; i < n; ++i) {
    b[i] = getN(a[i], x, memo);
  }
  int64_t tok = b[0];
  for (int64_t i = 0; i < n; ++i) {
    if (i != 0)
      b[i] = std::min(b[i], tok);
    tok = std::min(tok, b[i]);
  }
  tok = b[n - 1];
  for (int64_t i = n - 1; i >= 0; --i) {
    if (i != n - 1)
      b[i] = std::min(b[i], 1 + tok);
    tok = std::min(tok, b[i]);
    sum += b[i] * a[i] + a[i];
  }
  std::cout << sum;
}

int main() {
  int64_t t;
  std::cin >> t;
  while (t--) {
    solve();
    std::cout << "\n";
  }
  return 0;
}
```
