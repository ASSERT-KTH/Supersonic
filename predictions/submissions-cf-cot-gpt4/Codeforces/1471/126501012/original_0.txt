Here are the steps to optimize this program:

1. Remove the `#include <bits/stdc++.h>` directive - it includes a lot of unnecessary libraries which increase the compilation time. Include only necessary libraries.
2. `ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` are used to make input-output more efficient. But in this code, you are using only cin and cout for input-output. You don't need to untie cin from cout. So, you can remove `cin.tie(NULL);`
3. In function `getN()`, you are performing modulo operation and division operation successively. You can optimize this by calculating the modulus once and storing it in a variable.
4. In function `solve()`, you are using two vectors 'a' and 'b'. The vector 'a' is used only for storing input and calculating sum. You can use a single variable 'element' to store the input and calculate the sum. This will reduce the memory usage.
5. Also, you are checking `if (i != 0)` and `if (i != n - 1)` in each iteration of the loop. Instead, you can perform the first operation for `i = 0` and `i = n - 1` separately before the loop and then start the loop from `i = 1` to `i = n - 2`. This will reduce the number of operations inside the loop.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>

using namespace std;

typedef long long ll;
const ll mod = 1000000007;

ll getN(ll n, ll x) {
  ll cnt = 0;
  ll mod = n % x;
  while (n > 0 && mod == 0) {
    ++cnt;
    n /= x;
    mod = n % x;
  }
  return cnt;
}

void solve() {
  ll n, x;
  cin >> n >> x;
  vector<ll> b(n);
  ll sum = 0, element;
  
  cin >> element;
  b[0] = getN(element, x);
  sum += element;

  for (ll i = 1; i < n; ++i) {
    cin >> element;
    b[i] = min(getN(element, x), b[i - 1]);
    sum += element;
  }

  ll tok = b[n - 1];
  sum += b[n - 1] * element;

  for (ll i = n - 2; i >= 0; --i) {
    b[i] = min(b[i], 1 + tok);
    tok = min(tok, b[i]);
    sum += b[i] * element;
  }
  
  cout << sum;
}

int main() {
  ios_base::sync_with_stdio(false);

  ll t;
  cin >> t;
  while (t--) {
    solve();
    cout << "\n";
  }
  return 0;
}
```

This optimized program performs fewer operations inside the loop and uses less memory by avoiding unnecessary vector. It should run faster and consume less memory than the original program.