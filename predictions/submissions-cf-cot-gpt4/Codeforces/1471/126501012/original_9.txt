Firstly, the `#include <bits/stdc++.h>` is not recommended for production code, as it is a GCC compiler specific header file and includes more standard libraries than needed, which increases the compile time. This should be replaced with specific standard library includes that are used in the program.

Secondly, you're using `int` as `long long` and `mod` constant which is not used in the program. Those should be removed.

Thirdly, the function `getN` makes division and modulus operations. Instead of doing `n % x == 0LL`, you can directly use `n / x`, which will give zero if n is not divisible by x, and then check if the result is zero or not. This will save a modulus operation.

Fourth, the `fast` function is not needed. It is used for competitive programming to speed up input/output operations. In a production code, it's better to remove it.

Lastly, while calculating `sum`, it is not necessary to multiply `b[i]` with `a[i]` and add `a[i]` separately. It can be simplified to `(b[i] + 1) * a[i]`.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int getN(int n, int x) {
  int cnt = 0;
  while (n > 0 && !(n / x)) {
    ++cnt;
    n /= x;
  }
  return cnt;
}

void solve() {
  int n, x;
  cin >> n >> x;
  vector<int> a(n), b(n);
  
  for (auto &c : a)
    cin >> c;
    
  int sum = 0;
  for (int i = 0; i < n; ++i) {
    b[i] = getN(a[i], x);
  }
  int tok = b[0];
  for (int i = 0; i < n; ++i) {
    if (i != 0)
      b[i] = min(b[i], tok);
    tok = min(tok, b[i]);
  }
  tok = b[n - 1];
  for (int i = n - 1; i >= 0; --i) {
    if (i != n - 1)
      b[i] = min(b[i], 1 + tok);
    tok = min(tok, b[i]);
    sum += (b[i] + 1) * a[i];
  }
  cout << sum;
}

int main(void) {
  int t;
  cin >> t;
  while (t--) {
    solve();
    cout << "\n";
  }
  return 0;
}
```

Please note that these are just some basic optimizations. Further optimization may require more significant changes to the code.