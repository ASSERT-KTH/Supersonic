Although the given code seems to be well-optimized, there are still a few changes we can make to further optimize it in terms of both memory usage and running time.

1. Using `#include <bits/stdc++.h>`: This header file includes almost all standard libraries in C++. It's convenient but it can increase the compile time because it includes unnecessary libraries. Instead, we should only include the necessary libraries for our code. 

2. The `#define int long long` can make the code harder to read and maintain. It's better to use `typedef long long int ll` which is more readable and maintainable.

3. The `fast()` function is used to speed up the I/O operations. However, the `freopen()` function in it is not required in most of the cases. It's used to redirect the input and output to the files which may not always be necessary.

4. In function `getN()`, instead of using `0LL`, simply `0` can be used. The compiler will automatically convert it to `long long`.

5. The `solve()` function is written in a way that is hard to understand. It's better to divide it into smaller functions, each of which does a specific task.

Here is the optimized version of the given code:

```cpp
#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;
typedef long long ll;

ll getN(ll n, ll x) {
    ll cnt = 0;
    while (n > 0 && n % x == 0) {
        ++cnt;
        n /= x;
    }
    return cnt;
}

void solve() {
    ll n, x;
    cin >> n >> x;
    vector<ll> a(n), b(n);
    for (auto &c : a)
        cin >> c;
    ll sum = 0;
    for (ll i = 0; i < n; ++i) {
        b[i] = getN(a[i], x);
    }
    ll tok = b[0];
    for (ll i = 0; i < n; ++i) {
        if (i != 0)
            b[i] = min(b[i], tok);
        tok = min(tok, b[i]);
    }
    tok = b[n - 1];
    for (ll i = n - 1; i >= 0; --i) {
        if (i != n - 1)
            b[i] = min(b[i], 1 + tok);
        tok = min(tok, b[i]);
        sum += b[i] * a[i] + a[i];
    }
    cout << sum;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    ll t;
    cin >> t;
    while (t--) {
        solve();
        cout << "\n";
    }
    return 0;
}
```

In this version, the code is much more clear and maintainable. The running time and memory usage are also optimized by removing unnecessary code and libraries.