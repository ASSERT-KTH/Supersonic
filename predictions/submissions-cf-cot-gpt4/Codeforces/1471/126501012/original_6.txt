This program is a competitive programming problem and it's already optimized for speed. However, there are a few small changes that could potentially reduce memory usage and perhaps improve speed slightly:

1. Use `std::ios::sync_with_stdio(false); std::cin.tie(NULL);` directly in `main()` function. This removes the need for an extra function `fast`. This function only runs once, so it doesn't affect the time complexity.

2. Avoid using `#include <bits/stdc++.h>`. This header file includes a lot of unnecessary libraries that increase the compilation time and memory usage. Include only the libraries that you use.

3. Avoid using global `#define` like `#define mod 1000000007` and `#define endl "\n"` if they are not used in the program. It unnecessarily increases the compilation time.

4. Avoid defining `signed main(void)`. The `main` function is always `int` by default. And `void` inside the parentheses is not needed as it's implied when there are no arguments.

Now let's write the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int getN(int n, int x) {
  int cnt = 0;
  while (n > 0 && n % x == 0) {
    ++cnt;
    n /= x;
  }
  return cnt;
}

void solve() {
  int n, x;
  cin >> n >> x;
  vector<int> a(n), b(n);
  for (auto &c : a)
    cin >> c;
  int sum = 0;
  for (int i = 0; i < n; ++i) {
    b[i] = getN(a[i], x);
  }
  int tok = b[0];
  for (int i = 0; i < n; ++i) {
    if (i != 0)
      b[i] = min(b[i], tok);
    tok = min(tok, b[i]);
  }
  tok = b[n - 1];
  for (int i = n - 1; i >= 0; --i) {
    if (i != n - 1)
      b[i] = min(b[i], 1 + tok);
    tok = min(tok, b[i]);
    sum += b[i] * a[i] + a[i];
  }
  cout << sum;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    solve();
    cout << "\n";
  }
  return 0;
}
```