The given C++ program can be optimized by reducing the number of times the minimum of two numbers is calculated. This can be achieved by using the `std::min` function in the C++ Standard Library only once in each loop iteration, instead of twice.

In the given code, `min` is used twice in each iteration of the two for loops. This can be reduced to once per iteration by storing the result of `min(b[i], tok)` and `min(b[i], 1 + tok)` in `tok` directly.

Also, the `std::endl` is replaced with `"\n"` for faster output.

Here's the optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define mod 1000000007
void fast(void) __attribute__((constructor));
void fast(void) {
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
}
int getN(int n, int x) {
  int cnt = 0LL;
  while (n > 0LL && n % x == 0LL) {
    ++cnt;
    n /= x;
  }
  return cnt;
}
void solve() {
  int n, x;
  cin >> n >> x;
  vector<int> a(n), b(n);
  for (auto &c : a)
    cin >> c;
  int sum = 0;
  for (int i = 0; i < n; ++i) {
    b[i] = getN(a[i], x);
  }
  int tok = b[0];
  for (int i = 0; i < n; ++i) {
    if (i != 0)
      tok = min(b[i], tok);
    b[i] = tok;
  }
  tok = b[n - 1];
  for (int i = n - 1; i >= 0; --i) {
    if (i != n - 1)
      tok = min(b[i], 1 + tok);
    b[i] = tok;
    sum += b[i] * a[i] + a[i];
  }
  cout << sum;
}
signed main(void) {
  int t;
  cin >> t;
  while (t--) {
    solve();
    cout << "\n";
  }
  return 0;
}
```