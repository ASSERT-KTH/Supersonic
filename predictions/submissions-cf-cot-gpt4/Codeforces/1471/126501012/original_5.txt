Here are the steps that we can take to optimize this program:

- Remove `#include <bits/stdc++.h>`. This header file includes many unnecessary header files which increase compilation time. Instead, include only the necessary headers for this program, that are `<iostream>`, `<vector>`, and `<algorithm>`.
- Remove `#define int long long`. Instead, use `using ll = long long;` This will make the code more readable and maintainable.
- Remove `#define mod 1000000007`. It is not used in this program.
- Remove `#define endl "\n"`. It is not used in this program.
- Remove `fast(void)`, as it is not necessary for optimizing the program. It is used for redirecting input/output from/to files and speeding up `cin` and `cout`. However, it does not affect the logic of the program itself.
- Remove the `signed main(void)` and replace it with `int main()`. The `signed` keyword is redundant since `int` is signed by default, and `void` is also redundant in C++.
- Use `std::ios_base::sync_with_stdio(false); std::cin.tie(NULL);` inside the `main` function if you want to use fast I/O.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
using ll = long long;

ll getN(ll n, ll x) {
  ll cnt = 0LL;
  while (n > 0LL && n % x == 0LL) {
    ++cnt;
    n /= x;
  }
  return cnt;
}

void solve() {
  ll n, x;
  cin >> n >> x;
  vector<ll> a(n), b(n);
  for (auto &c : a)
    cin >> c;
  ll sum = 0;
  for (ll i = 0; i < n; ++i) {
    b[i] = getN(a[i], x);
  }
  ll tok = b[0];
  for (ll i = 0; i < n; ++i) {
    if (i != 0)
      b[i] = min(b[i], tok);
    tok = min(tok, b[i]);
  }
  tok = b[n - 1];
  for (ll i = n - 1; i >= 0; --i) {
    if (i != n - 1)
      b[i] = min(b[i], 1 + tok);
    tok = min(tok, b[i]);
    sum += b[i] * a[i] + a[i];
  }
  cout << sum;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  ll t;
  cin >> t;
  while (t--) {
    solve();
    cout << "\n";
  }
  return 0;
}
```

These changes should decrease the compilation time and make the code more readable and maintainable. However, the running time complexity and memory usage of the program are mostly determined by the algorithm and data structures used, and these have not been changed.