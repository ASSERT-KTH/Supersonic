The given code has several loops which can be optimized to reduce running time. Also, some parts of the code can be improved for better memory usage. Here are the steps to optimize the code:

1. In `getN()` function, change `n` to `const` so it won't be changed.
2. Merge the loops for reading `a` and initializing `b`. This saves one pass over the data, reducing time complexity.
3. Merge the two loops for updating the `b` array. This again saves one pass over the data.
4. Since `sum` is only used to store a running total that is output at the end of the function, we can remove `sum` and output the results directly. This saves memory.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define mod 1000000007
#define endl "\n"

void fast(void) __attribute__((constructor));
void fast(void) {
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
}

int getN(const int n, int x) {  // Step 1
  int cnt = 0LL;
  int copyN = n;  // Copy of n, as n shouldn't be changed.
  while (copyN > 0LL && copyN % x == 0LL) {
    ++cnt;
    copyN /= x;
  }
  return cnt;
}

void solve() {
  int n, x;
  cin >> n >> x;
  vector<int> a(n), b(n);
  int tok;

  for (int i = 0; i < n; ++i) { // Step 2
    cin >> a[i];
    b[i] = getN(a[i], x);
    if (i != 0)
      b[i] = min(b[i], tok);
    tok = min(tok, b[i]);
  }

  tok = b[n - 1];
  for (int i = n - 1; i >= 0; --i) { // Step 3
    if (i != n - 1)
      b[i] = min(b[i], 1 + tok);
    tok = min(tok, b[i]);
    cout << b[i] * a[i] + a[i]; // Step 4
  }
}

signed main(void) {
  int t;
  cin >> t;
  while (t--) {
    solve();
    cout << "\n";
  }
  return 0;
}
```
Please note that this code may still have room for optimization depending on the specific requirements and constraints of your problem. Always remember to test your optimized code thoroughly to ensure correctness.