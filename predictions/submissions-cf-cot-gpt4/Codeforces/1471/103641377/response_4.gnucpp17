#include <bits/stdc++.h>
using namespace std;

constexpr char nl = '\n';
using ll = long long;
using vi = vector<ll>;
using pii = pair<ll, ll>;

inline bool sortbysec(const pii &a, const pii &b) { return a.second < b.second; }
inline bool compBySec(const pii &a, const pii &b) {
  return a.second == b.second ? a.first < b.first : a.second < b.second;
}

unordered_map<int, int> dp;
void preprocess() {
  dp[1] = 1;
  for (ll num = 1; num <= 1e6 + 5; ++num) {
    ll sqrtNum = sqrt(num);
    for (ll i = 2; i <= sqrtNum + 1; ++i) {
      if (num % i == 0) {
        if (dp[num / i] % i)
          dp[num] = dp[num / i] * i;
        else
          dp[num] = dp[num / i] / i;
        break;
      }
    }
    if (dp[num] == 0)
      dp[num] = num;
  }
}

void solve() {
  int n;
  cin >> n;
  unordered_map<int, int> mp;
  mp.reserve(1024);
  mp.max_load_factor(0.25);
  vi a(n);
  for (ll i = 0; i < n; ++i) cin >> a[i];
  int ans1 = 1;
  for (ll i = 0; i < n; ++i) {
    mp[dp[a[i]]]++;
    ans1 = max(ans1, mp[dp[a[i]]]);
  }
  int ans2 = 0;
  for (auto it : mp) {
    if (it.second % 2 == 0 || it.first == 1)
      ans2 += it.second;
  }
  int q;
  cin >> q;
  while (q--) {
    int w;
    cin >> w;
    if (w == 0)
      cout << ans1 << nl;
    else
      cout << max(ans1, ans2) << nl;
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  preprocess();
  int t = 1;
  cin >> t;
  while (t--)
    solve();

  return 0;
}