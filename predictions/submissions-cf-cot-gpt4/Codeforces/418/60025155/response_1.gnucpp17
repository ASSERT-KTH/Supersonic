#pragma GCC optimize("O3")
#pragma GCC target("sse4")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;
typedef long long ll;
typedef long double ld;
typedef complex<ld> cd;
typedef pair<int, int> pi;
typedef pair<ll, ll> pl;
typedef pair<ld, ld> pd;
typedef vector<int> vi;
typedef vector<ld> vd;
typedef vector<ll> vl;
typedef vector<pi> vpi;
typedef vector<pl> vpl;
typedef vector<cd> vcd;
template <class T>
using Tree =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define FORd(i, a, b) for (int i = (b)-1; i >= (a); i--)
#define F0Rd(i, a) for (int i = (a)-1; i >= 0; i--)
#define trav(a, x) for (auto &a : x)
#define mp make_pair
#define pb push_back
#define f first
#define s second
#define lb lower_bound
#define ub upper_bound
...
...
...

void upd(int p, int inc) {
  int v = a[p];
  FOR(i, (p + BLOCK - 1) / BLOCK, N / BLOCK + 1) {
    CNT[i][cnt[i][v]]--;
    cnt[i][v] += inc;
    CNT[i][cnt[i][v]]++;
    int c = cnt[i][v];
    if (c > 0 && !in[i][c]) {
      in[i][c] = 1;
      con[i].emplace_back(c);
    }
  }
}

...

int query3(int y) {
  int mn = query2(y), ans = 0;
  int b = y / BLOCK;
  vi ok;
  ok.reserve(con[b].size());
  for (const auto &i : con[b]) {
    if (!CNT[b][i]) {
      in[b][i] = 0;
      continue;
    }
    ok.emplace_back(i);
    if (i >= mn)
      ans += CNT[b][i];
  }
  swap(con[b], ok);
  FOR(i, BLOCK * b + 1, y + 1) {
    cnt[b][a[i]]++;
    ans += cnt[b][a[i]] == mn;
  }
  FOR(i, BLOCK * b + 1, y + 1) cnt[b][a[i]]--;
  return ans;
}
...