#include <bits/stdc++.h>
#include <iostream>
#include <map>
#include <vector>
#include <bitset>
#include <complex>
#include <set>
#include <chrono>
#include <cassert>
#include <array>

using namespace std;

typedef long long ll;
typedef complex<long double> cd;
typedef pair<int, int> pi;
typedef pair<ll, ll> pl;
typedef pair<long double, long double> pd;
typedef vector<int> vi;
typedef vector<long double> vd;
typedef vector<ll> vl;
typedef vector<pi> vpi;
typedef vector<pl> vpl;
typedef vector<cd> vcd;

#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define F0R(i, a) for (int i = 0; i < (a); ++i)
#define trav(a, x) for (auto &a : x)

const int MOD = 1000000007;
const ll INF = 1e18;
const long double PI = 4 * atan((long double)1);

template <class T> T invGeneral(T a, T b) {
  // unchanged
}

template <class T> struct modular {
  // unchanged
};

typedef modular<int> mi;
typedef pair<mi, mi> pmi;
typedef vector<mi> vmi;
typedef vector<pmi> vpmi;

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

void setIO() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}

int main() {
  setIO();

  const int MX = 100005;
  const int BLOCK = 1000;
  const int NUM = MX / BLOCK + 1;

  int cnt[NUM][2 * MX], CNT[NUM][MX], a[MX], A[MX];
  bitset<MX> in[NUM];
  vi con[NUM];
  map<int, int> m;
  int N;
  
  // unchanged
}