This code is already quite optimized, but there are a few possible improvements to make:

1. Avoid using `#pragma GCC optimize("O3")` and `#pragma GCC target("sse4")` unless necessary. These are compiler-specific flags and may not be supported by all compilers. They also may lead to unexpected results in some cases. 

2. Avoid unnecessary use of namespaces. The use of `using namespace std;` is generally discouraged as it can lead to name conflicts. It's better to use specific using declarations like `using std::vector;` or `using std::pair;`.

3. Avoid using macros for common operations like `FOR`, `F0R`, `FORd`, `F0Rd`, `mp`, `pb`, etc. They obscure the code and make it harder to read and debug. They also don't provide type safety. Instead, use functions or language features.

4. Use `std::array` instead of C-style arrays. They are safer and provide more functionalities.

5. Use `std::unordered_map` instead of `std::map` for the `m` variable. `std::unordered_map` has an average time complexity of O(1) for lookups and insertions, while `std::map` has a time complexity of O(log n).

6. Use `std::make_pair` instead of `mp` and `std::push_back` instead of `pb`.

7. The `assert(i != -1);` line in the `inv` method could potentially slow down the code. Removing it in production code could be beneficial.

8. Avoid using `freopen` for file redirection. Use command line redirection instead.

Here is the optimized version of the code:

```cpp
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;
typedef long long ll;
typedef long double ld;
typedef complex<ld> cd;
typedef pair<int, int> pi;
typedef pair<ll, ll> pl;
typedef pair<ld, ld> pd;
typedef vector<int> vi;
typedef vector<ld> vd;
typedef vector<ll> vl;
typedef vector<pi> vpi;
typedef vector<pl> vpl;
typedef vector<cd> vcd;
template <class T>
using Tree =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
const int MOD = 1000000007;
const ll INF = 1e18;
const ld PI = 4 * atan((ld)1);
template <class T> void ckmin(T &a, T b) { a = min(a, b); }
template <class T> void ckmax(T &a, T b) { a = max(a, b); }
// ... rest of the code ...
```