Looking at your code, it seems to be a very complex and highly optimized one. It does not have any evident bottlenecks or inefficiencies, and it is well-structured for efficiency. However, there are still a few minor improvements that can be made:

1. Avoiding unnecessary usage of `std::vector`: In your code, the vectors `con[NUM]` and `ok` are used to store some data, and then `ok` is swapped with `con[b]`. If the vectors are not necessary for storing data over multiple iterations, consider using a simple array or another data structure that doesn't involve dynamic memory allocation.

2. Reducing unnecessary function calls: There are several places in the code where function calls are made inside loops. If these function calls don't need to be made on every iteration of the loop, consider moving them outside the loop to reduce the overhead of function call and return.

3. Avoiding unnecessary usage of `std::map`: The `std::map` container is used for storing and retrieving data. However, if the keys are integers and do not have a large range, you might consider using a simple array or `std::unordered_map` instead, which can be faster because it uses hashing instead of binary search.

4. Optimizing I/O operations: The `std::ios_base::sync_with_stdio(0); std::cin.tie(0);` lines are used to make I/O faster. However, if you're using `std::cin` and `std::cout`, you can also use `std::endl` instead of `"\n"` for output, which will flush the output buffer and can make the program faster if there is a lot of output.

Here is your code with these optimizations applied:

```cpp
#pragma GCC optimize("O3")
#pragma GCC target("sse4")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;
// ... (the rest of your code remains the same)

// Optimization 1: Replace std::vector with std::array
array<int, NUM> con;
array<int, NUM> ok;

// ... (the rest of your code remains the same)

// Optimization 2: Move function calls outside loops
int main() {
  // ...
  // Move the re(M) function call outside the loop
  re(M);
  int t;
  for (int i = 0; i < M; i++) {
    re(t);
    if (t == 1) {
      // ...
    } else {
      // ...
    }
  }
}

// ... (the rest of your code remains the same)

// Optimization 3: Replace std::map with std::unordered_map
unordered_map<int, int> m;

// ... (the rest of your code remains the same)

// Optimization 4: Use std::endl instead of "\n"
pr(first);
cout << endl;  // Use std::endl instead of "\n"
```