#pragma GCC optimize("O3")
#pragma GCC target("sse4")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int MOD = 1000000007;
typedef vector<int> vi;
template <class T>
using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define trav(a, x) for (auto &a : x)
#define pb push_back
#define sz(x) (int)x.size()
#define all(x) begin(x), end(x)
#define rsz resize
void re(int &x) { cin >> x; }
template <class Arg, class... Args> void re(Arg &first, Args &... rest) {
  re(first);
  re(rest...);
}
void pr(int x) { cout << x; }
void ps() { pr("\n"); }
void ps(int first) {
  pr(first);
  ps();
}
template <class Arg, class... Args>
void ps(const Arg &first, const Args &... rest) {
  pr(first, " ");
  ps(rest...);
}
template <class T> T invGeneral(T a, T b) {
  a %= b;
  if (a == 0)
    return b == 1 ? 0 : -1;
  T x = invGeneral(b, a);
  return x == -1 ? -1 : ((1 - (ll)b * x) / a + b) % b;
}
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
const int MX = 100005;
const int BLOCK = 1000;
int cnt[MX/BLOCK + 1][2 * MX], CNT[MX/BLOCK + 1][MX], a[MX], A[MX];
bitset<MX> in[MX/BLOCK + 1];
vi con[MX/BLOCK + 1];
unordered_map<int, int> m;
int N;
int get(int x) {
  if (!m.count(x)) {
    int sz = sz(m);
    m[x] = sz;
  }
  return m[x];
}
void upd(int p, int inc) {
  int v = a[p];
  FOR(i, (p + BLOCK - 1) / BLOCK, N / BLOCK + 1) {
    CNT[i][cnt[i][v]]--;
    cnt[i][v] += inc;
    CNT[i][cnt[i][v]]++;
    int c = cnt[i][v];
    if (c > 0 && !in[i][c]) {
      in[i][c] = 1;
      con[i].pb(c);
    }
  }
}
int query2(int y) {
  int b = y / BLOCK;
  int ans = cnt[b][a[y]];
  FOR(i, BLOCK * b + 1, y + 1) ans += a[i] == a[y];
  return ans;
}
int query3(int y) {
  int mn = query2(y), ans = 0;
  int b = y / BLOCK;
  vi ok;
  trav(i, con[b]) {
    if (!CNT[b][i]) {
      in[b][i] = 0;
      continue;
    }
    ok.pb(i);
    if (i >= mn)
      ans += CNT[b][i];
  }
  swap(con[b], ok);
  FOR(i, BLOCK * b + 1, y + 1) {
    cnt[b][a[i]]++;
    ans += cnt[b][a[i]] == mn;
  }
  FOR(i, BLOCK * b + 1, y + 1) cnt[b][a[i]]--;
  return ans;
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  re(N);
  FOR(i, 1, N + 1) {
    re(A[i]);
    a[i] = get(A[i]);
    upd(i, 1);
  }
  int M;
  re(M);
  F0R(i, M) {
    int t;
    re(t);
    if (t == 1) {
      int v, p;
      re(v, p);
      upd(p, -1);
      A[p] = v;
      a[p] = get(v);
      upd(p, 1);
    } else {
      int x, y;
      re(x, y);
      if (x == 1)
        ps(A[y]);
      else {
        if (x % 2 == 0)
          ps(query2(y));
        else
          ps(query3(y));
      }
    }
  }
}