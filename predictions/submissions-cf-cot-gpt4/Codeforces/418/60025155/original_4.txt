This program is already optimized quite well, however, there are few small changes that we can make to slightly optimize the code.

1. Use "ios::sync_with_stdio(0); cin.tie(0);" only if you are mixing cin/cout with scanf/printf in your code. This will slightly speed up I/O operations.

2. The "#define" preprocessor directive is used to define constants or macros that are replaced by the preprocessor before the program is compiled. Instead of using "#define", we can use "const" for constant integers, and "inline" for functions. The compiler automatically inlines small functions, but "inline" can be used to suggest that larger functions be inlined as well. However, it's only a suggestion, and the compiler can ignore it.

3. Instead of using "#define mp make_pair", we can use "make_pair" directly in the code. The same applies to "#define pb push_back". This will reduce the number of preprocessor directives and make the code slightly more readable.

4. Modular arithmetic is used in this code. To optimize it, we can use bitwise operators. For example, instead of using "a % b", we can use "a & (b - 1)" when b is a power of two.

5. We can use "std::vector::reserve" to preallocate memory for vectors if we know their size in advance. This can reduce the number of reallocations and copies, and therefore speed up the program.

6. Avoid using std::endl to end lines, because it forces a flush of the output stream, which can slow down the program. Use "\n" instead.

7. Also, there are some variables that are defined but not used in the code like PI and INF. We can remove those.

Here is the optimized program:

```cpp
#pragma GCC optimize("O3")
#pragma GCC target("sse4")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/rope>
using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;
typedef long long ll;
typedef long double ld;
typedef complex<ld> cd;
typedef pair<int, int> pi;
typedef pair<ll, ll> pl;
typedef pair<ld, ld> pd;
typedef vector<int> vi;
typedef vector<ld> vd;
typedef vector<ll> vl;
typedef vector<pi> vpi;
typedef vector<pl> vpl;
typedef vector<cd> vcd;

// removed unused constants PI and INF
const int MOD = 1000000007;

template <class T>
using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

inline void trav(auto &a, auto &x) { for (auto &a : x); }

// replaced #define with const and inline
const auto all = [](auto &x) { return begin(x), end(x); };
const auto sz = [](auto &x) { return (int)x.size(); };

// removed unused #define directives

template <class T> void ckmin(T &a, T b) { a = min(a, b); }
template <class T> void ckmax(T &a, T b) { a = max(a, b); }

// rest of the code remains the same
```