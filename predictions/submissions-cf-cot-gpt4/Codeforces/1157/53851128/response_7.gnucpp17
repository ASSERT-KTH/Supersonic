#include <algorithm>
#include <iostream>
#include <set>
#include <vector>
typedef long long int ll;
using namespace std;

template <typename T> void gi(T &value) { cin >> value; }
template <typename T, typename... Args> void gi(T &value, Args &... args) {
  cin >> value;
  gi(args...);
}

template <typename T> void _po(const vector<T> &v) {
  for (auto &t : v) {
    cout << t << " ";
  }
  cout << endl;
}

template <typename... Args> void po(const Args &... args) {
  _po(args...);
}

int main() {
  ios_base::sync_with_stdio(false);
  ll n;
  gi(n);
  vector<ll> va, vb;
  for (ll i = 0; i < n; ++i) {
    ll t;
    gi(t);
    va.push_back(t);
  }
  for (ll i = 0; i < n; ++i) {
    ll t;
    gi(t);
    vb.push_back(t);
  }
  multiset<ll> stb;
  for (ll i = 0; i < n; ++i) { stb.insert(vb[i] % n); }
  vector<ll> vc;
  for (auto i : va) {
    auto it = stb.lower_bound((n - i) % n);
    if (it != stb.end() && (*it + i) % n < (*stb.begin() + i) % n) {
      vc.push_back((*it + i) % n);
      stb.erase(it);
    } else {
      vc.push_back((*stb.begin() + i) % n);
      stb.erase(stb.begin());
    }
  }
  po(vc);
  return 0;
}