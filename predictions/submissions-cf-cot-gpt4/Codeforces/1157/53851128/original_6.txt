The given program is quite complex and optimized, but there are still some minor optimizations that can be made for improving running time and memory usage.

1. In the macros section, there are several macros defined that are not being used in the code. Removing these unused macros can help in reducing the memory footprint of the program.
2. The macro `__IceQuarze__` is not needed. If you define some macros, they are defined. If you don't, they aren't. It doesn't make any difference in terms of speed or memory. So, you can remove it.
3. The function `in` checks whether an item is in a set, but it is not used in the main function. Thus, it can be removed.
4. The functions `gi`, `_po` and `po` are used for input and output operations. But in this case, they are over-engineered. It's easier and less memory consuming to use `cin` and `cout` directly.
5. The `mod` function is also defined but not used. It can be removed.

After applying these optimizations, here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <set>
#include <vector>
using namespace std;
typedef long long int ll;

int main() {
  ll n;
  cin >> n;
  vector<ll> va, vb;
  for (ll i = 0; i < n; ++i) {
    ll t;
    cin >> t;
    va.push_back(t);
  }
  for (ll i = 0; i < n; ++i) {
    ll t;
    cin >> t;
    vb.push_back(t);
  }
  multiset<ll> stb;
  for (ll i = 0; i < n; ++i) {
    stb.insert(vb[i] % n);
  }
  vector<ll> vc;
  for (auto i : va) {
    auto it = stb.lower_bound((n - i) % n);
    if (it != stb.end() && (*it + i) % n < (*stb.begin() + i) % n) {
      vc.push_back((*it + i) % n);
      stb.erase(it);
    } else {
      vc.push_back((*stb.begin() + i) % n);
      stb.erase(stb.begin());
    }
  }
  for (auto &t : vc) {
    cout << t << " ";
  }
  cout << endl;
  return 0;
}
```

This optimized code is simpler, easier to read, and uses less memory.