This code is already quite optimized but there are few points where it can be optimized further:

1. Directly use the required headers instead of including the entire STL libraries. This can help in reducing the compilation time.
2. Remove unused macros, typedefs, and functions to clean up the code and make it more readable.
3. Use `reserve` method for the vectors to allocate memory in advance. This can prevent unnecessary reallocations and improve the performance of vector insertions.
4. Use `emplace` instead of `push_back` or `insert` to construct the elements in-place and avoid unnecessary copy or move operations.
5. Use `auto` keyword for iterator types to make the code cleaner and more maintainable.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#define rep(i, a, b) for (int i = a; i < b; ++i)
using namespace std;

typedef long long int ll;
typedef multiset<ll> msl;
typedef vector<ll> vl;

int main() {
  ll n;
  cin >> n;
  
  vl va(n), vb(n), vc;
  vc.reserve(n);
  
  rep(i, 0, n) {
    cin >> va[i];
  }
  
  rep(i, 0, n) {
    cin >> vb[i];
  }

  msl stb(vb.begin(), vb.end());
  for (auto i : va) {
    auto it = stb.lower_bound((n - i) % n);
    if (it != stb.end() && (*it + i) % n < (*stb.begin() + i) % n) {
      vc.emplace_back((*it + i) % n);
      stb.erase(it);
    } else {
      vc.emplace_back((*stb.begin() + i) % n);
      stb.erase(stb.begin());
    }
  }
  
  for(auto &i : vc) {
    cout << i << " ";
  }
  cout << endl;

  return 0;
}
```

Explanation of changes:

1. Removed unnecessary headers, typedefs, and macros.
2. Used `reserve` method to pre-allocate memory for the `vc` vector.
3. Used `emplace_back` instead of `push_back` for `vc` vector.
4. Used `auto` keyword for iterator types.
5. Streamlined the input and output operations.

Please note that the performance impact of these optimizations may vary depending on the specific inputs and the C++ compiler used.