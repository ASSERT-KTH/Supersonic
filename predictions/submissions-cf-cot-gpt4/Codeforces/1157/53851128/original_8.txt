This program is already quite optimized; however, we can still make some improvements. 

1. The first thing we can do is to remove unnecessary macros. They are just making the code longer and harder to read. Macros like `pb`, `eb`, `ins`, `es`, etc., are not helpful. They are just a replacement of function names with shorter names which are less understandable.

2. The `in` function is defined but not used anywhere in the code. We can remove it to save memory.

3. The `mod` function is also defined but not used anywhere in the code. We can remove it to save memory.

4. The functions `_po` and `po` are used to print out the items of a vector. We can replace these with a simple loop in the main function to print the vector. 

5. We can reduce the usage of data structures. `std::multiset` is heavy on memory usage. Instead, we can use `std::vector` and sort it. This will reduce the memory footprint of the program.

6. The `fs` function is defined but not used anywhere in the code. We can remove it to save memory.

7. The `gi` function is used to get input. We can directly use `std::cin` which is more understandable.

Here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>

typedef long long int ll;

int main() {
  ll n;
  std::cin >> n;
  std::vector<ll> va, vb;
  for (ll i = 0; i < n; ++i) {
    ll t;
    std::cin >> t;
    va.push_back(t);
  }
  for (ll i = 0; i < n; ++i) {
    ll t;
    std::cin >> t;
    vb.push_back(t);
  }
  std::sort(vb.begin(), vb.end());
  std::vector<ll> vc;
  for (auto i : va) {
    auto it = std::lower_bound(vb.begin(), vb.end(), (n - i) % n);
    if (it != vb.end() && (*it + i) % n < (*vb.begin() + i) % n) {
      vc.push_back((*it + i) % n);
      vb.erase(it);
    } else {
      vc.push_back((*vb.begin() + i) % n);
      vb.erase(vb.begin());
    }
  }
  for (auto &t : vc) {
    std::cout << t << " ";
  }
  std::cout << std::endl;
  return 0;
}
```
This code does the same thing as the previous one but it is shorter, more understandable, and it is optimized for memory usage.