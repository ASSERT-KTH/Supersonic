#define __IceQuarze__
#ifdef __IceQuarze__
#include <algorithm>
#include <deque>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <vector>
#define pb push_back
#define eb emplace_back
#define ins insert
#define es erase
#define fi first
#define se second
#define bg begin()
#define ed end()
#define ep empty()
#define vl vector<ll>
#define sl set<ll>
#define pll pair<ll, ll>
#define msl multiset<ll>
#define mpll map<ll, ll>
#define smx(a, b) a = max(a, b)
#define smn(a, b) a = min(a, b)
#define rep(i, a, b) for (ll i = a; i < b; ++i)
typedef long long int ll;
using namespace std;
template <typename T> void gi(T &value) { std::cin >> value; }
template <typename T, typename... Args> void gi(T &value, Args &... args) {
  std::cin >> value;
  gi(args...);
}
template <typename T> void _po(const vector<T> &v) {
  for (auto &t : v) {
    cout << t << " ";
  }
  cout << endl;
}
template <typename T> void _po(const T &value) {
  std::cout << value << std::endl;
}
template <typename T, typename... Args>
void _po(const T &value, const Args &... args) {
  std::cout << value << " ";
  _po(args...);
}
template <typename... Args> void po(const Args &... args) {
#ifdef __DEBUG__
  std::cout << "> ";
#endif
  _po(args...);
}
#endif
int main() {
  ll n;
  gi(n);
  vl va, vb;
  rep(i, 0, n) {
    ll t;
    gi(t);
    va.pb(t);
  }
  rep(i, 0, n) {
    ll t;
    gi(t);
    vb.pb(t);
  }
  msl stb(vb.begin(), vb.end());
  vl vc;
  for (auto i : va) {
    auto it = stb.lower_bound(i);
    ll itVal = (*it + i) % n;
    ll bgVal = (*stb.bg + i) % n;
    if (it != stb.ed && itVal < bgVal) {
      vc.pb(itVal);
    } else {
      vc.pb(bgVal);
    }
    stb.es(it != stb.ed ? it : stb.bg);
  }
  po(vc);
  return 0;
}