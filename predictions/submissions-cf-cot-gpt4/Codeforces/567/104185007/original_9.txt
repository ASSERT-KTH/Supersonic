This program can be optimized by using a few techniques:

1. **Avoid Dynamic Memory Allocation:** The dynamic allocation of memory using the `new` operator can be costly in terms of time and memory. In this code, `arr` is a dynamically allocated array. We can avoid this by using a `std::vector`.

2. **Reserve Memory in Advance for Vectors and Maps:** If you know the size of the data structure in advance, you can reserve memory for it. This avoids unnecessary reallocations.

3. **Use ++i instead of i++ in loops:** When `i++` is used, a temporary variable is created and incremented. This is not the case with `++i`. This might have little effect on performance but it's a good practice in general.

4. **Use Fast Input/Output Operations:** The standard cin and cout operations in C++ are slow. You can speed up the program by using fast input/output operations.

Here's the optimized code:

```C++
#include <bits/stdc++.h>
using namespace std;

#define int long long
#define mod 1000000007
#define inf 1e18

typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update>
    pbds;

int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, k;
  cin >> n >> k;

  vector<int> arr(n);
  for (int i = 0; i < n; ++i) {
    cin >> arr[i];
  }

  unordered_map<int, int> pre, suf;
  pre.reserve(n);
  suf.reserve(n);
  pre[arr[0]]++;
  for (int i = n - 1; i >= 2; --i) {
    suf[arr[i]]++;
  }

  int ans = 0;
  for (int i = 1; i < n - 1; ++i) {
    if (arr[i] % k == 0 && pre[arr[i] / k] > 0 && suf[arr[i] * k] > 0) {
      ans += pre[arr[i] / k] * suf[arr[i] * k];
    }
    pre[arr[i]]++;
    suf[arr[i + 1]]--;
  }
  cout << ans << "\n";
}
```
