Optimization Steps:

1. Use an array instead of map for 'pre' and 'suf' to reduce lookup time from O(logN) to O(1). As 'arr' elements are not exceeding 'n', we can use an array. But if they can exceed 'n', we need to use map only.

2. Remove unnecessary macros like 'pb', 'mp', 'mt', 'pii', 'vi', 'umii', 'pqb', 'pqs', 'setbits', 'mod', 'inf', 'ps', 'mk', 'test', 'mt19937', 'pbds' and 'io' as they are not being used in the code.

3. The 'suf' array is first filled and then the last element is decreased by 1 in the loop. Instead, we can start filling 'suf' from second last element, which will save one operation.

4. Use faster IO methods to speed up 'cin' and 'cout' operations. Add 'ios_base::sync_with_stdio(false); cin.tie(NULL);'

Optimized Code:

```cpp
#include <iostream>
#include <vector>
using namespace std;
#define int long long

int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n, k;
  cin >> n >> k;

  vector<int> arr(n);
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
  }

  vector<int> pre(n), suf(n);
  pre[arr[0]]++;

  for (int i = n - 2; i >= 1; i--) {
    suf[arr[i]]++;
  }

  int ans = 0;
  for (int i = 1; i < n - 1; i++) {
    if (arr[i] % k == 0 && pre[arr[i] / k] > 0 && suf[arr[i] * k] > 0) {
      ans += pre[arr[i] / k] * suf[arr[i] * k];
    }
    pre[arr[i]]++;
    if(i+1 < n) suf[arr[i + 1]]--;
  }

  cout << ans << "\n";
  
  return 0;
}
```

Please note:

The above mentioned optimization is done assuming that 'arr' elements are not exceeding 'n'. In case 'arr' elements can exceed 'n', we need to use map (like in original code) instead of array for 'pre' and 'suf' due to possible out of bounds index access.