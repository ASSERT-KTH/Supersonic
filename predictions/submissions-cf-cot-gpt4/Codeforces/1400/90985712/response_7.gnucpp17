#include <iostream>
#include <vector>
#include <array>
#include <unordered_set>
#include <algorithm>

#define int long long
using namespace std;

const int N = 3e5 + 7, K = 20, X = 42, M = 998244353;
array<array<int, X>, X> cnk;
array<int, N> fact, defact;
array<array<int, X>, 1 << K> dp;
array<int, 1 << K> sz;
vector<int> op[N], cl[N];
array<pair<int, int>, N> lr;
array<pair<int, int>, K> bad;
array<bool, N> has;
array<bool, N> f, f2;

int bpow(int a, int n) {
  int res = 1;
  while (n > 0) {
    if (n & 1)
      res = (res * a) % M;
    a = (a * a) % M;
    n >>= 1;
  }
  return res;
}

int obr(int x) { return bpow(x, M - 2); }

void init() {
  cnk[0][0] = 1;
  for (int n = 0; n < X; n++) {
    cnk[n][0] = 1;
    for (int k = 1; k <= n; k++) {
      cnk[n][k] = (cnk[n - 1][k] + cnk[n - 1][k - 1]) % M;
    }
  }
  fact[0] = 1;
  for (int i = 1; i < N; i++)
    fact[i] = (fact[i - 1] * i) % M;
  defact[N - 1] = obr(fact[N - 1]);
  for (int i = N - 2; i >= 0; i--) {
    defact[i] = (defact[i + 1] * (i + 1)) % M;
  }
}

int get_cnk(int n, int k) {
  if (k > n || k < 0)
    return 0;
  if (n < X)
    return cnk[n][k];
  return (((fact[n] * defact[k]) % M) * defact[n - k]) % M;
}

signed main() {
  ios_base ::sync_with_stdio(0);
  cin.tie(0);
  
  f.fill(false);
  f2.fill(false);
  has.fill(false);
  dp.fill({0});
  init();
  
  int n, m;
  cin >> n >> m;
  
  for (int i = 0; i < n; i++) {
    cin >> lr[i].first >> lr[i].second;
    op[lr[i].first].push_back(i);
    cl[lr[i].second].push_back(i);
  }
  
  for (int i = 0; i < m; i++) {
    cin >> bad[i].first >> bad[i].second;
    bad[i].first--;
    bad[i].second--;
  }
  
  // The rest of the code goes here
  
  cout << res << "\n";
}