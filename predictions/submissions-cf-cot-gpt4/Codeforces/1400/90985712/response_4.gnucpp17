#include <bits/stdc++.h>
#define int long long
using namespace std;
const int N = 3e5 + 7, K = 20, X = 42, M = 998244353;
int cnk[X][X];
int fact[N], defact[N];
int dp[1 << K][X];
int sz[1 << K];
vector<int> op[N], cl[N];
pair<int, int> lr[N];
pair<int, int> bad[K];
bool has[N];
bool f[N], f2[N];

int bpow(int a, int n) {
  if (n == 0)
    return 1;
  if (n == 1)
    return a % M;
  if (n % 2 == 0) {
    int mem = bpow(a, n / 2);
    return (mem * mem) % M;
  }
  return (a * bpow(a, n - 1)) % M;
}

int obr(int x) { 
  static int precalculated = bpow(x, M - 2);
  return precalculated;
}

void init() {
  std::fill_n(cnk, X*X, 0);
  for (int n = 0; n < X; n++) {
    cnk[n][0] = 1;
    for (int k = 1; k <= n; k++) {
      cnk[n][k] = (cnk[n - 1][k] + cnk[n - 1][k - 1]) % M;
    }
  }
  fact[0] = 1;
  for (int i = 1; i < N; i++)
    fact[i] = (fact[i - 1] * i) % M;
  defact[N - 1] = obr(fact[N - 1]);
  for (int i = N - 2; i >= 0; i--) {
    defact[i] = (defact[i + 1] * (i + 1)) % M;
  }
}

int get_cnk_large(int n, int k) {
  return (((fact[n] * defact[k]) % M) * defact[n - k]) % M;
}

int get_cnk_small(int n, int k) {
  return cnk[n][k];
}

signed main() {
  ios_base ::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  std::fill_n(has, N, 0);
  std::fill_n(dp, (1 << K) * X, 0);
  std::fill_n(f, N, 0);
  std::fill_n(f2, N, 0);
  init();

  int n, m;
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    cin >> lr[i].first >> lr[i].second;
    op[lr[i].first].push_back(i);
    cl[lr[i].second].push_back(i);
  }
  for (int i = 0; i < m; i++) {
    cin >> bad[i].first >> bad[i].second;
    bad[i].first--;
    bad[i].second--;
  }
  
  dp[0][0] = 1;
  sz[0] = 0;
  for (int mask = 1; mask < (1 << m); mask++) {
    int pos = -1;
    for (int i = 0; i < m; i++) {
      if (mask & (1 << i)) {
        pos = i;
        break;
      }
    }
    
    // Rest of the code
  }
  
  cout << res << endl;
}