Explanation of optimization steps:
1. Remove unnecessary global variables: The global variable `t` is not needed as it can be declared inside the `main` function.
2. Use more meaningful variable names: The variable `i` is used as a loop variable, so it can be renamed to `loop_var` or something similar to make the code more readable.
3. Use memset instead of bzero: The function `bzero` can be replaced with `memset` to initialize the `t` array with zeros.
4. Use `sizeof` instead of hardcoding array size: Instead of hardcoding the size of the `t` array as `999`, it is better to use `sizeof(t)/sizeof(t[0])` to get the actual size of the array.
5. Avoid unnecessary calculations inside loops: The expression `!t[i] * i + t[i]` can be simplified by removing the multiplication with `!t[i]`.

Optimized code:

```c
#include <stdio.h>
#include <string.h>

int main() {
  int n;
  int t[999];
  
  while (scanf("%d", &n) && n) {
    memset(t, 0, sizeof(t));
    
    for (int loop_var = 0; loop_var < n; loop_var++) {
      char c1, c2;
      scanf(" %c %c", &c1, &c2);
      t[c1] = c2;
    }
    
    scanf("%d", &n);
    
    for (int loop_var = 0; loop_var < n; loop_var++) {
      char c;
      scanf(" %c", &c);
      putchar(t[c]);
    }
    
    putchar('\n');
  }
  
  return 0;
}
```