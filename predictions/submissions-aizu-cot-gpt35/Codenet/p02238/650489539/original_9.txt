The given program is an implementation of Depth First Search (DFS) on a directed graph. The goal is to optimize the program for running time and memory usage.

Here are the optimization steps:

1. Eliminate the unnecessary use of the `#define` preprocessor directive. Instead of defining constants for colors, we can use enumerations to represent the colors.
2. Initialize the 2D array `G` using `memset` instead of nested loops.
3. Use a more efficient loop structure in the `search_loop` function. Instead of looping from 1 to `n`, we can loop from `i + 1` to `n` and avoid unnecessary iterations.
4. Remove the check `if (i == next && G[i][i] > 0)` in the `search_loop` function. Since `G[i][i]` is always 0, this check is unnecessary.
5. Print the results directly instead of storing them in arrays `d` and `f`.
6. Simplify the main function by removing the unnecessary `do-while` loop.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <cstring>
using namespace std;

enum Color { WHITE, GRAY, BLACK };

int G[101][101];
Color color[101];
int n, t;

void search_loop(int i) {
  color[i] = GRAY;
  cout << i << " " << ++t << " ";
  
  for (int next = i + 1; next <= n; next++) {
    if (G[i][next] > 0 && color[next] == WHITE) {
      search_loop(next);
    }
  }
  
  cout << ++t << endl;
  color[i] = BLACK;
}

void dfs() {
  for (int i = 1; i <= n; i++)
    color[i] = WHITE;
  
  t = 0;
  
  for (int i = 1; i <= n; i++) {
    if (color[i] == WHITE)
      search_loop(i);
  }
}

int main() {
  cin >> n;
  
  memset(G, 0, sizeof(G));
  
  for (int i = 1; i <= n; i++) {
    int j, e;
    cin >> j >> e;
    
    for (int k = 1; k <= e; k++) {
      int node;
      cin >> node;
      G[j][node] = 1;
    }
  }
  
  dfs();
  
  return 0;
}
```

The optimized program reduces unnecessary checks and loops, and directly prints the results instead of storing them in arrays. This improves both the running time and memory usage of the program.