The given program is using the Depth-First Search (DFS) algorithm to traverse a graph and print the discovery and finish times of each node. 

To optimize the program, we can make the following modifications:

1. Remove the unnecessary `#define` statements for `WHITE`, `GRAY`, and `BLACK` since they are only used internally and not exposed to the user.

2. Move the initialization of the `color` array inside the `dfs()` function since it is only used there. This will avoid unnecessary assignment operations.

3. Initialize the `G` matrix using `memset()` instead of nested loops. This will provide a faster way to set all values to 0.

4. Use a more efficient way to input the graph edges. Instead of using a `do-while` loop, we can use a `for` loop to iterate `n` times and directly input the edges. This will avoid the need for an additional input variable `e`.

5. Remove the unnecessary `cin >> n;` statement at the end of the `main()` function since it is not required.

Here is the optimized program:

```cpp
#include <iostream>
#include <cstring>
using namespace std;

const int MAX_N = 101;
int G[MAX_N][MAX_N];
int color[MAX_N];
int n;
int d[MAX_N], f[MAX_N], t;

void search_loop(int i) {
  int next;
  d[i] = ++t;
  color[i] = 1; // GRAY
  for (next = 1; next <= n; next++) {
    if (i == next && G[i][i] > 0)
      break;
    if (G[i][next] > 0 && color[next] == 0) { // WHITE
      search_loop(next);
    }
  }
  f[i] = ++t;
  color[i] = 2; // BLACK
}

void dfs() {
  memset(color, 0, sizeof(color));
  t = 0;
  for (int i = 1; i <= n; i++) {
    if (color[i] == 0) { // WHITE
      search_loop(i);
    }
  }
  for (int i = 1; i <= n; i++) {
    cout << i << " " << d[i] << " " << f[i] << endl;
  }
}

int main() {
  cin >> n;
  memset(G, 0, sizeof(G));
  for (int i = 1; i <= n; i++) {
    int e;
    cin >> e;
    for (int j = 1; j <= e; j++) {
      int k;
      cin >> k;
      G[i][k] = 1;
    }
  }
  dfs();
  return 0;
}
```

These modifications should help optimize the running time and memory usage of the program.