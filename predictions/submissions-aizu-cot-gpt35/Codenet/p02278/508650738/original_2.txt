Step 1: Remove unnecessary headers
- The `<bits/stdc++.h>` header includes a lot of unnecessary headers, which can slow down compilation and increase memory usage. We can replace it with the necessary headers that are actually used in the program.

Step 2: Replace `int` with `int64_t`
- The program uses `int` for the size of arrays and loop variables. By replacing it with `int64_t`, we ensure that the program can handle larger input sizes.

Step 3: Optimize the `sort` function
- The program sorts the array `b` using the `sort` function. However, we can optimize this step by using `nth_element` instead. Since we only need the first `n` elements to be sorted, we can use `nth_element` to partition the array and find the `n`-th smallest element in linear time complexity.

Step 4: Optimize the `map` initialization
- The program uses two `map` containers `p` and `q` to store the indices of elements in arrays `a` and `b`. However, we can optimize this step by using a single `vector` container to store the indices. This will reduce memory usage and improve cache locality.

Step 5: Optimize the `unite` function
- The `unite` function in the `QuickFind` struct can be optimized by using the union by rank technique. Instead of always merging the smaller set into the larger set, we can keep track of the rank of each set and merge the set with lower rank into the set with higher rank. This will reduce the time complexity of the function.

Step 6: Optimize the calculation of `ans`
- The calculation of `ans` can be optimized by reducing the number of redundant calculations. We can calculate `tmp` and `m` only once for each set, instead of calculating them for each element in the set. This will reduce the time complexity of the program.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct QuickFind {
  vector<int64_t> r, p;
  vector<vector<int64_t>> v;

  QuickFind() {}

  QuickFind(int64_t size) {
    init(size);
  }

  void init(int64_t size) {
    r.resize(size, 0);
    p.resize(size, 0);
    v.resize(size);

    for (int64_t i = 0; i < size; i++) {
      r[i] = 1, p[i] = i;
      v[i].push_back(i);
    }
  }

  bool same(int64_t x, int64_t y) {
    return p[x] == p[y];
  }

  void unite(int64_t x, int64_t y) {
    x = find(x);
    y = find(y);

    if (x == y)
      return;

    if (r[x] < r[y])
      swap(x, y);

    r[x] += r[y];

    for (int64_t i = 0; i < (int64_t)v[y].size(); i++) {
      p[v[y][i]] = x;
      v[x].push_back(v[y][i]);
    }

    v[y].clear();
  }

  int64_t find(int64_t x) {
    if (p[x] != x)
      p[x] = find(p[x]);

    return p[x];
  }
};

int main() {
  int64_t n;
  cin >> n;

  vector<int64_t> a(n);
  for (int64_t i = 0; i < n; i++)
    cin >> a[i];

  vector<int64_t> b(a);
  nth_element(b.begin(), b.begin() + n, b.end());

  vector<int64_t> p(n), q(n);
  for (int64_t i = 0; i < n; i++) {
    p[a[i]] = i;
    q[b[i]] = i;
  }

  QuickFind qf(n);
  for (int64_t i = 0; i < n; i++)
    qf.unite(i, p[b[i]]);

  int64_t ans = 0;

  for (int64_t i = 0; i < n; i++) {
    int64_t k = qf.v[i].size();
    if (qf.find(i) != i || k == 1)
      continue;

    int64_t m = a[qf.v[i][0]];
    int64_t tmp = 0;

    for (int64_t j = 0; j < k; j++) {
      tmp += a[qf.v[i][j]];
      m = min(m, a[qf.v[i][j]]);
    }

    ans += min(tmp + m * (k - 2), tmp + m + b[0] * (k + 1));
  }

  cout << ans << endl;

  return 0;
}
```

Explanation:
- In this optimized version of the program, we made the following changes:
  - Removed unnecessary headers.
  - Replaced `int` with `int64_t`.
  - Used `nth_element` instead of `sort` to optimize the sorting step.
  - Replaced the `map` containers with `vector` containers to optimize memory usage.
  - Implemented the union by rank technique in the `unite` function of the `QuickFind` struct.
  - Calculated `tmp` and `m` only once for each set in the calculation of `ans`.