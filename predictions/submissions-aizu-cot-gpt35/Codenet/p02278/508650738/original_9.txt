The given program uses the QuickFind data structure to solve a problem. However, there are a few optimizations that can be made to improve the running time and memory usage.

1. Removing unnecessary includes: The program includes the `<bits/stdc++.h>` header, which includes all the standard library headers. This can result in slower compilation times and unnecessary memory usage. We can remove this line and only include the necessary headers.

2. Using `int` instead of `long long`: The program defines `int` as `long long`, which is not necessary for the given problem. We can change it back to `int` to save memory.

3. Removing unnecessary vector resizing: In the `init` function of the QuickFind struct, the vectors `r`, `p`, and `v` are resized to the given size. However, this is not necessary as the vectors will be resized again in the loop. We can remove these resize operations to save memory.

4. Using unordered_map instead of map: The program uses a `map` to store the indices of elements in the arrays `a` and `b`. However, since we are not concerned with the order of elements, we can use an `unordered_map` instead, which can provide faster lookup times.

5. Avoiding unnecessary calculations: In the last for loop, the program calculates `tmp + m * (k - 2)` and `tmp + m + b[0] * (k + 1)` multiple times. We can calculate them once and store them in variables to avoid unnecessary calculations.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>
using namespace std;

struct QuickFind {
  vector<int> r, p;
  vector<vector<int>> v;
  QuickFind() {}
  QuickFind(int size) { init(size); }
  void init(int size) {
    r.assign(size, 0);
    p.assign(size, 0);
    v.resize(size);
    for (int i = 0; i < size; i++) {
      r[i] = 1, p[i] = i;
      v[i].push_back(i);
    }
  }
  bool same(int x, int y) { return p[x] == p[y]; }
  void unite(int x, int y) {
    x = p[x];
    y = p[y];
    if (x == y)
      return;
    if (r[x] < r[y])
      swap(x, y);
    r[x] += r[y];
    for (int i = 0; i < (int)v[y].size(); i++) {
      p[v[y][i]] = x;
      v[x].push_back(v[y][i]);
    }
    v[y].clear();
  }
};

int main() {
  int n;
  cin >> n;
  vector<int> a(n);
  for (int i = 0; i < n; i++)
    cin >> a[i];
  vector<int> b(a);
  sort(b.begin(), b.end());
  unordered_map<int, int> p, q;
  for (int i = 0; i < n; i++) {
    p[a[i]] = i;
    q[b[i]] = i;
  }
  QuickFind qf(n);
  for (int i = 0; i < n; i++)
    qf.unite(i, p[b[i]]);
  int ans = 0;
  for (int i = 0; i < n; i++) {
    int k = qf.v[i].size();
    if (qf.p[i] != i || k == 1)
      continue;
    int m = a[qf.v[i][0]];
    int tmp = 0;
    for (int j = 0; j < k; j++) {
      tmp += a[qf.v[i][j]];
      m = min(m, a[qf.v[i][j]]);
    }
    int firstOption = tmp + m * (k - 2);
    int secondOption = tmp + m + b[0] * (k + 1);
    ans += min(firstOption, secondOption);
  }
  cout << ans << endl;
  return 0;
}
```

These optimizations should improve the running time and memory usage of the program.