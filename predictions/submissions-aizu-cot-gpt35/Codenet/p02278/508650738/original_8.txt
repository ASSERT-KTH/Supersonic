The given program solves a problem related to disjoint set union and calculates a specific value based on the input.

To optimize the program, we can make the following modifications:

1. Remove unnecessary include statements: The program includes the `<bits/stdc++.h>` header, which is not a standard C++ header and includes a large number of other headers. This can increase the compilation time and memory usage. We can remove this include statement.

2. Use `int` instead of `long long`: The program defines `int` as `long long`, which is not necessary for the given problem. We can change it back to `int` to save memory.

3. Use `vector<int>` instead of `map<int, int>`: The program uses a `map<int, int>` to store mappings between elements of the input array and their indices. However, using a `vector<int>` would be more efficient in terms of both time and memory. We can make this change.

4. Use `unordered_map<int, int>` instead of `map<int, int>`: Since the order of the elements in the `map<int, int>` does not matter, we can use an `unordered_map<int, int>` instead. This can improve the lookup time for the mappings.

5. Optimize the calculation of `ans`: The calculation of `ans` can be optimized by avoiding unnecessary calculations inside the loop. We can calculate the minimum value of `m` and the sum of the elements in `qf.v[i]` in a single loop iteration. This will reduce the number of loop iterations and improve the running time.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>
using namespace std;

struct QuickFind {
  vector<int> r, p;
  vector<vector<int>> v;

  QuickFind() {}
  QuickFind(int size) { init(size); }

  void init(int size) {
    r.resize(size, 0);
    p.resize(size, 0);
    v.resize(size);
    for (int i = 0; i < size; i++) {
      r[i] = 1, p[i] = i;
      v[i].resize(1, i);
    }
  }

  bool same(int x, int y) { return p[x] == p[y]; }

  void unite(int x, int y) {
    x = p[x];
    y = p[y];
    if (x == y)
      return;
    if (r[x] < r[y])
      swap(x, y);
    r[x] += r[y];
    for (int i = 0; i < (int)v[y].size(); i++) {
      p[v[y][i]] = x;
      v[x].push_back(v[y][i]);
    }
    v[y].clear();
  }
};

int main() {
  int n;
  cin >> n;
  vector<int> a(n);
  for (int i = 0; i < n; i++)
    cin >> a[i];
  vector<int> b(a);
  sort(b.begin(), b.end());
  unordered_map<int, int> p, q;
  for (int i = 0; i < n; i++) {
    p[a[i]] = i;
    q[b[i]] = i;
  }
  QuickFind qf(n);
  for (int i = 0; i < n; i++)
    qf.unite(i, p[b[i]]);
  int ans = 0;
  for (int i = 0; i < n; i++) {
    int k = qf.v[i].size();
    if (qf.p[i] != i || k == 1)
      continue;
    int m = a[qf.v[i][0]];
    int tmp = m * k;
    for (int j = 0; j < k; j++) {
      tmp += a[qf.v[i][j]];
      m = min(m, a[qf.v[i][j]]);
    }
    ans += min(tmp + m, tmp + b[0] * (k + 1));
  }
  cout << ans << endl;
  return 0;
}
```