The given program is a C++ implementation of topological sort algorithm. Topological sort is used to find a linear ordering of vertices in a directed graph such that for every directed edge (u, v), vertex u comes before v in the ordering.

To optimize the given program, we can make the following changes:

1. Remove unnecessary headers: The program includes the `<bits/stdc++.h>` header which includes a large number of headers, most of which are not required for this program. We can remove this line and include only the necessary headers.

2. Pass `Adj_list` by reference: The `topological_sort` function currently takes the `Adj_list` parameter by value, which means a copy of the vector is made every time the function is called. This can be inefficient for large graphs. We can modify the function to take `Adj_list` by reference to avoid unnecessary copying.

3. Use `emplace_back` instead of `push_back`: In the `topological_sort` function, we can use `emplace_back` instead of `push_back` when adding elements to `S`. `emplace_back` constructs the element in-place, avoiding the need for a copy or move operation.

4. Use `reserve` to preallocate memory: In the `topological_sort` function, we can use the `reserve` function to preallocate memory for the `topological_order` vector. This can improve performance by avoiding reallocations and copying when adding elements to the vector.

5. Use `size_t` for loop indices: The loop indices in the `topological_sort` function can be changed to `size_t` type instead of `int`. This can improve performance and avoid potential issues with negative indices.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <cassert>

struct Edge {
  int tgt_;
  Edge(int t) { tgt_ = t; }
};

typedef std::vector<std::vector<Edge>> Adj_list;

std::vector<int> topological_sort(Adj_list& G) {
  const size_t V = G.size();
  std::vector<int> S;
  std::vector<int> inorder(V, 0);
  
  for (const auto& edges : G) {
    for (const auto& e : edges) {
      inorder[e.tgt_]++;
    }
  }
  
  for (size_t i = 0; i < V; i++) {
    if (inorder[i] == 0) {
      S.emplace_back(i);
    }
  }
  
  assert(!S.empty());
  
  std::vector<int> topological_order;
  topological_order.reserve(V);
  
  while (!S.empty()) {
    int v = S.back();
    S.pop_back();
    topological_order.emplace_back(v);
    
    size_t num_edges = G[v].size();
    for (size_t i = num_edges; i > 0; i--) {
      Edge e = G[v][i - 1];
      inorder[e.tgt_]--;
      if (inorder[e.tgt_] == 0) {
        S.emplace_back(e.tgt_);
      }
    }
  }
  
  assert(topological_order.size() == V);
  
  return topological_order;
}

int main() {
  int V, E;
  std::cin >> V >> E;
  
  Adj_list G(V);
  
  for (int i = 0; i < E; i++) {
    int s, t;
    std::cin >> s >> t;
    G[s].emplace_back(t);
  }
  
  std::vector<int> ans = topological_sort(G);
  
  for (int i = 0; i < V; i++) {
    std::cout << ans[i] << std::endl;
  }
}
```

These optimizations should improve the performance and memory usage of the program.