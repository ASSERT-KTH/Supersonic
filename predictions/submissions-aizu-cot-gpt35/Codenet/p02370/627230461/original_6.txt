The original program reads an input graph and finds the topological ordering of the graph using a modified depth-first search algorithm. The program uses two vectors, `edge` and `state`, to represent the graph and keep track of the in-degree of each vertex.

To optimize the program, we can make the following modifications:

1. Instead of using a fixed size of 10001 for the `edge` vector, we can dynamically resize it based on the maximum vertex value (`V`). This will save memory usage when the input graph has a smaller number of vertices.
2. We can avoid using the `state` vector to keep track of the in-degree of each vertex. Instead, we can use a single vector `inDegree` to store the in-degree of each vertex. This will reduce memory usage.
3. We can use a queue data structure to perform a breadth-first search (BFS) traversal of the graph to find the topological ordering. This will improve the running time of the program.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int main() {
  int V, E;
  cin >> V >> E;

  vector<vector<int>> edge(V + 1);
  vector<int> inDegree(V + 1, 0);

  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    edge[s].push_back(t);
    inDegree[t]++;
  }

  queue<int> q;
  for (int i = 1; i <= V; i++) {
    if (inDegree[i] == 0)
      q.push(i);
  }

  vector<int> ans;
  while (!q.empty()) {
    int u = q.front();
    q.pop();
    ans.push_back(u);

    for (int v : edge[u]) {
      inDegree[v]--;
      if (inDegree[v] == 0)
        q.push(v);
    }
  }

  for (int i = 0; i < ans.size(); i++) {
    cout << ans[i] << endl;
  }

  return 0;
}
```

Explanation of the optimization steps:
1. We dynamically resize the `edge` vector based on the maximum vertex value (`V + 1`).
2. We replace the `state` vector with a single `inDegree` vector to store the in-degree of each vertex.
3. We use a queue data structure to perform a BFS traversal of the graph. We initialize the queue with all vertices that have an in-degree of 0. Then, for each vertex `u` in the queue, we process its adjacent vertices and decrement their in-degrees. If a vertex's in-degree becomes 0, we enqueue it. This ensures that vertices are processed in a topological order.
4. We output the vertices in the `ans` vector, which now contains the topological ordering of the graph.