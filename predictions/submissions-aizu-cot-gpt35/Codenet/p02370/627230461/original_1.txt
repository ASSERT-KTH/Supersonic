The given program finds the topological ordering of a directed acyclic graph using the Kahn's algorithm. To optimize the program, we can make the following modifications:

1. Instead of using a vector of vectors for `edge`, we can use a vector of sets. This will allow us to quickly check if an element is present in the set or not, resulting in faster insertion and deletion operations.

2. We can avoid using the `state` vector to keep track of the in-degrees of the vertices. Instead, we can directly count the in-degrees while reading the input.

3. We can use a queue to process the vertices with in-degree 0, instead of iterating over the entire `state` vector to find them.

4. Instead of using a vector `ans` to store the topological ordering, we can directly print the vertices in the order they are processed.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <set>
#include <queue>
using namespace std;

int main() {
  int V, E;
  cin >> V >> E;

  vector<set<int>> edge(10001);
  vector<int> inDegree(V, 0);

  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    edge[s].insert(t);
    inDegree[t]++;
  }

  queue<int> q;
  for (int i = 0; i < V; i++) {
    if (inDegree[i] == 0)
      q.push(i);
  }

  while (!q.empty()) {
    int curr = q.front();
    q.pop();
    cout << curr << endl;

    for (int next : edge[curr]) {
      inDegree[next]--;
      if (inDegree[next] == 0)
        q.push(next);
    }
  }

  return 0;
}
```

Explanation of the optimizations:

1. Replacing `vector<vector<int>>` with `vector<set<int>>` allows us to quickly check if an element exists in the set or not. This improves the performance of insertion and deletion operations.

2. By directly counting the in-degrees while reading the input, we eliminate the need for a separate `state` vector. This reduces memory usage and avoids an additional loop.

3. Using a queue to process vertices with in-degree 0 allows us to efficiently process the vertices in the correct order. We enqueue a vertex as soon as its in-degree becomes 0, rather than iterating over the entire `state` vector.

4. Instead of using a separate `ans` vector to store the topological ordering, we can directly print the vertices in the order they are processed. This eliminates the need for an additional loop and reduces memory usage.