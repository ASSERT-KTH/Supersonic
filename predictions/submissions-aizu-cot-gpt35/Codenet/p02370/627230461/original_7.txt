The given program is using a vector of vectors to represent a graph, where each element of the outer vector is a vector representing the outgoing edges from a vertex.

To optimize the program, we can use a more efficient data structure to represent the graph. Instead of using a vector of vectors, we can use an adjacency list representation. In this representation, we use a single vector where each element is a list of vertices connected to that vertex.

By using this representation, we can reduce the memory usage and improve cache performance, resulting in a faster program.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <list>
using namespace std;

int main() {
  int V, E;
  cin >> V >> E;

  vector<list<int>> edge(V);
  vector<int> state(V, 0);

  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    edge[s].push_back(t);
    state[t]++;
  }

  vector<int> ans;
  for (int i = 0; i < V; i++) {
    if (state[i] == 0)
      ans.push_back(i);
  }

  for (int i = 0; i < ans.size(); i++) {
    for (auto t : edge[ans[i]]) {
      state[t]--;
      if (state[t] == 0)
        ans.push_back(t);
    }
  }

  for (int i = 0; i < ans.size(); i++) {
    cout << ans[i] << endl;
  }

  return 0;
}
```

In this optimized version, we changed the vector of vectors (`vector<vector<int>>`) to a vector of lists (`vector<list<int>>`) to represent the graph. This reduces the memory usage and improves cache performance.

We also changed the loop condition in the second loop to iterate over the vertices in the `ans` vector directly, instead of using the size of `edge[ans[i]]`. This improves the efficiency of the loop.

Overall, these optimizations help improve the running time and memory usage of the program.