The given program is finding the topological ordering of a directed acyclic graph (DAG) using the Kahn's algorithm. The algorithm works by iteratively selecting nodes with no incoming edges and removing them from the graph.

To optimize the program, we can make the following changes:

1. Remove the unnecessary initialization of the `edge` vector to a fixed size of 10001. We can initialize it dynamically based on the input value `V`.
2. Use `reserve` function to preallocate memory for the `ans` vector to avoid frequent reallocations.
3. Use a more efficient data structure to store the state of each node. Instead of using a vector, we can use a deque to efficiently remove nodes with zero incoming edges.
4. Use a `while` loop instead of a `for` loop to iterate over the deque in the second part of the algorithm. This allows us to avoid unnecessary checks for the size of the `ans` vector inside the loop.
5. Use `emplace_back` instead of `push_back` to construct and insert elements in the `ans` vector.

Here's the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <deque>
using namespace std;

int main() {
  int V, E;
  cin >> V >> E;
  vector<vector<int>> edge(V);
  vector<int> state(V, 0);
  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    edge[s].push_back(t);
    state[t]++;
  }
  deque<int> ans;
  ans.reserve(V);
  for (int i = 0; i < V; i++) {
    if (state[i] == 0)
      ans.emplace_back(i);
  }
  while (!ans.empty()) {
    int node = ans.front();
    ans.pop_front();
    for (int next : edge[node]) {
      state[next]--;
      if (state[next] == 0)
        ans.emplace_back(next);
    }
  }
  for (int i = 0; i < V; i++) {
    cout << i << endl;
  }
  return 0;
}
```

These optimizations should improve the running time and memory usage of the program.