The given program is finding the topological ordering of a directed acyclic graph (DAG) using the Kahn's algorithm. The optimization steps that can be applied to this program are as follows:

1. **Avoid unnecessary vector initialization**: The `edge` vector is initialized with a fixed size of 10001, which is not necessary. We can initialize it dynamically based on the number of vertices `V`. This will save memory usage.

2. **Avoid unnecessary vector resizing**: The `ans` vector is initially empty and elements are added to it using the `push_back` function. This involves resizing the vector multiple times, which can be avoided by reserving the required capacity beforehand. This will improve the performance.

3. **Use range-based for loops**: Instead of using an index-based loop to iterate over the elements of `state` and `ans` vectors, we can use range-based for loops. This improves code readability and eliminates the need for manual index management.

4. **Avoid unnecessary if condition**: In the second loop, when updating the `state` vector and adding elements to the `ans` vector, we can directly add the elements to `ans` without checking if their state becomes 0. This is because we have already added all the vertices with state 0 in the first loop.

Here's the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  int V, E;
  cin >> V >> E;
  
  vector<vector<int>> edge(V);
  vector<int> state(V, 0);
  
  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    edge[s].push_back(t);
    state[t]++;
  }
  
  vector<int> ans;
  ans.reserve(V); // Reserve capacity for V elements
  
  for (int i = 0; i < V; i++) {
    if (state[i] == 0)
      ans.push_back(i);
  }
  
  for (int v : ans) {
    for (int t : edge[v]) {
      state[t]--;
      ans.push_back(t);
    }
  }
  
  for (int v : ans) {
    cout << v << endl;
  }
  
  return 0;
}
```