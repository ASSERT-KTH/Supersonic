Optimization:

1. Instead of using a vector of vectors to represent the graph edges, we can use a vector of sets. This will allow us to efficiently check if an edge exists between two vertices.

2. We can avoid the use of a separate vector to store the state of each vertex. Instead, we can use a vector of integers to store the in-degree of each vertex.

3. We can avoid the use of the ans vector to store the result. Instead, we can directly print the vertices as we process them.

4. We can use a queue to perform a breadth-first search (BFS) instead of using nested loops to iterate over the graph.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <set>
#include <queue>
using namespace std;

int main() {
  int V, E;
  cin >> V >> E;
  
  vector<set<int>> edge(10001);
  vector<int> inDegree(V, 0);
  
  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    edge[s].insert(t);
    inDegree[t]++;
  }
  
  queue<int> q;
  for (int i = 0; i < V; i++) {
    if (inDegree[i] == 0)
      q.push(i);
  }
  
  while (!q.empty()) {
    int curr = q.front();
    q.pop();
    cout << curr << endl;
    
    for (int next : edge[curr]) {
      inDegree[next]--;
      if (inDegree[next] == 0)
        q.push(next);
    }
  }
  
  return 0;
}
```

Explanation of optimizations:

1. Using a vector of sets instead of a vector of vectors allows us to efficiently check if an edge exists between two vertices. This is because sets automatically maintain a sorted order and provide efficient searching and insertion operations.

2. Instead of using a separate vector to store the state of each vertex, we can use a vector of integers to store the in-degree of each vertex. The in-degree of a vertex is the number of edges pointing towards it. By initializing the in-degree of each vertex to 0 and updating it as we process the edges, we can easily determine which vertices have no incoming edges.

3. Instead of storing the result in a separate vector and then printing it, we can directly print the vertices as we process them. This saves memory and avoids the need for an additional loop to print the result.

4. By using a queue to perform a breadth-first search (BFS), we can efficiently process the vertices in the graph. We start by enqueueing the vertices with an in-degree of 0, and then iteratively dequeue a vertex, print it, and update the in-degrees of its adjacent vertices. This ensures that we process the vertices in a topological order.