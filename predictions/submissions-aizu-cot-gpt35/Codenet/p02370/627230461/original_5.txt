Optimization step by step:

1. Reduce the size of the `edge` vector to be `V` instead of `10001`. This will save memory since we only need to store the edges for the given number of vertices.

2. Instead of using a `vector<int>` to store the state of each vertex, we can use a `vector<bool>` since the state only needs to be either 0 or 1. This will save memory since each boolean value only requires a single bit.

3. Instead of using a separate loop to find the vertices with zero state, we can combine it with the loop that updates the state and adds new vertices to the `ans` vector. This will reduce the number of iterations and improve the overall performance.

4. Instead of iterating over the `ans` vector using an index, we can use a range-based for loop. This will simplify the code and improve readability.

5. Instead of using `endl` to print each vertex, we can use `\n` which is more efficient since it doesn't flush the output stream.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;
int main() {
  int V, E;
  cin >> V >> E;
  vector<vector<int>> edge(V);
  vector<bool> state(V, false);
  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    edge[s].push_back(t);
    state[t] = true;
  }
  vector<int> ans;
  for (int i = 0; i < V; i++) {
    if (!state[i]) {
      ans.push_back(i);
      state[i] = true;
      for (int j : edge[i]) {
        state[j]--;
        if (!state[j]) {
          ans.push_back(j);
          state[j] = true;
        }
      }
    }
  }
  for (int i : ans) {
    cout << i << '\n';
  }
  return 0;
}
```