Step 1: Avoid unnecessary calculations in the solve function
In the solve function, there is a loop that iterates over the values of p[i] until p[i] <= n. However, there is no need to continue the loop once p[i] exceeds n. This will save unnecessary calculations.

Step 2: Avoid calculating solve2 for the same value multiple times
In the main function, the solve2 function is called for each value from 1 to 1000000. However, the results of solve2 are never used in the program. We can remove this loop to avoid unnecessary calculations.

Optimized program:

```cpp
#include <algorithm>
#include <iostream>
#define INF 1 << 28
using namespace std;
int p[1000001];
int memo[1000001][6];
int memo2[1000001];
int solve(int n, int count) {
  if (!n)
    return 0;
  if (n <= 0 || !count)
    return INF;
  if (memo[n][count])
    return memo[n][count];
  int ans = INF;
  for (int i = 0; p[i] <= n; i++) {
    if (p[i] > n)
      break;
    ans = min(ans, solve(n - p[i], count - 1) + 1);
  }
  return memo[n][count] = ans;
}
int main() {
  int n;
  for (int i = 0; i <= 1000000; i++)
    p[i] = i * (i + 1) * (i + 2) / 6;
  while (cin >> n, n)
    cout << solve(n, 5) << " " << solve2(n) << endl;
}
```