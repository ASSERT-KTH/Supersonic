Step 1: Remove unnecessary header files
The algorithm header file is not used in the program, so it can be removed.

Step 2: Remove unnecessary macros
The macro INF is not used in the program, so it can be removed.

Step 3: Reduce the size of arrays
The arrays p, memo, and memo2 are declared with a size of 1000001, but they are not fully utilized in the program. The size of these arrays can be reduced to the actual required size, which is determined by the input value of n.

Step 4: Optimize solve() function
In the solve() function, the loop iterates until p[i] <= n, which can be optimized by using a binary search instead of a linear search. This will reduce the number of iterations and improve the running time.

Step 5: Optimize solve2() function
In the solve2() function, the loop also iterates until p[i] <= n, but it only considers odd values of p[i]. This condition can be checked before the loop to further optimize the function.

Step 6: Optimize the main() function
In the main() function, the solve2() function is called for values from 1 to 1000000, which can be precomputed and stored in an array. This will eliminate the need for repeated function calls and improve the running time.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

vector<int> p;
vector<vector<int>> memo;
vector<int> memo2;

int solve(int n, int count) {
  if (!n)
    return 0;
  if (n <= 0 || !count)
    return INT_MAX;
  if (memo[n][count])
    return memo[n][count];
  int ans = INT_MAX;
  int low = 0, high = p.size() - 1;
  while (low <= high) {
    int mid = low + (high - low) / 2;
    if (p[mid] == n) {
      ans = min(ans, solve(n - p[mid], count - 1) + 1);
      break;
    } else if (p[mid] < n) {
      ans = min(ans, solve(n - p[mid], count - 1) + 1);
      low = mid + 1;
    } else {
      high = mid - 1;
    }
  }
  return memo[n][count] = ans;
}

int solve2(int n) {
  if (!n)
    return 0;
  if (n < 0)
    return INT_MAX;
  if (memo2[n])
    return memo2[n];
  int ans = INT_MAX;
  if (n % 2 == 1) {
    for (int i = 0; p[i] <= n; i++) {
      ans = min(ans, solve2(n - p[i]) + 1);
    }
  }
  return memo2[n] = ans;
}

int main() {
  int n;
  for (int i = 0; p[i] <= 1000000; i++)
    p.push_back(i * (i + 1) * (i + 2) / 6);
  memo.resize(1000001, vector<int>(6));
  memo2.resize(1000001);
  for (int i = 1; i <= 1000000; i++)
    solve2(i);
  while (cin >> n, n)
    cout << solve(n, 5) << " " << solve2(n) << endl;
}
```