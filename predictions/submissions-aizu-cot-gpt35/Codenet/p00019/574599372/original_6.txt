This program calculates the factorial of a given number `n` using a simple loop. The variable `a` is initialized to 1 and then multiplied by each number from 2 to `n` in the loop.

To optimize the program, we can do two things:

1. Use `unsigned long long` instead of `long long` to save memory. Since the factorial of a number is always a positive integer, we can use an unsigned type to take advantage of the extra range it provides.

2. Break out of the loop if `a` becomes zero. This is because once `a` becomes zero, further multiplication will also result in zero. This optimization will save unnecessary iterations and improve the running time for large values of `n`.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  unsigned long long a = 1;
  int i, n;
  cin >> n;
  
  for (i = 2; i <= n && a != 0; i++) {
    a *= i;
  }
  
  cout << a << endl;
  return 0;
}
```