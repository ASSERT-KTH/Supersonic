The given program calculates the factorial of a given number `n`. 

To optimize the program for running time and memory usage, we can make the following modifications:

1. Instead of using a `long long` variable to store the factorial value, we can use an `unsigned long long` variable. This will allow us to handle larger factorial values.

2. We can remove the unnecessary `#include <cstdio>` header file as it is not being used in the program.

3. Instead of using the `using namespace std;` directive, we can explicitly use the `std::` namespace qualifier for `cin` and `cout`. This will improve the readability of the code and prevent any potential naming conflicts.

4. We can initialize the variable `a` to `1` within the `for` loop declaration itself, eliminating the need for a separate assignment statement.

5. We can use the pre-increment operator `++i` instead of the post-increment operator `i++` in the `for` loop. This can potentially improve the performance of the loop.

Here is the optimized program:

```cpp
#include <iostream>

int main() {
  unsigned long long a = 1;
  int n;
  
  std::cin >> n;
  
  for (int i = 2; i <= n; ++i) {
    a *= i;
  }
  
  std::cout << a << std::endl;
  
  return 0;
}
```