The given program has a few areas that can be optimized:

1. Use a constant for the size of the `stone` array instead of hardcoding it as 50.
2. Instead of initializing the `stone` array inside the while loop, move it outside the loop to avoid unnecessary memory allocation and deallocation.
3. Remove the inner nested loops that iterate 1,000,000 times each, as they don't serve any purpose and only contribute to the program's running time.

Here is the optimized version of the program:

```cpp
#include <iostream>
using namespace std;

const int MAX_STONE = 50;

int main(void) {
  int stone[MAX_STONE];
  
  while (1) {
    for (int k = 0; k < MAX_STONE; k++) {
      stone[k] = 0;
    }
    
    int bowl;
    int n, p;
    cin >> n;
    cin >> p;
    
    if (n == 0 && p == 0) {
      return 0;
    }
    
    bowl = p;
    bool flg = true;
    int ans;
    
    for (int i = 0; flg; i = (i + 1) % n) {
      if (bowl == 0) {
        bowl = bowl + stone[i];
        stone[i] = 0;
      } else {
        stone[i]++;
        bowl--;
        if (bowl == 0 && stone[i] == p) {
          ans = i;
          flg = false;
        }
      }
    }
    
    cout << ans << endl;
  }
}
```

Explanation:
- I introduced a constant `MAX_STONE` to replace the hard-coded value of 50 for the `stone` array size. This allows for flexibility if the size needs to be changed in the future.
- I moved the declaration of the `stone` array outside the while loop to avoid unnecessary memory allocation and deallocation on each iteration.
- I removed the inner nested loops that iterate 1,000,000 times each since they don't serve any purpose and only contribute to the program's running time.