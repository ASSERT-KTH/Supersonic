Optimization Steps:

1. The program uses an array `stone` of size 50 to keep track of the number of stones in each bowl. However, the size of the array is fixed to 50, even though the value of `n` can be different. We can optimize this by dynamically allocating the array based on the value of `n`.

2. The program uses a loop to initialize the `stone` array with zeros every time the loop runs. However, this is unnecessary since the array is already initialized to zero when it is dynamically allocated.

3. The program uses a nested loop with very large iterations (1000000) for no apparent reason. This loop does not contribute to the functionality of the program and can be removed to improve the running time.

4. The program uses a boolean flag `flg` to control the termination of the loop. However, we can optimize this by using the value of `ans` to control the termination. If `ans` is initialized with an invalid value (e.g., -1), we can use this to terminate the loop instead of the boolean flag.

5. The program uses the `namespace std` directive, which is generally considered bad practice. We can remove this directive and qualify the standard library functions with the `std::` prefix instead.

Optimized Program:

```cpp
#include <iostream>
int main(void) {
  while (1) {
    int n, p;
    std::cin >> n;
    std::cin >> p;
    if (n == 0 && p == 0) {
      return 0;
    }
    int* stone = new int[n];
    int bowl = p;
    int ans = -1;
    for (int i = 0; ans == -1; i = (i + 1) % n) {
      if (bowl == 0) {
        bowl = bowl + stone[i];
        stone[i] = 0;
      } else {
        stone[i]++;
        bowl--;
        if (bowl == 0 && stone[i] == p) {
          ans = i;
        }
      }
    }
    delete[] stone;
    std::cout << ans << std::endl;
  }
}
```