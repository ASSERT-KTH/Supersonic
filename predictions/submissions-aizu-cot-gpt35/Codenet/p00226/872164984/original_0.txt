Explanation of the optimization steps:

1. Remove unused variables: The variables `i` and `b` are not used outside the loop, so they can be removed.

2. Reduce unnecessary assignments: The variables `h` and `b` are updated on each iteration, but they are only used to calculate the output `printf` statement. We can calculate the values directly in the `printf` statement instead of updating them separately.

3. Remove unnecessary memory clearing: The line `memset(R, i = h = b = !printf("%d %d\n", h, b - h), 232)` clears the memory of `R` array on each iteration. Since `R` is not used elsewhere in the program, this line can be removed.

4. Simplify bitwise operations: The line `!(R[c] ^= 1 << i % 5)` can be simplified to `!(R[c] ^= 1 << (i % 5))`.

5. Use `putchar` instead of `printf`: Since the output format is simple and only requires printing integers, we can use `putchar` instead of `printf`. This can reduce the overhead of formatting strings.

Optimized program:

```c++
R[99];
main(c) {
  for (; read(0, &c, 1); ++i > 9 && putchar(h + '0') + putchar(' ') + putchar(b - h + '0') + putchar('\n'))
    b += !!R[c], h += !(R[c] ^= 1 << (i % 5));
}
```