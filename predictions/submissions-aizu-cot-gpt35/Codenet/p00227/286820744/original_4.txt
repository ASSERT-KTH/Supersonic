Step 1: Avoid unnecessary vector resizing
In the original program, the `vegetables` vector is resized multiple times inside the for loop. This can be avoided by pre-allocating the required space for the vector before the loop. We can use the `reserve()` function to allocate the required space.

Step 2: Use a more efficient loop condition
The while loop condition `i < num` can be replaced with `i < cap * (num / cap)` to avoid unnecessary iterations.

Step 3: Simplify the calculation of the sum
Instead of using the modulus operator `%` to check if `(i + 1)` is divisible by `cap`, we can use a simple counter `count` to keep track of the number of vegetables added to the sum. If `count` is less than `cap`, we can add the vegetable to the sum.

Here is the optimized C++ program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>

int main() {
  int num, cap, price, i;
  while (std::cin >> num >> cap) {
    if (num == 0 && cap == 0) {
      break;
    }
    std::vector<int> vegetables;
    vegetables.reserve(num); // Pre-allocate required space
    for (i = 0; i < num; ++i) {
      std::cin >> price;
      vegetables.push_back(price);
    }
    std::sort(vegetables.begin(), vegetables.end(), std::greater<int>());
    int sum = 0;
    int count = 0; // Counter for number of vegetables added to sum
    for (i = 0; i < cap * (num / cap); ++i) {
      if (count < cap) {
        sum += vegetables[i];
        ++count;
      }
      else {
        count = 0;
      }
    }
    std::cout << sum << std::endl;
  }
}
```

This optimized program avoids unnecessary vector resizing and simplifies the loop condition and sum calculation, resulting in improved running time and reduced memory usage.