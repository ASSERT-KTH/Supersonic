Optimization steps:

1. Remove unnecessary global variables: The variables `k` and `ans` are declared as global variables but they are only used within the `main` function. It is better to declare them as local variables within the `main` function.

2. Avoid unnecessary calculations: The expression `((int)(t[i] - s[i]) + M) % M` is calculated inside the loop for each iteration. We can calculate it once and store it in a variable before the loop.

3. Remove unnecessary recursion: The function `rec` is recursively called multiple times within the loop. However, we can achieve the same result by using a loop instead of recursion.

4. Optimize loop iterations: The loop `for (int i = p; i < k; i++)` is executed twice. We can optimize it by merging the two loops into one.

5. Avoid repeated calculations: The expression `(dif[i] - rot) % M` and `(dif[i] + rot + M) % M` are calculated multiple times within the loop. We can calculate them once and store them in variables before the loop.

Here is the optimized program:

```c++
#include <iostream>
using namespace std;

const int M = 10;

int main() {
  int k;
  while (cin >> k, k) {
    string s, t;
    cin >> s >> t;
    
    int ans = k;
    int dif[12];
    for (int i = 0; i < k; i++) {
      dif[i] = ((int)(t[i] - s[i]) + M) % M;
    }
    
    int d = 0;
    int p = 0;
    while (p < k) {
      if (d >= ans)
        break;
      
      int rot = dif[p];
      if (rot == 0) {
        p++;
        continue;
      }
      
      d++;
      p++;
      
      int new_rot = (rot + M) % M;
      for (int i = p; i < k; i++) {
        dif[i] = (dif[i] - rot) % M;
        d++;
      }
      for (int i = p; i < k; i++) {
        dif[i] = (dif[i] + new_rot) % M;
      }
    }
    
    cout << d << endl;
  }
}
```