Optimization step by step:

1. Remove unnecessary namespace declaration: The `using namespace std;` declaration is not needed in this code because we are explicitly using `std::cin`, `std::cout`, and `std::endl`.

2. Remove unnecessary array initialization: The nested for loop initializing `dp` with zeros is not necessary because we are immediately overwriting these values in the following loops.

3. Modify the loop condition: The loop condition in the second nested loop should be `i <= N` instead of `i < N` to include the last element in the input array.

4. Optimize the calculation in the nested loops: Instead of performing two separate calculations for `dp[i][j] += dp[i - 1][j - a[i]]` and `dp[i][j] += dp[i - 1][j + a[i]]`, we can combine them into one calculation.

5. Optimize memory usage: The size of the `dp` array can be reduced to `110` instead of `110` to match the maximum values used in the loops.

Optimized code:

```cpp
#include <iostream>

int a[101];
long long dp[110][21];

int main() {
  int i, j;
  int N;
  std::cin >> N;

  for (i = 1; i <= N; i++) {
    std::cin >> a[i];
  }

  dp[1][a[1]] = 1;

  for (i = 2; i <= N; i++) {
    for (j = 0; j <= 20; j++) {
      if (j - a[i] >= 0)
        dp[i][j] += dp[i - 1][j - a[i]] + dp[i - 1][j + a[i]];
      else if (j + a[i] <= 20)
        dp[i][j] += dp[i - 1][j + a[i]];
    }
  }

  std::cout << dp[N][a[N]] << std::endl;

  return 0;
}
```