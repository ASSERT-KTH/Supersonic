The given program implements the disjoint set data structure using the union-find algorithm. The program reads inputs for the number of elements and operations, initializes the disjoint set, performs union operations based on the input, and then checks if two elements belong to the same set.

To optimize the program for running time and memory usage, we can make the following modifications:

1. Instead of using an array of size `100000` for the `join` and `num` arrays, we can dynamically allocate memory based on the input size `n`. This will save memory when `n` is smaller than `100000`.

2. We can use path compression to optimize the `find` function. Path compression is a technique used in union-find algorithms to flatten the structure of the tree by making each node point directly to the root. This reduces the time complexity of subsequent `find` operations.

3. We can use union by rank to optimize the `join` operation. Union by rank is a technique used in union-find algorithms to merge smaller trees into larger trees based on their ranks. This helps to keep the height of the tree low and improves the time complexity of subsequent operations.

Here is the optimized program with the above modifications:

```cpp
#include <iostream>
using namespace std;

int find(int join[], int x) {
  if (x != join[x])
    join[x] = find(join, join[x]);
  return join[x];
}

int main(int argc, char *argv[]) {
  int n, m, s, t;
  cin >> n >> m;

  int* join = new int[n];
  int* num = new int[n];

  for (int i = 0; i < n; i++) {
    join[i] = i;
    num[i] = 0;
  }

  for (int i = 0; i < m; i++) {
    cin >> s >> t;
    s = find(join, s);
    t = find(join, t);
    if (s != t) {
      if (num[s] < num[t])
        join[s] = t;
      else {
        join[t] = s;
        if (num[s] == num[t])
          num[s]++;
      }
    }
  }

  int q;
  cin >> q;

  for (int i = 0; i < q; i++) {
    cin >> s >> t;
    if (find(join, s) == find(join, t))
      cout << "yes\n";
    else
      cout << "no\n";
  }

  delete[] join;
  delete[] num;

  return 0;
}
```

Explanation of modifications:

1. Dynamically allocating memory for `join` and `num` arrays: Instead of using fixed-size arrays of size `100000`, we allocate memory dynamically based on the input size `n`. This saves memory when `n` is smaller than `100000`.

2. Path compression in the `find` function: We add path compression to the `find` function by updating the `join` array to point directly to the root of the set. This reduces the time complexity of subsequent `find` operations.

3. Union by rank in the `join` operation: We modify the `join` operation to use union by rank. We compare the ranks of the sets represented by `s` and `t` and merge the smaller rank set into the larger rank set. If the ranks are equal, we increment the rank of the resulting set. This helps to keep the height of the tree low and improves the time complexity of subsequent operations.

4. Memory deallocation: We deallocate the dynamically allocated memory for `join` and `num` arrays using the `delete[]` operator to avoid memory leaks.

These modifications optimize the program for running time and memory usage while preserving the functionality of the original program.