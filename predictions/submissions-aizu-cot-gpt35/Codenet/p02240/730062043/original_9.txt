The given program implements the Union-Find algorithm to determine if two elements are in the same set. The program first initializes an array `join` where each element is initially its own parent. Then, it reads `m` pairs of numbers and performs the Union operation by updating the parent of one element to the other element's parent. Finally, it reads `q` pairs of numbers and determines if the two elements belong to the same set by checking if their parents are the same.

To optimize the program for running time and memory usage, we can make the following modifications:

1. Remove the unused `num` array: The `num` array is used to store the size of each set, but it is not necessary for the Union-Find algorithm. We can safely remove this array to reduce memory usage.

2. Path compression: In the `find` function, we can apply path compression to flatten the tree and improve the running time of subsequent find operations. After finding the root of `x`, we can update the parent of each traversed element to the root.

With these optimizations in mind, here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int find(int join[], int x) {
  if (x == join[x])
    return x;
  return join[x] = find(join, join[x]);
}

int main(int argc, char *argv[]) {
  int n, m, join[100000], s, t;
  cin >> n >> m;

  for (int i = 0; i < n; i++) {
    join[i] = i;
  }

  for (int i = 0; i < m; i++) {
    cin >> s >> t;
    s = find(join, s);
    t = find(join, t);
    if (s != t) {
      join[s] = t;
    }
  }

  int q;
  cin >> q;

  for (int i = 0; i < q; i++) {
    cin >> s >> t;
    if (find(join, s) == find(join, t))
      cout << "yes\n";
    else
      cout << "no\n";
  }
}
```

In this optimized program, we removed the unused `num` array to save memory and applied path compression in the `find` function to improve the running time of find operations.