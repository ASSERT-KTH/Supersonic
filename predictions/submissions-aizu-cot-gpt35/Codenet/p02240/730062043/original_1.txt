The given program is implementing a disjoint set data structure using the union-find algorithm. It reads input to build a set of elements and then performs queries to check if two elements belong to the same set.

To optimize the program, we can make the following modifications:

1. Use a vector instead of an array for `join` and `num`. This will allow us to dynamically allocate memory and avoid wasting space when `n` is smaller than the maximum size of the arrays.

2. Instead of using recursion for the `find` function, we can use a loop to iteratively find the parent of an element. This will avoid the overhead of function calls.

3. Use a rank-based union optimization to merge sets. Instead of always attaching one set to another, we can attach the smaller set to the larger set. This will help to keep the height of the tree as small as possible.

4. Use the `ios_base::sync_with_stdio(false)` function to disable synchronization between C and C++ standard streams. This can improve the performance of input/output operations.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int find(vector<int>& join, int x) {
  while (x != join[x])
    x = join[x];
  return x;
}

int main(int argc, char *argv[]) {
  ios_base::sync_with_stdio(false);
  
  int n, m, s, t;
  cin >> n >> m;

  vector<int> join(n), num(n, 0);
  for (int i = 0; i < n; i++) {
    join[i] = i;
  }

  for (int i = 0; i < m; i++) {
    cin >> s >> t;
    s = find(join, s);
    t = find(join, t);
    if (s != t) {
      if (num[s] < num[t]) {
        join[s] = join[t];
      } else {
        join[t] = join[s];
        if (num[s] == num[t])
          num[s]++;
      }
    }
  }

  int q;
  cin >> q;
  for (int i = 0; i < q; i++) {
    cin >> s >> t;
    if (find(join, s) == find(join, t))
      cout << "yes\n";
    else
      cout << "no\n";
  }
}
```

With these optimizations, the program should have improved running time and reduced memory usage compared to the original version.