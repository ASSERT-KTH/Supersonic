Step 1: Remove unnecessary namespace declaration
- The `using namespace std;` statement can be removed, as it is not being used in the code.

Step 2: Optimize the find function
- Currently, the find function uses recursive calls to find the root of the given element in the join array.
- We can optimize this by implementing path compression technique.
- In path compression technique, during each find operation, we make the parent of each traversed node point directly to the root node.
- This reduces the time complexity of subsequent find operations.

Step 3: Optimize the main function
- The join and num arrays are currently declared with a fixed size of 100000.
- We can optimize the memory usage by declaring these arrays dynamically based on the input size.
- This will allow us to allocate memory only for the required number of elements.

Step 4: Optimize the input and output operations
- Currently, the input and output operations are performed using the `cin` and `cout` objects.
- These operations can be slow when reading or writing large amounts of data.
- We can optimize this by using the `scanf` and `printf` functions, which are faster for standard input/output operations.

Step 5: Combine the optimized code together

```cpp
#include <cstdio>

int find(int join[], int x) {
  if (x == join[x])
    return x;
  return join[x] = find(join, join[x]);
}

int main() {
  int n, m, s, t;
  scanf("%d %d", &n, &m);
  
  int* join = new int[n];
  int* num = new int[n]();
  
  for (int i = 0; i < n; i++) {
    join[i] = i;
  }
  
  for (int i = 0; i < m; i++) {
    scanf("%d %d", &s, &t);
    s = find(join, s);
    t = find(join, t);
    if (s != t) {
      if (num[s] < num[t])
        join[s] = join[t];
      else {
        join[t] = join[s];
        if (num[s] == num[t])
          num[s]++;
      }
    }
  }
  
  int q;
  scanf("%d", &q);
  
  for (int i = 0; i < q; i++) {
    scanf("%d %d", &s, &t);
    if (find(join, s) == find(join, t))
      printf("yes\n");
    else
      printf("no\n");
  }
  
  delete[] join;
  delete[] num;
  
  return 0;
}
```

Explanation:
- The unnecessary namespace declaration was removed.
- The find function was optimized using path compression technique.
- The main function was optimized to use dynamic memory allocation for the join and num arrays.
- The input and output operations were optimized using the scanf and printf functions.
- The optimized code combines all these modifications together.