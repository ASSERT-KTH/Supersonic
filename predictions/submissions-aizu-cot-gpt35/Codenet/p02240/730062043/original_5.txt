The given program is using a disjoint-set data structure to solve a problem of checking if two elements are in the same set. The program uses the "union-by-rank" heuristic to optimize the disjoint-set data structure. 

To optimize the program, we can make the following modifications:

1. Instead of using an array of size 100000 for `join` and `num`, we can dynamically allocate memory based on the input size `n`. This will reduce the memory usage if `n` is smaller than 100000.

2. We can optimize the `find` function by using path compression. After finding the root, we can update the parent of all the nodes on the path to the root to be the root itself. This will flatten the tree and improve the performance of future find operations.

3. We can optimize the `union` operation by using the "union-by-rank" heuristic. Instead of always attaching the smaller set to the larger set, we can keep track of the rank (or size) of each set and attach the smaller set to the larger set only if their ranks are different. This will help maintain a balanced tree structure and improve the performance of future find operations.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int find(int join[], int x) {
  if (x != join[x])
    join[x] = find(join, join[x]);
  return join[x];
}

int main(int argc, char *argv[]) {
  int n, m, s, t;
  cin >> n >> m;

  int *join = new int[n];
  int *num = new int[n];

  for (int i = 0; i < n; i++) {
    join[i] = i;
    num[i] = 0;
  }

  for (int i = 0; i < m; i++) {
    cin >> s >> t;
    s = find(join, s);
    t = find(join, t);
    if (s != t) {
      if (num[s] < num[t])
        join[s] = t;
      else {
        join[t] = s;
        if (num[s] == num[t])
          num[s]++;
      }
    }
  }

  int q;
  cin >> q;
  for (int i = 0; i < q; i++) {
    cin >> s >> t;
    if (find(join, s) == find(join, t))
      cout << "yes\n";
    else
      cout << "no\n";
  }

  delete[] join;
  delete[] num;

  return 0;
}
```

Explanation of optimizations:

1. We have changed the size of the `join` and `num` arrays to be dynamically allocated based on the input size `n`.

2. In the `find` function, we have added path compression by updating the parent of each node on the path to the root to be the root itself. This will flatten the tree and improve future find operations.

3. In the `union` operation, we have modified the attachment logic to use the "union-by-rank" heuristic. We compare the ranks of the sets and attach the smaller set to the larger set only if their ranks are different. This will help maintain a balanced tree structure and improve future find operations.

4. We have added memory deallocation using the `delete[]` operator to prevent memory leaks.

These modifications will optimize the running time and memory usage of the program.