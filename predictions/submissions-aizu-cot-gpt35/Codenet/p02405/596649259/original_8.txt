Explanation of Optimization Steps:

1. Remove unnecessary headers: The `iostream` header is the only header used in the program, so we can remove the `using namespace std` statement.

2. Use pre-increment operator: In the nested for loops, the loop variables `i` and `j` are incremented using the post-increment operator. However, using the pre-increment operator can be more efficient because it avoids the creation of a temporary object.

3. Remove unnecessary endl: The program currently uses `endl` to print a new line after each row and an extra new line after each grid. However, using `endl` flushes the output buffer, which can be slower than using `'\n'` to print a new line without flushing the buffer. We can remove the extra `endl` statements and replace them with `'\n'`.

4. Use prefix increment instead of postfix increment: In the condition `[(i + j) % 2 == 0]`, we can simplify the expression by using the prefix increment operator instead of the postfix increment operator. This can improve performance by avoiding unnecessary copying of the variable.

5. Use a more efficient conditional expression: The current conditional expression `[(i + j) % 2 == 0]` can be optimized by using a bitwise AND operator (`&`) instead of the modulo operator (`%`) to check if the sum of `i` and `j` is even. This can be done by checking if the least significant bit of the sum is zero.

Here is the optimized program:

```cpp
#include <iostream>

int main() {
  int H, W;
  std::cin >> H >> W;
  while (H != 0 && W != 0) {
    for (int i = 1; i <= H; ++i) {
      for (int j = 1; j <= W; ++j) {
        std::cout << ".#"[(i + j) & 1];
      }
      std::cout << '\n';
    }
    std::cout << '\n';
    std::cin >> H >> W;
  }
  return 0;
}
```