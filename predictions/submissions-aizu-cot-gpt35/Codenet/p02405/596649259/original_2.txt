Step 1: Remove unnecessary includes
The program includes the iostream library but does not use any of its features. Therefore, we can remove the include statement to optimize the program.

Step 2: Optimize loop conditions
The program uses a while loop with two conditions (H != 0 and W != 0) to control the program flow. However, we can optimize this by using a single condition (H * W != 0). Since both H and W are positive integers, their product will be zero only when both H and W are zero. This optimization allows us to remove one comparison operation in each iteration of the loop.

Step 3: Optimize nested loops
The program uses two nested loops to print the desired pattern. However, we can optimize this by using a single loop with a single variable. Instead of using separate variables i and j to control the loop indices, we can use a single variable k that ranges from 1 to H * W. We can then calculate the row and column indices within the loop using the formula (k + H - 1) / H and (k + H - 1) % H, respectively.

Here is the optimized program:

```cpp
#include <iostream>
int main() {
  int H, W;
  std::cin >> H >> W;
  while (H * W != 0) {
    for (int k = 1; k <= H * W; k++) {
      int row = (k + H - 1) / H;
      int col = (k + H - 1) % H;
      std::cout << ".#"[(row + col) % 2 == 0];
      if (k % W == 0) std::cout << std::endl;
    }
    std::cout << std::endl;
    std::cin >> H >> W;
  }
  return 0;
}
```