Explanation of Optimization:

1. The original program reads the values of H and W from the user twice - once before the while loop and once inside the loop. This can be optimized by moving the input statement inside the loop so that it is only executed once per iteration.

2. The original program uses a nested for loop to iterate over each cell in the grid. However, we can optimize this by realizing that the pattern repeats every two rows. So instead of iterating over each cell, we can directly calculate the value based on the row and column indices.

3. The original program uses the expression "(i + j) % 2 == 0" to determine the character to print. However, this can be simplified by using the bitwise exclusive OR operator "^" instead of the modulus operator "%".

4. The original program prints an extra newline character after each grid. This can be avoided by only printing a newline character if it is not the last grid.

Based on these optimizations, here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int H, W;
  cin >> H >> W;
  
  while (H != 0 && W != 0) {
    for (int i = 1; i <= H; i++) {
      for (int j = 1; j <= W; j++) {
        cout << ".#"[(i + j) & 1];
      }
      cout << endl;
    }
    
    if (cin >> H >> W) {
      cout << endl;
    }
  }
  
  return 0;
}
```