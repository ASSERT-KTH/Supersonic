Explanation of optimization steps:

1. Remove unnecessary arrays: The program declares two arrays `S` and `T` to store the input values. However, these arrays are not necessary as we can process the input values directly without storing them. This will save memory usage.

2. Use a more efficient algorithm: The current algorithm uses a nested loop to compare each element of `T` with each element of `S`. This results in a time complexity of O(n*q). However, we can use a more efficient algorithm by using a hash set to store the elements of `S`. Then, we can iterate over the elements of `T` and check if they exist in the hash set. This will reduce the time complexity to O(n+q).

Optimized program:

```c
#include <stdio.h>

int main() {
  int n, q, num, cnt = 0;
  scanf("%d", &n);
  
  // Create a hash set to store the elements of S
  int S[10001] = {0};
  
  for (int i = 0; i < n; i++) {
    scanf("%d", &num);
    S[num] = 1; // Mark the element as present in S
  }
  
  scanf("%d", &q);
  
  for (int i = 0; i < q; i++) {
    scanf("%d", &num);
    if (S[num] == 1) {
      cnt++; // Increment the count if the element exists in S
    }
  }
  
  printf("%d\n", cnt);
  
  return 0;
}
```

In this optimized program, we removed the arrays `T` and `S` and replaced them with a hash set `S` to store the elements of `S`. We marked the presence of each element of `S` in the hash set `S`. Then, we iterated over the elements of `T` and checked if they exist in the hash set `S`. If an element existed, we incremented the count `cnt`. Finally, we printed the count `cnt`.