Step 1: Use a more efficient data structure for storing the elements of S and T arrays. Instead of using fixed-size arrays, we can use dynamic arrays (vectors in C++).

Step 2: Use a more efficient algorithm for searching the elements of T in S. Instead of using nested loops, we can use a hash set or a binary search to achieve better performance.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <vector>
#include <unordered_set>
#include <algorithm>

int main() {
  int n, q;
  std::cin >> n;

  std::vector<int> S(n);
  for (int i = 0; i < n; i++)
    std::cin >> S[i];

  std::cin >> q;

  std::vector<int> T(q);
  for (int j = 0; j < q; j++)
    std::cin >> T[j];

  std::unordered_set<int> setS(S.begin(), S.end());
  int cnt = 0;
  for (int i = 0; i < q; i++)
    if (setS.find(T[i]) != setS.end())
      cnt++;

  std::cout << cnt << std::endl;
  return 0;
}
```

Explanation:

1. Replaced the `stdio.h` header with `iostream` to use `std::cin` and `std::cout` for input and output respectively.
2. Replaced the `int` arrays S and T with `std::vector<int>` for dynamic sizing and better memory management.
3. Replaced the nested loops with a more efficient approach using `std::unordered_set` to store the elements of S.
4. Used the `find()` function of `std::unordered_set` to search for each element in T. If found, incremented the `cnt` variable.
5. Used `std::cout` for output instead of `printf()`.