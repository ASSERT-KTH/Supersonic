To optimize the given program, we can make the following modifications:

1. Replace the `map<int, int>` data structure with a simple array to store the bubblehist information. This will significantly reduce the memory usage and improve the performance.

2. Instead of calculating the factorial modulo divisor for each `i` in the range [1, 100000], we can calculate it on the fly while iterating through the loop. This will eliminate the need for the `factmodary` array and reduce the memory usage.

3. Instead of using a `for(;;)` loop, we can use a `while(true)` loop to improve the readability of the program.

4. Remove the unnecessary `using namespace std` statement and explicitly qualify the standard library functions and types with the `std::` prefix.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <algorithm>

const int divisor = 1000000007;

int main() {
  long long fact = 1;
  int word[100000]{0};

  for (int i = 1; i <= 100000; i++) {
    fact = (fact * i) % divisor;
  }

  while (true) {
    int N, R;
    std::cin >> N;
    if (N == 0) {
      break;
    }
    std::cin >> R;

    for (int i = 0; i < N; i++) {
      word[i] = i + 1;
    }

    for (int i = 0; i < R; i++) {
      int s, t;
      std::cin >> s >> t;
      std::swap(word[s - 1], word[t - 1]);
    }

    int bubblehist[100001] = {0};
    long long ans = fact * (word[0] - 1) % divisor;
    bubblehist[word[0]] = 0;

    for (int i = 1; i < N; i++) {
      int facttime = word[i] - 1;
      int bubblenum = bubblehist[word[i]] == 0 ? bubblehist[word[i] - 1] + 1 : bubblehist[word[i]];
      bubblehist[word[i]] = bubblenum;
      
      for (int j = word[i] + 1; j <= N; j++) {
        bubblehist[j]++;
      }

      facttime -= bubblenum;
      ans = (ans + ((fact * facttime) % divisor)) % divisor;
      fact = (fact * (N - i)) % divisor;
    }

    std::cout << static_cast<int>(ans) << "\n";
  }

  return 0;
}
```

Explanation of the optimizations:

1. By replacing the `map<int, int>` with a simple array `bubblehist`, we eliminate the overhead of the map operations such as insertion, searching, and iteration. We can directly access the bubblehist information using the word index as the array index.

2. Calculating the factorial modulo divisor on the fly reduces the memory usage by removing the need for the `factmodary` array. We can update the `fact` variable in each iteration of the loop by multiplying it with the current `i` and taking the modulo divisor.

3. Using a `while(true)` loop instead of `for(;;)` improves the readability of the program by making the termination condition explicit.

4. Removing the `using namespace std` statement and explicitly qualifying the standard library functions and types with the `std::` prefix improves the clarity of the code and avoids potential naming conflicts.