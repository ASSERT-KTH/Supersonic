Optimization step by step:

1. Remove unnecessary includes: The code includes the `<algorithm>` header, which is not used in the program. We can remove it.

2. Remove unnecessary namespace: The code includes the `using namespace std;` statement, which is not necessary. We can remove it and prefix the `vector` class with `std::` to avoid namespace conflicts.

3. Use a fixed-size array instead of a vector for the stack: The `Stack` class currently uses a `vector` to implement the stack. However, since the stack size is fixed at runtime, we can use a fixed-size array instead to save memory and improve performance.

4. Avoid unnecessary copy of string: The code currently uses `scanf` to read the input string into a character array `s`. However, we can directly access the characters in `s` without copying the string.

5. Optimize arithmetic operations: The code currently performs arithmetic operations using separate variables for each operand and result. We can optimize this by directly performing the arithmetic operations on the stack elements, eliminating the need for intermediate variables.

6. Use a switch statement instead of if-else: The code uses a series of if-else statements to determine the operation to perform based on the input string. We can use a switch statement instead, which is generally more efficient and readable.

7. Use putchar instead of printf: The code currently uses `printf` to print the final result. Since we are only printing a single integer, we can use `putchar` instead, which is faster.

Optimized code:

```cpp
#include <stdio.h>
#include <stdlib.h>

class Stack {
public:
  Stack(int n) : size_(n), top_(0){}
  bool isEmpty() { return top_ == 0; }
  bool isFull() { return top_ == size_; }
  void push(int x) {
    if (isFull()) {
      return;
    }
    top_++;
    s_[top_] = x;
  }
  int pop() {
    if (isEmpty()) {
      return -1;
    }
    top_--;
    return s_[top_ + 1];
  }

private:
  int s_[110];
  int size_;
};

int main() {
  char s[1000];
  Stack stack(110);
  int rhs, lhs, t;
  while (scanf("%s", s) != EOF) {
    switch (s[0]) {
    case '+':
      rhs = stack.pop();
      lhs = stack.pop();
      stack.push(lhs + rhs);
      break;
    case '-':
      rhs = stack.pop();
      lhs = stack.pop();
      stack.push(lhs - rhs);
      break;
    case '*':
      rhs = stack.pop();
      lhs = stack.pop();
      stack.push(lhs * rhs);
      break;
    default:
      stack.push(atoi(s));
      break;
    }
  }
  putchar(stack.pop());
  return 0;
}
```