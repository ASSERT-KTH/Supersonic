Step 1: Remove unnecessary headers

The program includes the `<algorithm>` header, which is not used. We can remove it to improve compilation time and reduce memory usage.

Step 2: Optimize the `push` function

Currently, the `push` function checks if the stack is full before pushing an element. However, the program initializes the stack with a fixed size and does not resize it. Therefore, it is safe to assume that the stack will never be full.

We can remove the `isFull` check in the `push` function to optimize the program.

Step 3: Optimize the `pop` function

Similar to the `push` function, the `pop` function checks if the stack is empty before popping an element. However, the program does not attempt to pop from an empty stack. Therefore, it is safe to assume that the stack will never be empty.

We can remove the `isEmpty` check in the `pop` function to optimize the program.

Step 4: Optimize the `main` function

The `main` function can be optimized by removing the use of `scanf` and `printf` for input and output.

We can use the more efficient `std::cin` and `std::cout` instead.

Step 5: Remove unnecessary `using namespace std`

The program uses the `using namespace std` directive, which brings all the standard library names into the global namespace. However, it is recommended to avoid this practice to prevent potential naming conflicts.

We can remove the `using namespace std` directive and qualify the standard library names with the `std::` prefix.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>

class Stack {
public:
  Stack() : s_(), top_(0) {};
  void push(int x) {
    top_++;
    s_.push_back(x);
  }
  int pop() {
    top_--;
    return s_[top_];
  }

private:
  std::vector<int> s_;
  size_t top_;
};

int main() {
  char s[1000];
  Stack stack;
  while (std::cin >> s) {
    if (s[0] == '+') {
      int rhs = stack.pop();
      int lhs = stack.pop();
      int t = lhs + rhs;
      stack.push(t);
    } else if (s[0] == '-') {
      int rhs = stack.pop();
      int lhs = stack.pop();
      int t = lhs - rhs;
      stack.push(t);
    } else if (s[0] == '*') {
      int rhs = stack.pop();
      int lhs = stack.pop();
      int t = lhs * rhs;
      stack.push(t);
    } else {
      stack.push(std::atoi(s));
    }
  }
  std::cout << stack.pop() << std::endl;
  return 0;
}
```
The optimized code removes unnecessary headers, optimizes the `push` and `pop` functions, improves the input/output operations, and removes the `using namespace std` directive.