The given program can be optimized by making the following modifications:

1. Remove unnecessary headers: The <algorithm> header is not used in the program, so it can be removed.

2. Use C-style arrays instead of vector: Since the size of the stack is fixed, we can use a C-style array instead of a vector to store the stack elements. This will reduce the memory overhead of using a vector.

3. Avoid unnecessary function calls: The isFull() and isEmpty() functions can be optimized by checking the top_ variable directly. This will eliminate the function call overhead.

4. Optimize the push() and pop() functions: Currently, the push() and pop() functions are implemented in a way that requires shifting of elements in the stack. This can be optimized by using the top_ variable as the index to directly access the stack array.

5. Use switch-case instead of if-else: The if-else statements for checking the operator can be replaced with a switch-case statement. This will improve readability and potentially improve performance.

Based on these optimizations, here is the optimized program:

```cpp
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

class Stack {
public:
  Stack(int n) : size_(n), top_(0) {
    s_ = new int[size_];
  }

  ~Stack() {
    delete[] s_;
  }

  bool isEmpty() {
    return top_ == 0;
  }

  bool isFull() {
    return top_ == size_;
  }

  void push(int x) {
    if (isFull()) {
      return;
    }
    s_[top_++] = x;
  }

  int pop() {
    if (isEmpty()) {
      return -1;
    }
    return s_[--top_];
  }

private:
  int* s_;
  int size_;
  int top_;
};

int main() {
  char s[1000];
  Stack stack(110);

  while (scanf("%s", s) != EOF) {
    switch (s[0]) {
      case '+': {
        int rhs = stack.pop();
        int lhs = stack.pop();
        int t = lhs + rhs;
        stack.push(t);
        break;
      }
      case '-': {
        int rhs = stack.pop();
        int lhs = stack.pop();
        int t = lhs - rhs;
        stack.push(t);
        break;
      }
      case '*': {
        int rhs = stack.pop();
        int lhs = stack.pop();
        int t = lhs * rhs;
        stack.push(t);
        break;
      }
      default: {
        stack.push(atoi(s));
        break;
      }
    }
  }

  printf("%d\n", stack.pop());
  return 0;
}
```

These optimizations should improve the running time and memory usage of the program.