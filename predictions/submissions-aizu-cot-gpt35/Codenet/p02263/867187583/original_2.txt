The given program can be optimized in the following steps:

1. Remove unnecessary headers: The `algorithm` and `string` headers are not used in the program and can be removed.

2. Use `std::array` instead of `std::vector`: Since the size of the stack is fixed at the time of construction, we can use `std::array` instead of `std::vector` for better memory usage.

3. Use a variable to store the result of `stack.pop()`: Instead of calling `stack.pop()` twice in each operation, we can store the result in a variable and reuse it.

4. Use a switch-case statement instead of multiple if-else if statements: Instead of using multiple if-else if statements, we can use a switch-case statement to determine the operation based on the first character of the input string.

Here is the optimized program:

```cpp
#include <stdio.h>
#include <stdlib.h>
#include <array>

class Stack {
public:
  Stack(int n) : s_(), top_(0){};
  bool isEmpty() { return top_ == 0; }
  bool isFull() { return top_ == s_.size(); }
  void push(int x) {
    if (isFull()) {
      return;
    }
    top_++;
    s_[top_] = x;
  }
  int pop() {
    if (isEmpty()) {
      return -1;
    }
    top_--;
    return s_[top_ + 1];
  }

private:
  std::array<int, 110> s_;
  size_t top_;
};

int main() {
  char s[1000];
  Stack stack(110);
  while (scanf("%s", s) != EOF) {
    int result;
    switch (s[0]) {
      case '+':
        result = stack.pop() + stack.pop();
        stack.push(result);
        break;
      case '-':
        result = stack.pop();
        result = stack.pop() - result;
        stack.push(result);
        break;
      case '*':
        result = stack.pop() * stack.pop();
        stack.push(result);
        break;
      default:
        stack.push(atoi(s));
        break;
    }
  }
  printf("%d\n", stack.pop());
  return 0;
}
```