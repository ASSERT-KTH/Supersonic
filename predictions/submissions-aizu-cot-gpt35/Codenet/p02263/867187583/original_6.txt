To optimize the given program, we can make the following modifications:

1. Remove unnecessary includes: The program includes the `<algorithm>` and `<string.h>` headers, which are not used. We can remove these includes.

2. Use `std::array` instead of `std::vector`: Since the size of the stack is fixed at the time of construction, we can use `std::array` instead of `std::vector` for better memory usage and performance.

3. Preallocate memory for the character array `s[]`: The character array `s[]` is used to read input strings. We can preallocate a fixed amount of memory for this array instead of using a large buffer of size 1000.

4. Use a switch statement instead of multiple if-else statements: The program checks the first character of the input string using multiple if-else statements. We can use a switch statement instead, which can potentially improve performance.

5. Use a single variable for the result of arithmetic operations: The program uses a separate variable `t` to store the result of arithmetic operations. We can eliminate this variable and directly push the result onto the stack.

Here is the optimized C++ program:

```cpp
#include <stdio.h>
#include <stdlib.h>
#include <array>

class Stack {
public:
  Stack(int n) : s_{}, top_(0){};
  bool isEmpty() { return top_ == 0; }
  bool isFull() { return top_ == s_.size(); }
  void push(int x) {
    if (isFull()) {
      return;
    }
    top_++;
    s_[top_] = x;
  }
  int pop() {
    if (isEmpty()) {
      return -1;
    }
    top_--;
    return s_[top_ + 1];
  }

private:
  std::array<int, 110> s_;
  size_t top_;
};

int main() {
  char s[10];
  Stack stack(110);
  while (scanf("%9s", s) != EOF) {
    switch (s[0]) {
      case '+': {
        int rhs = stack.pop();
        int lhs = stack.pop();
        stack.push(lhs + rhs);
        break;
      }
      case '-': {
        int rhs = stack.pop();
        int lhs = stack.pop();
        stack.push(lhs - rhs);
        break;
      }
      case '*': {
        int rhs = stack.pop();
        int lhs = stack.pop();
        stack.push(lhs * rhs);
        break;
      }
      default: {
        stack.push(atoi(s));
        break;
      }
    }
  }
  printf("%d\n", stack.pop());
  return 0;
}
```

Explanation:

1. Removed unnecessary includes `<algorithm>` and `<string.h>`.
2. Replaced `vector<int>` with `array<int, 110>` for the stack.
3. Reduced the size of the character array `s[]` to 10.
4. Replaced multiple if-else statements with a switch statement for better performance.
5. Removed the separate variable `t` and directly pushed the result onto the stack.