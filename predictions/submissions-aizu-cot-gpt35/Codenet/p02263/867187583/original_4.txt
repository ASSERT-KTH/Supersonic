The given program can be optimized in the following steps:

1. Remove unnecessary headers: The program includes headers that are not used. We can remove `<algorithm>` and `<string.h>`.

2. Replace `scanf` with `cin`: The program uses `scanf` to read input, which can be slow. We can replace it with `cin` for faster input.

3. Replace `printf` with `cout`: Similarly, we can replace `printf` with `cout` for faster output.

4. Avoid unnecessary copies: The program currently creates copies of the integers `lhs` and `rhs` before performing mathematical operations. We can directly perform the operations on the stack.

5. Remove unnecessary checks: The program checks if the stack is empty or full before pushing or popping elements. Since the stack is initialized with a fixed size, we can remove these checks as they will always be within bounds.

6. Use `emplace_back` instead of `push_back`: The program currently uses `push_back` to add elements to the stack vector. We can use `emplace_back` instead, which constructs the element in-place and avoids unnecessary copies.

7. Use a constant for the stack size: The program currently hardcodes the stack size as 110. We can use a constant variable instead to make it more flexible and easier to modify.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const int STACK_SIZE = 110;

class Stack {
public:
  Stack() : s_(STACK_SIZE), top_(0) {}
  bool isEmpty() { return top_ == 0; }
  void push(int x) {
    top_++;
    s_.emplace_back(x);
  }
  int pop() {
    top_--;
    return s_[top_];
  }

private:
  vector<int> s_;
  size_t top_;
};

int main() {
  char s[1000];
  Stack stack;
  while (cin >> s) {
    if (s[0] == '+') {
      stack.push(stack.pop() + stack.pop());
    } else if (s[0] == '-') {
      int rhs = stack.pop();
      int lhs = stack.pop();
      stack.push(lhs - rhs);
    } else if (s[0] == '*') {
      stack.push(stack.pop() * stack.pop());
    } else {
      stack.push(atoi(s));
    }
  }
  cout << stack.pop() << endl;
  return 0;
}
```