The given C/C++ program reads a string `s` and an integer `m` from the input until `s` is equal to "-" and performs the following steps:

1. Calculate the length of the string `s` using `strlen()` and store it in the variable `a`.
2. Read `m` integers from the input and add them to the variable `t`.
3. Iterate over each character in the string `s` and print the character at index `(t + i) % a`.

To optimize the program, we can make the following modifications:

1. Remove the unnecessary variable `h` as it is only used to store a temporary value while reading the integers.
2. Use `scanf("%d", &h)` directly in the loop condition instead of using a separate line to read the integer.

Here is the optimized version of the program:

```c++
#include <cstdio>
#include <cstring>

int main() {
  char s[201];
  int m, a, t;
  
  while (scanf("%s%d", s, &m) == 2 && s[0] != '-') {
    a = strlen(s);
    t = 0;

    for (int i = 0; i < m; ++i) {
      scanf("%d", &t);
    }

    for (int i = 0; i < a; ++i) {
      printf("%c", s[(t + i) % a]);
    }

    printf("\n");
  }

  return 0;
}
```

Explanation:
1. Changed the return type of `main()` from `void` to `int` to follow the standard C/C++ convention.
2. Moved the variable declarations (`m`, `a`, `t`) inside the `main()` function for better code organization.
3. Changed the loop condition from `s[0] != '-'` to `scanf("%s%d", s, &m) == 2 && s[0] != '-'` to handle invalid input.
4. Removed the unnecessary variable `i` and declared it in the loop initialization instead.
5. Removed the unnecessary variable `h` and used `scanf("%d", &t)` directly in the loop to read the integers.
6. Changed `puts("")` to `printf("\n")` to print a new line after each iteration.

These modifications optimize the program by improving readability and eliminating unnecessary variables and function calls.