Optimization steps:

1. Remove unnecessary `using namespace std;` directive. It is considered a bad practice to include the entire `std` namespace.

2. Instead of using a nested array `amida[101][1001]`, use a `vector<vector<int>>` to represent the amida. This will allow for more flexible memory allocation and reduce memory usage.

3. Change the second loop to iterate from `j = 1` to `j <= 1000`. This will eliminate the need for checking `amida[a-1][j]` and simplify the loop condition.

4. Use prefix increment and decrement operators (`++a` and `--a`) instead of postfix operators (`a++` and `a--`) for better performance.

5. Instead of breaking the loop when `n == 0 && m == 0 && a == 0`, we can break the loop when `n == 0` and move the initialization of `amida` outside the loop.

6. Use `reserve` function to allocate memory for `amida` vector to avoid reallocation during runtime.

7. Use `emplace_back` instead of `push_back` function to construct the elements of `amida`.

Optimized code:

```cpp
#include <iostream>
#include <vector>

int main() {
  int n, m, a;
  while (true) {
    std::cin >> n >> m >> a;
    if (n == 0) {
      break;
    }
    std::vector<std::vector<int>> amida;
    amida.reserve(m);
    for (int i = 0; i < m; i++) {
      int h = 0, p = 0, q = 0;
      std::cin >> h >> p >> q;
      amida.emplace_back(p, std::vector<int>(h + 1, 0));
      amida[p][h] = 1;
    }
    for (int j = 1; j <= 1000; j++) {
      if (amida[a][j] == 1) {
        ++a;
      }
      else if (amida[a][j - 1] == 1) {
        --a;
      }
    }
    std::cout << a << std::endl;
  }
  return 0;
}
```