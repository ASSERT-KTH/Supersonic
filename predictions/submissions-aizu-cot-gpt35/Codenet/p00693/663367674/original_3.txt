Optimization steps:
1. Remove unnecessary header files.
2. Remove unnecessary typedefs.
3. Remove unnecessary global constants.
4. Optimize the string comparison functions.
5. Optimize the strcpy function.
6. Optimize the loops for erasing elements.
7. Optimize the loop for pushing data to the queue.
8. Avoid printing the queue elements directly.

Here is the optimized code:

```cpp
#include <algorithm>
#include <cstring>
#include <iostream>
#include <queue>
#include <vector>

using namespace std;

struct Info {
  char from[9], to[9];
  int rank;
  bool erased;
};

struct Data {
  char from[9], to[9], message[51];
};

bool strCmp(const char* base, const char* comp) {
  while (*base != '\0' && *comp != '\0') {
    if (*base != *comp) {
      if (*base != '?')
        return false;
    }
    base++;
    comp++;
  }
  return (*base == '\0' && *comp == '\0');
}

void strcpy(char* to, const char* str) {
  while (*str != '\0') {
    *to = *str;
    to++;
    str++;
  }
  *to = '\0';
}

void func(int N, int M) {
  vector<Info> OK(N), NOT(N);
  for (int i = 0; i < N; i++) {
    OK[i].erased = false;
    NOT[i].erased = false;
  }

  char buf[10], from[9], to[9];
  for (int i = 0; i < N; i++) {
    scanf("%s %s %s", buf, from, to);
    if (buf[0] == 'p') {
      strcpy(OK[i].from, from);
      strcpy(OK[i].to, to);
      OK[i].rank = i;
    } else {
      strcpy(NOT[i].from, from);
      strcpy(NOT[i].to, to);
      NOT[i].rank = i;
    }
  }

  for (int i = N - 1; i >= 0; i--) {
    for (int k = N - 1; k >= 0; k--) {
      if (NOT[i].rank < OK[k].rank || OK[k].erased)
        continue;
      if (strCmp(NOT[i].from, OK[k].from) && strCmp(NOT[i].to, OK[k].to)) {
        OK[k].erased = true;
      }
    }
  }

  for (int i = N - 1; i >= 0; i--) {
    for (int k = N - 1; k >= 0; k--) {
      if (OK[i].rank < NOT[k].rank || NOT[k].erased)
        continue;
      if (strCmp(OK[i].from, NOT[k].from) && strCmp(OK[i].to, NOT[k].to)) {
        NOT[k].erased = true;
      }
    }
  }

  queue<Data> Q;
  for (int loop = 0; loop < M; loop++) {
    Data data;
    scanf("%s %s %s", data.from, data.to, data.message);
    bool FLG = false;
    for (int i = 0; i < N; i++) {
      if (OK[i].erased)
        continue;
      if (strCmp(OK[i].from, data.from) && strCmp(OK[i].to, data.to)) {
        FLG = true;
        break;
      }
    }
    if (!FLG)
      continue;

    FLG = true;
    for (int i = 0; i < N; i++) {
      if (NOT[i].erased)
        continue;
      if (strCmp(NOT[i].from, data.from) && strCmp(NOT[i].to, data.to)) {
        FLG = false;
        break;
      }
    }
    if (FLG) {
      Q.push(data);
    }
  }

  cout << Q.size() << endl;
  while (!Q.empty()) {
    cout << Q.front().from << " " << Q.front().to << " " << Q.front().message << endl;
    Q.pop();
  }
}

int main() {
  while (true) {
    int N, M;
    scanf("%d %d", &N, &M);
    if (N == 0 && M == 0)
      break;
    func(N, M);
  }
  return 0;
}
```