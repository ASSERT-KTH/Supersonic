To optimize the given program, we can make the following modifications:

1. Remove the unnecessary variable `su2` in the `matrix` function, as it is not used.
2. Remove the unnecessary variable `su2` in the `main` function, as it is not used.
3. Change the loop condition in the `matrix` function from `k <= N - 2` to `k < N - 1`, as the last iteration is not necessary.
4. Change the loop condition in the second nested loop of the `matrix` function from `j <= N - 1` to `j < N`, as the last iteration is not necessary.
5. Change the loop condition in the second nested loop of the `matrix` function from `i <= 2` to `i < N + 1`, as the last iteration is not necessary.
6. Change the loop condition in the last loop of the `matrix` function from `j <= N - 1` to `j < N`, as the last iteration is not necessary.
7. Change the loop condition in the last loop of the `matrix` function from `i <= N` to `i < N + 1`, as the last iteration is not necessary.

Here is the optimized program:

```c
#include <stdio.h>
#define N 2

void matrix(double **x);

int main(void) {
  double x[N][N + 1];
  double *y[N];
  int i, j;
  char str[100];

  for (; fgets(str, sizeof(str), stdin) != NULL;) {
    sscanf(str, "%lf %lf %lf %lf %lf %lf", &x[0][0], &x[0][1], &x[0][2],
           &x[1][0], &x[1][1], &x[1][2]);

    for (i = 0; i < N; i++)
      y[i] = x[i];

    matrix(y);

    for (i = 0; i < N; i++) {
      if (i)
        printf(" ");
      printf("%3.3f", x[i][N]);
    }
    printf("\n");
  }

  return 0;
}

void matrix(double **x) {
  int i, j, k;
  double su1 = 0;

  for (k = 0; k < N - 1; k++) {
    for (j = k + 1; j < N; j++) {
      su1 = x[k][k];
      for (i = 0; i < N + 1; i++) {
        x[j][i] = x[j][i] - x[k][i] * x[j][k] / su1;
      }
    }
  }

  for (k = 0; k < N - 1; k++) {
    for (j = k + 1; j < N; j++) {
      su1 = x[1 - k][1 - k];
      for (i = 0; i < N + 1; i++) {
        x[1 - j][i] = x[1 - j][i] - x[1 - k][i] * x[1 - j][1 - k] / su1;
      }
    }
  }

  for (j = 0; j < N; j++) {
    su1 = x[j][j];
    for (i = 0; i < N + 1; i++) {
      x[j][i] = x[j][i] / su1;
    }
  }
}
```

These modifications should improve the running time and reduce the memory usage of the program.