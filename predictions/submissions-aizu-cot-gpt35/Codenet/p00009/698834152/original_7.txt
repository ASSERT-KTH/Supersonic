Step 1: Remove Unused Headers

The program includes the `<iostream>` header which is not needed. We can remove it to improve compilation time and reduce memory usage.

Step 2: Optimize Loop Variables

The outer loop iterates from 2 to MAX + 1, and the inner loop iterates from 2 to MAX + 1. However, we can optimize the inner loop by starting from i instead of 2. This is because all the numbers below i * 2 have already been marked as not prime.

Step 3: Optimize Inner Loop Condition

The inner loop condition `i * j < MAX + 1` can be optimized to `i * j <= MAX`. Since `MAX` is defined as `999999`, we can change the condition accordingly.

Step 4: Simplify Not Prime Flag Assignment

Instead of assigning `true` to `not_prime_flag[i * j]`, we can use the `|=` operator to set the flag. This will simplify the code and potentially improve performance.

Step 5: Simplify Prime Count Calculation

The calculation of `num_prime[i]` can be simplified by using the `+` operator instead of `+ !not_prime_flag[i]`. The `!` operator is unnecessary because `true` is implicitly converted to `1` and `false` is implicitly converted to `0`.

Step 6: Optimize Loop Variables (continued)

The outer loop variable `i` can start from 3 and increment by 2 instead of starting from 2 and incrementing by 1. This is because all even numbers greater than 2 are not prime.

Step 7: Use a More Appropriate Data Type

The `num_prime` array can be changed from `int` to `short` because the maximum value it holds is `MAX`, which is `999999`. Using a `short` data type will reduce memory usage.

Here is the optimized program:

```cpp
#include <iostream>
#define MAX 999999
using namespace std;

short num_prime[MAX + 1];
bool not_prime_flag[MAX + 1];

int main() {
  int n;

  for (int i = 3; i <= MAX; i += 2) {
    if (!not_prime_flag[i]) {
      for (int j = i; i * j <= MAX; ++j) {
        not_prime_flag[i * j] |= true;
      }
    }
    num_prime[i] = num_prime[i - 1] + not_prime_flag[i] == 0;
  }

  while (cin >> n) {
    cout << num_prime[n] << endl;
  }

  return 0;
}
```