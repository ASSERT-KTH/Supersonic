Step 1: Remove unnecessary header files
The program includes the `<iostream>` header file, but it does not use any features from it. Therefore, we can remove this unnecessary header file.

Step 2: Remove unnecessary `using namespace std;`
The program currently has a line `using namespace std;`, which imports the entire `std` namespace. However, the program only uses `cin` and `cout` from the `std` namespace. To avoid importing the entire namespace, we can replace `using namespace std;` with `using std::cin;` and `using std::cout;`.

Step 3: Optimize the loop conditions
The loop condition `i < MAX + 1` can be optimized to `i <= MAX`. This avoids unnecessary addition in each iteration of the loop.

Step 4: Optimize the inner loop conditions
The inner loop condition `i * j < MAX + 1` can be optimized to `i * j <= MAX`. This avoids unnecessary addition in each iteration of the inner loop.

Step 5: Optimize the assignment of `num_prime[i]`
The assignment `num_prime[i] = num_prime[i - 1] + !not_prime_flag[i];` can be optimized to `num_prime[i] = num_prime[i - 1] + 1 - not_prime_flag[i];`. This avoids the use of the logical not operator `!`.

Step 6: Optimize the input loop
The program currently uses a `while` loop with `cin >> n` as the condition. This causes an additional input operation before entering the loop. We can replace the `while` loop with a `for` loop and move the input operation to the loop condition.

Here is the optimized C++ program:

```cpp
#include <iostream>

#define MAX 999999

int num_prime[MAX + 1];
bool not_prime_flag[MAX + 1];

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  
  int n;

  for (int i = 2; i <= MAX; ++i) {
    if (!not_prime_flag[i]) {
      for (int j = 2; i * j <= MAX; ++j) {
        not_prime_flag[i * j] = true;
      }
    }
    num_prime[i] = num_prime[i - 1] + 1 - not_prime_flag[i];
  }

  for (std::cin >> n; !std::cin.eof(); std::cin >> n) {
    std::cout << num_prime[n] << '\n';
  }

  return 0;
}
```