Step 1: Replace the `#define` statement with a constant variable.

Instead of using a `#define` statement to define the maximum value, we can use a constant variable to define the maximum value. This will make the code more readable and easier to understand.

Step 2: Use a more efficient algorithm to calculate prime numbers.

The current program uses the Sieve of Eratosthenes algorithm to calculate prime numbers. While this algorithm is efficient, it can be further optimized by only checking odd numbers.

Step 3: Remove unnecessary variables.

The variable `num_prime` is not necessary. We can directly print the number of primes instead of storing them in an array.

Step 4: Optimize the loop conditions.

The loop conditions can be optimized to reduce the number of iterations. The outer loop can start from 3 and increment by 2, and the inner loop can start from i and increment by 2*i.

Step 5: Use `printf` instead of `cout` for faster output.

Using `printf` function from the C standard library can be faster than using `cout` from the C++ standard library.

Here is the optimized program:

```cpp
#include <iostream>
#include <cstdio>
const int MAX = 999999;

int main() {
    bool not_prime_flag[MAX + 1] = {false};
    int prime_count = 0;

    for (int i = 3; i <= MAX; i += 2) {
        if (!not_prime_flag[i]) {
            for (int j = i; j <= MAX; j += 2 * i) {
                not_prime_flag[j] = true;
            }
            prime_count++;
        }
    }

    int n;
    while (scanf("%d", &n) != EOF) {
        printf("%d\n", prime_count + 1);
    }

    return 0;
}
```