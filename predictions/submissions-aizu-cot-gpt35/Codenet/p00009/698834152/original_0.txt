Explanation of Optimization Steps:

1. Remove unnecessary `#define` and `using namespace std` directives.
2. Remove unused `num_prime` array as it is not needed for the final result.
3. Optimize the outer loop by iterating only up to the square root of `MAX + 1`.
4. Optimize the inner loop by starting from the square of `i` and incrementing by `i`.
5. Instead of using a boolean array to mark non-prime numbers, use a bitset to save memory.
6. Use a separate variable to count the number of prime numbers instead of storing it in an array.
7. Use a more efficient method to check if a number is prime by skipping even numbers and only checking odd divisors.

Here is the optimized program:

```cpp
#include <iostream>
#include <bitset>
#include <cmath>

const int MAX = 999999;

int main() {
    int n;
    std::bitset<MAX + 1> not_prime_flag;
    int num_primes = 0;

    for (int i = 3; i <= std::sqrt(MAX); i += 2) {
        if (!not_prime_flag[i]) {
            for (int j = i * i; j <= MAX; j += 2 * i) {
                not_prime_flag[j] = true;
            }
        }
    }

    for (int i = 3; i <= MAX; i += 2) {
        if (!not_prime_flag[i]) {
            num_primes++;
        }
    }

    while (std::cin >> n) {
        if (n == 0) break;
        std::cout << num_primes << std::endl;
    }

    return 0;
}
```

This optimized program reduces memory usage by using a `bitset` instead of a boolean array. It also improves runtime by skipping even numbers and only checking odd divisors when determining if a number is prime. Additionally, it removes unnecessary calculations and array operations.