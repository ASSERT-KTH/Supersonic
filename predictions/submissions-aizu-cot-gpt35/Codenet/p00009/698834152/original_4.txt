The given program calculates the number of prime numbers up to a given input `n`. 
To optimize the program for running time and memory usage, we can make the following modifications:

1. Instead of using an array of size `MAX + 1` to store the flag for prime numbers, we can use a bitset to optimize memory usage. A bitset uses less memory compared to a boolean array for storing binary values.
2. Instead of calculating the number of prime numbers up to `n` every time in the while loop, we can precalculate and store the number of prime numbers up to `n` using a dynamic programming approach.
3. We can optimize the inner loop by starting from `i * i` instead of `2 * i` because all the numbers before `i * i` have already been processed.

Here is the optimized program:

```cpp
#include <iostream>
#include <bitset>
#define MAX 999999
using namespace std;
bitset<MAX + 1> not_prime_flag;
int num_prime[MAX + 1];
int main() {
  for (int i = 2; i * i < MAX + 1; ++i) {
    if (!not_prime_flag[i]) {
      for (int j = i * i; j < MAX + 1; j += i) {
        not_prime_flag[j] = true;
      }
    }
  }
  for (int i = 2; i < MAX + 1; ++i) {
    num_prime[i] = num_prime[i - 1] + !not_prime_flag[i];
  }
  int n;
  while (cin >> n) {
    cout << num_prime[n] << endl;
  }
  return 0;
}
```

Explanation of Optimization Steps:

1. We replaced `bool not_prime_flag[MAX + 1]` with `std::bitset<MAX + 1> not_prime_flag` to optimize memory usage. A bitset uses a single bit to represent true/false values, resulting in a smaller memory footprint compared to a boolean array.
2. We optimized the inner loop by starting from `i * i` instead of `2 * i`. This is because any number less than `i * i` would have already been marked as a non-prime by previous iterations of the outer loop. This optimization reduces the number of iterations in the inner loop and improves performance.
3. We moved the calculation of `num_prime` outside the while loop to precalculate and store the number of prime numbers up to `n` using a dynamic programming approach. This eliminates the need to recalculate the number of prime numbers every time in the while loop.