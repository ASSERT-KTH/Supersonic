Explanation of the optimization steps:

1. Remove unnecessary includes: The program includes the `math.h` library, but it is not used. We can remove this include statement.

2. Reduce the size of the `num` array: The initial size of the `num` array is 1,000,000, but it is only needed up to the square root of 1,000,000. We can reduce the size of the `num` array to the square root of 1,000,000 to save memory.

3. Change the loop condition in the second for loop: The loop condition in the second for loop is `i < sqrt(1000000)`. Calculating the square root in each iteration is expensive. We can calculate the square root outside the loop and store it in a variable.

4. Optimize the sieve of Eratosthenes algorithm: In the sieve of Eratosthenes algorithm, we can start marking off multiples of `i` from `i * i` instead of `i * 2`. This eliminates redundant iterations.

5. Remove unnecessary assignment: In the last for loop, the `num[i + 1] += num[i];` line can be removed. It is not needed since the array is already filled with the correct values.

Here is the optimized program:

```c
#include <stdio.h>

int main() {
  int i, j;
  int n;
  int num[1000];
  
  for (i = 0; i < 1000; i++) {
    num[i] = 1;
  }
  
  num[0] = num[1] = 0;
  
  int sqrt_limit = (int)sqrt(1000);
  for (i = 2; i <= sqrt_limit; i++) {
    if (num[i] == 1) {
      for (j = i * i; j < 1000; j += i) {
        num[j] = 0;
      }
    }
  }
  
  while (scanf("%d", &n) != EOF) {
    printf("%d\n", num[n]);
  }
  
  return 0;
}
```