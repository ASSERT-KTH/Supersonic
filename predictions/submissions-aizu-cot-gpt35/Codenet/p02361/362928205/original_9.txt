Step 1: Avoid unnecessary includes
The program includes the headers `<algorithm>` and `<queue>`, but these headers are not used in the program. We can remove them to improve compilation time and reduce unnecessary code.

Step 2: Use `reserve()` for vector sizes
The program uses a vector of edges `G`, which is initialized with a fixed size of 100000. However, the actual size needed is `v`, which is obtained from user input. We can use the `reserve()` function to allocate memory for `G` based on the actual size needed.

Step 3: Use `emplace_back()` instead of `push_back()`
The program uses `push_back()` to add elements to the vector `G`. However, `emplace_back()` can be used instead to construct the element directly in-place, eliminating the need for a temporary object.

Step 4: Avoid unnecessary copy
The program creates a temporary `edge` object and copies the values from the input to the object before pushing it into the vector `G`. We can eliminate this copy by directly constructing the `edge` object in `emplace_back()`.

Step 5: Use `reserve()` for priority queue size
The program uses a priority queue `q` to store pairs of integers. We can use the `reserve()` function to allocate memory for `q` based on the actual size needed.

Step 6: Use `emplace()` instead of `push()`
The program uses `push()` to add elements to the priority queue `q`. However, `emplace()` can be used instead to construct the element directly in-place, eliminating the need for a temporary object.

Step 7: Use `emplace()` instead of `push()` for updating distances
The program uses `push()` to add updated distances and corresponding vertices to the priority queue `q`. However, `emplace()` can be used instead to construct the element directly in-place, eliminating the need for a temporary object.

Step 8: Avoid redundant check in the main loop
The program checks if the current distance is greater than the stored distance before updating the distance and pushing it into the priority queue. However, this check is redundant because the priority queue ensures that the smallest distance is always at the top.

Here is the optimized program:

```cpp
#include <cstdio>
#include <vector>
using namespace std;
const int INF = 1000000000;
struct edge {
  int to, cost;
};
vector<edge> G;
int v, e, r;
typedef pair<int, int> P;
priority_queue<P, vector<P>, greater<P>> q;
int main() {
  scanf("%d %d %d", &v, &e, &r);
  G.reserve(v);
  for (int i = 0; i < e; i++) {
    int s, t, d;
    scanf("%d %d %d", &s, &t, &d);
    G.emplace_back(t, d);
  }
  int d[v];
  fill(d, d + v, INF);
  d[r] = 0;
  q.reserve(v);
  q.emplace(0, r);
  while (!q.empty()) {
    P p = q.top();
    q.pop();
    int nv = p.second;
    for (edge& e : G[nv]) {
      if (d[nv] + e.cost < d[e.to]) {
        d[e.to] = d[nv] + e.cost;
        q.emplace(d[e.to], e.to);
      }
    }
  }
  for (int i = 0; i < v; i++) {
    if (d[i] == INF)
      printf("INF\n");
    else
      printf("%d\n", d[i]);
  }
  return 0;
}
```