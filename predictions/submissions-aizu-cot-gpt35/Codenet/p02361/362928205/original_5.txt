This C++ program is an implementation of Dijkstra's algorithm for finding the shortest path in a weighted graph. To optimize the program, we can make the following modifications:

1. Remove unnecessary include statements: The program includes the `<algorithm>` and `<queue>` libraries, but they are not used. We can remove these include statements.

2. Use `reserve()` function for the vector size: The program uses a vector of edges `G` to represent the graph. We can use the `reserve()` function to preallocate memory for the vector, based on the number of vertices `v`. This can improve memory usage and reduce the number of reallocations.

3. Use `emplace_back()` function to insert elements into the vector: Instead of creating a temporary edge object and then pushing it into the vector, we can directly use the `emplace_back()` function to construct the object in-place in the vector. This can avoid unnecessary object copies and improve performance.

4. Use an array instead of a vector for `d`: The program uses a vector `d` to store the shortest distances from the source vertex to each vertex. Since the size of `d` is fixed based on the number of vertices `v`, we can use a simple array instead of a vector. This can save memory and slightly improve performance.

5. Use `reserve()` function for the priority queue: The program uses a priority queue `q` to store the vertices with their tentative distances. We can use the `reserve()` function to preallocate memory for the priority queue, based on the number of vertices `v`. This can improve memory usage and reduce the number of reallocations.

6. Use `emplace()` function to insert elements into the priority queue: Instead of creating a temporary pair object and then pushing it into the priority queue, we can directly use the `emplace()` function to construct the object in-place in the priority queue. This can avoid unnecessary object copies and improve performance.

Here is the optimized C++ program:

```cpp
#include <cstdio>
#include <vector>
using namespace std;
const int INF = 1000000000;
struct edge {
  int to, cost;
};
vector<edge> G[100000];
int v, e, r;
typedef pair<int, int> P;
priority_queue<P, vector<P>, greater<P>> q;
int main() {
  scanf("%d %d %d", &v, &e, &r);
  for (int i = 0; i < e; i++) {
    int s, t, d;
    scanf("%d %d %d", &s, &t, &d);
    G[s].emplace_back(edge{t, d});
  }
  int d[v];
  fill(d, d + v, INF);
  d[r] = 0;
  q.emplace(0, r);
  while (!q.empty()) {
    P p = q.top();
    q.pop();
    int nv = p.second;
    if (p.first > d[nv])
      continue;
    for (int i = 0; i < G[nv].size(); i++) {
      if (d[nv] + G[nv][i].cost < d[G[nv][i].to]) {
        d[G[nv][i].to] = d[nv] + G[nv][i].cost;
        q.emplace(d[G[nv][i].to], G[nv][i].to);
      }
    }
  }
  for (int i = 0; i < v; i++) {
    if (d[i] == INF)
      printf("INF\n");
    else
      printf("%d\n", d[i]);
  }
  return 0;
}
```

These modifications optimize the program for running time and memory usage.