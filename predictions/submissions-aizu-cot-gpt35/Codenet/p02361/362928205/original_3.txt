Step 1: Remove unnecessary headers
The program includes the <algorithm> and <vector> headers, but they are not used in the program. Therefore, we can remove these headers to optimize the program.

Step 2: Optimize memory usage
Currently, the program creates an array of size v for the distance values. However, the maximum value of v can be as large as 100,000, which may lead to excessive memory usage. To optimize memory usage, we can use a vector instead of an array. Vectors dynamically allocate memory, so they only use the necessary amount of memory based on the actual number of elements.

Step 3: Optimize running time
The program uses a priority queue to store the vertices and their distances. However, the priority queue is implemented as a binary heap, which has a worst-case time complexity of O(log n) for insertion and deletion. To optimize the running time, we can use a data structure called a Fibonacci heap, which has a worst-case time complexity of O(1) for insertion and O(log n) for deletion.

Step 4: Combine the optimization steps
To optimize the program, we will combine the above steps:

1. Remove unnecessary headers: <algorithm> and <vector>.
2. Replace the array d[v] with a vector<int> d(v, INF).
3. Replace the priority_queue with a Fibonacci heap implementation, such as the one provided by the Boost library.

Here is the optimized program:

```cpp
#include <cstdio>
#include <queue>
#include <vector>
#include <boost/heap/fibonacci_heap.hpp>
using namespace std;
const int INF = 1000000000;
struct edge {
  int to, cost;
};
vector<edge> G[100000];
int v, e, r;
typedef pair<int, int> P;
boost::heap::fibonacci_heap<P, boost::heap::compare<greater<P>>> q;
int main() {
  scanf("%d %d %d", &v, &e, &r);
  for (int i = 0; i < e; i++) {
    int s, t, d;
    scanf("%d %d %d", &s, &t, &d);
    edge tmp;
    tmp.to = t;
    tmp.cost = d;
    G[s].push_back(tmp);
  }
  vector<int> d(v, INF);
  d[r] = 0;
  q.push(P(0, r));
  while (!q.empty()) {
    P p = q.top();
    q.pop();
    int nv = p.second;
    if (p.first > d[nv])
      continue;
    for (int i = 0; i < G[nv].size(); i++) {
      if (d[nv] + G[nv][i].cost < d[G[nv][i].to]) {
        d[G[nv][i].to] = d[nv] + G[nv][i].cost;
        q.push(P(d[G[nv][i].to], G[nv][i].to));
      }
    }
  }
  for (int i = 0; i < v; i++) {
    if (d[i] == INF)
      printf("INF\n");
    else
      printf("%d\n", d[i]);
  }
  return 0;
}
```