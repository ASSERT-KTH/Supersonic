The given program is an implementation of Dijkstra's algorithm for finding the shortest path in a graph. Here are the optimizations that can be applied to improve its running time and memory usage:

1. Avoid unnecessary includes: The program includes `<algorithm>`, `<cstdio>`, `<queue>`, and `<vector>` libraries. However, only `<cstdio>` and `<vector>` are used. We can remove the unnecessary includes to reduce compile time.

2. Avoid using `using namespace std;`: The program uses the `using namespace std;` directive, which brings all the names from the `std` namespace into the global namespace. This can lead to name clashes and is generally considered bad practice. Instead, we can use the `std::` prefix to specify the namespace explicitly where needed.

3. Use `std::array` instead of `std::vector` for `G`: The program uses a vector of edges `G` to represent the graph. However, the number of vertices `v` is known at compile time. In this case, using `std::array` instead of `std::vector` can provide better performance and memory usage.

4. Use `std::array` instead of `int d[v]`: The program uses a dynamically allocated array `d` to store the distances from the source vertex to each vertex. However, `v` is known at compile time, so we can use `std::array` instead of a dynamically allocated array to improve memory usage.

5. Use `std::priority_queue` with custom comparison function: The program uses `std::priority_queue` with `std::greater` as the comparison function to get the minimum element. However, this requires swapping the elements internally, which can be expensive. We can use a custom comparison function and negate the costs to avoid swapping and improve performance.

6. Use `emplace` instead of `push` for `std::priority_queue`: The program uses `push` to insert elements into the priority queue. However, `emplace` can be used to construct elements in-place, which can provide better performance by avoiding unnecessary copies.

7. Avoid unnecessary variable copies in the loop: The program makes unnecessary copies of elements in the loop. We can use references or const references to avoid these copies and improve performance.

Based on these optimizations, here is the optimized program:

```cpp
#include <cstdio>
#include <array>
#include <queue>

const int MAX_V = 100000;
const int INF = 1000000000;

struct edge {
  int to, cost;
};

std::array<std::vector<edge>, MAX_V> G;
std::array<int, MAX_V> d;

struct compare {
  bool operator()(const std::pair<int, int>& lhs, const std::pair<int, int>& rhs) const {
    return lhs.first > rhs.first;
  }
};

int main() {
  int v, e, r;
  scanf("%d %d %d", &v, &e, &r);

  for (int i = 0; i < e; i++) {
    int s, t, d;
    scanf("%d %d %d", &s, &t, &d);
    G[s].push_back({t, d});
  }

  d.fill(INF);
  d[r] = 0;

  std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, compare> q;
  q.emplace(0, r);

  while (!q.empty()) {
    const auto p = q.top();
    q.pop();

    const int nv = p.second;
    if (p.first > d[nv])
      continue;

    for (const auto& edge : G[nv]) {
      if (d[nv] + edge.cost < d[edge.to]) {
        d[edge.to] = d[nv] + edge.cost;
        q.emplace(d[edge.to], edge.to);
      }
    }
  }

  for (int i = 0; i < v; i++) {
    if (d[i] == INF)
      printf("INF\n");
    else
      printf("%d\n", d[i]);
  }

  return 0;
}
```

These optimizations should improve the running time and memory usage of the original program while keeping the same functionality.