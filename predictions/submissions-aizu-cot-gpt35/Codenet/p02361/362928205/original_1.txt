**Step 1: Avoid using `using namespace std;`**

Using the `using namespace std;` statement can lead to namespace collisions and make the code less readable. Instead, we can use the `std::` prefix for the standard library functions and types.

**Step 2: Use `std::ios_base::sync_with_stdio(false)`**

By default, C++ synchronizes the C++ and C I/O streams, which can cause a slight performance overhead. We can improve the input/output performance by turning off this synchronization using the `std::ios_base::sync_with_stdio(false)` function.

**Step 3: Use `std::vector::reserve`**

The program is using a vector of edges `G`, and each element in this vector is being pushed back individually. This can cause multiple reallocations and copies of the vector, leading to inefficient memory usage. We can improve this by reserving the necessary memory upfront using the `std::vector::reserve` function.

**Step 4: Use `std::vector::emplace_back`**

Instead of creating a temporary edge variable and then pushing it back to the vector, we can use the `std::vector::emplace_back` function to construct the edge directly in the vector.

**Step 5: Use `std::vector::size_type`**

The loop iterators and indexing variables are currently of type `int`. It is better to use the appropriate type for container sizes, which is `std::vector::size_type`.

**Step 6: Avoid unnecessary copying of the edge structure**

In the inner loop, the program is accessing `G[nv][i]` multiple times. Instead of accessing it repeatedly, we can use a reference to avoid unnecessary copying.

**Step 7: Use `puts` instead of `printf` for constant strings**

Instead of using `printf` with a constant string, we can use the `puts` function, which is more efficient for printing constant strings.

Here is the optimized program:

```cpp
#include <algorithm>
#include <cstdio>
#include <queue>
#include <vector>

const int INF = 1000000000;

struct edge {
  int to, cost;
};

std::vector<edge> G[100000];
int v, e, r;
typedef std::pair<int, int> P;
std::priority_queue<P, std::vector<P>, std::greater<P>> q;

int main() {
  std::ios_base::sync_with_stdio(false);
  std::scanf("%d %d %d", &v, &e, &r);

  for (int i = 0; i < e; i++) {
    int s, t, d;
    std::scanf("%d %d %d", &s, &t, &d);
    G[s].emplace_back(edge{t, d});
  }

  std::vector<int> d(v, INF);
  d[r] = 0;
  q.emplace(0, r);

  while (!q.empty()) {
    P p = q.top();
    q.pop();
    int nv = p.second;

    if (p.first > d[nv])
      continue;

    for (const auto& edge : G[nv]) {
      if (d[nv] + edge.cost < d[edge.to]) {
        d[edge.to] = d[nv] + edge.cost;
        q.emplace(d[edge.to], edge.to);
      }
    }
  }

  for (const auto& distance : d) {
    if (distance == INF)
      std::puts("INF");
    else
      std::printf("%d\n", distance);
  }

  return 0;
}
```