The given program implements Dijkstra's algorithm to find the shortest path in a graph. Here are the steps to optimize the program:

1. Remove the constant `MAX` and replace it with the variable `n` to avoid unnecessary iterations.

2. Remove the constant `INFTY` and replace it with a large value, such as `INT_MAX`, to represent infinity. This avoids the need for bitwise operations.

3. Use an adjacency list instead of a matrix to represent the graph. This reduces the memory usage from O(n^2) to O(n + m), where m is the number of edges in the graph.

4. Use a priority queue (min-heap) to efficiently select the node with the smallest distance in each iteration of the algorithm. This reduces the time complexity of finding the minimum distance from O(n) to O(log n).

5. Remove unnecessary color tracking for nodes. We can simply check if the distance is equal to the infinity value to determine if a node has been visited.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

typedef pair<int, int> pii;

void dijkstra(int n, vector<vector<pii>>& adjList) {
    vector<int> distance(n, INT_MAX);
    distance[0] = 0;

    priority_queue<pii, vector<pii>, greater<pii>> pq;
    pq.push({0, 0});

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        for (auto& neighbor : adjList[u]) {
            int v = neighbor.first;
            int weight = neighbor.second;

            if (distance[v] > distance[u] + weight) {
                distance[v] = distance[u] + weight;
                pq.push({distance[v], v});
            }
        }
    }

    for (int i = 0; i < n; i++) {
        cout << i << " " << (distance[i] == INT_MAX ? -1 : distance[i]) << endl;
    }
}

int main() {
    int n;
    cin >> n;

    vector<vector<pii>> adjList(n);

    for (int i = 0; i < n; i++) {
        int u, k;
        cin >> u >> k;

        for (int j = 0; j < k; j++) {
            int v, c;
            cin >> v >> c;
            adjList[u].push_back({v, c});
        }
    }

    dijkstra(n, adjList);

    return 0;
}
```

This optimized program reduces both the running time and memory usage by using an adjacency list representation, a priority queue, and removing unnecessary color tracking.