To optimize the given C/C++ program, we can make the following modifications:

1. Replace the C-style array `visited` with a `std::vector<bool>` to improve memory usage. This will also allow us to use the `std::fill` function instead of the `std::fill_n` function.

2. Replace the use of `std::min` and `std::fill_n` with more efficient algorithms. Instead of using `std::min`, we can use a simple comparison operator to find the minimum value. Instead of using `std::fill_n` to fill arrays with a constant value, we can use `std::memset` to fill the arrays with the desired value.

3. Move the `visited` array inside the `dijkstra` function to avoid allocating unnecessary memory.

4. Replace the `std::scanf` and `std::printf` functions with more efficient alternatives, such as `scanf` and `printf`.

Here is the optimized version of the program:

```cpp
#include <algorithm>
#include <cstdio>
#include <vector>
#include <cstring>

using uint = unsigned int;

class Graph {
  const uint n_;
  uint *const g_;
  const uint INFINIT;

public:
  Graph(uint n)
      : n_(n), g_(new uint[(n_ * n)]), INFINIT(100000 * (n_ - 1) + 1) {
    std::memset(g_, INFINIT, (n_ * n) * sizeof(uint));
  }
  ~Graph() { delete[] g_; }
  uint *operator[](uint i) const { return g_ + (n_ * i); }
  void dijkstra(uint *dist) {
    std::memset(dist, INFINIT, n_ * sizeof(uint));
    std::vector<bool> visited(n_, false);
    auto i = 0u;
    visited[i] = true;
    dist[i] = 0u;
    for (auto n = 0u; n < n_ - 1; ++n) {
      auto cur_min = INFINIT;
      auto es = (*this)[i];
      auto base_dist = dist[i];
      for (auto j = 0u; j < n_; ++j) {
        if (visited[j])
          continue;
        if (dist[j] > base_dist + es[j]) {
          dist[j] = base_dist + es[j];
        }
        if (cur_min > dist[j]) {
          cur_min = dist[j];
          i = j;
        }
      }
      visited[i] = true;
      dist[i] = cur_min;
    }
  }
};

int main() {
  uint n;
  scanf("%u", &n);
  Graph g(n);
  uint u, k, c, v;
  for (auto i = 0u; i < n; ++i) {
    scanf("%u %u", &u, &k);
    for (auto j = 0u; j < k; ++j) {
      scanf("%u %u", &c, &v);
      g[u][c] = v;
    }
  }
  uint dist[n];
  g.dijkstra(dist);
  for (auto i = 0u; i < n; ++i) {
    printf("%u %u\n", i, dist[i]);
  }
}
```

These modifications should improve both the running time and memory usage of the program.