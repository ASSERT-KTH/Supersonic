To optimize the given program, we can make the following modifications:

1. Remove unnecessary include statements: The `#include <bits/stdc++.h>` statement includes a large number of standard library headers, which is unnecessary for this program. We can remove it.

2. Remove unnecessary semicolon: There is an extra semicolon after the declaration of `dp` array. We can remove it.

3. Avoid using `endl` for line breaks: The program currently uses `endl` to insert line breaks while printing output. However, `endl` also flushes the output stream, which can significantly impact performance. We can replace `endl` with `"\n"` to only insert line breaks without flushing the output stream.

4. Avoid using `memset` for initialization: The program currently uses `memset` to initialize the `dp` array with zeros. However, `memset` is not the most efficient way to initialize an array in C++. We can use a nested loop to initialize the array elements to zero.

5. Avoid unnecessary modulo operations: The program performs modulo operations (`%`) on `dp[i][j]` several times. We can avoid these modulo operations by storing the result of `dp[i][j] % 2` in a separate variable.

6. Optimize the recursive function: The `saiki` function is implemented recursively, which can be inefficient for large inputs. We can modify the function to use a loop instead of recursion.

Here is the optimized C++ program:

```cpp
#include <iostream>
using namespace std;

const int MAX_SIZE = 1001;
int mp[MAX_SIZE][MAX_SIZE];
int dp[MAX_SIZE][MAX_SIZE];

void saiki(int h, int w, int n) {
  int dx[] = {0, 1};
  int dy[] = {1, 0};

  int x = 0, y = 0;
  while (y != h && x != w) {
    x += dx[mp[y][x]];
    y += dy[mp[y][x]];
  }

  cout << y + 1 << " " << x + 1 << "\n";
}

int main() {
  while (true) {
    int h, w, n;
    cin >> h >> w >> n;

    if (h == 0 && w == 0 && n == 0)
      break;

    for (int i = 0; i < h; i++) {
      for (int j = 0; j < w; j++) {
        cin >> mp[i][j];
      }
    }

    for (int i = 0; i < h; i++) {
      for (int j = 0; j < w; j++) {
        dp[i][j] = 0;
      }
    }

    dp[0][0] = n - 1;
    for (int i = 0; i < h; i++) {
      for (int j = 0; j < w; j++) {
        int dp_mod_2 = dp[i][j] % 2;

        dp[i][j + 1] += dp[i][j] / 2 + mp[i][j] * dp_mod_2;
        dp[i + 1][j] += dp[i][j] / 2 + !mp[i][j] * dp_mod_2;

        if (dp_mod_2) {
          mp[i][j] = !mp[i][j];
        }
      }
    }

    saiki(h, w, n);
  }

  return 0;
}
```