The given program can be optimized by reducing the unnecessary memory usage and by reducing the number of iterations in the loops.

1. Remove the unnecessary initialization of the arrays `inact`, `act`, and `ans` to zero. These arrays will be filled with user input, so there is no need to initialize them beforehand.

2. Remove the variable `col` and use the variable `j` itself as the column index in the loops. This will eliminate the need for an extra variable and reduce memory usage.

3. Combine the two nested loops that read the user input for `inact` array into a single loop. This will reduce the number of iterations and improve the performance.

4. Combine the two nested loops that calculate the values of `ans` array into a single loop. This will also reduce the number of iterations and improve the performance.

5. Instead of printing each element of `ans` array in a separate loop, print the elements as they are calculated in the previous loop. This will eliminate the need for an additional loop and improve the performance.

Here is the optimized program:

```c
#include <stdio.h>

int main() {
  int inact[100][100];
  int act[100];
  int row, i, j;

  scanf("%d", &row);

  for (i = 0; i < row; i++) {
    for (j = 0; j < row; j++) {
      scanf("%d", &inact[i][j]);
    }
  }

  for (i = 0; i < row; i++) {
    scanf("%d", &act[i]);
  }

  for (i = 0; i < row; i++) {
    int ans = 0;
    for (j = 0; j < row; j++) {
      ans += inact[i][j] * act[j];
    }
    printf("%d\n", ans);
  }

  return 0;
}
```