Explanation of optimization steps:

1. Move the variable declaration inside the main loop: Instead of declaring the variable `x` inside the inner loop, we can declare it inside the outer loop to avoid unnecessary redeclaration and initialization in each iteration of the inner loop.

2. Remove the unnecessary variable `y` and read input directly into `b[j]`: Instead of storing the input value in a separate variable `y` and then assigning it to `b[j]`, we can directly read the input value into `b[j]` to eliminate the need for the additional variable.

3. Initialize `c` to 0 only once: Instead of initializing `c` to 0 before each iteration of the outer loop, we can initialize it to 0 only once, before the outer loop starts.

4. Use prefix increment for loop variables: Instead of using postfix increment (`i++` and `j++`), we can use prefix increment (`++i` and `++j`) for loop variables to potentially improve performance.

5. Avoid using namespace std: Instead of using the entire `std` namespace, we can explicitly prefix `cin` and `cout` with `std::` to improve code clarity and avoid potential naming conflicts.

Optimized program:

```cpp
#include <iostream>

int main() {
  int n, m;
  int a[100][100], b[100];
  int c = 0;

  std::cin >> n >> m;

  for (int i = 0; i < n; ++i) {
    int x;
    for (int j = 0; j < m; ++j) {
      std::cin >> x;
      a[i][j] = x;
    }
  }

  for (int j = 0; j < m; ++j) {
    std::cin >> b[j];
  }

  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      c += a[i][j] * b[j];
    }
    std::cout << c << std::endl;
    c = 0;
  }
  
  return 0;
}
```