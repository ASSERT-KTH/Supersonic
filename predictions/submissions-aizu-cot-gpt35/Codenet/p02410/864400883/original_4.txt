Explanation of the optimization steps:

1. Remove unnecessary variable declarations: The variables `x` and `y` are unnecessary since they are only used to temporarily store the input values before assigning them to the arrays.

2. Avoid using dynamic arrays: Instead of using dynamic arrays `a` and `b`, use static arrays with fixed sizes to reduce memory usage.

3. Avoid unnecessary reassignment of variables: The variable `c` is reset to 0 after each inner loop iteration. Instead, we can initialize `c` to 0 before the inner loop and remove the reassignment inside the loop.

4. Avoid unnecessary output operations: Instead of printing the value of `c` inside the inner loop, accumulate the sum in a temporary variable `sum` and print it after the inner loop.

5. Avoid unnecessary namespace usage: Remove the line `using namespace std;` and qualify `cin` and `cout` with `std::` to avoid namespace pollution.

Optimized code:

```cpp
#include <iostream>

int main() {
  int n, m;
  int a[100][100], b[100];
  std::cin >> n >> m;

  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      std::cin >> a[i][j];
    }
  }

  for (int j = 0; j < m; j++) {
    std::cin >> b[j];
  }

  for (int i = 0; i < n; i++) {
    int sum = 0;
    for (int j = 0; j < m; j++) {
      sum += a[i][j] * b[j];
    }
    std::cout << sum << std::endl;
  }

  return 0;
}
```