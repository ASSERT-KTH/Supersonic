The given program has a nested loop structure where the outer loop iterates from 0 to M and the inner loop iterates through all the idols. Inside the inner loop, there is another loop that iterates from 0 to 300. This nested loop structure is the main cause of the program's slow running time.

To optimize the program, we can modify the nested loop structure. Instead of iterating through all the idols for each value of i and k, we can iterate through all the idols first and calculate the maximum values for each idol for all possible values of i and k. Then, we can use these precalculated maximum values to update the dp array.

Here are the optimization steps:

1. Remove the innermost loop that iterates from 0 to 300. We will calculate the maximum values for each idol for all possible values of i and k outside the main loop.

2. Create a vector of size M+1 to store the maximum values for each idol for all possible values of i and k. Initialize all the values in the vector to 0.

3. Modify the inner loop to iterate through all the idols and calculate the maximum values for each idol for all possible values of i and k. Instead of updating the dp array directly, update the corresponding value in the vector.

4. After the inner loop, update the dp array using the values in the vector.

5. Calculate the maximum value from the updated dp array.

6. Print the maximum value.

Here is the optimized program:

```cpp
#define _USE_MATH_DEFINES
#define INF 0x3f3f3f3f
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
using namespace std;
typedef long long ll;
typedef pair<int, int> P;
typedef pair<int, P> PP;
int tx[] = {0, 1, 0, -1};
int ty[] = {-1, 0, 1, 0};
static const double EPS = 1e-8;
class Data {
public:
  string mName;
  int mC, mV, mD, mL;
  Data(string _n, int _c, int _v, int _d, int _l) {
    mName = _n;
    mC = _c;
    mV = _v;
    mD = _d;
    mL = _l;
  }
};
int dp[301][3];
int main() {
  int N, M;
  string line;
  stringstream ss;
  while (getline(cin, line)) {
    ss << line;
    ss >> N >> M;
    ss.clear();
    vector<Data> idols;
    for (int i = 0; i < N; i++) {
      getline(cin, line);
      string name = line;
      getline(cin, line);
      ss << line;
      int C, V, D, L;
      ss >> C >> V >> D >> L;
      ss.clear();
      idols.push_back(Data(name, C, V, D, L));
    }
    memset(dp, 0, sizeof(dp));
    vector<int> maxValues(M+1, 0);
    for (int j = 0; j < idols.size(); j++) {
      for (int k = 0; k <= 300; k++) {
        for (int i = idols[j].mC * k; i <= M; i++) {
          maxValues[i] =
              max(maxValues[i], maxValues[i - idols[j].mC * k] + idols[j].mV * k);
          maxValues[i] =
              max(maxValues[i], maxValues[i - idols[j].mC * k] + idols[j].mD * k);
          maxValues[i] =
              max(maxValues[i], maxValues[i - idols[j].mC * k] + idols[j].mL * k);
        }
      }
    }
    for (int i = 0; i <= M; i++) {
      dp[i][0] = maxValues[i];
      dp[i][1] = maxValues[i];
      dp[i][2] = maxValues[i];
    }
    int maxv = 0;
    for (int i = 0; i <= M; i++) {
      for (int j = 0; j < 3; j++) {
        maxv = max(dp[i][j], maxv);
      }
    }
    printf("%d\n", maxv);
  }
}
```