To optimize the program for running time and memory usage, we can make the following modifications:

1. Remove unnecessary includes: We don't need to include all the header files that are currently included. We can remove the includes that are not used in the program.

2. Move the declaration of `vector<Data> idols` outside the while loop: Currently, the `vector<Data> idols` is declared inside the while loop and is created and destroyed in each iteration. We can move this declaration outside the while loop to avoid unnecessary memory allocations and deallocations.

3. Use a constant size array instead of dynamic arrays: Currently, the `dp` array is dynamically allocated using `new`. We can change it to a constant size array to avoid the overhead of dynamic memory allocation and deallocation.

4. Use `emplace_back` instead of `push_back`: Instead of using `push_back` to add elements to the `idols` vector, we can use `emplace_back` to construct the elements in-place, avoiding unnecessary copying.

5. Use range-based for loops: Instead of using a traditional for loop with indices, we can use range-based for loops to iterate over the elements of `idols` and the `dp` array.

Here is the optimized program:

```cpp
#define _USE_MATH_DEFINES
#define INF 0x3f3f3f3f
#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
using namespace std;
typedef pair<int, int> P;
typedef pair<int, P> PP;
int tx[] = {0, 1, 0, -1};
int ty[] = {-1, 0, 1, 0};
static const double EPS = 1e-8;
class Data {
public:
  string mName;
  int mC, mV, mD, mL;
  Data(string _n, int _c, int _v, int _d, int _l) {
    mName = _n;
    mC = _c;
    mV = _v;
    mD = _d;
    mL = _l;
  }
};
int main() {
  int N, M;
  string line;
  stringstream ss;
  vector<Data> idols;
  while (getline(cin, line)) {
    ss << line;
    ss >> N >> M;
    ss.clear();
    idols.clear();
    for (int i = 0; i < N; i++) {
      getline(cin, line);
      string name = line;
      getline(cin, line);
      ss << line;
      int C, V, D, L;
      ss >> C >> V >> D >> L;
      ss.clear();
      idols.emplace_back(name, C, V, D, L);
    }
    int dp[301][3] = {0};
    for (int i = 0; i <= M; i++) {
      for (const auto& idol : idols) {
        for (int k = 0; k <= 300; k++) {
          if (i - idol.mC * k < 0)
            break;
          dp[i][0] =
              max(dp[i - idol.mC * k][0] + idol.mV * k, dp[i][0]);
          dp[i][1] =
              max(dp[i - idol.mC * k][1] + idol.mD * k, dp[i][1]);
          dp[i][2] =
              max(dp[i - idol.mC * k][2] + idol.mL * k, dp[i][2]);
        }
      }
    }
    int maxv = 0;
    for (int i = 0; i <= M; i++) {
      for (int j = 0; j < 3; j++) {
        maxv = max(dp[i][j], maxv);
      }
    }
    printf("%d\n", maxv);
  }
}
```