The given program can be optimized in the following steps:

1. Remove unnecessary headers: The program includes several headers that are not used. We can remove them to improve compilation time and reduce memory usage.

2. Use `vector` instead of C-style arrays: The program uses C-style arrays `c` and `v`, which have fixed sizes. We can use `vector` instead, which allows for dynamic resizing and simplifies the code.

3. Optimize the `max_swap` function: The `max_swap` function is used to update the maximum value. We can replace it with the `max` function to simplify the code and potentially improve performance.

4. Use `istringstream` instead of `getline` and `cin` for reading integers: The program reads integers using `getline` and `cin`. We can use `istringstream` instead, which is more efficient and simplifies the code.

5. Remove unnecessary macros: The program defines several macros that are not used. We can remove them to improve code readability.

Here is the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <sstream>
#include <vector>
using namespace std;

int dpru(const vector<int>& c, const vector<vector<int>>& v) {
  int n = c.size();
  int m = v[0].size();
  vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));

  for (int i = 0; i < n; ++i) {
    for (int j = 0; j <= m; ++j) {
      dp[i + 1][j] = dp[i][j];
      if (j >= c[i]) {
        dp[i + 1][j] = max(dp[i + 1][j], dp[i + 1][j - c[i]] + v[i][j]);
      }
    }
  }
  return dp[n][m];
}

int main() {
  int n, m;
  while (cin >> n >> m) {
    cin.ignore();
    vector<int> c(n);
    vector<vector<int>> v(3, vector<int>(n));

    for (int i = 0; i < n; ++i) {
      string s;
      getline(cin, s);
      istringstream iss(s);
      int t;
      iss >> t;
      c[i] = t;
      for (int j = 0; j < 3; ++j) {
        iss >> v[j][i];
      }
    }

    int res = 0;
    for (int i = 0; i < 3; ++i) {
      res = max(res, dpru(c, v));
    }
    cout << res << endl;
  }
}
```
