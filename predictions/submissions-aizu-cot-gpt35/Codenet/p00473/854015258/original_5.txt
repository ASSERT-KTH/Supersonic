The main performance bottleneck in the given program is the use of a 3-dimensional static array `dp[2][5000 + 2][2]`. This array has a size of `2 * 5002 * 2 * sizeof(int)` bytes, which can be quite large for larger values of `n`. Additionally, the array is initialized with the value `INF` for each element, which can be time-consuming.

To optimize this program, we can make two modifications:

1. Instead of using a static array, we can use a dynamic array to reduce memory usage. We only need to store the values of `dp[s][j][0]` and `dp[s][j][1]` for the current and previous iteration, so we can use a 2-dimensional array of size `2 * (n / 2 + 1)`.

2. We can avoid initializing the entire array with `INF`. Since the values of `dp[s][j][0]` and `dp[s][j][1]` are updated in each iteration, we can start with an initial value of `INF` for `dp[s][j][0]` and `dp[s][j][1]` for `j > 0`, and set `dp[s][0][0] = dp[s][0][1] = 0` for the first iteration.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  const int INF = 1000000000;
  int n, c;
  scanf("%d", &n);

  int **dp = new int*[2];
  for (int i = 0; i < 2; i++) {
    dp[i] = new int[n / 2 + 1];
  }

  dp[1][0] = 0;

  for (int i = 2; i <= n; i++) {
    int s = i % 2, t = 1 - s;
    scanf("%d", &c);
    for (int j = 1; j <= n / 2; j++) {
      dp[s][j] = min(dp[t][j - 1] + c, dp[t][j]);
    }
  }

  printf("%d\n", min(dp[0][n / 2], dp[1][n / 2]));

  for (int i = 0; i < 2; i++) {
    delete[] dp[i];
  }
  delete[] dp;

  return 0;
}
```

In this optimized program, we use a dynamic 2-dimensional array `dp` instead of the static 3-dimensional array. We allocate memory for `dp` using the `new` operator, and free the memory using the `delete` operator at the end of the program.

We also modify the loop to start from `j = 1` instead of `j = 0`, and remove the unnecessary initialization of `dp[s][j][0]` and `dp[s][j][1]` with `INF`.

Overall, these modifications reduce memory usage and improve runtime performance.