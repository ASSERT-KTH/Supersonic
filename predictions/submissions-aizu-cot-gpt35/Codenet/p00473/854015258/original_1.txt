To optimize the given program, we can make the following modifications:

1. Remove unnecessary headers: The program includes the `<iostream>` header, but it is not used. We can remove this line.

2. Optimize the loop limits: The loop limits for the variables `i` and `j` can be optimized. The variable `i` is only used to iterate from 0 to 1, so we can replace the loop condition with `i < 2`. The variable `j` is used to iterate from 0 to 5002, but the array `dp` has a size of `5000 + 2`, so we can replace the loop condition with `j < 5002`.

3. Optimize the initialization of `dp` array: The `dp` array is initialized with the value `INF` for all elements. Instead of using a nested loop to initialize each element, we can use the `memset` function to set all elements to `INF` in a single line.

4. Replace `scanf` with `cin`: The program uses `scanf` to read input from the user. We can replace it with `cin` for a more C++-style input.

5. Replace `printf` with `cout`: The program uses `printf` to print the result. We can replace it with `cout` for a more C++-style output.

Here is the optimized program:

```cpp
#include <iostream>
#include <cstring>
using namespace std;
int main() {
  const int INF = 1000000000;
  int n, c;
  static int dp[2][5000 + 2][2];
  memset(dp, INF, sizeof(dp));
  dp[1][1][0] = 0;
  dp[1][0][1] = 0;
  cin >> n;
  for (int i = 2; i <= n; i++) {
    int s = i % 2, t = 1 - s;
    cin >> c;
    for (int j = 0; j <= n / 2; j++) {
      if (j == 0)
        dp[s][j][0] = INF;
      else
        dp[s][j][0] = min(dp[t][j - 1][0], dp[t][j - 1][1] + c);
      dp[s][j][1] = min(dp[t][j][0] + c, dp[t][j][1]);
    }
  }
  cout << min(dp[0][n / 2][0], dp[0][n / 2][1]) << endl;
}
```