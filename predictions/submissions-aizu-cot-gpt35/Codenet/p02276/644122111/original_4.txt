The given program is already quite efficient, but there are a few optimizations we can make to improve its running time and memory usage.

1. Remove unnecessary header files: The program includes the `<algorithm>` header, but it is not used. We can remove this unnecessary inclusion.

2. Replace `std::printf` with `std::cout`: The program currently uses `std::printf` for printing the output. We can replace it with `std::cout` from the `<iostream>` header, which is generally faster.

3. Use `std::vector` instead of a raw array: The program currently uses a raw array `as[]` to store the input values. Instead, we can use a `std::vector<int>`, which provides better memory management and allows for more flexible resizing.

4. Pass the vector by reference to `print_partition_ints`: Currently, the `print_partition_ints` function takes the `as[]` array by pointer, which requires a separate `n` parameter to specify the size of the array. We can modify the function to take a reference to the `std::vector<int>` instead, eliminating the need for the `n` parameter.

5. Use iterators instead of indices in the `print_partition_ints` function: Instead of using indices to iterate over the elements of the vector, we can use iterators. This can simplify the code and potentially improve performance.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

static void print_partition_ints(const std::vector<int>& as, const uint q) {
  auto out_sep = "";
  for (const auto& num : as) {
    auto format = (num != as[q] ? "%s%d" : "%s[%d]");
    std::cout << out_sep << format << num;
    out_sep = " ";
  }
  std::cout << "\n";
}

static uint partition(std::vector<int>& as, const uint first, const uint last) {
  auto less = first;
  for (auto i = first; i < last; ++i) {
    if (as[i] <= as[last]) {
      std::swap(as[less], as[i]);
      ++less;
    }
  }
  std::swap(as[less], as[last]);
  return less;
}

int main() {
  uint n;
  std::cin >> n;
  std::vector<int> as(n);
  for (auto i = 0u; i < n; ++i) {
    std::cin >> as[i];
  }
  auto q = partition(as, 0, n - 1);
  print_partition_ints(as, q);
}
```

These optimizations should improve the running time and memory usage of the program while preserving its functionality.