To optimize the given program, we can make the following modifications:

1. Remove unnecessary header files: The `<algorithm>` header file is not used in the program, so we can remove it.

2. Use `std::cout` instead of `std::printf`: The `print_partition_ints` function currently uses `std::printf` for printing. We can replace it with `std::cout` for better performance.

3. Use `std::swap` from `<utility>`: The `std::swap` function is currently used from the global namespace. We can use the `std::swap` function from the `<utility>` header file instead.

4. Replace the variable `out_sep` with a boolean flag: Instead of using a string for `out_sep`, we can use a boolean flag `is_first` to determine whether to print a space before a number or not. This will eliminate the need to create and update the `out_sep` string.

5. Use `std::cin` instead of `std::scanf`: The `std::scanf` function is used for input. We can replace it with `std::cin` for better performance.

6. Use `std::vector` instead of variable-length arrays: The program currently uses a variable-length array (`int as[n]`) for storing the input numbers. We can replace it with a `std::vector<int>` for better memory management and safety.

7. Pass `as` as a reference to `print_partition_ints`: The `print_partition_ints` function currently takes `as` as a const pointer. We can modify it to take `as` as a const reference to avoid unnecessary copying.

Here is the optimized program incorporating the above modifications:

```cpp
#include <iostream>
#include <utility>
#include <vector>

using uint = unsigned int;

static void print_partition_ints(const std::vector<int>& as, const uint q, const uint n) {
  bool is_first = true;
  for (auto i = 0u; i < n; ++i) {
    auto format = (i != q ? "%d" : "[%d]");
    if (!is_first) {
      std::cout << " ";
    } else {
      is_first = false;
    }
    std::cout << as[i];
  }
  std::cout << std::endl;
}

static uint partition(std::vector<int>& as, const uint first, const uint last) {
  auto less = first;
  for (auto i = first; i < last; ++i) {
    if (as[i] <= as[last]) {
      std::swap(as[less], as[i]);
      ++less;
    }
  }
  std::swap(as[less], as[last]);
  return less;
}

int main() {
  uint n;
  std::cin >> n;
  std::vector<int> as(n);
  for (auto i = 0u; i < n; ++i) {
    std::cin >> as[i];
  }
  auto q = partition(as, 0, n - 1);
  print_partition_ints(as, q, n);
}
```

This optimized program eliminates unnecessary header files, improves input/output operations, and uses a more efficient and safer data structure.