The given program can be optimized in the following steps:

1. Remove unnecessary header files: The program includes `<algorithm>`, which is not used. We can remove it.

2. Use `std::cout` instead of `std::printf`: The program uses `std::printf` for printing, which can be slower compared to `std::cout`. We can modify the `print_partition_ints` function to use `std::cout` instead.

3. Use `std::vector` instead of a dynamic array: The program uses a dynamic array `as[]` to store the input integers. We can replace it with `std::vector` which provides better memory management and simplifies the code.

4. Pass `as` as a reference to `partition` function: Currently, the `partition` function takes `as[]` as a pointer. We can modify it to take a reference to `std::vector<int>& as` instead, which allows direct access to the elements.

5. Use `std::partition` algorithm: The `partition` function implements a simple partitioning algorithm. We can replace it with the `std::partition` algorithm from the `<algorithm>` library, which can improve performance.

6. Use iterators instead of indices: The `print_partition_ints` function uses indices to iterate over the array. We can modify it to use iterators, which can be more efficient.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

using uint = unsigned int;

static void print_partition_ints(const std::vector<int>& as, const uint q, const uint n) {
  auto out_sep = "";
  for (auto it = as.begin(); it != as.end(); ++it) {
    auto format = (std::distance(as.begin(), it) != q ? "%s%d" : "%s[%d]");
    std::cout << out_sep << *it;
    out_sep = " ";
  }
  std::cout << std::endl;
}

static uint partition(std::vector<int>& as, const uint first, const uint last) {
  auto pivot = as[last];
  auto less = first;
  
  auto it = as.begin() + first;
  auto end = as.begin() + last;
  std::partition(it, end, [pivot](int val) { return val <= pivot; });
  
  std::swap(as[less], as[last]);
  
  return less;
}

int main() {
  uint n;
  std::cin >> n;
  std::vector<int> as(n);
  
  for (auto i = 0u; i < n; ++i) {
    std::cin >> as[i];
  }
  
  auto q = partition(as, 0, n - 1);
  print_partition_ints(as, q, n);

  return 0;
}
```

This optimized program improves the running time and memory usage of the original program by using `std::vector`, `std::partition`, and `std::cout`. It also simplifies the code by using iterators instead of indices.