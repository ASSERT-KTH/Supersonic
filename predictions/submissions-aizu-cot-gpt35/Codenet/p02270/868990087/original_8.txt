Step 1: Avoid unnecessary inclusion of headers

In the given program, the headers `<cstdio>` and `<iostream>` are included, but they are not required. Since we are not using any functions from these headers, we can remove them to reduce unnecessary overhead.

Step 2: Use `cin` and `cout` instead of `scanf` and `printf`

The `scanf` and `printf` functions are slower than `cin` and `cout` in C++. So, we can replace `scanf` and `printf` with `cin` and `cout` respectively to improve the running time of the program.

Step 3: Optimize the check function

The check function can be optimized by removing the unnecessary check for `i == n` inside the while loop. Instead, we can modify the loop condition to `i < n` and increment `i` after checking the condition. This will avoid the extra comparison inside the loop.

Step 4: Optimize the binary search loop

The binary search loop can be optimized by using the logical OR operator (`||`) instead of comparing the result of the check function with `n`. We can modify the loop condition to `check(N, n, k, mid) < n` and update `right` to `mid` in the else block. This will reduce the number of function calls in the loop.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int check(int N[], int n, int k, int w) {
  int i = 0;
  for (int j = 0; j < k; ++j) {
    int s = 0;
    while (s + N[i] <= w) {
      s += N[i];
      ++i;
    }
    if (i >= n)
      return n;
  }
  return i;
}

int main() {
  int MAX_W = 1000000000;
  int n, k;
  cin >> n >> k;
  int N[n];
  for (int i = 0; i < n; ++i) {
    cin >> N[i];
  }
  int left = 0;
  int right = MAX_W;
  while (left < right) {
    int mid = (left + right) / 2;
    if (check(N, n, k, mid) < n) {
      left = mid + 1;
    } else {
      right = mid;
    }
  }
  cout << right << endl;
  return 0;
}
```