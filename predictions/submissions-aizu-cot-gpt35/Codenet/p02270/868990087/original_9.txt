To optimize the given program, we can make the following modifications:

1. Instead of using an array `N[]` to store the weights, we can use a single variable `N` to store the maximum weight of any item. This will reduce the memory usage.

2. Instead of using `scanf()` and `printf()` for input and output, we can use `cin` and `cout` which are generally faster.

3. Instead of using a binary search to find the maximum weight, we can use a linear search. Since the weights are sorted in non-decreasing order, we can start with the maximum weight as `N * k` and decrement it until we find a weight that is feasible.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int check(int N, int n, int k, int w) {
  int i = 0;
  for (int j = 0; j < k; ++j) {
    int s = 0;
    while (s + N <= w) {
      s += N;
      ++i;
      if (i == n)
        return n;
    }
  }
  return i;
}

int main() {
  int MAX_W = 1000000000;
  int n, k;
  cin >> n >> k;
  int N = 0;
  for (int i = 0; i < n; ++i) {
    int weight;
    cin >> weight;
    N = max(N, weight);
  }
  int right = N * k;
  while (true) {
    if (check(N, n, k, right) == n) {
      break;
    }
    right--;
  }
  cout << right << endl;
  return 0;
}
```

Explanation of optimizations:

1. We replaced the array `N[]` with a single variable `N` to store the maximum weight. This reduces memory usage.

2. We replaced `scanf()` and `printf()` with `cin` and `cout` for input and output. This is generally faster.

3. We replaced the binary search with a linear search. Since the weights are sorted in non-decreasing order, we can start with the maximum weight as `N * k` and decrement it until we find a weight that is feasible. This simplifies the code and avoids unnecessary computations in the binary search.