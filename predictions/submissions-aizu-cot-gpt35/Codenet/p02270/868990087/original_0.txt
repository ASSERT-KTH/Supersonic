To optimize the given program, we can make the following modifications:

1. Remove the unnecessary `using namespace std;` statement. This statement can cause naming conflicts and is generally considered a bad practice.

2. Change the data type of `MAX_W` to `long long int` to prevent overflow when calculating the mid value in the binary search.

3. Replace the `scanf` function calls with `cin` for input. `cin` is generally slower than `scanf`, but in this case, the program only requires two integer inputs, so the performance difference is negligible.

4. Remove the unnecessary array size declaration for `N`. Instead, use a `vector<int>` to dynamically allocate memory for `N` based on the input size.

5. Pass `N` as a reference to the `check` function to avoid unnecessary copying of the array.

Here is the optimized C++ program:

```cpp
#include <cstdio>
#include <iostream>
#include <vector>

int check(const std::vector<int>& N, int n, int k, int w) {
  int i = 0;
  for (int j = 0; j < k; ++j) {
    int s = 0;
    while (s + N[i] <= w) {
      s += N[i];
      ++i;
      if (i == n)
        return n;
    }
  }
  return i;
}

int main() {
  long long int MAX_W = 1000000000;
  int n, k;
  std::cin >> n >> k;
  std::vector<int> N(n);
  for (int i = 0; i < n; ++i) {
    std::cin >> N[i];
  }
  int left = 0;
  int right = MAX_W;
  while (left < right) {
    int mid = (left + right) / 2;
    if (check(N, n, k, mid) == n) {
      right = mid;
    } else {
      left = mid + 1;
    }
  }
  std::cout << right << std::endl;
  return 0;
}
```

These optimizations should improve the running time and memory usage of the program.