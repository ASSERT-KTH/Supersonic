Step 1: Remove unused headers

The `<cstdio>` and `<math.h>` headers are not used in the program. We can remove them to improve compilation time and reduce memory usage.

Step 2: Optimize input and output operations

Instead of using `cin` for input and `cout` for output, we can use `scanf` and `printf` functions which are generally faster.

Step 3: Optimize sorting

The `sort` function is used to sort the `c` array. However, the array `c` is already sorted in ascending order. We can remove the sorting step to save time.

Step 4: Optimize memory usage

The `mini` array has a size of 50001, but we only need to store values up to `n`. We can reduce the size of the `mini` array to `n+1` to save memory.

Here's the optimized program:

```cpp
#include <iostream>
using namespace std;

const int INF = 2000000000;

int main() {
  int n, m;
  scanf("%d %d", &n, &m);
  
  int c[21];
  int mini[10001];
  
  for (int i = 1; i <= m; i++) {
    scanf("%d", &c[i]);
  }

  for (int i = 1; i <= n; i++)
    mini[i] = INF;

  for (int i = 1; i <= m; i++) {
    for (int j = 0; j <= n - c[i]; j++) {
      mini[j + c[i]] = min(mini[j] + 1, mini[j + c[i]]);
    }
  }
  
  printf("%d\n", mini[n]);
  
  return 0;
}
```