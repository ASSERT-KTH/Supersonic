The given program calculates the maximum profit by finding the maximum difference between an element in the vector `R` and the minimum value encountered so far (`Ri`). The program iterates through the vector twice, which can be optimized to a single iteration.

To optimize the program, we can eliminate the first iteration and find the maximum profit in a single loop. We can initialize `maxProfit` to a negative infinity value and update it whenever we find a higher profit.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  int n;
  int maxProfit = INT_MIN; // Initialize maxProfit to negative infinity
  int Ri = INT_MAX; // Initialize Ri to positive infinity
  cin >> n;
  vector<int> R(n);
  for (int i = 0; i < n; i++) {
    cin >> R[i];
    maxProfit = max(maxProfit, R[i] - Ri); // Update maxProfit if current profit is higher
    Ri = min(Ri, R[i]); // Update Ri if current element is smaller
  }
  cout << maxProfit << endl;
  return 0;
}
```

In the optimized version, we initialize `maxProfit` to `INT_MIN` (negative infinity) and `Ri` to `INT_MAX` (positive infinity). Then, we iterate through the vector `R` once and update `maxProfit` and `Ri` accordingly. Finally, we output the maximum profit.