Optimization steps:

1. Remove unnecessary includes: The program includes the <iostream> and <vector> libraries, but only uses the cin, cout, vector, and iterator classes. Therefore, we can remove the unnecessary includes.

2. Remove the "using namespace std" statement: It is generally discouraged to use the "using namespace std" statement because it can lead to naming conflicts. Instead, we can use the std:: prefix to explicitly specify the std namespace when using cin, cout, vector, and iterator.

3. Initialize variables with appropriate values: The variable "maxProfit" is initialized with a large negative value, which is not necessary. We can initialize it to a minimum value like -INFINITY.

4. Remove unnecessary variable initialization: The variable "Ri" is initialized to 2000000000, but it is immediately overwritten by the first element of the vector "R". We can remove this unnecessary initialization.

5. Use range-based for loop: Instead of using iterators to iterate over the vector "R", we can use a range-based for loop, which simplifies the code and improves readability.

6. Simplify the logic for updating "maxProfit" and "Ri": We can simplify the if conditions by combining the two conditions into one. Instead of checking if "maxProfit" is less than "*itr - Ri" and then updating "maxProfit", we can directly update "maxProfit" if "*itr - Ri" is greater than 0. Similarly, we can update "Ri" if "*itr" is less than "Ri".

Optimized program:

```cpp
#include <iostream>
#include <vector>

int main() {
  int n;
  int maxProfit = -INFINITY;
  std::cin >> n;
  std::vector<int> R(n);
  for (auto& num : R) {
    std::cin >> num;
  }
  int Ri = R[0];
  for (const auto& num : R) {
    if (num - Ri > maxProfit) {
      maxProfit = num - Ri;
    }
    if (num < Ri) {
      Ri = num;
    }
  }
  std::cout << maxProfit << std::endl;
  return 0;
}
```