To optimize the given program, we can make the following modifications:

1. Remove unnecessary header files: The program includes `<algorithm>` header file but does not use any functions from it. Therefore, we can remove this line.

2. Remove unnecessary `using namespace std;` statement: This statement brings all names from the `std` namespace into the global namespace. Since we are not using any names directly from the `std` namespace, we can remove this line.

3. Change the `MAX` constant to a more reasonable value: The current value of `MAX` is set to 200000. However, this is an unnecessarily large value considering that the array `R` is only filled with `n` elements. We can change the value of `MAX` to be equal to `n`, which will reduce the memory usage.

4. Optimize the loop by removing unnecessary calculations: In the second loop, the current maximum difference is updated using the `max()` function and the current minimum value is updated using the `min()` function. However, these calculations can be simplified by directly comparing the values and updating them if necessary. This will reduce the number of function calls and improve the performance.

Here is the optimized program:

```cpp
#include <iostream>

int main() {
  int n;
  std::cin >> n;
  int R[n];
  for (int i = 0; i < n; i++)
    std::cin >> R[i];
  int maxv = R[1] - R[0];
  int minv = R[0];
  for (int i = 1; i < n; i++) {
    if (R[i] - minv > maxv)
      maxv = R[i] - minv;
    if (R[i] < minv)
      minv = R[i];
  }
  std::cout << maxv << std::endl;
  return 0;
}
```