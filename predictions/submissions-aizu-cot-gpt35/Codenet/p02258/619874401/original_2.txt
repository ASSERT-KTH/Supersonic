To optimize the given program, we can make the following modifications:

1. Remove unnecessary header files: We only need the `<iostream>` header file for input/output operations. The `<algorithm>` header file is not needed as we are not using any of its functions.

2. Remove the `using namespace std` statement: It is considered a good practice to avoid using the `using` directive for the entire namespace. Instead, we can use the `std::` prefix to specify the namespace for specific objects.

3. Use a more efficient data type for the array size: The variable `n` represents the size of the array `R`. We can use the `size_t` data type instead of `int` as it is specifically designed for representing sizes of objects.

4. Optimize the loop for input: Instead of using a loop to read each element of the array one by one, we can use `std::copy_n` to directly read `n` elements from the input stream into the array `R`.

5. Optimize the loop for calculating max and min values: Instead of initializing `maxv` with `R[1] - R[0]`, we can initialize it with a very small value, such as `INT_MIN`, and initialize `minv` with `R[0]`. This way, we can combine the initialization and the first iteration of the loop.

6. Update the loop condition for calculating max and min values: Instead of starting the loop from index `1`, we can start it from index `0` and update `maxv` and `minv` in the same loop iteration.

Here is the optimized code:

```cpp
#include <iostream>
#include <climits>

static const size_t MAX = 200000;

int main() {
  int R[MAX];
  size_t n;
  std::cin >> n;
  std::copy_n(std::istream_iterator<int>(std::cin), n, R);

  int maxv = INT_MIN;
  int minv = R[0];
  for (size_t i = 0; i < n; i++) {
    maxv = std::max(maxv, R[i] - minv);
    minv = std::min(minv, R[i]);
  }

  std::cout << maxv << std::endl;
  return 0;
}
```