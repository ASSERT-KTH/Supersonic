To optimize the given program, we can make the following modifications:

1. Remove the unnecessary `#include <algorithm>` since we are not using any algorithm functions.

2. Instead of using `using namespace std`, we can use `std::` prefix to specify the usage of standard library functions.

3. Initialize `maxv` to a smaller value, such as `INT_MIN`, to ensure the correct comparison in the loop.

4. Remove the unnecessary `static` keyword for `MAX` variable.

5. Instead of using `std::cin` and `std::cout`, we can use the more efficient `std::ios_base::sync_with_stdio(false)` to disable the synchronization between C and C++ standard streams.

6. We can change the `for` loop initialization of `i` from `int i = 1` to `int i = 0` since we are starting the loop from the first element of the array.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <climits>

const int MAX = 200000;

int main() {
  std::ios_base::sync_with_stdio(false);

  int R[MAX], n;
  std::cin >> n;

  for (int i = 0; i < n; i++)
    std::cin >> R[i];

  int maxv = INT_MIN;
  int minv = R[0];

  for (int i = 0; i < n; i++) {
    maxv = std::max(maxv, R[i] - minv);
    minv = std::min(minv, R[i]);
  }

  std::cout << maxv << std::endl;
  return 0;
}
```