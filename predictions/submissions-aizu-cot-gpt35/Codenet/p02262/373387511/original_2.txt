Optimization Steps:
1. Remove unnecessary `using namespace std;` statement.
2. Pass the vector `G` by reference to the `insertionSort` function to avoid unnecessary copying.
3. Use `std::swap` to swap the elements in the `insertionSort` function for better performance.
4. Use `std::ios_base::sync_with_stdio(false);` to improve input/output performance.
5. Remove the unnecessary `cout << endl;` after printing the array elements in the main function.

```cpp
#include <iostream>
#include <vector>

int cnt;
std::vector<int> G;

void insertionSort(int* a, int g, int n) {
  for (int i = g - 1; i < n; i++) {
    int j = i;
    while (j - g >= 0 && a[j - g] > a[j]) {
      std::swap(a[j], a[j - g]);
      j = j - g;
      cnt++;
    }
  }
}

void selectionSort(int* a, int n) {
  cnt = 0;
  for (int h = 1;;) {
    if (h > n)
      break;
    G.push_back(h);
    h = 3 * h + 1;
  }
  for (int i = G.size() - 1; i >= 0; i--) {
    insertionSort(a, G[i], n);
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);

  int n;
  std::cin >> n;
  int* a = new int[n];
  for (int i = 0; i < n; i++) {
    std::cin >> a[i];
  }
  selectionSort(a, n);
  std::cout << G.size() << '\n';
  std::cout << G[G.size() - 1];
  for (int i = G.size() - 2; i >= 0; i--) {
    std::cout << ' ' << G[i];
  }
  std::cout << '\n';
  std::cout << cnt << '\n';
  for (int i = 0; i < n; i++) {
    std::cout << a[i] << '\n';
  }
  
  delete[] a;
  
  return 0;
}
```