Step 1: Remove unnecessary includes and macros.

The program includes the `<bits/stdc++.h>` header, which is not recommended as it includes a large number of standard library headers. It is better to include only the necessary headers. In this case, we can remove the `<bits/stdc++.h>` header and include the specific headers that are required.

The program also defines some macros (`rep`, `all`, `pb`, `fi`, `se`) which are not used. We can remove these macros to simplify the code.

Step 2: Use `vector` instead of `set` for storing heights.

The program uses a `set<int>` to store the heights of each vertex. However, since the heights are unique and there is no need to perform set operations (such as insertion and deletion), we can use a `vector<int>` instead. This will reduce the memory usage and improve the performance.

Step 3: Use `unordered_map` instead of `map` for `v2id`.

The program uses a `map<pi, int>` to store a mapping between pairs of integers and their corresponding IDs. Since the order of the pairs does not matter and we do not need the map to be sorted, we can use an `unordered_map<pi, int>` instead. This will improve the performance of accessing and inserting elements.

Step 4: Use `vector` instead of `set` for storing edges.

The program uses a `vector<edge>` to represent the edges of the graph. However, for each vertex, the program stores the edges in a `set<edge>`. Since the order of the edges does not matter and there is no need to perform set operations, we can use a `vector<edge>` instead. This will reduce the memory usage and improve the performance.

Step 5: Optimize the main loop.

The main loop of the program performs several operations that can be optimized:

- Instead of using a `map` to check if a pair is already present in `v2id`, we can use an `unordered_map` to improve the performance of checking and inserting elements.

- Instead of using `height[v].insert(bh)` to insert heights into the vector, we can use `height[v].push_back(bh)` to improve the performance.

- Instead of using `gg[uu].pb({vv, e.cost})` to insert edges into the vector, we can use `gg[uu].emplace_back(vv, e.cost)` to improve the performance.

Step 6: Optimize the nested loop.

The nested loop that iterates over the heights of each vertex can be optimized as follows:

- Instead of using `auto itr = height[i].begin()` and `auto nx = itr; ++nx`, we can use iterators directly (`auto itr = height[i].begin(); itr != height[i].end(); ++itr`).

- Instead of using `assert(v2id.count(pi(i, *itr)))` and `assert(v2id.count(pi(i, *nx)))` to check if the IDs exist in `v2id`, we can use an `unordered_map` and check if the `find` function returns the end iterator.

- Instead of using `gg[uu].pb({vv, dist})` and `gg[vv].pb({uu, dist})` to insert edges into the vector, we can use `gg[uu].emplace_back(vv, dist)` and `gg[vv].emplace_back(uu, dist)` to improve the performance.

Step 7: Use `emplace` instead of `push` for priority queue.

Instead of using `pq.push(pi(d[e.to], e.to))` to insert elements into the priority queue, we can use `pq.emplace(d[e.to], e.to)` to improve the performance.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <queue>
#include <climits>

using namespace std;

using ll = long long;

struct edge {
  int to;
  ll cost;
};

const int V = 100000;
const int VV = 1000000;
const ll INF = LLONG_MAX / 3;

vector<edge> G[V], gg[VV];
vector<int> height[V];
int n, m;
ll X;
int H[V];
unordered_map<pair<int, int>, int> v2id;
int max_h[V] = {};
ll d[VV];

int main() {
  cin >> n >> m >> X;
  for (int i = 0; i < n; ++i) {
    cin >> H[i];
  }
  for (int i = 0; i < m; ++i) {
    int a, b, t;
    cin >> a >> b >> t;
    --a;
    --b;
    G[a].push_back({b, t});
    G[b].push_back({a, t});
  }
  int ct = 1;
  priority_queue<pair<int, int>> que;
  que.emplace(X, 0);
  v2id[{0, X}] = 0;
  max_h[0] = X;
  height[0].push_back(X);
  while (!que.empty()) {
    pair<int, int> p = que.top();
    que.pop();
    int v = p.second, h = p.first;
    if (h < max_h[v])
      continue;
    for (const auto &e : G[v]) {
      int bh = h;
      int nh = h - e.cost;
      if (nh < 0)
        continue;
      if (nh > H[e.to]) {
        bh = H[e.to] + e.cost;
        nh = H[e.to];
      }
      if (nh > max_h[e.to]) {
        if (v2id.find({v, bh}) == v2id.end()) {
          v2id[{v, bh}] = ct++;
          height[v].push_back(bh);
        }
        if (v2id.find({e.to, nh}) == v2id.end()) {
          v2id[{e.to, nh}] = ct++;
          height[e.to].push_back(nh);
        }
        int uu = v2id[{v, bh}], vv = v2id[{e.to, nh}];
        gg[uu].emplace_back(vv, e.cost);
        max_h[e.to] = nh;
        que.emplace(max_h[e.to], e.to);
      }
    }
  }
  for (int i = 0; i < n; ++i) {
    for (const auto &e : G[i]) {
      if (H[i] < e.cost)
        continue;
      if (v2id.find({i, e.cost}) == v2id.end()) {
        v2id[{i, e.cost}] = ct++;
        height[i].push_back(e.cost);
      }
      if (v2id.find({e.to, 0}) == v2id.end()) {
        v2id[{e.to, 0}] = ct++;
        height[e.to].push_back(0);
      }
      int uu = v2id[{i, e.cost}];
      int vv = v2id[{e.to, 0}];
      gg[uu].emplace_back(vv, e.cost);
    }
  }
  if (v2id.find({n - 1, H[n - 1]}) == v2id.end()) {
    v2id[{n - 1, H[n - 1]}] = ct++;
    height[n - 1].push_back(H[n - 1]);
  }
  for (int i = 0; i < n; ++i) {
    int S = height[i].size();
    for (int j = 0; j < S - 1; ++j) {
      int uu = v2id[{i, height[i][j]}];
      int vv = v2id[{i, height[i][j + 1]}];
      int dist = height[i][j + 1] - height[i][j];
      gg[uu].emplace_back(vv, dist);
      gg[vv].emplace_back(uu, dist);
    }
  }
  int start = v2id[{0, X}];
  int goal = v2id[{n - 1, H[n - 1]}];
  fill(d, d + VV, INF);
  d[start] = 0;
  priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>> pq;
  pq.emplace(0, start);
  while (!pq.empty()) {
    pair<ll, int> now = pq.top();
    pq.pop();
    int v = now.second;
    if (now.first > d[v])
      continue;
    for (const auto &e : gg[v]) {
      if (d[e.to] > d[v] + e.cost) {
        d[e.to] = d[v] + e.cost;
        pq.emplace(d[e.to], e.to);
      }
    }
  }
  ll ans = d[goal];
  if (ans == INF)
    ans = -1;
  cout << ans << endl;
  return 0;
}
```

Explanation:

The optimized program follows the steps mentioned above to improve the performance and reduce memory usage. The unnecessary includes and macros are removed, and appropriate data structures are used for storing data. The main loop and nested loop are optimized to remove unnecessary operations and improve performance. Finally, the program is simplified and optimized for running time and memory usage.