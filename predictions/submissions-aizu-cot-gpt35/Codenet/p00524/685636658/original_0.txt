Step 1: Remove unnecessary header files
- The line `#include <bits/stdc++.h>` includes a large number of header files, which can increase compilation time. Since the program does not use all of these header files, we can remove this line and include only the necessary header files.

Step 2: Use `vector` instead of `set`
- The program uses a set to store the heights of each vertex. However, since the heights are unique and the order doesn't matter, we can use a vector instead of a set to improve memory usage and reduce the time complexity of some operations.

Step 3: Use `unordered_map` instead of `map`
- The program uses a map to store the mapping between pairs of vertices and their corresponding ids. However, since the order of the keys doesn't matter, we can use an unordered_map instead of a map to improve the time complexity of some operations.

Step 4: Optimize the priority queue
- The program uses a priority queue to store vertices and their heights. However, the priority queue is not efficient for updating the heights of existing vertices. We can optimize this by using a vector to store the vertices and their heights, and then using the `make_heap`, `push_heap`, and `pop_heap` functions to maintain the heap property.

Step 5: Optimize the Dijkstra's algorithm
- The program uses a priority queue to implement Dijkstra's algorithm. However, we can optimize this by using a vector to store the vertices and their distances, and then using the `make_heap`, `push_heap`, and `pop_heap` functions to maintain the heap property.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
#include <algorithm>
#include <cassert>
using namespace std;
using ll = long long;
#define rep(i, n) for (int(i) = 0; (i) < (int)(n); ++(i))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define fi first
#define se second
using pi = pair<int, int>;
using P = pair<ll, int>;
struct edge {
  int to;
  ll cost;
};
const int V = 100000;
const int VV = 1000000;
const ll INF = LLONG_MAX / 3;
vector<edge> G[V], gg[VV];
vector<int> height[V];
int n, m;
ll X;
int H[V];
unordered_map<pi, int> v2id;
int max_h[V] = {};
ll d[VV];
int main() {
  scanf(" %d %d %lld", &n, &m, &X);
  rep(i, n) scanf(" %d", &H[i]);
  rep(i, m) {
    int a, b, t;
    scanf(" %d %d %d", &a, &b, &t);
    --a;
    --b;
    G[a].pb({b, t});
    G[b].pb({a, t});
  }
  int ct = 1;
  vector<pi> que;
  que.push_back(pi(X, 0));
  v2id[pi(0, X)] = 0;
  max_h[0] = X;
  height[0].push_back(X);
  make_heap(all(que));
  while (!que.empty()) {
    pi p = que.front();
    pop_heap(all(que));
    que.pop_back();
    int v = p.se, h = p.fi;
    if (h < max_h[v])
      continue;
    for (const auto &e : G[v]) {
      int bh = h;
      int nh = h - e.cost;
      if (nh < 0)
        continue;
      if (nh > H[e.to]) {
        bh = H[e.to] + e.cost;
        nh = H[e.to];
      }
      if (nh > max_h[e.to]) {
        if (!v2id.count(pi(v, bh))) {
          v2id[pi(v, bh)] = ct++;
          height[v].push_back(bh);
        }
        if (!v2id.count(pi(e.to, nh))) {
          v2id[pi(e.to, nh)] = ct++;
          height[e.to].push_back(nh);
        }
        int uu = v2id[pi(v, bh)], vv = v2id[pi(e.to, nh)];
        gg[uu].pb({vv, e.cost});
        max_h[e.to] = nh;
        que.push_back(pi(max_h[e.to], e.to));
        push_heap(all(que));
      }
    }
  }
  rep(i, n) for (const auto &e : G[i]) {
    if (H[i] < e.cost)
      continue;
    if (!v2id.count(pi(i, e.cost))) {
      v2id[pi(i, e.cost)] = ct++;
      height[i].push_back(e.cost);
    }
    if (!v2id.count(pi(e.to, 0))) {
      v2id[pi(e.to, 0)] = ct++;
      height[e.to].push_back(0);
    }
    int uu = v2id[pi(i, e.cost)];
    int vv = v2id[pi(e.to, 0)];
    gg[uu].pb({vv, e.cost});
  }
  if (!v2id.count(pi(n - 1, H[n - 1]))) {
    v2id[pi(n - 1, H[n - 1])] = ct++;
    height[n - 1].push_back(H[n - 1]);
  }
  rep(i, n) {
    int S = height[i].size();
    auto itr = height[i].begin();
    rep(j, S - 1) {
      auto nx = itr;
      ++nx;
      assert(v2id.count(pi(i, *itr)));
      assert(v2id.count(pi(i, *nx)));
      int uu = v2id[pi(i, *itr)];
      int vv = v2id[pi(i, *nx)];
      int dist = *nx - *itr;
      gg[uu].pb({vv, dist});
      gg[vv].pb({uu, dist});
      itr = nx;
    }
  }
  int start = v2id[pi(0, X)];
  int goal = v2id[pi(n - 1, H[n - 1])];
  fill(d, d + VV, INF);
  d[start] = 0;
  vector<P> pq;
  pq.push_back(pi(0, start));
  make_heap(all(pq));
  while (!pq.empty()) {
    P now = pq.front();
    pop_heap(all(pq));
    pq.pop_back();
    int v = now.se;
    if (now.fi > d[v])
      continue;
    for (const auto &e : gg[v]) {
      if (d[e.to] > d[v] + e.cost) {
        d[e.to] = d[v] + e.cost;
        pq.push_back(pi(d[e.to], e.to));
        push_heap(all(pq));
      }
    }
  }
  ll ans = d[goal];
  if (ans == INF)
    ans = -1;
  printf("%lld\n", ans);
  return 0;
}
```