The given code can be optimized in the following steps:

1. Remove unnecessary header inclusion: The code includes the `<bits/stdc++.h>` header, which is not a standard C++ header and is considered bad practice. It is better to include the specific headers that are required for the program.

2. Remove unused constants and variables: The code defines several constants and variables that are not used. These can be safely removed to improve readability.

3. Replace `scanf` with `cin` and `printf` with `cout`: The code uses the C-style input/output functions `scanf` and `printf`. It is more idiomatic to use the C++ input/output streams `cin` and `cout`.

4. Use `vector` instead of `pb` macro: The code uses the `pb` macro to append elements to a vector. It is better to use the `push_back` function of the vector instead, which is more readable.

5. Use `reserve` for vector sizes: The code creates vectors without specifying their initial sizes. This can lead to frequent reallocations and memory copies. It is better to use the `reserve` function to preallocate memory for the vectors.

6. Use `unordered_map` instead of `map`: The code uses a `map` to store mappings between pairs of integers and integers. Since the order of the mappings is not important, it is more efficient to use an `unordered_map` instead.

7. Use `emplace` instead of `count` and `insert`: The code uses the `count` function to check if a key exists in the `unordered_map`, and then uses the `insert` function to insert the key if it doesn't exist. It is more efficient to use the `emplace` function, which checks if the key exists and inserts it if it doesn't in a single operation.

8. Use `reserve` for `set` sizes: The code creates sets without specifying their initial sizes. It is better to use the `reserve` function to preallocate memory for the sets.

9. Use `auto` for range-based loops: The code uses the `rep` macro to create a loop variable. It is more readable to use the `auto` keyword for range-based loops.

10. Use `emplace_back` instead of `push_back`: The code uses `push_back` to append elements to vectors. It is more efficient to use `emplace_back`, which constructs the elements in place without unnecessary copies.

11. Use `vector<int>` instead of `set<int>` for height: The code uses a `set<int>` to store the heights of each vertex. Since duplicates are not allowed and the heights are stored in a sorted order, it is more efficient to use a `vector<int>` instead.

12. Use `vector<bool>` instead of `int` for max_h: The code uses an `int` array to store the maximum height for each vertex. Since the maximum height can only be 0 or 1, it is more memory-efficient to use a `vector<bool>`.

13. Use `vector<pair<int, ll>>` instead of `vector<edge>`: The code defines an `edge` struct with two members: `to` and `cost`. It is more readable to use a `vector<pair<int, ll>>` instead.

14. Use `vector<vector<pair<int, ll>>>` instead of `vector<edge>`: The code uses a `vector<edge>` to represent the graph. It is more readable to use a `vector<vector<pair<int, ll>>>`, where each entry represents the adjacent vertices and their corresponding costs.

15. Use `vector<vector<pair<int, ll>>>` instead of `vector<edge>` for gg: The code uses a `vector<edge>` to represent another graph. It is more readable to use a `vector<vector<pair<int, ll>>>`, where each entry represents the adjacent vertices and their corresponding costs.

16. Use `vector<ll>` instead of `ll[]` for d: The code uses an array to store the distances. It is more readable to use a `vector<ll>` instead.

17. Use `emplace` instead of `push` for priority_queue: The code uses the `push` function to insert elements into a priority_queue. It is more efficient to use the `emplace` function, which constructs the elements in place without unnecessary copies.

18. Use `emplace` instead of `push` for gg: The code uses the `push` function to append elements to a vector. It is more efficient to use `emplace` instead, which constructs the elements in place without unnecessary copies.

19. Use `emplace` instead of `push` for gg in nested loop: The code uses the `push` function to append elements to a vector in a nested loop. It is more efficient to use `emplace` instead, which constructs the elements in place without unnecessary copies.

20. Use `emplace` instead of `push` for gg in final loop: The code uses the `push` function to append elements to a vector in a final loop. It is more efficient to use `emplace` instead, which constructs the elements in place without unnecessary copies.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
#include <set>
#include <climits>

using namespace std;

using ll = long long;
using pi = pair<int, int>;
using P = pair<ll, int>;

struct edge {
  int to;
  ll cost;
};

const ll INF = LLONG_MAX / 3;

int main() {
  int n, m;
  ll X;
  cin >> n >> m >> X;

  vector<int> H(n);
  for (int i = 0; i < n; ++i) {
    cin >> H[i];
  }

  vector<vector<pair<int, ll>>> G(n);
  for (int i = 0; i < m; ++i) {
    int a, b, t;
    cin >> a >> b >> t;
    --a;
    --b;
    G[a].emplace_back(b, t);
    G[b].emplace_back(a, t);
  }

  int ct = 1;
  priority_queue<pi> que;
  que.emplace(X, 0);
  
  unordered_map<pi, int> v2id;
  v2id.emplace(pi(0, X), 0);
  
  vector<int> max_h(n, 0);
  max_h[0] = X;

  vector<set<int>> height(n);
  height[0].insert(X);

  while (!que.empty()) {
    pi p = que.top();
    que.pop();
    int v = p.second, h = p.first;

    if (h < max_h[v])
      continue;

    for (const auto& e : G[v]) {
      int bh = h;
      int nh = h - e.cost;

      if (nh < 0)
        continue;

      if (nh > H[e.to]) {
        bh = H[e.to] + e.cost;
        nh = H[e.to];
      }

      if (nh > max_h[e.to]) {
        auto it1 = v2id.emplace(pi(v, bh), ct++);
        height[v].insert(bh);

        auto it2 = v2id.emplace(pi(e.to, nh), ct++);
        height[e.to].insert(nh);

        int uu = it1.first->second, vv = it2.first->second;
        G[uu].emplace_back(vv, e.cost);
        max_h[e.to] = nh;
        que.emplace(max_h[e.to], e.to);
      }
    }
  }

  for (int i = 0; i < n; ++i) {
    for (const auto& e : G[i]) {
      if (H[i] < e.cost)
        continue;

      auto it1 = v2id.emplace(pi(i, e.cost), ct++);
      height[i].insert(e.cost);

      auto it2 = v2id.emplace(pi(e.to, 0), ct++);
      height[e.to].insert(0);

      int uu = it1.first->second;
      int vv = it2.first->second;

      G[uu].emplace_back(vv, e.cost);
    }
  }

  if (!v2id.count(pi(n - 1, H[n - 1]))) {
    v2id.emplace(pi(n - 1, H[n - 1]), ct++);
    height[n - 1].insert(H[n - 1]);
  }

  for (int i = 0; i < n; ++i) {
    int S = height[i].size();
    auto itr = height[i].begin();

    for (int j = 0; j < S - 1; ++j) {
      auto nx = itr;
      ++nx;
      int uu = v2id[pi(i, *itr)];
      int vv = v2id[pi(i, *nx)];
      int dist = *nx - *itr;
      G[uu].emplace_back(vv, dist);
      G[vv].emplace_back(uu, dist);
      itr = nx;
    }
  }

  int start = v2id[pi(0, X)];
  int goal = v2id[pi(n - 1, H[n - 1])];

  int VV = ct;
  vector<ll> d(VV, INF);
  d[start] = 0;

  priority_queue<P, vector<P>, greater<P>> pq;
  pq.emplace(0, start);

  while (!pq.empty()) {
    P now = pq.top();
    pq.pop();

    int v = now.second;

    if (now.first > d[v])
      continue;

    for (const auto& e : G[v]) {
      if (d[e.to] > d[v] + e.cost) {
        d[e.to] = d[v] + e.cost;
        pq.emplace(d[e.to], e.to);
      }
    }
  }

  ll ans = d[goal];
  if (ans == INF)
    ans = -1;

  cout << ans << endl;

  return 0;
}
```