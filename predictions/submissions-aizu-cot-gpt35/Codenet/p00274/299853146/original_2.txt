Explanation of the optimization steps:

1. Remove the unused variable `h`.
2. Remove the unused variable `t`, as it is always set to 0 before the program ends.
3. Instead of subtracting 1 from `s` for each zero encountered, we can initialize `s` to `n` and decrement it only when a zero is encountered. This way, we don't need to perform the subtraction operation in each iteration of the loop.
4. Instead of using a flag variable `flg`, we can directly check the value of `k` inside the loop. If `k` is greater than or equal to 2, we can break out of the loop and print `s + 1`, otherwise, we can continue to the next iteration of the loop.
5. Move the declaration of the loop variable `i` inside the for loop initialization.

Optimized program:

```c
#include <stdio.h>

int main(void) {
    int s = 0, n, k;
    
    while (1) {
        scanf("%d", &n);
        if (n == 0)
            break;
            
        s = n;
        
        for (int i = 0; i < n; i++) {
            scanf("%d", &k);
            
            if (k == 0) {
                s--;
            } else if (k >= 2) {
                printf("%d\n", s + 1);
                goto next;
            }
        }
        
        printf("NA\n");
        next: continue;
    }
    
    return 0;
}
```