To optimize the given program, we can make the following modifications:

1. Replace the nested loop for initializing `dp` array with a single loop:
   - Instead of iterating over `i` and `j`, we can use `memset` to set all values of `dp` to 0.
   - Then, we can set `dp[j][1]` to 1 for `j` up to 1000.
   - This will reduce the time complexity of the initialization loop from O(4001*5) to O(4001).

2. Use a 2D array instead of a 1D array for `dp`:
   - Since the second dimension of `dp` is fixed at 5, we can use a 2D array with dimensions `[5][4001]`.
   - This will improve memory locality and cache efficiency.

3. Optimize the calculation loop:
   - Instead of iterating over `k` from 0 to `j`, we can iterate from 0 to `min(j, 1000)`.
   - This is because if `k` exceeds 1000, the value of `dp[j-k][i-1]` will always be 0.
   - This will reduce the number of unnecessary iterations in the calculation loop.

Here is the optimized C++ program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

int main() {
  unsigned long long dp[5][4001];
  
  memset(dp, 0, sizeof(dp));
  for (int j = 0; j <= 1000; j++)
    dp[1][j] = 1;

  for (int i = 2; i <= 4; i++) {
    for (int j = 0; j <= 4000; j++) {
      for (int k = 0; k <= min(j, 1000); k++) {
        dp[i][j] += dp[i - 1][j - k];
      }
    }
  }

  int n;
  while (cin >> n)
    cout << dp[4][n] << endl;
  
  return 0;
}
```

By making these optimizations, we have improved both the running time and memory usage of the program.