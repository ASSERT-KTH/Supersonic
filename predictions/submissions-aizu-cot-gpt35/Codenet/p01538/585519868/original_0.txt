The given program can be optimized in the following steps:

1. Remove unnecessary header files: The program includes several unnecessary header files (`<algorithm>`, `<cmath>`, `<queue>`, `<stack>`, `<stdio.h>`, `<vector>`) that are not being used. We can remove these to improve compilation time and reduce memory usage.

2. Remove unnecessary variable declarations: The variables `count` and `tmp` are not necessary and can be removed.

3. Optimize the loop condition: The loop condition `N / 10 == 0` can be replaced with `N < 10` for better readability and efficiency.

4. Optimize the loop initialization: The loop `for (int i = 0; i <= 1000000; i++)` can be optimized by removing unnecessary iterations. We only need to initialize `table` once outside the loop and reset its values to `false` using `memset` instead.

5. Use `std::fill_n` instead of a loop: Instead of using a loop to set all values of `table` to `false`, we can use `std::fill_n` to achieve the same result in a more efficient way.

6. Use `std::max` instead of ternary operator: Instead of using the ternary operator `max = (max >= tmp) ? max : tmp`, we can use `std::max` to simplify the code.

7. Use `delete[]` to free memory: The program allocates memory using `new`, but it doesn't free the memory using `delete[]`. We need to add `delete[] table` at the end of the program to avoid memory leaks.

Here is the optimized program:

```cpp
#include <stdio.h>

int main() {
  int Q, N, count, max, S;
  bool FLG;
  scanf("%d", &Q);
  bool *table = new bool[1000001];

  for (int loop = 0; loop < Q; loop++) {
    std::fill_n(table, 1000001, false);
    count = 0;
    scanf("%d", &N);
    table[N] = true;
    FLG = false;

    while (N >= 10) {
      max = 0;
      for (S = 10; N / S != 0; S *= 10) {
        int tmp = (N / S) * (N % S);
        max = std::max(max, tmp);
      }
      N = max;
      if (table[N]) {
        FLG = true;
        break;
      } else {
        table[N] = true;
        count++;
      }
    }

    if (FLG) {
      printf("-1\n");
    } else {
      printf("%d\n", count);
    }
  }

  delete[] table;
  return 0;
}
```