To optimize the given program, we can make the following changes:

1. Remove unnecessary headers: The program includes headers such as `<algorithm>`, `<cmath>`, `<queue>`, `<stack>`, and `<vector>`, which are not used in the code. We can safely remove these headers.

2. Optimize the memory allocation: The program dynamically allocates an array of type `bool` using the `new` keyword. Instead of using a dynamically allocated array, we can use a fixed-size array to save memory and improve performance.

3. Use a loop instead of recursion: The current implementation uses recursion to find the maximum number. We can replace the recursion with a loop to improve performance.

4. Remove unnecessary variables: The variables `FLG` and `count` can be removed as they are unnecessary. We can directly print the result instead.

5. Use prefix increment operator: Instead of using the postfix increment operator (`i++`), we can use the prefix increment operator (`++i`) to avoid unnecessary copy operations.

6. Use `memset` to initialize the array: Instead of using a loop to set all elements of the `table` array to false, we can use the `memset` function to initialize the array.

Here's the optimized code with the above changes:

```cpp
#include <stdio.h>

int main() {
  int Q, N, tmp, max, S;
  scanf("%d", &Q);
  bool table[1000001];
  for (int loop = 0; loop < Q; ++loop) {
    memset(table, false, sizeof(table));
    scanf("%d", &N);
    table[N] = true;
    while (N / 10 != 0) {
      max = 0;
      for (S = 10; N / S != 0; S *= 10) {
        tmp = (N / S) * (N % S);
        max = (max >= tmp) ? max : tmp;
      }
      N = max;
      if (table[N] == true) {
        printf("-1\n");
        break;
      } else {
        table[N] = true;
      }
    }
    if (N / 10 == 0) {
      printf("%d\n", table[N] ? -1 : 0);
    }
  }
  return 0;
}
```

By making these optimizations, we have reduced unnecessary memory allocation, improved the algorithm for finding maximum numbers, and removed unnecessary variables and headers. This should result in improved running time and memory usage.