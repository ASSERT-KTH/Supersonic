To optimize the given program, we can make the following modifications:

1. Remove unnecessary includes: The program includes several unnecessary headers such as `<algorithm>`, `<cmath>`, `<queue>`, `<stack>`, and `<vector>`. Since these headers are not used in the program, we can remove them.

2. Replace `bool` array with `vector<bool>`: The program uses a dynamically allocated `bool` array `table` to keep track of visited numbers. However, using a `vector<bool>` instead of a plain array can provide better memory usage and performance. We can replace the `bool *table` declaration with `vector<bool> table(1000001, false)`.

3. Simplify the loop condition: The loop condition `N / 10 == 0` can be simplified to `N < 10`, which is more intuitive and easier to understand.

4. Replace the ternary operator with `std::max`: The ternary operator `(max >= tmp) ? max : tmp` can be replaced with `std::max(max, tmp)` to improve readability.

Here is the optimized version of the program:

```cpp
#include <stdio.h>
#include <vector>

int main() {
  int Q, N, count, tmp, max, S;
  bool FLG;
  scanf("%d", &Q);
  std::vector<bool> table(1000001, false);
  for (int loop = 0; loop < Q; loop++) {
    table.assign(1000001, false);
    count = 0;
    scanf("%d", &N);
    table[N] = true;
    FLG = false;
    while (true) {
      if (N < 10)
        break;
      max = 0;
      for (S = 10; N / S != 0; S *= 10) {
        tmp = (N / S) * (N % S);
        max = std::max(max, tmp);
      }
      N = max;
      if (table[N]) {
        FLG = true;
        break;
      } else {
        table[N] = true;
        count++;
      }
    }
    if (FLG) {
      printf("-1\n");
    } else {
      printf("%d\n", count);
    }
  }
  return 0;
}
```