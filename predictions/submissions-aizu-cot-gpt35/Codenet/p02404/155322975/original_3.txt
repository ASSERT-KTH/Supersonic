The given program prints a rectangular grid of characters. The grid has a height H and width W. The characters on the border of the grid are '#', while the characters inside the border are '.'. The program reads the values of H and W from the user until H and W are both equal to 0.

To optimize this program, we can reduce the number of cout statements by storing the grid in a string and printing the string at once. This will reduce the number of system calls and improve the program's performance.

Here is the optimized program:

```cpp
#include <iostream>
#include <string>
using namespace std;

int main() {
  int H, W;
  while (1) {
    cin >> H >> W;
    if (H == 0 && W == 0)
      break;
      
    string grid = "";
    for (int i = 1; i <= H; i++) {
      for (int j = 1; j <= W; j++) {
        if (i == 1 || i == H || j == 1 || j == W) {
          grid += "#";
        } else {
          grid += ".";
        }
      }
      grid += "\n";
    }
    grid += "\n";
    
    cout << grid;
  }
}
```

In the optimized program, we replaced the multiple cout statements with string concatenation using the += operator. We construct the grid string by appending characters to it inside the loops. At the end of each row, we add a newline character ("\n") to ensure that each row is printed on a new line. Finally, we append an additional newline character after each grid to separate the grids. The complete grid is printed using a single cout statement.