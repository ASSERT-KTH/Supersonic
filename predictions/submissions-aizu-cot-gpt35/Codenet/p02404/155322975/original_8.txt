Explanation of Optimization Steps:

1. Remove unnecessary namespace usage: The line `using namespace std;` is not needed as we can explicitly use the `std` namespace where required.

2. Avoid unnecessary input/output operations: The program currently prints a new line after each test case, even when `H` and `W` are both zero. We can optimize this by checking if `H` and `W` are both zero before printing the new line.

3. Use prefix increment and decrement operators: The loop variables `i` and `j` are incremented and decremented using the postfix operators. By using the prefix operators, we can avoid the overhead of creating a temporary copy of the variable.

4. Optimize the innermost condition: The innermost condition checks if `j` is equal to 1 or `W`, and if so, it prints `#`. We can optimize this condition by combining it with the condition `i == 1 || i == H`. This way, we only need to check one condition instead of two.

Optimized Program:

```cpp
#include <iostream>

int main() {
  int H, W;
  while (true) {
    std::cin >> H >> W;
    if (H == 0 && W == 0)
      break;
    for (int i = 1; i <= H; ++i) {
      for (int j = 1; j <= W; ++j) {
        if (i == 1 || i == H || j == 1 || j == W) {
          std::cout << "#";
        } else {
          std::cout << ".";
        }
      }
      std::cout << '\n';
    }
    if (H != 0 && W != 0)
      std::cout << '\n';
  }
}
```