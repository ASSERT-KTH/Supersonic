To optimize the given program, we can make the following changes:

1. Remove unnecessary includes: The program includes the `<bits/stdc++.h>` header, which includes a large number of other headers. This can slow down compilation and increase memory usage. Since the program only uses `iostream`, `vector`, and `algorithm`, we can remove the `#include <bits/stdc++.h>` and add the specific headers we need.

2. Remove unnecessary typedef: The program typedefs `long long` as `ll`. This typedef is not used anywhere in the program, so we can remove it.

3. Pass vector argument by const reference: The `build` function takes a vector argument by value, which means a copy of the vector is made. This can be inefficient for large vectors. Instead, we can pass the vector by const reference to avoid the copy.

4. Use prefix increment instead of postfix increment: In the `build` function, the loop variable `i` is incremented using the postfix increment operator (`i++`). However, the prefix increment operator (`++i`) is more efficient in this case, as it does not involve creating a temporary copy of `i`.

With these optimizations, the optimized program is as follows:

```c++
#include <iostream>
#include <vector>
using namespace std;

template <typename Monoid>
struct LazySegmentTree {
private:
  int N;
  vector<Monoid> node, lazy;

public:
  LazySegmentTree(int sz = 0) { init(sz); }

  void init(int sz) {
    N = 1;
    while (N < sz)
      N <<= 1;
    node.resize(2 * N - 1, 0);
    lazy.resize(2 * N - 1, 0);
  }

  void build(const vector<Monoid> &v) {
    int sz = int(v.size());
    init(sz);
    for (int i = 0; i < sz; ++i) {
      node[i + N - 1] = v[i];
    }
    for (int i = N - 2; i >= 0; --i) {
      node[i] = node[i * 2 + 1] + node[i * 2 + 2];
    }
  }

  void eval(int k) {
    if (lazy[k] != 0) {
      node[k] += lazy[k];
      if (k < N - 1) {
        lazy[2 * k + 1] += lazy[k] / 2;
        lazy[2 * k + 2] += lazy[k] / 2;
      }
      lazy[k] = 0;
    }
  }

  void add(int a, int b, Monoid x) { add(a, b, x, 0, 0, N); }

  void add(int a, int b, Monoid x, int k, int l, int r) {
    eval(k);
    if (b <= l || r <= a)
      return;
    if (a <= l && r <= b) {
      lazy[k] += x * (r - l);
    } else {
      add(a, b, x, 2 * k + 1, l, (l + r) / 2);
      add(a, b, x, 2 * k + 2, (l + r) / 2, r);
      node[k] = node[2 * k + 1] + node[2 * k + 2];
    }
  }

  Monoid getSum(int a, int b) { return getSum(a, b, 0, 0, N); }

  Monoid getSum(int a, int b, int k, int l, int r) {
    if (b <= l || r <= a)
      return 0;
    eval(k);
    if (a <= l && r <= b)
      return node[k];
    Monoid vl, vr;
    vl = getSum(a, b, 2 * k + 1, l, (l + r) / 2);
    vr = getSum(a, b, 2 * k + 2, (l + r) / 2, r);
    return vl + vr;
  }
};

int main() {
  int n, q;
  cin >> n >> q;
  LazySegmentTree<ll> seg(n);
  for (int i = 0; i < q; ++i) {
    int c;
    cin >> c;
    if (c == 0) {
      ll s, t, x;
      cin >> s >> t >> x;
      seg.add(s - 1, t, x);
    } else {
      int s;
      cin >> s;
      cout << seg.getSum(s - 1, s) << endl;
    }
  }
  return 0;
}
```
