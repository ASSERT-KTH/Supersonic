Explanation of the optimization steps:

1. Remove unnecessary includes: The program includes the entire `bits/stdc++.h` header which is not necessary. We can remove it and include only the required headers.

2. Use `'\n'` instead of `std::endl`: The program uses `std::endl` to end lines, which flushes the output buffer each time. This can be inefficient. We can replace `std::endl` with `'\n'` to improve performance.

3. Use `std::ios_base::sync_with_stdio(false)`: The program can be further optimized by disabling the synchronization between C and C++ standard streams. We can add `std::ios_base::sync_with_stdio(false)` to improve input/output performance.

4. Use a more efficient input method: The program currently uses `std::cin` for input, which can be slower compared to other input methods. We can replace it with a more efficient input method like `std::scanf`.

5. Use a more efficient output method: The program currently uses `std::cout` for output, which can be slower compared to other output methods. We can replace it with a more efficient output method like `std::printf`.

6. Optimize the loops: The program uses nested loops to calculate the results. We can optimize these loops by using a technique called "Fenwick Tree" or "Binary Indexed Tree". This technique allows us to calculate the sum of elements in a range efficiently, reducing the time complexity from O(n) to O(log n).

Optimized code:

```cpp
#include <iostream>
#include <cstdio>
using namespace std;

typedef long long ll;

const int maxn = 100005;
ll S[maxn];

int n, q;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    scanf("%d %d", &n, &q);

    for (int i = 0; i < q; i++) {
        bool op;
        scanf("%d", &op);
        
        if (op) {
            int k;
            scanf("%d", &k);
            
            int ans = 0;
            for (int i = k; i > 0; i -= i & -i)
                ans += S[i];
            
            printf("%d\n", ans);
        } else {
            int s, t, x;
            scanf("%d %d %d", &s, &t, &x);
            
            for (int i = s; i <= n; i += i & -i)
                S[i] += x;
            
            for (int i = t + 1; i <= n; i += i & -i)
                S[i] -= x;
        }
    }

    return 0;
}
```