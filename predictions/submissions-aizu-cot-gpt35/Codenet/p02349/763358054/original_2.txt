Explanation of the optimization steps:

1. Remove unnecessary header files: The `#include <bits/stdc++.h>` is a non-standard header file that includes all the standard library headers. It is not necessary and can be replaced with specific header files that are actually needed.

2. Remove unused `typedef`: The `typedef long long ll` is not used anywhere in the code and can be removed.

3. Optimize loop variables: The loop variable `i` is used for both the outer and inner loops. By using the same variable, we are reusing the same memory location. This can cause unnecessary cache misses and impact performance. We can use different loop variables for the outer and inner loops.

4. Optimize array indices: The array `S` is used as a Fenwick tree, where the indices start from 1. However, the loops are iterating from `s` and `t` which can be 0. We can optimize the array indices to start from 1 to match the Fenwick tree implementation.

5. Optimize input/output: The `cin` and `cout` streams are slower compared to `scanf` and `printf`. We can use `scanf` and `printf` instead to improve the input/output performance.

Optimized program:

```cpp
#include <iostream>
using namespace std;

const int maxn = 100005;
int S[maxn];
int n, q;

int main() {
  scanf("%d %d", &n, &q);
  for (int i = 0; i < q; i++) {
    bool op;
    scanf("%d", &op);
    if (op) {
      int k;
      scanf("%d", &k);
      int ans = 0;
      for (int j = k; j > 0; j -= j & -j)
        ans += S[j];
      printf("%d\n", ans);
    } else {
      int s, t, x;
      scanf("%d %d %d", &s, &t, &x);
      for (int j = s; j <= n; j += j & -j)
        S[j] += x;
      for (int j = t + 1; j <= n; j += j & -j)
        S[j] += -x;
    }
  }
  return 0;
}
```