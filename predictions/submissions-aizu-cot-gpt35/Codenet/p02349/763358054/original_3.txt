The given program performs operations on an array `S` of size `maxn` based on the input queries. The program uses a Fenwick tree data structure to efficiently process range updates and point queries.

To optimize the program, we can make the following modifications:

1. Remove the unnecessary `#include <bits/stdc++.h>` since it includes all standard library headers and is not needed.

2. Replace the `typedef long long ll` with `using ll = long long` for better readability.

3. Use `std::vector<ll>` instead of a regular array `S[maxn]` to allocate memory dynamically based on the input size `n`. This will save memory when `n` is smaller than `maxn`.

4. Initialize the vector `S` with size `n + 1` and all elements set to 0.

5. Avoid using the name `i` for both the outer and inner loop variables. Instead, use `q` as the outer loop variable and `idx` as the inner loop variable.

6. Replace the `cin` and `cout` with `scanf` and `printf` for faster input/output operations.

Here's the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

using ll = long long;

int main() {
  int n, q;
  scanf("%d%d", &n, &q);

  vector<ll> S(n + 1, 0);

  for (int q = 0; q < q; ++q) {
    int op;
    scanf("%d", &op);

    if (op) {
      int k;
      scanf("%d", &k);

      ll ans = 0;
      for (int idx = k; idx > 0; idx -= idx & -idx)
        ans += S[idx];

      printf("%lld\n", ans);
    } else {
      int s, t, x;
      scanf("%d%d%d", &s, &t, &x);

      for (int idx = s; idx <= n; idx += idx & -idx)
        S[idx] += x;

      for (int idx = t + 1; idx <= n; idx += idx & -idx)
        S[idx] += -x;
    }
  }

  return 0;
}
```