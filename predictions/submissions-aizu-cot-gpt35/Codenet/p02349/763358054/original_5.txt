To optimize the given program, we can make the following modifications:

1. Remove the unnecessary `#include <bits/stdc++.h>` since it includes a large number of headers and can increase the compilation time.

2. Change the `typedef long long ll` to `typedef int ll` since the given program doesn't use any operations that require a `long long` type.

3. Instead of using an array for `S` of size `maxn`, we can use a `vector` of size `n+1` to dynamically allocate memory only when needed. This will save memory usage when `n` is smaller than `maxn`.

4. Replace the `for` loop that calculates the sum of `S` values with a single line using the `accumulate` function from the `<numeric>` header. This will optimize the calculation of the sum.

5. Replace the second `for` loop inside the `else` statement with a single line using the `transform` function from the `<algorithm>` header. This will optimize the addition and subtraction of `x` from `S` values.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <numeric>
#include <algorithm>
using namespace std;

typedef int ll;

int main() {
  int n, q;
  cin >> n >> q;

  vector<ll> S(n + 1);

  for (int i = 0; i < q; i++) {
    bool op;
    cin >> op;
    if (op) {
      int k;
      cin >> k;
      int ans = accumulate(S.begin() + k, S.end(), 0);
      cout << ans << '\n';
    } else {
      int s, t, x;
      cin >> s >> t >> x;
      transform(S.begin() + s, S.begin() + t + 1, S.begin() + s, [x](ll val) { return val + x; });
      if (t + 1 <= n)
        S[t + 1] -= x;
    }
  }
}
```

By making these optimizations, we have improved the running time and memory usage of the program.