To optimize the given program, we can make the following modifications:

1. Remove the unnecessary header file `#include <bits/stdc++.h>`. This header is not a standard C++ header and includes a large number of other headers, which can result in longer compile times and increased memory usage.

2. Replace the `typedef long long ll;` with `using ll = long long;`. This is a more modern and readable way to define type aliases in C++.

3. Change the array `S` to a vector to dynamically allocate memory based on the input size `n`. This will reduce memory usage, especially if `n` is large.

4. Initialize the vector `S` with size `n+1` and default values of 0. This will ensure that all elements in the vector are initialized before using them.

5. Use `scanf` instead of `cin` for faster input reading. This is because `cin` performs additional input validation and buffering, which can slow down the input process.

6. Avoid using `std::endl` to end a line in the output. Instead, use the newline character `'\n'`. This is because `std::endl` flushes the output buffer, which can be a performance bottleneck.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

using ll = long long;

int main() {
  int n, q;
  scanf("%d %d", &n, &q);

  vector<ll> S(n+1, 0);

  for (int i = 0; i < q; i++) {
    bool op;
    scanf("%d", &op);

    if (op) {
      int k;
      scanf("%d", &k);
      ll ans = 0;

      for (int i = k; i > 0; i -= i & -i)
        ans += S[i];

      printf("%lld\n", ans);
    } else {
      int s, t, x;
      scanf("%d %d %d", &s, &t, &x);

      for (int i = s; i <= n; i += i & -i)
        S[i] += x;

      for (int i = t + 1; i <= n; i += i & -i)
        S[i] += -x;
    }
  }

  return 0;
}
```

These modifications should improve the performance and memory usage of the program.