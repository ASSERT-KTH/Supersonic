The original program reads two integers and an operator from the user, and performs the corresponding arithmetic operation based on the operator. It continues to do this until the user enters '?' as the operator, at which point it exits.

To optimize the program, we can make the following modifications:

1. Instead of using `scanf` to read the input, we can use `std::cin` for input and `std::cout` for output. This will eliminate the need for including the `<cstdio>` header.

2. We can use a `switch` statement instead of multiple `if` statements to determine the operator and perform the corresponding arithmetic operation. This will make the code more readable and efficient.

3. We can also modify the loop condition to use `true` instead of `1`, and break out of the loop when the operator is '?'. This will make the code more concise.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int x, y;
  char z;
  
  while (true) {
    cin >> x >> z >> y;
    
    switch (z) {
      case '?':
        return 0;
      case '+':
        cout << x + y << endl;
        break;
      case '-':
        cout << x - y << endl;
        break;
      case '/':
        cout << x / y << endl;
        break;
      case '*':
        cout << x * y << endl;
        break;
    }
  }
  
  return 0;
}
```