Step 1: Remove unnecessary namespace declaration

The `using namespace std;` statement is not necessary in this program since it only uses `printf` and `scanf` functions from the standard library. We can remove this line to avoid potential naming conflicts.

Step 2: Optimize input and output

Using the `scanf` and `printf` functions for input and output can be slow. An alternative approach is to use the `fgets` function to read a line of input and then parse it using the `sscanf` function. Similarly, we can use the `sprintf` function to format the output into a string and then use the `puts` function to print it.

Step 3: Replace if-else chain with a switch statement

The original program uses an if-else chain to check the value of `z`. This can be replaced with a more efficient switch statement.

Step 4: Use division by multiplication

The original program uses the `/` operator to perform division. However, division can be slower than multiplication on some platforms. We can use multiplication instead by calculating the reciprocal of `y` and multiplying it with `x`.

Here's the optimized program:

```cpp
#include <cstdio>

int main() {
  int x, y;
  char z;
  while (1) {
    char line[100];
    fgets(line, sizeof(line), stdin);
    sscanf(line, "%d %c %d", &x, &z, &y);
    if (z == '?') {
      return 0;
    } else {
      int result;
      switch (z) {
        case '+':
          result = x + y;
          break;
        case '-':
          result = x - y;
          break;
        case '*':
          result = x * y;
          break;
        case '/':
          result = x * (1.0 / y);
          break;
      }
      char output[100];
      sprintf(output, "%d\n", result);
      puts(output);
    }
  }
  return 0;
}
```

This optimized program improves the efficiency of input/output operations and replaces the if-else chain with a switch statement. Additionally, it uses multiplication instead of division to improve performance.