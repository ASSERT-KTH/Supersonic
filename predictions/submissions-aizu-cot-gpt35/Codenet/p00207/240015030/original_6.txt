The given program can be optimized in several ways:

1. Remove unnecessary variable declarations and global variables: The variables `w`, `h`, `n`, `d`, `c`, `x`, and `y` are only used within the `main` function, so they can be declared within the respective scope instead of being global variables.

2. Use a more efficient data structure: Instead of using a 2D array of size 102x102 for the `Board`, we can use a dynamic 2D array of size `w`x`h` because the input limits are given as `w` and `h`. This will reduce the memory usage.

3. Use a more efficient algorithm for DFS: The current implementation of DFS visits each cell multiple times, leading to redundant computations. We can optimize this by keeping track of visited cells and avoiding revisiting them.

4. Avoid unnecessary computations: The calculation of `wb` and `hb` inside the nested loop can be moved outside to avoid redundant computations.

Here's the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

bool isOK;
vector<vector<int>> board;
int xs, ys, xg, yg;

void DFS(int c, int x, int y) {
  if (x < 0 || x >= board.size() || y < 0 || y >= board[0].size()) {
    return;
  }
  
  if (board[x][y] != c) {
    return;
  } else if (x == xg && y == yg) {
    isOK = true;
    return;
  }
  
  board[x][y] = 0;
  DFS(c, x + 1, y);
  DFS(c, x, y + 1);
  DFS(c, x - 1, y);
  DFS(c, x, y - 1);
}

int main() {
  int w, h;
  while (true) {
    cin >> w >> h;
    if (w == 0 && h == 0)
      break;
    isOK = false;
    
    board.resize(w, vector<int>(h, -1));
    
    cin >> xs >> ys >> xg >> yg;
    int n;
    cin >> n;
    for (int t = 0; t < n; t++) {
      int c, d, x, y;
      cin >> c >> d >> x >> y;
      int wb = 2 + (!d * 2);
      int hb = 2 + (d * 2);
      for (int i = 0; i < hb; i++) {
        for (int j = 0; j < wb; j++)
          board[x + j][y + i] = c;
      }
    }
    DFS(board[xs][ys], xs, ys);
    if (isOK)
      cout << "OK" << endl;
    else
      cout << "NG" << endl;
  }
  return 0;
}
```

Explanation of the optimizations:

1. We removed unnecessary global variables and moved the local variables inside the respective scopes where they are used.

2. We replaced the fixed-size 2D array `Board` with a dynamic vector `board` of size `w`x`h`, reducing the memory usage.

3. We added boundary checks in the DFS function to avoid accessing cells outside the board.

4. We moved the calculations of `wb` and `hb` outside the nested loop in the main function to avoid redundant computations.