Step 1: Remove unnecessary includes
The program includes the algorithm, iostream, and numeric headers. However, only the algorithm header is necessary for the program. We can remove the unnecessary includes to improve compilation time and reduce memory usage.

Step 2: Optimize input loop
The program reads an integer n and then reads n long long integers. Currently, the program uses a loop to read each integer and push it into the vector. However, this can be optimized by using the constructor of the vector that takes two iterators as arguments. We can read all the integers directly into the vector using the constructor, eliminating the need for the loop.

Step 3: Optimize output
The program prints the minimum element, maximum element, and the sum of all elements in the vector. Currently, it uses separate statements to print each value. We can optimize this by combining the output into a single statement using stream manipulators.

Here is the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>

int main() {
  int n;
  std::cin >> n;
  std::vector<long long> a(std::istream_iterator<long long>(std::cin), std::istream_iterator<long long>());

  auto min_max = std::minmax_element(a.begin(), a.end());
  long long sum = std::accumulate(a.begin(), a.end(), 0LL);

  std::cout << *min_max.first << " "
            << *min_max.second << " "
            << sum << std::endl;
}
```

Explanation:
- Step 1: Removed unnecessary includes. `numeric` and `iostream` headers are no longer needed.
- Step 2: Optimized input loop. Used the constructor of the `std::vector` class that takes two iterators as arguments to read all the integers directly into the vector.
- Step 3: Optimized output. Combined the output of minimum element, maximum element, and sum into a single statement using stream manipulators. Used `std::minmax_element` to find the minimum and maximum elements of the vector. Used `std::accumulate` to calculate the sum of all elements.