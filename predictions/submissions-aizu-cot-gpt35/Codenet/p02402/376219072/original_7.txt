Explanation of the optimization steps:

1. Remove unnecessary includes: The program includes `<algorithm>`, `<iostream>`, `<numeric>`, and `<vector>`. However, only `<iostream>` and `<vector>` are used in the program. Therefore, we can remove the `<algorithm>` and `<numeric>` includes.

2. Avoid unnecessary copying: The program currently reads each input number and pushes it into the vector `a`. However, we can avoid this extra step by directly computing the minimum, maximum, and sum while reading the input numbers. This will eliminate the need for storing all the numbers in the vector.

3. Optimize the use of `std::accumulate`: The program currently uses `std::accumulate` to compute the sum of the numbers in the vector. However, it can be optimized by using a simple for loop to calculate the sum. This avoids the overhead of calling a separate function and iterating over the vector.

4. Use `int` instead of `long long` for the vector elements: The program declares the vector `a` with elements of type `long long`. However, if the input numbers are guaranteed to fit in the range of `int`, we can use `int` instead. This can save memory and potentially improve performance.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

int main() {
  int n;
  std::cin >> n;

  int min_num = INT_MAX;
  int max_num = INT_MIN;
  long long sum = 0;

  for (int i = 0; i < n; i++) {
    int num;
    std::cin >> num;

    min_num = std::min(min_num, num);
    max_num = std::max(max_num, num);
    sum += num;
  }

  std::cout << min_num << " " << max_num << " " << sum << std::endl;
}
```