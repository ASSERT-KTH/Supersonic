The given program reads a list of integers, finds the minimum and maximum values in the list, and calculates the sum of all the integers. 

To optimize the program, we can eliminate the use of the `std::vector` and `std::accumulate` functions, as they are not necessary for finding the minimum, maximum, and sum.

We can modify the program to directly find the minimum, maximum, and sum while reading the input values. This way, we can avoid the need to store all the input values in a vector and iterate over them again.

Here's the optimized program:

```cpp
#include <iostream>
#include <limits>

int main() {
  int n;
  std::cin >> n;
  
  long long minVal = std::numeric_limits<long long>::max();
  long long maxVal = std::numeric_limits<long long>::min();
  long long sum = 0;

  for (int i = 0; i < n; i++) {
    long long ii;
    std::cin >> ii;
    minVal = std::min(minVal, ii);
    maxVal = std::max(maxVal, ii);
    sum += ii;
  }

  std::cout << minVal << " " << maxVal << " " << sum << std::endl;
}
```

In the optimized program, we use `std::numeric_limits<long long>::max()` and `std::numeric_limits<long long>::min()` to initialize `minVal` and `maxVal` with the maximum and minimum possible values for `long long`, respectively. This ensures that the initial values are updated correctly while reading the input.

Inside the loop, we update `minVal` and `maxVal` by comparing the current input value `ii` with the current minimum and maximum values. We update `sum` by adding the current input value `ii` to it.

Finally, we print the updated `minVal`, `maxVal`, and `sum` without the need for additional function calls.