Step 1: Remove unnecessary includes

The program includes the `<algorithm>` header, which is not necessary for the given code. We can remove it to improve compilation time and reduce memory usage.

Step 2: Optimize input reading

Instead of using a loop to read `n` integers and push them into the vector one by one, we can directly read the integers into the vector using `std::copy_n` function. This eliminates the need for the loop and reduces the number of function calls.

Step 3: Optimize output

Instead of using multiple `<<` operators to print the minimum, maximum, and sum, we can use a single `std::cout` statement to improve efficiency.

Here is the optimized program:

```cpp
#include <iostream>
#include <numeric>
#include <vector>

int main() {
  int n;
  std::cin >> n;

  std::vector<long long> a(n);
  std::copy_n(std::istream_iterator<long long>(std::cin), n, a.begin());

  long long minimum = *std::min_element(a.begin(), a.end());
  long long maximum = *std::max_element(a.begin(), a.end());
  long long sum = std::accumulate(a.begin(), a.end(), 0LL);

  std::cout << minimum << " " << maximum << " " << sum << std::endl;
}
```