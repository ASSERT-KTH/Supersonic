The given program reads an integer `n` from the user, followed by `n` long long integers. It then finds the minimum and maximum elements in the vector `a`, and calculates the sum of all elements in `a`. Finally, it prints the minimum, maximum, and sum.

To optimize the program, we can avoid using the `std::accumulate` function to calculate the sum of all elements in `a`. Instead, we can calculate the sum while reading the input and finding the minimum and maximum elements. This way, we can avoid iterating over the vector `a` three times.

Here's the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>

int main() {
  int n;
  std::cin >> n;

  std::vector<long long> a;
  long long sum = 0;

  for (int i = 0; i < n; i++) {
    long long ii;
    std::cin >> ii;
    a.push_back(ii);
    sum += ii;
  }

  auto minmax = std::minmax_element(a.begin(), a.end());

  std::cout << *minmax.first << " " << *minmax.second << " " << sum << std::endl;
}
```

In the optimized program, we declare a variable `sum` to store the sum of all elements in `a` and initialize it to 0. While reading each input element, we add it to the `sum` variable. After reading all elements, we use the `std::minmax_element` function to find the minimum and maximum elements in `a`. Finally, we print the minimum, maximum, and sum.