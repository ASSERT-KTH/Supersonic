The given program reads an integer `n` from the user and then reads `n` long long integers into a vector `a`. It then finds the minimum and maximum elements in `a` using `std::min_element` and `std::max_element` functions respectively. Finally, it calculates the sum of all elements in `a` using `std::accumulate` and prints the minimum, maximum, and sum.

To optimize this program, we can make the following modifications:

1. Instead of using `std::vector` to store the integers, we can use a dynamically allocated array, as it will have less memory overhead.

2. We can avoid using `std::accumulate` to calculate the sum of elements in the array and calculate it manually using a loop. This will reduce the function call overhead.

3. We can find both the minimum and maximum elements in a single loop instead of using separate functions.

Here is the optimized program:

```cpp
#include <algorithm>
#include <iostream>

int main() {
  int n;
  std::cin >> n;

  long long* a = new long long[n];

  for (int i = 0; i < n; i++) {
    std::cin >> a[i];
  }

  long long min = a[0];
  long long max = a[0];
  long long sum = 0;

  for (int i = 0; i < n; i++) {
    if (a[i] < min) {
      min = a[i];
    }
    if (a[i] > max) {
      max = a[i];
    }
    sum += a[i];
  }

  std::cout << min << " " << max << " " << sum << std::endl;

  delete[] a;

  return 0;
}
```

Explanation of the optimizations:

1. Instead of using `std::vector`, we use a dynamically allocated array `long long* a = new long long[n];`. This reduces the memory overhead as we don't need the extra features provided by `std::vector`, such as dynamic resizing.

2. We calculate the sum of elements manually using a loop instead of using `std::accumulate`. This avoids the function call overhead of `std::accumulate` and reduces the memory usage.

3. We find both the minimum and maximum elements in a single loop. This reduces the number of iterations over the array, improving the runtime of the program.