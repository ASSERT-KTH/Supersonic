To optimize the given program, we can make the following changes:

1. Remove unnecessary headers: The `algorithm` and `numeric` headers are not required for this program, so we can remove them to reduce unnecessary compilation time and memory usage.

2. Avoid using `std::accumulate` for sum calculation: Instead of using `std::accumulate` to calculate the sum of elements in the vector, we can calculate the sum using a simple loop. This will avoid the overhead of creating an iterator range and calling a function for each element.

3. Optimize min and max element search: Instead of using `std::min_element` and `std::max_element` separately, we can find both the minimum and maximum elements in a single loop. This will reduce the number of iterations over the vector.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

int main() {
  int n;
  std::vector<long long> a;

  std::cin >> n;
  a.reserve(n); // Reserve memory for n elements

  long long min_val = LLONG_MAX;
  long long max_val = LLONG_MIN;
  long long sum = 0;

  for (int i = 0; i < n; i++) {
    long long ii;
    std::cin >> ii;
    a.push_back(ii);

    // Update min and max values
    if (ii < min_val) {
      min_val = ii;
    }
    if (ii > max_val) {
      max_val = ii;
    }

    // Calculate sum
    sum += ii;
  }

  std::cout << min_val << " " << max_val << " " << sum << std::endl;
}
```

Explanation of optimizations:

1. By removing the unnecessary headers, we reduce the memory usage and compilation time of the program.

2. Instead of using `std::accumulate` to calculate the sum of elements, we use a simple loop to directly calculate the sum. This eliminates the overhead of creating an iterator range and calling a function for each element.

3. We optimize the search for minimum and maximum elements by finding both in a single loop. This reduces the number of iterations over the vector, improving the program's running time.