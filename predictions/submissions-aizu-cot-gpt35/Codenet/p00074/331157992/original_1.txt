Explanation of the optimization steps:

1. Avoid unnecessary calculations: The original program calculates the value of `t` twice in each iteration of the inner loop. We can eliminate this redundancy by calculating `t` only once and storing it in a variable.

2. Simplify the loop conditions: The loop condition of the outer loop can be simplified to `scanf("%d%d%d", &h, &m, &s)`. This will ensure that the loop continues as long as valid input is provided. The condition `* -~h` can be removed as it is not necessary.

3. Use efficient multiplication: In the original program, `t` is multiplied by 3 in each iteration of the inner loop. Instead of using the `*=` operator, we can use bit shifting to multiply `t` by 2, which is equivalent to multiplying by 3.

4. Avoid repeated calculations: The original program calculates the values of `t / 3600`, `t / 60 % 60`, and `t % 60` in each iteration of the inner loop. We can optimize this by calculating these values only once and storing them in separate variables.

Here is the optimized program:

```c
#include <stdio.h>

int main() {
  int h, m, s, t;
  
  while (scanf("%d%d%d", &h, &m, &s) == 3) {
    t = (120 - h * 60 - m) * 60 - s;
    
    int hours = t / 3600;
    int minutes = (t / 60) % 60;
    int seconds = t % 60;
    
    printf("%02d:%02d:%02d\n", hours, minutes, seconds);
    printf("%02d:%02d:%02d\n", hours*2, minutes*2, seconds*2);
  }
  
  return 0;
}
```