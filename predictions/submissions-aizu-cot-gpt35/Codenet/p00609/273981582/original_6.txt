Optimization Step 1: Avoid using unnecessary headers
The program includes several unnecessary headers that are not used in the code. These headers should be removed to improve compilation time and reduce memory usage.

The unnecessary headers are:
- <algorithm>
- <assert.h>
- <math.h>
- <set>

Optimization Step 2: Remove unnecessary typedefs and constants
The program defines typedef and constant variables that are not used in the code. These can be safely removed to improve code readability and reduce memory usage.

The unnecessary typedef and constants are:
- typedef long long ll
- static const double EPS = 1e-9
- static const double PI = acos(-1.0)

Optimization Step 3: Remove unnecessary macros
The program defines macros that are not used in the code. These macros should be removed to improve code readability and reduce memory usage.

The unnecessary macros are:
- REP
- FOR
- FOREQ
- FORIT
- MEMSET

Optimization Step 4: Remove unnecessary struct constructors
The Point and Event structs define constructors that are not used in the code. These constructors can be safely removed to improve code readability and reduce memory usage.

Optimization Step 5: Optimize the dist2 function
The dist2 function calculates the squared distance between two points. Instead of using the square function, we can directly calculate the squared distance without the need for a separate function call.

Optimization Step 6: Optimize the PlaneSweep function
The PlaneSweep function can be optimized by avoiding unnecessary set operations. We can use a vector instead of a set to store the points. Additionally, we can avoid iterating over the entire set to find points within a certain range. Instead, we can use the lower_bound and upper_bound functions to find the range of points within a certain y-coordinate range.

Here is the optimized program:

```cpp
#include <iostream>
#include <stdio.h>
#include <vector>
using namespace std;

struct Point {
  int x;
  int y;
  char type;
  bool operator<(const Point &rhs) const {
    if (y != rhs.y) {
      return y < rhs.y;
    }
    return x < rhs.x;
  }
};

struct Event {
  int x;
  Point p;
  char in;
  bool operator<(const Event &rhs) const {
    if (x != rhs.x) {
      return x < rhs.x;
    }
    return in > rhs.in;
  }
};

inline int dist2(const Point &a, const Point &b) {
  return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);
}

int an, bn, n;
int r;
Event event[500000];

int PlaneSweep() {
  int ans = 0;
  vector<Point> open[2];
  for (int iter = 0; iter < n; iter++) {
    Event &e = event[iter];
    Point &p = e.p;
    if (e.in) {
      auto lower = lower_bound(open[(int)p.type ^ 1].begin(), open[(int)p.type ^ 1].end(), Point(0, p.y - 4 * r - 1, 0));
      auto upper = upper_bound(open[(int)p.type ^ 1].begin(), open[(int)p.type ^ 1].end(), Point(0, p.y + 4 * r + 1, 0));
      for (auto it = lower; it != upper; it++) {
        if (dist2(*it, p) <= 16 * r * r) {
          ans++;
        }
      }
      open[(int)p.type].push_back(p);
    } else {
      for (auto it = open[(int)p.type].begin(); it != open[(int)p.type].end(); it++) {
        if (it->x == p.x && it->y == p.y) {
          open[(int)p.type].erase(it);
          break;
        }
      }
    }
  }
  return ans;
}

int main() {
  while (scanf("%d %d %d", &an, &bn, &r), an | bn) {
    n = (an + bn) * 2;
    for (int i = 0; i < an; i++) {
      int x, y;
      scanf("%d %d", &x, &y);
      event[2 * i + 0] = {x - 2 * r, {x, y, 0}, 1};
      event[2 * i + 1] = {x + 2 * r, {x, y, 0}, 0};
    }
    for (int i = 0; i < bn; i++) {
      int x, y;
      scanf("%d %d", &x, &y);
      event[2 * an + 2 * i + 0] = {x - 2 * r, {x, y, 1}, 1};
      event[2 * an + 2 * i + 1] = {x + 2 * r, {x, y, 1}, 0};
    }
    sort(event, event + n);
    int ans = PlaneSweep();
    printf("%d\n", ans);
  }
}
```