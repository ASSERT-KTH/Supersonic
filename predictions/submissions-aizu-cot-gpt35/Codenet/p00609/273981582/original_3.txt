Step 1: Avoid unnecessary includes
- The program includes several unnecessary headers such as `assert.h`, `math.h`, and `stdio.h`. These headers are not used in the program and can be removed.

Step 2: Avoid unnecessary namespaces
- The program is using the `using namespace std` directive, which brings all names from the `std` namespace into the global namespace. This can lead to naming conflicts and is generally considered bad practice. It is recommended to remove this directive and explicitly qualify names from the `std` namespace when needed.

Step 3: Avoid unnecessary typedefs
- The program defines a typedef `typedef long long ll`, but the `ll` type is not used anywhere in the program. This typedef can be removed.

Step 4: Avoid unnecessary inline functions
- The program defines an inline function `square` that calculates the square of an integer. However, this function is only used once in the `dist2` function. Inlining the `square` function does not provide any performance benefits and can be removed.

Step 5: Optimize the `dist2` function
- The `dist2` function calculates the squared Euclidean distance between two points. However, it uses the `square` function, which involves a function call overhead. We can optimize this function by directly calculating the squared distance without using the `square` function.

Step 6: Optimize the `PlaneSweep` function
- The `PlaneSweep` function uses a set to store open points. However, the `find` and `erase` operations on the set have a time complexity of O(log n), which can be expensive for large sets. We can optimize this function by using a `std::vector` instead of a set to store open points. This will allow us to perform constant time lookup and removal operations.

Step 7: Optimize the event handling loop
- In the event handling loop, the program uses `lower_bound` and `upper_bound` to find points within a range. However, these functions have a time complexity of O(log n), which can be expensive for large sets. We can optimize this loop by iterating over the open points vector and manually checking if each point is within the range.

Here is the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <set>
#include <vector>

struct Point {
  int x;
  int y;
  char type;
  Point() { ; }
  Point(int x, int y, int type) : x(x), y(y), type(type) { ; }
  bool operator<(const Point &rhs) const {
    if (y != rhs.y) {
      return y < rhs.y;
    }
    return x < rhs.x;
  }
};

struct Event {
  int x;
  Point p;
  char in;
  Event() { ; }
  Event(int x, Point p, int in) : x(x), p(p), in(in) { ; }
  bool operator<(const Event &rhs) const {
    if (x != rhs.x) {
      return x < rhs.x;
    }
    return in > rhs.in;
  }
};

int dist2(const Point &a, const Point &b) {
  int dx = a.x - b.x;
  int dy = a.y - b.y;
  return dx * dx + dy * dy;
}

int PlaneSweep() {
  int ans = 0;
  std::vector<Point> open[2];
  for (const Event& e : event) {
    Point &p = e.p;
    if (e.in) {
      for (const Point& other : open[(int)p.type ^ 1]) {
        if (dist2(other, p) <= 16 * r * r) {
          ans++;
        }
      }
      open[(int)p.type].push_back(p);
    } else {
      open[(int)p.type].erase(std::find(open[(int)p.type].begin(), open[(int)p.type].end(), p));
    }
  }
  return ans;
}

int main() {
  int an, bn, r;
  while (std::cin >> an >> bn >> r, an | bn) {
    int n = (an + bn) * 2;
    std::vector<Event> event(n);
    for (int i = 0; i < an; i++) {
      int x, y;
      std::cin >> x >> y;
      event[2 * i] = Event(x - 2 * r, Point(x, y, 0), 1);
      event[2 * i + 1] = Event(x + 2 * r, Point(x, y, 0), 0);
    }
    for (int i = 0; i < bn; i++) {
      int x, y;
      std::cin >> x >> y;
      event[2 * an + 2 * i] = Event(x - 2 * r, Point(x, y, 1), 1);
      event[2 * an + 2 * i + 1] = Event(x + 2 * r, Point(x, y, 1), 0);
    }
    std::sort(event.begin(), event.end());
    int ans = PlaneSweep();
    std::cout << ans << std::endl;
  }
}
```