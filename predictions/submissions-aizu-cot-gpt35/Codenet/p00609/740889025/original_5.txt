The given program can be optimized in the following steps:

1. Remove unnecessary header files: The program includes `<cmath>` and `<map>` header files, but they are not used. We can remove them to improve compilation speed.

2. Remove unnecessary typedef: The program defines `typedef pair<int, int> pii`, but `pii` is not used. We can remove this typedef.

3. Avoid clearing the vector at the beginning of each test case: The program clears all vectors in `v` at the beginning of each test case. Since the size of `v` is fixed, we can avoid this unnecessary operation.

4. Avoid sorting the vectors in `v` at the beginning of each test case: The program sorts all vectors in `v` at the beginning of each test case. However, the vectors are already sorted in ascending order because new elements are always inserted at the end. We can remove this unnecessary sorting operation.

5. Avoid using `scanf` and `printf` for input/output: The program uses `scanf` and `printf` for input/output operations, which can be slower than using `cin` and `cout` in C++. We can switch to `cin` and `cout` for better performance.

Based on these optimizations, here's the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

vector<int> v[10000];

int main() {
  int aN, bN, R;
  while (cin >> aN >> bN >> R, aN) {
    for (int i = 0; i < aN; i++) {
      int x, y;
      cin >> x >> y;
      v[y].push_back(x);
    }
    int D = 4 * R, ans = 0;
    for (int i = 0; i < bN; i++) {
      int x, y;
      cin >> x >> y;
      for (int p = -D; p <= D; p++) {
        if (y + p < 0 || y + p >= 10000)
          continue;
        int m = sqrt((D - p) * (D + p));
        ans += upper_bound(v[y + p].begin(), v[y + p].end(), x + m) -
               lower_bound(v[y + p].begin(), v[y + p].end(), x - m);
      }
    }
    cout << ans << endl;
  }
}
```