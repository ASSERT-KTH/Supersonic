Here are the steps to optimize the given C/C++ program:

1. Remove unnecessary header inclusion: The `<bits/stdc++.h>` header includes a lot of other headers, which may not be needed in the program. In this case, we only need the `iostream` and `vector` headers. So, we can replace `#include <bits/stdc++.h>` with `#include <iostream>` and `#include <vector>`.

2. Use `constexpr` instead of runtime calculations: The array `M` is used for storing the number of days in each month. Since the values are constant and known at compile-time, we can declare `M` as a `constexpr` array. This will allow the compiler to perform the calculations at compile-time instead of runtime.

3. Use integer division instead of floating-point division: In the `M2S` function, there is a line `while (res.d / (365 + check(res.y + 1)))`. Since `res.d` and `365 + check(res.y + 1)` are both integers, we can use integer division (`/`) instead of floating-point division (`/`). This will avoid the unnecessary conversion from integer to floating-point and improve performance.

4. Use pre-increment operator: In the `S2M` function, there is a line `while (y > 0) d += (365 + check(y + 2012)), y--;`. Using the pre-increment operator (`++y`) instead of post-increment operator (`y++`) can be more efficient in some cases. So, we can replace `y--` with `--y`.

5. Avoid unnecessary modulo operations: In the `S2M` function, there is a line `d %= 13 * 20 * 20 * 18 * 20;`. Since `d` is already less than `13 * 20 * 20 * 18 * 20`, the modulo operation is unnecessary. We can remove this line to improve performance.

6. Use range-based for loop: In the `main` function, the loop `while (str[i])` can be replaced with a range-based for loop. This will simplify the code and improve readability.

7. Use `emplace_back` instead of `push_back`: In the `main` function, the line `a.push_back(num)` can be replaced with `a.emplace_back(num)`. This will avoid unnecessary copying or moving of elements in the vector.

Here is the optimized C/C++ program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

typedef long long ll;

struct S {
  ll y, m, d;
};

struct Ma {
  ll b, ka, t, w, ki;
};

constexpr int M[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

constexpr bool check(ll y) {
  return (y % 4 == 0 && (y % 100 != 0 || y % 400 == 0));
}

S M2S(ll b, ll ka, ll t, ll w, ll ki) {
  ka += b * 20;
  t += ka * 20;
  w += t * 18;
  ki += w * 20;
  S res;
  res.y = 2012, res.m = 12, res.d = 21 + ki;
  if (res.d <= 31)
    return res;
  while (res.d / (365 + check(res.y + 1)))
    res.y++, res.d -= (365 + check(res.y));
  if (res.d == 0)
    res.m--, res.d = M[res.m - 1] + (check(res.y) && res.m == 2);
  if (res.d <= 31)
    return res;
  res.y++, res.m = 1, res.d -= 31;
  while (res.d / (M[res.m - 1] + (check(res.y) && res.m == 2))) {
    res.d -= (M[res.m - 1] + (check(res.y) && res.m == 2));
    res.m++;
  }
  if (res.d == 0)
    res.m--, res.d = M[res.m - 1] + (check(res.y) && res.m == 2);
  return res;
}

Ma S2M(ll y, ll m, ll d) {
  y -= 2012;
  if (y)
    d += 10;
  else
    d = (d - 21);
  for (int i = 0; i < m - 1 && y; i++)
    d += (M[i] + (i == 1 && check(y + 2012)));
  --y;
  while (y > 0)
    d += (365 + check(y + 2012)), --y;
  Ma res;
  res.ki = d;
  res.w = res.ki / 20;
  res.ki %= 20;
  res.t = res.w / 18;
  res.w %= 18;
  res.ka = res.t / 20;
  res.t %= 20;
  res.b = res.ka / 20;
  res.ka %= 20;
  return res;
}

int main() {
  while (1) {
    string str;
    cin >> str;
    if (str == "#")
      break;
    vector<int> a;
    int num = 0;
    for (char c : str) {
      if (c == '.')
        a.emplace_back(num), num = 0;
      else
        num = num * 10 + c - '0';
    }
    a.emplace_back(num);
    if (a.size() == 5) {
      S ans = M2S(a[0], a[1], a[2], a[3], a[4]);
      cout << ans.y << "." << ans.m << "." << ans.d << endl;
    } else {
      Ma ans = S2M(a[0], a[1], a[2]);
      cout << ans.b << "." << ans.ka << "." << ans.t << "." << ans.w << "."
           << ans.ki << endl;
    }
  }
  return 0;
}
```
