Step 1: Reduce the scope of variables

The variables `t1` and `t2` are only used inside the loop where they are assigned values. We can move their declaration inside the loop to reduce their scope.

Step 2: Optimize the initialization of the `way` array

The `way` array is initialized to 0 for every iteration of the outermost loop. However, this is unnecessary since we only need to initialize it once at the beginning of the program. We can move the initialization of the `way` array outside the loop.

Step 3: Optimize the loop conditions

In the second loop, we can optimize the loop condition by using a single condition `i <= b && way[i][1] != -1`. This way, the loop will break as soon as it encounters a cell with -1 value.

In the third loop, we can optimize the loop condition by using a single condition `i <= b && way[i][j] != -1`. This way, the loop will break as soon as it encounters a cell with -1 value.

Step 4: Optimize the calculation of `w` and `h`

In the third loop, we can optimize the calculation of `w` and `h` by initializing them to 0 outside the nested loop. This way, we don't need to reinitialize them for every iteration of the nested loop.

Here is the optimized program:

```c++
#include <cstdio>
int main() {
  int a, b, n, way[17][17];
  while (scanf("%d %d", &a, &b), a || b) {
    scanf("%d", &n);
    for (int i = 1; i <= b; i++) {
      for (int j = 1; j <= a; j++)
        way[i][j] = 0;
    }
    for (int i = 0; i < n; i++) {
      int t1, t2;
      scanf("%d %d", &t1, &t2);
      way[t2][t1] = -1;
    }
    for (int i = 1; i <= a; i++) {
      if (way[1][i] == -1)
        break;
      way[1][i] = 1;
    }
    for (int i = 1; i <= b && way[i][1] != -1; i++) {
      way[i][1] = 1;
    }
    for (int i = 2; i <= b && way[i][1] != -1; i++) {
      int w = 0, h = 0;
      for (int j = 2; j <= a && way[i][j] != -1; j++) {
        if (way[i][j] != -1) {
          if (way[i][j - 1] != -1)
            w = way[i][j - 1];
          if (way[i - 1][j] != -1)
            h = way[i - 1][j];
          way[i][j] = w + h;
        }
      }
    }
    printf("%d\n", way[b][a]);
  }
  return 0;
}
```