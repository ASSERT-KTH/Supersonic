The given program calculates the number of possible paths from the top-left corner to the bottom-right corner of a grid, with some obstacles specified by the user.

To optimize the program, we can make the following modifications:

1. Instead of using a 2D array `way` with dimensions `17x17`, we can use a 1D array `way` with a size of `a+1`. This is because we only need to store the current row and the previous row of the grid. This change reduces the memory usage.

2. Instead of initializing the entire `way` array to 0 for each test case, we can initialize only the first row and first column to 0, and the rest of the elements to `-1`. This is because we know that the top row and left column will always have a value of 0, and the obstacles will have a value of -1. This change reduces the time complexity of the initialization step.

3. Instead of checking for obstacles (`way[i][j] != -1`) inside the nested loop, we can move this check outside the loop and store the result in a boolean variable `obstacle`. This change reduces the number of comparisons inside the loop.

4. Instead of separately checking for obstacles in the first row and first column, we can combine the checks into a single loop. This change reduces the number of loops.

5. Instead of using two separate variables `w` and `h` to store the values of `way[i][j-1]` and `way[i-1][j]` respectively, we can use a single variable `prev` to store the value of `way[i-1][j]` and update it inside the loop. This change reduces the number of variables and memory accesses.

Here is the optimized program:

```cpp
#include <cstdio>

int main() {
  int a, b, n, t1, t2, way[17];
  while (scanf("%d %d", &a, &b), a || b) {
    scanf("%d", &n);
    
    // Initialize the first row and first column
    for (int i = 0; i <= a; i++) {
      way[i] = 0;
    }

    // Initialize the rest of the elements to -1
    for (int i = 1; i <= b; i++) {
      way[0] = -1; // First column
      for (int j = 1; j <= a; j++)
        way[j] = -1;
      
      // Set obstacles
      for (int j = 0; j < n; j++) {
        scanf("%d %d", &t1, &t2);
        if (t2 == i)
          way[t1] = 0;
      }

      // Calculate the number of paths
      for (int j = 1; j <= a; j++) {
        bool obstacle = (way[j] != -1);
        if (obstacle) {
          way[j] += way[j - 1];
        }
      }
    }
    printf("%d\n", way[a]);
  }
  return 0;
}
```

By making these optimizations, we have reduced the memory usage and improved the running time of the program.