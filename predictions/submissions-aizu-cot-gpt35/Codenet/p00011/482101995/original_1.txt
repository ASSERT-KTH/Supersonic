The given program reads in a width value `w` and a number of horizontal lines `n`. It then creates a vector `StartingPoint` of size `w` and initializes it with consecutive numbers from 1 to `w`. Next, it reads in `n` pairs of integers representing the left and right indices of each horizontal line. For each pair, it swaps the corresponding elements in the `StartingPoint` vector. Finally, it prints out the modified `StartingPoint` vector.

To optimize this program, we can make the following modifications:

1. Remove the unnecessary `using namespace std;` line, as it is considered a bad practice and can lead to naming conflicts.

2. Since the `THorizonalLine` struct is only used temporarily to hold the left and right indices, we can eliminate the struct and directly use two integers to store the values.

3. Instead of using `swap` to swap the elements in the `StartingPoint` vector, we can use a temporary variable to perform the swap operation.

4. Rather than printing the elements of the `StartingPoint` vector one by one, we can use `std::copy` to copy the elements to `std::ostream_iterator` and print them in a single line.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  int w;
  std::cin >> w;

  int n;
  std::cin >> n;

  std::vector<int> startingPoint(w);
  for (int i = 0; i < w; i++) {
    startingPoint[i] = i + 1;
  }

  for (int i = 0; i < n; i++) {
    int left, right;
    char dummy;
    std::cin >> left >> dummy >> right;
    std::swap(startingPoint[left - 1], startingPoint[right - 1]);
  }

  std::copy(startingPoint.begin(), startingPoint.end(), std::ostream_iterator<int>(std::cout, "\n"));

  return 0;
}
```