The given program reads an integer `w` which represents the number of starting points. It then reads an integer `n` which represents the number of horizontal lines. It initializes a vector `StartingPoint` with values from 1 to `w`. It then reads `n` pairs of integers representing the left and right indices of the horizontal lines and swaps the corresponding elements in the `StartingPoint` vector. Finally, it prints the contents of the `StartingPoint` vector.

To optimize this program, we can make the following modifications:

1. Remove the unnecessary `using namespace std;` line.

2. Use `reserve` function of the vector to reserve enough memory for the `StartingPoint` vector before initializing it.

3. Avoid using the `swap` function for each horizontal line. Instead, we can swap the elements directly using a temporary variable.

4. Use the `emplace_back` function to avoid unnecessary copy operations when appending elements to the `StartingPoint` vector.

5. Use the pre-increment operator `++i` instead of the post-increment operator `i++` in the for loops to avoid unnecessary temporary variables.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

struct THorizonalLine {
  int Left;
  int Right;
};

int main() {
  int w;
  std::cin >> w;

  int n;
  std::cin >> n;

  std::vector<int> StartingPoint;
  StartingPoint.reserve(w);
  for (int i = 0; i < w; ++i) {
    StartingPoint.emplace_back(i + 1);
  }

  for (int i = 0; i < n; ++i) {
    THorizonalLine HorizonalLine;
    char Dummy;
    std::cin >> HorizonalLine.Left >> Dummy >> HorizonalLine.Right;

    int temp = StartingPoint[HorizonalLine.Left - 1];
    StartingPoint[HorizonalLine.Left - 1] = StartingPoint[HorizonalLine.Right - 1];
    StartingPoint[HorizonalLine.Right - 1] = temp;
  }

  for (int i = 0; i < w; ++i) {
    std::cout << StartingPoint[i] << std::endl;
  }

  return 0;
}
```