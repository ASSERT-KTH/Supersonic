The given program reads an integer `w`, and a number of `n` horizontal lines. Each horizontal line consists of two integers representing the left and right positions. The program then swaps the values at the left and right positions in the `StartingPoint` vector, and finally prints the values in the `StartingPoint` vector.

To optimize the program for running time and memory usage, we can make the following modifications:

1. Instead of using a vector of integers (`StartingPoint`), we can use a dynamically allocated array of integers. This will reduce the memory overhead associated with the vector class.

2. Instead of using a struct (`THorizonalLine`) to store the left and right positions of the horizontal lines, we can directly use two variables (`left` and `right`) to store these positions. This will eliminate the need for creating and accessing a struct object for each horizontal line.

3. Instead of using the `swap` function to swap the values at the left and right positions, we can use a temporary variable to perform the swap. This will avoid the function call overhead and potentially improve the performance.

4. Instead of using the `endl` manipulator to insert a newline character and flush the output stream, we can use the newline character (`\n`) directly. This will improve the performance by avoiding unnecessary flushing of the output stream.

Here is the optimized program:

```cpp
#include <iostream>

int main() {
  int w;
  std::cin >> w;
  int n;
  std::cin >> n;
  
  int* startingPoint = new int[w];
  for (int i = 0; i < w; i++) {
    startingPoint[i] = i + 1;
  }
  
  for (int i = 0; i < n; i++) {
    int left, right;
    char dummy;
    std::cin >> left >> dummy >> right;
    
    int temp = startingPoint[left - 1];
    startingPoint[left - 1] = startingPoint[right - 1];
    startingPoint[right - 1] = temp;
  }
  
  for (int i = 0; i < w; i++) {
    std::cout << startingPoint[i] << '\n';
  }
  
  delete[] startingPoint;
  
  return 0;
}
```

By making these optimizations, we have reduced the memory usage by using a dynamically allocated array instead of a vector, eliminated the struct object creation and function call overhead, and improved the performance by avoiding unnecessary flushing of the output stream.