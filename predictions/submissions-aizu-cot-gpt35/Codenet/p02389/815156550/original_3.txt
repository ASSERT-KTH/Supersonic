Explanation of the optimization steps:

1. Remove unnecessary includes: The program only uses `iostream` for input and output operations, so we can remove any unnecessary includes.

2. Use `std::ios_base::sync_with_stdio(false)`: By default, the C++ standard streams (`std::cin`, `std::cout`, etc.) are synchronized with the C standard streams (`stdin`, `stdout`, etc.), which can cause a performance overhead. By disabling this synchronization, we can improve the performance of input and output operations.

3. Combine the output statements: Instead of making two separate output statements, we can combine them into a single output statement to reduce the number of function calls.

4. Add newline character to output statement: Currently, the program uses `std::endl` to insert a newline character at the end of the output. However, `std::endl` not only inserts a newline character but also flushes the output buffer, which can be unnecessary in this case. We can replace `std::endl` with a newline character `'\n'` to improve performance.

5. Use more descriptive variable names: The variable names `a` and `b` are not very descriptive. We can use more meaningful names to make the code easier to understand.

Here's the optimized program:

```cpp
#include <iostream>

int main() {
  int length;
  int width;
  std::ios_base::sync_with_stdio(false);
  std::cin >> length >> width;
  std::cout << length * width << ' ' << 2 * length + 2 * width << '\n';
}
```