Explanation of optimization steps:

1. Remove unnecessary includes: Since we only use `cin`, `cout`, and `endl`, we don't need to include the entire `<iostream>` library. We can include only the necessary headers, `<iostream>` for `cin` and `cout`, and `<ostream>` for `endl`.

2. Combine the two output statements into one: Instead of using separate output statements for the two calculations, we can combine them into a single output statement to reduce the number of function calls.

3. Use a single input statement for both variables: Instead of using separate input statements for `a` and `b`, we can use a single input statement to read both variables at once.

4. Optimize the calculations: Instead of calculating `a * 2` and `b * 2` separately, we can calculate them once and store the results in variables.

5. Use a more efficient output stream: Instead of using `std::endl`, which flushes the output stream, we can use `'\n'` to insert a newline character without flushing the stream.


Optimized code:

```cpp
#include <iostream>
#include <ostream>

int main() {
  int a, b;
  std::cin >> a >> b;
  
  int doubleA = a * 2;
  int doubleB = b * 2;
  
  std::cout << a * b << " " << doubleA + doubleB << '\n';
}
```