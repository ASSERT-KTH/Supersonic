Explanation of optimization steps:

1. Avoid using the `using namespace std;` statement to prevent namespace pollution and improve readability.

2. Replace the use of `scanf` with `cin` for input to avoid potential buffer overflow issues.

3. Use `cin` instead of `strlen` to determine the length of the input string, `num`, to reduce the number of function calls.

4. Remove the unnecessary check for `strlen(num) > i` in the for loop condition by storing the length of `num` in a variable before the loop.

5. Instead of repeatedly subtracting `'0'` from each character of `num` to convert it to an integer, use the ASCII value of `'0'` directly to convert the character to its integer value.

6. Use `cout` instead of `printf` for output to avoid the overhead of formatting.

Optimized code:

```cpp
#include <iostream>

int main() {
  char num[1001];
  while (true) {
    std::cin >> num;
    if (num[0] == '0')
      break;
    int sum = 0;
    int len = std::cin.gcount() - 1;
    for (int i = 0; i < len; i++) {
      sum += num[i] - '0';
    }
    std::cout << sum << std::endl;
  }
  return 0;
}
```