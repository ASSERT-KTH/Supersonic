Explanation of the optimization steps:

1. Avoid using the `using namespace std` directive as it can lead to namespace pollution. Instead, use the `std::` prefix when using standard library functions and types.

2. Replace the use of `scanf` and `printf` with `std::cin` and `std::cout` for input and output operations. This can improve performance and is more idiomatic in C++.

3. Instead of repeatedly calling `strlen(num)` in the loop condition, store the length of `num` in a separate variable before the loop to avoid the overhead of computing the length in each iteration.

4. Instead of subtracting `'0'` from each character in `num`, convert the character to an integer using `static_cast<int>(num[i] - '0')`. This can improve performance by avoiding unnecessary character-to-integer conversions.

5. Initialize the `sum` variable as `0` before the loop to avoid undefined behavior when calculating the sum.

Optimized code:

```cpp
#include <iostream>
#include <string>

int main() {
  std::string num;
  while (true) {
    std::cin >> num;
    if (num[0] == '0')
      break;
    int sum = 0;
    int length = num.length();
    for (int i = 0; i < length; i++) {
      sum += static_cast<int>(num[i] - '0');
    }
    std::cout << sum << std::endl;
  }
  return 0;
}
```