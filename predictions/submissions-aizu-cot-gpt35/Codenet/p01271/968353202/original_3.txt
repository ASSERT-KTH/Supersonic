The optimization steps for the given program are as follows:

1. Avoid unnecessary copying of the `po` struct by passing it by reference instead of by value in the `bfs` function.

2. Remove the unnecessary check for `cnt == 1` in the `bfs` function. Since `cnt` can only be 0 or 2 in this case, the check is redundant.

3. Initialize the `visited` array with `false` values only once, outside the `bfs` function, instead of every time `bfs` is called.

4. Use a `vector` instead of an array to store the `mp` string arrays. This allows for more efficient memory usage and avoids unnecessary copying.

5. Remove the `using namespace std` statement to avoid potential naming conflicts.

Here is the optimized code:

```cpp
#include <cstring>
#include <iostream>
#include <queue>
#include <vector>

struct po {
  int lx, ly, rx, ry;
};

int w, h;
std::vector<std::string> mp[2];
bool visited[51][51][51][51];
int dx[4] = {0, 0, 1, -1};
int dy[4] = {1, -1, 0, 0};

bool bfs(int& lx, int& ly, int& rx, int& ry) {
  std::queue<po> Q;
  Q.push({lx, ly, rx, ry});
  while (!Q.empty()) {
    po& t = Q.front();
    Q.pop();
    int cnt = (mp[0][t.ly][t.lx] == '%') + (mp[1][t.ry][t.rx] == '%');
    if (cnt == 2)
      return true;
    if (visited[t.lx][t.ly][t.rx][t.ry])
      continue;
    visited[t.lx][t.ly][t.rx][t.ry] = true;
    for (int i = 0; i < 4; i++) {
      int flg = 0;
      int nlx = t.lx + dx[i], nly = t.ly + dy[i];
      int nrx = t.rx - dx[i], nry = t.ry + dy[i];
      if (nlx < 0 || nly < 0 || nlx >= w || nly >= h || mp[0][nly][nlx] == '#')
        nlx = t.lx, nly = t.ly, flg++;
      if (nrx < 0 || nry < 0 || nrx >= w || nry >= h || mp[1][nry][nrx] == '#')
        nrx = t.rx, nry = t.ry, flg++;
      if (flg == 2)
        continue;
      Q.push({nlx, nly, nrx, nry});
    }
  }
  return false;
}

int main() {
  while (true) {
    std::cin >> w >> h;
    if (!w && !h)
      break;
    mp[0].resize(h);
    mp[1].resize(h);
    for (int i = 0; i < h; i++)
      std::cin >> mp[0][i] >> mp[1][i];
    int lx, ly, rx, ry;
    for (int i = 0; i < h; i++)
      for (int j = 0; j < w; j++) {
        if (mp[0][i][j] == 'L')
          lx = j, ly = i;
        if (mp[1][i][j] == 'R')
          rx = j, ry = i;
      }
    memset(visited, false, sizeof(visited));
    if (bfs(lx, ly, rx, ry))
      std::cout << "Yes" << std::endl;
    else
      std::cout << "No" << std::endl;
  }
  return 0;
}
```