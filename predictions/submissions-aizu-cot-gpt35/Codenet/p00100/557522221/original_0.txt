The given C++ program reads a series of inputs and calculates the sum of the products of two numbers for each unique input. It then checks if the sum for any input is greater than or equal to 1000000 and prints the corresponding input if found, otherwise it prints "NA".

To optimize this program, we can make the following modifications:

1. Instead of using a map to store the sums for each input, we can use an array. Since the inputs are integers, we can create an array of size 1000000 to store the sums for each input. This will reduce the overhead of using a map and improve memory usage.

2. Instead of iterating over the vector of unique inputs to find the sums greater than or equal to 1000000, we can directly access the corresponding element in the array. This will eliminate the need for the map iterator and improve the runtime of the program.

With these modifications, the optimized program will look like this:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  int n, i;
  while (cin >> n, n) {
    vector<long long> sums(1000000, 0);
    vector<int> vec;
    long long p, q, s = 0;
    while (n--) {
      cin >> i >> p >> q;
      if (sums[i] == 0)
        vec.push_back(i);
      sums[i] += p * q;
    }
    for (int i = 0; i < vec.size(); i++) {
      if (sums[vec[i]] >= 1000000) {
        s = 1;
        cout << vec[i] << endl;
      }
    }
    if (!s)
      cout << "NA" << endl;
  }
}
```

This optimized program replaces the map with a vector to store the sums of each input, and directly accesses the vector elements instead of using a map iterator. This reduces the memory usage and improves the runtime of the program.