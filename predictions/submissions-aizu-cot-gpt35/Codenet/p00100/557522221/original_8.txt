The given program reads a series of inputs and calculates the sum of products for each input. Then, it checks if any product has a sum greater than or equal to 1000000 and prints the corresponding input value.

Here are the steps to optimize the program:

1. Remove unnecessary includes: The program includes the `<vector>` library, but it is not used. We can remove this line.

2. Replace the `map<int, long long>` with `unordered_map<int, long long>`: The `unordered_map` provides constant-time average complexity for search, insertion, and deletion operations, which can be more efficient than the `map` for large datasets.

3. Use a single loop to calculate the sum of products and check for values greater than or equal to 1000000: Instead of using two separate loops (one for calculating the sum and another for checking the values), we can combine these operations into a single loop. This will reduce the number of iterations and improve the efficiency of the program.

4. Replace `map<int, long long>::iterator` with `auto`: Instead of explicitly declaring the iterator type, we can use the `auto` keyword to automatically deduce the iterator type. This simplifies the code and avoids any potential mistakes in declaring the iterator type.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;

int main() {
  int n, i;
  while (cin >> n, n) {
    unordered_map<int, long long> m;
    long long p, q, s = 0;

    while (n--) {
      cin >> i >> p >> q;
      m[i] += p * q;
      if (m[i] >= 1000000) {
        s = 1;
        cout << i << endl;
      }
    }

    if (!s)
      cout << "NA" << endl;
  }
}
```

By using an `unordered_map` and combining the loops, we have optimized the program for running time and memory usage.