The given program reads a series of inputs and calculates the sum of products for each input. It then checks if any of the sums is greater than or equal to 1000000 and prints the corresponding input value. If none of the sums meet the condition, it prints "NA".

To optimize this program, we can make the following changes:

1. Replace the `map` container with an `unordered_map` container. This change will improve the average case time complexity of accessing elements from O(log n) to O(1).

2. Instead of using a separate `vector` to keep track of unique input values, we can use the keys of the `unordered_map` itself. This will eliminate the need for an additional data structure.

3. We can remove the `s` variable and instead use a flag variable `flag`. This flag will be set to `true` if any sum is greater than or equal to 1000000.

4. We can use a range-based for loop to iterate over the `unordered_map` instead of using an iterator.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_map>

int main() {
  int n, i;
  while (std::cin >> n, n) {
    std::unordered_map<int, long long> m;
    bool flag = false;

    while (n--) {
      std::cin >> i;
      long long p, q;
      std::cin >> p >> q;

      m[i] += p * q;

      if (m[i] >= 1000000 && !flag) {
        flag = true;
        std::cout << i << std::endl;
      }
    }

    if (!flag)
      std::cout << "NA" << std::endl;
  }
}
```

These changes will optimize the program by reducing the time complexity of accessing elements and eliminating the need for an additional data structure, resulting in improved running time and memory usage.