The given program has a loop that reads integers `n` from the input until `n` is zero. Inside the loop, it reads three integers `i`, `p`, and `q`. It then updates a map `m` with the product of `p` and `q` for each value of `i`. If the value of `i` is not present in the map, it adds `i` to a vector `vec`. Finally, it iterates through `vec` and checks if the corresponding value in the map is greater than or equal to 1000000. If it is, it prints the value of `i`. If none of the values in `vec` satisfy the condition, it prints "NA".

To optimize this program, we can make the following modifications:

1. Remove the unnecessary `using namespace std` directive.
2. Initialize the map `m` and vector `vec` outside the while loop, before the loop starts.
3. Instead of using `m[i]` to check if the value of `i` is present in the map, use `m.count(i)`.
4. Instead of using `m[i]` to access the value of `i` in the map, use `m.at(i)`.
5. Instead of using `m.find(vec[i])` to find the iterator for the value of `i` in the map, use `m.at(vec[i])`.
6. Use a boolean variable `found` to check if any value in `vec` satisfies the condition, instead of using `s`.

Here is the optimized program:

```cpp
#include <iostream>
#include <map>
#include <vector>

int main() {
  int n, i;
  std::map<int, long long> m;
  std::vector<int> vec;
  while (std::cin >> n, n) {
    m.clear();
    vec.clear();
    long long p, q;
    bool found = false;
    while (n--) {
      std::cin >> i >> p >> q;
      if (m.count(i) == 0)
        vec.push_back(i);
      m[i] += p * q;
    }
    for (int i = 0; i < vec.size(); i++) {
      if (m.at(vec[i]) >= 1000000) {
        found = true;
        std::cout << vec[i] << std::endl;
      }
    }
    if (!found)
      std::cout << "NA" << std::endl;
  }
}
```

These modifications optimize the program by reducing unnecessary map lookups and avoiding unnecessary objects creation inside the loops.