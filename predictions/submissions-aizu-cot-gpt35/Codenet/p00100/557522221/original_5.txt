The given program reads a series of inputs and stores them in a map data structure. It then iterates over the map and checks if any value in the map is greater than or equal to 1000000. If there is such a value, it prints the corresponding key. If there is no such value, it prints "NA".

To optimize the program, we can make the following changes:

1. Remove unnecessary includes: The program includes the `<vector>` header, but it doesn't actually use any vector functionality. We can remove this unnecessary include.

2. Avoid using `using namespace std;`: This line brings all the names from the `std` namespace into the global namespace, which can lead to naming conflicts. Instead, we should use the `std::` prefix when necessary.

3. Replace the `map` with an unordered_map: The program currently uses a `map` to store the values, which is implemented as a balanced binary search tree. However, since the program only needs to check if a value is greater than or equal to 1000000, it doesn't require the ordering property of a `map`. We can use an `unordered_map` instead, which is implemented as a hash table and provides constant-time average complexity for lookup operations.

4. Avoid unnecessary map lookups: In the original program, for each key in the `vec` vector, it performs a map lookup to find the corresponding value. We can avoid this lookup by directly accessing the value using the subscript operator `[]`.

5. Use range-based for loop: Instead of using an index-based loop to iterate over the `vec` vector, we can use a range-based for loop, which simplifies the code and improves readability.

6. Use a flag variable instead of a counter: Instead of using a counter variable `s` to check if any value is greater than or equal to 1000000, we can use a flag variable `found` that is initially set to `false`. If we find a value that matches the condition, we can set `found` to `true` and break out of the loop. This avoids unnecessary iterations if a match is found early in the map.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_map>

int main() {
  int n, i;
  while (std::cin >> n, n) {
    std::unordered_map<int, long long> m;
    std::vector<int> vec;
    long long p, q;
    bool found = false;
    while (n--) {
      std::cin >> i >> p >> q;
      if (m.find(i) == m.end())
        vec.push_back(i);
      m[i] += p * q;
    }
    for (int i : vec) {
      if (m[i] >= 1000000) {
        found = true;
        std::cout << i << std::endl;
        break;
      }
    }
    if (!found)
      std::cout << "NA" << std::endl;
  }
}
```

These optimizations should improve the running time and memory usage of the program.