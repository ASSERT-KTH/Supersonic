The given program reads a series of inputs and calculates the sum of products for each input. It then checks if the sum is greater than or equal to 1000000 and prints the corresponding input number. If none of the sums are greater than or equal to 1000000, it prints "NA".

To optimize this program, we can eliminate the unnecessary use of the `map<int, long long>` and `vector<int>` data structures. Instead of inserting every input number into the vector and calculating the sum using the map, we can directly check if the sum exceeds 1000000 while reading the inputs.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int n, i;
  while (cin >> n, n) {
    long long p, q, sum = 0;
    bool found = false;
    while (n--) {
      cin >> i >> p >> q;
      sum += p * q;
      if (!found && sum >= 1000000) {
        found = true;
        cout << i << endl;
      }
    }
    if (!found)
      cout << "NA" << endl;
  }
}
```

Explanation of optimization steps:
1. Removed unnecessary `#include` directives for `map` and `vector` since they are not used in the optimized program.
2. Removed the declaration and initialization of `map<int, long long> m` and `vector<int> vec` since they are not needed in the optimized program.
3. Replaced the iteration over `vec` with a direct check for `sum >= 1000000` while reading the inputs, eliminating the need for `vec` and the lookup in the map.
4. Replaced the variable `s` with a boolean variable `found` to indicate if a sum greater than or equal to 1000000 has been found.
5. Simplified the `cout` statement to directly output `i` instead of `it->first` in the optimized program.