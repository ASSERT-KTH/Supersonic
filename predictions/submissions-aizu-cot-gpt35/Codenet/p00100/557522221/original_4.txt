Step 1: Avoid unnecessary memory allocations
- Currently, the program creates a new map and vector objects for each iteration of the while loop. This can be avoided by moving the declarations of `map<int, long long> m` and `vector<int> vec` outside the while loop. This way, we can reuse the same objects for each iteration, avoiding unnecessary memory allocations and deallocations.

Step 2: Use unordered_map instead of map
- The program uses a map to store key-value pairs. However, since the order of the elements is not important, we can use an unordered_map instead. This can provide better performance for lookups and insertions.

Step 3: Use unordered_map::emplace instead of operator[]
- In the current program, the line `m[i] += p * q` uses the `operator[]` to access and modify the value associated with key `i`. However, using `operator[]` can create an empty value if the key does not exist, which is not necessary in this case. Instead, we can use the `emplace` function of unordered_map to insert the key-value pair if it doesn't exist or update the existing value if it does.

Step 4: Use range-based for loop
- The program uses an index-based for loop `for (int i = 0; i < vec.size(); i++)` to iterate over the elements of the vec vector. However, a range-based for loop can provide a more concise and efficient way to iterate over the elements of a container.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

int main() {
  int n, i;
  unordered_map<int, long long> m;
  vector<int> vec;
  while (cin >> n, n) {
    vec.clear();
    m.clear();
    long long p, q, s = 0;
    while (n--) {
      cin >> i >> p >> q;
      auto it = m.emplace(i, p * q);
      if (!it.second)
        it.first->second += p * q;
      if (it.first->second >= 1000000) {
        s = 1;
        cout << it.first->first << endl;
      }
    }
    if (!s)
      cout << "NA" << endl;
  }
}
```