Explanation of optimization steps:

1. Remove unnecessary includes: The program includes `<cstdio>` and `<iostream>` but does not use any of their functions. Therefore, we can remove these includes.

2. Remove unused variable: The variable `x` is assigned a constant value but never used in the program. We can remove this variable.

3. Use `cout` instead of `printf`: The program uses `printf` to print the output. We can use `cout` instead, which is faster and more efficient in C++.

4. Use `constexpr` for the constant value: The constant value of `x` is known at compile-time and does not change during runtime. We can use `constexpr` to declare it as a compile-time constant.

5. Remove `using namespace std;`: It is generally considered a bad practice to use `using namespace std;` as it can lead to naming conflicts. We can fully qualify the `cin` and `cout` objects instead.

Optimized program:

```cpp
#include <iostream>

int main() {
  double r, s, l;
  std::cin >> r;
  constexpr double x = 3.141592653589;
  s = r * r * x;
  l = x * (r + r);
  std::cout.precision(8);
  std::cout << std::fixed << s << " " << l << std::endl;
}
```