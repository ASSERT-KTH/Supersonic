Explanation of the optimization steps:

1. Remove unnecessary include directives: The program includes the `<cstdio>` header, which is not used in the program. We can remove it to improve compile time.
2. Remove unnecessary `using` directive: The program includes the `using namespace std;` directive, which is not needed since we can use the `std::` prefix for the relevant functions and objects.
3. Use `const` for the constant value of PI: The program defines `PI` as a non-constant variable. Since the value of PI never changes, we can define it as a constant using the `const` keyword.
4. Use `iostream` instead of `cstdio` for input and output: The program uses `cin` and `printf` for input and output respectively. We can use `iostream` for both input and output to simplify the code.
5. Use `std::fixed` and `std::setprecision` for output formatting: The program uses the `%lf` format specifier in `printf` to print the double values. We can use `std::fixed` and `std::setprecision` from `iomanip` to achieve the same result with `cout`.

Optimized program:

```cpp
#include <iostream>
#include <iomanip>

int main() {
  const double PI = 3.141592653589;
  double r;
  std::cin >> r;
  std::cout << std::fixed << std::setprecision(6) << PI * r * r << " " << 2 * PI * r << std::endl;
  return 0;
}
```