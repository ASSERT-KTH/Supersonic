Explanation of optimization steps:

1. Remove unnecessary include statements: The program does not use any functions from the `<cstdio>` header, so we can remove the include statement for `<cstdio>`. Similarly, we can remove the include statement for `<iostream>` as well, since it is not used in the program.

2. Remove the "using namespace std;" statement: This statement imports the entire std namespace into the program, which can lead to naming conflicts and make the code less maintainable. Instead, we can use the std:: prefix to specify the std namespace where needed.

3. Use a more accurate value for PI: The original program uses an approximation of PI with limited precision. We can use a more accurate value by including the `<cmath>` header and using the constant `M_PI` defined in it.

4. Use std::cin and std::cout: The original program uses the `cin` and `printf` functions for input and output. We can use the std::cin and std::cout streams from the iostream library for a more idiomatic C++ approach.

5. Use std::fixed and std::setprecision for output formatting: The original program does not specify the precision of the output, which can result in a large number of decimal places. We can use the std::fixed and std::setprecision functions from the iomanip library to set a fixed precision for the output.

Here is the optimized program:

```cpp
#include <iostream>
#include <iomanip>
#include <cmath>

int main() {
  const double PI = M_PI;
  double r;
  std::cin >> r;
  std::cout << std::fixed << std::setprecision(6) << PI * r * r << " " << 2 * PI * r << "\n";
  return 0;
}
```