The current program has a time complexity of O(n*q) because it uses a nested loop to compare each element of the array S with each element of the array T. This can be optimized to reduce the time complexity.

To optimize the program, we can use a hash set to store the elements of array S. Then, we can iterate through each element of array T and check if it exists in the hash set. If it does, we increment the count.

This approach reduces the time complexity to O(n+q) as we are only iterating through each array once.

Below is the optimized program:

```c
#include <stdio.h>

#define MAX_SIZE 100

int main() {
  int i, n, q, t, C = 0, S[MAX_SIZE], T[MAX_SIZE];
  int hashSet[MAX_SIZE] = {0}; // Initialize hash set with 0

  scanf("%d", &n);
  for (i = 0; i < n; i++) {
    scanf("%d", &S[i]);
    hashSet[S[i]] = 1; // Set corresponding element in hash set to 1
  }
  scanf("%d", &q);
  for (i = 0; i < q; i++) {
    scanf("%d", &T[i]);
    if (hashSet[T[i]]) { // Check if element exists in hash set
      C++;
    }
  }
  printf("%d\n", C);
  return 0;
}
```

Explanation:

1. We define the maximum size of the arrays using a macro `MAX_SIZE`.
2. We declare an additional array `hashSet` of the same size as the arrays `S` and `T` to act as the hash set.
3. We initialize the `hashSet` array with all elements set to 0.
4. We iterate through the array `S` and set the corresponding element in the `hashSet` array to 1.
5. We iterate through the array `T` and check if each element exists in the `hashSet` array. If it does, we increment the count.
6. Finally, we print the count.