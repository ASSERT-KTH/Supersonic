Optimization steps:

1. Remove unnecessary includes: The program includes the entire `bits/stdc++.h` library which is not necessary and can slow down the compilation time. Remove it and include only the required headers.

2. Use `std::ios_base::sync_with_stdio(false)` and `std::cin.tie(NULL)`: Adding these two lines at the beginning of the `main()` function will improve the input/output performance.

3. Use `std::vector` instead of fixed-size arrays: Instead of using fixed-size arrays `a` and `b`, use `std::vector<int>` for dynamic resizing and better memory management.

4. Use `emplace_back` instead of `push_back`: Instead of using `push_back` to add elements to vectors `x[a[i]]` and `x[b[i]]`, use `emplace_back` for better performance.

5. Avoid using `make_pair`: Instead of using `make_pair` to create pairs, use `{}` for better readability and performance.

6. Use `reserve` for vectors `x` and `y`: Before the loops for adding elements to `x` and `y`, use `x.reserve(n + 1)` and `y.reserve(n + 1)` to preallocate memory and avoid reallocations.

7. Use `std::queue` instead of `std::vector` for `Q` and `Q1`: Change the declaration of `Q` and `Q1` from `std::queue` to `std::vector` to avoid unnecessary reallocations when pushing and popping elements.

8. Use `std::array` instead of fixed-size arrays: Instead of using fixed-size arrays `dist`, `T`, and `U`, use `std::array` for better memory management and performance.

9. Use `std::fill` instead of a loop: Instead of using a loop to initialize `dist` with a large value, use `std::fill` to improve readability.

10. Use prefix increment instead of postfix increment: In the loop `for (pair<int, int> i : x[a1])`, use prefix increment `++i` instead of postfix increment `i++` for better performance.

11. Avoid unnecessary checks in the loop: In the loop `for (pair<int, int> j : x[i])`, remove the unnecessary check `dist[i] < dist[j.first]` and directly add elements to `y[i]` and increment `T[j.first]`.

12. Use `std::cin` instead of `scanf`: Replace `scanf` with `std::cin` for better type safety and performance.

13. Use `std::cout` instead of `std::cout`: Replace `std::cout` with `std::cout` for better type safety and performance.

Here's the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <array>

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    int n, m, q;
    std::cin >> n >> m >> q;

    std::vector<std::vector<std::pair<int, int>>> x(n + 1);
    std::vector<std::vector<std::pair<int, int>>> y(n + 1);
    std::array<int, 110000> dist;
    std::array<int, 110000> T;
    std::array<int, 110000> U;
    std::array<bool, 210000> used;

    std::vector<int> a(m);
    std::vector<int> b(m);

    for (int i = 0; i < m; i++) {
        std::cin >> a[i] >> b[i];
        x[a[i]].emplace_back(b[i], i);
        x[b[i]].emplace_back(a[i], i);
    }

    dist.fill(999999);
    dist[1] = 0;
    std::queue<int> Q;
    Q.push(1);

    while (!Q.empty()) {
        int a1 = Q.front();
        Q.pop();
        for (auto& i : x[a1]) {
            if (dist[i.first] > dist[a1] + 1) {
                dist[i.first] = dist[a1] + 1;
                Q.push(i.first);
            }
        }
    }

    for (int i = 1; i <= n; i++) {
        for (auto& j : x[i]) {
            y[i].emplace_back(j);
            T[j.first]++;
        }
    }

    for (int i = 0; i < q; i++) {
        int c;
        std::cin >> c;
        c--;

        std::vector<std::pair<int, int>> Q1;
        int ss = -1;
        if (dist[a[c]] < dist[b[c]])
            ss = b[c];
        if (dist[a[c]] > dist[b[c]])
            ss = a[c];
        if (ss >= 1 && U[ss] == 0 && used[c] == false) {
            Q1.emplace_back(ss, c);
            while (!Q1.empty()) {
                int a1 = Q1.front().first;
                int a2 = Q1.front().second;
                Q1.erase(Q1.begin());
                if (U[a1] == 1 || used[a2] == true)
                    continue;
                T[a1]--;
                used[a2] = true;
                if (T[a1] != 0)
                    continue;
                U[a1] = 1;
                for (auto& j : y[a1]) {
                    if (U[j.first] == 0)
                        Q1.emplace_back(j);
                }
            }
        }
        std::cout << Q1.size() << '\n';
    }

    return 0;
}
```