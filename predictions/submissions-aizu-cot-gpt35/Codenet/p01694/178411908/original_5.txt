To optimize the given C/C++ program, we can make the following modifications:

1. Remove unnecessary header files: The program includes the `bits/stdc++.h` header file, which includes a large number of other header files. This can increase the compile time and memory usage. We can remove this line and include only the necessary header files.

2. Remove unnecessary macros: The program defines several macros (`rep`, `REP`, `rer`, `each`, `all`, `mset`) that are not used in the main program. We can remove these macros to simplify the code.

3. Use `std::ios_base::sync_with_stdio(false)` and `std::cin.tie(NULL)`: By default, C++ streams are synchronized with the C standard library streams, which can slow down input/output operations. We can disable this synchronization using `std::ios_base::sync_with_stdio(false)` and also untie `std::cin` from `std::cout` using `std::cin.tie(NULL)` to improve the input/output performance.

4. Use `std::string_view` instead of `std::string`: The program compares strings using the `==` operator, which involves creating temporary `std::string` objects. We can use `std::string_view` instead, which is a lightweight non-owning reference to a string, to avoid unnecessary string allocations and improve performance.

5. Use `std::unordered_map` for constant-time string comparisons: The program compares strings using multiple `if` statements, which can be slow when the number of comparisons is large. We can use an `std::unordered_map` to store the valid combinations of strings and their corresponding results. This allows us to perform constant-time string comparisons and eliminate the `if` statements.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <string>
#include <unordered_map>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  int n;
  while (std::cin >> n, n) {
    int ans = 0;
    std::string_view now = "", next;
    std::unordered_map<std::string_view, int> combinations {
      {"luru", 1},
      {"rulu", 1},
      {"ldrd", 1},
      {"rdld", 1}
    };

    for (int i = 0; i < n; ++i) {
      std::cin >> next;
      now = next;
      ans += combinations[now + next];
    }

    std::cout << ans << std::endl;
  }

  return 0;
}
```

Explanation:

1. We remove the unnecessary header files (`bits/stdc++.h` and `vector`) and include only the necessary header files (`iostream` and `unordered_map`).

2. We remove the unnecessary macros (`rep`, `REP`, `rer`, `each`, `all`, `mset`).

3. We add `std::ios_base::sync_with_stdio(false)` to disable the synchronization of C++ streams with C standard library streams, and `std::cin.tie(NULL)` to untie `std::cin` from `std::cout`.

4. We replace the `std::string` type with `std::string_view` to avoid unnecessary string allocations.

5. We use an `std::unordered_map` named `combinations` to store the valid combinations of strings and their corresponding results. This allows us to perform constant-time string comparisons and eliminate the `if` statements.

6. In the loop, we update the `now` string view with the `next` string view and add the corresponding result from the `combinations` map to the `ans` variable.

7. Finally, we output the `ans` variable.