Explanation for the optimization steps:
1. Remove unnecessary includes: The program includes the header file `bits/stdc++.h`, which includes all the standard library headers. This can increase the compilation time and memory usage. We can remove this header and include only the necessary headers.
2. Remove unnecessary macros: The program defines macros for looping using `rep`, `REP`, `rer`, and `each`. These macros are not used in the program and can be removed.
3. Remove unused typedefs: The program defines typedefs for `ll`, `ull`, `vi`, `vs`, `vvi`, `vpii`, `pii`, and `pll`. These typedefs are not used in the program and can be removed.
4. Use `const auto&` in range-based for loop: The program uses the `each` macro to iterate over a container. Instead, we can use a range-based for loop with `const auto&` to improve readability and avoid unnecessary copies.
5. Use `unordered_map` for string comparison: The program compares strings using the `==` operator, which can be slow for long strings. We can use an `unordered_map` to map the string values to integers and compare the integers instead. This can improve the performance of string comparison.
6. Use `cin.tie(nullptr)` to improve I/O performance: By default, `cin` and `cout` are tied, which can decrease I/O performance. We can use `cin.tie(nullptr)` to untie `cin` from `cout` and improve I/O performance.
7. Use `'\n'` instead of `endl`: The program uses `endl` to output a newline character and flush the output buffer. However, flushing the output buffer can be expensive. We can use `'\n'` instead of `endl` to output only a newline character and improve the performance.

Optimized code:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>
using namespace std;

int main() {
  cin.tie(nullptr);
  int n;
  while (cin >> n, n) {
    int ans = 0;
    string now = "", next;
    unordered_map<string, int> stringToInt = {{"lu", 1}, {"ru", 2}, {"ld", 3}, {"rd", 4}};
    for (int i = 0; i < n; ++i) {
      cin >> next;
      if (stringToInt[now] + stringToInt[next] == 3 || stringToInt[now] + stringToInt[next] == 7)
        ans++;
      now = next;
    }
    cout << ans << '\n';
  }
  return 0;
}
```