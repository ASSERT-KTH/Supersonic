Step 1: Remove unnecessary header files

The program includes several unnecessary header files. We can remove them to improve the compile time and reduce memory usage.

Step 2: Remove unnecessary typedef

The program includes a typedef for `long long int`. However, this type is not used anywhere in the program. We can remove the typedef to simplify the code.

Step 3: Use const instead of #define for constants

The program uses `#define` to define constants `BIG_NUM`, `MOD`, and `EPS`. It is better to use const variables instead of `#define` to improve code readability and type safety.

Step 4: Replace recursion with iteration in `get_boss` function

The `get_boss` function currently uses recursion to find the boss of a given element. This can lead to stack overflow for large input sizes. We can replace the recursion with an iterative approach using a loop.

Step 5: Use a vector instead of dynamically allocating arrays

The program currently uses dynamically allocated arrays for `boss` and `height`. We can use a vector instead of dynamically allocating memory to simplify the code and improve memory management.

Step 6: Use printf and scanf with format specifiers

The program uses `printf` and `scanf` for input/output. It is better to use format specifiers for better code readability and type safety.

Step 7: Optimize union-find algorithm

The current implementation of the union-find algorithm is not optimal. We can optimize it by using path compression and union by rank heuristics. Path compression reduces the height of the tree, while union by rank ensures that the smaller tree is always attached to the root of the larger tree.

Here is the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>

const int MOD = 1000000007;

int get_boss(std::vector<int>& boss, int id) {
  int root = id;
  while (root != boss[root]) {
    root = boss[root];
  }
  while (id != root) {
    int next = boss[id];
    boss[id] = root;
    id = next;
  }
  return root;
}

bool is_same(std::vector<int>& boss, int x, int y) {
  return get_boss(boss, x) == get_boss(boss, y);
}

void unite(std::vector<int>& boss, std::vector<int>& height, int x, int y) {
  int boss_x = get_boss(boss, x);
  int boss_y = get_boss(boss, y);
  if (boss_x == boss_y) {
    return;
  }
  if (height[boss_x] > height[boss_y]) {
    boss[boss_y] = boss_x;
  } else if (height[boss_x] < height[boss_y]) {
    boss[boss_x] = boss_y;
  } else {
    boss[boss_y] = boss_x;
    height[boss_x]++;
  }
}

int main() {
  int N, Q;
  std::cin >> N >> Q;
  
  std::vector<int> boss(N);
  std::vector<int> height(N, 1);
  for (int i = 0; i < N; i++) {
    boss[i] = i;
  }
  
  for (int i = 0; i < Q; i++) {
    int command, x, y;
    std::cin >> command >> x >> y;
    if (command == 0) {
      unite(boss, height, x, y);
    } else {
      std::cout << is_same(boss, x, y) << std::endl;
    }
  }
  
  return 0;
}
```
