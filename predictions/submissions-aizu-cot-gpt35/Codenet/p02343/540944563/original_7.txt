The given program can be optimized in the following steps:

1. Remove unnecessary header files: The program includes unnecessary header files like `<queue>`, `<stack>`, and `<vector>`. Since these header files are not used in the program, they can be removed.

2. Replace the `typedef long long int ll` statement: The program includes a typedef statement for `long long int` type, but this type is not used in the program. Therefore, the typedef statement can be removed.

3. Remove unused defines: The program includes defines for `BIG_NUM`, `MOD`, and `EPS` but these constants are not used in the program. They can be removed.

4. Replace `int` with `bool` for the `is_same` function: The `is_same` function returns a boolean value, so it can be declared as `bool` instead of `int`.

5. Use `int` arrays instead of `int*`: The program uses dynamically allocated arrays for `boss` and `height`. Instead of using pointers, we can use regular `int` arrays.

6. Use a vector instead of an array for `boss` and `height`: Instead of using regular `int` arrays, we can use `std::vector<int>` for `boss` and `height`. This eliminates the need for manual memory management.

7. Initialize `boss` and `height` with the appropriate size: Instead of initializing `boss` and `height` with a fixed size of `N`, we can initialize them with a size of `N+1`. This allows us to use 1-based indexing instead of 0-based indexing, which simplifies the code.

8. Use a loop to read inputs instead of individual `scanf` calls: Instead of using individual `scanf` calls for `N` and `Q`, we can use a single loop to read all the inputs at once. This reduces the number of function calls and improves performance.

9. Use `printf` instead of multiple `if` statements: Instead of using multiple `if` statements to print the result, we can use a single `printf` statement with a conditional operator (`?:`). This simplifies the code and improves readability.

10. Use `std::ios_base::sync_with_stdio(false)` to improve I/O performance: By default, C++ synchronizes the C++ and C I/O streams, which can cause a performance penalty. We can improve the I/O performance by disabling the synchronization using `std::ios_base::sync_with_stdio(false)`.

Here is the optimized program:

```cpp
#include <cstdio>
#include <vector>

int N, Q;
std::vector<int> boss, height;

int get_boss(int id) {
  if (boss[id] == id)
    return id;
  else
    return boss[id] = get_boss(boss[id]);
}

bool is_same(int x, int y) {
  return get_boss(x) == get_boss(y);
}

void unite(int x, int y) {
  int boss_x = get_boss(x);
  int boss_y = get_boss(y);
  if (boss_x == boss_y)
    return;
  if (height[x] > height[y]) {
    boss[boss_y] = boss_x;
  } else if (height[x] < height[y]) {
    boss[boss_x] = boss_y;
  } else {
    boss[boss_y] = boss_x;
    height[x]++;
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  scanf("%d %d", &N, &Q);

  boss.resize(N + 1);
  height.resize(N + 1);

  for (int i = 1; i <= N; i++) {
    boss[i] = i;
    height[i] = 1;
  }

  for (int i = 0; i < Q; i++) {
    int command, x, y;
    scanf("%d %d %d", &command, &x, &y);
    if (command == 0) {
      unite(x, y);
    } else {
      printf("%d\n", is_same(x, y) ? 1 : 0);
    }
  }

  return 0;
}
```