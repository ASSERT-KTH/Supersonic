To optimize the given C/C++ program, we can make the following modifications:

1. Use `bool` instead of `int` for the `is_same` function:

   The `is_same` function currently returns an `int`, but it can be modified to return a `bool` instead. Since the function is checking for equality, returning a `bool` makes more sense and can potentially save memory.

2. Use `vector` instead of dynamically allocated arrays:

   The `boss` and `height` arrays are currently dynamically allocated using `new`. We can replace them with `vector` to simplify memory management and improve performance.

3. Avoid recursion in the `get_boss` function:

   The `get_boss` function currently uses recursion to find the root boss. However, recursion can be slow and consume unnecessary stack space. We can modify the function to use iteration instead.

4. Use `printf` instead of `cout`:

   The program currently uses `cout` for output. However, `printf` is generally faster for formatted output, so we can use it instead.

Here is the optimized C++ program:

```cpp
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <vector>

typedef long long int ll;

#define BIG_NUM 2000000000
#define MOD 1000000007
#define EPS 0.000001

using namespace std;

int N;
vector<int> boss, height;

int get_boss(int id) {
  int root = id;
  while (boss[root] != root) {
    root = boss[root];
  }
  while (boss[id] != root) {
    int parent = boss[id];
    boss[id] = root;
    id = parent;
  }
  return root;
}

bool is_same(int x, int y) { return get_boss(x) == get_boss(y); }

void unite(int x, int y) {
  int boss_x = get_boss(x);
  int boss_y = get_boss(y);
  if (boss_x == boss_y) return;
  if (height[x] > height[y]) {
    boss[boss_y] = boss_x;
  } else if (height[x] < height[y]) {
    boss[boss_x] = boss_y;
  } else {
    boss[boss_y] = boss_x;
    height[x]++;
  }
}

int main() {
  int Q, command, x, y;
  scanf("%d %d", &N, &Q);

  boss.resize(N);
  height.resize(N, 1);

  for (int i = 0; i < N; i++) {
    boss[i] = i;
  }

  for (int i = 0; i < Q; i++) {
    scanf("%d %d %d", &command, &x, &y);
    if (command == 0) {
      unite(x, y);
    } else {
      if (is_same(x, y)) {
        printf("1\n");
      } else {
        printf("0\n");
      }
    }
  }

  return 0;
}
```

Explanation:
1. Replaced the dynamic arrays `boss` and `height` with `vector<int>`. This simplifies memory management and ensures proper deallocation.
2. Modified the `get_boss` function to use iteration instead of recursion. This helps in avoiding the overhead of recursive function calls.
3. Changed the return type of `is_same` function from `int` to `bool`. This improves code readability and reduces memory usage.
4. Replaced `cout` with `printf` for output. `printf` is generally faster for formatted output.