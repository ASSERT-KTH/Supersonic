The given program calculates the minimum cost of matrix multiplication using dynamic programming. However, it can be optimized in a few ways:

1. Remove the unused variable `x` in the main function.
2. Remove the unused variable `q` in the matrixChainOrder function.
3. Remove the unused variable `n` in the matrixChainOrder function.
4. Remove the unused variable `j` in the matrixChainOrder function.
5. Instead of using the constant `INF` for initializing `m[i][j]`, we can initialize it to `INT_MAX` by including the `<limits.h>` header file.
6. Instead of using `scanf` function to read input, we can use `std::cin` and `std::cout` from the `<iostream>` header file for input and output respectively.

Here is the optimized program:

```cpp
#include <iostream>
#include <limits.h>
#define MAX_SIZE 101

int m[MAX_SIZE][MAX_SIZE];
int p[MAX_SIZE];

int matrixChainOrder(int pl) {
  int n = pl - 1;
  
  for (int i = 1; i <= n; i++) {
    m[i][i] = 0;
  }
  
  for (int l = 2; l <= n; l++) {
    for (int i = 1; i <= n - l + 1; i++) {
      int j = i + l - 1;
      m[i][j] = INT_MAX;
      
      for (int k = i; k < j; k++) {
        int q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
        if (m[i][j] > q)
          m[i][j] = q;
      }
    }
  }
  
  return m[1][n];
}

int main() {
  int n, k;
  std::cin >> n;
  
  for (int i = 0; i < n; i++) {
    std::cin >> p[i];
    if (i < n - 1)
      std::cin >> k;
  }
  
  std::cin >> p[n];
  
  int result = matrixChainOrder(n + 1);
  std::cout << result << std::endl;
  
  return 0;
}
```

The optimized program removes unused variables and updates the input/output operations to use `std::cin` and `std::cout`. It also initializes `m[i][j]` to `INT_MAX` instead of `INF` for better portability.