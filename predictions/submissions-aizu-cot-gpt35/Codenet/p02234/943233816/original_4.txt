The given program calculates the minimum number of multiplications required to multiply a chain of matrices using the matrix chain multiplication algorithm. 

To optimize the program, we can make the following modifications:

1. Remove the unnecessary inclusion of `<stdio.h>`. Since we only need `scanf()` and `printf()` functions, we can include `<iostream>` instead, which provides a more optimized I/O mechanism.

2. Replace the macro `INF` with `INT_MAX` from the `<climits>` library. This will ensure that we use the maximum possible integer value for the initial value of `m[i][j]`, instead of an arbitrary large value.

3. Initialize the `m` matrix using `memset()` instead of a loop. This will ensure a faster initialization of the matrix.

4. Use a single variable `n` instead of `pl` in the `matrixChainOrder()` function. Since `pl` is always equal to `n+1` in the given program, we can directly use `n` instead.

5. Replace the inner loop condition `k < j` with `k <= j-1` to make it more readable. This loop is used to iterate from `i` to `j-1` instead of `i` to `j` for matrix multiplication.

6. Remove the unnecessary variable `x` in the `main()` function. We can directly print the result of `matrixChainOrder()`.

Here's the optimized program:

```cpp
#include <iostream>
#include <climits>
#include <cstring>
using namespace std;

#define MAX_SIZE 101

int m[MAX_SIZE][MAX_SIZE];
int p[MAX_SIZE];

int matrixChainOrder(int n) {
  memset(m, 0, sizeof(m));

  for (int l = 2; l <= n; l++) {
    for (int i = 1; i <= n - l + 1; i++) {
      int j = i + l - 1;
      m[i][j] = INT_MAX;
      for (int k = i; k <= j - 1; k++) {
        int q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
        if (m[i][j] > q)
          m[i][j] = q;
      }
    }
  }
  return m[1][n];
}

int main() {
  int n;
  cin >> n;

  for (int i = 0; i < n; i++) {
    cin >> p[i];
    if (i < n - 1)
      cin >> p[i+1];
  }

  int result = matrixChainOrder(n + 1);
  cout << result << endl;

  return 0;
}
```

These modifications will improve the running time and memory usage of the program.