To optimize the given program, we can make the following modifications:

1. Change the data type of `M` array from `long long` to `int`. Since `M` is used as a modulo value, we can use a smaller data type to save memory.

2. Change the data type of `d` and `k` arrays from `long long` to `int`. Since the values stored in `d` and `k` are calculated modulo `M`, we can use a smaller data type to save memory.

3. Change the data type of `R`, `C`, `H`, `N`, and `h` arrays from `long long` to `int`. These variables are used as indices and counts, so we can use a smaller data type to save memory.

4. Change the `hin()` function to take an `int` parameter instead of `long long`. Since the `hin()` function is used to insert values into the `H` array, we can use a smaller data type to save memory.

5. Change the `hout()` function to return an `int` value instead of `long long`. Since the `hout()` function returns a value from the `H` array, we can use a smaller data type to save memory.

6. Change the `getlr()` function to return an `int` value instead of `long long`. Since the `getlr()` function calculates modulo `M`, we can use a smaller data type to save memory.

7. Change the `gets()` function to take an `int` parameter instead of `long long`. Since the `gets()` function calculates modulo `M`, we can use a smaller data type to save memory.

8. Change the `match()` function to return an `int` value instead of `long long`. Since the `match()` function returns a boolean value, we can use an `int` data type to save memory.

9. Change the data type of `n` variable from `int` to `short`. Since `n` is used to count the number of matches, we can use a smaller data type to save memory.

10. Change the data type of `m` variable from `int` to `short`. Since `m` is the number of queries, we can use a smaller data type to save memory.

11. Change the data type of `l` and `r` variables from `int` to `short`. Since `l` and `r` are used as indices, we can use a smaller data type to save memory.

12. Change the data type of `q` array from `char` to `short`. Since `q` is used to store query types, we can use a smaller data type to save memory.

13. Change the data type of `s` array from `char` to `short`. Since `s` is used to store input strings, we can use a smaller data type to save memory.

14. Change the format specifier `%d` to `%hd` in the `scanf` function for reading `m` variable. This is to correctly read a `short` data type.

15. Change the format specifier `%s` to `%s` in the `scanf` function for reading `s` array. This is to correctly read a `short` array.

16. Change the format specifier `%d` to `%hd` in the `printf` function for printing `m - n` value. This is to correctly print a `short` data type.

Here is the optimized program:

```cpp
#include <stdio.h>

int a[2] = {101, 103};
int M[2] = {1e9 + 7, 1e9 + 9};
int d[2][300010], k[2][300010];
int R = 1, C = 1, H[2000010], N[2000010], h[300010];

int hyouka(int a, int b) {
  if (C < b)
    return 1;
  if (C < a || b == 0)
    return 0;
  return N[H[a]] < N[H[b]] || N[H[a]] == N[H[b]] && h[H[a]] < h[H[b]] ? 1 : 0;
}

void hin(int a) {
  int i = C++;
  for (N[H[0] = R] = a; hyouka(0, i / 2); i /= 2)
    H[i] = H[i / 2];
  H[i] = R++;
}

int hout() {
  int rt = H[1], i, j = 2, k = H[--C];
  for (i = 1; hyouka(i, C); i = j)
    H[i] = H[j = i * 2 + 1 - hyouka(i * 2, i * 2 + 1)];
  H[j / 2] = k;
  return rt;
}

void init(short *s) {
  int i, j;
  for (i = 0; i < 2; i++) {
    k[i][0] = 1;
    for (j = d[i][0] = 0; s[j]; j++) {
      d[i][j + 1] = (d[i][j] * a[i] + (s[j] - 'a' + 1)) % M[i];
      k[i][j + 1] = (k[i][j] * a[i]) % M[i];
    }
  }
}

int getlr(int l, int r, int i) {
  return (M[i] * M[i] + d[i][r] - d[i][l] * k[i][r - l]) % M[i];
}

void gets(short *s, int *h) {
  int i, j;
  for (i = 0; i < 2; i++) {
    for (j = h[i] = 0; s[j]; j++)
      h[i] += k[i][j] * (s[j] - '0');
  }
}

int match(int l, int r, int *h) {
  int i, j = 1;
  for (i = 0; i < 2; i++)
    j *= getlr(l, r, i) - h[i] ? 1 : 0;
  return j;
}

int main() {
  short n = 0, m;
  short a, b, i, j;
  short l = 0, r = 1;
  short s[300010], q[5];
  
  scanf("%*d %hd %s", &m, s);
  init(s);
  
  for (i = 0; i < m; i++) {
    scanf("%s", q);
    
    if (q[0] == 'L')
      l += q[1] - '-' ? 1 : -1;
    else
      r += q[1] - '-' ? 1 : -1;
      
    h[R] = getlr(l, r, 0);
    hin(getlr(l, r, 1));
  }
  
  a = hout();
  
  for (i = 1; i < m; i++) {
    b = hout();
    
    if (N[b] == N[a] && h[b] == h[a])
      n++;
      
    a = b;
  }
  
  printf("%hd\n", m - n);
  
  return 0;
}
```