Explanation of optimization steps:

1. Remove unnecessary header inclusion: The `iostream` header is not needed in this program as we are not using any input/output functions other than `cin` and `cout`. So, we can remove the `#include <iostream>` line.

2. Avoid using `using namespace std;`: It is generally considered a bad practice to use `using namespace std;` as it brings all the names from the `std` namespace into the global namespace. This can lead to naming conflicts. Instead, we can use the `std::` prefix for `cin`, `cout`, and `endl` to specify that they belong to the `std` namespace.

3. Optimize the calculation: Instead of calculating `n * n * n`, we can optimize it to `n * n * n` by using the built-in power function `std::pow(n, 3)` from the `<cmath>` header. This can be more efficient and accurate than performing the multiplication manually.

4. Optimize memory usage: As the program only needs to store the value of `n`, we can optimize memory usage by removing any unnecessary variables or data structures.

Optimized program:

```cpp
#include <iostream>
#include <cmath>

int main() {
  int n;
  std::cin >> n;
  std::cout << std::pow(n, 3) << std::endl;
  return 0;
}
```