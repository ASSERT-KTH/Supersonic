The given program takes an integer input from the user, calculates its cube, and then prints the result.

To optimize this program for running time and memory usage, we can make use of the mathematical property that the cube of a number can be calculated by multiplying the number by itself twice.

Here are the optimization steps:

1. Remove the unnecessary `using namespace std;` statement. It is considered a bad practice to include the entire `std` namespace.

2. Instead of calculating the cube using `n * n * n`, we can use the `pow` function from the `<cmath>` library. This function calculates the power of a number. However, the `pow` function works with floating-point numbers, so we need to cast the result back to an integer.

3. Remove the `endl` from the `cout` statement. The `endl` manipulator flushes the output stream, which can be an unnecessary overhead. Instead, we can use the newline character `'\n'` to print a new line.

Here is the optimized program:

```cpp
#include <iostream>
#include <cmath>

int main() {
  int n;
  std::cin >> n;
  int cube = std::pow(n, 3);
  std::cout << cube << '\n';
  return 0;
}
```