First, let's analyze the given program and identify areas for optimization:

1. The function `cubedNum` takes an input from the user and calculates the cube of the input number.
2. There is a validation check to ensure that the input number is in the range 0-100.
3. The cube is calculated using a loop that iterates three times and multiplies the input number with itself each time.
4. The result is then printed to the console.

Now, let's optimize the program step by step:

1. Remove the `using namespace std;` statement to avoid unnecessary namespace pollution.
2. Instead of using a `while (1)` loop to continuously read input until a valid number is entered, we can use a `do-while` loop which guarantees execution of the loop body at least once.
3. Rather than checking the range of the input number using `(0 <= inputNum) && (inputNum <= 100)` inside the loop, we can move this check outside the loop. This way, we only need to check the range once instead of repeatedly.
4. Instead of using a loop to calculate the cube of the input number, we can use the `std::pow` function from the `<cmath>` library. This function calculates the power of a number in a more efficient way.
5. Avoid using `endl` to end the line in the output statement. Using `'\n'` is more efficient as it avoids unnecessary flushing of the output stream.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <cmath>

void cubedNum() {
  int inputNum = -1;
  int result = 1;

  do {
    std::cin >> inputNum;
  } while (inputNum < 0 || inputNum > 100);

  result = std::pow(inputNum, 3);

  std::cout << result << '\n';
}

int main() {
  cubedNum();
  return 0;
}
```