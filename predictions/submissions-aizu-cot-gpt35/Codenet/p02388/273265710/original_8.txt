Step 1: Remove unnecessary variable initialization

In the original program, the variable `inputNum` is initialized with `-1`. This is not necessary because the value will be overwritten by user input. We can remove this initialization to optimize memory usage.

Step 2: Optimize the loop condition

In the `while` loop, the condition `(0 <= inputNum) && (inputNum <= 100)` is used to check if the input is within the desired range. However, this condition is checked repeatedly inside the loop. We can optimize this by checking the condition only once before entering the loop.

Step 3: Optimize the exponentiation operation

In the `for` loop, the variable `result` is multiplied by `inputNum` three times to calculate the cube of the number. This can be optimized by using the `pow` function from the `<cmath>` library, which performs exponentiation in a more efficient way.

Step 4: Remove unnecessary return statement

In the `cubedNum` function, there is a `return` statement at the end. Since the return type is `void` and there is no value being returned, this statement can be removed.

Here is the optimized program:

```cpp
#include <iostream>
#include <cmath>
using namespace std;

void cubedNum() {
  int inputNum;
  while (1) {
    cin >> inputNum;
    if (inputNum >= 0 && inputNum <= 100) {
      break;
    }
  }
  int result = pow(inputNum, 3);
  cout << result << endl;
}

int main() {
  cubedNum();
  return 0;
}
```