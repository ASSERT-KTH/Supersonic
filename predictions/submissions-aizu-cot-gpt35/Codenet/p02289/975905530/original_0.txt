Optimization:

1. Instead of including all the headers (`iostream`, `limits.h`, `queue`, `string`, `vector`) at the beginning, we can remove the unnecessary ones (`limits.h`, `vector`).

2. We can avoid using the `using namespace std` statement to avoid potential naming conflicts and improve code readability.

3. The function `pop_and_print` doesn't need to return any value, so we can change its return type to `void` instead of `int`.

4. Instead of using `while (1)` as an infinite loop condition, we can use `while (true)` which is more idiomatic.

5. Instead of comparing strings with `==`, we can use the more efficient `strcmp` function to compare the input string with "end" and "insert".

6. Instead of printing `endl` after each pop operation, we can use `'\n'` which is a more efficient way to represent a new line.

7. We can remove the unnecessary `return 0` statement at the end of the `main` function.

Optimized code:

```cpp
#include <iostream>
#include <queue>
#include <cstring>

void pop_and_print(std::priority_queue<int>& qu) {
  std::cout << qu.top() << '\n';
  qu.pop();
}

int main() {
  char s[10];
  int inp;
  std::priority_queue<int> qu;
  
  while (true) {
    std::cin >> s;
    if (std::strcmp(s, "end") == 0) {
      break;
    } else if (std::strcmp(s, "insert") == 0) {
      std::cin >> inp;
      qu.push(inp);
    } else {
      pop_and_print(qu);
    }
  }
}
```