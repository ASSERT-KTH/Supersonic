Optimization Steps:
1. Remove unnecessary includes: The program includes `<limits.h>`, `<queue>`, and `<vector>`, but they are not used in the code. Therefore, these includes can be removed.
2. Pass the priority queue by reference: The `pop_and_print` function takes the priority queue `qu` as a parameter, but it is not modified inside the function. Therefore, it can be passed by reference instead of by value to avoid unnecessary copying of the priority queue.
3. Replace `while (1)` with `while (true)`: Instead of using `while (1)` as an infinite loop condition, it is better to use `while (true)`. This is more readable and avoids potential issues with the value `1` being interpreted as `true` in some cases.

Optimized Program:

```cpp
#include <iostream>
#include <queue>
#include <string>
using namespace std;

int pop_and_print(priority_queue<int>& qu) {
  cout << qu.top() << endl;
  qu.pop();
  return 0;
}

int main() {
  string s;
  int inp;
  priority_queue<int> qu;
  
  while (true) {
    cin >> s;
    if (s == "end") {
      break;
    } else if (s == "insert") {
      cin >> inp;
      qu.push(inp);
    } else {
      pop_and_print(qu);
    }
  }
  
  return 0;
}
```