To optimize the given program, we can make the following modifications:

1. Remove unnecessary iostream header: The program does not use any input/output operations from iostream, so we can remove the unnecessary header.

2. Use putchar instead of printf: putchar is a faster alternative to printf for printing a single character. We can use putchar instead of printf for printing "-1" and newline character.

3. Remove unnecessary array initialization: The array p is initialized with zeros in each iteration of the while loop. However, this is not necessary since all elements of p will be assigned a value in the subsequent for loop.

4. Remove unnecessary modulo operation: The modulo operation `(p[j] + i) % n + 1` can be simplified by removing the modulo operation and directly incrementing the value of a. The same optimization can be applied to variable b.

5. Use endl instead of "\n": The endl manipulator in C++ performs a flush operation on the output stream, which can be slow. We can replace "\n" with endl only where it is necessary.

Here is the optimized code:

```cpp
#include <cstdio>

int main() {
  int n, k;
  while (scanf("%d %d", &n, &k) == 2) {
    if (n / 2 < k) {
      putchar('-');
      putchar('1');
      putchar('\n');
      continue;
    }
    int p[n + 2];
    for (int i = 1; i < n; i += 2) {
      p[i] = i / 2 + 1;
      p[i + 1] = n - p[i];
    }
    for (int i = 0; i < k; i++) {
      if (i != 0)
        putchar('\n');
      for (int j = 0; j < n - 1; j++) {
        int a = p[j] + i + 1;
        int b = p[j + 1] + i + 1;
        printf("%d %d\n", a, b);
      }
    }
  }
}
```