Explanation of the optimization steps:

1. Remove unnecessary includes: The program includes the `<cstdio>` header, which is not used in the code. This include can be removed.

2. Avoid using `using namespace std;`: The program uses the `using namespace std;` directive, which brings all the names in the `std` namespace into the global namespace. This can potentially cause naming conflicts and is considered bad practice. Instead, we can use the `std::` prefix to explicitly specify the namespace for the required names.

3. Move the calculation of `n / 2` outside the loop: In the `if` condition, the program calculates `n / 2` in every iteration of the loop. This calculation can be moved outside the loop to avoid unnecessary repeated calculations.

4. Use `std::cout` instead of `printf`: The program uses `printf` to print the output. However, `std::cout` is the preferred way of printing in C++. We can modify the code to use `std::cout` instead.

5. Use a more efficient array initialization: The program initializes the `p` array using a loop. However, we can use `std::fill` or `std::memset` to initialize the array with a specific value more efficiently.

6. Modify the loops to iterate from 0 to n - 2: The program uses a loop to iterate from 1 to n - 1, incrementing by 2. We can modify the loop to iterate from 0 to n - 2, incrementing by 2. This avoids unnecessary calculations and simplifies the logic.

7. Use `std::endl` instead of `"\n"`: The program uses `"\n"` to print a newline character. However, `std::endl` can be used instead, which also flushes the output stream.

8. Avoid unnecessary modulo operations: The program uses modulo operations within the nested loop to calculate the values of `a` and `b`. However, since `i` is incremented by 1 in each iteration of the outer loop, we can simplify the calculation by removing the modulo operation and adjusting the loop condition accordingly.

Optimized program:

```cpp
#include <iostream>
#include <algorithm>

int main() {
  int n, k;
  while (std::cin >> n >> k) {
    if (n / 2 < k) {
      std::cout << "-1" << std::endl;
      continue;
    }
    int p[n + 2];
    std::fill(p, p + n + 2, 0);
    for (int i = 0; i < n - 1; i += 2) {
      p[i] = i / 2 + 1;
      p[i + 1] = n - p[i];
    }
    for (int i = 0; i < k; i++) {
      if (i != 0)
        std::cout << std::endl;
      for (int j = 0; j < n - 1; j++) {
        int a = p[j] + i + 1;
        int b = p[j + 1] + i + 1;
        std::cout << a << " " << b << std::endl;
      }
    }
  }
}
```