The given program reads an integer `n` from the user and then reads `n` pairs of integers `game_a` and `game_b`. It then performs some calculations based on the values of `game_a` and `game_b` and stores the results in two vectors `veca` and `vecb`. Finally, it prints the contents of these two vectors.

To optimize the program, we can make the following changes:

1. Instead of using a `while (1)` loop, we can use a more readable `while (true)` loop.

2. We can avoid using the `std::vector` `veca` and `vecb` and instead directly print the results as we calculate them. This will save memory usage.

3. Instead of using a separate loop to print the results, we can print the results immediately after calculating them. This will save time as we won't need to iterate over the vectors again.

Here is the optimized program:

```cpp
#include <iostream>

int main() {
  int n;
  int a = 0;
  int b = 0;
  int game_a, game_b;
  
  while (true) {
    std::cin >> n;
    if (n == 0)
      break;
      
    for (int i = 0; i < n; ++i) {
      std::cin >> game_a >> game_b;
      if (game_a == game_b) {
        a += game_a;
        b += game_b;
      } else if (game_a > game_b) {
        a += game_a + game_b;
      } else {
        b += game_a + game_b;
      }
      std::cout << a << " " << b << std::endl;
    }
    
    a = 0;
    b = 0;
  }
  
  return 0;
}
```

By directly printing the results instead of storing them in vectors, we reduce the memory usage and also save the time needed for the second loop to print the results.