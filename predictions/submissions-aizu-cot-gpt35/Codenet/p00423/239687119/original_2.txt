The given program reads a series of game scores and calculates the total scores for two players. The scores are stored in two separate vectors and then printed.

To optimize this program, we can make the following modifications:

1. Instead of using separate variables `a` and `b` to store the scores for two players, we can use two variables `total_a` and `total_b` to keep track of the total scores. This will eliminate the need for resetting `a` and `b` to zero after each iteration.

2. We can avoid using vectors `veca` and `vecb` to store the scores for each game. Instead, we can print the scores immediately after calculating them. This will save memory usage by not storing unnecessary data.

3. We can replace the `while(1)` loop with a more readable `while(true)` loop.

4. We can use pre-increment (`++i`) instead of post-increment (`i++`) in the loop for better performance.

Here is the optimized version of the program:

```cpp
#include <iostream>

int main() {
  int n;
  int total_a = 0;
  int total_b = 0;
  int game_a, game_b;
  
  while (true) {
    std::cin >> n;
    if (n == 0)
      break;

    for (int i = 0; i < n; ++i) {
      std::cin >> game_a >> game_b;
      if (game_a == game_b) {
        total_a += game_a;
        total_b += game_b;
      } else if (game_a > game_b) {
        total_a += game_a + game_b;
      } else {
        total_b += game_a + game_b;
      }
      std::cout << total_a << " " << total_b << std::endl;
    }
    
    total_a = 0;
    total_b = 0;
  }
  
  return 0;
}
```

This optimized version reduces memory usage by not storing unnecessary data in vectors and improves the performance by eliminating the need for resetting variables in each iteration.