Step 1: Remove unnecessary variable 'vec'

The variable 'vec' is not used in the program. We can safely remove it.

Step 2: Optimize memory allocation

Currently, the program is using two separate vectors 'veca' and 'vecb' to store the cumulative scores for each game. Instead of using vectors, we can use two integer variables 'total_a' and 'total_b' to keep track of the cumulative scores. This will eliminate the need for dynamic memory allocation and improve memory usage.

Step 3: Optimize loop conditions

In the first loop, the condition 'while (1)' is used to continuously read input until 'n' becomes zero. We can change the condition to 'while (n != 0)' to make it more readable.

Step 4: Remove unnecessary else statement

The 'else' statement after the 'if (n == 0)' condition can be safely removed as there is no code inside it.

Step 5: Remove unnecessary reset of variables 'a' and 'b'

After each game, the variables 'a' and 'b' are reset to zero. However, since we are using 'total_a' and 'total_b' to keep track of the cumulative scores, we can remove the reset of 'a' and 'b' as they are not needed anymore.

Step 6: Optimize printing of cumulative scores

Currently, the program is using a loop to print the cumulative scores stored in 'veca' and 'vecb'. We can eliminate the need for the loop by printing the cumulative scores directly after each game.

Step 7: Optimize input reading

The program is currently using 'std::cin' to read input values. However, 'std::cin' can be slow for large inputs. We can optimize the input reading by using 'scanf' instead.

Step 8: Optimize output writing

The program is currently using 'std::cout' to write output values. However, 'std::cout' can be slow for large outputs. We can optimize the output writing by using 'printf' instead.

Here is the optimized C++ program:

```cpp
#include <iostream>

int main() {
  int n;
  int total_a = 0;
  int total_b = 0;
  
  while (std::cin >> n && n != 0) {
    for (int i = 0; i < n; ++i) {
      int game_a, game_b;
      scanf("%d %d", &game_a, &game_b);
      
      if (game_a == game_b) {
        total_a += game_a;
        total_b += game_b;
      } else if (game_a > game_b) {
        total_a += game_a + game_b;
      } else {
        total_b += game_a + game_b;
      }
      
      printf("%d %d\n", total_a, total_b);
    }
  }
  
  return 0;
}
```

By making these optimizations, we have improved the running time and memory usage of the program.