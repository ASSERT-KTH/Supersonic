Step 1: Avoid unnecessary vector resizing
- Currently, the program is using two vectors `veca` and `vecb` to store the cumulative scores for each player.
- The program is resizing these vectors multiple times within the loop, which can be inefficient.
- To optimize this, we can preallocate the vectors with a reasonable size to avoid frequent resizing.

Step 2: Avoid unnecessary addition operations
- Currently, the program is using multiple addition operations to update the scores for players `a` and `b`.
- We can optimize this by using a single addition operation to update the score for the respective player.

Step 3: Avoid unnecessary memory usage
- Currently, the program is using a variable `vec` to store an unused value.
- We can remove this variable to optimize memory usage.

Here is the optimized C++ program:

```cpp
#include <iostream>
#include <vector>

int main() {
  int n;
  int a = 0;
  int b = 0;
  int game_a, game_b;
  std::vector<int> veca, vecb;
  
  // Preallocate vectors with a reasonable size
  veca.reserve(100);
  vecb.reserve(100);
  
  while (1) {
    std::cin >> n;
    if (n == 0)
      break;
    else {
      for (int i = 0; i < n; ++i) {
        std::cin >> game_a >> game_b;
        if (game_a == game_b) {
          a += game_a;
          b += game_b;
        } else if (game_a > game_b) {
          a += game_a + game_b;
        } else {
          b += game_a + game_b;
        }
      }
      veca.push_back(a);
      vecb.push_back(b);
      a = 0;
      b = 0;
    }
  }
  
  for (int i = 0; i < veca.size(); ++i) {
    std::cout << veca[i] << " " << vecb[i] << std::endl;
  }
  
  return 0;
}
```