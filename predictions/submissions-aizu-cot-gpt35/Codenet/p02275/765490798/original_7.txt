Optimization Steps:
1. Remove unnecessary includes - The program includes the entire bits/stdc++.h header file, which is not necessary and can slow down compilation time. We can remove it and include only the necessary headers.
2. Remove unnecessary macros - The program defines rep, rrep, all, INF, MOD, chmax, and chmin macros, but they are not used in the program. We can remove them.
3. Avoid unnecessary copying - In the counting_sort function, the program creates a copy of the input vector 'v' and assigns it to the 'tmp' vector. This copying operation is unnecessary and can be avoided to save memory and improve runtime.
4. Avoid unnecessary iteration - In the counting_sort function, the program iterates over the 'cnt' vector from 0 to k-1 to calculate cumulative counts. However, the 'cnt' vector can be directly modified to store cumulative counts without the need for a separate iteration. This can save runtime.
5. Use reserve for vector - In the main function, the program creates a vector 'A' without specifying its size, and then uses the push_back method to add elements to it. This can lead to multiple reallocations of the vector's internal buffer, which can be expensive. We can use the reserve method to preallocate memory for the vector based on the input size, avoiding reallocations and improving runtime.

Optimized Program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

void counting_sort(vector<int> &v) {
  int n = v.size();
  int k = *max_element(v.begin(), v.end());
  vector<int> cnt(k + 1), tmp;
  cnt[0]--;
  for (int x : v)
    cnt[x]++;
  for (int i = 0; i < k; i++)
    cnt[i + 1] += cnt[i];
  for (int i = n - 1; i >= 0; i--) {
    v[cnt[v[i]]] = v[i];
    cnt[v[i]]--;
  }
}

int main() {
  int n;
  cin >> n;
  vector<int> A;
  A.reserve(n);
  for (int i = 0; i < n; i++) {
    int num;
    cin >> num;
    A.push_back(num);
  }
  counting_sort(A);
  cout << A[0];
  for (int i = 1; i < A.size(); i++) {
    cout << " " << A[i];
  }
  cout << endl;
  return 0;
}
```