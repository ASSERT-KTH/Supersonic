The program can be optimized by using a priority queue instead of a vector to store the nodes that have no incoming edges. This will allow us to always select the node with the smallest index as the next node to process.

Here is the optimized program:

```cpp
#include <algorithm>
#include <cstdio>
#include <iostream>
#include <queue>
#include <vector>
using namespace std;
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define REP(i, n) FOR(i, 0, n)
typedef pair<int, int> pii;
int n, m;
vector<int> edge[5000];
int cnt[5000];
int main() {
  cin >> n >> m;
  REP(i, m) {
    int a, b;
    scanf("%d %d", &a, &b);
    a--;
    b--;
    edge[a].push_back(b);
    cnt[b]++;
  }
  vector<int> ans;
  bool flag = false;
  priority_queue<int, vector<int>, greater<int>> next;
  REP(i, n) if (cnt[i] == 0) next.push(i);
  REP(i, n) {
    int tar = next.top();
    next.pop();
    ans.push_back(tar + 1);
    if (!next.empty())
      flag = true;
    REP(j, edge[tar].size()) {
      int to = edge[tar][j];
      if (--cnt[to] == 0)
        next.push(to);
    }
  }
  REP(i, ans.size()) printf("%d\n", ans[i]);
  if (flag)
    puts("1");
  else
    puts("0");
  return 0;
}
```

Explanation:

1. Instead of using a vector to store the nodes that have no incoming edges, we use a priority queue. This allows us to always select the node with the smallest index as the next node to process.
2. We change the declaration of the `next` variable to `priority_queue<int, vector<int>, greater<int>> next;`.
3. We replace the `push_back` and `erase` operations on the `next` vector with `push` and `pop` operations on the `next` priority queue.
4. We update the condition for checking if `next` is empty from `if (next.size() > 0)` to `if (!next.empty())`.
5. No other changes are made to the original program.