Step-by-step optimization:

1. Remove unnecessary headers: The program includes `<algorithm>` and `<cstdio>`, but they are not used in the code. Removing them will reduce the compilation time and memory usage.

2. Remove unnecessary namespace: The program uses the `using namespace std;` directive, which brings all the names from the `std` namespace into the global namespace. However, only `vector` and `pair` from the `std` namespace are used in the code. To reduce the chance of naming conflicts and improve readability, it is better to remove the `using namespace std;` directive and prefix the `vector` and `pair` with `std::` when used.

3. Replace macros with inline functions: The program uses macros like `FOR` and `REP` for iteration. Macros can be error-prone and they do not provide type safety. It is better to replace them with inline functions. For example, replace `#define FOR(i, a, b) for (int i = (a); i < (b); i++)` with `inline void FOR(int& i, int a, int b) { for (i = a; i < b; i++) }` and replace `#define REP(i, n) FOR(i, 0, n)` with `inline void REP(int& i, int n) { FOR(i, 0, n) }`.

4. Use `std::vector::reserve` to avoid frequent reallocation: The program uses `std::vector` to store the edges. It is better to use `std::vector::reserve` to preallocate memory for the vectors, as the number of edges is known in advance. This will avoid frequent reallocation and improve memory usage.

5. Use `std::vector::pop_back` instead of `std::vector::erase`: The program uses `std::vector::erase` to remove the last element from the `next` vector. However, this operation has a time complexity of O(n) as it involves shifting all the elements after the erased element. It is better to use `std::vector::pop_back` to remove the last element in O(1) time.

6. Use `std::vector::back` instead of `std::vector::operator[]`: The program uses `std::vector::operator[]` to access the last element of the `next` vector. However, this operation involves calculating the index and has a time complexity of O(1). It is better to use `std::vector::back` to access the last element in O(1) time.

7. Avoid unnecessary checks: The program checks if `next.size() > 0` before setting `flag` to true. Since `next` is a vector, `next.size()` will be equal to 0 if and only if `next.empty()` returns true. It is better to directly use `next.empty()` to improve readability.

8. Use `std::cout` instead of `printf`: The program uses `printf` to print the elements of the `ans` vector. It is better to use `std::cout` for consistent code style.

9. Use `std::cout` for boolean output: The program uses `puts("1")` and `puts("0")` to print a boolean result. It is better to use `std::cout` for consistent code style.

Optimized code:

```cpp
#include <iostream>
#include <vector>

typedef std::pair<int, int> pii;

void FOR(int& i, int a, int b) {
  for (i = a; i < b; i++);
}

void REP(int& i, int n) {
  FOR(i, 0, n);
}

int main() {
  int n, m;
  std::cin >> n >> m;

  std::vector<std::vector<int>> edge(n);
  std::vector<int> cnt(n);

  REP(i, m) {
    int a, b;
    std::cin >> a >> b;
    a--;
    b--;
    edge[a].push_back(b);
    cnt[b]++;
  }

  std::vector<int> ans;
  bool flag = false;
  std::vector<int> next;
  next.reserve(n);

  REP(i, n) {
    int tar = next.back();
    ans.push_back(tar + 1);
    next.pop_back();

    if (!next.empty())
      flag = true;

    REP(j, edge[tar].size()) {
      int to = edge[tar][j];
      if (--cnt[to] == 0)
        next.push_back(to);
    }
  }

  REP(i, ans.size()) {
    std::cout << ans[i] << "\n";
  }

  if (flag)
    std::cout << "1\n";
  else
    std::cout << "0\n";

  return 0;
}
```