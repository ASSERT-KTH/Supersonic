Step 1: Remove unnecessary includes
The program includes `<algorithm>` and `<cstdio>`, but they are not used. We can remove them to reduce unnecessary overhead.

Step 2: Remove unnecessary typedef
The typedef `typedef pair<int, int> pii;` is not used in the program. We can remove it to reduce unnecessary overhead.

Step 3: Use `std::array` instead of `std::vector` for `edge` and `cnt`
The program uses `std::vector` for `edge` and `cnt`, but the size of these vectors is fixed at 5000. We can use `std::array` instead to improve memory usage.

Step 4: Use `std::queue` instead of `std::vector` for `next`
The program uses `std::vector` for `next`, but it is used as a queue where elements are inserted at one end and removed from the other end. We can use `std::queue` instead to improve performance.

Step 5: Avoid unnecessary copying of `next`
In the original program, `next` is copied when it is passed to `next.erase(next.end() - 1)`. We can avoid this unnecessary copying by using `next.pop_back()` instead.

Step 6: Use `std::deque` instead of `std::vector` for `ans`
The program uses `std::vector` for `ans`, but elements are always added at the end and removed from the beginning. We can use `std::deque` instead to improve performance.

Step 7: Remove unnecessary check for `next.size() > 0`
In the original program, there is a check `if (next.size() > 0)` before setting `flag = true`. Since `next` is emptied before this check, `next.size()` will always be 0 at this point. We can remove this unnecessary check.

Step 8: Remove unnecessary `if` statement for printing flag
In the original program, there is an `if` statement `if (flag) ... else ...` to print the flag. However, `flag` is always false at this point. We can remove this unnecessary `if` statement and directly print 0.

Here is the optimized program:

```cpp
#include <iostream>
#include <array>
#include <queue>
#include <deque>

#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define REP(i, n) FOR(i, 0, n)

int n, m;
std::array<std::vector<int>, 5000> edge;
std::array<int, 5000> cnt;

int main() {
  std::cin >> n >> m;
  REP(i, m) {
    int a, b;
    std::scanf("%d %d", &a, &b);
    a--;
    b--;
    edge[a].push_back(b);
    cnt[b]++;
  }
  std::deque<int> ans;
  std::queue<int> next;
  REP(i, n) if (cnt[i] == 0) next.push(i);
  REP(i, n) {
    int tar = next.front();
    next.pop();
    ans.push_back(tar + 1);
    REP(j, edge[tar].size()) {
      int to = edge[tar][j];
      if (--cnt[to] == 0)
        next.push(to);
    }
  }
  REP(i, ans.size()) std::printf("%d\n", ans[i]);
  std::puts("0");
  return 0;
}
```