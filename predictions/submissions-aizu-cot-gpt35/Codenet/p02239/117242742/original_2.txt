To optimize the given program, we can make the following modifications:

1. Use a `vector<bool>` instead of an array `v` to store the visited status of each node. This will reduce memory usage as a `vector<bool>` uses a bitset internally and occupies less memory compared to an array of `int`.

2. Use a `vector<int>` instead of an array `d` to store the shortest distance from the starting node to each node. Similar to the previous modification, this will reduce memory usage.

3. Instead of using a 2D array `m` to represent the adjacency matrix, we can use a `vector<vector<int>>` to represent the adjacency list. This will reduce memory usage as we only store the connections rather than the entire matrix.

4. Use a `queue<int>` instead of a `queue<pair<int, int>>` to store the nodes to be visited. Since we only need to store the node index, using a `queue<int>` will reduce memory usage.

5. Initialize the `vector<int>` `d` with a default value of -1 using the `vector` constructor. This eliminates the need for a separate loop to initialize `d` with -1.

6. Remove the unnecessary `- 1` when reading input values for `u` and `v` in the nested loop.

Here's the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

void bfs(int s, vector<bool>& v, vector<int>& d, vector<vector<int>>& adj) {
  v[s] = true;
  d[s] = 0;
  queue<int> q;
  q.push(s);
  while (!q.empty()) {
    int u = q.front();
    q.pop();
    for (int i = 0; i < adj[u].size(); i++) {
      int next = adj[u][i];
      if (!v[next]) {
        d[next] = d[u] + 1;
        v[next] = true;
        q.push(next);
      }
    }
  }
}

int main() {
  int n;
  cin >> n;

  vector<bool> v(n, false);
  vector<int> d(n, -1);
  vector<vector<int>> adj(n);

  for (int i = 0; i < n; i++) {
    int u, k;
    cin >> u >> k;
    for (int j = 0; j < k; j++) {
      int next;
      cin >> next;
      adj[u - 1].push_back(next - 1);
    }
  }

  bfs(0, v, d, adj);

  for (int i = 0; i < n; i++) {
    cout << i + 1 << ' ' << d[i] << endl;
  }

  return 0;
}
```