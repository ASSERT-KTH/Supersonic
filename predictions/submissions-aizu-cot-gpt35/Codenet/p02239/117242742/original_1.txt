The given program is a breadth-first search (BFS) algorithm implemented using an adjacency matrix to represent a graph. It finds the shortest distance from a source vertex to all other vertices in the graph.

To optimize the program, we can make the following changes:

1. Remove the unnecessary `using namespace std;` directive. It is better to explicitly specify the namespace to avoid naming conflicts.

2. Use a constant instead of a magic number for the maximum size of the matrix. This makes the code more readable and maintainable.

3. Initialize the matrix `m` and the arrays `v` and `d` using `memset` instead of a loop. `memset` is a faster way to initialize memory blocks.

4. Use a `vector<bool>` instead of an array `v` to store the visited vertices. This saves memory by using a single bit for each element instead of a full byte.

5. Use a `vector<int>` instead of an array `d` to store the distances. This allows us to avoid initializing the array with a loop and simplifies the code.

6. Use `reserve` to allocate memory for the vectors `v` and `d` in advance, based on the input size. This avoids unnecessary reallocations and improves performance.

7. Avoid unnecessary checks in the BFS loop. Instead of checking if `m[u][i]` is non-zero, we can check if it is true directly. Similarly, instead of checking if `v[i]` is false, we can check if it is true directly.

8. Use a reference to the input variable `v` to avoid shadowing the variable name `v` in the BFS function.

Here's the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <queue>

const int MAX_SIZE = 105;

void bfs(int s, const std::vector<std::vector<bool>>& m, std::vector<bool>& v, std::vector<int>& d) {
    v[s] = true;
    d[s] = 0;
    std::queue<int> q;
    q.push(s);
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        for (int i = 0; i < m.size(); i++) {
            if (m[u][i] && !v[i]) {
                d[i] = d[u] + 1;
                v[i] = true;
                q.push(i);
            }
        }
    }
}

int main() {
    int n;
    std::cin >> n;

    std::vector<std::vector<bool>> m(n, std::vector<bool>(n, false));
    std::vector<bool> v(n, false);
    std::vector<int> d(n, -1);
    m.reserve(n);
    v.reserve(n);
    d.reserve(n);

    for (int i = 0; i < n; i++) {
        int u, k;
        std::cin >> u >> k;
        for (int j = 0; j < k; j++) {
            int v;
            std::cin >> v;
            m[u - 1][v - 1] = true;
        }
    }

    bfs(0, m, v, d);

    for (int i = 0; i < n; i++) {
        std::cout << i + 1 << ' ' << d[i] << std::endl;
    }

    return 0;
}
```

These optimizations should improve the performance and memory usage of the program.