The given program performs a breadth-first search (BFS) on a graph represented by an adjacency matrix. The goal is to optimize the program for running time and memory usage.

Here are the steps to optimize the program:

1. Remove unnecessary includes: The program includes `<iostream>` and `<queue>`, but only uses the `iostream` library for input/output. Therefore, the `<queue>` library is unnecessary and can be removed.

2. Optimize memory usage: The program declares a 2D matrix `m` of size 105x105 to represent the adjacency matrix. However, the actual size of the matrix depends on the input value of `n`. To optimize memory usage, we can dynamically allocate the matrix based on the input value of `n`.

3. Optimize the BFS algorithm: Currently, the BFS algorithm checks all vertices in the graph in each iteration of the outer loop. This can be optimized by modifying the outer loop condition to only iterate until all reachable vertices are visited. To achieve this, we need to keep track of the number of vertices visited during the BFS. We can do this by introducing a variable `visitedCount` and incrementing it whenever a vertex is visited.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int** m;
int n;
bool* v;
int* d;

void bfs(int s) {
  v[s] = true;
  d[s] = 0;
  int visitedCount = 1;
  int* queue = new int[n];
  int front = 0;
  int rear = 0;
  queue[rear++] = s;

  while (front != rear) {
    int u = queue[front++];
    for (int i = 0; i < n; i++) {
      if (m[u][i] && !v[i]) {
        d[i] = d[u] + 1;
        v[i] = true;
        queue[rear++] = i;
        visitedCount++;
      }
    }
    if (visitedCount == n) {
      break;
    }
  }

  delete[] queue;
}

int main() {
  cin >> n;
  m = new int*[n];
  v = new bool[n];
  d = new int[n];

  for (int i = 0; i < n; i++) {
    m[i] = new int[n];
    v[i] = false;
    d[i] = -1;
    for (int j = 0; j < n; j++) {
      m[i][j] = 0;
    }
  }

  for (int i = 0; i < n; i++) {
    int u, k;
    cin >> u >> k;
    while (k--) {
      int v;
      cin >> v;
      m[u - 1][v - 1] = 1;
    }
  }

  bfs(0);

  for (int i = 0; i < n; i++) {
    cout << i + 1 << ' ' << d[i] << endl;
  }

  for (int i = 0; i < n; i++) {
    delete[] m[i];
  }
  delete[] m;
  delete[] v;
  delete[] d;

  return 0;
}
```

This optimized program dynamically allocates memory for the adjacency matrix `m` based on the input value of `n`. It also introduces a `visitedCount` variable to optimize the BFS algorithm by breaking the loop when all reachable vertices have been visited. Additionally, the program deallocates the dynamically allocated memory before exiting.