The given program is a C++ program that calculates the optimal cost for a given set of parameters. The program uses a ternary search algorithm to find the minimum cost within a given range.

To optimize the program, we can make the following modifications:

1. Remove unnecessary header includes: The program includes `<bits/stdc++.h>`, which includes numerous standard library headers. We can remove this line and include only the necessary headers.

2. Replace `typedef` with `using`: The program uses `typedef` to define type aliases. We can replace `typedef` with the more modern `using` syntax.

3. Remove unused variables: The program declares variables `PII` and `eps`, but they are not used. We can remove these variable declarations.

4. Optimize the ternary search loop: The ternary search loop runs for a fixed number of iterations (200) to find the minimum cost. We can optimize this loop by using a more efficient termination condition based on the difference between the left and right boundaries.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <cstdio>
#include <climits>
using namespace std;

const int MAXN = 100000 + 10;

int vw[MAXN], pf[MAXN], vf[MAXN], th[MAXN];
int N, pw;

double calc(double W) {
  double cost = W * pw;
  for (int i = 0; i < N; ++i) {
    double need = th[i] - W * vw[i];
    if (need <= 0)
      continue;
    double f = need / vf[i];
    cost += f * pf[i];
  }
  return cost;
}

int main() {
  while (scanf("%d", &N) == 1 && N) {
    scanf("%d", &pw);
    for (int i = 0; i < N; ++i) {
      scanf("%d%d%d%d", vw + i, pf + i, vf + i, th + i);
    }
    double left = 0, right = INT_MAX;

    while (right - left > 1e-9) {
      double m1 = (left + left + right) / 3.0;
      double m2 = (left + right + right) / 3.0;
      double c1 = calc(m1), c2 = calc(m2);
      if (c1 < c2)
        right = m2;
      else
        left = m1;
    }
    printf("%.10f\n", calc(left));
  }
  return 0;
}
```

In this optimized version, unnecessary headers are removed, unused variables are deleted, and the termination condition for the ternary search loop is modified to be based on the difference between the left and right boundaries.