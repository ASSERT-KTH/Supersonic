Optimization steps:

1. Avoid using `using namespace std;` as it can cause naming conflicts. Instead, qualify the standard library names with `std::`.

2. Replace `scanf` and `printf` with `cin` and `cout` for input and output operations respectively. This will improve the readability of the code.

3. Use `vector` instead of a fixed-size array `S[n]` to avoid potential out-of-bounds errors. This will also enable the program to handle dynamic inputs.

4. Modify the binary search algorithm to avoid redundant calculations and unnecessary comparisons. Currently, the algorithm calculates the middle index `mid` twice in each iteration. We can calculate it only once and update it inside the loop when necessary.

5. Change the loop condition from `left < right` to `left <= right` to include the case when `T` is not found in the array.

6. Move the declaration and initialization of `mid` inside the loop. This will allow us to remove the redundant assignment of `mid` before the loop.

7. Use pre-increment (`++cnt`) instead of post-increment (`cnt++`) to improve efficiency.

8. Remove the unnecessary `return 0;` statement at the end of the `main` function as it is not required in C++.

Optimized code:

```cpp
#include <iostream>
#include <vector>

int main() {
  int n;
  std::cin >> n;
  std::vector<int> S(n);
  for (int i = 0; i < n; ++i) {
    std::cin >> S[i];
  }
  int cnt = 0;
  int q;
  std::cin >> q;
  for (int i = 0; i < q; ++i) {
    int T;
    std::cin >> T;
    int left = 0;
    int right = n - 1;
    while (left <= right) {
      int mid = (right + left) / 2;
      if (T > S[mid]) {
        left = mid + 1;
      } else if (T < S[mid]) {
        right = mid - 1;
      } else {
        ++cnt;
        break;
      }
    }
  }
  std::cout << cnt << std::endl;
}
```