The given program has a time complexity of O(nlogn) because it uses binary search to find whether a given number exists in the array. However, it can be optimized further by using a different approach.

Instead of performing a binary search for each query, we can use a hash set to store all the elements of the array. This will allow us to check whether a number exists in the array in constant time.

Here is the optimized program:

```cpp
#include <cstdio>
#include <iostream>
#include <unordered_set>

using namespace std;

int main() {
  int n;
  scanf("%d", &n);
  
  unordered_set<int> S;
  for (int i = 0; i < n; ++i) {
    int num;
    scanf("%d", &num);
    S.insert(num);
  }
  
  int cnt = 0;
  int q;
  scanf("%d", &q);
  
  for (int i = 0; i < q; ++i) {
    int T;
    scanf("%d", &T);
    
    if (S.count(T) > 0) {
      ++cnt;
    }
  }
  
  cout << cnt << endl;
  return 0;
}
```

Explanation of the optimization:

1. Instead of using an array to store the elements, we use an unordered_set to store the elements. This allows constant time lookup (O(1)) instead of the binary search (O(logn)) used in the original program.

2. Instead of performing a binary search for each query, we simply use the count function of the unordered_set to determine if the number exists in the set. If the count is greater than 0, it means the number exists in the set, so we increment the count variable.

By using an unordered_set, we achieve a significant improvement in both time complexity and memory usage. The optimized program has a time complexity of O(n) for building the set and O(q) for the queries, resulting in an overall time complexity of O(n+q).