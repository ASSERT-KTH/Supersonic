Step 1: Remove unnecessary header file

The `math.h` header file is unnecessary in this program because it is only used to include the `sqrt()` function, which is already declared in the `stdio.h` header file. Therefore, we can remove the `math.h` header file.

Step 2: Use pass-by-reference instead of pass-by-value for the `distance()` function

The `distance()` function currently takes the `point` structures `p1` and `p2` by value, which means that a copy of each structure is made when the function is called. This can be inefficient, especially if the structures are large. To optimize this, we can modify the `distance()` function to take the `point` structures by reference instead. This way, the function will work directly with the original structures without making any copies.

Step 3: Use `const` for read-only variables

The `point` structures `p1` and `p2` in the `distance()` function are read-only variables and should be declared as `const` to indicate this. This allows the compiler to perform additional optimizations.

Step 4: Remove unnecessary temporary variable

The `temp` variable in the `distance()` function is unnecessary. We can directly calculate the distance without using the temporary variable.

Step 5: Optimize input/output operations

The `scanf()` function can be slow when used with floating-point numbers. We can optimize the input operation by using `fgets()` to read the input as a string and then parse the string to extract the floating-point numbers. Similarly, the `printf()` function can also be slow when used with floating-point numbers. We can optimize the output operation by using `sprintf()` to format the floating-point number as a string and then print the string using `puts()`.

Here is the optimized program:

```c
#include <stdio.h>

typedef struct point {
  double x;
  double y;
} point;

double distance(const point* p1, const point* p2) {
  double dx = p1->x - p2->x;
  double dy = p1->y - p2->y;
  return sqrt(dx * dx + dy * dy);
}

int main(void) {
  point p1, p2;
  char input[100];
  fgets(input, sizeof(input), stdin);
  sscanf(input, "%lf%lf%lf%lf", &p1.x, &p1.y, &p2.x, &p2.y);
  double d = distance(&p1, &p2);
  char output[20];
  sprintf(output, "%.5f\n", d);
  puts(output);
  return 0;
}
```

Explanation:

1. Removed the `math.h` header file as it is unnecessary.
2. Modified the `distance()` function to take the `point` structures by reference using pointers.
3. Added `const` qualifier for the read-only variables `p1` and `p2` in the `distance()` function.
4. Removed the temporary variable `temp` and directly calculated the distance using `dx` and `dy`.
5. Used `fgets()` and `sscanf()` to optimize the input operation.
6. Used `sprintf()` to format the floating-point number as a string in the `output` array.
7. Used `puts()` to print the formatted string.