Explanation of the optimization steps:

1. Remove the unnecessary 'using namespace std;' statement. It is considered a best practice to explicitly use the std namespace to avoid naming conflicts.

2. Use pre-increment operator instead of post-increment operator for the loop counters. The pre-increment operator is generally faster than the post-increment operator.

3. Use '\n' instead of endl. The endl manipulator flushes the output stream, which can be a costly operation. Using '\n' instead will improve performance.

4. Change the loop variables to unsigned integers. Since the loop variables are only used for iteration and not for any other calculations, using unsigned integers will allow for a larger range of numbers without the need for negative values.

5. Declare the loop variables outside of the for loop declaration. This will reduce the overhead of creating and destroying the loop variables in each iteration of the loop.

6. Use a more efficient multiplication algorithm. Instead of using the '*' operator to perform the multiplication, we can use a bitwise shift operation to multiply the numbers. This will be faster and more efficient.

7. Use a more efficient output mechanism. Instead of using the '<<' operator multiple times, we can use a formatted output using printf. This will reduce the overhead of multiple function calls.

Here is the optimized program:

```cpp
#include <iostream>

int main() {
  unsigned int i, j;

  for (i = 1; i <= 9; ++i) {
    for (j = 1; j <= 9; ++j) {
      printf("%dx%d=%d\n", i, j, i << j);
    }
  }
  
  return 0;
}
```