Explanation of optimization steps:
1. Currently, the program is using two nested loops to iterate through the numbers 1 to 9 for both `i` and `j`. This results in a total of 81 iterations. We can reduce the number of iterations by half if we start the inner loop from `i` instead of 1.
2. The `printf` function is being called for each iteration, which can be inefficient. We can optimize this by using a buffer to store the output strings and then print them all at once.

Here is the optimized program:
```c
#include <stdio.h>

int main(void) {
  int i, j;
  char buffer[100]; // buffer to store the output strings
  int bufferIndex = 0; // index to keep track of the buffer position

  for (i = 1; i < 10; i++) {
    for (j = i; j < 10; j++) {
      bufferIndex += sprintf(buffer + bufferIndex, "%dx%d=%d\n", i, j, i * j);
    }
  }

  printf("%s", buffer); // print the buffer

  return 0;
}
```

Explanation of optimized program:
1. We initialize a character array `buffer` with a size of 100 to store the output strings.
2. We introduce a new variable `bufferIndex` to keep track of the position in the buffer.
3. The outer loop still starts from 1 and goes up to 9, but the inner loop now starts from `i` instead of 1. This reduces the number of iterations.
4. Instead of printing the output string immediately, we use `sprintf` to format the string and store it in the `buffer`. The return value of `sprintf` gives the number of characters that were written to the buffer.
5. We update `bufferIndex` by adding the return value of `sprintf`, which allows us to keep track of the buffer position.
6. Finally, we print the entire buffer using a single `printf` call. This reduces the number of function calls and improves efficiency.