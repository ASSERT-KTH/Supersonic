Explanation of optimization steps:

1. Reduce the number of iterations in the outer loop: The outer loop currently iterates from 1 to 9. However, since the inner loop also iterates from 1 to 9, we can reduce the number of iterations in the outer loop to only iterate from 1 to 3. This is because multiplying any number greater than 3 by 4 or more will produce a result that is greater than 9x9.

2. Reduce the number of iterations in the inner loop: The inner loop currently iterates from 1 to 9. However, since we are only interested in the multiplication tables up to 9x9, we can reduce the number of iterations in the inner loop to only iterate from 1 to the current value of the outer loop variable.

3. Remove unnecessary calculation of i * j: Currently, we calculate i * j in each iteration of the inner loop. However, we can calculate it once and store it in a variable before the inner loop. This will eliminate the need for the multiplication operation in each iteration.

4. Use a more efficient output function: The printf function is relatively slow compared to other output functions. Instead of using printf, we can use the putchar function to output the individual characters of the multiplication table. This will reduce the overhead of formatting and improve performance.

Optimized code:

```c
#include <stdio.h>

int main(void) {
  int i, j;
  for (i = 1; i <= 3; i++) {
    int result = i * j;
    for (j = 1; j <= i; j++) {
      putchar('0' + i);
      putchar('x');
      putchar('0' + j);
      putchar('=');
      putchar('0' + result);
      putchar('\n');
      result += i;
    }
  }
  return 0;
}
```

Explanation of optimized code:

1. The outer loop now iterates from 1 to 3 instead of 1 to 9.
2. The inner loop now iterates from 1 to the current value of the outer loop variable.
3. The result of i * j is calculated once before the inner loop and stored in the variable "result".
4. The putchar function is used to output the characters of the multiplication table, eliminating the need for formatting with printf.