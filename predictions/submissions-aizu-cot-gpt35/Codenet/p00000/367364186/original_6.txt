Explanation of the optimization steps:

1. Minimize function calls: In the original program, the printf() function is called for each iteration of the inner loop. This can be optimized by reducing the number of function calls. 

2. Reduce format string manipulation: In the original program, the format string is built for each iteration of the inner loop. This can be optimized by pre-building the format string outside the loop.

3. Reduce stream output operations: In the original program, the output is printed to the console immediately after each calculation. This can cause significant overhead. Instead, we can store the output in a buffer and print it once after all calculations are complete.

Optimized program:

```
#include <stdio.h>

int main() {
  char buffer[1000];  // Buffer for storing the output
  char* buf_ptr = buffer;

  // Pre-build the format string
  char format_str[] = "%dx%d=%d\n";

  for (int i = 1; i < 10; i++) {
    for (int j = 1; j < 10; j++) {
      // Store the formatted output in the buffer
      buf_ptr += sprintf(buf_ptr, format_str, i, j, i * j);
    }
  }

  // Print the entire output at once
  printf("%s", buffer);

  return 0;
}
```