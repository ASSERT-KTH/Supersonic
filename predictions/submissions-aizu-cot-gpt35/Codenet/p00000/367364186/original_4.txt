The given program prints the multiplication table from 1 to 9. To optimize the program for running time and memory usage, we can make the following modifications:

1. Instead of printing the multiplication table to the console using `printf` inside the nested loops, we can store the results in an array. This will eliminate the need for multiple function calls and improve runtime.

2. We can reduce the number of iterations by starting the loops from 2 instead of 1, as multiplying any number by 1 will yield the same number.

3. We can allocate memory for the array dynamically to reduce memory usage. 

Here is the optimized C program:

```c
#include <stdio.h>
#include <stdlib.h>

int main() {
  int size = 9;
  int** table = (int**)malloc(size * sizeof(int*));

  for (int i = 0; i < size; i++) {
    table[i] = (int*)malloc(size * sizeof(int));
  }

  for (int i = 2; i <= size; i++) {
    for (int j = 2; j <= size; j++) {
      table[i - 2][j - 2] = i * j;
    }
  }

  for (int i = 0; i < size; i++) {
    for (int j = 0; j < size; j++) {
      printf("%dx%d=%d\n", i + 1, j + 1, table[i][j]);
    }
  }

  for (int i = 0; i < size; i++) {
    free(table[i]);
  }
  free(table);

  return 0;
}
```

Explanation:
1. We have declared a variable `size` to represent the size of the multiplication table. Here, `size` is set to 9.

2. We have declared a 2D array `table` using dynamic memory allocation. The array `table` will store the multiplication results.

3. Inside the nested loops, we assign the multiplication result of `i` and `j` to `table[i - 2][j - 2]`. We subtract 2 from `i` and `j` to adjust the indices for the array.

4. Finally, we print the multiplication table using the values stored in the `table` array.

5. We free the allocated memory for the `table` array to prevent memory leaks.

By making these modifications, we have optimized the program for both running time and memory usage.