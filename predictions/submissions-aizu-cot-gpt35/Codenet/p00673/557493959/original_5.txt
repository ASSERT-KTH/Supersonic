To optimize the given program, we can make the following modifications:

1. Replace the `map` data structure with a more efficient data structure like `unordered_map`.

2. Instead of using `vector` of `edge`, we can use a fixed-size array to store the edges. This will reduce memory usage.

3. Remove the unnecessary `using namespace std;` statement.

4. Replace the `rep` macro with a simple `for` loop.

5. Remove the unnecessary `static` keyword from the local variables `pre` and `d` in the `augment` function.

Here is the optimized program:

```cpp
#include <cstdio>
#include <unordered_map>
#include <queue>

const int V_MAX = 6000;
const int CAPA_INF = 1 << 29;
const int COST_INF = 1 << 29;

template <class T, class U> struct edge {
  int v, rev;
  T capa;
  U cost;
  T flow;
};

template <class T, class U>
void add_directed_edge(edge<T, U> *G, int *G_size, int u, int v, T capa, U cost) {
  G[u * 2 + G_size[u]].v = v;
  G[u * 2 + G_size[u]].rev = G_size[v];
  G[u * 2 + G_size[u]].capa = capa;
  G[u * 2 + G_size[u]].cost = cost;
  G[u * 2 + G_size[u]].flow = 0;

  G[v * 2 + G_size[v]].v = u;
  G[v * 2 + G_size[v]].rev = G_size[u];
  G[v * 2 + G_size[v]].capa = 0;
  G[v * 2 + G_size[v]].cost = -cost;
  G[v * 2 + G_size[v]].flow = 0;

  G_size[u]++;
  G_size[v]++;
}

template <class T, class U>
std::pair<T, U> augment(int n, edge<T, U> *G, int *G_size, int s, int t, U *pot) {
  int pre[V_MAX];
  U d[V_MAX];
  for (int u = 0; u < n; u++) {
    d[u] = (u == s ? 0 : COST_INF);
  }
  bool ok = false;
  std::priority_queue<std::pair<U, int>> Q;
  Q.push(std::make_pair(0, s));
  while (!Q.empty()) {
    int u = Q.top().second;
    U cost = -Q.top().first;
    Q.pop();
    if (cost < d[u])
      continue;
    if (u == t)
      ok = true;
    for (int i = 0; i < G_size[u]; i++) {
      edge<T, U> &e = G[u * 2 + i];
      U cost2 = cost + e.cost + pot[u] - pot[e.v];
      if (e.capa - e.flow > 0 && cost2 < d[e.v]) {
        d[e.v] = cost2;
        pre[e.v] = e.rev;
        Q.push(std::make_pair(-cost2, e.v));
      }
    }
  }
  if (!ok)
    return std::make_pair(0, 0);
  T water = CAPA_INF;
  for (int v = t; v != s;) {
    edge<T, U> &e1 = G[v * 2 + pre[v]];
    edge<T, U> &e2 = G[e1.v * 2 + e1.rev];
    water = std::min(water, e2.capa - e2.flow);
    v = e1.v;
  }
  U cost = 0;
  for (int v = t; v != s;) {
    edge<T, U> &e1 = G[v * 2 + pre[v]];
    edge<T, U> &e2 = G[e1.v * 2 + e1.rev];
    e1.flow -= water;
    e2.flow += water;
    cost += water * e2.cost;
    v = e1.v;
  }
  for (int u = 0; u < n; u++) {
    pot[u] += d[u];
  }
  return std::make_pair(water, cost);
}

template <class T, class U>
std::pair<T, U> primal_dual(int n, edge<T, U> *G, int *G_size, int s, int t) {
  T ans1 = 0;
  U ans2 = 0;
  U pot[V_MAX];
  for (int u = 0; u < n; u++) {
    pot[u] = 0;
  }
  while (1) {
    std::pair<T, U> tmp = augment(n, G, G_size, s, t, pot);
    if (tmp.first == 0)
      break;
    ans1 += tmp.first;
    ans2 += tmp.second;
  }
  return std::make_pair(ans1, ans2);
}

struct train {
  int t1, t2, cost;
};

int main() {
  for (int n; std::scanf("%d", &n), n;) {
    std::vector<train> T[99];
    for (int i = 0; i < n - 1; i++) {
      int m;
      std::scanf("%d", &m);
      T[i].resize(m);
      for (int j = 0; j < m; j++)
        std::scanf("%d%d%d", &T[i][j].t1, &T[i][j].t2, &T[i][j].cost);
    }
    int n_class;
    std::scanf("%d", &n_class);
    int V = 0;
    std::unordered_map<int, int> f[100][2];
    std::unordered_map<int, int>::iterator it, jt;
    for (int i = 0; i < n - 1; i++) {
      for (int j = 0; j < T[i].size(); j++) {
        int t1 = T[i][j].t1, t2 = T[i][j].t2;
        if (f[i][0].count(t1) == 0)
          f[i][0][t1] = V++;
        if (f[i + 1][0].count(t2) == 0)
          f[i + 1][0][t2] = V++;
        if (f[i + 1][1].count(t2) == 0)
          f[i + 1][1][t2] = V++;
      }
    }
    int s = V++;
    int t = V++;
    edge<int, int> G[V_MAX * 2];
    int G_size[V_MAX];
    for (int u = 0; u < V; u++) {
      G_size[u] = 0;
    }
    add_directed_edge(G, G_size, s, f[0][0].begin()->second, n_class, 0);
    add_directed_edge(G, G_size, f[n - 1][0].rbegin()->second, t, n_class, 0);
    for (int i = 0; i < n; i++) {
      for (it = f[i][0].begin(); it != f[i][0].end(); ++it) {
        jt = it;
        ++jt;
        if (jt != f[i][0].end()) {
          add_directed_edge(G, G_size, it->second, jt->second, n_class, 0);
        }
      }
      for (it = f[i][1].begin(); it != f[i][1].end(); ++it) {
        int t = it->first;
        add_directed_edge(G, G_size, it->second, f[i][0][t], 1, 0);
      }
    }
    for (int i = 0; i < n - 1; i++) {
      for (int j = 0; j < T[i].size(); j++) {
        add_directed_edge(G, G_size, f[i][0][T[i][j].t1], f[i + 1][1][T[i][j].t2], 1, T[i][j].cost);
      }
    }
    std::pair<int, int> ans = primal_dual(V, G, G_size, s, t);
    std::printf("%d %d\n", ans.first, ans.second);
  }
  return 0;
}
```

By making these optimizations, we can expect improved running time and reduced memory usage for the program.