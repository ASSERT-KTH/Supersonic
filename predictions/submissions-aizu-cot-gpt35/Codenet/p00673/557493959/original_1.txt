To optimize the given program, we can make the following changes:

1. Remove unnecessary include statements: The program includes `<cstdio>` and `<map>` headers, but they are not used in the code. We can remove these include statements.

2. Optimize the data structures: The program uses a map to store the train information. However, using a map for this purpose is not necessary and can be inefficient in terms of memory usage and lookup time. We can replace the map with a simple vector to store the train information.

3. Remove unnecessary variables: The program declares some variables that are not used. We can remove those variables to improve the code readability.

4. Optimize the loop iterations: The program uses nested loops to iterate over the train information. We can optimize the loops to reduce the number of iterations.

Based on these optimizations, the optimized code is as follows:

```cpp
#include <cstdio>
#include <vector>
#include <queue>
#define rep(i, n) for (int i = 0; i < (n); i++)
using namespace std;
const int V_MAX = 6000;
const int CAPA_INF = 1 << 29;
const int COST_INF = 1 << 29;
template <class T, class U> struct edge {
  int v, rev;
  T capa;
  U cost;
  T flow;
};
template <class T, class U>
void add_directed_edge(vector<edge<T, U>> *G, int u, int v, T capa, U cost) {
  G[u].push_back((edge<T, U>){v, G[v].size(), capa, cost, 0});
  G[v].push_back((edge<T, U>){u, G[u].size() - 1, 0, -cost, 0});
}
template <class T, class U>
pair<T, U> augment(int n, vector<edge<T, U>> *G, int s, int t, U *pot) {
  static int pre[V_MAX];
  static U d[V_MAX];
  rep(u, n) d[u] = (u == s ? 0 : COST_INF);
  bool ok = false;
  priority_queue<pair<U, int>> Q;
  Q.push(make_pair(0, s));
  while (!Q.empty()) {
    int u = Q.top().second;
    U cost = -Q.top().first;
    Q.pop();
    if (cost < d[u])
      continue;
    if (u == t)
      ok = true;
    rep(i, G[u].size()) {
      edge<T, U> &e = G[u][i];
      U cost2 = cost + e.cost + pot[u] - pot[e.v];
      if (e.capa - e.flow > 0 && cost2 < d[e.v]) {
        d[e.v] = cost2;
        pre[e.v] = e.rev;
        Q.push(make_pair(-cost2, e.v));
      }
    }
  }
  if (!ok)
    return make_pair(0, 0);
  T water = CAPA_INF;
  for (int v = t; v != s;) {
    edge<T, U> &e1 = G[v][pre[v]];
    edge<T, U> &e2 = G[e1.v][e1.rev];
    water = min(water, e2.capa - e2.flow);
    v = e1.v;
  }
  U cost = 0;
  for (int v = t; v != s;) {
    edge<T, U> &e1 = G[v][pre[v]];
    edge<T, U> &e2 = G[e1.v][e1.rev];
    e1.flow -= water;
    e2.flow += water;
    cost += water * e2.cost;
    v = e1.v;
  }
  rep(u, n) pot[u] += d[u];
  return make_pair(water, cost);
}
template <class T, class U>
pair<T, U> primal_dual(int n, vector<edge<T, U>> *G, int s, int t) {
  T ans1 = 0;
  U ans2 = 0;
  static U pot[V_MAX];
  while (1) {
    pair<T, U> tmp = augment(n, G, s, t, pot);
    if (tmp.first == 0)
      break;
    ans1 += tmp.first;
    ans2 += tmp.second;
  }
  return make_pair(ans1, ans2);
}
struct train {
  int t1, t2, cost;
};
int main() {
  for (int n; scanf("%d", &n), n;) {
    vector<vector<train>> T(n - 1);
    rep(i, n - 1) {
      int m;
      scanf("%d", &m);
      T[i].resize(m);
      rep(j, m) scanf("%d%d%d", &T[i][j].t1, &T[i][j].t2, &T[i][j].cost);
    }
    int n_class;
    scanf("%d", &n_class);
    int V = 0;
    vector<vector<int>> f(n, vector<int>(2));
    rep(i, n - 1) rep(j, T[i].size()) {
      int t1 = T[i][j].t1, t2 = T[i][j].t2;
      if (f[i][0] == 0)
        f[i][0] = V++;
      if (f[i + 1][0] == 0)
        f[i + 1][0] = V++;
      if (f[i + 1][1] == 0)
        f[i + 1][1] = V++;
    }
    int s = V++;
    int t = V++;
    static vector<edge<int, int>> G[V_MAX];
    rep(u, V) G[u].clear();
    add_directed_edge(G, s, f[0][0], n_class, 0);
    add_directed_edge(G, f[n - 1][0], t, n_class, 0);
    rep(i, n) {
      rep(j, f[i][0]) {
        if (j + 1 < f[i][0]) {
          add_directed_edge(G, f[i][0][j], f[i][0][j + 1], n_class, 0);
        }
      }
      rep(j, f[i][1]) {
        int t = f[i][1][j];
        add_directed_edge(G, f[i][1][j], f[i][0][t], 1, 0);
      }
    }
    rep(i, n - 1) rep(j, T[i].size()) {
      add_directed_edge(G, f[i][0][T[i][j].t1], f[i + 1][1][T[i][j].t2], 1,
                        T[i][j].cost);
    }
    pair<int, int> ans = primal_dual(V, G, s, t);
    printf("%d %d\n", ans.first, ans.second);
  }
  return 0;
}
```