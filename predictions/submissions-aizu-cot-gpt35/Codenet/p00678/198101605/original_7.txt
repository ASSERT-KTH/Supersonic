The given program calculates the maximum time taken to reach a point from the origin, considering the initial velocity and the distance of the point from the origin.

To optimize this program, we can make the following modifications:

1. Remove unnecessary includes: The program includes several unnecessary headers such as `<algorithm>`, `<cmath>`, and `<vector>`. Since these headers are not used in the program, we can remove them to reduce compilation time and memory usage.

2. Use `constexpr` for `EPS`: The `EPS` variable is a constant and its value is not modified. We can declare it as `constexpr` to ensure that it is evaluated at compile time, which can improve runtime performance.

3. Remove unnecessary point constructor: The `point` struct has a default constructor that is not used in the program. We can remove it to simplify the code.

4. Avoid unnecessary function calls: The `add` function is used to check if the sum of two numbers is close to zero. However, this can be simplified by directly comparing the sum to zero using the `==` operator. This can eliminate the need for the `add` function, reducing function call overhead.

5. Use `const` references in function parameters: The `dist` function takes two `point` objects as parameters. It is more efficient to pass them by `const` reference instead of by value, as it avoids the unnecessary copy of the objects.

6. Use range-based loop: Instead of using an index-based loop to iterate over the elements of a vector, we can use a range-based loop. This can simplify the code and potentially improve performance.

7. Use `emplace_back` instead of `push_back`: When adding elements to the `P` and `V` vectors, we can use `emplace_back` instead of `push_back` to construct the elements in-place, avoiding unnecessary copy or move operations.

8. Use `std::cout` instead of `printf`: We can use `std::cout` instead of `printf` for outputting the result. This can simplify the code and improve compatibility with C++.

Based on these optimizations, the optimized program is as follows:

```cpp
#include <iostream>
#include <cmath>
#include <vector>

constexpr double EPS = 1e-6;

struct point {
  double x, y;

  point(double x, double y) : x(x), y(y) {}
};

double dist(const point& a, const point& b) {
  return std::sqrt(std::pow(a.x - b.x, 2) + std::pow(a.y - b.y, 2));
}

int main() {
  int n, x, y, v;
  std::vector<point> P;
  std::vector<double> V;

  while (std::cin >> n, n) {
    P.clear();
    V.clear();

    for (int i = 0; i < n; i++) {
      std::cin >> x >> y >> v;
      P.emplace_back(x, y);
      V.emplace_back(v);
    }

    double r = 0.98;
    point now(0, 0);

    for (double d = 10; d > EPS; d *= r) {
      int mx = 0;
      double mxd = 0;

      for (const auto& p : P) {
        double dist_p = dist(now, p);
        if (dist_p / V[mx] > mxd) {
          mx = &p - P.data();
          mxd = dist_p / V[mx];
        }
      }

      now = point(now.x + (P[mx].x - now.x) / dist(P[mx], now) * d,
                  now.y + (P[mx].y - now.y) / dist(P[mx], now) * d);
    }

    double ans = 0;

    for (const auto& p : P) {
      ans = std::max(ans, dist(now, p) / V[&p - P.data()]);
    }

    std::cout << std::fixed;
    std::cout.precision(8);
    std::cout << ans << "\n";
  }

  return 0;
}
```