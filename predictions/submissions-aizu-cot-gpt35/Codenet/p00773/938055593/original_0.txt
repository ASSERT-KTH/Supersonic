The main bottleneck in this program is the nested loop that calculates the values of `a` and `b`. The current implementation calculates `(100 + x) / 100.0` in every iteration of the loop, which can be optimized by moving this calculation outside the loop.

Here is the optimized version of the program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

int main() {
  int x, y, s;
  while (cin >> x >> y >> s && (x || y || s)) {
    vector<vector<int>> tax(1000, vector<int>(2));
    int maxi = 0, i = 0, a = 1, b;
    
    // Calculate the constant value outside the loop
    double xFactor = (100 + x) / 100.0;

    while (a < s) {
      b = (s - (int)(a * xFactor) + 1) / xFactor;
      if ((a * xFactor + b * xFactor) == s && b != 0) {
        tax[i][0] = a;
        tax[i][1] = b;
        maxi = max(maxi, (int)(tax[i][0] * (100 + y) / 100.0) +
                             (int)(tax[i][1] * (100 + y) / 100.0));
        i++;
      }
      a++;
    }
    cout << maxi << endl;
  }
  return 0;
}
```

In the optimized version, the calculation `(100 + x) / 100.0` is moved outside the loop and stored in the variable `xFactor`. This avoids the repeated calculation in each iteration of the loop, resulting in improved performance.