Step 1: Optimize the memory usage
- The current implementation uses a char array `vis` of size `80000000/8` to store the visited states. This is unnecessary and can be reduced.
- Since the program operates on a 8-digit number, the maximum number of unique states is `10^8`. So, we can reduce the size of `vis` to `100000000/8`.
- We can also optimize the usage of the `bitset` library to reduce memory usage.

Step 2: Optimize the running time
- The current implementation uses `atoi` function to convert the `bj` array to an integer. This function has a linear time complexity. We can optimize this step by directly converting the characters to integers while calculating the initial state.
- The `strchr` function is used to find the position of '0' in the `bj` array. Instead, we can use a variable to keep track of the position of '0'.
- The `ddd` array is used to calculate powers of 10. We can optimize this step by using a precalculated array of powers of 10.

Here is the optimized program:

```cpp
#include <algorithm>
#include <bitset>
#include <stdio.h>
#include <string.h>
#include <vector>
using namespace std;

bitset<100000000> vis; // Optimized memory usage

char bj[8];
int bs;
int tt;
int front, back;
int ddd[8] = {10000000, 1000000, 100000, 10000, 1000, 100, 10, 1}; // Precalculated powers of 10

struct pt {
  int ztt;
  int lwz;
  int step;
};

pt dl[1 << 16];

void bfs() {
  tt = 0;
  front = 1;
  back = 1;
  bs = 0;
  vis.reset(); // Reset the bitset

  int cs = 0;
  for (int i = 0; i < 8; i++) {
    cs = cs * 10 + (bj[i] - '0'); // Convert characters to integers directly
  }

  vis.set(cs); // Optimize setting the initial state as visited

  pt lsss;
  lsss.ztt = cs;
  lsss.lwz = 0; // Use a variable to keep track of the position of '0'
  lsss.step = 0;
  dl[back] = lsss;
  back++;

  while (front < back) {
    pt ls1 = dl[front];
    front++;

    if (ls1.ztt == 1234567) {
      bs = ls1.step;
      tt = 1;
      return;
    }

    pt lsjr;
    int kkk[4] = {-1, 1, -4, 4};
    for (int i = 0; i < 4; i++) {
      lsjr.lwz = ls1.lwz + kkk[i];
      if ((ls1.lwz == 3 && lsjr.lwz == 4) || (ls1.lwz == 4 && lsjr.lwz == 3))
        continue;
      if (lsjr.lwz >= 0 && lsjr.lwz <= 7) {
        int a, b;
        a = ls1.ztt / ddd[ls1.lwz] % 10;
        b = ls1.ztt / ddd[lsjr.lwz] % 10;
        lsjr.ztt = ls1.ztt + (b - a) * ddd[ls1.lwz] + (a - b) * ddd[lsjr.lwz];
        if (!vis[lsjr.ztt]) {
          lsjr.step = ls1.step + 1;
          vis.set(lsjr.ztt);
          dl[back] = lsjr;
          back++;
        }
      }
    }
  }
}

int main() {
  while (1) {
    if (scanf("%c", &bj[0]) == EOF) {
      return 0;
    }
    scanf("%*c");
    for (int i = 1; i <= 6; i++) {
      scanf("%c%*c", &bj[i]);
    }
    scanf("%c", &bj[7]);
    bfs();
    if (tt) {
      printf("%d\n", bs);
    } else {
      printf("-1\n");
    }
    while (getchar() != '\n')
      ;
  }
  return 0;
}
```

By optimizing the memory usage and the running time, the program should perform better in terms of both time and memory usage.