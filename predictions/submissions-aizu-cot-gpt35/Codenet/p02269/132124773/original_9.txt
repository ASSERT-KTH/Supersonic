The given program reads a number `n` and then reads `n` pairs of strings, where the first string represents a command and the second string represents a word. If the command is "i", it inserts the word into a map. If the command is not "i", it checks if the word exists in the map and prints "yes" if it does or "no" if it doesn't.

To optimize this program, we can make the following modifications:

1. Remove the unnecessary inclusion of `<iostream>` and `<string>` as they are not used in the program.
2. Replace the `std::map` with `std::unordered_set`, which provides faster insertion and lookup times.
3. Replace the `if-else` statement with a single `cout` statement, as the condition is already a boolean value.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_set>

int main() {
  int n;
  std::cin >> n;
  std::unordered_set<std::string> Dic;
  std::string com, word;
  while (n--) {
    std::cin >> com >> word;
    if (com[0] == 'i')
      Dic.insert(word);
    else
      std::cout << (Dic.count(word) ? "yes" : "no") << std::endl;
  }
}
```