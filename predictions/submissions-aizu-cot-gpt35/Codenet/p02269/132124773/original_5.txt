Explanation of the optimization steps:

1. Avoid unnecessary includes: The code includes the `<iostream>` and `<string>` libraries, but it does not use any features from the `<string>` library. Therefore, we can remove the line `#include <string>`.

2. Avoid using `using namespace std`: It is considered a bad practice to use `using namespace std` in global scope, as it can lead to naming conflicts. Instead, we can explicitly specify the namespace for the used classes and functions.

3. Use `unordered_map` instead of `map`: The `unordered_map` container provides constant-time average complexity for search, insertion, and deletion operations, while `map` provides logarithmic complexity. Since we don't need the elements to be sorted, we can use `unordered_map` for better performance.

4. Optimize the check for the command type: The code uses `if (com[0] == 'i')` to check if the command is an insert command. However, this can be optimized by directly comparing `com` with the string "insert" using `if (com == "insert")`. This avoids unnecessary indexing into the string and potential out-of-bounds access.

5. Optimize the print statements: The code uses `cout` and `endl` to print "yes" or "no" followed by a newline character. However, `endl` flushes the output buffer, which can be expensive. We can replace `endl` with `'\n'` to only insert a newline character without flushing the buffer.

6. Use a more descriptive variable name: The variable name `Dic` is not very descriptive. We can rename it to `dictionary` to improve code readability.

Optimized code:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>

int main() {
  int n;
  std::cin >> n;
  std::unordered_map<std::string, bool> dictionary;
  std::string command, word;
  while (n--) {
    std::cin >> command >> word;
    if (command == "insert")
      dictionary[word] = true;
    else {
      if (dictionary[word])
        std::cout << "yes\n";
      else
        std::cout << "no\n";
    }
  }
}
```