This program reads a number `n` from the input, then it reads `n` pairs of strings (`com` and `word`) from the input. It uses a `map` to store words and a boolean value indicating whether the word is present in the dictionary or not. If the command `com` is "i", it adds the word to the dictionary, otherwise it checks if the word is in the dictionary and prints "yes" or "no" accordingly.

To optimize this program, we can make the following modifications:

1. Instead of using a `map` to store words, we can use an `unordered_set`. This will improve the memory usage and the average time complexity of operations.

2. We can avoid the use of the `using namespace std` statement, as it is considered a bad practice.

3. We can replace the `if-else` statement inside the loop with a ternary operator to improve readability.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_set>
#include <string>

int main() {
    int n;
    std::cin >> n;
    std::unordered_set<std::string> dictionary;
    std::string command, word;
  
    while (n--) {
        std::cin >> command >> word;
        dictionary.insert(word);
        std::cout << (command[0] == 'i' ? "" : (dictionary.count(word) ? "yes" : "no")) << std::endl;
    }
}
```