Optimization steps:

1. Avoid unnecessary memory allocation: The `chk` array is used to store boolean values for a large number of elements. However, it is only necessary to store boolean values for a limited range of indices. By using a `unordered_set` instead of an array, we can avoid allocating memory for unused indices.

2. Optimize the hash function: The current hash function converts each character in the string to a number from 1 to 4 and adds it to the running total. However, this can be optimized by using bit manipulation. We can represent each character as 2 bits (00 for 'A', 01 for 'C', 10 for 'G', and 11 for 'T'). By shifting the running total left by 2 and adding the appropriate bits for each character, we can calculate the hash value more efficiently.

3. Avoid unnecessary string copies: The `h` function takes a string parameter, but it is only used to calculate the hash value. Instead of passing the entire string, we can pass a reference to the string to avoid unnecessary copying.

4. Use `unordered_map` to store the hash values: Instead of using a boolean array or `unordered_set`, we can use an `unordered_map` to store the hash values as keys and boolean values as values. This allows us to retrieve the boolean value for a given hash value in constant time.

Here is the optimized program:

```cpp
#include <iostream>
#include <string>
#include <unordered_map>
using namespace std;

unordered_map<int, bool> chk;
int n;
string ins, s;

int h(const string& s) {
  int ret = 0;
  for (char c : s) {
    ret <<= 2;
    if (c == 'C')
      ret |= 1;
    else if (c == 'G')
      ret |= 2;
    else if (c == 'T')
      ret |= 3;
  }
  return ret;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  
  cin >> n;
  while (n--) {
    cin >> ins >> s;
    if (ins[0] == 'i') {
      chk[h(s)] = true;
    } else {
      cout << (chk[h(s)] ? "yes" : "no") << endl;
    }
  }
  
  return 0;
}
```

Explanation of optimizations:

1. By using `unordered_map<int, bool>` instead of `bool chk[244140624]`, we avoid allocating memory for unused indices. The `unordered_map` will only allocate memory for the necessary hash values.

2. The `h` function has been modified to use bit manipulation instead of arithmetic operations. This allows for faster calculation of the hash value.

3. The `h` function now takes a const reference to the string instead of copying the string. This avoids unnecessary string copying.

4. The `unordered_map` is used to store the hash values as keys and boolean values as values. This allows for constant time retrieval of the boolean value for a given hash value.