Explanation of the optimization steps:

1. Remove unnecessary includes: The program includes the `<iostream>` and `<string>` headers, but only uses the `std::string` type. We can remove the `<iostream>` header since it is not needed.

2. Avoid using `using namespace std;`: The program currently uses `using namespace std;` which brings all the names in the `std` namespace into the global namespace. This can lead to naming conflicts and is generally considered bad practice. We can remove this line and use the `std::` prefix for the relevant names.

3. Use a constant for the maximum size of the boolean array: The program declares a boolean array `chk` with a size of `244140624`. Since this size is constant, we can use a named constant instead of a hard-coded value. This improves code readability and makes it easier to modify the size in the future if needed.

4. Optimize the `h` function: The `h` function converts a string into an integer hash value. Currently, it loops through each character of the string and performs multiple conditional checks. We can optimize this by using a switch statement instead of multiple if-else checks. Additionally, we can avoid the multiplication operation by using exponentiation with the base 5.

5. Use a more efficient input method: The program currently uses `std::cin` for input, which can be slower compared to other input methods. We can use `std::scanf` for faster input.

6. Use a more efficient output method: The program currently uses `std::cout` for output, which can be slower compared to other output methods. We can use `std::printf` for faster output.

Here is the optimized program:

```cpp
#include <cstdio>
#include <string>
#include <cmath>

const int MAX_SIZE = 244140624;
bool chk[MAX_SIZE];
int n;
std::string ins, s;

int h(const std::string& s) {
  int ret = 0;
  int size = s.size();
  for (int i = 0; i < size; ++i) {
    ret += pow(5, size - i - 1) * (
      (s[i] == 'A') ? 1 :
      (s[i] == 'C') ? 2 :
      (s[i] == 'G') ? 3 :
      (s[i] == 'T') ? 4 : 0
    );
  }
  return ret;
}

int main() {
  std::scanf("%d", &n);
  while (n--) {
    std::scanf("%s", &ins[0]);
    std::scanf("%s", &s[0]);
    if (ins[0] == 'i') {
      chk[h(s)] = true;
    } else {
      std::printf("%s\n", (chk[h(s)] ? "yes" : "no"));
    }
  }
  return 0;
}
```