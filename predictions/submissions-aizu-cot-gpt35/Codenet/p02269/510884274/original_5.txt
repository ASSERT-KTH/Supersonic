Explanation of the optimization steps:

1. Avoid unnecessary string copying: The function `h()` takes a string parameter `s`, but it does not modify the string. Therefore, we can pass the parameter by const reference instead of by value to avoid unnecessary string copying.

2. Optimize the hashing function: The function `h()` converts each character of the input string to a number in the range [1, 4] and computes the hash value by multiplying the previous hash value by 5 and adding the converted number. This approach works, but it can be optimized by using bitwise operations instead of multiplication and addition. We can use a lookup table to map each character to its corresponding number and use bitwise shift and bitwise OR operations to compute the hash value.

3. Optimize the size of the boolean array: The boolean array `chk` has a size of 244140624, which is quite large. We can optimize the memory usage by using a smaller array size. Since the hash value is computed using 5 possible characters, the maximum hash value will be 4^10 = 1048576. Therefore, we can use an array of size 1048577 to store the boolean values.

Optimized code:

```cpp
#include <iostream>
#include <string>
using namespace std;

bool chk[1048577];
int n;
string ins, s;

int h(const string& s) {
  static int lookup[256] = {
    0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, // A, C, G, T
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // other characters
    // repeat the pattern for the remaining characters
  };

  int ret = 0;
  for (char c : s) {
    ret <<= 2; // multiply by 4 (shift left by 2 bits)
    ret |= lookup[c]; // bitwise OR with the converted number
  }
  return ret;
}

int main() {
  ios::sync_with_stdio(false);
  cin >> n;
  while (n--) {
    cin >> ins >> s;
    if (ins[0] == 'i') {
      chk[h(s)] = true;
    } else {
      cout << (chk[h(s)] ? "yes" : "no") << endl;
    }
  }
  return 0;
}
```