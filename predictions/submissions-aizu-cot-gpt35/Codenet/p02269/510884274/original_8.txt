The program can be optimized by using a more efficient hash function and by avoiding unnecessary string copies.

1. Replace the `string` parameter in the `h()` function with a `const char*` parameter. This will allow us to avoid creating unnecessary string copies when calling the `h()` function.

2. Modify the `h()` function to use a more efficient hash function. Instead of converting each character to a number and multiplying by 5, we can use bitwise operations to achieve the same result. We can use a 2-bit representation for each character: 'A' = 00, 'C' = 01, 'G' = 10, 'T' = 11. By shifting the current hash value left by 2 bits and ORing it with the representation of the current character, we can update the hash value. This approach avoids the multiplication and addition operations.

3. Modify the `main()` function to use `const char*` instead of `string` for the `ins` and `s` variables. This will avoid unnecessary string copies when reading input.

4. Remove the `using namespace std;` line and explicitly qualify the `std` namespace in the code.

Here is the optimized code:

```cpp
#include <iostream>

bool chk[244140624];
int n;

int h(const char* s) {
  int ret = 0;
  for (int i = 0; s[i] != '\0'; ++i) {
    ret <<= 2;
    if (s[i] == 'A')
      ret |= 0;
    else if (s[i] == 'C')
      ret |= 1;
    else if (s[i] == 'G')
      ret |= 2;
    else if (s[i] == 'T')
      ret |= 3;
  }
  return ret;
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin >> n;
  while (n--) {
    char ins[2];
    std::cin >> ins;
    const char* s;
    std::cin >> s;
    if (ins[0] == 'i') {
      chk[h(s)] = true;
    } else {
      std::cout << (chk[h(s)] ? "yes" : "no") << std::endl;
    }
  }
  return 0;
}
```