To optimize the given program, we can make the following modifications:

1. Avoid unnecessary string copying: In the `h` function, the string `s` is passed by value. This means that a copy of the string is made each time the function is called. To avoid this overhead, we can pass the string by const reference instead.

2. Precompute the size of the input string: In the `h` function, the size of the input string `s` is computed in each iteration of the loop using `s.size()`. We can precompute the size of the string before the loop and store it in a variable to avoid this computation.

3. Use a switch statement instead of multiple if-else statements: In the `h` function, there are multiple if-else statements to check the character of the input string and perform corresponding calculations. We can use a switch statement instead, which can be more efficient in some cases.

4. Use a fixed-size array instead of a vector: The `chk` array is currently declared as a vector of booleans. However, the size of the vector is quite large (244140624) and it is not resized or modified during the execution of the program. We can optimize the memory usage by using a fixed-size array instead.

Here is the optimized program:

```cpp
#include <iostream>
#include <string>
using namespace std;

bool chk[244140624];
int n;
string ins, s;

int h(const string& s) {
  int ret = 0;
  int size = s.size();
  for (int i = 0; i < size; ++i) {
    ret *= 5;
    switch (s[i]) {
      case 'A':
        ret += 1;
        break;
      case 'C':
        ret += 2;
        break;
      case 'G':
        ret += 3;
        break;
      case 'T':
        ret += 4;
        break;
    }
  }
  return ret;
}

int main() {
  ios::sync_with_stdio(false);
  cin >> n;
  while (n--) {
    cin >> ins >> s;
    if (ins[0] == 'i') {
      chk[h(s)] = true;
    } else {
      cout << (chk[h(s)] ? "yes" : "no") << endl;
    }
  }
  return 0;
}
```

These optimizations should improve the runtime and memory usage of the program.