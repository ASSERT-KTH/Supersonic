Step 1: Remove unnecessary includes and typedefs that are not used in the program.

```cpp
#include <algorithm>
#include <cassert>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <vector>
using namespace std;

#define REP(i, x) for (int i = 0; i < (int)(x); i++)
#define FOR(i, c) for (__typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define ALL(container) (container).begin(), (container).end()
#define SZ(container) ((int)container.size())
#define mp(a, b) make_pair(a, b)

typedef complex<double> P;
typedef vector<int> vi;
typedef vector<P> VP;
```

Step 2: Remove unused functions and operators.

```cpp
template <class T>
ostream &operator<<(ostream &os, const vector<T> &t) {
  os << "[";
  FOR(it, t) {
    if (it != t.begin())
      os << ",";
    os << *it;
  }
  os << "]";
  return os;
}
template <class T>
ostream &operator<<(ostream &os, const set<T> &t) {
  os << "{";
  FOR(it, t) {
    if (it != t.begin())
      os << ",";
    os << *it;
  }
  os << "}";
  return os;
}
template <class S, class T>
ostream &operator<<(ostream &os, const pair<S, T> &t) {
  return os << "(" << t.first << "," << t.second << ")";
}
template <class S, class T>
pair<S, T> operator+(const pair<S, T> &s, const pair<S, T> &t) {
  return pair<S, T>(s.first + t.first, s.second + t.second);
}
template