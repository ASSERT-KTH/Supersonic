Explanation of the optimization steps:

1. The original program uses a 2D array `Cards` to keep track of the cards. However, only 4 rows and 14 columns are being used. We can optimize the memory usage by using a 2D array with size `[4][13]` instead, since the array indices start from 0.

2. In the original program, we iterate over the array `Cards` four times, once for each suit. We can combine these four loops into a single loop, which reduces the number of iterations and improves the running time.

3. The original program uses multiple if-else statements to determine the suit of the card. We can optimize this by using a switch statement instead, which can be more efficient.

4. The original program reads the card suit and number separately using two separate scanf calls. We can optimize this by reading the input as a single string and extracting the suit and number from it, which reduces the number of scanf calls and improves the running time.

5. The original program prints the cards in a specific order: S, H, C, D. We can optimize this by using a nested loop to iterate over the suits and numbers in the desired order, which reduces the number of loops and improves the running time.

Here is the optimized C/C++ program:

```c
#include <stdio.h>

int main(void) {
  int Cards[4][13] = {{0}};
  int i, j, n;
  char input[3], Mark;
  
  scanf("%d", &n);
  
  for (i = 0; i < 2 * n; i++) {
    scanf("%s", input);
    
    Mark = input[0];
    int Num = input[1] - '0';
    
    switch (Mark) {
      case 'S':
        Cards[0][Num - 1] = 1;
        break;
      case 'H':
        Cards[1][Num - 1] = 1;
        break;
      case 'C':
        Cards[2][Num - 1] = 1;
        break;
      case 'D':
        Cards[3][Num - 1] = 1;
        break;
    }
  }
  
  char suits[4] = {'S', 'H', 'C', 'D'};
  
  for (i = 0; i < 4; i++) {
    for (j = 0; j < 13; j++) {
      if (Cards[i][j] != 1) {
        printf("%c %d\n", suits[i], j + 1);
      }
    }
  }
  
  return 0;
}
```