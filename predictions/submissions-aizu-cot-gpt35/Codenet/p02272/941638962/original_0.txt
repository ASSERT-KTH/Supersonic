The given C program implements the merge sort algorithm to sort an array of integers. Here are the steps to optimize the program:

1. Reduce the size of the Left and Right arrays:
   - Currently, the Left and Right arrays are declared with a fixed size of 250001 elements each, which is more than necessary for the given problem. We can optimize the memory usage by reducing the size of these arrays to the maximum required size, which is `n/2 + 1`. This change will optimize the memory usage.

2. Remove the global variables:
   - The program uses global variables `count`, `n`, `Left`, `Right`, `i`, `j`, `k`, `n1`, and `n2`. Using global variables can lead to potential bugs and make the code less readable. We can optimize the program by removing the global variables and passing them as arguments to the functions.

3. Use a more efficient formula to calculate `n1` and `n2`:
   - Currently, `n1` is calculated as `mid - left` and `n2` is calculated as `right - mid`. These calculations require subtraction operations which can be expensive. Instead, we can calculate `n1` and `n2` using the formula `n1 = (mid - left) + 1` and `n2 = right - mid`. This change will optimize the running time.

4. Optimize the merge loop:
   - The merge loop can be optimized by removing unnecessary checks and loop conditions. Currently, the loop condition is `while (k < right)`, which means the loop continues until `k` reaches `right`. However, we can optimize this by changing the loop condition to `while (k <= right)`. This change will simplify the loop condition and optimize the running time.

Here is the optimized C program:

```c
#include <stdio.h>
#define MAX 1000000001

void mergesort(int *, int, int);
void merge(int *, int, int, int);

void mergesort(int *S, int left, int right) {
  int mid;
  if (left + 1 < right) {
    mid = (left + right) / 2;
    mergesort(S, left, mid);
    mergesort(S, mid, right);
    merge(S, left, mid, right);
  }
}

void merge(int *S, int left, int mid, int right) {
  int n1 = (mid - left) + 1;
  int n2 = right - mid;

  int Left[n1], Right[n2];

  for (int i = 0; i < n1; i++)
    Left[i] = S[left + i];
  for (int i = 0; i < n2; i++)
    Right[i] = S[mid + i];

  Left[n1 - 1] = MAX;
  Right[n2 - 1] = MAX;

  int i = 0, j = 0, k = left;

  while (k <= right) {
    if (Left[j] > Right[i])
      S[k++] = Right[i++];
    else
      S[k++] = Left[j++];
  }
}

int main(void) {
  int n;
  scanf("%d", &n);

  int S[n];

  for (int i = 0; i < n; i++)
    scanf("%d", &S[i]);

  mergesort(S, 0, n);

  for (int i = 0; i < n; i++) {
    printf("%d", S[i]);
    if (i != n - 1)
      printf(" ");
  }

  printf("\n%d\n", (n * (n - 1)) / 2);

  return 0;
}
```

Explanation of optimizations:

1. Reduced the size of the Left and Right arrays to `n/2 + 1`.
2. Removed the global variables and passed them as arguments to the functions.
3. Used the formula `(mid - left) + 1` and `right - mid` to calculate `n1` and `n2`.
4. Changed the merge loop condition to `while (k <= right)`.

These optimizations improve the memory usage and running time of the program.