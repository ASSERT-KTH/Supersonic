#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx")
#pragma comment(linker, "/stack:200000000")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T>
using ordered_multiset = tree<T, null_type, less_equal<T>, rb_tree_tag,
                              tree_order_statistics_node_update>;
#define fastio                                                                 \
  ios_base::sync_with_stdio(false);                                            \
  cin.tie(NULL);                                                               \
  cout.tie(NULL);
#define int long long
#define ld long double
#define MOD 1000000007
#define precise(i) fixed << setprecision(10) << i
#define f(i, a, b) for (int i = a; i < b; ++i)
#define endl '\n'
#define debug cout << "\n========================================\n";
#define err1(a) cout << #a << " " << a << endl;
#define err2(a, b) cout << #a << " " << a << " " << #b << " " << b << endl;
#define err3(a, b, c)                                                          \
  cout << #a << " " << a << " " << #b << " " << b << " " << #c << " " << c     \
       << endl;
#define err4(a, b, c, d)                                                       \
  cout << #a << " " << a << " " << #b << " " << b << " " << #c << " " << c     \
       << " " << #d << " " << d << endl;
#define all(a) a.begin(), a.end()
#define show(a)                                                                \
  for (auto xyz : a)                                                           \
    cout << xyz << " ";                                                        \
  cout << endl;
#define PQ priority_queue
#define LB lower_bound
#define UB upper_bound
#define fr first
#define sc second
#define sz(x) (int)(x).size()
bool dfs(int i, vector<int> &visited, vector<int> &being_visited,
         vector<int> &TS, vector<vector<int>> &g) {
  if (visited[i]) {
    return 0;
  } else if (being_visited[i]) {
    return 1;
  } else {
    being_visited[i] = 1;
    for (auto j : g[i]) {
      if (dfs(j, visited, being_visited, TS, g))
        return 1;
    }
  }
  being_visited[i] = 0;
  visited[i] = 1;
  TS.push_back(i);
  return 0;
}
void solve() {
  int n, m;
  cin >> n >> m;
  vector<int> visited(n + 1, 0), being_visited(n + 1, 0), TS;
  vector<vector<int>> g(n + 1);
  vector<set<int>> G(n + 1);
  f(i, 0, m) {
    int t, x, y;
    cin >> t >> x >> y;
    if (t)
      g[x].push_back(y);
    G[x].insert(y);
    G[y].insert(x);
  }
  f(i, 1, n + 1) {
    bool ch = 1;
    if (g[i].size() == 0 and G[i].size() > 0) {
      for (auto j : G[i]) {
        ch &= (!G[j].count(i));
      }
    } else {
      ch = 0;
    }
    if (ch) {
      for (auto j : G[i]) {
        g[i].push_back(j);
      }
    }
  }
  auto havecycle = [&]() {
    f(i, 1, n + 1) {
      if (!visited[i]) {
        if (dfs(i, visited, being_visited, TS, g)) {
          return 1;
        }
      }
    }
    return 0;
  };
  if (havecycle()) {
    cout << "NO" << endl;
    return;
  }
  reverse(all(TS));
  map<int, int> map;
  f(i, 0, n) map[TS[i]] = i;
  cout << "YES" << endl;
  f(i, 1, n + 1) {
    for (auto j : G[i]) {
      if (map[j] < map[i])
        cout << j << " " << i << endl;
    }
  }
}
signed main() {
  fastio int t = 1;
  for (cin >> t; t--; solve())
    ;
}
