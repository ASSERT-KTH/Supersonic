#include <bits/stdc++.h>
#define _                                                                      \
  ios_base::sync_with_stdio(false);                                            \
  cin.tie(NULL);                                                               \
  cout.tie(NULL);
#define int long long
const int inf = 0x3f3f3f3f3f3f3f3LL;
const int mod = (int)1e9 + 7;
using namespace std;
#if LOCAL
#include "../../tr.h"
#else
#define tr(...)
#define endl '\n'
#endif
template <class T, class T2> void smin(T &a, T2 val) {
  if (a > val)
    a = val;
}
template <class T, class T2> void smax(T &a, T2 val) {
  if (a < val)
    a = val;
}
const int N = 210;
int len[3];
vector<int> v[3];
int red, green, blue;
int dp[N][N][N];
int solve(int idx0, int idx1, int idx2) {
  if (idx0 >= (int)(v[0].size()) and idx1 >= (int)(v[1].size()) and
      idx2 >= (int)(v[2].size())) {
    return 0;
  }
  int &ans = dp[idx0][idx1][idx2];
  if (ans != -1) {
    return ans;
  }
  ans = 0;
  if (idx0 < (int)(v[0].size()) and idx1 < (int)(v[1].size())) {
    smax(ans, v[0][idx0] * v[1][idx1] + solve(idx0 + 1, idx1 + 1, idx2));
  }
  if (idx0 < (int)(v[0].size()) and idx2 < (int)(v[2].size())) {
    smax(ans, v[0][idx0] * v[2][idx2] + solve(idx0 + 1, idx1, idx2 + 1));
  }
  if (idx1 < (int)(v[1].size()) and idx2 < (int)(v[2].size())) {
    smax(ans, v[1][idx1] * v[2][idx2] + solve(idx0, idx1 + 1, idx2 + 1));
  }
  if (idx0 < (int)(v[0].size())) {
    smax(ans, solve(idx0 + 1, idx1, idx2));
  }
  if (idx1 < (int)(v[1].size())) {
    smax(ans, solve(idx0, idx1 + 1, idx2));
  }
  if (idx2 < (int)(v[2].size())) {
    smax(ans, solve(idx0, idx1, idx2 + 1));
  }
  return ans;
}
int32_t main() {
  _ for (int i = 0; i < 3; ++i) {
    cin >> len[i];
    v[i].resize(len[i]);
  }
  for (int i = 0; i < 3; ++i) {
    for (int j = 0; j < len[i]; ++j) {
      cin >> v[i][j];
    }
    sort(v[i].rbegin(), v[i].rend());
  }
  memset(dp, -1, sizeof dp);
  cout << solve(0, 0, 0);
  return 0;
}
