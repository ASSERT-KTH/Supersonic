  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
#include <bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
typedef long long int ll;
using namespace __gnu_pbds;
#define pbds                                                                   \
  tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update>
#define pb push_back
#define pf push_front
#define pob pop_back
#define pof pop_front
#define ub lower_bound
#define lb upper_bound
#define memo(aa) memset(aa, 0, sizeof(aa))
#define tc                                                                     \
  int tt;                                                                      \
  cin >> tt;                                                                   \
  while (tt--)
#define sz(a) a.size()
#define sc second
#define fs first
#define pri(b)                                                                 \
  for (auto i : b)                                                             \
    cout << i << " ";
#define all(v) v.begin(), v.end()
#define vi vector<ll>
#define pr pair<ll, ll>
#define mp make_pair
#define spi(n) fixed << setprecision(n)
#define nline "\n"
ll mod = 1e9 + 7;
ll fact[100005];
ll invfact[100005];
ll phin(ll n) {
  ll number = n;
  if (n % 2 == 0) {
    number /= 2;
    while (n % 2 == 0)
      n /= 2;
  }
  for (ll i = 3; i <= sqrt(n); i += 2) {
    if (n % i == 0) {
      while (n % i == 0)
        n /= i;
      number = (number / i * (i - 1));
    }
  }
  if (n > 1)
    number = (number / n * (n - 1));
  return number;
}
vector<ll> sieve(int n) {
  int *arr = new int[n + 1]();
  vector<ll> vect;
  for (int i = 2; i <= n; i++)
    if (arr[i] == 0) {
      vect.push_back(i);
      for (int j = 2 * i; j <= n; j += i)
        arr[j] = 1;
    }
  return vect;
}
void google(int t) { cout << "Case #" << t << ": "; }
ll modulo_pow(ll a, ll b) {
  if (b == 0)
    return 1;
  ll d = modulo_pow(a, b / 2);
  if (b & 1)
    return (d % mod * d % mod * a) % mod;
  return (d % mod * d % mod) % mod;
}
void prefact(ll l) {
  fact[0] = 1;
  for (ll i = 1; i <= l; i++) {
    fact[i] = (fact[i - 1] * i) % mod;
  }
}
void preinvfact(ll n) {
  invfact[0] = 1;
  for (int i = 1; i <= n; i++) {
    invfact[i] = modulo_pow(fact[i], mod - 2);
  }
}
ll ncr(ll n, ll r) {
  if (n < r || n < 0 || r < 0)
    return 0;
  return ((fact[n] * invfact[r]) % mod * invfact[n - r]) % mod;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
#ifndef ONLINE_JUDGE
  freopen("Input.txt", "r", stdin);
  freopen("Output.txt", "w", stdout);
#endif
  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    vector<ll> v(n, 0);
    ll d = 0;
    for (int i = 0; i < n; i++) {
      cin >> v[i];
      d ^= v[i];
    }
    ll pref[n + 1];
    pref[0] = 0;
    for (int i = 1; i <= n; i++) {
      pref[i] = pref[i - 1] ^ v[i - 1];
    }
    ll suff[n + 2];
    suff[n + 1] = 0;
    for (int i = n; i >= 1; i--) {
      suff[i] = suff[i + 1] ^ v[i - 1];
    }
    int ans = 0;
    for (int i = 1; i <= n - 1; i++) {
      if (pref[i] == suff[i + 1]) {
        ans = 1;
        break;
      }
    }
    if (ans) {
      cout << "YES" << nline;
      continue;
    } else if (d == 0 && ans == 0) {
      cout << "NO" << nline;
      continue;
    }
    ll k = 0;
    ll c = 0;
    for (int i = 0; i < n; i++) {
      k ^= v[i];
      if (k == d) {
        k = 0;
        c++;
      }
    }
    if (k == 0 && c >= 3)
      cout << "YES" << nline;
    else
      cout << "NO" << nline;
  }
  return 0;
}
