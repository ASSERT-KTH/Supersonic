```c++
#include <bits/stdc++.h>
using namespace std;
using int64 = long long;
struct UnionFind {
  vector<int> par, sz;
  UnionFind(int n) : par(n), sz(n, 1) {
    iota(par.begin(), par.end(), 0);
  }
  int find(int x) {
    if (x == par[x])
      return x;
    return par[x] = find(par[x]);
  }
  void unite(int x, int y) {
    x = find(x), y = find(y);
    if (x != y) {
      if (sz[x] < sz[y])
        swap(x, y);
      par[y] = x;
      sz[x] += sz[y];
    }
  }
  bool same(int x, int y) {
    return find(x) == find(y);
  }
};
struct edge {
  int u, v, cost, idx;
  bool operator<(const edge &e) const { return cost < e.cost; }
};
int N, M;
vector<edge> edges;
int64 all, ans[200000];
vector<int> G[100000];
int main() {
  scanf("%d %d", &N, &M);
  for (int i = 0; i < M; i++) {
    int u, v, cost;
    scanf("%d %d %d", &u, &v, &cost);
    --u, --v;
    edges.push_back({u, v, cost, i});
  }
  sort(edges.begin(), edges.end());
  UnionFind uf(N);
  for (auto &e : edges) {
    if (!uf.same(e.u, e.v)) {
      uf.unite(e.u, e.v);
      all += e.cost;
      G[e.u].push_back(e.v);
      G[e.v].push_back(e.u);
      ans[e.idx] = -1;
    } else {
      ans[e.idx] = all;
    }
  }
  if (uf.sz[uf.find(0)] != N) {
    for (int i = 0; i < M; i++)
      puts("-1");
    return 0;
  }
  for (int i = 0; i < M; i++)
    if (ans[i] != -1)
      ans[i] += edges[i].cost;
  for (int i = 0; i < M; i++)
    printf("%lld\n", ans[i]);
}
```