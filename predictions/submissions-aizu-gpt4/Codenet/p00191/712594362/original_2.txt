```C++
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

const int MAX_N = 101;
vector<vector<double>> dp(MAX_N, vector<double>(MAX_N, -1));
vector<vector<double>> t(MAX_N, vector<double>(MAX_N));

double solve(int times, int prev, int n, int m) {
    if (dp[times][prev] != -1)
        return dp[times][prev];
    if (times == m)
        return dp[times][prev] = 1;

    double tmp = -1;
    for (int i = 0; i < n; i++) {
        tmp = max(tmp, solve(times + 1, i, n, m) * (times == 0 ? 1 : t[prev][i]));
    }
    return dp[times][prev] = tmp;
}

int main() {
    int n, m;
    while (cin >> n >> m) {
        if (!(n | m))
            break;
        fill(dp.begin(), dp.end(), vector<double>(MAX_N, -1));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> t[i][j];
            }
        }
        printf("%.2lf\n", round(solve(0, 0, n, m) * 100) / 100);
    }
}
```