```
#include <cstdio>
#include <algorithm>

class Point {
public:
    int x, y;
    
    Point(int a = 0, int b = 0) : x(a), y(b) {}

    bool operator<(const Point &p) const {
        return y < p.y || (y == p.y && x < p.x);
    }
};

inline bool direct(Point &base, Point &a, Point &b) {
    return (long long)(a.x - base.x) * (b.y - base.y) - (long long)(a.y - base.y) * (b.x - base.x) < 0;
}

int main() {
    int n;
    std::scanf("%d", &n);

    Point P[n];
    for (int i = 0; i < n; ++i) 
        std::scanf("%d %d", &P[i].x, &P[i].y);

    std::sort(P, P + n);

    Point H[2*n];
    int k = 0;
    for(int phase = 0; phase < 2; ++phase) {
        int start = k;
        for(int i = 0; i < n; ++i) {
            while(k > start + 1 && direct(H[k-2], H[k-1], P[i]))
                --k;
            H[k++] = P[i];
        }
        --k;
        std::reverse(P, P + n);
    }

    std::printf("%d\n", k);
    for(int i = 0; i < k; ++i) 
        std::printf("%d %d\n", H[i].x, H[i].y);

    return 0;
}
```