```C++
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>

using namespace std;

#define int long long

struct QuickFind {
    vector<int> r, p;
    vector<vector<int>> v;

    QuickFind(int size) : r(size, 1), p(size), v(size, vector<int>(1)) {
        for (int i = 0; i < size; ++i) {
            p[i] = i;
            v[i][0] = i;
        }
    }

    bool same(int x, int y) { return p[x] == p[y]; }

    void unite(int x, int y) {
        x = p[x];
        y = p[y];
        if (x == y)
            return;
        if (r[x] < r[y])
            swap(x, y);
        r[x] += r[y];
        for (auto& i : v[y]) {
            p[i] = x;
            v[x].push_back(i);
        }
        v[y].clear();
    }
};

signed main() {
    int n;
    cin >> n;
    vector<int> a(n), b(n);
    for (auto& i : a)
        cin >> i;
    b = a;
    sort(b.begin(), b.end());

    QuickFind qf(n);
    for (int i = 0; i < n; ++i)
        qf.unite(i, distance(b.begin(), lower_bound(b.begin(), b.end(), a[i])));

    int ans = 0;
    for (int i = 0; i < n; ++i) {
        if (qf.p[i] != i || qf.v[i].size() == 1)
            continue;
        int tmp = 0, m = a[qf.v[i][0]];
        for (auto& j : qf.v[i]) {
            tmp += a[j];
            m = min(m, a[j]);
        }
        ans += min(tmp + m * (qf.v[i].size() - 2), tmp + m + b[0] * (qf.v[i].size() + 1));
    }
    cout << ans << endl;
    return 0;
}
```