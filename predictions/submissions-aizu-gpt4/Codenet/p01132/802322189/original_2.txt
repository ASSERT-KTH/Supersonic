```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> charge(int m) {
  vector<int> ans(4);
  const int divs[] = {500, 100, 50, 10};

  for(int i = 0; i < 4; i++) {
    ans[i] = m / divs[i];
    m %= divs[i];
  }
  return ans;
}

bool judge(const vector<int>& f, const vector<int>& ch) {
  return std::inner_product(f.begin(), f.end(), ch.begin(), 1, std::multiplies<>(), std::less<>()) == 1;
}

int main() {
  int N;
  vector<int> c(4), f(4), pay(4), ans(4);
  const int vals[] = {10, 50, 100, 500};

  while (cin >> N && N) {
    int sum = 0;
    for (int i = 0; i < 4; i++) {
      cin >> c[i];
      sum += c[i];
    }
    int mini = 1e9;

    for (pay[0] = 0; pay[0] <= c[0]; pay[0]++) {
      for (pay[1] = 0; pay[1] <= c[1]; pay[1]++) {
        for (pay[2] = 0; pay[2] <= c[2]; pay[2]++) {
          for (pay[3] = 0; pay[3] <= c[3]; pay[3]++) {
            int m_pay = std::inner_product(pay.begin(), pay.end(), vals, 0);
            int n_pay = std::accumulate(pay.begin(), pay.end(), 0);
            if (m_pay >= N) {
              vector<int> ch = charge(m_pay - N);
              int n_charge = std::accumulate(ch.begin(), ch.end(), 0);
              if (mini > sum - n_pay + n_charge) {
                for (int i = 0; i < 4; i++)
                  f[i] = pay[i] > 0 ? 1 : 0;
                if (judge(f, ch)) {
                  ans = pay;
                  mini = sum - n_pay + n_charge;
                }
              }
            }
          }
        }
      }
    }
    for (int i = 0; i < 4; i++)
      if (ans[i] > 0)
        cout << 10*(i+1) << " " << ans[i] << endl;
    cout << endl;
  }
}
```