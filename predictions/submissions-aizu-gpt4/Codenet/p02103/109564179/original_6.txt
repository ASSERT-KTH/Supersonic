```C++
#include<bits/stdc++.h>
#define MOD 1000000007LL
using namespace std;
typedef long long ll;
typedef pair<int, int> P;
bool flag = false;
int n, m, k, res = 2;
int x[100001], y[100001];
int cost[100001];
map<ll, int> g;

inline void bfs(int a, int b, int c, int d, int e, int f) {
  queue<int> que[2];
  memset(cost, -1, sizeof(cost));
  for (int i = a; i < b; i++) {
    ll val = (ll)i * c + d;
    if (g.find(val) != g.end()) {
      que[0].push(g[val]);
      cost[g[val]] = 0;
    }
  }
  for (int z = 0; z < 2; z++) {
    while (que[z].size()) {
      int q = que[z].front();
      que[z].pop();
      for (int i = -2; i <= 2; i++) {
        for (int j = -2; j <= 2; j++) {
          int nc = 0;
          if (abs(i) > 1 || abs(j) > 1)
            nc = 1;
          if (z == 1)
            nc = 0;
          int nx = j + x[q], ny = i + y[q];
          if (nx < e || nx >= n || ny < f || ny >= m)
            continue;
          if ((nx == 0 && ny == 0) || (nx == n - 1 && ny == m - 1))
            continue;
          if ((ny < 0 || ny >= m) || (nx < 0 || nx >= n)) {
            if (nc == 0)
              res = 0;
            if (nc == 1)
              flag = true;
            continue;
          }
          ll nval = (ll)ny * n + nx;
          if (g.find(nval) != g.end() && cost[g[nval]] == -1) {
            cost[g[nval]] = nc;
            que[nc].push(g[nval]);
          }
        }
      }
    }
  }
  if(flag)
    res = 1;
}

int main(void) {
  scanf("%d%d%d", &n, &m, &k);
  for (int i = 0; i < k; i++) {
    scanf("%d%d", &x[i], &y[i]);
    g[(ll)y[i] * n + x[i]] = i;
  }
  bfs(1, m, n, 0, 0, 0);
  bfs(1, n, 1, 0, 0, 0);
  bfs(0, n, 1, m - 1, 0, -1);
  bfs(0, m, n, n - 1, -1, 0);
  printf("%d\n", res);
  return 0;
}
```