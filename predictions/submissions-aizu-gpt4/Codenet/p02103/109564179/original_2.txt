```c++
#include <cstdio>
#include <unordered_map>
#include <queue>
#define MOD 1000000007LL
using namespace std;
typedef long long ll;
typedef pair<int, int> P;
int n, m, k;
int x[100001], y[100001];
unordered_map<ll, int> g;
int cost[100001];
bool isValid(const int& nx, const int& ny) {
  return nx >= 0 && nx < n && ny >= 0 && ny < m;
}
int bfs(int xi, int yi, int xf, int yf) {
  queue<int> que, que2;
  bool flag = false;
  fill(cost, cost + k, -1);
  for (int i = yi; i != yf; i += (yf > yi ? 1 : -1)) {
    ll val = (ll)i * n + xi;
    if (g.count(val)) {
      que.push(g[val]);
      cost[g[val]] = 0;
    }
  }
  while (!que.empty()) {
    int q = que.front();
    que.pop();
    for (int i = -2; i <= 2; ++i) {
      for (int j = -2; j <= 2; ++j) {
        int nc = (abs(i) > 1 || abs(j) > 1);
        int nx = j + x[q], ny = i + y[q];
        if (nx == xi && ny == yi) continue;
        if (nx == xf && ny == yf) continue;
        if (isValid(nx, ny)) {
          ll nval = (ll)ny * n + nx;
          if (g.count(nval) && cost[g[nval]] == -1) {
            cost[g[nval]] = nc;
            if (nc == 0)
              que.push(g[nval]);
            else
              que2.push(g[nval]);
          }
        } else {
          if (nc == 0)
            return 0;
          else
            flag = true;
        }
      }
    }
  }
  if (flag)
    return 1;
  while (!que2.empty()) {
    int q = que2.front();
    que2.pop();
    for (int i = -1; i <= 1; ++i) {
      for (int j = -1; j <= 1; ++j) {
        int nx = j + x[q], ny = i + y[q];
        if (nx == xi && ny == yi) continue;
        if (nx == xf && ny == yf) continue;
        if (isValid(nx, ny)) {
          ll nval = (ll)ny * n + nx;
          if (g.count(nval) && cost[g[nval]] == -1) {
            cost[g[nval]] = 1;
            que2.push(g[nval]);
          }
        } else {
          return 1;
        }
      }
    }
  }
  return 2;
}
int main() {
  scanf("%d%d%d", &n, &m, &k);
  for (int i = 0; i < k; ++i) {
    scanf("%d%d", &x[i], &y[i]);
    g[(ll)y[i] * n + x[i]] = i;
  }
  int res = 2;
  res = min(res, bfs(0, 0, n - 1, m - 1));
  res = min(res, bfs(n - 1, m - 1, 0, 0));
  printf("%d\n", res);
  return 0;
}
```