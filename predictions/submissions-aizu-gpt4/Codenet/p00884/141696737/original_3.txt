```cpp
#include <iostream>
#include <map>
#include <set>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

struct Group {
  string name;
  vector<string> members;
};

vector<Group> groups;
map<string, int> mp;
set<int> ed;
vector<vector<int>> involve;
vector<bool> visited;
vector<int> allnames;

vector<int> dfs(int now) {
  if (visited[now])
    return vector<int>();
  visited[now] = true;
  vector<int> ans;
  for (auto i : involve[now]) {
    if (!involve[i].empty()) {
      vector<int> a = dfs(i);
      ans.insert(ans.end(), a.begin(), a.end());
    } else {
      ans.push_back(i);
    }
  }
  return ans;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  while (1) {
    int N;
    cin >> N;
    if (!N)
      break;
    mp.clear();
    ed.clear();
    groups.clear();
    involve.clear();
    visited.clear();
    involve.resize(100000);
    visited.resize(100001, false);
    for (int i = 0; i < N; ++i) {
      string st;
      cin >> st;
      string groupname;
      vector<string> membername;
      int pre = 0;
      for (int j = 0; j < st.size(); ++j) {
        if (st[j] == ':' || st[j] == ',' || st[j] == '.') {
          string name = st.substr(pre, j - pre);
          if (st[j] == ':') {
            groupname = name;
            mp[groupname] = mp.size();
          } else {
            membername.push_back(name);
            if (!mp.count(name)) {
              mp[name] = mp.size();
            }
          }
          pre = j + 1;
        }
      }
      for (const auto &member : membername) {
        involve[mp[groupname]].push_back(mp[member]);
        ed.insert(mp[member]);
      }
    }

    allnames = dfs(0);
    sort(allnames.begin(), allnames.end());
    int ans = unique(allnames.begin(), allnames.end()) - allnames.begin();
    cout << ans << "\n";
  }
  return 0;
}
```