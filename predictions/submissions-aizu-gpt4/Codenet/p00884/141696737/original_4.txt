```C++
#include <iostream>
#include <map>
#include <set>
#include <string>
#include <vector>
using namespace std;

vector<vector<int>> involve;
vector<int> dfs(const int now, vector<bool> &used) {
  if (used[now])
    return vector<int>();
  used[now] = true;
  vector<int> ans;
  for (auto i : involve[now]) {
    auto a = dfs(i, used);
    ans.insert(ans.end(), a.begin(), a.end());
  }
  ans.push_back(now);
  return ans;
}

int main() {
  while (true) {
    int num = 0;
    map<string, int> mp;
    int N;
    cin >> N;
    if (N == 0) break;
    involve.clear();
    involve.resize(100000);
    for (int i = 0; i < N; ++i) {
      string st;
      cin >> st;
      string groupname;
      vector<string> membername;
      int pre = -1;
      for (int j = 0; j <= st.size(); ++j) {
        if (j == st.size() || st[j] == ':' || st[j] == ',' || st[j] == '.') {
          string name = st.substr(pre + 1, j - pre - 1);
          if (st[j] == ':') {
            groupname = name;
          } else {
            membername.push_back(name);
          }
          pre = j;
        }
      }
      if (mp.count(groupname) == 0) {
        mp[groupname] = num++;
      }
      for (auto &name : membername) {
        if (mp.count(name) == 0) {
          mp[name] = num++;
        }
        involve[mp[groupname]].push_back(mp[name]);
      }
    }
    vector<bool> used(num, false);
    vector<int> allnames = dfs(mp["0"], used);
    sort(allnames.begin(), allnames.end());
    int ans = unique(allnames.begin(), allnames.end()) - allnames.begin();
    cout << ans << endl;
  }
  return 0;
}
```
