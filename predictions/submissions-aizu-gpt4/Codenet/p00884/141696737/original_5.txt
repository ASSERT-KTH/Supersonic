```cpp
#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <string>
#include <algorithm>

using namespace std;

vector<vector<int>> involve;

vector<int> dfs(const int now, vector<bool>& used) {
    used[now] = true;
    vector<int> ans;
    for (auto i : involve[now]) {
        if (!used[i]) {
            vector<int> a = dfs(i, used);
            ans.insert(ans.end(), a.begin(), a.end());
        } else {
            ans.push_back(i);
        }
    }
    return ans;
}

int main() {
    while (true) {
        int N;
        cin >> N;
        if (N == 0) break;

        int num = 0;
        map<string, int> mp;
        involve.clear();
        involve.resize(100000);

        for (int i = 0; i < N; ++i) {
            string st;
            cin >> st;
            string groupname;
            vector<string> membername;
            int pre = 0;

            for (int j = 0; j < st.size(); ++j) {
                if (st[j] == ':') {
                    groupname = st.substr(0, j);
                    pre = j + 1;
                } else if (st[j] == ',' || st[j] == '.') {
                    membername.push_back(st.substr(pre, j - pre));
                    pre = j + 1;
                }
            }

            if (!mp.count(groupname)) {
                mp[groupname] = num++;
            }

            for (const auto& name : membername) {
                if (!mp.count(name)) {
                    mp[name] = num++;
                }
            }

            for (const auto& name : membername) {
                involve[mp[groupname]].push_back(mp[name]);
            }
        }

        vector<bool> used(100000, false);
        vector<int> allnames = dfs(0, used);

        sort(allnames.begin(), allnames.end());
        allnames.erase(unique(allnames.begin(), allnames.end()), allnames.end());
        cout << allnames.size() << endl;
    }

    return 0;
}
```