```
#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>

using namespace std;

vector<vector<int>> involve;
vector<int> dfs2(const int now, vector<bool> &used) {
    if (used[now])
        return {};
    used[now] = true;
    vector<int> ans;
    for (const auto &i : involve[now]) {
        if (!involve[i].empty()) {
            vector<int> a = dfs2(i, used);
            ans.insert(ans.end(), make_move_iterator(a.begin()), make_move_iterator(a.end()));
        } else {
            ans.push_back(i);
        }
    }
    return ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    while (1) {
        int num = 0;
        unordered_map<string, int> mp;
        unordered_set<int> ed;
        int N;
        cin >> N;
        if (!N)
            break;
        involve.clear();
        involve.resize(100000);
        for (int i = 0; i < N; ++i) {
            string st;
            cin >> st;
            string groupname;
            vector<string> membername;
            int pre;
            for (int j = 0; j < st.size(); ++j) {
                if (st[j] == ':') {
                    groupname = st.substr(0, j);
                    pre = j;
                } else if (st[j] == ',' || st[j] == '.') {
                    membername.push_back(st.substr(pre + 1, j - pre - 1));
                    pre = j;
                }
            }
            if (!mp.count(groupname)) {
                mp[groupname] = num++;
            }
            for (const auto &name : membername) {
                if (!mp.count(name)) {
                    mp[name] = num++;
                }
            }
            for (const auto &name : membername) {
                involve[mp[groupname]].push_back(mp[name]);
                ed.emplace(mp[name]);
            }
        }
        vector<bool> used(100001, false);
        vector<int> allnames = dfs2(0, used);
        sort(allnames.begin(), allnames.end());
        const int ans = distance(allnames.begin(), unique(allnames.begin(), allnames.end()));
        cout << ans << "\n";
    }
    return 0;
}
```