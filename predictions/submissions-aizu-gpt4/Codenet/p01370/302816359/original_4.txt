```cpp
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <queue>
#include <vector>
using namespace std;
#define m_t 60
#define max (3 * m_t * (m_t + 1) + 1)
#define zero (max / 2)

int dx[6] = {0, 1, -1, 1, -1, 0};
int dy[6] = {1, 1, 0, 0, -1, -1};

vector<bool> field(max);
int t, n;

inline int calcPos(int x, int y) {
    return zero + x + y * (m_t * 2 + m_t * 2 + 1 - abs(y)) / 2;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  while (cin >> t >> n, t) {
    fill(field.begin(), field.end(), true);
    int x, y;
    for(int i = 0; i < n; i++) {
      cin >> x >> y;
      field[calcPos(x, y)] = false;
    }
    cin >> x >> y;
    queue<pair<int, int>> q;
    q.push({x, y});
    field[calcPos(x, y)] = false;
    int ans = 0;
    while (!q.empty()) {
      int sz = q.size();
      ans += sz;
      while(sz--) {
        auto [cx, cy] = q.front();
        q.pop();
        if (ans - sz <= t) {
          for(int i = 0; i < 6; i++) {
            int nx = cx + dx[i];
            int ny = cy + dy[i];
            if (field[calcPos(nx, ny)]) {
              field[calcPos(nx, ny)] = false;
              q.push({nx, ny});
            }
          }
        }
      }
    }
    cout << ans << '\n';
  }
  return 0;
}
```