```
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

constexpr int m_t = 60;
constexpr int max = 3 * m_t * (m_t + 1) + 1;
constexpr int zero = max / 2;
constexpr int dx[6] = {0, 1, -1, 1, -1, 0};
constexpr int dy[6] = {1, 1, 0, 0, -1, -1};

vector<int> field(max);
int t, n;

inline int calcFieldIndex(int x, int y) {
    return zero + x + y * (m_t * 2 + m_t * 2 + 1 - abs(y)) / 2;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    while (cin >> t >> n, t) {
        fill(field.begin(), field.end(), 1);
        int x, y;
        for (int i = 0; i < n; ++i) {
            cin >> x >> y;
            field[calcFieldIndex(x, y)] = 0;
        }
        cin >> x >> y;
        field[calcFieldIndex(x, y)] = 0;

        queue<pair<int, int>> rt;
        rt.emplace(x, y);
        int ans = 0;
        while (!rt.empty()) {
            int cx = rt.front().first;
            int cy = rt.front().second;
            rt.pop();
            ++ans;
            if (ans < t) {
                for (int i = 0; i < 6; ++i) {
                    int nx = cx + dx[i];
                    int ny = cy + dy[i];
                    int idx = calcFieldIndex(nx, ny);
                    if (field[idx]) {
                        field[idx] = 0;
                        rt.emplace(nx, ny);
                    }
                }
            }
        }
        cout << ans << "\n";
    }
}
```