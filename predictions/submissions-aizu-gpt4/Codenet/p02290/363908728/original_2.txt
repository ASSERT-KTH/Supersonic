```cpp
#include <iostream>
#include <vector>
#include <complex>
#include <iomanip>

using D = double;
using Point = std::complex<D>;
struct Line {
  Point p1, p2;
};

D dot(const Point &a, const Point &b) {
  return real(a) * real(b) + imag(a) * imag(b);
}

Point projection(const Point &a, const Point &b) { return a * real(b / a); }

std::istream &operator>>(std::istream &is, Point &a) {
  D x, y;
  is >> x >> y;
  a = Point(x, y);
  return is;
}

std::ostream &operator<<(std::ostream &os, Point &a) {
  os << real(a) << " " << imag(a);
  return os;
}

std::istream &operator>>(std::istream &is, Line &l) {
  return is >> l.p1 >> l.p2;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout << std::fixed << std::setprecision(15);

  Line L;
  std::cin >> L;
  int Q;
  std::cin >> Q;
  std::vector<Point> queries(Q);
  for(auto& query : queries)
    std::cin >> query;
  for(const auto& query : queries){
    Point w = L.p1 + projection(L.p2 - L.p1, query - L.p1);
    std::cout << w << "\n";
  }
  return 0;
}
```