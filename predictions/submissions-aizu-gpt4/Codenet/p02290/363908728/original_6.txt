```
#include <iostream>
#include <vector>
#include <complex>
#include <iomanip>

using D = double;
const D EPS = 1e-8;
const D INF = 1e9;
using Point = std::complex<D>;

struct Line {
  Point p1, p2;
  Line(const Point &p1 = Point(), const Point &p2 = Point()) : p1(p1), p2(p2) {}
};

std::istream &operator>>(std::istream &is, Point &a) {
  D x, y;
  is >> x >> y;
  a = Point(x, y);
  return is;
}

std::ostream &operator<<(std::ostream &os, Point &a) {
  os << std::real(a) << " " << std::imag(a);
  return os;
}

std::istream &operator>>(std::istream &is, Line &l) {
  Point p1, p2;
  is >> p1 >> p2;
  l = Line(p1, p2);
  return is;
}

D dot(const Point &a, const Point &b) {
  return std::real(a) * std::real(b) + std::imag(a) * std::imag(b);
}

D cross(const Point &a, const Point &b) {
  return std::real(a) * std::imag(b) - std::imag(a) * std::real(b);
}

Point projection(const Line &l, const Point &p) { 
  D t = dot(p - l.p1, l.p2 - l.p1) / std::norm(l.p2 - l.p1);
  return l.p1 + t * (l.p2 - l.p1); 
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cout << std::fixed << std::setprecision(15);

  Line L;
  std::cin >> L;
  int Q;
  std::cin >> Q;
  while (Q--) {
    Point p;
    std::cin >> p;
    std::cout << projection(L, p) << std::endl;
  }
  return 0;
}
```