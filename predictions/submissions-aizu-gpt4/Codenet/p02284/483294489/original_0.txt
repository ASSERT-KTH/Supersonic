```C++
#include <iostream>
#include <unordered_map>
using namespace std;

struct Node {
    int key;
    Node *left, *right;
};

unordered_map<int, Node*> nodeMap;

Node* insertNode(Node* root, int key) {
    if (root == nullptr) {
        Node* node = new Node;
        node->key = key;
        node->left = node->right = nullptr;
        nodeMap[key] = node;
        return node;
    }
    if (key < root->key)
        root->left = insertNode(root->left, key);
    else if (key > root->key)
        root->right = insertNode(root->right, key);
    return root;
}

void inorder(Node* root) {
    if (root != nullptr) {
        inorder(root->left);
        cout << root->key << " ";
        inorder(root->right);
    }
}

void preorder(Node* root) {
    if (root != nullptr) {
        cout << root->key << " ";
        preorder(root->left);
        preorder(root->right);
    }
}

int main() {
    int n;
    string cmd;
    Node* root = nullptr;

    cin >> n;
    while (n--) {
        cin >> cmd;
        if (cmd == "insert") {
            int x;
            cin >> x;
            root = insertNode(root, x);
        }
        else if (cmd == "find") {
            int x;
            cin >> x;
            if (nodeMap.find(x) != nodeMap.end())
                cout << "yes" << "\n";
            else
                cout << "no" << "\n";
        }
        else if (cmd == "print") {
            inorder(root);
            cout << "\n";
            preorder(root);
            cout << "\n";
        }
    }
    return 0;
}
```