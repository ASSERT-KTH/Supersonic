```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<vector<int>> Board(102, vector<int>(102));
bool isOK;
int xs, ys, xg, yg;

void DFS(int c, int x, int y) {
    if (x < 0 || y < 0 || x >= 102 || y >= 102 || Board[x][y] != c) 
        return;

    if (x == xg && y == yg) {
        isOK = true;
        return;
    }

    Board[x][y] = 0;
    DFS(c, x + 1, y);
    DFS(c, x, y + 1);
    DFS(c, x - 1, y);
    DFS(c, x, y - 1);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int w, h;

    while (cin >> w >> h, w || h) {
        isOK = false;
        fill(Board.begin(), Board.end(), vector<int>(102, -1));

        cin >> xs >> ys >> xg >> yg;

        int n, c, d, x, y;
        cin >> n;
        
        while (n--) {
            cin >> c >> d >> x >> y;
            int wb = 2 + (!d * 2);
            int hb = 2 + (d * 2);

            for (int i = 0; i < hb; ++i) {
                fill(Board[x].begin() + y, Board[x].begin() + y + wb, c);
            }
        }

        DFS(Board[xs][ys], xs, ys);
        cout << (isOK ? "OK\n" : "NG\n");
    }

    return 0;
}
```