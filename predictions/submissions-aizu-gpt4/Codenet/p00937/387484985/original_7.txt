```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
constexpr int NMAX = 51, AMAX = 101;
int N, M;
int A[3];
vector<int> G[NMAX];
bool dp[AMAX][NMAX][NMAX];
bool visited[NMAX] = {0};
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cin >> N >> M;
  for (int i = 0; i < 3; i++)
    cin >> A[i];
  while (M--) {
    int f, t;
    cin >> f >> t;
    --f; --t;
    G[f].push_back(t);
  }
  for (int i = 0; i < N; i++)
    dp[0][i][i] = true;
  for (int a = 1; a < AMAX; a++) {
    for (int i = 0; i < N; i++) {
      for (int j : G[i]) {
        dp[a][i][j] |= dp[a - 1][i][j];
        for (int k = 0; k < N; k++)
          dp[a][i][k] |= dp[a - 1][j][k];
      }
    }
  }
  visited[N - 1] = true;
  for (int ite = 1;; ite++) {
    vector<int> next_visited;
    for (int i = 0; i < N; i++) {
      if (visited[i]) continue;
      if (all_of(A, A + 3, [i](int a) {
        return any_of(visited, visited + N, [a, i](bool v) {
          return v && dp[a][i][&v - visited];
        });
      })) {
        next_visited.push_back(i);
      }
    }
    if (!next_visited.empty()) {
      for (int i : next_visited) {
        visited[i] = true;
      }
      if (visited[0]) {
        cout << ite << "\n";
        return 0;
      }
    } else {
      break;
    }
  }
  cout << "IMPOSSIBLE\n";
  return 0;
}
```