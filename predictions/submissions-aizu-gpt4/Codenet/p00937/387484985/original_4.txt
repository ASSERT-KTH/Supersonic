```cpp
#include <iostream>
#include <vector>
#include <array>

constexpr int MAX_NODES = 51;
constexpr int MAX_DEPTH = 101;

std::array<int, 3> A;
std::vector<int> G[MAX_NODES];
bool used[MAX_NODES];
bool dp[MAX_DEPTH][MAX_NODES][MAX_NODES];

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);

  int N, M;
  std::cin >> N >> M;
  
  for (auto& a : A)
    std::cin >> a;

  for (int i = 0; i < M; ++i) {
    int f, t;
    std::cin >> f >> t;
    --f; --t;
    G[f].push_back(t);
  }

  for (int i = 0; i < N; ++i)
    dp[0][i][i] = true;

  for (int i = 1; i < MAX_DEPTH; ++i) {
    for (int j = 0; j < N; ++j) {
      for (int k = 0; k < N; ++k) {
        if (dp[i - 1][j][k]) {
          for (const auto& to : G[k]) {
            dp[i][j][to] = true;
          }
        }
      }
    }
  }

  used[N - 1] = true;
  for (int ite = 1;; ++ite) {
    bool ok = false;
    std::vector<int> idx;
    for (int i = 0; i < N; ++i) {
      if (used[i])
        continue;
      int cnt = 0;
      for (const auto& a : A) {
        for (int k = 0; k < N; ++k) {
          if (dp[a][i][k] && used[k]) {
            ++cnt;
            break;
          }
        }
      }
      if (cnt == 3) {
        ok = true;
        idx.push_back(i);
      }
    }
    if (ok) {
      for (const auto& i : idx) {
        used[i] = true;
      }
      if (used[0]) {
        std::cout << ite << "\n";
        return 0;
      }
    } else {
      break;
    }
  }
  std::cout << "IMPOSSIBLE" << "\n";
  return 0;
}
```