```C++
#include <cstdio>
#include <algorithm>

#define MAX_PACKET 100000

int num_packet;
int num_track;
int weight[MAX_PACKET];

bool canAlloc(int capacity) {
  int track_id = 0;
  int alloced_in_one = 0;
  for (int i = 0; i < num_packet; ++i) {
    if (alloced_in_one + weight[i] <= capacity) {
      alloced_in_one += weight[i];
    } else {
      alloced_in_one = weight[i];
      if (++track_id == num_track) {
        return false;
      }
    }
  }
  return true;
}

int main(void) {
  scanf("%d %d", &num_packet, &num_track);
  int max_weight = 0;
  int sum_weight = 0;
  for (int i = 0; i < num_packet; ++i) {
    scanf("%d", &weight[i]);
    max_weight = std::max(max_weight, weight[i]);
    sum_weight += weight[i];
  }
  int low = max_weight;
  int upp = sum_weight;
  while (low < upp) {
    int mid = low + (upp - low) / 2;
    if (canAlloc(mid)) {
      upp = mid;
    } else {
      low = mid + 1;
    }
  }
  printf("%d\n", low);
  return 0;
}
```