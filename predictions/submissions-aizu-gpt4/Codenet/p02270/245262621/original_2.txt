```C++
#include <algorithm>
#include <iostream>
#include <vector>

int num_packet;
int num_track;
std::vector<int> weight;

bool canAlloc(long capacity) {
  int track_id = 0;
  long alloced_in_one = 0;
  for (int i = 0; i < num_packet; ++i) {
    if (alloced_in_one + weight[i] <= capacity) {
      alloced_in_one += weight[i];
    } else {
      alloced_in_one = weight[i];
      if (++track_id == num_track) {
        return false;
      }
    }
  }
  return true;
}

int main(void) {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  std::cin >> num_packet >> num_track;
  weight.resize(num_packet);

  long long sum_weight = 0;
  for (int i = 0; i < num_packet; i++) {
    std::cin >> weight[i];
    sum_weight += weight[i];
  }

  long long low = *std::max_element(weight.begin(), weight.end());
  long long upp = sum_weight;
  while (low < upp) {
    long long mid = low + (upp - low) / 2;
    if (canAlloc(mid)) {
      upp = mid;
    } else {
      low = mid + 1;
    }
  }
  std::cout << low << "\n";
  return 0;
}
```