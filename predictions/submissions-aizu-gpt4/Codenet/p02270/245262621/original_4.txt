```c++
#include <algorithm>
#include <cstdio>
#define MAX_PACKET 100000
int num_packet;
int num_track;
int weight[MAX_PACKET];
bool canAlloc(long capacity);
int main(void) {
  scanf("%d %d", &num_packet, &num_track);
  long sum_weight = 0;
  for (int i = 0; i < num_packet; ++i) {
    scanf("%d", &weight[i]);
    sum_weight += weight[i];
  }
  long low = *std::max_element(weight, weight + num_packet);
  while (low < sum_weight) {
    long mid = low + (sum_weight - low) / 2;
    if (canAlloc(mid)) {
      sum_weight = mid;
    } else {
      low = mid + 1;
    }
  }
  printf("%ld\n", low);
  return 0;
}
bool canAlloc(long capacity) {
  int track_id = 0;
  long alloced_in_one = 0;
  for (int i = 0; i < num_packet; ++i) {
    if (alloced_in_one + weight[i] <= capacity) {
      alloced_in_one += weight[i];
    } else {
      alloced_in_one = weight[i];
      if (++track_id == num_track) {
        return false;
      }
    }
  }
  return true;
}
```