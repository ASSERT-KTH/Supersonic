```cpp
#include <algorithm>
#include <iostream>
#include <vector>
#define all(a) a.begin(), a.end()
#define PB push_back
#define MP make_pair
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vpii;
const int inf = 1e9;
struct SegTree {
  int n;
  vector<int> d;
  void init(int n_) {
    n = 1;
    while (n < n_) n *= 2;
    d.assign(2 * n, inf);
  }
  void update(int idx, int val) {
    idx += n - 1;
    d[idx] = val;
    while (idx > 0) {
      idx = (idx - 1) / 2;
      d[idx] = min(d[idx * 2 + 1], d[idx * 2 + 2]);
    }
  }
  int get_min(int a, int b, int k = 0, int l = 0, int r = -1) {
    if (r == -1) r = n;
    if (r <= a || b <= l) return inf;
    if (a <= l && r <= b) return d[k];
    int vl = get_min(a, b, k * 2 + 1, l, (l + r) / 2);
    int vr = get_min(a, b, k * 2 + 2, (l + r) / 2, r);
    return min(vl, vr);
  }
};
int X[200020], Y[200020];
signed main() {
  ios::sync_with_stdio(false);                                                 
  cin.tie(0);
  int N, d;
  cin >> N >> d;
  SegTree x_seg, y_seg;
  x_seg.init(N), y_seg.init(N);
  vpii hoge;
  for (int i = 0; i < N; ++i) {
    int x, y, b;
    cin >> x >> y >> b;
    X[i] = x, Y[i] = y;
    hoge.PB(MP(b, i));
  }
  sort(all(hoge));
  for (int i = 0; i < N; ++i) {
    x_seg.update(i, X[hoge[i].second]);
    y_seg.update(i, Y[hoge[i].second]);
  }
  ll ans = -inf;
  for (int i = 0; i < N; ++i) {
    int b = hoge[i].first;
    int idx = upper_bound(all(hoge), MP(b + d, inf)) - hoge.begin();
    int min_x = x_seg.get_min(i, idx);
    int min_y = y_seg.get_min(i, idx);
    ans = max(ans, 1ll * (X[hoge[idx-1].second] - min_x) * (Y[hoge[idx-1].second] - min_y));
  }
  cout << ans << "\n";
}
```