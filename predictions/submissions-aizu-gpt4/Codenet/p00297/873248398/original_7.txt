```C++
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

struct SegTree {
  int n;
  vector<int> data;
  void init(int n_) {
    n = 1;
    while (n < n_)
      n *= 2;
    data.assign(2*n,-1);
  }
  void update(int k, int a) {
    k += n - 1;
    data[k] = a;
    while (k > 0) {
      k = (k - 1) / 2;
      data[k] = max(data[k * 2 + 1], data[k * 2 + 2]);
    }
  }
  int query(int a, int b, int k, int l, int r) {
    if (r <= a || b <= l)
      return -1;
    if (a <= l && r <= b)
      return data[k];
    else {
      int vl = query(a, b, k * 2 + 1, l, (l + r) / 2);
      int vr = query(a, b, k * 2 + 2, (l + r) / 2, r);
      return max(vl, vr);
    }
  }
  int query(int a, int b) {
    return query(a, b, 0, 0, n);
  }
};

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  int N, d;
  cin >> N >> d;

  vector<int> X(N), Y(N);
  vector<pii> hoge(N);

  for (int i = 0; i < N; ++i) {
    int x, y, b;
    cin >> x >> y >> b;
    X[i] = x, Y[i] = y;
    hoge[i] = pii(b, i);
  }

  sort(hoge.begin(), hoge.end());

  SegTree seg_x, seg_y;
  seg_x.init(N), seg_y.init(N);

  for (int i = 0; i < N; ++i) {
    seg_x.update(i, X[hoge[i].second]);
    seg_y.update(i, Y[hoge[i].second]);
  }

  ll ans = 0;
  for(int i = 0; i < N; ++i) {
    int idx = upper_bound(hoge.begin(), hoge.end(), pii(hoge[i].first + d, INT_MAX)) - hoge.begin();
    int max_x = seg_x.query(i, idx);
    int max_y = seg_y.query(i, idx);
    ans = max(ans, 1ll * (max_x - X[hoge[i].second]) * (max_y - Y[hoge[i].second]));
  }

  cout << ans << endl;

  return 0;
}
```