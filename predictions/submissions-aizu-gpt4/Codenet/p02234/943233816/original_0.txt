```c++
#include <iostream>
#include <vector>
#include <limits>

const int INF = std::numeric_limits<int>::max();

int matrixChainOrder(const std::vector<int>& p) {
    int n = p.size() - 1;
    std::vector<std::vector<int>> m(n + 1, std::vector<int>(n + 1, 0));

    for (int l = 2; l <= n; ++l) {
        for (int i = 1; i <= n - l + 1; ++i) {
            int j = i + l - 1;
            m[i][j] = INF;
            for (int k = i; k < j; ++k) {
                int q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
                if (m[i][j] > q)
                    m[i][j] = q;
            }
        }
    }
    return m[1][n];
}

int main() {
    int n;
    std::cin >> n;

    std::vector<int> p(n + 1);
    for (int i = 0; i < n; ++i) {
        std::cin >> p[i];
        int k;
        if (i < n - 1)
            std::cin >> k;
    }
    std::cin >> p[n];

    int x = matrixChainOrder(p);
    std::cout << x << std::endl;

    return 0;
}
```