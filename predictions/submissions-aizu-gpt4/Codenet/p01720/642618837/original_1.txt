```c++
#include <cstdio>
#include <vector>
#include <queue>
#define INF (1 << 23)

int main() {
  int N, M, s, t, u, v;
  scanf("%d%d%d%d", &N, &M, &s, &t);
  s--; t--;
  std::vector<std::vector<int>> G(N);
  while (M--) {
    scanf("%d%d", &u, &v);
    G[--u].push_back(--v);
    G[v].push_back(u);
  }
  std::vector<int> d1(N, INF), d2(N, INF);
  d1[s] = d2[t] = 0;
  std::queue<int> que;
  for (que.push(s); !que.empty(); que.pop()) {
    int node = que.front();
    for (int i: G[node]) {
      if (d1[i] == INF) {
        d1[i] = d1[node] + 1;
        que.push(i);
      }
    }
  }
  for (que.push(t); !que.empty(); que.pop()) {
    int node = que.front();
    for (int i: G[node]) {
      if (d2[i] == INF) {
        d2[i] = d2[node] + 1;
        que.push(i);
      }
    }
  }
  int shortest = d1[t];
  std::vector<long long> r1(shortest, 0), r2(shortest, 0);
  for (int i = 0; i < N; ++i) {
    if (d1[i] < shortest) ++r1[d1[i]];
    if (d2[i] < shortest) ++r2[d2[i]];
  }
  long long ret = 0;
  for (int i = 0; i < shortest - 1; ++i) {
    ret += r1[i] * r2[shortest - i - 2];
  }
  printf("%lld\n", ret);
  return 0;
}
```