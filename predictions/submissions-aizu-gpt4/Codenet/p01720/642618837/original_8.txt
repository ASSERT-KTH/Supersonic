```C++
#include <vector>
#include <queue>
#include <stdio.h>
#define INF (1 << 23)

int main() {
    int N, M, s, t, u, v;
    scanf("%d %d %d %d", &N, &M, &s, &t);
    s--, t--;
    std::vector<std::vector<int>> G(N);
    for (int i = 0; i < M; i++) {
        scanf("%d %d", &u, &v);
        G[u - 1].push_back(v - 1);
        G[v - 1].push_back(u - 1);
    }
    std::vector<int> d1(N, INF), d2(N, INF);
    d1[s] = d2[t] = 0;
    std::queue<int> que;
    que.push(s);
    while (!que.empty()) {
        int node = que.front();
        que.pop();
        for (auto &n : G[node]) {
            if (d1[n] == INF) {
                d1[n] = d1[node] + 1;
                que.push(n);
            }
        }
    }
    que.push(t);
    while (!que.empty()) {
        int node = que.front();
        que.pop();
        for (auto &n : G[node]) {
            if (d2[n] == INF) {
                d2[n] = d2[node] + 1;
                que.push(n);
            }
        }
    }
    int shortest = d1[t];
    std::vector<int> r1(shortest - 1, 0), r2(shortest - 1, 0);
    for (int i = 0; i < N; i++) {
        if (d1[i] < shortest - 1) {
            r1[d1[i]]++;
        }
        if (d2[i] < shortest - 1) {
            r2[d2[i]]++;
        }
    }
    long long ret = 0;
    for (int i = 0; i < shortest - 1; i++) {
        ret += static_cast<long long>(r1[i]) * r2[shortest - i - 2];
    }
    printf("%lld\n", ret);
    return 0;
}
```