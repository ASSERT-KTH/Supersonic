```c++
#include <bits/stdc++.h>
using namespace std;

const int MAX_SIZE = 1010;

int dp[MAX_SIZE][MAX_SIZE], last_occurrence[26];
string s, t;

int damerau_levenshtein_distance() {
  int m = s.size(), n = t.size();
  for (int i = 0; i <= m; i++)
    for (int j = 0; j <= n; j++)
      dp[i][j] = (i == 0 ? j : (j == 0 ? i : 1e9));
  
  memset(last_occurrence, -1, sizeof(last_occurrence));

  for (int i = 1; i <= m; i++) {
    int prev = -1;
    for (int j = 1; j <= n; j++) {
      int k = last_occurrence[t[j - 1] - 'a'];
      int l = prev;
      if (s[i - 1] == t[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1];
        prev = j;
      } else
        dp[i][j] = min({dp[i][j], dp[i - 1][j - 1] + 1, dp[i][j - 1] + 1, dp[i - 1][j] + 1});
      if (k >= 0 && l >= 0)
        dp[i][j] = min(dp[i][j], dp[k - 1][l - 1] + (i - k - 1) + (j - l - 1) + 1);
    }
    last_occurrence[s[i - 1] - 'a'] = i;
  }

  return dp[m][n];
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  int n, d;
  while (cin >> n && n != 0) {
    cin >> d;
    vector<string> name(n);
    for (string &str : name) cin >> str;
    sort(name.begin(), name.end());

    int count = 0;
    for (int i = 0; i < n; i++) {
      for (int j = i + 1; j < n; j++) {
        s = name[i], t = name[j];
        if (damerau_levenshtein_distance() <= d) {
          cout << name[i] << "," << name[j] << "\n";
          count++;
        }
      }
    }
    cout << count << "\n";
  }

  return 0;
}
```