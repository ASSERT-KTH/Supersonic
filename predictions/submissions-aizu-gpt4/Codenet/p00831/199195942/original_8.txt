```
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#define MIN(a,b,c,d) min(min(a,b),min(c,d))

using namespace std;

int damerau_levenshtein_distance(const string &a, const string &b) {
    vector<int> da(256);
    int sz_a = a.size(), sz_b = b.size();
    vector<vector<int> > d(sz_a+2, vector<int>(sz_b+2));
    int INF = sz_a + sz_b, i, j, db;
    d[0][0] = INF;
    for(i = 0; i <= sz_a; ++i) {
        d[i+1][1] = i;
        d[i+1][0] = INF;
    }
    for(j = 0; j <= sz_b; ++j) {
        d[1][j+1] = j;
        d[0][j+1] = INF;
    }
    for(i = 1; i <= sz_a; ++i) {
        db = 0;
        for(j = 1; j <= sz_b; ++j) {
            int i1 = da[b[j-1]], j1 = db, cost;
            if (a[i-1] == b[j-1]) {
                cost = 0;
                db = j;
            } else
                cost = 1;
            d[i+1][j+1] = MIN(d[i][j] + cost, d[i+1][j] + 1, d[i][j+1] + 1, d[i1][j1] + (i - i1 - 1) + 1 + (j - j1 - 1));
        }
        da[a[i-1]] = i;
    }
    return d[sz_a+1][sz_b+1];
}

void solve(int n) {
    int d;
    vector<string> name(n);
    cin >> d;
    for(int i = 0; i < n; ++i) cin >> name[i];
    sort(name.begin(), name.end());
    int count = 0;
    for(int i = 0; i < n; ++i) {
        for(int j = i + 1; j < n; ++j) {
            if (damerau_levenshtein_distance(name[i], name[j]) > d)
                continue;
            ++count;
            cout << name[i] << "," << name[j] << endl;
        }
    }
    cout << count << endl;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.setf(ios::fixed);
    cout.precision(10);
    for (;;) {
        int n;
        cin >> n;
        if (!n)
            break;
        solve(n);
    }
    return 0;
}
```