```c++
#include <algorithm>
#include <cstdio>
#include <vector>
#include <queue>
using uint = unsigned int;

struct Edge {
    uint to;
    uint cost;
};

using Graph = std::vector<std::vector<Edge>>;

struct Dist {
    uint idx;
    uint dist;

    bool operator>(const Dist &other) const {
        return dist > other.dist;
    }
};

const uint INF = 1e9 + 7;

void dijkstra(const Graph &g, std::vector<uint>& dist) {
    dist.assign(g.size(), INF);
    std::priority_queue<Dist, std::vector<Dist>, std::greater<>> pq;
    dist[0] = 0;
    pq.push({0, 0});

    while (!pq.empty()) {
        auto [idx, d] = pq.top();
        pq.pop();

        if (dist[idx] != d) continue;

        for (auto &e : g[idx]) {
            uint nextDist = d + e.cost;
            if (nextDist < dist[e.to]) {
                dist[e.to] = nextDist;
                pq.push({e.to, nextDist});
            }
        }
    }
}

int main() {
    uint n;
    std::scanf("%u", &n);
    Graph g(n);
    uint u, k, c, v;
    for (uint i = 0; i < n; ++i) {
        std::scanf("%u %u", &u, &k);
        for (uint j = 0; j < k; ++j) {
            std::scanf("%u %u", &c, &v);
            g[u].push_back({c, v});
        }
    }
    std::vector<uint> dist;
    dijkstra(g, dist);
    for (uint i = 0; i < n; ++i) {
        std::printf("%u %u\n", i, dist[i]);
    }
}
```