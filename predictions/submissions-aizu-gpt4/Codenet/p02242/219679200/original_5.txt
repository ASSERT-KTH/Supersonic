```C++
#include <algorithm>
#include <cstdio>
#include <vector>
#include <queue>
using uint = unsigned int;
using P = std::pair<int, int>;

class Graph {
  const uint n_;
  const uint INFINIT;
  std::vector<std::vector<P>> g_;

public:
  Graph(uint n)
      : n_(n), INFINIT(100000 * (n_ - 1) + 1), g_(n_) {}

  void add_edge(uint u, uint v, uint c) { g_[u].emplace_back(v, c); }
  
  void dijkstra(uint *dist) {
    std::fill(dist, dist + n_, INFINIT);
    std::priority_queue<P, std::vector<P>, std::greater<P>> pq;
    pq.push(P(0, 0));
    dist[0] = 0;
    while(!pq.empty()) {
      P p = pq.top(); pq.pop();
      uint v = p.second;
      if (dist[v] < p.first) continue;
      for (auto &edge : g_[v]) {
        if (dist[edge.first] > dist[v] + edge.second) {
          dist[edge.first] = dist[v] + edge.second;
          pq.push(P(dist[edge.first], edge.first));
        }
      }
    }
  }
};

int main() {
  uint n;
  std::scanf("%u", &n);
  Graph g(n);
  uint u, k, c, v;
  for (auto i = 0u; i < n; ++i) {
    std::scanf("%u %u", &u, &k);
    while(k--) {
      std::scanf("%u %u", &v, &c);
      g.add_edge(u, v, c);
    }
  }
  uint dist[n];
  g.dijkstra(dist);
  for (auto i = 0u; i < n; ++i) {
    std::printf("%u %u\n", i, dist[i]);
  }
}
```