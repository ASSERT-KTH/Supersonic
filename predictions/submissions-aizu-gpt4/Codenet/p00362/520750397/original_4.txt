```cpp
#include <iostream>
#include <map>
#include <cmath>

using namespace std;
typedef long long L;

const int MAX = 2e5 + 5;
L tree[MAX], T[MAX][2], P[MAX], E[MAX], Z[MAX], H[MAX], C[MAX], A[MAX], O[MAX], X[MAX], B[MAX], k, n, a, b, c;
char s[MAX];

L read(L idx) {
    L sum = 0;
    for (; idx > 0; idx -= idx & -idx)
        sum += tree[idx];
    return sum;
}

void update(L idx, L val) {
    for (; idx <= MAX; idx += idx & -idx)
        tree[idx] += val;
}

void D(L f) {
    Z[f] = 1;
    for (map<L, L>::iterator I = T[f].begin(); I != T[f].end(); ++I) {
        L d = I->first;
        if (!Z[d]) {
            P[d] = f;
            E[d] = E[f] + 1;
            C[d] = I->second;
            D(d);
            Z[f] += Z[d];
            if (!H[f] || Z[H[f]] < Z[d]) 
                H[f] = d;
        }
    }
}

L K(L f) {
    L a = X[f], n = X[b];
    if (a - n)
        return read(O[E[a] < E[n] ? a = n, n = b, b = f, n : f]) + K(P[a]);
    else 
        return abs(read(O[f]) - read(O[b]));
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n >> k;
    for (; --n; T[a][b] = T[b][a] = c)
        cin >> a >> b >> c;
    D(a = b = 0);
    for (; n < *Z; a = H[P[++n]] - n ? n : 0)
        for (; !b || a; update(a = H[a], O[a] = ++b))
            X[a] = n;
    for (cin >> a; cin >> s >> a >> b; update(H[a], O[a]), update(a, O[a] - 1))
        *s & 2 ? cout << K(a) << endl : A[a] += b;
    return 0;
}
```