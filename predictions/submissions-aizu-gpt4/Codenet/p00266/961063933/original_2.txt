```
#include <iostream>
#include <vector>
#include <map>
using namespace std;

const int divisor = 1000000007;
const int MAX = 100001;

long long factmodary[MAX];
int word[MAX];

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    long long fact = 1;
    factmodary[0] = 1;
    for (int i = 1; i < MAX; ++i) {
        fact *= i;
        fact %= divisor;
        factmodary[i] = fact;
    }

    while (true) {
        int N, R;
        cin >> N;
        if (N == 0)
            break;
        cin >> R;

        for (int i = 0; i < N; ++i)
            word[i] = i + 1;

        for (int i = 0; i < R; ++i) {
            int s, t;
            cin >> s >> t;
            swap(word[s - 1], word[t - 1]);
        }

        map<int, int> bubblehist;
        bubblehist[word[0]] = 0;
        long long ans = factmodary[N - 1] * (word[0] - 1) % divisor;

        for (int i = 1; i < N; ++i) {
            auto it = bubblehist.lower_bound(word[i]);
            int bubblenum = (it != bubblehist.end()) ? it->second : (++bubblehist.rbegin())->second + 1;

            bubblehist[word[i]] = bubblenum;

            int facttime = word[i] - 1 - bubblenum;
            ans = (ans + factmodary[N - (i + 1)] * facttime % divisor) % divisor;
        }
        cout << ans << "\n";
    }
    return 0;
}
```