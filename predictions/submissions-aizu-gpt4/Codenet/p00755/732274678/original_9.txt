```cpp
#include <iostream>
#include <queue>
#include <string.h>
#include <vector>
using namespace std;

constexpr int MAX_SIZE = 8;
constexpr int COLORS = 6;

int w, h, Col;
typedef pair<int, int> C;
typedef vector<vector<int>> P;
P field;
int dx[4] = {0, 1, 0, -1};
int dy[4] = {1, 0, -1, 0};
int res;
P temp;
int tres = 0;

inline bool valid(int y, int x) {
  return y >= 0 && x >= 0 && x < w && y < h;
}

void calc(int y, int x) {
  if (!valid(y, x) || temp[y][x] != Col)
    return;
  tres++;
  temp[y][x] = 0;
  for (int r = 0; r < 4; r++)
    calc(y + dy[r], x + dx[r]);
}

void on(P N, int count, int c) {
  if (count == 5) {
    temp = N;
    tres = 0;
    calc(0, 0);
    res = max(res, tres);
    return;
  }
  int nc = N[0][0];
  queue<C> Q;
  Q.push(make_pair(0, 0));
  bool used[MAX_SIZE][MAX_SIZE] = {};
  while (!Q.empty()) {
    C now = Q.front();
    Q.pop();
    if (used[now.first][now.second])
      continue;
    used[now.first][now.second] = true;
    N[now.first][now.second] = c;
    for (int r = 0; r < 4; r++) {
      int ny = now.first + dy[r], nx = now.second + dx[r];
      if (valid(ny, nx) && N[ny][nx] == nc)
        Q.push(make_pair(ny, nx));
    }
  }
  for (int i = 1; i <= COLORS; i++)
    on(N, count + 1, count != 4 ? i : Col);
}

void solve() {
  res = 0;
  field.clear();
  field.resize(h, vector<int>(w));
  for (int y = 0; y < h; y++)
    for (int x = 0; x < w; x++)
      cin >> field[y][x];
  for (int i = 1; i <= COLORS; i++) {
    if (field[0][0] != i)
      on(field, 0, i);
  }
  cout << res << endl;
}

int main() {
  while (cin >> h >> w >> Col && w != 0) {
    solve();
  }
  return 0;
}
```