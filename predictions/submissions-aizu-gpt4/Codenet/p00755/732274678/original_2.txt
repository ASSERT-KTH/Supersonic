```
#include <iostream>
#include <queue>
#include <vector>
using namespace std;

constexpr int MAX = 8;
constexpr int COLORS = 6;
constexpr int DIRECTIONS = 4;

int width, height, targetColor;
int dx[DIRECTIONS] = {0, 1, 0, -1};
int dy[DIRECTIONS] = {1, 0, -1, 0};
int res;
vector<vector<int>> temp;
vector<vector<int>> board(MAX, vector<int>(MAX, 0));

void calc(int y, int x) {
  if (y < 0 || x < 0 || x >= width || y >= height || temp[y][x] != targetColor)
    return;
  temp[y][x] = 0;
  res++;
  for (int i = 0; i < DIRECTIONS; i++)
    calc(y + dy[i], x + dx[i]);
}

void on(vector<vector<int>>& N, int count, int c) {
  if (count == 5) {
    temp = N;
    res = 0;
    calc(0, 0);
    return;
  }
  queue<pair<int, int>> Q;
  Q.push({0, 0});
  vector<vector<bool>> used(MAX, vector<bool>(MAX, false));
  int nc = N[0][0];
  while (!Q.empty()) {
    auto [ny, nx] = Q.front();
    Q.pop();
    if (used[ny][nx])
      continue;
    used[ny][nx] = true;
    N[ny][nx] = c;
    for (int i = 0; i < DIRECTIONS; i++) {
      int nyNew = ny + dy[i];
      int nxNew = nx + dx[i];
      if (nyNew < 0 || nxNew < 0 || nyNew >= height || nxNew >= width || N[nyNew][nxNew] != nc)
        continue;
      Q.push({nyNew, nxNew});
    }
  }
  for (int i = 1; i <= COLORS; i++)
    on(N, count + 1, (count != 4)? i : targetColor);
}

void solve() {
  res = 0;
  for (auto& row : board)
    for (auto& cell : row)
      cin >> cell;
  for (int i = 1; i <= COLORS; i++) {
    if (board[0][0] != i)
      on(board, 0, i);
  }
  cout << res << endl;
}

int main() {
  while (cin >> height >> width >> targetColor && width)
    solve();
  return 0;
}
```