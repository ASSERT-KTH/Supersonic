```C++
#include <iostream>
#include <queue>
#include <string.h>
#include <vector>
using namespace std;

constexpr int dx[] = {0, 1, 0, -1};
constexpr int dy[] = {1, 0, -1, 0};

int w, h, Col, tres = 0;
vector<vector<int>> V;

void calc(vector<vector<int>>& temp, int y, int x) {
    if (y < 0 || x < 0 || x >= w || y >= h || temp[y][x] != Col)
        return;

    tres++;
    temp[y][x] = 0;
    for (int r = 0; r < 4; ++r)
      calc(temp, y + dy[r], x + dx[r]);
}

void on(vector<vector<int>> N, int count, int c, int& res) {
    if (count == 5) {
        tres = 0;
        calc(N, 0, 0);
        res = max(res, tres);
        return;
    }
    
    int nc = N[0][0];
    queue<pair<int, int>> Q;
    Q.push({0, 0});
    vector<vector<bool>> used(8, vector<bool>(8, false));

    while (!Q.empty()) {
        auto [y, x] = Q.front();
        Q.pop();
        if (used[y][x])
            continue;
        used[y][x] = true;
        N[y][x] = c;
        for (int r = 0; r < 4; r++) {
            int ny = y + dy[r], nx = x + dx[r];
            if (ny < 0 || nx < 0 || ny >= h || nx >= w)
                continue;
            if (N[ny][nx] == nc)
                Q.push({ny, nx});
        }
    }
    if (count != 4)
        for (int i = 1; i <= 6; i++)
            on(N, count + 1, i, res);
    else
        on(N, count + 1, Col, res);
}

void solve() {
    int res = 0;
    V.clear();
    V.resize(h, vector<int>(w));
    for (int y = 0; y < h; y++)
        for (int x = 0; x < w; x++)
            cin >> V[y][x];

    for (int i = 1; i <= 6; i++) {
        if (V[0][0] != i)
            on(V, 0, i, res);
    }
    cout << res << endl;
}

int main() {
    while (cin >> h >> w >> Col && w != 0)
        solve();
    return 0;
}
```