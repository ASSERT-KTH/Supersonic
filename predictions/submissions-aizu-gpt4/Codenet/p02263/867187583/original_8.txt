```c++
#include <algorithm>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <vector>
using namespace std;
class Stack {
public:
  Stack(int n) : s_(n), top_(-1){};
  bool isEmpty() { return top_ == -1; }
  bool isFull() { return top_ == s_.size()-1; }
  void push(int x) {
    if (!isFull()) {
      s_[++top_] = x;
    }
  }
  int pop() {
    return isEmpty() ? -1 : s_[top_--];
  }

private:
  vector<int> s_;
  int top_;
};
int main() {
  char s[1000];
  Stack stack(110);
  while (scanf("%s", s) != EOF) {
    switch(s[0]) {
        case '+':
            stack.push(stack.pop() + stack.pop());
            break;
        case '-':
            {
                int rhs = stack.pop();
                stack.push(stack.pop() - rhs);
                break;
            }
        case '*':
            stack.push(stack.pop() * stack.pop());
            break;
        default:
            stack.push(atoi(s));
            break;
    }
  }
  printf("%d\n", stack.pop());
  return 0;
}
```