```C++
#include <algorithm>
#include <cstdio>
#include <cstring>
#define INF 0x3f3f3f3f
#define LINF 0x3f3f3f3f3f3f3f3f
#define MAX_NOTE 2001
#define MAX_BEAUTY 100001
typedef long long ll;
int num_of_notes;
int num_of_beauty;
ll force_of_repulsion;
ll sum[MAX_BEAUTY];
ll dp[MAX_NOTE][MAX_NOTE];
int notes[MAX_NOTE];
ll beauty[MAX_BEAUTY];
ll compute(int i, int j) {
  ll lhs = sum[notes[i]];
  ll rhs = (!notes[j] ? 0 : sum[notes[j] - 1]);
  return (lhs - rhs) / force_of_repulsion;
}
int main() {
  while (~scanf("%d %d %lld", &num_of_notes, &num_of_beauty,
                &force_of_repulsion)) {
    for (int note_idx = 0; note_idx < num_of_notes; note_idx++) {
      scanf("%d", notes + note_idx);
      notes[note_idx]--;
    }
    memset(sum, 0, sizeof(sum));
    for (int beauty_idx = 0; beauty_idx < num_of_beauty; beauty_idx++) {
      scanf("%lld", beauty + beauty_idx);
      sum[beauty_idx] = (beauty_idx ? sum[beauty_idx - 1] : 0) + beauty[beauty_idx];
    }
    std::sort(notes, notes + num_of_notes, std::greater<int>());
    memset(dp, INF, sizeof(dp));
    dp[0][0] = 0;
    for (int i = 0; i < num_of_notes; i++) {
      int next = i + 1;
      for (int j = 0; j <= i; j++) {
        dp[next][j] = std::min(dp[next][j], dp[i][j] + compute(i, next));
        dp[next][next] = std::min(dp[next][next], dp[i][j] + compute(j, next));
      }
    }
    ll res = LINF;
    for (int i = 0; i < num_of_notes; i++) {
      res = std::min(dp[num_of_notes][i] + compute(i, num_of_notes), res);
    }
    printf("%lld\n", res);
  }
}
```