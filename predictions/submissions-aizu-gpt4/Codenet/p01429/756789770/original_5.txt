```c++
#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> P;
typedef pair<int, P> PP;
const ll INF = 1LL << 60;
const static int tx[] = {0, 1, 1, 1, 0, -1, -1, -1};
const static int ty[] = {-1, -1, 0, 1, 1, 1, 0, -1};
static const double EPS = 1e-8;
int num_of_notes;
int num_of_beauty;
ll force_of_repulsion;
ll sum[200001];
ll dp[2001][2001];
int notes[2001];
ll beauty[100001];
ll compute(int i, int j) {
  ll lhs = sum[notes[i]];
  ll rhs = (notes[j] - 1 < 0 ? 0 : sum[notes[j] - 1]);
  return (lhs - rhs) / force_of_repulsion;
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  while (cin >> num_of_notes >> num_of_beauty >> force_of_repulsion) {
    for (int note_idx = 0; note_idx < num_of_notes; note_idx++) {
      cin >> notes[note_idx];
      notes[note_idx]--;
    }
    sum[0] = 0;
    for (int beauty_idx = 0; beauty_idx < num_of_beauty; beauty_idx++) {
      cin >> beauty[beauty_idx];
      sum[beauty_idx + 1] = sum[beauty_idx] + beauty[beauty_idx];
    }
    sort(notes, notes + num_of_notes, greater<int>());
    fill((ll*)dp, (ll*)(dp + 2001), INF);
    dp[0][0] = 0;
    for (int i = 0; i < num_of_notes; i++) {
      for (int j = 0; j <= i; j++) {
        dp[i+1][j] = min(dp[i+1][j], dp[i][j] + compute(i, i + 1));
        dp[i+1][i+1] = min(dp[i+1][i+1], dp[i][j] + compute(j, i + 1));
      }
    }
    ll res = INF;
    for (int i = 0; i <= num_of_notes; i++) {
      res = min(dp[num_of_notes][i] + compute(i, num_of_notes), res);
    }
    cout << res << "\n";
  }
}
```