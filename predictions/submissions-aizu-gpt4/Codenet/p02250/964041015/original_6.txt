```cpp
#include <vector>
#include <string>
#include <algorithm>
#include <iostream>
using namespace std;

class suffix_array {
  vector<int> sa, lcp, rank;
  string s;

  void create_bucket(vector<int> &v, vector<int> &bucket, bool end) {
    fill(bucket.begin(), bucket.end(), 0);
    for (int i = 0; i < v.size(); ++i) {
      bucket[v[i]]++;
    }
    if (end) for (int i = 1; i < bucket.size(); ++i) {
      bucket[i] += bucket[i - 1];
    }
    else {
      int sum = 0;
      for (int i = 0; i < bucket.size(); ++i) {
        sum += bucket[i];
        bucket[i] = sum - bucket[i];
      }
    }
  }

  void induced_sort(vector<int> &v, vector<int> &sa, vector<int> &bucket, vector<bool> &is_l) {
    create_bucket(v, bucket, false);
    for (int i = 0; i < v.size(); ++i) {
      if (sa[i] > 0 && is_l[sa[i] - 1]) {
        sa[bucket[v[sa[i] - 1]]++] = sa[i] - 1;
      }
    }
  }

  void invert_induced_sort(vector<int> &v, vector<int> &sa, vector<int> &bucket, vector<bool> &is_l) {
    create_bucket(v, bucket, true);
    for (int i = v.size() - 1; i >= 0; --i) {
      if (sa[i] > 0 && !is_l[sa[i] - 1]) {
        sa[--bucket[v[sa[i] - 1]]] = sa[i] - 1;
      }
    }
  }

  vector<int> sa_is(vector<int> v, int mv) {
    if (v.size() == 1) {
      return vector<int>(1, 0);
    }
    vector<bool> is_l(v.size());
    vector<int> bucket(mv + 1);
    vector<int> sa(v.size(), -1);
    is_l.back() = false;
    for (int i = v.size() - 2; i >= 0; --i) {
      is_l[i] = v[i] > v[i + 1] || (v[i] == v[i + 1] && is_l[i + 1]);
    }
    create_bucket(v, bucket, true);
    for (int i = 0; i < v.size(); ++i) {
      if (i > 0 && is_l[i - 1] && !is_l[i]) {
        sa[--bucket[v[i]]] = i;
      }
    }
    induced_sort(v, sa, bucket, is_l);
    invert_induced_sort(v, sa, bucket, is_l);
    int cur = 0;
    vector<int> order(v.size(), -1);
    for (int i = 0; i < v.size(); ++i) {
      if (i > 0 && is_l[i - 1] && !is_l[i]) {
        order[i] = cur++;
      }
    }
    vector<int> next_v(cur);
    cur = -1;
    int prev = -1;
    for (int i = 0; i < v.size(); ++i) {
      if (order[sa[i]] != -1) {
        bool diff = prev == -1;
        if (!diff) {
          int p = prev;
          int q = sa[i];
          do {
            if (v[p] != v[q] || is_l[p] != is_l[q]) {
              diff = true;
              break;
            }
            if (order[p] != -1) {
              break;
            }
            ++p;
            ++q;
          } while (q < v.size());
        }
        if (diff) {
          ++cur;
          prev = sa[i];
        }
        next_v[order[sa[i]]] = cur;
      }
    }
    vector<int> re_order(next_v.size());
    fill(sa.begin(), sa.end(), -1);
    for (int i = 0; i < v.size(); ++i) {
      if (i > 0 && is_l[i - 1] && !is_l[i]) {
        sa[order[i]] = i;
        re_order[order[i]] = i;
      }
    }
    vector<int> next_sa = sa_is(next_v, cur);
    create_bucket(v, bucket, true);
    for (int i = next_sa.size() - 1; i >= 0; --i) {
      sa[--bucket[v[re_order[next_sa[i]]]]] = re_order[next_sa[i]];
    }
    induced_sort(v, sa, bucket, is_l);
    invert_induced_sort(v, sa, bucket, is_l);
    return sa;
  }

  void construct_lcp() {
    lcp.resize(s.size());
    rank.resize(s.size() + 1);
    for (int i = 0; i <= s.size(); ++i) {
      rank[sa[i]] = i;
    }
    int h = 0;
    lcp[0] = 0;
    for (int i = 0; i < s.size(); ++i) {
      int j = sa[rank[i] - 1];
      if (h > 0) {
        --h;
      }
      while (j + h < s.size() && i + h < s.size()) {
        if (s[j + h] != s[i + h]) {
          break;
        }
        ++h;
      }
      lcp[rank[i] - 1] = h;
    }
  }

public:
  void init(const string &t) {
    s = t;
    vector<int> v(s.size() + 1);
    for (int i = 0; i < s.size(); ++i) {
      v[i] = s[i];
    }
    sa = sa_is(v, *max_element(v.begin(), v.end()));
    construct_lcp();
  }

  suffix_array(const string &t) { init(t); }

  bool contain(const string &t) {
    int lb = 0, ub = s.size();
    while (ub - lb > 1) {
      int mid = (lb + ub) / 2;
      if (s.substr(sa[mid], t.size()) < t) {
        lb = mid;
      } else {
        ub = mid;
      }
    }
    return s.substr(sa[ub], t.size()) == t;
  }
};

int main() {
  string s;
  cin >> s;
  suffix_array sa(s);
  int q;
  cin >> q;
  for (int i = 0; i < q; ++i) {
    string t;
    cin >> t;
    cout << (sa.contain(t) ? 1 : 0) << "\n";
  }
  return 0;
}
```