```c++
#include <vector>
#include <algorithm>
#include <string>
#include <iostream>
#include <cassert>

class SuffixArray {
  std::string s;
  std::vector<int> sa, lcp, rank;

  void fill_bucket(const std::vector<int>& v, std::vector<int>& bucket, bool end) {
    std::fill(bucket.begin(), bucket.end(), 0);
    for (auto vi : v) bucket[vi]++;
    if (end) for (int i = 1; i < bucket.size(); ++i) bucket[i] += bucket[i - 1];
    else for (int i = 0, sum = 0; i < bucket.size(); ++i) std::swap(sum, bucket[i] += sum);
  }

  void induced_sort(const std::vector<int>& v, std::vector<int>& sa, int mv, std::vector<int>& bucket, const std::vector<bool>& is_l) {
    fill_bucket(v, bucket, false);
    for (int i = 0; i < v.size(); ++i)
      if (sa[i] > 0 && is_l[sa[i] - 1]) sa[bucket[v[sa[i] - 1]]++] = sa[i] - 1;
  }

  void invert_induced_sort(const std::vector<int>& v, std::vector<int>& sa, int mv, std::vector<int>& bucket, const std::vector<bool>& is_l) {
    fill_bucket(v, bucket, true);
    for (int i = v.size() - 1; i >= 0; --i)
      if (sa[i] > 0 && !is_l[sa[i] - 1]) sa[--bucket[v[sa[i] - 1]]] = sa[i] - 1;
  }

  std::vector<int> sa_is(std::vector<int> v, int mv) {
    int n = v.size();
    if (n == 1) return {0};

    std::vector<int> sa(n, -1);
    std::vector<int> is_l(n);
    std::vector<int> bucket(mv + 1);
    auto is_lms = [&](int x) -> bool { return x > 0 && is_l[x - 1] && !is_l[x]; };

    for (int i = n - 2; i >= 0; --i) is_l[i] = v[i] > v[i + 1] || (v[i] == v[i + 1] && is_l[i + 1]);
    fill_bucket(v, bucket, true);
    for (int i = 0; i < n; ++i)
      if (is_lms(i)) sa[--bucket[v[i]]] = i;
    induced_sort(v, sa, mv, bucket, is_l);
    invert_induced_sort(v, sa, mv, bucket, is_l);

    int cur = 0;
    std::vector<int> order(n);
    for(int i = 0; i < n; ++i)
      if (is_lms(i)) order[i] = cur++;

    std::vector<int> next_v(cur);
    cur = -1;
    int prev = -1;
    for(int i = 0; i < n; ++i) {
      if (!is_lms(sa[i])) continue;
      bool diff = false;
      for(int d = 0; d < n; ++d) {
        if (prev == -1 || v[sa[i] + d] != v[prev + d] || is_l[sa[i] + d] != is_l[prev + d]) {
          diff = true;
          break;
        } else if (d > 0 && is_lms(sa[i] + d)) break;
      }
      if (diff) {
        cur++;
        prev = sa[i];
      }
      next_v[order[sa[i]]] = cur;
    }

    std::vector<int> next_sa = sa_is(std::move(next_v), cur);
    fill_bucket(v, bucket, true);
    sa.assign(n, -1);
    for (int i = next_sa.size() - 1; i >= 0; --i)
      sa[--bucket[v[next_sa[i]]]] = next_sa[i];
    induced_sort(v, sa, mv, bucket, is_l);
    invert_induced_sort(v, sa, mv, bucket, is_l);
    return sa;
  }

  void construct_lcp() {
    int n = s.size();
    rank.resize(n + 1);
    lcp.resize(n);
    for (int i = 0; i <= n; ++i) rank[sa[i]] = i;
    int h = 0;
    lcp[0] = 0;
    for (int i = 0; i < n; ++i) {
      int j = sa[rank[i] - 1];
      if (h > 0) --h;
      while (j + h < n && i + h < n && s[j + h] == s[i + h]) ++h;
      lcp[rank[i] - 1] = h;
    }
  }

public:
  SuffixArray(const std::string& t) : s(t) {
    std::vector<int> v(s.size() + 1);
    for (int i = 0; i < s.size(); ++i) v[i] = s[i];
    sa = sa_is(std::move(v), 255);
    construct_lcp();
  }

  bool contain(const std::string& t) {
    int lb = 0, ub = s.size();
    while (ub - lb > 1) {
      int mid = (lb + ub) / 2;
      if (s.compare(sa[mid], t.size(), t) < 0) lb = mid;
      else ub = mid;
    }
    return s.compare(sa[ub], t.size(), t) == 0;
  }
};

int main() {
  std::string s;
  std::cin >> s;
  SuffixArray sa(s);
  int q;
  std::cin >> q;
  while (q--) {
    std::string t;
    std::cin >> t;
    std::cout << sa.contain(t) << std::endl;
  }
  return 0;
}
```