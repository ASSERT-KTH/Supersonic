```cpp
#include <cstdint>
#include <iostream>
#include <vector>
using namespace std;

static int compared = 0;
static vector<uint32_t> L;
static vector<uint32_t> R;

static inline void merge(vector<uint32_t>& A, uint32_t left, uint32_t mid, uint32_t right) {
  uint32_t n1 = mid - left;
  uint32_t n2 = right - mid;
  L.assign(A.begin() + left, A.begin() + mid);
  R.assign(A.begin() + mid, A.begin() + right);
  L.push_back(UINT32_MAX);
  R.push_back(UINT32_MAX);
  uint32_t i = 0, j = 0;
  for (uint32_t k = left; k < right; k++) {
    compared++;
    if (L[i] <= R[j]) {
      A[k] = L[i++];
    } else {
      A[k] = R[j++];
    }
  }
  L.clear();
  R.clear();
}

static inline void mergeSort(vector<uint32_t>& A, uint32_t left, uint32_t right) {
  if (left + 1 < right) {
    uint32_t mid = (left + right) / 2;
    mergeSort(A, left, mid);
    mergeSort(A, mid, right);
    merge(A, left, mid, right);
  }
}

int main() {
  int n;
  cin >> n;
  vector<uint32_t> A(n);
  for (auto &i : A)
    cin >> i;
  mergeSort(A, 0, n);
  for (uint32_t i = 0; i < n; ++i)
    cout << (i != 0 ? " " : "") << A[i];
  cout << '\n' << compared << endl;
  return 0;
}
```