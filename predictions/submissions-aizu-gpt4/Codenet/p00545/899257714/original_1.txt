```C++
#include <iostream>
#include <limits.h>
#include <vector>
#include <algorithm>
using namespace std;
using ll = long long;
const ll MIN = -(LONG_LONG_MAX - 1);

int main() {
  ios_base::sync_with_stdio(false); 
  cin.tie(NULL);
  int N, Q;
  ll T;
  cin >> N >> T >> Q;
  vector<ll> people(Q);
  vector<ll> A(N);
  vector<int> D(N);
  for (int i = 0; i < N; i++) {
    cin >> A[i] >> D[i];
  }
  for (int i = 0; i < Q; i++) {
    cin >> people[i];
    people[i]--;
  }
  ll east = MIN;
  ll west = MIN;
  ll t;
  for (int i = 0; i < Q; i++) {
    if (D[people[i]] == 1) {
      east = A[people[i]];
      auto it = find_if(D.begin() + people[i] + 1, D.end(), [](int d){return d==0;});
      if(it != D.end()){
        t = (east + A[it - D.begin()]) / 2;
      }
      cout << (T < abs(t - A[people[i]]) ? A[people[i]] + T : t) << endl;
    } else {
      west = A[people[i]];
      auto rit = find_if(D.rbegin() + (D.size() - people[i]), D.rend(), [](int d){return d==1;});
      if(rit != D.rend()){
        t = (west + A[D.size() - 1 - (rit - D.rbegin())]) / 2;
      }
      cout << (T < abs(A[people[i]] - t) ? A[people[i]] - T : t) << endl;
    }
  }
  return 0;
}
```