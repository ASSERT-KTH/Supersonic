```cpp
#include <iostream>
#include <queue>
#define N 51
#define M 4
using namespace std;
struct po {
  int lx, ly, rx, ry;
};
int w, h, dx[M] = {0, 0, 1, -1}, dy[M] = {1, -1, 0, 0};
char mp[2][N][N];
bool visited[N][N][N][N];
inline bool bfs(int lx, int ly, int rx, int ry) {
  queue<po> Q;
  Q.push({lx, ly, rx, ry});
  while (!Q.empty()) {
    po t = Q.front();
    Q.pop();
    int cnt = (mp[0][t.ly][t.lx] == '%') + (mp[1][t.ry][t.rx] == '%');
    if (cnt == 2) return true;
    if (visited[t.lx][t.ly][t.rx][t.ry] || cnt == 1) continue;
    visited[t.lx][t.ly][t.rx][t.ry] = 1;
    for (int i = 0; i < M; ++i) {
      int flg = 0, nlx = t.lx + dx[i], nly = t.ly + dy[i];
      int nrx = t.rx - dx[i], nry = t.ry - dy[i];
      if (nlx < 0 || nlx >= w || nly < 0 || nly >= h || mp[0][nly][nlx] == '#')
        nlx = t.lx, nly = t.ly, ++flg;
      if (nrx < 0 || nrx >= w || nry < 0 || nry >= h || mp[1][nry][nrx] == '#')
        nrx = t.rx, nry = t.ry, ++flg;
      if (flg < 2) Q.push({nlx, nly, nrx, nry});
    }
  }
  return false;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  while (cin >> w >> h && w && h) {
    for (int i = 0; i < h; ++i) cin >> mp[0][i] >> mp[1][i];
    int lx, ly, rx, ry;
    for (int i = 0; i < h; ++i)
      for (int j = 0; j < w; ++j) {
        if (mp[0][i][j] == 'L') lx = j, ly = i;
        if (mp[1][i][j] == 'R') rx = j, ry = i;
      }
    fill(&visited[0][0][0][0], &visited[0][0][0][0] + sizeof(visited), 0);
    cout << (bfs(lx, ly, rx, ry) ? "Yes\n" : "No\n");
  }
  return 0;
}
```