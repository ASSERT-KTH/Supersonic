```c++
#include <bits/stdc++.h>
using namespace std;
const int INF = 1e9;

struct Node {
    int value, priority, cnt, small;
    Node *left, *right;
    Node(int v) : value(v), priority(rand()), cnt(1), small(v), left(NULL), right(NULL) {}
};

class Treap {
private:
    Node* root = NULL;

    int count(Node* t) {
        return t ? t->cnt : 0;
    }

    int mini(Node* t) {
        return t ? t->small : INF;
    }

    Node* update(Node* t) {
        if(!t) return NULL;
        t->cnt = count(t->left) + count(t->right) + 1;
        t->small = min({mini(t->left), mini(t->right), t->value});
        return t;
    }

    Node* merge(Node* l, Node* r) {
        if(!l || !r) return l ? l : r;
        if(l->priority > r->priority) {
            l->right = merge(l->right, r);
            return update(l);
        } else {
            r->left = merge(l, r->left);
            return update(r);
        }
    }

    pair<Node*, Node*> split(Node* t, int k) {
        if(!t) return make_pair((Node*) NULL, (Node*) NULL);
        if(k <= count(t->left)) {
            auto s = split(t->left, k);
            t->left = s.second;
            return make_pair(s.first, update(t));
        } else {
            auto s = split(t->right, k - count(t->left) - 1);
            t->right = s.first;
            return make_pair(update(t), s.second);
        }
    }

    Node* insert(Node* t, int k, int val) {
        auto s = split(t, k);
        t = merge(s.first, new Node(val));
        return merge(t, s.second);
    }

    Node* erase(Node* t, int k) {
        auto s1 = split(t, k + 1);
        auto s2 = split(s1.first, k);
        return merge(s2.first, s1.second);
    }

    Node* find(Node* t, int k) {
        if (!t) return NULL;
        int c = count(t->left);
        if (k < c) return find(t->left, k);
        if (k > c) return find(t->right, k - c - 1);
        return t;
    }

    int rmq(Node* t, int l, int r) {
        if(!t || l >= count(t) || r <= 0) return INF;
        if(l <= 0 && r >= count(t)) return t->small;
        int size = count(t->left);
        int m = min(rmq(t->left, l, r), rmq(t->right, l - size - 1, r - size - 1));
        return l <= size && size < r ? min(m, t->value) : m;
    }

public: 
    void insert(int k, int v) {
        root = insert(root, k, v);
    }

    void erase(int k) {
        root = erase(root, k);
    }

    Node* find(int k) {
        return find(root, k);
    }

    int rmq(int l, int r) {
        return rmq(root, l, r);
    }

    pair<Node*, Node*> split(int k) {
        return split(root, k);
    }

    void merge(Node* l, Node* r) {
        root = merge(l, r);
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    int n, q;
    cin >> n >> q;

    Treap treap;
    for(int i = 0, a; i < n; ++i) {
        cin >> a;
        treap.insert(i, a);
    }

    while(q--) {
        int x, y, z;
        cin >> x >> y >> z;
        if(x == 0) {
            z++;
            auto a = treap.split(y);
            auto b = treap.split(z - 1);
            auto c = treap.split(z);
            treap.merge(a.first, b.second);
            treap.merge(c.first, a.second);
            treap.merge(c.second);
        } else if(x == 1) {
            cout << treap.rmq(y, z + 1) << '\n';
        } else {
            treap.erase(y);
            treap.insert(y, z);
        }
    }

    return 0;
}
```