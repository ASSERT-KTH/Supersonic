```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

class RMQ {
public:
  using type = int;
  static type id() { return INT_MAX; }
  static type op(type l, type r) { return min(l, r); }
};

class avl_tree {
public:
  struct node {
    RMQ::type val, all;
    node *ch[2];
    int dep, size;
    node(RMQ::type v, node *l = nullptr, node *r = nullptr)
        : val(v), all(v), ch{l, r}, dep(1), size(1) {}
  };

private:
  node *root;

  int depth(node *t) const { return t ? t->dep : 0; }
  int count(node *t) const { return t ? t->size : 0; }
  RMQ::type que(node *t) const { return t ? t->all : RMQ::id(); }

  node *update(node *t) {
    t->dep = max(depth(t->ch[0]), depth(t->ch[1])) + 1;
    t->size = count(t->ch[0]) + 1 + count(t->ch[1]);
    t->all = RMQ::op(que(t->ch[0]), RMQ::op(t->val, que(t->ch[1])));
    return t;
  }

  node *rotate(node *t, int b) {
    node *s = t->ch[1 - b];
    t->ch[1 - b] = s->ch[b];
    s->ch[b] = t;
    return update(s);
  }

  node *balance(node *t) {
    if (depth(t->ch[0]) - depth(t->ch[1]) == 2) {
      if (depth(t->ch[0]->ch[1]) > depth(t->ch[0]->ch[0])) {
        t->ch[0] = rotate(t->ch[0], 0);
      }
      t = rotate(t, 1);
    } else if (depth(t->ch[0]) - depth(t->ch[1]) == -2) {
      if (depth(t->ch[1]->ch[0]) > depth(t->ch[1]->ch[1])) {
        t->ch[1] = rotate(t->ch[1], 1);
      }
      t = rotate(t, 0);
    }
    return update(t);
  }

  node *insert(int k, RMQ::type v, node *t) {
    if (!t)
      return new node(v);
    int c = count(t->ch[0]);
    if (k <= c)
      t->ch[0] = insert(k, v, t->ch[0]);
    else
      t->ch[1] = insert(k - (c + 1), v, t->ch[1]);
    return balance(t);
  }

  node *erase(node *t) {
    if (!t->ch[0] && !t->ch[1])
      return nullptr;
    if (!t->ch[0] || !t->ch[1])
      return t->ch[t->ch[0] == nullptr];
    int c = count(t->ch[0]);
    node *s = find(t->ch[1], 0);
    s->ch[0] = t->ch[0];
    s->ch[1] = erase(t->ch[1], 0);
    return balance(update(s));
  }

  node *erase(int k, node *t) {
    if (!t)
      return t;
    int c = count(t->ch[0]);
    if (k < c) {
      t->ch[0] = erase(k, t->ch[0]);
    } else if (k > c) {
      t->ch[1] = erase(k - (c + 1), t->ch[1]);
    } else {
      t = erase(t);
    }
    return balance(t);
  }

  node *find(int k, node *t) const {
    if (!t)
      return t;
    int c = count(t->ch[0]);
    return k < c ? find(k, t->ch[0]) : k == c ? t : find(k - (c + 1), t->ch[1]);
  }

  RMQ::type find(int l, int r, node *t) const {
    if (!t || r <= 0 || t->size <= l)
      return RMQ::id();
    if (l <= 0 && t->size <= r)
      return t->all;
    int c = count(t->ch[0]);
    return RMQ::op(find(l, r, t->ch[0]),
                 RMQ::op((l <= c && c < r ? t->val : RMQ::id()),
                       find(l - (c + 1), r - (c + 1), t->ch[1])));
  }

public:
  avl_tree() : root(nullptr) {}

  void insert(int k, RMQ::type v) { root = insert(k, v, root); }
  void erase(int k) { root = erase(k, root); }
  RMQ::type find(int k) const { return find(k, root)->val; }
  RMQ::type find(int l, int r) const { return find(l, r, root); }
};

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  int n, q;
  cin >> n >> q;

  avl_tree tree;
  for (int i = 0; i < n; ++i) {
    int a;
    cin >> a;
    tree.insert(i, a);
  }

  while (q--) {
    int x, y, z;
    cin >> x >> y >> z;
    if (x == 0) {
      int val = tree.find(z);
      tree.erase(z);
      tree.insert(y, val);
    } else if (x == 1) {
      cout << tree.find(y, z + 1) << "\n";
    } else {
      tree.erase(y);
      tree.insert(y, z);
    }
  }

  return 0;
}
```