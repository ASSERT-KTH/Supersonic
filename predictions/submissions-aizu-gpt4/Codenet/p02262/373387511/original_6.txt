```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> G;

void insertionSort(int* a, int g, int& cnt, int n) {
    for (int i = g; i < n; ++i) {
        int j = i;
        int v = a[i];
        while (j >= g && a[j - g] > v) {
            a[j] = a[j - g];
            j = j - g;
            ++cnt;
        }
        a[j] = v;
    }
}

void shellSort(int* a, int n) {
    int cnt = 0;
    for (int h = 1; ;) {
        if (h > n)
            break;
        G.push_back(h);
        h = 3 * h + 1;
    }
    for (int i = G.size() - 1; i >= 0; --i) {
        insertionSort(a, G[i], cnt, n);
    }
    cout << G.size() << "\n";
    for (auto it = G.rbegin(); it != G.rend(); ++it) {
        if(it != G.rbegin()) cout << " ";
        cout << *it;
    }
    cout << "\n" << cnt << "\n";
    for (int i = 0; i < n; ++i) {
        cout << a[i] << "\n";
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
    cin >> n;
    vector<int> a(n);
    for (int& element : a) {
        cin >> element;
    }
    shellSort(a.data(), n);
    return 0;
}
```