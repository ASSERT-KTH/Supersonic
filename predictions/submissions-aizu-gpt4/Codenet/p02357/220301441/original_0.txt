```c++
#include <vector>
#include <iostream>
#include <algorithm>
#include <limits>

class StaticRMQ {
    std::vector<int> data;
    std::vector<std::vector<int>> sparse_table;
    std::vector<int> log_table;

public:
    StaticRMQ(const std::vector<int>& array) {
        data = array;
        int n = array.size();
        int logn = std::log2(n) + 1;
        log_table.resize(n + 1, 0);
        sparse_table.resize(n, std::vector<int>(logn, std::numeric_limits<int>::max()));
        for (int i = 2; i <= n; i++)
            log_table[i] = log_table[i / 2] + 1;
        for (int i = 0; i < n; i++)
            sparse_table[i][0] = array[i];
        for (int j = 1; j < logn; j++)
            for (int i = 0; i + (1 << j) <= n; i++)
                sparse_table[i][j] = std::min(sparse_table[i][j - 1],
                                               sparse_table[i + (1 << (j - 1))][j - 1]);
    }

    int operator()(int begin, int end) {
        int j = log_table[end - begin + 1];
        return std::min(sparse_table[begin][j], sparse_table[end - (1 << j) + 1][j]);
    }
};

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    int n, l;
    std::cin >> n >> l;
    std::vector<int> a(n);
    for (int& ai : a) std::cin >> ai;
    StaticRMQ S(a);
    for (int i = 0; i < n - l + 1; i++) {
        if (i > 0) std::cout << " ";
        std::cout << S(i, i + l - 1);
    }
    std::cout << "\n";
    return 0;
}
```