```c++
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
const int MAX_T = 3000;

vector<int> dice(6), N;
int M, start, goal;

bool isPositionValid(int p) { return 0 <= p && p < M; }

int MakePath(int from, vector<int>& path, vector<bool>& visit) {
    if(visit[from]) return path[from];
    visit[from] = true;
    int bestpath = MAX_T;
    if (from == goal)
        bestpath = 0;
    else {
        for (int r = 0; r < 6; r++) {
            int moveto = from + dice[r];
            if (isPositionValid(moveto))
                bestpath = min(bestpath, MakePath(moveto + N[moveto], path, visit) + 1);
            moveto = from - dice[r];
            if (isPositionValid(moveto))
                bestpath = min(bestpath, MakePath(moveto + N[moveto], path, visit) + 1);
        }
    }
    path[from] = bestpath;
    return bestpath;
}

int main() {
    cin >> M;
    for (int r = 0; r < 6; r++)
        cin >> dice[r];
    cin >> start >> goal;
    start--, goal--;

    N.resize(M);
    for (int m = 0; m < M; m++)
        cin >> N[m];

    vector<int> path(M, MAX_T);
    vector<bool> visit(M, false);
    MakePath(start, path, visit);

    int position = start;
    for (int t = 0; t < MAX_T; t++) {
        if (position == goal)
            break;
        int r;
        cin >> r;
        int d = dice[r - 1];
        auto tryMove = [&path](int moveto, int path_before, int &position) -> bool {
            if (isPositionValid(moveto)) {
                if (path_before > path[moveto + N[moveto]]) {
                    position = moveto + N[moveto];
                    return true;
                }
            }
            return false;
        };
        int output;
        if (tryMove(position + d, path[position], position))
            output = 1;
        else if (tryMove(position - d, path[position], position))
            output = -1;
        else
            output = 0;
        cout << output << endl;
    }
    return 0;
}
```