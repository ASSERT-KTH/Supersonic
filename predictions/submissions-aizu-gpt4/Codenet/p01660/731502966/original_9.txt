```c++
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const int INF = 1e9;
const int MAX = 300;
int N, start, goal, dice[6];
vector<int> adj[MAX], dist(MAX, INF);

void bfs(int start) {
    queue<int> q;
    dist[start] = 0;
    q.push(start);
    while (!q.empty()) {
        int here = q.front();
        q.pop();
        for (int i = 0; i < adj[here].size(); ++i) {
            int there = adj[here][i];
            if (dist[there] == INF) {
                q.push(there);
                dist[there] = dist[here] + 1;
            }
        }
    }
}

int main() {
    cin >> N;
    for (int i = 0; i < 6; ++i) cin >> dice[i];
    cin >> start >> goal;
    --start; --goal;

    vector<int> a(N);
    for (int i = 0; i < N; ++i) cin >> a[i];

    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < 6; ++j) {
            int next = i + dice[j];
            if (next < N) {
                adj[i].push_back(next + a[next]);
            }
            next = i - dice[j];
            if (next >= 0) {
                adj[i].push_back(next + a[next]);
            }
        }
    }

    bfs(start);

    for (int t = 0; t < MAX; ++t) {
        if (start == goal) break;
        int r; cin >> r;
        int d = dice[r - 1];
        int next = start + d;
        if (next < N && dist[start] > dist[next + a[next]]) {
            cout << 1 << '\n';
            start = next + a[next];
        }
        else {
            next = start - d;
            if (next >= 0 && dist[start] > dist[next + a[next]]) {
                cout << -1 << '\n';
                start = next + a[next];
            }
            else {
                cout << 0 << '\n';
            }
        }
    }

    return 0;
}
```
