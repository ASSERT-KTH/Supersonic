```cpp
#include <iostream>
#include <vector>
#include <string>
using namespace std;

const int MAXN = 12;
const int MAXS = 5000;

bool dp[MAXS + 1][(1 << MAXN) + 1];
vector<int> head[MAXS + 1];

void solve() {
    int n, m;
    cin >> n >> m;
    if(n == 0 && m == 0) exit(0);

    vector<string> E(n);
    vector<int> sum(1 << n);
    string T;
    for(auto &e : E) cin >> e;
    for(int i = 0; i < m; ++i) {
        string temp;
        cin >> temp;
        T += temp;
    }

    for(int mask = 1; mask < (1 << n); ++mask) {
        for(int i = 0; i < n; ++i) {
            if((mask >> i) & 1) sum[mask] += E[i].size();
        }
    }

    for(int i = 0; i < T.size(); ++i) {
        for(int j = 0; j < n; ++j) {
            if(E[j] == T.substr(i, E[j].size())) {
                dp[i + E[j].size()][1 << j] = true;
                head[i + E[j].size()].push_back(1 << j);
            }
        }
    }

    int ans = 0;
    for(int i = T.size(); i >= 0; --i) {
        for(int mask = 1; mask < (1 << n); ++mask) {
            if(dp[i][mask] || i + sum[mask] > T.size()) continue;
            for(int submask : head[i]) {
                if((mask & submask) && dp[i + sum[submask]][mask ^ submask]) {
                    dp[i][mask] = true;
                    break;
                }
            }
        }
        if(dp[i][(1 << n) - 1]) ++ans;
    }

    cout << ans << "\n";
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    while(true) solve();
    return 0;
}
```