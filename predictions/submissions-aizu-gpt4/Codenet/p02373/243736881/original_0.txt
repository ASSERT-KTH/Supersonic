```C++
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
const int B = 200;
int par[100010], depth[100010], top[100010], goUp[100010], color[100010];
vector<vector<int>> g;
void decomp(int root) {
  vector<bool> vis(100010, false);
  queue<int> q; q.push(root);
  vector<int> tord;
  while (!q.empty()) {
    int v = q.front(); q.pop();
    vis[v] = true; tord.push_back(v);
    for (auto& c : g[v]) {
      if (!vis[c]) { q.push(c); par[c] = v; depth[c] = depth[v] + 1; }
    }
  }
  q = {}; vis = vector<bool>(100010, false);
  int c = 0; 
  for (auto& u : tord) {
    if (vis[u]) continue;
    for(int k = 0; k < B && !q.empty(); ++k) {
      int v = q.front(); q.pop();
      vis[v] = true; color[v] = c; goUp[v] = par[u]; top[v] = u;
      for (auto& c : g[v]) if (!vis[c]) q.push(c);
    }
    q = {}; c++;
  }
}
int solve(int u, int v) {
  while (color[u] != color[v]) {
    if (depth[top[u]] > depth[top[v]]) u = goUp[u];
    else v = goUp[v];
  }
  while (u != v) {
    if (depth[u] > depth[v]) u = par[u];
    else v = par[v];
  }
  return u;
}
int main() {
  int n; cin >> n;
  g.resize(n);
  rep(i, n) {
    int k; cin >> k;
    g[i].resize(k);
    for(auto& c : g[i]) { cin >> c; par[c] = i; }
  }
  decomp(0);
  int q; cin >> q;
  while(q--) { int u, v; cin >> u >> v; cout << solve(u, v) << '\n'; }
  return 0;
}
```