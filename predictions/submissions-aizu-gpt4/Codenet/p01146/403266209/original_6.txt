```c++
#include <vector>
#include <set>
#include <limits>
#include <iostream>

constexpr int INF = std::numeric_limits<int>::max() / 2;

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    int n, m, l, k, a, h;
    while (std::cin >> n >> m >> l >> k >> a >> h && n) {
        std::vector<std::vector<int>> distance(n, std::vector<int>(n, INF));
        std::set<int> locations = {a, h};

        for (int i = 0; i < l; ++i) {
            int location;
            std::cin >> location;
            locations.insert(location);
        }

        for (int i = 0; i < k; ++i) {
            int from, to, time;
            std::cin >> from >> to >> time;
            distance[from][to] = distance[to][from] = time;
        }

        for (int mid = 0; mid < n; ++mid) {
            for (int from = 0; from < n; ++from) {
                for (int to = 0; to < n; ++to) {
                    distance[from][to] = std::min(distance[from][to], distance[from][mid] + distance[mid][to]);
                }
            }
        }

        std::vector<std::vector<int>> distance2 = distance;

        for (int from : locations) {
            for (int to : locations) {
                if (distance[from][to] <= m) {
                    distance2[from][to] = distance[from][to];
                }
            }
        }

        for (int mid = 0; mid < n; ++mid) {
            for (int from = 0; from < n; ++from) {
                for (int to = 0; to < n; ++to) {
                    distance2[from][to] = std::min(distance2[from][to], distance2[from][mid] + distance2[mid][to]);
                }
            }
        }

        if (distance2[a][h] >= INF) {
            std::cout << "Help!\n";
        } else if (distance2[a][h] < m) {
            std::cout << distance2[a][h] << '\n';
        } else {
            std::cout << distance2[a][h] * 2 - m << '\n';
        }
    }
}
```