```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <complex>
#include <iomanip>

using namespace std;

typedef pair<double, double> pdd;

const double EPS = 1e-8;
const double PI = acos(-1);

inline void modify(double &seta) {
  if (seta > PI)
    seta -= 2 * PI;
  if (seta < -PI)
    seta += 2 * PI;
}

inline bool in_upper(const double &seta) { return (EPS < seta && seta < PI - EPS); }

inline bool comp(const pdd &a, const pdd &b) {
  return abs(a.first - b.first) < EPS ? a.second + EPS < b.second : a.first < b.first;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);

  int n, k;
  cin >> n >> k;
  
  vector<pdd> v;
  v.reserve(2000);
  
  for (int i = 0; i < n; i++) {
    double x, y, r;
    cin >> x >> y >> r;
    complex<double> c(x, y);
    double d = abs(c), s = arg(c), a = sqrt(d * d - r * r);
    double ds = acos((d * d + a * a - r * r) / (2 * d * a));
    double start = s - ds, end = s + ds;
    modify(start);
    modify(end);
    pdd tmp = pdd(in_upper(start) ? start : 0, in_upper(end) ? end : PI);
    if (tmp.first < EPS && PI - EPS < tmp.second)
      continue;
    v.push_back(tmp);
  }
  sort(v.begin(), v.end(), comp);
  
  vector<int> max_r(v.size()), max_l(v.size());
  
  auto it = v.begin();
  while(it != v.end()) {
    auto jt = it + 1;
    while(jt != v.end() && jt->first - EPS < it->first && it->second < jt->second + EPS)
      ++jt;
    it = v.erase(it, jt);
  }
  
  int m = v.size();
  for (int i = 0; i < m; i++) {
    pdd dummy(v[i].second, 0);
    max_l[i] = upper_bound(v.begin(), v.end(), dummy, comp) - v.begin();
    max_r[i] = max_l[i] - 1;
  }
  
  vector<vector<double>> dp1(m + 1, vector<double>(k + 1, 0)), dp2 = dp1;
  
  for (int i = 0; i < m; i++) {
    for (int j = 0; j < k + 1; j++) {
      dp1[i + 1][j] = max(dp1[i + 1][j], dp1[i][j]);
      if (j + 1 <= k) {
        double use = max(dp1[i][j], dp2[i][j]);
        dp1[max_l[i]][j + 1] = max(dp1[max_l[i]][j + 1], use + v[i].second - v[i].first);
        if (max_r[i] != i) {
          dp2[max_r[i]][j + 1] = max(dp2[max_r[i]][j + 1], use + v[max_r[i]].first - v[i].first);
        }
      }
    }
  }
  
  double ans = *max_element(dp1[m].begin(), dp1[m].end());
  cout << fixed << setprecision(10) << ans / PI << "\n";
  return 0;
}
```