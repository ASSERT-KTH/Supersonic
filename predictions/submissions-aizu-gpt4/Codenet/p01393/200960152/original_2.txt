```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <complex>
#include <iomanip>

typedef double D;
typedef std::pair<D, D> pdd;
typedef std::vector<D> vd;
const D EPS = 1e-8;
const D PI = acos(-1);

inline void modify(D &seta) {
    if (seta > PI)
        seta -= 2 * PI;
    if (seta < -PI)
        seta += 2 * PI;
}

inline bool in_upper(const D &seta) { return (EPS < seta && seta < PI - EPS); }

inline bool comp(const pdd &a, const pdd &b) {
    return abs(a.first - b.first) < EPS ? a.second + EPS < b.second : a.first < b.first;
}

int main() {
    std::ios::sync_with_stdio(false);
    int n, k;
    std::cin >> n >> k;
    std::vector<pdd> v;
    for (int i = 0; i < n; ++i) {
        D x, y, r;
        std::cin >> x >> y >> r;
        std::complex<D> c(x, y);
        D d = abs(c), s = arg(c), a = sqrt(d * d - r * r);
        D ds = acos((d * d + a * a - r * r) / (2 * d * a));
        D start = s - ds, end = s + ds;
        modify(start);
        modify(end);
        pdd tmp = pdd(in_upper(start) ? start : 0, in_upper(end) ? end : PI);
        if (!(tmp.first < EPS && PI - EPS < tmp.second)) {
            v.push_back(tmp);
        }
    }
    std::sort(v.begin(), v.end(), comp);
    for (int i = 0; i < v.size(); ++i) {
        for (int j = 0; j < v.size(); ++j) {
            if (i == j)
                continue;
            if (v[j].first - EPS < v[i].first && v[i].second < v[j].second + EPS) {
                v.erase(v.begin() + i);
                --i;
                break;
            }
        }
    }
    int m = v.size();
    std::vector<int> max_l(m), max_r(m);
    for (int i = 0; i < m; ++i) {
        pdd dummy(v[i].second, 0);
        max_l[i] = upper_bound(v.begin(), v.end(), dummy, comp) - v.begin();
        max_r[i] = max_l[i] - 1;
    }
    std::vector<vd> dp1(m + 1, vd(k + 1, 0)), dp2 = dp1;
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j <= k; ++j) {
            dp1[i + 1][j] = std::max(dp1[i + 1][j], dp1[i][j]);
            if (j + 1 <= k) {
                D use = std::max(dp1[i][j], dp2[i][j]);
                dp1[max_l[i]][j + 1] = std::max(dp1[max_l[i]][j + 1], use + v[i].second - v[i].first);
                if (max_r[i] != i) {
                    dp2[max_r[i]][j + 1] = std::max(dp2[max_r[i]][j + 1], use + v[max_r[i]].first - v[i].first);
                }
            }
        }
    }
    D ans = 0;
    for (int i = 0; i <= k; ++i) ans = std::max(ans, dp1[m][i]);
    std::cout << std::fixed << std::setprecision(10) << ans / PI << "\n";
    return 0;
}
```