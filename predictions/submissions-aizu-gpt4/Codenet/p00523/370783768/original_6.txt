```c++
#include <algorithm>
#include <cstdio>
#include <iterator>
using namespace std;
typedef long long int64;
const int64 INF = 1LL << 58;
int N, A[200000];
int64 sum[400000];

bool Find(const int &pos, const int64 &size) {
  auto begin = sum + pos + 1, end = sum + 2 * N;
  auto hoge = lower_bound(begin, end, sum[pos] + size);
  if (hoge == end)
    return false;
  auto fuga = lower_bound(hoge + 1, end, *hoge + size);
  if (fuga == end)
    return false;
  return lower_bound(fuga + 1, end, *fuga + size) != end;
}

bool calc(int64 size) {
  return any_of(sum, sum + N, [=](int64){ return Find(&sum - sum, size); });
}

int main() {
  scanf("%d", &N);
  for (int i = 0; i < N; i++) {
    scanf("%d", A + i);
    A[N + i] = A[i];
  }
  partial_sum(A, A + 2 * N, sum);
  int64 low = 0, high = INF;
  while (high - low > 1) {
    int64 mid = (low + high) >> 1;
    (calc(mid) ? low : high) = mid;
  }
  printf("%lld\n", low);
}
```