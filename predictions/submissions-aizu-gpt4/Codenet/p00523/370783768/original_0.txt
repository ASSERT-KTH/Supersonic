```cpp
#include <algorithm>
#include <cstdio>
using namespace std;
typedef long long int64;
const int64 INF = 1LL << 58;
int N, A[200000];
int64 sum[200000];
bool Find(const int pos, const int64 &size) {
  auto beg = sum + pos + 1;
  auto end = sum + 2 * N;
  auto it1 = lower_bound(beg, end, sum[pos] + size);
  if (it1 == end)
    return false;
  auto it2 = lower_bound(it1 + 1, end, *it1 + size);
  if (it2 == end)
    return false;
  return lower_bound(it2 + 1, end, *it2 + size) != end;
}
bool calc(int64 size) {
  for (int pos = 0; pos < N; pos++) {
    if (Find(pos, size))
      return true;
  }
  return false;
}
int main() {
  scanf("%d", &N);
  for (int i = 0; i < N; i++) {
    scanf("%d", A + i);
    A[N + i] = A[i];
  }
  sum[0] = A[0];
  for (int i = 1; i < 2 * N; i++) {
    sum[i] = sum[i - 1] + A[i];
  }
  int64 low = 0, high = INF;
  while (high - low > 1) {
    int64 mid = (low + high) >> 1;
    if (calc(mid))
      low = mid;
    else
      high = mid;
  }
  printf("%lld\n", low);
}
```