```c++
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
typedef long long int64;
const int64 INF = 1LL << 58;
vector<int64> A, sum;
int N;
bool Find(const int &pos, const int64 &size) {
  auto beginIter = sum.begin() + pos + 1;
  auto endIter = beginIter + N;
  auto hoge = lower_bound(beginIter, endIter, sum[pos] + size);
  if (hoge == endIter)
    return false;
  auto fuga = lower_bound(hoge + 1, endIter, *hoge + size);
  if (fuga == endIter)
    return false;
  auto foo = lower_bound(fuga + 1, endIter, *fuga + size);
  return (foo != endIter);
}
bool calc(int64 size) {
  for (int pos = 0; pos < N; pos++) {
    if (Find(pos, size))
      return true;
  }
  return false;
}
int main() {
  cin >> N;
  A.resize(2*N);
  sum.resize(2*N);
  for (int i = 0; i < N; i++) {
    cin >> A[i];
    A[N + i] = A[i];
  }
  sum[0] = A[0];
  for (int i = 1; i < 2 * N; i++) {
    sum[i] = sum[i - 1] + A[i];
  }
  int64 low = 0, high = INF;
  while (high != low) {
    int64 mid = (low + high + 1) >> 1;
    if (calc(mid))
      low = mid;
    else
      high = mid - 1;
  }
  cout << low << endl;
}
```
