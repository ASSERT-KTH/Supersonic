```cpp
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <iostream>
#include <vector>
#define EPS 1e-10
#define F first
#define S second
#define COUNTER_CLOCKWISE 1
#define CLOCKWISE -1
#define ONLINE_BACK 2
#define ONLINE_FRONT -2
#define ON_SEGMENT 0
using namespace std;
struct P {
  double x, y;
  P(double x = 0, double y = 0) : x(x), y(y) {}
  P operator+(P p) { return P(x + p.x, y + p.y); }
  P operator-(P p) { return P(x - p.x, y - p.y); }
  P operator*(double p) { return P(x * p, y * p); }
  bool operator<(const P &p) const {
    return x != p.x ? x < p.x : y < p.y;
  }
};
typedef pair<P, P> Segment;
double dot(P a, P b) { return a.x * b.x + a.y * b.y; }
double cross(P a, P b) { return a.x * b.y - a.y * b.x; }
double norm(P p) { return p.x * p.x + p.y * p.y; }
int ccw(P p, P q, P r) {
  P a = q - p;
  P b = r - p;
  if (cross(a, b) > EPS) return COUNTER_CLOCKWISE;
  if (cross(a, b) < -EPS) return CLOCKWISE;
  if (dot(a, b) < -EPS) return ONLINE_BACK;
  if (norm(a) < norm(b)) return ONLINE_FRONT;
  return ON_SEGMENT;
}
bool isIntersect(P p1, P p2, P p3, P p4) {
  return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);
}
P crosspoint(P a, P b, P c, P d) {
  a = b - a;
  c = d - c;
  return d - c * cross(a, b - d) / cross(a, c);
}
int main() {
  int n;
  while (cin >> n && n) {
    int field = 1;
    vector<Segment> pos(n);
    for (int i = 0; i < n; i++) {
      cin >> pos[i].F.x >> pos[i].F.y >> pos[i].S.x >> pos[i].S.y;
      for (int j = 0; j < i; j++) {
        if (isIntersect(pos[i].F, pos[i].S, pos[j].F, pos[j].S)) {
          P cp = crosspoint(pos[i].F, pos[i].S, pos[j].F, pos[j].S);
          if (abs(cp.x) < 100 && abs(cp.y) < 100) {
            field++;
          }
        }
      }
      field++;
    }
    cout << field << endl;
  }
  return 0;
}
```