```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int MAX_N = 24;
int n;
int x[MAX_N], y[MAX_N], r[MAX_N], c[MAX_N];
bool memo[1 << MAX_N];

inline int square(int x) {
    return x * x;
}

bool ok(int a, int bit) {
    for (int i = 0; i < a; i++) {
        if (!(bit >> i & 1))
            continue;
        if (square(x[i] - x[a]) + square(y[i] - y[a]) < square(r[i] + r[a]))
            return false;
    }
    return true;
}

int dfs(int bit) {
    if (memo[bit])
        return __builtin_popcount(bit);
    memo[bit] = true;
    int ret = __builtin_popcount(bit);
    for (int i = 0; i < n; i++) {
        if (!(bit >> i & 1) || !ok(i, bit))
            continue;
        for (int j = i + 1; j < n; j++) {
            if (!(bit >> j & 1) || c[i] != c[j])
                continue;
            if (ok(j, bit)) {
                int to_bit = bit ^ (1 << i) ^ (1 << j);
                ret = max(ret, dfs(to_bit));
            }
        }
    }
    return ret;
}

void solve() {
    fill(memo, memo + (1 << n), false);
    cout << dfs((1 << n) - 1) << endl;
}

bool input() {
    cin >> n;
    if (!n)
        return false;
    for (int i = 0; i < n; i++)
        cin >> x[i] >> y[i] >> r[i] >> c[i];
    return true;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    while (input())
        solve();
    return 0;
}

```