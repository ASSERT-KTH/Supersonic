```c++
#include <cstdio>
#include <algorithm>
#include <vector>
using namespace std;

int main() {
    long long w, h, L;
    scanf("%lld %lld %lld", &w, &h, &L);
    vector<long long> LXY[2];
    LXY[0].reserve(L);
    LXY[1].reserve(L);
    for(long long i = 0; i < L; ++i) {
        long long x, y;
        scanf("%lld %lld", &x, &y);
        LXY[0].push_back(x);
        LXY[1].push_back(y);
    }

    sort(LXY[0].begin(), LXY[0].end());
    sort(LXY[1].begin(), LXY[1].end());

    if (L == 1) {
        printf("0\n");
        printf("%lld %lld\n", LXY[0][0], LXY[1][0]);
        return 0;
    }

    long long HL = (L + 1) / 2;
    long long oxy[2][2] = { { LXY[0][HL - 1], LXY[1][HL - 1] }, { LXY[0][HL], LXY[1][HL] } };
    long long dx = (oxy[0][0] == oxy[1][0]) ? 1 : 2;
    long long dy = (oxy[0][1] == oxy[1][1]) ? 1 : 2;
    long long osum = 1LL<<62, ox = 0, oy = 0;
    for (long long f2 = 0; f2 < dx; ++f2) {
        for (long long f3 = 0; f3 < dy; ++f3) {
            long long sum = 0, max = 0;
            for (long long i = 0; i < L; ++i) {
                long long temp = abs(LXY[0][i] - oxy[f2][0]) + abs(LXY[1][i] - oxy[f3][1]);
                sum += temp;
                max = std::max(max, temp);
            }
            sum = 2 * sum - max;
            if (sum < osum) {
                osum = sum;
                ox = oxy[f2][0];
                oy = oxy[f3][1];
            }
        }
    }
    printf("%lld\n", osum);
    printf("%lld %lld\n", ox, oy);

    return 0;
}
```