```c++
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

#define rep(i, n) for (int i = 0; i < n; i++)
#define INF 999999999
#define EPS (1e-10)

class P {
public:
    double x, y;

    P(double _x = 0, double _y = 0) : x(_x), y(_y) {}

    P operator+(P p) { return P(x + p.x, y + p.y); }

    P operator-(P p) { return P(x - p.x, y - p.y); }

    bool operator==(const P &p) const {
        return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;
    }

    double norm() const { return x * x + y * y; }

    double abs() const { return sqrt(norm()); }
};

bool cmp_x(const P &p, const P &q) {
    if (p.x != q.x) return p.x < q.x;
    return p.y < q.y;
}

double cross(P a, P b) { return a.x * b.y - a.y * b.x; }

std::vector<P> convex_hull(std::vector<P> ps) {
    int n = ps.size(), k = 0;
    sort(ps.begin(), ps.end(), cmp_x);
    std::vector<P> qs(n * 2);
    for (int i = 0; i < n; qs[k++] = ps[i++])
        while (k > 1 && cross((qs[k - 1] - qs[k - 2]), (ps[i] - qs[k - 1])) <= 0) k--;
    for (int i = n - 2, t = k; i >= 0; qs[k++] = ps[i--])
        while (k > t && cross((qs[k - 1] - qs[k - 2]), (ps[i] - qs[k - 1])) <= 0) k--;
    qs.resize(k - 1);
    return qs;
}

int main() {
    int N;
    while (std::cin >> N && N) {
        std::vector<P> ps(N);
        rep(i, N) {
            char ch;
            std::cin >> ps[i].x >> ch >> ps[i].y;
        }
        std::vector<P> res = convex_hull(ps);
        std::cout << N - res.size() << std::endl;
    }
}
```