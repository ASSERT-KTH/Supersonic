```
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
#define rep(i, n) for (ll i = 0; i < (ll)(n); i++)
#define all(a) (a).begin(), (a).end()
#define vi vector<int>
#define pb push_back
#define INF 999999999
#define EPS (1e-10)

struct P {
  double x, y;
  P(double _x = 0, double _y = 0) : x(_x), y(_y) {}
  P operator+(const P &p) const { return P(x + p.x, y + p.y); }
  P operator-(const P &p) const { return P(x - p.x, y - p.y); }
  P operator*(double k) const { return P(x * k, y * k); }
  P operator/(double k) const { return P(x / k, y / k); }
  bool operator<(const P &p) const { return x != p.x ? x < p.x : y < p.y; }
  bool operator==(const P &p) const { return x == p.x && y == p.y; }
  double norm() const { return x * x + y * y; }
  double abs() const { return sqrt(norm()); }
};

typedef P Vector;
double cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }

vector<P> convex_hull(P *ps, int n) {
  sort(ps, ps + n);
  int k = 0;
  vector<P> qs(n * 2);
  for (int i = 0; i < n; i++) {
    while (k > 1 && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < 0) k--;
    qs[k++] = ps[i];
  }
  for (int i = n - 2, t = k; i >= 0; i--) {
    while (k > t && cross(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) < 0) k--;
    qs[k++] = ps[i];
  }
  qs.resize(k - 1);
  return qs;
}

#define MAX_N 100
int N;
P ps[MAX_N];

int main() {
  while (cin >> N && N) {
    for (int i = 0; i < N; i++) {
      cin >> ps[i].x >> ps[i].y;
    }
    vector<P> res = convex_hull(ps, N);
    cout << N - res.size() << endl;
  }
}
```