```cpp
#include <iostream>
#include <vector>
#include <limits>
#include <string>
#include <sstream>

using namespace std;

#define MAX 100000

struct edge {
    int s, t, d;
};

vector<edge> edges(MAX);
int d[MAX];

int BellmanFord(int startVertex, int vNum, int eNum) {
    fill(d, d + vNum, numeric_limits<int>::max());
    d[startVertex] = 0;
    bool update;
    for (int i = 0; i < vNum; ++i) {
        update = false;
        for (int j = 0; j < eNum; ++j) {
            edge &e = edges[j];
            if (d[e.s] != numeric_limits<int>::max() && d[e.t] > d[e.s] + e.d) {
                d[e.t] = d[e.s] + e.d;
                update = true;
                if (i == vNum - 1) {
                    cout << "NEGATIVE CYCLE" << endl;
                    return -1;
                }
            }
        }
        if (!update)
            break;
    }
    return 0;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int vNum, eNum;
    cin >> vNum >> eNum;

    for (int i = 0; i < eNum; ++i) {
        cin >> edges[i].s >> edges[i].t >> edges[i].d;
    }

    stringstream ans;
    for (int i = 0; i < vNum; ++i) {
        if (BellmanFord(i, vNum, eNum) == -1) {
            return 0;
        }

        for (int j = 0; j < vNum; ++j) {
            if (j > 0)
                ans << " ";
            if (d[j] == numeric_limits<int>::max()) {
                ans << "INF";
            } else
                ans << d[j];
        }
        ans << "\n";
    }
    cout << ans.str();
}
```