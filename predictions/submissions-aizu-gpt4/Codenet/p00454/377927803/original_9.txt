```c++
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <cstring>

using namespace std;

#define REP(i, n) for (int i = 0; i < (n); i++)

constexpr int dx[4] = {-1, 0, 1, 0};
constexpr int dy[4] = {0, -1, 0, 1};

vector<int> compress(int *x1, int *x2, int w, int n) {
  vector<int> xs;
  REP(i, n) {
    for (int d = -1; d <= 1; ++d) {
      int tx1 = x1[i] + d, tx2 = x2[i] + d;
      if (0 <= tx1 && tx1 <= w)
        xs.push_back(tx1);
      if (0 <= tx2 && tx2 <= w)
        xs.push_back(tx2);
    }
  }
  sort(xs.begin(), xs.end());
  xs.erase(unique(xs.begin(), xs.end()), xs.end());
  REP(i, n) {
    x1[i] = lower_bound(xs.begin(), xs.end(), x1[i]) - xs.begin();
    x2[i] = lower_bound(xs.begin(), xs.end(), x2[i]) - xs.begin();
  }
  return xs;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  int w, h, n;
  while (cin >> w >> h, w) {
    cin >> n;
    vector<vector<bool>> fld(1005 * 6 + 2, vector<bool>(1005 * 6 + 2, false));
    vector<int> x1(n), x2(n), y1(n), y2(n);
    REP(i, n) { cin >> x1[i] >> y1[i] >> x2[i] >> y2[i]; }
    auto xs = compress(x1.data(), x2.data(), w, n);
    auto ys = compress(y1.data(), y2.data(), h, n);
    REP(i, n) {
      for (int y = y1[i]; y < y2[i]; ++y) {
        for (int x = x1[i]; x < x2[i]; ++x) {
          fld[y][x] = true;
        }
      }
    }
    int ans = 0;
    REP(y, ys.size() - 1) REP(x, xs.size() - 1) {
      if (fld[y][x])
        continue;
      ans++;
      queue<pair<int, int>> q;
      q.push({y, x});
      while (q.size()) {
        auto p = q.front();
        q.pop();
        REP(i, 4) {
          int ny = p.first + dy[i], nx = p.second + dx[i];
          if (ny < 0 || ny >= ys.size() - 1 || nx < 0 || nx >= xs.size() - 1 || fld[ny][nx])
            continue;
          fld[ny][nx] = true;
          q.push({ny, nx});
        }
      }
    }
    cout << ans << "\n";
  }
}
```