```cpp
#include <vector>
#include <iostream>
#define rep(i, buckets, y) for (int i = (buckets); i < (y); ++i)

using i64 = int64_t;
struct sqrt_decomp {
  const int bucket_size = 256;
  int length, bucket_num;
  std::vector<std::vector<int>> buckets;
  std::vector<int> update, bucket_sum;
  sqrt_decomp(const std::vector<int> &x) : length(x.size()), bucket_num((x.size() + bucket_size - 1) / bucket_size) {
    buckets.resize(bucket_num);
    update.resize(bucket_num, 2);
    bucket_sum.resize(bucket_num);
    for (int i = 0; i < x.size(); ++i) {
      buckets[i / bucket_size].push_back(x[i]);
      bucket_sum[i / bucket_size] += x[i];
    }
  }
  int sum() {
    int res = 0;
    for (int i = 0; i < bucket_num; ++i) {
      res += update[i] == 2 ? bucket_sum[i] : update[i] * buckets[i].size();
    }
    return res;
  }
  void query(int l, int r, int b) {
    l = std::max(0, l);
    r = std::min(length - 1, r);
    while (l % bucket_size != 0 && l <= r) {
      int bucket_index = l / bucket_size;
      if (update[bucket_index] < 2) {
        bucket_sum[bucket_index] = update[bucket_index] * buckets[bucket_index].size();
        std::fill(buckets[bucket_index].begin(), buckets[bucket_index].end(), update[bucket_index]);
      }
      bucket_sum[bucket_index] += b - buckets[bucket_index][l % bucket_size];
      buckets[bucket_index][l % bucket_size] = b;
      ++l;
    }
    int start_bucket = l / bucket_size;
    int end_bucket = r / bucket_size;
    if (start_bucket <= end_bucket) {
      for (int i = start_bucket; i <= end_bucket; ++i) {
        update[i] = b;
        bucket_sum[i] = b * buckets[i].size();
      }
    }
    while (l <= r) {
      int bucket_index = r / bucket_size;
      bucket_sum[bucket_index] += b - buckets[bucket_index][r % bucket_size];
      buckets[bucket_index][r % bucket_size] = b;
      --r;
    }
  }
  int at(int i) {
    int bucket_index = i / bucket_size;
    return update[bucket_index] < 2 ? update[bucket_index] : buckets[bucket_index][i % bucket_size];
  }
};

void solve() {
  int n, q;
  std::string s;
  std::cin >> n >> s >> q;
  std::vector<int> x1(n), x2(n - 1);
  rep(i, 0, n) {
    x1[i] = s[i] - '0';
    if (i + 1 < n) {
      x2[i] = (s[i] - '0') * (s[i + 1] - '0');
    }
  }
  sqrt_decomp f(x1), g(x2);
  for (int i = 0; i < q; i++) {
    int l, r, b;
    std::cin >> l >> r >> b;
    --l; --r;
    f.query(l, r, b);
    if (b == 0) {
      g.query(l - 1, r, 0);
    } else {
      if (l > 0 and f.at(l - 1)) --l;
      if (r < n - 1 and f.at(r + 1)) ++r;
      g.query(l, r - 1, 1);
    }
    std::cout << f.sum() - g.sum() << '\n';
  }
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);
  std::cout.precision(10);
  solve();
  return 0;
}

```