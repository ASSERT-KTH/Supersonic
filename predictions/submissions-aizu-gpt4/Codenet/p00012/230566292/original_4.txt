```cpp
#include <cstdio>
#include <complex>
using namespace std;
using Point = complex<double>;

double cross_prod(const Point &a, const Point &b) { return imag(conj(a) * b); }
double dot_prod(const Point &a, const Point &b) { return real(conj(a) * b); }

enum CCWiseState {
  ONLINE_FRONT = -2,
  CLOCKWISE,
  ON_SEGMENT,
  COUNTER_CLOCKWISE,
  ONLINE_BACK,
};

CCWiseState ccwise(const Point &a, const Point &b, const Point &c) {
  auto b1 = b - a;
  auto c1 = c - a;
  if (cross_prod(b1, c1) > 0) return COUNTER_CLOCKWISE;
  if (cross_prod(b1, c1) < 0) return CLOCKWISE;
  if (dot_prod(b1, c1) < 0) return ONLINE_BACK;
  if (norm(b1) < norm(c1)) return ONLINE_FRONT;
  return ON_SEGMENT;
}

bool testcase_ends() {
  double x, y;
  if (scanf("%lf %lf", &x, &y) == EOF)
    return 1;
  Point A(x, y);
  scanf("%lf %lf", &x, &y);
  Point B(x, y);
  scanf("%lf %lf", &x, &y);
  Point C(x, y);
  scanf("%lf %lf", &x, &y);
  Point P(x, y);
  CCWiseState tmp = ccwise(A, P, B);
  if (tmp != ccwise(B, P, C) || tmp != ccwise(C, P, A)) {
    printf("NO\n");
    return 1;
  }
  printf("YES\n");
  return 0;
}

int main() {
  while (!testcase_ends());
  return 0;
}
```