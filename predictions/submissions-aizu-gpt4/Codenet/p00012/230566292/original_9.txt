```c++
#include <cstdio>
#include <complex>
#include <vector>
using namespace std;
using Point = complex<double>;
double cross(const Point &a, const Point &b) { return imag(conj(a)*b); }
double dot(const Point &a, const Point &b) { return real(conj(a)*b); }
enum CCWiseState {
  ONLINE_FRONT = -2,
  CLOCKWISE,
  ON_SEGMENT,
  COUNTER_CLOCKWISE,
  ONLINE_BACK,
};
CCWiseState ccwise(Point a, Point b, Point c) {
  b -= a;
  c -= a;
  if (cross(b, c) > 0) {
    return COUNTER_CLOCKWISE;
  } else if (cross(b, c) < 0) {
    return CLOCKWISE;
  } else if (dot(b, c) < 0) {
    return ONLINE_BACK;
  } else if (norm(b) < norm(c)) {
    return ONLINE_FRONT;
  } else {
    return ON_SEGMENT;
  }
}
int main() {
  double x, y;
  while(scanf("%lf %lf", &x, &y) != EOF) {
    Point A(x, y);
    scanf("%lf %lf", &x, &y);
    Point B(x, y);
    scanf("%lf %lf", &x, &y);
    Point C(x, y);
    scanf("%lf %lf", &x, &y);
    Point P(x, y);
    CCWiseState tmp = ccwise(A, P, B);
    if (tmp != ccwise(B, P, C) || tmp != ccwise(C, P, A)) {
        printf("NO\n");
    } else {
        printf("YES\n");
    }
  }
  return 0;
}
```