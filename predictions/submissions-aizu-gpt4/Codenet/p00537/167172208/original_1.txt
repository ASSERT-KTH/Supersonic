```c++
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct SegmentTree {
  int sz;
  vector<int> seg, lazy;
  SegmentTree(int n) {
    sz = 1;
    while (sz < n) sz <<= 1;
    seg.resize(sz << 1, 0);
    lazy.resize(sz << 1, 0);
  }
  void pushDown(int idx, int l, int r) {
    if (lazy[idx] != 0) {
      seg[idx] += (r - l + 1) * lazy[idx];
      if (l != r) {
        lazy[idx << 1] += lazy[idx];
        lazy[(idx << 1) + 1] += lazy[idx];
      }
      lazy[idx] = 0;
    }
  }
  void updateRange(int idx, int l, int r, int ql, int qr, int val) {
    pushDown(idx, l, r);
    if (ql > r || qr < l) return;
    if (ql <= l && r <= qr) {
      lazy[idx] += val;
      pushDown(idx, l, r);
    } else {
      int mid = (l + r) >> 1;
      updateRange(idx << 1, l, mid, ql, qr, val);
      updateRange((idx << 1) + 1, mid + 1, r, ql, qr, val);
      seg[idx] = seg[idx << 1] + seg[(idx << 1) + 1];
    }
  }
  int query(int idx, int l, int r, int ql, int qr) {
    pushDown(idx, l, r);
    if (ql > r || qr < l) return 0;
    if (ql <= l && r <= qr) return seg[idx];
    int mid = (l + r) >> 1;
    return query(idx << 1, l, mid, ql, qr) +
           query((idx << 1) + 1, mid + 1, r, ql, qr);
  }
  void updateRange(int l, int r, int val) { updateRange(1, 0, sz - 1, l, r, val); }
  int query(int l, int r) { return query(1, 0, sz - 1, l, r); }
};
int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL);
  int N, M, P[100000];
  cin >> N >> M;
  SegmentTree segtree(N);
  for (int i = 0; i < M; i++) {
    cin >> P[i];
    --P[i];
  }
  for (int i = 1; i < M; i++) {
    int u = min(P[i - 1], P[i]), v = max(P[i - 1], P[i]);
    segtree.updateRange(u, v, 1);
  }
  long long ret = 0;
  for (int i = 0; i < N - 1; i++) {
    long long used = segtree.query(i, i + 1);
    int A, B, C;
    cin >> A >> B >> C;
    ret += min(used * A, C + used * B);
  }
  cout << ret << "\n";
  return 0;
}
```