```c++
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int MAX_N = 5002;
int n;
int t[10002];
int dp[MAX_N][2], tmp[MAX_N][2];
inline int minCost(const int &a, const int &b) {
  return min(a, b);
}
int solve() {
  fill(&tmp[0][0], &tmp[0][0] + sizeof(tmp) / sizeof(int), -1);
  tmp[0][1] = tmp[1][0] = 0;
  for (int i = 1; i < n; i++) {
    fill(&dp[0][0], &dp[0][0] + sizeof(dp) / sizeof(int), -1);
    for (int j = 0; j <= i && j <= n / 2; j++) {
      for (int pre = 0; pre < 2; pre++) {
        if (tmp[j][pre] == -1)
          continue;
        for (int next = 0; next < 2; next++) {
          int& dp_ref = next == 0 ? dp[j + 1][next] : dp[j][next];
          int cost = pre == next ? 0 : t[i - 1];
          dp_ref = minCost(dp_ref, tmp[j][pre] + cost);
        }
      }
    }
    memcpy(tmp, dp, sizeof(dp));
  }
  return minCost(dp[n / 2][0], dp[n / 2][1]);
}
int main() {
  scanf("%d", &n);
  for (int i = 0; i < n - 1; i++) {
    scanf("%d", &t[i]);
  }
  printf("%d\n", solve());
}
```