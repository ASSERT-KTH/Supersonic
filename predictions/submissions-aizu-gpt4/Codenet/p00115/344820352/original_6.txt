```cpp
#include <iostream>
#include <cmath>
#include <string>

class Point3d {
public:
  double x, y, z;

  Point3d(double x = 0, double y = 0, double z = 0) : x(x), y(y), z(z) {}

  Point3d operator+(const Point3d &a) const {
    return Point3d(x + a.x, y + a.y, z + a.z);
  }

  Point3d operator-(const Point3d &a) const {
    return Point3d(x - a.x, y - a.y, z - a.z);
  }

  bool operator==(const Point3d &p) const {
    constexpr double EPS = 1e-10;
    return std::abs(x - p.x) < EPS && std::abs(y - p.y) < EPS && std::abs(z - p.z) < EPS;
  }
};

using Vector3d = Point3d;

class Plane3d {
public:
  Vector3d normal_vector;
  double d;

  Plane3d(const Vector3d &a, const Vector3d &b, const Vector3d &c) {
    Vector3d v1 = b - a;
    Vector3d v2 = c - a;
    normal_vector = cross(v1, v2);
    d = dot(normal_vector, a);
  }

  bool intersect(const Vector3d &p1, const Vector3d &p2) const {
    double res1 = dot(normal_vector, p1) - d;
    double res2 = dot(normal_vector, p2) - d;
    return res1 * res2 <= 0;
  }

  Vector3d crosspoint(const Vector3d &p1, const Vector3d &p2) const {
    double t = (d - dot(normal_vector, p1)) / dot(normal_vector, p2 - p1);
    return p1 + (p2 - p1) * t;
  }
private:
  static double dot(const Vector3d &a, const Vector3d &b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
  }

  static Vector3d cross(const Vector3d &a, const Vector3d &b) {
    return Vector3d(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x);
  }
};

bool is_point_in_triangle(const Point3d &p, const Point3d &a, const Point3d &b, const Point3d &c) {
  Vector3d v1 = b - a, v2 = c - a, v3 = p - a;
  double d00 = dot(v1, v1), d01 = dot(v1, v2), d02 = dot(v1, v3);
  double d11 = dot(v2, v2), d12 = dot(v2, v3);
  double invDenom = 1.0 / (d00 * d11 - d01 * d01);
  double u = (d11 * d02 - d01 * d12) * invDenom;
  double v = (d00 * d12 - d01 * d02) * invDenom;
  return (u >= 0) && (v >= 0) && (u + v < 1);
}

double dot(const Vector3d &a, const Vector3d &b) {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}

int main() {
  Point3d S, G, tri[3];
  std::cin >> S.x >> S.y >> S.z;
  std::cin >> G.x >> G.y >> G.z;
  for (int i = 0; i < 3; i++) {
    std::cin >> tri[i].x >> tri[i].y >> tri[i].z;
  }
  Plane3d plane(tri[0], tri[1], tri[2]);
  if (plane.intersect(S, G)) {
    Point3d cp = plane.crosspoint(S, G);
    if (is_point_in_triangle(cp, tri[0], tri[1], tri[2])) {
      std::cout << "HIT" << std::endl;
    } else {
      std::cout << "MISS" << std::endl;
    }
  } else {
    std::cout << "MISS" << std::endl;
  }
  return 0;
}
```