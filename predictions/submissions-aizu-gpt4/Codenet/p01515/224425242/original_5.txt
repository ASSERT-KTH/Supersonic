```c++
#include <iostream>
#include <string>
#include <vector>

using namespace std;

int mask;

struct Parser {
    using State = string::const_iterator;
    bool solve(const string &S) {
        State begin = S.begin();
        return equation(begin);
    }
    bool equation(State &begin) {
        bool left = formula(begin);
        ++begin;
        bool right = formula(begin);
        return left == right;
    }
    bool formula(State &begin) {
        if (*begin == '(') {
            ++begin;
            bool left = formula(begin);
            char op = *begin;
            ++begin;
            if (op == '-')
                ++begin;
            bool right = formula(begin);
            ++begin;
            return deduce(left, op, right);
        } else if (*begin == '-') {
            ++begin;
            return !formula(begin);
        } else {
            return boolean(begin);
        }
    }
    bool deduce(bool x, char op, bool y) {
        switch(op) {
            case '*': return x && y;
            case '+': return x || y;
            default:  return !x || y;
        }
    }
    bool boolean(State &begin) {
        if (*begin == 'T')
            return true;
        else if (*begin == 'F')
            return false;
        else
            return (mask >> (*begin - 'a')) & 1;
        ++begin;
    }
};

void solve(const string &S) {
  Parser ps;
  for (mask = 0; mask < (1 << 11); ++mask) {
    if (!ps.solve(S)) {
      cout << "NO\n";
      return;
    }
  }
  cout << "YES\n";
}

int main() {
  string S;
  while (cin >> S && S != "#") {
    solve(S);
  }
  return 0;
}
```