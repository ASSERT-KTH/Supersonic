```
#include <iostream>
#include <algorithm>
#include <vector>
#include <cctype>

using namespace std;
typedef long long ll;

static const int priority[] = {2, 2, 1, 3, 0, 0, 0, 0, 0};

ll parse_expression(const string& S, int& pos, int priority);
ll parse_number(const string& S, int& pos);

inline ll operate(ll a, ll b, char oper) {
    switch (oper) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        default: return 0;
    }
}

ll parse_expression(const string& S, int& pos, int priority) {
    if(priority == 0) return parse_number(S, pos);
    ll value = parse_expression(S, pos, priority - 1);
    while(pos < S.size() && ::priority[S[pos] - '+'] >= priority) {
        char oper = S[pos++];
        value = operate(value, parse_expression(S, pos, priority - 1), oper);
    }
    return value;
}

ll parse_number(const string& S, int& pos) {
    ll value = 0;
    while(pos < S.size() && isdigit(S[pos])) {
        value = value * 10 + S[pos++] - '0';
    }
    return value;
}

int main() {
    string S;
    cin >> S;
    ll max_value = -1e18;
    vector<char> permutation = {'*', '+', '-'};
    do {
        for(int i = 0; i < 3; ++i) {
            ::priority[permutation[i] - '+'] = i;
        }
        int pos = 0;
        max_value = max(max_value, parse_expression(S, pos, 2));
    } while(next_permutation(permutation.begin(), permutation.end()));
    cout << max_value << endl;
    return 0;
}
```