```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cassert>

#define EPS 1e-10
#define equals(a, b) (fabs((a) - (b)) < EPS)
#define COUNTER_CLOCKWISE 1
#define CLOCKWISE -1
#define ONLINE_BACK 2
#define ONLINE_FRONT -2
#define ON_SEGMENT 0

using namespace std;

class Point {
public:
  double x, y;
  Point(double x = 0, double y = 0) : x(x), y(y) {}
  Point operator+(Point p) { return Point(x + p.x, y + p.y); }
  Point operator-(Point p) { return Point(x - p.x, y - p.y); }
  Point operator*(double a) { return Point(a * x, a * y); }
  Point operator/(double a) { return Point(x / a, y / a); }
  bool operator<(const Point &p) const {
    return x != p.x ? x < p.x : y < p.y;
  }
  bool operator==(const Point &p) const {
    return fabs(x - p.x) < EPS && fabs(y - p.y) < EPS;
  }
};

typedef Point Vector;
typedef struct Segment {
  Point p1, p2;
  Segment(Point p1 = Point(), Point p2 = Point()) : p1(p1), p2(p2) {}
} Line;

double cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }
double dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }
double norm(Point a) { return a.x * a.x + a.y * a.y; }
double abs(Point a) { return sqrt(norm(a)); }
double getDistanceLP(Line l, Point p) {
  return abs(cross(l.p2 - l.p1, p - l.p1) / abs(l.p2 - l.p1));
}
double getDistanceSP(Line l, Point p) {
  if (dot(l.p2 - l.p1, p - l.p1) < 0.0) return abs(p - l.p1);
  if (dot(l.p1 - l.p2, p - l.p2) < 0.0) return abs(p - l.p2);
  return getDistanceLP(l, p);
}
int main() {
  int n;
  while (cin >> n, n) {
    vector<Line> vec(n);
    for (int i = 0; i < n; ++i)
      cin >> vec[i].p1.x >> vec[i].p1.y >> vec[i].p2.x >> vec[i].p2.y;
    double minDist = 1e9;
    Point ans;
    for (int i = 0; i < n; ++i) {
      for (int j = i + 1; j < n; ++j) {
        Point mid((vec[i].p1.x + vec[j].p1.x) / 2.0,
                  (vec[i].p1.y + vec[j].p1.y) / 2.0);
        double maxDist = 0.0;
        for (int k = 0; k < n; ++k)
          maxDist = max(maxDist, getDistanceSP(vec[k], mid));
        if (maxDist < minDist) {
          minDist = maxDist;
          ans = mid;
        }
      }
    }
    if (minDist == 1e9)
      cout << "None" << endl;
    else
      printf("%.10f %.10f\n", ans.x, ans.y);
  }
  return 0;
}
```