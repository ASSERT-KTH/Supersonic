```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#define MOD 1000000007LL
using namespace std;
typedef long long ll;
typedef vector<ll> vi;

const int MAXN = 1010;
int N, M;
vi g[MAXN], r[MAXN];
bool used[MAXN], inCycle[MAXN];
ll dp[MAXN];
int cycle[MAXN], c;

ll solve(int v) {
  if (used[v]) return dp[v];
  used[v] = true;
  dp[v] = 1;
  for (int u : r[v]) {
    dp[v] = dp[v] * solve(u) % MOD;
  }
  dp[v] = (dp[v] + 1) % MOD;
  return dp[v];
}

void dfs(int cur, vector<int>& List) {
  if (used[cur]) {
    for (int i = 0; i < List.size(); ++i) {
      if (List[i] == cur) {
        for (int j = i; j < List.size(); ++j) {
          cycle[c++] = List[j];
        }
        break;
      }
    }
    return;
  }
  used[cur] = true;
  List.push_back(cur);
  if (!g[cur].empty()) {
    for (int u : g[cur]) {
      dfs(u, List);
    }
  } else {
    cycle[c++] = cur;
  }
}

ll f(int start) {
  vector<int> List;
  c = 0;
  fill(used, used + N, false);
  dfs(start, List);
  ll res = 1;
  fill(inCycle, inCycle + N, false);
  for (int i = 0; i < c; ++i) inCycle[cycle[i]] = true;
  for (int i = 0; i < c; ++i) {
    for (int u : r[cycle[i]]) {
      if (!inCycle[u]) {
        res = res * solve(u) % MOD;
      }
    }
  }
  res = (res + 1) % MOD;
  return res;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cin >> N >> M;
  for (int i = 0; i < M; ++i) {
    int s, d;
    cin >> s >> d;
    --s; --d;
    g[s].push_back(d); r[d].push_back(s);
  }
  fill(dp, dp + N, -1);
  ll ans = 1;
  fill(used, used + N, false);
  for (int i = 0; i < N; ++i) {
    if (!used[i]) {
      ans = ans * f(i) % MOD;
    }
  }
  cout << ans << '\n';
}
```