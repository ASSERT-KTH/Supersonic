```c++
#include <stdio.h>
#include <stdlib.h>
typedef struct node {
  int id;
  struct node *parent;
  struct node *leftMostChild;
  struct node *rightSibling;
} * nodePointer;

nodePointer make1node(void);
nodePointer init(int);
void printNode(nodePointer);
void printType(nodePointer);
void printChild(nodePointer);
int getDepth(nodePointer);
nodePointer head;
int main(void) {
  int n, id, k, c1, c2;
  nodePointer p1, p2, *arr;
  head = init(-1);
  scanf("%d", &n);
  arr = (nodePointer *)malloc(sizeof(nodePointer) * n);
  for (int i = 0; i < n; i++)
    arr[i] = init(i);
  for (int i = 0; i < n; i++) {
    scanf("%d%d", &id, &k);
    for (int j = 0; j < k; j++) {
      scanf("%d", &c1);
      if (j == 0) {
        arr[id]->leftMostChild = arr[c1];
      } else {
        arr[c2]->rightSibling = arr[c1];
      }
      arr[c1]->parent = arr[id];
      c2 = c1;
    }
  }
  for (int i = 0; i < n; i++)
    printNode(arr[i]);
  free(arr);
  return 0;
}
nodePointer init(int id) {
  nodePointer p = make1node();
  p->id = id;
  p->parent = p->leftMostChild = p->rightSibling = NULL;
  return p;
}
void printNode(nodePointer p) {
  printf("node %d: parent = %d, depth = %d, ", p->id, p->parent ? p->parent->id : -1, getDepth(p));
  printType(p);
  printf(", ");
  printChild(p);
  printf("\n");
}
nodePointer make1node(void) {
  return (nodePointer)malloc(sizeof(struct node));
}
int getDepth(nodePointer p) {
  int depth = 0;
  while (p->parent != NULL) {
    p = p->parent;
    depth++;
  }
  return depth;
}
void printType(nodePointer p) {
  printf("%s", p->parent == NULL ? "root" : p->leftMostChild == NULL ? "leaf" : "internal node");
}
void printChild(nodePointer p) {
  printf("[");
  if (p->leftMostChild != NULL) {
    for (p = p->leftMostChild; p != NULL; p = p->rightSibling) {
      printf("%d", p->id);
      if(p->rightSibling != NULL)
        printf(", ");
    }
  }
  printf("]");
}
```