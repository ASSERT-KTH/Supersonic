```cpp
#include <bits/stdc++.h>
using namespace std;

struct Info {
  string from, to;
  int rank;
  bool erased;
};

bool ambiguousCmp(const string& base, const string& comp) {
  for (int i = 0; i < base.size(); ++i) {
    if (base[i] != comp[i] && base[i] != '?') {
      return false;
    }
  }
  return true;
}

void func() {
  int N, M;
  cin >> N >> M;
  vector<Info> OK(N), NOT(N);
  for (int i = 0; i < N; ++i) {
    OK[i].erased = false;
    NOT[i].erased = false;
  }
  string buf, from, to;
  int ok_index = 0, not_index = 0;
  for (int i = 0; i < N; ++i) {
    cin >> buf >> from >> to;
    if (buf[0] == 'p') {
      OK[ok_index++] = {from, to, i, false};
    } else {
      NOT[not_index++] = {from, to, i, false};
    }
  }
  for (int i = not_index - 1; i >= 0; --i) {
    for (int k = ok_index - 1; k >= 0; --k) {
      if (NOT[i].rank < OK[k].rank || OK[k].erased)
        continue;
      if (NOT[i].from == OK[k].from && NOT[i].to == OK[k].to) {
        OK[k].erased = true;
      }
    }
  }
  struct Data {
    string from, to, message;
  };
  queue<Data> Q;
  for (int loop = 0; loop < M; ++loop) {
    Data data;
    cin >> data.from >> data.to >> data.message;
    bool FLG = false;
    for (int i = 0; i < ok_index; ++i) {
      if (OK[i].erased)
        continue;
      if (ambiguousCmp(OK[i].from, data.from) && ambiguousCmp(OK[i].to, data.to)) {
        FLG = true;
        break;
      }
    }
    if (!FLG)
      continue;
    FLG = true;
    for (int i = 0; i < not_index; ++i) {
      if (NOT[i].erased)
        continue;
      if (ambiguousCmp(NOT[i].from, data.from) && ambiguousCmp(NOT[i].to, data.to)) {
        FLG = false;
        break;
      }
    }
    if (FLG) {
      Q.push(data);
    }
  }
  cout << Q.size() << "\n";
  while (!Q.empty()) {
    cout << Q.front().from << " " << Q.front().to << " " << Q.front().message << "\n";
    Q.pop();
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int N, M;
  while (cin >> N >> M && (N || M)) {
    func();
  }
  return 0;
}
```