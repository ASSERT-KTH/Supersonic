```cpp
#include <cstdio>
#include <cstring>
#include <queue>
#define MAX 105

struct Rule {
    char from[9], to[9];
    int rank;
    bool erased;
};

struct Message {
    char from[9], to[9], message[51];
};

int N, M;
Rule OK[MAX], NOT[MAX];

bool strCmp(const char *base, const char *comp) {
    return strcmp(base, comp) == 0;
}

bool ambiguousCmp(const char *base, const char *comp) {
    for (; *base != '\0'; ++base, ++comp) {
        if (*base != *comp && *base != '?') {
            return false;
        }
    }
    return true;
}

void func() {
    int ok_index = 0, not_index = 0;

    for (int i = 0; i < N; i++) {
        OK[i].erased = NOT[i].erased = false;
    }

    char buf[10], from[9], to[9];
    for (int i = 0; i < N; i++) {
        scanf("%s %s %s", buf, from, to);
        if (buf[0] == 'p') {
            strcpy(OK[ok_index].from, from);
            strcpy(OK[ok_index].to, to);
            OK[ok_index].rank = i;
            ok_index++;
        } else {
            strcpy(NOT[not_index].from, from);
            strcpy(NOT[not_index].to, to);
            NOT[not_index].rank = i;
            not_index++;
        }
    }

    for (int i = not_index - 1; i >= 0; i--) {
        for (int k = ok_index - 1; k >= 0; k--) {
            if (NOT[i].rank < OK[k].rank || OK[k].erased)
                continue;
            if (strCmp(NOT[i].from, OK[k].from) && strCmp(NOT[i].to, OK[k].to)) {
                OK[k].erased = true;
            }
        }
    }

    for (int i = ok_index - 1; i >= 0; i--) {
        for (int k = not_index - 1; k >= 0; k--) {
            if (OK[i].rank < NOT[k].rank || NOT[k].erased)
                continue;
            if (strCmp(OK[i].from, NOT[k].from) && strCmp(OK[i].to, NOT[k].to)) {
                NOT[k].erased = true;
            }
        }
    }

    std::queue<Message> Q;
    for (int loop = 0; loop < M; loop++) {
        Message data;
        scanf("%s %s %s", data.from, data.to, data.message);
        
        bool FLG = false;
        for (int i = 0; i < ok_index; i++) {
            if (OK[i].erased)
                continue;
            if (ambiguousCmp(OK[i].from, data.from) && ambiguousCmp(OK[i].to, data.to)) {
                FLG = true;
                break;
            }
        }
        if (!FLG)
            continue;

        for (int i = 0; i < not_index; i++) {
            if (NOT[i].erased)
                continue;
            if (ambiguousCmp(NOT[i].from, data.from) && ambiguousCmp(NOT[i].to, data.to)) {
                FLG = false;
                break;
            }
        }

        if (FLG) {
            Q.push(data);
        }
    }

    printf("%d\n", int(Q.size()));
    while (!Q.empty()) {
        printf("%s %s %s\n", Q.front().from, Q.front().to, Q.front().message);
        Q.pop();
    }
}

int main() {
    while (scanf("%d %d", &N, &M), N || M) {
        func();
    }
    return 0;
}
```