```
#include <algorithm>
#include <cstring>
#include <queue>
#include <vector>
typedef long long int ll;
typedef unsigned long long int ull;
#define BIG_NUM 2000000000
#define MOD 1000000007
#define EPS 0.000000001
using namespace std;
int N, M;
struct Info {
  string from, to;
  int rank;
  bool erased;
};
struct Data {
  string from, to, message;
};
bool strCmp(string base, string comp) {
  return base == comp;
}
bool ambiguousCmp(string base, string comp) {
  return base == comp || count(base.begin(), base.end(), '?') == base.size();
}
void func() {
  vector<Info> OK(N), NOT(N);
  string buf, from, to;
  for (int i = 0; i < N; i++) {
    OK[i].erased = false;
    NOT[i].erased = false;
  }
  for (int i = 0; i < N; i++) {
    cin >> buf >> from >> to;
    if (buf[0] == 'p') {
      OK[i] = {from, to, i, false};
    } else {
      NOT[i] = {from, to, i, false};
    }
  }
  for (auto &notInfo : NOT) {
    for (auto &okInfo : OK) {
      if (notInfo.rank < okInfo.rank || okInfo.erased)
        continue;
      if (strCmp(notInfo.from, okInfo.from) &&
          strCmp(notInfo.to, okInfo.to)) {
        okInfo.erased = true;
      }
    }
  }
  for (auto &okInfo : OK) {
    for (auto &notInfo : NOT) {
      if (okInfo.rank < notInfo.rank || notInfo.erased)
        continue;
      if (strCmp(okInfo.from, notInfo.from) &&
          strCmp(okInfo.to, notInfo.to)) {
        notInfo.erased = true;
      }
    }
  }
  queue<Data> Q;
  for (int loop = 0; loop < M; loop++) {
    Data data;
    cin >> data.from >> data.to >> data.message;
    bool flag = any_of(OK.begin(), OK.end(), [&](Info &okInfo) {
      return !okInfo.erased && ambiguousCmp(okInfo.from, data.from) &&
             ambiguousCmp(okInfo.to, data.to);
    });
    if (!flag)
      continue;
    flag = none_of(NOT.begin(), NOT.end(), [&](Info &notInfo) {
      return !notInfo.erased && ambiguousCmp(notInfo.from, data.from) &&
             ambiguousCmp(notInfo.to, data.to);
    });
    if (flag) {
      Q.push(data);
    }
  }
  cout << Q.size() << "\n";
  while (!Q.empty()) {
    cout << Q.front().from << " " << Q.front().to << " " << Q.front().message << "\n";
    Q.pop();
  }
}
int main() {
  while (true) {
    cin >> N >> M;
    if (N == 0 && M == 0)
      break;
    func();
  }
  return 0;
}
```