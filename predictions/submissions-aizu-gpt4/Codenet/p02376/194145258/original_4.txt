```cpp
#include <vector>
#include <queue>
#include <algorithm>
#define INF (1 << 29)
#define max_n 10000

struct edge {
  int to, cap, rev;
};

struct node_t {
  node_t *pp, *lp, *rp;
  int id, val, mini, minId, lazy;
  edge *e;
  node_t(int id, int v) : id(id), val(v), lazy(0), pp(NULL), lp(NULL), rp(NULL), e(NULL) {
    update();
  }
  void update() {
    mini = val, minId = id;
    if (lp && mini > lp->mini)
      mini = lp->mini, minId = lp->minId;
    if (rp && mini > rp->mini)
      mini = rp->mini, minId = rp->minId;
  }
  void apply(int v) { lazy += v, val += v, mini += v; }
  void push() {
    if (lp)
      lp->apply(lazy);
    if (rp)
      rp->apply(lazy);
    lazy = 0;
  }
  bool is_root() { return !pp || (pp->lp != this && pp->rp != this); }
};

std::vector<edge> g[max_n];
std::vector<int> lists[max_n];
int dist[max_n], n, ptr[max_n];
node_t *nodes[max_n];

void add_edge(int from, int to, int cap) {
  g[from].push_back({to, cap, (int)g[to].size()});
  g[to].push_back({from, 0, (int)g[from].size() - 1});
}

bool bfs(int s, int t) {
  std::fill(dist, dist + max_n, -1);
  dist[s] = 0;
  std::queue<int> que;
  que.push(s);
  while (!que.empty()) {
    int u = que.front();
    que.pop();
    if (u == t)
      return true;
    for (edge e : g[u]) {
      if (dist[e.to] < 0 && e.cap > 0) {
        dist[e.to] = dist[u] + 1;
        que.push(e.to);
      }
    }
  }
  return false;
}

int max_flow(int S, int T) {
  int flow = 0;
  while (bfs(S, T)) {
    std::fill(ptr, ptr + max_n, 0);
    for (int i = 0; i < n; i++)
      nodes[i] = new node_t(i, INF);
    while (true) {
      node_t *v = nodes[S];
      if (v == nodes[T]) {
        flow += v->mini;
        v->apply(-v->mini);
        g[v->e->to][v->e->rev].cap += v->e->cap;
        v->e->cap = 0;
        continue;
      }
      if (ptr[v->id] < g[v->id].size()) {
        edge &e = g[v->id][ptr[v->id]++];
        if (dist[e.to] == dist[v->id] + 1 && e.cap > 0) {
          v->pp = nodes[e.to], nodes[e.to]->rp = v;
          v->val = e.cap;
          v->update();
          v->e = &e;
          lists[e.to].push_back(v->id);
        }
      } else {
        if (v == nodes[S]) {
          for (int i = 0; i < n; i++) {
            for (int j = 0; j < lists[i].size(); j++)
              lists[i].clear();
          }
          break;
        }
        for (int i = 0; i < lists[v->id].size(); i++) {
          node_t *u = nodes[lists[v->id][i]];
          g[u->e->to][u->e->rev].cap += u->e->cap;
          u->e->cap = 0;
        }
        lists[v->id].clear();
      }
    }
  }
  return flow;
}

int main(void) {
  std::ios::sync_with_stdio(false);
  int e, a, b, c;
  std::cin >> n >> e;
  for (int i = 0; i < e; i++) {
    std::cin >> a >> b >> c;
    add_edge(a, b, c);
  }
  std::cout << max_flow(0, n - 1) << "\n";
  return 0;
}
```