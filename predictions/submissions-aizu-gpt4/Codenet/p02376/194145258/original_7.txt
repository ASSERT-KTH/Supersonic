```c++
#include <bits/stdc++.h>
#define INF INT_MAX
#define max_n 10000
using namespace std;
struct edge {
  int to, cap, rev;
  edge(int to, int cap, int rev): to(to), cap(cap), rev(rev) {}
};

vector<edge> g[max_n];
void add_edge(int from, int to, int cap) {
  g[from].push_back(edge(to, cap, g[to].size()));
  g[to].push_back(edge(from, 0, g[from].size() - 1));
}

int level[max_n];
int iter[max_n];

void bfs(int s) {
  memset(level, -1, sizeof(level));
  queue<int> que;
  level[s] = 0;
  que.push(s);
  while (!que.empty()) {
    int v = que.front();
    que.pop();
    for (int i = 0; i < g[v].size(); i++) {
      edge &e = g[v][i];
      if (e.cap > 0 && level[e.to] < 0) {
        level[e.to] = level[v] + 1;
        que.push(e.to);
      }
    }
  }
}

int dfs(int v, int t, int f) {
  if (v == t)
    return f;
  for (int &i = iter[v]; i < g[v].size(); i++) {
    edge &e = g[v][i];
    if (e.cap > 0 && level[v] < level[e.to]) {
      int d = dfs(e.to, t, min(f, e.cap));
      if (d > 0) {
        e.cap -= d;
        g[e.to][e.rev].cap += d;
        return d;
      }
    }
  }
  return 0;
}

int max_flow(int s, int t) {
  int flow = 0;
  while (true) {
    bfs(s);
    if (level[t] < 0)
      return flow;
    memset(iter, 0, sizeof(iter));
    int f;
    while ((f = dfs(s, t, INF)) > 0) {
      flow += f;
    }
  }
}

int main(void) {
  ios::sync_with_stdio(false);
  int e, a, b, c;
  cin >> e;
  for (int i = 0; i < e; i++) {
    cin >> a >> b >> c;
    add_edge(a, b, c);
  }
  cout << max_flow(0, e) << "\n";
  return 0;
}
```