```C++
#include <iostream>
#include <vector>

using namespace std;

void func(int, int);
int jump(int, int);

constexpr int N = 15;

int X, Y;
vector<vector<int>> data(N, vector<int>(N, 0)), memo(N, vector<int>(N, 0));

void func(int y, int x) {
    if (y == Y - 1) {
        memo[Y - 1][x] = 1;
        return;
    }
    static constexpr pair<int, int> directions[] = {{1, -1}, {1, 1}, {1, 0}};
    for (const auto& [dy, dx] : directions) {
        int ny = y + dy, nx = x + dx;
        if (nx >= 0 && nx < X && data[ny][nx] == 0) {
            if (memo[ny][nx] == 0)
                func(ny, nx);
            memo[y][x] += memo[ny][nx];
        }
    }
    if (data[y + 1][x] == 2) {
        int r = jump(y + 1, x);
        if (r == -2)
            memo[y][x] += 1;
        else if (r != -1) {
            if (memo[r][x] == 0)
                func(r, x);
            memo[y][x] += memo[r][x];
        }
    }
    if (memo[y][x] == 0)
        data[y][x] = 1;
}

int jump(int y, int x) {
    while (++y < Y - 1) {
        if (data[y][x] == 1)
            break;
        if (data[y][x] == 0)
            return y;
    }
    return (y >= Y - 1) ? -2 : -1;
}

int main() {
    while (cin >> X >> Y, X || Y) {
        for (auto& row : data)
            for (auto& elem : row)
                cin >> elem, elem = 0;
        for (auto& row : memo)
            fill(row.begin(), row.begin() + X, 0);
        for (int i = 0; i < X; i++)
            if (data[0][i] == 0)
                func(0, i);
        cout << accumulate(memo[0].begin(), memo[0].begin() + X, 0) << endl;
    }
    return 0;
}
```