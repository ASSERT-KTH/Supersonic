```c++
#include <iostream>
#include <vector>
#include <algorithm>
#define N 15
using namespace std;

vector<vector<int>> data(N, vector<int>(N, 0)), memo(N, vector<int>(N, 0));

void func(int, int);
int jump(int, int);
int X, Y;

int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL);
  while (cin >> X >> Y && (X || Y)) {
    fill(data.begin(), data.end(), vector<int>(N, 0));
    fill(memo.begin(), memo.end(), vector<int>(N, 0));
    for (int i = 0; i < Y; i++)
      for (int j = 0; j < X; j++)
        cin >> data[i][j];
    for (int i = 0; i < X; i++)
      if (data[0][i] == 0)
        func(0, i);
    int cnt = 0;
    for (int i = 0; i < X; i++)
      cnt += memo[0][i];
    cout << cnt << "\n";
  }
  return 0;
}

void func(int y, int x) {
  if (y == Y - 1) {
    memo[Y - 1][x] = 1;
    return;
  }
  static const int dx[] = {-1, 0, 1};
  for (int i = 0; i < 3; i++) {
    int nx = x + dx[i];
    if (nx < 0 || nx >= X || data[y + 1][nx] == 1) continue;
    if (data[y + 1][nx] == 2) {
      int r = jump(y + 1, nx);
      if (r == -2) {
        memo[y][x] += 1;
      } else if (r != -1) {
        if (memo[r][nx] == 0)
          func(r, nx);
        memo[y][x] += memo[r][nx];
      }
    } else {
      if (memo[y + 1][nx] == 0)
        func(y + 1, nx);
      memo[y][x] += memo[y + 1][nx];
    }
  }
}

int jump(int y, int x) {
  for (y += 2; y < Y; y += 2) {
    if (data[y][x] == 0)
      return y;
    if (data[y][x] == 1)
      return -1;
  }
  return -2;
}
```