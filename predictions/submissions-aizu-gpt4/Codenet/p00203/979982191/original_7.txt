```c++
#include <iostream>
#include <vector>
#define N 15
using namespace std;
void func(int, int);
int jump(int, int);
int X, Y;
vector<vector<int>> data(N, vector<int>(N, 0)), memo(N, vector<int>(N, 0));

int main() {
  while (cin >> X >> Y, X||Y) {
    fill(data.begin(), data.end(), vector<int>(N, 0));
    fill(memo.begin(), memo.end(), vector<int>(N, 0));
    for (int i = 0; i < Y; ++i)
      for (int j = 0; j < X; ++j)
        cin >> data[i][j];
    for (int i = 0; i < X; ++i)
      if (!data[0][i])
        func(0, i);
    cout << accumulate(memo[0].begin(), memo[0].begin() + X, 0) << endl;
  }
  return 0;
}

void func(int y, int x) {
  if (y == Y - 1) {
    memo[y][x] = 1;
    return;
  }
  int dx[] = {-1, 0, 1};
  for (int i = 0; i < 3; ++i) {
    int nx = x + dx[i];
    if (0 <= nx && nx < X && !data[y + 1][nx]) {
      if (!memo[y + 1][nx])
        func(y + 1, nx);
      memo[y][x] += memo[y + 1][nx];
    }
  }
  if (data[y + 1][x] == 2) {
    int r = jump(y + 1, x);
    if (r == -2)
      ++memo[y][x];
    else if (r != -1) {
      if (!memo[r][x])
        func(r, x);
      memo[y][x] += memo[r][x];
    }
  }
  if (!memo[y][x])
    data[y][x] = 1;
}

int jump(int y, int x) {
  for (y += 2; y < Y - 1 && data[y][x] != 1; y += 2)
    if (!data[y][x])
      return y;
  return (data[y][x] == 1) ? -1 : -2;
}
```