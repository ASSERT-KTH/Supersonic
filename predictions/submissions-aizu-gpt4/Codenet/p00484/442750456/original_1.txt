```c++
#include <algorithm>
#include <cstring>
#include <iostream>
#include <vector>
using namespace std;
typedef long long ll;
typedef pair<int, int> P;
ll d[2005], dp[2005][2005];
vector<int> v[2005];
vector<P> p;
int main() {
  int n, K;
  cin >> n >> K;
  vector<int> id(n);
  for (int i = 0; i < n; i++) {
    int a, b;
    cin >> a >> b;
    id[i] = --b;
    v[b].push_back(a);
  }
  sort(id.begin(), id.end());
  id.erase(unique(id.begin(), id.end()), id.end());
  for (const auto& i : id) {
    sort(v[i].begin(), v[i].end(), greater<int>());
  }
  memset(d, 0, sizeof(d));
  for (const auto& i : id) {
    for (int k = 1; k <= v[i].size(); k++) {
      d[k] = d[k - 1] + v[i][k - 1] + (k - 1) * 2;
      p.emplace_back(k, d[k]);
    }
  }
  memset(dp, 0, sizeof(dp));
  for (int i = 0; i < id.size(); i++) {
    for (int j = 0; j <= K; j++) {
      ll res = dp[i][j];
      for (int k = 0; k <= v[id[i]].size(); k++) {
        if (j >= k) {
          res = max(res, dp[i][j - k] + d[k]);
        }
      }
      dp[i + 1][j] = res;
    }
  }
  cout << dp[id.size()][K] << endl;
  return 0;
}
```