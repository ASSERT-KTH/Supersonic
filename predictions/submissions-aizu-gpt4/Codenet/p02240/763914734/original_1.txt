```C++
#include <algorithm>
#include <queue>
#include <stdio.h>
#include <vector>
using namespace std;
class Relation {
public:
  Relation(int tmp_n, int tmp_m) : n(tmp_n), m(tmp_m), group_number(1),
                                   V(new vector<int>[n]),
                                   num_of_each(new int[n]()),
                                   group(new int[n]()) {}
  
  void push(int s, int t) {
    V[s].push_back(t);
    V[t].push_back(s);
    num_of_each[s]++;
    num_of_each[t]++;
  }
  void makeGroup() {
    int node;
    queue<int> Q;
    Q.push(0);
    group[0] = 1;
    while (true) {
      while (!Q.empty()) {
        node = Q.front();
        Q.pop();
        if (num_of_each[node] > 0) {
          for (int k : V[node]) {
            if (group[k] == 0) {
              group[k] = group[node];
              Q.push(k);
            }
          }
        }
      }
      group_number++;
      auto it = find(group, group+n, 0);
      if (it != group+n) {
        *it = group_number;
        Q.push(distance(group, it));
      } else {
        break;
      }
    }
  }
  bool canAccsess(int s, int t) { return group[s] == group[t]; }

private:
  vector<int> *V;
  int *num_of_each;
  int *group;
  int group_number;
  int n, m;
};
int main() {
  int n, m, s, t, q;
  scanf("%d %d", &n, &m);
  Relation relation(n, m);
  while (m--) {
    scanf("%d %d", &s, &t);
    relation.push(s, t);
  }
  relation.makeGroup();
  scanf("%d", &q);
  while (q--) {
    scanf("%d %d", &s, &t);
    printf(relation.canAccsess(s, t) ? "yes\n" : "no\n");
  }
  return 0;
}
```