```cpp
#include <stdio.h>
#include <vector>
#include <queue>
using namespace std;

class Relation {
public:
  Relation(int tmp_n) : n(tmp_n), group_number(1), adjList(tmp_n), group(tmp_n) {}

  void push(int s, int t) {
    adjList[s].push_back(t);
    adjList[t].push_back(s);
  }

  void makeGroup() {
    queue<int> Q;
    Q.push(0);
    group[0] = 1;
    while (true) {
      while (!Q.empty()) {
        int node = Q.front();
        Q.pop();
        for (int k : adjList[node]) {
          if (group[k] == 0) {
            group[k] = group[node];
            Q.push(k);
          }
        }
      }
      group_number++;
      int i = 0;
      for (; i < n; i++) {
        if (group[i] == 0) {
          group[i] = group_number;
          Q.push(i);
          break;
        }
      }
      if (i == n)
        break;
    }
  }

  bool canAccess(int s, int t) const { return group[s] == group[t]; }

private:
  int n, group_number;
  vector<vector<int>> adjList;
  vector<int> group;
};

int main() {
  int n, m, s, t, q;
  scanf("%d %d", &n, &m);
  Relation relation(n);
  for (int i = 0; i < m; i++) {
    scanf("%d %d", &s, &t);
    relation.push(s, t);
  }
  relation.makeGroup();
  scanf("%d", &q);
  for (int i = 0; i < q; i++) {
    scanf("%d %d", &s, &t);
    if (relation.canAccess(s, t)) {
      printf("yes\n");
    } else {
      printf("no\n");
    }
  }
  return 0;
}
```