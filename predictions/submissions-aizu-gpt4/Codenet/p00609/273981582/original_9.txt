```C++
#include <algorithm>
#include <set>
#include <vector>
#include <cstdio>

typedef long long ll;

struct Point {
  int x, y;
  char type;
  Point() = default;
  Point(int x, int y, char type) : x(x), y(y), type(type) { }
  bool operator<(const Point &rhs) const {
    return y != rhs.y ? y < rhs.y : x < rhs.x;
  }
};

struct Event {
  int x;
  Point p;
  char in;
  Event() = default;
  Event(int x, Point p, char in) : x(x), p(p), in(in) { }
  bool operator<(const Event &rhs) const {
    return x != rhs.x ? x < rhs.x : in > rhs.in;
  }
};

constexpr int square(int x) { return x * x; }

constexpr int dist2(const Point &a, const Point &b) {
  return square(a.x - b.x) + square(a.y - b.y);
}

int an, bn, n, r;
Event event[500000];

int PlaneSweep() {
  int ans = 0;
  std::set<Point> open[2];
  for (int iter = 0; iter < n; iter++) {
    Event &e = event[iter];
    Point &p = e.p;
    if (e.in) {
      auto lower = open[p.type ^ 1].lower_bound(Point(0, p.y - 4 * r - 1, 0));
      auto upper = open[p.type ^ 1].upper_bound(Point(0, p.y + 4 * r + 1, 0));
      for (auto it = lower; it != upper; ++it) {
        if (dist2(*it, p) <= 16 * r * r) {
          ans++;
        }
      }
      open[p.type].insert(p);
    } else {
      open[p.type].erase(p);
    }
  }
  return ans;
}

int main() {
  while (scanf("%d %d %d", &an, &bn, &r), an | bn) {
    n = (an + bn) * 2;
    for (int i = 0; i < an; i++) {
      int x, y;
      scanf("%d %d", &x, &y);
      event[2 * i] = Event(x - 2 * r, Point(x, y, 0), 1);
      event[2 * i + 1] = Event(x + 2 * r, Point(x, y, 0), 0);
    }
    for (int i = 0; i < bn; i++) {
      int x, y;
      scanf("%d %d", &x, &y);
      event[2 * an + 2 * i] = Event(x - 2 * r, Point(x, y, 1), 1);
      event[2 * an + 2 * i + 1] = Event(x + 2 * r, Point(x, y, 1), 0);
    }
    std::sort(event, event + n);
    printf("%d\n", PlaneSweep());
  }
}
```