```C++
#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int MAXN = 1e7 + 5;
int dp[MAXN], q[MAXN * 2];

int main() {
    memset(dp, 63, sizeof(dp));
    dp[1234567] = 0;

    int front = 0, back = 1;
    q[front] = 1234567;

    while (front != back) {
        int now = q[front++];
        if (front == MAXN) front = 0;

        int a[8], temp = now;
        for (int i = 7; i >= 0; --i) {
            a[i] = temp % 10;
            temp /= 10;
        }

        int zero = find(a, a + 8, 0) - a;
        for (int dir = -1; dir <= 1; dir += 2) {
            for (int step = 1; step <= 4; step += 3) {
                int next_zero = zero + dir * step;

                if (next_zero < 0 || next_zero > 7 || (zero == 3 && next_zero == 4) || (zero == 4 && next_zero == 3)) continue;

                swap(a[zero], a[next_zero]);

                temp = 0;
                for (int i = 0; i < 8; ++i) temp = temp * 10 + a[i];

                if (dp[temp] > dp[now] + 1) {
                    dp[temp] = dp[now] + 1;
                    q[back++] = temp;
                    if (back == MAXN) back = 0;
                }

                swap(a[zero], a[next_zero]);
            }
        }
    }

    while (true) {
        int target = 0;
        for (int i = 0; i < 8; ++i) {
            char c;
            if (i != 7 && scanf("%c ", &c) == EOF) return 0;
            else if (i == 7 && scanf("%c", &c) == EOF) return 0;
            target = target * 10 + c - '0';
        }

        if (dp[target] == dp[0]) puts("-1");
        else printf("%d\n", dp[target]);

        getchar();
    }

    return 0;
}
```