```c++
#include <cstdio>
#include <cstring>
#include <queue>

using namespace std;

struct node {
    int state;
    int zero_loc;
    int step;
};

const int MAXN = 362880;  // 9!
const int FACT[9] = {40320, 5040, 720, 120, 24, 6, 2, 1, 1};
int vis[MAXN];
int dir[4] = {-1, 1, -4, 4};
char puzzle[10];

void init() {
    memset(vis, 0, sizeof(vis));
    memset(puzzle, 0, sizeof(puzzle));
}

int to_int(char* s) {
    int res = 0;
    for (int i = 0; i < 8; ++i) {
        int cnt = 0;
        for (int j = i + 1; j < 8; ++j) {
            if (s[j] < s[i]) ++cnt;
        }
        res += FACT[i] * cnt;
    }
    return res;
}

void to_char(int x, char* s) {
    bool v[9] = {false};
    for (int i = 0; i < 8; ++i) {
        int cnt = x / FACT[i];
        x %= FACT[i];
        for (int j = 1; j <= 8; ++j) {
            if (!v[j]) {
                if (cnt == 0) {
                    s[i] = j + '0';
                    v[j] = true;
                    break;
                }
                --cnt;
            }
        }
    }
    s[8] = '\0';
}

int bfs() {
    queue<node> q;
    node start;
    start.state = to_int(puzzle);
    start.zero_loc = strchr(puzzle, '0') - puzzle;
    start.step = 0;
    vis[start.state] = 1;
    q.push(start);

    while (!q.empty()) {
        node cur = q.front(); q.pop();
        if (cur.state == 0) return cur.step;
        for (int i = 0; i < 4; ++i) {
            node next = cur;
            next.zero_loc += dir[i];
            if (next.zero_loc < 0 || next.zero_loc > 7 || (cur.zero_loc == 3 && i == 1) || (cur.zero_loc == 4 && i == 0)) continue;
            to_char(cur.state, puzzle);
            swap(puzzle[cur.zero_loc], puzzle[next.zero_loc]);
            next.state = to_int(puzzle);
            if (!vis[next.state]) {
                vis[next.state] = 1;
                next.step = cur.step + 1;
                q.push(next);
            }
        }
    }
    return -1;
}

int main() {
    while (scanf("%s", puzzle) != EOF) {
        init();
        int res = bfs();
        if (res != -1) printf("%d\n", res);
        else puts("-1");
    }
    return 0;
}
```