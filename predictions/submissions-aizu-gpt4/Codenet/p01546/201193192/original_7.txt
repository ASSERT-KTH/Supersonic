```cpp
#include <bits/stdc++.h>
using namespace std;

constexpr int MAX_V = 155;
int V, E, K, dp[MAX_V][MAX_V], prv[MAX_V][MAX_V];
vector<vector<int>> adj(MAX_V);

void restore(int step, int v) {
  vector<int> path;
  for (int c = step; v != -1; --c) {
    path.push_back(v);
    v = prv[c][v];
  }
  for_each(path.rbegin(), path.rend(), [&, i = 0](int v) mutable { cout << v << (++i < step + 1 ? " " : "\n"); });
}

bool shortPhase() {
  memset(dp, -1, sizeof(dp));
  memset(prv, -1, sizeof(prv));
  dp[0][0] = 0;
  int max_score = -1, step = -1, terminal = -1;
  for (int i = 0; i < 150; ++i) {
    for (int v = 0; v < V; ++v) {
      if (dp[i][v] == -1) continue;
      for (int w : adj[v]) {
        if (dp[i + 1][w] < dp[i][v] + 1) {
          dp[i + 1][w] = dp[i][v] + 1;
          prv[i + 1][w] = v;
          if (max_score < dp[i + 1][w]) {
            max_score = dp[i + 1][w];
            terminal = w;
          }
        }
      }
    }
    if (max_score >= K) {
      step = i + 1;
      break;
    }
  }
  if (max_score >= K) {
    cout << step << '\n';
    restore(step, terminal);
    return true;
  }
  if (max_score == -1) {
    cout << -1 << '\n';
    return true;
  }
  return false;
}

int main() {
  cin >> V >> E >> K;
  for (int i = 0; i < E; ++i) {
    int u, v;
    cin >> u >> v;
    adj[u].push_back(v);
  }
  if (!shortPhase()) {
    cout << -1 << '\n';
  }
}
```