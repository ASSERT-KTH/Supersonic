Analysis:
The code computes combinations of numbers in a specific order, and calculates a modulus of a large number (divisor) for each combination. The main performance bottlenecks are:

1. The use of dynamic arrays ('long long *factmodary' and 'int *word'). Dynamic memory allocation is slower than static or stack allocation, and it doesn't seem necessary here because the array sizes are known at compile time.

2. The use of std::map for bubblehist. A map is a binary tree that takes O(log n) time for insertions and lookups, which is slower than a hash table (std::unordered_map) that has an average time complexity of O(1) for these operations.

3. The loop that increments 'second' of each element in the map after the current element. This loop is unnecessary and can be eliminated by keeping track of the count of elements less than the current element.

Optimization Strategy:

1. Replace dynamic arrays with static arrays. This will speed up memory access times.

2. Replace std::map with std::unordered_map. This will speed up insertions and lookups.

3. Eliminate the loop that increments 'second' of each element in the map after the current element. Keep track of the number of elements less than the current element to calculate facttime directly.

4. Use 'const' where applicable. This can help the compiler optimize the code.

5. Use pre-increment instead of post-increment where applicable. Pre-increment is faster because it doesnâ€™t involve a temporary object.

6. Use fast I/O methods for cin and cout. The traditional cin and cout are slower compared to scanf and printf.

Here is the optimized code: 

```cpp
#include <iostream>
#include <unordered_map>

using namespace std;
const int divisor = 1000000007;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  long long factmodary[100001];
  long long fact = 1;
  for (int i = 1; i <= 100000; ++i) {
    fact *= i;
    fact %= divisor;
    factmodary[i] = fact;
  }

  int word[100000] = {0};
  for (;;) {
    int N, R;
    cin >> N;
    if (N == 0)
      break;
    cin >> R;
    for (int i = 0; i < N; ++i)
      word[i] = i + 1;
    for (int i = 0; i < R; ++i) {
      int s, t;
      cin >> s >> t;
      swap(word[s - 1], word[t - 1]);
    }

    unordered_map<int, int> bubblehist;
    bubblehist[word[0]] = 0;
    long long ans = factmodary[N - 1] * (word[0] - 1);
    int bubblenum = 0;
    for (int i = 1; i < N; ++i) {
      int facttime = word[i] - 1;
      if (bubblehist.find(word[i]) != bubblehist.end()) {
        bubblenum = bubblehist[word[i]];
      } else {
        bubblenum++;
      }
      bubblehist[word[i]] = bubblenum;
      facttime -= bubblenum;
      ans += factmodary[N - (i + 1)] * facttime;
      ans %= divisor;
    }
    cout << ans << "\n";
  }
  return 0;
}
```

The optimized code preserves the functionality of the original code and is more efficient in terms of running time and memory usage.