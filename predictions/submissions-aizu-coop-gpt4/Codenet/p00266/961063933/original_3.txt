Code Analysis:

This code consists of a main function that calculates factorial values and uses them to make some calculations based on user input. It also includes a bubble sort algorithm that modifies a list of integers based on user input. 

Let's identify some potential bottlenecks and inefficiencies:

1. Dynamic memory allocation: The program creates two arrays "factmodary" and "word" with sizes 100001 and 100000 respectively using dynamic memory allocation. While dynamic memory allocation provides flexibility, it's slower than stack allocation.

2. map<int,int> bubblehist: Maps are typically implemented as balanced binary search trees and have an average time complexity of O(log n) for search, insert, and delete operations. This may become a bottleneck when dealing with large data sets.

3. Nested for loop and map operations: Inside the main loop, there's a nested for loop and map operations which can significantly slow down the program when the size of the input data increases.

Optimization Strategy:

Given the identified inefficiencies, here's an optimization strategy:

1. Replace dynamic memory allocation with stack allocation where possible.
2. Replace map with a more efficient data structure if possible.
3. Optimize nested loop and reduce unnecessary map operations.

Step-by-Step Explanation:

1. Replace dynamic memory allocation: Instead of using dynamic memory allocation, we can declare the arrays "factmodary" and "word" as global arrays. This will speed up the program because stack allocation is faster than heap allocation. However, it's important to note that this change will limit the maximum size of these arrays to the size of the stack, which is usually much smaller than the heap.

2. Replacing map with unordered_map: The std::map is implemented as a red-black tree, which ensures O(log n) lookup, insertion, and removal times. However, an unordered_map is implemented as a hash table, and its lookup, insertion, and removal times are all O(1) on average. Therefore, using an unordered_map instead of a map would be more efficient.

3. Optimize nested loop: The nested loop in the main for loop can be optimized by avoiding unnecessary increment operations on the map's values. We can keep track of the number of swaps made and subtract that from the current position to get the number of swaps made so far. This will help reduce the time complexity.

Optimized Code Block:

Here's the optimized code:
```C++
#include <iostream>
#include <unordered_map>
using namespace std;
const int divisor = 1000000007;
long long factmodary[100001];
int word[100000]{0};

int main() {
  long long fact = 1;
  for (int i = 1; i <= 100000; i++) {
    fact *= i;
    fact %= divisor;
    factmodary[i] = fact;
  }
  
  for (;;) {
    int N, R;
    cin >> N;
    if (N == 0)
      break;
    cin >> R;
    for (int i = 0; i < N; i++)
      word[i] = i + 1;
    for (int i = 0; i < R; i++) {
      int s, t;
      cin >> s >> t;
      swap(word[s - 1], word[t - 1]);
    }
    unordered_map<int, int> bubblehist;
    bubblehist[word[0]] = 0;
    long long ans = factmodary[N - 1] * (word[0] - 1);
    for (int i = 1; i < N; i++) {
      int facttime = word[i] - 1;
      int bubblenum = bubblehist.size();
      
      if(bubblehist.count(word[i]) == 0) {
        bubblehist[word[i]] = bubblenum;
      }
      facttime -= bubblenum;
      ans += factmodary[N - (i + 1)] * facttime;
      ans %= divisor;
    }
    cout << ans << "\n";
  }
  return 0;
}
```
In this optimized code, dynamic memory allocation has been replaced with stack allocation, map has been replaced with unordered_map, and the nested loop has been optimized. Please note that the optimized code might still have some limitations due to the stack size (for large arrays) and the complexity of the unordered_map (in the worst-case scenario).