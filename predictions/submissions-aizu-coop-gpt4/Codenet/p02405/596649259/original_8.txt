Code Analysis:
This program takes two inputs, H and W, and prints a checkerboard pattern of H rows and W columns. The pattern is a sequence of '.' and '#' characters. If H or W is zero, the program stops. Each time it prints the pattern, it checks for new values of H and W. 

Potential Performance Bottlenecks:
1. I/O operations: The use of cin and cout inside a nested loop can slow down the program due to the high cost of I/O operations.

2. String indexing: The program uses an array of characters ".#" and indexes it using a condition '(i + j) % 2 == 0'. This indexing operation is performed multiple times which can be avoided.

Optimization Strategy:
1. Buffer I/O operations: By using fast I/O operations, we can reduce the time spent on I/O operations. This can be done by using 'ios_base::sync_with_stdio(false)' and 'cin.tie(NULL)'.

2. Avoid string indexing: We can directly print the characters instead of indexing them in an array. This can be done by using an if-else condition to check '(i + j) % 2 == 0'.

3. Avoid endl: 'endl' not only breaks the line but also flushes the output stream which can make the program slower. We can use '\n' instead of 'endl' to avoid unnecessary flushing.

Optimized Code Block:

```cpp
#include <iostream>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int H, W;
  cin >> H >> W;
  
  while (H != 0 && W != 0) {
    for (int i = 1; i <= H; i++) {
      for (int j = 1; j <= W; j++) {
        if ((i + j) % 2 == 0)
          cout << ".";
        else
          cout << "#";
      }
      cout << "\n";
    }
    cout << "\n";
    cin >> H >> W;
  }
  return 0;
}
```

This optimized version will run faster due to the buffering of I/O operations and the elimination of the string indexing operation. The functionality of the program remains the same.