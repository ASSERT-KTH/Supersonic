This program prints a checkerboard pattern of '.' and '#' characters of height H and width W. It repeats the process until the input for both H and W is zero. It seems to be quite optimized already, but there are a few small improvements that could be made.

1. Code Analysis:
   - The code is simple and straightforward, with nested loops for printing the checkerboard pattern.
   - The condition to decide whether to print '.' or '#' is `(i + j) % 2 == 0`, which involves an addition and a modulus operation.

2. Optimization Strategy:
   - Instead of using the modulus operation to determine which character to print, we can use an alternation approach. We can print one character in one iteration and the other character in the next iteration.
   - We can use the bitwise AND operator to determine whether a number is even or odd. This is faster than modulus operation. The last bit of an odd number is always 1, so we can check it using `(number & 1)`.

3. Step-by-step Explanation:
   1. Create a 2D array `pattern` with 2 characters, '.' and '#'. 
   2. Replace the condition `(i + j) % 2 == 0` with `pattern[(i + j) & 1]`. This will determine the character to print using the bitwise AND operator instead of modulus operation. This operation is faster and it also makes the code more concise.

4. Optimized Code Block:
```c++
#include <iostream>
using namespace std;
int main() {
  int H, W;
  char pattern[2] = {'.', '#'};
  cin >> H >> W;
  while (H != 0 && W != 0) {
    for (int i = 1; i <= H; i++) {
      for (int j = 1; j <= W; j++) {
        cout << pattern[(i + j) & 1];
      }
      cout << endl;
    }
    cout << endl;
    cin >> H >> W;
  }
  return 0;
}
```
This should speed up the code slightly. The optimized code still maintains the same functionality and output as the original code. The trade-off is that the code is slightly more complicated due to the use of bitwise operations and an array of characters, but the performance gain justifies this.