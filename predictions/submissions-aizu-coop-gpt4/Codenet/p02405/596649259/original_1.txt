Code Analysis:
This code reads in two integers, H and W, and prints a checkerboard pattern of H rows and W columns using dots and hashtags. The pattern is such that if the sum of the row and column indices is even, it prints a dot, else it prints a hashtag. The program continues to do this until it encounters a pair of zeros for H and W.

Optimization Strategy:
1. Inefficient Data Structures: There are no complex data structures used in the code, so there is no scope for optimization in this area.
2. Redundant Computations: The check `(i + j) % 2 == 0` is performed for each cell in the checkerboard. This computation could be optimized.
3. Loops: The loops are necessary to generate each row and column of the checkerboard. However, we can optimize the inner loop by generating each row as a string and printing it at once.
4. Compiler Optimizations: There isn't much scope for compiler optimizations in this code.

Step-by-Step Explanation:
1. Optimize Redundant Computation: The check `(i + j) % 2 == 0` determines whether to print a dot or a hashtag. This pattern repeats every two cells. Instead of computing this for every cell, we can generate two versions of the checkerboard rows, one starting with a dot and the other with a hashtag, and alternate between them for each row.
2. Optimize Loop: Instead of iterating through each cell in a row, we can build the entire row as a string and print it once. This reduces the I/O operations from W to 1 for each row, which can significantly increase the performance for large values of W.

Here's the optimized code:

```cpp
#include <iostream>
#include <string>
using namespace std;
int main() {
  int H, W;
  cin >> H >> W;
  while (H != 0 && W != 0) {
    string row1 = string(W / 2, ".#"), row2 = string(W / 2, "#.");
    if(W % 2){
        row1 += ".";
        row2 += "#";
    }
    for (int i = 1; i <= H; i++) {
      if(i % 2 == 1) cout << row1 << endl;
      else cout << row2 << endl;
    }
    cout << endl;
    cin >> H >> W;
  }
  return 0;
}
```

In this code, we generate the two versions of the checkerboard rows outside the loop. Then, for each row, we check if the row index is odd or even to decide which version to print. This approach reduces the computation and I/O operations, thereby improving the performance.