Code Analysis:

The given C code reads three integers (hours, minutes, seconds) from the input and calculates the remaining time to complete two hours. It then prints the remaining time twice. The remaining time is calculated using the formula: t = (120 - h * 60 - m) * 60 - s. This formula converts the total time to seconds and subtracts the passed time (also in seconds).

Optimization Strategy:

1. Efficient Data Structures: In this code, there's no usage of complex data structures, so we can't optimize them.

2. Redundant Computations: The calculation of the remaining time is done twice. This is redundant and can be optimized by storing the result in a variable and using that variable for printing.

3. Loop Unrolling: The inner loop runs twice, which can be unrolled to avoid the overhead of loop control instructions.

4. Compiler Optimizations: Compiler optimization flags can be used to further optimize the code. For instance, using -O3 flag with gcc compiler will optimize the code for speed.

Step-by-step Explanation:

1. Redundant Computations: We can avoid redundant calculations by storing the result in a variable. This will save CPU cycles and hence improve performance. The trade-off is a minor increase in memory usage for storing the result, but the performance gain outweighs this cost.

2. Loop Unrolling: Loop unrolling will eliminate the need for loop control instructions, which will in turn reduce the number of CPU instructions and improve performance. However, this will increase the code size slightly.

Optimized Code Block:

```
main(h, m, s, t) {
  for (; scanf("%d%d%d", &h, &m, &s) * -~h;) {
    t = (120 - h * 60 - m) * 60 - s; // Calculate remaining time only once
    printf("%02d:%02d:%02d\n", t / 3600, t / 60 % 60, t % 60); // Print remaining time first time
    t *= 3; // Update time variable
    printf("%02d:%02d:%02d\n", t / 3600, t / 60 % 60, t % 60); // Print remaining time second time
  }
}
```
The optimized code is functionally identical to the original code, but with reduced redundancy and loop overhead. The changes are minimal and the code is simplified by removing the inner loop. The changes are well-commented for clarity.