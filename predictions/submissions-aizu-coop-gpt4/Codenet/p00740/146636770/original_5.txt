The given code has several performance bottlenecks:

1. Memory Allocation: The array `stone` is allocated in each iteration of the infinite loop, which leads to unnecessary memory allocation and deallocation. This is a costly operation and hence should be minimized.

2. Unnecessary Computations: The nested loops at the end of the program perform calculations that are not used anywhere else in the program. This is a waste of CPU cycles and should be removed.

3. Inefficient Looping: The loop for the variable `i` uses modulus operation to cycle indices of the `stone` array. Modulus operation is relatively expensive and can be avoided.

Optimization Strategy:

1. Move the allocation of the `stone` array out of the infinite loop. This way we only allocate memory once.

2. Remove the unnecessary nested loops performing unused calculations.

3. Instead of using modulus operation for cycling array indices, use a conditional statement to reset the index to 0 when it reaches `n`.

Optimized Code:

```cpp
#include <iostream>
using namespace std;
int main(void) {
  int stone[50];
  while (1) {
    for (int k = 0; k < 50; k++) {
      stone[k] = 0;
    }
    int bowl;
    int n, p;
    cin >> n;
    cin >> p;
    if (n == 0 && p == 0) {
      return 0;
    }
    bowl = p;
    bool flg = true;
    int ans;
    for (int i = 0; flg; i++) {
      if (i == n) i = 0; // Replace modulus operation with a conditional statement
      if (bowl == 0) {
        bowl = bowl + stone[i];
        stone[i] = 0;
      } else {
        stone[i]++;
        bowl--;
        if (bowl == 0 && stone[i] == p) {
          ans = i;
          flg = false;
        }
      }
    }
    cout << ans << endl;
  }
}
```

The optimized code should perform better than the original code due to the removed unnecessary computations and memory allocations, and the more efficient looping. However, note that the exact performance gain will depend on the specific input and system configuration.