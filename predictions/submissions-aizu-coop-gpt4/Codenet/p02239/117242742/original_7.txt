1. Code Analysis:
The provided code is implementing Breadth-First Search (BFS) on an adjacency matrix representation of a graph. This is a common algorithm for traversing or searching through a graph data structure. It starts at some arbitrary node (in this case, node 0), explores the neighboring nodes at the present depth prior to moving on to nodes at the next depth level.

2. Optimization Strategy:

   A. Efficient data structures:
   Currently, the code uses a 2D array to represent the graph. For a large graph with a lot of nodes but few edges, this representation may be inefficient in terms of memory usage. An adjacency list would be more space-efficient in such cases.

   B. Redundant computations:
   The code is already optimized and does not seem to perform any redundant computations. It only visits each node once, which is necessary for BFS.

   C. Loops or recursive calls:
   The code doesn't have any recursion. The main loop inside the BFS function is necessary to traverse all nodes. However, the inner loop that goes over all possible nodes could be optimized if we switch to an adjacency list representation, as explained above.

   D. Compiler optimizations:
   No specific compiler optimizations or pragma directives appear to be needed for this code.

3. Step-by-Step Explanation:

   A. Switch to an adjacency list: 
   Instead of using a 2D array to represent the graph, we can use an adjacency list. This means that for each node, we only store a list of its neighbors. This can save a lot of memory if the graph has many nodes but few edges. In the BFS function, instead of looping over all possible nodes, we only loop over the neighbors of the current node.

      Trade-off: The code will become slightly more complex because we need to manage a list of neighbors for each node instead of simply setting a value in a 2D array. However, the performance gain in terms of memory usage can be significant for large sparse graphs.

Here is the optimized code:

```c++
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> adjList; // adjacency list representation of the graph
int n, v[105], d[105];

void bfs(int s) {
  v[s] = true;
  d[s] = 0;
  queue<int> q;
  q.push(s);
  while (!q.empty()) {
    int u = q.front();
    q.pop();
    for (int i = 0; i < adjList[u].size(); i++) { // loop over the neighbors of u
      int neighbor = adjList[u][i];
      if (!v[neighbor]) {
        d[neighbor] = d[u] + 1;
        v[neighbor] = true;
        q.push(neighbor);
      }
    }
  }
}

int main() {
  cin >> n;
  adjList.resize(n);
  for (int i = 0; i < n; i++)
    d[i] = -1;
  for (int i = 0; i < n; i++) {
    int u, v, k;
    cin >> u >> k;
    for (int j = 0; j < k; j++) {
      cin >> v;
      adjList[u - 1].push_back(v - 1); // add v to the neighbors of u
    }
  }
  bfs(0);
  for (int i = 0; i < n; i++)
    cout << i + 1 << ' ' << d[i] << endl;
  return 0;
}
```
In the above code, we replaced the 2D array with an adjacency list to represent the graph. This can save a lot of memory if the graph is sparse. In the BFS function, we now only loop over the neighbors of the current node, which can be faster if each node has few neighbors.