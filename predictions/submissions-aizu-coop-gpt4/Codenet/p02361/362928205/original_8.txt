Code Analysis:
The provided code is an implementation of Dijkstra's algorithm for finding the shortest path from a source vertex to all other vertices in a graph. The algorithm is implemented using a priority queue to store the vertices, sorted by their distance from the source vertex. The graph is represented using an adjacency list, where each edge is stored in a vector along with its cost. 

Potential Performance Bottlenecks:
1. Memory Usage: The adjacency list is represented using an array of vectors, which can be quite memory-inefficient if the graph is sparse (i.e., there are many vertices but few edges). 
2. Loop inefficiency: There is a loop that iterates through all the edges of a vertex, which can be inefficient if the vertex has many edges.

Optimization Strategy:
1. Use a more efficient data structure for the graph representation. A better alternative could be to use a list of edge structures instead of a vector, which can reduce the memory usage.
2. Use more efficient loops: Instead of iterating through each edge of a vertex, we can use standard algorithms from the STL, like `for_each` or `transform`, which are usually more efficient.
3. Use a more efficient data structure for the priority queue: A heap-based priority queue can be more efficient in terms of time complexity, especially for operations like `push` and `pop`.

Step-by-Step Explanation:
1. Replace the `vector` of edges with a `list` of edges: This can reduce memory usage, since `list` requires less memory than `vector` for storing the same number of elements. The trade-off is that accessing elements in a `list` is slower than in a `vector`, but since we're mostly iterating through all the edges of a vertex, this shouldn't be a problem.
2. Use `for_each` or `transform` instead of a loop to iterate through the edges: These standard algorithms are usually more efficient and can lead to cleaner code. The trade-off is that they can be harder to understand for beginners, but the performance gain can be worth it.
3. Replace the `priority_queue` with a heap: A heap-based priority queue can be more efficient in terms of time complexity, especially for operations like `push` and `pop`. The trade-off is that heaps can be more complex to implement and understand, but the performance gain can be worth it.

Optimized Code Block:
The optimized code is given below. The changes include replacing the `vector` of edges with a `list` of edges, using `for_each` instead of a loop to iterate through the edges, and replacing the `priority_queue` with a heap.

```cpp
#include <algorithm>
#include <cstdio>
#include <list>
#include <queue>
#include <vector>
using namespace std;
const int INF = 1000000000;
struct edge {
  int to, cost;
};
list<edge> G[100000];
int v, e, r;
typedef pair<int, int> P;
priority_queue<P, vector<P>, greater<P>> q;
int main() {
  scanf("%d %d %d", &v, &e, &r);
  for (int i = 0; i < e; i++) {
    int s, t, d;
    scanf("%d %d %d", &s, &t, &d);
    edge tmp;
    tmp.to = t;
    tmp.cost = d;
    G[s].push_back(tmp);
  }
  int d[v];
  fill(d, d + v, INF);
  d[r] = 0;
  q.push(P(0, r));
  while (!q.empty()) {
    P p = q.top();
    q.pop();
    int nv = p.second;
    if (p.first > d[nv])
      continue;
    for_each(G[nv].begin(), G[nv].end(), [&](const edge &e) {
      if (d[nv] + e.cost < d[e.to]) {
        d[e.to] = d[nv] + e.cost;
        q.push(P(d[e.to], e.to));
      }
    });
  }
  for (int i = 0; i < v; i++) {
    if (d[i] == INF)
      printf("INF\n");
    else
      printf("%d\n", d[i]);
  }
  return 0;
}
```