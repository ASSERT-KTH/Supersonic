The given code is using Dijkstra's Algorithm to find the shortest path from a source node to all other nodes in the graph. Below are some optimization strategies we can apply to the code:

1. Avoid unnecessary struct construction: Instead of creating a temporary edge struct, we can directly push the edge information to our graph vector.

2. Replace `scanf` and `printf` with `cin` and `cout`: `scanf` and `printf` functions are slower as compared to `cin` and `cout` in C++.

3. Avoid excessive use of indexing: The code uses a lot of indexing to access graph nodes and their weights. We can use range-based for loops and references to avoid this.

4. Use of `auto` keyword: We can use the `auto` keyword to let the compiler automatically deduce the type of the variable at compile-time, reducing the risk of type mismatches.

5. Use of `constexpr`: `constexpr` allows for expression evaluation at compile time rather than runtime, increasing the programs runtime performance.

6. Use of reserve function: We can use the `reserve` function to preallocate memory for the vectors, which can help to avoid reallocation during runtime.

Here's the optimized code incorporating these techniques.

```cpp
#include <algorithm>
#include <iostream>
#include <queue>
#include <vector>
using namespace std;
constexpr int INF = 1000000000;

struct edge {
  int to, cost;
};

vector<vector<edge>> G(100000);
int v, e, r;
typedef pair<int, int> P;
priority_queue<P, vector<P>, greater<P>> q;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> v >> e >> r;
  G.reserve(v);
  for (int i = 0; i < e; i++) {
    int s, t, d;
    cin >> s >> t >> d;
    G[s].push_back({t,d});
  }
  vector<int> d(v, INF);
  d[r] = 0;
  q.push(P(0, r));
  while (!q.empty()) {
    P p = q.top();
    q.pop();
    int nv = p.second;
    if (p.first > d[nv])
      continue;
    for (auto& edge : G[nv]) {
      if (d[nv] + edge.cost < d[edge.to]) {
        d[edge.to] = d[nv] + edge.cost;
        q.push(P(d[edge.to], edge.to));
      }
    }
  }
  for (auto dist : d) {
    if (dist == INF)
      cout << "INF\n";
    else
      cout << dist << "\n";
  }
  return 0;
}
```

Note: The optimization strategies mentioned are focused on improving the runtime performance. However, they may increase the complexity of the code and may not always lead to significant improvements, depending on the specifics of the runtime environment and the compiler used.