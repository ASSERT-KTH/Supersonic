This code implements a shortest path algorithm using a priority queue. The potential areas of optimization include:

1. Reducing the number of push and pop operations on the priority queue.
2. Reducing unnecessary accessing of the adjacency list.
3. Using more efficient I/O operations.

Let's formulate the optimization strategy:

1. **Reducing the number of push and pop operations on the priority queue:** In the current program, every edge is pushed into the priority queue, which results in an O(E log E) time complexity. However, you can optimize this by pushing an edge into the queue only when it provides a shorter path to a node that the current shortest path. This reduces the time complexity to O(E log V).
2. **Reducing unnecessary accessing of the adjacency list:** The adjacency list G[nv] is accessed multiple times within the inner loop. This can be reduced to a single access by storing the edge in a variable.
3. **Using more efficient I/O operations:** The scanf and printf functions are slower compared to cin and cout. However, cin and cout can be made as fast as scanf and printf by using std::ios::sync_with_stdio(false); cin.tie(NULL); at the beginning of the main function.

Here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <queue>
#include <vector>
using namespace std;
const int INF = 1000000000;
struct edge {
  int to, cost;
};
vector<edge> G[100000];
int v, e, r;
typedef pair<int, int> P;
priority_queue<P, vector<P>, greater<P>> q;

int main() {
  std::ios::sync_with_stdio(false); 
  cin.tie(NULL);
  
  cin >> v >> e >> r;
  
  for (int i = 0; i < e; i++) {
    int s, t, d;
    cin >> s >> t >> d;
    edge tmp = {t, d};
    G[s].push_back(tmp);
  }
  
  vector<int> d(v, INF);
  d[r] = 0;
  q.push(P(0, r));
  
  while (!q.empty()) {
    P p = q.top();
    q.pop();
    int nv = p.second;
    if (p.first > d[nv])
      continue;
      
    for (edge &e : G[nv]) {
      if (d[nv] + e.cost < d[e.to]) {
        d[e.to] = d[nv] + e.cost;
        q.push(P(d[e.to], e.to));
      }
    }
  }
  
  for (int i = 0; i < v; i++) {
    if (d[i] == INF)
      cout << "INF\n";
    else
      cout << d[i] << "\n";
  }
  
  return 0;
}
```

Changes in this code:
1. Changed scanf and printf to cin and cout, and added code to speed up cin and cout.
2. Changed array 'd' to a vector and initialized it with INF.
3. Used range based for loop for iterating through the adjacency list. This reduces unnecessary accesses to the adjacency list.
4. The edge 'tmp' is now directly initialized with values instead of assigning values in separate statements. This can potentially allow the compiler to optimize the code further.