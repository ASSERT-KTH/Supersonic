Code Analysis:

The given C++ program reads a list of integers and performs some computations, storing the results in a 2D array called "dp". It seems to perform two types of computations: subtraction and addition of each element with the numbers from 0 to 20 and then accumulating the results in the "dp" array.

The primary bottleneck in the above code is the nested for-loop structure since the time complexity of the algorithm is O(N*21), where N is the size of the input array. Moreover, the code initializes the entire dp array to zero at the start which could be avoided.

Optimization Strategy:

1. Avoid initializing the entire dp array: The program initializes the entire dp array to zero at the start. However, in C++, global or static arrays are automatically initialized to zero. Therefore, this manual initialization is unnecessary and can be omitted to save computation time.

2. Use Fast Input/Output Operations: The standard C++ cin and cout operations are slower compared to printf and scanf operations in C. Therefore, replacing cin and cout with scanf and printf respectively can lead to a slight performance improvement.

3. Code Refactoring: The code can be refactored to make it more readable and maintainable. For instance, declaring variables just before they are used instead of at the start of the function improves code readability.

Step-by-Step Explanation:

1. Avoiding initialization of the dp array: Since global or static arrays in C++ are automatically initialized to zero, we can remove the initial double for-loop that sets every element of dp to zero. This will save a significant amount of computation time especially when N is large.

2. Using fast I/O operations: Replacing cin and cout with scanf and printf can lead to a slight performance improvement. This is because scanf and printf are simpler and more straightforward functions which bypass some of the overheads of cin and cout.

3. Code refactoring: Refactoring the code to make it more readable involves moving the declaration of variables i and j to just before they are used in the for-loops. This makes it easier to see where and how these variables are used.

Optimized Code Block:

Below is the optimized code block. The changes are commented inline.

```cpp
#include <stdio.h>
long long dp[110][21]; // Automatically initialized to zero

int main() {
    int N;
    scanf("%d", &N); // Faster I/O
    int a[101];

    for (int i = 1; i <= N; i++) {
        scanf("%d", &a[i]); // Faster I/O
    }
    
    dp[1][a[1]] = 1;
    
    for (int i = 2; i < N; i++) {
        for (int j = 0; j <= 20; j++) {
            if (j - a[i] >= 0)
                dp[i][j] += dp[i - 1][j - a[i]];
            if (j + a[i] <= 20)
                dp[i][j] += dp[i - 1][j + a[i]];
        }
    }
    printf("%lld\n", dp[N - 1][a[N]]); // Faster I/O
    return 0;
}
```

Note that the optimized code still has the same functionality and produces the same output as the original code.
