Code Analysis:
The provided code is a dynamic programming solution to a problem, presumably a coin change problem. The program reads in the number of required coins and their denominations, and then finds the minimum number of coins needed to accumulate a given sum. 

Potential bottlenecks in this program could be the nested loop structure, which has a time complexity of O(m*n), where m is the number of coin denominations and n is the given sum. 

Optimization Strategy:
1. Data Structures: The data structures used in the program are suitable for the task and don't need optimization.
2. Redundant computations: There are no redundant calculations in the code. Every calculation is necessary for the final result.
3. Loops: The nested loop is a potential target for optimization. However, as this is a dynamic programming solution, it's not immediately obvious how we could optimize this without changing the nature of the algorithm.
4. Compiler Optimizations: We could utilize certain compiler flags for performance optimization.

Step-by-Step Explanation:
1. The data structures used here are efficient for the given problem. Arrays are used to store the coin denominations and the minimum number of coins needed to reach a certain sum. These are accessed in constant time, which is optimal.
2. The only computations in this program are the min function and the addition operation. These are necessary to find the minimum number of coins necessary to reach a certain sum.
3. The nested loop structure is inherent to the nature of the dynamic programming solution. We cannot optimize this without changing the algorithm itself.
4. We can use the -O2 flag during compilation to optimize the program. The -O2 flag performs all optimizations that do not involve a space-speed tradeoff. The compiler does not perform loop unrolling or function inlining when you specify -O2. As compared to -O1, this option increases both compilation time and the performance of the generated code.

Trade-off:
The -O2 compiler optimization may increase the compilation time, but it will increase the performance of the generated code.

Optimized Code Block:
The code remains the same, but you should compile with the -O2 flag for optimization.

```cpp
#include <algorithm>
#include <cstdio>
#include <iostream>
#include <math.h>
using namespace std;
const int INF = 2000000000;
int main() {
  int n, m;
  cin >> n >> m;
  int c[21];
  int mini[50001];
  for (int i = 1; i <= m; i++) {
    cin >> c[i];
  }
  sort(c + 1, c + 1 + m);
  for (int i = 1; i <= n; i++)
    mini[i] = INF;
  for (int i = 1; i <= m; i++) {
    for (int j = 0; j <= n - c[i]; j++) {
      mini[j + c[i]] = min(mini[j] + 1, mini[j + c[i]]);
    }
  }
  cout << mini[n] << endl;
  return 0;
}
```
Compile with: `g++ -O2 main.cpp`