**Code Analysis**

The given code is a solution to a dynamic programming problem. It reads the number of elements `n` and the number of available coins `m`, and then reads the denomination of each coin. It sorts the coins in ascending order. Then, it calculates the minimum number of coins needed to make each amount up to `n`. The result is the minimum number of coins needed to make the amount `n`.

**Optimization Strategy**

1. **Inefficient Data Structures**: The data structures used in the code are efficient for the given task. The use of an array to store coin denominations and minimum coins required is the most space efficient data structure for this task.

2. **Redundant Computations**: The inner loop in the code iterates over all the values from 0 to `n - c[i]`. However, it is not necessary to start from 0 for every coin. We can start from the value of the coin itself as we know that no number of coins less than the value of the coin itself can give a sum equal to the coin's value. This would eliminate unnecessary computations and thus, improve the performance of the program.

3. **Loops or Recursive Calls**: There is no recursion in the given code. We can optimize the nested loop by starting the inner loop from the value of the coin itself as mentioned above.

4. **Compiler Optimizations**: We can add the `std::ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` lines to speed up the cin and cout operations. 

**Step-by-Step Explanation**

1. **Eliminate Redundant Computations**: As mentioned above, we can start the inner loop from the value of coin itself. This is because for any amount less than the value of the coin, the minimum number of coins required would not change by adding this coin to the available coins. This will reduce the number of iterations in the inner loop and thus, improve performance.

2. **Compiler Optimizations**: We can add the `std::ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` lines to speed up the cin and cout operations. This is because the C++ iostreams are synchronized with C-style stdio streams by default. We can disable this synchronization to speed up the iostream operations. However, we should only do this if we are not using any C-style stdio functions (like printf or scanf) in our code.

**Optimized Code Block**

Here's the optimized version of the code.

```cpp
#include <algorithm>
#include <iostream>
#include <cmath>
using namespace std;
const int INF = 2000000000;

int main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n, m;
  cin >> n >> m;

  int c[21];
  int mini[50001];

  for (int i = 1; i <= m; i++) {
    cin >> c[i];
  }

  sort(c + 1, c + 1 + m);

  for (int i = 1; i <= n; i++)
    mini[i] = INF;

  for (int i = 1; i <= m; i++) {
    for (int j = c[i]; j <= n; j++) {
      mini[j] = min(mini[j] + 1, mini[j - c[i]]);
    }
  }

  cout << mini[n] << '\n';

  return 0;
}
```

The changes I made in the code are:
1. Added `std::ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` at the beginning of main function to speed up cin and cout operations.
2. Changed the inner loop's start value from 0 to `c[i]` to eliminate redundant computations.
3. Replaced 'endl' with '\n' to avoid unnecessary flush of the buffer which makes the program faster.