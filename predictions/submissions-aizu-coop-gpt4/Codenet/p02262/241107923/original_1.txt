1. Code Analysis:

The provided code implements the Shell Sort algorithm in C. This algorithm is an enhanced version of the Insertion Sort and works by comparing elements that are distant rather than adjacent. The distance between the elements is gradually reduced to 1, at which point the algorithm becomes equivalent to the Insertion Sort. 

The code has a few potential performance bottlenecks and inefficient memory usage:

- Global variables are being used which can cause problems if the code was to be used in a multi-threaded environment.
- The array h[] of size 20 is statically allocated irrespective of the input size.
- The size of array h[] is fixed and might cause a problem if the input size is large.
- The Insertion Sort subroutine has an unnecessary count variable that increments each time an element is moved during the sort, which is unnecessary for the sorting operation itself.

2. Optimization Strategy:

    A. Replace the use of global variables with local variables passed as arguments.
    B. Dynamically allocate the array h[] based on the input size.
    C. Remove unnecessary computations.
    D. Use inlining for small functions to reduce function call overhead.

3. Step-by-step Explanation:

    A. The global variables are replaced by local variables which are then passed as arguments to the functions that need them. This is done to avoid potential issues that could arise in a multi-threaded environment. Also, it makes the functions more self-contained and reusable.
    B. Instead of statically allocating an array of size 20 for h[], we can dynamically allocate it based on the input size. This will make the code more efficient in terms of memory usage, especially when the input size is small.
    C. The count variable in the insertionSort function is incrementing each time an element is moved during the sort. However, this information is not used anywhere else in the program, so we can remove it. This will slightly improve the performance by eliminating an unnecessary operation.
    D. Function inlining can be used for small, frequently used functions. Inlining a function means to insert the complete body of the function at every point the function is called. While inlining, the compiler replaces the function call statement with the actual code of the function. This can reduce function call overhead.

4. Optimized Code Block:
```c
#include <stdio.h>
#include <stdlib.h>

void insertionSort(int *, int, int);
void ShellSort(int, int *);

int main(void) {
  int num, *arr, *h, i, j, temp = 0, temp_temp;
  scanf("%d", &num);
  arr = (int *)malloc(sizeof(int) * num);
  h = (int *)malloc(sizeof(int) * (num+1));
  for (i = 0; i < num; i++)
    scanf("%d", &arr[i]);
  ShellSort(num, arr, h, &temp, &temp_temp);
  printf("%d\n", temp_temp + 1);
  for (i = temp; i != -1; i--)
    i == 0 ? printf("%d\n", h[i]) : printf("%d ", h[i]);
  for (i = 0; i < num; i++) {
    printf("%d\n", arr[i]);
  }
  free(arr);
  free(h);
  return 0;
}

void ShellSort(int num, int *arr, int *h, int *temp, int *temp_temp) {
  int i, j, n, m;
  h[0] = 1;
  for (i = 0; i < num; i++) {
    h[i + 1] = 3 * h[i] + 1;
  }
  for (i = 0; i < num; i++) {
    if (num < h[i]) {
      *temp = i - 1;
      break;
    }
  }
  for (i = *temp; i != -1; i--) {
    if (i == *temp) {
      *temp_temp = *temp;
    }
    insertionSort(arr, num, &h[i]);
  }
}

inline void insertionSort(int *arr, int num, int *h) {
  int i, j, v;
  for (i = (*h); i < num; i++) {
    v = arr[i];
    j = i - (*h);
    while (j >= 0 && arr[j] > v) {
      arr[j + (*h)] = arr[j];
      j = j - (*h);
    }
    arr[j + (*h)] = v;
  }
}
```
In the optimized code, the global variables are replaced by local ones, and the h[] array is dynamically allocated based on the input size. The count variable in the insertionSort function is removed as it was not used anywhere else in the program. The insertionSort function is also inlined to reduce function call overhead.