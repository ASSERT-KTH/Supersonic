Code Analysis:
The given code reads a string and an integer (m) from the user. Then it reads m numbers and sums them up. The sum is used to shift the characters in the string circularly based on the sum value. The code is written in a compact style without much use of function calls, which is already efficient regarding function call overhead. However, there are some inefficiencies and potential improvements.

Optimization Strategy:

1. Inefficient Data Structures: The code uses a char array to hold the string. This is efficient in terms of memory usage. However, using the string class in C++ might make the code more readable and safer, but it will not improve the performance in this case.

2. Redundant Computation: The code computes strlen(s) in each iteration. This is not efficient because the length of the string s does not change within the loop. The length can be calculated once and stored in a variable.

3. Loop Optimization: The code uses two separate loops to read m numbers and to print the shifted string. This could be combined into one loop to reduce the number of iterations. However, this would make the code slightly more complex.

4. Compiler Optimization: Compiler optimizations are usually enabled with flags during the compilation process. For example, -O2 or -O3 flags with g++ enables many optimizations including loop unrolling and tail call optimization.

Step-by-Step Explanation:

1. Calculate the length of the string once and store it in a variable. This eliminates the need to calculate the length in each iteration. This saves computational resources as the length function requires O(n) time where n is the length of the string.

2. Combine the two for-loops into one. This reduces the overall number of iterations, which in turn improves performance. However, this increases the complexity of the code as the single loop now needs to handle two different tasks.

Optimized Code Block:

```c
#include <stdio.h>
#include <string.h>

int i, m, h, t, a;
int main() {
  char s[201];
  while (scanf("%s%d", s, &m), s[0] != '-') {
    a = strlen(s); // calculate the length once
    t = 0; // reset t for each string
    for (i = 0; i < m; i++) {
      scanf("%d", &h);
      t += h;
      printf("%c", s[(t) % a]); // print the shifted character
    }
    for (; i < a; i++) // continue printing the rest of the string
      printf("%c", s[(t + i) % a]);
    puts("");
  }
  return 0;
}
```

In this optimized code, the length of the string is calculated once and the two loops are combined into one, reducing the total number of iterations. Also, the global variable 't' is reset for each string, which was missing in the original code. This could cause incorrect output if multiple strings are entered. By resetting 't' for each string, this issue is fixed. The optimized code preserves the functionality of the original code but is more efficient.