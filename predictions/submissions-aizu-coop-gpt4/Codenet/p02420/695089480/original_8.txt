The given C program appears to be a rotating string program. It reads a string and an integer m, then for m times it reads an integer h and adds it to a total t. After that, it prints the string rotated by t positions.

Let's identify possible areas of optimization:

1. The use of global variables: The set of global variables can be encapsulated into a single struct and passed around as needed, which would make the code cleaner and easier to understand.
2. The use of C-style strings: C++ provides the string class which is safer and easier to deal with than C-style strings.
3. The use of scanf and printf for IO: C++ provides cin and cout which are generally safer and easier to use than scanf and printf.

Optimization Strategy:

1. Convert the C-style code to C++ style code:
    1. Replace the global variables with local variables.
    2. Replace the C-style string with the C++ string class.
    3. Replace scanf and printf with cin and cout.
2. Optimize the rotation of the string: The current code rotates the string character by character, which is inefficient. Instead, we can use the std::rotate function from the STL, which is more efficient.

Optimized Code:

```cpp
#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string s;
  int m;
  
  // Continue reading until '-' is encountered
  while (std::cin >> s >> m, s[0] != '-') {
    int a = s.length();
    int t = 0;
    
    // Read m numbers and add them to t
    for (int i = 0; i < m; ++i) {
      int h;
      std::cin >> h;
      t += h;
    }
    
    // Rotate the string by t positions
    t %= a; // Reduce t to be less than a
    std::rotate(s.begin(), s.begin() + t, s.end());
    
    // Output the rotated string
    std::cout << s << std::endl;
  }
  
  return 0;
}
```

Here, we've replaced all the C-style code with C++-style code, making the program more modern and safe. We've also optimized the string rotation part by using the std::rotate function from the STL, which performs the rotation more efficiently than the original character-by-character operation.