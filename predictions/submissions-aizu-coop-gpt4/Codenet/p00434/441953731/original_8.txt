1. Code Analysis:
The given C++ code reads 28 integers from the input, stores them in a set, and then prints the numbers between 1 and 30 inclusive that have not been inserted into the set.

2. Optimization Strategy:
    1. Changing Data Structure: A set is not the best data structure for this problem because it involves unnecessary overhead for maintaining order and uniqueness. A simple boolean array would suffice.
    2. Avoiding Redundant Computations: The operation data.count(i) has a time complexity of O(log(n)) in a set. This can be reduced to O(1) by using a boolean array.
    3. Loops Optimization: There is no need for loop optimization in this case as it doesn't have nested loops or recursion.
    4. Compiler Optimization: We can use the flag -O2 or -O3 for optimizing the entire program.

3. Step-by-Step Explanation:
   1. Rationale: Replace the set with a boolean array. This reduces the space complexity and also the time complexity for checking if a number exists in the data structure from O(log(n)) to O(1). 
   2. Trade-offs: The boolean array assumes the maximum possible integer that can be input, which may increase memory usage if the maximum possible integer is large. However, in this scenario, the maximum number is 30 which is reasonable.

4. Optimized Code Block:

```cpp
#include <iostream>
using namespace std;

int main() {
    bool data[31] = {false}; // boolean array of size 31, initialized to false
    int n;
    for (int i = 0; i < 28; i++) {
        cin >> n;
        data[n] = true; // set the value at index n to true
    }
    for (int i = 1; i <= 30; i++) {
        if (!data[i]) // check if the value at index i is false
            cout << i << endl;
    }
    return 0;
}
```