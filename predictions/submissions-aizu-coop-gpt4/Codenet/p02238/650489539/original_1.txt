This program uses Depth-First Search (DFS) to traverse a graph. The main performance bottlenecks in the program are the use of unnecessary 2D array (G) and the inefficient use of DFS. 

Here's the optimization strategy:

1. Replace the inefficient 2D array (G) with an adjacency list.
2. Remove the unnecessary "if" condition check inside the "search_loop" function.
3. Use "std::vector" instead of regular arrays.
4. Use pre-increment (++i) instead of post-increment (i++) in loops.
5. Use "reserve" for vectors to avoid reallocations.

Here is the step-by-step explanation:

1. The 2D array (G) is inefficient because it uses much more memory than necessary. A graph with a small number of edges but many nodes will have most of its matrix cells empty. This can be optimized by using an adjacency list, which only stores the nodes each node is connected to. This greatly reduces memory usage.

2. The "if" condition inside the loop in "search_loop" function is unnecessary and can be removed. This condition would only be true if there is a self-loop, which is not handled by the rest of the code anyway.

3. C++'s "std::vector" can be used instead of regular arrays. This allows for dynamic resizing and generally better performance.

4. In C++, pre-increment (++i) is generally faster than post-increment (i++). This is because post-increment needs to create a temporary object, increment the value, and then return the temporary, while pre-increment simply increments the value.

5. Finally, we can use the "reserve" function for vectors to preallocate memory. This avoids costly reallocations when the vector needs to grow.

Here is the optimized code:

```c++
#include <iostream>
#include <vector>
using namespace std;

#define WHITE 0
#define GRAY 1
#define BLACK 2

vector<vector<int>> G;
vector<int> color;
vector<int> d, f;
int t;

void search_loop(int i) {
  d[i] = ++t;
  color[i] = GRAY;
  
  for (int next : G[i]) {
    if (color[next] == WHITE) {
      search_loop(next);
    }
  }
  
  f[i] = ++t;
  color[i] = BLACK;
}

void dfs(int n) {
  color.reserve(n + 1);
  d.reserve(n + 1);
  f.reserve(n + 1);
  
  for (int i = 1; i <= n; ++i)
    color[i] = WHITE;
    
  t = 0;
  
  for (int i = 1; i <= n; ++i) {
    if (color[i] == WHITE)
      search_loop(i);
  }
  
  for (int i = 1; i <= n; ++i) {
    cout << i << " " << d[i] << " " << f[i] << endl;
  }
}

int main() {
  int n, i, e, k;
  
  cin >> n;
  
  G.resize(n + 1);
  
  for (i = 1; i <= n; ++i) {
    cin >> i >> e;
    for (int j = 1; j <= e; ++j) {
      cin >> k;
      G[i].push_back(k);
    }
  }
  
  dfs(n);
  
  return 0;
}
```
This code is much more efficient in terms of memory usage and execution speed, while still maintaining the same functionality as the original code.