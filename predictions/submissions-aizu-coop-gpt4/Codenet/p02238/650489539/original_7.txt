1. Code Analysis:

The code is implementing a Depth-First Search (DFS) algorithm on a graph. It starts with initializing the graph and colors, and then it performs DFS on every node that hasn't been visited. At last, it prints out the discovery time and finish time of each node.

2. Optimization Strategy:

A. Data Structures:
- The graph is represented as a 2D array. This is not efficient for sparse graphs where most elements are zero. The adjacency list representation would be more memory efficient in such cases.

B. Redundant Computations:
- The initialization of all elements in the graph to zero is unnecessary as it's already done by the compiler.

C. Loops:
- The loop that iterates through all nodes to check if it's visited is inefficient. A better approach would be to record the visited nodes and only iterate through them.

D. Compiler Optimizations:
- There's a chance of stack overflow due to recursive DFS. An iterative approach with explicit stack could be more efficient.

3. Step-by-Step Explanation:

A. Change the graph representation from adjacency matrix to adjacency list. It will save memory usage for sparse graphs.
B. Remove the redundant initialization of the graph. The compiler already initializes all elements to zero.
C. Instead of iterating through all nodes, maintain a list of unvisited nodes. This can save time as we don't need to go through all nodes every time.
D. Replace the recursive DFS with an iterative one using an explicit stack. Avoiding recursion can prevent the risk of stack overflow.

4. Optimized Code Block:

```cpp
#include <iostream>
#include <vector>
#include <stack>

using namespace std;

#define WHITE 0
#define GRAY 1
#define BLACK 2

vector<vector<int>> G(101);
vector<int> color(101);
vector<int> d(101), f(101);
int n, t;

void search_loop(int i) {
    stack<int> st;
    st.push(i);

    while (!st.empty()) {
        int node = st.top();
        st.pop();

        if (color[node] == WHITE) {
            color[node] = GRAY;
            d[node] = ++t;

            for (int next : G[node]) {
                if (color[next] == WHITE) {
                    st.push(next);
                }
            }

            color[node] = BLACK;
            f[node] = ++t;
        }
    }
}

void dfs() {
    fill(color.begin(), color.begin() + n + 1, WHITE);
    t = 0;

    for (int i = 1; i <= n; i++)
        if (color[i] == WHITE)
            search_loop(i);

    for (int i = 1; i <= n; i++)
        cout << i << " " << d[i] << " " << f[i] << endl;
}

int main() {
    cin >> n;

    int i, e, k;
    for (int _ = 0; _ < n; _++) {
        cin >> i >> e;
        while (e--) {
            cin >> k;
            G[i].push_back(k);
        }
    }

    dfs();

    return 0;
}
```