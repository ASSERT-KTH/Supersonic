Code Analysis:
The given program is implementing Union-Find data structure, mainly used for disjoint set operations. The functions are performing union and find operations on a set of elements. The find function is used to find the representative of the set to which the element belongs. The union operation is performed to merge two sets. After the set operations, some queries are performed to check if two elements belong to the same set or not.

In the current implementation, the find function uses a recursive approach to find the representative of a set. This is a potential performance bottleneck because in worst-case scenarios, the recursion depth can be as large as n, which can lead to significant overhead.

Optimization Strategy:

1. Use path compression in the find operation to flatten the structure of the tree whenever find is called. This will make subsequent calls to find for any nodes in the tree faster.

2. Use iterative approach instead of recursion in the find function. Iteration is generally faster than recursion in C++ because it doesn't involve the overhead of function calls and stack frame management.

3. Use fast input/output methods. Cin and cout are slower compared to scanf and printf.

Step-by-step Explanation:

1. Path Compression: Whenever find is called, this method makes sure that all the nodes encountered on the way to the root node point directly to the root node. This optimizes future find operations not only for the current element but also for those on the path to the root. It reduces the time complexity for future find operations to almost O(1).

2. Iterative Find: Using an iterative approach in the find function can reduce the overhead of function calls and stack frame management involved in recursion, thus making the function faster.

3. Fast Input/Output: Using faster I/O methods can significantly reduce the time taken by the program to read from and write to the console. This is particularly useful when the program has to handle a large amount of data.

Optimized Code Block:

```cpp
#include <cstdio>
#define MAXN 100000

int join[MAXN], num[MAXN];

int find(int x) {
    while(x != join[x]) {
        join[x] = join[join[x]]; // path compression
        x = join[x];
    }
    return x;
}

int main() {
    int n, m, s, t, q;
    scanf("%d %d", &n, &m);
  
    for (int i = 0; i < n; i++) {
        join[i] = i;
        num[i] = 0;
    }
  
    while(m--) {
        scanf("%d %d", &s, &t);
        s = find(s);
        t = find(t);
        if (s != t) {
            if (num[s] < num[t])
                join[s] = join[t];
            else {
                join[t] = join[s];
                if (num[s] == num[t])
                    num[s]++;
            }
        }
    }
  
    scanf("%d", &q);
    while(q--) {
        scanf("%d %d", &s, &t);
        if (find(s) == find(t))
            printf("yes\n");
        else
            printf("no\n");
    }

    return 0;
}

```
