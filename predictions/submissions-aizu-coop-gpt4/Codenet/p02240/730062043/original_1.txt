Code Analysis:
This program uses an algorithm known as Union-Find or disjoint set union to determine if two points are in the same set. There is a find function that uses recursion to find the parent of a given node. In the main function, first, all nodes are initialized to be their own parent. Then, the program reads 'm' pairs of integers and performs union operations on the pairs. Finally, it reads 'q' pairs of integers and checks if they belong to the same set.

Optimization Strategy:
1. Path Compression in Find: The find function currently uses recursion and does not implement path compression. Path compression is a technique where, during the find operation, the nodes on the way to the root are made direct children of the root. This reduces the tree height and speeds up future find operations.

2. Non-Recursive Find: We can also get rid of the recursion in the find function and use a while loop instead. This will save stack space and be more efficient.

3. Fast Input/Output: The program uses cin and cout for input and output, which are slower compared to scanf and printf. So, we can use scanf and printf for faster I/O.

4. Pre-allocation of arrays: The size of arrays join[] and num[] is pre-allocated to 100000. Instead, we can take 'n' as input first and then allocate size 'n' to these arrays. This would save memory.

Optimized Code Block:
```cpp
#include <cstdio>
#include <vector>
using namespace std;

vector<int> join, num;

int find(int x) {
    while(x != join[x]) {
        join[x] = join[join[x]]; // path compression
        x = join[x];
    }
    return x;
}

int main() {
    int n, m, s, t;
    scanf("%d %d", &n, &m);
    
    join.resize(n);
    num.resize(n, 0);
    
    for (int i = 0; i < n; i++) {
        join[i] = i;
    }
    
    for (int i = 0; i < m; i++) {
        scanf("%d %d", &s, &t);
        s = find(s);
        t = find(t);
        if (s != t) {
            if (num[s] < num[t])
                join[s] = join[t];
            else {
                join[t] = join[s];
                if (num[s] == num[t])
                    num[s]++;
            }
        }
    }
    
    int q;
    scanf("%d", &q);
    
    for (int i = 0; i < q; i++) {
        scanf("%d %d", &s, &t);
        if (find(s) == find(t))
            printf("yes\n");
        else
            printf("no\n");
    }
    
    return 0;
}
```

Explanation:
1. Path Compression: This optimization is done in the find function. While traversing up the tree to find the root, we set the parent of every node we visit to be the root. This helps flatten the tree and makes future find operations faster. 

2. Non-Recursive Find: The find function has been changed from recursive to a while loop. This saves stack space and is more efficient.

3. Fast I/O: The cin and cout have been replaced with scanf and printf for faster I/O. 

4. Pre-allocation of arrays: I've changed the arrays to vectors and resized them after taking 'n' as input. This way, we only allocate as much space as we need. 

Trade-offs:
1. Path compression and non-recursive find make the code a bit more complex. However, the performance gain is significant, making it a worthwhile trade-off.

2. Using scanf and printf instead of cin and cout can also make the code harder to read, particularly for those not familiar with C-style I/O. However, the speed improvement is substantial, especially for large inputs.

3. Changing arrays to vectors and resizing them based on input can lead to extra heap allocations/deallocations. However, this is generally a small cost compared to the memory saved.