Code Analysis:
The program appears to be implementing a disjoint-set data structure using union by rank and path compression. It reads a series of union operations and then a series of find operations and outputs whether the two elements are in the same set or not. The potential performance bottleneck is in the find function which recursively looks up the parent of an element until it gets to the root of the set. This can cause a lot of function call overhead if the set has a long chain of elements. 

Optimization Strategy:
1. We can convert the recursive function find into an iterative one. This will eliminate the overhead of function calls. But more importantly, it allows us to use path compression to make subsequent finds on any of the elements faster. Path compression involves setting the parent of each visited node to the root.

2. Use std::vector instead of arrays. std::vector is a dynamic array, it can be resized at any time during the runtime of the program. This can save a lot of memory if n is much less than 100000. Moreover, vectors are safer to use than arrays.

3. Use std::ios_base::sync_with_stdio(0) and cin.tie(0). These commands turn off synchronization between the C and C++ standard streams (which can slow down performance) and untie cin from cout (which can slow down performance when alternating between input and output).

4. Use '\n' instead of std::endl. std::endl causes the buffer to flush, which can slow down performance.

Optimized Code Block:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int find(vector<int>& parent, int x) {
  int root = x;
  while (root != parent[root])
    root = parent[root];
  while (x != root) {
    int next = parent[x];
    parent[x] = root;
    x = next;
  }
  return root;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  int n, m;
  cin >> n >> m;
  vector<int> parent(n), rank(n, 0);
  for (int i = 0; i < n; ++i)
    parent[i] = i;

  for (int i = 0; i < m; ++i) {
    int s, t;
    cin >> s >> t;
    s = find(parent, s);
    t = find(parent, t);
    if (s != t) {
      if (rank[s] < rank[t])
        parent[s] = t;
      else {
        parent[t] = s;
        if (rank[s] == rank[t])
          rank[s]++;
      }
    }
  }

  int q;
  cin >> q;
  for (int i = 0; i < q; ++i) {
    int s, t;
    cin >> s >> t;
    if (find(parent, s) == find(parent, t))
      cout << "yes\n";
    else
      cout << "no\n";
  }
  return 0;
}
```

Explanation:
1. The find function has been rewritten to be iterative and to perform path compression. This reduces the height of the trees representing the sets, speeding up subsequent find operations.

2. The arrays join and num have been replaced with vectors parent and rank. This saves memory if the number of elements is significantly less than 100000 and is safer than using arrays.

3. The commands ios_base::sync_with_stdio(0) and cin.tie(0) have been added to speed up input and output.

4. The use of std::endl has been replaced with '\n' to avoid unnecessary buffer flushes.