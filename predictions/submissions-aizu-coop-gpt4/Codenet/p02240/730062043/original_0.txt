1. Code Analysis:

The provided code is an implementation of a disjoint-set data structure, also known as a union-find data structure. The main operations include the `find` function, which determines the set to which a particular element belongs, and the union operation, which merges two sets into one. The code also includes a section that checks if two elements belong to the same set.

The code mainly uses recursion in the `find` function and loops in the `main` function. The recursion in the `find` function can lead to excessive function call overhead, especially for large inputs. Moreover, the code does not apply path compression in the `find` operation, which can significantly improve efficiency.

2. Optimization Strategy:

A. Inefficient Data Structures: The data structures used here (arrays) are efficient for the task at hand.

B. Redundant or Unnecessary Computations: The `find` operation can be optimized using path compression to avoid unnecessary recursive calls.

C. Optimizing Loops/Recursive Calls: The `find` function can be converted from a recursive function to an iterative one to reduce function call overhead.

D. Compiler Optimizations: Compiler optimizations are not applicable in this case as the changes necessary involve altering the logic of the code rather than hinting the compiler to optimize certain parts of the code.

3. Step-by-Step Explanation:

A. Converting `find` from Recursive to Iterative: By converting the `find` function to an iterative one, we can avoid the overhead of excessive function calls. We will replace the recursion with a while loop that will continue until the element is its own parent.

B. Applying Path Compression in `find`: Path compression is a technique that flattens the structure of the tree whenever `find` is called, which means each node points directly to its parent. It will significantly improve the efficiency of subsequent `find` operations.

4. Optimized Code Block:
```cpp
#include <iostream>
using namespace std;

// Iterative find function with path compression
int find(int join[], int x) {
    int root = x;
    // find the root
    while(root != join[root]) {
        root = join[root];
    }
    // compress path
    while(x != root) {
        int next = join[x];
        join[x] = root;
        x = next;
    }
    return root;
}

int main(int argc, char *argv[]) {
    int n, m, join[100000], num[100000], s, t;
    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        join[i] = i;
        num[i] = 0;
    }
    for (int i = 0; i < m; i++) {
        cin >> s >> t;
        s = find(join, s);
        t = find(join, t);
        if (s != t) {
            if (num[s] < num[t])
                join[s] = join[t];
            else {
                join[t] = join[s];
                if (num[s] == num[t])
                    num[s]++;
            }
        }
    }
    int q;
    cin >> q;
    for (int i = 0; i < q; i++) {
        cin >> s >> t;
        if (find(join, s) == find(join, t))
            cout << "yes\n";
        else
            cout << "no\n";
    }
}
```
This optimized version of the code uses an iterative `find` function with path compression to significantly improve efficiency and reduce unnecessary computations. The functionality and output of the original code are preserved.