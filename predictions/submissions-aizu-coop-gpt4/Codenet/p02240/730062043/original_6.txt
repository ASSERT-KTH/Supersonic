Analysis:
The code provided is implementing the Union-Find/Disjoint Set data structure, which is useful for efficiently solving the connected component problem in a graph. The `find` function is written in a recursive way, which could lead to a performance issue due to function call overheads and potential stack overflows for large inputs.

Optimization Strategy:
1. Implementing Path Compression in `find` function: This optimizes the find operation and makes subsequent finds on the same element faster.
2. Loop Unrolling: We can unroll loops where we know the iteration count to reduce branching and increase instruction-level parallelism.
3. Compiler Optimizations: Using compiler optimization flags like `-O2` or `-O3` can also help optimize the program.

Step-by-Step Explanation:
1. Path Compression in `find` function: This involves making each node point directly to the root of the tree in the find operation. This will make the tree flat and any subsequent find operations will be faster.
2. Loop Unrolling: The loop in the main function which initializes `join` and `num` arrays can be unrolled, but considering the size of `n` can be large, it's better to keep it as it is. Unrolling it would make the code longer and harder to read.
3. Compiler Optimizations: Use `-O2` or `-O3` flags when compiling the code. This will enable the compiler to perform various optimizations like function inlining, loop unrolling, etc. on the code.

Trade-offs:
1. Path Compression: This will make the code a bit more complex but the performance gain is significant so it's worth it.
2. Loop Unrolling: This will make the code longer and harder to read. It's not worth it for large loops.
3. Compiler Optimizations: These optimizations can sometimes lead to unexpected behavior but generally they are safe to use and improve performance significantly.

Optimized Code Block:
```cpp
#include <iostream>
using namespace std;

int find(int join[], int x) {
  if (x != join[x])
    join[x] = find(join, join[x]);
  return join[x];
}

int main(int argc, char *argv[]) {
  int n, m, join[100000], num[100000], s, t;
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    join[i] = i;
    num[i] = 0;
  }
  for (int i = 0; i < m; i++) {
    cin >> s >> t;
    s = find(join, s);
    t = find(join, t);
    if (s != t) {
      if (num[s] < num[t])
        join[s] = join[t];
      else {
        join[t] = join[s];
        if (num[s] == num[t])
          num[s]++;
      }
    }
  }
  int q;
  cin >> q;
  for (int i = 0; i < q; i++) {
    cin >> s >> t;
    if (find(join, s) == find(join, t))
      cout << "yes\n";
    else
      cout << "no\n";
  }
}
```