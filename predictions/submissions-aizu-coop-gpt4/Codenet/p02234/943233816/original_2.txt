This code is an implementation of the Matrix Chain Multiplication problem using dynamic programming. The program reads in an array of dimensions for the matrices, then calculates the minimum number of multiplications needed to multiply the chain of matrices.

Let's start with the analysis:

1. Code Analysis: 

The code seems to be fairly optimized already. Here are the potential areas for improvement:

- The code is using global arrays `m` and `p`, which are not the best practice and can lead to side effects. This can be improved by passing these as parameters to the function.
- The innermost loop is iterating `j-k` times, which can be a bottleneck if `n` is large. However, this is inherent to the algorithm, and any optimization here may lead to incorrect results.
- The use of macros (`#define INF 100000000`) can be replaced with constants for better type safety.
- There is a potential for improving memory usage by using a 1D array instead of a 2D array, but this would require a major rewrite of the code and a different algorithm.

2. Optimization Strategy:

- Replace global arrays `m` and `p` with local arrays and pass them as parameters.
- Replace macros with constants.
- Since the innermost loop is inherent to the dynamic programming approach of the algorithm, we can't optimize it without changing the algorithm itself.

3. Step-by-Step Explanation:

- Replace global arrays with local ones: Global variables are usually considered bad practice because they can lead to side effects and make the code harder to understand and maintain. In this case, we are using two global arrays `m` and `p`. We can replace them with local arrays and pass them to the function `matrixChainOrder`.
- Replace macros with constants: The macro `INF` is used to represent a large number. This can be replaced with a constant for better type safety.

4. Optimized Code Block:

Here is the optimized code with the above changes:

```C++
#include <stdio.h>
#include <vector>

const int INF = 100000000;

int matrixChainOrder(const std::vector<int>& p, int pl, std::vector<std::vector<int>>& m) {
  int n, i, j, l, k, q;
  n = pl - 1;
  for (i = 1; i <= n; i++) {
    m[i][i] = 0;
  }
  for (l = 2; l <= n; l++) {
    for (i = 1; i <= n - l + 1; i++) {
      j = i + l - 1;
      m[i][j] = INF;
      for (k = i; k < j; k++) {
        q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
        if (m[i][j] > q)
          m[i][j] = q;
      }
    }
  }
  return m[1][n];
}

int main() {
  int n, i, x, k;
  scanf("%d", &n);

  std::vector<int> p(n+1);
  std::vector<std::vector<int>> m(n+1, std::vector<int>(n+1));

  for (i = 0; i < n; i++) {
    scanf("%d", &p[i]);
    if (i < n - 1)
      scanf("%d", &k);
  }
  scanf("%d", &p[n]);

  x = matrixChainOrder(p, n + 1, m);
  printf("%d\n", x);

  return 0;
}
```

Note that the optimized code is slightly more complex due to the use of C++ STL vectors. But it brings benefits in terms of code safety and readability.