Code Analysis:
The above C++ code is a brute-force approach in which all possible pairs of values are examined. The code has a significant amount of redundant computations and unnecessary memory allocation. The while-loop is a potential performance bottleneck and there is inefficiency in memory usage due to the allocation of a large 2-D vector that is not fully utilized.

Optimization Strategy:

1. Removing Unnecessary Data Structures: In the given code, the 2-D vector 'tax' keeps track of pairs (a,b) that satisfy a condition. However, these pairs are not used anywhere else in the code except for calculating 'maxi'. Therefore, we can remove this vector entirely and directly compute the value of 'maxi' in the loop.

2. Reducing Redundant Computations: There are multiple instances where the same computation is repeated. For instance, the expression '((a * (100 + x)) / 100.0)' is calculated multiple times. We can calculate this once, store the result in a variable, and reuse it.

3. Optimizing Loops: The while loop goes from a=1 to a=s. However, the condition 'b != 0' implies that 'b' must be positive, so 'a' must be less than 's'. Thus, we can start the loop from a=1 and end at a=s-1.

4. Compiler Optimizations: We can use the '-O3' compiler flag, which enables all optimization flags, to make the code more efficient.

Step-by-Step Explanation:

1. Removing Unnecessary Data Structures: We will remove the 'tax' vector and directly calculate 'maxi' in the loop. This reduces memory usage and eliminates the need to index and store values in the vector, thus improving performance.

2. Reducing Redundant Computations: We will calculate '((a * (100 + x)) / 100.0)' once, store the result in a variable 'a_tax', and use this variable in the subsequent computations. This reduces the number of arithmetic operations, thereby improving performance.

3. Optimizing Loops: We will change the while-loop to run from a=1 to a=s-1. This slight change will reduce the number of iterations, leading to performance improvement.

4. Compiler Optimizations: Adding the '-O3' compiler flag will enable the compiler to perform various optimizations like inline expansion, delay slot filling, constant folding and propagation, etc.

Trade-offs: These optimizations increase the efficiency of the code at the cost of slightly increased code complexity. However, the complexity remains manageable and the performance gains justify the changes.

Optimized Code Block:

```cpp
#include <algorithm>
#include <iostream>
using namespace std;
int main() {
  int x, y, s;
  while (cin >> x >> y >> s && (x || y || s)) {
    int maxi = 0, a = 1, b;
    while (a < s) {
      double a_tax = (a * (100 + x)) / 100.0;
      b = (s - (int)a_tax + 1) / ((100 + x) / 100.0);
      if ((int)a_tax + (int)((b * (100 + x)) / 100.0) == s && b != 0) {
        maxi = max(maxi, (int)(a_tax * (100 + y) / 100.0) +
                             (int)((b * (100 + y)) / 100.0));
      }
      a++;
    }
    cout << maxi << endl;
  }
  return 0;
}
```