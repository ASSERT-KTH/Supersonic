Code Analysis:
This code accepts a series of pairs of integers as inputs (with the loop exiting when a pair of zeros is entered), storing them in the arrays H and W. Then, it prints a rectangle of "#" symbols for each pair, where H is the height of the rectangle and W is the width. 

Potential performance bottlenecks include inefficient use of IO and unoptimized loop structure.

Optimization Strategy:
1. Efficient IO: Using printf and scanf instead of std::cout and std::cin can increase the IO speed. 
2. Avoid Unnecessary Variables: The b variable is not necessary and can be removed. 
3. Use efficient loop structure: Instead of nested loops, we can use a single loop and the string constructor to generate the rows of the rectangle.

Optimized Code Block:
```C++
#include <cstdio>
#include <string>
using namespace std;

int main() {
  int a = 0, H[100], W[100];
  while (1) {
    scanf("%d %d", &H[a], &W[a]);
    if (H[a] == 0 && W[a] == 0)
      break;
    a++;
  }
  for (int b = 0; b < a; b++) {
    string row(W[b], '#');
    for (int i = 0; i < H[b]; i++) {
      printf("%s\n", row.c_str());
    }
    printf("\n");
  }
  return 0;
}
```

Step-by-Step Explanation:
1. I replaced `cin` and `cout` with `scanf` and `printf` for faster IO. Although `cin` and `cout` are easier to use, they are slower than `scanf` and `printf`. The trade-off here is that `scanf` and `printf` are less safe and a bit harder to use.

2. I removed the `b` variable. `b` was used to track the index of the current rectangle to be printed. Instead of using a separate variable, I just used the loop counter of the second loop.

3. Instead of using nested loops to generate each row, I used the string constructor to generate a string of '#' characters of the required length. This reduces the complexity of the inner loop from O(n) to O(1). The trade-off here is that this approach uses slightly more memory to store the temporary string.

4. I replaced the `printf("#")` with `printf("%s\n", row.c_str())`. This reduces the number of calls to `printf`, which is a relatively expensive operation. Each call to `printf` involves a system call, which is much more expensive than a regular function call. By reducing the number of system calls, we can improve the performance of the program. The trade-off here is that this approach makes the code less straightforward and harder to understand for beginners.