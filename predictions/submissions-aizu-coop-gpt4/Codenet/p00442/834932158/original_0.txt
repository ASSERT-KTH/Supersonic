Here are some steps we can take to optimize this code:

1. **Avoid using `#include <bits/stdc++.h>`**: This header file includes nearly all standard libraries, which can significantly increase compilation time. Instead, include only the libraries you actually need.

2. **Avoid using `#define` for functions**: Although `#define` can make the code shorter, it can also make it harder to read and debug. It's better to use inline functions or const variables where necessary.

3. **Avoid using global variables**: Global variables can cause issues with the scope and lifetime of the variable, which can lead to bugs and memory leaks. 

4. **Use `std::ios_base::sync_with_stdio(false); cin.tie(NULL);`**: This will speed up cin and cout operations.

5. **Use appropriate data types**: Use data types that are as small as possible to fit your data. This can help reduce memory usage.

6. **Avoid unnecessary memory allocation**: For example, in the `tsort` method, instead of pushing all the elements to the answer vector and then popping them out, you can directly print the elements as they are popped.

7. **Avoid map lookups in a loop**: Map lookups have a complexity of O(log n). Instead, you can use a vector of pairs and sort it, which will reduce the complexity to O(1).

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#include <utility>

const int mod = 1e9 + 7;

inline void ADD(int& a, int b) { a = (a + b) % mod; }
inline void SUB(int& a, int b) { a = (a + mod - b) % mod; }
inline void MUL(int& a, int b) { a = (a * b) % mod; }

using namespace std;

class t_sort {
public:
  int n;
  vector<int> deg;
  vector<vector<int>> G;
  void init(int N) {
    n = N;
    deg.resize(n);
    G.resize(n);
  }
  void add_edge(int from, int to) {
    G[from].push_back(to);
    deg[to]++;
  }
  void tsort() {
    stack<int> st;
    for(int i = 0; i < n; i++) if (deg[i] == 0) st.push(i);
    while (!st.empty()) {
      int v = st.top();
      st.pop();
      cout << v+1 << "\n";
      for(int i = 0; i < G[v].size(); i++) if (--deg[G[v][i]] == 0) st.push(G[v][i]);
    }
  }
};

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, m;
  cin >> n >> m;
  t_sort t;
  t.init(n);
  vector<pair<int, int>> edges;
  for(int i = 0; i < m; i++) {
    int x, y;
    cin >> x >> y;
    x--;
    y--;
    t.add_edge(x, y);
    edges.emplace_back(x, y);
  }
  
  // sort the edges based on the first element and then the second
  sort(edges.begin(), edges.end());

  t.tsort();
  int res = 1;
  for(int i = 0; i < n - 1; i++) {
    // use binary_search to find the pair in the sorted vector
    if (!binary_search(edges.begin(), edges.end(), make_pair(i, i+1)))
      res = 0;
  }
  cout << (res == 1 ? 0 : 1) << "\n";
  return 0;
}
```

In this optimized version, we've removed the unnecessary macros, global variables, and included only the necessary header files, which should make the code faster and more efficient. We have also replaced the map with a sorted vector for faster lookups, and the elements are printed directly instead of being pushed to a vector.