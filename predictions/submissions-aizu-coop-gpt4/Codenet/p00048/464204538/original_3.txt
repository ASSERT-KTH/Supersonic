Code Analysis:
1. The provided code is a simple program that takes in a number, `f`, and prints out a category based on the value of `f`. It uses nested ternary operators to decide which category to print.
2. The code reads input in a `for` loop that continues until `scanf` fails (returns a value not equal to 1). 

Optimization Strategy:
1. Data Structures: The current program does not use any data structures, but it can benefit from using an array of structures for storing the weight categories and their corresponding weights. It would make the code cleaner and more manageable.
2. Redundant Computations: The program does not have any redundant computations, but it does have a complex sequence of nested ternary operators that can be simplified by using a linear search in the array of structures.
3. Loops: The program has a single input-reading loop. However, we can introduce a loop to search for the corresponding weight category, which will simplify the code and possibly make it faster by removing the nested ternary operators.
4. Compiler Optimizations: The current program does not have any specific parts that can benefit from compiler optimizations or pragma directives. 

Step-by-Step Explanation:
1. Create an array of structures, where each structure contains a weight limit and the corresponding category. This array should be sorted in decreasing order of weight limits.
2. Replace the nested ternary operators with a loop that iterates over the array of structures and finds the first structure whose weight limit is less than or equal to `f`. It then prints the corresponding category.
3. The main benefit of this optimization is improved code readability and maintainability. The trade-off is a minimal increase in memory usage because of the array of structures, but this is negligible compared to the readability improvement.

Optimized Code Block:
```c
#include <stdio.h>

typedef struct {
  float weight;
  const char* category;
} WeightCategory;

WeightCategory categories[] = {
  {91, "heavy"},
  {81, "light heavy"},
  {75, "middle"},
  {69, "light middle"},
  {64, "welter"},
  {60, "light welter"},
  {57, "light"},
  {54, "feather"},
  {51, "bantam"},
  {48, "fly"},
  {0, "light fly"}
};

int main() {
  float f;
  while (scanf("%f", &f) == 1) {
    int i;
    for (i = 0; f <= categories[i].weight; i++);
    puts(categories[i].category);
  }
  return 0;
}
```
In this optimized code, we first define a structure `WeightCategory` to store the weight limit and the corresponding category. We then create a sorted array of these structures. In the main function, we replace the nested ternary operators with a loop that finds the appropriate category based on the input weight, `f`, and then prints it.