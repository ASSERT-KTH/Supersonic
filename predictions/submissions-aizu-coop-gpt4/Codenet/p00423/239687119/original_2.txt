Code Analysis:
The current code reads a series of two-player games with their respective scores. If the scores are equal, each player gets their score added to their total. If not, the player with the higher score gets the sum of both scores. The total scores for each set of games are stored in two vectors and printed at the end. The main bottlenecks in this code are:

1. The usage of vectors for storing the scores: This can lead to extra memory usage and slow down due to dynamic memory allocation and deallocation. 
2. The unnecessary "else" construct in the while loop which checks n's value: This increases branching and can slow down the program.
3. The final for loop traverses the entire vectors to print the scores: This is unnecessary as the scores can be printed as soon as they are calculated.

Optimization Strategy:

1. Avoid using vectors: Instead of storing all values in vectors and printing them at the end, print the values as soon as they are calculated and reset the variables. This will save memory and reduce the number of iterations.
2. Remove unnecessary "else" construct: Removing the "else" will make the code cleaner and might slightly improve the performance.
3. Print scores immediately: Instead of storing the scores and printing them later, print them as soon as they are calculated.

Optimized Code:

```cpp
#include <iostream>

int main() {
  int n;
  int a = 0;
  int b = 0;
  int game_a, game_b;
  
  while (1) {
    std::cin >> n;
    if (n == 0)
      break;
    
    for (int i = 0; i < n; ++i) {
      std::cin >> game_a >> game_b;
      if (game_a == game_b) {
        a += game_a;
        b += game_b;
      } else if (game_a > game_b)
        a += game_a + game_b;
      else
        b += game_a + game_b;
    }
    
    std::cout << a << " " << b << std::endl;
    a = 0;
    b = 0;
  }
  
  return 0;
}
```

In this optimized code, the vectors are removed, reducing memory usage. The scores are printed as soon as they are calculated, reducing the number of iterations. The "else" construct is also removed to make the code cleaner.