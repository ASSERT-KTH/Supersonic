This code reads a series of game scores from the input and stores the total scores for each player (a and b) in two vectors (veca and vecb). It then prints the total scores for each game. Here are some potential optimizations:

1. Code Analysis:
    - Unnecessary variable 'vec': This variable is declared but not used in the program. It can be removed.
    - Optimized declaration of variables: Variables a and b can be declared inside the while loop to limit their scope and ensure they are reset to zero for each iteration. 
    - Inefficient storage of results: The scores are stored in two vectors, which can consume a lot of memory for large inputs. Since the scores are printed in the end, they can be printed within the while loop itself, thereby avoiding the need for the vectors.

2. Optimization Strategy:
    - Remove unused variables.
    - Limit the scope of variables where possible.
    - Avoid unnecessary data storage. 

3. Step-by-Step Explanation:
    - Step 1: Remove the unused variable 'vec'.
    - Step 2: Move the declaration of variables a and b inside the while loop to limit their scope.
    - Step 3: Print the scores directly inside the while loop, and remove the vectors.

4. Optimized Code Block:
```cpp
#include <iostream>

int main() {
  int n;
  int game_a, game_b;

  while (1) {
    int a = 0;
    int b = 0;
    std::cin >> n;

    if (n == 0)
      break;

    for (int i = 0; i < n; ++i) {
      std::cin >> game_a >> game_b;
      
      if (game_a == game_b) {
        a += game_a;
        b += game_b;
      } else if (game_a > game_b)
        a += game_a + game_b;
      else
        b += game_a + game_b;
    }
    
    std::cout << a << " " << b << std::endl;
  }
  
  return 0;
}
```
In this optimized code, we have removed the unused variable 'vec', limited the scope of variables 'a' and 'b', and eliminated the need for vectors by printing the scores directly within the while loop. This results in less memory usage and a slight performance improvement.