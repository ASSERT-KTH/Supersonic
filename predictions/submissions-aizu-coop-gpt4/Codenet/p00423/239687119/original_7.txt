Code Analysis:
The given C++ code reads an indefinite number of games where each game consists of n turns. In each turn, two values, game_a and game_b are read. If both are equal, each is added to a and b respectively, otherwise, the sum of both values is added to whichever of a or b corresponds to the greater value. The total scores of each game are then stored in two vectors (veca and vecb). At the end of the program, it prints the scores of each game.

Optimization Strategy:

1. Inefficient Data Structures: The vectors veca and vecb are used to store the scores of all games. This is inefficient as the entire memory for the vectors is allocated upfront even before the number of games is known.

2. Redundant Computations: The check for whether game_a is greater than game_b or not is unnecessary. The sum of game_a and game_b can be computed once and then added to a or b based on the comparison.

3. Loops or Recursive Calls: The loop to print the scores can be optimized by using range-based for loop.

4. Compiler Optimizations: Compiler optimizations can be used to optimize the program. The flag -O2 can be used for general optimizations which include optimizations that do not involve a space-speed tradeoff.

Step-by-Step Explanation:

1. To solve the issue of inefficient data structures, we will get rid of vectors veca and vecb. Instead of storing all scores and printing them at the end, we'll print the scores immediately after each game. This will save memory as we don't need to store all scores at once.
   
2. To avoid redundant computations, we'll calculate the sum of game_a and game_b once and use this value in all conditions. This will save CPU time as we won't need to compute the sum twice.

3. We'll use a range-based for loop to print the scores which is more efficient and makes the code cleaner and easier to understand.
   
4. We'll suggest using the -O2 flag when compiling the program which will lead to general optimizations.

Optimized Code Block:

```c++
#include <iostream>

int main() {
  int n;
  int game_a, game_b;
  while (true) {
    std::cin >> n;
    if (n == 0)
      break;
    else {
      int a = 0, b = 0;
      for (int i = 0; i < n; ++i) {
        std::cin >> game_a >> game_b;
        int sum = game_a + game_b;
        if (game_a == game_b) {
          a += game_a;
          b += game_b;
        } else if (game_a > game_b)
          a += sum;
        else
          b += sum;
      }
      std::cout << a << " " << b << std::endl;
    }
  }
  return 0;
}
```
In this optimized code, we are not storing the scores and directly printing them after each game. Also, we have removed the redundant computation of the sum of game_a and game_b. The range-based for loop has been removed as it's not needed anymore.