Code Analysis:

The current program reads a sequence of pairs of integers (game_a, game_b) until a 0 is entered. It then processes the pairs according to some rules and stores the results in two vectors. Finally, it prints out the contents of the vectors. 

Potential performance issues:

1. Multiple calls to push_back could cause vector reallocation and movement, which can be expensive. 
2. Reading input pair by pair can be slower than reading all at once.

Optimization Strategy:

1. Use reserve() method to preallocate memory for vectors. We can estimate the size if we know the maximum possible size beforehand. If we don't, we can still reserve some reasonable amount of memory to reduce the number of reallocations.
2. Use fast input/output methods to speed up reading and writing.
3. Avoid multiple vector indexing by storing the result in temporary variables and then pushing them to the vectors.
4. Using 'break' statement in a while loop might cause a branch misprediction which can slow down the code. Instead, we can use a more clear exit condition.

Optimized Code:

```cpp
#include <iostream>
#include <vector>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  std::vector<int> veca, vecb;
  veca.reserve(1000); // Reserve memory beforehand
  vecb.reserve(1000); // Reserve memory beforehand

  int n = -1;
  while (n != 0) {
    std::cin >> n;
    if (n != 0) {
      int a = 0, b = 0;
      for (int i = 0; i < n; ++i) {
        int game_a, game_b;
        std::cin >> game_a >> game_b;
        if (game_a == game_b) {
          a += game_a;
          b += game_b;
        } else if (game_a > game_b)
          a += game_a + game_b;
        else
          b += game_a + game_b;
      }
      veca.push_back(a);
      vecb.push_back(b);
    }
  }
  for (int i = 0; i < veca.size(); ++i) {
    std::cout << veca[i] << " " << vecb[i] << "\n";
  }
  return 0;
}
```

Rationale:

1. Reading and writing in C++ can be slow with cin and cout. By turning off the synchronization of all the C++ standard streams with their corresponding C streams and untie cin from cout, we can achieve faster input/output.
2. By reserving memory for our vectors beforehand, we can avoid expensive reallocations and movements of data. If we don't know the exact size, a reasonable estimate can still help reduce the number of reallocations.
3. Instead of using the 'break' statement, we provide a clear exit condition for the while loop. This can help avoid potential branch mispredictions.
4. By storing the results in temporary variables (a and b) and pushing them into the vectors only once, we avoid multiple vector indexing, which can be costly.