The given code reads integer inputs from the user, and then calculates how many times each number appears in the second set of inputs compared to the first set. This is done by using an array as a counter for the first set of numbers and then checking the counts for the second set. The result is stored in variable 'd' and is printed at the end.

1. Code Analysis: 
The code contains a couple of inefficiencies. 

- First, the array size is fixed to 999. This means that if the input number is more than 999, the program will crash or behave unexpectedly. 
- Second, the array is integer type. If the input numbers are within a reasonable range, this could lead to a considerable waste of memory. 
- Third, the scanf function is repeatedly called in the loop which can be relatively slow. 

2. Optimization Strategy:

A. Data Structures: Use a dynamic data structure like a vector in C++ or dynamic array in C, which can adjust its size according to the input. Also, consider using a smaller data type for the array, such as char, which can reduce the memory usage.

B. Redundant Computations: Instead of repeatedly calling the scanf function, we can read all inputs at once into an array and then process this array. 

C. Loops: The loops are already quite optimized. However, we should handle the potential case where 'b' is greater than the array size.

D. Compiler Optimizations: Compiler optimizations are generally enabled by setting certain compiler flags. In GCC, for example, you can use the -O2 flag to enable all non-loop optimizations. But this is beyond the scope of the code itself.

3. Step-by-Step Explanation:

A. Change the array to a dynamic array (or vector in C++), and use a smaller data type (char instead of int). This will allow us to handle any number of inputs and reduce memory usage. 

B. Read all inputs at once into an array and then process this array. This will reduce the overhead of the scanf function call.

C. Handle the case where 'b' is greater than the array size by dynamically resizing the array.

D. As for compiler optimizations, it's usually enough to set the appropriate flags when compiling the code.

4. Optimized Code Block:

Here's an optimized version of the code in C++:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  int n;
  cin >> n;
  vector<char> counter(1000, 0); // Initialize with a reasonable size and zero.
  int num;
  
  // Read the first set of numbers and update the counter.
  for (int i = 0; i < n; ++i) {
    cin >> num;
    if (num >= counter.size())  // If 'num' is greater than the counter size, resize the counter.
      counter.resize(num + 1, 0);
    ++counter[num];
  }
  
  cin >> n;
  int result = 0;
  
  // Read the second set of numbers and update the result.
  for (int i = 0; i < n; ++i) {
    cin >> num;
    if (num < counter.size())  // Only update the result if 'num' is within the counter size.
      result += counter[num];
  }
  
  cout << result << '\n';
  
  return 0;
}
```