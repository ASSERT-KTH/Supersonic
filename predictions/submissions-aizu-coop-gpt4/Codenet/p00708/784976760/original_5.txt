First, let's analyze the given code. It appears to be implementing a variant of Kruskal's algorithm for minimum spanning tree calculation, with additional adjustments for node radii. The main performance bottlenecks in the current code are:

1. The use of a vector of vectors for storing node attributes, which is less efficient in terms of memory and access times compared to using a structure or class.
2. Unnecessary computation and memory usage in calculating distances between all pairs of nodes and storing them, even when the radii of the nodes overlap.
3. Use of recursion in the root finding operation.
4. Not using the advantages of C++ standard library to its fullest.

Based on these findings, here is the optimization strategy:

1. Replace the vector of vectors with a structure to store node attributes.
2. Avoid calculating and storing distances for pairs where the radii of the nodes overlap.
3. Use iteration instead of recursion in the root finding operation to avoid potential stack overflow for large inputs.
4. Use C++ standard library's priority_queue to sort the distances, which can provide potential performance improvement when dealing with large inputs.
5. Use of fast I/O operations for reading and writing data.

Now let's implement these optimizations:

```cpp
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <queue>
#include <vector>
using namespace std;
#define M 9999
int parent[M], a[M], b[M];
pair<double, int> node[M];

// Use iterative function instead of recursive for finding root
int root(int a) {
  while (parent[a] != a)
    a = parent[a];
  return a;
}

int unite(int a, int b) {
  int x = root(a), y = root(b);
  if (x == y)
    return 0;
  parent[x] = y;
  return 1;
}

// Define a structure to store node attributes
struct Node {
  double x, y, z, r;
};

int main() {
  int i, j, m, n;
  double x, y, z, r;
  // Use fast I/O operations
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  while (cin >> n, n) {
    vector<Node> v(n);
    for (i = 0; i < n; i++)
      cin >> v[i].x >> v[i].y >> v[i].z >> v[i].r;
    for (i = 0; i < n; i++)
      parent[i] = i;
    priority_queue<pair<double, int>> pq;
    for (m = i = 0; i < n; i++)
      for (j = i + 1; j < n; j++) {
        x = sqrt((v[i].x - v[j].x) * (v[i].x - v[j].x) + (v[i].y - v[j].y) * (v[i].y - v[j].y) +
                 (v[i].z - v[j].z) * (v[i].z - v[j].z)) -
            v[i].r - v[j].r;
        if (x <= 0)
          unite(i, j);
        else
          pq.push({-x, m}), a[m] = i, b[m] = j, m++;
      }
    x = 0;
    while (!pq.empty()) {
      auto p = pq.top();
      pq.pop();
      if (unite(a[p.second], b[p.second]))
        x -= p.first;
    }
    printf("%.3f\n", x);
  }
}
```

In the optimized code, we used a structure instead of a vector of vectors, and replaced the recursion in the root finding operation with an iterative approach. We also used a priority queue to sort the distances and included fast I/O operations. These optimizations should significantly improve the performance and memory usage of the code.