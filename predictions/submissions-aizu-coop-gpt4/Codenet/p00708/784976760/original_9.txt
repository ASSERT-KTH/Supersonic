The code is implementing a version of the Kruskal's algorithm for finding the Minimum Spanning Tree (MST) of a graph. The nodes are 3D points with an associated radius, and the edges are the distances between these nodes, minus their radii. For each pair of nodes, if they overlap (distance is less or equal to the sum of their radii), they are united into the same set, otherwise, their distance is stored to be used in the MST calculation.

Here are some optimization strategies:

1. Use Struct Instead of Separate Arrays: The code uses separate arrays `a`, `b`, and `node` to store the pair of nodes and their distance. This can be replaced by a single array of a struct that holds these three values. This can improve cache locality and therefore performance.

2. Avoid sqrt in Distance Calculation: The distance calculation involves a square root operation, which is costly. Since the distances are only compared and summed, the square root can be removed. This does not affect the correctness of the algorithm, as the order of the distances remains the same.

3. Avoid Redundant unite Calls: The `unite` function is called even with pairs of nodes that have already been united. This can be avoided by checking if two nodes are in the same set before calling `unite`.

4. Avoid scanf and printf: The `scanf` and `printf` functions are slower than their C++ counterparts `cin` and `cout`. They can be replaced to improve performance.

Here's the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

#define MAXN 9999

struct Node {
    int x, y;
    double dist;
};

int parent[MAXN];

int root(int a) { return parent[a] == a ? a : parent[a] = root(parent[a]); }

bool unite(int a, int b) {
    int x = root(a), y = root(b);
    if (x == y)
        return false;
    parent[x] = y;
    return true;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    while (cin >> n, n) {
        vector<vector<double>> v(n, vector<double>(4));
        for (auto &i : v)
            cin >> i[0] >> i[1] >> i[2] >> i[3];

        for (int i = 0; i < n; i++)
            parent[i] = i;

        vector<Node> edges;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                double dist = 0;
                for (int k = 0; k < 3; k++)
                    dist += (v[i][k] - v[j][k]) * (v[i][k] - v[j][k]);
                dist -= (v[i][3] + v[j][3]) * (v[i][3] + v[j][3]);
                if (dist <= 0)
                    unite(i, j);
                else
                    edges.push_back({i, j, dist});
            }
        }

        sort(edges.begin(), edges.end(), [](const Node &a, const Node &b) {
            return a.dist < b.dist;
        });

        double total_dist = 0;
        for (const auto &edge : edges)
            if (unite(edge.x, edge.y))
                total_dist += sqrt(edge.dist);

        cout.precision(3);
        cout << fixed << total_dist << '\n';
    }
}
```
The optimized code follows the same logic as the initial one, but with some modifications for better performance. It combines the three arrays into one struct array, removes the sqrt calculation from the distance comparison, and replaces `scanf` and `printf` with `cin` and `cout`.