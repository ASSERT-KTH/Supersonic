This program seems to be a C++ implementation of Kruskal's algorithm which is used to find the minimum spanning tree for a connected, undirected graph. The performance can be optimized in a few ways:

1. Use of Data Structures: The program uses a pair of a double and an integer to represent nodes. A better approach would be to use a struct to represent the edges which would make the code easier to follow and potentially more efficient.

2. Redundant Computations: In the nested for-loop, the distance between two points is calculated using the formula sqrt((x2-x1)^2 + (y2-y1)^2 + (z2-z1)^2) - r1 - r2. This involves a square root operation, which is computationally expensive. We can store the square of distances instead of the actual distances and compare them. The square root operation can be moved to the end, outside the loop, to reduce the number of times it is executed.

3. Loop Optimization: The nested for-loop can be optimized by avoiding recomputation of distances between the same pair of points. This can be achieved by storing the computed distances in a matrix and reusing them when required.

4. Compiler Optimizations: Use of compiler flags like -O3 can optimize the code during compilation. 

Now, let's proceed to optimize the code step-by-step.

First, let's create a struct to represent the edges and store the squares of distances:

```c++
struct Edge {
  int u, v;
  double w;
  Edge() {}
  Edge(int _u, int _v, double _w) : u(_u), v(_v), w(_w) {}
  bool operator<(const Edge &other) const { return w < other.w; }
};
```

Next, let's modify the main function to use this struct and avoid recomputation of distances:

```c++
int main() {
  int i, j, m, n;
  double x, y, z, r;
  for (; scanf("%d", &n), n;) {
    vector<vector<double>> v;
    for (i = 0; i < n; i++)
      scanf("%lf%lf%lf%lf", &x, &y, &z, &r), v.push_back({x, y, z, r});
    for (i = 0; i < n; i++)
      parent[i] = i;
    vector<Edge> edges;
    for (i = 0; i < n; i++)
      for (j = i + 1; j < n; j++) {
        double dist_square = 0;
        for (int k = 0; k < 3; k++)
          dist_square += (v[i][k] - v[j][k]) * (v[i][k] - v[j][k]);
        dist_square -= (v[i][3] + v[j][3]) * (v[i][3] + v[j][3]);
        if (dist_square <= 0)
          unite(i, j);
        else
          edges.push_back(Edge(i, j, dist_square));
      }
    sort(edges.begin(), edges.end());
    double total = 0;
    for (i = 0; i < edges.size(); i++)
      if (unite(edges[i].u, edges[i].v))
        total += sqrt(edges[i].w);
    printf("%.3f\n", total);
  }
}
```

This optimized code should have the same functionality as the original code, but with a better running time and potentially less memory usage. The trade-off is that the code is a bit more complex due to the use of the struct and vector of edges.