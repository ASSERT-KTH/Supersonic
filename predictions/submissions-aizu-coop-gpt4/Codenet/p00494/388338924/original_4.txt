1. Code Analysis:

This C++ program reads a string from the user and then counts the contiguous occurrences of 'J', 'O', and 'I' characters in the string. The program then finds the maximum number of contiguous 'O's that have an equal or greater number of 'J's before and 'I's after. 

2. Optimization Strategy:

A. Data Structures: The current data structures used in the code are fairly efficient for the task at hand. However, it seems that the char array 'x' is larger than it needs to be.

B. Redundant Computations: The strlen function is called on the string 'x', which iterates through the entire string. This computation is unnecessary, as we can find the length of the string while we are reading it from the user.

C. Loops: The code contains multiple while loops that perform similar tasks - they count the number of contiguous occurrences of a certain character. These loops can be combined into a single loop.

D. Compiler Optimizations: Using compiler flags such as "-O3" can help auto-optimize the code.

3. Step-by-Step Explanation:

A. Data Structures: We can reduce the size of the 'x' array if we read the string directly into this array. This way, we only allocate as much memory as we need.

B. Redundant Computations: We can remove the call to strlen and instead keep track of the length of the string as we read it in from the user.

C. Loops: Instead of having separate while loops for each character, we can have a single loop that keeps track of the current character we are counting and the number of occurrences.

D. Compiler Optimizations: Using the "-O3" flag with g++ will perform several automatic optimizations on the code, such as function inlining, loop unrolling, and others.

4. Optimized Code Block:

Here is the optimized code:

```cplusplus
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <string>
using namespace std;
char x[1000005];
int counts[3] = {0, 0, 0};  // counts for J, O, I respectively
int a = 0, b = 0, c = 0, d = 0, e, f, i, j, k, maxi = 0, leng = 0;
int main() {
  // read the string and find its length
  while(scanf("%c", &x[leng]), x[leng] != '\n'){
    ++leng;
  }
  x[leng] = '\0';
  while (a < leng) {
    if (x[a] != 'J') {
      a++;
    } else {
      for (int i = 0; i < 3; ++i) {
        while (x[a] == "JOI"[i]) {
          ++counts[i];
          ++a;
        }
      }
      if (counts[0] >= counts[1] && counts[1] <= counts[2]) {
        maxi = max(maxi, counts[1]);
      }
      for (int i = 0; i < 3; ++i) {
        counts[i] = 0;
      }
    }
  }
  printf("%d\n", maxi);
  scanf("%d", &a);
  return 0;
}
```
In this optimized code, we read the string and calculate its length in one step, removing the need for the `strlen` function. We then use a single loop to count the occurrences of 'J', 'O', and 'I', using an array to keep track of the counts. We also use the string "JOI" to avoid repeating code for each character. Finally, we reset the counts for the next iteration. These changes should make the code more efficient by reducing the number of iterations and computations.