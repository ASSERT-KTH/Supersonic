The provided code is a simple C program that prints the multiplication table from 1 to 9. Though this program is quite straightforward and may not necessarily require any optimization, there are still some improvements that can be made to optimize the code.

Optimization Strategy:

1. Unnecessary Computations: In the current program, the multiplication operation i*j is performed twice, once for the computation and once for printing. This is a minor inefficiency that can be improved.

2. Loop Unrolling: A common technique to speed up the execution time is to unroll loops. However, in this case, loop unrolling may not be beneficial as the loops are already quite small (running from 1 to 9) and the overhead of managing larger unrolled loops might outweigh the benefits.

3. Compiler Optimizations: You can use compiler optimizations flags like -O2 or -O3 which can optimize the code for you. But these optimizations are out of the scope of this task.

Step-by-Step Explanation:

1. To eliminate the unnecessary computation, we will store the result of the multiplication in a variable and use that variable for printing. This way, the multiplication operation is carried out only once, reducing the computational overhead.

2. As explained before, loop unrolling can lead to performance gain but it increases code size and complexity. In our case, the loops are already quite small, so this optimization may not be beneficial. However, in larger, more complex programs, loop unrolling can be a very effective optimization strategy.

Optimized Code Block:

```c
#include <stdio.h>
int main(void) {
  int i, j, product;
  for (i = 1; i < 10; i++) {
    for (j = 1; j < 10; j++) {
      product = i * j;
      printf("%dx%d=%d\n", i, j, product);
    }
  }
  return (0);
}
```

In this optimized code, we have introduced a new variable 'product' to store the result of the multiplication. This small change reduces the amount of computation needed and thus improves efficiency.