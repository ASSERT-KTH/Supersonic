1. Code Analysis: The given code is a simple program to print multiplication tables from 1 to 9. It uses nested for-loops where the outer loop runs from 1 to 9 (for the multiplier) and the inner loop also runs from 1 to 9 (for the multiplicand). For each iteration, it prints the multiplier, multiplicand and their product. The primary areas for optimization here would be minimizing the number of operations and optimizing the use of printf().

2. Optimization Strategy:
    1. The printf() function is a heavy operation and can slow down the program, especially when called multiple times. Instead of calling printf() in every iteration, we can append the result to a string and print the string once after the loop.
    2. Reduce the number of multiplications. In the current code, multiplication is done in every iteration. We can optimize this by storing the previous multiplication result and adding the multiplier to it in each iteration.

3. Step-by-Step Explanation:
    1. Instead of calling printf() in every iteration, we will use sprintf() to append the result to a string. This string will be printed once after the loop. This reduces the number of heavy I/O operations, thereby improving performance.
    2. Instead of multiplying i and j in every iteration, we will store the previous multiplication result in a variable and add i to this variable in each iteration. This effectively reduces the number of multiplication operations from 81 (9x9) to 9, which can lead to significant performance improvement in larger programs.

Here is the optimized code with the changes:

```C
#include <stdio.h>
#include <string.h>

int main() {
  char output[1000] = ""; // initialize output string
  char buffer[50]; // buffer to hold each line

  for (int i = 1; i < 10; i++) {
    int result = i; // initialize with first multiplication result
    for (int j = 1; j < 10; j++) {
      sprintf(buffer, "%dx%d=%d\n", i, j, result);
      strcat(output, buffer); // append to output string
      result += i; // calculate next multiplication result
    }
  }
  printf("%s", output); // print the output string
  return 0;
}
```
Please note that the use of strings and concatenation operations may increase memory usage a bit, but the trade-off results in a significant reduction in I/O operations and multiplications, leading to an overall improvement in performance.