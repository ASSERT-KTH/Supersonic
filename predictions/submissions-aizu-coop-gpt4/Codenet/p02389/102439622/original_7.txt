The given program is a simple one with no significant performance bottlenecks, inefficient memory usage, or complex loops. However, there are still a few minor adjustments that can be made to enhance its efficiency.

Optimization Strategy:

1. The variables 'a' and 'b' are used to compute both the area and perimeter of a rectangle. We can save computation time by calculating and storing these multiplications in separate variables.

2. The printf function is called only once in the program, and the arguments are the results of two different expressions. We can optimize this by directly printing the expressions instead of storing their results in separate variables.

Step-by-Step Explanation:

1. Instead of computing 'a * b' and 'a * 2' twice, we calculate these values once and store them in separate variables. This will reduce the number of multiplications from 4 to 2, thereby saving computation time.

2. We replace the variables 'area' and 'c' in the printf function with their respective expressions. This way, we can avoid the need for storage and computation of these variables. However, this increases the code complexity slightly, as the direct computations inside printf make the code slightly harder to read.

Optimized Code Block:

Here is the optimized code:

```c
#include <stdio.h>
int main() {
  int a, b;
  scanf("%d %d", &a, &b);
  int a_times_b = a * b;
  int a_times_2 = a * 2;
  int b_times_2 = b * 2;
  printf("%d %d\n", a_times_b, a_times_2 + b_times_2);
}
```

Remember, the level of optimization performed here is quite minimal due to the simplicity of the initial code. For more complex codes, the optimization process could involve more significant changes, such as using more efficient data structures, optimizing loops, or even using parallel processing.