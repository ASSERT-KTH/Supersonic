The given C++ code is quite simple and efficient already. However, there are still some minor optimizations that can be made:

1. Code Analysis: 
- There are no performance bottlenecks or inefficient memory usage in the code. The only computation is a multiplication and addition operation, which are very efficient.
- The memory usage of the code is already minimal. The code only uses two integer variables, 'a' and 'b'.
- The code is not using any data structures.
- The code is not using any loops or recursive calls.
- The code is not using compiler optimizations or pragma directives.

2. Optimization Strategy:
- The code can be optimized by reducing the number of multiplications. The code is currently doing the multiplication twice, once for 'a * b' and once for 'b * 2'. This can be reduced to one multiplication by storing the result of 'a * b' in a variable and reusing it.
- The code can also be optimized by removing the unnecessary space at the end of the output.

3. Step-by-Step Explanation:
- Store the result of 'a * b' in a variable 'product'.
- Use this 'product' variable for output and in the computation of the second output value.
- Remove the unnecessary space at the end of the output.

4. Optimized Code Block:

```cpp
#include <iostream>
int main() {
  int a;
  int b;
  std::cin >> a >> b;
  int product = a * b;
  std::cout << product << " " << (product + a + b) << std::endl;
}
```
With this optimization, the code performs one less multiplication operation. The trade-off is that the code uses one extra integer variable to store the product. However, this trade-off is worth it because multiplication operations are more costly than memory usage in this case.