Code Analysis:

The given code is a simple program that takes two integers as input, computes their product and the sum of their double, and prints these two values. There is no obvious performance bottleneck or inefficient memory usage in this code. One potential optimization could be the redundant computation of 'a*2' and 'b*2'. 

Optimization Strategy:

1. Data structures: The data structures used in this code are efficient for its purpose. No changes are needed.
2. Redundant computations: We can reduce the redundant computation of 'a*2' and 'b*2' by computing them once and storing them in separate variables.
3. Loops or Recursive calls: There are no loops or recursive calls in this code.
4. Compiler optimizations: This code is simple enough that compiler optimizations are not necessary.

Step-by-Step Explanation:

We will compute the double of 'a' and 'b' once and store them in separate variables, then use these variables in the computation of the sum. This avoids the redundant computation and could potentially improve performance, although in this case, the performance improvement would be negligible.

This change increases the code's complexity slightly by introducing two new variables. However, it does not significantly affect readability, and the potential performance improvement, although small, justifies this change.

Optimized Code Block:

Below is the optimized code:

```
#include <iostream>
int main() {
  int a;
  int b;
  std::cin >> a >> b;
  int doubleA = a * 2;
  int doubleB = b * 2;
  std::cout << a * b << " " << doubleA + doubleB << std::endl;
}
```
This code maintains the same functionality as the original code, but reduces the number of multiplications from four to two.