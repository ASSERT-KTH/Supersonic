This is a very simple C++ program, and there are not many places to optimize it. However, there are a couple of micro-optimizations we can make:

1. Code Analysis: The program simply takes two integer inputs, calculates their product and the sum of their doubles and then outputs the results. The potential performance bottlenecks here are very minor, but they include the multiple operations on 'a' and 'b' and the multiple output streams to 'std::cout'.

2. Optimization Strategy:
    1. We can reduce the number of operations on 'a' and 'b' by storing the results in temporary variables. This avoids the need to calculate "a * 2" and "b * 2" twice.
    2. We can combine the output streams into a single stream operation. This avoids the overhead of multiple '<<' operations on 'std::cout'.

3. Step-by-Step Explanation:
    1. Store the results of "a * 2" and "b * 2" in temporary variables 'double_a' and 'double_b'. This reduces the number of computations, which can be beneficial especially if we're dealing with complex or costly operations.
    2. Combine the output streams into a single operation. While this is a minor optimization, it can still help improve performance slightly, especially when outputting large amounts of data.

4. Optimized Code Block:

```cpp
#include <iostream>

int main() {
  int a;
  int b;
  std::cin >> a >> b;
  
  int double_a = a * 2;
  int double_b = b * 2;
  
  std::cout << a * b << " " << double_a + double_b << std::endl;
}
```
In this optimized version, we compute "a * 2" and "b * 2" only once and store the results in temporary variables. The output operation is also combined into a single stream operation.

Please note that these optimizations are very minor and might not be noticeable in such a simple program. But in larger programs where similar patterns repeat, these micro-optimizations can accumulate and make a difference in performance.