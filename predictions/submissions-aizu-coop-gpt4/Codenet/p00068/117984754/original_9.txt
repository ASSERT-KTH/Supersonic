1. Code Analysis:
This code is implementing a convex hull algorithm. It is a computational geometry algorithm that computes the smallest convex polygon that contains a set of points. The code is taking N points as input, and then it computes the convex hull for these points. Finally, it prints the number of points that are not part of the convex hull.

2. Optimization Strategy:
   A. Inefficient data structures:
   - It is difficult to identify any inefficient data structures in the given code as most of the data structures used are very efficient for their purposes.
   B. Redundant computations:
   - The `norm()` function is called multiple times in the `distance_l_p()` function. We can optimize this by storing the result of this operation.
   C. Loops that can be optimized:
   - In the `isSimple()` function, there's a nested loop that checks for intersections between all pairs of edges in the polygon. This can be optimized.
   - In the `isPointInsidePolygon()` function, there's a loop that counts the number of sides that are on the left of a point. This can be optimized by using STL algorithms.
   D. Compiler optimizations:
   - Compiler flags like `-O2` or `-O3` can be used to instruct the compiler to optimize the code for speed.

3. Step-by-Step Explanation:
   A. Storing the result of `norm()` function:
   - `norm()` is a simple function that calculates the square of the distance from the origin to the point. This function is called multiple times in `distance_l_p()`. By storing the result of this function, we can avoid unnecessary function calls, which can be expensive in terms of computational resources.
   B. Optimizing the loop in `isSimple()` function:
   - The current implementation checks for intersection between each pair of edges in the polygon. But we know that in a simple polygon, only consecutive edges intersect. So, we can optimize the loop by only checking for intersection between consecutive edges.
   C. Optimizing the loop in `isPointInsidePolygon()` function:
   - Currently, the loop iterates over each side of the polygon and checks if the side is on the left of the point. This can be optimized by using STL algorithms like `count_if()`, which counts the number of elements in a range for which a condition is true.
   D. Using compiler flags for optimization:
   - Compiler flags like `-O2` or `-O3` can be used to instruct the compiler to optimize the code for speed. This optimization includes inlining functions, loop unrolling, and many others.

4. Optimized Code Block:
```
/* Other parts of code remain same */

double distance_l_p(L l, P p) {
  double norm_val = (l.p2 - l.p1).norm();
  return abs(cross(l.p2 - l.p1, p - l.p1)) / sqrt(norm_val);
}

bool isSimple(Polygon pol) {
  size_t pol_size = pol.size() - 1;
  rep(i, pol_size) {
    if (intersect(pol[i], pol[i + 1], pol[(i+2)%pol_size], pol[(i+3)%pol_size]))
        return false;
  }
  return true;
}

bool isPointInsidePolygon(vector<L> side, P p) {
  return !(count_if(side.begin(), side.end(), [&](L& s){return cross(s.p2 - s.p1, p - s.p1) > 0;}) % side.size());
}

```