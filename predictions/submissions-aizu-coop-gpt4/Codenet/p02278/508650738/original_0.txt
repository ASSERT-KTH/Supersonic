1. Code Analysis: The code performs a sorting operation on an array, maps the elements' original and sorted positions, and then performs some calculations. It uses a QuickFind data structure to perform union operations and check if elements are in the same set. 

2. Optimization Strategy: 

    1. Redundant calls to `v[y].size()` can be avoided in the `unite` function. Storing the size in a variable can avoid repeated calls.
    2. Redundant calls to `v[i].size()` can be avoided in the main function. Storing the size in a variable can avoid repeated calls.
    3. Redundant calls to `v[i][j]` can be avoided in the main function. Storing the value in a variable can avoid repeated calls.
    4. Unnecessary `map` data structures `p` and `q` are used which may slow down the program due to their internal balancing algorithms. `unordered_map` can be used instead for constant time complexity.
    5. Compiler optimization flags can be used to further optimize the program.

3. Step-by-Step Explanation:

    1. In the `unite` function, `v[y].size()` is called multiple times. This operation can be costly as it is called every time in the loop. We can avoid this by storing the size in a variable.
    2. In the main function, `v[i].size()` is called multiple times. This operation can be costly as it is called every time in the loop. We can avoid this by storing the size in a variable.
    3. In the main function, `v[i][j]` is called multiple times. This operation can be costly as it is called every time in the loop. We can avoid this by storing the value in a variable.
    4. `map` has a logarithmic time complexity for access and insertion. We can replace it with `unordered_map` which has a constant time complexity for access and insertion.
    5. Using compiler optimization flags like `-O2` or `-O3` can optimize the code further. These flags tell the compiler to optimize the code for performance.

4. Optimized Code Block:

```c++
#include <bits/stdc++.h>
using namespace std;
#define int long long
struct QuickFind {
  vector<int> r, p;
  vector<vector<int>> v;
  QuickFind() {}
  QuickFind(int size) { init(size); }
  void init(int size) {
    r.resize(size, 0);
    p.resize(size, 0);
    v.resize(size);
    for (int i = 0; i < size; i++) {
      r[i] = 1, p[i] = i;
      v[i].resize(1, i);
    }
  }
  bool same(int x, int y) { return p[x] == p[y]; }
  void unite(int x, int y) {
    x = p[x];
    y = p[y];
    if (x == y)
      return;
    if (r[x] < r[y])
      swap(x, y);
    r[x] += r[y];
    int vy_size = v[y].size(); // Store size in a variable
    for (int i = 0; i < vy_size; i++) {
      p[v[y][i]] = x;
      v[x].push_back(v[y][i]);
    }
    v[y].clear();
  }
};
signed main() {
  int n;
  cin >> n;
  vector<int> a(n);
  for (int i = 0; i < n; i++)
    cin >> a[i];
  vector<int> b(a);
  sort(b.begin(), b.end());
  unordered_map<int, int> p, q; // Use unordered_map
  for (int i = 0; i < n; i++) {
    p[a[i]] = i;
    q[b[i]] = i;
  }
  QuickFind qf(n);
  for (int i = 0; i < n; i++)
    qf.unite(i, p[b[i]]);
  int ans = 0;
  for (int i = 0; i < n; i++) {
    int k = qf.v[i].size(); // Store size in a variable
    if (qf.p[i] != i || k == 1)
      continue;
    int m = a[qf.v[i][0]];
    int tmp = 0;
    for (int j = 0; j < k; j++) {
      int vi_j = qf.v[i][j]; // Store value in a variable
      tmp += a[vi_j];
      m = min(m, a[vi_j]);
    }
    ans += min(tmp + m * (k - 2), tmp + m + b[0] * (k + 1));
  }
  cout << ans << endl;
  return 0;
}
```