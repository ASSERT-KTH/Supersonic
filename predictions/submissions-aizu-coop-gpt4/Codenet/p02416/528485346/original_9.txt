Here's the optimization strategy for this code.

1. **Inefficient Data Structures**: The data structure used here is a C-style string (char array). This is the most efficient structure for this task, so no changes are needed here.

2. **Redundant or Unnecessary Computations**: In the for loop, the `strlen(num)` function is called in every iteration, which results in unnecessary computation. The length of the string should be calculated once before the loop and stored in a variable.

3. **Loops or Recursive Calls**: The loop used here is efficient as it iterates over the characters of the string only once. No recursion is used.

4. **Compiler Optimizations or Pragma Directives**: No specific compiler optimizations or pragma directives are needed for this code.

Here's how we can optimize the code:

1. **Calculate the length of the string once**: We are currently calculating the length of the string in each loop iteration. Instead, we can calculate it once and store it in a variable. This will save computational resources as the length of the string does not change during the loop.

Here is the optimized code:

```cpp
#include <cstdio>
#include <cstring>
#include <iostream>

using namespace std;

int main() {
  char num[1001];
  while (1) {
    scanf("%s", num);
    if (num[0] == '0')
      break;
    int sum = 0;
    int len = strlen(num);  // calculate string length once before the loop
    for (int i = 0; i < len; i++) {  // use the stored length in loop condition
      sum += num[i] - '0';
    }
    printf("%d\n", sum);
  }
  return 0;
}
```

Trade-offs:
- There is no significant trade-off in this optimization. The complexity of the code remains the same and readability is not affected.
- Memory usage increases slightly because we are storing the length of the string in a separate variable. However, the increase is negligible and acceptable considering the performance gain.