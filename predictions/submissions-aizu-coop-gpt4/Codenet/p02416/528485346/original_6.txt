Here are the steps to optimize the provided C/C++ program:

1. **Code Analysis:**

The provided program reads a string of digits from the standard input, calculates the sum of digits, and then prints the sum on the standard output. The process continues until the input string starts with '0'. There are two primary areas of concern from a performance standpoint:

   1. The `strlen()` function is being called inside the loop which is unnecessary and costly. This function traverses the whole array to find its length, resulting in O(n) time complexity per call. Since it's being called inside a loop, the overall complexity becomes O(n^2) which is inefficient.
   
   2. The use of `scanf` and `printf` functions for input and output. These functions are slower compared to their C++ counterparts `cin` and `cout`.

2. **Optimization Strategy:**

Here are the steps to optimize the program:

   1. Replace the call to `strlen()` inside the loop with a single call before the loop starts and store the length in a variable. This reduces the time complexity from O(n^2) to O(n).
   
   2. Replace `scanf` and `printf` with `cin` and `cout` for faster I/O.

3. **Step-by-Step Explanation:**

   1. Call `strlen(num)` before the loop and store the result in an integer variable, say `length`. Then use `length` in the loop condition. This way, the length is calculated only once, reducing the time complexity from O(n^2) to O(n).
   
   2. Replace `scanf("%s", num)` with `cin >> num` and `printf("%d\n", sum)` with `cout << sum << '\n'` for faster input and output operations.

The trade-off is minor here. The code complexity does not increase significantly and the readability of the code remains the same. The performance gain, however, is substantial, especially for large inputs.

4. **Optimized Code Block:**

Here is the optimized code:

```cpp
#include <iostream>
#include <cstring>
using namespace std;

int main() {
    char num[1001];
    while (true) {
        cin >> num;
        if (num[0] == '0') {
            break;
        }
        int sum = 0;
        int length = strlen(num);  // Compute the length once before the loop
        for (int i = 0; i < length; i++) {  // Use the computed length in the loop condition
            sum += num[i] - '0';
        }
        cout << sum << '\n';  // Use C++ style I/O for faster output
    }
    return 0;
}
```

This optimized code keeps the functionality and output of the original code, while improving its performance. The changes are minimal and the comments explain the changes made.