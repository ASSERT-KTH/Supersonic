1. Code Analysis:
The given code reads an integer 'n' and 'n' strings from the input. It then checks for specific transitions between consecutive strings and increments a counter 'ans' if these transitions occur. The transitions being checked are:
    1. "lu" to "ru"
    2. "ru" to "lu"
    3. "ld" to "rd"
    4. "rd" to "ld"

2. Optimization Strategy:
The main bottleneck in the program is the string comparisons. We can replace the strings "lu", "ru", "ld", "rd" with specific integer codes to speed up the comparison process. Furthermore, we can get rid of some macros and typedefs that are not used in the program to clean up the code. 

3. Step-by-Step Explanation:
    1. We can replace the strings with integer codes. We can use a map to map the strings to unique integers. For example, "lu" could map to 0, "ru" to 1, "ld" to 2, and "rd" to 3. This will allow for faster integer comparison instead of string comparison.
    2. We can remove unnecessary macros and typedefs. This includes "REP", "rer", "each", "all", "mset", "ll", "ull", "vi", "vs", "vvi", "vpii", "pii", "pll", "inf", "mod", "eps", "dx", "dy". These are not used in the program and removing them will clean up the code without affecting performance.

4. Optimized Code Block:
Here is the optimized code block with the changes:

```c++
#include <iostream>
#include <string>
#include <unordered_map>

#define rep(i, n) for (int i = 0; i < (int)n; ++i)

using namespace std;

int main() {
  int n;
  
  unordered_map<string, int> dict = {
      {"lu", 0},
      {"ru", 1},
      {"ld", 2},
      {"rd", 3},
  };
  
  while (cin >> n, n) {
    int ans = 0;
    int now = -1, next;
    string input;
    rep(i, n) {
      cin >> input;
      next = dict[input];
      if ((now == 0 && next == 1) || (now == 1 && next == 0) ||
          (now == 2 && next == 3) || (now == 3 && next == 2))
        ans++;
      now = next;
    }
    cout << ans << endl;
  }
  
  return 0;
}
```

Here, the string comparisons have been replaced by integer comparisons which are generally faster. The unused macros and typedefs have been removed, making the program cleaner and easier to read. The performance of the program should be improved with these changes. The functionality and output of the original code have been preserved.