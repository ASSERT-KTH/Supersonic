Code Analysis:
The given C++ code is reading a sequence of strings from the input and checks if a certain pair of strings happen consecutively ("lu" and "ru", "ru" and "lu", "ld" and "rd", "rd" and "ld"). If such a pair is encountered, it increments a counter. This process is repeated until an integer input is zero.

Optimization Strategy:
The current code seems to be quite efficient in terms of time complexity as it operates in O(n) where n is the number of strings. However, there are still a few points where we can optimize the code:

1. Remove unused type definitions, constants, and macros: The code includes several typedefs, constants, and macros that are not used. This is unnecessary and can be removed to make the code cleaner and easier to read.

2. Use of unordered_map for string comparison: Instead of using multiple if-else statements to compare string pairs, we can use an unordered_map which will store valid pairs of strings. This can potentially improve the performance as searching in an unordered_map takes O(1) time on average.

3. Remove #include <bits/stdc++.h>: This is a header file that includes practically all standard library headers. It's not good practice to use this in production code as it increases compilation time significantly. Instead, only the necessary headers should be included.

4. Avoid using 'using namespace std': This can lead to name clashes if the standard library has functions or classes with the same name as your own.

Step-by-Step Explanation:

1. Remove unused typedefs, constants, and macros: This step is simple as it involves removing unused code. This makes the code cleaner and easier to understand.

2. Use of unordered_map for string comparison: We create an unordered_map with valid string pairs as keys and increment the counter whenever we find a valid pair. This reduces the complexity of the string comparison operation from O(n) to O(1).

3. Remove #include <bits/stdc++.h> and use individual headers: This step is necessary to avoid unnecessarily long compilation times. In this code, we only need iostream and unordered_map.

4. Avoid 'using namespace std': It's safer to use the std:: prefix when using standard library functions and classes to avoid name clashes.

Optimized Code Block:

```cpp
#include <iostream>
#include <unordered_map>
using std::cin;
using std::cout;
using std::endl;
using std::string;
using std::unordered_map;

int main() {
  int n;
  unordered_map<string, bool> validPairs = {{"lu ru", true}, {"ru lu", true}, {"ld rd", true}, {"rd ld", true}};
  while (cin >> n, n) {
    int ans = 0;
    string now = "", next, pair;
    for(int i = 0; i < n; ++i) {
      cin >> next;
      pair = now + " " + next;
      if (validPairs[pair])
        ans++;
      now = next;
    }
    cout << ans << endl;
  }
  return 0;
}
```
This code achieves the same functionality as the original code but is cleaner and potentially more efficient due to the use of an unordered_map for string comparison.