Here are the steps to optimize the code:

**Code Analysis**

The code seems to be a part of a competitive programming problem where the goal is to count the number of transitions between certain states in a sequence of strings. The code reads an integer `n` and then reads `n` strings, counting the number of transitions from "lu" to "ru", "ru" to "lu", "ld" to "rd", and "rd" to "ld".

Some potential improvements are:

1. The `#include <bits/stdc++.h>` includes a lot of unnecessary stuff. It's better to include only the necessary headers.

2. There are a lot of macro definitions that are not used in the code. We can remove them.

3. The typedefs are not used in the code. We can remove them.

4. The consts such as `inf`, `mod`, `eps`, `dx`, `dy` are not used in the code. We can remove them.

5. The `while` loop runs until `n` is 0. This can be changed to a `do...while` loop due to the nature of the problem.

6. The use of `cin` and `cout` for input and output is slower than `scanf` and `printf`.

**Optimization Strategy**

1. Include only necessary headers.
2. Remove unused macro definitions, typedefs, and constants.
3. Change `while` loop to `do...while` loop.
4. Use `scanf` and `printf` instead of `cin` and `cout`.

**Step by Step Explanation**

1. Include only necessary headers: We need only `iostream` and `string` in this code, so we will include only these two.

2. Remove unused macro definitions, typedefs, and constants: This will make the code cleaner and easier to understand.

3. Change `while` loop to `do...while` loop: The nature of the problem is such that we need to read `n` at least once, so a `do...while` loop is more appropriate here.

4. Use `scanf` and `printf` instead of `cin` and `cout`: `cin` and `cout` are slower because they have to synchronize with the C standard streams. Using `scanf` and `printf` will make the code faster.

**Optimized Code Block**

```cpp
#include <iostream>
#include <string>
using namespace std;

int main() {
    int n;
    do {
        scanf("%d", &n);
        if (n == 0) break;
        int ans = 0;
        string now = "", next;
        for (int i = 0; i < n; ++i) {
            cin >> next;
            if (now == "lu" && next == "ru")
                ans++;
            else if (now == "ru" && next == "lu")
                ans++;
            else if (now == "ld" && next == "rd")
                ans++;
            else if (now == "rd" && next == "ld")
                ans++;
            now = next;
        }
        printf("%d\n", ans);
    } while (true);
    return 0;
}
```

This optimized code performs the same function but is cleaner and faster. It doesn't make use of any unnecessary includes, typedefs, or constants. It makes use of `scanf` and `printf` for faster I/O and uses a `do...while` loop that better suits the problem's nature.