1. Code Analysis:
   The given code reads in a series of strings and calculates the number of times certain string pairs occur consecutively. The performance bottlenecks in this code include:
   - String comparison: Using string comparison in the if-else statements can be slower than comparing integers or enum types.
   - Reading and writing to standard input/output: The cin and cout operations can be slow, particularly inside a loop.

2. Optimization Strategy:
   - Replace string comparisons with integer or enum comparisons.
   - Utilize faster I/O methods.

3. Step-by-step Explanation:
   - Replace string usage with enum types: Instead of comparing strings in the if-else statement, we can map each string to an enum type and compare these. This will be quicker as comparing integers or enum types is faster than comparing strings.
   - Use faster I/O techniques: We can use faster I/O methods to speed up the reading and writing of data. For example, we can use scanf and printf instead of cin and cout. However, this may make the code less readable to those who are more familiar with cin and cout.

4. Optimized Code Block:

```
#include <cstdio>
#include <cstring>
enum Direction {lu, ru, ld, rd, unknown};

Direction strToDirection(const char* str) {
    if (strcmp(str, "lu") == 0) return lu;
    if (strcmp(str, "ru") == 0) return ru;
    if (strcmp(str, "ld") == 0) return ld;
    if (strcmp(str, "rd") == 0) return rd;
    return unknown;
}

int main() {
    int n;
    while (scanf("%d", &n), n) {
        int ans = 0;
        Direction now = unknown, next;
        char str[3];
        for (int i = 0; i < n; ++i) {
            scanf("%s", str);
            next = strToDirection(str);
            if ((now == lu && next == ru) || (now == ru && next == lu) || 
                (now == ld && next == rd) || (now == rd && next == ld)) {
                ans++;
            }
            now = next;
        }
        printf("%d\n", ans);
    }
    return 0;
}
```

In this optimized code, we've replaced string comparisons with enum comparisons, which are faster. We've also replaced cin and cout with scanf and printf, which are faster for I/O operations.