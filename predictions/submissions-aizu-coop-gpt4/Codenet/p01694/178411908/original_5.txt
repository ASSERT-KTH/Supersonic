1. Code analysis: 

The provided code reads a series of string inputs, and checks for pairs of strings that form a reverse diagonal, i.e., "lu" and "ru", "ru" and "lu", "ld" and "rd", or "rd" and "ld". If the last string was one of these values, and the current string forms a reverse diagonal pair with the last string, the counter `ans` is incremented. The number of reverse diagonal pairs is then printed out.

Looking at the code, there are no significant memory inefficiencies. However, the if-else chain used to check for string pairings is somewhat inefficient and not very scalable. If more pairs were to be added, this would become a long and unwieldy block of code. 

2. Optimization Strategy:

    1. Instead of the if-else chain, we can use a map data structure, where the keys would be the valid string pairs and the values would be the increment value for the counter `ans`. This would allow us to use a single statement to check for string pairings, rather than a long if-else chain. This change would improve code readability and maintainability, and would likely also improve runtime performance slightly because map lookups are generally faster than if-else chains, especially as the number of pairs grows.

Here, there are no redundant computations, no loops or recursive calls to optimize, and no obvious places to use compiler optimizations or pragma directives.

3. Step-by-step Explanation:

    1. We'll create a map where the keys are the valid pairs of strings and the values are the increment values for the counter `ans`. This will replace the if-else chain in the existing code. The rationale behind this change is that map lookups are generally faster than if-else chains, especially as the number of pairs grows. The trade-off is that this will add a slight amount of complexity to the code, but it will also make the code more readable and maintainable.

4. Optimized Code Block:

```cpp
#include <bits/stdc++.h>
#define rep(i, n) for (int i = 0; i < (int)n; ++i)
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<string> vs;
typedef vector<vector<int>> vvi;
typedef vector<pair<int, int>> vpii;
typedef pair<int, int> pii;
typedef pair<long long, long long> pll;
const int inf = 1000000000;
const int mod = 1000000007;
const double eps = 1e-9;
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};

int main() {
  int n;
  // Define map for valid string pairs
  map<pair<string, string>, int> valid_pairs = {{{"lu", "ru"}, 1}, {{"ru", "lu"}, 1}, {{"ld", "rd"}, 1}, {{"rd", "ld"}, 1}};
  while (cin >> n, n) {
    int ans = 0;
    string now = "", next;
    rep(i, n) {
      cin >> next;
      // Use map lookup instead of if-else chain
      ans += valid_pairs[{now, next}];
      now = next;
    }
    cout << ans << endl;
  }
  return 0;
}
```

With these changes, we've enhanced the code performance by replacing the if-else chain with a map lookup, which is faster and more readable.