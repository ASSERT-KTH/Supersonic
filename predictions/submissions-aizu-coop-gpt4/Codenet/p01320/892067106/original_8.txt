This is a complex program with various mathematical, geometrical operations and a lot of optimizations can be made:

1. **Avoiding excessive header files**: The code includes several header files, not all of which are necessary. Include only the headers that are needed. This reduces the compilation time.

2. **Optimize use of std::vector**: `std::vector` is used quite extensively throughout the code. However, it's clear that the sizes of these vectors are often known in advance. You can use `std::vector::reserve` to pre-allocate memory for these vectors, reducing the number of memory allocations and potentially improving performance.

3. **Avoiding Complex Data Structures**: The code uses quite a few complex data structures such as `std::pair`, `std::map`, and `std::set`. If the code can be rewritten to use simpler data structures or primitive types, it may run faster.

4. **Avoiding unnecessary calculations**: There are several mathematical and geometrical operations that are computed multiple times. These calculations should be stored in variables when possible to avoid redundant computation.

5. **Efficient use of algorithms**: The code uses the `sort` algorithm which is of time complexity O(n log n). If the data is already sorted or nearly sorted, using algorithms like `std::partial_sort` or `std::nth_element` might be more efficient.

6. **Use of appropriate data types**: The code uses double precision floating point numbers (`double` type). If single precision (`float`) is sufficient, it can be used instead to reduce memory usage and potentially improve performance.

7. **Compiler optimizations**: Compiler optimizations should be turned on when compiling the code. This can often result in significant performance improvements. This can be done by using the `-O2` or `-O3` options when compiling with GCC.

8. **Loop Unrolling**: There are several loops in the code. Unrolling these loops can sometimes increase performance by reducing the overhead of loop control.

Let's implement these optimizations. Please note, the original code is quite large and complex, therefore, the full refactored version would be quite large and can't be provided here. However, a subset of the changes as described above can be provided.