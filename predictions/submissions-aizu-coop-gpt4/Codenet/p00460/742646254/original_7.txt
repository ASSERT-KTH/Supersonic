Code Analysis:
The given code is a Dynamic Programming (DP) problem that calculates the number of ways to add up a set of numbers (1 to M) to a given sum (S) using a 2D DP table. The table is filled in a bottom-up manner, where each cell dp[i][j] represents the number of ways to reach sum j using i numbers.

The code has a triple nested loop structure, with the outermost loop iterating over the range of numbers from 1 to M. The two inner loops iterate over the possible number of elements (N*N) and the target sum (S), respectively. The code calculates the number of ways to reach a specific sum by adding the current number (add) to a previously obtained sum. The result is then stored in the dp table, and all results are modded by a constant (MOD) to prevent overflow. 

Optimization Strategy:

1. Use of Efficient Data Structures: The DP table is appropriately chosen as a 2D integer array. There isn't much scope for changing the data structure to further optimize the code.

2. Redundant Computation: There doesn't appear to be any redundant computation as each cell of the DP table is computed once and used multiple times.

3. Optimizing Loops or Recursive Calls: The inner double loop iterates over all possible sums and indices, which may not be necessary. The sum will never exceed the product of the number of elements and the maximum number (N*M), so the second loop can be optimized to iterate only up to this limit.

4. Compiler Optimizations: Compiler flags like -O3 can be used to enable all compiler-level optimizations. However, this doesn't involve modifying the code.

Step-by-Step Explanation:

1. Optimize the second inner loop by limiting its range to min(S, N*M). This reduces the number of unnecessary iterations when the possible sum exceeds the product of the number of elements and the maximum number (N*M). 

Trade-offs: This optimization reduces the running time but increases code complexity slightly.

Optimized Code Block:
```cpp
#include <bits/stdc++.h>
using namespace std;
#define REP(i, a, b) for (int i = a; i < (int)b; i++)
#define rep(i, n) REP(i, 0, n)
typedef long long ll;
int const inf = 1 << 29;
int dp[55][3030];

int main() {
  int const MOD = 100000;
  for (int N, M, S; cin >> N >> M >> S && (N | M | S);) {
    rep(i, 55) rep(j, 3030) dp[i][j] = 0;
    dp[0][0] = 1;
    REP(add, 1, M + 1) {
      for (int currIndex = N * N; currIndex >= 1; currIndex--) {
        for (int currSum = add; currSum <= min(S, N*M); currSum++) { // Optimized loop
          (dp[currIndex][currSum] += dp[currIndex - 1][currSum - add]) %= MOD;
        }
      }
    }
    cout << dp[N * N][S] << endl;
  }
  return 0;
}
```
This optimization reduces the number of unnecessary iterations when S >> N*M, leading to a decrease in running time. However, the overall time complexity remains O(M * N^2 * min(S, N*M)) due to the triple nested loop structure.