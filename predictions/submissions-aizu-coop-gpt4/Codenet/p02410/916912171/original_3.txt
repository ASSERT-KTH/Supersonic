Code Analysis:

This program seems to be implementing a matrix-vector multiplication. The 2D array `inact` represents a matrix, the array `act` is the vector, and the array `ans` stores the result of the multiplication. Major bottlenecks in this code are:

1. Inefficient memory usage: The arrays `inact`, `act` and `ans` are statically allocated with a size of 100 each. This can lead to wastage of memory if the number of rows and columns input by the user is less than 100.

2. Initialization of arrays: Every element in the arrays `inact`, `act` and `ans` is initialized to 0, which is unnecessary if the arrays are populated with input values immediately after.

Optimization Strategy:

1. Use dynamic memory allocation: Instead of statically allocating memory for the arrays, we can allocate memory dynamically based on the number of rows and columns input by the user.

2. Avoid unnecessary initialization: Instead of initializing every element in the arrays to 0, we can directly populate the arrays with input values.

3. Compiler optimization: Use the `-O3` option to perform optimizations like loop unrolling and function inlining during compilation.

Step-by-Step Explanation:

1. Dynamic memory allocation: Instead of allocating memory for 100 elements for each array, we first take the number of rows and columns as input from the user and allocate memory accordingly. This saves memory and also allows for more flexibility in the size of the input.

2. Avoid unnecessary initialization: After allocating memory for the arrays, we directly populate them with input values. This avoids the unnecessary step of initializing every element to 0.

3. Compiler optimization: While compiling the code, use the `-O3` option to enable optimizations like loop unrolling and function inlining. Loop unrolling can reduce the overhead of loop control instructions, and function inlining can eliminate the overhead of function calls.

Trade-offs: While these optimizations can improve performance and reduce memory usage, they can also make the code slightly more complex and harder to understand for beginners. In particular, dynamic memory allocation requires careful handling to avoid memory leaks.

Optimized Code Block:

```c
#include <stdio.h>
#include <stdlib.h>

int main() {
  int row, col;
  scanf("%d %d", &row, &col);

  int **inact = (int **)malloc(row * sizeof(int *));
  for (int i = 0; i < row; i++) {
    inact[i] = (int *)malloc(col * sizeof(int));
  }

  int *act = (int *)malloc(col * sizeof(int));
  int *ans = (int *)malloc(row * sizeof(int));

  for (int i = 0; i < row; i++) {
    for (int j = 0; j < col; j++) {
      scanf("%d", &inact[i][j]);
    }
  }

  for (int i = 0; i < col; i++) {
    scanf("%d", &act[i]);
  }

  for (int i = 0; i < row; i++) {
    ans[i] = 0;
    for (int j = 0; j < col; j++) {
      ans[i] += inact[i][j] * act[j];
    }
  }

  for (int i = 0; i < row; i++) {
    printf("%d\n", ans[i]);
  }

  for (int i = 0; i < row; i++) {
    free(inact[i]);
  }
  free(inact);
  free(act);
  free(ans);

  return 0;
}
```

Compile this code with the `-O3` option to enable compiler optimizations.