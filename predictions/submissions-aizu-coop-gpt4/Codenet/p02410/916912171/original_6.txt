1. Code Analysis:

The provided code reads two matrices from the input and multiplies them. The first matrix is a two-dimensional array `inact` of size 100x100, and the second matrix is a one-dimensional array `act` of size 100. The result is stored in the `ans` array. The multiplication is done in a nested loop, which can lead to performance issues for larger matrices. The code also fills the entire `inact` matrix with zeros, which can be unnecessary if the input matrix is smaller.

2. Optimization Strategy:

    A. Use dynamic memory allocation to create arrays only as large as needed. This will reduce memory usage.
    
    B. Avoid unnecessary zero initialization for `inact` matrix.
    
    C. Use pointers and `calloc()` function for memory allocation, which automatically initializes the memory to zero.

    D. Use `restrict` keyword for pointers in the multiplication loop. This informs the compiler that for the scope of the pointer, the program will not directly or indirectly access through another pointer. This can help the compiler optimize the code.
    
3. Step-by-Step Explanation:

    A. Instead of statically allocating memory for arrays, we can use dynamic memory allocation to create arrays only as large as they need to be. This will significantly reduce memory usage when working with smaller matrices.
    
    B. In the original code, the entire `inact` matrix is filled with zeros, even if the input matrix is smaller. This operation can be avoided entirely as the `calloc()` function initializes the memory to zero.
    
    C. We can use pointers for our arrays and allocate memory using the `calloc()` function. This function not only allocates memory but also initializes it to zero, which can save some cycles compared to manually setting each element to zero.
    
    D. In the multiplication loop, we can use the `restrict` keyword for our pointers. This keyword tells the compiler that for the lifetime of the pointer, only it or a value directly derived from it (such as pointer + 1) will be used to access the object to which it points. This allows the compiler to apply optimizations.
    
4. Optimized Code Block:

```C
#include <stdio.h>
#include <stdlib.h>

int main() {
    int row, col;
    scanf("%d %d", &row, &col);
    
    int **inact = (int **)calloc(row, sizeof(int *));
    for(int i = 0; i < row; i++)
        inact[i] = (int *)calloc(col, sizeof(int));

    int *act = (int *)calloc(col, sizeof(int));
    int *ans = (int *)calloc(row, sizeof(int));

    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            scanf("%d", &inact[i][j]);
        }
    }

    for (int i = 0; i < col; i++) {
        scanf("%d", &act[i]);
    }

    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            ans[i] += inact[i][j] * act[j];
        }
    }

    for (int i = 0; i < row; i++) {
        printf("%d\n", ans[i]);
    }

    for(int i = 0; i < row; i++) 
        free(inact[i]);
    free(inact);
    free(act);
    free(ans);

    return 0;
}
```
In this optimized code, we have used dynamic memory allocation and initialized the memory to zero using `calloc()`. We have also freed the memory after we're done with it to prevent memory leaks.