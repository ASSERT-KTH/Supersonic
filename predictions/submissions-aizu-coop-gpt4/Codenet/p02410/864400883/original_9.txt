Code Analysis:
The provided code reads two integers 'n' and 'm' from the standard input, then it reads 'n' rows of 'm' integers each into a 2D array 'a', and 'm' integers into array 'b'. Afterwards, it computes the dot product of each row in 'a' with 'b', and prints the result to the standard output.

Optimization Strategy:
1. The code uses two-dimensional array 'a' to store the input matrix. While this is not inefficient per se, we can consider using a 1D array if the dimensions of the matrix are fixed and known in advance. In this case, however, the dimensions are not fixed, so we can leave this as is.

2. Array 'b' is read after the matrix 'a'. If we read it before 'a', we can compute the dot products on the fly while reading the matrix 'a', thus eliminating the need for a separate loop for the dot product computation. This would make the code more efficient in terms of runtime.

3. The variable 'c' is used to store the result of each dot product computation. It is reset to zero after each computation. This is not necessary if we declare 'c' within the scope of the loop where it is used.

Step-by-Step Explanation:
1. Move the code block that reads array 'b' to before the one that reads matrix 'a'. This allows us to access the elements of 'b' while reading 'a', enabling us to compute the dot products in the same loop where we read 'a'.

2. Declare the variable 'c' inside the loop where it is used. This way, we don't need to manually reset it to zero after each computation.

Optimized Code Block:

```cpp
#include <iostream>
using namespace std;

int main() {
  int n, m;
  int x, y, a[100][100], b[100];

  cin >> n >> m;

  for (int j = 0; j < m; j++) {
    cin >> y;
    b[j] = y;
  }

  for (int i = 0; i < n; i++) {
    int c = 0;
    for (int j = 0; j < m; j++) {
      cin >> x;
      a[i][j] = x;
      c += a[i][j] * b[j];
    }
    cout << c << endl;
  }

  return 0;
}
```

This optimized code reduces the number of loops from 3 to 2 without altering the functionality or output of the original code. It does, however, increase the complexity of the code slightly by combining the reading of matrix 'a' and the computation of the dot products.