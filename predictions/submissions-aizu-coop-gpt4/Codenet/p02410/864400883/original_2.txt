Code Analysis:

Looking at the provided C++ code, it appears to be a simple program to perform a matrix-vector multiplication. The input matrix 'a' with dimensions 'n' x 'm' and vector 'b' with dimensions 'm' x 1 are read from standard input and then the multiplication is performed, with the results outputted to standard input. 

The current algorithm's time complexity is O(n*m) where n and m are the dimensions of the matrix and the vector respectively. The space complexity is also O(n*m) due to the storage of the matrix. 

Optimization Strategy:

1. Data Structure: There is no need to change the data structures used in this code. The 2D array for the matrix and 1D array for the vector are the most efficient for this problem.

2. Redundant Computations: There are no redundant calculations in this code. Every computation is necessary for the final result.

3. Loop Optimization: Loop unrolling can be applied to the multiplication loop to improve efficiency. However, as the size of 'm' is not fixed, this might not always be possible.

4. Compiler Optimizations: Compiler optimization flags like `-O2` or `-O3` can be used during compilation to optimize the code. 

Step-by-Step Explanation:

1. Loop Unrolling: Loop unrolling is a technique that can increase program speed by reducing or eliminating the overhead of loop control instructions. It does this by replicating the body of the loop multiple times, thereby reducing the number of times the loop condition is checked. However, if the loop count is not a multiple of the unroll factor, we need to account for the leftover iterations.

Optimized Code Block:

The optimized C++ code is provided below. The main change is the loop unrolling in the multiplication loop. Note that we have assumed an unroll factor of 4. If the loop count is not a multiple of 4, the leftover iterations are performed in a separate loop.

```cpp
#include <iostream>
using namespace std;
int main() {
  int n, m;
  int x, y, a[100][100], b[100];
  int c = 0;
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      cin >> x;
      a[i][j] = x;
    }
  }
  for (int j = 0; j < m; j++) {
    cin >> y;
    b[j] = y;
  }
  int unroll_factor = 4, leftover = m % unroll_factor;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m-leftover; j+=unroll_factor) {
      c += a[i][j] * b[j];
      c += a[i][j+1] * b[j+1];
      c += a[i][j+2] * b[j+2];
      c += a[i][j+3] * b[j+3];
    }
    // compute leftover iterations
    for (int j = m-leftover; j < m; j++) {
      c += a[i][j] * b[j];
    }
    cout << c << endl;
    c = 0;
  }
  return 0;
}
```

Please note that loop unrolling may increase the size of the compiled code and could potentially lead to cache misses. It can also make the code more complex and harder to maintain. Therefore, it is recommended to use this technique judiciously. In some cases, it might be better to rely on the compiler to automatically perform loop unrolling when optimization flags are used.