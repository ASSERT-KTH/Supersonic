1. Code Analysis:
   This code uses recursive calls and a map to solve a problem. It uses a map to store results of previous calculations, essentially implementing a memoization strategy. The problem with this code is that it unnecessarily recalculates the same pair values, and uses an inefficient data structure (map with pair<vector<int>, int> as keys) that may not provide optimal lookup times.

2. Optimization Strategy:
   1. Use unordered_map instead of map: The unordered_map data structure provides faster average lookup times (O(1)) compared to map (O(log n)).
   2. Avoid unnecessary pair creation: The code creates new pairs for map keys multiple times which are computationally expensive. This can be avoided.
   3. Pass vector by reference and use const when possible: This will avoid unnecessary copying of the vector.
   4. Avoid unnecessary computations inside the loop.

3. Step-by-Step Explanation:
   1. Replace map with unordered_map: This change will reduce the average time complexity of lookups from O(log n) to O(1).
   2. Avoid unnecessary pair creation: Instead of creating the same pair again and again, store it in a variable and reuse it. This will save on computation time.
   3. Pass vector by reference and use const: Passing the vector by reference will avoid unnecessary copying of the vector. Also, using const in for loop and function parameter when we are sure that we won't modify the parameter inside the function or loop can help compiler make some optimizations.
   4. Avoid unnecessary computations inside the loop: Try to avoid computations inside the loop that can be done outside the loop. This will improve the time complexity of the loop.

Here is the optimized code:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>
#include <vector>
using namespace std;
unordered_map<pair<vector<int>, int>, int> mp;
string qes[128];

int search(vector<int> &vi, int depth, int used, const int m, const int n) {
  pair<vector<int>, int> key = make_pair(vi, used);
  if (mp.count(key))
    return mp[key];
  if (vi.size() > (1 << (m - depth)))
    return 100;
  if (vi.size() == 1)
    return depth;
  int res = 100;
  for (int i = 0; i < m; i++) {
    if ((used >> i) & 1)
      continue;
    vector<int> a, b;
    int nextUsed = used | (1 << i);
    for (const int j : vi) {
      if (qes[j][i] == '0')
        a.push_back(j);
      else
        b.push_back(j);
    }
    if (a.empty() || b.empty())
      continue;
    res = min(res, max(search(a, depth + 1, nextUsed, m, n),
                       search(b, depth + 1, nextUsed, m, n)));
  }
  return mp[key] = res;
}

int main() {
  int m, n;
  while (cin >> m >> n, m) {
    for (int i = 0; i < n; i++)
      cin >> qes[i];
    vector<int> vi(n);
    for (int i = 0; i < n; i++)
      vi[i] = i;
    mp.clear();
    cout << search(vi, 0, 0, m, n) << endl;
  }
}
```

Please note that the efficiency gain from these optimizations may vary based on the input size, and the specific implementation of the C++ Standard Library that you are using.