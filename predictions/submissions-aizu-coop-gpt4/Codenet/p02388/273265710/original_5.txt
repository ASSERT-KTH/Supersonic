Code Analysis:
The given code is a C++ program that takes an integer input between 0 and 100 from the user and prints the cube of the number. The `cubedNum` function is the main function that facilitates this operation.

Optimization Strategy:

1. Unnecessary loop: The for loop in the 'cubedNum' function is an inefficient way of cubing a number. Instead of using a loop, we can simply use the multiplication operation to cube the input number. This can reduce the time complexity from O(n) to O(1).

2. Inefficient Error Checking: The while loop in the 'cubedNum' function is used to ensure that the input number is between 0 and 100. Instead of using a loop and breaking it once a valid input is received, we can use a do-while loop that will only repeat if the input number is invalid. This would make the code more readable and straightforward.

Optimization Steps:

1. Remove the Unnecessary Loop: Remove the for loop in the 'cubedNum' function and replace it with a single multiplication operation to cube the input number. This will reduce the time complexity of the code.

2. Replace the While Loop with a Do-While Loop: Replace the while loop in the 'cubedNum' function with a do-while loop. This will enhance the readability of the code and make the error checking process more efficient.

Trade-offs: These optimizations will not have any significant trade-offs. The code will remain equally simple and the performance will be improved.

Optimized Code:

```
#include <iostream>
using namespace std;

void cubedNum(void) {
  int inputNum = -1;
  int result = 1;
  
  do {
    cin >> inputNum;
  } while (inputNum < 0 || inputNum > 100);
  
  result = inputNum * inputNum * inputNum;

  cout << result << endl;
  
  return;
}

int main(void) {
  cubedNum();
  return 0;
}
```

This code performs the same operation as the original code but in a more efficient and readable way. The cubing of the number is done in a single line rather than in a loop, and the do-while loop provides a more efficient and intuitive way of error checking.