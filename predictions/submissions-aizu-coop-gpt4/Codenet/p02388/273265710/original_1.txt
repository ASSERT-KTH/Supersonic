Code Analysis:

The provided code reads an integer from the user and calculates its cube, if the number is between 0 and 100 inclusive. It keeps on reading an integer until a valid number is entered.

Optimization Strategy:

1. Redundant Computations: The multiplication operation in the for loop is repeated three times. This can be replaced by a single operation of cube calculation.

2. Compiler Optimizations: The use of const and constexpr for constant values can give the compiler hints to optimize the code.

3. Unnecessary Loop: The loop for calculating the cube of the number can be replaced with a single multiplication operation, reducing the number of instructions.

4. Invalid Input Handling: Currently, the program runs in an infinite loop until a valid input is provided. A more user-friendly approach would be to show an error message and ask for the input again, instead of silently waiting.

5. IO Stream Optimization: By using '\n' instead of endl, we can avoid the unnecessary flush of the output stream, improving the I/O performance.

Step-by-Step Explanation:

1. Replace the for loop with a single operation of cube calculation. This will reduce the number of multiplication operations from 3 to 1, hence improving performance. 

2. Use const or constexpr to declare constant values. This can potentially help the compiler to generate optimized code.

3. Replace endl with '\n'. The endl not only adds a new line character but also flushes the output stream. By using '\n', we avoid this unnecessary flushing, hence improving I/O performance.

4. Add an error message when an invalid input is entered. This makes the program more user-friendly.

Optimized Code Block:

```
#include <iostream>
using namespace std;

void cubedNum(void) {
  int inputNum = -1;
  while (true) {
    cin >> inputNum;
    if ((0 <= inputNum) && (inputNum <= 100)) {
      break;
    }
    cout << "Invalid input! Please enter a number between 0 and 100.\n";
  }
  const int result = inputNum * inputNum * inputNum;
  cout << result << '\n';
}

int main(void) {
  cubedNum();
  return 0;
}
```

This optimized code performs the same functionality as the original code, but with improved efficiency.