1. Code Analysis: The given code is a simple program that takes an integer input from the user between 0 and 100, and then prints the cube of that number. The code is generally efficient, but there are a few areas that could be optimized.

2. Optimization Strategy: 
   A. Inefficient Data Structures: The code does not use any complex data structures that need optimization.
   B. Redundant Computation: The cube of the number is calculated by multiplying the number three times. This is an unnecessary step as we can directly use the pow() function from the cmath library to achieve the same result more efficiently.
   C. Loop and Recursive Calls: The for loop used for the cube calculation can be replaced with a direct calculation, removing the need for a loop altogether.
   D. Compiler Optimizations: The compiler optimization can be used to allow the compiler to further optimize the code for speed or size.

3. Step-by-Step Explanation: 
   A. Using the pow() function: Instead of looping three times to calculate the cube of the number, we can use the pow() function to calculate the cube in a single step.
      Trade-offs: By using the pow() function, we can simplify the code. However, it might be slower than the loop version for small integers due to the overhead of calling a function.
   B. Compiler Optimizations: Compiler optimizations can be used to allow the compiler to further optimize the code for speed or size. For example, we can use the -O2 or -O3 optimization level when compiling the code to allow the compiler to make the code run faster.
      Trade-offs: While compiler optimizations can make the code run faster, it can also make debugging more difficult as the optimized code might not behave the same way as the non-optimized code.

4. Optimized Code Block: 

```cpp
#include <iostream>
#include <cmath>
using namespace std;

void cubedNum(void) {
  int inputNum = -1;
  while (true) {
    cin >> inputNum;
    if ((0 <= inputNum) && (inputNum <= 100)) {
      break;
    }
  }
  int result = pow(inputNum, 3); // Use pow() to calculate the cube of the number
  cout << result << endl;
  return;
}

int main(void) {
  cubedNum();
  return 0;
}
```
To compile the code with optimizations, we can use the following command:

```bash
g++ -O2 -o program program.cpp
```

The -O2 flag tells the compiler to optimize the code for speed.