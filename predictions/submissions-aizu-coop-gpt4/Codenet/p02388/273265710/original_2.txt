**1. Code Analysis:**
The given C++ program is a simple one that takes an integer input from the user between 0 and 100, computes the cube of the input, and outputs the cube.

**2. Optimization Strategy:**
Upon initial analysis, the code seems fairly optimized for the task it performs. However, there are a few minor changes that can make the code more efficient:

A. The cube calculation loop: This loop iteratively multiplies the `result` variable by `inputNum` three times. This calculation can be simplified to a single operation, eliminating the need for a loop.

B. Error checking for input: The program currently uses a while loop to ensure that the user input is within the valid range. This could be improved by adding a prompt to the user to enter a valid number if the input is out of range. This would help improve user experience.

C. `using namespace std;`: While not a performance issue, using the `std` namespace in global scope is generally considered bad practice in C++. It's better to use `std::` where needed.

**3. Step-by-Step Explanation:**

A. Removing the cube calculation loop: The cube of a number can be calculated as `number * number * number`. This is a constant-time operation that doesn't require a loop, which is a linear-time operation. This change will improve the performance of the code, especially for larger inputs. The trade-off is minimal; the code becomes slightly more complex due to the multiplication operation, but this is a minor issue.

B. Adding a prompt for invalid input: This change will not improve performance, but it will improve user experience by providing feedback when invalid input is entered. The trade-off is a slightly larger code size, but this should not be a significant issue.

C. Removing `using namespace std;`: This change will not improve performance, but it will improve code quality by avoiding potential name conflicts. The trade-off is having to type `std::` before using things from the standard library, but this is generally considered good practice.

**4. Optimized Code Block:**

```C++
#include <iostream>

void cubedNum() {
  int inputNum = -1;
  while (true) {
    std::cout << "Enter a number between 0 and 100: ";
    std::cin >> inputNum;
    if ((0 <= inputNum) && (inputNum <= 100)) {
      break;
    }
    std::cout << "Invalid input. Please try again.\n";
  }
  
  int result = inputNum * inputNum * inputNum;
  
  std::cout << result << std::endl;
}

int main() {
  cubedNum();
  return 0;
}
```
This code performs the same task as the original code, but with a few optimizations. The cube calculation is now a single operation instead of a loop, a prompt has been added for invalid input, and `using namespace std;` has been removed.