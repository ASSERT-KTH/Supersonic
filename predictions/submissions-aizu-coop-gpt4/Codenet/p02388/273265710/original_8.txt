1. Code Analysis:
The given code calculates the cube of a number between 0 and 100 that is inputted by the user. The code is simple, but it contains some inefficiencies that could be improved.

2. Optimization Strategy:
    1. The program is currently using an infinite loop to keep asking for user input until a valid number is provided. This could be optimized by using a do-while loop instead, which stops when a valid input is provided.
    2. The current multiplication method to calculate the cube of a number is inefficient. There is no need to loop three times. You can just multiply the number by itself twice.
    3. The use of cin and cout for input and output is slower than scanf and printf. For large inputs, using scanf and printf could be faster.

3. Step-by-Step Explanation:
    1. Replace the infinite while loop with a do-while loop. This will continue asking for user input until a valid number is provided. It is more readable and efficient than the current approach.
    2. Remove the for loop used for multiplication and replace it with two multiplications. This is faster and more efficient as it reduces the number of operations.
    3. Replace cin and cout with scanf and printf for faster input and output.

4. Trade-offs:
The use of scanf and printf instead of cin and cout can make the code look less modern and slightly harder to understand for beginners. However, the performance improvement can be significant for large inputs, so it's worth considering.

5. Optimized Code Block:

```cpp
#include <iostream>
#include <cstdio>
using namespace std;

void cubedNum() {
    int inputNum = -1;
    do {
        scanf("%d", &inputNum);
    } while (inputNum < 0 || inputNum > 100);
    
    int result = inputNum * inputNum * inputNum;
    printf("%d\n", result);
    return;
}

int main() {
    cubedNum();
    return 0;
}
```

This optimized code is more efficient and readable than the original one. It uses a more efficient way to get the cube of a number and replaces the infinite loop with a more readable do-while loop. It also uses faster I/O functions for potentially large inputs.