1. **Code Analysis:**
The provided C++ code reads an integer from the user, cubes it, and then prints the result. The code is quite simple and there is not much room for optimization. However, there are some minor improvements that can be made.

2. **Optimization Strategy:**
   1. **Inefficient Data Structures:** There are no data structures used in the code, so there's no scope for optimization in this aspect.
   
   2. **Redundant or Unnecessary Computations:** The cube of a number is calculated by multiplying the number three times in a loop. This multiplication operation can be done directly without a loop.
   
   3. **Loops or Recursive Calls:** There is one loop for input validation and another to compute the cube. The input validation loop is necessary and cannot be optimized. The cube computation loop can be removed and replaced with a direct multiplication operation.
   
   4. **Compiler Optimizations or Pragma Directives:** No specific compiler optimization or pragma directives are required for this code. The code is simple and the standard optimization flags would be enough.

3. **Step-by-Step Explanation:**
   1. **Removing the Cube Computation Loop:** The cube of a number can be calculated directly by multiplying the number with itself twice. This removes the need for a loop and makes the code cleaner and more readable. It also slightly improves the performance by eliminating the loop overhead.
   
   2. **Trade-offs:** The main trade-off here is code simplicity versus performance. The original code is very simple and easy to understand, but it has unnecessary loop overhead. The optimized code is still simple and now it's more efficient.

4. **Optimized Code Block:**

Here's the optimized version of the code:

```cpp
#include <iostream>
using namespace std;

void cubedNum() {
  int inputNum = -1;
  while (1) {
    cin >> inputNum;
    if ((0 <= inputNum) && (inputNum <= 100)) {
      break;
    }
  }
  // Calculate the cube directly without a loop.
  int result = inputNum * inputNum * inputNum;
  cout << result << endl;
}

int main() {
  cubedNum();
  return 0;
}
```

This code performs the same function as the original code but is slightly more efficient due to the removal of the cube computation loop. It's also more readable since the cube is calculated directly.