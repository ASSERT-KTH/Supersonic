1. Code Analysis:
The given code is a simple program that reads an integer from the user, then cubes that number and prints the result. The performance of this program is already pretty optimized since it has a low complexity. However, there are a few improvements that can be made.

2. Optimization Strategy:
1. Redundant Computations: The program calculates the cube of a number by multiplication in a loop. This loop is unnecessary and can be replaced by a single multiplication operation.
2. Unnecessary loops: The while loop is used for input validation, which can be done in a more efficient manner.
3. Variable scope: The scope of some variables can be reduced, reducing their lifetime and potentially saving memory.

3. Step-by-Step Explanation:
1. Redundant Computations: We can replace the for loop with one multiplication operation. This reduces the number of operations from 2 to 1, which should improve performance. The trade-off is that the code becomes slightly less flexible - if we need to calculate some other power of the input number, we would need to modify the code.
2. Unnecessary loops: The while loop continues until a valid input is entered. This can be replaced with a do-while loop, which is guaranteed to execute at least once, making it more suitable for input validation. This change doesn't improve performance, but it makes the code cleaner and easier to understand.
3. Variable scope: The variables `inputNum` and `result` are declared at the beginning of the function, but they don't need to be. We can declare `inputNum` just before the do-while loop, and `result` just before we calculate it. This reduces the lifetime of these variables, which can potentially save memory. However, in this particular case, the impact on memory usage is likely to be minimal.

4. Optimized Code Block:

```C++
#include <iostream>

void cubedNum() {
  using namespace std;
  int inputNum;
  do {
    cin >> inputNum;
  } while (inputNum < 0 || inputNum > 100);
  
  int result = inputNum * inputNum * inputNum;
  
  cout << result << endl;
}

int main() {
  cubedNum();
  return 0;
}
```

This optimized code performs the same task as the original, but does so in a cleaner and potentially faster manner. The changes are minor and do not affect the functionality or output of the original code.