1. Code Analysis:
The provided C++ program accepts an integer number from the user and calculates its cube. If the input number is not between 0 and 100, the program will continuously prompt the user until a valid input is provided. 

2. Optimization Strategy:

A. Inefficient Data Structure: The data structures used in this program are efficient for the task.

B. Redundant Computations: The cube calculation of a number can be optimized. The current code uses a loop to calculate the cube, which can be replaced with a simple multiplication operation.

C. Loops and Recursive Calls: The loop for cube calculation can be optimized by removing it and replacing it with a simple operation. 

D. Compiler Optimizations: For this simple program, compiler optimizations or pragma directives are not necessary.

3. Step-by-Step Explanation:

Step 1: Remove the loop used for cube calculation and replace it with a simple multiplication operation. This will optimize the code as it will perform the cube calculation in one step instead of three, reducing the running time.

Trade-off: There are no significant trade-offs in this optimization. The code complexity is not increased, and the performance gain is significant.

4. Optimized Code Block:
```cpp
#include <iostream>
using namespace std;

void cubedNum(void) {
  int inputNum = -1;
  while (1) {
    cin >> inputNum;
    if ((0 <= inputNum) && (inputNum <= 100)) {
      break;
    }
  }

  // Optimized cube calculation: Removed loop and replaced it with a single multiplication operation.
  int result = inputNum * inputNum * inputNum;

  cout << result << endl;
  return;
}

int main(void) {
  cubedNum();
  return 0;
}
```
This optimized code preserves the functionality of the original code. It continuously prompts the user for an input between 0 and 100 and then calculates the cube of this number. But it does this in a more efficient way, reducing the running time.