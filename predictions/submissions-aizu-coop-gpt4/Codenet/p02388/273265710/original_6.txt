1. Code Analysis:
   The provided code is a simple C++ program that gets a number as an input from the user, cubes it, and prints the result. It continues to ask for input until the number is between 0 and 100 inclusive. 

2. Optimization Strategy:
   The code is quite simple and there is not much scope for optimization here. However, there are a few minor improvements we can make:

   A. The while loop used for input validation can be changed to a do-while loop. This is more efficient as it avoids checking the condition before the first iteration, where it's unnecessary.

   B. The for loop used to calculate the cube of the number is somewhat inefficient. Since we know the exact number of multiplications needed (3), the multiplication can be done directly without needing a loop.

3. Step-by-Step Explanation:

   A. Changing the while loop to a do-while loop:
      In the original code, the while loop checks the condition before the first iteration. However, we know that the condition will always be false for the first iteration (as the initial value of inputNum is -1), so checking it is unnecessary. By changing the while loop to a do-while loop, we can avoid this unnecessary check, slightly improving efficiency.

   B. Removing the for loop for multiplication:
      The original code uses a for loop to multiply the input number three times to calculate its cube. This is quite inefficient as the number of multiplications is known beforehand (3). We can simply multiply the number by itself twice to calculate its cube, eliminating the need for a loop and improving efficiency.

4. Optimized Code Block:

```cpp
#include <iostream>
using namespace std;

void cubedNum(void) {
  int inputNum;
  do {
    cin >> inputNum;
  } while (inputNum < 0 || inputNum > 100);  // Changed to do-while loop.
  
  int result = inputNum * inputNum * inputNum;  // Removed for loop, directly calculated cube.

  cout << result << endl;
  return;
}

int main(void) {
  cubedNum();
  return 0;
}
```

This optimized code performs the same functionality as the original, but with slightly improved efficiency. Note that the improvements are minor, as the original code was already quite simple and efficient. The most important improvement is the elimination of the unnecessary for loop, which reduces the amount of computation needed.