The provided code seems to simulate a ladder game (Amida lottery), where the player is moved left or right based on the input. The player starts from position 'a' and goes through 'm' moves, each defined by three integers (h, p, q). 

Upon analyzing the code, here are several points that can be optimized:

1. **Inefficient Data Structures**: The 2D array `amida` has a fixed size [101][1001]. This could lead to a waste of memory if 'n' and 'm' are small. This array stores whether there is a move at a certain height 'h' for position 'p' or 'p+1'. 

2. **Redundant Initialization**: The array `amida` is initialized to zero in every iteration of the while loop. This is not necessary as we are overwriting the values based on the input. 

3. **Unnecessary nested loop**: The nested loop runs from 1000 to 1 for each game. This is inefficient as it checks every possible height even if there are no moves defined at higher positions.

**Optimization Strategy**

1. **Changing Data Structures**: Instead of using a 2D array, we can use a 1D array to store the moves. We can treat the array as a map where the index represents the starting position and the value at that index represents the ending position after the move. 

2. **Avoiding Redundant Initialization**: We can avoid initializing the whole array to 0 in every iteration. Instead, we only need to update the positions where there are moves.

3. **Optimizing the nested loop**: We can keep track of the maximum height 'h' from the input and only iterate till that height instead of always going till 1000.

**Optimized Code Block**

```c++
#include <iostream>
using namespace std;
int main() {
  int n, m, a;
  while (true) {
    cin >> n >> m >> a;
    if (n == 0 && m == 0 && a == 0) {
      break;
    }
    int amida[101] = {0}; // Reducing dimension of the array
    int maxH = 0; // Keep track of maximum height
    for (int i = 0; i < m; i++) {
      int h = 0, p = 0, q = 0;
      cin >> h >> p >> q;
      if(h > maxH) // Update the maximum height
          maxH = h;
      amida[p] = q; // Store the move
      amida[q] = p;
    }
    for (int j = maxH; j > 0; j--) { // Only iterate till the maximum height
      if (amida[a] != 0) // If there is a move defined, make the move
        a = amida[a];
    }
    cout << a << endl;
  }
  return 0;
}
```
This optimized code reduces the memory usage by using a 1D array and also improves the running time by only iterating till the maximum height 'h' instead of going till 1000.