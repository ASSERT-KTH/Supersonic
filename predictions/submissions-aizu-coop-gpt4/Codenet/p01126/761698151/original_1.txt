1. Code Analysis:
The program reads three integers (n, m, a) from standard input. If all three integers are zero, the program exits. It then creates a two-dimensional array "amida" and populates it using the input values. The final loop iterates through the array in reverse order, modifying the value of "a" based on the array's contents. The new value of "a" is then printed. 

Potential performance bottlenecks in this code can be the usage of a 2D array and the way the array is traversed and modified. Another factor that can affect performance is the uncontrolled loop that continues until 0,0,0 is input.

2. Optimization Strategy:

A. Use a more efficient data structure:
The 2D array "amida" is not space efficient as it uses a fixed size. We could replace it with a map of maps (or unordered_map for better average time complexity), which would only use the space necessary for the input data.

B. Optimize input reading and exit condition:
The infinite loop waiting for the 0,0,0 input can be replaced with a loop that reads input until end-of-file (EOF). This is more efficient and allows the program to exit naturally when there is no more input, rather than forcing the user to input 0,0,0.

C. Optimize array traversing:
The last loop traverses the array in a reverse order. While the purpose of this isn't clear without more context, we could potentially optimize this if we stored the data in such a way that this reverse order isn't necessary.

3. Step-by-Step Explanation:

A. Replace 2D array with map of maps:
The rationale behind this change is to use only the space necessary for the input data. The trade-off is that accessing elements in a map is generally slower than in an array, but in this case, the memory efficiency gain may outweigh the slight performance loss.

B. Optimize input reading and exit condition:
Instead of using an infinite loop and waiting for the user to input 0,0,0, we can simply read input until EOF. This is more efficient as it doesn't require unnecessary input from the user and allows the program to exit naturally when there is no more input.

C. Optimize array traversing:
The last loop traverses the array in a reverse order. While the purpose of this isn't clear without more context, we could potentially optimize this if we stored the data in such a way that this reverse order isn't necessary.

4. Optimized Code Block:
The optimized code is as follows:

```cpp
#include <iostream>
#include <map>
using namespace std;

int main() {
  map<int, map<int, int>> amida;
  int n, m, a;
  while (cin >> n >> m >> a) {
    if (n == 0 && m == 0 && a == 0) {
      break;
    }
    amida.clear();
    for (int i = 0; i < m; i++) {
      int h = 0, p = 0, q = 0;
      cin >> h >> p >> q;
      amida[p][h] = 1;
    }
    for (int j = 1000; j > 0; j--) {
      if (amida[a][j] == 1)
        a++;
      else if (amida[a - 1][j] == 1)
        a--;
    }
    cout << a << endl;
  }
  return 0;
}
```
In this optimized code, the 2D array is replaced with a map of maps. The infinite loop is replaced with a loop that reads input until EOF. The map is cleared at the beginning of each iteration to ensure old data is not used. The rest of the code is unchanged as more context is needed for further optimization.