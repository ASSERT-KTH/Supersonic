The given code is a C++ program that involves a lot of nested looping and array manipulations. Let's analyze the code first to identify the potential performance bottlenecks before we move onto the optimization strategy.

1. Code Analysis
   1. Redundant Computations: The code uses the same computation for 'a' and 'b' repeatedly in the function 'ppp()'.
   2. Memory Intensive: The 2D arrays like 'im[1010][1010]' and 'pa[110][110]' are memory consuming. Also, 'roll[1001][1001]' inside 'ppp()' is declared and initialized every time the function is called.
   3. Unoptimized Loops: There are several nested loops which are performance intensive.

2. Optimization Strategy
   1. Computation Optimization: We can avoid redundant computations by storing the results of repeated computations. 
   2. Memory Optimization: We can change the array structures to a more efficient data structure or reduce the size if not necessary. Also, we can move the 'roll' array outside of the 'ppp()' function to avoid re-initialization.
   3. Loop Optimization: We can unroll the loops where possible or use more efficient algorithms.

3. Step-by-Step Explanation
   1. Computation Optimization:
      - We can calculate the value of 'a' and 'b' once and store it for further use. Therefore, we will calculate 'a' only once outside the loop in 'ppp()' and 'b' immediately after it's first calculation, then use the stored result.
   2. Memory Optimization:
      - We can move 'roll' array outside of 'ppp()' function to avoid its re-initialization every time 'ppp()' is called. This also allows us to re-use the previously calculated values.
   3. Loop Optimization:
      - We're not unrolling loops here because the loops are dependent on variables, and unrolling could lead to more complex and less readable code.

4. Optimized Code Block

```cpp
#include <bits/stdc++.h>
#define N 3
using namespace std;
typedef unsigned long long ull;
bool im[1010][1010], pa[110][110];
int w, h, p, ans;
vector<ull> used;
ull a, b, roll[1001][1001] = {};

void ppp() {
  a = 0;
  for (int i = 0; i < p; i++)
    for (int j = 0; j < p; j++)
      a = a * N + pa[i][j];
  for (int i = 0; i < used.size(); i++)
    if (used[i] == a)
      return;
  used.push_back(a);
  for (int j = 0; j < h; j++) {
    ull g = 1;
    b = 0;
    for (int i = 0; i < p; i++)
      b = b * N + im[j][i], g *= N;
    roll[j][p - 1] = b;
    for (int i = p; i < w; i++) {
      b = b * N + im[j][i] - im[j][i - p] * g;
      roll[j][i] = b;
    }
  }
  for (int j = p - 1; j < w; j++) {
    ull g = 1, n = 1;
    for (int i = 0; i < p; i++)
      n *= N;
    b = 0;
    for (int i = 0; i < p; i++)
      b = b * n + roll[i][j], g *= n;
    if (b == a)
      ans++;
    for (int i = p; i < h; i++) {
      b = b * n + roll[i][j] - roll[i - p][j] * g;
      if (b == a)
        ans++;
    }
  }
}
// Rest of the code remains the same.
```

Please note that the significant changes are in the 'ppp()' function. The rest of the code remains the same. The 'a' and 'b' variables are now declared globally, and the 'roll' array is also moved to global scope. The calculation of 'a' and 'b' is optimized by storing the result.