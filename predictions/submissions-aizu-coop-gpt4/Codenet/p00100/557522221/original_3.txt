Code Analysis:
The given C++ program reads a number n, and then n times reads three numbers: i, p, q. The program stores the product of p and q in a map corresponding to a key i. If the key i is not already in the map, it is also stored in a vector. After reading all the input, the program iterates over the vector. For each element of the vector, it checks the corresponding value in the map. If the value is greater than or equal to 1000000, it prints the key and sets the flag s to 1. If no such value was found, the program prints "NA".

Optimization Strategy:

1. Inefficient data structures: The vector vec is used just to store the keys that have been inserted in the map. This is unnecessary because map stores its keys in a sorted manner and provides an iterator to access them in order. 

2. Redundant computations: The find operation in map, which is used to find an element in the map, is a logarithmic operation. We are using it inside a loop which makes the overall time complexity of this part to be O(n log n). But this operation is unnecessary because the iterator of the map can be used to access the elements.

3. The map in STL is a balanced binary search tree and the time complexity of insert and find operations in map is logarithmic. If we do not care about the order of keys, we can use unordered_map instead of map. The unordered_map in STL is implemented as a hash table and the time complexity of insert and find operations in unordered_map is constant on average.

4. The condition `if (!m[i])` is used to check whether the key i is in the map or not. But this operation also inserts the key i into the map if it is not already present. This might cause unnecessary memory allocation if the key i is not present in the map and the value of p*q is 0. Instead, we can use the insert function of the map which does not insert the key into the map if it is already present.

Optimized Code Block:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;
int main() {
    int n, i;
    long long p, q, s = 0;
    while(cin >> n, n) {
        unordered_map<int, long long> m;
        while(n--) {
            cin >> i >> p >> q;
            auto it = m.insert({i, 0});
            it.first->second += p * q;
        }
        for(auto it = m.begin(); it != m.end(); ++it) {
            if(it->second >= 1000000) {
                s = 1;
                cout << it->first << endl;
            }
        }
        if (!s)
            cout << "NA" << endl;
    }
}
```

In the optimized code version:

1. We are using unordered_map instead of map which reduces the time complexity of insert and find operations from logarithmic to constant on average.

2. We have removed the vector vec and we are using the iterator of the unordered_map to access the keys and values.

3. Instead of accessing the value of a key directly which might cause unnecessary memory allocation, we are using the insert function which does not insert the key if it is already present.

4. We have avoided the unnecessary find operation in the map by using the iterator of the map directly to access the elements.

The trade-off is that the keys in unordered_map are not ordered. However, if we do not care about the order of the keys, this is an acceptable trade-off for a significant improvement in performance.