1. Code Analysis:
The provided code is a standalone program that reads from the standard input. It reads an integer 'n' in a loop and then in a sub-loop, it reads pairs of integers, multiplies them, and adds the result to a value in a map (with the first integer as the key). After that, it checks if any of the values in the map is greater than or equal to 1,000,000. If so, it prints out the associated key. If not, it prints "NA".

2. Optimization Strategy:
A. Using unordered_map instead of map: std::map in C++ is implemented as a Red-Black Tree which has a time complexity of O(log(n)) for insertions, deletions, and search operations. On the other hand, std::unordered_map in C++ is implemented using Hash Table, the average time complexity of search, insert and delete is O(1). Hence, it's faster.
B. Avoiding unnecessary map search: The program performs a find operation in the second loop which is unnecessary since we know that the key exists in the map. Instead of using find to get the iterator to the key, we can directly use the key to reference the value.
C. Reserve space for vector: If we know the size of the data to be stored in the vector in advance, we can reserve the space. This will prevent unnecessary reallocations.

3. Step-by-Step Explanation:
A. Changing map to unordered_map: This is a simple change that only involves replacing "map" with "unordered_map". This change will make the insert and find operations faster.
B. Removing unnecessary map find operation: Instead of using "m.find(vec[i])", we can directly use "m[vec[i]]" to access the value associated with the key. This will reduce the time complexity of this operation from O(log(n)) to O(1).
C. Reserve space for vector: Since we know that the maximum size of the vector can be 'n', we can reserve 'n' spaces for the vector.

4. Optimized Code Block:

```cpp
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

int main() {
  int n, i;
  while (cin >> n, n) {
    unordered_map<int, long long> m;
    vector<int> vec;
    vec.reserve(n);
    long long p, q, s = 0;
    while (n--) {
      cin >> i >> p >> q;
      if (!m[i])
        vec.push_back(i);
      m[i] += p * q;
    }
    for (int i = 0; i < vec.size(); i++) {
      if (m[vec[i]] >= 1000000) {
        s = 1;
        cout << vec[i] << endl;
      }
    }
    if (!s)
      cout << "NA" << endl;
  }
}
```

Note: Please ensure that the input data for the program is reliable, as unordered_map may cause undefined behavior if collisions happen too often. In such cases, stick to the use of std::map.