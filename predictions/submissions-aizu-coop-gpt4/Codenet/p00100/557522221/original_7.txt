The given code accepts input in the form of `n` pairs of integers (`i`, `p`, and `q`). For each `i`, it calculates the cumulative sum of the product of `p` and `q` and stores it in a map `m`. If the cumulative sum for an `i` exceeds 1,000,000, it prints `i`. If no `i` exceeds 1,000,000, it prints "NA".

Optimization Strategy:

1. Data Structures: The map 'm' and vector 'vec' are efficient data structures for this task. No changes required here.
   
2. Redundant Computation: The code is finding an iterator to a map element whose key is already known. This is unnecessary and time-consuming as the map allows direct access to its elements by keys.
   
3. Loops: The size of the vector 'vec' is being called in each iteration of the loop. We can store this value prior to the loop.

4. Compiler Optimizations: We can optimize the input/output stream by using `std::ios_base::sync_with_stdio(false)` and `cin.tie(NULL)`. This will untie the cin and cout streams and improve their efficiency.

Optimized Code:

```cpp
#include <iostream>
#include <map>
#include <vector>
using namespace std;

int main() {
  std::ios_base::sync_with_stdio(false); // Improving efficiency of cin and cout
  cin.tie(NULL);

  int n, i;
  while (cin >> n, n) {
    map<int, long long> m;
    vector<int> vec;
    long long p, q, s = 0;

    while (n--) {
      cin >> i >> p >> q;
      if (!m[i])
        vec.push_back(i);
      m[i] += p * q;
    }

    int vecSize = vec.size(); // Storing size of vector before loop
    for (int i = 0; i < vecSize; i++) {
      if (m[vec[i]] >= 1000000) { // Directly accessing map element
        s = 1;
        cout << vec[i] << "\n";
      }
    }

    if (!s)
      cout << "NA" << "\n";
  }

  return 0;
}
```

The optimizations are:
- The code is now directly accessing map elements using their keys, removing the unnecessary step of finding an iterator to the element.
- The size of the vector 'vec' is now stored before the loop starts, so it won't be calculated in each iteration.
- The code now uses faster I/O operations, which will be beneficial especially when the amount of I/O is large.
- The code now prints a newline character "\n" instead of `endl`. `endl` not only inserts a newline, but also flushes the stream, which can slow down the program if the number of outputs is large.