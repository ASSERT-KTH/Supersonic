The given code seems to be simple, and there are not many places to optimize, but there are still some points we can focus on:

1) `0 <= a, b, c <= 100;`: This line does not do what it is intended to do. It does not limit the input to be in between 0 and 100. It is just a comma-separated list of expressions and it does not affect the variables a, b and c at all.

2) Multiple calls to `printf()` function: It can be replaced by a single call to `printf()` saving some performance.

3) There seems to be no input validation. The user could input anything, and the program would still run. It could crash if the user inputs something other than an integer.

Here is the optimized version of the code:

```c
#include <stdio.h>
int main(void) {
  int a, b, c;
  if (scanf("%d %d %d", &a, &b, &c) == 3 && 0 <= a && a <= 100 && 0 <= b && b <= 100 && 0 <= c && c <= 100) {
    printf((a < b && b < c) ? "Yes\n" : "No\n");
  } else {
    printf("Invalid input\n");
  }
  return (0);
}
```

Changes:

1) Removed `0 <= a, b, c <= 100;` as it does nothing.

2) Added input validation in the if condition. It checks whether the input is valid (3 integers are read) and if the integers are between 0 and 100.

3) Replaced multiple `printf()` function calls with a single call using the ternary operator. This reduces the number of function calls improving the performance.

Trade-offs:

The code became slightly more complex due to the input validation and the ternary operator. But it is better to have the code slightly more complex than to have a code that might crash due to invalid input. Also, the performance gain from reducing the number of function calls is a plus.