1. Code Analysis:
The given code is pretty simple. It takes three integers as input, checks if they are in increasing order and prints 'Yes' if they are, 'No' otherwise.

2. Optimization Strategy:
The code is already efficient, but there are a few minor changes that can be made to make it a bit more robust.
    A. The line '0 <= a, b, c <= 100;' doesn't actually do anything in C/C++. It needs to be removed.
    B. Add error checking for scanf to ensure successful read of values.
    C. Instead of using two separate printf statements, a single printf statement can be used along with the ternary operator for better code readability.

3. Step-by-Step Explanation:
    A. The line '0 <= a, b, c <= 100;' seems to be a misplaced constraint, it does not have any effect in C/C++ and can be removed without affecting the functionality of the code.
    B. Adding error checking for scanf ensures that the values of a, b, and c are successfully read. If not, the program can exit early or handle the error in some way.
    C. Using the ternary operator '?' reduces the need for two separate printf statements. The ternary operator allows us to choose between two expressions depending on the condition's truthiness. This reduces a bit of redundancy and can make the code cleaner and easier to read.

4. Optimized Code Block:

```c
#include <stdio.h>
#include <stdlib.h>

int main(void) {
  int a, b, c;
  
  // Error checking for scanf
  if (scanf("%d %d %d", &a, &b, &c) != 3) {
      printf("Error in input\n");
      return(EXIT_FAILURE);
  }

  // Use of ternary operator for cleaner code
  printf((a < b && b < c) ? "Yes\n" : "No\n");
  
  return (0);
}
```

This optimized code has the same functionality as the original code, but with improved robustness due to the addition of error checking for scanf. The use of the ternary operator also makes the code cleaner and easier to read.