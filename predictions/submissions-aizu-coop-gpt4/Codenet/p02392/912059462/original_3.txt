The provided code is relatively efficient already as there are no loops, recursive function calls, or complex data structures used, and no explicit dynamic memory allocation taking place. It is a simple program that checks if three numbers are in ascending order.

However, one minor optimization could be done to reduce the number of `printf` calls. In the current implementation, `printf` is called twice, once to print "Yes" or "No", and once to print a newline character. This could be reduced to a single call per execution by including the newline character in the first `printf`.

Here's the optimization step:

1. Merge the two `printf` calls into one: Instead of calling `printf` twice to print "Yes" or "No" and then the newline character, we can include the newline character in the first `printf` call. This reduces the function call overhead. This optimization might not be noticeable in this simple program, but it is a good practice to reduce the number of function calls when possible, especially when dealing with I/O operations which can be expensive.

Here's the optimized code:

```c
#include <stdio.h>
int main() {
  int a, b, c;
  scanf("%d%d%d", &a, &b, &c);
  if (a < b && b < c) {
    printf("Yes\n");
  } else {
    printf("No\n");
  }
  return 0;
}
```

Note: This is one of the most basic optimizations and in a more complex program, other optimizations such as loop optimizations, efficient data structures, avoiding redundant computations, etc. would be more effective.