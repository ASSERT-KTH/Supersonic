The given code is quite simple and there's not much that can be done to optimize it significantly. However, there are a few minor changes we can make to ensure the code is as efficient as possible. 

1. Code Analysis:
The code reads three integers from standard input and checks if they are in ascending order. If they are, it outputs "Yes", otherwise it outputs "No". The code is straightforward and there aren't any apparent performance bottlenecks, inefficient memory usage, or sections that would benefit significantly from optimization.

2. Optimization Strategy:
    1. We can combine the two printf statements into one. This reduces the number of system calls, which is relatively costly in terms of performance.
    2. We can make use of short-circuit evaluation in C/C++. If 'a < b' is false, 'b < c' won't be evaluated. This saves some computation.
    3. The main function does not require a return statement at the end. Removing it won't affect the functionality of the program and will save a small amount of memory.
   
3. Step by Step Explanation:
    1. Combining printf statements: System calls are expensive in terms of time and resources. By combining printf calls, we reduce the number of system calls, thereby improving the performance of the code.
    2. Short-circuit evaluation: This is a property of logical operators in C/C++. If the result of the entire expression can be determined by evaluating the first part of the expression, the remaining parts are not evaluated. This can save some CPU cycles.
    3. Removing the return statement in main: In C/C++, the main function implicitly returns 0 if no return statement is specified. So, we can remove the return statement without affecting the functionality of the code.

Here is the optimized version of the code:

```c
#include <stdio.h>
int main() {
  int a, b, c;
  scanf("%d%d%d", &a, &b, &c);
  if (a < b && b < c)
    printf("Yes\n");
  else
    printf("No\n");
}
```

Again, these are minor optimizations and the performance gain will not be noticeable in such a small program. However, in larger and more complex programs, these practices could potentially result in significant performance improvements.