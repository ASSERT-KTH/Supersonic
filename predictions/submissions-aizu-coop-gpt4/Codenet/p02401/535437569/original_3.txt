The provided program takes and processes a simple arithmetic expression in each loop iteration. The expression is composed of two integers and an operator (either '+', '-', '/', '*') from standard input. The program then evaluates the expression and prints the result. If the operator is '?', the program terminates. This is a very straightforward program with limited opportunities for optimization. However, some improvements can be made.

Optimization Strategy:

1. Avoid redundant checks: The code checks the value of 'z' multiple times with several 'if' conditions. This can be optimized by using a 'switch' statement because 'switch' performs better than multiple 'if' conditions when there are more than two conditions.

2. Compiler optimizations: The compiler can help optimize the code further by using optimization flags during the compilation process. A commonly used flag is '-O2', which enables all optimization flags except for loop unrolling and function inlining.

Optimized Code:

```cpp
#include <cstdio>

int main() {
  int x, y;
  char z;
  while (true) {
    scanf("%d %c %d", &x, &z, &y);
    switch(z) {
      case '+':
        printf("%d\n", x + y);
        break;
      case '-':
        printf("%d\n", x - y);
        break;
      case '/':
        printf("%d\n", x / y);
        break;
      case '*':
        printf("%d\n", x * y);
        break;
      case '?':
        return 0;
    }
  }
  return 0;
}
```
Compilation can be done with the '-O2' flag to enable compiler optimizations.

```bash
g++ -O2 -o prog prog.cpp
```

The optimized code now includes a 'switch' statement, which reduces the number of conditions checked in each iteration. This improves the running time of the program. The trade-off here is minimal: 'switch' statements are arguably more readable, but they may be less flexible than 'if' statements. The compiler optimization flag '-O2' does not affect the readability of the code but can significantly improve the runtime performance. However, it may make debugging more challenging since the optimized code may not exactly follow the source code line by line.