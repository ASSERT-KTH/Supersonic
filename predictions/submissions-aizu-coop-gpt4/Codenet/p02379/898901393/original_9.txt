The provided code calculates the Euclidean distance between two points in a 2D space. The code is pretty straightforward and well-optimized for this specific task. However, there are a few improvements we can make to squeeze out a little more performance.

Optimization Strategy:

1. Use the optimization flags provided by the compiler. This will enable the compiler to make optimizations at the machine code level, which could lead to performance improvements.

2. Inline small function calls. The function `distance` could be inlined, which would remove the overhead of function call. However, this is beneficial only for small functions as inlining large functions can increase the code size significantly.

Optimized Code:
```c
#include <math.h>
#include <stdio.h>

typedef struct point {
  double x;
  double y;
} point;

// Using inline keyword to make this function inline
inline double distance(point p1, point p2) {
  double temp;
  temp = (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);
  return sqrt(temp);
}

int main(void) {
  point p1, p2;
  double d;
  scanf("%lf%lf%lf%lf", &p1.x, &p1.y, &p2.x, &p2.y);
  d = distance(p1, p2);
  printf("%.5f\n", d);
  return 0;
}
```
When compiling this code, use `-O3` compiler flag for optimization, which turns on all optimization specified by `-O2` and also additional optimizations that may increase performance.

Trade-offs:

- Inlining can increase the size of the code, which might lead to a larger executable. This is not a problem for small programs, but for larger ones, it can lead to cache misses which can decrease performance. So, inlining should be used judiciously. 

- Using compiler optimization flags like `-O3` can sometimes lead to unexpected behavior, as the compiler may make assumptions that are not valid. This is rare, but it is something to keep in mind. 

- The use of compiler optimization flags can make the debugging process more difficult, as the optimized code may not closely follow the source code. 

In summary, these optimizations are minor and may not significantly improve performance for this specific program, but they illustrate some general principles of code optimization that could be useful in a more complex program.