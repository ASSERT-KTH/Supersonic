1. Code Analysis:
   The provided code is written in C and performs operations on a 2x3 matrix read from the standard input. It performs Gaussian elimination (a method to solve linear systems) in the `matrix()` function and prints the results.

2. Optimization Strategy:
   The following points can be improved:

   A. Redundant computations: We can avoid redundant computations by storing the results of frequently used computations.

   B. Better use of Compiler Optimizations: We can use compiler flags and pragmas to guide the compiler to optimize the code.

   C. Unnecessary double pointer: The double pointer `double **x` in the `matrix()` function can be replaced with a 2D array notation which is easier to understand and more efficient.

   D. The variables `su1` and `su2` are globally declared, but they are used as temporary variables. These can be moved inside the function where they are used.

3. Step-by-Step Explanation:

   A. Redundant computations:
      `su2 / su1` is computed repeatedly in the loops. We can compute it once and store the result, then reuse it. This will save CPU cycles.

   B. Compiler Optimizations:
      We can use the `-O3` flag for gcc/g++ compilers to enable all optimization levels.

   C. Unnecessary double pointer:
      Replace `double **x` with `double x[N][N + 1]` in the `matrix()` function.

   D. Move `su1` and `su2` inside the function:
      These are only used as temporary variables in the `matrix()` function.

4. Optimized Code Block:

```c
#include <stdio.h>
#define N 2

void matrix(double x[N][N + 1]);

int main(void) {
  double x[N][N + 1];
  int i;
  char str[100];

  while(fgets(str, sizeof(str), stdin) != NULL) {
    sscanf(str, "%lf %lf %lf %lf %lf %lf", &x[0][0], &x[0][1], &x[0][2], &x[1][0], &x[1][1], &x[1][2]);
    matrix(x);

    for (i = 0; i < N; i++) {
      if (i)
        printf(" ");
      printf("%3.3f", x[i][N]);
    }
    printf("\n");
  }
  return 0;
}

void matrix(double x[N][N + 1]) {
  int i, j, k;
  double ratio;

  for (k = 0; k < N - 1; k++) {
    for (j = k + 1; j < N; j++) {
      ratio = x[j][k] / x[k][k];
      for (i = 0; i <= N; i++) {
        x[j][i] -= x[k][i] * ratio;
      }
    }
  }

  for (k = N - 1; k > 0; k--) {
    for (j = k - 1; j >= 0; j--) {
      ratio = x[j][k] / x[k][k];
      for (i = 0; i <= N; i++) {
        x[j][i] -= x[k][i] * ratio;
      }
    }
  }

  for (j = 0; j < N; j++) {
    ratio = x[j][j];
    for (i = 0; i <= N; i++) {
      x[j][i] /= ratio;
    }
  }
}
```

Note: When compiling this code, use the `-O3` flag to enable all optimization levels. For example: `gcc -O3 -o program program.c`.