1. Code Analysis:
    
    The provided code takes a 2x3 matrix as input from the user, performs Gaussian-Jordan elimination on the matrix, and then prints the last column of the matrix. The primary performance bottlenecks are the nested loops inside the `matrix` function and the continuous division operations in these loops.

2. Optimization Strategy:

    A. Replace division operations with multiplication: In the `matrix` function, we are performing division operations inside the loops. Division is slower than multiplication in most of the CPUs. So, we can replace the division operations with multiplication by taking the reciprocal of the divisor once and then using it in the loop.

    B. Loop Unrolling: The `matrix` function contains multiple nested loops which can be unrolled to improve performance by reducing the overhead of loop control mechanisms. As the number of iterations is fixed (2), the loops can be fully unrolled.

    C. Compiler Optimization: Use the `-O3` flag for gcc/g++ compiler to enable all compiler optimizations.

3. Step-by-Step Explanation:

    A. Replace division operations with multiplication: Division is a slower operation than multiplication. In the `matrix` function, the division operation `su2 / su1` is being performed in each iteration of the nested loops. We can speed this up by calculating the reciprocal of `su1` once and then using multiplication instead of division in the loop.

    B. Loop Unrolling: Loop unrolling is a technique used to increase the efficiency of loops by decreasing the overhead of loop control mechanisms. The `matrix` function contains multiple nested loops that iterate two times. We can unroll these loops to reduce the loop control overhead.

    C. Compiler Optimization: The `-O3` option for gcc/g++ compiler turns on all optimization flags specified by `-O2` and also additional optimizations to increase speed, including further optimizations for loops, function inlining, and vectorization.

4. Optimized Code Block:

```cpp
#include <stdio.h>
#define N 2
int matrix(double **x);
int main(void) {
  double x[N][N + 1];
  double *y[N];
  int i, j, k;
  char str[100];
  for (; fgets(str, sizeof(str), stdin) != NULL;) {
    sscanf(str, "%lf %lf %lf %lf %lf %lf", &x[0][0], &x[0][1], &x[0][2],
           &x[1][0], &x[1][1], &x[1][2]);
    for (i = 0; i < N; i++)
      y[i] = x[i];
    matrix(y);
    for (i = 0; i < N; i++) {
      if (i)
        printf(" ");
      printf("%3.3f", x[i][N]);
    }
    printf("\n");
  }
  return 0;
}
int matrix(double **x) {
  double su1 = 0, su2 = 0, su1_inv;
  // Loop unrolling and replacing division with multiplication
  su1 = x[0][0];
  su2 = x[1][0];
  su1_inv = 1.0 / su1;
  x[1][0] = x[1][0] - x[0][0] * su2 * su1_inv;
  x[1][1] = x[1][1] - x[0][1] * su2 * su1_inv;
  x[1][2] = x[1][2] - x[0][2] * su2 * su1_inv;

  su1 = x[1][1];
  su2 = x[0][1];
  su1_inv = 1.0 / su1;
  x[0][0] = x[0][0] - x[1][0] * su2 * su1_inv;
  x[0][1] = x[0][1] - x[1][1] * su2 * su1_inv;
  x[0][2] = x[0][2] - x[1][2] * su2 * su1_inv;

  su1 = x[0][0];
  su1_inv = 1.0 / su1;
  x[0][0] = x[0][0] * su1_inv;
  x[0][1] = x[0][1] * su1_inv;
  x[0][2] = x[0][2] * su1_inv;

  su1 = x[1][1];
  su1_inv = 1.0 / su1;
  x[1][0] = x[1][0] * su1_inv;
  x[1][1] = x[1][1] * su1_inv;
  x[1][2] = x[1][2] * su1_inv;

  return 0;
}
```
Use `-O3` flag when compiling to enable all compiler optimizations.