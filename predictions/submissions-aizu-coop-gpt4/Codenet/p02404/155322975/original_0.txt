1. Code Analysis:

The given code receives a pair of integers as input, H and W, and then prints a rectangle of 'H' height and 'W' width using '#' for the borders and '.' for the inner part. The input is continuously received until a 0 is entered for both H and W. 

The potential performance bottlenecks could be:
- The use of endl. This manipulator not only inserts a newline, but also flushes the output buffer, which could negatively impact the program's performance when used frequently.
- The heavy use of if-statements inside the nested loops could also be a performance issue.

2. Optimization Strategy:

A. Use '\n' instead of endl to avoid unnecessary flushing of the output buffer.
B. Reduce the number of if-statements inside the loops. This can be achieved by creating two strings: one for the top/bottom borders and one for the middle rows. This way, each row can be printed as a whole, reducing the number of condition checks and print operations.
C. Use Fast I/O for cin and cout to speed up the reading and writing operations.

3. Step-by-Step Explanation:

    1. Using '\n' instead of endl: endl is known to be slower than '\n' because it causes a flush of the output buffer. This is not necessary in our case, so using '\n' can speed up the output operations.
    2. Reducing the number of if-statements and print operations: By creating two string variables to represent the top/bottom and middle rows of the rectangle, we can print each row as a whole. This reduces the number of condition checks from H*W to just H, and the number of print operations from H*W to just H. This can significantly speed up the execution, especially when H and W are large.
    3. Fast I/O: Fast I/O can significantly speed up the input and output operations in C++. This can be achieved by adding 'ios_base::sync_with_stdio(false);' and 'cin.tie(NULL);' at the beginning of the main function.

4. Optimized Code Block:

```cpp
#include <iostream>
#include <string>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false); 
  cin.tie(NULL);
  int H, W;
  while (1) {
    cin >> H >> W;
    if (H == 0 && W == 0)
      break;
    string top_bottom = string(W, '#');
    string middle = "#" + string(W-2, '.') + "#";
    for (int i = 1; i <= H; i++) {
      if (i == 1 || i == H) {
        cout << top_bottom << '\n';
      } else {
        cout << middle << '\n';
      }
    }
    cout << '\n';
  }
  return 0;
}
```

This optimized code should work significantly faster than the original code, especially for large values of H and W. The trade-off is that it uses slightly more memory to store the strings for the rows, but this increase is negligible compared to the speed improvement.