Code Analysis:
This simple C++ program reads two integer inputs H and W repeatedly until the pair 0, 0 is encountered, which stops the program. For each pair of H and W, it prints a HxW "rectangle" of '#' and '.' characters on the console. The '#' character is printed at the border of the "rectangle" and the '.' character is printed inside.

Optimization Strategy:
1. Inefficient Data Structures: The code does not make use of any data structures, so no optimization can be done in this regard.

2. Redundant Computations: The condition checks inside the nested loops could be considered redundant as they are performed on each loop iteration. 

3. Loop Optimization: The code contains two nested loops which iterate over the range 1 to H and 1 to W respectively. Loop unrolling might not be feasible due to the dynamic nature of H and W. 

4. Compiler Optimizations: The use of compiler flags could be beneficial here. For instance, the -O3 flag for g++ can be used to enable all optimization levels.

Optimization Steps:
1. Reducing Redundant Computations: Instead of checking the conditions for every cell, we can directly print the first and last row with '#' and the remaining rows with '#' at the start and end, and '.' in between, reducing the need for checking conditions inside the nested loop.

Trade-offs: The optimized code might be a bit more complex due to the use of different loops to print the first row, middle rows, and last row separately. However, the gain in performance makes this a worthwhile trade-off.

Optimized Code:
```cpp
#include <iostream>
#include <string>
using namespace std;

int main() {
    int H, W;
    while (1) {
        cin >> H >> W;
        if (H == 0 && W == 0)
            break;
        string border(W, '#');
        string middle = "#" + string(W-2, '.') + "#";

        // Print top border
        cout << border << endl;

        // Print middle rows
        for (int i = 2; i < H; i++) {
            cout << middle << endl;
        }

        // Print bottom border
        if (H!=1) cout << border << endl;

        cout << endl;
    }
}
```
This code first generates the strings for the top/bottom border and the middle rows. Then it prints the top border, followed by the middle rows and the bottom border. This eliminates the need for condition checks inside the loop, thus making it more efficient.