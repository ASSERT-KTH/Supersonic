Code Analysis:

The given C++ code reads in a number 'n' and then reads 'n' pairs of commands and words. If the command is 'i', it inserts the word into a map (dictionary). If the command is not 'i', it checks if the word is present in the dictionary and prints "yes" if it is and "no" if it isn't.

Optimization Strategy:

1. Data Structures: The map data structure in C++ is implemented as a balanced binary search tree and has a time complexity of O(log n) for insertions, deletions and search operations. However, we can use an unordered_map instead of map which is implemented as a hash table and has an average time complexity of O(1) for these operations.

2. Redundant Computations: Currently, there are no redundant computations in the code.

3. Loop Optimization: There are no loops in the code that can benefit from optimization techniques like loop unrolling or tail recursion.

4. Compiler Optimizations: The use of compiler optimization flags can increase the speed of the program. The flag `-O2` can be used for that purpose.

Step-by-Step Explanation:

1. Replace map with unordered_map: unordered_map provides a faster time complexity for insertion and search operations. The only trade-off could be a slightly higher memory usage in case of a very large number of collisions in the hash table, but this is generally unlikely.

2. Use compiler optimization flag `-O2`: This tells the compiler to optimize the code for speed. This includes inlining functions, performing loop optimizations and avoiding unnecessary computations.

Optimized Code Block:

```c++
#include <iostream>
#include <unordered_map>
#include <string>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false); // this line helps to speed up the cin/cout operations
  cin.tie(NULL); // untie cin and cout for faster I/O

  int n;
  cin >> n;
  
  unordered_map<string, bool> Dic;
  string com, word;
  
  while (n--) {
    cin >> com >> word;
    if (com[0] == 'i')
      Dic[word] = true;
    else {
      if (Dic[word])
        cout << "yes" << '\n';
      else
        cout << "no" << '\n';
    }
  }
}
```
Note: In the optimized code, I've also replaced endl with '\n' because endl causes a flush operation which can slow down the output. And added `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` for faster I/O operations.