Looking at the provided code, you're essentially building a simple hash table where the key is computed by the `dic_op` function and the value is either 1 or 0. Here are some potential areas for optimization:

1. **Data Structures**: Right now, we're using a large static array to store our data. This can lead to memory waste if only a small portion of the array is used. Instead, we could use a standard library data structure such as `unordered_map` which only allocates memory as needed.

2. **String Processing**: The `dic_op` function contains a loop that checks each character of the string individually. This could be optimized by using a lookup table to convert the characters to their corresponding values.

3. **Input/Output Operations**: The `scanf` and `puts` functions are slower than their C++ counterparts `cin` and `cout`. We could replace them to speed up I/O operations.

4. **Compiler Optimizations**: We could enable compiler optimizations by using the `-O3` flag when compiling.

Now let's optimize the code according to these strategies:

```cpp
#include <unordered_map>
#include <iostream>
using namespace std;
typedef long long ll;

ll dic_op(char str[14]) {
  static int lookup[] = {0, 1, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4};
  ll f = 1;
  ll g = 0;
  for (int j = 0; str[j]; j++) {
    g += f * lookup[str[j] - 'A'];
    f *= 5;
  }
  return g;
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  int n;
  unordered_map<ll, bool> dic;
  char opstr[7];
  char str[13];
  cin >> n;
  while (n--) {
    cin >> opstr >> str;
    if (opstr[0] == 'i') {
      dic[dic_op(str)] = true;
    } else if (opstr[0] == 'f') {
      cout << (dic[dic_op(str)] ? "yes\n" : "no\n");
    }
  }
  return 0;
}
```

The changes made are:

1. Replaced the `dic` static array with an `unordered_map`. This is a hash table that only allocates memory as needed.
2. Created a lookup table in `dic_op` to convert characters to their corresponding values. This removes the need for the multiple `if` statements.
3. Replaced `scanf` and `puts` with `cin` and `cout`. Also, called `ios::sync_with_stdio(false)` and `cin.tie(nullptr)` to speed up I/O operations.
4. The `while (n--)` loop is more idiomatic in C++ and the compiler can optimize it better than the original `for` loop.
5. Removed unused variables.

Remember to compile the code with `-O3` flag for best performance.