Code Analysis:
The provided code is an implementation of a hash table with open addressing. The hash table is used to store strings of characters (DNA sequences), and supports two operations - insert a string into the hash table and query if a string is already present in the hash table.

The potential performance bottlenecks and inefficient memory usage are as follows:

1. String Comparison: The `strcmp` function is used to compare strings in the hash table. This operation can be costly, especially if the strings are long.

2. Memory Usage: The size of the hash table is fixed (1020001) and each element can store up to 14 characters. This can be inefficient if the number of elements to be stored is significantly less than 1020001 or if the strings are significantly shorter than 14 characters.

3. String Copy: The `strcpy` function is used to copy strings into the hash table. This operation can be costly, especially if the strings are long.

Optimization Strategy:
1. Use Hashing for Strings: To avoid string comparison, we can use a good hash function that can convert a string into a unique integer (or a reasonably unique integer, since perfect hash functions are hard to achieve). This integer can then be used for comparison, which is much faster than string comparison.

2. Dynamic Memory Allocation: Instead of using a fixed size for the hash table, we can use dynamic memory allocation to adjust the size of the hash table according to the number of elements to be stored.

3. Avoid String Copy: Instead of copying the entire string into the hash table, we can just store a pointer to the string. This can significantly reduce the cost of the `insert` operation, especially if the strings are long.

4. Compiler Optimizations: Use compiler flags like `-O3` to enable all optimization options. This includes optimizing loops, reducing function calls, and more.

Optimized Code Block:
We can use the `unordered_map` data structure provided by C++ STL which is a hash table that uses chaining to resolve collisions. This would help us avoid implementing our own hash table, and the `unordered_map` implementation is likely to be more efficient than the current implementation.

Here is the optimized code:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>

using namespace std;

unordered_map<string, bool> dnaSequences;

int main() {
  int numOfCom;
  cin >> numOfCom;
  string com, word;

  while (numOfCom--) {
    cin >> com >> word;
    if (com[0] == 'i') {
      dnaSequences[word] = true;
    } else {
      if (dnaSequences[word]) {
        cout << "yes" << endl;
      } else {
        cout << "no" << endl;
      }
    }
  }

  return 0;
}
```

In this optimized code, we have replaced the custom hash table with an `unordered_map` which is a standard C++ hash table. We directly store the input strings in the hash table, so there is no need to convert the strings to numbers or to copy the strings. Also, we don't need to manually handle collisions or implement our own hash functions. This simplifies the code and also improves performance.