1. Code Analysis:
The given code is a C++ program that converts dates between two calendars. The 'M2S' function converts a date from the Mayan calendar to the Gregorian calendar, and the 'S2M' function does the reverse. The code is quite efficient, but there are a few areas that could be optimized:

    - The check function is called multiple times within loops or conditions. This might slow down the program execution time, especially when dealing with large inputs.
    - There is unnecessary use of std::vector for storing parsed input.
    - The use of 'std::cin' and 'std::cout' for input and output can be slower compared to their C counterparts, 'scanf' and 'printf'.
    - The use of 'std::endl' to print newlines may cause unnecessary flushing of output buffers, making the output slower.

2. Optimization Strategy:
    - Instead of calling the check function multiple times, its result can be stored in a variable and used.
    - Instead of using std::vector, an array can be used to store parsed input.
    - Replace 'std::cin' and 'std::cout' with 'scanf' and 'printf' for faster input and output.
    - Replace 'std::endl' with '\n' to avoid unnecessary flushing of output buffers.

3. Step-by-Step Explanation:
    - Store the result of the check function in a variable: This would avoid multiple function calls, which can be expensive in terms of time, especially inside loops. Instead, we can call the function once, store its result in a variable, and use this variable whenever needed.
    - Replace std::vector with an array: Using an array would be more efficient in terms of memory as compared to using a std::vector. This is because a std::vector dynamically allocates memory, which can be expensive in terms of time and space.
    - Replace 'std::cin' and 'std::cout' with 'scanf' and 'printf': The C++ iostream functions are known to be slower compared to their C counterparts. Therefore, replacing 'std::cin' and 'std::cout' with 'scanf' and 'printf' can speed up the program.
    - Replace 'std::endl' with '\n': The 'std::endl' not only prints a newline but also flushes the output buffer. The unnecessary flushing of the output buffer can slow down the program. Therefore, replacing 'std::endl' with '\n' can speed up the program.

4. Optimized Code Block:
```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
struct S {
  ll y, m, d;
};
struct Ma {
  ll b, ka, t, w, ki;
};
int M[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
bool check(ll y) { return (y % 4 == 0 && (y % 100 != 0 || y % 400 == 0)); }
S M2S(ll b, ll ka, ll t, ll w, ll ki) {
  ka += b * 20;
  t += ka * 20;
  w += t * 18;
  ki += w * 20;
  S res;
  res.y = 2012, res.m = 12, res.d = 21 + ki;
  bool isLeap = check(res.y + 1); // Store the result of check function
  if (res.d <= 31)
    return res;
  while (res.d / (365 + isLeap))
    res.y++, res.d -= (365 + isLeap);
  if (res.d == 0)
    res.m--, res.d = M[res.m - 1] + (isLeap && res.m == 2);
  if (res.d <= 31)
    return res;
  res.y++, res.m = 1, res.d -= 31;
  while (res.d / (M[res.m - 1] + (isLeap && res.m == 2))) {
    res.d -= (M[res.m - 1] + (isLeap && res.m == 2));
    res.m++;
  }
  if (res.d == 0)
    res.m--, res.d = M[res.m - 1] + (isLeap && res.m == 2);
  return res;
}
Ma S2M(ll y, ll m, ll d) {
  y -= 2012;
  if (y)
    d += 10;
  else
    d = (d - 21);
  for (int i = 0; i < m - 1 && y; i++)
    d += (M[i] + (i == 1 && check(y + 2012)));
  y--;
  while (y > 0)
    d += (365 + check(y + 2012)), y--;
  Ma res;
  d %= 13 * 20 * 20 * 18 * 20;
  res.ki = d;
  res.w = res.ki / 20;
  res.ki %= 20;
  res.t = res.w / 18;
  res.w %= 18;
  res.ka = res.t / 20;
  res.t %= 20;
  res.b = res.ka / 20;
  res.ka %= 20;
  return res;
}
int main() {
  while (1) {
    char str[20];
    scanf("%s", str);
    if (strcmp(str, "#") == 0)
      break;
    int a[5], i = 0, num = 0, j = 0;
    while (str[i]) {
      if (str[i] == '.')
        a[j++] = num, num = 0;
      else
        num = num * 10 + str[i] - '0';
      i++;
    }
    a[j] = num;
    if (j == 4) {
      S ans = M2S(a[0], a[1], a[2], a[3], a[4]);
      printf("%lld.%lld.%lld\n", ans.y, ans.m, ans.d);
    } else {
      Ma ans = S2M(a[0], a[1], a[2]);
      printf("%lld.%lld.%lld.%lld.%lld\n", ans.b, ans.ka, ans.t, ans.w, ans.ki);
    }
  }
  return 0;
}
```