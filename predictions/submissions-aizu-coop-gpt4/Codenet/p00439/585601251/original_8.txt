Code Analysis:
This program calculates the maximum sum of a subarray of size 'k' from an array of integers. The program uses prefix sum technique to calculate the sum of subarray efficiently. The prefix sum of a given array is an array where the element at index 'i' is the sum of all elements from index 0 to 'i' in the given array. 

Optimization Strategy:
1. Data Structures: The program uses vector<long long> to store the prefix sum of the given array. This is an efficient use of data structure.

2. Redundant or unnecessary computations: There is no unnecessary computation in the code. The prefix sum is computed once and used for calculating the sum of subarray.

3. Loops or recursive calls: The code uses two loops, one for calculating the prefix sum and the other for finding the maximum sum of subarray. These loops cannot be further optimized.

4. Compiler optimizations: The code can be optimized using the following compiler optimizations:
    1. 'cin' and 'cout' can be made faster by using 'ios_base::sync_with_stdio(false)' and 'cin.tie(NULL)'.
    2. As the array ac is indexed from 1 to n, it's better to start the loop from 0 to n-1.

Step-by-step Explanation:
1. 'cin' and 'cout' can be made faster: 'cin' and 'cout' are slower than scanf and printf. To make them as fast as scanf and printf, we can include 'ios_base::sync_with_stdio(false)' and 'cin.tie(NULL)'. 'ios_base::sync_with_stdio(false)' unties 'cin' from 'cout'. Tied streams ensure that one stream is flushed automatically before each I/O operation on the other stream. 'cin.tie(NULL)' unties 'cin' from 'cout'. This can make the program run faster.

2. Start the loop from 0: As the array ac is indexed from 1 to n, it's better to start the loop from 0 to n-1. This is because arrays in C++ are zero-indexed, meaning the first element is at index 0, not 1. This can make the code more readable and avoid off-by-one errors.

Optimized Code Block:
```cpp
#include <algorithm>
#include <climits>
#include <iostream>
#include <vector>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, k;
  while (cin >> n >> k, n) {
    vector<long long> ac(n, 0);
    for (int i = 0; i < n; ++i) {
      cin >> ac[i];
      if (i > 0)
        ac[i] += ac[i - 1];
    }
    long long res = -LLONG_MAX;
    for (int i = k-1; i < n; ++i) {
      long long temp = ac[i];
      if(i >= k)
        temp -= ac[i - k];
      res = max(res, temp);
    }
    cout << res << endl;
  }
  return 0;
}
```
In the optimized code, the loops run from 0 to n-1, and 'cin' and 'cout' are made faster by using 'ios_base::sync_with_stdio(false)' and 'cin.tie(NULL)'. This makes the program run faster and makes the code more readable.