This C++ program implements a Graph class and uses Dijkstra's algorithm to find the shortest path from one node to all others in the graph. The input to the program is a graph with nodes and weighted edges.

There are several ways to optimize this code to improve its performance and memory usage:

1. **Use an adjacency list instead of an adjacency matrix**: The Graph class currently uses an adjacency matrix to represent the graph, which requires `O(n^2)` space. If the graph is sparse, i.e., the number of edges is much less than `n^2`, an adjacency list would be a more space-efficient representation. It would also speed up Dijkstra's algorithm, which iterates over the edges of the graph.

2. **Use a priority queue for Dijkstra's algorithm**: The current implementation of Dijkstra's algorithm has a time complexity of `O(n^2)`, because it uses a simple for-loop to find the unvisited node with the smallest distance. By using a priority queue, we can reduce the time complexity to `O((n + m) log n)`, where `n` is the number of nodes and `m` is the number of edges.

3. **Avoid dynamic memory allocation**: The Graph class currently uses dynamic memory allocation to create the adjacency matrix. This can be slow and error-prone. If the maximum number of nodes is known in advance, it would be more efficient to use a statically allocated array.

4. **Use std::vector instead of raw arrays**: The C++ standard library provides the std::vector class, which is a safer and more flexible alternative to raw arrays. It can be used to replace the raw arrays currently used to represent the adjacency matrix and the distance array.

5. **Enable compiler optimizations**: Most C++ compilers support various optimization flags, such as `-O2` or `-O3` for GCC and Clang, which can automatically optimize the code to some extent.

Here is the optimized code with these changes applied:

```cpp
#include <vector>
#include <queue>
#include <limits>
#include <cstdio>

using uint = unsigned int;

class Graph {
  struct Edge {
    uint node, weight;
  };
  const uint n_;
  std::vector<std::vector<Edge>> g_;
  const uint INFINIT;

public:
  Graph(uint n)
      : n_(n), g_(n), INFINIT(100000 * (n - 1) + 1) {}

  void add_edge(uint u, uint v, uint w) {
    g_[u].push_back({v, w});
  }

  void dijkstra(std::vector<uint>& dist) {
    dist.assign(n_, INFINIT);
    std::vector<bool> visited(n_, false);
    using pii = std::pair<uint, uint>;
    std::priority_queue<pii, std::vector<pii>, std::greater<>> pq;
    pq.push({0, 0});
    dist[0] = 0;
    while (!pq.empty()) {
      uint u = pq.top().second;
      pq.pop();
      if (visited[u])
        continue;
      visited[u] = true;
      for (const Edge& edge : g_[u]) {
        uint v = edge.node, w = edge.weight;
        if (dist[u] + w < dist[v]) {
          dist[v] = dist[u] + w;
          pq.push({dist[v], v});
        }
      }
    }
  }
};

int main() {
  uint n;
  std::scanf("%u", &n);
  Graph g(n);
  uint u, k, c, v;
  for (auto i = 0u; i < n; ++i) {
    std::scanf("%u %u", &u, &k);
    for (auto j = 0u; j < k; ++j) {
      std::scanf("%u %u", &c, &v);
      g.add_edge(u, c, v);
    }
  }
  std::vector<uint> dist;
  g.dijkstra(dist);
  for (auto i = 0u; i < n; ++i) {
    std::printf("%u %u\n", i, dist[i]);
  }
}
```

Note that the optimized code is slightly longer and more complex than the original code. This is a trade-off for the improved performance and memory usage. The time complexity of Dijkstra's algorithm has been reduced from `O(n^2)` to `O((n + m) log n)`, and the space complexity of the graph representation has been reduced from `O(n^2)` to `O(n + m)`, where `m` is the number of edges in the graph.