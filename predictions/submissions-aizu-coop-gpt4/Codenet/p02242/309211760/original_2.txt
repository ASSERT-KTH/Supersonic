This program is an implementation of Dijkstra's shortest path algorithm. It finds the shortest path in a graph from a source node to all other nodes.

Here are some optimization strategies for this program:

1. Use Priority Queue: The most significant enhancement we can make to this program is to use a priority queue to select the next node to visit instead of scanning all nodes linearly. This will reduce the time complexity from O(V^2) to O(V log V), where V is the number of vertices.

2. Use Vector Instead of Array: Using a vector instead of an array for the adjacency matrix would allow the program to handle a flexible number of nodes without wasting memory.

3. Avoid Global Variables: The adjacency matrix M and the number of vertices n are currently global variables. It's a good practice to pass these as parameters instead of making them global.

4. Use pair instead of two separate arrays: We are currently using two separate arrays for storing the minimum distance and color of each vertex. We can optimize this by using a single array of pairs.

5. Avoid unnecessary color changes: We change the color of a node to GRAY when we update its distance. But there is no need to change the color if the node is already GRAY.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <utility>
using namespace std;

static const int INFTY = (1 << 21);

void dijkstra(vector<vector<pair<int, int>>>& adj, int n) {
    vector<pair<int, int>> state(n, {INFTY, 0}); // distance and color
    state[0].first = 0;

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, 0});

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        if (state[u].second == 2)
            continue;

        state[u].second = 2;

        for (auto& edge : adj[u]) {
            int v = edge.first, w = edge.second;
            if (state[v].first > state[u].first + w) {
                state[v].first = state[u].first + w;
                if (state[v].second != 1) {
                    state[v].second = 1;
                    pq.push({state[v].first, v});
                }
            }
        }
    }

    for (int i = 0; i < n; i++)
        cout << i << " " << (state[i].first == INFTY ? -1 : state[i].first) << endl;
}

int main() {
    int n;
    cin >> n;
    vector<vector<pair<int, int>>> adj(n);
    int k, c, u, v;
    for (int i = 0; i < n; i++) {
        cin >> u >> k;
        for (int j = 0; j < k; j++) {
            cin >> v >> c;
            adj[u].push_back({v, c});
        }
    }
    dijkstra(adj, n);
    return 0;
}
```

The optimized version reduces the overall runtime of the program by using a priority queue to efficiently select the next node to visit. It also improves memory usage by using a vector for the adjacency list and storing the state of each node (distance and color) in a pair.