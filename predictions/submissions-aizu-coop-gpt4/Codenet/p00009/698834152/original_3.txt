1. Code Analysis:
The provided code is a prime number counting program. It generates prime numbers up to a predefined MAX, and then counts the number of primes up to a given input number 'n'. It uses the Sieve of Eratosthenes algorithm for generating prime numbers. The algorithm operates by iteratively marking the multiples of each prime number starting from 2. The numbers which are not marked in the process are prime.

2. Optimization Strategy:
   1. The outer loop iterates from 2 to MAX + 1. However, the inner loop can be optimized. We are marking multiples of 'i' as not_prime, but we don't need to start from 2. We can start from 'i' itself because the multiples of numbers less than 'i' would have already been marked in previous iterations.
   2. The loop for generating the prime numbers and the loop for counting the primes are separated. We can combine these two loops to reduce the number of iterations.
   3. The num_prime[] array is of int type which takes 4 bytes of memory for each element. Since we are not going to have more than MAX primes, we can change the type of this array to a smaller data type to reduce memory usage.

3. Step-by-Step Explanation:
   1. Optimize the inner loop: As explained above, we can start the inner loop from 'i' instead of 2. This reduces the number of unnecessary iterations and thus improves the performance.
   2. Combine the loops: We are separating the prime number generation and prime counting into two loops. However, we can count the primes while generating them to reduce the number of iterations.
   3. Change the array type: The num_prime[] array can be changed from int to short. This reduces the memory usage by half. The trade-off is that if MAX is too large, a short may not be able to hold the value. However, for MAX = 999999, a short is sufficient.

4. Optimized Code:

```cpp
#include <iostream>
#define MAX 999999
using namespace std;
short num_prime[MAX + 1];
bool not_prime_flag[MAX + 1];
int main() {
  num_prime[0] = num_prime[1] = 0;
  for (int i = 2; i < MAX + 1; ++i) {
    if (!not_prime_flag[i]) {
      for (int j = i; i * j < MAX + 1; ++j) {
        not_prime_flag[i * j] = true;
      }
    }
    num_prime[i] = num_prime[i - 1] + !not_prime_flag[i];
  }
  int n;
  while (cin >> n) {
    cout << num_prime[n] << endl;
  }
  return 0;
}
```
This optimized code performs the same functionality as the original code but with improved performance and reduced memory usage.