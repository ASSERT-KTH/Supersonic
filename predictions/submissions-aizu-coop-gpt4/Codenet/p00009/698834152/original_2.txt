The given C++ program is a variant of the Sieve of Eratosthenes algorithm for finding all prime numbers up to a given limit. It also stores the count of prime numbers up to each number in the array num_prime[]. It then reads numbers from input and prints the count of prime numbers up to that number. 

There are several ways to optimize this program:

1. **Code Analysis**:
  - The program uses an array of size MAX + 1 twice (for num_prime[] and not_prime_flag[]), which consumes a lot of memory.
  - The inner loop in the Sieve of Eratosthenes algorithm starts from 2, which results in redundant computations.
  
2. **Optimization Strategy**:
    1. **Redundant Computations**: In the Sieve of Eratosthenes algorithm, the inner loop can start from i*i instead of 2*i. As for any number 'n', if it is not a prime number, then it must be divisible by some number less than or equal to its square root. Therefore, we can start crossing out multiples from i*i.
    2. **Memory Usage**: We can reduce the memory usage by half by eliminating the array num_prime[]. Instead of storing the count of prime numbers up to each number, we can calculate the count on the fly when a number is read from input.

3. **Step-by-Step Explanation**:
    1. **Inner Loop Optimization**: This optimization reduces the total number of iterations by starting the inner loop from i*i. This way, all composite numbers will still be marked, but we won't iterate unnecessarily over smaller multiples of 'i' that have already been marked by previous prime numbers.
    2. **Memory Usage Optimization**: By eliminating the num_prime[] array and calculating the count of primes on the fly, we reduce the memory usage by half. The trade-off is a slightly longer time to process each input number, as we now have to count the primes up to that number in the not_prime_flag[] array. But given the size of the arrays (999999 elements), the memory saving is significant and can outweigh the slight increase in processing time.

4. **Optimized Code Block**:

```c++
#include <iostream>
#define MAX 999999
using namespace std;
bool not_prime_flag[MAX + 1];

int main() {
  int n;
  
  // Sieve algorithm with optimized inner loop.
  for (int i = 2; i * i <= MAX; ++i) {
    if (!not_prime_flag[i]) {
      for (int j = i * i; j <= MAX; j += i) {
        not_prime_flag[j] = true;
      }
    }
  }
  
  // Calculate count of primes for each input number.
  while (cin >> n) {
    int count = 0;
    for (int i = 2; i <= n; ++i) {
      if (!not_prime_flag[i]) {
        ++count;
      }
    }
    cout << count << endl;
  }
  
  return 0;
}
```

Note: The optimized version of the code may have a slightly increased running time for each input number, especially for larger numbers. This is a trade-off for significantly reduced memory usage. If the program is expected to read a large number of input numbers, then it might be worth considering a hybrid approach where the count of primes is pre-calculated and stored up to a certain limit, and calculated on the fly only for numbers above that limit. This would strike a balance between memory usage and processing time.