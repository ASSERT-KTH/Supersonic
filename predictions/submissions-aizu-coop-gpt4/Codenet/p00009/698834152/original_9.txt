1. Code Analysis:
The given code is implementing the Sieve of Eratosthenes algorithm to find all prime numbers less than or equal to a given number `MAX`. This algorithm works by iterating from 2 to `MAX` and crossing out multiples of each number. This is a good algorithm for finding primes, but the implementation can be optimized in several ways.

2. Optimization Strategy:
   1. The loop that marks multiples of `i` as non-prime starts from `2 * i`, but it can start from `i * i` since all smaller multiples of `i` would have already been marked non-prime by previous prime numbers.
   2. Two separate arrays, `num_prime` and `not_prime_flag`, are being used where one could suffice. This is inefficient memory usage.
   3. The current code checks the `not_prime_flag` for every number from 2 to `MAX`, even for non-prime numbers. This can be avoided by only checking for prime numbers.
   4. The input/output operations can be optimized using stdio functions instead of iostream functions.

3. Step-by-Step Explanation:
   1. Changing the inner loop to start from `i * i` instead of `2 * i` improves performance because it avoids redundant computations. All non-prime numbers less than `i * i` would have already been marked non-prime by previous prime numbers. 
   2. We can combine the two arrays into one to reduce memory usage. We can use the `num_prime` array to store the prime number counts and use negative values to mark non-prime numbers. This reduces the memory usage by half.
   3. By checking the `not_prime_flag` only for prime numbers, we can avoid unnecessary computations, improving the performance.
   4. Using stdio functions instead of iostream functions for input/output operations can improve performance because they are less computationally intensive.

4. Optimized Code Block:
```c++
#include <cstdio>
#define MAX 999999

// We will use positive values to store prime number counts and negative values to mark non-prime numbers.
int num_prime[MAX + 1];

int main() {
  num_prime[2] = 1;
  for (int i = 2; i * i <= MAX; ++i) {
    if (num_prime[i] >= 0) {
      for (int j = i * i; j <= MAX; j += i) {
        num_prime[j] = -1;
      }
    }
    if (i < MAX) {
      num_prime[i + 1] = num_prime[i] + (num_prime[i + 1] >= 0 ? 1 : 0);
    }
  }
  int n;
  while (scanf("%d", &n) != EOF) {
    printf("%d\n", num_prime[n]);
  }
  return 0;
}
```
This version of the program performs the same functionality as the original but with improvements in both performance and memory usage.