This C++ program uses the Sieve of Eratosthenes to calculate the count of prime numbers less than or equal to a given number. Here are the problems with the current implementation:

1. The outer loop runs for all numbers up to MAX. For each number, it checks if it is prime. If so, it marks all multiples of that number as non-prime. This is inefficient as it checks multiples of all numbers, even those that have already been marked as non-prime.

2. The inner loop starts from 2. This is unnecessary as all multiples of 2 less than the current number have already been checked.

3. It uses both array `num_prime` and `not_prime_flag` which is unnecessary and leads to more memory usage.

Optimization Strategy:

1. Using a more efficient data structure: We can use a vector instead of an array to store the prime numbers. This will allow dynamic resizing and efficient memory usage.

2. Redundant computations: The outer loop should only run for prime numbers, not all numbers. The inner loop should begin from the square of the current prime number as all smaller multiples would have already been checked.

3. Optimizing loops: We can optimize the outer loop by running it only till the square root of MAX. This is because a larger factor of a number must be a multiple of a smaller factor that has already been checked.

4. Compiler optimizations: We can use the `-O2` or `-O3` flag with g++ compiler to enable more optimizations at the compiler level.

Optimized Code Block:
```cpp
#include <iostream>
#include <vector>
#include <cmath>
#define MAX 999999
using namespace std;
vector <bool> is_prime(MAX + 1, true);
vector <int> primes;
int main() {
  is_prime[0] = is_prime[1] = false;
  for (int i = 2; i <= sqrt(MAX); ++i) {
    if (is_prime[i]) {
      for (int j = i * i; j <= MAX; j += i)
        is_prime[j] = false;
    }
  }
  for (int i = 2; i <= MAX; ++i)
    if (is_prime[i])
      primes.push_back(i);

  int n;
  while (cin >> n) {
    auto it = upper_bound(primes.begin(), primes.end(), n);
    cout << distance(primes.begin(), it) << endl;
  }
  return 0;
}
```
Here, we are using a vector `is_prime` to store whether a number is prime or not and another vector `primes` to store all prime numbers up to MAX. This optimized code removes redundant computations and improves memory usage by eliminating the unnecessary array `num_prime`. 

The `upper_bound` function is used to find the count of prime numbers less than or equal to `n`. This function returns an iterator pointing to the first element that is greater than `n`, so the distance from the beginning of the vector to this iterator gives us the count of prime numbers less than or equal to `n`.