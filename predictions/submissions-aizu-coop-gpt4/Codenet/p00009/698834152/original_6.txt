1. Code Analysis:
   The provided code is an implementation of the Sieve of Eratosthenes algorithm, which is used to find all prime numbers up to a given limit. It's generally an efficient algorithm for this purpose but there are still several potential areas for optimization in this implementation.

2. Optimization Strategy:
    1. The inner loop is performing redundant computations. We can start the inner loop from i*i instead of 2*i. If a number k is not a prime number, then it must have a factor less than sqrt(k), so we don't need to check numbers above i*i.
    2. The code is storing prime numbers count in an array num_prime[]. We can eliminate this array and use a single variable to store count of prime numbers. This will reduce the space complexity.
    3. The code is using bool array not_prime_flag[] of size MAX+1 which is very large. This could be a potential bottleneck if memory is limited. We can use a bitset instead of bool array which will reduce memory usage by approximately 8 times.
    4. We can make use of compiler optimization flags such as -O3, which enables all optimization flags including those that increase the size of the code. This does not require any change in the code but can significantly improve its performance.

3. Step-By-Step Explanation:
    1. Starting the inner loop from i*i instead of 2*i will reduce the number of iterations. This will improve the time complexity of the code.
    2. By eliminating the array num_prime[] and using a single variable to store the count of prime numbers, we can reduce the space complexity of the code.
    3. Replacing the bool array not_prime_flag[] with a bitset will reduce the memory usage by approximately 8 times. This can be crucial if memory is limited.
    4. Making use of compiler optimization flags such as -O3 can significantly improve performance without requiring any changes in the code.

    These optimizations have the trade-off of slightly increasing the code complexity. However, the performance gain from these optimizations should outweigh this increased complexity.

4. Optimized Code Block:

```cpp
#include <iostream>
#include <bitset>
#define MAX 999999
using namespace std;
bitset<MAX + 1> not_prime_flag;
int main() {
  int n;
  int num_prime = 0;
  for (int i = 2; i * i <= MAX; ++i) {
    if (!not_prime_flag[i]) {
      for (int j = i * i; j <= MAX; j += i) {
        not_prime_flag[j] = true;
      }
    }
    if (!not_prime_flag[i]) num_prime++;
  }
  while (cin >> n) {
    cout << num_prime << endl;
  }
  return 0;
}
```
In this optimized code, the inner loop starts from i*i and increments by i each time, reducing unnecessary iterations. We replaced the bool array with a bitset to reduce memory usage and removed the array num_prime[], instead using a single variable to store the count of prime numbers, reducing space complexity.