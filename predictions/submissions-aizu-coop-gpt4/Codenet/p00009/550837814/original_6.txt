The given code aims to compute the count of prime numbers less than or equal to a given number 'n'. It uses the Sieve of Eratosthenes algorithm to mark composite numbers in the array and then computes a prefix sum to store the count of prime numbers less than or equal to index 'i'.

Code Analysis:

1. The code initializes an array of size 1,000,000 with all elements as 1, assuming all numbers are prime.

2. Then it starts with the smallest prime number 2 and marks all its multiples as 0, indicating they are not prime. This step is repeated for all numbers up to the square root of 1,000,000.

3. After this, it calculates a prefix sum of the array.

4. Finally, it reads input numbers 'n' from the user till EOF and for each 'n', it prints the count of prime numbers less than or equal to 'n'.

Optimization Strategy:

1. Inefficient Data Structures: The 'num' array is a large static array of integers. This can be replaced with a dynamic array or a vector. However, in this case, using a static array might be more efficient due to the size of the array and the simplicity of the operations.

2. Redundant Computations: The square root of 1,000,000 is computed in each iteration of the second loop. This can be computed once and stored in a variable.

3. Loops and Recursive Calls: The inner loop in the Sieve of Eratosthenes can start from '2*i' instead of 'i*i' because for any 'k<i', multiples of 'k' would have already been marked.

4. Compiler Optimizations: Compiler optimizations such as -O2 or -O3 can be used for further optimization.

Step-by-Step Explanation:

1. Compute and Store Square Root: We can calculate the square root of 1,000,000 once and store it in a variable. This will eliminate the need to compute it in every iteration of the loop.

    ```
    int limit = sqrt(1000000);
    for (i = 2; i < limit; i++) {
    ```

2. Change the start of the Inner Loop: We can start the inner loop from '2*i' instead of 'i*i'. This way we avoid unnecessary iterations.

    ```
    for (j = 2 * i; j < 1000000; j += i)
    ```

3. Use Compiler Optimizations: We can use compiler optimizations such as -O2 or -O3 for further optimization.

Optimized Code Block:

```c
#include <math.h>
#include <stdio.h>

int main() {
  int i, j;
  int n;
  int num[1000000];
  for (i = 0; i < 1000000; i++) {
    num[i] = 1;
  }
  num[0] = num[1] = 0;
  int limit = sqrt(1000000);
  for (i = 2; i < limit; i++) {
    if (num[i] == 1) {
      for (j = 2 * i; j < 1000000; j += i)
        num[j] = 0;
    }
  }
  for (i = 1; i < 1000000 - 1; i++) {
    num[i + 1] += num[i];
  }
  while (scanf("%d", &n) != EOF) {
    printf("%d\n", num[n]);
  }
  return 0;
}
```

Make sure to compile the code with optimization flags such as -O2 or -O3 for additional performance improvements.