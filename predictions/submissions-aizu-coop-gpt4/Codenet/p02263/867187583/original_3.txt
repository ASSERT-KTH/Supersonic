1. Code Analysis:
The code is a basic implementation of a stack data structure and a simple calculator that uses the stack to perform arithmetic operations. Each operation (addition, subtraction, multiplication) pops two elements from the stack, performs the operation, and pushes the result back on the stack. The final result is obtained by popping the topmost element from the stack.

2. Optimization Strategy:
    1. Use `std::stack<int>` from the C++ Standard Library instead of a custom stack implementation.
    2. Avoid using `scanf` and `printf`; use `std::cin` and `std::cout` instead.
    3. Use `std::string` for string operations instead of C-style strings.
    4. Use `std::stoi` instead of `atoi` for string to integer conversion.
    5. Combine similar operations into a lambda function to avoid code redundancy.

3. Step-by-Step Explanation:
    1. `std::stack<int>` from the C++ Standard Library provides a well-optimized stack data structure. It eliminates the need for manual management of the stack size and index, reducing the chance for errors and improving speed.
    2. `std::cin` and `std::cout` are generally safer and more efficient than their C counterparts.
    3. `std::string` is safer and easier to use than C-style strings, and it provides better performance for string operations.
    4. `std::stoi` is safer than `atoi` as it has error handling, and it's more consistent with C++ style code.
    5. The '+' and '-' operations are very similar, so they can be combined into a single lambda function. This reduces code redundancy and improves readability.

4. Optimized Code Block:

Here's the optimized code:

```cpp
#include <iostream>
#include <stack>
#include <string>

int main() {
  std::stack<int> stack;
  std::string s;
  auto calculate = [&](char op) {
    int rhs = stack.top(); 
    stack.pop();
    int lhs = stack.top(); 
    stack.pop();
    switch (op) {
      case '+': stack.push(lhs + rhs); break;
      case '-': stack.push(lhs - rhs); break;
      case '*': stack.push(lhs * rhs); break;
    }
  };
  while (std::cin >> s) {
    if (s[0] == '+') {
      calculate('+');
    } else if (s[0] == '-') {
      calculate('-');
    } else if (s[0] == '*') {
      calculate('*');
    } else {
      stack.push(std::stoi(s));
    }
  }
  std::cout << stack.top() << std::endl;
  return 0;
}
```

In the optimized code, we use `std::stack` for the stack implementation and `std::cin` and `std::cout` for input/output. We also use a lambda function `calculate` to perform the arithmetic operations, reducing code redundancy. The code is now more efficient and easier to maintain.