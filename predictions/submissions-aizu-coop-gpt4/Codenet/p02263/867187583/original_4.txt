Here are some potential improvements to the code.

1. Move expensive operations out of loops: In the main loop, the `atoi` function is called for every iteration. This function is expensive and can be avoided by comparing the first character of the string 's' with a digit. If it's a digit, we can use a more efficient way to convert the string to an integer.

2. Replace vector with array: The Stack class uses a vector which is not efficient for this use case. The size of the stack is known in advance and does not change during execution, so a fixed size array is more suitable. This will remove the overhead associated with vectors.

3. Inline small functions: Functions like `isEmpty` and `isFull` are small and called frequently. Marking these functions as inline can potentially improve performance by avoiding the overhead of function calls.

4. Avoid unnecessary operations: In the `pop` function, the variable `top_` is first decremented and then incremented again when accessing the array. This can be simplified by first accessing the array and then decrementing the variable.

5. Use `switch` instead of multiple `if-else` statements: In the main loop, the `if-else` statements can be replaced with a `switch` statement. This can potentially improve performance as the `switch` statement is usually implemented with a jump table which is faster than multiple `if-else` comparisons.

Here is the optimized code:

```cpp
#include <algorithm>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

using namespace std;

class Stack {
public:
  Stack(int n) : top_(0) {};
  inline bool isEmpty() { return top_ == 0; }
  inline bool isFull() { return top_ == 100; }
  void push(int x) {
    if (!isFull()) {
      s_[top_++] = x;
    }
  }
  int pop() {
    if (!isEmpty()) {
      return s_[--top_];
    }
    return -1;
  }

private:
  int s_[100];
  size_t top_;
};

int main() {
  char s[1000];
  Stack stack(110);
  while (scanf("%s", s) != EOF) {
    switch (s[0]) {
    case '+': {
      int rhs = stack.pop();
      int lhs = stack.pop();
      stack.push(lhs + rhs);
      break;
    }
    case '-': {
      int rhs = stack.pop();
      int lhs = stack.pop();
      stack.push(lhs - rhs);
      break;
    }
    case '*': {
      int rhs = stack.pop();
      int lhs = stack.pop();
      stack.push(lhs * rhs);
      break;
    }
    default: {
      int num = 0;
      for (int i = 0; s[i] != '\0'; ++i) {
        num = num * 10 + (s[i] - '0');
      }
      stack.push(num);
      break;
    }
    }
  }
  printf("%d\n", stack.pop());
  return 0;
}
```