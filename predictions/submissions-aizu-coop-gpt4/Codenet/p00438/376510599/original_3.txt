The provided C++ code seems to be solving a grid-based pathfinding problem. It computes the number of ways to reach the end of the grid from the start without going through certain blocked cells. The main performance issue is that it repeatedly checks for blocked cells (-1) even in cells where it has already been established that they are blocked. 

Here's the optimization strategy:

1. Eliminate redundant computations: The code checks whether a cell is blocked several times. We can reduce this by storing this information separately and reusing it.

2. Use efficient data structures: The 2D array `way` is used to store both the number of ways to reach a cell and whether the cell is blocked. This can be separated into two arrays: one for storing the number of ways and another for storing whether the cell is blocked.

3. Compiler optimizations: We can instruct the compiler to optimize the code for speed using the `-O2` flag.

The optimized code is as follows:

```C++
#include <cstdio>
#define MAX_SIZE 17
int main() {
  int a, b, n, t1, t2;
  int ways[MAX_SIZE][MAX_SIZE];
  bool blocked[MAX_SIZE][MAX_SIZE];
  
  while (scanf("%d %d", &a, &b), a || b) {
    scanf("%d", &n);
    
    // Initialize the ways and blocked arrays.
    for (int i = 1; i <= b; i++) {
      for (int j = 1; j <= a; j++) {
        ways[i][j] = 0;
        blocked[i][j] = false;
      }
    }
    
    // Read blocked cells and mark them in the blocked array.
    for (int i = 0; i < n; i++) {
      scanf("%d %d", &t1, &t2);
      blocked[t2][t1] = true;
    }
    
    // Calculate number of ways for the first row until a blocked cell is encountered.
    for (int i = 1; i <= a; i++) {
      if (blocked[1][i])
        break;
      ways[1][i] = 1;
    }
    
    // Calculate number of ways for the first column until a blocked cell is encountered.
    for (int i = 1; i <= b; i++) {
      if (blocked[i][1])
        break;
      ways[i][1] = 1;
    }
    
    // Calculate number of ways for the rest of the cells.
    for (int i = 2; i <= b; i++) {
      for (int j = 2; j <= a; j++) {
        if (!blocked[i][j]) {
          ways[i][j] = ways[i][j - 1] + ways[i - 1][j];
        }
      }
    }
    
    printf("%d\n", ways[b][a]);
  }
  
  return 0;
}
```

In this optimized code, we've separated the `way` array into `ways` and `blocked` arrays. This makes the code easier to understand and maintain, and it also eliminates the need to repeatedly check for blocked cells. This should improve the performance of the code.

Note that the `-O2` compiler flag is set outside of the code, typically in the build settings or the command line when compiling the code. For example, `g++ -O2 myprogram.cpp`.