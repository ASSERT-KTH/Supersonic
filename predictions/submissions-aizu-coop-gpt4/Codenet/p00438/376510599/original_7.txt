The given program calculates the number of possible ways to reach from the top-left corner to the bottom-right corner of a 2D matrix. The size of the matrix and the locations of the obstacles (where you can't step) are given as inputs. The main focus of the program is to use dynamic programming to calculate the number of ways to reach each cell in the matrix.

Code Analysis:
1. The 2D matrix "way" is declared and initialized to 0 using a nested loop. This could be inefficient if a and b are large.
2. The program breaks the loop if it finds an obstacle, which may lead to incorrect calculation of ways in some cases.
3. The calculation of ways for each cell in the matrix involves redundant checks for obstacles.

Optimization Strategy:
1. Use memset() to initialize the 2D matrix to 0. As memset() works at byte level, it's generally faster.
2. Instead of breaking the loop at the first obstacle, continue the loop but set the ways to zero.
3. To avoid redundant checks for obstacles, you can calculate the ways directly using the formula: way[i][j] = way[i][j - 1] + way[i - 1][j] (if way[i][j] != -1).

Step-by-Step Explanation:
1. Use memset() to initialize the 2D matrix to 0: memset() is a faster way to initialize an array to a constant value. It works at byte level and sets each byte of the block to the specified value.
2. Do not break the loop at the first obstacle: If there's an obstacle at cell (i,j), we can't reach this cell, but we can still reach other cells in the same row or column. So, instead of breaking the loop, we should continue the loop and set way[i][j] = 0.
3. Avoid redundant checks for obstacles: In the current code, we check if the cell (i,j-1) and cell (i-1,j) are obstacles. However, we don't need to do these checks as we have already set way[i][j] = 0 for obstacles. So, we can directly calculate the ways as way[i][j] = way[i][j - 1] + way[i - 1][j] (if way[i][j] != -1).

Optimized Code Block:

```cpp
#include <cstdio>
#include <cstring>
int main() {
  int a, b, n, t1, t2, way[17][17];
  while (scanf("%d %d", &a, &b), a || b) {
    scanf("%d", &n);
    memset(way, 0, sizeof(way)); // use memset() to initialize array to 0
    for (int i = 0; i < n; i++)
      scanf("%d %d", &t1, &t2), way[t2][t1] = -1;
    for (int i = 1; i <= a; i++) {
      if (way[1][i] == -1)
        way[1][i] = 0; // do not break, but set to 0
      else
        way[1][i] = 1;
    }
    for (int i = 1; i <= b; i++) {
      if (way[i][1] == -1)
        way[i][1] = 0; // do not break, but set to 0
      else
        way[i][1] = 1;
    }
    for (int i = 2; i <= b; i++) {
      for (int j = 2; j <= a; j++) {
        if (way[i][j] != -1)
          way[i][j] = way[i][j - 1] + way[i - 1][j]; // calculate ways directly
      }
    }
    printf("%d\n", way[b][a]);
  }
  return 0;
}
```

This optimized code should run faster and use memory more efficiently. The trade-off is that it may be less intuitive to understand due to the direct calculation of ways and the use of memset().