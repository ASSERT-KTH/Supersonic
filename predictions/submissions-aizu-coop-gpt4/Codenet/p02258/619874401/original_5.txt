1. Code Analysis: 
The given code calculates the maximum difference in an array of integers where the greater integer comes after the smaller integer. This is done by maintaining two variables, maxv and minv, which keep track of the maximum difference and minimum value respectively. For each element in the array, the code updates maxv with the maximum of the current maxv and the difference between the current element and minv. It then updates minv with the minimum between minv and the current element.

2. Optimization Strategy:
After analyzing the code, it's clear that the code is already well optimized in terms of time complexity, which is O(n). However, there is a small room for improvement in terms of memory usage.

    1. Remove the unnecessary MAX constant and dynamic allocation of the array R. Instead, we will use a vector which dynamically resizes itself as per the input.

3. Step-by-Step Explanation:

    1. Removal of the MAX constant and using a vector: The current code uses a statically allocated array of size MAX = 200000. This means that regardless of the input size, the memory allocated will always be for 200000 integers. This is inefficient in terms of memory usage. Instead, we can use a vector which dynamically resizes itself according to the number of inputs. This will save a significant amount of memory when the number of inputs is less than MAX.

4. Optimized Code Block:

```c++
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

int main() {
  int n;
  cin >> n;
  
  // Use a vector instead of a statically allocated array
  vector<int> R(n);
  
  for (int i = 0; i < n; i++)
    cin >> R[i];
  
  int maxv = R[1] - R[0];
  int minv = R[0];
  
  for (int i = 1; i < n; i++) {
    maxv = max(maxv, R[i] - minv);
    minv = min(minv, R[i]);
  }
  
  cout << maxv << endl;
  
  return 0;
}
```

In this optimized code, the functionality and output remain the same as in the original program. The only change is the replacement of the static array with a vector for efficient memory usage.