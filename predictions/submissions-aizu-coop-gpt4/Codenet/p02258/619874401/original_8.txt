1. Code Analysis: 

The code is fairly straightforward. It reads from standard input an array of integers, calculates the maximum difference between any two values (in order), and prints this value to standard output.

The performance bottlenecks in this code are minimal as it already operates with O(n) time complexity, which is optimal for this problem. However, there are a few minor improvements that can be made:

- Instead of using an array of size `MAX` to store the input, we could use a dynamic container like `std::vector` that will only consume the amount of memory needed.

- The use of `std::cin` and `std::cout` for input and output can be slow due to synchronization with the C standard streams. This can be disabled.

2. Optimization Strategy: 

A. Use `std::vector` instead of arrays: This will prevent the allocation of a large chunk of memory that might not be fully utilized.

B. Disable synchronization of C++ and C standard streams: This will improve the speed of `std::cin` and `std::cout`.

3. Step-by-Step Explanation:

A. Switch to `std::vector`: Instead of declaring `R` as an array of size `MAX`, declare it as a `std::vector<int>`. Then, resize it to `n` after reading the value of `n`. This ensures that we only allocate the memory that we need.

B. Disable stream synchronization: Add `std::ios_base::sync_with_stdio(false);` before any I/O operation. This disables the synchronization and makes I/O operations faster. However, note that after doing this, you should not mix `std::cin`/`std::cout` and `scanf`/`printf` in the same program.

4. Optimized Code Block:

```C++
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  int n;
  cin >> n;
  vector<int> R(n);
  for (int i = 0; i < n; i++)
    cin >> R[i];
  int maxv = R[1] - R[0];
  int minv = R[0];
  for (int i = 1; i < n; i++) {
    maxv = max(maxv, R[i] - minv);
    minv = min(minv, R[i]);
  }
  cout << maxv << endl;
  return 0;
}
```
This version of the code retains the same functionality and output as the original, but with improved memory usage and potentially faster I/O operations.