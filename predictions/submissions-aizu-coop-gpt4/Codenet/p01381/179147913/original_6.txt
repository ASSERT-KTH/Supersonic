The provided code block has several areas that can be improved for better performance. Here are the identified bottlenecks:

1. Dynamic array allocation: C++ doesn't support variable length arrays (VLAs) as a language feature. It's a feature from C99 that some C++ compilers support as an extension. It is better to use `std::vector` in C++.

2. Redundant computations: The calculations `(p[j] + i) % n + 1` and `(p[j + 1] + i) % n + 1` in the inner loop are computed multiple times, even when the values of `p[j]` and `p[j + 1]` do not change within the loop iterations.

3. Mixed use of C and C++ IO: The code uses `cin` and `printf`, which are from C++ and C respectively. It's better to stick with one for consistency and possibly better performance.

Optimization strategy:

1. Replace the dynamic array with a `std::vector`.

2. Compute the values `(p[j] + i) % n + 1` and `(p[j + 1] + i) % n + 1` once per iteration and store them in temporary variables.

3. Use `std::cout` instead of `printf` for consistency.

Here's the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  int n, k;
  while (cin >> n >> k) {
    if (n / 2 < k) {
      cout << "-1\n";
      continue;
    }
    vector<int> p(n + 2);
    p[0] = 0;
    for (int i = 1; i < n; i += 2) {
      p[i] = i / 2 + 1;
      p[i + 1] = n - p[i];
    }
    for (int i = 0; i < k; i++) {
      if (i != 0)
        cout << "\n";
      for (int j = 0; j < n - 1; j++) {
        int a = (p[j] + i) % n + 1;
        int b = (p[j + 1] + i) % n + 1;
        cout << a << " " << b << "\n";
      }
    }
  }
  return 0;
}
```
This optimized code provides the same functionality as the original but with better performance and more efficient memory usage. The use of `std::vector` instead of C-style arrays provides safer and easier memory management. The use of temporary variables reduces the number of computations, and using only `std::cout` for output provides a more consistent style.