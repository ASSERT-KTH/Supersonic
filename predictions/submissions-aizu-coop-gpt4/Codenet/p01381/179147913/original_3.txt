Code Analysis:

The given code reads two integers 'n' and 'k' from standard input in a loop. If 'n/2' is less than 'k', it prints "-1" and continues to the next iteration. Otherwise, it performs some calculations on an array, 'p', of size 'n+2'. For every pair of consecutive elements in the array, it calculates two numbers 'a' and 'b' and prints them 'k' times.

Potential performance bottlenecks and inefficient memory usage:

1. Variable length array: The code uses a variable length array 'p' which is not a standard C++ feature and can lead to inefficient memory usage.

2. Redundant computations: The expressions '(p[j] + i) % n + 1' and '(p[j + 1] + i) % n + 1' are calculated 'k' times, but they yield the same results in every iteration.

3. Inefficient loops: The nested loop structure can be inefficient, especially when 'n' and 'k' are large.

Optimization Strategy:

1. Use a vector instead of a variable length array. This is not only a standard C++ feature but also allows for better memory management.

2. Calculate the expressions '(p[j] + i) % n + 1' and '(p[j + 1] + i) % n + 1' once and store the results in a vector. This will eliminate redundant computations.

3. Unroll the inner loop by a factor of 2. This will reduce the loop overhead and potentially allow for better CPU utilization due to parallel execution of instructions.

4. Use '\n' instead of std::endl for printing newlines. This avoids the unnecessary flush of the output stream.

Optimized Code Block:

```
#include <cstdio>
#include <iostream>
#include <vector>
using namespace std;
int main() {
  int n, k;
  while (cin >> n >> k) {
    if (n / 2 < k) {
      printf("-1\n");
      continue;
    }
    vector<int> p(n + 2);
    p[0] = 0;
    for (int i = 1; i < n; i += 2) {
      p[i] = i / 2 + 1;
      p[i + 1] = n - p[i];
    }
    vector<pair<int, int>> results(n - 1);
    for (int i = 0; i < n - 1; i++) {
      int a = (p[i] + i) % n + 1;
      int b = (p[i + 1] + i) % n + 1;
      results[i] = make_pair(a, b);
    }
    for (int i = 0; i < k; i++) {
      if (i != 0)
        printf("\n");
      for (int j = 0; j < n - 1; j += 2) {
        printf("%d %d\n", results[j].first, results[j].second);
        if (j + 1 < n - 1)
          printf("%d %d\n", results[j + 1].first, results[j + 1].second);
      }
    }
  }
}
```

This optimized code block reduces redundant computations, uses more efficient data structures, unrolls the inner loop, and uses a more efficient way to print newlines. As a result, it is expected to run faster and use memory more efficiently than the original code.