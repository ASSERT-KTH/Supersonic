Code Analysis:
The given code reads four integers from input until it gets zero as the first number. It then prints 110,000 parentheses, followed by the sum of the four numbers.

Optimization Strategy:
1. Input/Output operations: The most noticeable part of the code is the loop that calls putchar 110,000 times. This is a part where optimization is needed.

2. Unnecessary computations: There is no unnecessary computation in the code.

3. Loops: The loop that prints parentheses can be optimized.

4. Compiler optimizations: Using flag -O3 could make the compiler optimize the code as much as it can.

Step-by-Step Explanation:
1. The loop that prints parentheses can be replaced by a single printf statement. The advantage of this is that printf can handle the output in larger chunks, which is more efficient than putchar's one-character-at-a-time approach. The trade-off is a slightly more complex format string, but the increased performance is worth it.

2. We will use flag -O3 during compilation to let the compiler optimize the code as much as it can.

Optimized Code Block:

```c
#include <stdio.h>

int main() {
  int a[4];
  char parentheses[110001]; // array to hold parentheses
  memset(parentheses, '(', 110000); // fill the array with '('
  parentheses[110000] = '\0'; // null-terminate the string

  while (1) {
    for (int i = 0; i < 4; ++i) {
      scanf("%d", &a[i]);
    }
    if (a[0] == 0) {
      break;
    }
    printf("%s", parentheses); // print all parentheses at once
    printf("%d+%d+%d+%d\n", a[0], a[1], a[2], a[3]);
  }
}
```

Note: To compile the optimized code, use the -O3 flag: `gcc -O3 code.c`