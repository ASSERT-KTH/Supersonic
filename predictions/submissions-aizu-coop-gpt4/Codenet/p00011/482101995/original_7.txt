1. Code Analysis:
The given C++ program reads a number `w` representing the width and fills a vector `StartingPoint` with numbers from 1 to `w`. Then, it reads another number `n` representing the number of horizontal lines. For each horizontal line, it swaps two elements in the `StartingPoint` vector. Finally, it prints the elements of the `StartingPoint` vector.

A potential performance bottleneck in this code is the use of `std::vector<int>` for `StartingPoint`. Vectors are dynamic arrays, and they excel in situations where the size of the array isn't known at compile time or can change over the course of the program's execution. However, in this case, the size of the vector is known at compile time (it's `w`), so a std::array could be used instead.

2. Optimization Strategy:
   1. Replace the std::vector with a std::array.
   2. Use std::ios::sync_with_stdio to disable synchronization with C's stdio, which can make iostream faster.
   3. Replace endl with '\n'. The std::endl forces a flush operation, which can be expensive in terms of performance.

3. Step-by-Step Explanation:
   1. Changing std::vector to std::array: std::array is a container that encapsulates fixed-size arrays. It doesn't have the overhead of dynamic allocation and deallocation.
   2. Disabling synchronization with C's stdio: This can make iostream faster because it avoids unnecessary overhead.
   3. Replacing endl with '\n': Avoiding the flush operation can improve performance because it reduces unnecessary I/O operations.

4. Optimized Code Block:

```cpp
#include <iostream>
#include <array>
using namespace std;
struct THorizonalLine {
  int Left;
  int Right;
};
int main() {
  ios::sync_with_stdio(false); // disable synchronization with C's stdio
  int w;
  cin >> w;
  int n;
  cin >> n;
  array<int, 10000> StartingPoint; // replace vector with array
  for (int i = 0; i < w; i++) {
    StartingPoint[i] = i + 1;
  }
  for (int i = 0; i < n; i++) {
    THorizonalLine HorizonalLine;
    char Dummy;
    cin >> HorizonalLine.Left >> Dummy >> HorizonalLine.Right;
    swap(StartingPoint[HorizonalLine.Left - 1],
         StartingPoint[HorizonalLine.Right - 1]);
  }
  for (int i = 0; i < w; i++) {
    cout << StartingPoint[i] << '\n'; // replace endl with '\n'
  }
  return 0;
}
```
Note: The maximum size of the array is set to 10000 in this case. If the maximum size is different, you should adjust it accordingly.