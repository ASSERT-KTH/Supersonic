1. Code Analysis:
The code implements the Bellman-Ford algorithm which is used for finding the shortest path between a starting node and all other nodes in a graph. The time complexity of this algorithm is O(V*E), where V is the number of vertices and E is the number of edges in the graph. This is because every edge is relaxed V times.

The main potential performance bottlenecks here are:
- The use of vector edges which can be costly in terms of memory and time when frequently resized.
- The recomputation of the shortest paths from every vertex which is unnecessary.

2. Optimization Strategy:
    1. Use an array instead of a vector for storing the edges. This will reduce memory usage and also the time taken for resizing the vector.
    2. Do not recompute the shortest paths from every vertex. Once the shortest paths from the start vertex to all other vertices are computed, they can be used for subsequent vertices.

3. Step-by-Step Explanation:
    1. Array instead of vector: Vectors in C++ are dynamic arrays that resize as we keep adding elements to them. This resizing operation can be costly in terms of time. Moreover, they also consume more memory. So, we will use an array instead of a vector to store the edges.
    2. Avoiding recomputation: In the current implementation, the BellmanFord function is called for every vertex. This results in recomputation of the shortest paths from every vertex. But once the shortest paths from the start vertex to all other vertices are computed, they can be used for subsequent vertices. We will modify the code to compute the shortest paths only once.

4. Optimized Code Block:
```cpp
#include <iostream>
#include <string>
#include <limits.h>
#define MAX 100000
using namespace std;
struct edge {
  int s, t, d;
};
edge edges[MAX];
string ans;
int d[MAX];
int BellmanFord(int startVertex, int vNum, int eNum) {
  fill(d, d + vNum, INT_MAX);
  d[startVertex] = 0;
  for (int i = 0; i < vNum; ++i) {
    bool update = false;
    for (int j = 0; j < eNum; ++j) {
      edge e = edges[j];
      if (d[e.s] != INT_MAX && d[e.t] > d[e.s] + e.d) {
        d[e.t] = d[e.s] + e.d;
        update = true;
        if (i == vNum - 1) {
          return -1;
        }
      }
    }
    if (!update)
      break;
  }
  for (int i = 0; i < vNum; ++i) {
    if (i > 0)
      ans.append(" ");
    if (d[i] == INT_MAX) {
      ans.append("INF");
    } else
      ans.append(to_string(d[i]));
  }
  return 0;
}
int main() {
  int vNum, eNum;
  cin >> vNum >> eNum;
  for (int i = 0; i < eNum; ++i) {
    cin >> edges[i].s >> edges[i].t >> edges[i].d;
  }
  if (BellmanFord(0, vNum, eNum) == -1) {
    cout << "NEGATIVE CYCLE" << endl;
    return 0;
  }
  cout << ans << endl;
  return 0;
}
```
In this optimized code, we have replaced the vector with an array for storing the edges and we have also avoided the unnecessary recomputation of the shortest paths from every vertex. Now, the BellmanFord function is called only once for the start vertex.