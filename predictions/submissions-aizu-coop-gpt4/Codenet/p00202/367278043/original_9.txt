Here are the steps to optimize the given code:

1. Code Analysis:
    - The code is calculating primes using a sieve algorithm, but it's not efficient. There are redundant computations and also it's not optimized for even numbers.
    - The dynamic programming part of the code is recalculating the same values again and again. It's not using the previously calculated values effectively.
    - The prime array and dp array are both global, leading to inefficient memory usage.
    - The usage of scanf and printf for input and output can be slower compared to other alternatives.

2. Optimization Strategy:
    - Use a more efficient algorithm for calculating primes.
    - Use memoization to avoid recalculations in the dynamic programming part.
    - Use local variables for the prime and dp arrays to improve memory usage.
    - Use cin and cout with ios_base::sync_with_stdio(false) for faster input and output.

3. Step-by-step Explanation:
    - Instead of calculating primes by checking each number, we can use the Sieve of Eratosthenes algorithm which is more efficient.
    - In the dynamic programming part, we can use a memoization table to avoid recalculations.
    - Instead of using global arrays, we can use local arrays inside the main function. This can free up memory when it's not in use.
    - We can use cin and cout for input and output. By setting ios_base::sync_with_stdio(false), we can make it faster.

Here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

void SieveOfEratosthenes(vector<bool>& prime) {
    int n = prime.size();
    fill(prime.begin(), prime.end(), true);
    prime[0] = prime[1] = false;
    for (int p = 2; p * p <= n; p++) {
        if (prime[p] == true) {
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    vector<bool> prime(1000001);
    SieveOfEratosthenes(prime);

    int n, x;
    while (cin >> n >> x, n) {
        vector<int> a(n);
        for (int i = 0; i < n; i++)
            cin >> a[i];
        sort(a.begin(), a.end());

        vector<bool> dp(x+1, false);
        dp[0] = true;
        for (int i = 1; i <= x; i++) {
            for (int j = 0; j < n && i >= a[j]; j++) {
                if (dp[i - a[j]]) {
                    dp[i] = true;
                    break;
                }
            }
        }

        for (int i = x; i >= 0; i--) {
            if (dp[i] && prime[i]) {
                cout << (i ? to_string(i) : "NA") << "\n";
                break;
            }
        }
    }
}
```
