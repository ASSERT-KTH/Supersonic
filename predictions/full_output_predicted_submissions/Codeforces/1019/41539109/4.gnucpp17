#include <bits/stdc++.h>
using namespace std;
#pragma GCC optimize("O3")
struct POINT {
  int x, y;
  POINT() : x(0), y(0) {}
  POINT(int x, int y) : x(x), y(y) {}
  POINT operator+(const POINT &t) const { return POINT(x + t.x, y + t.y); }
  POINT operator-(const POINT &t) const { return POINT(x - t.x, y - t.y); }
  POINT operator!() const { return POINT(-y, x); }
};
inline long long dot(const POINT &a, const POINT &b) {
  return (long long)a.x * b.x + (long long)a.y * b.y;
}
inline long long cross(const POINT &a, const POINT &b) {
  return (long long)a.x * b.y - (long long)a.y * b.x;
}
inline long long cross(const POINT &a, const POINT &b, const POINT &c) {
  return cross(a - c, b - c);
}
inline bool halfPlane(const POINT &p) {
  if (p.y == 0)
    return p.x < 0;
  return p.y < 0;
}
inline bool angSortCmp(POINT a, POINT b) {
  bool ha = halfPlane(a);
  bool hb = halfPlane(b);
  if (ha != hb)
    return ha < hb;
  return cross(a, b) > 0;
}
const int N = 2000;
int n;
long long S;
POINT tab[N + 7];
int poz[N + 7];
POINT stab[N + 7];
struct kierunek {
  POINT wek;
  int p, q;
};
int main() {
  ios_base::sync_with_stdio(0);
  cin >> n >> q >> q;