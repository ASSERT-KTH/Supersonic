#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using PII = pair<ll, ll>;
#define FOR(i, a, n) for (ll i = (ll)a; i < (ll)n; ++i)
#define REP(i, n) FOR(i, 0, n)
#define ALL(x) x.begin(), x.end()
template <typename T> T &chmin(T &a, const T &b) { return a = min(a, b); }
template <typename T> T &chmax(T &a, const T &b) { return a = max(a, b); }
template <typename T> bool IN(T a, T b, T x) { return a <= x && x < b; }
template <typename T> T ceil(T a, T b) { return a / b + !!(a % b); }
template <typename T> vector<T> make_v(size_t a) { return vector<T>(a); }
template <typename T, typename... Ts> auto make_v(size_t a, Ts... ts) {
  return vector<decltype(make_v<T>(ts...))>(a, make_v<T>(ts...));
}
template <typename T, typename V>
typename enable_if<is_class<T>::value == 0>::type fill_v(T &t, const V &v) {
  t = v;
}
template <typename T, typename V>
typename enable_if<is_class<T>::value != 0>::type fill_v(T &t, const V &v) {
  for (auto &e : t)
    fill_v(e, v);
}
template <class S, class T>
ostream &operator<<(ostream &out, const pair<S, T> &a) {
  out << '(' << a.first << ',' << a.second << ')';
  return out;
}
template <class T> ostream &operator<<(ostream &out, const vector<T> &a) {
  out << '[';
  for (const T &i : a)
    out << i << ',';
  out << ']';
  return out;
}
template <class T> ostream &operator<<(ostream &out, const set<T> &a) {
  out << '{';
  for (const T &i : a)
    out << i << ',';
  out << '}';
  return out;
}
template <class T, class S>
ostream &operator<<(ostream &out, const map<T, S> &a) {
  out << '{';
  for (auto &i : a)
    out << i << ',';
  out << '}';
  return out;
}
int dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};
const int INF = 1 << 30;
const ll LLINF = 1LL << 60;
const ll MOD = 1000000007;
template <typename T, typename Compare = less<T>>
vector<vector<T>> divide_and_conquer(ll h, ll w, const function<T(ll, ll)> &f,
                                     const Compare &comp = Compare()) {
  const T inf = numeric_limits<T>::max() / 10;
  vector<vector<T>> dp(h, vector<T>(w, inf));
  function<void(ll, ll, ll, ll, ll)> dfs = [&](ll i, ll l, ll r, ll optl,
                                               ll optr) {
    if (l > r)
      return;
    ll mid = (l + r) / 2, optm = -1;
    FOR(j, optl, min(mid, optr) + 1) {
      T cost = dp[i][j] + f(j + 1, mid);
      if (comp(cost, dp[i + 1][mid])) {
        dp[i + 1][mid] = cost;
        optm = j;
      }
    }
    dfs(i, l, mid - 1, optl, optm);
    dfs(i, mid + 1, r, optm, optr);
  };
  REP(i, w) dp[0][i] = f(0, i);
  FOR(i, 1, h) REP(j, w) dp[i][j] = inf;
  REP(i, h - 1) dfs(i, 0, w - 1, 0, w - 1);
  return dp;
}
namespace cf190div1E {
int u[4010][4010], W[4010][4010];
void solve() {
  int n, k;
  scanf("%d %d ", &n, &k);
  REP(i, n) {
    REP(j, n) {
      u[i][j] = getchar() - '0';
      getchar();
    }
  }
  FOR(w, 1, n + 1) {
    for (int l = 0, r = l + w; r < n; ++l, ++r) {
      W[l][r] = u[l][r];
      if (w >= 2)
        W[l][r] += W[l + 1][r] + W[l][r - 1] - W[l + 1][r - 1];
    }
  }
  auto f = [&](ll i, ll j) { return W[i][j]; };
  auto dp = divide_and_conquer<ll>(k, n, f);
  cout << dp[k - 1][n - 1] << endl;
}
} // namespace cf190div1E
namespace cf438F {
void solve() {
  ll N, K;
  cin >> N >> K;
  vector<ll> A(N);
  REP(i, N) {
    cin >> A[i];
    --A[i];
  }
  ll L = 0, R = 0, sum = 0;
  vector<ll> appear(100010);
  appear[A[0]]++;
  auto add = [&](ll idx) { sum += appear[A[idx]]++; };
  auto del = [&](ll idx) { sum -= --appear[A[idx]]; };
  function<ll(ll, ll)> f = [&](ll l, ll r) {
    while (L > l)
      add(--L);
    while (L < l)
      del(L++);
    while (R < r)
      add(++R);
    while (R > r)
      del(R--);
    return sum;
  };
  auto dp = divide_and_conquer(K, N, f);
  cout << dp[K - 1][N - 1] << endl;
}
} // namespace cf438F
signed main(void) {
  cf438F::solve();
  return 0;
}
