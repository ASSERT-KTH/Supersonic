#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
#pragma GCC optimize("Ofast")
typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update>
    ordered_set;
template <typename T> void make_unique(vector<T> &vec) {
  vec.erase(unique(vec.begin(), vec.end()), vec.end());
}
#define ll long long int
#define ld long double
#define ff first
#define ss second
void debb(ll x) { cerr << x; }
void debb(double x) { cerr << x; }
void debb(ld x) { cerr << x; }
void debb(char x) { cerr << '\'' << x << '\''; }
void debb(const char *x) { cerr << '\"' << x << '\"'; }
void debb(const string &x) { cerr << '\"' << x << '\"'; }
void debb(bool x) { cerr << (x ? "true" : "false"); }
template <typename T, typename V> void debb(const pair<T, V> &x) {
  cerr << '{';
  debb(x.ff);
  cerr << ',';
  debb(x.ss);
  cerr << '}';
}
template <typename T> void debb(const T &x) {
  int f = 0;
  cerr << '{';
  for (auto &i : x)
    cerr << (f++ ? "," : ""), debb(i);
  cerr << "}";
}
void _debb() { cerr << "]\n"; }
template <typename T, typename... V> void __