#include <algorithm>
#include <cassert>
#include <cstdio>
#include <vector>
using namespace std;
const int M = 100000 + 10, N = 50 * M;
inline void dn(int &x, int y) {
  if (y < x)
    x = y;
}
char gc() {
  char c = getchar();
  if (c != '0' && c != '1')
    c = getchar();
  return c;
}
int n, m, d;
bool open[M][25 + 5];
int id(int u, int t) { return (u - 1) * d + t; }
vector<int> e[N], escc[N];
int nscc, idscc[N], dfn[N], lowlink[N], clo;
int stk[N], top;
bool instk[N];
void dfscc(int k) {
  dfn[k] = lowlink[k] = ++clo;
  instk[stk[top++] = k] = true;
  for (int &p : e[k]) {
    if (!dfn[p])
      dfscc(p), dn(lowlink[k], lowlink[p]);
    else if (instk[p])
      dn(lowlink[k], dfn[p]);
  }
  if (lowlink[k] == dfn[k]) {
    ++nscc;
    while (top && stk[top] != k) {
      instk[stk[--top]] = false;
      idscc[stk[top]] = nscc;
    }
  }
}
void getSCC(int n) {
  for (int k = 1; k <= n; ++k)
    if (!dfn[k])
      dfscc(k);
  for (int k = 1; k <= n; ++k) {
    for (