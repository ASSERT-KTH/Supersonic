#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
int n, vis[2 * N], ord[2 * N], ordn, cnt, cnt[2 * N], val[N];
vector<int> adj[2 * N], adjt[2 * N];
int m, st[N], sw[N][2];
vector<int> stk;
int v(int x) { return 2 * x; }
int nv(int x) { return 2 * x + 1; }
void add(int a, int b) {
  adj[a ^ 1].push_back(b);
  adj[b ^ 1].push_back(a);
  adjt[b].push_back(a ^ 1);
  adjt[a].push_back(b ^ 1);
}
void dfs(int x) {
  vis[x] = 1;
  for (auto v : adj[x])
    if (!vis[v])
      dfs(v);
  ord[ordn++] = x;
}
void dfst(int x) {
  cmp[x] = cnt, vis[x] = 0;
  for (auto v : adjt[x])
    if (vis[v])
      dfst(v);
}
bool run2sat() {
  for (int i = 1; i <= m; i++) {
    if (!vis[v(i)])
      dfs(v(i));
    if (!vis[nv(i)])
      dfs(nv(i));
  }
  for (int i = ordn - 1; i >= 0; i--)
    if (vis[ord[i]])
      cnt++, dfst(ord[i]);
  for (int i = m; i >= 0; i--)
    if (vis[ord[i]])
      cnt++, dfst(ord[i]);
  for (int i = 1; i