#include <bits/stdc++.h>
using namespace std;
struct SegTree {
  vector<int> sand, sor, lazy;
  int n;
  SegTree(int n_) {
    n = n_;
    sand.assign(n * 2, 0);
    sor.assign(n * 2, 0);
    lazy.assign(n * 2, 0);
  }
  void upd(int id, int v) {
    sand[id] |= v;
    sor[id] |= v;
    lazy[id] |= v;
  }
  void push(int id, int il, int ir) {
    if (lazy[id] == 0)
      return;
    upd(il, lazy[id]);
    upd(ir, lazy[id]);
    lazy[id] = 0;
  }
  void update(int x, int y, int v, int id, int l, int r) {
    if (x <= l && r <= y) {
      upd(id, v);
      return;
    }
    if (x >= r || l >= y)
      return;
    int mid = (l + r) >> 1, il = id + 1, ir = id + 2 * (mid - l);
    push(id, il, ir);
    update(x, y, v, il, l, mid);
    update(x, y, v, ir, mid, r);
    sa[id] = sand[il] & sand[ir];
    sor[id] = sor[il] | sor[ir];
  }
  void update(int x, int y, int v) { update(x, y, v, 0, 0, n); }
  pair<int, int> get(int x, int y, int id, int l, int r) {
    if (x <= l && r <= y) {
  