#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template <class T1, class T2>
ostream &operator<<(ostream &os, const pair<T1, T2> &p) {
  os << '{' << p.first << ", " << p.second << '}';
  return os;
}
template <typename C, typename T = decay_t<decltype(*begin(declval<C>()))>,
          typename enable_if<!is_same<C, string>::value>::type * = nullptr>
ostream &operator<<(ostream &os, const C &container) {
  bool first = true;
  stringstream ss;
  ss << '[';
  for (const auto &x : container) {
    if (!first)
      ss << ", ";
    first = false;
    ss << x;
  }
  ss << ']';
  return os << ss.str();
}
vector<string> split(const string &s, char c) {
  vector<string> v;
  stringstream ss(s);
  string x;
  while (getline(ss, x, c))
    v.emplace_back(x);
  return v;
}
inline void dbg_out(vector<string>::iterator it) { cerr << endl; }
template <typename T, typename... Args>
inline void dbg_out(vector<string>::iterator it, T a, Args... args) {
  cerr << "[" << it->substr((*it)[0] == ' ', it->length()) << " = " << a
       << "] ";
  dbg_out(++it, args...);
}
inline void READ_OUT(vector<string>::iterator it) {}
template <typename T, typ