#include <algorithm>
#include <iostream>
using namespace std;
const int N = 2000, M = N * (N - 1) / 2;
int dsu[N * 2];
int find(int i) { return dsu[i] < 0 ? i : (dsu[i] = find(dsu[i])); }
bool join(int i, int j) {
  i = find(i);
  j = find(j);
  if (i == j)
    return false;
  if (dsu[i] > dsu[j])
    dsu[i] = j;
  else {
    if (dsu[i] == dsu[j])
      dsu[i]--;
    dsu[j] = i;
  }
  return true;
}
int main() {
  int n, m, q;
  scanf("%d%d%d", &n, &m, &q);
  static int ii[M], jj[M], ww[M], hh[M];
  for (int h = 0; h < m; h++) {
    int i, j, w;
    scanf("%d%d%d", &i, &j, &w), i--, j--;
    ii[h] = i;
    jj[h] = j;
    ww[h] = w;
    hh[h] = h;
  }
  sort(hh, hh + m, [](int a, int b) { return ww[a] > ww[b]; });
  while (q-- > 0) {
    int l, r;
    scanf("%d%d", &l, &r), l--, r--;
    fill_n(dsu, n * 2, -1);
    int w = -1;
    for (int h = 0; h < m; h++) {
      int h_ = hh[h];
 