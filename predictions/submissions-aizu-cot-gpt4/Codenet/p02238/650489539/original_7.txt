This program is implementing Depth-First Search (DFS) algorithm on a graph. There are several potential optimizations that can be made to the code:

1. Use vector instead of arrays: Vectors are dynamic and can grow and shrink at runtime. This will reduce the memory usage as we don't need to reserve memory for the maximum size upfront.

2. Avoid unnecessary re-initialization: The initialization of the array `G` is unnecessary because the array will be overwritten by the input. So we can remove this initialization.

3. Avoid unnecessary checks in the loop: In the function `search_loop`, there is a check `if (i == next && G[i][i] > 0)`. This check is redundant and can be removed to optimize the running time.

4. Use pre-increment instead of post-increment: Pre-increment (`++t`) is faster than post-increment (`t++`) as it doesn't require a temporary variable.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
using namespace std;
#define WHITE 0
#define GRAY 1
#define BLACK 2

vector<vector<int>> G;
vector<int> color;
int n;
vector<int> d, f;
int t;

void search_loop(int i) {
  d[i] = ++t;
  color[i] = GRAY;
  for (int next = 1; next <= n; next++) {
    if (G[i][next] > 0 && color[next] == WHITE) {
      search_loop(next);
    }
  }
  f[i] = ++t;
  color[i] = BLACK;
}

void dfs() {
  for (int i = 1; i <= n; i++)
    color[i] = WHITE;
  t = 0;
  for (int i = 1; i <= n; i++) {
    if (color[i] == WHITE)
      search_loop(i);
  }
  for (int i = 1; i <= n; i++) {
    cout << i << " " << d[i] << " " << f[i] << endl;
  }
}

int main() {
  int i, j, k, e;
  cin >> n;
  G = vector<vector<int>>(n+1, vector<int>(n+1, 0));
  color = vector<int>(n+1, WHITE);
  d = f = vector<int>(n+1, 0);

  do {
    cin >> i >> e;
    for (j = 1; j <= e; j++) {
      cin >> k;
      G[i][k] = 1;
    }
  } while (i < n);
  dfs();
  cin >> n;
  return 0;
}
```

Please note that the size of vectors is `n+1` because the indices are 1-based. Also, `d` and `f` vectors are initialized with `0`.