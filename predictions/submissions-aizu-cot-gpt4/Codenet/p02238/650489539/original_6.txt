The original program uses a Depth-First Search (DFS) algorithm to traverse a graph. This algorithm is quite efficient, but there are still some improvements we can make to optimize the code:

1. **Avoid unnecessary loop iterations**: In the `search_loop` function, we are iterating through every node even if it's not connected with the current node (i.e., G[i][next] == 0). We can create an adjacency list for each node to only iterate through the connected nodes. This can significantly reduce the number of iterations and hence, the running time.

2. **Avoid repeated condition checking**: In the `dfs` function, we are checking if `color[i] == WHITE` for each node. We can initialize the `color` array with `WHITE` and only change it to `GRAY` or `BLACK` when needed. This way, we only need to check this condition once and can skip the nodes that are already visited.

3. **Reduce memory usage**: The 2D array `G` is initialized with a size of 101x101 which can consume a lot of memory. If the graph is sparse (i.e., there are not many edges), a lot of memory can be wasted. As mentioned in the first point, we can use an adjacency list instead of a 2D array to save memory.

4. **Avoid unnecessary I/O operations**: The `cin >> n;` at the end of `main` function seems unnecessary and can be removed.

Optimized Code:
```cpp
#include <iostream>
#include <vector>
using namespace std;

#define WHITE 0
#define GRAY 1
#define BLACK 2

vector<int> G[101];
int color[101];
int n;
int d[101], f[101], t;

void search_loop(int i) {
    d[i] = ++t;
    color[i] = GRAY;
    for (int next : G[i]) {
        if (color[next] == WHITE) {
            search_loop(next);
        }
    }
    f[i] = ++t;
    color[i] = BLACK;
}

void dfs() {
    t = 0;
    for (int i = 1; i <= n; i++) {
        if (color[i] == WHITE)
            search_loop(i);
    }
    for (int i = 1; i <= n; i++) {
        cout << i << " " << d[i] << " " << f[i] << endl;
    }
}

int main() {
    cin >> n;
    int i, j, k, e;
    do {
        cin >> i >> e;
        for (j = 1; j <= e; j++) {
            cin >> k;
            G[i].push_back(k);
        }
    } while (i < n);

    dfs();

    return 0;
}
```
This optimized program still performs the Depth-First Search on the graph, but it uses less memory and runs faster due to the optimizations.