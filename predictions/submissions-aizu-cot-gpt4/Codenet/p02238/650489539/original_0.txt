This program is a depth-first search (DFS) implementation and there are a few optimizations we could make without changing the overall structure of the program:

1. Avoid `std::endl`: Using `std::endl` can be inefficient because it forces a flush of the output stream. Instead, use "\n" and let the system decide when to flush the output.

2. Use `std::ios::sync_with_stdio(false)`: This line disables the synchronization between the C and C++ standard streams which can make I/O operations faster. However, after calling this function, we should not mix input/output operations of `<cstdio>` (like `printf` or `scanf`) and `<iostream>` (like `cin` or `cout`).

3. Initialize arrays with zero: Instead of using a loop to initialize the array `G` to zero, we can use `memset` function which is faster.

4. Use prefix increment: In C/C++, the prefix increment operator (++i) could be more efficient than the postfix increment operator (i++) in some contexts.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <cstring> // for memset
using namespace std;
#define WHITE 0
#define GRAY 1
#define BLACK 2
int G[101][101];
int color[101];
int n;
int d[101], f[101], t;
void search_loop(int i) {
  int next;
  d[i] = ++t;
  color[i] = GRAY;
  for (next = 1; next <= n; ++next) {
    if (i == next && G[i][i] > 0)
      break;
    if (G[i][next] > 0 && color[next] == WHITE) {
      search_loop(next);
    }
  }
  f[i] = ++t;
  color[i] = BLACK;
  return;
}
void dfs() {
  int i;
  for (i = 1; i <= n; ++i)
    color[i] = WHITE;
  t = 0;
  for (i = 1; i <= n; ++i) {
    if (color[i] == WHITE)
      search_loop(i);
  }
  for (i = 1; i <= n; ++i) {
    cout << i << " " << d[i] << " " << f[i] << "\n";
  }
  return;
}
int main() {
  std::ios::sync_with_stdio(false);  // disable synchronization
  int i, j, k, e;
  cin >> n;
  memset(G, 0, sizeof(G)); // initialize G with zero
  do {
    cin >> i >> e;
    for (j = 1; j <= e; ++j) {
      cin >> k;
      G[i][k] = 1;
    }
  } while (i < n);
  dfs();
  cin >> n;
  return 0;
}
```