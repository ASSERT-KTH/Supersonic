Looking at the code, there are several areas where we could optimize for memory usage and run time. 

1. Optimize for memory: The 2D array `G` is of size 101x101 which is not necessary. We can reduce the size of the array by dynamically allocating memory according to the input value `n`. 
2. Optimize for memory: The arrays `color`, `d`, `f` also have a fixed size of 101. We can dynamically allocate memory for these arrays as well.
3. Optimize for running time: In the `search_loop` function, there's a loop that goes from 1 to `n`. We can optimize this by breaking the loop as soon as we find `G[i][next] > 0 && color[next] == WHITE`.
4. Optimize for running time: In the `dfs` function, there's a loop that goes from 1 to `n` to set all elements of `color` to WHITE. We can optimize this by setting the color to WHITE when we are initializing the `color` array.



Here is the optimized code:

```cpp
#include <iostream>
#include <vector>

using namespace std;

#define WHITE 0
#define GRAY 1
#define BLACK 2

int **G;
int *color;
int *d;
int *f;
int n;
int t;

void search_loop(int i) {
  int next;
  d[i] = ++t;
  color[i] = GRAY;
  for (next = 1; next <= n; next++) {
    if (i == next && G[i][i] > 0)
      break;
    if (G[i][next] > 0 && color[next] == WHITE) {
      search_loop(next);
      break;
    }
  }
  f[i] = ++t;
  color[i] = BLACK;
}

void dfs() {
  t = 0;
  for (int i = 1; i <= n; i++) {
    if (color[i] == WHITE)
      search_loop(i);
    cout << i << " " << d[i] << " " << f[i] << endl;
  }
}

int main() {
  cin >> n;

  G = new int*[n+1];
  for(int i = 0; i < n+1; i++)
    G[i] = new int[n+1]();
  
  color = new int[n+1]();
  d = new int[n+1]();
  f = new int[n+1]();
  
  int i, j, e;
  do {
    cin >> i >> e;
    for (j = 1; j <= e; j++) {
      cin >> k;
      G[i][k] = 1;
    }
  } while (i < n);
  
  dfs();

  // Don't forget to deallocate memory
  for(int i = 0; i < n+1; i++)
    delete [] G[i];
  delete [] G;
  delete [] color;
  delete [] d;
  delete [] f;

  return 0;
}
```
