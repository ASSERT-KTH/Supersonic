Here are the steps to optimize the given C/C++ program:

1. **Use std::vector instead of array**: Arrays in C++ don't have dynamic size. If you allocate more than you use, it will waste memory. And if you allocate less than you use, it will cause an array out of bound error. To fix this issue, we can use std::vector. It has a dynamic size and only uses the memory it needs.

2. **Use std::fill to initialize vector**: Instead of using a loop to initialize the vector, we can use the std::fill function. It is faster because it can take advantage of specific hardware instructions.

3. **Use std::ios_base::sync_with_stdio(false)**: This line of code will speed up the cin and cout operations. It can be used when you don't need to use C style input/output and C++ style input/output at the same time.

4. **Remove unnecessary check**: The condition (i == next && G[i][i] > 0) in the search_loop function is unnecessary because the loop variable next will never be equal to i, so it can be removed to speed up the program.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

#define WHITE 0
#define GRAY 1
#define BLACK 2

vector<vector<int>> G;
vector<int> color, d, f;
int n, t;

void search_loop(int i) {
  int next;
  d[i] = ++t;
  color[i] = GRAY;
  for (next = 1; next <= n; next++) {
    if (G[i][next] > 0 && color[next] == WHITE) {
      search_loop(next);
    }
  }
  f[i] = ++t;
  color[i] = BLACK;
  return;
}

void dfs() {
  fill(color.begin(), color.end(), WHITE);
  t = 0;
  for (int i = 1; i <= n; i++) {
    if (color[i] == WHITE)
      search_loop(i);
  }
  for (int i = 1; i <= n; i++) {
    cout << i << " " << d[i] << " " << f[i] << endl;
  }
  return;
}

int main() {
  ios_base::sync_with_stdio(false); 
  int i, j, k, e;
  cin >> n;
  G.resize(n+1, vector<int>(n+1, 0));
  color.resize(n+1);
  d.resize(n+1);
  f.resize(n+1);
  do {
    cin >> i >> e;
    for (j = 1; j <= e; j++) {
      cin >> k;
      G[i][k] = 1;
    }
  } while (i < n);
  dfs();
  return 0;
}
```
