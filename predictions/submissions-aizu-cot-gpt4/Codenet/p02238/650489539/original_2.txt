Here are the steps for optimization:

1. Avoid unnecessary computation in `search_loop` function: The loop traverses through every element from 1 to n, but the loop can be stopped when the condition `G[i][next] > 0 && color[next] == WHITE` is satisfied. We can replace the for loop with a while loop to achieve this.

2. Move `color[i] = WHITE;` to the initialization loop in the main function. This way, we are avoiding the redundancy of setting the color to WHITE twice.

3. In the main function, we don't need to initialize every element of `G[][]` to 0. In C++, the default value of an int is 0.

4. The input loop in the main function can be replaced with a for loop, since we know the number of iterations from the first input.

5. Use `ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` for faster I/O operations.

6. Use `'\n'` instead of `endl` to avoid unnecessary flushing of the buffer.

Now, let's implement these changes:

```cpp
#include <iostream>
using namespace std;
#define WHITE 0
#define GRAY 1
#define BLACK 2
int G[101][101];
int color[101];
int n;
int d[101], f[101], t;

void search_loop(int i) {
  int next = 1;
  d[i] = ++t;
  color[i] = GRAY;
  while(G[i][next] <= 0 || color[next] != WHITE) {
    if (next == n) return;
    next++;
  }
  search_loop(next);
  f[i] = ++t;
  color[i] = BLACK;
}

void dfs() {
  t = 0;
  for (int i = 1; i <= n; i++) {
    if (color[i] == WHITE)
      search_loop(i);
  }
  for (int i = 1; i <= n; i++) {
    cout << i << " " << d[i] << " " << f[i] << '\n';
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int i, j, k, e;
  cin >> n;
  for (i = 1; i <= n; i++) {
    color[i] = WHITE;
  }
  for (i = 1; i <= n; i++) {
    cin >> i >> e;
    for (j = 1; j <= e; j++) {
      cin >> k;
      G[i][k] = 1;
    }
  }
  dfs();
  cin >> n;
  return 0;
}
```
This optimized program should run faster and use less memory than the original one.