Step 1: Include only necessary headers

The first line includes <bits/stdc++.h> which includes all standard library headers. This is not recommended as it slows down the compilation process and loads unnecessary headers. Include only the headers that you need.

Step 2: Avoid Global Variables

Global variables can make the program harder to understand and debug. In this case, you can encapsulate variables within functions or pass them as arguments.

Step 3: Avoid using `scanf` and `printf` in C++

These are C functions, it's better to use C++ I/O functions like `cin` and `cout`. However, if speed is crucial, you can stick with `scanf` and `printf`, but remember to use `ios_base::sync_with_stdio(false)` to turn off synchronization between C and C++ standard streams.

Step 4: Use Better Variable Names

Better variable names make the program easier to understand.

Step 5: Avoid Using Floating Point Numbers When Possible

Floating point numbers are slower than integers and can cause precision issues. However, in this case, it seems that floating point numbers are necessary.

Here is the optimized program:

```cpp
#include <iostream>
#include <climits>
using namespace std;

typedef long long LL;
typedef pair<int, int> PII;
typedef double flt;
const int MAXN = 100000 + 10;
const flt eps = 1e-7;

flt calc(flt W, int vw[], int pf[], int vf[], int th[], int N, int pw) {
  flt cost = W * pw;
  for (int i = 0; i < N; ++i) {
    flt need = th[i] - W * vw[i];
    if (need > 0) {
      flt f = need / vf[i];
      cost += f * pf[i];
    }
  }
  return cost;
}

int main() {
  ios_base::sync_with_stdio(false);
  int N, pw;
  int vw[MAXN], pf[MAXN], vf[MAXN], th[MAXN];
  while (cin >> N && N) {
    cin >> pw;
    for (int i = 0; i < N; ++i) {
      cin >> vw[i] >> pf[i] >> vf[i] >> th[i];
    }
    flt left = 0, right = INT_MAX;
    for (int _ = 0; _ < 200; ++_) {
      flt m1 = (left + left + right) / 3.0;
      flt m2 = (left + right + right) / 3.0;
      flt c1 = calc(m1, vw, pf, vf, th, N, pw), c2 = calc(m2, vw, pf, vf, th, N, pw);
      if (c1 < c2)
        right = m2;
      else
        left = m1;
    }
    cout << fixed << setprecision(10) << calc(left, vw, pf, vf, th, N, pw) << endl;
  }
  return 0;
}
```
This code has been optimized in terms of memory usage by avoiding global variables, and in terms of running time by using C++ I/O and avoiding unnecessary computation by skipping the loop iteration when `need <= 0`.