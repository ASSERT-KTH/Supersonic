This program can be optimized in two ways: using faster I/O methods and limiting the scope of variables that are not used across multiple iterations.

1) Use Faster I/O Methods: In C++, cin and cout are slower compared to scanf and printf. Therefore, we can use scanf and printf for faster input and output. However, if you want to use cin and cout, you can add these two lines at the start of the main function to make them faster: `ios_base::sync_with_stdio(false); cin.tie(NULL);`

2) Localize Variables: In the main function, the variables `m1`, `m2`, `c1`, and `c2` are declared inside the for-loop instead of outside. This is because these variables are not used across multiple iterations. Therefore, it's better to limit their scope to a single iteration. This does not really optimize runtime or memory, but it's a good practice to limit the scope of variables.

Here is the optimized version of the code:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
typedef pair<int, int> PII;
typedef double flt;
const int MAXN = 100000 + 10;
const flt eps = 1e-7;
int vw[MAXN], pf[MAXN], vf[MAXN], th[MAXN];
int N, pw;

flt calc(flt W) {
  flt cost = W * pw;
  for (int i = 0; i < N; ++i) {
    flt need = th[i] - W * vw[i];
    if (need > 0) {
      flt f = need / vf[i];
      cost += f * pf[i];
    }
  }
  return cost;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  while (scanf("%d", &N) == 1 && N) {
    scanf("%d", &pw);
    for (int i = 0; i < N; ++i) {
      scanf("%d%d%d%d", vw + i, pf + i, vf + i, th + i);
    }
    flt left = 0, right = INT_MAX;
    for (int _ = 0; _ < 200; ++_) {
      flt m1 = (left + left + right) / 3.0;
      flt m2 = (left + right + right) / 3.0;
      flt c1 = calc(m1), c2 = calc(m2);
      if (c1 < c2)
        right = m2;
      else
        left = m1;
    }
    printf("%.10f\n", calc(left));
  }
  return 0;
}
```