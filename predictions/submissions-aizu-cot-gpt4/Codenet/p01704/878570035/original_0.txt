The given program is a ternary search implementation for a convex function, generally the best approach to optimize such programs is to reduce the number of computations and avoid unnecessary memory usage. However, the program seems to be quite efficient already. The main optimization opportunities here are:

1. Avoiding the usage of `#include <bits/stdc++.h>`, which includes most of the C++ standard libraries and can increase the compilation time. We can replace it with specific include statements for the required libraries.
2. Precomputing values that don't change during the loop iterations. In this case, we can factor out the `W * vw[i]` computation from the loop in the `calc` function.
3. Using more efficient IO functions. The `scanf` and `printf` functions are more efficient than their C++ counterparts (`cin` and `cout`) because they don't need to synchronize with C++ standard streams.

Let's apply these optimizations:

```c++
#include <cstdio>
#include <climits>
#define MAXN 100000 + 10
const double eps = 1e-7;
int vw[MAXN], pf[MAXN], vf[MAXN], th[MAXN];
int N, pw;

double calc(double W) {
  double cost = W * pw;
  double W_vw[MAXN];
  for (int i = 0; i < N; ++i) {
    W_vw[i] = W * vw[i];
  }
  for (int i = 0; i < N; ++i) {
    double need = th[i] - W_vw[i];
    if (need > 0) {
      double f = need / vf[i];
      cost += f * pf[i];
    }
  }
  return cost;
}

int main() {
  while (scanf("%d", &N) == 1 && N) {
    scanf("%d", &pw);
    for (int i = 0; i < N; ++i) {
      scanf("%d%d%d%d", vw + i, pf + i, vf + i, th + i);
    }
    double left = 0, right = INT_MAX;
    for (int _ = 0; _ < 200; ++_) {
      double m1 = (left + left + right) / 3.0;
      double m2 = (left + right + right) / 3.0;
      double c1 = calc(m1), c2 = calc(m2);
      if (c1 < c2)
        right = m2;
      else
        left = m1;
    }
    printf("%.10f\n", calc(left));
  }
  return 0;
}
```

Remember that the optimization of time and space will depend on the input size and the specific conditions of the problem.