Step 1: Instead of using the entire bits/stdc++.h library, include only the specific libraries that you need. This will considerably reduce the compilation time.

Step 2: The use of scanf and printf is faster than cin and cout in C++. However, they are less safe because they don't check the type and number of arguments, which can lead to bugs. Also, using "ios_base::sync_with_stdio(false)" can make cin and cout faster.

Step 3: Instead of calculating "m1" and "m2" in every iteration, calculate them once and update only the changed value in the next iteration. This reduces the number of operations in each iteration.

Step 4: Avoid performing the multiplication operation in each iteration by calculating "W*pw" once and storing it in "cost". This reduces the computational complexity of the program.

Step 5: Avoid performing unnecessary calculations inside the for loop in the "calc" function. If "need" is less than or equal to 0, there is no need to calculate "f" and increment "cost". This reduces the number of operations performed in each iteration.

Here's the optimized code:
```cpp
#include <iostream>
#include <cstdio>
#include <algorithm>
typedef long long LL;
typedef std::pair<int, int> PII;
typedef double flt;
const int MAXN = 100000 + 10;
const flt eps = 1e-7;
int vw[MAXN], pf[MAXN], vf[MAXN], th[MAXN];
int N, pw;

flt calc(flt W) {
  flt cost = W * pw;
  for (int i = 0; i < N; ++i) {
    flt need = th[i] - W * vw[i];
    if (need > 0) {
      flt f = need / vf[i];
      cost += f * pf[i];
    }
  }
  return cost;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  while (std::cin >> N && N) {
    std::cin >> pw;
    for (int i = 0; i < N; ++i) {
      std::cin >> vw[i] >> pf[i] >> vf[i] >> th[i];
    }
    flt left = 0, right = INT_MAX, m1 = (left * 2 + right) / 3.0, m2 = (left + right * 2) / 3.0, c1 = calc(m1), c2;
    for (int _ = 0; _ < 200; ++_) {
      if (c1 < (c2 = calc(m2))) {
        right = m2;
        m2 = (left + right * 2) / 3.0;
      }
      else {
        left = m1;
        m1 = (left * 2 + right) / 3.0;
        c1 = calc(m1);
      }
    }
    printf("%.10f\n", calc(left));
  }
  return 0;
}
```