Optimization Steps:

1. The "bits/stdc++.h" header includes many libraries, but not every library is in use, which makes it heavy and decreases the performance of the code. Instead, we can include only the libraries that are in use: iostream, cstdio, climits.

2. The "typedef" keyword is used to define a type, but in modern C++, we should use "using" keyword instead of "typedef". It's more flexible and supports template aliasing.

3. If we look into the "calc" function, we can see that the "need" variable is calculated but in some cases, it's not used. We can prevent this calculation if it's not necessary.

4. The "scanf" function is used for input, but it's a slower function. We can use cin.tie(0), ios::sync_with_stdio(false), which makes cin/cout as fast as printf/scanf.

5. The "printf" function is used for output, but it's slower. We can use "cout" instead.

6. We can also remove the extra variable "_" in the for loop as it's not used anywhere. 

Here is the optimized version of the code after applying the above steps:

```cpp
#include <iostream>
#include <cstdio>
#include <climits>
using namespace std;
using LL = long long;
using PII = pair<int, int>;
using flt = double;
const int MAXN = 100000 + 10;
const flt eps = 1e-7;
int vw[MAXN], pf[MAXN], vf[MAXN], th[MAXN];
int N, pw;
flt calc(flt W) {
  flt cost = W * pw;
  for (int i = 0; i < N; ++i) {
    if (th[i] > W * vw[i]) {
      flt need = th[i] - W * vw[i];
      flt f = need / vf[i];
      cost += f * pf[i];
    }
  }
  return cost;
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  while (cin >> N && N) {
    cin >> pw;
    for (int i = 0; i < N; ++i) {
      cin >> vw[i] >> pf[i] >> vf[i] >> th[i];
    }
    flt left = 0, right = INT_MAX;
    for (int i = 0; i < 200; ++i) {
      flt m1 = (left + left + right) / 3.0;
      flt m2 = (left + right + right) / 3.0;
      flt c1 = calc(m1), c2 = calc(m2);
      if (c1 < c2)
        right = m2;
      else
        left = m1;
    }
    cout << fixed << setprecision(10) << calc(left) << "\n";
  }
  return 0;
}
```