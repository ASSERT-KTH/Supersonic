This program is already fairly optimized but there are a few minor changes that can be made to potentially improve its performance:

1. The pow function is expensive to call. I see that you are multiplying the variables by themselves which is the same as raising them to the power of 2. If these variables are integers, you can replace pow with a simple multiplication which will be faster.
2. In the main loop, you are calling the calc() function twice for each iteration. If the number of iterations is large, this can be very time-consuming. I would suggest storing the result of the first call to calc() in a variable and re-using it in the comparison.
3. You are using the “int” data type for your loop counter. If the range of your loop is within the range of “unsigned short” (0 to 65535), you can use “unsigned short” instead of “int” to save memory.
4. You could also reduce the number of divisions in the calc function. Division is generally more expensive than multiplication.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
typedef pair<int, int> PII;
typedef double flt;
const int MAXN = 100000 + 10;
const flt eps = 1e-7;
int vw[MAXN], pf[MAXN], vf[MAXN], th[MAXN];
int N, pw;
flt calc(flt W) {
  flt cost = W * pw;
  for (unsigned short i = 0; i < N; ++i) {
    flt need = th[i] - W * vw[i];
    if (need <= 0)
      continue;
    flt f = need * (1.0 / vf[i]);
    cost += f * pf[i];
  }
  return cost;
}
int main() {
  while (scanf("%d", &N) == 1 && N) {
    scanf("%d", &pw);
    for (unsigned short i = 0; i < N; ++i) {
      scanf("%d%d%d%d", vw + i, pf + i, vf + i, th + i);
    }
    flt left = 0, right = INT_MAX;
    for (unsigned short _ = 0; _ < 200; ++_) {
      flt m1 = (left + left + right) / 3.0;
      flt m2 = (left + right + right) / 3.0;
      flt c1 = calc(m1), c2 = calc(m2);
      if (c1 < c2)
        right = m2;
      else
        left = m1;
    }
    printf("%.10f\n", calc(left));
  }
  return 0;
}
```

Please note that these are very minor optimizations and may not result in a noticeable improvement in performance. Also, the effect of these optimizations can vary depending on the specific hardware and compiler used.