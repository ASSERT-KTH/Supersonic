Your program can be optimized in several ways:

1. Avoid using `#include <bits/stdc++.h>`: This header file is quite large and including it increases the compile time significantly. It's better to include only those header files which are actually used in the program. In your case, `#include <iostream>` and `#include <cstdio>` would be sufficient.

2. Avoid using `#define`: In C++, it's better to use `const` or `constexpr` for defining constants. In this case, you can replace `#define MAX 100001` and `#define inf 1e9` with `constexpr int MAX = 100001;` and `constexpr double inf = 1e9;`.

3. Use `std::ios_base::sync_with_stdio(false);` and `cin.tie(NULL);`: These two lines can significantly increase the speed of `cin` and `cout`.

4. Avoid computing the same value multiple times: The expression `W * vw[i]` is calculated twice in the loop in function `f`. You can store the result of this expression in a variable and use it wherever needed.

5. Avoid using `printf` and `scanf` in C++: In C++, it's better to use `std::cout` and `std::cin` for input and output operations.

Here is the optimized version of your program:

```cpp
#include <iostream>
#include <cstdio>

constexpr int MAX = 100001;
constexpr double inf = 1e9;
int n, pw;
double vw[MAX], pf[MAX], vf[MAX], th[MAX];

double f(double W) {
  double cost = W * pw;
  for (int i = 0; i < n; i++) {
    double Wvw = W * vw[i];
    if (Wvw > th[i])
      continue;
    double sum1 = th[i] - Wvw;
    double sum2 = sum1 / vf[i];
    cost += sum2 * pf[i];
  }
  return cost;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  while (1) {
    std::cin >> n >> pw;
    if (n == 0)
      break;
    for (int i = 0; i < n; i++)
      std::cin >> vw[i] >> pf[i] >> vf[i] >> th[i];
    double l = 0, r = inf;
    for (int i = 0; i < 200; i++) {
      double m1 = (l * 2.0 + r) / 3.0;
      double m2 = (l + r * 2.0) / 3.0;
      double res1 = f(m1);
      double res2 = f(m2);
      if (res1 < res2)
        r = m2;
      else
        l = m1;
    }
    std::cout << std::fixed << std::setprecision(4) << f(l) << "\n";
  }
  return 0;
}
```

In this optimized version, only necessary header files are included and `const` is used instead of `#define`. This speeds up the compile time. Using `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(NULL);` increases the speed of `cin` and `cout`. The calculation of `W * vw[i]` is stored in a variable to avoid multiple computations. The use of `printf` is replaced with `std::cout` to make the code more C++-like.