Here are the steps to optimize the given C++ program:

1. Header files: Instead of using `#include <bits/stdc++.h>`, which includes all the standard libraries and increases compilation time, include only the required header files.

2. Avoid global variables: Global variables consume memory from the start of the program until it ends, which is inefficient. Variables `n`, `pw`, `vw`, `pf`, `vf`, and `th` can be moved inside the main function.

3. Avoid using `std::endl`: `std::endl` leads to a flushing of the output buffer, which slows down the program. Use "\n" instead.

4. Use prefix increment: In C++, the prefix increment (`++i`) operator is more efficient than the postfix increment (`i++`) operator, as the postfix operator involves a copy operation.

5. Avoid multiple calculations: In the `f()` function, `W * vw[i]` is calculated twice. This can be optimized by storing it in a variable.

6. Early termination: If `W * vw[i] > th[i]` is true, the loop continues to the next iteration. By using an `if...else` structure, the calculation can be skipped when this condition is true.

Here's the optimized version of the code:

```cpp
#include <iostream>
#include <cstdio>
#define MAX 100001
#define inf 1e9

double f(int n, double W, double* vw, double* pf, double* vf, double* th) {
  double cost = W * vw[n];
  for (int i = 0; i < n; ++i) {
    double wv = W * vw[i];
    if (wv > th[i]) 
      continue;
    else {
      double sum1 = th[i] - wv;
      double sum2 = sum1 / vf[i];
      cost += sum2 * pf[i];
    }
  }
  return cost;
}

int main() {
  int n, pw;
  double vw[MAX], pf[MAX], vf[MAX], th[MAX];
  while (1) {
    std::cin >> n >> pw;
    if (n == 0)
      break;
    for (int i = 0; i < n; ++i)
      std::cin >> vw[i] >> pf[i] >> vf[i] >> th[i];
    double l = 0, r = inf;
    for (int i = 0; i < 200; ++i) {
      double m1 = (l * 2.0 + r) / 3.0;
      double m2 = (l + r * 2.0) / 3.0;
      double res1 = f(n, m1, vw, pf, vf, th);
      double res2 = f(n, m2, vw, pf, vf, th);
      if (res1 < res2)
        r = m2;
      else
        l = m1;
    }
    printf("%.4f\n", f(n, l, vw, pf, vf, th));
  }
  return 0;
}
```
Note: This program has not been tested. It is a theoretical optimization based on the given code.