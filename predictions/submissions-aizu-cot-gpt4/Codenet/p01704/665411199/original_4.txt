Optimization Steps:

1. Rather than using `#include <bits/stdc++.h>`, which includes almost all the libraries and sometimes slows down the execution, it's better to include only the required headers. Here, `iostream`, `cstdio` and `cmath` are required.

2. `#define inf 1e9` is used to define a large number. However, this can be replaced with `std::numeric_limits<double>::max()`, which is more consistent for floating point numbers. 

3. The `cin` and `cout` operations can be optimized by adding `std::ios::sync_with_stdio(false); cin.tie(NULL);` at the beginning of the `main()` function. This can speed up I/O operations significantly.

4. Rather than calling the function `f()` multiple times inside the loop, we can store the result in a variable and use it. This will reduce the number of function calls.

5. We can reduce memory usage by using local variables instead of global arrays. This is because global variables are stored in the heap memory, which is larger but slower than the stack memory used for local variables.

Optimized Program:

```cpp
#include <iostream>
#include <cstdio>
#include <cmath>
#include <limits>

using namespace std;

double f(int n, double pw, double* vw, double* pf, double* vf, double* th, double W) {
  double cost = W * pw;
  for (int i = 0; i < n; i++) {
    if (W * vw[i] > th[i])
      continue;
    double sum1 = th[i] - W * vw[i];
    double sum2 = sum1 / vf[i];
    cost += sum2 * pf[i];
  }
  return cost;
}

int main() {
  std::ios::sync_with_stdio(false);
  cin.tie(NULL);
  int n;
  double pw;
  while (1) {
    cin >> n >> pw;
    if (n == 0)
      break;
    double vw[n], pf[n], vf[n], th[n];
    for (int i = 0; i < n; i++)
      cin >> vw[i] >> pf[i] >> vf[i] >> th[i];
    double l = 0, r = numeric_limits<double>::max();
    for (int i = 0; i < 200; i++) {
      double m1 = (l * 2.0 + r) / 3.0;
      double m2 = (l + r * 2.0) / 3.0;
      double res1 = f(n, pw, vw, pf, vf, th, m1);
      double res2 = f(n, pw, vw, pf, vf, th, m2);
      if (res1 < res2)
        r = m2;
      else
        l = m1;
    }
    printf("%.4f\n", f(n, pw, vw, pf, vf, th, l));
  }
  return 0;
}
```
Please note that this code uses Variable Length Arrays (VLA) which is a C99 feature and not supported by all C++ compilers. If your compiler doesn't support VLA, consider using `std::vector` instead.