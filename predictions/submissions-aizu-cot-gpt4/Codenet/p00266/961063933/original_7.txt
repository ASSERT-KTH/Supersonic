The given C/C++ program seems to be calculating some sort of factorial operation and swapping elements of an array, while taking inputs from a user. It also uses a map to store data and performs some operations. The program seems to be optimized already in terms of running time as it uses effective algorithms. But there are some minor improvements that can be made:

1. Use "std::vector<long long>" instead of the dynamically allocated array "long long *factmodary". This will manage the memory automatically and we don't need to delete it manually. It will also reduce the chance of memory leaks.

2. The same goes for "int *word". Instead, use "std::vector<int> word(N)".

3. Avoid declaring variables inside loops, for instance, variables s, t, tmp, facttime, and bubblenum. Declare them before the loop and just use them inside. This will avoid unnecessary memory allocation and deallocation for each iteration of the loop.

4. Try to avoid using std::map for counting occurrences. It's better to use std::unordered_map which provides average constant-time complexity for search, insert, and remove operations. But in this case, we need to keep the elements in order, so we can't replace std::map with std::unordered_map.

5. Instead of using "for (;;) { ... }", we can use "while (std::cin >> N && N != 0) { ... }".

Now let's implement these optimizations:

```cpp
#include <iostream>
#include <vector>
#include <map>

using namespace std;

const int divisor = 1000000007;

int main() {
  vector<long long> factmodary(100001);
  long long fact = 1;
  for (int i = 1; i <= 100000; i++) {
    fact *= i;
    fact %= divisor;
    factmodary[i] = fact;
  }
  
  int N, R, s, t, tmp, facttime, bubblenum;

  while (std::cin >> N && N != 0) {   
    cin >> R;
    vector<int> word(N);
    for (int i = 0; i < N; i++)
      word[i] = i + 1;
    for (int i = 0; i < R; i++) {
      cin >> s >> t;
      tmp = word[s - 1];
      word[s - 1] = word[t - 1];
      word[t - 1] = tmp;
    }
    map<int, int> bubblehist;
    bubblehist[word[0]] = 0;
    long long ans = factmodary[N - 1] * (word[0] - 1);
    for (int i = 1; i < N; i++) {
      facttime = word[i] - 1;
      map<int, int>::iterator it = bubblehist.lower_bound(word[i]);
      if (it != bubblehist.end()) {
        bubblenum = it->second;
        it--;
      } else {
        it--;
        bubblenum = it->second + 1;
      }
      pair<int, int> p;
      p.first = word[i];
      p.second = bubblenum;
      map<int, int>::iterator it2 = bubblehist.insert(it, p);
      for (++it2; it2 != bubblehist.end(); it2++)
        (it2->second)++;
      facttime -= bubblenum;
      ans += factmodary[N - (i + 1)] * facttime;
      ans %= divisor;
    }
    cout << (int)ans << "\n";
  }
  
  return 0;
}
```