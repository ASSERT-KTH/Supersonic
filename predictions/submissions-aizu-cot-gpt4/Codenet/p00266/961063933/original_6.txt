The original program can be optimized by the following steps:

1. Removing the dynamic allocation: We can avoid using dynamic allocation for the arrays `factmodary` and `word`. We can define them as global arrays. This will save us the time for allocation and deallocation of the arrays and also make our code safer to avoid memory leaks.

2. Avoiding unnecessary map operations: In the original code, after each insert operation in the map `bubblehist`, we are incrementing the second value of all elements that come after the inserted element. This operation can be avoided by using a different approach. We can just keep track of the count of numbers less than the current number, which can be done by just incrementing the second value of the new inserted element by the second value of the element at the iterator position `it`.

3. Using fast input/output methods: `cin` and `cout` are slower compared to `scanf` and `printf`. This can be a crucial optimization for problems where the input/output size is large.

Optimized program:

```cpp
#include <cstdio>
#include <map>
using namespace std;

const int divisor = 1000000007;
long long factmodary[100001];
int word[100000];

int main() {
  long long fact = 1;
  for (int i = 1; i <= 100000; i++) {
    fact *= i;
    fact %= divisor;
    factmodary[i] = fact;
  }
  for (;;) {
    int N, R;
    scanf("%d", &N);
    if (N == 0)
      break;
    scanf("%d", &R);
    for (int i = 0; i < N; i++)
      word[i] = i + 1;
    for (int i = 0; i < R; i++) {
      int s, t;
      scanf("%d%d", &s, &t);
      swap(word[s - 1], word[t - 1]);
    }
    map<int, int> bubblehist;
    bubblehist[word[0]] = 0;
    long long ans = factmodary[N - 1] * (word[0] - 1);
    for (int i = 1; i < N; i++) {
      int facttime = word[i] - 1;
      map<int, int>::iterator it = bubblehist.lower_bound(word[i]);
      int bubblenum = (it == bubblehist.end() ? (--it)->second + 1 : it->second);
      bubblehist[word[i]] = bubblenum;
      facttime -= bubblenum;
      ans += factmodary[N - (i + 1)] * facttime;
      ans %= divisor;
    }
    printf("%d\n", (int)ans);
  }
  return 0;
}
```
In the optimized version, the dynamic allocation has been replaced with static allocation, `cin` and `cout` have been replaced with `scanf` and `printf` respectively, and the unnecessary map operations have been avoided. This results in a significant speed up and reduced memory usage.