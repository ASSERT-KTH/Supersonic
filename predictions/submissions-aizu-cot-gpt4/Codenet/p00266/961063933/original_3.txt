The given program is performing a number of operations that can be optimized to improve memory usage and running time. Here are the steps to optimize the program:

1. Remove Unnecessary Variable Declarations: The variable `fact` is only used to store the calculated factorial values. We can directly store these values in the `factmodary` array, eliminating the need for the `fact` variable.

2. Use `std::vector` Instead of `std::map`: The `std::map` data structure is used to create `bubblehist`. However, `std::map` is slower than `std::vector` because it needs to maintain the balance of the binary tree. Since the keys of `bubblehist` are integer values, we can use a `std::vector` with the integer value as the index. This would make the retrieval of values faster.

3. Avoid Unnecessary `std::map` Operations: The program is performing a number of operations with `std::map` like `lower_bound`, `insert`, and iterating over the map. These operations can be avoided by using `std::vector`.

4. Use `std::swap` in Place of Manual Swap: For swapping the values of `word[s - 1]` and `word[t - 1]`, we can use the `std::swap` function. It is more readable and less error-prone.

5. Use `std::ios_base::sync_with_stdio(false)`: This will make the C++ standard streams `std::cin` and `std::cout` more efficient by not synchronizing with the C standard streams `stdin` and `stdout`.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const int divisor = 1000000007;

int main() {
  ios_base::sync_with_stdio(false);
  vector<long long> factmodary(100001);
  
  for (int i = 1; i <= 100000; i++) {
    factmodary[i] = (factmodary[i-1] * i) % divisor;
  }
  
  vector<int> word(100000, 0);
  
  while (true) {
    int N, R;
    cin >> N;
    if (N == 0)
      break;
      
    cin >> R;
    for (int i = 0; i < N; i++)
      word[i] = i + 1;
      
    for (int i = 0; i < R; i++) {
      int s, t;
      cin >> s >> t;
      swap(word[s - 1], word[t - 1]);
    }
    
    vector<int> bubblehist(N+1, 0);
    long long ans = (factmodary[N - 1] * (word[0] - 1)) % divisor;
    
    for (int i = 1; i < N; i++) {
      int facttime = word[i] - 1;
      int bubblenum = bubblehist[word[i]];
      bubblehist[word[i]] = bubblenum + 1;
      facttime -= bubblenum;
      ans = (ans + (factmodary[N - (i + 1)] * facttime) % divisor) % divisor;
    }
    cout << ans << "\n";
  }
  
  return 0;
}
```
In this optimized code, the memory usage is reduced by using `std::vector` instead of dynamically allocated arrays and the running time is improved by using more efficient operations with `std::vector`.