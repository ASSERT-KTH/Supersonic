Here are a few steps to optimize the given C/C++ code:

1. One of the main ways to optimize the given code is to avoid using dynamic memory allocations. We can see that `factmodary` and `word` are dynamically allocated arrays. Dynamic memory allocation takes more time than static memory allocation. So, instead of making a dynamic allocation, we can directly declare arrays with a size slightly bigger than the maximum possible size required. 

2. Another area of optimization is the use of `std::map`. Maps in C++ are implemented as Binary Search Trees and have an average case and worst-case complexity of O(log n) for search, insert, and delete operations. This can be slow when there are a lot of data. If possible, we can replace it with `std::unordered_map` which has an average case complexity of O(1) for search, insert, and delete operations. However, in this case, `std::unordered_map` is not suitable because we are using `lower_bound` function which is not available in `std::unordered_map`.

3. The `bubblehist` map object is reinitialized in every loop. This is not efficient and can be avoided.

4. Avoid the use of `std::endl`. `std::endl` causes the output buffer to be flushed, and this is a time-consuming operation. Instead, we can use '\n' to create a new line.

5. Removing unnecessary variables.
   
Now let's implement these steps:

```cpp
#include <iostream>
#include <map>
using namespace std;
const int divisor = 1000000007;
long long factmodary[100001];
int word[100000]{0};

int main() {
  long long fact = 1;
  for (int i = 1; i <= 100000; i++) {
    fact *= i;
    fact %= divisor;
    factmodary[i] = fact;
  }
  
  map<int, int> bubblehist;
  for (;;) {
    bubblehist.clear();
    int N, R;
    cin >> N;
    if (N == 0)
      break;
    cin >> R;
    for (int i = 0; i < N; i++)
      word[i] = i + 1;
    for (int i = 0; i < R; i++) {
      int s, t;
      cin >> s >> t;
      swap(word[s - 1], word[t - 1]);
    }
    bubblehist[word[0]] = 0;
    long long ans = factmodary[N - 1] * (word[0] - 1);
    for (int i = 1; i < N; i++) {
      int facttime = word[i] - 1;
      int bubblenum;
      map<int, int>::iterator it = bubblehist.lower_bound(word[i]);
      if (it != bubblehist.end()) {
        bubblenum = it->second;
        it--;
      } else {
        it--;
        bubblenum = it->second + 1;
      }
      bubblehist.insert(it, {word[i], bubblenum});
      for (++it; it != bubblehist.end(); it++)
        (it->second)++;
      facttime -= bubblenum;
      ans += factmodary[N - (i + 1)] * facttime;
      ans %= divisor;
    }
    cout << (int)ans << "\n";
  }
  return 0;
}
```