Here are the steps to optimize the given C/C++ program:

1. Use unordered_map instead of map: The map in C++ is implemented as a Red-Black tree, which gives a time complexity of O(log(n)) for search and insert operations. On the other hand, unordered_map uses a hash table, giving an average time complexity of O(1) for search and insert operations. Therefore, using unordered_map can save time when the number of elements is large.
   
2. Use array instead of map: The variable bubblehist is used as an array in this program. Using an array instead of a map can save memory and time because arrays have a smaller memory footprint and faster access time than maps.

3. Allocate memory statically instead of dynamically: Dynamic memory allocation is slower than static memory allocation because it involves system calls and can cause memory fragmentation. Therefore, if the size of the arrays factmodary and word is known at compile time and is not very large, it is better to allocate them statically.

Here is the optimized version of your program:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;
const int divisor = 1000000007;
int main() {
  long long factmodary[100001];
  long long fact = 1;
  for (int i = 1; i <= 100000; i++) {
    fact *= i;
    fact %= divisor;
    factmodary[i] = fact;
  }
  int word[100000]{0};
  for (;;) {
    int N, R;
    cin >> N;
    if (N == 0)
      break;
    cin >> R;
    for (int i = 0; i < N; i++)
      word[i] = i + 1;
    for (int i = 0; i < R; i++) {
      int s, t;
      cin >> s >> t;
      int tmp = word[s - 1];
      word[s - 1] = word[t - 1];
      word[t - 1] = tmp;
    }
    unordered_map<int, int> bubblehist;
    bubblehist[word[0]] = 0;
    long long ans = factmodary[N - 1] * (word[0] - 1);
    for (int i = 1; i < N; i++) {
      int facttime = word[i] - 1;
      int bubblenum;
      auto it = bubblehist.lower_bound(word[i]);
      if (it != bubblehist.end()) {
        bubblenum = it->second;
        it--;
      } else {
        it--;
        bubblenum = it->second + 1;
      }
      pair<int, int> p;
      p.first = word[i];
      p.second = bubblenum;
      auto it2 = bubblehist.insert(it, p);
      for (++it2; it2 != bubblehist.end(); it2++)
        (it2->second)++;
      facttime -= bubblenum;
      ans += factmodary[N - (i + 1)] * facttime;
      ans %= divisor;
    }
    cout << (int)ans << "\n";
  }
  return 0;
}
```
Please note that the degree of optimization may depend on the specific task at hand and the constraints of the environment where the program is run. This optimized version is based on the code provided and may not be the absolute optimal solution.