Here are the steps to optimize the given C/C++ program:

1. Avoid unnecessary dynamic memory allocation: Dynamic memory allocation in C/C++ is expensive. It's better to use automatic variables whenever possible. Instead of dynamically allocating `factmodary`, we can declare it as a global array. Similarly, the `word` array can be declared as a function-local automatic array.

2. Avoid unnecessary use of std::map: The original program uses a std::map to keep track of the 'bubblehist', but it seems it only needs to track the number of values smaller than the current one. A std::vector can do the job with less overhead.

3. Avoid frequent modulus operation: The modulus operation is computationally expensive. We only need to calculate the modulus when the value is about to overflow.

4. Use fast I/O methods for large inputs: If the input size is large, using cin and cout can become a bottleneck. Instead, we can use faster I/O methods like scanf and printf.

Here is the optimized version of the program:

```cpp
#include <cstdio>
#include <vector>
using namespace std;
const int divisor = 1000000007;
long long factmodary[100001];
int word[100000];

int main() {
  long long fact = 1;
  for (int i = 1; i <= 100000; i++) {
    fact *= i;
    if (fact >= divisor)
      fact %= divisor;
    factmodary[i] = fact;
  }
  for (;;) {
    int N, R;
    scanf("%d", &N);
    if (N == 0)
      break;
    scanf("%d", &R);
    for (int i = 0; i < N; i++)
      word[i] = i + 1;
    for (int i = 0; i < R; i++) {
      int s, t;
      scanf("%d%d", &s, &t);
      swap(word[s - 1], word[t - 1]);
    }
    vector<int> bubblehist(N + 1);
    long long ans = factmodary[N - 1] * (word[0] - 1);
    for (int i = 1; i < N; i++) {
      int facttime = word[i] - 1;
      int bubblenum = bubblehist[word[i]];
      bubblehist[word[i]]++;
      facttime -= bubblenum;
      ans += factmodary[N - (i + 1)] * facttime;
      if (ans >= divisor)
        ans %= divisor;
    }
    printf("%d\n", (int)ans);
  }
  return 0;
}
```

Please note that the above optimization steps and the modified program are based on my understanding of the original program and its requirements. Depending on the specifics of the problem it tries to solve and constraints, further optimizations might be possible.