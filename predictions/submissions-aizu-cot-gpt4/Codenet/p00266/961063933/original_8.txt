The given program can be optimized in the following ways:

1. Avoid frequent memory allocations: Instead of using `map<int, int> bubblehist;` inside the infinite loop, declare it outside the loop. Thus, it will avoid frequent memory allocation and deallocation, which can be expensive in terms of time.

2. Replace map with unordered_map: As the order of elements does not matter, we can use `unordered_map` instead of `map` which will improve the average case time complexity from O(log N) to O(1).

3. Use Fast Input/Output: As the program involves a huge amount of input/output operations, using fast input/output can save a lot of time. We can achieve this by using `ios_base::sync_with_stdio(false); cin.tie(NULL);` in the beginning of our program.

Here is the optimized version of the given program:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;
const int divisor = 1000000007;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  long long *factmodary = new long long[100001];
  long long fact = 1;
  for (int i = 1; i <= 100000; i++) {
    fact *= i;
    fact %= divisor;
    factmodary[i] = fact;
  }
  
  int *word = new int[100000]{0};
  unordered_map<int, int> bubblehist;

  for (;;) {
    int N, R;
    cin >> N;
    if (N == 0)
      break;
    cin >> R;

    for (int i = 0; i < N; i++)
      word[i] = i + 1;

    for (int i = 0; i < R; i++) {
      int s, t;
      cin >> s >> t;
      int tmp = word[s - 1];
      word[s - 1] = word[t - 1];
      word[t - 1] = tmp;
    }

    bubblehist.clear();
    bubblehist[word[0]] = 0;
    long long ans = factmodary[N - 1] * (word[0] - 1);

    for (int i = 1; i < N; i++) {
      int facttime = word[i] - 1;
      int bubblenum;
      auto it = bubblehist.find(word[i]);
      if (it != bubblehist.end()) {
        bubblenum = it->second;
      } else {
        bubblenum = bubblehist[word[i-1]] + 1;
      }
      pair<int, int> p;
      p.first = word[i];
      p.second = bubblenum;
      bubblehist.insert(p);
      facttime -= bubblenum;
      ans += factmodary[N - (i + 1)] * facttime;
      ans %= divisor;
    }
    cout << (int)ans << "\n";
  }
  delete[] word;
  delete[] factmodary;
  return 0;
}
```

These optimizations will significantly reduce both the running time and memory usage of the program.