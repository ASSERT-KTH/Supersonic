The given program has a few areas which can be optimized:

1. Redundant Usage of Map: The map 'm' is used to store the product of 'p' and 'q' for each 'i', but it is also used to check whether 'i' has been encountered before or not. This is redundant as the vector 'vec' is also storing the same information. Instead of using both, we can use an unordered_map that has a faster average lookup, insert and delete time (constant time, O(1)) compared to a map (logarithmic time, O(logn)).

2. Redundant Search Operation: The find operation inside the loop is unnecessary since we already know that 'vec' only contains keys that are in 'm'. So, we can directly access the elements of 'm' using the keys in 'vec'.

3. Use of Iterator: We can replace the use of iterator with auto keyword for simplicity and better readability.

Here is the optimized code:

```cpp
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;
int main() {
  int n, i;
  while (cin >> n, n) {
    unordered_map<int, long long> m;
    vector<int> vec;
    long long p, q;
    bool s = false;
    while (n--) {
      cin >> i >> p >> q;
      if (m.find(i) == m.end())
        vec.push_back(i);
      m[i] += p * q;
    }
    for (const auto &i : vec) {
      if (m[i] >= 1000000) {
        s = true;
        cout << i << endl;
      }
    }
    if (!s)
      cout << "NA" << endl;
  }
}
```

This optimized code should be faster and use less memory than the original one.