First, I'll explain the optimization step by step:

1. Replace map with unordered_map: In C++, std::unordered_map is usually faster for lookup and updates than std::map because it uses a hash table for internal storage, rather than a tree.

2. Avoid unnecessary lookup in the map: In the for loop, we're looking up the same key in the map twice. Once for checking whether it exists or not and the second time for getting its value. We can avoid the second lookup by directly getting the iterator when we insert or update the key-value pair in the map.

3. Use prefix increment: For non-primitive types like iterators, prefix increment (++i) can be more efficient than postfix increment (i++) because postfix increment needs to create a copy of the object before incrementing it while prefix increment doesn't.

4. Reserve space for vector: If we know the maximum size of the vector in advance, we can reserve space for it using vec.reserve(max_size), which can reduce the number of reallocations and copies as the vector grows.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;
int main() {
  int n, i;
  while (cin >> n, n) {
    unordered_map<int, long long> m;
    vector<int> vec;
    vec.reserve(n);  // Reserve space for vector
    long long p, q, s = 0;
    while (n--) {
      cin >> i >> p >> q;
      // Avoid unnecessary lookup in the map
      auto [it, inserted] = m.insert({i, 0});
      if(inserted)
        vec.push_back(i);
      it->second += p * q;
    }
    for (int i = 0; i < vec.size(); ++i) {  // Use prefix increment
      long long value = m[vec[i]];
      if (value >= 1000000) {
        s = 1;
        cout << vec[i] << endl;
      }
    }
    if (!s)
      cout << "NA" << endl;
  }
}
```
Note: The optimized program may not work correctly if the input contains duplicate values for "i" because it assumes that "i" is unique. The original program also seems to have this issue.