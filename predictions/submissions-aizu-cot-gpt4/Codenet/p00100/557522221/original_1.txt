Step 1: Using 'auto' instead of explicitly stating the iterator type:
The 'auto' keyword allows the compiler to automatically detect the type of the variable from its initializer. This can save a bit of typing and can also make the code cleaner and easier to read.

Step 2: Using 'emplace_back' instead of 'push_back':
The 'emplace_back' function will construct the object in-place, which can be more efficient than 'push_back', which creates a temporary object and then moves it into the vector.

Step 3: Use 'for each' loop instead of 'for' loop:
'For each' loop is more readable and cleaner than a traditional 'for' loop. It also prevent us from using the 'find' operation which is costly.

Optimized program:

```c++
#include <iostream>
#include <map>
#include <vector>
using namespace std;
int main() {
  int n, i;
  while (cin >> n, n) {
    map<int, long long> m;
    vector<int> vec;
    long long p, q, s = 0;
    while (n--) {
      cin >> i >> p >> q;
      if (!m[i])
        vec.emplace_back(i);
      m[i] += p * q;
    }
    for (auto& v : vec) {
      if (m[v] >= 1000000) {
        s = 1;
        cout << v << endl;
      }
    }
    if (!s)
      cout << "NA" << endl;
  }
}
```
