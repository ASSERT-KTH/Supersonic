This program is using a map to store values and then iterating over a vector to find those values again. This is unnecessary and inefficient as it leads to a time complexity of O(NlogN) due to the map's logN search time. We can avoid this by directly using a map, which would reduce the time complexity to O(N).

In addition, the program checks whether the iterator's second value is greater or equal to 1000000 inside the loop. We can optimize this by checking this condition while we are adding values to the map. This way, we only process the important values (those with a product greater than 1000000), which would reduce both memory usage and running time. 

Here is the optimized code:

```cpp
#include <iostream>
#include <map>
using namespace std;
int main() {
  int n, i;
  while (cin >> n, n) {
    map<int, long long> m;
    long long p, q, s = 0;
    while (n--) {
      cin >> i >> p >> q;
      m[i] += p * q;
      if (m[i] >= 1000000) {
        s = 1;
        cout << i << endl;
      }
    }
    if (!s)
      cout << "NA" << endl;
  }
}
```
In this optimized version, as soon as the product (p*q) makes the sum greater or equal to 1000000, it prints the index and flags that at least one index has been printed. This also eliminates the need for the vector 'vec' which was used in the original version to store the indices and iterate over them later.