The given C++ program does not have any major performance issues. However, there are some minor improvements that can be made to optimize the code. We can apply the following optimizations:

1. The find operation in the map m is unnecessary because we know that every element in the vector vec is also a key in the map m. So, we can directly access the elements of the map m using the array subscript operator [].

2. We can also use a for-each loop instead of the traditional for loop to iterate over the vector vec. This will make the code cleaner and a bit faster because we don't need to access the elements of the vector by their indices.

3. We can use auto instead of explicitly writing the type of the iterator. This will make the code cleaner and easier to read.

Here is the optimized version of the code:

```c++
#include <iostream>
#include <map>
#include <vector>
using namespace std;
int main() {
  int n, i;
  while (cin >> n, n) {
    map<int, long long> m;
    vector<int> vec;
    long long p, q, s = 0;
    while (n--) {
      cin >> i >> p >> q;
      if (!m[i])
        vec.push_back(i);
      m[i] += p * q;
    }
    for (const auto &i : vec) {
      if (m[i] >= 1000000) {
        s = 1;
        cout << i << endl;
      }
    }
    if (!s)
      cout << "NA" << endl;
  }
}
```
This version of the code will run slightly faster and use slightly less memory than the original version.