This program reads pairs of (i, p, q) where 'i' is an identifier and 'p' and 'q' are parameters. It then multiplies 'p' and 'q' and adds the result to the current total for 'i'. After all pairs are processed, it then prints out all 'i' identifiers where the total is greater than or equal to 1,000,000. If no such identifier exists, it prints 'NA'.

Optimization Steps:

1. Remove the find operation in the second loop: The find is unnecessary because we are iterating over all keys in the map anyways. We can just directly access the value from the map using the [] operator.

2. Use prefix increment (++i) instead of postfix (i++): It's a minor optimization that can be used in the loops. In C++, the postfix increment creates a copy of the object, increments the original and returns the copy, while prefix increment just increments the original object and returns it. So prefix increment is slightly more efficient.

3. Reserve space for the vector: If you know the approximate size of the vector beforehand, you can reserve the space for it which can reduce the time spent on dynamic resizing and memory allocation.

4. Use 'auto' keyword for iterator declaration: This will make the code cleaner and more readable. It's not a performance optimization, but a good practice in modern C++.

Please note that these optimizations are quite minor, and would probably only make a noticeable difference for very large inputs.

Here is the optimized code:

```cpp
#include <iostream>
#include <map>
#include <vector>
using namespace std;
int main() {
  int n, i;
  while (cin >> n, n) {
    map<int, long long> m;
    vector<int> vec;
    vec.reserve(n); // Reserve space for vector
    long long p, q, s = 0;
    while (n--) {
      cin >> i >> p >> q;
      if (!m[i])
        vec.push_back(i);
      m[i] += p * q;
    }
    for (auto i = 0; i < vec.size(); ++i) { // Use prefix increment and 'auto' keyword for iterator
      if (m[vec[i]] >= 1000000) { // Directly access the value from the map
        s = 1;
        cout << vec[i] << endl;
      }
    }
    if (!s)
      cout << "NA" << endl;
  }
}
```
