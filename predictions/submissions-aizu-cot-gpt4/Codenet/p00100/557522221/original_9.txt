The given program reads pairs of integers, then multiplies those pairs and adds the result to the existing value stored in a map under the key of the index. If there's no value under the key, it adds the index to a vector. After all inputs are processed, it checks whether any of the values in the map are greater than or equal to 1,000,000. If there are, it prints the keys of those values and changes a flag `s` to 1. If `s` is still 0 after all entries have been checked, it prints "NA".

The main inefficiency in this program is the repeated lookup of the map in the second loop. In the first loop, the program already knows which keys exist in the map. Yet in the second loop, it looks up each key in the map again.

To optimize, we can change the `map<int, long long> m;` to `unordered_map<int, long long> m;`. Unordered maps are more efficient than maps for lookup operations. This is because they provide access to the stored element with an average constant time complexity, while for `std::map` the time complexity is logarithmic in size.

We can also replace `vector<int> vec;` with an `unordered_set<int> vec;`. An unordered set is more efficient than a vector for checking if an element is present in the set.

Here's the optimized program:

```cpp
#include <iostream>
#include <unordered_map>
#include <unordered_set>
using namespace std;
int main() {
  int n, i;
  while (cin >> n, n) {
    unordered_map<int, long long> m;
    unordered_set<int> vec;
    long long p, q, s = 0;
    while (n--) {
      cin >> i >> p >> q;
      if (!m[i])
        vec.insert(i);
      m[i] += p * q;
    }
    for (auto i : vec) {
      if (m[i] >= 1000000) {
        s = 1;
        cout << i << endl;
      }
    }
    if (!s)
      cout << "NA" << endl;
  }
}
```

This optimisation reduces both running time and memory usage by minimising unnecessary lookups and using more efficient data structures.