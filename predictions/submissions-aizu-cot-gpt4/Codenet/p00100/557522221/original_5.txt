1. Instead of using `vector<int> vec` to store the keys and then searching for their corresponding values in the map, we can directly iterate over the map. This will save memory usage because we don't need to store the keys separately, and it should also slightly improve the running time because we don't need to search for the keys in the map.

2. We can break the loop as soon as we find the first key whose value is greater than or equal to 1000000. This will improve running time if such a key exists because we don't need to check the remaining keys.

3. We can use `auto` keyword instead of explicitly writing the type `map<int, long long>::iterator` to make the code cleaner and easier to read.

4. We don't need to check `if (!m[i])` before adding to the map because the map's `operator[]` will automatically create an entry with a default value if the key doesn't exist.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <map>
using namespace std;

int main() {
  int n, i;
  while (cin >> n, n) {
    map<int, long long> m;
    long long p, q, s = 0;
    while (n--) {
      cin >> i >> p >> q;
      m[i] += p * q;
    }
    for (auto& it : m) {
      if (it.second >= 1000000) {
        s = 1;
        cout << it.first << endl;
        break;
      }
    }
    if (!s)
      cout << "NA" << endl;
  }
}
```

This version of the program should have the same functionality as the original, but with improved efficiency.