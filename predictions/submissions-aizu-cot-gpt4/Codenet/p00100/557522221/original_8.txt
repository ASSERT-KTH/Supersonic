The program can be optimized by reducing the number of lookups in the map and avoiding unnecessary vector insertions. 

Here are the steps to optimize the program:

1. Remove vector `vec` that is used to store unique keys. This vector is unnecessary because all keys in `std::map` are unique by default. Hence, we can directly iterate over the map.
2. Remove the map lookup in the loop where we iterate over `vec`. Because we are iterating over the map directly, there is no need to do a lookup for every key. 

Now, the program would look like this:

```cpp
#include <iostream>
#include <map>
using namespace std;

int main() {
  int n, i;
  while (cin >> n, n) {
    map<int, long long> m;
    long long p, q, s = 0;
    while (n--) {
      cin >> i >> p >> q;
      m[i] += p * q;
    }
    for (auto it = m.begin(); it != m.end(); ++it) {
      if (it->second >= 1000000) {
        s = 1;
        cout << it->first << endl;
      }
    }
    if (!s)
      cout << "NA" << endl;
  }
}
```
This optimized program has a reduced memory footprint because it no longer creates and manipulates the vector `vec`. The running time is also reduced because it eliminates the unnecessary map lookup for each element in `vec`.