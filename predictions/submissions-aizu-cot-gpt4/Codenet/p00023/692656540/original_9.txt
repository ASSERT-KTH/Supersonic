Step by Step Optimization:

1. Dynamic array: In your code, you are using a dynamic array `int ans[n];` which is not recommended in C/C++. The size of the array is determined at runtime, which can lead to inefficiency and potential memory overflow. It's better to use a statically defined array size or allocate memory dynamically using `malloc()` or `new`.

2. pow() function: The `pow()` function has a high computational cost. Since you are using it to square a number, it is more efficient to simply multiply the number by itself. 

3. sqrt() function: The `sqrt()` function also has a high computational cost. Since you're not using the actual distance but comparing it, you can just leave it out. Squared distances can be compared just like regular distances.

4. Repeated calculations: The expressions `ra - rb` and `rb - ra` are being calculated twice. You can calculate it once and store the result in a variable, then use that variable in the if-else conditions.

5. Loop count: You can reduce the loop count from 2 to 1 by directly printing the result instead of storing it in an array and printing it in the next loop.

Optimized Code:

```c
#include <stdio.h>

int main(void) {
    int k, n;
    double xa, ya, ra, xb, yb, rb;
    double d, sum, diff;
    scanf("%d", &n);
    for (k = 1; k <= n; k++) {
        scanf("%lf %lf %lf %lf %lf %lf", &xa, &ya, &ra, &xb, &yb, &rb);
        d = (xb - xa) * (xb - xa) + (yb - ya) * (yb - ya); // squared distance
        sum = (ra + rb) * (ra + rb); // squared sum
        diff = (ra - rb) * (ra - rb); // squared difference
        if (d > sum) {
            printf("0\n");
        } else if (diff > d) {
            printf("2\n");
        } else if ((-diff) > d) {
            printf("-2\n");
        } else {
            printf("1\n");
        }
    }
    return 0;
}
```
This optimized code has both less runtime and memory usage.