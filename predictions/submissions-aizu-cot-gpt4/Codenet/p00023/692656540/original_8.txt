Optimization 1: Avoid using pow function for squaring
Using pow() to square a number is slower than just multiplying the number with itself. We can replace pow(x, 2.0) with x*x.

Optimization 2: Avoid using dynamic size array
In C++, it's not recommended to use variable-length arrays like "int ans[n]". Instead, if the maximum value of 'n' is known, we can declare the array with that maximum size. If not, we can use std::vector.

Optimization 3: Avoid array 'd'
We don't actually need the array 'd' to perform our computations. We can directly compare the calculated distances. This will reduce memory usage.

Optimization 4: Print the answer immediately
Instead of storing the answers and printing them afterward, we can print the answers right after calculating them. This will further reduce memory usage.

Here's the optimized program:

```cpp
#include <math.h>
#include <stdio.h>
int main(void) {
    int k, n;
    double xa, ya, ra, xb, yb, rb;
    scanf("%d", &n);
    for (k = 1; k <= n; k++) {
        scanf("%lf %lf %lf %lf %lf %lf", &xa, &ya, &ra, &xb, &yb, &rb);
        double d0 = sqrt((xb - xa)*(xb - xa) + (yb - ya)*(yb - ya));
        double d1 = ra + rb;
        double d2 = fabs(ra - rb); // absolute value of the difference
        int ans;
        if (d0 > d1) {
            ans = 0;
        } else if (d2 > d0) {
            ans = ra > rb ? 2 : -2;
        } else {
            ans = 1;
        }
        printf("%d\n", ans);
    }
    return 0;
}
```
Here, I've also added usage of fabs() function to calculate the absolute difference between ra and rb. This handles the situation where ra < rb, instead of calculating 'rb - ra' and 'ra - rb' separately.