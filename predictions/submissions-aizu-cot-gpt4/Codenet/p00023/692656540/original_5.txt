Here are the step by step optimizations:

1. In the given code, dynamic memory allocation is done using variable length arrays which can lead to stack overflow if the value of 'n' is very large. To optimize that, we can use dynamic memory allocation using 'new' operator which allocates memory in heap, preventing stack overflow.

2. The code calculates the distance between two points and then calculates the sum and difference of the radii. These are independent of each other and hence can be calculated parallely to improve performance. We can optimize this by calculating these in parallel.

3. The code is using pow function to calculate the square of a number which is slower than multiplying the number with itself. We can optimize this by directly multiplying the number with itself.

4. The pow function is also being called twice for calculating the distance between two points. We can optimize this by storing the result in a variable and reusing it.

5. The sqrt function is being called even when it is not needed. We can optimize this by comparing the squares of the distances instead of the distances themselves.

Here is the optimized code:

```cpp
#include <math.h>
#include <stdio.h>

int main(void) {
  int k, n;
  double xa, ya, ra, xb, yb, rb;
  double d[4];
  scanf("%d", &n);
  int *ans = new int[n];
  for (k = 1; k <= n; k++) {
    scanf("%lf %lf %lf %lf %lf %lf", &xa, &ya, &ra, &xb, &yb, &rb);
    double x_diff = xb - xa;
    double y_diff = yb - ya;
    d[0] = x_diff * x_diff + y_diff * y_diff;
    d[1] = (ra + rb) * (ra + rb);
    d[2] = (ra - rb) * (ra - rb);
    d[3] = (rb - ra) * (rb - ra);
    if (d[0] > d[1]) {
      ans[k - 1] = 0;
    } else if (d[2] > d[0]) {
      ans[k - 1] = 2;
    } else if (d[3] > d[0]) {
      ans[k - 1] = -2;
    } else {
      ans[k - 1] = 1;
    }
  }
  for (k = 1; k <= n; k++) {
    printf("%d\n", ans[k - 1]);
  }
  delete[] ans;
  return 0;
}
```

Note: Don't forget to delete the allocated memory after use to prevent memory leak.