Here is a step-by-step explanation of the possible optimizations:

1. **Avoid redundant computations**: The main idea here is to avoid redundant computations that the computer has to perform over and over again. In the given code, there are two places where this can be done. First, in the `nr()` function, you are performing `tb[i] > a` comparison inside a loop. However, `tb[i]` is just `i*i*i`, so it would be better to compute `i*i*i` once and use it both for the comparison and for the assignment. Second, in the `calc()` function, you are computing `i * i * i` and `z * z * z` in a loop, which can be avoided by storing these values in variables.

2. **Use efficient data structures**: In the `nr()` function, you are using a linear search to find the largest `i` such that `i*i*i <= a`. This can be optimized using binary search, which can significantly reduce the running time of your program. 

3. **Avoid unnecessary function calls**: In the `calc()` function, you are calling the `min()` function inside a loop, which could be avoided by using an if-statement.

Here is the optimized program:

```c++
#include <algorithm>
#include <iostream>
using namespace std;
int tb[1112], ans[1112], N;

int calc(int z) {
  int z3 = z * z * z, ret = z3;
  for (int i = 1; i < z; i++) {
    int i3 = i * i * i;
    int j3 = tb[lower_bound(tb, tb+1112, z3 - i3) - tb - 1];
    if (i3 + j3 >= z3)
      break;
    if (ret > z3 - i3 - j3)
      ret = z3 - i3 - j3;
  }
  return ret;
}

int main() {
  for (int i = 1; i < 1112; i++)
    tb[i] = i * i * i;
  for (int i = 1; i < 1112; i++)
    ans[i] = calc(i);
  while (cin >> N, N)
    cout << ans[N] << endl;
}
```

Now, the `nr()` function is removed and replaced by `lower_bound()` function, which is a standard library function that performs binary search. This reduces the time complexity of searching from O(n) to O(log n). Also, the `min()` function is replaced by an if-statement, which avoids unnecessary function calls. The redundant computations of `i * i * i` and `z * z * z` are also avoided.