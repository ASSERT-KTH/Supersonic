The given C/C++ program can be optimized in the following ways:

1. The function `nr(int a)` can be optimized by using binary search instead of a linear search. This would reduce its time complexity from O(n) to O(log n).

2. The function `calc(int z)` can be optimized by limiting the range of the loop to the cube root of `z3` instead of `z`, because `i` would not exceed the cube root of `z3`.

3. The calculation of the cube of `i` and `z` can be optimized by storing the result in a variable instead of calculating it multiple times.

4. The calculation of `tb` and `ans` arrays can be done once before the main function and stored as global arrays. This is because their values do not change during the execution of the program.

Here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <cmath>
using namespace std;
const int MAXN = 1112;
int tb[MAXN], ans[MAXN], N;

int nr(int a) {
  int left = 0, right = MAXN, mid;
  while (left < right) {
    mid = left + (right - left) / 2;
    if (tb[mid] <= a)
      left = mid + 1;
    else
      right = mid;
  }
  return tb[left - 1];
}

int calc(int z) {
  int z3 = z * z * z, ret = z3;
  for (int i = 1, i3 = i * i * i; i3 < z3; i++, i3 = i * i * i) {
    int j3 = nr(z3 - i3);
    if (i3 + j3 >= z3)
      break;
    ret = min(ret, z3 - i3 - j3);
  }
  return ret;
}

int main() {
  for (int i = 1; i < MAXN; i++)
    tb[i] = i * i * i;
  for (int i = 1; i < MAXN; i++)
    ans[i] = calc(i);
  while (cin >> N, N)
    cout << ans[N] << endl;
}
```

In this optimized version, the calculation of `ans` array is done only once before the main function and stored as a global array. The function `nr(int a)` is optimized by using binary search instead of a linear search. The function `calc(int z)` is optimized by limiting the range of the loop to the cube root of `z3` and by storing the cube of `i` in a variable instead of calculating it multiple times.