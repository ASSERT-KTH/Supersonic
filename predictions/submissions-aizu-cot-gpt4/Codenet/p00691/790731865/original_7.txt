Optimization Steps:

1. The computation `z * z * z` and `i * i * i` inside the `calc` function is repeated multiple times for the same value of `z` and `i`. We can calculate it once and store it in a variable.

2. The `nr` function is called in a loop inside the `calc` function. This function itself contains a loop which makes the overall complexity high. We can eliminate the need for this function by using a binary search on the `tb` array which will be much faster.

3. The `tb` array is calculated in the main function every time. We can move this to a global scope so that it is calculated only once when the program starts.

4. The `ans` array is also calculated in the main function. We can also move this to a global scope so that it is calculated only once.

Optimized Program:

```cpp
#include <algorithm>
#include <iostream>
using namespace std;
int tb[1112], ans[1112];

int calc(int z) {
  int z3 = z * z * z, ret = z3;
  for (int i = 1; i < z; i++) {
    int i3 = i * i * i;
    int j3 = *(upper_bound(tb, tb + 1112, z3 - i3) - 1);
    if (i3 + j3 >= z3)
      break;
    ret = min(ret, z3 - i3 - j3);
  }
  return ret;
}

void init() {
  for (int i = 1; i < 1112; i++)
    tb[i] = i * i * i;
  for (int i = 1; i < 1112; i++)
    ans[i] = calc(i);
}

int main() {
  init();
  int N;
  while (cin >> N, N)
    cout << ans[N] << endl;
}
```

In this optimized program, the `nr` function is eliminated and a binary search is used inside `calc` function which makes it run faster. Also, the `tb` and `ans` arrays are calculated only once in the `init` function. This reduces the running time and memory usage of the program.