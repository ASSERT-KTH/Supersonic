Here are the step-by-step optimizations:

1. Remove the computation inside the loop and pre-calculate it: The original program calculates `i*i*i` and `z*z*z` inside the loop, which is time-consuming. We can pre-calculate these values before the loop. This will reduce CPU computation.

2. Use binary search in `nr` function: The function `nr` is linear and could be optimized by using binary search because `tb` array is sorted. Binary search works in O(log n) time complexity, which is faster than the current linear search.

3. Use `std::ios::sync_with_stdio(false)` to speed up cin and cout: This line of code will allow C++ to not synchronize with the C standard library, making cin and cout faster.

Here's the optimized version of your code:

```cpp
#include <algorithm>
#include <iostream>
using namespace std;
int tb[1113], ans[1113], N;

int nr(int a) {
    int left = 2, right = 1111;
    while (left < right) {
        int mid = left + (right - left) / 2;
        if (tb[mid] > a)
            right = mid;
        else
            left = mid + 1;
    }
    return tb[left - 1];
}

int calc(int z) {
    int z3 = tb[z], ret = z3;
    for (int i = 1; i < z; i++) {
        int i3 = tb[i], j3 = nr(z3 - i3);
        if (i3 + j3 >= z3)
            break;
        ret = min(ret, z3 - i3 - j3);
    }
    return ret;
}

int main() {
    ios::sync_with_stdio(false);  // speed up cin and cout
    for (int i = 1; i <= 1112; i++)
        tb[i] = i * i * i;
    for (int i = 1; i <= 1112; i++)
        ans[i] = calc(i);
    while (cin >> N, N)
        cout << ans[N] << '\n';
}
```

In this optimized version, the time complexity of the `nr` function has been reduced from O(n) to O(log n), and the number of multiplications in the `calc` function has been significantly reduced. Also, faster I/O operations have been enabled.