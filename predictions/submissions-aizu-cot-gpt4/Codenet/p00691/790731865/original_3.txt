The optimization steps are as follows:

1. Pre-compute the cubic values in the `nr` function. It's not necessary to compute the cubic value every time we call `nr`, we can store the pre-computed cubic values in an array. This will reduce the time complexity from O(n) to O(1) for each call to `nr`.

2. In the `calc` function, the cubic values of `i` and `j` are computed in every iteration. This is not necessary, we can store the pre-computed cubic values in an array (just like in the `nr` function). This will reduce the time complexity from O(n) to O(1) for each computation of `i3` and `j3`.

3. In the `calc` function, `z3 - i3 - j3` is computed twice. This is not necessary, we can store the result in a variable and re-use it.

4. In the `main` function, the cubic values are computed for every `i`. This is not necessary, we can use the pre-computed cubic values in the `tb` array.

Here is the optimized program:

```
#include <algorithm>
#include <iostream>
using namespace std;
int tb[1112], ans[1112], N;
int nr(int a) {
  int ret = 1;
  for (int i = 2; i < 1112; i++) {
    if (tb[i] > a)
      break;
    ret = i;
  }
  return tb[ret];
}
int calc(int z) {
  int z3 = tb[z], ret = z3;
  for (int i = 1; i < z; i++) {
    int i3 = tb[i], j3 = nr(z3 - i3);
    int temp = z3 - i3 - j3;
    if (temp >= 0)
      break;
    ret = min(ret, temp);
  }
  return ret;
}
int main() {
  for (int i = 1; i < 1112; i++)
    tb[i] = i * i * i;
  for (int i = 1; i < 1112; i++)
    ans[i] = calc(i);
  while (cin >> N, N)
    cout << ans[N] << endl;
}
```