The original program calculates the cube of given number z and finds the maximum sum of cubes of two numbers x and y that is less than or equal to z^3. It then prints the difference between z^3 and the maximum sum. The program calculates this for every z entered, until 0 is entered.

The primary optimization here is to reduce the number of redundant computations and to optimize the calculation of cubes. Right now, the program calculates z^3, x^3 and y^3 multiple times, which is unnecessary and increases the run-time.

Here are the steps to optimize the program:

1. Pre-calculate z^3 to avoid redundant computation in each iteration of the inner loop. Store it in a variable named z_cubed. Use this variable in the loop conditions and in the cout statement.

2. Similarly, pre-calculate x^3 in the outer loop and use it in the inner loop. Store it in a variable named x_cubed. 

3. Since y^3 is used only once, it's not necessary to store it in a variable. However, if you want to make the code clearer, you can create a variable y_cubed and calculate y^3 inside the inner loop.

4. Remove the unused function b_pow and the unused includes (algorithm, map, set).

Here is the optimized version of the C++ program:

```cpp
#include <iostream>
using namespace std;
typedef long long ll;

int main() {
  ll z;
  while (cin >> z && z) {
    ll z_cubed = z * z * z;
    ll ans = 0;

    for (ll x = 1; ; x++) {
      ll x_cubed = x * x * x;
      if (x_cubed >= z_cubed) break;

      for (ll y = 1; ; y++) {
        ll sum = x_cubed + y * y * y;
        if (sum > z_cubed) break;
        ans = max(ans, sum);
      }
    }

    cout << z_cubed - ans << endl;
  }
}
```
This optimized program reduces redundant calculations, which in turn reduces memory usage and processing time. It also makes the program clearer, as it's more obvious what each calculation is for.