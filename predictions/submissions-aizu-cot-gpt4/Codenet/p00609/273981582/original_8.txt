The given code is already quite optimized, but there are a few minor changes that can be made to improve efficiency:

1. The use of the `scanf()` and `printf()` functions in C++ is slower than using `cin` and `cout`. So, replacing `scanf()` and `printf()` with `cin` and `cout` can slightly improve the speed of the program.

2. In the `PlaneSweep()` function, the `erase()` function is called on `open[(int)p.type]` to remove an element. This operation can be costly as it has a time complexity of O(n). Instead, we can use the `set::iterator` to directly erase the specific element, which reduces the time complexity to O(1). To implement this, we need to store the iterator pointing to the inserted element and use this stored iterator to erase the element.

3. The `PlaneSweep()` function also calculates the square of distance using the `dist2()` function inside a loop. This could be avoided by calculating the square of the distance once and reusing it.

Here is the optimized version of the code:

```cpp
#include <algorithm>
#include <assert.h>
#include <iostream>
#include <math.h>
#include <set>
#include <stdio.h>
#include <string.h>
#include <vector>
using namespace std;
typedef long long ll;
static const double EPS = 1e-9;
static const double PI = acos(-1.0);
#define REP(i, n) for (int i = 0; i < (int)(n); ++i)
#define FOR(i, s, n) for (int i = (s); i < (int)(n); ++i)
#define FOREQ(i, s, n) for (int i = (s); i <= (int)(n); ++i)
#define FORIT(it, c) for (auto it = (c).begin(); it != (c).end(); ++it)
#define MEMSET(v, h) memset((v), (h), sizeof(v))
struct Point {
  int x;
  int y;
  char type;
  set<Point>::iterator it;
  Point() { ; }
  Point(int x, int y, int type) : x(x), y(y), type(type) { ; }
  bool operator<(const Point &rhs) const {
    if (y != rhs.y) {
      return y < rhs.y;
    }
    return x < rhs.x;
  }
};
struct Event {
  int x;
  Point p;
  char in;
  Event() { ; }
  Event(int x, Point p, int in) : x(x), p(p), in(in) { ; }
  bool operator<(const Event &rhs) const {
    if (x != rhs.x) {
      return x < rhs.x;
    }
    return in > rhs.in;
  }
};
inline int square(int x) { return x * x; }
inline int dist2(const Point &a, const Point &b) {
  return square(a.x - b.x) + square(a.y - b.y);
}
int an, bn, n;
int r;
Event event[500000];
int PlaneSweep() {
  int ans = 0;
  set<Point> open[2];
  REP(iter, n) {
    Event &e = event[iter];
    Point &p = e.p;
    if (e.in) {
      set<Point>::iterator lower =
          open[p.type ^ 1].lower_bound(Point(0, p.y - 4 * r - 1, 0));
      set<Point>::iterator upper =
          open[p.type ^ 1].upper_bound(Point(0, p.y + 4 * r + 1, 0));
      int dist_squared = 16 * r * r;
      for (set<Point>::iterator it = lower; it != upper; ++it) {
        if (dist2(*it, p) <= dist_squared) {
          ++ans;
        }
      }
      p.it = open[p.type].insert(p).first;
    } else {
      open[p.type].erase(p.it);
    }
  }
  return ans;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  while (cin >> an >> bn >> r, an | bn) {
    n = (an + bn) * 2;
    REP(i, an) {
      int x, y;
      cin >> x >> y;
      event[2 * i] = Event(x - 2 * r, Point(x, y, 0), 1);
      event[2 * i + 1] = Event(x + 2 * r, Point(x, y, 0), 0);
    }
    REP(i, bn) {
      int x, y;
      cin >> x >> y;
      event[2 * an + 2 * i] = Event(x - 2 * r, Point(x, y, 1), 1);
      event[2 * an + 2 * i + 1] = Event(x + 2 * r, Point(x, y, 1), 0);
    }
    sort(event, event + n);
    int ans = PlaneSweep();
    cout << ans << "\n";
  }
}
```