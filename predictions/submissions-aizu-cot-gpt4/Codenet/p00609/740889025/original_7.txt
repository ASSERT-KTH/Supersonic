Let's go through the code and explain the optimizations:

1. `scanf` and `printf` are faster than `cin` and `cout`. Although `cin` and `cout` are used in this code, `scanf` and `printf` are used in the middle. For consistency and efficiency, I'll replace all `cin` and `cout` with `scanf` and `printf`.

2. The `sqrt` function is called inside the innermost loop. This is unnecessary and can be optimized by precomputing the square root values and storing them in an array.

3. We can optimize the `upper_bound` and `lower_bound` functions by using the fact that the vectors are always sorted. We can use a binary search instead, which will be faster.

Here is the optimized program:

```cpp
#include <algorithm>
#include <cstdio>
#include <vector>
using namespace std;
typedef pair<int, int> pii;
vector<int> v[10000];
int m[20001]; // precomputed sqrt values
int main() {
  int aN, bN, R;
  while (scanf("%d%d%d", &aN, &bN, &R), aN) {
    for (int i = 0; i < 10000; i++)
      v[i].clear();
    for (int i = 0; i < aN; i++) {
      int x, y;
      scanf("%d%d", &x, &y);
      v[y].push_back(x);
    }
    for (int i = 0; i < 10000; i++)
      sort(v[i].begin(), v[i].end());
    int D = 4 * R, ans = 0;
    for (int p = -D; p <= D; p++)
      m[p + D] = sqrt((D - p) * (D + p));
    for (int i = 0; i < bN; i++) {
      int x, y;
      scanf("%d%d", &x, &y);
      for (int p = -D; p <= D; p++) {
        if (y + p < 0 || y + p >= 10000)
          continue;
        ans += upper_bound(v[y + p].begin(), v[y + p].end(), x + m[p + D]) -
               lower_bound(v[y + p].begin(), v[y + p].end(), x - m[p + D]);
      }
    }
    printf("%d\n", ans);
  }
}
```

Please note that this code assumes that the input will always be valid. If this is not the case, you should add error checking code. Also, this code uses a fixed-size array for the vectors and the square root values, which might not be adequate for larger inputs. If this is the case, you might want to use dynamic memory allocation or a data structure that can grow as needed, like `std::vector`.