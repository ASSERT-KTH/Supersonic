There are several steps we can take to optimize this program:

1. Use `ios_base::sync_with_stdio(false); cin.tie(NULL);` to disable the synchronization of the C and C++ standard streams. This can speed up `cin` and `cout` operations as the buffer doesn't need to be flushed between `cin` and `cout` operations.

2. Replace `scanf` with `cin` for consistency and to leverage the speed up from the previous step.

3. Pre-calculate the square root values and store them in an array to avoid repeated calculation in the loop. This step may increase memory usage slightly, but it will significantly decrease running time.

4. Use references to avoid copying vectors when accessing `v[y + p]`.

5. Instead of checking if `y + p` is in range in every iteration of the loop, we can calculate the valid range before the loop.

Here is the optimized program:

```cpp
#include <algorithm>
#include <cmath>
#include <iostream>
#include <vector>
using namespace std;
typedef pair<int, int> pii;
vector<int> v[10000];
double sqrt_values[20001];

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int aN, bN, R;
  for (int i = 0; i <= 20000; ++i) {
    sqrt_values[i] = sqrt((10000 - i) * (10000 + i));
  }
  while (cin >> aN >> bN >> R, aN) {
    for (int i = 0; i < 10000; i++)
      v[i].clear();
    for (int i = 0; i < aN; i++) {
      int x, y;
      cin >> x >> y;
      v[y].push_back(x);
    }
    for (int i = 0; i < 10000; i++)
      sort(v[i].begin(), v[i].end());
    int D = 4 * R, ans = 0;
    int start = max(0, -D), end = min(9999, bN + D);
    for (int i = 0; i < bN; i++) {
      int x, y;
      cin >> x >> y;
      for (int p = start; p <= end; p++) {
        vector<int> &vp = v[y + p];
        int m = sqrt_values[D + p];
        ans += upper_bound(vp.begin(), vp.end(), x + m) -
               lower_bound(vp.begin(), vp.end(), x - m);
      }
    }
    cout << ans << endl;
  }
}
```
Please note that this optimization may not result in significant improvements if the input size is small. However, for large inputs, these changes can drastically reduce the running time.