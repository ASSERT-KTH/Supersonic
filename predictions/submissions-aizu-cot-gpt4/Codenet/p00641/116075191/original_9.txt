Optimization Steps:

1. Avoiding Global Variables: Global variables in C/C++ can lead to problems such as accidental modification and increased memory usage. It is better to pass these as function arguments.

2. Avoiding Recursion: Recursion consumes more memory as the function call stack needs to be maintained. Sometimes it may also lead to stack overflow errors for large inputs. Therefore, it is better to convert recursion to iteration.

3. Using Fast Input/Output Methods: cin and cout are slower compared to scanf and printf. Therefore, we can use scanf and printf for faster input/output.

4. Use of Modulo operation: The modulo operation is a costly operation and it has been used inside a loop. We can use properties of modulo operation to optimize it.

Here is the optimized version of the provided program:

```cpp
#include <cstdio>
#include <vector>
using namespace std;

int dfs(int s, vector<vector<int>>& b, vector<vector<int>>& f, vector<bool>& v, int now, int maxi, int num) {
  v[now] = true;
  for (int i = 0; i < 2; i++) {
    if (!v[b[i][now]]) {
      if (maxi == f[i][now])
        num++;
      else if (maxi < f[i][now]) {
        maxi = f[i][now];
        num = 1;
      }
      while(b[i][now] != s){
        now = b[i][now];
        v[now] = true;
        if (maxi == f[i][now])
            num++;
        else if (maxi < f[i][now]) {
            maxi = f[i][now];
            num = 1;
        }
      }
      return num;
    }
  }
  if (maxi == f[1][s])
    return num + 1;
  else if (maxi < f[1][s])
    return 1;
  else
    return num;
}

int main() {
  int n;
  while (scanf("%d", &n), n) {
    vector<vector<int>> b(2, vector<int>(n));
    vector<vector<int>> f(2, vector<int>(n));
    vector<bool> v(n, false);
    for (int i = 0; i < n; i++) {
      scanf("%d %d %d %d", &b[0][i], &f[0][i], &b[1][i], &f[1][i]);
    }
    int ans = 1;
    for (int i = 0; i < n; i++) {
      if (!v[i]) {
        v[i] = true;
        int temp = dfs(i, b, f, v, b[0][i], f[0][i], 1);
        ans = ans >= 10007 ? (ans * temp) % 10007 : ans * temp;
      }
    }
    printf("%d\n", ans);
  }
  return 0;
}
```

Please note that the optimization made here assumes that the input data is not malicious and will not cause an infinite loop. In a real-world scenario, we would need to add checks for that.