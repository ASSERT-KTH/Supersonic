This code cannot be optimized further in terms of memory usage, but the algorithm can be optimized to reduce run-time using memoization technique. 

In the given code, the function dfs(int s, int now, int maxi, int num) is a recursive function which is called for every node in the graph. For large inputs, the function could potentially be called multiple times with the same arguments, leading to redundant computation. 

To reduce this, we can use memoization which is a technique to store the results of expensive function calls and reusing them when same inputs occur again. 

Here is the optimized code:

```
#include <iostream>
#include <map>
using namespace std;
int n, b[2][100100], f[2][100100];
bool v[100100];
map< pair<int, pair<int, pair<int, int> > >, int> memo;

int dfs(int s, int now, int maxi, int num) {
  pair<int, pair<int, pair<int, int> > > p = make_pair(s, make_pair(now, make_pair(maxi, num)));
  if (memo.find(p) != memo.end())
    return memo[p];
    
  v[now] = true;
  for (int i = 0; i < 2; i++) {
    if (!v[b[i][now]]) {
      if (maxi == f[i][now])
        num++;
      else if (maxi < f[i][now]) {
        maxi = f[i][now];
        num = 1;
      }
      if (b[i][now] == s)
        return memo[p] = num;
      return memo[p] = dfs(s, b[i][now], maxi, num);
    }
  }
  if (maxi == f[1][s])
    return memo[p] = num + 1;
  else if (maxi < f[1][s])
    return memo[p] = 1;
  else
    return memo[p] = num;
}

int main() {
  while (cin >> n, n) {
    for (int i = 0; i < n; i++) {
      cin >> b[0][i] >> f[0][i] >> b[1][i] >> f[1][i];
      v[i] = false;
    }
    int ans = 1;
    for (int i = 0; i < n; i++) {
      if (!v[i]) {
        v[i] = true;
        ans = (ans * dfs(i, b[0][i], f[0][i], 1)) % 10007;
      }
    }
    cout << ans << endl;
    memo.clear();
  }
}
```

This optimization checks whether a particular function call is already computed and stored in the map. If it is, the stored value is returned immediately, avoiding redundant computation. 

Please note that this approach increases memory usage to some extent due to storage of previous function call results. But it significantly reduces the running time especially when the inputs are large.