The code provided is quite efficient. However, there are a few areas where we can make small improvements for optimization. 

1. Instead of using `std::map`, we can use `std::unordered_map` which provides constant time complexity O(1) on average for search, insert and delete operations as compared to map which provides log(n) time complexity. 

2. Instead of using `queue.size()` inside the loop condition, we can directly use `!queue.empty()`. The reason for this change is that `queue.size()` function can take O(n) time in some implementations where n is the number of elements in the queue, whereas `!queue.empty()` is guaranteed to take constant time. 

3. We are currently using `g.find(nval) != g.end()` to check if an element exists in the map and then using `g[nval]` to access the element. This results in two lookups for the same element. We can instead use a single lookup by using `g.find(nval)` once and storing the iterator. This iterator can then be used to access the element. 

Here is the optimized code:

```cpp
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <functional>
#include <iostream>
#include <unordered_map>
#include <queue>
#include <set>
#include <string>
#include <vector>
#define MOD 1000000007LL
using namespace std;
typedef long long ll;
typedef pair<int, int> P;
int n, m, k;
int x[100001], y[100001];
unordered_map<ll, int> g;
int cost[100001];
// ... (keep the bfs functions same with the changes mentioned above)

int main(void) {
  scanf("%d%d%d", &n, &m, &k);
  for (int i = 0; i < k; i++) {
    scanf("%d%d", &x[i], &y[i]);
    g[(ll)y[i] * n + x[i]] = i;
  }
  int res = 2;
  res = min(res, bfs());
  res = min(res, bfs2());
  res = min(res, bfs3());
  res = min(res, bfs4());
  printf("%d\n", res);
  return 0;
}
```

Remember to replace all the instances of `while(queue.size())` with `while(!queue.empty())`, and replace all the instances of `g.find(nval) != g.end()` with storing and using iterator. 

Also, note that switching from `std::map` to `std::unordered_map` can improve performance on average, but it could also potentially worsen performance in the worst-case scenario. Similarly, using `queue.empty()` instead of `queue.size()` will improve performance in some implementations, but not all. Always measure and test your changes to ensure they actually provide a benefit for your specific use case.