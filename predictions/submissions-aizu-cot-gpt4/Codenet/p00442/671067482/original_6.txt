This program seems to implement a topological sort using Kahn's algorithm. Here are some steps to optimize the program:

1. Remove unused `#include <algorithm>` and `typedef pair<int, int> pii`, these are not used anywhere in the program.
2. Use `ios_base::sync_with_stdio(false); cin.tie(NULL);` to speed up the I/O operations.
3. Use `vector::back()` and `vector::pop_back()` instead of `vector::erase()`. `vector::erase()` is a costly operation that takes linear time, while `vector::back()` and `vector::pop_back()` take constant time.
4. The `flag` variable is not necessary. As we can print out "0" or "1" depending on the size of `next` after the main loop.

Here's your optimized code:

```c++
#include <cstdio>
#include <iostream>
#include <vector>
using namespace std;
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define REP(i, n) FOR(i, 0, n)
int n, m;
vector<int> edge[5000];
int cnt[5000];
int main() {
  ios_base::sync_with_stdio(false); 
  cin.tie(NULL);
  cin >> n >> m;
  REP(i, m) {
    int a, b;
    scanf("%d %d", &a, &b);
    a--;
    b--;
    edge[a].push_back(b);
    cnt[b]++;
  }
  vector<int> ans;
  vector<int> next;
  REP(i, n) if (cnt[i] == 0) next.push_back(i);
  REP(i, n) {
    int tar = next.back();
    next.pop_back();
    ans.push_back(tar + 1);
    REP(j, edge[tar].size()) {
      int to = edge[tar][j];
      if (--cnt[to] == 0)
        next.push_back(to);
    }
  }
  REP(i, ans.size()) printf("%d\n", ans[i]);
  if (next.size() > 0)
    puts("1");
  else
    puts("0");
  return 0;
}
```

Please note that this code is optimized for speed, not for memory usage. The memory usage is already optimal given the problem constraints. The only way to reduce memory usage would be to reduce the problem constraints (e.g., the maximum number of nodes or edges).