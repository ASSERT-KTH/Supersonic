Here are the steps for optimization:

1. Use std::ios::sync_with_stdio(0); cin.tie(0); to speed up cin and cout.

2. Change from scanf and printf to cin and cout for consistency and to avoid the overhead of switching between them.

3. Instead of using next.erase(next.end() - 1) to remove the last element of the vector, use next.pop_back(). This is because pop_back() is faster than erase(), it has a constant time complexity O(1), while erase() has a linear time complexity O(n).

4. Instead of checking if next.size() > 0 to set the flag variable, the flag can be set directly inside the FOR loop when a new item is added to the 'next' vector. This will avoid unnecessary checking of the vector size.

Here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define REP(i, n) FOR(i, 0, n)
typedef pair<int, int> pii;
int n, m;
vector<int> edge[5000];
int cnt[5000];
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cin >> n >> m;
  REP(i, m) {
    int a, b;
    cin >> a >> b;
    a--;
    b--;
    edge[a].push_back(b);
    cnt[b]++;
  }
  vector<int> ans;
  bool flag = false;
  vector<int> next;
  REP(i, n) if (cnt[i] == 0) next.push_back(i);
  REP(i, n) {
    int tar = next.back();
    ans.push_back(tar + 1);
    next.pop_back();
    REP(j, edge[tar].size()) {
      int to = edge[tar][j];
      if (--cnt[to] == 0) {
        next.push_back(to);
        flag = true;
      }
    }
  }
  REP(i, ans.size()) cout << ans[i] << "\n";
  cout << (flag ? 1 : 0) << "\n";
  return 0;
}
```
