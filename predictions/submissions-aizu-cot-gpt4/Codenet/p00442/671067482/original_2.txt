Here are some steps to optimize the given program:

1. Use reserve() function: std::vector::reserve() can be used to avoid reallocation when we know the number of elements we are going to insert. This function does not change the size of the vector but reserves space for future elements, thus reducing the amount of reallocation.

2. Avoid using `erase()` function: Erasing the last element from the vector using the `erase()` function is inefficient. It is better to use `pop_back()`, which does not need to shift all the elements and hence, is faster.

3. Use prefix decrement: Instead of using postfix decrement (--cnt[to]), use prefix decrement (cnt[to]--). The prefix form (--x) is faster because it doesn't need to make a copy of the original value.

4. Use 'emplace_back()' instead of 'push_back()': 'emplace_back()' constructs the object in-place and avoids an extra copy. This is more efficient in terms of speed.

Here is the optimized code:

```C++
#include <algorithm>
#include <cstdio>
#include <iostream>
#include <vector>
using namespace std;
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define REP(i, n) FOR(i, 0, n)
typedef pair<int, int> pii;
int n, m;
vector<int> edge[5000];
int cnt[5000];
int main() {
  cin >> n >> m;
  REP(i, m) {
    int a, b;
    scanf("%d %d", &a, &b);
    a--;
    b--;
    edge[a].emplace_back(b);
    cnt[b]++;
  }
  vector<int> ans;
  ans.reserve(n); // Reserve space for 'n' elements
  bool flag = false;
  vector<int> next;
  next.reserve(n); // Reserve space for 'n' elements
  REP(i, n) if (cnt[i] == 0) next.emplace_back(i);
  REP(i, n) {
    int tar = next.back(); // Get the last element
    ans.emplace_back(tar + 1);
    next.pop_back(); // Remove the last element
    if (!next.empty())
      flag = true;
    REP(j, edge[tar].size()) {
      int to = edge[tar][j];
      if (--cnt[to] == 0) // Use prefix decrement
        next.emplace_back(to);
    }
  }
  REP(i, ans.size()) printf("%d\n", ans[i]);
  if (flag)
    puts("1");
  else
    puts("0");
  return 0;
}
```

Please note that the impact of these optimizations on the execution time and memory usage of the program might be minor and may not be noticeable for small inputs. However, they can be significantly beneficial for larger inputs.