The provided code is a topological sorting algorithm for directed graph. The optimization can be done in the following ways:

1. In the main function, instead of using 'scanf' and 'printf', use 'cin' and 'cout'. This will not only make the code look consistent but also 'cin' and 'cout' are usually faster than 'scanf' and 'printf' in C++.

2. Instead of decrementing 'cnt[to]' and checking if it is zero in one step, decrement it first and then check if it is zero. This will avoid one unnecessary operation.

3. Instead of using 'next.size()' multiple times, store it in a variable and use that variable. This will avoid multiple calls to 'size()' function.

4. Instead of using 'next.push_back()' and 'next.erase(next.end() - 1)', use 'next.pop_back()'. This will avoid unnecessary operation of removing element from the end.

5. Instead of using 'next[next.size() - 1]' to get the last element of 'next', use 'next.back()'. This will improve readability and performance of the code.

6. Instead of using 'REP(i, ans.size())' to iterate over 'ans', use range-based for loop. This will improve readability and performance of the code.

Here is the optimized code:

```
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define REP(i, n) FOR(i, 0, n)
typedef pair<int, int> pii;
int n, m;
vector<int> edge[5000];
int cnt[5000];
int main() {
  cin >> n >> m;
  REP(i, m) {
    int a, b;
    cin >> a >> b;
    a--;
    b--;
    edge[a].push_back(b);
    cnt[b]++;
  }
  vector<int> ans;
  bool flag = false;
  vector<int> next;
  REP(i, n) if (cnt[i] == 0) next.push_back(i);
  REP(i, n) {
    int tar = next.back();
    ans.push_back(tar + 1);
    next.pop_back();
    int nextSize = next.size();
    if (nextSize > 0)
      flag = true;
    REP(j, edge[tar].size()) {
      int to = edge[tar][j];
      cnt[to]--;
      if (cnt[to] == 0)
        next.push_back(to);
    }
  }
  for (auto i : ans) cout << i << "\n";
  if (flag)
    cout << "1\n";
  else
    cout << "0\n";
  return 0;
}
```