The program is implementing the Topological Sorting Algorithm for a directed graph. The `next` vector contains the vertices with no incoming edges. These vertices are removed one by one and added to the answer. The vertices they point to have their incoming edge count decremented and if it becomes zero they are added to the `next` vector.

Optimization Steps:

1. Instead of using `vector::erase()` to remove the last element from the `next` vector, use `vector::pop_back()`. `erase()` function in vector is an O(n) operation whereas `pop_back()` function is an O(1) operation.

2. The `flag` variable is used to check if the `next` vector has more than one vertex at the beginning of each iteration. This can be checked at the end of the loop so no need to check it in every iteration.

3. `printf` and `puts` are slower than `cout` operations. Since the program is using `std::cin` for input, it's better to use `std::cout` for output.

4. Instead of using `FOR` and `REP` macros, we can use range-based for loops which are more readable and less error-prone.

5. `vector<int> ans;` is declared but is not used in the computation. We can remove this declaration.

Optimized Code:

```
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
typedef pair<int, int> pii;
int n, m;
vector<int> edge[5000];
int cnt[5000];
int main() {
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int a, b;
    cin >> a >> b;
    a--;
    b--;
    edge[a].push_back(b);
    cnt[b]++;
  }
  bool flag = false;
  vector<int> next;
  for (int i = 0; i < n; i++) if (cnt[i] == 0) next.push_back(i);
  for (int i = 0; i < n; i++) {
    int tar = next.back();
    next.pop_back();
    cout << tar + 1 << '\n';
    if (!next.empty())
      flag = true;
    for (int to : edge[tar]) {
      if (--cnt[to] == 0)
        next.push_back(to);
    }
  }
  cout << (flag ? "1\n" : "0\n");
  return 0;
}
```