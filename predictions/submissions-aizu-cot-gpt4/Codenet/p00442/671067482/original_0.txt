The given program is implementing the topological sorting algorithm, which is used for directed acyclic graphs (DAGs). The algorithm finds a linear ordering of vertices such that for every directed edge u -> v, vertex u comes before v in the ordering. 

Optimization steps:

1. Instead of using the next.erase(next.end() - 1) which has a time complexity of O(n), we can use a stack data structure that will reduce the time complexity to O(1) for both pushing and popping elements. 

2. The 'flag' variable is set to true if the size of 'next' is more than 0. However, there is no need to check this in every iteration. We can check the size of 'next' only after the end of the loop.

3. Instead of using the REP(i, ans.size()) macro to print the answer, we can directly use a range-based for loop.

Here is the optimized code:

```cpp
#include <algorithm>
#include <cstdio>
#include <iostream>
#include <vector>
#include <stack>
using namespace std;
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define REP(i, n) FOR(i, 0, n)
typedef pair<int, int> pii;
int n, m;
vector<int> edge[5000];
int cnt[5000];
int main() {
  cin >> n >> m;
  REP(i, m) {
    int a, b;
    scanf("%d %d", &a, &b);
    a--;
    b--;
    edge[a].push_back(b);
    cnt[b]++;
  }
  vector<int> ans;
  stack<int> next;
  REP(i, n) if (cnt[i] == 0) next.push(i);
  REP(i, n) {
    int tar = next.top();
    ans.push_back(tar + 1);
    next.pop();
    REP(j, edge[tar].size()) {
      int to = edge[tar][j];
      if (--cnt[to] == 0)
        next.push(to);
    }
  }
  for(int i : ans) printf("%d\n", i);
  if (!next.empty())
    puts("1");
  else
    puts("0");
  return 0;
}
```
