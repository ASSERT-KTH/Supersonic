The given C++ program has a few places where we can make small optimizations to improve its performance.

1. Reserve space for vectors: The vectors `next` and `ans` are dynamically growing during the program execution. We can reserve space for them initially to prevent unnecessary reallocations of memory.

2. Use `pop_back()` instead of `erase(end() - 1)`: `erase()` function is generally costly as it needs to shift all the elements after the erased one. As we are removing the last element in the vector, we can use `pop_back()` which simply removes the last element without any shifting.

3. Avoid using `vector.size()`: The size of the vector is called multiple times in the code. We can store it in a separate variable and update it when necessary.

4. Avoid checking `next.size() > 0`: This check is not necessary as the loop already ensures that the program won't go into the block if `next` is empty.

Here's the optimized code:

```cpp
#include <algorithm>
#include <cstdio>
#include <iostream>
#include <vector>
using namespace std;
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define REP(i, n) FOR(i, 0, n)
typedef pair<int, int> pii;
int n, m;
vector<int> edge[5000];
int cnt[5000];
int main() {
  cin >> n >> m;
  REP(i, m) {
    int a, b;
    scanf("%d %d", &a, &b);
    a--;
    b--;
    edge[a].push_back(b);
    cnt[b]++;
  }
  vector<int> ans;
  ans.reserve(n);
  bool flag = false;
  vector<int> next;
  next.reserve(n);
  REP(i, n) if (cnt[i] == 0) next.push_back(i);
  int nextSize = next.size();
  REP(i, n) {
    int tar = next[nextSize - 1];
    ans.push_back(tar + 1);
    next.pop_back();
    nextSize--;
    REP(j, edge[tar].size()) {
      int to = edge[tar][j];
      if (--cnt[to] == 0)
        next.push_back(to);
    }
    nextSize = next.size();
  }
  REP(i, ans.size()) printf("%d\n", ans[i]);
  if (flag)
    puts("1");
  else
    puts("0");
  return 0;
}
```