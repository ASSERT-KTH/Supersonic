The program you've provided is already quite well optimized. However, there are still a few minor changes that could be made to improve performance:

1. The `#include <bits/stdc++.h>` statement, which is a non-standard header file that includes all standard C++ libraries. This can slow down compilation time and increase memory usage. It's better to include only the libraries you need.

2. The map `mp` is used to store pairs of numbers as keys. A more efficient alternative would be to use a `set` of pairs, as we only care about presence, not about value.

3. The class `t_sort` contains a `tsort` function that uses a stack to perform a topological sort. By replacing the stack with a queue, the data structure won't need to be resized as often, which can improve performance.

4. The `tsort` function also contains a loop that iterates over all child nodes of a node. This loop could be replaced with a `for-each` loop, which is more C++ idiomatic and can be more efficient.

Here's the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <deque>
#include <queue>
#include <set>
#include <algorithm>

using namespace std;
typedef long long ll;
typedef pair<ll, ll> Pll;

class TSort {
public:
  ll n;
  vector<ll> ans, deg;
  vector<vector<ll>> G;

  void init(ll N) {
    n = N;
    deg.resize(n);
    G.resize(n);
  }

  void add_edge(ll from, ll to) {
    G[from].push_back(to);
    deg[to]++;
  }

  void tsort() {
    queue<ll> q;
    for(ll i = 0; i < n; i++) if (deg[i] == 0) q.push(i);
    while (!q.empty()) {
      ll v = q.front();
      q.pop();
      ans.push_back(v);
      for(auto& child : G[v]) if (--deg[child] == 0) q.push(child);
    }
  }
};

set<Pll> edges;

int main() {
  ll n, m;
  scanf("%lld%lld", &n, &m);
  TSort t;
  t.init(n);
  for(ll i = 0; i < m; i++) {
    ll x, y;
    scanf("%lld%lld", &x, &y);
    x--; y--;
    t.add_edge(x, y);
    edges.insert(Pll(x, y));
  }
  t.tsort();
  vector<ll> ans = t.ans;
  for(ll i = 0; i < n; i++) printf("%lld\n", ans[i] + 1);
  ll res = 1;
  for(ll i = 0; i < n - 1; i++) {
    if (edges.find(Pll(ans[i], ans[i + 1])) == edges.end())
      res = 0;
  }
  printf("%lld\n", res == 1 ? 0 : 1);
  return 0;
}
```