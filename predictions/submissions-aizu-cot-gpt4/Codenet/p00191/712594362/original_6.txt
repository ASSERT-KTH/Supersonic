The current program is already quite optimized. But there are a few small changes that could be made:

1. Move the condition "times == 0" outside of the loop as it only needs to be checked once. This removes an unnecessary check in each iteration.
2. Use "std::fill" instead of typecasting the dp array to a double pointer. This will make the code easier to read and less error-prone.
3. Instead of rounding retd and then dividing by 100, you can use the printf function to do this automatically.

Here's how the optimized code would look:

```cpp
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <iostream>
using namespace std;
int n, m;
double dp[101][101];
double t[101][101];
double solve(int times, int prev) {
  if (dp[times][prev] != -1)
    return dp[times][prev];
  if (times == m)
    return dp[times][prev] = 1;
  double tmp = -1;
  if (times == 0) {
    for (int i = 0; i < n; i++) {
      tmp = max(tmp, solve(times + 1, i));
    }
  } else {
    for (int i = 0; i < n; i++) {
      tmp = max(tmp, solve(times + 1, i) * t[prev][i]);
    }
  }
  return dp[times][prev] = tmp;
}
int main(void) {
  while (cin >> n >> m) {
    if (!(n | m))
      break;
    fill(&dp[0][0], &dp[0][0] + sizeof(dp) / sizeof(double), -1);
    int ret;
    double retd;
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        cin >> t[i][j];
      }
    }
    retd = solve(0, 0) * 100;
    printf("%.2lf\n", retd);
  }
}
```

This program is slightly more efficient in terms of running time due to the removal of the unnecessary condition check inside the loop. The memory usage remains the same as no new variables or data structures are introduced. The changes also make the code slightly more readable.