Here are some steps to optimize the program:

1) Avoid using macros when not necessary: Macros like REP and rep are not needed here and add unnecessary complexity. We can replace them with standard for-loops to make the code simpler and more readable.

2) Remove unnecessary variables: The variable 'k' in the main function is not used at all, so it can be removed.

3) Use better variable names: This is not a performance optimization, but it will make the code easier to understand and maintain. For example, 'n' and 'm' are not very descriptive names.

4) Use fast I/O operations: Instead of using scanf and printf, we can use faster I/O operations for large inputs and outputs. This is especially important for competitive programming.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <cstring>

double a[101][101];
double memo[101][101][101];

double solve(int total, int remaining, int current, int next) {
    if (remaining == 1)
        return 1;
    if (memo[current][remaining][next] > 0)
        return memo[current][remaining][next];
    double result = 0;
    for (int i = 0; i < total; ++i) 
        result = std::max(result, solve(total, remaining - 1, current, i) * a[current][i]);
    return memo[current][remaining][next] = result;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    int total, remaining;
    double result;
    while (std::cin >> total >> remaining, total | remaining) {
        std::memset(memo, 0, sizeof(memo));
        for (int i = 0; i < total; ++i) 
            for (int j = 0; j < total; ++j) 
                std::cin >> a[i][j];
        result = 0;
        for (int i = 0; i < total; ++i) 
            for (int j = 0; j < total; ++j) 
                result = std::max(result, solve(total, remaining, i, j));
        std::cout << result << "\n";
    }
    return 0;
}
```
Note: While it's often good to optimize for speed, it's also important to write clean, maintainable code. Sometimes these goals can conflict, so you need to find a good balance. In this case, the optimizations do not significantly change the structure of the code, and they make it easier to understand.