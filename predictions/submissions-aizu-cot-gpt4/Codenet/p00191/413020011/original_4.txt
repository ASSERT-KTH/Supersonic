The optimization techniques that can be applied to this C/C++ program are:

1. **Elimination of unnecessary calculations**: In the function `solve`, we are calculating the same value for `solve(n, m - 1, p, i) * a[p][i]` for every iteration of `i`. We can compute this value once and use it in the max function instead of computing it repeatedly in each iteration.

2. **Use of const variables**: The variables `n`, `m`, `p`, `i`, `j` and `k` in the function `solve` are not changing within the function. Thus, they can be declared as const to improve readability and potentially enable certain compiler optimizations.

3. **Inline function**: The function `solve` is called multiple times within a loop in the `main` function. This can be costly in terms of time because of the overhead of function calls. Inlining the function could help in reducing this overhead, but only if the function is small enough. However, given the complexity of the `solve` function, it might not be a good candidate for inlining.

Optimized program:

```c++
#include <stdio.h>
#include <string.h>
#define REP(i, a, b) for (i = (a); i < (b); ++i)
#define rep(i, n) REP(i, 0, n)
#define MAX(a, b) ((a) > (b) ? (a) : (b))
double a[101][101];
double memo[101][101][101];
double solve(const int n, const int m, const int k, const int p) {
  double res;
  int i;
  if (m == 1)
    return 1;
  if (memo[p][m][k] > 0)
    return memo[p][m][k];
  res = 0;
  double temp;
  rep(i, n) {
    temp = solve(n, m - 1, p, i) * a[p][i];
    res = MAX(res, temp);
  }
  return memo[p][m][k] = res;
}
int main(void) {
  int n, m, i, j;
  double res;
  while (scanf("%d%d", &n, &m), n | m) {
    memset(memo, 0, sizeof(memo));
    rep(i, n) rep(j, n) scanf("%lf", &a[i][j]);
    res = 0;
    rep(i, n) res = MAX(res, solve(n, m, i, i));
    printf("%.2f\n", res);
  }
  return 0;
}
```
Please note that optimizations will depend on the specific compiler and platform you are using. These are general optimizations that should apply across a variety of compilers and platforms.