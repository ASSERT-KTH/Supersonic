The given C program can be optimized in several ways. Here are the steps:

1. The variables `c`, `d`, `m`, `t`, `u`, `i`, `f` are global variables. It is a good practice to minimize the use of global variables. Instead, use local variables when possible. This reduces the scope of these variables, making the program easier to understand and less likely to have bugs. For this program, it is better to declare these variables inside the `main` function.

2. The `scanf` function is used with a `%d\n` format string stored in the variable `f`. Instead of storing the format string in a variable, you can directly use it in the `scanf` and `printf` functions. This can save a bit of memory.

3. The program uses a cryptic way to print the result and reinitialize the variable `m` to 0. It is better to separate these two operations to make the code more readable.

4. The given code does not check whether the `scanf` function successfully reads the input. It is a good practice to always check the return value of `scanf` to make sure the input is correctly read.

Here is the optimized version of the given program:

```cpp
#include <stdio.h>

int main() {
    int c[5004], d[5004], m = 0, t, u, i = 0, x;
    for (scanf("%d%*d", c); i < *c; scanf("%d", ++i + c))
        ;
    while(scanf("%d", &x) == 1) {
        for (u = i = t = 0; i++ < *c; t = d[i], d[i] = m < u ? m = u : u)
            u = x - c[i] ? u : t + 1;
    }
    printf("%d\n", m);
    m = 0;
    return 0;
}
```

Explanation:

1. The global variables are moved inside the `main` function. This reduces their scope and makes the program easier to read.

2. The format string `%d\n` is directly used in the `scanf` and `printf` functions, instead of being stored in the variable `f`.

3. The `printf` function is used to print the result and then the variable `m` is reinitialized to 0. This makes the code more readable.

4. The `scanf` function is used with a check to ensure that the input is correctly read. If `scanf` fails to read the input, the program will not enter the while loop.