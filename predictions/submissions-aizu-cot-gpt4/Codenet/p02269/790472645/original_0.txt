This program is not very efficient due to a few reasons:

1. The use of a large static array: Static array `dic` is of size 90,000,000 which is consuming a lot of memory. We can switch to a hash map or an unordered map (in c++ STL), which will only store the keys that are actually used.

2. Usage of `scanf` and `puts`: The `scanf` and `puts` functions are slower than their c++ counterparts `cin` and `cout`. We can replace `scanf` with `cin` and `puts` with `cout` for faster input/output.

3. Using cin and cout directly: Even though `cin` and `cout` are faster than `scanf` and `puts`, we can still speed them up by adding `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` at the beginning of main(), which will make them as fast as scanf and printf.

Here is the optimized code:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;
typedef long long ll;

ll dic_op(char str[14]) {
  ll j;
  ll f = 1;
  ll g = 0;
  for (j = 0;; j++) {
    if (str[j] == 'A')
      g += f * 1;
    else if (str[j] == 'C')
      g += f * 2;
    else if (str[j] == 'G')
      g += f * 3;
    else if (str[j] == 'T')
      g += f * 4;
    else
      break;
    f *= 5;
  }
  return g;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n;
  unordered_map<ll, bool> dic;
  char opstr[7];
  char str[13];
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> opstr >> str;
    if (opstr[0] == 'i') {
      dic[dic_op(str)] = true;
    } else if (opstr[0] == 'f') {
      if (dic[dic_op(str)])
        cout << "yes\n";
      else
        cout << "no\n";
    }
  }
  return 0;
}
```
This code is optimized in terms of both memory and speed. The memory usage has been significantly reduced by switching to an unordered map, and input/output operations are faster due to using `cin` and `cout` instead of `scanf` and `puts`, along with `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)`. Also, we have removed some unused variables which makes the code cleaner.