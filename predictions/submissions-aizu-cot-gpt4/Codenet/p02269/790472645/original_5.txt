The main optimization for this program will be in the dic_op function where we can reduce the number of conditional checks by using switch-case instead of if-else-if ladder. Switch-case in C/C++ is generally faster than if-else if the number of conditions are more than 5.

The pow function is not used anywhere, so it can be removed to save memory.

The unused variables in main function (j, k, l) can also be removed to save memory.

The scanf function can be replaced with cin for consistency of I/O operations.

The REP macro is not used anywhere. So, it can be removed.

These are minor optimizations and based on the context of the overall project they might have more or less impact.

Here is the optimized code:

```cpp
#include <iostream>
#define MOD1 1000000007;
#define MOD2 1000007
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

int dic_op(char str[14]) {
  ll f = 1;
  ll g = 0;
  for (int j = 0;; j++) {
    switch(str[j]){
        case 'A': g += f * 1; break;
        case 'C': g += f * 2; break;
        case 'G': g += f * 3; break;
        case 'T': g += f * 4; break;
        default:  return g;
    }
    f *= 5;
  }
}

int main() {
  int n;
  long ans = 0;
  static char dic[90000000];
  char opstr[7];
  char str[13];
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> opstr >> str;
    if (opstr[0] == 'i') {
      dic[dic_op(str)] = 1;
    } else if (opstr[0] == 'f') {
      if (dic[dic_op(str)] == 1)
        puts("yes");
      else
        puts("no");
    }
  }
  return 0;
}
```