This program is already quite optimized. The optimization steps for this program could include:

1. Using switch cases instead of if-else ladders: The character comparison in the `h` function can be optimized using a switch case instead of if-else. Switch cases are faster than if-else ladders because they use a jump table in the background. In the case of if-else, the condition is checked sequentially which takes more time than a switch.

2. Using `std::unordered_map` instead of array `chk[]`: You are using a very large array `chk[244140624]` to store values. This might cause memory problems. By replacing this array with `std::unordered_map`, you can save memory space. `std::unordered_map` only stores the elements that you insert into it, not the entire range of possible indices, which can save a lot of memory. Also, `std::unordered_map` has almost constant time complexity for search, insert and delete operations.

3. Reducing string size: In main, you are comparing `ins[0]` with `'i'`, it means you don't need the entire string `ins`, you only need the first character. So, instead of string, you can use a character variable.

Here is the optimized version of your code incorporating these changes:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;
unordered_map<int, bool> chk;
int n;
char ins;
string s;

int h(string s) {
  int ret = 0;
  for (int i = 0; i < (int)s.size(); ++i) {
    ret *= 5;
    switch (s[i]) {
      case 'A':
        ret += 1;
        break;
      case 'C':
        ret += 2;
        break;
      case 'G':
        ret += 3;
        break;
      case 'T':
        ret += 4;
        break;
    }
  }
  return ret;
}

int main() {
  ios::sync_with_stdio(false);
  cin >> n;
  while (n--) {
    cin >> ins >> s;
    if (ins == 'i') {
      chk[h(s)] = true;
    } else {
      cout << (chk[h(s)] ? "yes" : "no") << endl;
    }
  }
  return 0;
}
```
This version of the code should work the same way as the original one but with more efficient use of memory and a potentially faster execution time.