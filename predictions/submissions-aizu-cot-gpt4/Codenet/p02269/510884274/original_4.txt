Let's optimize the above code:

1. We can see that the function `h()` is being called twice in the main function if `ins[0] != 'i'`. In the case of `ins[0] == 'i'`, it is being called once. So, we can optimize it by calling this function once and storing its result in a variable and then using that variable.

2. The hash function `h()` is using multiplication which is a relatively time-consuming operation. We can optimize it by using bitwise operations. The multiplication `ret *= 5;` can be replaced with `ret = (ret << 2) + ret;`. The left shift operator `<<` multiplies the number by 2 to the power of its right operand and addition `+ ret` is equivalent to multiplication by 5.

3. We can use `std::unordered_map` instead of an array for `chk[]`. Unordered map in C++ STL uses hashing mechanism. By using `unordered_map`, we can easily handle the case when the size of the string becomes bigger than the size of the array `chk[]`.

Let's have the optimized version of the code:

```cpp
#include <iostream>
#include <string>
#include <unordered_map>
using namespace std;
unordered_map<int, bool> chk;
int n;
string ins, s;

int h(const string &s) {
  int ret = 0;
  for (char c : s) {
    ret = (ret << 2) + ret;
    if (c == 'A')
      ret += 1;
    else if (c == 'C')
      ret += 2;
    else if (c == 'G')
      ret += 3;
    else if (c == 'T')
      ret += 4;
  }
  return ret;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0); // For faster input
  cin >> n;
  while (n--) {
    cin >> ins >> s;
    int hval = h(s);
    if (ins[0] == 'i') {
      chk[hval] = true;
    } else {
      cout << (chk[hval] ? "yes" : "no") << endl;
    }
  }
  return 0;
}
```

In the optimized code, the hash function is called only once per loop iteration, resulting in fewer function calls. The multiplication in the hash function is replaced with bitwise operations to speed up the calculation. Finally, the array is replaced by an unordered map to reduce memory consumption and handle larger string sizes.