The given program is a simple DNA pattern storing and retrieval system. It works by converting DNA strings ('A', 'C', 'G', 'T') into a unique hash value and then storing that hash value in a boolean array. If a DNA pattern is queried, the program checks if that pattern's hash value is in the array or not.

Here are the optimization steps:
1. Remove the usage of std::string for ins and s variables, and use char arrays instead. This is because std::string has an overhead of dynamic memory allocation and deallocation, which could slow down the program when dealing with a large number of strings. Moreover, each std::string object contains additional members to manage its state, adding to memory usage.
2. Remove the unnecessary type casting of the string size in the for loop inside the h() function. The size() function of std::string returns a size_t type which is an unsigned integer type. It's safe to compare it with an integer.
3. Use a switch-case statement instead of multiple if-else statements in the h() function. The switch-case statement can provide better performance than if-else in some cases because it uses a jump table in the background.

Here is the optimized program:

```cpp
#include <iostream>
#define MAX_SIZE 100

bool chk[244140624];
int n;
char ins[MAX_SIZE], s[MAX_SIZE];

int h(char* str) {
  int ret = 0;
  for (int i = 0; str[i] != '\0'; ++i) {
    ret *= 5;
    switch(str[i]) {
        case 'A':
            ret += 1;
            break;
        case 'C':
            ret += 2;
            break;
        case 'G':
            ret += 3;
            break;
        case 'T':
            ret += 4;
            break;
    }
  }
  return ret;
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin >> n;
  while (n--) {
    std::cin >> ins >> s;
    if (ins[0] == 'i') {
      chk[h(s)] = true;
    } else {
      std::cout << (chk[h(s)] ? "yes" : "no") << std::endl;
    }
  }
  return 0;
}
```
Please note that the MAX_SIZE macro is used to define the size of the char arrays. Set this to a value that will accommodate your longest possible string.