Step 1: Use Unnamed Namespace 
Instead of declaring the global variables d and k, you can put these inside an unnamed namespace. This provides internal linkage which means that those variables are only visible within a single translation unit. This can sometimes allow the compiler to do more aggressive optimizations.

Step 2: Use std::bitset instead of boolean array
You are using boolean array to store the state of different strings, which in worst case can go up to 33554432. This will consume 33554432 bytes of memory. Instead, you can use std::bitset which is a compact array that only uses 1 bit per boolean. This will reduce the memory consumption by 8 times.

Step3: Use std::unordered_map instead of char array
Instead of initializing character array k in main function, we can use std::unordered_map which provides O(1) time complexity for searching and inserting operations.

Step 4: Avoid unnecessary variable declaration
In the function c(), the variable i is declared and initialized separately. We can declare and initialize it at the same place. 

Here is the optimized code:

```cpp
#include <cstdio>
#include <bitset>
#include <unordered_map>
using namespace std;

namespace {
    bitset<33554432> d;
    unordered_map<char, int> k = {{'A', 0}, {'C', 1}, {'G', 2}, {'T', 3}};
}

int c(char str[12]) {
  int ans = str[0];
  for (int i = 1; str[i] != '\0'; i++) {
    ans <<= 2;
    ans += k[str[i]];
  }
  return ans;
}

int main() {
  int n;
  scanf("%d", &n);
  char s[7], str[12];
  while (n--) {
    scanf("%s %s", s, str);
    if (s[0] == 'i')
      d.set(c(str));
    else
      puts(d.test(c(str)) ? "yes" : "no");
  }
  return 0;
}
```
