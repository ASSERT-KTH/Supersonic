Optimization Steps:

1. The function `c(char str[12])` can be optimized by removing an unnecessary assignment `i = 1` inside the for loop. The variable `i` is already initialized, so there is no need to assign it again. Also, `ans <<= 2` should be done after adding `k[str[i]]` to ans because in the first iteration, `ans` is getting left shifted before adding `k[str[i]]`.

2. In `main()`, the character array `s` is scanned and then checked whether it is 'i'. Instead of this, we could directly scan a character and check it. This will save space and also remove the need for the character array `s`.

3. `puts(d[c(str)] ? "yes" : "no")` can be replaced with `printf` which is faster than `puts`.

4. The arrays `d` and `k` are global arrays. Global variables can slow down the program because they reside in the heap memory. We can move these arrays inside the `main()` function to make them local variables, which will reside in the stack memory which is faster to access than heap memory.

Here is the optimized program:

```c++
#include <cstdio>
using namespace std;

int c(char str[12], int k[128]) {
  int ans = str[0], i = 1;
  for (; str[i] != '\0'; i++) {
    ans += k[str[i]];
    ans <<= 2;
  }
  return ans;
}

int main() {
  bool d[33554432];
  char k[128];
  k['A'] = 0;
  k['C'] = 1;
  k['G'] = 2;
  k['T'] = 3;
  int n;
  scanf("%d", &n);
  char ch, str[12];
  while (n--) {
    scanf(" %c %s", &ch, str);
    if (ch == 'i')
      d[c(str,k)] = true;
    else
      printf(d[c(str,k)] ? "yes\n" : "no\n");
  }
  return 0;
}
```
Note: The space before `%c` in `scanf` is used to skip any white space characters, including `'\n'`.