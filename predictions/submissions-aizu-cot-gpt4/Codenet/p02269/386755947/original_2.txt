The primary optimization of this code involves the reduction of the number of calls to the function "c(str)". In the original code, this function is called twice when 's[0]' is not 'i'. This can be reduced to a single call, which should marginally increase the speed of the program, given that this function involves a loop and some computations.

Step by step optimization:

1. Declare a variable, let's say 'index', inside the while loop and calculate the function 'c(str)' once and store its value in 'index'.
2. Replace the function calls 'c(str)' with 'index' in the if-else block.

Now let's apply these optimizations to the code:

```cpp
#include <cstdio>
using namespace std;
bool d[33554432];
char k[128];
int c(char str[12]) {
  int ans = str[0], i = 1;
  for (i; str[i] != '\0'; i++) {
    ans <<= 2;
    ans += k[str[i]];
  }
  return ans;
}
int main() {
  k['A'] = 0;
  k['C'] = 1;
  k['G'] = 2;
  k['T'] = 3;
  int n;
  scanf("%d", &n);
  char s[7], str[12];
  while (n--) {
    scanf("%s %s", s, str);
    int index = c(str);
    if (s[0] == 'i')
      d[index] = true;
    else
      puts(d[index] ? "yes" : "no");
  }
  return 0;
}
```

This optimized code should execute faster than the original one due to the reduced number of function calls. Note that the memory usage of the program remains the same.