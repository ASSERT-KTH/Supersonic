The primary optimization opportunities in this code are:

1. The function `c()` is called twice in some cases (once for insertion and once for checking). It would be better to call it once and store the result.
2. The array `d[]` is very large and it could potentially take up a lot of unnecessary space. Use a `std::unordered_set` data structure to store the results of `c(str)`. This will significantly reduce the memory footprint and also provide constant time complexity for insertion and lookup operations.
3. The variable `i` in the function `c()` is declared and then immediately used in a for loop. You can declare it in the loop itself to make the code cleaner. This doesn't improve performance, but it's a good practice.

Here's the optimized code:

```c++
#include <cstdio>
#include <unordered_set>
using namespace std;

unordered_set<int> d;
char k[128];

int c(char str[12]) {
  int ans = str[0];
  for (int i = 1; str[i] != '\0'; i++) {
    ans <<= 2;
    ans += k[str[i]];
  }
  return ans;
}

int main() {
  k['A'] = 0;
  k['C'] = 1;
  k['G'] = 2;
  k['T'] = 3;
  int n;
  scanf("%d", &n);
  char s[7], str[12];
  while (n--) {
    scanf("%s %s", s, str);
    int c_str = c(str);
    if (s[0] == 'i')
      d.insert(c_str);
    else
      puts(d.count(c_str) ? "yes" : "no");
  }
  return 0;
}
```

This optimized program uses a hash set to reduce the memory footprint and improve the time complexity of the operations. The function `c()` is only called once per loop iteration.