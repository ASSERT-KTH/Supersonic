Step by step optimization:

1. Use `switch` instead of `if-else` in the `getnum` function. It provides faster execution when there are multiple conditions.
2. In the `getkey` function, there is no need to multiply with `p` in every iteration. Instead, you can multiply the final sum with `p` after the loop.
3. The `insert` and `find` functions have similar parts of code. To avoid redundancy, you can create a new function `hashing` that will perform the common task.
4. Use `std::unordered_map` instead of a 2D array for storing the strings. It provides constant time complexity for search and insert operations.
5. Use `std::string` instead of `char` arrays. It is easier to use and provides many built-in functions.

Optimized Code:

```
#include <iostream>
#include <unordered_map>
#include <string>

#define M 1020001
#define L 14

std::unordered_map<long long, std::string> H;
std::unordered_map<std::string, long long> num = {{"A", 1}, {"C", 2}, {"G", 3}, {"T", 4}};

long long getkey(std::string word) {
  long long sum = 0;
  int p = 1;
  for (char ch : word) {
    sum += num[ch] * p;
    p *= 5;
  }
  return sum;
}

int h1(int k) { return k % M; }
int h2(int k) { return 1 + (k % (M - 1)); }

int hashing(std::string str) {
  int key, h, i;
  key = getkey(str);
  for (i = 0;; i++) {
    h = (h1(key) + i * h2(key)) % M;
    if (H[h] != str) {
      if (H[h].empty()) {
        return h;
      }
    } else {
      return h;
    }
  }
  return 0;
}

void insert(std::string str) {
  int h = hashing(str);
  H[h] = str;
}

bool find(std::string str) {
  int h = hashing(str);
  return !H[h].empty();
}

int main() {
  std::string com, word;
  int NumOfCom;
  std::cin >> NumOfCom;

  while (NumOfCom) {
    std::cin >> com >> word;
    if (com[0] == 'i') {
      insert(word);
    } else {
      if (find(word)) {
        std::cout << "yes" << std::endl;
      } else {
        std::cout << "no" << std::endl;
      }
    }
    NumOfCom--;
  };
  return 0;
}

```