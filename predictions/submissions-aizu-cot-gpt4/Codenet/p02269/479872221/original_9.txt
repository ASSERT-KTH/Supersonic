This program seems to be implementing a dictionary using a hash table with open addressing technique and the strings are being hashed based on their character values. To optimize this:

1. We can use `std::unordered_map` STL in C++ which is a hash table and takes care of collision resolution itself. This can potentially save time and memory because it saves us from the trouble of resolving collisions ourselves and writing extra code for it. 
2. We can also use `std::string` instead of `char` arrays, which is more safe and efficient in handling strings in C++.
3. Avoid repeated computations. In the `insert` and `find` functions, `h1(key) + i * h2(key)` is calculated twice. We can calculate this once and use the result in both places.
4. The `getkey` function can be optimized by using a switch-case instead of multiple if-else statements, which can be faster.

Here is the optimized code:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>
using namespace std;

int getnum(char ch) {
  switch(ch) {
    case 'A': return 1;
    case 'C': return 2;
    case 'G': return 3;
    default: return 4;
  }
}

long long getkey(string word) {
  int sum = 0, p = 1;
  for (int i = 0; word[i]; i++) {
    sum += p * getnum(word[i]);
    p *= 5;
  }
  return sum;
}

unordered_map<long long, string> dictionary;

void insert(string str) {
  long long key = getkey(str);
  dictionary[key] = str;
}

bool find(string str) {
  long long key = getkey(str);
  if (dictionary.find(key) != dictionary.end()) {
    return dictionary[key] == str;
  }
  return false;
}

int main() {
  string com, word;
  int NumOfCom;
  cin >> NumOfCom;
  while (NumOfCom) {
    cin >> com >> word;
    if (com[0] == 'i') {
      insert(word);
    } else {
      if (find(word)) {
        cout << "yes" << endl;
      } else {
        cout << "no" << endl;
      }
    }
    NumOfCom--;
  };
  return 0;
}
```
The code has been optimized for better memory usage and speed. The manual implementation of a hash table was replaced with a built-in hash table in C++ STL, `unordered_map`. This not only saves memory but also improves the speed by reducing the chance of collisions and automatically handling them efficiently. The code is also more readable and maintainable.