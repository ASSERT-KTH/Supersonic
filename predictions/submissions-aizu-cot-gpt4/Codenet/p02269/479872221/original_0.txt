Step 1: Use std::unordered_map instead of custom hash table
The C++ standard library provides a hash table in the form of std::unordered_map. It is typically more performant and safer than a custom hash table. 

Step 2: Use std::string instead of C-style strings
std::string is easier to use and safer than C-style strings. It automatically manages memory, and includes a large number of utility functions. 

Step 3: Avoid unnecessary string copying and comparison
The insert and find functions make unnecessary copies and comparisons of strings. This can be avoided by using references and the functions provided by std::unordered_map.

Step 4: Use switch statement in getnum function
The if-else chain in getnum can be replaced with a switch statement, which is more idiomatic and can be faster.

Here is the optimized code:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>
#define M 1020001

std::unordered_map<long long, std::string> H;

int getnum(char ch) {
  switch(ch) {
    case 'A': return 1;
    case 'C': return 2;
    case 'G': return 3;
    case 'T': return 4;
    default: return 0;
  }
}

long long getkey(const std::string& word) {
  int sum = 0, p = 1;
  for (const auto& ch : word) {
    sum = sum + p * getnum(ch);
    p = p * 5;
  }
  return sum;
}

bool insert(const std::string& str) {
  long long key = getkey(str);
  if (H.count(key) && H[key] == str) {
    return false;
  } else {
    H[key] = str;
    return true;
  }
}

bool find(const std::string& str) {
  long long key = getkey(str);
  return H.count(key) && H[key] == str;
}

int main() {
  std::string com, word;
  int NumOfCom;
  std::cin >> NumOfCom;
  while (NumOfCom--) {
    std::cin >> com >> word;
    if (com[0] == 'i') {
      insert(word);
    } else {
      if (find(word)) {
        std::cout << "yes" << std::endl;
      } else {
        std::cout << "no" << std::endl;
      }
    }
  };
  return 0;
}
```
This code uses the std::unordered_map class from the C++ standard library to implement a hash table. It also uses std::string instead of C-style strings, and uses std::cin and std::cout for input and output. The result is a program that is more modern, simpler, and more efficient than the original program.