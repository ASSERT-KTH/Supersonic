Optimization Steps:

1. Use `std::unordered_map` instead of `char` array: The given C++ program is using a 2D char array `H[M][L]` as a hash table. However, C++ provides a hash table in the form of `std::unordered_map` which is more optimized in terms of memory usage and running time. It can be used to directly map strings to boolean values, which will help us to quickly check for presence of a string and to insert a new string.

2. Avoid unnecessary string operations: The program uses `strcmp` and `strlen` functions in the `insert` and `find` methods, which are time-consuming operations as they need to traverse the whole string. By using `std::unordered_map`, these operations can be eliminated.

3. Precompute `h1(key)` and `h2(key)`: In the original program, `h1(key)` and `h2(key)` are computed in every iteration of the loops in `insert` and `find` methods. Since the value of `key` does not change within these methods, we can compute these values once before the loop and use them in the loop.

4. Use prefix comparison instead of full string comparison: In the `main()` function, the comparison `com[0] == 'i'` is used to check whether the command is 'insert'. This comparison can be done using `com[0]` only, there is no need to compare the complete string.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>

using namespace std;

unordered_map<string, bool> hashTable;

void insert(string str) {
  hashTable[str] = true;
}

bool find(string str) {
  if (hashTable.find(str) != hashTable.end()) {
    return true;
  }
  return false;
}

int main() {
  string com, word;
  int NumOfCom;
  cin >> NumOfCom;
  while (NumOfCom--) {
    cin >> com >> word;
    if (com[0] == 'i') {
      insert(word);
    } else {
      if (find(word)) {
        cout << "yes" << endl;
      } else {
        cout << "no" << endl;
      }
    }
  };
  return 0;
}
```

Remember, the `std::unordered_map` in C++ uses hashing internally, so the operations like insert and find are O(1) on average. So this optimized program will have a better performance than the original one.