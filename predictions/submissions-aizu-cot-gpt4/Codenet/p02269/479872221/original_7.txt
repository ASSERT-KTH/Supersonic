The given program is a hash table implementation where the keys are strings. There are several areas where this program could be optimized:

1. Use of C++ string library instead of C style strings.
2. Avoiding redundant calls to strlen and strcmp in the insert and find function.
3. Optimizing the getnum function by using a switch case statement instead of multiple if-else statements.
4. Avoiding the use of C style arrays.
5. Using C++ standard library functions for hashing.

Here's the optimized version of the program with these changes:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>

using namespace std;

unordered_map<string, bool> H;

int getnum(char ch) {
  switch(ch) {
    case 'A': return 1;
    case 'C': return 2;
    case 'G': return 3;
    default: return 4;
  }
}

long long getkey(string word) {
  int sum = 0, p = 1;
  for (char c : word) {
    sum = sum + p * getnum(c);
    p = p * 5;
  }
  return sum;
}

bool insert(string str) {
  int key = getkey(str);
  if (H.find(str) == H.end()) {
    H[str] = true;
    return true;
  }
  return false;
}

bool find(string str) {
  return H.find(str) != H.end();
}

int main() {
  string com, word;
  int NumOfCom;
  cin >> NumOfCom;

  while (NumOfCom--) {
    cin >> com >> word;
    if (com[0] == 'i') {
      insert(word);
    } else {
      cout << (find(word) ? "yes" : "no") << endl;
    }
  }

  return 0;
}
```

In this optimized version, the program now uses the C++ standard library's unordered_map, which is a hash table implementation, instead of manually implementing a hash table. The getnum function now uses a switch case statement, which is more efficient than the previous if-else statements.

In the insert and find functions, the use of the C++ string library and unordered_map results in no need for calling strlen and strcmp functions, which were making the original program slower. Thus, these changes make the program more efficient in terms of running time and memory usage.