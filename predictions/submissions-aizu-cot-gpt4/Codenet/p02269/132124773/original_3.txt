Optimization steps:

1. Use `std::ios_base::sync_with_stdio(false);` before any I/O operations. This will turn off synchronization of all the C++ standard streams with their corresponding C standard streams. This can result in more efficient I/O operations.

2. Use `cin.tie(NULL);` before any I/O operations. This unties `cin` from `cout`. By default, before every I/O operation `cout` is flushed, untieing them can make I/O operations faster.

3. Use `unordered_map` instead of `map`. `unordered_map` is implemented as a hash table and its access/insertion time complexity is O(1) on average, while `map` is implemented as a red-black tree and its access/insertion time complexity is O(log(n)).

4. Use `std::endl` only when you really need to flush the output buffer. Use `'\n'` instead to print a newline character, because `std::endl` is slower as it involves an additional buffer flush.

Optimized program:
```cpp
#include <iostream>
#include <unordered_map>
#include <string>
using namespace std;
int main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n;
  cin >> n;
  unordered_map<string, bool> Dic;
  string com, word;
  while (n--) {
    cin >> com >> word;
    if (com[0] == 'i')
      Dic[word] = true;
    else {
      if (Dic[word])
        cout << "yes" << '\n';
      else
        cout << "no" << '\n';
    }
  }
}
```