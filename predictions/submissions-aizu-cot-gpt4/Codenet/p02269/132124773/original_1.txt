This C/C++ program uses an std::map to store strings (words) and their corresponding boolean values. For each operation, it checks if the first character of the command is 'i'. If it is, it inserts the word into the map with a value of true. If it's not 'i', it checks if the word is in the map and outputs "yes" if it is, and "no" if it isn't.

The optimization here can be done at several points:

1. Use std::unordered_map instead of std::map: The std::unordered_map in C++ uses a hash table for storage, which provides faster insertion, deletion, and search operations on average than std::map. This change can be beneficial especially when the number of operations (n) is large.

2. Reserve some memory for the unordered_map: If you know the maximum number of elements (n) that will be inserted into the unordered_map, you can reserve that amount of memory in advance using the reserve function. This can avoid unnecessary rehashing and resizing of the hash table, which can be a costly operation.

3. Use '\n' instead of endl: The endl manipulator in C++ performs a newline operation and then flushes the stream. If you don't need to flush the stream after every output operation (which is not needed in this program), you can just use '\n' to perform a newline operation, which is faster.

4. Use fast input/output: The cin and cout operations are a bit slower. If speed is crucial, you can use faster input/output methods, such as scanf/printf or using cin.tie(0) and ios_base::sync_with_stdio(false).

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  
  int n;
  cin >> n;
  
  unordered_map<string, bool> Dic;
  Dic.reserve(n);
  
  string com, word;
  while (n--) {
    cin >> com >> word;
    if (com[0] == 'i')
      Dic[word] = true;
    else {
      if (Dic[word])
        cout << "yes\n";
      else
        cout << "no\n";
    }
  }
}
```
Please note that the optimization might not be noticeable for small inputs, but for large inputs, it can make a significant difference. However, the unordered_map uses more memory than the std::map, so there is a trade-off between memory usage and running time.