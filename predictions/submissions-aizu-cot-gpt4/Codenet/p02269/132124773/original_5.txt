Optimization:

1. Use "unordered_map" instead of "map". The "unordered_map" in C++ STL uses a hash table for implementation and therefore, insertion, deletion and search operations in "unordered_map" are faster than "map" where the keys are not ordered.
2. Use "Fast I/O". We can use "ios_base::sync_with_stdio(false)" and "cin.tie(NULL)" to make input and output more efficient. It is a technique used in C++ to speed up input/output operations.
3. Use '\n' instead of "endl". The "endl" not only moves to the next line but also flushes the output, which takes extra time. Instead, use '\n'.


Optimized program:
```
#include <iostream>
#include <unordered_map>
#include <string>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n;
  cin >> n;
  unordered_map<string, bool> Dic;
  string com, word;
  
  while (n--) {
    cin >> com >> word;
    if (com[0] == 'i')
      Dic[word] = true;
    else {
      if (Dic[word])
        cout << "yes\n";
      else
        cout << "no\n";
    }
  }
}
```