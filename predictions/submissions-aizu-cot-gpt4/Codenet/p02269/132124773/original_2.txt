Here are some steps to optimize the given C/C++ program:

1. Use `std::ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` to speed up I/O operations.
2. Use `std::unordered_map` instead of `std::map`. `std::unordered_map` has an average time complexity of O(1) for search, insertion, and removal operations, while `std::map` has a time complexity of O(log n) for these operations.
3. Instead of checking whether the map contains a key with `if (Dic[word])`, use `Dic.find(word) != Dic.end()`. This is because when you use `Dic[word]` and the key doesn't exist in the map, it will create a new entry with that key and a default value, which will increase the memory usage.

Here is the optimized program:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n;
  cin >> n;
  unordered_map<string, bool> Dic;
  string com, word;
  while (n--) {
    cin >> com >> word;
    if (com[0] == 'i')
      Dic[word] = true;
    else {
      if (Dic.find(word) != Dic.end())
        cout << "yes\n";
      else
        cout << "no\n";
    }
  }
}
```
