In the given program, there are a few ways to optimize it for running time and memory usage:

1. Reserve Memory for Map:
   In this case, we can't reserve memory for map because this operation isn't supported by the map container in C++. 

2. Use `ios_base::sync_with_stdio(false); cin.tie(NULL);` :
   This will make the input and output more efficient. 

3. Use `unordered_map` instead of `map`:
   Using `unordered_map` instead of `map` will make the program faster. `unordered_map` has a better average case time complexity for search, insert, and delete operations.

4. Use `auto &` in the loop:
   Using `auto &` can avoid unnecessary copy when traversing the map if needed. But in this program, we don't traverse the map.

5. Use '\n' instead of `endl` :
   `endl` causes a flush operation, which can be expensive in terms of time. So, it's better to use '\n' instead of `endl`.

Optimized code:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n;
  cin >> n;
  unordered_map<string, bool> Dic;
  string com, word;
  while (n--) {
    cin >> com >> word;
    if (com[0] == 'i')
      Dic[word] = true;
    else {
      if (Dic[word])
        cout << "yes\n";
      else
        cout << "no\n";
    }
  }
}
```
The optimized version of the program will run faster and use less memory compared to the original version.