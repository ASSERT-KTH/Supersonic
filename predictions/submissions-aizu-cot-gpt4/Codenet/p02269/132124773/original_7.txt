Step 1: Use std::ios_base::sync_with_stdio(false) and cin.tie(NULL). This will speed up the I/O operations by not synchronizing C and C++ standard streams and unties cin from cout. This will make a significant difference when your program is I/O heavy.

Step 2: Use unordered_map instead of map. Unordered_map is a hash table and has an average time complexity of O(1) for search, insert, and remove operations. On the other hand, map is a balanced binary search tree and has a time complexity of O(log n) for these operations. This change will make a significant difference when the number of elements (n) is large.

Step 3: Use '\n' instead of endl. The endl manipulator flushes the output buffer every time it is called, which can slow down the program.

Optimized program:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>
using namespace std;

int main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n;
  cin >> n;
  unordered_map<string, bool> Dic;
  string com, word;
  while (n--) {
    cin >> com >> word;
    if (com[0] == 'i')
      Dic[word] = true;
    else {
      if (Dic[word])
        cout << "yes\n";
      else
        cout << "no\n";
    }
  }
  return 0;
}
```
This optimization will make your program run faster and use less memory.