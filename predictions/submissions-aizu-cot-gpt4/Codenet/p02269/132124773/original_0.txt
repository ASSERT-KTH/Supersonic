The primary optimization point in this code is the usage of the `std::map` data structure. `std::map` is internally implemented as a balanced binary search tree and has a time complexity of O(log n) for the insert and find operations. In this case, since we only need to check if a word exists or not (a yes/no query), we can use `std::unordered_map` instead, which is implemented as a hash table and has an average time complexity of O(1) for insert and find operations. This will significantly reduce the running time for large inputs.

Another optimization, although minor, would be to utilize `std::ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` at the start of the main function. These lines disable the synchronization of all the C++ standard streams with their corresponding standard C streams if it is called before the program performs its first input or output operation. Adding `cin.tie(NULL);` unties `cin` from `cout`. These optimizations can potentially speed up `cin` and `cout`.

Lastly, the condition in the else branch can be simplified by directly outputting the result of the lookup operation, which would eliminate the need for the if/else structure, making the code cleaner and more efficient.

Optimized program:

```c++
#include <iostream>
#include <unordered_map>
#include <string>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n;
  cin >> n;
  
  unordered_map<string, bool> Dic;
  string com, word;

  while (n--) {
    cin >> com >> word;
    if (com[0] == 'i')
      Dic[word] = true;
    else
      cout << (Dic[word] ? "yes" : "no") << endl;
  }

  return 0;
}
```
Please note that these optimizations might not lead to noticeable improvements for small inputs or in a situation where the number of 'i' commands significantly outnumber the else commands. However, for large inputs, especially when the number of insert and find operations are comparable, the performance improvement could be significant.