Here are few optimizations that can be made to your existing code:

1. Avoid using `std::endl` to print new lines. `std::endl` not only prints a new line but also flushes the output stream, which might be an expensive operation. You can replace `std::endl` with `'\n'`.

2. Use `std::ios_base::sync_with_stdio(false)` to speed up the input/output operations. This decouples the C++ standard streams from their corresponding standard C streams if it is safe to do so. It may significantly speed up the input/output operations.

3. Use `std::cin.tie(NULL)` to untie cin from cout. Normally, before each input operation, cin ensures that cout's buffer is empty. This is not necessary here, so you can untie them.

4. Use `reserve()` function to preallocate memory for the string to avoid frequent reallocations of memory which is an expensive operation.

5. Replace `map` with `unordered_map` as the latter has an average time complexity of O(1) for search, insert, and delete operations while `map` has an average time complexity of O(log(n)) for these operations.

Here is your optimized code:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n;
  cin >> n;

  unordered_map<string, bool> Dic;
  string com, word;
  com.reserve(100);
  word.reserve(100);

  while (n--) {
    cin >> com >> word;
    if (com[0] == 'i')
      Dic[word] = true;
    else {
      if (Dic[word])
        cout << "yes\n";
      else
        cout << "no\n";
    }
  }
  return 0;
}
```

Please note that the function `reserve()` is used assuming that the strings `com` and `word` will not exceed 100 characters. If there is no such assurance, you might want to skip this optimization as it could lead to wastage of memory.