The following optimizations can be made to the given code:

1. Use `std::vector` instead of raw arrays: Raw arrays in C++ do not have any bound checking and are prone to overflow. They also do not automatically deallocate memory when they go out of scope. `std::vector` is a dynamic array provided by C++ STL which has automatic memory management and bound checking.

2. Use `std::priority_queue` instead of manually managing a heap: `std::priority_queue` is a container adapter specifically designed to provide priority queue behavior, where the highest (or lowest) priority element can always be popped from the queue.

3. Use `std::stoi` instead of manually converting string to integer: `std::stoi` is a standard library function in C++ which converts a string to an integer. Using `std::stoi` makes the code more readable and less prone to errors.

4. Use `std::getline` and `std::stringstream` for input parsing: `std::getline` and `std::stringstream` provide a more robust and flexible way to parse input lines compared to manually parsing the input with a `while` loop.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <sstream>
using namespace std;

class MaxHeap {
public:
  void insert(int data) {
    pq.push(data);
  }
  int extract() {
    int ret = pq.top();
    pq.pop();
    return ret;
  }

private:
  priority_queue<int, vector<int>, less<int>> pq;
};

int main() {
  string line;
  MaxHeap heap;

  while (getline(cin, line)) {
    stringstream ss(line);
    string command;
    ss >> command;

    if (command == "end")
      break;

    if (command == "insert") {
      int data;
      ss >> data;
      heap.insert(data);
    } else if (command == "extract") {
      cout << heap.extract() << endl;
    }
  }
}
```

This version of the program is simpler, safer, and likely faster due to the usage of standard library utilities.