To optimize the given code, I would suggest the following steps:

1. Avoid allocating a large amount of memory upfront for the heap array. In this case, you're allocating memory for 2,000,000 integers, which may never be used. Instead, use a dynamic container like `std::vector` which grows as needed.

2. In the `insert()` method, instead of inserting at the end and then swapping elements up, use `std::push_heap` which does this in one step.

3. In the `max_heapify()` method, instead of manually re-heapifying after extracting the root, use `std::pop_heap` which does this in one step.

4. In the `extract()` method, instead of swapping the root with the last element and then re-heapifying, use `std::pop_heap` followed by `std::vector::pop_back` which does this more efficiently.

5. In the `main()` function, instead of manually parsing the input, use `std::istringstream` to simplify the code and make it more readable.

Here is the optimized version of the program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
#include <sstream>

using namespace std;

class Heap {
public:
  void insert(int data) {
    heap.push_back(data);
    push_heap(heap.begin(), heap.end());
  }

  int extract() {
    pop_heap(heap.begin(), heap.end());
    int ret = heap.back();
    heap.pop_back();
    return ret;
  }

private:
  vector<int> heap;
};

int main() {
  int insert_data;
  string line;
  Heap heap;
  while (getline(cin, line)) {
    if (line[2] == 'd') 
      break;
    if (line[0] == 'i') {
      istringstream iss(line.substr(1));
      iss >> insert_data;
      heap.insert(insert_data);
    } else {
      cout << heap.extract() << endl;
    }
  }
}
```

Note: This code assumes that the input is well-formed and doesn't contain any invalid characters. If this is not the case, you would need to add error checking to handle invalid input.