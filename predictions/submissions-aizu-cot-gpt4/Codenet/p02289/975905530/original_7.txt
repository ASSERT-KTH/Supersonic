Optimization Steps:

1. The function **pop_and_print()** is returning an integer value which is not used anywhere in the program. So, we can change the return type of the function to void.

2. We are passing the priority queue by reference to the **pop_and_print()** function which is good, but we are also using **qu.top()** and **qu.pop()** separately. We can optimize this by storing the top element in a variable and then popping it. This way, we only call **qu.top()** once which can improve the running time.

3. In the main function, we are using an infinite while loop and breaking it manually when "end" is input. Instead, we can use a do-while loop and check the condition at the end of the loop which will also reduce the number of times we check the condition.

4. We are using **std::endl** for new lines, which also flushes the stream. This can be expensive in terms of performance. We can use "\n" instead, which does not flush the stream.

5. We also don't need to include **<limits.h>** as it is not used anywhere in the program.

Optimized Program:

```cpp
#include <iostream>
#include <queue>
#include <string>
using namespace std;

void pop_and_print(priority_queue<int> &qu) {
  int top_elem = qu.top();
  qu.pop();
  cout << top_elem << '\n';
}

int main() {
  string s;
  int inp;
  priority_queue<int> qu;
  do {
    cin >> s;
    if (s == "insert") {
      cin >> inp;
      qu.push(inp);
    } else if (s != "end") {
      pop_and_print(qu);
    }
  } while (s != "end");
  return 0;
}
```