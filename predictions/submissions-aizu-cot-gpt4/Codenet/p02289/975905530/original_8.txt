Optimization Steps:

1. The function `pop_and_print()` is making a costly operation by printing the top of the queue and then popping it. This can be optimized by popping the queue into a temporary variable, then printing it. This way, we're only accessing the queue once.

2. The infinite `while (1)` loop can be dangerous as it has the potential to cause an infinite loop if not controlled properly. It is better to use `while (cin >> s)` which will break the loop when there is no more input.

3. The block of code that checks for the "end" command can be moved to the beginning of the loop. This way, the program won't check for the "insert" command if the "end" command has already been issued.

4. The `pop_and_print()` function always returns 0 which is never used. We can make this function `void`.

5. The `else` statement without a condition is dangerous, as it will execute if the input isn't "end" or "insert". It's better to explicitly check if the command is "pop".

Here is the optimized code:

```cpp
#include <iostream>
#include <limits.h>
#include <queue>
#include <string>
#include <vector>
using namespace std;

void pop_and_print(priority_queue<int> &qu) {
  int top_element = qu.top();
  cout << top_element << endl;
  qu.pop();
}

int main() {
  string s;
  int inp;
  priority_queue<int> qu;
  while (cin >> s) {
    if (s == "end") {
      break;
    } else if (s == "insert") {
      cin >> inp;
      qu.push(inp);
    } else if (s == "pop") {
      pop_and_print(qu);
    }
  }
  return 0;
}
```
This code is more efficient in time and memory usage, and also safer as it checks explicitly for all commands.