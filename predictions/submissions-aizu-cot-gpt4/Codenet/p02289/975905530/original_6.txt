The main optimization that can be done here is to pass the priority_queue to the function by reference instead of by value. The current implementation passes the queue by value which means that the entire queue is copied each time the function is called. This is both time and memory inefficient. Passing by reference will eliminate this overhead.

Another optimization is to use std::ios::sync_with_stdio(false); this will speed up cin and cout operations.

Also, one more optimization can be done by using '\n' instead of endl. The endl always causes a flush operation, which can be expensive in terms of time. So, wherever possible, use '\n' to add a new line.

Here's the optimized code:

```cpp
#include <iostream>
#include <limits.h>
#include <queue>
#include <string>
#include <vector>
using namespace std;
int pop_and_print(priority_queue<int> &qu) {
  cout << qu.top() << '\n';
  qu.pop();
  return 0;
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  string s;
  int inp;
  priority_queue<int> qu;
  while (1) {
    cin >> s;
    if (s == "end") {
      break;
    } else if (s == "insert") {
      cin >> inp;
      qu.push(inp);
    } else {
      pop_and_print(qu);
    }
  }
  return 0;
}
```
Note: Using ios::sync_with_stdio(false); and cin.tie(NULL); can sometimes cause issues with multi-threaded programs or if you're mixing C and C++ style IO in the same program. In such cases, it might be better to avoid these optimizations.