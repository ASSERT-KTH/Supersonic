The optimizations that can be made to this program are:

1. Passing `qu` by reference to the `pop_and_print` function is good, but the function doesn't need to return anything since it's just performing an action and not computing anything. We can make it void.

2. The `pop_and_print` function is calling `qu.top()` and `qu.pop()` separately. This is inefficient because both these operations require accessing the top of the queue. We can call these together for better performance.

3. Using `1` in the while loop condition is not as clear as `true`.

4. Instead of using `endl` to insert a new line, we can use `"\n"`. `endl` will flush the stream which can be an unnecessary overhead when the program is dealing with large amounts of output.

5. All the headers except `iostream`, `queue`, and `string` are not used in this program, so we can remove them.

Here's the optimized code:

```cpp
#include <iostream>
#include <queue>
#include <string>
using namespace std;
void pop_and_print(priority_queue<int> &qu) {
  cout << qu.top() << "\n";
  qu.pop();
}
int main() {
  string s;
  int inp;
  priority_queue<int> qu;
  while (true) {
    cin >> s;
    if (s == "end") {
      break;
    } else if (s == "insert") {
      cin >> inp;
      qu.push(inp);
    } else {
      pop_and_print(qu);
    }
  }
  return 0;
}
```