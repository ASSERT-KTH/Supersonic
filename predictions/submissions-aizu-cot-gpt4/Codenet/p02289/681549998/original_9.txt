The given program implements a max heap data structure with operations such as `insert`, `increasekey` and `extract`. The optimization steps include:

1. Using C++ STL: C++ STL provides `priority_queue` which is a max heap data structure. We can use this to optimize our program. This provides insert and extract in logarithmic time complexity. This will also reduce the memory usage of the program.

2. Avoiding Recursion: The `maxHeap` function is recursive which adds extra overhead for function calls. Using `priority_queue` will avoid this recursion.

3. Using `std::ios::sync_with_stdio(false)`: This line of code will make input-output operations faster.

4. Using `std::cin.tie(NULL)`: Un-tying `cin` and `cout` will make flushing of `cout` buffer before each `cin` operation unnecessary and hence, making the program faster.

5. Replacing `std::endl` with `'\n'`: `std::endl` inserts a newline character and flushes the stream, while `'\n'` just inserts a newline character. So replacing `std::endl` with `'\n'` will make the program faster.

Here is the optimized program:

```cpp
#include <iostream>
#include <queue>
using namespace std;

priority_queue<int> heap;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int key;
    char com[10];
    while (1) {
        cin >> com;
        if (com[0] == 'e' && com[1] == 'n')
            break;
        if (com[0] == 'i') {
            cin >> key;
            heap.push(key);
        } else {
            cout << heap.top() << '\n';
            heap.pop();
        }
    }
    return 0;
}
```
This program does the same job as the original one but in a more optimized way.