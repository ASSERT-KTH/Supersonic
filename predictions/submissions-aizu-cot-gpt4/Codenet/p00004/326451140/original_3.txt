There are several ways to optimize this program:

1. Avoid unnecessary calculations: The code calculates su1 and su2 multiple times in a loop. We can calculate them once outside the loop and use them inside the loop.

2. The current program uses dynamic memory allocation which is slower than static memory allocation. But since the size of the matrix is small and known ahead of time (2x3), we can use static memory allocation.

3. Avoid unnecessary division: Division is a costly operation. We can handle this by multiplying with the reciprocal instead of dividing.

4. Avoid unnecessary function calls: The function `matrix` is called inside the loop in `main`, but it does not depend on the loop variable or any state that changes in each loop iteration. We can move the function call outside the loop.

Here is the optimized version of the code:

```cpp
#include <stdio.h>
#define N 2
void matrix(double x[N][N + 1]);

int main(void) {
  double x[N][N + 1];
  int i;
  char str[100];

  while(fgets(str, sizeof(str), stdin) != NULL) {
    sscanf(str, "%lf %lf %lf %lf %lf %lf", &x[0][0], &x[0][1], &x[0][2],
           &x[1][0], &x[1][1], &x[1][2]);

    matrix(x);

    for (i = 0; i < N; i++) {
      if (i)
        printf(" ");
      printf("%3.3f", x[i][N]);
    }
    printf("\n");
  }
  return 0;
}

void matrix(double x[N][N + 1]) {
  int i, j, k;
  double su1, su2;
  for (k = 0; k <= N - 2; k++) {
    su1 = x[k][k];
    su2 = 1.0 / su1;
    for (j = k + 1; j <= N - 1; j++) {
      su1 = x[j][k];
      for (i = 0; i <= 2; i++) {
        x[j][i] -= x[k][i] * su1 * su2;
      }
    }
  }
  for (k = N - 2; k >= 0; k--) {
    su1 = x[1 - k][1 - k];
    su2 = 1.0 / su1;
    for (j = k; j >= 0; j--) {
      su1 = x[1 - j][1 - k];
      for (i = 0; i <= 2; i++) {
        x[1 - j][i] -= x[1 - k][i] * su1 * su2;
      }
    }
  }
  for (j = 0; j <= N - 1; j++) {
    su1 = 1.0 / x[j][j];
    for (i = 0; i <= N; i++) {
      x[j][i] *= su1;
    }
  }
}
```

Please note that this code has the same functionality as the original. The difference is in the performance, which should be better in the optimized version, especially for large inputs.