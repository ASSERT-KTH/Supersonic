Here are the steps to optimize the program:

1. Remove unnecessary variables su1 and su2 from the main function. They are not used anywhere in the main function.

2. In the function 'matrix', the variable su1 is assigned the same value in every iteration in the loops. So, we can move the operation outside of the loops for efficiency. The same can be done with su2.

3. In the function 'matrix', the operation 'su2 / su1' is performed in every innermost loop. We can calculate this value once per iteration of the middle loop and use the result in the innermost loop.

4. The operation 'x[1 - k][i] * su2 / su1' is performed twice for each i, once in each of the two big loops. We can calculate this once and use the result in both places.

5. The operation 'x[j][i] / su1' in the last loop of 'matrix' is performed for each i. We can calculate this once and use the result for each i.

Here's the optimized program:

```C++
#include <stdio.h>
#define N 2
int matrix(double **x);
int main(void) {
  double x[N][N + 1];
  double *y[N];
  int i;
  char str[100];
  for (; fgets(str, sizeof(str), stdin) != NULL;) {
    sscanf(str, "%lf %lf %lf %lf %lf %lf", &x[0][0], &x[0][1], &x[0][2],
           &x[1][0], &x[1][1], &x[1][2]);
    for (i = 0; i < N; i++)
      y[i] = x[i];
    matrix(y);
    for (i = 0; i < N; i++) {
      if (i)
        printf(" ");
      printf("%3.3f", x[i][N]);
    }
    printf("\n");
  }
  return 0;
}
int matrix(double **x) {
  int i, j, k;
  double su1, su2, ratio, result;
  for (k = 0; k <= N - 2; k++) {
    su1 = x[k][k];
    for (j = k + 1; j <= N - 1; j++) {
      su2 = x[j][k];
      ratio = su2 / su1;
      for (i = 0; i <= 2; i++) {
        x[j][i] = x[j][i] - x[k][i] * ratio;
      }
    }
  }
  for (k = 0; k <= N - 2; k++) {
    su1 = x[1 - k][1 - k];
    for (j = k + 1; j <= N - 1; j++) {
      su2 = x[1 - j][1 - k];
      result = x[1 - k][i] * su2 / su1;
      for (i = 0; i <= 2; i++) {
        x[1 - j][i] = x[1 - j][i] - result;
      }
    }
  }
  for (j = 0; j <= N - 1; j++) {
    su1 = x[j][j];
    ratio = 1.0 / su1;
    for (i = 0; i <= N; i++) {
      x[j][i] = x[j][i] * ratio;
    }
  }
  return 0;
}
```
