The given C/C++ program has a few areas where it can be optimized. Here are the steps in which we can optimize this program:

1. Remove unnecessary variables: The variables `h` and `t` aren't used in the program. Removing them will save memory.
2. Reduce scope of variables: The variables `k`, `i` and `flg` are only used inside the while loop. Moving their declaration inside the loop would limit their scope and potentially save memory as they would be deallocated once the loop finishes.
3. Remove redundant assignments: The assignment `t = 0;` at the end of the loop is unnecessary as `t` is not used anywhere in the loop or after it. Similarly, `s = n;` is not needed before the for loop as `s` is always set to `n` at the start of each loop iteration.
4. Streamline condition checks: The check `if (k == 0) { s = s - 1; }` can be optimized to `if (!k) s--;` which does the same thing but in a more efficient and readable manner.

Here's the optimized program:

```C
#include <stdio.h>
int main(void) {
  int n, s;
  while (1) {
    int k, i, flg = 0;
    scanf("%d", &n);
    if (n == 0)
      break;
    s = n;
    for (i = 0; i < n; i++) {
      scanf("%d", &k);
      if (!k) s--;
      if (k >= 2) flg = 1;
    }
    if (flg) printf("%d\n", s + 1);
    else printf("NA\n");
  }
  return 0;
}
```

This optimized version of the program does exactly the same thing as the original, but uses less memory by not declaring unnecessary variables, and it should also run slightly faster due to the streamlined condition checks and the removal of redundant assignments.