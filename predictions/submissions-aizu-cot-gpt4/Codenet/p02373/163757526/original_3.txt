There are several steps we can take to optimize this code:

1. **Use Fast I/O:** While using `scanf` and `printf` is faster than `cin` and `cout`, we can still improve I/O performance by using the `fastio` method. This method speeds up I/O operations by syncing them with standard C I/O operations and untying `cin` and `cout`.

2. **Avoid push_back:** The `push_back` function dynamically increases the size of the vector, which can lead to repeated reallocation and copying. Instead of using `push_back`, we can resize the vector to its required size at the beginning and then assign values directly using the index.

3. **Minimize vector resizing:** Instead of dynamically resizing the vector `path`, we can define its size at the beginning of the `main` function.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define fi first
#define se second
typedef pair<int, int> ii;
typedef vector<int> vi;
const int MAXN = 100005;
const int LOGN = 20;
int idx_in_path[MAXN];
ii path[MAXN << 1];
vector<vi> adjList(MAXN);
int path_size = 0;
void dfs(int u, int depth = 0) {
  idx_in_path[u] = path_size;
  path[path_size++] = ii(depth, u);
  for (int v : adjList[u]) {
    dfs(v, depth + 1);
    path[path_size++] = ii(depth, u);
  }
}
ii ST[LOGN][MAXN << 1];
void build(int n) {
  int h = ceil(log2(n + 1));
  for (int i = 0; i < n; i++)
    ST[0][i] = path[i];
  for (int i = 1; i < h; i++)
    for (int j = 0; j + (1 << i) <= n; j++)
      ST[i][j] = min(ST[i - 1][j], ST[i - 1][j + (1 << (i - 1))]);
}
int lca(int u, int v) {
  int l = idx_in_path[u], r = idx_in_path[v];
  if (l > r)
    swap(l, r);
  r++;
  int p = 31 - __builtin_clz(r - l);
  return min(ST[p][l], ST[p][r - (1 << p)]).se;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int num_nodes;
  cin >> num_nodes;
  for (int u = 0; u < num_nodes; u++) {
    int num_neighbors;
    cin >> num_neighbors;
    adjList[u].resize(num_neighbors);
    for (int i = 0; i < num_neighbors; i++) {
      cin >> adjList[u][i];
    }
  }
  dfs(0);
  build(path_size);
  int num_queries;
  cin >> num_queries;
  for (int i = 0; i < num_queries; i++) {
    int u, v;
    cin >> u >> v;
    cout << lca(u, v) << '\n';
  }
  return 0;
}
```

In this optimized code, the `fastio` method makes the I/O operations faster. The usage of direct assignment instead of `push_back` reduces the time complexity of the program. Finally, defining the size of the vector `path` at the beginning of the `main` function saves memory reallocation times.