Here are the optimization steps for the given C++ program:

1. Replace `scanf` and `printf` with `cin` and `cout` respectively. The reason for this is `scanf` and `printf` are slower than `cin` and `cout` when ios::sync_with_stdio(0); cin.tie(0); is used.

2. Reduce the use of global variables. Global variables have a larger scope and lifetime. They exist for the lifetime of the program, which can lead to increased memory usage.

3. Use reserve() function for vector to avoid repeated reallocation and copying of vector when elements are inserted.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define fi first
#define se second
typedef pair<int, int> ii;
typedef vector<int> vi;
const int MAXN = 100005;
const int LOGN = 20;
int idx_in_path[MAXN];
ii path[MAXN << 1];
vi adjList[MAXN];
int path_size = 0;
void dfs(int u, int depth = 0) {
  idx_in_path[u] = path_size;
  path[path_size++] = ii(depth, u);
  for (int v : adjList[u]) {
    dfs(v, depth + 1);
    path[path_size++] = ii(depth, u);
  }
}
ii ST[LOGN][MAXN << 1];
void build(int n) {
  int h = ceil(log2(n + 1));
  for (int i = 0; i < n; i++)
    ST[0][i] = path[i];
  for (int i = 1; i < h; i++)
    for (int j = 0; j + (1 << i) <= n; j++)
      ST[i][j] = min(ST[i - 1][j], ST[i - 1][j + (1 << (i - 1))]);
}
int lca(int u, int v) {
  int l = idx_in_path[u], r = idx_in_path[v];
  if (l > r)
    swap(l, r);
  r++;
  int p = 31 - __builtin_clz(r - l);
  return min(ST[p][l], ST[p][r - (1 << p)]).se;
}
int main() {
  ios::sync_with_stdio(0); cin.tie(0);
  int num_nodes;
  cin >> num_nodes;
  for (int u = 0; u < num_nodes; u++) {
    int num_neighbors;
    cin >> num_neighbors;
    adjList[u].reserve(num_neighbors);
    for (int i = 0; i < num_neighbors; i++) {
      int v;
      cin >> v;
      adjList[u].push_back(v);
    }
  }
  dfs(0);
  build(path_size);
  int num_queries;
  cin >> num_queries;
  for (int i = 0; i < num_queries; i++) {
    int u, v;
    cin >> u >> v;
    cout << lca(u, v) << "\n";
  }
  return 0;
}
```

Please note that these optimizations might not drastically improve the performance but they are good practices to follow for efficient programming.