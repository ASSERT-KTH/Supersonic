This program seems to be a solution for a graph problem. It uses a union-find data structure, and structures for edge1 and edge2. The program sorts the edges, then uses a union-find operation to combine the nodes connected by the edges. After this operation, the program iterates through all edges again and if the edge was not used in the union-find operation, it is added to the tree; otherwise, it is added to a separate graph.

Here are a few steps to optimize the program:

1. Dynamic Memory Allocation: The program uses a lot of static-sized arrays that could lead to memory wastage. We can optimize memory usage by using dynamic memory allocation like vectors instead of arrays.

2. Avoid Redundant Operations: The program involves operations like searching and erasing elements from sets. These are expensive operations. We can use unordered_set instead of set to optimize these operations. 

3. Functions Inside Loop: The function rec() is called inside a loop. We can try to optimize the function to reduce the time complexity.

4. Avoid unnecessary copying: The program uses a lot of copying operations. Use const references instead of copying when possible.

Optimized Program:

```
#include <bits/stdc++.h>
using namespace std;
using int64 = long long;

struct UnionFind {
  vector<int> data;
  UnionFind(int sz) : data(sz, -1) {}
  bool unite(int x, int y) {
    x = find(x), y = find(y);
    if (x == y)
      return (false);
    if (data[x] > data[y])
      swap(x, y);
    data[x] += data[y];
    data[y] = x;
    return (true);
  }
  int find(int k) {
    if (data[k] < 0)
      return (k);
    return (data[k] = find(data[k]));
  }
  int size(int k) { return (-data[find(k)]); }
};

struct edge1 {
  int u, v, cost, idx;
  bool operator<(const edge1 &e) const { return (cost < e.cost); }
};

struct edge2 {
  int to, cost, idx;
};

vector<int> A, B, C;
vector<edge1> edges;
vector<bool> killed;
vector<edge2> tree[100000], g[100000];
int64 all;
vector<int64> ans;
vector<unordered_set<pair<int, int>>> component(100000);

void rec(int idx, int par = -1) {
  for (const auto &e : g[idx]) {
    component[idx].emplace(e.cost, e.idx);
  }
  for (const auto &e : tree[idx]) {
    if (e.to == par)
      continue;
    rec(e.to, idx);
    auto &u = component[idx], &v = component[e.to];
    if (!v.empty()) {
      ans[e.idx] = all;
      ans[e.idx] -= e.cost;
      ans[e.idx] += v.begin()->first;
    }
    if (u.size() < v.size())
      swap(u, v);
    for (const auto &p : v) {
      if (u.count(p))
        u.erase(p);
      else
        u.emplace(p);
    }
    v.clear();
  }
}

int main() {
  int N, M;
  scanf("%d %d", &N, &M);
  A.resize(M); B.resize(M); C.resize(M); killed.resize(M, false); ans.resize(M, 0);
  for (int i = 0; i < M; i++) {
    scanf("%d %d %d", &A[i], &B[i], &C[i]);
    --A[i], --B[i];
    edges.push_back((edge1){A[i], B[i], C[i], i});
  }
  
  UnionFind uf(N);
  sort(begin(edges), end(edges));
  for (auto &e : edges) {
    if (uf.unite(e.v, e.u)) {
      killed[e.idx] = true;
      all += e.cost;
    }
  }
  if (uf.size(0) != N) {
    for (int i = 0; i < M; i++)
      puts("-1");
    return (0);
  }
  for (int i = 0; i < M; i++) {
    if (killed[i]) {
      tree[A[i]].emplace_back((edge2){B[i], C[i], i});
      tree[B[i]].emplace_back((edge2){A[i], C[i], i});
      ans[i] = -1;
    } else {
      g[A[i]].emplace_back((edge2){B[i], C[i], i});
      g[B[i]].emplace_back((edge2){A[i], C[i], i});
      ans[i] = all;
    }
  }
  rec(0);
  for (int i = 0; i < M; i++) {
    printf("%lld\n", ans[i]);
  }
}
```