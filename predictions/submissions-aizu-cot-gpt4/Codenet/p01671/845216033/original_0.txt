The given C/C++ program uses Kruskal's algorithm to create a Union-Find data structure, to find the minimum cost spanning tree in a graph. It involves multiple steps and uses various data structures such as vector, set and struct. 

Here are some optimization steps:

1. Use static arrays instead of vectors: In C++, static arrays are faster than vectors because vectors have an overhead of dynamic memory allocation and deallocation. We can replace vectors with static arrays where the size of the array is known before runtime.

2. Avoid using `std::set`: The `std::set` container in C++ is implemented as a binary search tree (BST) which makes the operations like insertion, deletion, and search operations more expensive. Instead of using `std::set`, we can use a sorted array and binary search to improve performance.

3. Replace `std::pair` with struct: Using `std::pair` can create unnecessary overhead. Instead of using a pair, we can use a struct, which is more efficient.

4. Avoid unnecessary function calls: Function calls can be expensive in terms of performance. If not necessary, avoid creating separate functions for simple operations.

5. Use pointer instead of passing by value: Passing by value can be expensive in terms of memory and CPU cycles. Instead, use pointers wherever possible.

Here is the optimized code implementing the above steps:

```cpp
#include <bits/stdc++.h>
using namespace std;
using int64 = long long;

struct UnionFind {
  int data[200005];
  UnionFind(int sz) {
    for(int i=0; i<sz; i++)
      data[i]=-1;
  }
  bool unite(int x, int y) {
    x = find(x), y = find(y);
    if (x == y)
      return (false);
    if (data[x] > data[y])
      swap(x, y);
    data[x] += data[y];
    data[y] = x;
    return (true);
  }
  int find(int k) {
    if (data[k] < 0)
      return (k);
    return (data[k] = find(data[k]));
  }
  int size(int k) { return (-data[find(k)]); }
};

struct edge1 {
  int u, v, cost, idx;
  bool operator<(const edge1 &e) const { return (cost < e.cost); }
};
struct edge2 {
  int to, cost, idx;
};

int N, M, A[200000], B[200000], C[200000];
edge1 edges[200005];
bool killed[200000];
edge2 tree[100000][100000], g[100000][100000];
int64 all, ans[200000];

void rec(int idx, int par = -1) {
  for (auto &e : g[idx]) {
    component[idx].insert(e.cost);
  }
  for (auto &e : tree[idx]) {
    if (e.to == par)
      continue;
    rec(e.to, idx);
    auto &u = component[idx], &v = component[e.to];
    if (!v.empty()) {
      ans[e.idx] = all;
      ans[e.idx] -= e.cost;
      ans[e.idx] += *v.begin();
    }
    if (u.size() < v.size())
      swap(u, v);
    while (!v.empty()) {
      auto p = *v.begin();
      if (u.count(p))
        u.erase(p);
      else
        u.insert(p);
      v.erase(p);
    }
  }
}

int main() {
  scanf("%d %d", &N, &M);
  for (int i = 0; i < M; i++) {
    scanf("%d %d %d", &A[i], &B[i], &C[i]);
    --A[i], --B[i];
    edges[i]={A[i], B[i], C[i], i};
  }
  UnionFind uf(N);
  sort(begin(edges), end(edges));
  for (auto &e : edges) {
    if (uf.unite(e.v, e.u)) {
      killed[e.idx] = true;
      all += e.cost;
    }
  }
  if (uf.size(0) != N) {
    for (int i = 0; i < M; i++)
      puts("-1");
    return (0);
  }
  for (int i = 0; i < M; i++) {
    if (killed[i]) {
      tree[A[i]].push_back({B[i], C[i], i});
      tree[B[i]].push_back({A[i], C[i], i});
      ans[i] = -1;
    } else {
      g[A[i]].push_back({B[i], C[i], i});
      g[B[i]].push_back({A[i], C[i], i});
      ans[i] = all;
    }
  }
  rec(0);
  for (int i = 0; i < M; i++) {
    printf("%lld\n", ans[i]);
  }
}
```

Note: This code block assumes that the maximum size of the arrays is known beforehand.