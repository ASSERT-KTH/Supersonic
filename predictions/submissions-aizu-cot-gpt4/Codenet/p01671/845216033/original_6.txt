The given C++ program is a relatively complex one. It uses union-find data structure to keep track of a disjoint-set of elements partitioned into a number of disjoint (non-overlapping) subsets. It also uses Kruskal's algorithm to find a minimum spanning tree for a connected weighted graph.

Looking at the code, there are not many obvious optimizations that can be performed without changing the logic of the program.

1. **Input/Output Optimization**: Using scanf/printf for input/output operations instead of cin and cout can reduce the execution time.

2. **Avoiding Multiple calls to functions**: Functions like "size()" in vectors are called multiple times. It would be beneficial to avoid such multiple function calls by storing the value in a variable and then using it.

3. **Use of Reserve function in vectors**: If we know the size of vector beforehand which we need to push back later, then using reserve function we can avoid unnecessary re-allocations and copying of entire vector every time a new element is inserted, thus improving the efficiency of the code.

4. **Avoiding use of <bits/stdc++.h>**: This is basically a header file that includes every standard library. Including it will increase your compile time significantly. So, it's better to include only those library which are required.

Here is an optimized version of the code:

```cpp
#include <cstdio>
#include <vector>
#include <algorithm>
#include <set>
using namespace std;
using int64 = long long;
struct UnionFind {
  vector<int> data;
  UnionFind(int sz) : data(sz, -1) {}
  bool unite(int x, int y) {
    x = find(x), y = find(y);
    if (x == y)
      return (false);
    if (data[x] > data[y])
      swap(x, y);
    data[x] += data[y];
    data[y] = x;
    return (true);
  }
  int find(int k) {
    if (data[k] < 0)
      return (k);
    return (data[k] = find(data[k]));
  }
  int size(int k) { return (-data[find(k)]); }
};
struct edge1 {
  int u, v, cost, idx;
  bool operator<(const edge1 &e) const { return (cost < e.cost); }
};
struct edge2 {
  int to, cost, idx;
};
int N, M, A[200000], B[200000], C[200000];
vector<edge1> edges;
bool killed[200000];
vector<edge2> tree[100000], g[100000];
int64 all, ans[200000];
set<pair<int, int>> component[100000];
void rec(int idx, int par = -1) {
  for (auto &e : g[idx]) {
    component[idx].emplace(e.cost, e.idx);
  }
  for (auto &e : tree[idx]) {
    if (e.to == par)
      continue;
    rec(e.to, idx);
    auto &u = component[idx], &v = component[e.to];
    if (!v.empty()) {
      ans[e.idx] = all;
      ans[e.idx] -= e.cost;
      ans[e.idx] += v.begin()->first;
    }
    if (u.size() < v.size())
      swap(u, v);
    while (!v.empty()) {
      auto p = v.begin();
      if (u.count(*p))
        u.erase(*p);
      else
        u.emplace(*p);
      v.erase(p);
    }
  }
}
int main() {
  scanf("%d %d", &N, &M);
  edges.reserve(M);
  for (int i = 0; i < M; i++) {
    scanf("%d %d %d", &A[i], &B[i], &C[i]);
    --A[i], --B[i];
    edges.push_back((edge1){A[i], B[i], C[i], i});
  }
  UnionFind uf(N);
  sort(begin(edges), end(edges));
  for (auto &e : edges) {
    if (uf.unite(e.v, e.u)) {
      killed[e.idx] = true;
      all += e.cost;
    }
  }
  if (uf.size(0) != N) {
    for (int i = 0; i < M; i++)
      printf("-1\n");
    return (0);
  }
  for (int i = 0; i < M; i++) {
    if (killed[i]) {
      tree[A[i]].push_back((edge2){B[i], C[i], i});
      tree[B[i]].push_back((edge2){A[i], C[i], i});
      ans[i] = -1;
    } else {
      g[A[i]].push_back((edge2){B[i], C[i], i});
      g[B[i]].push_back((edge2){A[i], C[i], i});
      ans[i] = all;
    }
  }
  rec(0);
  for (int i = 0; i < M; i++) {
    printf("%lld\n", ans[i]);
  }
}
```

Please note that major changes are not done to the code as the question requested for a small modification to the original one.
