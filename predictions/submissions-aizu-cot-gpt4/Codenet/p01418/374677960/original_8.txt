The code can be optimized for running time by avoiding the computation of the same sub-problems multiple times by using Dynamic Programming (DP). This technique is also known as memoization.

The given code is recursively calling the dfs function without storing the results of its previous calls. In the case of overlapping subproblems, this will lead to the same computations being performed multiple times, hence increasing the running time.

To optimize this, we can create a 3D array to store the results of previous calls. For every call to dfs, we first check if the result is already available in the array. If it is, we return the stored result instead of recalculating it. If not, we calculate it and store the result in the array before returning it.

The optimized code would look something like this:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MAX = 100;
double dp[MAX][MAX][MAX]; // assuming the maximum value of d, l and r will be 100.
int K, R, L;
bool calculated[MAX][MAX][MAX] = {false}; // to keep track of the calculated results
double P, E, T;
double dfs(int d, double l, double r) {
  double mid = (l + r) / 2;
  if (!d)
    return (T - E < mid && mid < T + E) ? 1 : 0;
  if (r < T - E || T + E < l)
    return 0;
  if (calculated[d][l][r]) // if the result is already calculated, return it
    return dp[d][l][r];
  if (mid >= T)
    dp[d][l][r] = (1.0 - P) * dfs(d - 1, l, mid) + P * dfs(d - 1, mid, r);
  else
    dp[d][l][r] = (1.0 - P) * dfs(d - 1, mid, r) + P * dfs(d - 1, l, mid);
  calculated[d][l][r] = true; // mark the result as calculated
  return dp[d][l][r];
}
main() {
  cin >> K >> L >> R >> P >> E >> T;
  printf("%.9f\n", dfs(K, L, R));
}
```

Please note that the maximum value of d, l and r should be known beforehand to declare the size of the dp and calculated arrays. If the maximum values are not known, then a data structure like map can be used.

Also note that this optimization will increase memory usage due to the extra storage of the dp and calculated arrays. But in return, the running time will be significantly reduced.