The code initially creates a 2D array of integers to keep track of the cards of each suit that have been drawn. It then loops through two times the number of cards drawn (not sure why it's done twice, perhaps for a card game that uses two decks), and for each card, it updates the corresponding index in the 2D array to 1. After this, it iterates through each suit and prints the numbers of the cards that have not been drawn.

First, let's address the memory usage. The array `Cards` has fixed size of 4x14, which is not very large, so the memory consumption of this program is not a problem. However, if we were dealing with larger inputs, we could consider using a different data structure that only stores the cards that have been drawn, such as a Set or a HashSet (not available in C, but available in C++). This would reduce the memory usage, especially if the number of cards drawn is much smaller than the total number of cards.

Second, let's optimize the running time. The part that takes the longest time is the four loops that iterate through each suit. These loops are almost identical except for the suit they're dealing with. We can combine these into a single loop by adding an outer loop that iterates through the suits.

Here is the optimized code:

```c
#include <stdio.h>

int main(void) {
  int Cards[4][14] = {{}};
  int i, j, n, Num;
  char Mark;
  char suits[] = {'S', 'H', 'C', 'D'};

  scanf("%d", &n);
  for (i = 0; i < n; i++) {
    scanf(" %c", &Mark);
    scanf("%d", &Num);
    if (Mark == 'S') {
      Cards[0][Num - 1] = 1;
    } else if (Mark == 'H') {
      Cards[1][Num - 1] = 1;
    } else if (Mark == 'C') {
      Cards[2][Num - 1] = 1;
    } else if (Mark == 'D') {
      Cards[3][Num - 1] = 1;
    }
  }

  for (i = 0; i < 4; i++) {
    for (j = 1; j < 14; j++) {
      if (Cards[i][j - 1] != 1) {
        printf("%c %d\n", suits[i], j);
      }
    }
  }

  return 0;
}
```

In this optimized code, `scanf(" %c", &Mark);` is used instead of `scanf("%c ", &Mark);` to skip any whitespace characters before reading the card suit. This change avoids the need to loop twice the number of cards. The four print loops are combined into a single loop by adding an outer loop that iterates through the suits. The suit character is stored in the `suits` array and accessed by the outer loop index.