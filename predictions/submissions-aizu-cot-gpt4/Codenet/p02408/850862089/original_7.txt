Step 1: Improving the usage of scanf
We can combine both scanf statements into one. This will reduce the number of system calls the program makes which will boost the runtime performance.

Step 2: Optimizing the conditional statements
Instead of using multiple separate if statements, we can use a switch statement. This is because switch statements are generally faster when dealing with more than two conditions. 

Step 3: Optimizing the printing loop
We have four separate loops for printing each card type. These can be combined into one loop, which will reduce the number of iterations and thus improve the program's speed.

Here is the optimized version of the program:

```C
#include <stdio.h>
int main(void) {
  int Cards[4][14] = {{}};
  int i, j, n, Num;
  char Mark;
  scanf("%d", &n);
  for (i = 0; i < 2 * n; i++) {
    scanf(" %c%d", &Mark, &Num);
    switch (Mark) {
      case 'S':
        Cards[0][Num - 1] = 1;
        break;
      case 'H':
        Cards[1][Num - 1] = 1;
        break;
      case 'C':
        Cards[2][Num - 1] = 1;
        break;
      case 'D':
        Cards[3][Num - 1] = 1;
        break;
    }
  }
  char CardTypes[4] = {'S', 'H', 'C', 'D'};
  for (i = 0; i < 4; i++) {
    for (j = 1; j < 14; j++) {
      if (Cards[i][j - 1] != 1) {
        printf("%c %d\n", CardTypes[i], j);
      }
    }
  }
  return 0;
}
```
Please note that the space before %c in scanf is intentional and it is needed to consume any whitespace characters, including the newline.