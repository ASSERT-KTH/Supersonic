The given code can be optimized in the following ways:

1. **Removing Redundant Code:** The multiple if-else conditions in the first loop can be replaced with a switch-case. This makes the code cleaner and more efficient, especially when the number of conditions is large.

2. **Code Duplication:** The 4 loops at the end of the code that print the cards are essentially doing the same thing. They can be merged into a single loop, reducing the amount of duplicated code. This makes the code more readable and maintainable.

3. **Avoiding Global Variables:** Although this code doesn't have any global variables, it's a good practice to avoid them. This is because they can lead to unexpected behavior if they're accessed and modified from different parts of the code.

Here is the optimized code:

```c
#include <stdio.h>

int main(void) {
  int Cards[4][14] = {{}};
  int n, Num;
  char Mark;
  
  scanf("%d", &n);
  for (int i = 0; i < 2 * n; i++) {
    scanf(" %c", &Mark);
    scanf("%d", &Num);
    
    switch(Mark) {
    case 'S':
      Cards[0][Num - 1] = 1;
      break;
    case 'H':
      Cards[1][Num - 1] = 1;
      break;
    case 'C':
      Cards[2][Num - 1] = 1;
      break;
    case 'D':
      Cards[3][Num - 1] = 1;
      break;
    }
  }
  
  char cardTypes[4] = {'S', 'H', 'C', 'D'};
  for (int i = 0; i < 4; i++) {
    for (int j = 1; j <= 13; j++) {
      if (Cards[i][j - 1] != 1) {
        printf("%c %d\n", cardTypes[i], j);
      }
    }
  }
  
  return 0;
}
```

This code is optimized for running time and memory usage. It contains less redundancy and is more maintainable.