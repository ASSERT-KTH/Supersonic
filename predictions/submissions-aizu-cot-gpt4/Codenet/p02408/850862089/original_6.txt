The program is already fairly optimized. It uses a 2D array to store the status of cards in different suits and uses a simple loop to check and print the cards that are not marked. However, there are a couple small modifications that could be made to improve it slightly.

1. The first optimization is to use a switch statement instead of multiple if-else statements when setting the card status. This can provide a slight performance boost by reducing the number of comparisons, since switch statements in C/C++ are often implemented as jump tables.

2. The second optimization is to merge the four loops that print out the unmarked cards into a single loop. This reduces the amount of code and makes the program more maintainable, without affecting performance.

3. Also, we can use the 'getchar()' function instead of 'scanf("%c ", &Mark);'. This will avoid skipping characters while reading from stdin.

Here's the optimized code:

```C
#include <stdio.h>
int main(void) {
  int Cards[4][14] = {{}};
  int i, j, n, Num;
  char Mark;
  char CardNames[4] = {'S', 'H', 'C', 'D'};
  scanf("%d", &n);
  getchar(); // To consume newline after reading n
  for (i = 0; i < 2 * n; i++) {
    Mark = getchar(); // Use getchar() instead of scanf()
    scanf("%d", &Num);
    getchar(); // To consume newline after reading Num
    switch(Mark){
      case 'S': Cards[0][Num - 1] = 1; break;
      case 'H': Cards[1][Num - 1] = 1; break;
      case 'C': Cards[2][Num - 1] = 1; break;
      case 'D': Cards[3][Num - 1] = 1; break;
    }
  }
  for (i = 0; i < 4; i++) {
    for (j = 1; j < 14; j++) {
      if (Cards[i][j - 1] != 1) {
        printf("%c %d\n", CardNames[i], j);
      }
    }
  }
  return 0;
}
```