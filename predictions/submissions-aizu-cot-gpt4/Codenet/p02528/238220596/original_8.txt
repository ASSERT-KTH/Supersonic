Here are the steps to optimize the given code:

1. Reserve I/O Buffer: To speed up the I/O operations, you can reserve some buffer for cin and cout using 'cin.rdbuf()->pubsetbuf()'.

2. Use fast I/O operations: cin and cout are generally slower than scanf and printf. You can replace cin and cout with scanf and printf to speed up the I/O operations.

3. Use '\n' instead of endl: 'endl' causes an unnecessary flush operation which slows down the output. We can replace 'endl' with '\n'.

4. Use the prefix version of increment and decrement operators: The prefix version (++i or --i) is generally faster than the postfix (i++ or i--) version because the latter involves a copy operation.

Here is the optimized program:

```cpp
#include <cstdio>
#include <utility>

template <class T, class Compare>
void hsort(T a, std::ptrdiff_t n, Compare cmp) {
  if (n < 2) {
    return;
  }
  using dif_t = std::ptrdiff_t;
  auto heapify = [](T a, dif_t p, dif_t hpsz, Compare cmp) {
    dif_t c;
    while ((c = (p << 1) + 1) < hpsz) {
      if (c + 1 < hpsz && cmp(a[c], a[c + 1])) {
        ++c;
      }
      if (!cmp(a[p], a[c])) {
        break;
      }
      std::swap(a[p], a[c]);
      p = c;
    }
  };
  for (dif_t i = n / 2; i >= 0; --i) {
    heapify(a, i, n, cmp);
  }
  for (dif_t i = n - 1; i > 0; --i) {
    std::swap(a[0], a[i]);
    heapify(a, 0, i, cmp);
  }
}

template <class Iterator, class Compare>
void hsort(Iterator a0, Iterator aN, Compare cmp) {
  using dif_t = typename std::iterator_traits<Iterator>::difference_type;
  dif_t n = std::distance(a0, aN);
  hsort(a0, n, cmp);
}

template <class Iterator> void hsort(Iterator a0, Iterator aN) {
  using val_t = typename std::iterator_traits<Iterator>::value_type;
  hsort(a0, aN, std::less<val_t>());
}

int main(void) {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  
  char buffer[1000000];
  std::cin.rdbuf()->pubsetbuf(buffer, sizeof(buffer));
  
  int n;
  scanf("%d", &n);
  
  static int a[1000000];
  for (int i = 0; i < n; ++i)
    scanf("%d", &a[i]);
    
  hsort(a, a + n);
  
  for (int i = 0; i < n; ++i)
    printf("%d%c", a[i], ((i == n - 1) ? '\n' : ' '));
  
  return 0;
}
```