This code appears to be an implementation of a graph search algorithm, potentially Dijkstra's or A* algorithm, and is already quite optimized. However, there are some parts that can be improved for further performance optimization.

Optimization steps:

1. Reduce the use of maps for v2id and instead use a 2D vector array, as lookups in a map are slower than in a vector. This change will improve the time complexity from O(log n) to O(1) for each lookup. The space complexity will increase slightly, but it should be manageable given the constraint of the problem.

2. Use `emplace_back` instead of `push_back` to avoid the extra copy when inserting elements into the vector.

3. Avoid repeatedly accessing map elements using the operator []. Assign the result to a reference or pointer and use that instead.

4. Instead of using a set to store heights, consider using a sorted vector. Insertion into a set is O(log n), whereas insertion into a vector is O(1). If we insert all elements first and then sort the vector, the overall complexity will be O(n log n), which is the same as inserting n elements into a set. However, std::sort generally has better constants than a set insertion, so this should result in a speedup.

5. The `assert` statements are likely for debugging and are not needed in a production environment. We can remove these.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep(i, n) for (int(i) = 0; (i) < (int)(n); ++(i))

struct edge {
  int to;
  ll cost;
};

const int V = 100000;
const int VV = 1000000;
const ll INF = LLONG_MAX / 3;
vector<edge> G[V], gg[VV];
vector<int> height[V];
int n, m;
ll X;
int H[V];
int v2id[V][V];
int max_h[V] = {};
ll d[VV];

int main() {
  scanf(" %d %d %lld", &n, &m, &X);
  rep(i, n) scanf(" %d", &H[i]);
  rep(i, m) {
    int a, b, t;
    scanf(" %d %d %d", &a, &b, &t);
    --a;
    --b;
    G[a].emplace_back(edge{b, t});
    G[b].emplace_back(edge{a, t});
  }

  int ct = 1;
  priority_queue<pair<int, int>> que;
  que.push(make_pair(X, 0));
  v2id[0][X] = 0;
  max_h[0] = X;
  height[0].push_back(X);
  while (!que.empty()) {
    pair<int, int> p = que.top();
    que.pop();
    int v = p.second, h = p.first;
    if (h < max_h[v]) continue;
    for (const auto &e : G[v]) {
      int bh = h;
      int nh = h - e.cost;
      if (nh < 0) continue;
      if (nh > H[e.to]) {
        bh = H[e.to] + e.cost;
        nh = H[e.to];
      }
      if (nh > max_h[e.to]) {
        if (!v2id[v][bh]) {
          v2id[v][bh] = ct++;
          height[v].push_back(bh);
        }
        if (!v2id[e.to][nh]) {
          v2id[e.to][nh] = ct++;
          height[e.to].push_back(nh);
        }
        int uu = v2id[v][bh], vv = v2id[e.to][nh];
        gg[uu].emplace_back(edge{vv, e.cost});
        max_h[e.to] = nh;
        que.push(make_pair(max_h[e.to], e.to));
      }
    }
  }

  rep(i, n) for (const auto &e : G[i]) {
    if (H[i] < e.cost) continue;
    if (!v2id[i][e.cost]) {
      v2id[i][e.cost] = ct++;
      height[i].push_back(e.cost);
    }
    if (!v2id[e.to][0]) {
      v2id[e.to][0] = ct++;
      height[e.to].push_back(0);
    }
    int uu = v2id[i][e.cost];
    int vv = v2id[e.to][0];
    gg[uu].emplace_back(edge{vv, e.cost});
  }

  if (!v2id[n - 1][H[n - 1]]) {
    v2id[n - 1][H[n - 1]] = ct++;
    height[n - 1].push_back(H[n - 1]);
  }

  rep(i, n) {
    sort(height[i].begin(), height[i].end());
    for (int j = 0; j < height[i].size() - 1; ++j) {
      int uu = v2id[i][height[i][j]];
      int vv = v2id[i][height[i][j + 1]];
      int dist = height[i][j + 1] - height[i][j];
      gg[uu].emplace_back(edge{vv, dist});
      gg[vv].emplace_back(edge{uu, dist});
    }
  }

  int start = v2id[0][X];
  int goal = v2id[n - 1][H[n - 1]];
  fill(d, d + VV, INF);
  d[start] = 0;
  priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>> pq;
  pq.push(make_pair(0, start));
  while (!pq.empty()) {
    pair<ll, int> now = pq.top();
    pq.pop();
    int v = now.second;
    if (now.first > d[v]) continue;
    for (const auto &e : gg[v]) {
      if (d[e.to] > d[v] + e.cost) {
        d[e.to] = d[v] + e.cost;
        pq.push(make_pair(d[e.to], e.to));
      }
    }
  }

  ll ans = d[goal];
  if (ans == INF) ans = -1;
  printf("%lld\n", ans);
  return 0;
}
```