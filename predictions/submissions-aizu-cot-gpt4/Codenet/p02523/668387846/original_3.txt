The given program is already quite efficient, but there are a few minor optimizations that can be made. 

1. First, the code is currently using the `std::cin` and `std::cout` objects for input/output, which can be slower than the C-style `scanf` and `printf` functions. So, we can replace all `cin` and `cout` with `scanf` and `printf` respectively.

2. Second, the program currently reads the real and imaginary parts of the complex numbers separately. It would be slightly more efficient to read them together in one call to `scanf`.

3. Third, there's no need to `include <iostream>` if we're using `scanf` and `printf`.

4. Fourth, it's generally good practice to avoid `using namespace std;` in C++ programs. It can lead to name clashes if the program is expanded in the future.

Taking these points into account, the optimized program would look like this:

```cpp
#include <cstdio>
#include <complex>
#include <cmath>

int main() {
  std::complex<double> P1, P2;
  scanf("%lf %lf", &P1.real(), &P1.imag());
  scanf("%lf %lf", &P2.real(), &P2.imag());
  printf("%.5f\n", std::abs(P1 - P2));
  return 0;
}
```

Please note that in the current standard of C++ (C++11 and onwards), the real() and imag() functions are not assignable. They return the value, not the reference. So, if your compiler is based on the C++11 or onwards, you have to change the way of initializing the complex numbers like this:

```cpp
#include <cstdio>
#include <complex>
#include <cmath>

int main() {
  double r1, i1, r2, i2;
  scanf("%lf %lf", &r1, &i1);
  scanf("%lf %lf", &r2, &i2);
  std::complex<double> P1(r1, i1), P2(r2, i2);
  printf("%.5f\n", std::abs(P1 - P2));
  return 0;
}
```