First, let's go through the code and identify areas where optimization can be done:

1. Variable Initialization: The program uses a lot of global variables which are initialized at the start of the program and can be moved to where they are actually used.

2. Use of large arrays: The program uses large arrays initialized globally which can be made local to the functions where they are used and can be dynamically allocated.

3. Use of redundant code: There are sections of code that perform the same operation multiple times which can be reduced to a single time.

4. Use of macros: Macros like ck, sb, and cb are defined which can be converted to inline functions for better readability.

Here's the optimized version of your program:

```cpp
#include <algorithm>
#include <bitset>
#include <functional>
#include <set>
#include <stdio.h>
#include <string.h>
#include <string>
#include <vector>
using namespace std;

inline bool ck(char* vis, int x) { return vis[x >> 3] & (1 << (x&7)); }
inline void sb(char* vis, int x) { vis[x >> 3] |= (1 << (x&7)); }

struct pt {
  int ztt;
  int lwz;
  int step;
};

int ddd[8] = {10000000, 1000000, 100000, 10000, 1000, 100, 10, 1};

void bfs(char* bj, char* vis, pt* dl, int& bs, int& tt) {
  int front = 1, back = 1;
  tt = 0;
  bs = 0;
  memset(vis, 0, 80000000 / 8);
  int cs = atoi(bj);
  sb(vis, cs);
  pt lsss;
  lsss.ztt = cs;
  lsss.lwz = strchr(bj, '0') - bj;
  lsss.step = 0;
  dl[back] = lsss;
  back++;

  while (front < back) {
    pt ls1 = dl[front];
    front++;
    if (ls1.ztt == 1234567) {
      bs = ls1.step;
      tt = 1;
      return;
    }
    pt lsjr;
    int kkk[4] = {-1, 1, -4, 4};
    for (int i = 0; i < 4; i++) {
      lsjr.lwz = ls1.lwz + kkk[i];
      if ((ls1.lwz == 3 && lsjr.lwz == 4) || (ls1.lwz == 4 && lsjr.lwz == 3))
        continue;
      if (lsjr.lwz >= 0 && lsjr.lwz <= 7) {
        int a = ls1.ztt / ddd[ls1.lwz] % 10;
        int b = ls1.ztt / ddd[lsjr.lwz] % 10;
        lsjr.ztt = ls1.ztt + (b - a) * ddd[ls1.lwz] + (a - b) * ddd[lsjr.lwz];
        if (!ck(vis, lsjr.ztt)) {
          lsjr.step = ls1.step + 1;
          sb(vis, lsjr.ztt);
          dl[back] = lsjr;
          back++;
        }
      }
    }
  }
}

int main() {
  char* bj = new char[8];
  char* vis = new char[80000000 / 8];
  pt* dl = new pt[1 << 16];
  int bs = 0;
  int tt = 0;

  while (1) {
    if (scanf("%c", &bj[0]) == EOF) {
      return 0;
    }
    scanf("%*c");
    for (int i = 1; i <= 6; i++) {
      scanf("%c%*c", &bj[i]);
    }
    scanf("%c", &bj[7]);
    bfs(bj, vis, dl, bs, tt);
    if (tt) {
      printf("%d\n", bs);
    } else {
      printf("-1\n");
    }
    while (getchar() != '\n')
      ;
  }

  delete[] bj;
  delete[] vis;
  delete[] dl;

  return 0;
}
```

This version of the program reduces the scope of variables to where they are actually used and eliminates redundant calculation. Also, it dynamically allocates large arrays and deallocates them when no longer needed, which saves memory. Finally, it replaces macros with inline functions for better readability and debugging.