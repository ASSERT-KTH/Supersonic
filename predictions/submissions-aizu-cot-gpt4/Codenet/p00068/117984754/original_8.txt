Here are the steps for optimizing this code:

1. Avoid using `bits/stdc++.h`: This header file includes a lot of unnecessary stuff that is not needed for your program. Including this file significantly increases the compilation time. You should only include the libraries that you are using.

2. Avoid using `using namespace std`: This can cause name clashes if any identifier in your code matches a standard library function. It's better to use the `std::` prefix explicitly where necessary.

3. Avoid defining macros: In modern C++, macros are usually avoided and replaced with inline functions, constexpr or enums as they are safer and more flexible.

4. Use `std::array` instead of raw array: `std::array` is a container that encapsulates fixed size arrays and is safer and easier to use.

5. Use `constexpr` for constants: `constexpr` tells the compiler to evaluate the value of the expression at compile time rather than run time which can improve performance.

6. Avoid using `typedef`: In modern C++, `using` is preferred over `typedef` for type aliasing.

7. Use `const` where applicable: This can help the compiler optimize your code and is a good practice.

8. Reduce scope of variables: Variables should be declared as close as possible to where they are used. This can help reduce memory usage.

Optimized code:

```cpp
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <array>

using ll = long long;
using pii = std::pair<int, int>;
constexpr double INF = 999999999;
constexpr double EPS = 1e-10;

class P {
public:
  double x, y;
  P(double _x = 0, double _y = 0) : x(_x), y(_y){};
  P operator+(P p) const { return P(x + p.x, y + p.y); }
  P operator-(P p) const { return P(x - p.x, y - p.y); }
  P operator*(double k) const { return P(x * k, y * k); }
  P operator/(double k) const { return P(x / k, y / k); }
  bool operator==(const P &p) const {
    return (std::fabs(x - p.x) < EPS && std::fabs(y - p.y) < EPS);
  }
  double norm() const { return x * x + y * y; }
  double abs() const { return std::sqrt(norm()); }
};

using Polygon = std::vector<P>;
using Vector = P;
constexpr int MAX_N = 100;
using ps_array = std::array<P, MAX_N>;

double dot(Vector a, Vector b) { return a.x * b.x + a.y * b.y; }
double cross(Vector a, Vector b) { return a.x * b.y - a.y * b.x; }
ps_array ps;

bool cmp_x(const P &p, const P &q) {
  if (p.x != q.x)
    return p.x < q.x;
  return p.y < q.y;
}

std::vector<P> convex_hull(ps_array &ps, int n) {
  std::sort(ps.begin(), ps.begin() + n, cmp_x);
  int k = 0;
  std::vector<P> qs(n * 2);
  for (int i = 0; i < n; i++) {
    while (k > 1 && cross((qs[k - 1] - qs[k - 2]), (ps[i] - qs[k - 1])) <= 0)
      k--;
    qs[k++] = ps[i];
  }
  for (int i = n - 2, t = k; i >= 0; i--) {
    while (k > t && cross((qs[k - 1] - qs[k - 2]), (ps[i] - qs[k - 1])) <= 0)
      k--;
    qs[k++] = ps[i];
  }
  qs.resize(k - 1);
  return qs;
}

int main() {
  int N;
  while (std::cin >> N && N) {
    for(int i = 0; i < N; i++) {
      char ch;
      std::cin >> ps[i].x >> ch >> ps[i].y;
    }
    std::vector<P> res = convex_hull(ps, N);
    std::cout << N - res.size() << std::endl;
  }
}
```