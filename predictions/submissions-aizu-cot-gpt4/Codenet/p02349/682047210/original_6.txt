Optimization Steps:

1. The first thing you might notice is that the code uses the `#include <bits/stdc++.h>` directive, which is considered a bad practice in production code because it includes all the standard libraries at once, which increases the compilation time significantly. Instead, we should only include the libraries that we are actually using in the code. 

2. The use of `using namespace std;` is a bad practice because it can lead to name clashes. It is recommended to use the `std::` prefix before the standard library functions and classes.

3. In the `LazySegmentTree` class, the `N` variable is initially set to 1 and then shifted left until it is larger than `sz`. This is done to find the smallest power of 2 that is greater or equal to `sz`. However, it could be done more efficiently using the `std::ceil` and `std::log2` functions from the `cmath` library.

4. The `eval()` function checks whether the `lazy[k]` value is not equal to 0, and if so, it adds `lazy[k]` to `node[k]` and then updates the `lazy` values of the child nodes. However, the check `k < N - 1` is not necessary because the `lazy` vector is always of size `2*N - 1`, so it will never go out of bounds.

5. In the `add()` and `getSum()` functions, the term `(l + r) / 2` is repeated multiple times. This redundant computation could be avoided by calculating this value once and reusing it.

6. In `main()`, the cin and cout streams are not synced with the stdio, and the tie is not nullified. This can be done to improve the I/O performance.

Optimized Program:

```cpp
#include <iostream>
#include <vector>
#include <cmath>

typedef long long ll;

template <typename Monoid> struct LazySegmentTree {
private:
  int N;
  std::vector<Monoid> node, lazy;

public:
  LazySegmentTree(int sz = 0) { init(sz); }
  void init(int sz) {
    N = std::pow(2, std::ceil(std::log2(sz)));
    node.resize(2 * N - 1, 0);
    lazy.resize(2 * N - 1, 0);
  }
  void build(std::vector<Monoid> &v) {
    int sz = int(v.size());
    init(sz);
    for (int i = 0; i < sz; i++) {
      node[i + N - 1] = v[i];
    }
    for (int i = N - 2; i >= 0; i--) {
      node[i] = node[i * 2 + 1] + node[i * 2 + 2];
    }
  }
  void eval(int k) {
    if (lazy[k] != 0) {
      node[k] += lazy[k];
      lazy[2 * k + 1] += lazy[k] / 2;
      lazy[2 * k + 2] += lazy[k] / 2;
      lazy[k] = 0;
    }
  }
  void add(int a, int b, Monoid x) { add(a, b, x, 0, 0, N); }
  void add(int a, int b, Monoid x, int k, int l, int r) {
    eval(k);
    if (b <= l || r <= a)
      return;
    if (a <= l && r <= b) {
      lazy[k] += x * (r - l);
    } else {
      int mid = (l + r) / 2;
      add(a, b, x, 2 * k + 1, l, mid);
      add(a, b, x, 2 * k + 2, mid, r);
      node[k] = node[2 * k + 1] + node[2 * k + 2];
    }
  }
  Monoid getSum(int a, int b) { return getSum(a, b, 0, 0, N); }
  Monoid getSum(int a, int b, int k, int l, int r) {
    if (b <= l || r <= a)
      return 0;
    eval(k);
    if (a <= l && r <= b)
      return node[k];
    int mid = (l + r) / 2;
    Monoid vl = getSum(a, b, 2 * k + 1, l, mid);
    Monoid vr = getSum(a, b, 2 * k + 2, mid, r);
    return vl + vr;
  }
};

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);

  int n, q;
  std::cin >> n >> q;
  LazySegmentTree<ll> seg(n);
  for (int i = 0; i < q; i++) {
    int c;
    std::cin >> c;
    if (c == 0) {
      ll s, t, x;
      std::cin >> s >> t >> x;
      seg.add(s - 1, t, x);
    } else {
      int s;
      std::cin >> s;
      std::cout << seg.getSum(s - 1, s) << "\n";
    }
  }
  return 0;
}
```