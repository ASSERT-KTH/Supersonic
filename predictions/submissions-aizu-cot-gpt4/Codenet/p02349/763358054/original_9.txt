This program appears to be performing a range update on an array using a Fenwick tree (binary indexed tree) data structure. As the code is already written to be efficient, there are limited optimization opportunities. However, some minor improvements can be made:

1. Use `ios_base::sync_with_stdio(false); cin.tie(NULL);` This will make Input/Output operations faster. It will tie the stdio streams with the stdin and stdout which can make the I/O operations faster in some scenarios.

2. Instead of using `S[i] += -x;`, use `S[i] -= x;` This does the exact same thing, but is slightly more straightforward and might be a tiny bit faster.

3. Instead of using `bits/stdc++.h`, include only the necessary libraries. This reduces the compilation time.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
typedef long long ll;
const int maxn = 100005;
ll S[maxn];
int n, q;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> q;
    for (int i = 0; i < q; i++) {
        bool op;
        cin >> op;
        if (op) {
            int k;
            cin >> k;
            int ans = 0;
            for (int i = k; i > 0; i -= i & -i)
                ans += S[i];
            cout << ans << '\n';
        } else {
            int s, t, x;
            cin >> s >> t >> x;
            for (int i = s; i <= n; i += i & -i)
                S[i] += x;
            for (int i = t + 1; i <= n; i += i & -i)
                S[i] -= x;
        }
    }
}
```

Please note that these optimizations might not make a significant difference in runtime or memory usage as the given code is already efficient. However, they can make the code more readable and maintainable, which is also an important aspect of code optimization.