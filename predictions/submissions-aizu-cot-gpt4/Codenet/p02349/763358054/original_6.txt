Firstly, there is an unnecessary use of the `bits/stdc++.h` header file which includes almost all the standard C++ libraries. This will slow down the compile time, so it's better to just include necessary header files.

Secondly, the code uses `cin` and `cout` for input and output operations. These operations are slow and can be optimized by using `scanf` and `printf` instead. Also, we can add `ios_base::sync_with_stdio(false); cin.tie(NULL);` at the start of the main function to disable the synchronization of all the C++ standard streams with their C counterparts.

Thirdly, the code uses `ll S[maxn];` which will always allocate memory for maxn elements even if we do not need them all. This can be optimized by using a `std::vector<ll> S(n+1);` instead, which will allocate memory dynamically as needed.

Here is the optimized version of the code:

```C++
#include <iostream>
#include <vector>
using namespace std;
typedef long long ll;
int main() {
    ios_base::sync_with_stdio(false); cin.tie(NULL);
    int n, q;
    scanf("%d %d", &n, &q);
    vector<ll> S(n+1);
    for (int i = 0; i < q; i++) {
        bool op;
        scanf("%d", &op);
        if (op) {
            int k;
            scanf("%d", &k);
            ll ans = 0;
            for (int i = k; i > 0; i -= i & -i)
                ans += S[i];
            printf("%lld\n", ans);
        } else {
            int s, t, x;
            scanf("%d %d %d", &s, &t, &x);
            for (int i = s; i <= n; i += i & -i)
                S[i] += x;
            for (int i = t + 1; i <= n; i += i & -i)
                S[i] -= x;
        }
    }
    return 0;
}
```

However, please note that using `scanf` and `printf` instead of `cin` and `cout` is a trade-off between readability and speed. If speed is not a concern, it's recommended to stick with `cin` and `cout` for better code readability and maintainability.