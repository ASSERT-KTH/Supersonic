Here are the optimization steps:

1. Avoid using `#include <bits/stdc++.h>` as it includes a lot of unnecessary headers that can slow down the compilation process. Instead, include only the necessary headers. In this case, `<iostream>` is sufficient.

2. Use `std::ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` to speed up cin and cout operations.

3. Use `'\n'` instead of `std::endl` to avoid unnecessary buffer flushing.

4. Avoid using global variables if not necessary. In the given code, `n` and `q` are only used in `main()`, so declare them within `main()`. This won't affect performance much, but it's a good coding practice.

5. Use prefix increment (++i) over postfix increment (i++) in loops. This won't make a big difference in modern compilers, but traditionally, prefix increment is faster as it doesn't involve temporary object creation.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
typedef long long ll;
const int maxn = 100005;
ll S[maxn];

int main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n, q;
  cin >> n >> q;
 
  for (int i = 0; i < q; ++i) {
    bool op;
    cin >> op;
    if (op) {
      int k;
      cin >> k;
      int ans = 0;
      for (int i = k; i > 0; i -= i & -i)
        ans += S[i];
      cout << ans << '\n';
    } else {
      int s, t, x;
      cin >> s >> t >> x;
      for (int i = s; i <= n; i += i & -i)
        S[i] += x;
      for (int i = t + 1; i <= n; i += i & -i)
        S[i] -= x;
    }
  }
  return 0;
}
```
Please note that the actual runtime and memory usage can also depend on factors like the nature of the input data, the hardware, and the compiler.