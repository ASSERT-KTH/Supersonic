The C/C++ program you have provided is a Fenwick tree data structure (also known as Binary Indexed Tree) that is used for range queries and updates. The code seems to be optimized. However, a few minor changes can be made to make it more readable and efficient. 

1. The usage of `<bits/stdc++.h>` can slow down the compile time as it includes all the standard libraries. Instead, specific libraries required for this program should be included.
2. The usage of `typedef long long ll;` is not a good practice as it can lead to confusion for other developers. It is better to use `long long` directly.
3. Using `cin` and `cout` for input and output can be slower than using `scanf` and `printf`. The difference in speed can be significant when dealing with large amounts of data.
4. There is no need to store the value `n` in the global scope. It can be declared in the main function.
5. Instead of `int s, t, x; cin >> s >> t >> x;`, you can directly take the input while updating the Fenwick tree.

Here is the optimized code:

```cpp
#include <iostream>
#include <cstdio>
#define maxn 100005

long long S[maxn];

int main() {
  int n, q;
  scanf("%d %d", &n, &q);
  
  while (q--) {
    bool op;
    scanf("%d", &op);
    if (op) {
      int k, ans = 0;
      scanf("%d", &k);
      for (; k > 0; k -= k & -k)
        ans += S[k];
      printf("%d\n", ans);
    } else {
      int s, t;
      long long x;
      scanf("%d %d %lld", &s, &t, &x);
      for (; s <= n; s += s & -s)
        S[s] += x;
      for (; t + 1 <= n; t += t & -t)
        S[t+1] += -x;
    }
  }

  return 0;
}
```

Please note that the speed of `cin` and `cout` can be significantly increased by adding `ios_base::sync_with_stdio(false); cin.tie(NULL);` at the beginning of the main function, but it's not always recommended to use this as it can cause issues when mixed with `scanf` and `printf`.