This program is already optimized for running time as it uses the Fenwick tree data structure for efficient range updates and prefix sum queries. However, there are some small modifications we can make to further optimize it.

Optimization Steps:
1. Replace `bits/stdc++.h` with the specific libraries used in the program. `bits/stdc++.h` is a GCC specific library that includes all standard libraries, which increases the compilation time.
2. Replace `using namespace std;` with `std::` prefix wherever necessary. It's a bad practice to use `using namespace std;` in the global scope as it introduces name conflicts.
3. Use `std::ios::sync_with_stdio(false);` and `std::cin.tie(NULL);` to disable the synchronization of all the C++ standard streams with their corresponding standard C streams. This can give a performance boost.
4. Use `std::endl` instead of `'\n'` to flush the output after every query, which can be useful if the output is not appearing immediately due to buffering.

Here is the optimized version of your program:

```cpp
#include <iostream>
typedef long long ll;
const int maxn = 100005;
ll S[maxn];
int n, q;

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cin >> n >> q;
  for (int i = 0; i < q; i++) {
    bool op;
    std::cin >> op;
    if (op) {
      int k;
      std::cin >> k;
      int ans = 0;
      for (int i = k; i > 0; i -= i & -i)
        ans += S[i];
      std::cout << ans << std::endl; // Changed '\n' to std::endl
    } else {
      int s, t, x;
      std::cin >> s >> t >> x;
      for (int i = s; i <= n; i += i & -i)
        S[i] += x;
      for (int i = t + 1; i <= n; i += i & -i)
        S[i] -= x; // Changed S[i] += -x; to S[i] -= x;
    }
  }
}
```
