The program you provided is a C++ program that implements the Union-Find data structure, which is a data structure that tracks a partition of a set into disjoint subsets. It provides operations for adding new sets, merging sets (replacing them by their union) and finding a representative member of a set.

Here are the steps to optimize this program:

1. Use the vector container instead of dynamic arrays: Vectors are safer to use compared to dynamic arrays. They are dynamic and don't need to know size at compile time. They can grow and shrink at runtime.

2. Avoid using global variables: This makes it easier to reason about the code, which can help prevent bugs and make the code more maintainable. In your case, N, boss, and height can be moved to the main function.

3. Avoid redundant function calls: In the unite function, you are calling the get_boss function twice for both x and y variables. Instead, you can store these values in temporary variables and reuse them.

4. Use std::cout and std::cin instead of printf and scanf: This is because they are type safe and easier to use.

Here is the optimized version of your code:

```cpp
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iostream>
#include <vector>
typedef long long int ll;
#define BIG_NUM 2000000000
#define MOD 1000000007
#define EPS 0.000001
using namespace std;

int get_boss(vector<int>& boss, int id) {
  if (boss[id] == id)
    return id;
  else {
    return boss[id] = get_boss(boss, boss[id]);
  }
}

bool is_same(vector<int>& boss, int x, int y) { return get_boss(boss, x) == get_boss(boss, y); }

void unite(vector<int>& boss, vector<int>& height, int x, int y) {
  int boss_x = get_boss(boss, x);
  int boss_y = get_boss(boss, y);
  if (boss_x == boss_y)
    return;
  if (height[x] > height[y]) {
    boss[boss_y] = boss_x;
  } else if (height[x] < height[y]) {
    boss[boss_x] = boss_y;
  } else {
    boss[boss_y] = boss_x;
    height[x]++;
  }
}

int main() {
  int N, Q, command, x, y;
  cin >> N >> Q;
  vector<int> boss(N);
  vector<int> height(N, 1);
  for (int i = 0; i < N; i++) {
    boss[i] = i;
  }
  for (int i = 0; i < Q; i++) {
    cin >> command >> x >> y;
    if (command == 0) {
      unite(boss, height, x, y);
    } else {
      if (is_same(boss, x, y)) {
        cout << "1\n";
      } else {
        cout << "0\n";
      }
    }
  }
  return 0;
}
```