Sure, here are some optimizations:

1. Use a std::vector instead of a pointer to an array for boss and height. This is because vectors are more dynamic and safer than normal arrays. With arrays you have to remember to delete them to free up memory, but with vectors this is done automatically.

2. Avoid multiple calls to get_boss() function in is_same() and unite() functions. This is because each call can potentially lead to a recursion which is costly. So, we store the result in a variable for the first call and use that variable for subsequent uses.

3. Use std::ios_base::sync_with_stdio(false); cin.tie(NULL); to disable the synchronization of all the C++ standard streams with their corresponding standard C streams if it is not required to mix C++-style I/O with C-style I/O. Also, tie(NULL) unties cin from cout. Tied streams ensure that one stream is flushed automatically before each I/O operation on the other stream.

4. Use '\n' instead of std::endl to avoid unnecessary flushing of the buffer.

5. Use std::cout and std::cin instead of printf and scanf for I/O operations. As we are using C++ it is better to use the C++ way of handling I/O operations.

Here's the optimized code:

```cpp
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <iostream>
#include <vector>
typedef long long int ll;
#define BIG_NUM 2000000000
#define MOD 1000000007
#define EPS 0.000001
using namespace std;
int N;
vector<int> boss, height;
int get_boss(int id) {
  if (boss[id] == id)
    return id;
  else {
    return boss[id] = get_boss(boss[id]);
  }
}
void unite(int x, int y) {
  int boss_x = get_boss(x);
  int boss_y = get_boss(y);
  if (boss_x == boss_y)
    return;
  if (height[x] > height[y]) {
    boss[boss_y] = boss_x;
  } else if (height[x] < height[y]) {
    boss[boss_x] = boss_y;
  } else {
    boss[boss_y] = boss_x;
    height[x]++;
  }
}
int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL);
  int Q, command, x, y;
  cin >> N >> Q;
  boss.resize(N);
  height.resize(N);
  for (int i = 0; i < N; i++) {
    boss[i] = i;
    height[i] = 1;
  }
  for (int i = 0; i < Q; i++) {
    cin >> command >> x >> y;
    if (command == 0) {
      unite(x, y);
    } else {
      if (get_boss(x) == get_boss(y)) {
        cout << "1\n";
      } else {
        cout << "0\n";
      }
    }
  }
  return 0;
}
```