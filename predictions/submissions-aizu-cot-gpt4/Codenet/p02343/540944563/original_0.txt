The given code is a union-find data structure implementation. It can be optimized in several ways:

1. Avoid Recursion: The `get_boss` function uses a recursive approach to find the boss of a given id. Repeated recursion can lead to a stack overflow error for large data sets. This can be avoided by using an iterative approach instead.

2. Avoid Dynamic Memory Allocation: The code uses dynamic memory allocation to create the `boss` and `height` arrays. As dynamic allocation is slower than static, it's better to use static allocation when the maximum size is known. Here, we can assume the maximum size to be a constant.

3. Reduce IO Operations: The `printf` function is used inside a loop to print the output for each query. This can be improved by storing the output in a string and printing it once after the loop. It will reduce the IO operations, leading to improved performance.

4. Use `ios_base::sync_with_stdio(false)`: This line of code will help to speed up the cin and cout operations in C++.

Here's the optimized version of the code:

```cpp
#include <iostream>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <string>
#include <vector>
typedef long long int ll;
#define BIG_NUM 2000000000
#define MOD 1000000007
#define EPS 0.000001
using namespace std;
const int MAX_N = 1e5+5;
int N;
int boss[MAX_N], height[MAX_N];
int get_boss(int id) {
  while (boss[id] != id) {
    boss[id] = boss[boss[id]];
    id = boss[id];
  }
  return id;
}
int is_same(int x, int y) { return get_boss(x) == get_boss(y); }
void unite(int x, int y) {
  int boss_x = get_boss(x);
  int boss_y = get_boss(y);
  if (boss_x == boss_y)
    return;
  if (height[x] > height[y]) {
    boss[boss_y] = boss_x;
  } else if (height[x] < height[y]) {
    boss[boss_x] = boss_y;
  } else {
    boss[boss_y] = boss_x;
    height[x]++;
  }
}
int main() {
  ios_base::sync_with_stdio(false);
  int Q, command, x, y;
  cin >> N >> Q;
  string result;
  for (int i = 0; i < N; i++) {
    boss[i] = i;
    height[i] = 1;
  }
  for (int i = 0; i < Q; i++) {
    cin >> command >> x >> y;
    if (command == 0) {
      unite(x, y);
    } else {
      if (is_same(x, y)) {
        result += "1\n";
      } else {
        result += "0\n";
      }
    }
  }
  cout << result;
  return 0;
}
```

This optimized version of the program should run faster and use less memory than the original.