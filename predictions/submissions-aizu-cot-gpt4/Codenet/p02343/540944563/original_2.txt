The given C++ program uses the union-find data structure to keep track of a partition of a set into disjoint subsets. The optimization can be done in the following ways:

1. Removal of Unused Headers: The headers <algorithm>, <cmath>, <queue>, <stack>, and <vector> are not being used in this program. Removing these unnecessary headers will decrease the compilation time.

2. Replacement of scanf and printf: The input and output functions scanf and printf can be replaced with cin and cout respectively. This is because cin and cout are faster as compared to scanf and printf.

3. Use std::ios::sync_with_stdio: To make cin and cout more efficient, you can use the command "std::ios::sync_with_stdio(false)". This command will help to speed up the I/O operations.

4. Avoiding Recomputation: In the function unite(), boss_x and boss_y are computed twice in case of height[x] == height[y]. We can avoid this recomputation.

5. Check for self-assignment: In the get_boss function, we can add a check to avoid self-assignment which might save us some time in certain cases.

Here's the optimized code:

```cpp
#include <stdio.h>
typedef long long int ll;
#define BIG_NUM 2000000000
#define MOD 1000000007
#define EPS 0.000001
using namespace std;
int N;
int *boss, *height;
int get_boss(int id) {
  if (boss[id] != id)
    boss[id] = get_boss(boss[id]);
  return boss[id];
}
int is_same(int x, int y) { return get_boss(x) == get_boss(y); }
void unite(int x, int y) {
  int boss_x = get_boss(x);
  int boss_y = get_boss(y);
  if (boss_x == boss_y)
    return;
  if (height[x] > height[y]) {
    boss[boss_y] = boss_x;
  } else {
    boss[boss_x] = (height[x] < height[y]) ? boss_y : boss_x;
  }
  if(height[x] == height[y])
    height[x]++;
}
int main() {
  std::ios::sync_with_stdio(false); 
  int Q, command, x, y;
  cin >> N >> Q;
  boss = new int[N];
  height = new int[N];
  for (int i = 0; i < N; i++) {
    boss[i] = i;
    height[i] = 1;
  }
  for (int i = 0; i < Q; i++) {
    cin >> command >> x >> y;
    if (command == 0) {
      unite(x, y);
    } else {
      if (is_same(x, y)) {
        cout << "1\n";
      } else {
        cout << "0\n";
      }
    }
  }
  return 0;
}
```