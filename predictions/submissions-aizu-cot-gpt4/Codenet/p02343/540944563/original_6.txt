Here are the steps to optimize the given program:

1. The `get_boss()` function keeps calling itself recursively until it finds the boss of a given employee. This could be optimized by using path compression, which means that while finding the boss, we make each node in the path point to its grandparent. This reduces the tree height and hence the time complexity of the function.

2. The `is_same()` function is called only once, so instead of defining it as a separate function, we can directly incorporate its logic in the `main()` function. This will reduce function call overhead.

3. The `unite()` function checks if the bosses of `x` and `y` are the same. This check is not necessary because even if they are the same, the function will not do any harm. So, this check can be removed.

Here is the optimized code:

```cpp
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <stdio.h>
#include <vector>
typedef long long int ll;
#define BIG_NUM 2000000000
#define MOD 1000000007
#define EPS 0.000001
using namespace std;
int N;
int *boss, *height;
int get_boss(int id) {
  if (boss[id] != id)
    boss[id] = get_boss(boss[id]);
  return boss[id];
}
void unite(int x, int y) {
  int boss_x = get_boss(x);
  int boss_y = get_boss(y);
  if (height[x] > height[y]) {
    boss[boss_y] = boss_x;
  } else if (height[x] < height[y]) {
    boss[boss_x] = boss_y;
  } else {
    boss[boss_y] = boss_x;
    height[x]++;
  }
}
int main() {
  int Q, command, x, y;
  scanf("%d %d", &N, &Q);
  boss = new int[N];
  height = new int[N];
  for (int i = 0; i < N; i++) {
    boss[i] = i;
    height[i] = 1;
  }
  for (int i = 0; i < Q; i++) {
    scanf("%d %d %d", &command, &x, &y);
    if (command == 0) {
      unite(x, y);
    } else {
      if (get_boss(x) == get_boss(y)) {
        printf("1\n");
      } else {
        printf("0\n");
      }
    }
  }
  delete[] boss;
  delete[] height;
  return 0;
}
```

In the optimized code, I have also added `delete[] boss;` and `delete[] height;` at the end of the main function to free the dynamically allocated memory, which was missing in the original code. This will help in reducing the memory usage of the program.