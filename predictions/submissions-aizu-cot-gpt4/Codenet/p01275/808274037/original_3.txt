Optimization Steps:

1. The function `rec()` is a recursive function, which can lead to a high number of function calls, stack usage, and potentially stack overflow. We can't eliminate recursion here completely, but we can minimize the number of recursive calls. Right now, the function is being called twice in the loop where `dif[i]` is adjusted. We can move the recursive call outside the loop to be called only once after all adjustments have been made.

2. The next optimization can be done in `main()` function. Here, there is no need to calculate `dif[i]` every time inside the loop. We can calculate it once before the loop and use the value inside the loop.

3. The array `dif` is of size 12, which seems to be arbitrary. We should make it size `k` instead, as that is the size we actually use.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
int k, ans;
const int M = 10;
void rec(int *dif, int d, int p) {
  if (p == k) {
    ans = d;
    return;
  }
  if (d >= ans)
    return;
  int rot = dif[p];
  if (rot == 0) {
    rec(dif, d, p + 1);
    return;
  }
  for (int i = p; i < k; i++) {
    dif[i] = (dif[i] - rot + M) % M;
  }
  rec(dif, d + 1, p + 1);
  for (int i = p; i < k; i++)
    dif[i] = (dif[i] + rot + M) % M;
}
int main() {
  while (cin >> k, k) {
    string s, t;
    cin >> s >> t;
    int *dif = new int[k];
    int temp;
    for (int i = 0; i < k; i++) {
      temp = ((int)(t[i] - s[i]) + M);
      dif[i] = temp % M;
    }
    ans = k;
    rec(dif, 0, 0);
    cout << ans << endl;
    delete [] dif;
  }
}
```

This program is more optimized in terms of memory usage and running time by reducing unnecessary function calls and memory allocation.