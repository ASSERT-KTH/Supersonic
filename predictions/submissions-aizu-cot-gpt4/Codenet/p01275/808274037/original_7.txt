Here are the steps for optimization and the reasons why:

1. Remove the "using namespace std;". Although it's not directly related to performance, it's a bad practice that can lead to name clashes in bigger projects.
2. Use a "fast I/O" method. The cin and cout are significantly slower than scanf and printf. In competitive programming, this can make the difference between a solution being accepted or not.
3. Move the declaration of variables "s", "t" and "rot" outside of loops. This way the program doesn't need to allocate and deallocate memory for them every time.
4. Avoid calling the rec function multiple times with the same arguments. Each function call has an overhead, so it's better to minimize them.
5. Use prefix increment (++i) instead of postfix (i++) in for loops. For primitive types like int, the difference is negligible, but for more complex types, prefix can be faster because it doesn't need to create a temporary object.

Here is the optimized code:

```cpp
#include <iostream>
#include <cstdio>
#define M 10

int k, ans;
int dif[12];

void rec(int d, int p) {
  if (p == k) {
    ans = d;
    return;
  }
  if (d >= ans)
    return;
  int rot = dif[p];
  if (rot == 0) {
    rec(d, p + 1);
    return;
  }
  rec(d + 1, p + 1);
  for (int i = p; i < k; ++i) {
    dif[i] = (dif[i] - rot) % M;
  }
  rec(d + 1, p + 1);
  for (int i = p; i < k; ++i) {
    dif[i] = (dif[i] + rot + M) % M;
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::string s, t;
  while (std::cin >> k, k) {
    std::cin >> s >> t;
    for (int i = 0; i < k; ++i) {
      dif[i] = ((int)(t[i] - s[i]) + M) % M;
    }
    ans = k;
    rec(0, 0);
    std::cout << ans << "\n";
  }
}
```

Note: This optimization may not show noticeable performance improvements because the original code is already quite efficient. However, these are general good practices for writing high-performance C++ code.