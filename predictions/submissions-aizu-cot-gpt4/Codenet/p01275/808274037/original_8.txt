The given program is a recursive function `rec()` that adjusts the difference array `dif[]` by rotating the elements and keeps a track of the minimum depth `ans` at which all elements of `dif[]` become 0. The optimization can be done as follows:

1. Reducing the number of recursive calls: The function `rec()` is called recursively twice inside the loop, which results in the same computations being done multiple times. We can eliminate one of these calls.

2. Reduce the number of computations in the loop: Instead of calculating the modulus in every iteration of the loop, we can just calculate it once and use this value.

The optimized program is as follows:

```cpp
#include <iostream>
using namespace std;
int k, ans;
int dif[12];
const int M = 10;
void rec(int d, int p) {
  if (p == k) {
    ans = d;
    return;
  }
  if (d >= ans)
    return;
  int rot = dif[p];
  if (rot == 0) {
    rec(d, p + 1);
    return;
  }
  int newRot = (dif[p] - rot + M) % M; // compute once
  for (int i = p; i < k; i++) {
    dif[i] = newRot;
  }
  rec(d + 1, p + 1);
  for (int i = p; i < k; i++)
    dif[i] = (dif[i] + rot) % M;
}
int main() {
  while (cin >> k, k) {
    string s, t;
    cin >> s >> t;
    for (int i = 0; i < k; i++) {
      dif[i] = ((int)(t[i] - s[i]) + M) % M;
    }
    ans = k;
    rec(0, 0);
    cout << ans << endl;
  }
}
```

In the optimized program, the number of recursive calls is reduced by eliminating the redundant call inside the loop. Also, the number of computations is reduced by computing the modulus only once and using this value in all iterations of the loop. This reduces the running time of the program and makes it more efficient.