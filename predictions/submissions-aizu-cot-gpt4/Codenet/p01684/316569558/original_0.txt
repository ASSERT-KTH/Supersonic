First, let's go through your code and identify the areas where optimizations can be done:

1. The #include <bits/stdc++.h> library is a very large library which includes almost all the standard libraries in C++. Including such a large library can slow down compile time. So it's better to include only the libraries that are necessary for your program.

2. The REP macro is used to loop from 0 to n-1. Using macros can lead to unexpected behavior and harder debugging. It's better to use for loop directly in the code where it is needed.

3. You are using printf and cout in your code. Mixing them can make your code slower because printf and cout have different buffering mechanisms. It's better to use either printf or cout.

4. The function call judge(xb, yb, rb, W, H) is repeated multiple times. We can store its result in a variable and use it where needed.

5. You are using assert for checking conditions. Asserts are generally used for debugging, and they increase the execution time when enabled. It's better to remove them in the final version of the code.

Optimized version of the code:

```cpp
#include <iostream>
#include <cmath>
#include <assert.h>

using namespace std;

const double EPS = 1e-4;

double calc(double ra, double rb, double s) {
  double lb = abs(ra - rb);
  double ub = ra + rb;
  for(int _ = 0; _ < 80; _++) {
    double d = (lb + ub) / 2;
    double tha = acos((ra * ra + d * d - rb * rb) / (2.0 * d * ra));
    double thb = acos((rb * rb + d * d - ra * ra) / (2.0 * d * rb));
    double sum = ra * ra * tha + rb * rb * thb - ra * d * sin(tha);
    if (sum > s) {
      lb = d;
    } else {
      ub = d;
    }
  }
  return ub;
}

double sq(double x) { return x * x; }

bool judge(double x, double y, double r, double W, double H) {
  return x - r > -EPS && x + r < W + EPS && y - r > -EPS && y + r < H + EPS;
}

bool solve(double W, double H, double sa, double sb, double sc, bool reversed) {
  double ra = sqrt(sa / M_PI);
  double rb = sqrt(sb / M_PI);
  if (2.0 * ra > min(W, H) + EPS)
    return false;
  if (2.0 * rb > min(W, H) + EPS)
    return false;
  double D = calc(ra, rb, sc);
  double xa = ra;
  double ya = ra;
  for (double xb : {ra, rb, W - rb}) {
    double dy = sqrt(sq(D) - sq(xa - xb));
    for (int sign = -1; sign <= 1; sign += 2) {
      double yb = ya + sign * dy;
      bool judgeResult = judge(xb, yb, rb, W, H);
      if (judgeResult) {
        if (!reversed) {
          cout << xa << " " << ya << " " << ra << " " << xb << " " << yb << " " << rb << endl;
        } else {
          cout << xb << " " << yb << " " << rb << " " << xa << " " << ya << " " << ra << endl;
        }
        return true;
      }
    }
  }
  for (double yb : {ra, rb, H - rb}) {
    double dx = sqrt(sq(D) - sq(ya - yb));
    for (int sign = -1; sign <= 1; sign += 2) {
      double xb = xa + sign * dx;
      bool judgeResult = judge(xb, yb, rb, W, H);
      if (judgeResult) {
        if (!reversed) {
          cout << xa << " " << ya << " " << ra << " " << xb << " " << yb << " " << rb << endl;
        } else {
          cout << xb << " " << yb << " " << rb << " " << xa << " " << ya << " " << ra << endl;
        }
        return true;
      }
    }
  }
  return false;
}

int main() {
  double W, H, sa, sb, sc;
  while (cin >> W >> H >> sa >> sb >> sc && W > 0) {
    if (solve(W, H, sa, sb, sc, false))
      continue;
    if (solve(W, H, sb, sa, sc, true))
      continue;
    cout << "impossible" << endl;
  }
  return 0;
}
```