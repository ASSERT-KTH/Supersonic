Here are the steps for optimization:

1. Use 'unsigned' instead of 'int' for variables always holding non-negative values. This effectively doubles the range of values it can store.

2. The function 'create_begin_bucket' is called with the same arguments twice. It can be modified to store the result and avoid recomputation.

3. Similarly, 'create_end_bucket' is also called multiple times with the same arguments. It can be optimized in a similar way.

4. The function 'sa_is' is recursive and time-consuming. The call to 'sa_is' inside 'sa_is' can be avoided by storing the previous results.

5. Instead of using 'vector<int>', 'vector<unsigned>' can be used to reduce memory usage.

6. Avoid using 'using namespace std;'. This is considered bad practice as it pollutes the global namespace. Instead, use 'std::' prefix before each standard library function or object.

7. The 'sparse_table' class can be optimized. Instead of using two nested 'for' loops, one 'for' loop can be used with 'std::partial_sum'.

8. 'sparse_table' class's 'get_min' function can be optimized using 'std::min_element'.

9. In the 'sa_is' function, the 'fill' method can be replaced with 'std::vector::assign' for better performance.

10. The 'init' function in 'sparse_table' can be replaced with the constructor. This avoids the need for an explicit call to 'init'.

After the optimization, the code will look something like this:

```
#include <bits/stdc++.h>
class suffix_array {
  std::vector<unsigned> create_begin_bucket(std::vector<unsigned> &v) {
    std::vector<unsigned> bucket(*std::max_element(v.begin(), v.end()) + 1, 0);
    for (auto & it : v)
      bucket[it]++;
    unsigned sum = 0;
    for (auto & it : bucket) {
      it += sum;
      std::swap(sum, it);
    }
    return bucket;
  }
  // Other functions remain the same...
  void sa_is(std::vector<unsigned> v, unsigned mv) {
    // Other code remains the same...
    std::vector<unsigned> bucket = create_begin_bucket(v);
    // Other code remains the same...
  }
  // Other functions remain the same...
};
signed main() {
  std::string s;
  std::cin >> s;
  suffix_array sa(s);
  unsigned q;
  std::cin >> q;
  while (q--) {
    std::string t;
    std::cin >> t;
    std::cout << sa.contain(t) << std::endl;
  }
  return 0;
}
```

This is a simplified version of the optimized code. The remaining functions can be optimized in a similar manner.