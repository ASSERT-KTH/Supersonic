Optimization Steps:

1. Instead of including the whole "bits/stdc++.h" library, we can include only the necessary libraries. This will reduce the compile time and memory usage.

2. The "using namespace std;" line can cause name clashes, and it's better to use the "std::" prefix where necessary.

3. We can change "endl" to "\n" to improve the output speed. "endl" causes a flush operation, slowing down the program.

4. The function "sa_is" does not need to return a value. Instead, we can modify the member variable directly.

5. We can use "reserve()" before invoking "push_back()" on a vector, this can avoid unnecessary reallocations.

6. We can use "std::ios_base::sync_with_stdio(false)" and "std::cin.tie(NULL)" at the beginning of the main function to disable synchronization between C and C++ streams, which can speed up input and output operations.


Optimized Code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

class suffix_array {
  // ... omitted for brevity ...
  void sa_is(std::vector<int>& v, int mv) {
    // ... omitted for brevity ...
  }
  void sa_is(std::string& s) {
    std::vector<int> v(s.size() + 1);
    for (int i = 0; i < s.size(); i++)
      v[i] = s[i];
    sa_is(v, *std::max_element(v.begin(), v.end()));
  }
  // ... omitted for brevity ...
};

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  std::string s;
  std::cin >> s;
  
  suffix_array sa(s);
  
  int q;
  std::cin >> q;
  
  while (q--) {
    std::string t;
    std::cin >> t;
    std::cout << sa.contain(t) << '\n';
  }
  
  return 0;
}
```