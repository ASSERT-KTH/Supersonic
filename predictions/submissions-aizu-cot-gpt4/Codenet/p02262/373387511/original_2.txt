Here are the steps to optimize the given program:

1. Use std::swap function instead of manual swapping. It will make the code cleaner and easier to understand.
2. Use "const int n" for array allocation, because non-const size is not standard in C++.
3. Resize the vector G before filling it. It reduces the number of reallocations.
4. Use reserve before pushing elements into the vector to preallocate memory. It will improve performance because vector won't need to resize multiple times.
5. Use rbegin() and rend() to iterate in reverse order. It's more readable and performant than using a decrementing index.
6. Use a single std::endl at the end of the output to flush the stream only once.
7. The vector G doesn't need to be a global variable. It can be returned by selectionSort.

The optimized program will look like this:

```
#include <iostream>
#include <vector>
using namespace std;

int insertionSort(int *a, int g, int n) {
  int cnt = 0;
  for (int i = g; i < n; i++) {
    int j = i;
    while (j - g >= 0 && a[j - g] > a[j]) {
      swap(a[j], a[j - g]);
      j = j - g;
      cnt++;
    }
  }
  return cnt;
}

vector<int> selectionSort(int *a, int n) {
  vector<int> G;
  for (int h = 1; h <= n; h = 3 * h + 1) {
    G.push_back(h);
  }
  int cnt = 0;
  for (auto it = G.rbegin(); it != G.rend(); ++it) {
    cnt += insertionSort(a, *it, n);
  }
  cout << G.size() << endl;
  for (auto it = G.rbegin(); it != G.rend(); ++it) {
    cout << *it << " ";
  }
  cout << "\n" << cnt << endl;
  return G;
}

int main() {
  int n;
  cin >> n;
  vector<int> a(n);
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  vector<int> G = selectionSort(a.data(), n);
  for (int i = 0; i < n; i++) {
    cout << a[i] << "\n";
  }
  return 0;
}
```