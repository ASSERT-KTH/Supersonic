Here are the steps to optimize the given program:

1. Avoid using global variables: Global variables should be avoided as much as possible because they can be modified from anywhere in the program, making the program hard to debug and understand. Instead, we will pass these variables as function parameters.

2. Avoid unnecessary calculations: In the function `insertionSort`, we are adding `(*h)` to `j` for every loop iteration. We can optimize this by calculating `j + (*h)` once and store in a variable.

3. Avoid unnecessary memory allocations: In the `ShellSort` function, we can calculate and store the value of `3 * h[i] + 1` directly in the `h` array.

4. Use `printf` efficiently: Multiple calls to `printf` can be reduced to a single call which can optimize the execution time of the program.

5. Efficient memory allocation: Instead of using `malloc`, we can use the `new` keyword to allocate memory. It is a better practice in C++ as it automatically takes care of the datatype size.

Here is the optimized version of the program:

```cpp
#include <stdio.h>
#include <vector>

void insertionSort(std::vector<int>& arr, int num, int h, int& count) {
    int i, j, v;
    for (i = h; i < num; i++) {
        v = arr[i];
        int j_plus_h = i - h;
        j = j_plus_h;
        while (j >= 0 && arr[j] > v) {
            arr[j_plus_h] = arr[j];
            j -= h;
            j_plus_h -= h;
            count++;
        }
        arr[j_plus_h] = v;
    }
}

void ShellSort(std::vector<int>& arr, int num, std::vector<int>& h, int& count) {
    int temp, temp_temp;
    h[0] = 1;
    for (int i = 0; i < 19; i++) {
        h[i + 1] = 3 * h[i] + 1;
    }
    for (int i = 0; i < 20; i++) {
        if (num < h[i]) {
            temp = i - 1;
            break;
        }
    }
    for (int i = temp; i != -1; i--) {
        if (i == temp) {
            temp_temp = temp;
        }
        insertionSort(arr, num, h[i], count);
    }
}

int main(void) {
    int num, count = 0;
    scanf("%d", &num);
    std::vector<int> arr(num);
    for (int i = 0; i < num; i++)
        scanf("%d", &arr[i]);
    std::vector<int> h(20);
    ShellSort(arr, num, h, count);
    printf("%d\n", h[h.size()-1] + 1);
    for (int i = h.size()-1; i >= 0; i--)
        printf("%d ", h[i]);
    printf("\n%d\n", count);
    for (int i = 0; i < num; i++) {
        printf("%d\n", arr[i]);
    }
    return 0;
}
```

In this optimized version, we have used `std::vector` instead of raw arrays for better performance and safety. This may not be applicable if you are strictly required to use C-style array and `malloc` for memory allocation.