Here is how the code can be optimized:

1. Avoid Global Variables: Global variables tend to consume more memory than local variables. Therefore, avoiding them will save memory. Also, their use is considered a bad practice in programming as they can be accessed and modified from anywhere in the program, which could lead to bugs that are hard to detect and fix.

2. Minimize Dynamic Memory Allocation: Dynamic memory allocation is a time-consuming process and should be minimized. In this case, the size of the array is known at runtime, therefore, dynamic memory allocation is not necessary. Instead, the array can be defined with a fixed size.

3. Avoid Unnecessary Variables: Variables like 'i', 'j', 'n', 'm', 'v' are declared in multiple places. This is not only confusing but also increases memory usage. Instead, these variables should be declared in the 'main' function and passed as arguments to other functions where they are needed.

4. Inline Simple Functions: Functions like 'insertionSort' and 'ShellSort' are simple enough to be inlined. Function calling is a time-consuming process involving pushing and popping of registers. It should be avoided when the function is simple and called multiple times.

Here's the optimized code:

```c++
#include <stdio.h>
#define MAX_SIZE 10000

void ShellSort(int num, int *arr, int &count, int *h, int &temp, int &temp_temp);
void insertionSort(int *arr, int num, int *h, int &count);

int main(void) {
  int num, arr[MAX_SIZE], i, count = 0, h[20], temp = 0, temp_temp;
  scanf("%d", &num);
  for (i = 0; i < num; i++)
    scanf("%d", &arr[i]);
  ShellSort(num, arr, count, h, temp, temp_temp);
  printf("%d\n", temp_temp + 1);
  for (i = temp; i != -1; i--)
    i == 0 ? printf("%d\n", h[i]) : printf("%d ", h[i]);
  printf("%d\n", count);
  for (i = 0; i < num; i++) {
    printf("%d\n", arr[i]);
  }
  return 0;
}

inline void ShellSort(int num, int *arr, int &count, int *h, int &temp, int &temp_temp) {
  int i;
  h[0] = 1;
  for (i = 0; i < 20; i++) {
    h[i + 1] = 3 * h[i] + 1;
  }
  for (i = 0; i < 20; i++) {
    if (num < h[i]) {
      temp = i - 1;
      break;
    }
  }
  for (i = temp; i != -1; i--) {
    if (i == temp) {
      temp_temp = temp;
    }
    insertionSort(arr, num, &h[i], count);
  }
}

inline void insertionSort(int *arr, int num, int *h, int &count) {
  int i, j, v;
  for (i = (*h); i < num; i++) {
    v = arr[i];
    j = i - (*h);
    while (j >= 0 && arr[j] > v) {
      arr[j + (*h)] = arr[j];
      j = j - (*h);
      count++;
    }
    arr[j + (*h)] = v;
  }
}
```