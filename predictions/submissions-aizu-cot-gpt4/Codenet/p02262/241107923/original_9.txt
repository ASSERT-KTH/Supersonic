Step 1: Avoid using global variables. In the given program, the global variables `count`, `temp`, `temp_temp` and `h` are used. This is not a good practice as they can be modified from anywhere in the code, making the code difficult to debug and maintain. Instead, we can pass these variables as function parameters where necessary.

Step 2: The `insertionSort` function is being called with `h[i]` as a parameter but it is used as a pointer inside the function. This is unnecessary and can be avoided. We can directly pass `h[i]` as an integer.

Step 3: Rather than using a hard-coded size for the array `h`, its size can be determined based on the input size `num`.

Step 4: We can reduce the number of `printf` calls inside the loop by using the ternary operator more efficiently.

Step 5: Instead of allocating memory for `arr` and later not freeing it, we can use a `std::vector` to handle memory automatically.

Optimized program:

```cpp
#include <iostream>
#include <vector>

void insertionSort(std::vector<int>& arr, int h) {
  int count = 0;
  for (int i = h; i < arr.size(); i++) {
    int v = arr[i];
    int j = i - h;
    while (j >= 0 && arr[j] > v) {
      arr[j + h] = arr[j];
      j = j - h;
      count++;
    }
    arr[j + h] = v;
  }
  std::cout << count << std::endl;
}

void ShellSort(int num, std::vector<int>& arr) {
  std::vector<int> h(num);
  h[0] = 1;
  for (int i = 0; i < num; i++) {
    h[i + 1] = 3 * h[i] + 1;
    if (num < h[i]) {
      int temp = i - 1;
      for (int i = temp; i != -1; i--) {
        insertionSort(arr, h[i]);
      }
      break;
    }
  }
}

int main() {
  int num;
  std::cin >> num;
  std::vector<int> arr(num);
  for (int& element : arr)
    std::cin >> element;
  ShellSort(num, arr);
  for (const int& element : arr)
    std::cout << element << std::endl;
  return 0;
}
```

Note that we have moved from C to C++ to use `std::vector`, but the logic of the program remains the same.