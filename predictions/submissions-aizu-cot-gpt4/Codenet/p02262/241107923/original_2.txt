The given code performs a shell sort on a dynamically allocated array. Here are some optimization steps:

1. Remove global variables: Global variables are bad practice. They can cause problems like state mutation and increased memory usage for the entire duration of the program. 

2. Use a local variable for the count inside the insertionSort function and return the count. Then add this returned count to a total count in the ShellSort function.

3. The 'temp' variable, which seems to be the last valid index of the 'h' array, can also be made local to the ShellSort function and passed to other functions as needed.

4. The 'temp_temp' variable is simply a copy of 'temp' at a certain point. It can be eliminated and 'temp' can be used instead.

5. Instead of dynamically calculating the 'h' array in ShellSort, pre-calculate the values and store them in the array directly.

6. Use 'new' and 'delete' instead of 'malloc' and 'free' since we're using C++. 

Here's the optimized code:

```cpp
#include <stdio.h>
#include <vector>

void insertionSort(int *, int, int, int&);
void ShellSort(int, int *);

int main(void) {
  int num, *arr;
  scanf("%d", &num);
  arr = new int[num];
  for (int i = 0; i < num; i++)
    scanf("%d", &arr[i]);
  ShellSort(num, arr);
  delete[] arr;
  return 0;
}

// Pre-calculated values for the 'h' array
int h[20] = {1, 4, 13, 40, 121, 364, 1093, 3280, 9841, 29524, 88573, 265720, 797161, 2391484, 7174453, 21523360, 64570081, 193710244, 581130733, 1743392200};

void ShellSort(int num, int *arr) {
  int temp, count=0;
  for (temp = 0; temp < 20; temp++) {
    if (num < h[temp]) {
      temp--;
      break;
    }
  }
  printf("%d\n", temp + 1);
  for (int i = temp; i != -1; i--) {
    i == 0 ? printf("%d\n", h[i]) : printf("%d ", h[i]);
    insertionSort(arr, num, h[i], count);
  }
  printf("%d\n", count);
  for (int i = 0; i < num; i++) {
    printf("%d\n", arr[i]);
  }
}

void insertionSort(int *arr, int num, int h, int& count) {
  int j, v;
  for (int i = h; i < num; i++) {
    v = arr[i];
    j = i - h;
    while (j >= 0 && arr[j] > v) {
      arr[j + h] = arr[j];
      j -= h;
      count++;
    }
    arr[j + h] = v;
  }
}
```
This code reduces the scope of the variables where possible, eliminates unnecessary variables, pre-calculates values to save computation time, and uses C++ memory management syntax.