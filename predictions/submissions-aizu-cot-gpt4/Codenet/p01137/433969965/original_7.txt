The optimization steps are as follows:

1. Instead of using `#include <bits/stdc++.h>` which includes all standard library headers (and is not standard, only works on certain compilers), only include necessary headers. This will reduce the compile time.

2. Don't use `using namespace std;` since it can lead to name conflicts. It's better to use `std::` prefix when needed.

3. The typedefs for basic types like `vi`, `vs`, `vvi`, `vpii`, `pii`, `pll` are unnecessary and make the code less readable. It's better to use the original types (`std::vector<int>`, `std::vector<std::string>`, `std::vector<std::vector<int>>`, `std::vector<std::pair<int, int>>`, `std::pair<int, int>`, `std::pair<long long, long long>`).

4. The macros `rep`, `REP`, `rer`, `each` and `all` are not used in the code and should be removed.

5. Remove unused constants `mod`, `eps`, `dx`, `dy`.

6. `memset` is used in C programming for setting values in memory, but it is not used in this code, so we can remove this macro.

7. In the inner loop, the calculation `y * y + z * z * z` is repeated. It can be calculated once and stored in a variable.

Here is the optimized code:

```cpp
#include <iostream>
#include <algorithm>

const int inf = 1000000000;

int main() {
  int e;
  while(std::cin >> e, e) {
    int ans = inf;
    for (int z = 0; z * z * z <= e; ++z) {
      for (int y = 0; y * y + z * z * z <= e; ++y) {
        int tmp = y * y + z * z * z;   //calculate once and store
        int x = e - tmp;
        ans = std::min(ans, x + y + z);
      }
    }
    std::cout << ans << std::endl;
  }
  return 0;
}
```
This version of the code is much cleaner, easier to read, and should run slightly faster due to the elimination of the repeated calculation in the inner loop.