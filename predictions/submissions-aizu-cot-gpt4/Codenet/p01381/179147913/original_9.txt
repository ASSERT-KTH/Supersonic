1. The first optimization is to use std::vector instead of native array. Arrays in C++ are not efficient in terms of memory management, especially when the size of the array is not constant. This is because arrays in C++ are not resizable. Here, we are creating the array p of size n + 2 in each iteration of the while loop. Instead, we can use std::vector which is a resizable array.

2. The second optimization is to reduce the number of printf calls. Every call to printf is expensive in terms of time. Instead, we can use a stringstream to build the string we want to print and then print it once.

3. The third optimization is to use '\n' instead of std::endl for newline. std::endl causes the output buffer to flush, which can slow down your program.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <sstream>
using namespace std;
int main() {
  int n, k;
  while (cin >> n >> k) {
    if (n / 2 < k) {
      cout << "-1\n";
      continue;
    }
    vector<int> p(n + 2);
    p[0] = 0;
    for (int i = 1; i < n; i += 2) {
      p[i] = i / 2 + 1;
      p[i + 1] = n - p[i];
    }
    stringstream ss;
    for (int i = 0; i < k; i++) {
      if (i != 0)
        ss << "\n";
      for (int j = 0; j < n - 1; j++) {
        int a = (p[j] + i) % n + 1;
        int b = (p[j + 1] + i) % n + 1;
        ss << a << " " << b << "\n";
      }
    }
    cout << ss.str();
  }
}
```

Please note that you need to include the <sstream> and <vector> headers in your file because we are using std::stringstream and std::vector in this program.