This code can be optimized for running time by reducing the number of printf statements, which are time-consuming operations. Instead of printing each pair of numbers in a separate printf statement, you can store them in a string and print it once.

Also, the use of the 'int' array can be optimized. Instead of creating a large array for every iteration, you can create a vector, which is dynamic and will only use the amount of memory that is needed. Plus, it will be easier to manage.

For memory usage optimization, you can minimize the size of the array by not declaring it with size 'n+2'. You can declare it with the exact size 'n' because the array 'p' only stores 'n' elements.

Here is the step by step optimization:

1. Replace the array 'p' with a vector.
2. Change the array 'p' size from 'n+2' to 'n'.
3. Inside the second for loop, instead of multiple printf statements, append the output to a string.
4. Print the output string after the second for loop.

The optimized program is as follows:

```cpp
#include <cstdio>
#include <iostream>
#include <vector>
#include <string>
using namespace std;
int main() {
  int n, k;
  while (cin >> n >> k) {
    if (n / 2 < k) {
      printf("-1\n");
      continue;
    }
    vector<int> p(n);
    p[0] = 0;
    for (int i = 1; i < n; i += 2) {
      p[i] = i / 2 + 1;
      p[i + 1] = n - p[i];
    }
    for (int i = 0; i < k; i++) {
      string output = "";
      for (int j = 0; j < n - 1; j++) {
        int a = (p[j] + i) % n + 1;
        int b = (p[j + 1] + i) % n + 1;
        output += to_string(a) + " " + to_string(b) + "\n";
      }
      printf("%s", output.c_str());
    }
  }
}
```