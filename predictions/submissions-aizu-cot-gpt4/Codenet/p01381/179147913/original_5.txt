The given program has two main areas that can be improved for performance optimization:

1. Memory Usage: The array p[] is declared with size (n+2). This can take a lot of memory if n is large. Also, it is not necessary to store the entire array for this program.

2. Redundant Computations: In the nested for loop, the computations for a and b are repeated multiple times. These computations can be avoided if the results are stored and reused.

Now, let's optimize the program:

1. Instead of using an array, we can calculate the values in real-time. We will remove the array p[] and directly calculate the values in the nested for loop.

2. To avoid the redundant computations, we can store the values calculated in the first run and just add 1 for the subsequent runs. This will avoid the expensive modulo operation and addition operation.

Here is the optimized code:

```cpp
#include <cstdio>
#include <iostream>
using namespace std;
int main() {
  int n, k;
  while (cin >> n >> k) {
    if (n / 2 < k) {
      printf("-1\n");
      continue;
    }
    for (int i = 0; i < k; i++) {
      if (i != 0)
        printf("\n");
      for (int j = 0; j < n - 1; j++) {
        int a, b;
        if (i == 0) {
          a = (j / 2 + 1 + i) % n + 1;
          b = (n - a + i) % n + 1;
        } else {
          a = (a + 1) % n;
          b = (b + 1) % n;
        }
        printf("%d %d\n", a, b);
      }
    }
  }
}
```

Please note that this code assumes that the order of a and b does not matter. If the order matters, we need to adjust the computation accordingly.
