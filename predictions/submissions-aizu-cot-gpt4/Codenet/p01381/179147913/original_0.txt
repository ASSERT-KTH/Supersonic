Optimization Steps:

1. Use `std::vector<int>` instead of array `p[]` because it does not need to be initialized with a constant size. This will save memory usage if the value of `n` is large.

2. Use `std::cout` instead of `printf()`. This can be faster because `printf()` has to parse the format string, whereas `std::cout` does not.

3. Use `std::ios::sync_with_stdio(false)` at the beginning of the `main()` function. This can speed up I/O operations because it disables the synchronization between the C++ standard streams and the C standard streams.

4. Use `\n` instead of `std::endl`. `std::endl` causes a flush operation which can slow down the output.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  ios::sync_with_stdio(false);
  int n, k;
  while (cin >> n >> k) {
    if (n / 2 < k) {
      cout << "-1\n";
      continue;
    }
    vector<int> p(n + 2);
    p[0] = 0;
    for (int i = 1; i < n; i += 2) {
      p[i] = i / 2 + 1;
      p[i + 1] = n - p[i];
    }
    for (int i = 0; i < k; i++) {
      if (i != 0)
        cout << "\n";
      for (int j = 0; j < n - 1; j++) {
        int a = (p[j] + i) % n + 1;
        int b = (p[j + 1] + i) % n + 1;
        cout << a << " " << b << "\n";
      }
    }
  }
}
```