The given program can be optimized in the following ways:

1) Avoiding dynamic allocation: The array "p" is dynamically allocated inside the while loop. This is not necessary and can be avoided by using a constant size array. This will not only reduce the overhead of dynamic allocation but also avoid potential memory leaks.

2) Reducing the number of print statements: The number of calls to printf can be reduced by first constructing the output string and then printing it once. This will reduce the number of system calls and thus increase the performance.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <string>
using namespace std;
constexpr int N = 1e6 + 2;
int p[N];
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  int n, k;
  while (cin >> n >> k) {
    if (n / 2 < k) {
      cout << "-1\n";
      continue;
    }
    p[0] = 0;
    for (int i = 1; i < n; i += 2) {
      p[i] = i / 2 + 1;
      p[i + 1] = n - p[i];
    }
    for (int i = 0; i < k; i++) {
      string output;
      for (int j = 0; j < n - 1; j++) {
        int a = (p[j] + i) % n + 1;
        int b = (p[j + 1] + i) % n + 1;
        output += to_string(a) + ' ' + to_string(b) + '\n';
      }
      cout << output;
    }
  }
  return 0;
}
```
Explanation:

1) I replaced the dynamic array with a constant size array. The maximum size is set to 1e6+2 which should be more than enough for most cases.

2) I added the ios::sync_with_stdio(false) and cin.tie(nullptr) lines to disable the synchronization between the C and C++ standard streams. This can potentially speed up the input/output operations.

3) I replaced the printf statements with a single cout statement. Before the cout statement, I construct the output string using the += operator and the to_string function.