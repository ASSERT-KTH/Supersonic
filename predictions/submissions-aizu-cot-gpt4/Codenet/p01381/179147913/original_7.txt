We can optimize the program by making the following changes:

1. Replace the dynamic array with a vector to avoid fixed-size array declaration which is not supported in C++ standard and can lead to stack overflow for large sizes.

2. Minimize the use of printf() and cin, instead use cout and endl, which are faster.

3. Minimize the use of modulus operator, as it is more expensive than other arithmetic operations. In this case, we are using it in a loop so this will definitely impact the performance.

4. Avoid unnecessary computations inside the loops.

Here's the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n, k;
  while (cin >> n >> k) {
    if (n / 2 < k) {
      cout << "-1\n";
      continue;
    }
    vector<int> p(n + 2);
    p[0] = 0;
    for (int i = 1; i < n; i += 2) {
      p[i] = i / 2 + 1;
      p[i + 1] = n - p[i];
    }
    for (int i = 0; i < k; i++) {
      if (i != 0)
        cout << "\n";
      for (int j = 0; j < n - 1; j++) {
        int a = (p[j] + i) % n + 1;
        int b = (p[j + 1] + i) % n + 1;
        cout << a << " " << b << "\n";
      }
    }
  }
}
```

In this optimized version, we have used `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` to make the input/output operations faster. Moreover, we replaced dynamic array with std::vector to avoid fixed size array declaration which is not good practice in C++.