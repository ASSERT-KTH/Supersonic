Here are the steps to optimize the program:

1. Instead of using an array `p` in dynamic memory, which can cause additional overhead, we can calculate the values of `p[i]` and `p[i+1]` in place. This not only saves memory but also reduces the time complexity because we don't have to iterate over the array twice. 

2. Instead of using `printf` for each line of output, it's better to store all the output in a string or a stringstream and then output once. This is because each call to `printf` or `cout` incurs a system call which is expensive. By buffering the output and writing it out in one go, we can reduce the number of system calls and hence, optimize the running time.

3. We can also remove the check `if(i!=0)` inside the loop. If we directly print a newline character after each iteration, it will have the same effect.

Here's the optimized program:

```cpp
#include <iostream>
#include <sstream>
using namespace std;

int main() {
    int n, k;
    while (cin >> n >> k) {
        if (n / 2 < k) {
            cout << "-1\n";
            continue;
        }
        stringstream ss;
        for (int i = 0; i < k; i++) {
            for (int j = 1; j < n; j += 2) {
                int a = ((j / 2 + 1 + i) % n) + 1;
                int b = ((n - (j / 2 + 1) + i) % n) + 1;
                ss << a << " " << b << "\n";
            }
            ss << "\n";
        }
        cout << ss.str();
    }
    return 0;
}
```
This optimized program can have a significant improvement in running time and memory usage, especially when `n` and `k` are large. The time complexity is O(n*k), same as the original program, but the optimized program avoids unnecessary memory allocation and reduces the number of system calls.