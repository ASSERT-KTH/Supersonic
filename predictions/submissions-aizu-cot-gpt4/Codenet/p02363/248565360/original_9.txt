Here are the steps to optimize the given C/C++ program:

1. Instead of using `fill` function to initialize the array `d`, we can use `memset`. `memset` is faster than `fill` because it works directly on memory blocks and doesn't need to loop over the array.

2. In the function `BellmanFord`, the struct `edge e` is copied from `edges[j]`. This copy operation can be costly in terms of both time and memory, so we can use a reference to the `edges[j]` instead. 

3. In the function `BellmanFord`, a string `ans` is being appended multiple times. String concatenation in C++ is a costly operation because every time a string is appended, a new string is created and the old string is copied to the new string. To avoid this, we can use `ostringstream` which is faster for multiple appends.

4. Instead of appending a newline to `ans` in the main function, we can append it directly in the `BellmanFord` function after the loop which will reduce the complexity of the main function. 

5. Instead of reading the values `s`, `t` and `w` into separate variables and then creating a struct, we can directly read the values into the struct and push it into the vector. This will reduce the number of operations.

Here is the optimized program:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <cstring>
using namespace std;
#define MAX 100000
struct edge {
  int s, t, d;
};
vector<edge> edges;
ostringstream ans;
int d[MAX];
int BellmanFord(int startVertex, int vNum, int eNum) {
  memset(d, 0x7f, sizeof(d)); // Optimize 1
  d[startVertex] = 0;
  for (int i = 0; i < vNum; ++i) {
    bool update = false;
    for (int j = 0; j < eNum; ++j) {
      edge &e = edges[j]; // Optimize 2
      if (d[e.s] != __INT_MAX__ && d[e.t] > d[e.s] + e.d) {
        d[e.t] = d[e.s] + e.d;
        update = true;
        if (i == vNum - 1) {
          cout << "NEGATIVE CYCLE" << endl;
          return -1;
        }
      }
    }
    if (!update)
      break;
  }
  for (int i = 0; i < vNum; ++i) {
    if (i > 0)
      ans << " ";
    if (d[i] == __INT_MAX__) {
      ans << "INF";
    } else
      ans << d[i];
  }
  ans << "\n"; // Optimize 4
  return 0;
}
int main() {
  int vNum, eNum;
  cin >> vNum >> eNum;
  edges.resize(eNum);
  for (int i = 0; i < eNum; ++i) {
    cin >> edges[i].s >> edges[i].t >> edges[i].d; // Optimize 5
  }
  for (int i = 0; i < vNum; ++i) {
    if (BellmanFord(i, vNum, eNum) == -1) {
      return 0;
    }
  }
  cout << ans.str();
}
```
Please note that the usage of `memset` to initialize the array to `INT_MAX` is compiler specific. It works because `INT_MAX` is `0x7f7f7f7f` in hexadecimal.