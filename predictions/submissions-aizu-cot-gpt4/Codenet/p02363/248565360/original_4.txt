There are several ways to optimize this program both in terms of run-time speed and memory usage:

1. **Avoid copying struct in each iteration**: The code `edge e = edges[j];` creates a copy of the object in each iteration which is unnecessary and wastes memory. We can simply use a reference to the object in the vector.

2. **Reduce string concatenations**: The code is using `std::string::append()` method to concatenate strings which is not efficient because it can cause multiple memory allocations. Instead, we can use a `std::stringstream` and convert it to a string only at the end when we want to print it.

3. **Reduce unnecessary initialization of array**: `fill((int *)d, (d + MAX), __INT_MAX__);` This line is initializing the entire array `d` with `__INT_MAX__` in each call of function `BellmanFord()` which is unnecessary and time-consuming. We can instead initialize only up to `vNum`.

Here is the optimized program:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
using namespace std;
#define MAX 100000
struct edge {
  int s, t, d;
};
vector<edge> edges;
stringstream ans;
int d[MAX];
int BellmanFord(int startVertex, int vNum, int eNum) {
  fill(d, d + vNum, __INT_MAX__);
  d[startVertex] = 0;
  for (int i = 0; i < vNum; ++i) {
    bool update = false;
    for (int j = 0; j < eNum; ++j) {
      edge &e = edges[j];
      if (d[e.s] != __INT_MAX__ && d[e.t] > d[e.s] + e.d) {
        d[e.t] = d[e.s] + e.d;
        update = true;
        if (i == vNum - 1) {
          cout << "NEGATIVE CYCLE" << endl;
          return -1;
        }
      }
    }
    if (!update)
      break;
  }
  for (int i = 0; i < vNum; ++i) {
    if (i > 0)
      ans << " ";
    if (d[i] == __INT_MAX__) {
      ans << "INF";
    } else
      ans << d[i];
  }
  return 0;
}
int main() {
  int vNum, eNum;
  cin >> vNum >> eNum;
  int s, t, w;
  for (int i = 0; i < eNum; ++i) {
    cin >> s >> t >> w;
    edges.push_back({s, t, w});
  }
  for (int i = 0; i < vNum; ++i) {
    if (BellmanFord(i, vNum, eNum) == -1) {
      return 0;
    }
    ans << "\n";
  }
  cout << ans.str();
}
```

This optimized version should run faster and use less memory.