First, let's go through the code and identify potential areas for optimization:

1. `edge e = edges[j];`: This line is creating a copy of the edge object which is not really needed, as we can directly access the elements of the object within the vector.

2. `ans.append(" ");`, `ans.append("INF");`, `ans.append(to_string(d[i]));`, `ans.append("\n");`: All these lines are appending strings to our result string ans. String concatenation can be quite expensive, especially in a loop, as it requires creating a new string and copying the old and new content over every time. Instead, we can use a stringstream which is a much more efficient way to concatenate strings.

3. `bool update = false;`: This flag is being declared inside the loop and reset on every iteration, which is unnecessary and inefficient.

4. `fill((int *)d, (d + MAX), __INT_MAX__);`: This line is filling the entire array with `__INT_MAX__`, even if the number of vertices `vNum` is significantly less than `MAX`.

Let's now optimize the code:

```
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
using namespace std;
#define MAX 100000
struct edge {
  int s, t, d;
};
vector<edge> edges;
stringstream ans;
int d[MAX];
int BellmanFord(int startVertex, int vNum, int eNum) {
  fill(d, d + vNum, __INT_MAX__);
  d[startVertex] = 0;
  bool update = false;
  for (int i = 0; i < vNum; ++i) {
    update = false;
    for (int j = 0; j < eNum; ++j) {
      if (d[edges[j].s] != __INT_MAX__ && d[edges[j].t] > d[edges[j].s] + edges[j].d) {
        d[edges[j].t] = d[edges[j].s] + edges[j].d;
        update = true;
        if (i == vNum - 1) {
          cout << "NEGATIVE CYCLE" << endl;
          return -1;
        }
      }
    }
    if (!update)
      break;
  }
  for (int i = 0; i < vNum; ++i) {
    if (i > 0)
      ans << " ";
    if (d[i] == __INT_MAX__) {
      ans << "INF";
    } else
      ans << d[i];
  }
  return 0;
}
int main() {
  int vNum, eNum;
  cin >> vNum >> eNum;
  int s, t, w;
  for (int i = 0; i < eNum; ++i) {
    cin >> s >> t >> w;
    edges.push_back({s, t, w});
  }
  for (int i = 0; i < vNum; ++i) {
    if (BellmanFord(i, vNum, eNum) == -1) {
      return 0;
    }
    ans << "\n";
  }
  cout << ans.str();
}
```

Now the code is optimized for running time and memory usage. The copy operation of `edge` is removed, `stringstream` is used instead of string concatenation, `update` flag is declared only once, and the `fill` function operates only on the needed number of elements.