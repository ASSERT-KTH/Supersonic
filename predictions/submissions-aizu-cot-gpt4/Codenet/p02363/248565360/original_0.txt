Here are the steps to optimize your program:

1. Reduce the number of memory allocations: The function `push_back` causes a reallocation of memory every time the capacity of the vector is exceeded. You can use the `reserve` function to allocate the necessary memory at once. This will avoid the overhead of multiple reallocations.

2. Avoid copying objects: In your loop, you are copying each edge `e` from `edges`. This can be avoided by using a reference.

3. Optimization of string concatenation: Each time the `append` function is called, it checks whether it has enough capacity to add the new string. If not, it allocates more memory. To avoid this, you can use the `reserve` function to allocate enough memory for the `ans` string at the beginning.

4. Use `'\n'` instead of `endl`: `endl` flushes the buffer each time it is called, which can lead to a decrease in performance. Using `'\n'` has the same effect without flushing the buffer.

5. Avoid unnecessary checks in the loop: In the final loop of `BellmanFord`, you check whether `i > 0` on each iteration. This check is unnecessary because you can start the loop from `i = 1` and add `d[0]` to `ans` before the loop.

Here is the optimized program:

```cpp
#include <iostream>
#include <string>
#include <vector>
using namespace std;
#define MAX 100000
struct edge {
  int s, t, d;
};
vector<edge> edges;
string ans;
int d[MAX];
int BellmanFord(int startVertex, int vNum, int eNum) {
  fill((int *)d, (d + MAX), __INT_MAX__);
  d[startVertex] = 0;
  for (int i = 0; i < vNum; ++i) {
    bool update = false;
    for (int j = 0; j < eNum; ++j) {
      edge& e = edges[j];
      if (d[e.s] != __INT_MAX__ && d[e.t] > d[e.s] + e.d) {
        d[e.t] = d[e.s] + e.d;
        update = true;
        if (i == vNum - 1) {
          cout << "NEGATIVE CYCLE\n";
          return -1;
        }
      }
    }
    if (!update)
      break;
  }
  if (d[0] == __INT_MAX__) {
    ans.append("INF");
  } else
    ans.append(to_string(d[0]));
  for (int i = 1; i < vNum; ++i) {
    ans.append(" ");
    if (d[i] == __INT_MAX__) {
      ans.append("INF");
    } else
      ans.append(to_string(d[i]));
  }
  return 0;
}
int main() {
  int vNum, eNum;
  cin >> vNum >> eNum;
  edges.reserve(eNum);
  ans.reserve(vNum * 20);
  int s, t, w;
  for (int i = 0; i < eNum; ++i) {
    cin >> s >> t >> w;
    edges.push_back({s, t, w});
  }
  for (int i = 0; i < vNum; ++i) {
    if (BellmanFord(i, vNum, eNum) == -1) {
      return 0;
    }
    ans.append("\n");
  }
  cout << ans;
}
```
Keep in mind that these optimizations will have a more noticeable impact on large inputs. On small inputs, the difference in performance might not be noticeable.