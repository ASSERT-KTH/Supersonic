This program is implementing the Bellman-Ford algorithm, which is used to find shortest paths from a single source vertex to all other vertices in a weighted graph.

Here are some steps to optimize the program:

1. Remove the global variable ans: Global variables are not good practice as they can be modified anywhere in the code, leading to bugs. Furthermore, they persist for the lifetime of the program, leading to unnecessary memory consumption. We can make ans a local variable in the main() function and pass it by reference to the BellmanFord() function.

2. Direct output instead of string concatenation: String concatenation can be slow, especially in a loop. It's better to output the individual parts directly to cout. This not only makes the code faster by avoiding the overhead of string concatenation, but it also reduces memory usage since we don't need to store the full output in memory before printing it out.

3. Avoid copying the edge structure in the loop: In the inner loop of the BellmanFord() function, we're currently copying the whole edge structure to a local variable. This can be avoided by using a reference, which is faster and uses less memory.

Here is the optimized code:

```c++
#include <iostream>
#include <string>
#include <vector>
using namespace std;
#define MAX 100000
struct edge {
  int s, t, d;
};
vector<edge> edges;
int d[MAX];
int BellmanFord(int startVertex, int vNum, int eNum) {
  fill((int *)d, (d + MAX), __INT_MAX__);
  d[startVertex] = 0;
  for (int i = 0; i < vNum; ++i) {
    bool update = false;
    for (int j = 0; j < eNum; ++j) {
      edge &e = edges[j];
      if (d[e.s] != __INT_MAX__ && d[e.t] > d[e.s] + e.d) {
        d[e.t] = d[e.s] + e.d;
        update = true;
        if (i == vNum - 1) {
          cout << "NEGATIVE CYCLE" << endl;
          return -1;
        }
      }
    }
    if (!update)
      break;
  }
  for (int i = 0; i < vNum; ++i) {
    if (i > 0)
      cout << " ";
    if (d[i] == __INT_MAX__) {
      cout << "INF";
    } else
      cout << d[i];
  }
  cout << "\n";
  return 0;
}
int main() {
  int vNum, eNum;
  cin >> vNum >> eNum;
  int s, t, w;
  for (int i = 0; i < eNum; ++i) {
    cin >> s >> t >> w;
    edges.push_back({s, t, w});
  }
  for (int i = 0; i < vNum; ++i) {
    if (BellmanFord(i, vNum, eNum) == -1) {
      return 0;
    }
  }
}
```