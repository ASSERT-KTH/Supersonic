Optimization Step by Step

1. Variable-Length Arrays (VLA) are not part of standard C++. It is better to replace them with dynamic memory allocation, such as `std::vector`.

2. In the `print_partition_ints` function, it is better to use `std::cout` instead of `std::printf` because it is more type-safe and idiomatic in C++. This can avoid the overhead of formatting strings with `printf`.

3. In the `partition` function, the `std::swap` function can be replaced with a more efficient swap operation using XOR operations.

4. `auto` is used for loop variable `i`. However, the type of `i` is known before the loop starts, it is better to explicitly use `uint`.

5. Use `std::ios_base::sync_with_stdio(false);` before the first I/O operation to disable the synchronization between the C and C++ standard streams. This can make I/O operations faster.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

using uint = unsigned int;

void print_partition_ints(const std::vector<int>& as, const uint q, const uint n) {
    for (uint i = 0; i < n; ++i) {
        if (i != 0) std::cout << " ";
        if (i == q) std::cout << "[" << as[i] << "]";
        else std::cout << as[i];
    }
    std::cout << "\n";
}

uint partition(std::vector<int>& as, const uint first, const uint last) {
    uint less = first;
    for (uint i = first; i < last; ++i) {
        if (as[i] <= as[last]) {
            as[less] ^= as[i];
            as[i] ^= as[less];
            as[less] ^= as[i];
            ++less;
        }
    }
    as[less] ^= as[last];
    as[last] ^= as[less];
    as[less] ^= as[last];
    return less;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    uint n;
    std::cin >> n;
    std::vector<int> as(n);
    for (uint i = 0; i < n; ++i) {
        std::cin >> as[i];
    }
    uint q = partition(as, 0, n - 1);
    print_partition_ints(as, q, n);
}
```
In this program, the `std::vector` container is used for dynamic memory allocation, which is more flexible and safer than C-style arrays. The `printf` function is replaced with `std::cout` for better type safety and performance. The `std::swap` function is replaced with XOR swap operations for better efficiency. The `auto` keyword is replaced with the explicit type `uint` for better readability and performance. The synchronization between the C and C++ standard streams is disabled for faster I/O operations.
