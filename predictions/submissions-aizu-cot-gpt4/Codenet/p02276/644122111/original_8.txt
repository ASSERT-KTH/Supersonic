Here are the steps to optimize the given program:

1. Avoid Variable Initializations inside Loop: In function `print_partition_ints()`, `auto format` is reinitialized during every iteration of the loop. Initializing variables inside the loop can slow down the program as it has to allocate memory each time.

2. Use Dynamic Memory Allocation: In the `main()` function, you are defining an array `as[n]` with size `n`. The size of `n` is not known at compile time, which is not good practice in C++. It is better to use dynamic memory allocation for such cases.

3. Use `std::vector` instead of Arrays: In modern C++, `std::vector` is preferred over traditional arrays because of its dynamic nature and the built-in functions it provides.

4. Use `std::cin` and `std::cout` instead of `std::scanf` and `std::printf`: This is not exactly an optimization but more of a good coding practice. Using `std::cin` and `std::cout` is more type-safe and less prone to errors.

Optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using uint = unsigned int;

static void print_partition_ints(const std::vector<int>& as, const uint q, const uint n) {
  std::string out_sep = "";
  
  for (auto i = 0u; i < n; ++i) {
    std::cout << out_sep;
    if (i == q)
      std::cout << "[" << as[i] << "]";
    else
      std::cout << as[i];
    out_sep = " ";
  }
  
  std::cout << "\n";
}

static uint partition(std::vector<int>& as, const uint first, const uint last) {
  auto less = first;
  
  for (auto i = first; i < last; ++i) {
    if (as[i] <= as[last]) {
      std::swap(as[less], as[i]);
      ++less;
    }
  }
  
  std::swap(as[less], as[last]);
  return less;
}

int main() {
  uint n;
  std::cin >> n;
  std::vector<int> as(n);
  
  for (auto i = 0u; i < n; ++i) {
    std::cin >> as[i];
  }
  
  auto q = partition(as, 0, n - 1);
  print_partition_ints(as, q, n);
}
```
This program is safer, cleaner, and should run a bit more efficiently than the original one.