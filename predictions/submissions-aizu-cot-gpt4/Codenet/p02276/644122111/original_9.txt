Optimization Steps:

1. Avoid Variable Redefinition: 
In the print_partition_ints function, the variable 'format' is being defined in each iteration of the loop. This is unnecessary and can be avoided. Instead of defining it in the loop, we can define it outside the loop and simply update its value inside the loop. This will reduce the overhead of variable definition at each iteration.

2. Use Faster I/O Methods: 
The use of std::scanf and std::printf for input and output is slower compared to the cin and cout functions in C++. Replacing these with cin and cout, and using ios_base::sync_with_stdio(false) can make the I/O operations significantly faster.

3. Variable-Length Arrays:
In the main function, an array 'as' of size 'n' is being created where 'n' is a non-const variable. This is a variable-length array (VLA) which is not a part of the C++ standard. Instead, we can use std::vector which is safer and allows dynamic resizing.

Here's the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
typedef unsigned int uint;

void print_partition_ints(const vector<int>& as, const uint q) {
    string out_sep = "";
    string format;
    for (uint i = 0; i < as.size(); ++i) {
        format = (i != q ? "%s%d" : "%s[%d]");
        printf(format.c_str(), out_sep.c_str(), as[i]);
        out_sep = " ";
    }
    printf("\n");
}

uint partition(vector<int>& as, const uint first, const uint last) {
    auto less = first;
    for (auto i = first; i < last; ++i) {
        if (as[i] <= as[last]) {
            swap(as[less], as[i]);
            ++less;
        }
    }
    swap(as[less], as[last]);
    return less;
}

int main() {
    ios_base::sync_with_stdio(false);
    uint n;
    cin >> n;
    vector<int> as(n);
    for (auto i = 0u; i < n; ++i) {
        cin >> as[i];
    }
    auto q = partition(as, 0, n - 1);
    print_partition_ints(as, q);
    return 0;
}
```

Please note that the optimization may vary based on the compiler and system architecture.