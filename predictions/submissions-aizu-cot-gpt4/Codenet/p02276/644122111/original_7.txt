Optimization:

1. First, although creating an array using a variable length (like "int as[n];") is supported in GCC, it's not standard C++. You should use std::vector<int> instead, which is dynamically resizable and has almost identical performance to an array.

2. Second, you are using "auto" keyword everywhere, which makes the code harder to read and debug. While "auto" is useful in some cases, you should use explicit types when the type is simple and clear, like "uint" or "int".

3. Third, the function "print_partition_ints" is repeatedly calling printf in a loop, which is not efficient. It's better to build the string first, and then print it out once. You can use std::stringstream to efficiently build the string.

4. Last, you can use std::ios_base::sync_with_stdio(false) to make io operations faster. But be careful, you cannot mix C and C++ style IO operations (like printf/scanf and cin/cout) after that.

Here is the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <sstream>
#include <vector>

using uint = unsigned int;

static void print_partition_ints(const std::vector<int>& as, const uint q) {
  std::stringstream ss;
  for (uint i = 0; i < as.size(); ++i) {
    if (i != 0) {
      ss << ' ';
    }
    if (i == q) {
      ss << '[' << as[i] << ']';
    } else {
      ss << as[i];
    }
  }
  ss << '\n';
  std::cout << ss.str();
}

static uint partition(std::vector<int>& as, const uint first, const uint last) {
  uint less = first;
  for (uint i = first; i < last; ++i) {
    if (as[i] <= as[last]) {
      std::swap(as[less], as[i]);
      ++less;
    }
  }
  std::swap(as[less], as[last]);
  return less;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  uint n;
  std::cin >> n;
  std::vector<int> as(n);
  for (uint i = 0; i < n; ++i) {
    std::cin >> as[i];
  }
  uint q = partition(as, 0, n - 1);
  print_partition_ints(as, q);
  return 0;
}
```