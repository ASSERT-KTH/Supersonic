Here is the step by step optimizations:

1. Avoid using global variables: Global variables are generally considered bad practice, and they can lead to code that is hard to debug and maintain. They might also use more memory than necessary due to their scope.

2. Use vector instead of dynamic array: In C++, it's generally advised to use a vector instead of a dynamic array. A vector is a dynamic array with more functionality, and it automatically handles memory management which reduces the chances of memory leaks.

3. Avoid unnecessary memory allocation: You're currently allocating memory for the `N` array with `calloc` and then never freeing it. This can lead to memory leaks. In the optimized version, using vector will remove this problem.

4. Use early return: In your `solve` function, you're checking if `m == 0` after all recursive calls have been made. If `m` is already 0, it'd be more efficient to return true immediately, avoiding unnecessary recursion.

5. Use std::ios::sync_with_stdio(0): This line makes input/output in C++ more efficient. This can be used when we donâ€™t need to switch between C++ and C IO.

6. Use cin.tie(0): This unties cin from cout. Tied streams ensure that one stream is flushed automatically before each I/O operation on the tied stream. Unbinding cin from cout can be a performance boost.

Here is the optimized version of your program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

bool solve(const vector<int>& N, int i, int m) {
  if (m == 0)
    return true;
  if (i == N.size())
    return false;
  return solve(N, i + 1, m - N[i]) || solve(N, i + 1, m);
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  int n, t;
  cin >> n;
  vector<int> N(n);
  for (int& num : N) {
    cin >> num;
  }
  cin >> t;
  while (t--) {
    int p;
    cin >> p;
    cout << (solve(N, 0, p) ? "yes" : "no") << endl;
  }
  return 0;
}
```
The overall logic of the program remains the same. The changes are primarily to improve memory usage and runtime efficiency.