The given program is a brute-force solution to a subset-sum problem where it checks if there is a subset of the given set with sum equal to a specific value. It uses recursion which results in a large number of redundant calculations and it also has a high time complexity of O(2^n). 

We can optimize this program by using a dynamic programming approach where we construct a table of size (n x sum) and fill it in a bottom-up manner. This reduces the time complexity to O(n*sum). 

Here is the optimized program:

```c++
#include <iostream>
#include <vector>
using namespace std;

vector<int> N;
int n;

bool subset_sum(int sum) {
    vector<vector<bool>> dp(n+1, vector<bool>(sum+1, false));

    // If sum is 0, the answer is true
    for (int i = 0; i <= n; i++)
        dp[i][0] = true;

    // If sum is not 0 and set is empty, then answer is false
    for (int i = 1; i <= sum; i++)
        dp[0][i] = false;

    // Fill the subset table in bottom-up manner
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= sum; j++) {
            if(j<N[i-1])
                dp[i][j] = dp[i-1][j];
            if (j >= N[i-1])
                dp[i][j] = dp[i-1][j] || dp[i - 1][j-N[i-1]];
        }
    }
    return dp[n][sum];
}

int main() {
    int t;
    cin >> n;
    N.resize(n);
    for (int i = 0; i < n; i++) {
        cin >> N[i];
    }
    cin >> t;
    for (int i = 0; i < t; i++) {
        int p;
        cin >> p;
        if (subset_sum(p)) {
            cout << "yes" << endl;
        } else {
            cout << "no" << endl;
        }
    }
    return 0;
}
```

This program will solve the problem faster and use less memory, as we're not using recursion anymore and we've also removed the unnecessary includes. The size of the table used for dynamic programming is directly proportional to the maximum sum and the number of elements, which means that the memory usage is also optimized.