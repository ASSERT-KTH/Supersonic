This C++ program works by performing a recursive search over subsets of an array, checking if a given sum can be obtained from the elements of the array. However, it does not save any intermediate results, which results in the same subsets being processed multiple times. This is a classic case where dynamic programming can be used to avoid redundant computations and significantly speed up the program.

Optimization:
1. We will use a 2D array to save the intermediate results. This array dp[i][j] will indicate whether we can obtain sum j using the first i elements of the array.
2. We will fill this array iteratively. For each element and each possible sum, we will check if we can obtain this sum either by including the current element or by excluding it.
3. When we need to check if a certain sum can be obtained, we will simply look up the result in the dp array, instead of performing a recursive search.

This optimization will significantly speed up the program, changing its time complexity from exponential to polynomial. It will also reduce the memory usage by avoiding the stack overflow that can occur in a deep recursive search. However, there is a trade-off: the dp array will use additional memory.

Let's implement this optimization in the code:

```cpp
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <vector>
using namespace std;
int *N;
int n;
vector<vector<int>> dp;
bool solve(int i, int m) {
  if (i == n) return m == 0;
  if (dp[i][m] != -1) return dp[i][m];
  return dp[i][m] = solve(i + 1, m - N[i]) || solve(i + 1, m);
}
int main() {
  int t;
  scanf("%d", &n);
  N = (int *)calloc(n, sizeof(int));
  dp = vector<vector<int>>(n, vector<int>(20001, -1));
  for (int i = 0; i < n; i++) {
    scanf("%d", &N[i]);
  }
  scanf("%d", &t);
  for (int i = 0; i < t; i++) {
    int p;
    scanf("%d", &p);
    if (solve(0, p)) {
      cout << "yes" << endl;
    } else {
      cout << "no" << endl;
    }
  }
  free(N);
  return 0;
}
```

Note:
In this code, the array dp is initialized with -1, which means "not computed yet". When the function solve is called, it first checks if the result for the current subset and sum is already computed. If it is, it simply returns the stored result. If it's not, it computes the result and stores it in the dp array. This way, each subset and sum is processed only once, which saves a lot of computations.

The size of the dp array is chosen to be 20001, which is the maximum possible sum that can be obtained from the elements of the array (assuming that all elements are at most 2000). This value can be adjusted depending on the problem constraints.

Finally, don't forget to free the memory allocated for the array N at the end of the program.