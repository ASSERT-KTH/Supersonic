There are several optimization improvements that can be made to this program:

1. **Remove unused `#include` directive:** The `#include <algorithm>` directive is not used in the code. Removing this can reduce the compilation time.

2. **Reduce memory usage:** The `dp` array is declared with a size of 4001x5, which is a significant amount of memory. However, the program never accesses more than `dp[n][4]` where `n` is input by the user. Therefore, we can reduce the array size to 4001x4.

3. **Avoid redundant computation:** The inner-most loop `for (int k = 0; k <= j && k <= 1000; k++)` is performing redundant computation. It's adding `dp[j - k][i - 1]` to `dp[j][i]` for every value of `k` from 0 to `j` or 1000 (whichever is smaller). We can avoid this redundant computation by introducing another array `sum[4001][5]` where `sum[j][i]` is the sum of all `dp[k][i-1]` for `k` from 0 to `j`.

Here is the optimized program:

```c++
#include <iostream>
#include <vector>
using namespace std;
int main() {
  unsigned long long dp[4001][4], sum[4001][5] = {0};
  
  for (int i = 0; i < 4; i++)
    for (int j = 0; j < 4001; j++)
      dp[j][i] = i == 0 && j <= 1000 ? 1 : 0;
  
  for (int i = 1; i <= 3; i++)
    for (int j = 0; j <= 4000; j++) {
      dp[j][i] = sum[j][i - 1];
      if (j > 0) {
        sum[j][i] = sum[j - 1][i] + dp[j][i];
      }
    }
  
  int n;
  while (cin >> n)
    cout << dp[n][3] << endl;
  return 0;
}
```

Note: The optimization strategy might vary depending on the specific constraints of the problem. The provided optimization assumes that `n` is always less than or equal to 4000, which is the size of `dp` and `sum` arrays. If `n` can be larger, then the size of these arrays need to be adjusted accordingly.