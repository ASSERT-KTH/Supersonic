The given program calculates a dynamic programming table and uses it to answer queries. There are few steps we can take to optimize this program. 

1. The dynamic programming (DP) table is static and we can take advantage of this fact by calculating it once and storing it as a global variable. This will prevent the calculation of the DP table every time main function is called.

2. The table is initialized by iterating through every element. Instead of this, we can use memset to initialize the table which is faster as it directly sets the memory bytes.

3. The condition to decide the value of dp[j][i] involves two comparisons and an AND operation which can be replaced by single comparison.

Let's apply these optimizations to the program.

```cpp
#include <cstring>
#include <iostream>
using namespace std;

unsigned long long dp[4001][5];

void calculate_dp() {
  memset(dp, 0, sizeof(dp));
  for (int j = 0; j <= 1000; j++)
    dp[j][1] = 1;
  for (int i = 2; i <= 4; i++)
    for (int j = 0; j <= 4000; j++)
      for (int k = 0; k <= j && k <= 1000; k++)
        dp[j][i] += dp[j - k][i - 1];
}

int main() {
  calculate_dp();
  int n;
  while (cin >> n)
    cout << dp[n][4] << endl;
  return 0;
}
```
In the optimized program, we calculate the DP table once in the calculate_dp function. The initialisation is done using memset and dp[j][1] = 1 instead of a condition inside a loop. Inside the main function, we just need to call calculate_dp once.