Step by Step Optimization:

1. In the first two for-loops, we initialize the array dp[][]. Since the array is large, this operation is quite expensive in terms of running time. Instead of using a double for-loop to initialize it, we can use the memset function to initialize all elements to zero in one go, which is faster.

2. In the next three nested for-loops, we perform the main calculation of the program. We can reduce the time complexity of this part by removing the third for-loop. To do this, we can use a prefix sum array. The prefix sum array can sum up all the elements before a certain index in an array in O(1) time, which greatly reduces the time complexity.

3. The last while loop reads the input and prints the output. Since the number of printed elements can be large, printing each element one by one can be slow. Instead, we can store all the output in a string and print it out all at once at the end of the program, which can save a lot of time.

Optimized Program:

```cpp
#include <algorithm>
#include <iostream>
#include <cstring>
#include <vector>
using namespace std;

int main() {
  unsigned long long dp[4001][5];
  memset(dp, 0, sizeof(dp));
  
  dp[0][1] = 1;
  for (int i = 1; i <= 1000; i++)
    dp[i][1] = 1;
  
  for (int i = 2; i <= 4; i++)
    for (int j = 0; j <= 4000; j++) {
      dp[j][i] = dp[j][i-1];
      if(j >= i)
        dp[j][i] += dp[j - i][i];
    }
  
  int n;
  string output = "";
  while (cin >> n)
    output += to_string(dp[n][4]) + "\n";

  cout << output;
  return 0;
}
```