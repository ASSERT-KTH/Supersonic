Optimization Explanation:

1. The first optimization would be to reduce the size of the dp array from `dp[4001][5]` to `dp[4001][2]`. This is because for each `i` in the second loop, only `dp[j][i]` and `dp[j-k][i-1]` are used. Therefore, we only need to store the current and previous calculation results, and we can use `dp[j][i % 2]` and `dp[j-k][(i-1) % 2]` to replace them respectively.

2. The second optimization is to reduce the scope of the third loop. In the `dp[j][i] += dp[j - k][i - 1]` calculation, when `j - k < 0`, `dp[j - k][i - 1]` will be 0. Therefore, we do not need to loop `k` from `0` to `j`, instead, we loop `k` from `0` to `min(j, 1000)`.

3. The third optimization is to use `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)`. This speeds up `cin` and `cout` by not synchronizing them with `stdio`, and unties `cin` from `cout`. This makes input and output operations faster, which can be useful in situations where time is a critical factor.

Optimized Code:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  unsigned long long dp[4001][2];
  for (int i = 0; i < 5; i++)
    for (int j = 0; j < 4001; j++)
      dp[j][i % 2] = i == 1 && j <= 1000 ? 1 : 0;
  for (int i = 2; i <= 4; i++)
    for (int j = 0; j <= 4000; j++)
      for (int k = 0; k <= min(j, 1000); k++)
        dp[j][i % 2] += dp[j - k][(i-1) % 2];
  int n;
  while (cin >> n)
    cout << dp[n][4 % 2] << "\n";
  return 0;
}
```
