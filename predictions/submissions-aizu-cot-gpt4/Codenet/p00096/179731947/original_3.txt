Owing to the dynamic nature of the program, the optimization options are limited. However, the following steps can be taken:

Step 1: Instead of initializing the dp array in two different loops, we can merge them into a single loop. This will reduce the number of iterations from 4001 * 5 to 4001.

Step 2: We don't need to iterate k up to j. We only need to iterate it up to min(j, 1000) because dp[j - k][i - 1] will always be zero for k > 1000.

Step 3: We can use fast input/output methods to decrease the execution time. This is especially useful when the number of input/output operations is large. For example, we can replace cin/cout with scanf/printf which are faster. 

Now, let's implement these optimizations:

```cpp
#include <stdio.h>
#include <algorithm>
using namespace std;
int main() {
  unsigned long long dp[4001][5];
  for (int j = 0; j <= 4000; j++)
    for (int i = 0; i <= 4; i++)
      dp[j][i] = i == 1 && j <= 1000 ? 1 : 0;
  for (int i = 2; i <= 4; i++)
    for (int j = 0; j <= 4000; j++)
      for (int k = 0; k <= min(j, 1000); k++)
        dp[j][i] += dp[j - k][i - 1];
  int n;
  while(scanf("%d", &n) != EOF)
    printf("%llu\n", dp[n][4]);
  return 0;
}
```
Please note that this optimization will not reduce the time complexity of the program, but it will make the program run faster. The time complexity is still O(N^3) due to the three nested loops.