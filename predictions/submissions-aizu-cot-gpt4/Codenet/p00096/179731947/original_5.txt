This program is already quite optimized, but we can still make a few small improvements.

1. The first loop initializes dp[j][i] for all i and j. This is necessary, but the condition i == 1 && j <= 1000 is only true for a maximum of 1001 times, which is a very small portion of the total 20005 iterations. We can optimize this by first setting all values of dp[j][i] to 0, and then setting dp[j][1] to 1 for j from 0 to 1000. This reduces the number of conditional checks from 20005 to 1001.

2. The second loop calculates dp[j][i] for all i and j. However, for each (i, j), it iterates k from 0 to min(j, 1000). This is unnecessary because dp[j - k][i - 1] is 0 for k > j. Therefore, we can remove the condition k <= 1000.

3. The input is read in a while loop. If the input stream is large, this could be slow. It might be faster to read the entire input into a vector, process the input, and then output the results.

Here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
int main() {
  unsigned long long dp[4001][5];
  
  // Initialize all values to 0.
  fill(&dp[0][0], &dp[0][0] + sizeof(dp) / sizeof(dp[0][0]), 0);

  // Set dp[j][1] to 1 for j from 0 to 1000.
  fill(&dp[0][1], &dp[0][1] + 1001, 1);

  for (int i = 2; i <= 4; i++)
    for (int j = 0; j <= 4000; j++)
      for (int k = 0; k <= j; k++)
        dp[j][i] += dp[j - k][i - 1];

  vector<int> inputs;
  int n;
  while (cin >> n)
    inputs.push_back(n);
  
  for (int n : inputs)
    cout << dp[n][4] << endl;
  
  return 0;
}
```

This version of the code should run faster and use less memory than the original. The improvements come from reducing the number of conditional checks and array accesses, and potentially speeding up input and output.