Here are the steps for optimizing the given C/C++ program:

1. Avoid repeated calculation of same values: In the loop where you are calculating the distance and finding the maximum distance, there are repeated calculations of the same distance. We can avoid this by storing the distance in a variable.

2. Efficient use of vector: You are using two vectors `P` and `V` to store the points and the corresponding values respectively. Instead, you can use a single vector of pairs to store both the point and its value. This will reduce the memory usage.

3. Use `std::ios_base::sync_with_stdio(false);` to speed up I/O operations: This disables the synchronization between the C and C++ standard streams. For interactive use, you want to turn on synchronization, so that you can mix C++ and C I/O. But for competitive programming or other scenarios where you don't need to mix, it's beneficial to turn this off.

4. Use '\n' instead of `endl` for faster output: `endl` not only inserts a newline, but it also flushes the stream buffer, which takes extra time. If you don't need to flush the buffer, just output a newline with '\n'.

Here is the optimized C/C++ program:

```cpp
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <iostream>
#include <vector>
using namespace std;
double EPS = 1e-6;
struct point {
  double x, y, v;
  point() {}
  point(double x, double y, double v) : x(x), y(y), v(v) {}
  point operator+(point p) { return point(x + p.x, y + p.y, v); }
  point operator-(point p) { return point(x - p.x, y - p.y, v); }
  point operator*(double d) { return point(x * d, y * d, v); }
  point operator/(double d) { return point(x / d, y / d, v); }
};
double dist(point a, point b) {
  return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));
}
int main(void) {
  std::ios_base::sync_with_stdio(false);
  int n;
  double x, y, v;
  vector<point> P;
  while (cin >> n, n) {
    P.clear();
    for (int i = 0; i < n; i++) {
      cin >> x >> y >> v;
      P.push_back(point(x, y, v));
    }
    double r = 0.98;
    point now(0, 0, 0);
    for (double d = 10; d > EPS; d *= r) {
      int mx = 0;
      double mxd = 0, curr_d;
      for (int j = 0; j < P.size(); j++){
        curr_d = dist(now, P[j]) / P[j].v;
        if (curr_d > mxd)
          mx = j, mxd = curr_d;
      }
      now = now + ((P[mx] - now) / dist(P[mx], now) * d);
    }
    double ans = 0;
    for (int i = 0; i < P.size(); i++) {
      ans = max(ans, dist(now, P[i]) / P[i].v);
    }
    cout << fixed << setprecision(8) << ans << "\n";
  }
  return 0;
}
```
