The given program can be optimized in the following ways:

1. Avoid repeated calculation in the loop: In the loop where you are finding maximum distance `mxd`, `dist(now, P[j])` is calculated twice if the if-condition is true. This can be avoided by storing the result in a variable and using it.

2. Use the `reserve` method: When you know the number of elements that will be inserted into a vector, you can use the `reserve` method to avoid unnecessary memory reallocations.

3. Avoid size() in loop condition: `P.size()` is calculated in each iteration of the loop which is not required. The size of the vector doesn't change during the loop execution, so it's better to calculate the size before the loop and use it in the condition. This can reduce the execution time if the vector is large.

4. Use the `const` keyword: `EPS` is never modified in the program, so it can be declared as `const`.

Here is the optimized program:

```cpp
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <iostream>
#include <vector>
using namespace std;
const double EPS = 1e-6;
double add(double a, double b) {
  if (abs(a + b) < EPS * (abs(a) + abs(b)))
    return 0;
  return a + b;
}
struct point {
  double x, y;
  point() {}
  point(double x, double y) : x(x), y(y) {}
  point operator+(point p) { return point(add(x, p.x), add(y, p.y)); }
  point operator-(point p) { return point(add(x, -p.x), add(y, -p.y)); }
  point operator*(double d) { return point(x * d, y * d); }
  point operator/(double d) { return point(x / d, y / d); }
};
double dist(point a, point b) {
  return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));
}
int main(void) {
  int n, x, y, v;
  vector<point> P;
  vector<double> V;
  while (cin >> n, n) {
    P.clear();
    V.clear();
    P.reserve(n);
    V.reserve(n);
    for (int i = 0; i < n; i++) {
      cin >> x >> y >> v;
      P.push_back(point(x, y));
      V.push_back(v);
    }
    double r = 0.98;
    point now(0, 0);
    for (double d = 10; d > EPS; d *= r) {
      int mx = 0;
      double mxd = 0;
      double tmp;
      int size = P.size();
      for (int j = 0; j < size; j++) {
        tmp = dist(now, P[j]) / V[j];
        if (tmp > mxd)
          mx = j, mxd = tmp;
      }
      now = now + ((P[mx] - now) / dist(P[mx], now) * d);
    }
    double ans = 0;
    int size = P.size();
    for (int i = 0; i < size; i++) {
      ans = max(ans, dist(now, P[i]) / V[i]);
    }
    printf("%.8f\n", ans);
  }
  return 0;
}
```