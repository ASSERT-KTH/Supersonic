The program provided calculates the maximum time taken to travel from a starting point to any other point, given the speed of travel. The program can be optimized to reduce the number of duplicate calculations performed and improve memory usage.

Step-by-step optimizations:

1. The `dist` function is called twice in each iteration of the second loop in the `main` function. This results in duplicate calculations, which can be avoided by storing the result of the first call in a variable and reusing it in the second call.

2. The `EPS` constant is currently a global variable. It can be changed to a constant to prevent inadvertent modifications. Also, it should be inside the main function to save memory.

3. The `vector::size()` function is called in each iteration of any loop that iterates over the elements of the vector. The size of the vector doesn't change within the loop, so calling the function multiple times is unnecessary. The size can be stored in a variable before the loop and the variable can be used in the loop condition.

4. The `point::operator-` calls the `add` function, which performs an unnecessary check. Since subtraction cannot result in a number close to zero due to rounding errors, the subtraction can be performed directly without calling the `add` function.

Here is the optimized code:

```C++
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <iostream>
#include <vector>
using namespace std;

struct point {
    double x, y;
    point() {}
    point(double x, double y) : x(x), y(y) {}
    point operator+(point p) { return point(x + p.x, y + p.y); }
    point operator-(point p) { return point(x - p.x, y - p.y); }
    point operator*(double d) { return point(x * d, y * d); }
    point operator/(double d) { return point(x / d, y / d); }
};

double dist(point a, point b) {
  return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));
}

int main(void) {
    const double EPS = 1e-6;
    int n, x, y, v;
    vector<point> P;
    vector<double> V;
    while (cin >> n, n) {
    P.clear();
    V.clear();
    for (int i = 0; i < n; i++) {
      cin >> x >> y >> v;
      P.push_back(point(x, y));
      V.push_back(v);
    }
    double r = 0.98;
    point now(0, 0);
    for (double d = 10; d > EPS; d *= r) {
      int mx = 0;
      double mxd = 0;
      int size = P.size();
      for (int j = 0; j < size; j++) {
        double current_dist = dist(now, P[j]) / V[j];
        if (current_dist > mxd)
          mx = j, mxd = current_dist;
      }
      now = now + ((P[mx] - now) / dist(P[mx], now) * d);
    }
    double ans = 0;
    int size = P.size();
    for (int i = 0; i < size; i++) {
      ans = max(ans, dist(now, P[i]) / V[i]);
    }
    printf("%.8f\n", ans);
  }
  return 0;
}
```