Here are some optimization steps:

1. The "add" function is used in operators "+" and "-" of the "point" struct, however, it doesn't seem to add any value, as the check for close to zero sum is not important in most cases. Also, this function has a lot of unnecessary calculations that can be avoided. We can get rid of this function and use the usual addition and subtraction.

2. The "dist" function is called two times in a loop resulting in unnecessary repetitions of the same calculations. We can call this function once, store its result in a variable, and then use this variable.

3. The "EPS" variable is only used in the "add" function and the loop for "d", but we can directly use the value there and remove this global variable.

4. The "point" default constructor is unused, we can remove it.

5. For better performance, we can use "std::ios_base::sync_with_stdio(false)" and "cin.tie(NULL)" in the main function. They disable the synchronisation between the C and C++ standard streams.

Here's the optimized code:

```cpp
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <iostream>
#include <vector>
using namespace std;

struct point {
  double x, y;
  point(double x, double y) : x(x), y(y) {}
  point operator+(point p) { return point(x + p.x, y + p.y); }
  point operator-(point p) { return point(x - p.x, y - p.y); }
  point operator*(double d) { return point(x * d, y * d); }
  point operator/(double d) { return point(x / d, y / d); }
};

double dist(point a, point b) {
  return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));
}

int main(void) {
  std::ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, x, y, v;
  vector<point> P;
  vector<double> V;
  while (cin >> n, n) {
    P.clear();
    V.clear();
    for (int i = 0; i < n; i++) {
      cin >> x >> y >> v;
      P.push_back(point(x, y));
      V.push_back(v);
    }
    double r = 0.98;
    point now(0, 0);
    for (double d = 10; d > 1e-6; d *= r) {
      int mx = 0;
      double mxd = 0;
      for (int j = 0; j < P.size(); j++) {
        double current_dist = dist(now, P[j]) / V[j];
        if (current_dist > mxd)
          mx = j, mxd = current_dist;
      }
      now = now + ((P[mx] - now) / dist(P[mx], now) * d);
    }
    double ans = 0;
    for (int i = 0; i < P.size(); i++) {
      ans = max(ans, dist(now, P[i]) / V[i]);
    }
    printf("%.8f\n", ans);
  }
  return 0;
}
```