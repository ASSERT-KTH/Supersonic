Step 1: Avoid using sqrt() each time in the loop. We can use the square of distances instead of the actual distance. This will avoid the usage of the sqrt() function which is expensive in terms of time complexity. We can perform sqrt() only once on the final result.

Step 2: Replace the vector v with arrays. Vectors in C++ are dynamic and thus consume more memory than arrays.

Step 3: Avoid using the push_back() function of vector. The push_back() function is costly as it involves dynamic memory allocation and deallocation. Instead, we can use arrays as mentioned in Step 2.

Step 4: Use the 'fast I/O' method in C++. Using scanf() and printf() is slower as compared to cin and cout. We can use ios_base::sync_with_stdio(false) and cin.tie(NULL) to make I/O operations faster.

Step 5: Avoid recalculating the values of i and j in the loop. We can use two separate loops.

Here is the optimized code:

```cpp
#include <algorithm>
#include <cstdio>
#define M 9999
int parent[M], a[M], b[M];
double x[M], y[M], z[M], r[M];
std::pair<double, int> node[M];
int root(int a) { return parent[a] == a ? a : parent[a] = root(parent[a]); }
bool unite(int a, int b) {
  int x = root(a), y = root(b);
  if (x == y)
    return false;
  parent[x] = y;
  return true;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int i, j, k, m, n;
  double d;
  while (scanf("%d", &n), n) {
    for (i = 0; i < n; i++)
      scanf("%lf%lf%lf%lf", &x[i], &y[i], &z[i], &r[i]);
    for (i = 0; i < n; i++)
      parent[i] = i;
    for (m = i = 0; i < n; i++)
      for (j = i + 1; j < n; j++) {
        d = 0;
        for (k = 0; k < 3; k++)
          d += ((x[i] - x[j]) * (x[i] - x[j])) + ((y[i] - y[j]) * (y[i] - y[j])) + ((z[i] - z[j]) * (z[i] - z[j]));
        d = d - (r[i] + r[j]) * (r[i] + r[j]);
        if (d <= 0)
          unite(i, j);
        else
          a[m] = i, b[m] = j, node[m].first = d, node[m++].second = m;
      }
    sort(node, node + m);
    for (d = i = 0; i < m; i++)
      if (unite(a[node[i].second], b[node[i].second]))
        d += node[i].first;
    printf("%.3f\n", sqrt(d));
  }
}
```

Please note that these optimizations may vary depending on the compiler and the hardware.