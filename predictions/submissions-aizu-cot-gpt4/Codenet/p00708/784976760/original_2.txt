Here are some steps we can take to optimize the code for both running time and memory usage:

1. **Avoid unnecessary calculations**: There are unnecessary calculations in the nested for loop. The Euclidean distance calculation (x += (v[i][k] - v[j][k]) * (v[i][k] - v[j][k])) is performed for every point even when the points are within each other's radius. We can avoid these calculations by checking whether the points are within each other's radius first before calculating the distance.

2. **Avoid unnecessary memory allocation**: The program is currently storing all the node distances in the 'node' array and then sorting it. We can avoid this by keeping track of the maximum distance and its corresponding nodes on the fly, which eliminates the need for the 'node' array and the sort operation.

3. **Use faster I/O methods**: We can use faster input/output methods to further optimize the code. We can use 'ios_base::sync_with_stdio(false); cin.tie(NULL);' for faster I/O.

Here is the optimized code:

```cpp
#include <cmath>
#include <cstdio>
#include <vector>
using namespace std;
#define M 9999
int parent[M];
int root(int a) { return parent[a] == a ? a : parent[a] = root(parent[a]); }
int unite(int a, int b) {
  int x = root(a), y = root(b);
  if (x == y)
    return 0;
  parent[x] = y;
  return 1;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int i, j, n;
  double x, y, z, r;
  for (; scanf("%d", &n), n;) {
    vector<vector<double>> v;
    for (i = 0; i < n; i++)
      scanf("%lf%lf%lf%lf", &x, &y, &z, &r), v.push_back({x, y, z, r});
    for (i = 0; i < n; i++)
      parent[i] = i;
    double maxX = -1;
    int maxI, maxJ;
    for (i = 0; i < n; i++)
      for (j = i + 1; j < n; j++) {
        double radiusSum = v[i][3] + v[j][3];
        double distSq = 0;
        for (int k = 0; k < 3; k++)
          distSq += (v[i][k] - v[j][k]) * (v[i][k] - v[j][k]);
        if (distSq <= radiusSum * radiusSum)
          unite(i, j);
        else {
          double dist = sqrt(distSq) - radiusSum;
          if (dist > maxX) {
            maxX = dist;
            maxI = i;
            maxJ = j;
          }
        }
      }
    if (maxX > 0 && unite(maxI, maxJ))
        x += maxX;
    printf("%.3f\n", x);
  }
}
```

Please note that the optimization strategies may vary depending on the specific requirements and constraints of the program and the system it runs on.
