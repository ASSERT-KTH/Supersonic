Optimization Steps:

1) Using 'scanf' and 'printf' in C++ isn't ideal, these functions are slower than their C++ counterparts 'cin' and 'cout'. However, in this case, if performance is crucial, 'scanf' and 'printf' could be faster than 'cin' and 'cout' due to their lower levels of abstractions.

2) When iterating over elements in the vector G[nv], we use an index to access the elements. Instead of using indexes, we can use iterators which are more efficient.

3) When we access G[nv][i].to and G[nv][i].cost multiple times, it's better to store the values in variables to avoid multiple accesses.

4) Remove the line 'using namespace std;'. Namespaces are designed to avoid naming conflicts. The 'std' namespace has a lot of common names, which can easily conflict with your names, so it's better to prefix 'std::' before using them.

5) The 'edge' struct can be optimized to a pair<int, int> to reduce memory usage. This is because structs have padding bytes to align the members in memory, which pairs do not have.

6) Using 'auto' keyword for automatic type deduction can be more efficient.

Optimized Program:

```cpp
#include <algorithm>
#include <cstdio>
#include <queue>
#include <vector>

const int INF = 1000000000;

typedef std::pair<int, int> edge;
std::vector<edge> G[100000];
int v, e, r;
typedef std::pair<int, int> P;
std::priority_queue<P, std::vector<P>, std::greater<P>> q;

int main() {
  scanf("%d %d %d", &v, &e, &r);
  for (int i = 0; i < e; i++) {
    int s, t, d;
    scanf("%d %d %d", &s, &t, &d);
    G[s].push_back(std::make_pair(t, d));
  }
  int d[v];
  std::fill(d, d + v, INF);
  d[r] = 0;
  q.push(P(0, r));
  while (!q.empty()) {
    P p = q.top();
    q.pop();
    int nv = p.second;
    if (p.first > d[nv])
      continue;
    for (auto& e : G[nv]) {
      int nxt = e.first;
      int cost = e.second;
      if (d[nv] + cost < d[nxt]) {
        d[nxt] = d[nv] + cost;
        q.push(P(d[nxt], nxt));
      }
    }
  }
  for (int i = 0; i < v; i++) {
    if (d[i] == INF)
      printf("INF\n");
    else
      printf("%d\n", d[i]);
  }
  return 0;
}
```