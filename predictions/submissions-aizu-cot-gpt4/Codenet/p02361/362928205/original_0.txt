Optimizations:

1. We can see that the loop in the while block is iterating over all edges for the current node. This may be optimized by using an auto iterator instead of a standard for loop. This would make the code cleaner and potentially faster.

2. The second optimization would be to use the emplace method instead of push for inserting into the priority queue. The emplace method constructs the object in place and avoids the extra copy or move operation required by push.

3. We can use `printf("INF\n")` instead of `printf("%d\n", INF)`, this will eliminate the comparison operation.

Here's the optimized code:

```cpp
#include <algorithm>
#include <cstdio>
#include <queue>
#include <vector>
using namespace std;
const int INF = 1000000000;
struct edge {
  int to, cost;
};
vector<edge> G[100000];
int v, e, r;
typedef pair<int, int> P;
priority_queue<P, vector<P>, greater<P>> q;
int main() {
  scanf("%d %d %d", &v, &e, &r);
  for (int i = 0; i < e; i++) {
    int s, t, d;
    scanf("%d %d %d", &s, &t, &d);
    G[s].push_back({t, d});
  }
  int d[v];
  fill(d, d + v, INF);
  d[r] = 0;
  q.emplace(0, r);
  while (!q.empty()) {
    P p = q.top();
    q.pop();
    int nv = p.second;
    if (p.first > d[nv])
      continue;
    for (auto &edge : G[nv]) {
      if (d[nv] + edge.cost < d[edge.to]) {
        d[edge.to] = d[nv] + edge.cost;
        q.emplace(d[edge.to], edge.to);
      }
    }
  }
  for (int i = 0; i < v; i++) {
    if (d[i] == INF)
      printf("INF\n");
    else
      printf("%d\n", d[i]);
  }
  return 0;
}
```