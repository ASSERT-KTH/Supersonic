The program contains a graph represented as an adjacency list and uses a priority queue to implement Dijkstra's algorithm to find the shortest path from a source node to all other nodes.

Optimizations:

1. Use std::ios_base::sync_with_stdio(false) and cin.tie(NULL) to speed up I/O operations.

2. Avoid creating temporary edge objects in the loop. Instead, add objects directly to the vector.

3. Use a range-based for loop to iterate over the graph's adjacency list. It's more readable and can sometimes provide performance benefits.

4. Use const references when removing elements from the priority queue to avoid copying.

5. Use std::endl instead of "\n" to ensure the output buffer is flushed.

Optimized Code:

```
#include <algorithm>
#include <iostream>
#include <queue>
#include <vector>
using namespace std;
const int INF = 1000000000;
struct edge {
  int to, cost;
};
vector<edge> G[100000];
int v, e, r;
typedef pair<int, int> P;
priority_queue<P, vector<P>, greater<P>> q;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> v >> e >> r;
  for (int i = 0; i < e; i++) {
    int s, t, d;
    cin >> s >> t >> d;
    G[s].push_back({t, d});
  }
  vector<int> d(v, INF);
  d[r] = 0;
  q.push(P(0, r));
  while (!q.empty()) {
    const P& p = q.top();
    q.pop();
    int nv = p.second;
    if (p.first > d[nv])
      continue;
    for (const edge& e : G[nv]) {
      if (d[nv] + e.cost < d[e.to]) {
        d[e.to] = d[nv] + e.cost;
        q.push(P(d[e.to], e.to));
      }
    }
  }
  for (int i = 0; i < v; i++) {
    if (d[i] == INF)
      cout << "INF" << endl;
    else
      cout << d[i] << endl;
  }
  return 0;
}
```