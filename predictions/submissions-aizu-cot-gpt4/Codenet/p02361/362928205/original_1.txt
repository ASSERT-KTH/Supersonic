This program is a standard implementation of Dijkstra's algorithm, which is used to find the shortest path in a graph. Here are the steps to optimize this program:

1. Use `std::ios_base::sync_with_stdio(false);` to speed up I/O operations.
2. Use `std::cin.tie(NULL);` to untie `cin` and `cout`. By default, `cin` and `cout` are tied together, meaning `cin` will flush `cout` before a read operation. This operation is unnecessary for our program.
3. Use `reserve` for vector `G` to avoid dynamic memory reallocation.
4. Instead of creating a temporary variable `tmp` for the edge, we can directly push the edge into the vector.
5. Avoid accessing the same value in an array or vector multiple times by storing it in a local variable.
6. Use `emplace` instead of `push` to construct the pair in place, avoiding the need to construct a temporary pair.
7. Use range-based for loop instead of traditional for loop for better readability.

Here's the optimized version of the program:

```cpp
#include <algorithm>
#include <cstdio>
#include <queue>
#include <vector>
using namespace std;

const int INF = 1000000000;

struct edge {
  int to, cost;
};

vector<edge> G[100000];

int v, e, r;

typedef pair<int, int> P;
priority_queue<P, vector<P>, greater<P>> q;

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  scanf("%d %d %d", &v, &e, &r);
  for (auto &vec : G) {
    vec.reserve(e);
  }

  for (int i = 0; i < e; i++) {
    int s, t, d;
    scanf("%d %d %d", &s, &t, &d);
    G[s].push_back({t, d});
  }

  vector<int> d(v, INF);
  d[r] = 0;
  q.emplace(0, r);
  
  while (!q.empty()) {
    P p = q.top(); q.pop();
    int nv = p.second;
    if (p.first > d[nv])
      continue;
    for (auto &e : G[nv]) {
      int next = e.to;
      int cost = d[nv] + e.cost;
      if (cost < d[next]) {
        d[next] = cost;
        q.emplace(cost, next);
      }
    }
  }
  
  for (int dist : d) {
    if (dist == INF)
      printf("INF\n");
    else
      printf("%d\n", dist);
  }

  return 0;
}
```