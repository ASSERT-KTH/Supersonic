The given code is a C++ implementation of Dijkstra's algorithm. It is already quite optimized, but there are a few things we can do to make it more efficient.

1. **Avoid Unnecessary Copies**: In the existing code, we are creating a copy of the top element of the priority queue when processing it. Instead, we can directly access the top element from the queue and avoid creating a copy.

2. **Use const reference to access vector elements**: When iterating over a vector, if the elements are not being modified, it is more efficient to use a const reference rather than copying each element.

3. **Reserve Space for Vector**: For vectors, the `push_back` operation can cause reallocation and copying of all elements, which is expensive. If we know the maximum number of elements that can be added to a vector beforehand, we can use `reserve` to allocate memory beforehand. In this case, we know that at most `e` edges will be added, so we can reserve that amount of space.

4. **Use C++ IO instead of C IO for Better Performance**: C++ IO (`cin` and `cout`) can be faster than C IO (`scanf` and `printf`) when used with `std::ios::sync_with_stdio(false);` and `cin.tie(nullptr);`.

Here's the optimized version of the code:

```cpp
#include <algorithm>
#include <iostream>
#include <queue>
#include <vector>
using namespace std;
const int INF = 1000000000;
struct edge {
  int to, cost;
};
vector<edge> G[100000];
int v, e, r;
typedef pair<int, int> P;
priority_queue<P, vector<P>, greater<P>> q;
int main() {
  std::ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cin >> v >> e >> r;
  for (int i = 0; i < e; i++) {
    int s, t, d;
    cin >> s >> t >> d;
    G[s].reserve(e);
    G[s].push_back({t, d});
  }
  vector<int> d(v, INF);
  d[r] = 0;
  q.push(P(0, r));
  while (!q.empty()) {
    P const& p = q.top();
    int nv = p.second;
    if (p.first > d[nv]) {
      q.pop();
      continue;
    }
    for (edge const& e : G[nv]) {
      if (d[nv] + e.cost < d[e.to]) {
        d[e.to] = d[nv] + e.cost;
        q.push(P(d[e.to], e.to));
      }
    }
    q.pop();
  }
  for (int i = 0; i < v; i++) {
    if (d[i] == INF)
      cout << "INF\n";
    else
      cout << d[i] << "\n";
  }
  return 0;
}
```