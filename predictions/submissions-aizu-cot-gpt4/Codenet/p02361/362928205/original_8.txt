Here are some steps to optimize the given C/C++ program:

1. Preallocate Memory: When using `std::vector`, it's best to use the `reserve` method to preallocate memory if you know the approximate size ahead of time. This will prevent unnecessary allocations and copies as the vector grows.

2. Avoid Unnecessary Copies: In the original program, we copy the top element of the priority queue and then immediately remove it. We can instead directly access and remove it using `std::priority_queue::pop`.

3. Use References: When iterating over `G[nv]`, it's better to use a reference to avoid unnecessary copying.

4. Const Correctness: Use `const` where possible. This can help the compiler optimize the code and also improve code readability.

5. Use `std::endl` with Caution: `std::endl` not only adds a newline, it also flushes the output stream. This can lead to a performance penalty. In this case, we can replace it with "\n".

Here's the optimized program:

```c++
#include <algorithm>
#include <cstdio>
#include <queue>
#include <vector>
using namespace std;
const int INF = 1000000000;
struct edge {
  int to, cost;
};
vector<edge> G[100000];
int v, e, r;
typedef pair<int, int> P;
priority_queue<P, vector<P>, greater<P>> q;
int main() {
  scanf("%d %d %d", &v, &e, &r);
  for (int i = 0; i < e; i++) {
    int s, t, d;
    scanf("%d %d %d", &s, &t, &d);
    edge tmp;
    tmp.to = t;
    tmp.cost = d;
    G[s].push_back(tmp);
  }
  int d[v];
  fill(d, d + v, INF);
  d[r] = 0;
  q.push(P(0, r));
  while (!q.empty()) {
    P p = move(q.top());
    q.pop();
    int nv = p.second;
    if (p.first > d[nv])
      continue;
    for (const auto &g : G[nv]) {
      if (d[nv] + g.cost < d[g.to]) {
        d[g.to] = d[nv] + g.cost;
        q.push(P(d[g.to], g.to));
      }
    }
  }
  for (int i = 0; i < v; i++) {
    if (d[i] == INF)
      printf("INF\n");
    else
      printf("%d\n", d[i]);
  }
  return 0;
}
```
Please note that these optimizations are minor tweaks and may not drastically improve the performance of your program. For significant performance gains, the algorithmic optimization would be more beneficial.