Step 1: Remove unnecessary use of vector
In the given code, `tax` vector is just used to store `a` and `b` values which are being used immediately. There is no need to store these values in vector, which will reduce the memory usage.

Step 2: Avoid repeated computations
We see that the same computation `(int)((a * (100 + x)) / 100.0)` is repeated multiple times. We can compute it once and store it in a variable.

Step 3: Replace division by multiplication
Divisions are more costly than multiplications in terms of processor time. We can replace division by multiplication where possible. For example, we can replace `(100 + x) / 100.0` with `1.0 + x / 100.0`.

Step 4: Use prefix increment
In C++, prefix increment (++i) is more efficient than postfix (i++).

Here's the optimized code after applying these steps:

```cpp
#include <iostream>
using namespace std;
int main() {
  int x, y, s;
  while (cin >> x >> y >> s && (x || y || s)) {
    int maxi = 0, a = 1, b;
    while (a < s) {
      int a_tax = a * (1.0 + x / 100.0);
      b = (s - a_tax + 1) / (1.0 + x / 100.0);
      if (a_tax +  b * (1.0 + x / 100.0) == s && b != 0) {
        maxi = max(maxi, (int)(a * (1.0 + y / 100.0)) +
                             (int)(b * (1.0 + y / 100.0)));
      }
      ++a;
    }
    cout << maxi << endl;
  }
  return 0;
}
```

Please note that the C++ standard does not specify whether division or multiplication is faster. On modern processors, they are typically of similar speed. However, in general, it is always a good idea to replace divisions with multiplications where possible for optimization purposes.