The given C++ code can be optimized in the following ways:
1. Remove the use of the 'tax' vector since it's not really necessary. The vector 'tax' is used to store 'a' and 'b' values that fulfill a specific condition. However, those values are only used to calculate 'maxi', which is then outputted. Therefore, we can remove the 'tax' vector and calculate 'maxi' directly.
2. As 'maxi' is always calculated with given 'a' and 'b', there's no need to calculate it after each loop. It can be calculated inside the condition where 'a' and 'b' fulfill the condition, and the maximum value can be stored directly.
3. Instead of casting to an integer multiple times during the calculations, we can do the casting once and store the results in variables for later use.
4. Remove unnecessary initialization of 'i' since we are not using 'tax' vector anymore.

Here's the optimized code:

```cpp
#include <algorithm>
#include <iostream>
using namespace std;

int main() {
  int x, y, s;
  while (cin >> x >> y >> s && (x || y || s)) {
    int maxi = 0, a = 1, b;
    while (a < s) {
      double ax = (a * (100 + x)) / 100.0;
      double bx = (s - (int)ax + 1) / ((100 + x) / 100.0);
      if (((int)ax + (int)bx) == s && b != 0) {
        maxi = max(maxi, (int)((a * (100 + y)) / 100.0) + (int)((b * (100 + y)) / 100.0));
      }
      a++;
    }
    cout << maxi << endl;
  }
  return 0;
}
```
This optimized code reduces memory usage by removing the unnecessary 'tax' vector and reduces computation time by reducing the number of operations and casts.