The code can be optimized in several ways:

1. First, there is no need to use a 2D vector to store the temporary `a` and `b` values. You are only using them for the calculation of the `maxi` variable. Instead of storing them in the 2D vector, you can directly calculate the updated `maxi` value. This will save a lot of memory.

2. Secondly, the constant `100.0` is repeatedly used in the code. It is more efficient to declare it as a constant at the beginning of the code. This would also increase the readability of the code.

3. Thirdly, you don't need to cast the calculations to `int` before adding them up. You can add them up and then cast the result to `int`. This reduces unnecessary casting operations.

4. Lastly, the `b != 0` check is unnecessary because if `b` becomes zero, the equation for `s` will not hold true. So you can remove it.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;

int main() {
  int x, y, s;
  const double factor = 100.0;
  while (cin >> x >> y >> s && (x || y || s)) {
    int maxi = 0, a = 1, b;
    while (a < s) {
      b = (s - (int)((a * (factor + x)) / factor) + 1) / ((factor + x) / factor);
      if ((int)((a * (factor + x)) / factor) + (int)((b * (factor + x)) / factor) == s) {
        maxi = max(maxi, (int)((a * (factor + y)) / factor + (b * (factor + y)) / factor));
      }
      a++;
    }
    cout << maxi << endl;
  }
  return 0;
}
```

This optimized code performs the same operations as the original code, but it is more efficient in terms of memory usage as it does not use a 2D vector. It also reduces unnecessary type casting and checks. Plus, it improves code readability by declaring the repeatedly used constant at the beginning.