The given C/C++ program seems to be already quite optimized, but there are still small ways we can improve it. Here are the steps:

1. The vector 'tax' is initialized with a size of 1000, but it's not clear that all 1000 slots are always used. If they're not, this is wasting memory. If the maximum size of the array is known and is less than 1000, it should be initialized to that size. If not, it might be best to start with a smaller size and use `push_back` to add elements as needed, allowing the vector to grow dynamically.

2. The calculation of `(int)((a * (100 + x)) / 100.0)` is repeated twice, and `(int)((b * (100 + x)) / 100.0)` too. The same goes for `(int)((tax[i][0] * (100 + y)) / 100.0)` and `(int)((tax[i][1] * (100 + y)) / 100.0)`. These could be calculated once and stored in a variable, which would save some computation time.

3. The variable 'i' is used to index 'tax', but it does not appear to be used elsewhere. If 'tax' is changed to grow dynamically as suggested in point 1, 'i' becomes unnecessary and can be removed.

Considering these steps, here is the optimized version of the code:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
int main() {
  int x, y, s;
  while (cin >> x >> y >> s && (x || y || s)) {
    vector<vector<int>> tax;
    int maxi = 0, a = 1, b;
    while (a < s) {
      int a_tax = (int)((a * (100 + x)) / 100.0);
      b = (s - a_tax + 1) / ((100 + x) / 100.0);
      int b_tax = (int)((b * (100 + x)) / 100.0);
      if ((a_tax + b_tax) == s && b != 0) {
        vector<int> temp = {a, b};
        tax.push_back(temp);
        int a_tax_y = (int)((a * (100 + y)) / 100.0);
        int b_tax_y = (int)((b * (100 + y)) / 100.0);
        maxi = max(maxi, a_tax_y + b_tax_y);
      }
      a++;
    }
    cout << maxi << endl;
  }
  return 0;
}
```
This optimized version of the code takes less memory as it dynamically allocates memory for 'tax' vector as needed, and it also reduces redundant calculations which in turn saves processing time.