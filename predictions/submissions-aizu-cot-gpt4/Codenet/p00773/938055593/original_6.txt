Optimization Steps:

1. Move the vector `tax` outside the while loop. It is being re-initialized in each iteration which is not necessary and wastes memory. If we move it outside, it will be initialized only once and we can clear it at the end of each iteration to make it ready for the next iteration.

2. The vector `tax` is not actually necessary. It seems to be used to store intermediate results, but these results are only used once immediately after they are calculated. Instead of storing them in a vector, we can just keep them in local variables.

3. There are a lot of repeated calculations that can be stored in variables to avoid recalculating them each time. This includes the calculations `(int)((a * (100 + x)) / 100.0)` and `(int)((b * (100 + x)) / 100.0)`.

4. Move the calculation `((100 + x) / 100.0)` outside the loop as it does not change within the loop.

5. The condition `b != 0` is always true, because `b` is calculated as a positive integer. So, it can be removed.

6. Use the prefix increment operator `++a` instead of the postfix `a++`. The prefix version is generally more efficient in C++ because it doesn't need to create a temporary copy of the object, although the difference is negligible for basic types like `int`. 

Optimized Program:

```cpp
#include <iostream>
using namespace std;

int main() {
  int x, y, s;
  while (cin >> x >> y >> s && (x || y || s)) {
    int maxi = 0, a = 1, b;
    double factor = (100 + x) / 100.0;
    while (a < s) {
      b = (s - (int)(a * factor) + 1) / factor;
      int aVal = (int)(a * factor);
      int bVal = (int)(b * factor);
      if (aVal + bVal == s) {
        int aTax = (int)(a * (100 + y) / 100.0);
        int bTax = (int)(b * (100 + y) / 100.0);
        maxi = max(maxi, aTax + bTax);
      }
      ++a;
    }
    cout << maxi << endl;
  }
  return 0;
}
```

This optimized program reduces memory usage by eliminating the unnecessary `vector` and improves speed by reducing repeated calculations.