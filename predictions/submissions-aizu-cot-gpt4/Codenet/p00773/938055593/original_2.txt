Step by step optimization:

1) The first optimization we can make is eliminating the tax vector. We are not using it for any purpose other than storing a and b, and we are only using those to calculate the maximum value. Instead of storing these in a vector, we can immediately calculate the value and store the maximum.

2) The second optimization is eliminating the floating point operations. We can do this by multiplying before we divide. This will not change the results, but it will avoid costly floating point operations.

3) We can also eliminate the condition `b != 0`. The while condition `a < s` ensures that b is always positive.

4) Lastly, we can replace `cout << maxi << endl;` with `printf("%d\n", maxi);` which is faster.

Here is the optimized program:

```C++
#include <iostream>
#include <algorithm>
using namespace std;

int main() {
    int x, y, s;
    while (cin >> x >> y >> s && (x || y || s)) {
        int maxi = 0;
        for (int a = 1; a < s; a++) {
            int b = (s * 100 - a * (100 + x)) / (100 + x);
            if (a * (100 + x) / 100 + b * (100 + x) / 100 == s) {
                maxi = max(maxi, a * (100 + y) / 100 + b * (100 + y) / 100);
            }
        }
        printf("%d\n", maxi);
    }
    return 0;
}
```
