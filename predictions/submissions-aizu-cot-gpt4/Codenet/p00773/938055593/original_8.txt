Here are the steps to optimize the given code:

1. Avoid the use of floating point operations. In the given code, floating point division and multiplication are used multiple times. These operations are usually slower than integer operations. In our case, we can avoid them by rearranging the formula.

2. Avoid the use of vector of vectors. In the given code, a vector of vectors is used to store the 'a' and 'b' values. However, these values are not used afterwards. We can get rid of the vector and directly calculate the max value using the 'a' and 'b' values.

3. Optimize the input and output operations. The cin and cout operations in C++ are slower. We can use scanf and printf instead for faster input and output.

So, the optimized code would be:

```cpp
#include <cstdio>
#include <algorithm>
using namespace std;
int main() {
  int x, y, s;
  while (scanf("%d %d %d", &x, &y, &s) && (x || y || s)) {
    int maxi = 0, a = 1, b, taxA, taxB;
    while (a < s) {
      b = (s*100 - a*x) / (100 + x);
      if ((a * x + b * x)/100 == s && b != 0) {
        taxA = (a * y) / 100;
        taxB = (b * y) / 100;
        maxi = max(maxi, taxA + taxB);
      }
      a++;
    }
    printf("%d\n", maxi);
  }
  return 0;
}
```

This optimized code will run faster and use less memory compared to the original code.