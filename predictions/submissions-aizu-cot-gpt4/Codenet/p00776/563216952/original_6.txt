The following optimisations can be done:

1. The 'f' array is not used anywhere in the code. This should be removed.
2. The 'string tmp' is used for temporary storage. Instead of creating a new string every time in dfs function, we can pass the string by reference and change it back after the recursive call. This saves memory.
3. The vector 'vs' is used to store all possible strings. Instead of storing all strings, we can keep a counter to count all possible strings. This saves a lot of memory.
4. The 'sort' function is used to sort all strings. If we only need to print the smallest and largest 5 strings, we don't have to sort all strings. We can keep a priority queue to maintain the smallest and largest 5 strings. This saves time.

Here is the optimised code:
```C++
#include <bits/stdc++.h>
#define rep(i, a, n) for (int i = a; i < n; i++)
using namespace std;
string s;
priority_queue<string> minHeap;
priority_queue<string, vector<string>, greater<string>> maxHeap;
void dfs(string &t, int now, int &cnt) {
  if (now == s.size()) {
    cnt++;
    if(minHeap.size() < 5) {
      minHeap.push(t);
    } else if(t < minHeap.top()) {
      minHeap.pop();
      minHeap.push(t);
    }
    if(maxHeap.size() < 5) {
      maxHeap.push(t);
    } else if(t > maxHeap.top()) {
      maxHeap.pop();
      maxHeap.push(t);
    }
    return;
  }
  int d[26] = {};
  rep(i, 0, now) d[t[i] - 'a']++;
  if (t[now] != 'z' && d[t[now] + 1 - 'a'] == 0) {
    t[now] = t[now] + 1;
    dfs(t, now + 1, cnt);
    t[now] = t[now] - 1;
  }
  if (t[now] == 'a' || d[t[now] - 'a'] != 0)
    dfs(t, now + 1, cnt);
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  while (1) {
    cin >> s;
    if (s == "#")
      break;
    int cnt = 0;
    dfs(s, 0, cnt);
    cout << cnt << endl;
    vector<string> minStrings, maxStrings;
    while(!minHeap.empty()) {
      minStrings.push_back(minHeap.top());
      minHeap.pop();
    }
    while(!maxHeap.empty()) {
      maxStrings.push_back(maxHeap.top());
      maxHeap.pop();
    }
    for(int i = minStrings.size() - 1; i >= 0; i--)
      cout << minStrings[i] << "\n";
    for(string str : maxStrings)
      cout << str << "\n";
  }
}
```
In this optimized code, we pass the string by reference which saves memory. We also maintain the smallest and largest 5 strings using two priority queues and a counter to count all possible strings. This reduces the time complexity from O(n log n) to O(n) and saves a lot of memory.