Optimization Steps:

1. In the function `isprime1(int n)`, we are checking divisibility of `n` with all numbers from `2` to `n-1`. But we can optimize this by checking only till square root of `n` because a larger factor of `n` must be a multiple of smaller factor that has already been checked.

2. In the main function, there is no need to check `if (n == 0)` in every iteration. We can simply change the while loop condition to `while(n != 0)`.

3. The `isprime1(i - 2)` function is called repeatedly for the same value in the loop which is not necessary. We can store the previous result and use it in the next iteration.

Let's apply these optimizations to the code:

```c
#include <stdio.h>
#include <math.h>

int isprime1(int n) {
  if(n < 2)
    return 0;
  if(n == 2)
    return 1;
  if(n % 2 == 0)
    return 0;
  for (int i = 3; i <= sqrt(n); i+=2) { 
    if (n % i == 0)
      return 0;
  }
  return 1;
}

int main() {
  int n, p, q, i, prev_prime;
  scanf("%d", &n);
  while (n != 0) {
    prev_prime = isprime1(n);
    for (i = n; i >= 5; i--) {
      if (prev_prime && isprime1(i - 2)) {
        p = i - 2;
        q = i;
        break;
      }
      prev_prime = isprime1(i - 2);
    }
    printf("%d %d\n", p, q);
    scanf("%d", &n);
  }
  return 0;
}
```

This optimized code should run faster and use less memory because of the mentioned optimizations.