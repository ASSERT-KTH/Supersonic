Here are the steps to optimize the above program.

1. The isprime1 function can be optimized by checking divisibility only up to the square root of n. If n is not divisible by any number up to its square root, then n is prime. This reduces the time complexity from O(n) to O(sqrt(n)).

2. The main function is searching for prime numbers starting from n and decrementing. This can be optimized by initially decrementing n until it's an odd number (if it's not already). This is because, except for 2, all prime numbers are odd. Then, in the for loop, i is decremented by 2 instead of 1. As a result, we skip all even numbers which can't be prime.

3. Inside the for loop, we are checking if i and i-2 are prime numbers. If i-2 is prime, then in the next iteration, when i becomes i-2, we are again checking if it's prime. This is repetitive. To avoid this, we can use a variable prev_prime to remember if i-2 was prime in the last iteration.

The optimized code is:

```cpp
#include <stdio.h>
#include <math.h>

int isprime1(int n) {
  if (n <= 1) return 0;
  if (n == 2) return 1;
  if (n % 2 == 0) return 0;
  for (int i = 3; i <= sqrt(n); i += 2) {
    if (n % i == 0)
      return 0;
  }
  return 1;
}

int main() {
  int n, p, q, i, prev_prime = 0;
  scanf("%d", &n);
  while (1) {
    if (n == 0)
      break;
    if (n % 2 == 0) --n;  // make n odd
    for (i = n; i >= 5; i -= 2) {
      if (isprime1(i) && prev_prime) {
        p = i - 2;
        q = i;
        break;
      }
      prev_prime = isprime1(i - 2);
    }
    printf("%d %d\n", p, q);
    scanf("%d", &n);
  }
  return 0;
}
```