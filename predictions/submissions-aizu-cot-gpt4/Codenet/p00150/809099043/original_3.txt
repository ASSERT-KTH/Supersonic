Optimization Steps:
1. The first optimization is to reduce the number of iterations in the `isprime1` function. We only need to check up to the square root of `n`. If `n` is not a prime number, it can be factored into two factors. At least one of those factors must be less than or equal to the square root of `n`. So, this significantly reduces the number of iterations.
2. Second, we can avoid checking even numbers, except for 2 because any even number greater than 2 can't be a prime number.
3. In the `main` function, instead of checking every number whether it's prime or not, we can skip the even numbers as well. This is because an even number can't be a prime number except for 2.

Here is the optimized code:

```cpp
#include <stdio.h>
#include <math.h>

int isprime1(int n) {
  if (n <= 1) return 0;
  if (n == 2) return 1;
  if (n % 2 == 0) return 0;
  int sqrtN = sqrt(n);
  for (int i = 3; i <= sqrtN; i+=2) {
    if (n % i == 0)
      return 0;
  }
  return 1;
}

int main() {
  int n, p, q;
  scanf("%d", &n);
  while (n != 0) {
    for (int i = ((n % 2 == 0) ? n - 1 : n); i >= 5; i -= 2) {
      if (isprime1(i) == 1 && isprime1(i - 2) == 1) {
        p = i - 2;
        q = i;
        break;
      }
    }
    printf("%d %d\n", p, q);
    scanf("%d", &n);
  }
  return 0;
}
```
