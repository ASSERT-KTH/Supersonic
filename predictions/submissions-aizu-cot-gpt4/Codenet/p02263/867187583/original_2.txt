The given program is a simple stack-based calculator that evaluates expressions in postfix notation. 

Here are a few optimizations we can make:

1. Preallocate the vector: The vector `s_` is used as a stack. It is better to preallocate memory for the stack to avoid unnecessary reallocations and memory fragmentation. Since the maximum size of the stack is known (which is `n`), we can use the `reserve` method to preallocate the memory for the stack.

2. Avoid unnecessary if checks in `push` and `pop` methods: We can remove the `isFull` check in the `push` method and `isEmpty` check in the `pop` method, assuming that the caller will never attempt to push into a full stack or pop from an empty stack. This will eliminate unnecessary branch instructions, making the code run faster. However, this optimization makes the code less safe, because if the caller does violate these assumptions, the program may crash or produce incorrect results.

3. Use `switch` statement instead of `if-else` statements: Instead of using multiple `if-else` statements to check the operation, we can use a `switch` statement to make the code cleaner and potentially faster. The `switch` statement can be faster because it uses a jump table under the hood, which can be faster than a series of branch instructions.

Here is the optimized code:

```cpp
#include <algorithm>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <vector>
using namespace std;
class Stack {
public:
  Stack(int n) : s_(n), top_(0){
      s_.reserve(n);
  };
  void push(int x) {
    s_[++top_] = x;
  }
  int pop() {
    return s_[top_--];
  }

private:
  vector<int> s_;
  size_t top_;
};
int main() {
  char s[1000];
  Stack stack(110);
  while (scanf("%s", s) != EOF) {
    switch(s[0]) {
      case '+':
        stack.push(stack.pop() + stack.pop());
        break;
      case '-':
        {int rhs = stack.pop();
        stack.push(stack.pop() - rhs);}
        break;
      case '*':
        stack.push(stack.pop() * stack.pop());
        break;
      default:
        stack.push(atoi(s));
    }
  }
  printf("%d\n", stack.pop());
  return 0;
}
```

Please note: This code assumes that the input will always be valid and won't cause stack underflow or overflow. If this cannot be guaranteed, the if checks for `isEmpty` and `isFull` should be left in the code to prevent potential crashes or undefined behavior.