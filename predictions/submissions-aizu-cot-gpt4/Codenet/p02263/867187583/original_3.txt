The given program is a simple stack-based calculator. The program reads an input string and performs addition, subtraction, or multiplication based on the sign read. If the read string is not a sign, the program assumes it's a number and pushes it onto the stack. At the end, the program prints out the result by popping the stack.

Here are some potential optimizations:

1. The `push` function in the `Stack` class increments `top_` before it assigns `x` to `s_[top_]`. This means that the assignment is always one position off from the current top of the stack. We could instead assign `x` to `s_[top_]` before incrementing `top_`, which would eliminate the need to subtract 1 when popping an item from the stack.

2. The `push` function checks if the stack is full, but the constructor doesn't actually reserve any space for the vector `s_`. We could reserve space in the constructor to avoid potential reallocations of the vector as elements are added.

3. The `pop` function returns -1 when the stack is empty. This could potentially cause problems if -1 is a valid result of the calculations. Instead, we could throw an exception when trying to pop an empty stack.

4. The `pop` function is called twice for each operation, which could lead to unnecessary overhead. Instead, we could pop the elements into temporary variables once and use them in each operation.

5. The `scanf` function is used to read the input, which is slower than using `cin` in C++. We could replace `scanf` with `cin` for better performance.

6. The main function contains a large `if...else` block to determine the operation to perform. We could replace this with a `switch` statement for better performance.

Here is the optimized program with the above improvements:

```cpp
#include <iostream>
#include <vector>
#include <stdexcept>
using namespace std;

class Stack {
public:
  Stack(int n) : s_(n), top_(0) { s_.reserve(n); };

  bool isEmpty() { return top_ == 0; }

  void push(int x) {
    if (top_ == s_.size()) {
      throw overflow_error("Stack is full");
    }
    s_[top_++] = x;
  }

  int pop() {
    if (isEmpty()) {
      throw underflow_error("Stack is empty");
    }
    return s_[--top_];
  }

private:
  vector<int> s_;
  size_t top_;
};

int main() {
  string s;
  Stack stack(110);
  while (cin >> s) {
    int rhs, lhs, t;
    switch (s[0]) {
    case '+':
      rhs = stack.pop();
      lhs = stack.pop();
      t = lhs + rhs;
      break;
    case '-':
      rhs = stack.pop();
      lhs = stack.pop();
      t = lhs - rhs;
      break;
    case '*':
      rhs = stack.pop();
      lhs = stack.pop();
      t = lhs * rhs;
      break;
    default:
      t = stoi(s);
      break;
    }
    stack.push(t);
  }
  try {
    cout << stack.pop() << endl;
  } catch (const underflow_error& e) {
    cerr << "Error: " << e.what() << endl;
    return 1;
  }
  return 0;
}
```