Here are my steps to optimize the given C/C++ program:

1. Pre-increment and Pre-decrement Operators: In C/C++, pre-increment and pre-decrement operators are faster than post-increment and post-decrement operators for objects (like iterator, pointer). So, it's a good practice to use pre-increment and pre-decrement operators where possible. We'll modify the push and pop methods of the Stack class to use pre-increment and pre-decrement, respectively.

2. Size Optimization: The size of input string s[1000] is very large. If we are sure that the input will not exceed a certain limit, we can reduce the size of this array, which will save memory.

3. Avoid Multiple Calls to Same Function: The code contains multiple calls to the pop function in the main while loop. Each call to pop function checks if the stack is empty, which is unnecessary and can be avoided. We'll store the popped value in a variable.

4. Reduce the Scope of Variables: Reducing the scope of variables can help free up memory earlier. We'll move the rhs, lhs, and t variables inside each condition.

Here is the optimized C/C++ code:
```cpp
#include <algorithm>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <vector>
using namespace std;
class Stack {
public:
  Stack(int n) : s_(n), top_(0){};
  bool isEmpty() { return top_ == 0; }
  bool isFull() { return top_ == s_.size(); }
  void push(int x) {
    if (!isFull()) {
      s_[++top_] = x;
    }
  }
  int pop() {
    return isEmpty() ? -1 : s_[--top_];
  }

private:
  vector<int> s_;
  size_t top_;
};
int main() {
  char s[10];
  Stack stack(110);
  while (scanf("%s", s) != EOF) {
    int val = stack.pop();
    if (s[0] == '+') {
      int t = val + stack.pop();
      stack.push(t);
    } else if (s[0] == '-') {
      int t = val - stack.pop();
      stack.push(t);
    } else if (s[0] == '*') {
      int t = val * stack.pop();
      stack.push(t);
    } else {
      stack.push(atoi(s));
    }
  }
  printf("%d\n", stack.pop());
  return 0;
}
```
Please note that the size of the char array `s` has been reduced from `1000` to `10`. Be sure that the input will never exceed this limit. If you're unsure, you can adjust this size to a larger but reasonable value.