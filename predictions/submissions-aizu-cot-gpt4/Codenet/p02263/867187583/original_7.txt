To optimize this C++ program, we can follow these steps:

1. Avoid repeated function calls: The methods `push()` and `pop()` are called multiple times inside each conditional branch. By reducing the number of function calls, we can save execution time. 

2. Use stack `push_back` and `pop_back` methods directly: The class `Stack` is essentially a wrapper around a `std::vector` and the `push()` and `pop()` methods can be replaced by the `push_back()` and `pop_back()` methods of `std::vector` respectively. This can reduce the memory overhead and also the unnecessary complexity of maintaining the `top_` variable.

3. Use switch case instead of if else ladder: Here, we are using if-else ladder to perform operations based on the input. Instead we can use a switch case statement which is faster as it uses a jump table in the backend.

4. Use `stoi` instead of `atoi`: `atoi` does not do error checking, while `stoi` does. Hence, it is better to use `stoi`.

The optimized program is as follows:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

class Stack {
public:
  Stack(int n) : s_(n) {}
  bool isEmpty() { return s_.empty(); }
  void push(int x) { s_.push_back(x); }
  int pop() {
    if (isEmpty()) {
      return -1;
    }
    int val = s_.back();
    s_.pop_back();
    return val;
  }

private:
  vector<int> s_;
};

int main() {
  string s;
  Stack stack(110);
  while (cin >> s) {
    int rhs, lhs, t;
    switch (s[0]) {
      case '+':
        rhs = stack.pop();
        lhs = stack.pop();
        t = lhs + rhs;
        stack.push(t);
        break;
      case '-':
        rhs = stack.pop();
        lhs = stack.pop();
        t = lhs - rhs;
        stack.push(t);
        break;
      case '*':
        rhs = stack.pop();
        lhs = stack.pop();
        t = lhs * rhs;
        stack.push(t);
        break;
      default:
        stack.push(stoi(s));
        break;
    }
  }
  cout << stack.pop() << endl;
  return 0;
}
```
This optimized program avoids unnecessary function calls, uses efficient methods of the STL vector class, and replaces the if-else ladder with a switch case for faster execution.