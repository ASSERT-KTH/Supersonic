Here are some areas we can optimize in this program:

1. In the `push()` function, we increment `top_` before assigning the value `x` to `s_[top_]`. If the `push()` function is called when the stack is full, this will cause `s_[top_]` to go beyond the stack size, resulting in undefined behavior. To fix this, we should increment `top_` only after assigning the value `x`.

2. The `pop()` function returns `-1` when the stack is empty. This can cause problems if `-1` is a valid value in the stack. Instead, we should throw an exception when trying to pop from an empty stack.

3. The `isEmpty()` and `isFull()` functions are not being used outside the class, so they can be made private.

4. The `s_` vector is initialized with a size `n` but its capacity is not used efficiently. We can use `reserve()` function to allocate memory in advance.

5. In the `main()` function, we use `scanf()` and `printf()` for input/output. These are slower than `cin` and `cout` in C++. We should use `cin` and `cout` for faster input/output.

Here is the optimized version of the program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

class Stack {
public:
  Stack(int n) : top_(0) { s_.reserve(n); };
  void push(int x) {
    if (isFull()) {
      return;
    }
    s_[top_] = x;
    top_++;
  }
  int pop() {
    if (isEmpty()) {
      throw out_of_range("Stack Underflow");
    }
    top_--;
    return s_[top_];
  }

private:
  vector<int> s_;
  size_t top_;
  bool isEmpty() { return top_ == 0; }
  bool isFull() { return top_ == s_.capacity(); }
};

int main() {
  string s;
  Stack stack(110);
  while (cin >> s) {
    if (s[0] == '+') {
      int rhs = stack.pop();
      int lhs = stack.pop();
      stack.push(lhs + rhs);
    } else if (s[0] == '-') {
      int rhs = stack.pop();
      int lhs = stack.pop();
      stack.push(lhs - rhs);
    } else if (s[0] == '*') {
      int rhs = stack.pop();
      int lhs = stack.pop();
      stack.push(lhs * rhs);
    } else {
      stack.push(stoi(s));
    }
  }
  cout << stack.pop() << endl;
  return 0;
}
```

This optimized version should run faster and use memory more efficiently.