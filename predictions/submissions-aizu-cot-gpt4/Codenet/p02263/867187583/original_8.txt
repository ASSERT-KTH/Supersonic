This program appears to be implementing a basic stack-based calculator. It reads in text from stdin, and if the text is '+', '-', or '*', it pops two elements from the stack, performs the operation, and pushes the result back onto the stack. If the text is not an operator, it is assumed to be an integer, which is parsed and pushed onto the stack. When it has finished reading input, it pops and prints the top element from the stack.

Optimization Steps:

1. Reserve Memory: Reserving memory for the vector in the stack can avoid reallocations which can be costly in terms of time. 

2. Avoid repeated function calls: In the push and pop methods of the Stack class, the methods isEmpty() and isFull() are called each time. This can be avoided by directly checking the condition inside the methods. 

3. Reuse variables: In the main function, the variables rhs, lhs and t are re-declared for each operation, instead we can declare them once and re-use them.

Here is the optimized version of the program:

```
#include <algorithm>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <vector>
using namespace std;
class Stack {
public:
  Stack(int n) : s_(n), top_(0){ s_.reserve(n); };
  
  void push(int x) {
    if (top_ == s_.size()) {
      return;
    }
    s_[++top_] = x;
  }
  int pop() {
    if (top_ == 0) {
      return -1;
    }
    return s_[--top_ + 1];
  }

private:
  vector<int> s_;
  size_t top_;
};
int main() {
  char s[1000];
  Stack stack(110);
  int rhs, lhs, t;
  while (scanf("%s", s) != EOF) {
    if (s[0] == '+') {
      rhs = stack.pop();
      lhs = stack.pop();
      t = lhs + rhs;
      stack.push(t);
    } else if (s[0] == '-') {
      rhs = stack.pop();
      lhs = stack.pop();
      t = lhs - rhs;
      stack.push(t);
    } else if (s[0] == '*') {
      rhs = stack.pop();
      lhs = stack.pop();
      t = lhs * rhs;
      stack.push(t);
    } else {
      stack.push(atoi(s));
    }
  }
  printf("%d\n", stack.pop());
  return 0;
}
```
