The given C/C++ program is a simple one and is already quite efficient. However, there are still a few small changes we could make to optimize it a little more.

1. Stream Manipulation: The use of cout is slower than printf, because cout is synchronized with the C standard streams. That means every time we use cout, it locks the stream, prints the output, and then unlocks the stream. This is a lot of overhead for each operation. So, we can replace cout with printf.

2. String concatenation: In the current program, we are printing each character one by one. Instead, we can construct a string for each line and print it all at once. This could potentially reduce the number of print operations.

3. Memory allocation: String concatenation involves dynamic memory allocation which is an expensive operation. To avoid this, we can pre-allocate a string of sufficient size and then modify it directly. 

The above points can help us to optimize the program. Let's implement these changes.

Here's the optimized program:

```cpp
#include <cstdio>
using namespace std;
int main() {
    int H, W;
    while (1) {
        scanf("%d %d", &H, &W);
        if (H == 0 && W == 0)
            break;
        string line(W, '#');
        string innerLine = '#' + string(W - 2, '.') + '#';
        for (int i = 1; i <= H; i++) {
            if (i == 1 || i == H) {
                printf("%s\n", line.c_str());
            } else {
                printf("%s\n", innerLine.c_str());
            }
        }
        printf("\n");
    }
}
```

This optimized program constructs a string for the outer and inner lines first, and then prints the entire string at once, which can be a bit faster because it reduces the number of print operations. It also replaces `cin` and `cout` with `scanf` and `printf` to speed up the I/O operations.