The code is already quite efficient, but there are a few small optimizations that could be made to reduce the number of operations and improve code readability:

1. Buffer the output: `std::cout` is usually slower compared to string operations. You can buffer the output into a string and print it once per each rectangle. This can result in significant speedup if the output is large.
2. Eliminate the inner `if` statement: Rather than checking `j == 1 || j == W` within the `else` statement, you can check this condition directly in the inner loop, reducing the number of operations.
3. Use `'\n'` instead of `endl`: `endl` not only adds a newline, but also flushes the stream, which can slow down the program. If you don't need immediate output, you can use `'\n'` instead.

Here's the optimized version of the code:

```cpp
#include <iostream>
#include <string>
using namespace std;
int main() {
  int H, W;
  while (1) {
    cin >> H >> W;
    if (H == 0 && W == 0)
      break;
    string output;
    for (int i = 1; i <= H; i++) {
      for (int j = 1; j <= W; j++) {
        if (i == 1 || i == H || j == 1 || j == W) {
          output += '#';
        } else {
          output += '.';
        }
      }
      output += '\n';
    }
    output += '\n';
    cout << output;
  }
}
```
The optimized code reduces the number of I/O operations by buffering the output, reduces the number of conditional checks in the inner loop, and improves the speed of adding newlines by using `'\n'` instead of `endl`.