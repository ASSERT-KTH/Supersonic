First, we will take a look at the input/output operations. They are usually slower than the computations itself. In this case, `std::endl` is used, which implies a flushing of the output buffer every time it is called. If there's a large amount of output, this can slow down the program. We'll replace it with `'\n'` instead.

Next, the inner loop checks whether it should print a '#' or a '.'. It checks this for every single cell. We can optimize this by realizing that for each row, we will always print the same characters. We can compute the string that we will print once, and then print it `H` times.

Here's how the optimized code looks with these changes:

```cpp
#include <iostream>
#include <string>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    int H, W;
    while(1) {
        cin >> H >> W;
        if (H==0 && W==0) break;
        
        string edge_row(W, '#');
        string middle_row = "#" + string(W-2, '.') + "#";
        
        cout << edge_row << '\n';
        for(int i = 2; i < H; i++) {
            cout << middle_row << '\n';
        }
        if (H > 1) {
            cout << edge_row << '\n';
        }
        cout << '\n';
    }
}
```

Explanation:

1. `ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` are used to speed up the cin/cout operations.
2. Instead of printing cell by cell, we create the edge row and the middle row as strings first. For the edge row, we create a string of length `W` filled with '#'. For the middle row, we create a string starting and ending with '#' and filled with '.' in the middle.
3. Then we print the edge row once, the middle row `H-2` times and the edge row again if `H > 1`. This ensures we print the correct number of rows and that the top and bottom rows are edge rows.
4. Replaced `endl` with `'\n'` for faster output.