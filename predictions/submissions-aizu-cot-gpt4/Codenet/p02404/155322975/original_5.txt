Step 1: One of the optimizations that we can do is to use fast I/O operations. In C++, cin and cout are considerably slower than scanf and printf. We can use ios_base::sync_with_stdio(false), cin.tie(NULL), and cout.tie(NULL) to speed up cin and cout.

Step 2: Inside the nested loop, we are repeatedly calling the std::cout function to print each character. The cost of calling a function in C++ can be significant, especially inside a nested loop. We can optimize this by building the string for each row and then outputting it in one call to cout.

Step 3: Instead of checking the value of i and j on every iteration to decide whether to print '#' or '.', we could create two strings before entering the loop: one for the first and last rows (borderRow) and one for the middle rows (middleRow).

Here is the optimized code:

```cpp
#include <iostream>
#include <string>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int H, W;
  while (1) {
    cin >> H >> W;
    if (H == 0 && W == 0)
      break;

    string borderRow(W, '#');
    string middleRow = "#" + string(W - 2, '.') + "#";

    for (int i = 1; i <= H; i++) {
      if (i == 1 || i == H) {
        cout << borderRow << "\n";
      } else {
        cout << middleRow << "\n";
      }
    }
    cout << "\n";
  }
}
```
This code should run faster and use less memory than the original code.