This program is pretty optimized for C++ standards. However, there are two things that can be slightly optimized.

1. The 'if' conditions inside the nested loops can be simplified to reduce the number of checks in each iteration.

2. The 'cout' statement is a bit slow, so we can speed it up by untie the 'cin' and 'cout' functions and using '\n' instead of 'endl'.

Step by step optimization process:

1. Simplify the 'if' conditions inside the nested loops: 
    The 'if' conditions in your inner loop are checking whether the current position is a boundary position. If it is, you output '#', otherwise '.'. Instead of having multiple checks, we can simplify this to a single check using the OR operator.

2. Speed up the 'cout' statement:
    By default, 'cin' and 'cout' are tied together to ensure a predictable sequence of reads and writes. However, this makes 'cout' slower. Since we don't need to read anything after we start writing, we can untie 'cin' from 'cout' to speed it up.
    'endl' inserts a newline character and flushes the stream. If we don't need to flush the stream, we can just use '\n' to insert a newline character.

Now, let's implement these optimizations in the code:

```cpp
#include <iostream>
using namespace std;
int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);

  int H, W;
  while (1) {
    cin >> H >> W;
    if (H == 0 && W == 0)
      break;
    for (int i = 1; i <= H; i++) {
      for (int j = 1; j <= W; j++) {
        cout << ((i == 1 || i == H || j == 1 || j == W) ? '#' : '.');
      }
      cout << '\n';
    }
    cout << '\n';
  }
}
```
This optimized program will run slightly faster and use less memory than the original one.