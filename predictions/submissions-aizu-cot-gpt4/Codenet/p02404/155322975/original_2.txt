Step 1: Input/Output Stream Optimization
The cin and cout operations in C++ are slower. We can speed up these operations by adding two lines at the beginning of the main function:

```
ios_base::sync_with_stdio(false);
cin.tie(NULL);
```
This will make input and output more efficient, which can be significant in a program that involves a lot of these operations.

Step 2: Reduce usage of endl
Using 'endl' is slower because it causes a flush operation, which is unnecessary here. Replacing 'endl' with '\n' can make the program faster.

Step 3: String concatenation
Instead of printing each character separately, we can build the whole string for each row and print it once. This will need more memory but it will reduce the number of I/O operations greatly, which are usually more time consuming.

Here's the optimized program:

```cpp
#include <iostream>
#include <string>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int H, W;
  
  while (1) {
    cin >> H >> W;
    if (H == 0 && W == 0)
      break;
    
    string startEndRow(W, '#');
    string middleRow = "#" + string(W-2, '.') + "#";
    
    cout << startEndRow << "\n";
    for (int i = 2; i < H; i++) {
      cout << middleRow << "\n";
    }
    if (H > 1)
      cout << startEndRow << "\n";
    
    cout << "\n";
  }
}
```
In this optimized version, we create two strings, one for the first/last row (startEndRow) and one for the middle rows (middleRow) and then we print these strings. This greatly reduces the number of cout operations.
