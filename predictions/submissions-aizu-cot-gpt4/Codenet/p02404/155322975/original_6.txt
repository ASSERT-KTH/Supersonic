Step 1: The first optimization that can be done is to use fast input/output methods. In C++, cin and cout are slower compared to scanf/printf. You can use scanf and printf instead of cin and cout for faster input/output.

Step 2: You can create the strings for the first/last line and the middle lines beforehand. This way, you don't need to output each character separately, which is relatively slow because each call to cout has some overhead.

Step 3: You can reduce the number of endl's used. endl not only inserts a new line, but it also flushes the stream. This can have an impact on performance if you are doing a lot of output. You can instead use '\n'.

Here is the optimized code:

```cpp
#include <cstdio>
#include <string>
using namespace std;
int main() {
  int H, W;
  while (1) {
    scanf("%d%d", &H, &W);
    if (H == 0 && W == 0)
      break;
    string first_last = string(W, '#') + "\n";
    string middle = "#" + string(W-2, '.') + "#\n";
    printf("%s", first_last.c_str());
    for (int i = 2; i < H; i++) {
      printf("%s", middle.c_str());
    }
    if (H > 1) {
      printf("%s", first_last.c_str());
    }
    printf("\n");
  }
  return 0;
}
```

This new version of the code is faster because it reduces the number of calls to cout, and it doesn't call endl, which flushes the output stream. It also creates the strings that need to be printed beforehand, reducing the number of operations inside the loop.