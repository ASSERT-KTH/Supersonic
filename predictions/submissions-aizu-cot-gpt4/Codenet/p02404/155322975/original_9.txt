Here are the steps to optimize the given program:

1. As the first step, we can optimize the output by using `'\n'` instead of `endl`. The reason is `endl` both inserts a new line into the output and flushes the stream, which can be costly in performance if done repeatedly in a loop. `'\n'` only inserts a newline character and doesn't flush the stream.

2. We can use `ios_base::sync_with_stdio(false);` to disable the synchronization between the C and C++ standard streams. By default, all standard streams are synchronized, which in practice allows you to mix C- and C++-style I/O and have it work as you expect. Desynchronizing the streams gives you a performance boost.

3. We can use `cin.tie(NULL);` to untie `cin` from `cout`. By default `cin` is tied to `cout` to ensure a coherent user interaction. Every time `cin` is read, `cout` is flushed. This can be time consuming.

4. We can reserve space for the strings that will be printed to avoid reallocations.

Here is the optimized code after the changes:

```cpp
#include <iostream>
#include <string>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int H, W;
  while (true) {
    cin >> H >> W;
    if (H == 0 && W == 0)
      break;

    string first_last_line(W, '#');
    string middle_line = '#' + string(W - 2, '.') + '#';
    
    cout << first_last_line << '\n';
    for (int i = 2; i < H; i++) {
      cout << middle_line << '\n';
    }
    if (H > 1) {
      cout << first_last_line << '\n';
    }
    cout << '\n';
  }
}
```
Note that the "optimization" here is more about code readability and best practices, the performance gain could be minimal.