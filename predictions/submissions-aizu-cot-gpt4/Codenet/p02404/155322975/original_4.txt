The original program is already quite optimized, but there are a few minor improvements that can be made.

1. Avoiding unnecessary checks: In each iteration of the innermost loop, we are performing a check (i == 1 || i == H). This check can be avoided for all rows except the first and last. We can handle the first and last rows separately and then handle the remaining rows in the loop.

2. Reducing the number of output operations: Each output operation involves a cost. In the above program, we are printing each character separately. We can reduce the number of output operations by storing the output of each row in a string and then printing the string.

3. Using Fast I/O: The cin and cout operations are slower compared to printf and scanf operations. We can use scanf and printf to speed up the input/output operations.

Here is the optimized version of the program:

```c++
#include <cstdio>
#include <string>
using namespace std;
int main() {
    int H, W;
    while (1) {
        scanf("%d %d", &H, &W);
        if (H == 0 && W == 0)
            break;

        // print first row
        printf("%s\n", string(W, '#').c_str());

        // print middle rows
        string middleRow = "#" + string(W-2, '.') + "#";
        for (int i = 2; i < H; i++) {
            printf("%s\n", middleRow.c_str());
        }

        // print last row
        if (H > 1) {
            printf("%s\n", string(W, '#').c_str());
        }
        printf("\n");
    }
    return 0;
}
```

Please note that using printf and scanf for string requires conversion to C style strings (using c_str() method). Also, creating the string for middleRow is done outside the loop, reducing repeated string creations.