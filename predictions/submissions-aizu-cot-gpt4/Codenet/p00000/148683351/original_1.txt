Step 1: You can use `'\n'` instead of `endl` to print a new line. The `endl` not only prints a new line, but also flushes the output buffer, which can be slower than simply printing a new line.

Step 2: We can also optimize the string concatenation part by using single `cout` statement to reduce function call overheads.

Step 3: Instead of using the multiplication operation in the loop, we can use addition. For this, we will need an extra variable that will hold the current result of multiplication. This is because multiplication is generally slower than addition.

Here is your optimized program:

```cpp
#include <iostream>
using namespace std;
int main() {
  for (int i = 1; i <= 9; i++) {
    int res = i;
    for (int j = 1; j <= 9; j++) {
      cout << i << "x" << j << "=" << res << '\n';
      res += i;
    }
  }
  return 0;
}
```

Remember that these optimizations are very small and in most situations, you won't notice any significant improvements. But it's always a good practice to write optimized code.