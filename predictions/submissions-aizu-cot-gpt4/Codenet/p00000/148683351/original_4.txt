Step 1: Use printf() instead of cout: printf() is faster than cout in most of the cases because cout needs to keep sync with the standard C streams.

Step 2: Reduce the use of endl: endl not only inserts a newline, but also causes the output buffer to be flushed. That can slow down the program. We can replace endl with "\n".

Step 3: Using pre-increment (++i) instead of post-increment (i++): In C++, it is generally more efficient to use pre-increment instead of post-increment, because post-increment needs to make a copy of the value before incrementing it.

Here is the optimized code:

```cpp
#include <cstdio>
using namespace std;
int main() {
  for (int i = 1; i <= 9; ++i) {
    for (int j = 1; j <= 9; ++j) {
      printf("%d x %d = %d\n", i, j, i * j);
    }
  }
  return 0;
}
```