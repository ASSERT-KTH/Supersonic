The original program is a simple multiplication table generator which doesn't have much scope for optimization in terms of logic or memory usage. The major time-consuming operation here is the `printf()` statement inside the inner loop which is I/O bound and cannot be significantly optimized.

However, we can make a small tweak in terms of memory usage and performance by storing the result of `i * j` in a variable and then using that variable in the `printf()` statement. This would avoid the need for the CPU to calculate `i * j` twice (once for the calculation and once for the printf statement).

Here is the optimized version:

```c++
#include <stdio.h>
int main() {
  for (int i = 1; i < 10; i++) {
    for (int j = 1; j < 10; j++) {
      int product = i * j;
      printf("%dx%d=%d\n", i, j, product);
    }
  }
  return 0;
}
```

This optimization may not make a significant difference in this particular case because multiplication operation for small integers is pretty fast in modern CPUs. But, as a general rule, it's good to avoid redundant calculations, especially within loops, as it can make a significant difference in more complex or computation-heavy programs.