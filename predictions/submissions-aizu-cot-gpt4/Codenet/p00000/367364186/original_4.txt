Optimization for this program can be done in the following ways:

1. Minimize the usage of printf: In this program, printf is called in every iteration of the inner loop, this is a costly I/O operation which slows down the program. We can minimize this by printing all the multiplication tables in a single printf statement.

2. Store multiplication result: Instead of calculating the multiplication of i and j directly in printf, we can calculate it beforehand and store the result in a variable.

Here is the optimized version of the program:

```c
#include <stdio.h>

int main() {
  char buffer[900] = {0}; 
  char *p = buffer;

  for (int i = 1; i < 10; i++) {
    for (int j = 1; j < 10; j++) {
      int result = i * j;
      p += sprintf(p, "%dx%d=%d\n", i, j, result);
    }
  }

  printf("%s", buffer);
  return 0;
}
```

Here is the explanation of the changes:

- A buffer of size 900 is declared to store the multiplication tables.
- A pointer `p` is initialized to point to the start of the buffer.
- In each iteration of the inner loop, the multiplication result is calculated and stored in the variable `result`, and sprintf is used to format the string and store it in the buffer. The pointer is moved forward by the number of characters written.
- Finally, the entire multiplication table is printed in one go using a single printf statement.

This version of the program reduces the number of costly I/O operations and also precomputes the multiplication results, which should improve its runtime.