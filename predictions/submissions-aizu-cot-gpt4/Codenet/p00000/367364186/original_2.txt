Optimization Steps:

1. The main optimization that can be done in this program is to reduce the number of calls to printf(). printf() is an expensive operation in terms of time and memory consumption. We can achieve this by first storing the results in a buffer, then print the buffer at once.

2. We can use sprintf() function to create a string of multiplication table and store it in a buffer.

3. Then we use puts() to print the buffer at once. The puts() function writes a string to the output, including a newline character. It is generally faster than printf() for printing strings.

Optimized Program:

```c
#include <stdio.h>

int main() {
  char buffer[900] = {0}; // 900 is the maximum size needed (9*9*10)
  char* ptr = buffer;
  
  for (int i = 1; i < 10; i++) {
    for (int j = 1; j < 10; j++) {
      ptr += sprintf(ptr, "%dx%d=%d\n", i, j, i * j); // sprintf returns the number of characters written
    }
  }
  
  puts(buffer); // print the buffer at once
  
  return 0;
}
```

This version of the program will run faster than the original one and use less memory because it reduces the number of calls to printf().