The provided C program is already quite optimal. However, there are a few tiny micro-optimizations that could be applied:

1. Put the multiplication result in a variable: Instead of calculating the multiplication i * j twice (once for the printf and once for the iteration), you can store the result in a variable and use it. This way the multiplication is performed only once.

2. Use putchar instead of printf for single characters: printf is a heavy function and takes more time than putchar. For printing single characters, you can use putchar function, which is faster. In this case, we can replace printf for printing the 'x' and '=' characters.

3. Use faster I/O methods: You can use the "ios_base::sync_with_stdio(false);" statement to unsync the C++ standard streams with their C counterparts to achieve faster I/O. This can be beneficial in programs that perform a large amount of I/O operations.

Here is the updated code:

```c
#include <stdio.h>
int main(void) {
  int i, j, mult;
  for (i = 1; i < 10; i++) {
    for (j = 1; j < 10; j++) {
      mult = i * j;
      printf("%d", i);
      putchar('x');
      printf("%d", j);
      putchar('=');
      printf("%d\n", mult);
    }
  }
  return (0);
}
```

Please note that these changes would not bring a noticeable difference in the performance of this specific program, because the original code is already quite optimized and the changes are extremely minor. The above suggestions are just for the sake of the question and are generally good practices to follow for bigger and more complex programs.