The program is already quite efficient, but there are a few minor changes we could make:

1. Reduce the scope of loop counter variables: In C++, it's best to keep the scope of variables as small as possible. Here, `i` and `j` are only used within the for loops, so we can declare them there.

2. Use `puts()` instead of `printf()`: `printf()` is a very powerful function, but it also has a lot of overhead because it has to parse the format string. If we're just printing a string followed by a newline, `puts()` will be faster. However, since we have to format the string before printing, we'll use `sprintf()` to format the string and then `puts()` to print it.

3. Use array to store the string: We can use a char array to store the formatted string and then print it using `puts()`. The size of the array is determined by the maximum possible string length which is "9x9=81\n" + null-terminating character ('\0') = 8 characters.

Here's the modified code:

```cpp
#include <stdio.h>

int main() {
  char str[8];
  for (int i = 1; i < 10; i++) {
    for (int j = 1; j < 10; j++) {
      sprintf(str, "%dx%d=%d", i, j, i * j);
      puts(str);
    }
  }
  return 0;
}
```

Please note that these optimizations may not result in a noticeable difference in performance for this small program, but they can be useful in larger codebases.