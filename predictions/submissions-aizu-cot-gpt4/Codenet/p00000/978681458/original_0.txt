The provided program is already quite efficient, but there are a few minor improvements that can be made. 

1. Pre-calculation: We can store the result of the multiplication operation in a variable instead of calculating it directly in printf(). This is because some compilers may not optimize this, and you end up calculating it twice.
2. Output Buffering: The printf function is often buffered. This means that it doesn't actually output text to the console every time it's called. Instead, it stores the text in a buffer and writes it out in chunks. This is efficient for large amounts of text, but for small programs like this one, it can slow things down. We can call the setbuf() function at the start of our program to disable output buffering.
3. Use of register keyword: For variables that are frequently accessed, like loop counters, we can use the register keyword to suggest the compiler that these variables be stored in the CPU registers which is faster than RAM.

Here is the optimized program:

```c
#include <stdio.h>

int main(void) {
  register int i, j;
  int result;
  setbuf(stdout, NULL);

  for (i = 1; i < 10; i++) {
    for (j = 1; j < 10; j++) {
      result = i * j;
      printf("%dx%d=%d\n", i, j, result);
    }
  }
  return (0);
}
```

Please note that modern compilers are usually smart enough to make these optimizations automatically. Use of register keyword is often considered obsolete as modern compilers are better at optimizing the usage of registers. So, the actual impact of these optimizations may be negligible or even nonexistent in most cases.