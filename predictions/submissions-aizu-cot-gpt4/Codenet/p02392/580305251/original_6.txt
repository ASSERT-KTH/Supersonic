The code you provided has multiple points that can be optimized and corrected:

1. The line `0 <= a, b, c <= 100;` doesn't do anything in C/C++. It's not a valid range check as you might expect from a language like Python. In C/C++, the comma is a sequence operator, meaning this line is equivalent to `(0 <= a), b, (c <= 100);`, which doesn't perform any range check on `a`, `b`, and `c`.

2. The variables `a`, `b`, `c` are not initialized. Using uninitialized variables can lead to undefined behavior in C/C++. They should be initialized before use.

3. The `scanf` function is not checked for successful reading of the input. If `scanf` fails to read the input, it could lead to unexpected behavior. 

4. Also, `printf` is a bit slower in comparison to `puts` because `printf` has to parse the string for format specifiers, while `puts` directly prints the string.

Here's the optimized code:

```c
#include <stdio.h>
int main(void) {
  int a = 0, b = 0, c = 0;
  if (scanf("%d %d %d", &a, &b, &c) != 3) {
    puts("Failed to read input");
    return 1; 
  }
  if (a >= 0 && a <= 100 && b >= 0 && b <= 100 && c >= 0 && c <= 100) {
    if (a < b && b < c) {
      puts("Yes");
    } else {
      puts("No");
    }
  } else {
    puts("Input values are out of range");
    return 1;
  }
  return 0;
}
```

In the optimized code, the variables are initialized before use. The return value of `scanf` is checked to ensure successful reading of the input. The variables are then checked to ensure they are within the range [0, 100]. If they are not within this range, an error message is printed and the program exits with a non-zero exit code. The `printf` function is replaced with the `puts` function for slightly faster execution.