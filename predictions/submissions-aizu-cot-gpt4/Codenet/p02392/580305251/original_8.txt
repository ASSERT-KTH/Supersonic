The code you've provided can be optimized in the following ways:

1. Remove unused expression: The expression "0 <= a, b, c <= 100;" in your code seems to be an attempt to limit the values of a, b, and c between 0 and 100. However, this line actually doesn't do anything in C/C++. It's just an unused expression and can be safely removed.

2. Buffering: By default, stdout in C/C++ is line-buffered. This means that it will buffer its output until a newline (or end of line) is encountered. However, by using "setbuf(stdout, NULL);" right after the main function, you can set stdout to no buffering at all, which might save a bit of memory and make the program run faster.

3. Directly return: Instead of setting the value of the result to a variable and then returning it, you can directly return the result from the condition.

Here is the optimized code:

```c
#include <stdio.h>
int main(void) {
  setbuf(stdout, NULL);
  int a, b, c;
  scanf("%d %d %d", &a, &b, &c);
  return (a < b && b < c) ? printf("Yes\n"), 0 : printf("No\n"), 0;
}
```
In this optimized code, "setbuf(stdout, NULL);" is used to set stdout to no buffering at all. The "printf" statements are directly included in the return statement. If the condition "a < b && b < c" is true, "Yes\n" is printed and 0 is returned. If the condition is not true, "No\n" is printed and 0 is returned. The comma operator is used to sequence the "printf" and "return" operations.