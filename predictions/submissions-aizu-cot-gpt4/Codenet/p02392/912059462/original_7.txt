Optimization Steps:
1. The program does not need to print a newline character (\n) separately. It can be included in the "yes" and "no" prints to reduce the number of calls to the printf function. This will slightly increase the efficiency of the program.
2. Also, we can use puts() instead of printf(). The puts() function writes a string and a trailing newline to stdout. The printf() function needs to parse the format string which can be slower, especially when the string only contains text.
3. Instead of taking three variables a, b, and c, we can take an array of three integers. This is more memory efficient and allows for easier expansion if the program needs to check more numbers in the future.

Here is the optimized code:

```c
#include <stdio.h>
int main() {
  int arr[3];
  scanf("%d%d%d", &arr[0], &arr[1], &arr[2]);
  if (arr[0] < arr[1] && arr[1] < arr[2]) {
    puts("Yes\n");
  } else {
    puts("No\n");
  }
  return 0;
}
```