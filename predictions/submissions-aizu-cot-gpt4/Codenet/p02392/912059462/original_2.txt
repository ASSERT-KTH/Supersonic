The given program doesn't have any significant bottlenecks or inefficiencies that we can optimize for speed or memory usage. The program is simple and already efficient, it just reads three integers from the standard input, compares them, and prints a message according to the result of the comparison.

The only small optimization we can do here is to combine the two printf statements into one. The reason is that printf is a system call and system calls are expensive operations relative to other operations because they require a context switch from user mode to kernel mode. By reducing the number of printf calls from 2 to 1, we can slightly optimize the program.

Here is the optimized version of the program:

```c
#include <stdio.h>
int main() {
  int a, b, c;
  scanf("%d%d%d", &a, &b, &c);
  if (a < b && b < c) {
    printf("Yes\n");
  } else {
    printf("No\n");
  }
  return 0;
}
```
In the optimized version, we have combined the two printf statements into one by printing the newline character ('\n') directly in the first printf statement. This reduces the number of system calls from 2 to 1, which can slightly optimize the running time of the program.