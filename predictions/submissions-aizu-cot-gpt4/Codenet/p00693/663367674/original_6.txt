The provided C++ program has a number of optimization opportunities. Here are some potential optimizations:

1. Multiple Header Files: The program includes <bits/stdc++.h> which is a header file that includes nearly all standard libraries in C++. Including this file can slow down the program's compilation time. It's better to include only the specific libraries that the program needs.

2. Unnecessary String Comparison: In the strCmp function, there are two loops that count the length of two strings, then another loop that compares every character in the strings. This can be replaced with the standard strcmp function from <cstring>, which does the same job more efficiently.

3. Unncessary String Copy: In the strcpy function, there is a loop that copies one string to another, with an extra assignment operation in each iteration. This can be replaced with the standard strcpy function from <cstring>, which does the same job more efficiently.

4. Dynamic Array Size: The arrays OK and NOT are declared with a size of N, which is a variable. This is not standard C++ and could lead to unpredictable behavior. It is better to use std::vector instead, which can dynamically resize.

5. Use of "using namespace std": Using the entire std namespace can potentially cause name collision. It's better to use specific objects from the std namespace.

6. Multiple Queue Pop: The queue element is accessed and then popped separately. This can be optimized by popping the element while accessing it.

Here is the optimized version of the program:

```c++
#include <algorithm>
#include <queue>
#include <stdio.h>
#include <cstring>
#include <vector>

typedef long long int ll;
typedef unsigned long long int ull;
#define BIG_NUM 2000000000
#define MOD 1000000007
#define EPS 0.000000001

int N, M;

struct Info {
  char from[9], to[9];
  int rank;
  bool erased;
};

struct Data {
  char from[9], to[9], message[51];
};

bool ambiguousCmp(char *base, char *comp) {
  bool FLG = true;
  for (int i = 0; base[i] != '\0'; i++) {
    if (base[i] != comp[i]) {
      if (base[i] != '?') {
        FLG = false;
        break;
      }
    }
  }
  return FLG;
}

void func() {
  std::vector<Info> OK(N), NOT(N);
  
  char buf[10], from[9], to[9];
  bool FLG;
  int ok_index = 0, not_index = 0;
  
  for (int i = 0; i < N; i++) {
    OK[i].erased = false;
    NOT[i].erased = false;
  }
  
  for (int i = 0; i < N; i++) {
    scanf("%s %s %s", buf, from, to);
    if (buf[0] == 'p') {
      strcpy(OK[ok_index].from, from);
      strcpy(OK[ok_index].to, to);
      OK[ok_index].rank = i;
      ok_index++;
    } else {
      strcpy(NOT[not_index].from, from);
      strcpy(NOT[not_index].to, to);
      NOT[not_index].rank = i;
      not_index++;
    }
  }

  // rest of the code remains the same

  std::queue<Data> Q;
  // rest of the code remains the same
  
  printf("%d\n", Q.size());
  while (!Q.empty()) {
    printf("%s %s %s\n", Q.front().from, Q.front().to, Q.front().message);
    Q.pop();
  }
}

int main() {
  while (true) {
    scanf("%d %d", &N, &M);
    if (N == 0 && M == 0)
      break;
    func();
  }
  return 0;
}
```