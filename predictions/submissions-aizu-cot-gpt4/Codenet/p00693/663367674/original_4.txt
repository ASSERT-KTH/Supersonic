This program can be optimized in several ways:

1. We can use the built-in string comparison functions instead of manually implemented strCmp and ambiguousCmp. The built-in functions are optimized and probably faster than a manual implementation.

2. Use of std::unordered_map instead of arrays can reduce the searching time complexity from O(n) to O(1).

3. The function strcpy has been redefined which is not a good practice as it may cause conflicts with the built-in strcpy function.

4. Redundant use of libraries: The libraries <bits/stdc++.h> and <algorithm> are redundant since <bits/stdc++.h> is a super-library that includes almost everything.

5. Use of better data structures: We are storing the data in arrays and then searching through them which takes more time. A better data structure like a hash table (std::unordered_map) could make the lookup quicker.

6. Use of std::cin and std::cout instead of scanf and printf could provide safer and exception handling input-output operations.

7. The use of global variables can be eliminated to make the code more robust and maintainable.

8. Use of constant expressions for array sizes.

However, please note that due to the rules of this task, we can't rewrite the whole program, so we will only apply some of these optimizations.

Here is the optimized version of the program:

```
#include <iostream>
#include <unordered_map>
#include <queue>
#include <cstring>
#define BIG_NUM 2000000000
#define MOD 1000000007
#define EPS 0.000000001
using namespace std;
int N, M;
struct Info {
  char from[9], to[9];
  int rank;
  bool erased;
};
struct Data {
  char from[9], to[9], message[51];
};
void mystrcpy(char *to, char *str) {
  for (int i = 0; str[i] != '\0'; i++) {
    to[i] = str[i];
    to[i + 1] = '\0';
  }
}
void func() {
  int ok_index = 0, not_index = 0;
  Info OK[N], NOT[N];
  for (int i = 0; i < N; i++) {
    OK[i].erased = false;
    NOT[i].erased = false;
  }
  char buf[10], from[9], to[9];
  bool FLG;
  for (int i = 0; i < N; i++) {
    scanf("%s %s %s", buf, from, to);
    if (buf[0] == 'p') {
      mystrcpy(OK[ok_index].from, from);
      mystrcpy(OK[ok_index].to, to);
      OK[ok_index].rank = i;
      ok_index++;
    } else {
      mystrcpy(NOT[not_index].from, from);
      mystrcpy(NOT[not_index].to, to);
      NOT[not_index].rank = i;
      not_index++;
    }
  }
  for (int i = not_index - 1; i >= 0; i--) {
    for (int k = ok_index - 1; k >= 0; k--) {
      if (NOT[i].rank < OK[k].rank || OK[k].erased == true)
        continue;
      if (strcmp(NOT[i].from, OK[k].from) == 0 &&
          strcmp(NOT[i].to, OK[k].to) == 0) {
        OK[k].erased = true;
      }
    }
  }
  for (int i = ok_index - 1; i >= 0; i--) {
    for (int k = not_index - 1; k >= 0; k--) {
      if (OK[i].rank < NOT[k].rank || NOT[k].erased == true)
        continue;
      if (strcmp(OK[i].from, NOT[k].from) == 0 &&
          strcmp(OK[i].to, NOT[k].to) == 0) {
        NOT[k].erased = true;
      }
    }
  }
  queue<Data> Q;
  for (int loop = 0; loop < M; loop++) {
    Data data;
    scanf("%s %s %s", data.from, data.to, data.message);
    FLG = false;
    for (int i = 0; i < ok_index; i++) {
      if (OK[i].erased == true)
        continue;
      if (strcmp(OK[i].from, data.from) == 0 &&
          strcmp(OK[i].to, data.to) == 0) {
        FLG = true;
        break;
      }
    }
    if (!FLG)
      continue;
    FLG = true;
    for (int i = 0; i < not_index; i++) {
      if (NOT[i].erased == true)
        continue;
      if (strcmp(NOT[i].from, data.from) == 0 &&
          strcmp(NOT[i].to, data.to) == 0) {
        FLG = false;
        break;
      }
    }
    if (FLG) {
      Q.push(data);
    }
  }
  printf("%d\n", Q.size());
  while (!Q.empty()) {
    printf("%s %s %s\n", Q.front().from, Q.front().to, Q.front().message);
    Q.pop();
  }
}
int main() {
  while (true) {
    scanf("%d %d", &N, &M);
    if (N == 0 && M == 0)
      break;
    func();
  }
  return 0;
}
```