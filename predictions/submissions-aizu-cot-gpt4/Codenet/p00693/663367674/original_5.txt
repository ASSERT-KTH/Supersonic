The main optimizations we can make here are:

1. `strCmp(char *base, char *comp)`: This function compares two strings and returns true if they are the same. The standard library function `strcmp` does exactly the same thing, so we can replace this function with `strcmp`.

2. `strcpy(char *to, char *str)`: This function copies one string to another. The standard library function `strcpy` does exactly the same thing, so we can replace this function with `strcpy`.

3. `#include <bits/stdc++.h>`: This is a header file that includes most of the standard library. However, it's not standard and not supported by all compilers. It's better to include only the headers we need. In this case we can remove headers like `<cfloat>`, `<cmath>`, `<stdio.h>`, `<string.h>`, `<algorithm>` as they are not used in this code.

4. `typedef long long int ll; typedef unsigned long long int ull;`: These typedefs are not used in the code, we can remove it.

5. `#define BIG_NUM 2000000000; #define MOD 1000000007; #define EPS 0.000000001`: These constants are not used in the code, we can remove it.

6. `char from[9], to[9];`: These arrays are not used in the code, we can remove it.

7. We can also omit comparing `if (OK[i].erased == true)` and `if (NOT[i].erased == true)` with true, because the condition checks for true by default.

Here is the optimized code:

```c++
#include <queue>
#include <set>
#include <stack>
#include <vector>
using namespace std;
int N, M;
struct Info {
  char from[9], to[9];
  int rank;
  bool erased;
};
struct Data {
  char from[9], to[9], message[51];
};
bool ambiguousCmp(char *base, char *comp) {
  bool FLG = true;
  for (int i = 0; base[i] != '\0'; i++) {
    if (base[i] != comp[i]) {
      if (base[i] != '?') {
        FLG = false;
        break;
      }
    }
  }
  return FLG;
}
void func() {
  int ok_index = 0, not_index = 0;
  Info OK[N], NOT[N];
  for (int i = 0; i < N; i++) {
    OK[i].erased = false;
    NOT[i].erased = false;
  }
  char buf[10], from[9], to[9];
  bool FLG;
  for (int i = 0; i < N; i++) {
    scanf("%s %s %s", buf, from, to);
    if (buf[0] == 'p') {
      strcpy(OK[ok_index].from, from);
      strcpy(OK[ok_index].to, to);
      OK[ok_index].rank = i;
      ok_index++;
    } else {
      strcpy(NOT[not_index].from, from);
      strcpy(NOT[not_index].to, to);
      NOT[not_index].rank = i;
      not_index++;
    }
  }
  for (int i = not_index - 1; i >= 0; i--) {
    for (int k = ok_index - 1; k >= 0; k--) {
      if (NOT[i].rank < OK[k].rank || OK[k].erased)
        continue;
      if (strcmp(NOT[i].from, OK[k].from) == 0 && strcmp(NOT[i].to, OK[k].to) == 0) {
        OK[k].erased = true;
      }
    }
  }
  for (int i = ok_index - 1; i >= 0; i--) {
    for (int k = not_index - 1; k >= 0; k--) {
      if (OK[i].rank < NOT[k].rank || NOT[k].erased)
        continue;
      if (strcmp(OK[i].from, NOT[k].from) == 0 && strcmp(OK[i].to, NOT[k].to) == 0) {
        NOT[k].erased = true;
      }
    }
  }
  queue<Data> Q;
  for (int loop = 0; loop < M; loop++) {
    Data data;
    scanf("%s %s %s", data.from, data.to, data.message);
    FLG = false;
    for (int i = 0; i < ok_index; i++) {
      if (OK[i].erased)
        continue;
      if (ambiguousCmp(OK[i].from, data.from) &&
          ambiguousCmp(OK[i].to, data.to)) {
        FLG = true;
        break;
      }
    }
    if (!FLG)
      continue;
    FLG = true;
    for (int i = 0; i < not_index; i++) {
      if (NOT[i].erased)
        continue;
      if (ambiguousCmp(NOT[i].from, data.from) &&
          ambiguousCmp(NOT[i].to, data.to)) {
        FLG = false;
        break;
      }
    }
    if (FLG) {
      Q.push(data);
    }
  }
  printf("%d\n", Q.size());
  while (!Q.empty()) {
    printf("%s %s %s\n", Q.front().from, Q.front().to, Q.front().message);
    Q.pop();
  }
}
int main() {
  while (true) {
    scanf("%d %d", &N, &M);
    if (N == 0 && M == 0)
      break;
    func();
  }
  return 0;
}
```
