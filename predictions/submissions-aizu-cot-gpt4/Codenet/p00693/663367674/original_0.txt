The given code can be optimized in the following ways:

1. Use C++ Standard Library Functions: The functions strCmp and strcpy defined in the code are already present in the C++ Standard Library (cstring). Using the inbuilt functions will provide more optimized performance.

2. Avoid Global Variables: Global variables consume memory for the entirety of the program's execution time. Local variables are preferred as they only consume memory when the function they are declared in is running.

3. Minimize Variable Declarations: It is better to declare variables just before they are needed, rather than at the beginning of the code. This can optimize memory usage.

4. Use cin/cout Instead of scanf/printf: It's a good practice to use cin/cout in C++ instead of scanf/printf.

5. Use std::string instead of char arrays: std::string is safer and more convenient to use than char arrays.

6. Use const where possible: This can help the compiler optimize the code.

Here is the optimized code:

```cpp
#include <algorithm>
#include <bits/stdc++.h>
#include <cfloat>
#include <cmath>
#include <queue>
#include <set>
#include <stack>
#include <iostream>
#include <vector>
typedef long long int ll;
typedef unsigned long long int ull;
#define BIG_NUM 2000000000
#define MOD 1000000007
#define EPS 0.000000001
using namespace std;
struct Info {
  string from, to;
  int rank;
  bool erased;
};
struct Data {
  string from, to, message;
};
bool ambiguousCmp(const string& base, const string& comp) {
  bool FLG = true;
  for (int i = 0; i < base.size(); i++) {
    if (base[i] != comp[i]) {
      if (base[i] != '?') {
        FLG = false;
        break;
      }
    }
  }
  return FLG;
}
void func() {
  int N, M;
  cin >> N >> M;
  if (N == 0 && M == 0)
    return;
    
  int ok_index = 0, not_index = 0;
  vector<Info> OK(N), NOT(N);
  string buf, from, to;
  bool FLG;
  
  // Use cin instead of scanf
  for (int i = 0; i < N; i++) {
    cin >> buf >> from >> to;
    if (buf[0] == 'p') {
      OK[ok_index].from = from;
      OK[ok_index].to = to;
      OK[ok_index].rank = i;
      ok_index++;
    } else {
      NOT[not_index].from = from;
      NOT[not_index].to = to;
      NOT[not_index].rank = i;
      not_index++;
    }
  }
  // Rest of the code remains the same.
  
}
int main() {
  func();
  return 0;
}
```

Note: The rest of the code remains the same. This is because loops, condition checks, and queue operations are already optimized as much as possible.