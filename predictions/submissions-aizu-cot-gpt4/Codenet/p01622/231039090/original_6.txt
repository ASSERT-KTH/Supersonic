This program can be optimized by reducing the size of the dp array and making use of the STL algorithm functions for summing up elements in an array (which can be faster than a manual loop). 

Here are the step-by-step optimizations:

1. The size of the `dp` array is fixed to 3000 which may be unnecessarily large for some cases leading to unnecessary memory usage. We can optimize this by dynamically allocating the size of the `dp` array based on the actual needs of the program.
2. Instead of manually summing up the elements in the array, we can use STL algorithm's `std::accumulate` for calculating `sumf` and `sums`. It can be faster than manual loops due to possible compiler optimizations.
3. Using `std::fill` to initialize the dp array which can be faster than manual initialization due to possible compiler optimizations.

Here's the optimized version of the program:

```cpp
#include <bits/stdc++.h>
#define f first
#define s second
using namespace std;
typedef pair<int, int> P;
int n;
P book[1001];
int solve() {
  int sumf = accumulate(book, book + n, 0, [](int sum, const P& p){ return sum + p.f; });
  int sums = accumulate(book, book + n, 0, [](int sum, const P& p){ return sum + p.s; });
  if (2 * book[0].f <= sumf)
    return sumf + sums;
  int d = 2 * book[0].f - sumf, D = d;
  vector<int> dp(d + 1);
  fill(dp.begin(), dp.end(), 1);
  for (int i = 1; i < n; i++)
    for (int j = d - book[i].s; j >= 0; j--)
      dp[j + book[i].s] |= dp[j];
  while (!dp[D])
    D--;
  return sumf + sums + (d - D);
}
int main() {
  while (cin >> n, n) {
    for (int i = 0; i < n; i++)
      cin >> book[i].f >> book[i].s;
    sort(book, book + n, greater<P>());
    cout << solve() << endl;
  }
  return 0;
}
```

Please note that the effectiveness of these optimizations may vary based on the specific compiler and system you are using.