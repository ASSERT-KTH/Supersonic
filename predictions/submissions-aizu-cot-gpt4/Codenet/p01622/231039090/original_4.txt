The given C++ program uses an array of pairs to store data, performs a sorting operation, and uses a dynamic programming approach to calculate a result. 

Here are the optimization steps:

1. **Use C++ STL Vector instead of Array:** Vectors are more dynamic and safer to use. They provide many built-in functions such as `push_back()` that can be used to add elements at the end of the vector and `pop_back()` to remove an element from the end. Also, vectors adjust its size automatically when an element is inserted or deleted.
2. **Avoid using Macro Definitions:** Use of macro definitions `#define` can lead to problems because it's hard to debug as the preprocessor replaces all macros by their values before the actual compilation starts.
3. **Avoid using `#include<bits/stdc++.h>`:** This is a header file that includes every standard library. While this might seem helpful, using it will significantly increase your compilation time. It's better to include only the libraries that you are actually using.
4. **Avoid using `using namespace std;`:** This can potentially lead to name confliction. It is a good practice to use `std::` before the STL components.
5. **Use `std::ios_base::sync_with_stdio(false); std::cin.tie(NULL);` to speed up cin & cout:** This can significantly improve IO speed.

Now, I will apply these optimizations to your code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
typedef std::pair<int, int> Pair;

int solve(std::vector<Pair>& books, int n) {
  int sumf = 0, sums = 0;
  for (int i = 0; i < n; i++)
    sumf += books[i].first, sums += books[i].second;
  if (2 * books[0].first <= sumf)
    return sumf + sums;
  int d = 2 * books[0].first - sumf, D = d;
  std::vector<int> dp(3000, 0);
  dp[0] = 1;
  for (int i = 1; i < n; i++)
    for (int j = d - books[i].second; j >= 0; j--)
      dp[j + books[i].second] |= dp[j];
  while (!dp[D])
    D--;
  return sumf + sums + (d - D);
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  int n;
  while (std::cin >> n, n) {
    std::vector<Pair> books(n);
    for (int i = 0; i < n; i++)
      std::cin >> books[i].first >> books[i].second;
    sort(books.begin(), books.end(), std::greater<Pair>());
    std::cout << solve(books, n) << std::endl;
  }
  return 0;
}
```