1. Replace `#include <bits/stdc++.h>` with specific includes: `#include <bits/stdc++.h>` is not a standard library and it includes lots of unnecessary files which can slow down the compilation time. Instead, we should include only the libraries that we use in the program. In the code given, we are using std::cin, std::cout, std::endl, std::string, std::swap, std::ostream, and fabs functions. So, we can replace it with `#include <iostream>`, `#include <cmath>`, `#include <algorithm>` and `#include <string>`.

2. Remove unused macros: The macro `IINF (INT_MAX)` and `REP(i, s, n)` are not used in the program. Removing them will not affect the functionality of the program.

3. Replace the macros with inline functions: The macros `rep(i, n)` and `equals(a, b)` can be replaced with inline functions. Inline functions are safer and more flexible than macros, and they also support type checking.

4. Reduce the usage of temporary variables: In the function `crosspointTS`, we can directly return the result without creating a temporary variable `e`.

5. Replace `cin` with `scanf` and `cout` with `printf`: This can speed up the I/O operations.

Here is the optimized code:
```cpp
#include <iostream>
#include <cmath>
#include <algorithm>
#include <string>
#define EPS (1e-7)
using namespace std;

inline bool equals(double a, double b) { return fabs((a) - (b)) < EPS; }
void rep(int i, int n) { for (i = 0; i < n; i++); }

// Rest of the code remains the same

int main() {
  Point3d tri[3], S, G;
  scanf("%lf %lf %lf", &S.x, &S.y, &S.z);
  scanf("%lf %lf %lf", &G.x, &G.y, &G.z);
  for(int i=0; i<3; i++) scanf("%lf %lf %lf", &tri[i].x, &tri[i].y, &tri[i].z);
  
  Plane3d plane(tri[0], tri[1], tri[2]);
  Segment3d seg(S, G);
  if (!plane.intersectS(seg)) {
    printf("%s\n", Y.c_str());
    return 0;
  }
  Point3d cp = plane.crosspointS(seg);
  printf("%s\n", (point_on_the_triangle3d(tri[0], tri[1], tri[2], cp) ? N.c_str() : Y.c_str()));
  return 0;
}
```
