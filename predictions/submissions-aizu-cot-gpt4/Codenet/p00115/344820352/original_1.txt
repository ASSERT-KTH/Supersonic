This code is already quite optimized, however, there are a few small changes that can be made to improve it further.

1. Remove the unnecessary `#define` macros: While macros may improve readability, they can also lead to confusing bugs because they are replaced by the preprocessor before compilation. In this code, the macros are not necessary and can be removed.

2. Use `constexpr` for constant expressions: Using `constexpr` can help the compiler optimize the code because it knows that the value is constant and will not change.

3. Use `std::array` instead of C-style arrays: `std::array` is a safer, more modern alternative to C-style arrays. It includes bounds checking and works better with C++ algorithms.

4. Avoid using `std::endl`: `std::endl` not only inserts a newline, but also flushes the output stream. This can slow down the program if you're doing a lot of output. Use `'\n'` instead.

5. Inline small, performance-critical functions: The `inline` keyword can be used to suggest to the compiler that a function should be inlined, which can improve performance.

6. Use `const` where possible: This can help the compiler optimize the code and can also prevent bugs.

7. Avoid global constants: The strings `Y` and `N` should be defined where they are used, not at global scope.

Here's the optimized version of the code:

```cpp
#include <iostream>
#include <cmath>
#include <array>
#include <string>

using namespace std;

class Point3d {
public:
    double x, y, z;
    constexpr Point3d(double x = 0, double y = 0, double z = 0) : x(x), y(y), z(z) {}
    constexpr Point3d operator+(const Point3d &a) const { return {x + a.x, y + a.y, z + a.z}; }
    constexpr Point3d operator-(const Point3d &a) const { return {x - a.x, y - a.y, z - a.z}; }
    constexpr Point3d operator*(const double &d) const { return {x * d, y * d, z * d}; }
    constexpr Point3d operator/(const double &d) const { return {x / d, y / d, z / d}; }
    constexpr bool operator<(const Point3d &p) const {
        double EPS = 1e-7;
        auto equals = [](double a, double b) { return abs(a - b) < EPS; };
        return !equals(x, p.x) ? x < p.x : (!equals(y, p.y) ? y < p.y : z < p.z);
    }
    constexpr bool operator==(const Point3d &p) const {
        double EPS = 1e-7;
        auto equals = [](double a, double b) { return abs(a - b) < EPS; };
        return equals(x, p.x) && equals(y, p.y) && equals(z, p.z);
    }
};

using Vector3d = Point3d;
using Line3d = Vector3d[2];

constexpr double dot(const Point3d &a, const Point3d &b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
}

constexpr Vector3d cross(const Point3d &a, const Point3d &b) {
    return {a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x};
}

constexpr double norm(const Point3d &p) {
    return p.x * p.x + p.y * p.y + p.z * p.z;
}

constexpr double abs(const Point3d &p) { return sqrt(norm(p)); }

bool on_line3d(const Line3d &line, const Point3d &p) {
    double EPS = 1e-7;
    auto equals = [](double a, double b) { return abs(a - b) < EPS; };
    return equals(abs(cross(p - line[0], line[1] - line[0])), 0);
}

bool on_segment3d(const Line3d &seg, const Point3d &p) {
    if (!on_line3d(seg, p))
        return false;
    std::array<double, 3> dist = {abs(seg[1] - seg[0]), abs(p - seg[0]), abs(p - seg[1])};
    double EPS = 1e-7;
    auto equals = [](double a, double b) { return abs(a - b) < EPS; };
    return equals(dist[0], dist[1] + dist[2]);
}

// ... rest of the code ...

int main() {
    // ... rest of the code ...
    const std::string Y = "HIT", N = "MISS";
    // ... rest of the code ...
    cout << (point_on_the_triangle3d(tri[0], tri[1], tri[2], cp) ? N : Y) << '\n';
    return 0;
}
```
Note that I've removed some of the code to keep the example concise.