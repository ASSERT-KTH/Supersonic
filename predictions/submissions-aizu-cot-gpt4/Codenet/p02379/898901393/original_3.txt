Here are the optimization steps:

1. Inline Function: Convert the function `distance` into an inline function. Inline functions are a useful optimization technique, especially for small functions, because it eliminates the overhead of function calls. When a function is declared as inline, the compiler replaces the function call with the actual code of the function, hence reducing the time that would have been wasted in the function call.

2. Remove temp Variable: Instead of storing the result of the arithmetic operation in the `temp` variable and then calling `sqrt` on it, call `sqrt` directly on the arithmetic operation. This removes the need for the `temp` variable, reducing memory usage slightly.

Here is the optimized code:

```c
#include <math.h>
#include <stdio.h>

typedef struct point {
  double x;
  double y;
} point;

inline double distance(point p1, point p2) {
  return sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
}

int main(void) {
  point p1, p2;
  scanf("%lf%lf%lf%lf", &p1.x, &p1.y, &p2.x, &p2.y);
  printf("%.5f\n", distance(p1, p2));
  return 0;
}
```

Please note that while these optimizations may result in a small improvement in performance and memory usage, they are unlikely to have a significant impact unless this code is part of a larger program where `distance` is called very frequently.