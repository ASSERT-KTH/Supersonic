The given C program calculates the distance between two points in a 2D space. The optimization steps could be:

1. Avoid unnecessary variables: The variable `temp` is not required. You could directly return the square root of the distance formula.
2. Pass the structure by reference: Instead of passing the whole structure to the function, pass a pointer to the structure. This will reduce the memory usage because when we pass structures to functions, the whole structure is copied to the function's stack which can be expensive in terms of memory if the structure is large. Passing the reference (address) instead will just pass the address of the structure which is just 8 bytes (on a 64-bit system).
3. Use const qualifier: If a function argument is not modified in the function, it should be declared as `const`. This improves performance because the compiler can make assumptions that the value doesn't change which can lead to better optimization. In this case, `p1` and `p2` are not modified in the `distance` function so they should be declared as `const`.

The optimized program would be:

```c
#include <math.h>
#include <stdio.h>

typedef struct point {
  double x;
  double y;
} point;

double distance(const point *p1, const point *p2) {
  return sqrt((p1->x - p2->x) * (p1->x - p2->x) + (p1->y - p2->y) * (p1->y - p2->y));
}

int main(void) {
  point p1, p2;
  scanf("%lf%lf%lf%lf", &p1.x, &p1.y, &p2.x, &p2.y);
  printf("%.5f\n", distance(&p1, &p2));
  return 0;
}
```
This optimized program should have lower memory usage and should run slightly faster because it avoids unnecessary variable assignments and copies of structures.