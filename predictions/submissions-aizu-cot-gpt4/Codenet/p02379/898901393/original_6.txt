Optimization Steps:

1. Pass the struct point by reference: In the distance function, it is better to pass the points by reference rather than values. This will save the time of copying the values of the struct.

2. Avoid using sqrt function: The sqrt function is quite expensive in terms of CPU time. If you are comparing distances, you can compare the squares of the distances instead. However, in this particular scenario, as we are printing the distance, we cannot avoid sqrt. 

3. Use float instead of double: If high precision is not needed, we can use float instead of double for less memory usage and possibly faster operations. However, it's worth mentioning that this depends on your particular hardware and compiler.

Optimized Program:

```c
#include <math.h>
#include <stdio.h>
typedef struct point {
  float x;
  float y;
} point;
float distance(const point* p1, const point* p2) {
  float temp;
  temp = (p1->x - p2->x) * (p1->x - p2->x) + (p1->y - p2->y) * (p1->y - p2->y);
  return sqrt(temp);
}
int main(void) {
  point p1, p2;
  float d;
  scanf("%f%f%f%f", &p1.x, &p1.y, &p2.x, &p2.y);
  d = distance(&p1, &p2);
  printf("%.5f\n", d);
  return 0;
}
```

Please note that these optimizations might not result in significant improvements in this particular code, but they are general good practices to follow in C/C++ programming.