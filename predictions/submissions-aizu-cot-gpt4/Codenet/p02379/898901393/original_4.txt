Here are some optimization strategies for the program:
1. **Passing by reference:** In the distance function, the parameters are passed by value, which means a copy of the points is created. This can be avoided by passing the parameters by reference instead.
2. **Single statement in distance function:** The temp variable is unnecessary. We can simplify the function by returning the calculation directly.
3. **Avoiding sqrt calculation:** In some contexts, if you only need to compare distances, you don't actually need to calculate the square root, which can be an expensive operation.

Let's implement these optimizations:

```C++
#include <stdio.h>

typedef struct point {
  double x;
  double y;
} point;

double distance(const point &p1, const point &p2) {
  return (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);
}

int main(void) {
  point p1, p2;
  scanf("%lf%lf%lf%lf", &p1.x, &p1.y, &p2.x, &p2.y);
  double d = distance(p1, p2);
  printf("%.5f\n", d);
  return 0;
}
```

In this optimized version, the distance function now takes its parameters by reference, so no copies are created, and the square root calculation has been removed. However, please note that the function now returns the square of the distance, not the actual distance. If you still need the actual distance, you can take the square root of the result outside the function.