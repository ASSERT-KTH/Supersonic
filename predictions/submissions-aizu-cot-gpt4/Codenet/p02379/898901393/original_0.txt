The above program is already quite optimal, but there's still a small improvement that can be made. The program calculates the distance between two points using the Euclidean distance formula. This involves calculating the square root of the sum of the squares of the differences of the coordinates.

If you're only comparing distances (and not actually needing the exact distance value), you can avoid the calculation of the square root, which is computationally expensive. However, in this case, the exact distance value is needed for output, so we can't apply this optimization.

An optimization that can be made is to pass the points to the distance function by reference, instead of by value. This will avoid the overhead of copying the points. In C, you can pass by reference using pointers. This will reduce memory usage since we're no longer creating copies of our points.

Optimized Program:

```c
#include <math.h>
#include <stdio.h>

typedef struct point {
  double x;
  double y;
} point;

double distance(point* p1, point* p2) {
  double temp;
  temp = (p1->x - p2->x) * (p1->x - p2->x) + (p1->y - p2->y) * (p1->y - p2->y);
  return sqrt(temp);
}

int main(void) {
  point p1, p2;
  double d;
  scanf("%lf%lf%lf%lf", &p1.x, &p1.y, &p2.x, &p2.y);
  d = distance(&p1, &p2);
  printf("%.5f\n", d);
  return 0;
}
```

In the optimized version, we've changed the prototype of the distance function to take pointers to point structures. Inside the function, we're using the "->" operator to access the members of the structures. In the main function, we're passing the addresses of the points to the distance function using the "&" operator.