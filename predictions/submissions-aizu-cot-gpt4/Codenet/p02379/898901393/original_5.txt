Optimization Steps:

1. Pass the structures by reference in the distance function instead of by value. This will reduce memory usage as we will not be creating copies of the structures. It will also reduce the time taken as we will not be copying the structures.

2. We can change the calculation of the temp variable to avoid unnecessary multiplications. Instead of calculating (p1.x - p2.x) * (p1.x - p2.x) and (p1.y - p2.y) * (p1.y - p2.y) separately, we can calculate the difference once and square it.

3. We can use the pow function instead of manually squaring the differences. This will make the code more readable and may be slightly faster.

Here is the optimized code:

```c
#include <math.h>
#include <stdio.h>

typedef struct point {
  double x;
  double y;
} point;

double distance(const point *p1, const point *p2) { // pass by reference
  double dx = p1->x - p2->x; // calculate difference once
  double dy = p1->y - p2->y; // calculate difference once
  return sqrt(pow(dx, 2) + pow(dy, 2)); // use pow function
}

int main(void) {
  point p1, p2;
  scanf("%lf%lf%lf%lf", &p1.x, &p1.y, &p2.x, &p2.y);
  double d = distance(&p1, &p2); // pass by reference
  printf("%.5f\n", d);
  return 0;
}
```