The given program is a C++ program that reads a graph from standard input, counts the in-degree of each vertex, and then performs a topological sort on the graph.

The following optimizations can be made:

1. Instead of using `vector<int> ans;` and then adding the elements to it using `ans.push_back(i);`, we can use a queue. As the `push_back()` function can sometimes require the vector to resize (which is a time-consuming operation), using a queue will make our program faster. 

2. We can use `edge.resize(V);` instead of `vector<vector<int>> edge(10001);`. This will save memory because we're only allocating the amount of memory we actually need.

3. We can replace `for (int i = 0; i < ans.size(); i++)` with `while (!q.empty())`. This will make our program faster because the size() function is called only once, not with each iteration.

4. We can replace `for (int i = 0; i < edge[ans[i]].size(); j++)` with `for (auto &t : edge[v])`. This will make our program faster because the size() function is called only once, not with each iteration.

5. We can use `std::ios::sync_with_stdio(false);` and `std::cin.tie(NULL);` at the beginning of the main function to turn off synchronization with the C standard input/output, which will make cin and cout faster.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);

  int V, E;
  cin >> V >> E;
  
  vector<vector<int>> edge;
  edge.resize(V);
  
  vector<int> state(V, 0);
  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    edge[s].push_back(t);
    state[t]++;
  }

  queue<int> q;
  for (int i = 0; i < state.size(); i++) {
    if (state[i] == 0)
      q.push(i);
  }

  while (!q.empty()) {
    int v = q.front();
    q.pop();
    cout << v << endl;
    for (auto &t : edge[v]) {
      state[t]--;
      if (state[t] == 0)
        q.push(t);
    }
  }
  
  return 0;
}
```