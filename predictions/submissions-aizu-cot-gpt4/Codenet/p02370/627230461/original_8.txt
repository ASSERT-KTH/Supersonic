The C++ program seems to be implementing Topological Sort on a graph, where vertices are tasks and edges are relations that task A is prior to task B.

Here are the steps for optimization:

1. The main optimization is to reduce the size of the 'edge' vector. It's initialized to a size of 10001 which can consume a lot of unnecessary memory if the number of vertices (V) is significantly less than 10001. We should initialize it to the size of 'V', the number of vertices.

2. Instead of iterating over the 'state' vector using 'state.size()', we can use the variable 'V' as it has the same value and avoid an additional function call. 

3. Instead of iterating over the 'edge[ans[i]]' vector using 'edge[ans[i]].size()', we can store the size in a variable. This will avoid multiple calls to the size() function in each iteration of the loop.

4. The final printing of the 'ans' vector can be done more efficiently using a range-based for loop.

Here is the optimized version of the program:

```C++
#include <iostream>
#include <vector>
using namespace std;
int main() {
  int V, E;
  cin >> V >> E;
  vector<vector<int>> edge(V); // Initialize edge to size V
  vector<int> state(V, 0);
  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    edge[s].push_back(t);
    state[t]++;
  }
  vector<int> ans;
  for (int i = 0; i < V; i++) { // Use V instead of state.size()
    if (state[i] == 0)
      ans.push_back(i);
  }
  for (int i = 0; i < ans.size(); i++) {
    int ansSize = edge[ans[i]].size(); // Store size in variable
    for (int j = 0; j < ansSize; j++) { // Use variable instead of calling size() in each iteration
      int t = edge[ans[i]][j];
      state[t]--;
      if (state[t] == 0)
        ans.push_back(t);
    }
  }
  for (const auto &i : ans) { // Use range-based for loop for printing
    cout << i << endl;
  }
  return 0;
}
```

These modifications will help in reducing both running time and memory usage of the program.