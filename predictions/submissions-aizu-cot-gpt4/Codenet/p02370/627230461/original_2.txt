The primary optimization we can do here is to reduce the size of the 'edge' vector to 'V' instead of '10001' because it's not necessary to have the vector that large. 'V' represents the number of vertices in the graph, so sizing the 'edge' vector to 'V' would be more efficient and save memory.

Secondly, we can use a queue instead of a vector for 'ans' to avoid expensive push_back operations, because queue uses linked list structure internally, which ensures O(1) time complexity for both insertion and deletion, whereas vector has O(n) time complexity for insertion in the worst case.

Now, let's implement these optimizations in the code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
int main() {
  int V, E;
  cin >> V >> E;
  vector<vector<int>> edge(V);
  vector<int> state(V, 0);
  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    edge[s].push_back(t);
    state[t]++;
  }
  queue<int> ans;
  for (int i = 0; i < state.size(); i++) {
    if (state[i] == 0)
      ans.push(i);
  }
  while (!ans.empty()) {
    int s = ans.front();
    ans.pop();
    cout << s << endl;
    for (auto t : edge[s]) {
      state[t]--;
      if (state[t] == 0)
        ans.push(t);
    }
  }
  return 0;
}
```
In this optimized program, the size of vector 'edge' is now 'V', which saves memory. We're also using a queue for 'ans' to avoid expensive vector operations. Additionally, we're using a range-based for loop to iterate over 'edge[s]', which is more readable and less error-prone than a traditional for loop.