Here are a few changes that can be applied to optimize the given C/C++ program:

1. The edge vector is currently initialized with a size of 10001. This is a waste of memory if the number of vertices are less than 10001. We should initialize the edge vector with the size equal to the number of vertices.

2. We can use reserve for the ans vector because we know that in the worst case, all vertices could be pushed to the ans vector. This can avoid reallocations.

3. We can replace the push_back operation with emplace_back in the ans vector. The emplace_back function will construct the object in place, which could be more efficient than push_back.

4. We can avoid the use of the size() function in the loops by using iterators or range-based for loops.

Here is the optimized version of your program:

```cpp
#include <iostream>
#include <vector>
using namespace std;
int main() {
  int V, E;
  cin >> V >> E;
  vector<vector<int>> edge(V);
  vector<int> state(V, 0);
  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    edge[s].push_back(t);
    state[t]++;
  }
  vector<int> ans;
  ans.reserve(V);
  for (int i = 0; i < V; i++) {
    if (state[i] == 0)
      ans.emplace_back(i);
  }
  for (int i = 0; i < ans.size(); i++) {
    for (auto &t : edge[ans[i]]) {
      state[t]--;
      if (state[t] == 0)
        ans.emplace_back(t);
    }
  }
  for (auto &i : ans) {
    cout << i << endl;
  }
  return 0;
}
```
This version of the code is more efficient in terms of memory usage because it doesn't allocate unnecessary memory for the edge vector. It also avoids possible reallocations of the ans vector and constructs the integers in place. Moreover, it uses the range-based for loop and iterators to iterate over the vectors, which can be faster than using the size() function.