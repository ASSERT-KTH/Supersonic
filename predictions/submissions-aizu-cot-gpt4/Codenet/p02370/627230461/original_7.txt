This program appears to implement a topological sort on a directed graph. The main areas for optimization are related to the vector initializations and the nested loops.

Step 1: Vector Initialization
The `edge` vector is initialized with a size of 10001. This is wasteful if the number of vertices `V` is significantly less than 10001. We can initialize it with the size `V` instead.

Step 2: Using `reserve` for `ans`
We don't know the exact size of `ans`, but we know it will be at most `V`. Using `reserve(V)` for `ans` will allocate enough memory upfront, avoiding potential costly reallocations later.

Step 3: Avoiding `state.size()` and `ans.size()` in loops
Calling `size()` function in each iteration of loop can increase the execution time. We can instead store it in a variable and use that in the loop condition.

Step 4: Using `++i` instead of `i++`
In C++, `++i` could be potentially faster than `i++` for non-primitive types like iterators. Although for primitive types like int, it doesn't matter, but using `++i` is a good habit to get into.

Step 5: Using `emplace_back` instead of `push_back`
`emplace_back` constructs the element in-place, and could potentially be more efficient than `push_back` which creates a temporary object.

Here is the optimized program based on above steps:

```cpp
#include <iostream>
#include <vector>
using namespace std;
int main() {
  int V, E;
  cin >> V >> E;
  vector<vector<int>> edge(V);
  vector<int> state(V, 0);
  for (int i = 0; i < E; ++i) {
    int s, t;
    cin >> s >> t;
    edge[s].push_back(t);
    state[t]++;
  }
  vector<int> ans;
  ans.reserve(V);
  int stateSize = state.size();
  for (int i = 0; i < stateSize; ++i) {
    if (state[i] == 0)
      ans.emplace_back(i);
  }
  int ansSize = ans.size();
  for (int i = 0; i < ansSize; ++i) {
    int edgeSize = edge[ans[i]].size();
    for (int j = 0; j < edgeSize; ++j) {
      int t = edge[ans[i]][j];
      state[t]--;
      if (state[t] == 0)
        ans.emplace_back(t);
    }
    ansSize = ans.size();
  }
  for (const auto &a : ans) {
    cout << a << endl;
  }
  return 0;
}
```
Note that the last loop was also optimized using range-based `for` loop, which is shorter and easier to read.

All these changes are minor, but they can add up to make the program run faster and use less memory, especially for large inputs.