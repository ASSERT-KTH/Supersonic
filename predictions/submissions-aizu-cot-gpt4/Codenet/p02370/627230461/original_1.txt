Explanation:

The optimization steps are as follows:

1. Reduce the size of 'edge' vector to 'V' as 'V' is the number of vertices in the graph. The original program has the size of 'edge' as 10001 which is not efficient if 'V' is significantly less than 10001.

2. The 'edge' vector is a 2D vector. We can reserve the inner vectors to prevent frequent reallocations while pushing back elements. The maximum possible size of these inner vectors can be 'V-1' (when a vertex is connected to all other vertices).

3. The size of 'ans' vector is not known before runtime. However, in worst case scenario, all vertices could be in 'ans'. Therefore, we can reserve 'V' space for 'ans' vector to prevent frequent reallocations.

4. Use prefix increment (++i) instead of postfix (i++) in loops where the value of 'i' after increment is not used. It might bring slight performance improvement in case of user-defined types and is generally recommended as a good practice.

5. Remove the usage of 'state.size()' inside the loop condition, as the size doesn't change during the loop execution. It is better to store it in a variable and use that variable in the loop condition.

Now, let's apply these optimizations to the original program:

```cpp
#include <iostream>
#include <vector>
using namespace std;
int main() {
  int V, E;
  cin >> V >> E;
  vector<vector<int>> edge(V);
  for (int i = 0; i < V; ++i) { //reserve space for inner vector
    edge[i].reserve(V-1);
  }
  vector<int> state(V, 0);
  for (int i = 0; i < E; ++i) {
    int s, t;
    cin >> s >> t;
    edge[s].push_back(t);
    state[t]++;
  }
  vector<int> ans;
  ans.reserve(V); //reserve space for ans vector
  int stateSize = state.size(); //store size in a variable
  for (int i = 0; i < stateSize; ++i) {
    if (state[i] == 0)
      ans.push_back(i);
  }
  for (int i = 0; i < ans.size(); ++i) {
    for (int j = 0; j < edge[ans[i]].size(); ++j) {
      int t = edge[ans[i]][j];
      state[t]--;
      if (state[t] == 0)
        ans.push_back(t);
    }
  }
  for (int i = 0; i < ans.size(); ++i) {
    cout << ans[i] << endl;
  }
  return 0;
}
```