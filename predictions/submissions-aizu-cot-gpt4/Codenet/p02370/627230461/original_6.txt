Optimization Steps:

1. Replace `vector<vector<int>> edge(10001);` with `vector<vector<int>> edge(V);`. `edge` is only used to hold vertices as per user input. So, we don't need to allocate space for 10001 vertices. Allocating space for `V` vertices would be enough.

2. Replace `int t = edge[ans[i]][j];` with `const int& t = edge[ans[i]][j];`. This will prevent unnecessary copying and will provide a performance boost when dealing with large data.

3. Replace `for (int i = 0; i < state.size(); i++)` with `for (const auto& s : state)`. This will prevent unnecessary calling of `size()` function in each iteration.

4. Replace `for (int i = 0; i < ans.size(); i++)` with `for (const auto& a : ans)`. This will prevent unnecessary calling of `size()` function in each iteration.

5. Replace `for (int i = 0; i < ans.size(); i++)` with `for (const auto& a : ans)`. Similar to point 4.

Optimized Program:

```cpp
#include <iostream>
#include <vector>
using namespace std;
int main() {
  int V, E;
  cin >> V >> E;
  vector<vector<int>> edge(V);
  vector<int> state(V, 0);
  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    edge[s].push_back(t);
    state[t]++;
  }
  vector<int> ans;
  for (const auto& s : state) {
    if (s == 0)
      ans.push_back(&s - &state[0]);
  }
  for (const auto& a : ans) {
    for (const auto& e : edge[a]) {
      const int& t = e;
      state[t]--;
      if (state[t] == 0)
        ans.push_back(t);
    }
  }
  for (const auto& a : ans) {
    cout << a << endl;
  }
  return 0;
}
```