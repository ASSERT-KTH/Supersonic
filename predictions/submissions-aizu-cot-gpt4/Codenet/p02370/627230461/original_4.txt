This program seems to be implementing a type of graph traversal, where edges and nodes are input by the user. It then performs a certain operation on the graph and finally outputs some results. 

Here is the step-by-step optimization:

1. `vector<vector<int>> edge(10001);` - This line is creating a 2D vector of size 10001, which may be too large if the number of vertices 'V' is less than 10001. Instead, we should initialize it with 'V' to save memory.

2. `for (int i = 0; i < state.size(); i++)` - It's better to use prefix increment (++i) instead of postfix (i++) in C++ loops because it avoids unnecessary temporary object creation and destruction, thus saving a little bit of time.

3. `for (int i = 0; i < ans.size(); i++)` - In this loop, the size of 'ans' vector is calculated at every iteration which is not efficient. We should calculate it once before the loop and use the result inside the loop.

4. `for (int i = 0; i < ans.size(); i++)` - It's better to use range-based for loop here to enhance readability and performance.

Here is the optimized code:

```c++
#include <iostream>
#include <vector>
using namespace std;

int main() {
  int V, E;
  cin >> V >> E;
  vector<vector<int>> edge(V);   // Optimized memory usage
  vector<int> state(V, 0);
  for (int i = 0; i < E; ++i) {  // Using prefix increment
    int s, t;
    cin >> s >> t;
    edge[s].push_back(t);
    state[t]++;
  }
  vector<int> ans;
  for (int i = 0; i < state.size(); ++i) {  // Using prefix increment
    if (state[i] == 0)
      ans.push_back(i);
  }
  for (size_t i = 0, len = ans.size(); i < len; ++i) {  // Calculating size before loop
    for (int &t : edge[ans[i]]) {  // Using range-based for loop
      state[t]--;
      if (state[t] == 0)
        ans.push_back(t);
    }
  }
  for (int &x : ans) {  // Using range-based for loop
    cout << x << endl;
  }
  return 0;
}
```

Please note that the last loop and the loop inside it could potentially lead to undefined behavior if the vector 'ans' is modified while iterating through it. However, as the task description asked to not completely rewrite the program, I left it as is. In a real-world scenario, it might be necessary to adjust this part of the code to ensure that it does not lead to any issues.