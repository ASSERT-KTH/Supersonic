Firstly, let's optimize the program step by step:

1. Use `reserve()` function: This will preallocate memory for vector S and topological_order which reduces the time spent on memory allocation in push_back operations. 

2. Use `emplace_back()` instead of `push_back()`: This function will construct the object in-place, eliminating the need for a temporary object and copy operations. 

3. Use `const reference` instead of copy for Edge: This will avoid unnecessary copying of the Edge objects. 

4. Use `back()` instead of indexing: This will make the code cleaner. 

5. Use `ios_base::sync_with_stdio(false)`: This can speed up iostreams.

Now, let's implement these changes in the program:

```cpp
#include <bits/stdc++.h>
using namespace std;

struct Edge {
  int tgt_;
  Edge(int t) : tgt_(t) {}
};

typedef vector<vector<Edge>> Adj_list;

vector<int> topological_sort(Adj_list G) {
  const int V = G.size();
  vector<int> S;
  S.reserve(V);
  vector<int> inorder(V, 0);
  for (int i = 0; i < V; i++)
    for (const Edge &e : G[i])
      inorder[e.tgt_]++;
  for (int i = 0; i < V; i++)
    if (inorder[i] == 0)
      S.emplace_back(i);
  assert(S.size() > 0);
  vector<int> topological_order;
  topological_order.reserve(V);
  while (!S.empty()) {
    int v = S.back();
    S.pop_back();
    topological_order.emplace_back(v);
    for (int i = G[v].size() - 1; i >= 0; i--) {
      const Edge &e = G[v][i];
      inorder[e.tgt_]--;
      if (inorder[e.tgt_] == 0)
        S.emplace_back(e.tgt_);
    }
  }
  for (int i = 0; i < V; i++)
    assert(inorder[i] == 0);
  return topological_order;
}

int main() {
  ios_base::sync_with_stdio(false);
  int V, E;
  cin >> V >> E;
  Adj_list G(V);
  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    G[s].emplace_back(t);
  }
  vector<int> ans = topological_sort(G);
  for (int i : ans)
    cout << i << '\n';
}
```
This version of the program will run more efficiently in terms of time and memory usage.