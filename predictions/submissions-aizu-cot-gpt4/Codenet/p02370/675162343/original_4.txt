The given C++ program can be optimized by focusing on the following points:

1. Efficient Memory Usage - The program should only allocate memory that it will use. This allows the program to run faster because it uses less of the system's memory, which means the system can also run other programs simultaneously.

2. Avoiding unnecessary copying of data - The program should avoid creating temporary copies of data that it doesn't need. This can be done by using references instead of creating new variables.

3. Efficiently using STL containers - The program should use the STL containers effectively to improve performance. For instance, when popping an element from a vector, it's better to use the pop_back() function instead of the erase() function because the latter is more computationally expensive.

Here is the optimized version of the above program:

```cpp
#include <bits/stdc++.h>
using namespace std;
struct Edge {
  int tgt_;
  explicit Edge(int t) : tgt_(t) {}
};
typedef vector<vector<Edge>> Adj_list;
vector<int> topological_sort(Adj_list &G) {
  const int V = G.size();
  vector<int> S;
  vector<int> inorder(V, 0);
  for (int i = 0; i < V; i++)
    for (const Edge &e : G[i])
      inorder[e.tgt_]++;
  for (int i = 0; i < V; i++)
    if (inorder[i] == 0)
      S.push_back(i);
  assert(!S.empty());
  vector<int> topological_order;
  while (!S.empty()) {
    int v = S.back();
    S.pop_back();
    topological_order.push_back(v);
    for (auto it = G[v].rbegin(); it != G[v].rend(); ++it) {
      inorder[it->tgt_]--;
      if (inorder[it->tgt_] == 0)
        S.push_back(it->tgt_);
    }
  }
  for (int i = 0; i < V; i++)
    assert(inorder[i] == 0);
  return topological_order;
}
int main() {
  int V, E;
  cin >> V >> E;
  Adj_list G(V);
  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    G[s].push_back(Edge(t));
  }
  vector<int> ans = topological_sort(G);
  for (int i : ans)
    cout << i << endl;
}
```

**Changes Made:**

1. Added explicit keyword to single argument constructor in Edge struct to avoid implicit conversions.
2. Passed the graph G by reference in topological_sort function to avoid copying.
3. Used const reference in range-based for loop to avoid copying of Edge objects.
4. Replaced vector size check with empty().
5. Iterated from the end of the vector using reverse iterator, which is more efficient.
6. In the main function, used range-based for loop to iterate over ans vector.