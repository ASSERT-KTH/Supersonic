Optimization Steps:

1. Avoid using `#include <bits/stdc++.h>` as it includes all the standard library files, which increases the compilation time. Include only the required headers.
2. Use `reserve()` function to preallocate memory for vectors `S` and `topological_order` which could potentially avoid additional memory allocations during runtime.
3. Instead of taking the size every time in the while loop, take the size once and decrement it in each iteration to avoid repeated function calls.
4. In the topological_sort function, instead of copying the Edge object `e = G[v][i]`, just reference it `Edge& e = G[v][i]` to avoid unnecessary copy.

Optimized Program:

```cpp
#include <iostream>
#include <vector>
#include <cassert>

using namespace std;

struct Edge {
  int tgt_;
  Edge(int t) : tgt_(t) {}
};

typedef vector<vector<Edge>> Adj_list;

vector<int> topological_sort(Adj_list G) {
  const int V = G.size();
  vector<int> S;
  S.reserve(V);
  vector<int> inorder(V, 0);
  for (int i = 0; i < V; i++)
    for (Edge &e : G[i])
      inorder[e.tgt_]++;
  for (int i = 0; i < V; i++)
    if (inorder[i] == 0)
      S.push_back(i);
  assert(!S.empty());
  vector<int> topological_order;
  topological_order.reserve(V);
  while (!S.empty()) {
    int v = S.back();
    S.pop_back();
    topological_order.push_back(v);
    for (int i = G[v].size() - 1; i >= 0; i--) {
      Edge& e = G[v][i];
      inorder[e.tgt_]--;
      if (inorder[e.tgt_] == 0)
        S.push_back(e.tgt_);
    }
  }
  for (int i = 0; i < V; i++)
    assert(inorder[i] == 0);
  return topological_order;
}

int main() {
  int V, E;
  cin >> V >> E;
  Adj_list G(V);
  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    G[s].push_back(Edge(t));
  }
  vector<int> ans = topological_sort(G);
  for (int i = 0; i < V; i++)
    cout << ans[i] << endl;
}
```
