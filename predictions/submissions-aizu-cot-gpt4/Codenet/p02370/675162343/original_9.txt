Step 1: Remove `#include <bits/stdc++.h>`. It's a non-standard header file and includes more than necessary. We can include only the needed files to reduce memory usage.

Step 2: Use `ios_base::sync_with_stdio(false); cin.tie(NULL);` at the beginning of the main function. This will turn off the synchronization of all the C++ standard streams with their corresponding standard C streams if it is called before the program performs its first input or output operation. Including `cin.tie(NULL);` will untie cin from cout. Tied streams ensure that one stream is flushed automatically before each I/O operation on the other stream.

Step 3: Replace `S[S.size() - 1];` with `S.back();` and `for (int i = G[v].size() - 1; i >= 0; i--)` with `for (auto &e : G[v])`. These changes make the code more readable and reduce the complexity of the code.

Step 4: Use `reserve()` function for `vector<int> topological_order;` as we know that it will contain V elements at the end. This will prevent unnecessary reallocations.

Optimized code:

```cpp
#include <iostream>
#include <vector>
#include <cassert>

using namespace std;

struct Edge {
  int tgt_;
  Edge(int t) { tgt_ = t; }
};

typedef vector<vector<Edge>> Adj_list;

vector<int> topological_sort(Adj_list G) {
  const int V = G.size();
  vector<int> S;
  vector<int> inorder(V, 0);

  for (int i = 0; i < V; i++)
    for (Edge &e : G[i])
      inorder[e.tgt_]++;
  
  for (int i = 0; i < V; i++)
    if (inorder[i] == 0)
      S.push_back(i);
  
  assert(S.size() > 0);

  vector<int> topological_order;
  topological_order.reserve(V);

  while (!S.empty()) {
    int v = S.back();
    S.pop_back();
    topological_order.push_back(v);

    for (auto &e : G[v]) {
      inorder[e.tgt_]--;
      if (inorder[e.tgt_] == 0)
        S.push_back(e.tgt_);
    }
  }

  for (int i = 0; i < V; i++)
    assert(inorder[i] == 0);

  return topological_order;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int V, E;
  cin >> V >> E;
  Adj_list G(V);

  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    G[s].push_back(Edge(t));
  }

  vector<int> ans = topological_sort(G);

  for (int i = 0; i < V; i++)
    cout << ans[i] << '\n';
}
```
