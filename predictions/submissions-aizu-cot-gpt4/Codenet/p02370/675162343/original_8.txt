Optimization steps:

1. The vector 'S' is used as a stack, where elements are pushed and popped from the back. We can use `std::deque` instead, which has O(1) complexity for push and pop operations at both ends.

2. The loop that iterates over `G[v]` in reverse order doesn't need to do so. Iterating in forward order doesn't change the result since it's a topological sort.

3. Instead of creating a new `Edge` object 'e' every time in the loop, we can use a reference to avoid unnecessary object creation.

4. In C++, the `std::endl` output manipulator is often misunderstood. It does more than just a newline. It also flushes the output stream, which is a costly operation. Instead, we can use "\n" for just a newline.

5. The 'topological_order' vector is being resized dynamically during the execution of the program. We can reserve the memory at the beginning as we know that the size will be equal to 'V'.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;

struct Edge {
    int tgt_;
    Edge(int t) : tgt_(t) {}
};

typedef vector<vector<Edge>> Adj_list;

vector<int> topological_sort(Adj_list G) {
    const int V = G.size();
    deque<int> S;
    vector<int> inorder(V, 0);
    for (int i = 0; i < V; i++)
        for (Edge &e : G[i])
            inorder[e.tgt_]++;
    for (int i = 0; i < V; i++)
        if (inorder[i] == 0)
            S.push_back(i);
    assert(!S.empty());
    vector<int> topological_order;
    topological_order.reserve(V);
    while (!S.empty()) {
        int v = S.back();
        S.pop_back();
        topological_order.push_back(v);
        for (Edge &e : G[v]) {
            inorder[e.tgt_]--;
            if (inorder[e.tgt_] == 0)
                S.push_back(e.tgt_);
        }
    }
    for (int i = 0; i < V; i++)
        assert(inorder[i] == 0);
    return topological_order;
}

int main() {
    int V, E;
    cin >> V >> E;
    Adj_list G(V);
    for (int i = 0; i < E; i++) {
        int s, t;
        cin >> s >> t;
        G[s].push_back(Edge(t));
    }
    vector<int> ans = topological_sort(G);
    for (int i = 0; i < V; i++)
        cout << ans[i] << "\n";
}
```
This optimized code has the same functionality but is more efficient in terms of running time and memory usage.