Optimization Steps:

1. We can avoid the usage of `#include <bits/stdc++.h>`. This header file includes practically the whole C++ standard library and increases the compile time. Instead, we should include only the necessary libraries to optimize the code.

2. The `Edge` struct only holds a single integer value. We can replace the vector of `Edge` objects with a vector of integers to reduce memory usage.

3. We can use `std::deque` instead of `std::vector` for `S`. This allows us to efficiently pop from the front instead of the end, which in turn allows us to avoid reversing the `G[v]` loop in the `while (S.size())` loop.

4. We can eliminate the `Edge e = G[v][i];` line by directly using `G[v][i]` in the following lines to reduce memory usage.

5. We can use `reserve()` function to preallocate memory for vector `topological_order`. This reduces the number of memory allocations and copies during execution, hence improves performance.

Optimized Code:

```cpp
#include <iostream>
#include <vector>
#include <deque>
#include <cassert>

using namespace std;

typedef vector<vector<int>> Adj_list;

vector<int> topological_sort(Adj_list G) {
  const int V = G.size();
  deque<int> S;
  vector<int> inorder(V, 0);
  for (int i = 0; i < V; i++)
    for (int &e : G[i])
      inorder[e]++;
  for (int i = 0; i < V; i++)
    if (inorder[i] == 0)
      S.push_back(i);
  assert(!S.empty());
  vector<int> topological_order;
  topological_order.reserve(V);
  while (!S.empty()) {
    int v = S.front();
    S.pop_front();
    topological_order.push_back(v);
    for (auto &e : G[v]) {
      inorder[e]--;
      if (inorder[e] == 0)
        S.push_back(e);
    }
  }
  for (int i = 0; i < V; i++)
    assert(inorder[i] == 0);
  return topological_order;
}

int main() {
  int V, E;
  cin >> V >> E;
  Adj_list G(V);
  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    G[s].push_back(t);
  }
  vector<int> ans = topological_sort(G);
  for (int i = 0; i < V; i++)
    cout << ans[i] << endl;
}
```
In this optimized version of the program, we have reduced memory usage by using a vector of integers instead of a vector of `Edge` objects, and increased performance by using `std::deque` instead of `std::vector` for `S`, and by preallocating memory for `topological_order` using `reserve()`.