Optimization Steps:
1. Avoid multiple memory accesses: Instead of accessing the same memory location multiple times, we can get the value once and use it. 
2. Use `std::ios_base::sync_with_stdio(false)` and `cin.tie(NULL)`: This will untie `cin` and `cout` and can speed up the I/O operations.
3. Avoid unnecessary calculations: For example, `mp[0][t.ly][t.lx]` and `mp[1][t.ry][t.rx]` are calculated twice in the same loop. Instead, we can calculate them once and reuse the values.
4. Avoid using `std::endl`: `std::endl` flushes the buffer every time it's called, which can slow down the program. We can replace it with `"\n"`.

Optimized Code:
```cpp
#include <cstring>
#include <iostream>
#include <queue>
using namespace std;
struct po {
  int lx, ly, rx, ry;
};
int w, h;
string mp[2][51];
bool visited[51][51][51][51];
int dx[4] = {0, 0, 1, -1};
int dy[4] = {1, -1, 0, 0};
bool bfs(int lx, int ly, int rx, int ry) {
  queue<po> Q;
  Q.push((po){lx, ly, rx, ry});
  while (!Q.empty()) {
    po t = Q.front();
    Q.pop();
    char cmp0 = mp[0][t.ly][t.lx];
    char cmp1 = mp[1][t.ry][t.rx];
    int cnt = (cmp0 == '%') + (cmp1 == '%');
    if (cnt == 2)
      return true;
    if (visited[t.lx][t.ly][t.rx][t.ry] || cnt == 1)
      continue;
    visited[t.lx][t.ly][t.rx][t.ry] = 1;
    for (int i = 0; i < 4; i++) {
      int flg = 0;
      int nlx = t.lx + dx[i], nly = t.ly + dy[i];
      int nrx = t.rx - dx[i], nry = t.ry + dy[i];
      if (nlx < 0 || nly < 0 || nlx >= w || nly >= h || mp[0][nly][nlx] == '#')
        nlx = t.lx, nly = t.ly, flg++;
      if (nrx < 0 || nry < 0 || nrx >= w || nry >= h || mp[1][nry][nrx] == '#')
        nrx = t.rx, nry = t.ry, flg++;
      if (flg == 2)
        continue;
      Q.push((po){nlx, nly, nrx, nry});
    }
  }
  return false;
}
int main() {
  ios_base::sync_with_stdio(false); 
  cin.tie(NULL);
  while (1) {
    cin >> w >> h;
    if (!w && !h)
      break;
    for (int i = 0; i < h; i++)
      cin >> mp[0][i] >> mp[1][i];
    int lx, ly, rx, ry;
    for (int i = 0; i < h; i++)
      for (int j = 0; j < w; j++) {
        if (mp[0][i][j] == 'L')
          lx = j, ly = i;
        if (mp[1][i][j] == 'R')
          rx = j, ry = i;
      }
    memset(visited, 0, sizeof(visited));
    if (bfs(lx, ly, rx, ry))
      cout << "Yes\n";
    else
      cout << "No\n";
  }
  return 0;
}
```
This code should have the same functionality as the original but should run faster. However, the actual improvement will depend greatly on the input and the specific system running the code.