This C++ program seems to be well-written and efficient. However, there are some spots where we can make small modifications to optimize it.

1. Instead of accessing `mp[0][t.ly][t.lx]` and `mp[1][t.ry][t.rx]` multiple times in bfs function, we can store their values in variables and reuse them. This will reduce the number of array accesses and improve the running time.

2. Instead of creating new variables `nlx`, `nly`, `nrx`, `nry` and then checking their boundary conditions, we can directly check the boundary conditions and only create these variables if they are valid. This will save memory.

3. We can change the order of conditions in the if statement `if (visited[t.lx][t.ly][t.rx][t.ry] || cnt == 1)` to `if (cnt == 1 || visited[t.lx][t.ly][t.rx][t.ry])`. Since `cnt == 1` is a less expensive operation, it can short-circuit the condition and save time if it's true.

Here is the optimized version of the code based on these modifications:

```cpp
#include <cstring>
#include <iostream>
#include <queue>
using namespace std;
struct po {
  int lx, ly, rx, ry;
};
int w, h;
string mp[2][51];
bool visited[51][51][51][51];
int dx[4] = {0, 0, 1, -1};
int dy[4] = {1, -1, 0, 0};

bool valid(int x, int y, int i) {
    return !(x < 0 || y < 0 || x >= w || y >= h || mp[i][y][x] == '#');
}

bool bfs(int lx, int ly, int rx, int ry) {
  queue<po> Q;
  Q.push((po){lx, ly, rx, ry});
  while (!Q.empty()) {
    po t = Q.front();
    Q.pop();
    bool isL = mp[0][t.ly][t.lx] == '%';
    bool isR = mp[1][t.ry][t.rx] == '%';
    if (isL && isR)
      return true;
    if (isL || isR || visited[t.lx][t.ly][t.rx][t.ry])
      continue;
    visited[t.lx][t.ly][t.rx][t.ry] = 1;
    for (int i = 0; i < 4; i++) {
      int flg = 0;
      int nlx = valid(t.lx + dx[i], t.ly + dy[i], 0) ? t.lx + dx[i] : t.lx;
      int nly = valid(t.lx + dx[i], t.ly + dy[i], 0) ? t.ly + dy[i] : t.ly;
      int nrx = valid(t.rx - dx[i], t.ry + dy[i], 1) ? t.rx - dx[i] : t.rx;
      int nry = valid(t.rx - dx[i], t.ry + dy[i], 1) ? t.ry + dy[i] : t.ry;
      if (nlx == t.lx && nly == t.ly && nrx == t.rx && nry == t.ry)
        continue;
      Q.push((po){nlx, nly, nrx, nry});
    }
  }
  return false;
}

int main() {
  while (1) {
    cin >> w >> h;
    if (!w && !h)
      break;
    for (int i = 0; i < h; i++)
      cin >> mp[0][i] >> mp[1][i];
    int lx, ly, rx, ry;
    for (int i = 0; i < h; i++)
      for (int j = 0; j < w; j++) {
        if (mp[0][i][j] == 'L')
          lx = j, ly = i;
        if (mp[1][i][j] == 'R')
          rx = j, ry = i;
      }
    memset(visited, 0, sizeof(visited));
    if (bfs(lx, ly, rx, ry))
      cout << "Yes" << endl;
    else
      cout << "No" << endl;
  }
  return 0;
}

```
Please note that the efficiency of these optimizations may vary depending on the compiler and the specific hardware you are using.