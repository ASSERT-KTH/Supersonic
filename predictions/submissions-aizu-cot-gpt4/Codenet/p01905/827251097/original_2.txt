The given C++ program is already quite simple and efficient. However, there are some minor tweaks that can be applied to make it even more efficient.

1. Use of `#include<bits/stdc++.h>`: This header file in C++ includes most of the standard libraries. It's not a standard header file and its use is not recommended as it includes a lot of unnecessary code into the program, leading to increased compile time. Instead, we should only include those libraries which we are actually using in our code. In this case, since we are only using the printf and scanf functions, we can simply include the `stdio.h` or `cstdio` header file.

2. Variable Declaration: Here, the variables are declared at the top of the `main()` function. However, in C++, it is considered a good practice to declare variables as close as possible to where they are used. This improves code readability and also can potentially reduce memory usage.

3. Using cin and cout instead of scanf and printf: Though scanf and printf are faster than cin and cout, they are more prone to errors. So, in this case, it's a trade-off between speed and safety. If speed is a priority, then the original code is already optimized.

Here is the optimized code:

```cpp
#include <cstdio>

int main() {
    int n, m;
    scanf("%d%d", &n, &m);
    printf("%d\n", n - m - 1);
    return 0;
}
```

Again, this code is very simple and already quite optimal. The modifications have been made mostly from the perspective of good programming practices and do not contribute significantly to run-time performance or memory usage improvement.