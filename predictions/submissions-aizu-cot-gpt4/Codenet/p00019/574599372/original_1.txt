Here are some optimization steps for the given C/C++ program:

1. Use pre-increment operator (++i) instead of post-increment operator (i++), because pre-increment operator is faster. It increments the value of i before the actual operation takes place.

2. Change data type of 'i' and 'n' to long long int. This is because the value of 'n' can be very large and it may cause overflow.

3. Your current code does not return any value from the main function. In C++, the main function should return an integer value to indicate that the program has finished running. Thus, we will add return 0 at the end of the main function.

4. The 'using namespace std' makes the entire std library available to you and could potentially lead to name conflicts. To avoid this, we will only use std:: in front of cin, cout and endl.

5. You can declare and initialize 'i' in the for loop itself to reduce the scope of 'i' to the loop only.

Here is the optimized program based on the steps above:

```cpp
#include <cstdio>
#include <iostream>

int main() {
  long long a = 1;
  long long n;
  std::cin >> n;
  for (long long i = 2; i <= n; ++i) {
    a *= i;
  }
  std::cout << a << std::endl;
  return 0;
}
```
Please note that this optimization may not have a significant impact on the performance of the program since modern compilers are usually able to optimize such things automatically. However, these are good practices to follow while coding in C++.