The given C++ program calculates the factorial of a given number 'n'. The main issue with the program is that it uses a long long integer to store the result of the factorial computation. Factorial of a number grows really fast and it will not take long for the result to overflow a long long integer (maximum value of long long int is 9223372036854775807). Hence, the program cannot calculate factorials of large numbers accurately.

Optimization Steps:

1. Since we are asked to make small modifications and not completely rewrite the program, we can't change the approach to store large numbers (like using arrays or strings to represent the number or using some form of Big Integer library). Instead, we can make use of the fact that most modern processors are optimized for handling multiplication and division operations. This means that we can replace the for loop with a while loop that multiplies 'a' by 'n' and then decrements 'n'. This has the benefit of reducing the number of iterations in the loop by half, which will result in a faster running time.

2. The variable 'i' is not used outside the loop, so it's better to declare it inside the loop itself. This makes the scope of 'i' limited to the loop, which is a good practice to follow.

3. The 'main' function should be declared with a return type of 'int'. In C++, it is good practice to return an exit code from the 'main' function. 

4. Using 'endl' to print a newline character and flush the stream is less efficient than simply printing a newline character '\n'. This is because 'endl' causes the output buffer to be flushed, which can slow down the program if you're doing a lot of output. 

Here is the optimized program:

```C++
#include <iostream>
using namespace std;

int main() {
  long long a = 1;
  int n;
  cin >> n;
  while (n > 1) {
    a *= n--;
  }
  cout << a << '\n';
  return 0;
}
```

Remember that this program will still overflow for larger inputs due to the limitation of long long int. If you need to calculate factorials of large numbers, you need a different approach to store and manipulate large numbers.