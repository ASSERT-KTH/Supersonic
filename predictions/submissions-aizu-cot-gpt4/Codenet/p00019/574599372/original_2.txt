This program calculates the factorial of a number n. The factorial of a number n is the product of all positive integers less than or equal to n. The optimization can be achieved by the following steps:

1. Using preincrement (++i) instead of postincrement (i++) in the loop: Preincrement is slightly faster than postincrement in C/C++ because postincrement creates a temporary variable, increments the original variable, and returns the temporary variable. However, preincrement increments the original variable and returns the original variable, saving the step of creating a temporary variable.
   
2. Reducing the number of times the variable 'a' is accessed: Each time a variable is accessed, it takes time. We can reduce the number of times 'a' is accessed by using a temporary variable 'temp' to hold the result of the multiplication, and then assigning 'temp' to 'a' after the multiplication.
   
3. Using 'fast I/O' to speed up the input/output operations: In competitive programming, cin and cout are slower than scanf and printf. We can use the 'ios_base::sync_with_stdio(false)' function and 'cin.tie(NULL)' function to speed up cin and cout.

Here is the optimized program:

```cpp
#include <cstdio>
#include <iostream>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long a = 1, temp;
  int i, n;
  cin >> n;
  for (i = 2; i <= n; ++i) {
    temp = a * i;
    a = temp;
  }
  cout << a << endl;
  return 0;
}
```

Please note that although the optimization steps mentioned above can make the code run slightly faster, they may not make a noticeable difference in the running time for this particular program because this program is already quite efficient. The time complexity of this program is O(n), which is the best time complexity we can achieve for a program that calculates the factorial of a number n.