In the given C++ code, the program takes an integer as input and calculates its factorial by iterating from 2 to n. However, this solution can be optimized in a few ways:

1. The 'long long' data type uses more memory than the 'int' data type. If the input number 'n' will not be very large, you may want to consider using 'int' instead of 'long long' to save memory.

2. The calculation of the factorial can be optimized using recursion. This will reduce the execution time of the program.

3. The 'i' variable is declared outside the for-loop scope. It's a good practice to declare the variable inside the for-loop scope to limit its scope and lifetime.

4. The main function return type is not declared which is not a good practice. Always specify the return type of functions.

Here is an optimized version of your code:

```cpp
#include <iostream>
using namespace std;

int calculateFactorial(int n) {
    if (n >= 1)
        return n*calculateFactorial(n - 1);
    else
        return 1;
}

int main() {
    int n;
    cin >> n;
    cout << calculateFactorial(n) << endl;
    return 0;
}
```

In this optimized version, we made the following changes:

1. Changed 'long long' to 'int'.
2. Added a recursive function 'calculateFactorial' to calculate the factorial.
3. Declared 'i' inside the for-loop.
4. Declared the return type of main function as int.