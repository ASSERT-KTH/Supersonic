Optimization Steps:

1. Use pre-increment instead of post-increment. Pre-increment is generally faster in C++ because it doesn't create a temporary variable holding the value of 'i' before incrementing it.

2. The 'main' function should return an 'int'. This is not an optimization, but it is a good coding practice and it is required by the C++ standard.

3. Use 'ios::sync_with_stdio' to speed up C++ I/O operations by unsynchronizing C++ standard streams with standard C streams. This can speed up I/O operations significantly if you don't need to mix C-style and C++-style I/O in your program. 

4. Include '\n' directly in the 'cout' statement, instead of using 'endl'. This can be faster because 'endl' causes a flush of the stream, which can be an expensive operation. Use '\n' instead when you don't need the flush.

5. You can use the 'auto' keyword to avoid explicitly specifying the type of 'i', and let the compiler infer it from the context. This can help prevent potential type-related bugs and make the code easier to maintain, although it won't make the code run faster.

Optimized Program:
```cpp
#include <iostream>
using namespace std;

int main() {
  ios::sync_with_stdio(false);
  long long a = 1;
  int n;
  cin >> n;
  for (auto i = 2; i <= n; ++i) {
    a = a * i;
  }
  cout << a << '\n';
  return 0;
}
```
Note: The optimization of this program depends on the particular compiler and its optimization settings. The above optimizations are general guidelines and may not improve performance on all compilers or systems.