First, let's identify potential optimization targets:

1. The variable `i` is declared outside the loop scope, which is not necessary in modern C++.
2. The multiplication operation inside the loop could be expensive if `n` is a large number.
3. The program is computing factorial of `n` which could potentially lead to overflow if `n` is large enough. This can be handled by using a larger data type or applying modulo operation if the problem allows for it.
4. The main function does not have a return type, which is not a good practice.

Now let's optimize the code:

1. Move the declaration of `i` into the loop. This makes the code cleaner and limits the scope of the variable.
2. Unfortunately, there is not much we can do to optimize the factorial computation without changing the algorithm or using extra libraries or functions.
3. If the problem allows for it, apply modulo operation to prevent overflow.
4. Add a return type to the main function.

The optimized code is:

```cpp
#include <iostream>
using namespace std;

int main() {
  long long a = 1;
  int n;
  cin >> n;
  for (int i = 2; i <= n; i++) {
    a = a * i;
  }
  cout << a << endl;
  return 0;
}
```

Note: If you are solving a problem where the output can be very large, you may need to consider using even larger data types or libraries that support arbitrary precision arithmetic. Also, some problems may allow you to use the modulo operator to prevent overflow. Always read the problem carefully and understand the constraints.