This program reads integers from input, uses them as indexes to set values in an array, then reads another set of integers from input and adds up the values in the array at those indexes. 

To optimize this program, we can take the following steps:

1. Use a smaller data type for the array. The array `c` can be an array of `char` instead of `int` because it only needs to store the values 0 and 1. This will significantly reduce the memory usage of the program, especially considering the size of the array.

2. Remove the `s` macro. Using `scanf` directly in the loop will make the program easier to read and understand. This may not improve performance, but it will improve readability, which is an important aspect of code optimization.

Here is the optimized version of the program:

```c
#include <stdio.h>

char c[999];
int a, b, d;

int main() {
  for (scanf("%d", &b), a = b; a--; c[b] = 1)
    scanf("%d", &b);
  for (scanf("%d", &b), a = b; a--; d += c[b])
    scanf("%d", &b);
  printf("%d\n", d);
  return 0;
}
```

This revised code accomplishes the same thing as the original code, but with less memory usage due to the use of a `char` array instead of an `int` array and improved readability by removing the `s` macro.