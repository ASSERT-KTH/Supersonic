Firstly let's understand the program.

The original program reads two sequences of integers from the input. For each number in the first sequence, it marks its corresponding index in the array c[] with 1. Then for each number in the second sequence, it sums up the values of the corresponding indices in the array c[]. Finally, it prints out the sum.

Here are the optimization steps we can take:

1. Use a smaller data type for the array: The array c[] is defined with 999 elements of type int, which typically take up 4 bytes each. Since c[] is only used to store the values 0 and 1, we can use a smaller data type to save memory. In C/C++, the smallest data type is char, which only takes up 1 byte.

2. Reduce the number of scanf function calls: The function scanf is called in each iteration of both loops. Function calls are expensive in terms of performance. We can move the scanf call out of the loop condition and into the loop body to reduce the number of function calls.

3. Use pre-decrement for loop counter: Pre-decrementing operator(--a) is faster than post-decrementing operator(a--), because post-decrementing needs to make a copy, increment the original value, and then return the copy, while pre-decrementing only needs to decrement the original value.

Here is the optimized version of the program:

```
#include <stdio.h>
#define s scanf("%d", &b)
char c[999];
int a, b, d;
int main() {
  s;
  for (a = b; --a >= 0;) {
    s;
    c[b] = 1;
  }
  s;
  for (a = b; --a >= 0;) {
    s;
    d += c[b];
  }
  printf("%d\n", d);
  return 0;
}
```
In this version of the program, we have saved memory by using a smaller data type for the array c[] and we have increased speed by reducing the number of function calls and using pre-decrement for the loop counter.