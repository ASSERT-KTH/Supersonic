The optimization of the given C/C++ program can be done in several steps:

1. The first thing that can be noticed is that the algorithm used to find the common elements in the two arrays is of O(n^2), which is not efficient. We can use a sorting and binary search algorithm to make it O(n log n), which is much more efficient.

2. The scanf function for reading inputs is not efficient. We can use the getchar_unlocked function instead, which is faster. But in this context, the performance gain is negligible because it is not inside a loop. So, we can leave it as it is.

3. Instead of breaking the loop when a match is found, we can use the continue statement which will skip the current iteration and move to the next one. This will help in reducing unnecessary iterations.

4. If the array size is huge, then static allocation of arrays will lead to stack overflow. So, we can use dynamic memory allocation which allocates memory in heap.

Here is the optimized code:

```cpp
#include <stdio.h>
#include <stdlib.h>
#include <algorithm>

int binary_search(int* A, int n, int key) {
    int left = 0;
    int right = n;
    int mid;
    while (left < right) {
        mid = (left + right) / 2;
        if (key == A[mid]) return 1;
        if (key > A[mid]) left = mid + 1;
        else if (key < A[mid]) right = mid;
    }
    return 0;
}

int main() {
    int i, n, q, C = 0;
    scanf("%d", &n);
    int *S = (int*)malloc(n * sizeof(int));
    for (i = 0; i < n; i++) {
        scanf("%d", &S[i]);
    }
    std::sort(S, S + n);
    scanf("%d", &q);
    for (i = 0; i < q; i++) {
        int t;
        scanf("%d", &t);
        if (binary_search(S, n, t)) {
            C++;
        }
    }
    printf("%d\n", C);
    free(S);
    return 0;
}
```

Note: We have utilized C++ STL sort function and dynamically allocated memory, so this code is now written in C++. If you want to keep it in C, you would need to write your own sort function and keep using malloc/free for dynamic memory allocation.