The given code uses a nested loop to find the common elements in the two arrays S and T. The time complexity of this approach is O(n*q) which can cause the program to run slowly when n and q are large.

Here is the step by step optimization process:

1. Reduce nested loops: The current program uses nested loops to compare every element in S with every element in T, which is unnecessary and time-consuming. This can be optimized by using a hash map or an array to count the occurrences of each number in S and then just check for each number in T.

2. Use dynamic memory allocation: The arrays S and T are fixed to 100 elements. If the user inputs more than 100 numbers, this would lead to a buffer overflow. To prevent this, we can allocate memory dynamically according to the size of n and q.

3. Correct the comparison: In the nested loops, it's wrongly comparing S[k] with T[i]. It should be S[i] with T[k].

Optimized Code:

```C
#include <stdio.h>
#include <stdlib.h>

int main() {
  int i, k, n, q, C = 0;
  scanf("%d", &n);
  int *S = (int*) malloc(n * sizeof(int));
  for (i = 0; i < n; i++) {
    scanf("%d", &S[i]);
  }
  scanf("%d", &q);
  int *T = (int*) malloc(q * sizeof(int));
  for (i = 0; i < q; i++) {
    scanf("%d", &T[i]);
  }
  int hash[1000000] = {0};
  for (i = 0; i < n; i++) {
    hash[S[i]]++;
  }
  for (k = 0; k < q; k++) {
    if (hash[T[k]] > 0) {
      C++;
    }
  }
  printf("%d\n", C);
  free(S);
  free(T);
  return 0;
}
```
This code significantly improves the performance by reducing the time complexity from O(n*q) to O(n+q). It also handles dynamic memory allocation to avoid buffer overflow. 

Note: This optimization assumes that the elements of the arrays S and T are non-negative and less than 1,000,000. If this is not the case, a different approach may be needed.