Here are the steps we can take to optimize this program:

1. Remove the `T` array: We don't need to store all the numbers of the second input sequence. We can read each number one at a time and immediately check if it is in the `S` array. This will save memory.

2. Use a binary search: If the `S` array is sorted, we can use a binary search to find each number from the second sequence. This will reduce the time complexity from O(n*q) to O(n log n + q log n), which is a significant improvement if `n` and `q` are large. However, in this case, we need to sort the `S` array first, which will add an additional O(n log n) to the time complexity.

Here's the optimized program:

```
#include <stdio.h>
#include <algorithm>

int binary_search(int S[], int n, int key) {
  int left = 0;
  int right = n;
  int mid;
  while (left < right) {
    mid = (left + right) / 2;
    if (key == S[mid]) return 1;
    if (key > S[mid]) left = mid + 1;
    else if (key < S[mid]) right = mid;
  }
  return 0;
}

int main() {
  int i, n, q, t, C = 0, S[100];
  scanf("%d", &n);
  for (i = 0; i < n; i++) {
    scanf("%d", &S[i]);
  }
  std::sort(S, S+n);
  scanf("%d", &q);
  for (i = 0; i < q; i++) {
    scanf("%d", &t);
    C += binary_search(S, n, t);
  }
  printf("%d\n", C);
  return 0;
}
```

Note: This program uses the `<algorithm>` library for the `std::sort` function. Also, it defines the `binary_search` function to perform binary search.