Here are the possible optimization steps:

1. Reduce header inclusion: The `#include <bits/stdc++.h>` is a header file in g++ that includes almost every standard library. Including all these libraries increases the program's compilation time. Therefore, we only need to include necessary header files.

2. Use `iostream` instead of `stdio.h`: In C++, it's better to use `cin` and `cout` for input and output operations. They are safer and more flexible than `scanf` and `printf`.

3. Avoid using `std::complex`: The `std::complex` class is unnecessary here. We can calculate the real and imaginary part manually.

4. Avoid using `std::endl` for new line: `std::endl` is slower than `\n` because it causes a flush operation, which is usually unnecessary.

5. Use Fast I/O operations: We can use faster I/O operations by using `ios_base::sync_with_stdio(false); cin.tie(NULL);` in the beginning of the main function.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n;
  double ax, ay, bx, by, cx, cy, dx, dy;
  cin >> n;
  while (n--) {
    cin >> ax >> ay >> bx >> by;
    cin >> cx >> cy >> dx >> dy;
    double real = (bx - ax) * (dx - cx);
    double imag = (bx - ax) * (cy - dy);
    if (imag == 0)
      cout << "2\n";
    else if (real == 0)
      cout << "1\n";
    else
      cout << "0\n";
  }
  return 0;
}
```
Note: The performance improvement of these optimization techniques might be negligible for this small program, but they are beneficial for larger programs.