The given code seems to be a kind of number factorization program. The computation is done for numbers up to 300000 and the computed data is stored in 'lists' and 'checked' arrays. The data in these arrays are later used in the while loop where the number n is entered by the user. 

Optimization Steps:
1. The major optimization can be done in the while loop. Currently, for each input number n, the code is iterating over the entire 'lists' array and checking if the number n is divisible by the value in the 'lists' array. This can be optimized by breaking the loop as soon as we reach a value in 'lists' that is greater than n. This is because a number can not be divided by a number greater than itself, so it is pointless to check further.

2. We can avoid the use of the 'ans' vector. Instead of storing the factors in the 'ans' vector and then printing them, we can directly print them as soon as we find a factor. This will save memory.

3. We can avoid using the macro rep and directly use the for loop with the appropriate conditions. This will reduce the macro overhead and make the code more readable.

Optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;
#define int long long
signed main() {
  cin.tie(0);
  ios::sync_with_stdio(false);
  vector<int> lists;
  bool checked[300000 + 1] = {};
  // equivalent to rep2(i, 2, 300000 + 1)
  for(int i = 2; i < 300001; i++) {
    if (checked[i])
      continue;
    if (i % 7 == 1 || i % 7 == 6) {
      lists.push_back(i);
      int k = 1;
      while (i * k <= 300000) {
        checked[i * k] = true;
        k++;
      }
    }
  }
  while (true) {
    int n;
    cin >> n;
    if (n == 1)
      break;
    cout << n << ':';
    for (auto p : lists) {
      if (p > n)
        break;
      if (n % p == 0) {
        cout << " " << p;
      }
    }
    cout << endl;
  }
}
```
This optimized code should perform better in terms of runtime and memory usage.