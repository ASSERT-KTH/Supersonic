This is a problem of generating and querying a list of numbers which are either modulo 1 or 6 of 7 and are primes (not divisible by any other number). In this program, the vector 'lists' stores the prime numbers generated by checking the divisibility condition and the array 'checked' helps keep track of numbers already checked for prime. 

The optimization can be done in the following steps:

1. Remove the unnecessary header files. The program does not use functionalities provided by many of them.

2. The use of the 'lists' vector is not necessary. We are storing all the prime numbers and then iterating over them again to answer the queries. Instead, we can answer the queries in the generation phase itself. So, we can remove the 'lists' vector.

3. Avoid using 'long long' data type for the 'i' and 'k' variables in the prime number generation phase. These variables aren't going to have values more than 300000 so 'int' would be sufficient.

4. In the query phase, use 'auto' keyword to iterate over the vector. This will automatically deduce the correct data type and makes the code more readable.

5. We can avoid using the 'endl' to output a new line. 'endl' flushes the stream which is not necessary here. We can simply print '\n'.

The optimized code is:

```cpp
#include <iostream>
using namespace std;

signed main() {
  cin.tie(0);
  ios::sync_with_stdio(false);
  bool checked[300001] = {};
  for (int i = 2; i <= 300000; i++) {
    if (checked[i])
      continue;
    if (i % 7 == 1 || i % 7 == 6) {
      int k = 1;
      while (i * k <= 300000) {
        checked[i * k] = true;
        k++;
      }
    }
  }
  while (true) {
    int n;
    cin >> n;
    if (n == 1)
      break;
    cout << n << ':';
    for (int i = 2; i <= n; i++) {
      if (!checked[i] && (i % 7 == 1 || i % 7 == 6)) {
        cout << " " << i;
      }
    }
    cout << '\n';
  }
}
```

Please note that the logic of the original code seems to have a bug. It considers the first number that is either 1 or 6 mod 7 as a prime, which is incorrect. For example, 14 is not a prime number but according to the code it is considered a prime because 14 mod 7 is 0. But this bug is not fixed in the optimized code because the task was to optimize the program without completely rewriting it.