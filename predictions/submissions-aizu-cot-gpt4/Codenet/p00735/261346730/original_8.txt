This code is fairly optimized already, but there are few small improvements that can be made. 

1. The "lists" vector is used as a temporary storage for the numbers that verified the conditions. To reduce the memory footprint, you could consider using a std::vector::reserve method to allocate memory for this vector at once, reducing the number of memory allocations.
   
2. We can see that the 'ans' vector is only used for storing the results and then printing them. Instead of storing these values in a vector and then iterating through the vector to print them, we can print the values directly. This step will save space as we will not need to store the values in 'ans' vector.
   
3. The 'checked' array is of size 300000+1. We can see that the values of 'checked' array are only updated for the values of index 'i' such that 'i' % 7 is either 1 or 6. So instead of creating an array of size 300001, we can create an array of size (300001/7)*2. This will save a lot of space.

Optimized code:

```
#include <iostream>
#include <vector>
using namespace std;
#define rep2(i, a, b) for (int i = (a); i < (b); i++)
signed main() {
  cin.tie(0);
  ios::sync_with_stdio(false);
  vector<int> lists;
  lists.reserve(300000);
  bool checked[(300000 / 7) * 2 + 1] = {};
  rep2(i, 2, 300000 + 1) {
    if (checked[i])
      continue;
    if (i % 7 == 1 || i % 7 == 6) {
      lists.push_back(i);
      int k = 1;
      while (i * k <= 300000) {
        checked[i * k] = true;
        k++;
      }
    }
  }
  while (true) {
    int n;
    cin >> n;
    if (n == 1)
      break;
    cout << n << ':';
    for (auto p : lists) {
      if (n % p == 0) {
        cout << " " << p;
      }
    }
    cout << endl;
  }
}
```