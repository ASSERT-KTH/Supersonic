Optimization Steps:

1. Reducing unnecessary overhead of sorting: The vector "id" is sorted and made unique. However, it is only used for indexing and not for any operations that would require sorted data. We can use a set instead, which automatically discards duplicates and is faster.

2. Memory Optimization: We are using 2D arrays "d" and "dp" of size 2005x2005, which might not be fully utilized depending upon the input. Instead, we can use vectors of vectors and resize them as per the requirement.

3. Minimizing redundant computations: In the nested loop where we compute "res", the condition "if (j >= k)" is checked in each iteration. This check is redundant for k=0 to j and can be avoided by starting the loop from j.

4. Avoiding usage of macro: Macros like "#define REP(i, k, n)" can be replaced with inline functions. Macros can lead to issues like multiple evaluation, lack of type safety, and poor debugging.

Optimized Program:

```
#include <algorithm>
#include <iostream>
#include <set>
#include <vector>
using namespace std;
typedef long long ll;
inline void REP(int& i, int k, int n) { for (i = k; i < n; i++); }
inline void rep(int& i, int n) { for (i = 0; i < n; i++); }

int main() {
  int n, K;
  cin >> n >> K;
  set<int> idSet;
  vector<vector<int>> v(2005);
  rep(i, n) {
    int a, b;
    cin >> a >> b;
    idSet.insert(b - 1);
    v[b - 1].push_back(a);
  }
  vector<int> id(idSet.begin(), idSet.end());
  rep(i, id.size()) {
    int j = id[i];
    sort(v[j].begin(), v[j].end(), greater<int>());
  }
  vector<vector<ll>> d(2005);
  rep(i, 2005) d[i].resize(2005, 0);
  vector<pair<int, ll>> p;
  rep(i, id.size()) {
    int j = id[i];
    REP(k, 1, v[j].size() + 1) {
      d[j][k] += d[j][k - 1] + v[j][k - 1] + (k - 1) * 2;
      p.push_back(make_pair(k, d[j][k]));
    }
  }
  vector<vector<ll>> dp(2005);
  rep(i, 2005) dp[i].resize(2005, 0);
  rep(i, id.size()) {
    rep(j, K + 1) {
      ll res = dp[i][j];
      for(int k = j; k >= 0; k--) {
        res = max(res, dp[i][j - k] + d[id[i]][k]);
      }
      dp[i + 1][j] = res;
    }
  }
  cout << dp[id.size()][K] << endl;
  return 0;
}
```