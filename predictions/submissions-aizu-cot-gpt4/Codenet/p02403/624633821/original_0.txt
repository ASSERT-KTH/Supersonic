The C++ program you provided is primarily performing two tasks: 
1. Taking user input and filling two arrays (H[] and W[]), until it receives input of two zeroes.
2. Printing a rectangular shape of '#' characters as per the dimensions given in H[] and W[] arrays.

First, let's explain step by step how to optimize the code:

1. Avoid flushing the output buffer frequently: Instead of using 'printf' inside the inner loop, we can create a string of '#' characters and print it once for each row. This will reduce the number of times the output buffer is flushed, thereby reducing the running time.

2. Use 'ios_base::sync_with_stdio(false)': This unties C++'s standard streams from their C counterparts, which can speed up I/O operations.

3. Use '\n' instead of printf("\n"): The '\n' character is faster than printf("\n") as printf() requires more processing to interpret the format specifier.

4. Use vectors instead of arrays: Vectors in C++ are dynamic and don't require a fixed size to be declared at the beginning. This will save memory if the user enters less than 100 pairs.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <string>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    vector<int> H, W;
    int h, w;
    while (1) {
        cin >> h >> w;
        if (h == 0 && w == 0)
            break;
        H.push_back(h);
        W.push_back(w);
    }
    for (size_t b = 0; b < H.size(); b++) {
        string row(W[b], '#');
        for (int i = 0; i < H[b]; i++) {
            cout << row << '\n';
        }
        cout << '\n';
    }
    return 0;
}
```
Please note that the optimizations are small and the impact may not be significant for smaller inputs. The actual improvement can be observed when dealing with larger inputs.