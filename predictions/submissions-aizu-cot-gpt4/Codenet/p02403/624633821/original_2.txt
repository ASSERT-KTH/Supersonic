Step 1: Using `scanf` instead of `cin` and `printf` instead of `cout` for faster IO operations. These are basic IO operations in C++ and C, and `scanf`/`printf` is faster than `cin`/`cout`.

Step 2: The nested loop inside the second while loop is used to print a rectangle of '#' characters. Instead of printing each character individually, you can create a string of '#' characters and print it all at once. This will improve the performance significantly in terms of time complexity.

Step 3: Instead of checking `H[a] == 0 && W[a] == 0` after every input, you can put this condition in the while loop itself.

Optimized Code:

```
#include <stdio.h>
#include <string>
using namespace std;
int main() {
  int a = 0, H[100], W[100];
  while (scanf("%d %d", &H[a], &W[a]) && (H[a] != 0 && W[a] != 0)) {
    a++;
  }
  for (int b = 0; b < a; b++) {
    string s(W[b], '#');
    for (int i = 0; i < H[b]; i++) {
      printf("%s\n", s.c_str());
    }
    printf("\n");
  }
  return 0;
}
```

This optimized version of the code is faster in terms of input/output operations and also reduces the number of print operations, thus making it more efficient.