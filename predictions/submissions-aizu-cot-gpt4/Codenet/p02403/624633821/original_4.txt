Optimization Steps:

1. We can use the `'\n'` instead of `endl` when we need to print a new line. The `endl` not only moves to the next line but also flushes the stream, which could slow down our program if we are doing multiple outputs. 

2. We can use `putchar('\n')` instead of `printf("\n")` to print a new line. `putchar()` is faster than `printf()` because it has less overhead.

3. We can merge the two while loops into one. This will reduce the number of iterations.

4. We can use `ios_base::sync_with_stdio(false)` to optimize the speed of I/O operations. This will disable the synchronization between the C and C++ standard streams.

5. We can use `cin.tie(NULL)` to untie `cin` from `cout`. By default, before each I/O operation with `cin`, all `cout` buffers are flushed. By untying them, we can avoid this unnecessary flushing.

Here is the optimized program:

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int a = 0, H[100], W[100];
  while (1) {
    cin >> H[a] >> W[a];
    if (H[a] == 0 && W[a] == 0)
      break;
      
    for (int i = 0; i < H[a]; i++) {
      for (int j = 0; j < W[a]; j++) {
        putchar('#');
      }
      putchar('\n');
    }
    putchar('\n');
    a++;
  }
  
  return 0;
}
```