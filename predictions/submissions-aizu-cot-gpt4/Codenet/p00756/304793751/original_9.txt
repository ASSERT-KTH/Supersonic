Here are the steps for optimization:

1. Instead of using `bits/stdc++.h`, include only the libraries which are actually used in the program. This will help in reducing the compilation time. In this code, we only need `iostream`, `algorithm` and `cstring`.

2. Instead of using `cin >> n;`, use `scanf("%d", &n);`. The `scanf` function is faster than `cin`. Similarly, use `printf` instead of `cout`.

3. Instead of using `fill_n(memo, 1 << n, false);`, use `memset(memo, false, sizeof(memo));`. The `memset` function is faster.

4. Instead of using `max` function in `ret = max(ret, dfs(to_bit));`, use ternary operator. It will be faster.

Here is the optimized code:

```cpp
#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

int n;
int x[24], y[24], r[24], c[24];
bool memo[1 << 24];

bool ok(int a, int bit) {
  for (int i = 0; i < a; i++) {
    if (((bit >> i) & 1) == 0)
      continue;
    int dist = (x[i] - x[a]) * (x[i] - x[a]) + (y[i] - y[a]) * (y[i] - y[a]);
    int sum = (r[i] + r[a]) * (r[i] + r[a]);
    if (dist < sum)
      return false;
  }
  return true;
}

int dfs(int bit) {
  memo[bit] = true;
  int ret = n;
  for (int i = 0; i < n; i++)
    if ((bit >> i) & 1)
      ret--;
  for (int i = 0; i < n; i++) {
    if (((bit >> i) & 1) == 0 || ok(i, bit) == false)
      continue;
    for (int j = i + 1; j < n; j++) {
      if (((bit >> j) & 1) == 0 || c[i] != c[j])
        continue;
      int to_bit = (bit ^ (1 << i)) ^ (1 << j);
      if (ok(j, bit) && !memo[to_bit]) {
        ret = (ret > dfs(to_bit)) ? ret : dfs(to_bit);
      }
    }
  }
  return ret;
}

void solve() {
  memset(memo, false, sizeof(memo));
  printf("%d\n", dfs((1 << n) - 1));
}

bool input() {
  scanf("%d", &n);
  if (!n)
    return false;
  for (int i = 0; i < n; i++)
    scanf("%d %d %d %d", &x[i], &y[i], &r[i], &c[i]);
  return true;
}

int main() {
  while (input())
    solve();
  return 0;
}
```