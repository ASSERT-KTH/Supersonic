Step 1: Use vector instead of raw arrays:
Vectors in C++ are dynamic and offer features like automatic memory management, bound-checked access etc which are not available with raw arrays. So, we can replace the arrays p, b, a and use with vectors. 

Step 2: Reserve space in vectors:
When you know the size of the vector in advance, reserving space can help prevent unnecessary re-allocations and copies when the vector grows.

Step 3: Use prefix increment (++i) instead of postfix (i++):
For primitive types like int, there is no significant performance difference, but for complex types, prefix increment can be more efficient as it avoids creation of a temporary object.

Here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
#define fs first
#define sc second
using namespace std;
typedef long long ll;

int main() {
  cin.tie(0);
  std::ios::sync_with_stdio(0);
  int n;
  cin >> n;
  
  vector<pair<ll, int>> p(n), b(n);
  vector<ll> a(n);
  vector<bool> use(n);
  
  p.reserve(n);
  b.reserve(n);
  a.reserve(n);
  use.reserve(n);
  
  for (int i = 0; i < n; ++i) {
    cin >> a[i] >> b[i].fs;
    p[i] = make_pair(a[i], i);
    b[i].sc = i;
    use[i] = false;
  }
  sort(p.begin(), p.end());
  sort(b.begin(), b.end());

  int ans = 0;
  ll sum = 0;
  int id = 0, num = 0;
  for (int i = 0; i < n; ++i) {
    if (!use[b[i].sc]) {
      sum += a[b[i].sc];
      use[b[i].sc] = true;
      ++num;
    }
    while (id < n && p[id].fs <= b[i].fs) {
      if (!use[p[id].sc]) {
        sum += p[id].fs;
        use[p[id].sc] = true;
        ++num;
      }
      ++id;
    }
    while (id < n) {
      if (!use[p[id].sc]) {
        if (sum + p[id].fs > (num + 1) * b[i].fs)
          break;
        sum += p[id].fs;
        use[p[id].sc] = true;
        ++num;
      }
      ++id;
    }
    if (sum <= num * b[i].fs)
      ans = max(ans, num);
    sum -= a[b[i].sc];
    --num;
  }
  cout << ans << endl;
}
```