Here are some optimization steps:

1. Remove unused headers: There are several headers included that are not used in the program. Removing them will clean up the code and may reduce compilation time. 

2. Avoid unnecessary computation: In the 'isso' function, there's an empty if statement. We can simply invert the condition to avoid this.

3. Use more efficient data structures: In the 'dfs2' function, instead of creating a new vector each time we recurse, we can instead pass the vector as a reference to the function. This will avoid the overhead of creating and destroying many vectors.

4. Use reserve() for vectors: If we know the size of the vector beforehand, we can use the reserve() function to preallocate memory and avoid reallocations as we add elements to it.

5. Avoid unnecessary substr(): In the 'main' function, we are using substr() function to extract groupname and membername, which can be costly. We can instead use a stringstream to extract the groupname and membername from the string.

Now let's implement these changes:

```cpp
#include <iostream>
#include <map>
#include <set>
#include <string>
#include <vector>
#include <sstream>
#include <assert.h>
using namespace std;

bool isso(long long int a) {
  if (a == 1 || a == 0)
    return false;
  for (long long int i = 2; i * i <= a; ++i) {
    if (!(a % i)) {
      return false;
    }
  }
  return true;
}

long long int powint(long long int a, long long int b) {
  assert(b >= 0);
  if (b == 0)
    return 1;
  if (b == 1)
    return a;
  long long int ans = 1;
  long long int aa = powint(a, b / 2);
  ans *= aa * aa;
  if (b % 2)
    ans *= a;
  return ans;
}

vector<vector<int>> involve;

void dfs2(int now, vector<int>& ans, vector<bool>& used) {
  if (used[now])
    return;
  else {
    used[now] = true;
  }
  for (auto i : involve[now]) {
    if (involve[i].size()) {
      dfs2(i, ans, used);
    } else {
      ans.push_back(i);
    }
  }
}

int main() {
  while (1) {
    int num = 0;
    map<string, int> mp;
    set<int> ed;
    int N;
    cin >> N;
    if (!N)
      break;
    involve.clear();
    involve.resize(100000);
    for (int i = 0; i < N; ++i) {
      string st;
      cin >> st;
      stringstream ss(st);
      string groupname;
      getline(ss, groupname, ':');
      if (!mp.count(groupname)) {
        mp[groupname] = num++;
      }
      string membername;
      while (getline(ss, membername, ',')) {
        if (!(mp.count(membername))) {
          mp[membername] = num++;
        }
        involve[mp[groupname]].push_back(mp[membername]);
        ed.emplace(mp[membername]);
      }
    }
    vector<bool> used(100001, false);
    vector<int> allnames;
    allnames.reserve(100000);
    dfs2(0, allnames, used);
    sort(allnames.begin(), allnames.end());
    const int ans(unique(allnames.begin(), allnames.end()) - allnames.begin());
    cout << ans << endl;
  }
  return 0;
}
```

Please note that the optimizations suggested may not have a significant impact on the performance because the performance depends on the complexity of the algorithm and the input data. The 'dfs2' function, for instance, is recursive and can lead to stack overflow for large inputs. This can't be optimized without changing the algorithm. Similarly, the 'isso' function checks for prime numbers in a very inefficient way. Prime numbers up to 'a' can be precomputed and checked in O(1) time, but this would also require changing the algorithm.