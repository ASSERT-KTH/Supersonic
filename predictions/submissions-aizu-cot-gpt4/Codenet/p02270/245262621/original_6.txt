Here are some points where we can optimize the code:

1. The variable "num_packet" and "num_track" are global variables. We can reduce the scope of these variables to the main function, which can save memory.

2. Avoid decrementing the loop variable inside the loop in canAlloc() function. This will reduce the number of iterations.

3. We can reduce the number of variables in the main function. The variable "max_weight" is unnecessary. We can use "low" instead of "max_weight". This will save memory.

4. Use prefix increment for track_id in canAlloc() function. Prefix increment is more efficient than postfix increment in C/C++.

Here is the optimized C/C++ program:

```c++
#include <stdbool.h>
#include <stdio.h>
#define MAX_PACKET 100000
int weight[MAX_PACKET];
bool canAlloc(int num_packet, int num_track, long capacity);
int main(void) {
  int num_packet, num_track;
  scanf("%d %d", &num_packet, &num_track);
  long low = 0;
  long sum_weight = 0;
  for (int i = 0; i < num_packet; i++) {
    scanf("%d", &weight[i]);
    if (weight[i] > low) {
      low = weight[i];
    }
    sum_weight += weight[i];
  }
  long upp = sum_weight;
  while (low < upp) {
    long mid = (low + upp) / 2;
    if (canAlloc(num_packet, num_track, mid)) {
      upp = mid;
    } else {
      low = mid + 1;
    }
  }
  printf("%ld\n", low);
  return 0;
}
bool canAlloc(int num_packet, int num_track, long capacity) {
  long alloced_in_one = 0;
  int track_id = 0;
  for (int i = 0; i < num_packet; i++) {
    if (alloced_in_one + weight[i] <= capacity) {
      alloced_in_one += weight[i];
    } else {
      alloced_in_one = weight[i];
      if (++track_id == num_track) {
        return false;
      }
    }
  }
  return true;
}
```

In the optimized version of the program, we have reduced the scope of global variables, reduced the number of iterations in the loop and the number of variables in the main function, and used prefix increment, which is more efficient.