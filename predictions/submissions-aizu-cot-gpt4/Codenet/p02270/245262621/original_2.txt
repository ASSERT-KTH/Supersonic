The existing code is already optimized in terms of algorithmic complexity, using a binary search to find the minimum possible load for a track. However, there are some small improvements that can be made to slightly reduce memory usage and potentially improve performance:

1. Use `register` storage class specifier: In C/C++, the `register` keyword suggests to the compiler that the variable will be frequently used and that you want it to provide the fastest possible access to it. Many modern compilers will automatically do this optimization, but it doesn't hurt to suggest it.

2. Minimize global variables: Global variables consume memory for the entire duration of the program, so reducing their usage can decrease memory usage. Here, `num_packet`, `num_track`, and `weight` are global. We could pass them as function parameters instead.

3. Use `const` when possible: If a variable should not be changed, mark it as `const`. This can help the compiler optimize, and also makes the code easier to understand and less prone to bugs.

4. Using prefix increment: Prefix increment (++i) could be potentially faster than postfix increment (i++) as the latter involves a copy operation. Modern compilers usually optimize this, but we can make the change just to be sure.

Here is the optimized code:

```cpp
#include <stdbool.h>
#include <stdio.h>
#define MAX_PACKET 100000
bool canAlloc(int weight[MAX_PACKET], int num_packet, int num_track, long capacity);

int main(void) {
  register int i;
  int num_packet, num_track;
  int weight[MAX_PACKET];
  
  scanf("%d %d", &num_packet, &num_track);
  
  register int max_weight = 0;
  register long sum_weight = 0;
  
  for (i = 0; i < num_packet; ++i) {
    scanf("%d", &weight[i]);
    if (weight[i] > max_weight) {
      max_weight = weight[i];
    }
    sum_weight += weight[i];
  }
  
  long low = max_weight;
  long upp = sum_weight;
  
  while (low < upp) {
    long mid = (low + upp) / 2;
    if (canAlloc(weight, num_packet, num_track, mid)) {
      upp = mid;
    } else {
      low = mid + 1;
    }
  }
  
  printf("%ld\n", low);
  return 0;
}

bool canAlloc(int weight[MAX_PACKET], int num_packet, int num_track, long capacity) {
  register long i = 0;
  register long alloced_in_one = 0;
  register int track_id = 0;
  
  for (i = 0; i < num_packet; ++i) {
    if (alloced_in_one + weight[i] <= capacity) {
      alloced_in_one += weight[i];
    } else {
      alloced_in_one = 0;
      --i;
      if (++track_id == num_track) {
        return false;
      }
    }
  }
  
  return true;
}
```

Please note that, the `register` keyword is pretty much obsolete in modern C/C++ programming. Modern compilers are usually smart enough to perform optimizations like caching frequently-used variables in registers automatically. So, use of `register` keyword is not necessary, but for the sake of this optimization task, we can use it.