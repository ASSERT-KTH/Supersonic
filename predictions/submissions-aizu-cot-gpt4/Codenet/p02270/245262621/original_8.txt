Here are the optimization steps:

1. Instead of computing `low + upp` and then dividing it by 2, we can compute `(upp - low) / 2 + low`. It avoids overflow if `low + upp` is larger than the maximum value that can be stored in a `long`.

2. In the `canAlloc` function, there is no need to decrement `i` and then increment it in the next loop iteration. We can instead put the `i++` in the `else` block. 

3. Instead of writing `++track_id` inside the `if` condition, we can move it out as a separate statement to make the code more readable.

4. Instead of using `int` for `num_packet` and `num_track`, we can use `size_t` which is an unsigned integer type and is typically used for array indexing and loop counting. It can represent the size of any object in bytes and is therefore used when the value can only be positive.

5. We can use `auto` for automatic type deduction to make the code cleaner and more maintainable.

Here's the optimized version of your program:

```cpp
#include <stdbool.h>
#include <stdio.h>
#define MAX_PACKET 100000
size_t num_packet;
size_t num_track;
int weight[MAX_PACKET];
bool canAlloc(long capacity);
int main(void) {
  auto i;
  scanf("%zu %zu", &num_packet, &num_track);
  int max_weight = 0;
  long sum_weight = 0;
  for (i = 0; i < num_packet; i++) {
    scanf("%d", &weight[i]);
    if (weight[i] > max_weight) {
      max_weight = weight[i];
    }
    sum_weight += weight[i];
  }
  auto low = max_weight;
  auto upp = sum_weight;
  while (low < upp) {
    auto mid = (upp - low) / 2 + low;
    if (canAlloc(mid)) {
      upp = mid;
    } else {
      low = mid + 1;
    }
  }
  printf("%ld\n", low);
  return 0;
}
bool canAlloc(long capacity) {
  auto i = 0;
  auto alloced_in_one = 0;
  auto track_id = 0;
  for (i = 0; i < num_packet;) {
    if (alloced_in_one + weight[i] <= capacity) {
      alloced_in_one += weight[i];
      i++;
    } else {
      alloced_in_one = 0;
      track_id++;
      if (track_id == num_track) {
        return false;
      }
    }
  }
  return true;
}
```