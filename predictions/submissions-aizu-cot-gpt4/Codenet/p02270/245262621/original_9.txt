The given C/C++ program is already quite efficient, but there are some minor optimizations you can do:

1. In the canAlloc() function, instead of using an else block to reset the variables and decrement i, you can directly increase the track_id and continue to the next iteration. This will avoid unnecessary checks.
2. Use prefix increment (++i) instead of postfix (i++) in all the loops. Although, this won't make a significant difference in this program, it is a general good practice as prefix increment is faster than postfix.
3. Use "const int" instead of "#define" for MAX_PACKET. It is better to use const variables instead of #define macros, as const variables are type-safe and can be debugged.
4. Instead of using bool data type, we can use int. Although, this won't make a significant difference, using int can be slightly faster due to the way C/C++ handles bool and int.

Here is the optimized version of the given program:

```cpp
#include <stdio.h>
const int MAX_PACKET = 100000;
int num_packet;
int num_track;
int weight[MAX_PACKET];
int canAlloc(long capacity);
int main(void) {
  int i;
  scanf("%d %d", &num_packet, &num_track);
  int max_weight = 0;
  long sum_weight = 0;
  for (i = 0; i < num_packet; ++i) {
    scanf("%d", &weight[i]);
    if (weight[i] > max_weight) {
      max_weight = weight[i];
    }
    sum_weight += weight[i];
  }
  long low = max_weight;
  long upp = sum_weight;
  while (low < upp) {
    long mid = (low + upp) / 2;
    if (canAlloc(mid)) {
      upp = mid;
    } else {
      low = mid + 1;
    }
  }
  printf("%ld\n", low);
  return 0;
}
int canAlloc(long capacity) {
  long i = 0;
  long alloced_in_one = 0;
  int track_id = 0;
  for (i = 0; i < num_packet; ++i) {
    if (alloced_in_one + weight[i] <= capacity) {
      alloced_in_one += weight[i];
    } else {
      alloced_in_one = weight[i];
      if (++track_id == num_track) {
        return 0;
      }
    }
  }
  return 1;
}
```