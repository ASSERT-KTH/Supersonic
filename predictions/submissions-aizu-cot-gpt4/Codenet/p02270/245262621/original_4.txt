First, let's examine the code and identify parts that can be optimized. 

1. Memory Usage: The 'weight' array is declared with a maximum size of 100000. This means that, even if you have only 10 packets, you are still allocating memory for 100000 integers. This is a waste of memory. We need to allocate only the required amount of memory, which is 'num_packet'. 

2. Running Time: In the 'canAlloc' function, the 'for' loop has an 'if' condition which checks if the weight of a packet plus the weight already allocated is less than or equal to the capacity. When it's not, it decreases the loop variable 'i' by one, which means the next iteration will check the same packet again. This is redundant and can be avoided by re-structuring the loop.

Now, let's make the changes step by step:

1. Use dynamic memory allocation for 'weight' array: Instead of statically allocating the maximum size for the 'weight' array, we can use dynamic memory allocation. This way, we only allocate the exact amount of memory we need.

2. Re-structure the 'for' loop in 'canAlloc' function: We can change the 'for' loop into a 'while' loop. This way, we only increment 'i' when we successfully allocate a packet, and we don't need to decrement it when we fail to allocate.

Here is the optimized code:

```c
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#define MAX_PACKET 100000
int num_packet;
int num_track;
int *weight;
bool canAlloc(long capacity);

int main(void) {
  int i;
  scanf("%d %d", &num_packet, &num_track);
  weight = (int *)malloc(num_packet * sizeof(int));
  int max_weight = 0;
  long sum_weight = 0;
  for (i = 0; i < num_packet; i++) {
    scanf("%d", &weight[i]);
    if (weight[i] > max_weight) {
      max_weight = weight[i];
    }
    sum_weight += weight[i];
  }
  long low = max_weight;
  long upp = sum_weight;
  while (low < upp) {
    long mid = (low + upp) / 2;
    if (canAlloc(mid)) {
      upp = mid;
    } else {
      low = mid + 1;
    }
  }
  printf("%ld\n", low);
  free(weight);
  return 0;
}

bool canAlloc(long capacity) {
  long i = 0;
  long alloced_in_one = 0;
  int track_id = 0;
  while (i < num_packet) {
    if (alloced_in_one + weight[i] <= capacity) {
      alloced_in_one += weight[i];
      i++;
    } else {
      alloced_in_one = 0;
      if (++track_id == num_track) {
        return false;
      }
    }
  }
  return true;
}
```
Remember to always free the dynamically allocated memory after you're done using it to prevent memory leaks. That's why we've added 'free(weight)' before returning from the main function.