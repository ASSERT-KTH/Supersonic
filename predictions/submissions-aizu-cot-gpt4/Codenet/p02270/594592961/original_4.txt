Here's the step by step optimization:

1. Pass vector by reference: In the function `IsAllLoaded`, the vector `W` is passed by value, which means a new copy of the vector is created every time the function is called. This can be costly both in terms of time and space. Instead, pass the vector by reference so that no new copies are made.

2. Avoid excessive I/O operations: I/O operations such as `cin` and `cout` are quite slow. It's better to use them as little as possible. In the `Input` function, we can reserve the capacity for the vector `W` in advance to avoid reallocation of memory as elements are being read.

3. Avoid unnecessary computations: In the function `IsAllLoaded`, the sum of the weights `CurrentSum` is computed in each iteration, even when the current weight `W[i]` exceeds `P`. This computation can be avoided by reordering the conditions in the `if` statements.

4. Use `std::ios::sync_with_stdio(false)`: This is a commonly used optimization technique in C++ that allows faster I/O operations by unsynchronizing C++ standard streams with their C counterparts.

Here's the optimized version of your code:

```cpp
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;
vector<int> Input(const int n) {
  vector<int> W;
  W.reserve(n);
  for (int i = 0; i < n; i++) {
    int w;
    cin >> w;
    W.push_back(w);
  }
  return W;
}
bool IsAllLoaded(int P, vector<int>& W, int k) {
  int TrackIndex = 0;
  int CurrentSum = 0;
  int i = 0;
  for (i = 0; i < W.size(); i++) {
    if (W[i] > P) {
      return false;
    }
    if (CurrentSum + W[i] > P) {
      TrackIndex++;
      if (TrackIndex == k) {
        return false;
      }
      CurrentSum = W[i];
    }
    else {
      CurrentSum += W[i];
    }
  }
  return true;
}
int Calc(vector<int>& W, int k) {
  int Sum = accumulate(W.begin(), W.end(), 0);
  int P = (Sum + k - 1) / k;
  while (!IsAllLoaded(P, W, k)) {
    P++;
  }
  return P;
}
int main() {
  std::ios::sync_with_stdio(false);
  int n, k;
  cin >> n >> k;
  vector<int> W = Input(n);
  int P = Calc(W, k);
  cout << P << endl;
  return 0;
}
```
Note that the `#include <iostream>` directive is necessary for `std::cin` and `std::cout` to work, and it is not an optimization issue.