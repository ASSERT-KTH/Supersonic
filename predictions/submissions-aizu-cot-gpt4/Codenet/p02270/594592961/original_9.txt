Here are the steps to optimize your code:

1. **Reserve space for vector**: In your `Input` function, you are continuously pushing elements into your vector. This can lead to multiple reallocations if the vector's capacity is exhausted. To avoid this, you can use the `vector::reserve` function to allocate enough memory for the vector at once.

2. **Pass vector by reference**: In the `IsAllLoaded` and `Calc` functions, you are passing the vector `W` by value, which means a new copy of the vector is created. This increases memory usage. Instead, you can pass the vector by reference, which will save memory.

3. **Use `const` where appropriate**: If a function does not modify its parameters, mark them as `const` to improve readability and potentially enable certain compiler optimizations.

Here is your optimized code:

```cpp
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;

vector<int> Input(int n) {
  vector<int> W;
  W.reserve(n);  // Reserve space in vector
  for (int i = 0; i < n; i++) {
    int w;
    cin >> w;
    W.push_back(w);
  }
  return W;
}

bool IsAllLoaded(int P, const vector<int>& W, int k) {  // pass vector by reference
  int TrackIndex = 0;
  int CurrentSum = 0;
  for (int i = 0; i < W.size(); i++) {
    if (W[i] > P) {
      return false;
    }
    if (CurrentSum + W[i] > P) {
      TrackIndex++;
      if (TrackIndex == k) {
        return false;
      }
      CurrentSum = 0;
    }
    CurrentSum += W[i];
  }
  return true;
}

int Calc(const vector<int>& W, int k) {  // pass vector by reference
  int Sum = accumulate(W.begin(), W.end(), 0);
  int P = (Sum + k - 1) / k;
  while (!IsAllLoaded(P, W, k)) {
    P++;
  }
  return P;
}

int main() {
  int n, k;
  cin >> n >> k;
  vector<int> W = Input(n);
  int P = Calc(W, k);
  cout << P << endl;
  return 0;
}
```

This optimized code should run faster and use less memory than the original one.