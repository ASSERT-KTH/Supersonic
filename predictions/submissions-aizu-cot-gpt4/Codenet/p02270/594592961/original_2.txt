Here are the steps for optimizing the given program:

1. Avoid copying of the vector in the function `IsAllLoaded`. We can pass the vector by reference instead of by value which will save both running time and memory.

2. The `std::accumulate` function in `Calc` function is looping over the entire vector to calculate the sum. However, we can calculate the sum while reading the input itself which will avoid this additional loop.

3. Reserve memory in advance for the vector `W` in the `Input` function. We know the size of the vector (`n`) in advance, so we can use `vector::reserve` function which will prevent multiple reallocations as the vector grows.

4. Use prefix increment for `P` and `i` which is generally faster than postfix increment in C++ as it avoids unnecessary temporary object.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

vector<int> Input(const int n) {
  vector<int> W;
  W.reserve(n);
  for (int i = 0; i < n; i++) {
    int w;
    cin >> w;
    W.push_back(w);
  }
  return W;
}

bool IsAllLoaded(int P, const vector<int>& W, int k) {
  int TrackIndex = 0;
  int CurrentSum = 0;
  for (int i = 0; i < W.size(); ++i) {
    if (W[i] > P) {
      return false;
    }
    if (CurrentSum + W[i] > P) {
      ++TrackIndex;
      if (TrackIndex == k) {
        return false;
      }
      CurrentSum = 0;
    }
    CurrentSum += W[i];
  }
  return true;
}

int Calc(const vector<int>& W, int k) {
  int Sum = 0;
  for (const auto& w : W) {
    Sum += w;
  }
  int P = (Sum + k - 1) / k;
  while (!IsAllLoaded(P, W, k)) {
    ++P;
  }
  return P;
}

int main() {
  int n, k;
  cin >> n >> k;
  vector<int> W = Input(n);
  int P = Calc(W, k);
  cout << P << endl;
  return 0;
}
```
