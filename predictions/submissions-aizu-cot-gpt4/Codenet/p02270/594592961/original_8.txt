Here are a few steps we can take to optimize this program:

1. Pass vectors by reference to avoid making a copy of the vector. This reduces memory usage and could make the function run faster, especially if the vector is large.

2. Reserve space for the vector 'W' in the 'Input' function. This avoids having to reallocate memory every time an element is added, which can be expensive.

3. In 'IsAllLoaded' function, instead of checking if 'W[i]' is greater than 'P' and then if 'CurrentSum + W[i]' is greater than 'P', we can first check if 'CurrentSum + W[i]' is greater than 'P'. If it is, we can then check if 'W[i]' is greater than 'P'. This reduces the number of comparisons and thus, the running time of the function.

Here's the optimized code:

```cpp
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;

void Input(int n, vector<int>& W) {
  W.reserve(n);
  for (int i = 0; i < n; i++) {
    int w;
    cin >> w;
    W.push_back(w);
  }
}

bool IsAllLoaded(int P, vector<int>& W, int k) {
  int TrackIndex = 0;
  int CurrentSum = 0;
  for (int i = 0; i < W.size(); i++) {
    if (CurrentSum + W[i] > P) {
      if (W[i] > P || TrackIndex == k) {
        return false;
      }
      CurrentSum = 0;
    }
    CurrentSum += W[i];
  }
  return true;
}

int Calc(vector<int>& W, int k) {
  int Sum = accumulate(W.begin(), W.end(), 0);
  int P = (Sum + k - 1) / k;
  while (!IsAllLoaded(P, W, k)) {
    P++;
  }
  return P;
}

int main() {
  int n, k;
  cin >> n >> k;
  vector<int> W;
  Input(n, W);
  int P = Calc(W, k);
  cout << P << endl;
  return 0;
}
```
Please note that the optimization provided here is minimal and might not significantly improve the overall performance of your program. For a more thorough optimization, you might need to consider algorithmic optimizations or parallel computing techniques.