This program can be optimized by reducing the number of times the 'check' function is called and by allocating the 'N' array dynamically to prevent stack overflow.

Optimization Steps:

1. The 'check' function is called in every iteration of the while loop in 'main'. Instead of calling the function inside the condition of the if statement, it can be called before the if statement and its return value can be stored in a variable. This way, it will be called only once per iteration.

2. The size of the 'N' array is determined by the input 'n', which can lead to stack overflow if 'n' is large. To prevent this, 'N' can be allocated dynamically using 'new'.

Here is the optimized program:

```c++
#include <cstdio>
#include <iostream>
using namespace std;
int check(int N[], int n, int k, int w) {
  int i = 0;
  for (int j = 0; j < k; ++j) {
    int s = 0;
    while (s + N[i] <= w) {
      s += N[i];
      ++i;
      if (i == n)
        return n;
    }
  }
  return i;
}
int main() {
  int MAX_W = 1000000000;
  int n, k;
  scanf("%d %d", &n, &k);
  int* N = new int[n]; // dynamically allocate array
  for (int i = 0; i < n; ++i) {
    scanf("%d", &N[i]);
  }
  int left = 0;
  int right = MAX_W;
  while (left < right) {
    int mid = (left + right) / 2;
    int check_result = check(N, n, k, mid); // call function once per iteration
    if (check_result == n) {
      right = mid;
    } else {
      left = mid + 1;
    }
  }
  cout << right << endl;
  delete[] N; // free memory
  return 0;
}
```

In the optimized version of the program, the 'check' function is called only once per iteration in the while loop in 'main', and the 'N' array is allocated dynamically, preventing stack overflow and allowing the array to be deallocated when it is no longer needed.