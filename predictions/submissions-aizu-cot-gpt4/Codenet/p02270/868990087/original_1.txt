First, let's highlight some potential areas for optimization:

1. Memory Allocation: The array `N` is allocated on the stack, which may cause stack overflow for large `n`. Instead, we could allocate `N` dynamically on the heap.

2. Division by 2: The operation `(left + right) / 2;` can be optimized to `(left + right) >> 1;`, which is a bit faster.

3. Using `printf` instead of `cout`: The `cout` function has some overheads compared to `printf`, so we could use `printf` to slightly improve the time efficiency.

4. Reducing function call overhead: The function `check` is called in every iteration of the while loop in `main`. This could introduce some function call overhead. Instead, we could inline the `check` function to reduce this overhead.

5. Using `ios_base::sync_with_stdio(false)`: This can potentially speed up I/O operations.

Here is the optimized code:

```cpp
#include <cstdio>
#include <cstdlib>
using namespace std;

inline int check(int N[], int n, int k, int w) {
  int i = 0;
  for (int j = 0; j < k; ++j) {
    int s = 0;
    while (s + N[i] <= w) {
      s += N[i];
      ++i;
      if (i == n)
        return n;
    }
  }
  return i;
}

int main() {
  ios_base::sync_with_stdio(false);
  
  int MAX_W = 1000000000;
  int n, k;
  scanf("%d %d", &n, &k);

  int *N = (int*) malloc(n * sizeof(int));
  for (int i = 0; i < n; ++i) {
    scanf("%d", &N[i]);
  }

  int left = 0;
  int right = MAX_W;
  while (left < right) {
    int mid = (left + right) >> 1;
    if (check(N, n, k, mid) == n) {
      right = mid;
    } else {
      left = mid + 1;
    }
  }
  printf("%d\n", right);
  free(N);
  return 0;
}
```

Remember that the benefits of these optimizations may vary depending on the specifics of your program and the compiler you're using. Always measure before and after performance when applying optimizations.