Here are the steps to optimize the program:

1. In `check` function, we are checking `if (i == n)` at every iteration, this can be removed and we can check it once after the for loop. This will improve the running time.

2. In `main` function, the MAX_W is a constant, so it can be declared as `const` which can potentially save memory as compilers may optimize const variables.

3. Dynamic allocation of the array N can be replaced with `std::vector<int>` which is safer and more efficient.

4. The binary search operation can be optimized by using bitwise shift operator to compute mid. This is faster and more efficient than divide by 2.

Here is the optimized program:

```C++
#include <cstdio>
#include <iostream>
#include <vector>
using namespace std;

int check(vector<int>& N, int n, int k, int w) {
  int i = 0;
  for (int j = 0; j < k; ++j) {
    int s = 0;
    while (s + N[i] <= w) {
      s += N[i];
      ++i;
    }
  }
  return (i >= n) ? n : i;
}

int main() {
  const int MAX_W = 1000000000;
  int n, k;
  scanf("%d %d", &n, &k);
  vector<int> N(n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", &N[i]);
  }
  int left = 0;
  int right = MAX_W;
  while (left < right) {
    int mid = left + ((right - left) >> 1);
    if (check(N, n, k, mid) == n) {
      right = mid;
    } else {
      left = mid + 1;
    }
  }
  cout << right << endl;
  return 0;
}
```

Note: If you are sure about the array size limit and it is small, then it is better to use `std::array` instead of `std::vector` for performance reasons.