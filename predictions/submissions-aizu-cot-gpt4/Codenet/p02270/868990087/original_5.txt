Here is a step by step optimization of your program:

1. Instead of using a dynamic array, we will use a vector. Vectors are more efficient and safer in C++ than dynamic arrays.

2. We will replace `scanf` and `cout` with `cin` and `cout`. This is because `cin` and `cout` are more type safe and faster as compared to `scanf` and `printf` when ios_base::sync_with_stdio(false) is used.

3. To speed up the process of reading and writing from and to the console, we can use the `ios_base::sync_with_stdio(false)` function. This will make `cin` and `cout` as fast as `scanf` and `printf`.

With these optimizations in mind, here is your optimized program:

```c++
#include <iostream>
#include <vector>
using namespace std;
int check(vector<int>& N, int n, int k, int w) {
  int i = 0;
  for (int j = 0; j < k; ++j) {
    int s = 0;
    while (s + N[i] <= w) {
      s += N[i];
      ++i;
      if (i == n)
        return n;
    }
  }
  return i;
}
int main() {
  ios_base::sync_with_stdio(false);
  int MAX_W = 1000000000;
  int n, k;
  cin >> n >> k;
  vector<int> N(n);
  for (int i = 0; i < n; ++i) {
    cin >> N[i];
  }
  int left = 0;
  int right = MAX_W;
  while (left < right) {
    int mid = (left + right) / 2;
    if (check(N, n, k, mid) == n) {
      right = mid;
    } else {
      left = mid + 1;
    }
  }
  cout << right << endl;
  return 0;
}
```
This program uses vector instead of dynamic arrays and uses `cin` and `cout` for input/output, making it safer and faster. The function `ios_base::sync_with_stdio(false)` further speeds up the console input/output.