Optimization Steps:

1. Dynamically allocate the array N[n] to avoid stack overflow when n is large.
2. Use "std::vector" instead of raw array to manage memory automatically and make the program safer.
3. Use "std::ios_base::sync_with_stdio(false)" and "cin.tie(NULL)" to speed up cin and cout operations.
4. Use "std::binary_search" function to search the array instead of writing own function, which will reduce the complexity of the code.
5. Avoid using "std::endl" as it performs additional flush operation, use "\n" instead.

Below is the optimized code:

```cpp
#include <cstdio>
#include <iostream>
#include <vector>
using namespace std;

int check(vector<int> &N, int n, int k, int w) {
  int i = 0;
  for (int j = 0; j < k; ++j) {
    int s = 0;
    while (s + N[i] <= w) {
      s += N[i];
      ++i;
      if (i == n)
        return n;
    }
  }
  return i;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int MAX_W = 1000000000;
  int n, k;
  scanf("%d %d", &n, &k);
  vector<int> N(n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", &N[i]);
  }
  int left = 0;
  int right = MAX_W;
  while (left < right) {
    int mid = (left + right) / 2;
    if (check(N, n, k, mid) == n) {
      right = mid;
    } else {
      left = mid + 1;
    }
  }
  cout << right << "\n";
  return 0;
}
```
Please note that the "std::binary_search" function is not used as it cannot replace the function "check" in the code. The "check" function is not just searching for an element but also performing other operations.