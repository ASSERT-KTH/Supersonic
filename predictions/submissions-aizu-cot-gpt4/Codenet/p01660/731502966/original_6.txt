This program is aimed at finding the shortest path on a board game. The game allows movement forward and backward with the help of a dice roll. The game board is defined by an array (N) where each element is the number of steps to be added/subtracted from the current position when that position is reached. The program uses a depth-first search (DFS) algorithm to find the shortest path from the start to the goal.

Here are some possible optimizations:

1. Replace the `new` and `delete` operators with `std::vector`. This will take care of memory management for us and also make the code cleaner.

2. Make use of `std::vector::resize` to change the size of the vector instead of creating a new array in `MakePath`.

3. Eliminate the lambda functions `checkPath` and `tryMove`, and replace them with regular functions. This will make the code more readable and potentially more efficient, because the compiler doesn't have to generate a class for the lambda function. 

4. The `visit` array in `MakePath` is only used to mark the current position as visited. You can replace it with a single integer variable `visitedPos`.

Here's the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const int MAX_T = 3000, MAX_M = 300;
int M, start, goal, dice[6];
vector<int> N;
bool isPositionValid(int p) { return 0 <= p && p < M; }

int checkPath(vector<int> &path, int moveto, int visitedPos) {
  if (!isPositionValid(moveto))
    return 2 * MAX_T;
  else {
    int position = moveto + N[moveto];
    if (position != visitedPos)
      path = MakePath(path, position);
    return path[position] + 1;
  }
}

bool tryMove(vector<int> &path, int moveto, int &position) {
  if (isPositionValid(moveto)) {
    if (path[position] > path[moveto + N[moveto]]) {
      position = moveto + N[moveto];
      return true;
    }
  }
  return false;
}

vector<int> MakePath(vector<int> path, int from) {
  int visitedPos = from;
  path.resize(M, MAX_T + 1);
  int bestpath = (from == goal) ? 0 : MAX_T;
  if (from != goal) {
    for (int r = 0; r < 6; r++) {
      bestpath = min(bestpath, checkPath(path, from + dice[r], visitedPos));
      bestpath = min(bestpath, checkPath(path, from - dice[r], visitedPos));
    }
  }
  path[from] = bestpath;
  return path;
}

int main() {
  cin >> M;
  for (int r = 0; r < 6; r++)
    cin >> dice[r];
  cin >> start >> goal;
  start--, goal--;
  N.resize(M);
  for (int m = 0; m < M; m++)
    cin >> N[m];
  vector<int> path = MakePath({}, start);
  int position = start;
  for (int t = 0; t < MAX_T; t++) {
    if (position == goal)
      break;
    int r;
    cin >> r;
    int d = dice[r - 1];
    int output;
    if (tryMove(path, position + d, position))
      output = 1;
    else if (tryMove(path, position - d, position))
      output = -1;
    else
      output = 0;
    cout << output << endl;
  }
  return 0;
}
```

Note: This is a minor optimization. The major time complexity is coming from the depth-first search which is unavoidable for this problem. You may need to consider a different algorithm if the game board is large and you need to improve the running time.