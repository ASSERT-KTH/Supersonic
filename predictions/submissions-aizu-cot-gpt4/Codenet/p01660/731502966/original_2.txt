The given C++ program can be optimized in multiple ways:

- Avoid using dynamic memory allocation when it's not necessary. The `new` operator in C++ is quite expensive in terms of performance, and it's also a common source of memory leaks. In this case, we can use a std::vector instead of a dynamically allocated array.

- Use const references in lambda capture lists when possible. This will prevent unnecessary copies.

- Avoid using the `std::endl` manipulator when you don't need to flush the output buffer. Use `"\n"` instead, which is much faster.

- You can reduce the number of function calls `isPositionValid()` inside `checkPath` lambda function and `tryMove` lambda function. As this function is getting called twice which is not necessary.

- You can use `std::ios_base::sync_with_stdio(false);` for faster IO.

Here is the optimized version of your program:

```cpp
#include <iostream>
#include <vector>
using namespace std;
const int MAX_T = 3000, MAX_M = 300;
int M, start, goal, dice[6];
vector<int> N;
bool isPositionValid(int p) { return 0 <= p && p < M; }
vector<int> MakePath(vector<int> path, int from) {
  static bool visit[MAX_M] = {};
  static auto checkPath = [&path](int moveto) -> int {
    if (!isPositionValid(moveto))
      return 2 * MAX_T;
    else {
      int position = moveto + N[moveto];
      if (!visit[position])
        MakePath(path, position);
      return path[position] + 1;
    }
  };
  if (path.empty()) {
    path.resize(M, MAX_T + 1);
  }
  visit[from] = true;
  int bestpath = MAX_T;
  if (from == goal)
    bestpath = 0;
  else {
    for (int r = 0; r < 6; r++) {
      int move_pos = from + dice[r];
      if(isPositionValid(move_pos)) bestpath = min(bestpath, checkPath(move_pos));
      move_pos = from - dice[r];
      if(isPositionValid(move_pos)) bestpath = min(bestpath, checkPath(move_pos));
    }
  }
  path[from] = bestpath;
  return path;
}
int main() {
  std::ios_base::sync_with_stdio(false);
  cin >> M;
  for (int r = 0; r < 6; r++)
    cin >> dice[r];
  cin >> start >> goal;
  start--, goal--;
  N.resize(M);
  for (int m = 0; m < M; m++)
    cin >> N[m];
  vector<int> path = MakePath({}, start);
  int position = start;
  for (int t = 0; t < MAX_T; t++) {
    if (position == goal)
      break;
    int r;
    cin >> r;
    int d = dice[r - 1];
    static auto tryMove = [&path](int moveto, int path_before,
                                  int &position) -> bool {
      if (isPositionValid(moveto)) {
        if (path_before > path[moveto + N[moveto]]) {
          position = moveto + N[moveto];
          return true;
        }
      }
      return false;
    };
    int output;
    if (tryMove(position + d, path[position], position))
      output = 1;
    else if (tryMove(position - d, path[position], position))
      output = -1;
    else
      output = 0;
    cout << output << "\n";
  }
  return 0;
}
```

The above program is optimized for running time and memory usage. It uses std::vector instead of raw pointers, which eliminates the need for manual memory management and reduces the risk of memory leaks. It also reduces the number of function calls, which can improve performance. And it avoids using `std::endl` for output, which can be slower than simply outputting a newline character.