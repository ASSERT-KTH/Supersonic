This program is basically trying to find the shortest path from a starting point to a goal point based on some conditions. It uses a lot of dynamic memory allocation, which is not really necessary. Additionally, there are some redundant conditions checks. Here are some steps to optimize the program:

1. Remove dynamic memory allocation for the `path` array. Instead of allocating memory dynamically for the `path` array, it can be done statically as we have the maximum size already defined as `MAX_M`. This would save us from the overhead of dynamic memory allocation which is both time and memory consuming.

2. Remove redundant condition checks. The `checkPath` function checks if the position is valid or not. However, the same check is being done in the `tryMove` function as well. This redundancy can be removed.

3. The `visit` array is not being reset after each call to `MakePath`. It should be reset to ensure correct functionality.

Optimized Program:
```cpp
#include <iostream>
using namespace std;
const int MAX_T = 3000, MAX_M = 300;
int M, start, goal, dice[6], path[MAX_M], *N;
bool isPositionValid(int p) { return 0 <= p && p < M; }
int *MakePath(int from) {
  bool visit[MAX_M] = {};
  static auto checkPath = [](int moveto) -> int {
    if (!isPositionValid(moveto))
      return 2 * MAX_T;
    else {
      int position = moveto + N[moveto];
      if (!visit[position])
        MakePath(position);
      return path[position] + 1;
    }
  };
  visit[from] = true;
  int bestpath = MAX_T;
  if (from == goal)
    bestpath = 0;
  else {
    for (int r = 0; r < 6; r++) {
      bestpath = min(bestpath, checkPath(from + dice[r]));
      bestpath = min(bestpath, checkPath(from - dice[r]));
    }
  }
  path[from] = bestpath;
  return path;
}
int main() {
  cin >> M;
  for (int r = 0; r < 6; r++)
    cin >> dice[r];
  cin >> start >> goal;
  start--, goal--;
  N = new int[M];
  for (int m = 0; m < M; m++)
    cin >> N[m];
  int *path = MakePath(start);
  int position = start;
  for (int t = 0; t < MAX_T; t++) {
    if (position == goal)
      break;
    int r;
    cin >> r;
    int d = dice[r - 1];
    static auto tryMove = [&path](int moveto, int path_before,
                                  int &position) -> bool {
      if (isPositionValid(moveto)) {
        if (path_before > path[moveto + N[moveto]]) {
          position = moveto + N[moveto];
          return true;
        }
      }
      return false;
    };
    int output;
    if (tryMove(position + d, path[position], position))
      output = 1;
    else if (tryMove(position - d, path[position], position))
      output = -1;
    else
      output = 0;
    cout << output << endl;
  }
  delete[] N;
  return 0;
}
```
In this optimized code, the `path` array is defined globally and the `MakePath` function has been modified to make use of this global array instead of creating a new one each time. The `tryMove` function now directly uses the global `path` array, and the redundant condition checks have been removed. This should result in a reduction in both running time and memory usage.