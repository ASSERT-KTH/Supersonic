The optimization steps are as follows:

1. The array `p` is precalculated, but it grows quadratically and most of the values will exceed the limit of `n` (1,000,000). So we don't need to calculate all the values up to 1,000,000, instead we can calculate until the values are less than or equal to 1,000,000. This will significantly reduce the memory usage.

2. The function `solve2` is called for every number from 1 to 1,000,000. This is not necessary because in the main while loop, it is called again. So we can remove that loop.

3. We have two memoization arrays `memo` and `memo2`. We can initialize these arrays with a special value, for example `-1`, to indicate that the value has not been calculated yet. This will prevent unnecessary function calls and improve performance.

4. We use `INF` to represent a large number. However, `1 << 28` might not be large enough to cover all possible values of `n` (up to 1,000,000). It would be better to use `INT_MAX` which is guaranteed to be large enough.

Here is the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <climits>
using namespace std;
const int INF = INT_MAX;
int p[181]; // 181 is enough as p[181] > 10^6
int memo[1000001][6];
int memo2[1000001];

int solve(int n, int count) {
  if (!n)
    return 0;
  if (n <= 0 || !count)
    return INF;
  if (memo[n][count] != -1)
    return memo[n][count];
  int ans = INF;
  for (int i = 0; p[i] <= n; i++)
    ans = min(ans, solve(n - p[i], count - 1) + 1);
  return memo[n][count] = ans;
}

int solve2(int n) {
  if (!n)
    return 0;
  if (n < 0)
    return INF;
  if (memo2[n] != -1)
    return memo2[n];
  int ans = INF;
  for (int i = 0; p[i] <= n; i++) {
    if (!(p[i] % 2))
      continue;
    ans = min(ans, solve2(n - p[i]) + 1);
  }
  return memo2[n] = ans;
}

int main() {
  int n, i = 0;
  fill(&memo[0][0], &memo[0][0] + sizeof(memo) / sizeof(memo[0][0]), -1);
  fill(memo2, memo2 + sizeof(memo2) / sizeof(memo2[0]), -1);
  while ((p[i] = i * (i + 1) * (i + 2) / 6) <= 1000000) i++;
  while (cin >> n, n)
    cout << solve(n, 5) << " " << solve2(n) << endl;
}
```