This C/C++ program seems to be solving a dynamic programming problem. Here are the parts which are inefficient and how we can optimize them:

1. **Redundant condition checks:** The condition check "if (!n)" in both solve() and solve2() functions is redundant since "if (n <= 0)" or "if (n < 0)" covers that case. Removing these checks will save a few CPU cycles.

2. **Pre-calculation of array 'p':** Even though the values of 'p' are being pre-calculated, it is done in the main() function. This array can be calculated in a separate function that gets called before solve() and solve2(). This way, the main() function remains cleaner and more readable.

3. **Efficiency of 'min' function:** In the solve() and solve2() functions, the minimum value between 'ans' and the recursive function is calculated within the loop. This can be expensive in terms of CPU time due to frequent function calls. Instead, we can store the result of the recursive function in a variable and compare that with 'ans' in the loop.

4. **Memory Usage:** The program uses two memoization tables - memo[][] and memo2[]. If memory usage is a concern, we can merge these tables into one by altering the logic of the program.

Here's the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#define INF 1 << 28
using namespace std;

int p[1000001];
int memo[1000001][6];

void precalculateP() {
  for (int i = 0; i <= 1000000; i++)
    p[i] = i * (i + 1) * (i + 2) / 6;
}

int solve(int n, int count) {
  if (n <= 0 || !count)
    return INF;
  if (memo[n][count])
    return memo[n][count];

  int ans = INF;
  for (int i = 0; p[i] <= n; i++) {
    int temp = solve(n - p[i], count - 1) + 1;
    ans = min(ans, temp);
  }
  return memo[n][count] = ans;
}

int solve2(int n) {
  if (n < 0)
    return INF;
  if (memo[n][1])
    return memo[n][1];

  int ans = INF;
  for (int i = 0; p[i] <= n; i++) {
    if (!(p[i] % 2))
      continue;
    int temp = solve2(n - p[i]) + 1;
    ans = min(ans, temp);
  }
  return memo[n][1] = ans;
}

int main() {
  precalculateP();

  for (int i = 1; i <= 1000000; i++)
    solve2(i);

  int n;
  while (cin >> n, n)
    cout << solve(n, 5) << " " << solve2(n) << endl;

  return 0;
}
```

Note: The optimized version is still a recursive solution, which is usually slower and uses more memory than an iterative solution. But without rewriting the whole program, these are some of the optimizations that can be made.