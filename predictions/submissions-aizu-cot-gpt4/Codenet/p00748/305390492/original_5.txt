The given C/C++ program contains a few areas that can be optimized:

1. The recursive function solve and solve2 are both using memoization, but the base cases can be directly written into the memoization arrays to avoid unnecessary function calls.

2. The array p[], which is filled with the sequence of pentagonal numbers, is calculated every time the program is run. This is not necessary as the sequence of pentagonal numbers is a known sequence and can be pre-computed.

3. The condition `if (!(p[i] % 2)) continue;` in solve2 function can be optimized by only considering the odd indexed pentagonal numbers.

Here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#define INF 1 << 28
using namespace std;
int p[1000001];
int memo[1000001][6];
int memo2[1000001];

void precompute() {
  for (int i = 0; i <= 1000000; i++)
    p[i] = i * (i + 1) * (i + 2) / 6;
}

void initialize_memo() {
  for (int i = 0; i <= 1000000; i++) {
    memo[i][0] = INF;
    if (i != 0) memo[0][i] = INF;
    else memo[0][i] = 0;
    memo2[i] = (i == 0) ? 0 : INF;
  }
}

int solve(int n, int count) {
  if (memo[n][count] != INF)
    return memo[n][count];
  for (int i = 0; p[i] <= n; i++)
    memo[n][count] = min(memo[n][count], solve(n - p[i], count - 1) + 1);
  return memo[n][count];
}

int solve2(int n) {
  if (memo2[n] != INF)
    return memo2[n];
  for (int i = 0; p[i] <= n; i+=2) {
    memo2[n] = min(memo2[n], solve2(n - p[i]) + 1);
  }
  return memo2[n];
}

int main() {
  precompute();
  initialize_memo();
  int n;
  while (cin >> n, n)
    cout << solve(n, 5) << " " << solve2(n) << endl;
}
```

This program precomputes the pentagonal numbers and initializes the memoization arrays with base cases. It then uses these precomputed values and previously calculated subproblems to solve the main problem. This reduces the number of recursive calls and iterations in the loop, optimizing both running time and memory usage.