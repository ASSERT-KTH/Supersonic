The optimization can be done as follows:

1. The computation for the array `p` is repeated for every `i` in the main function. This computation can be moved to the `solve` and `solve2` functions where it is used. This will reduce the memory usage as we will not store the computed values for every `i`, but only for the `i` that we are going to use. 

2. The `solve` function is called recursively in the for loop. It is better to store the result of the function call in a variable and use that variable in the min function. This will reduce the running time as we avoid the overhead of function calls.

3. When the value of `n` is less than `0` or the count is `0`, the function returns `INF`. This check can be moved to the top of the function to avoid unnecessary computations.

Here is the optimized version of the code:

```c++
#include <algorithm>
#include <iostream>
#define INF 1 << 28
using namespace std;
int memo[1000001][6];
int memo2[1000001];

int solve(int n, int count) {
  if (n <= 0 || !count)
    return INF;
  if (!n)
    return 0;
  if (memo[n][count])
    return memo[n][count];
  int ans = INF;
  for (int i = 0; i*(i+1)*(i+2)/6 <= n; i++) {
    int sol = solve(n - i*(i+1)*(i+2)/6, count - 1) + 1;
    ans = min(ans, sol);
  }
  return memo[n][count] = ans;
}

int solve2(int n) {
  if (n < 0)
    return INF;
  if (!n)
    return 0;
  if (memo2[n])
    return memo2[n];
  int ans = INF;
  for (int i = 0; i*(i+1)*(i+2)/6 <= n; i++) {
    if (!(i*(i+1)*(i+2)/6 % 2))
      continue;
    int sol = solve2(n - i*(i+1)*(i+2)/6) + 1;
    ans = min(ans, sol);
  }
  return memo2[n] = ans;
}

int main() {
  int n;
  while (cin >> n, n)
    cout << solve(n, 5) << " " << solve2(n) << endl;
}
```
