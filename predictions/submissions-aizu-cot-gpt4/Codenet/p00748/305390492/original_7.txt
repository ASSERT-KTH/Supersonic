The given C/C++ code has several areas that can be optimized:

1. In the solve function, you are computing the same sub-problems again and again. We can optimize this by storing the result of sub-problems in a memoization table and reusing them. This will reduce the time complexity from exponential to polynomial.

2. In the solve2 function, you are checking if a number is even or not in each iteration of the loop. We can optimize this by only looping over odd numbers, thus reducing the number of iterations.

3. You are computing all the pentagonal numbers in the beginning of the main function. Instead of computing them all at once, we can compute them on the fly and store them in the array. This will reduce the memory usage.

4. Also, we compute solve2(i) for all 'i' upfront in main, which is not necessary. We can compute it on demand and store the result in memo2 array for future use.

Here's the optimized code:

```
#include <algorithm>
#include <iostream>
#define INF 1 << 28
using namespace std;
int p[1000001];
int memo[1000001][6];
int memo2[1000001];

int solve(int n, int count) {
  if (!n)
    return 0;
  if (n <= 0 || !count)
    return INF;
  if (memo[n][count])
    return memo[n][count];
  int ans = INF;
  for (int i = 0; p[i] <= n; i++)
    ans = min(ans, solve(n - p[i], count - 1) + 1);
  return memo[n][count] = ans;
}

int solve2(int n) {
  if (!n)
    return 0;
  if (n < 0)
    return INF;
  if (memo2[n])
    return memo2[n];
  int ans = INF;
  for (int i = 1; i * (i + 1) * (i + 2) / 6 <= n; i += 2) {
    ans = min(ans, solve2(n - p[i]) + 1);
  }
  return memo2[n] = ans;
}

int main() {
  int n;
  while (cin >> n, n) {
    for (int i = 0; i * (i + 1) * (i + 2) / 6 <= n; i++)
      p[i] = i * (i + 1) * (i + 2) / 6;
    cout << solve(n, 5) << " " << solve2(n) << endl;
  }
}
```

Please note that this optimization may still not be enough for large inputs due to the size of the memoization tables and the depth of recursion.