The program is already quite optimized. However, there are few places where minor improvements can be made:

1. Avoid multiple calculations: The expression `N * N` is calculated many times. Calculating it once and storing the result in a variable can save time.
2. Limited use of `#define`: Using `#define` directives excessively can make the code hard to read and debug. It's better to use them sparingly and avoid them when they are not necessary.
3. Use of `memset`: Be careful with `memset`, as it works byte by byte. It works fine for zeroing and setting to -1, but it can cause unexpected behaviours with other values. In this case, it's used correctly, but it's worth mentioning for completeness.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;
const int inf = 1 << 29;
int main() {
  int const MOD = 100000;
  vector<vector<int>> dp(55, vector<int>(3030, 0));
  for (int N, M, S; cin >> N >> M >> S && (N | M | S);) {
    for(auto& v: dp)
        fill(v.begin(), v.end(), 0);
    dp[0][0] = 1;
    int maxIndex = N * N;
    for (int add = 1; add <= M; ++add) {
      for (int currIndex = maxIndex; currIndex >= 1; --currIndex) {
        for (int currSum = add; currSum <= S; ++currSum) {
          (dp[currIndex][currSum] += dp[currIndex - 1][currSum - add]) %= MOD;
        }
      }
    }
    cout << dp[maxIndex][S] << endl;
  }
  return 0;
}
```
This version of the code makes the following modifications:
- `N * N` is calculated once and stored in `maxIndex`, avoiding repeated calculations.
- `#define` directives have been removed and replaced with more direct code.
- `memset` has been replaced with `fill` from the standard library, which is safer and more expressive.