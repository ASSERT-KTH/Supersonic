Here are some of the changes we have made to optimize the code:

1. Removed unnecessary macros and typedefs.
2. Removed the `bits/stdc++.h` header file as it includes a lot of unnecessary libraries, which increases the compilation time.
3. Replaced `bits/stdc++.h` with necessary header files.
4. Replaced `N * N` with a variable `total` to reduce the number of calculations.
5. Replaced `ll` with `int64_t` for better code readability.
6. Removed the unused `inf` constant.

The optimized code is as follows:

```cpp
#include <iostream>
#include <vector>
#include <cstdint>
using namespace std;

int main() {
  const int MOD = 100000;
  vector<vector<int64_t>> dp(55, vector<int64_t>(3030, 0));

  for (int N, M, S; cin >> N >> M >> S && (N | M | S);) {
    for(auto &v : dp) 
      fill(v.begin(), v.end(), 0);
    dp[0][0] = 1;
    int total = N * N;
    for (int add = 1; add <= M; ++add) {
      for (int currIndex = total; currIndex >= 1; --currIndex) {
        for (int currSum = add; currSum <= S; ++currSum) {
          (dp[currIndex][currSum] += dp[currIndex - 1][currSum - add]) %= MOD;
        }
      }
    }
    cout << dp[total][S] << endl;
  }
  return 0;
}
```

This code is optimized for both runtime and memory. We use `vector` instead of an array to take advantage of dynamic sizing and better memory management. We make fewer calculations in the loop by calculating `N*N` only once. We also remove unused code to clean up the program.