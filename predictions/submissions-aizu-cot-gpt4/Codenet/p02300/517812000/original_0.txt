First, let's go through the code and determine what needs optimization:

1. In the Point class constructor, `x = a` and `y = b` are creating local variables instead of assigning the values to the class members. This is not an optimization issue but a bug in the code which needs to be fixed.

2. Dynamic allocation of arrays P and H is not necessary in modern C++. It would be more efficient to use std::vector, which manages memory automatically and provides an interface for dynamic arrays.

3. The sort function is called without a custom comparator, which is unnecessary in this case as the Point class already has a less-than operator implemented.

4. The direct function is called with its arguments passed by reference, which is unnecessary as these arguments are not being modified within the function. Passing them by value would be more efficient.

5. The dynamic arrays P and H are not being deleted at the end of the program, causing memory leaks. This is not an optimization issue but a memory management issue that needs to be fixed.

Here is the optimized version of the code:

```cpp
#include <algorithm>
#include <cstdio>
#include <vector>
using namespace std;

class Point {
public:
    int x, y;

    Point(int a = 0, int b = 0) : x(a), y(b) {}; 

    bool operator<(const Point &p) const {
        return y < p.y || (y == p.y && x < p.x);
    }
};

inline bool direct(Point base, Point a, Point b) {
    return (a.x - base.x) * (b.y - base.y) - (a.y - base.y) * (b.x - base.x) < 0;
}

int main() {
    int n, i;
    int k = 2;
    vector<Point> P, H;

    scanf("%d", &n);
    P.resize(n);
    for (i = 1; i <= n; ++i) {
        scanf("%d%d", &P[i - 1].x, &P[i - 1].y);
    }
    sort(P.begin(), P.end());
    H.resize(2 * n);
    H[0] = P[0];
    H[1] = P[1];
    for (i = 2; i < n; ++i) {
        while (k >= 2 && direct(H[k - 2], H[k - 1], P[i]))
            k--;
        H[k++] = P[i];
    }
    for (i = n - 1; i >= 0; --i) {
        while (k >= 2 && direct(H[k - 2], H[k - 1], P[i]))
            k--;
        H[k++] = P[i];
    }
    printf("%d\n", k - 1);
    for (i = 0; i < k - 1; ++i) {
        printf("%d %d\n", H[i].x, H[i].y);
    }
    return 0;
}
```

The optimized code uses std::vector instead of raw pointer arrays and it fixes the memory leaks by automatically managing memory. The arguments for the direct function are passed by value for efficiency. The constructor bug in Point class is fixed by using initializer list. The sort function uses the less-than operator defined in the Point class by default.