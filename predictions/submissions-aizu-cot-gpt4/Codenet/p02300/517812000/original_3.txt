The main performance issue in this program is the use of dynamic memory allocation (new keyword) for arrays P and H. Dynamic memory allocation is relatively slow and can lead to memory fragmentation. Another issue is the use of scanf and printf for IO operations; using cin and cout would be faster.

Here are the optimization steps:

1. Replace dynamic arrays P and H with std::vector. This will not only improve performance but also will manage memory automatically, preventing memory leaks.

2. Replace scanf and printf with cin and cout. This is faster and more idiomatic in C++.

3. In the constructor of the Point class, the variables x and y are declared again, which hides the class members. This is a bug, not an optimization issue, but it should be corrected.

4. Sort can be replaced with std::sort which is an efficient sorting algorithm provided by C++ standard library.

5. The usage of class can be replaced with struct in this case as all members are public which will slightly reduce the overhead.

After optimizing, the code will be:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

struct Point {
  int x, y;
  Point(int a = 0, int b = 0) : x(a), y(b) {}
  
  bool operator<(const Point &p) const {
    return y < p.y || (y == p.y && x < p.x);
  }
};

inline bool direct(Point &base, Point &a, Point &b) {
  return (a.x - base.x) * (b.y - base.y) - (a.y - base.y) * (b.x - base.x) < 0;
}

int main() {
  int n, i;
  int k = 2;
  
  cin >> n;
  
  vector<Point> P(n);
  for (i = 0; i < n; ++i) {
    cin >> P[i].x >> P[i].y;
  }

  sort(P.begin(), P.end());

  vector<Point> H(2 * n);
  H[0] = P[0];
  H[1] = P[1];
  
  for (i = 0; i < n - 2; ++i) {
    while (k >= 2 && direct(H[k - 2], H[k - 1], P[i + 2]))
      k--;
    H[k++] = P[i + 2];
  }
  
  H[k++] = P[n - 2];
  
  for (i = n; i > 2; i--) {
    while (k >= 2 && direct(H[k - 2], H[k - 1], P[i - 3]))
      k--;
    H[k++] = P[i - 3];
  }

  cout << k - 1 << "\n";
  
  for (i = 0; i < k - 1; ++i) {
    cout << H[i].x << " " << H[i].y << "\n";
  }

  return 0;
}
```