Here are the steps to optimize the given program:

1. Use `std::vector` instead of raw pointers for `P` and `H` arrays. `std::vector` is safer, and it takes care of memory management automatically, reducing the chance of memory leaks.

2. Avoid `scanf` and `printf` as they are slower than C++ I/O functions. Use `std::cin` and `std::cout` instead.

3. In the constructor of class `Point`, replace `int x = a;` and `int y = b;` with `x = a;` and `y = b;` respectively. The original code defined new local variables `x` and `y` and didn't initialize the member variables.

4. Use pre-increment (`++i`) instead of post-increment (`i++`) where the result of the operation isn't used. Pre-increment can be faster because it doesn't need to make a copy of the value before incrementing it.

5. Add `reserve()` function for vectors `P` and `H` to avoid unnecessary reallocations.

Here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
class Point {
public:
  int x, y;
  Point(int a = 0, int b = 0) : x(a), y(b) {}
  bool operator<(const Point &p) const {
    return y < p.y || (y == p.y && x < p.x);
  }
};
inline bool direct(Point &base, Point &a, Point &b) {
  return (a.x - base.x) * (b.y - base.y) - (a.y - base.y) * (b.x - base.x) < 0;
}
int main() {
  int n, i;
  int k = 2;
  cin >> n;
  vector<Point> P(n);
  for (i = 0; i < n; ++i) {
    cin >> P[i].x >> P[i].y;
  }
  sort(P.begin(), P.end());
  vector<Point> H;
  H.reserve(2 * n);
  H.push_back(P[0]);
  H.push_back(P[1]);
  for (i = 0; i < n - 2; ++i) {
    while (k >= 2 && direct(H[k - 2], H[k - 1], P[i + 2]))
      k--;
    H[k++] = P[i + 2];
  }
  H[k++] = P[n - 2];
  for (i = n; i > 2; --i) {
    while (k >= 2 && direct(H[k - 2], H[k - 1], P[i - 3]))
      k--;
    H[k++] = P[i - 3];
  }
  cout << k - 1 << "\n";
  for (i = 0; i < k - 1; ++i) {
    cout << H[i].x << " " << H[i].y << "\n";
  }
  return 0;
}
```
In this optimized code, we improved memory safety and possibly increased performance by using `std::vector` instead of raw pointers. We also increased readability by using C++ style I/O instead of C style I/O. The program now is more idiomatic, readable, and efficient.