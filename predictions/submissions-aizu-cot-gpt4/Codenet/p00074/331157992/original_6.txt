The given C/C++ program reads hours, minutes, and seconds from the input, calculates a certain time value, and then prints this value twice in a formatted manner. Here are some steps to optimize this program:

1. Function definition: In C/C++, it's better to explicitly declare the return type of the function and the types of the parameters. In the original program, all parameters and the return type are implicitly int, which is not a good practice as it reduces readability and may cause problems with some compilers or settings. 

2. scanf function: The multiplication of the scanf function result with -~h is unnecessary because scanf returns the number of input items successfully matched and assigned, which will be 3 if the operation is successful. If it's not successful, the program should stop reading the input, so we can simply check if the result of scanf is equal to 3. 

3. Loop structure: The use of for loops in this context is a bit confusing. We can replace the first for loop with a while loop which continues as long as scanf successfully reads 3 integers. The second for loop runs exactly 2 times, so we can simply duplicate the body of the loop. This makes the code clearer.

4. Variable reuse: The variable 'h' is being reused to control the second for loop. This can be confusing. It's better to use another variable for this purpose.

Here is the optimized program according to these steps:

```cpp
#include <stdio.h>

int main() {
  int h, m, s, t;
  while (scanf("%d%d%d", &h, &m, &s) == 3) {
    t = (120 - h * 60 - m) * 60 - s;
    printf("%02d:%02d:%02d\n", t / 3600, t / 60 % 60, t % 60);
    t *= 3;
    printf("%02d:%02d:%02d\n", t / 3600, t / 60 % 60, t % 60);
  }
  return 0;
}
```

With these modifications, the C/C++ program is optimized for running time and memory usage. It's also more readable and conforming to good coding practices.