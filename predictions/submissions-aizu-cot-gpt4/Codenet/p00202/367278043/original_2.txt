This program has two main parts: prime number generation and solving a subset sum problem. The prime number generation can be optimized by using the Sieve of Eratosthenes algorithm effectively. The subset sum problem can be optimized by avoiding unnecessary iterations when updating dp array.

Optimization steps:
1. In the prime number generation, the inner loop can start from i*i instead of i. Because any number less than i*i would have been already marked by previous prime numbers.

2. In the subset sum problem, we can break from the inner loop as soon as dp[i] becomes true. This is because once we have found a subset with sum equal to i, there is no need to check for further subsets.

3. We can use memset to initialize dp array to false, which is more efficient than using a loop.

4. When printing the largest prime number, we can skip the numbers which are not prime. So we check prime[i] first, if it's false then move to the next iteration.

Here is the optimized program:

```cpp
#include <algorithm>
#include <stdio.h>
#include <string.h>
using namespace std;
int n, x, a[30];
bool dp[1000001], prime[1000001];
int main() {
  memset(prime, false, sizeof(prime));
  prime[0] = true, prime[2] = true;
  for (int i = 3; i <= 1000000; i += 2)
    prime[i] = true;
  for (int i = 3; i * i <= 1000000; i += 2) {
    if (!prime[i])
      continue;
    for (int j = i * i; j <= 1000000; j += i * 2)
      prime[j] = false;
  }
  while (scanf("%d%d", &n, &x), n) {
    for (int i = 0; i < n; i++)
      scanf("%d", &a[i]);
    sort(a, a + n);
    memset(dp, false, sizeof(dp));
    dp[0] = true;
    for (int i = 1; i <= x; i++) {
      for (int j = 0; j < n && i >= a[j]; j++) {
        if (dp[i - a[j]]) {
          dp[i] = true;
          break;
        }
      }
    }
    for (int i = x; i >= 0; i--) {
      if (prime[i] && dp[i]) {
        printf(i ? "%d\n" : "NA\n", i);
        break;
      }
    }
  }
}
```
