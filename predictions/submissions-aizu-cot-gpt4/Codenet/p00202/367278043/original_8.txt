Optimization Step-by-Step:

1. Instead of using `scanf` for input, use `cin` as it is faster.
2. Instead of using `printf` for output, use `cout` as it is faster.
3. Pre-compute prime numbers only once and store it in an array. The existing code is computing it for every test case which is unnecessary.
4. While checking for prime numbers, you are currently checking till 1000000 which can be optimized to sqrt(1000000) because a larger factor of the number must be a multiple of the smaller factor that has already been checked.
5. For array `a[]`, instead of reading the input and sorting it every time, we can use a set which will automatically keep the elements in sorted order.
6. For the inner loop in `dp` computation, it can break as soon as we've found a solution - there's no need to keep iterating if `dp[i]` has been set to `true`.

Optimized Program:

```cpp
#include <iostream>
#include <cmath>
#include <set>
#include <vector>
using namespace std;

const int MAX = 1000000;
bool prime[MAX + 1];
vector<bool> dp(MAX + 1, false);

void sieve() {
    int root = sqrt(MAX);
    fill(prime, prime + MAX + 1, true);
    prime[0] = prime[1] = false;
    for (int i = 2; i <= root; i++) {
        if (prime[i]) {
            for (int j = i * i; j <= MAX; j += i)
                prime[j] = false;
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    sieve();
    int n, x;
    while (cin >> n >> x, n) {
        set<int> a;
        for (int i = 0; i < n; i++) {
            int temp;
            cin >> temp;
            a.insert(temp);
        }
        dp[0] = true;
        for (int i = 1; i <= x; i++) {
            for (auto j : a) {
                if (i >= j && dp[i - j]) {
                    dp[i] = true;
                    break;
                }
            }
        }
        for (int i = x; i >= 0; i--) {
            if (dp[i] && prime[i]) {
                cout << (i ? to_string(i) : "NA") << "\n";
                break;
            }
        }
    }
    return 0;
}
```
Note: I have used C++ STL which is faster and more convenient than raw arrays in C++. This will significantly reduce the running time and memory usage of the program.