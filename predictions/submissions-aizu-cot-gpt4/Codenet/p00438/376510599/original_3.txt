This program is already quite optimized, but there are still a few tweaks we can make to squeeze out some additional performance.

1. We can avoid using the comma operator in the while loop, which makes the code more readable and slightly improves performance.

2. Instead of initializing the entire `way` array to 0 inside the loop, we can initialize it to 0 at the time of declaration. This will save memory write operations.

3. We can combine the two for loops that initialize the first row and first column of the `way` array into one. This reduces the number of iterations.

4. The variable `w` and `h` are only used inside the innermost loop, so we can declare them there to reduce their scope and improve readability.

5. We can use `++i` and `++j` instead of `i++` and `j++`. This does not create a temporary variable and hence is faster.

Here is the optimized code:

```cpp
#include <cstdio>

int main() {
  int a, b, n, t1, t2, way[17][17] = {0};
  while (true) {
    scanf("%d %d", &a, &b);
    if (a == 0 && b == 0) break;
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
      scanf("%d %d", &t1, &t2);
      way[t2][t1] = -1;
    }
    for (int i = 1; i <= a || i <= b; i++) {
      if (i <= a && way[1][i] != -1) way[1][i] = 1;
      if (i <= b && way[i][1] != -1) way[i][1] = 1;
    }
    for (int i = 2; i <= b; ++i) {
      for (int j = 2; j <= a; ++j) {
        if (way[i][j] != -1) {
          int w = way[i][j - 1] != -1 ? way[i][j - 1] : 0;
          int h = way[i - 1][j] != -1 ? way[i - 1][j] : 0;
          way[i][j] = w + h;
        }
      }
    }
    printf("%d\n", way[b][a]);
  }
  return 0;
}
```

Note that these optimizations are relatively minor and may not result in a noticeable performance increase, especially on modern computers with plenty of CPU and memory resources. Often, the readability and maintainability of the code are more important considerations than minor performance tweaks.