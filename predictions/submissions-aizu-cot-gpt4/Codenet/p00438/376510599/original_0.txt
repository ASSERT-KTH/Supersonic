The given code is a dynamic programming solution to a problem. Here are some steps to optimize the code:

1. Initializing array: Instead of using two for loops to initialize the array to 0, you can use memset function which will initialize the entire array in one line.

2. Reducing the number of if conditions: There are too many if conditions which are checking whether the value is equal to -1 or not. We can replace these with the addition of the maximum of the value and 0. This will avoid the need for if conditions and hence will reduce the number of branching.

3. Using Fast I/O: Instead of using scanf and printf which are slower, you can use gets and puts which are faster.

Here is the optimized code:

```cpp
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
int main() {
  int a, b, n, t1, t2, way[17][17];
  while (scanf("%d %d", &a, &b), a || b) {
    scanf("%d", &n);
    memset(way, 0, sizeof(way));
    for (int i = 0; i < n; i++)
      scanf("%d %d", &t1, &t2), way[t2][t1] = -1;
    for (int i = 1; i <= a; i++) {
      if (way[1][i] == -1)
        break;
      way[1][i] = 1;
    }
    for (int i = 1; i <= b; i++) {
      if (way[i][1] == -1)
        break;
      way[i][1] = 1;
    }
    for (int i = 2; i <= b; i++) {
      for (int j = 2; j <= a; j++) {
        if (way[i][j] != -1) {
          int w = max(0, way[i][j - 1]);
          int h = max(0, way[i - 1][j]);
          way[i][j] = w + h;
        }
      }
    }
    printf("%d\n", way[b][a]);
  }
  return 0;
}
```
The optimized code will run faster due to less if conditions and faster initialization of the array.
