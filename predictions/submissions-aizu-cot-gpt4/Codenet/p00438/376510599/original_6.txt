This program is already quite optimized in terms of running time, but there are a few minor changes we can make:

1. We can change the order of the loops in the initialization of the `way` array. If we swap the loops, we get better cache locality because C++ is a row-major language. This means that accessing elements in the same row (which are next to each other in memory) is faster than accessing elements in the same column (which are not next to each other in memory).

2. In the section where we are calculating the value of `way[i][j]`, we are checking if `way[i][j - 1]` and `way[i - 1][j]` are not `-1`, if true we assign them to `w` and `h` respectively and add them to `way[i][j]`. To optimize this, we can directly add `way[i][j - 1]` and `way[i - 1][j]` if they are not `-1`, without the need of `w` and `h` variables.

Here is the optimized code according to the steps mentioned above:

```cpp
#include <cstdio>
int main() {
  int a, b, n, t1, t2, way[17][17];
  while (scanf("%d %d", &a, &b), a || b) {
    scanf("%d", &n);
    for (int j = 1; j <= a; j++) {
      for (int i = 1; i <= b; i++)
        way[i][j] = 0;
    }
    for (int i = 0; i < n; i++)
      scanf("%d %d", &t1, &t2), way[t2][t1] = -1;
    for (int i = 1; i <= a; i++) {
      if (way[1][i] == -1)
        break;
      way[1][i] = 1;
    }
    for (int i = 1; i <= b; i++) {
      if (way[i][1] == -1)
        break;
      way[i][1] = 1;
    }
    for (int i = 2; i <= b; i++) {
      for (int j = 2; j <= a; j++) {
        if (way[i][j] != -1) {
          if (way[i][j - 1] != -1)
            way[i][j] += way[i][j - 1];
          if (way[i - 1][j] != -1)
            way[i][j] += way[i - 1][j];
        }
      }
    }
    printf("%d\n", way[b][a]);
  }
  return 0;
}
```