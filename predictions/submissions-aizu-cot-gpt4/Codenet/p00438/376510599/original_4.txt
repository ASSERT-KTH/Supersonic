First, let's understand the given piece of code:

The code is generally a dynamic programming solution for finding the number of ways to move from top-left to bottom-right in a 2D grid. You can only move down or right. The grid dimensions are given by `a` and `b`. Some of the cells of the grid are blocked and are denoted by `-1`.

Optimizations:

1. Move the `w` and `h` variables outside the inner loop. This saves the cost of repeatedly declaring and destroying these variables.

2. Initialize the `w` and `h` variables to zero before the inner loop. This way, we do not need to set them to zero in each iteration.

3. Instead of using `scanf` and `printf`, we can use `cin` and `cout` which are faster. But to make them even faster, we can use `ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);` at the beginning of the main function. This will make the input-output operations faster.

4. Instead of using `||` operator in while loop, using `&&` operator will make it faster.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int a, b, n, t1, t2, way[17][17], w = 0, h = 0;
  
  while (cin >> a >> b && (a || b)) {
    cin >> n;
    for (int i = 1; i <= b; i++) {
      for (int j = 1; j <= a; j++)
        way[i][j] = 0;
    }
    for (int i = 0; i < n; i++)
      cin >> t1 >> t2, way[t2][t1] = -1;
    for (int i = 1; i <= a; i++) {
      if (way[1][i] == -1)
        break;
      way[1][i] = 1;
    }
    for (int i = 1; i <= b; i++) {
      if (way[i][1] == -1)
        break;
      way[i][1] = 1;
    }
    for (int i = 2; i <= b; i++) {
      w = h = 0;
      for (int j = 2; j <= a; j++) {
        if (way[i][j] != -1) {
          if (way[i][j - 1] != -1)
            w = way[i][j - 1];
          if (way[i - 1][j] != -1)
            h = way[i - 1][j];
          way[i][j] = w + h;
        }
      }
    }
    cout << way[b][a] << '\n';
  }
  return 0;
}
```

Keep in mind that the time and memory complexity of the program is still the same. These are minor optimizations that help the program run a bit faster and use memory more efficiently.