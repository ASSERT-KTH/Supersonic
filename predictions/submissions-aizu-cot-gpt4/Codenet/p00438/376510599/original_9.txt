This program calculates the number of ways to reach the bottom-right cell in a 2D grid (a x b) from the top-left cell, given that some cells are blocked. The number of blocked cells is provided as the input and their coordinates are stored in the 2D array `way[][]` where -1 indicates a blocked cell. We can only move right or down.

The program can be optimized for running time and memory usage by following these steps:

1. **Array Initialization**: We can initialize the array `way[][]` to 0 using memset instead of using double for loops. This reduces the time complexity from O(a*b) to O(1).

2. **Avoiding unnecessary operations**: In the loops where the program checks if a way is blocked or not, it assigns `w` or `h` to `way[i][j-1]` or `way[i-1][j]` only if these are not blocked. Else, it assigns them 0. Instead, we can directly add `way[i][j-1]` and `way[i-1][j]` to `way[i][j]`, because if they are blocked, they would be -1 and adding them would not affect the result.

The optimized program would look like this:

```cpp
#include <cstdio>
#include <cstring>
int main() {
  int a, b, n, t1, t2, way[17][17];
  while (scanf("%d %d", &a, &b), a || b) {
    scanf("%d", &n);
    memset(way, 0, sizeof(way)); // initialize array to 0
    for (int i = 0; i < n; i++) {
      scanf("%d %d", &t1, &t2), way[t2][t1] = -1;
    }
    for (int i = 1; i <= a; i++) {
      if (way[1][i] == -1)
        break;
      way[1][i] = 1;
    }
    for (int i = 1; i <= b; i++) {
      if (way[i][1] == -1)
        break;
      way[i][1] = 1;
    }
    for (int i = 2; i <= b; i++) {
      for (int j = 2; j <= a; j++) {
        if (way[i][j] != -1) {
          way[i][j] = (way[i][j - 1] != -1 ? way[i][j - 1] : 0) + (way[i - 1][j] != -1 ? way[i - 1][j] : 0);
        }
      }
    }
    printf("%d\n", way[b][a]);
  }
  return 0;
}
```

Please note that the memory usage doesn't change significantly in this case. The `way[][]` array is required to store the state of each cell in the grid, and it can't be reduced further. The main optimization here is in terms of running time.