This program is trying to find the number of ways to reach from top-left corner to bottom-right corner in a 2D matrix. The optimization can be done in two ways: 
1. Avoiding unnecessary computations: The current program initializes all elements of the matrix to zero and then updates some of them to -1. We can avoid this by initializing all elements to -1, and updating only those that are part of the path.
2. Reducing memory usage: The program uses a 17x17 matrix to store the paths, which consumes quite a lot of memory. We can reduce this by using a 1D array of size 17 instead, and update it in each iteration.

Optimized program:

```cpp
#include <cstdio>
int main() {
  int a, b, n, t1, t2, way[17];
  while (scanf("%d %d", &a, &b), a || b) {
    scanf("%d", &n);
    for (int i = 1; i <= a; i++)
      way[i] = -1;
    for (int i = 0; i < n; i++) {
      scanf("%d %d", &t1, &t2);
      if(t2 == 1) way[t1] = 0;
    }
    way[1] = 1;
    for (int i = 2; i <= a; i++)
      if (way[i] != 0) way[i] = way[i - 1];
    for (int i = 2; i <= b; i++) {
      for (int j = 1; j <= a; j++)
        way[j] = (way[j-1] != 0 && way[j] != 0) ? way[j] + way[j - 1] : 0;
    }
    printf("%d\n", way[a]);
  }
  return 0;
}
```

In this optimized program, we first initialize the array 'way' elements to -1. Then we only update those elements which are part of the path. In the next step, we update the array 'way' for each row of the matrix, which greatly reduces the memory usage. Finally, we print the number of ways to reach the bottom-right corner from the top-left corner.