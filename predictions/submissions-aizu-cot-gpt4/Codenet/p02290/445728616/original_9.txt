Step by step optimization:

1. **Avoiding unnecessary memory allocations:** In the given program, every time in the loop, 3 complex numbers are being created for the function call to 'project'. This can be avoided by pre-allocating these complex numbers and just changing their values inside the loop. This reduces the number of times memory is allocated and deallocated, saving time and memory.

2. **Avoiding division operation:** The division operation is generally more expensive than multiplication in terms of CPU cycles. In the 'project' function, instead of dividing 'c' by 'b', we can calculate the reciprocal of 'b' once and use it for multiplication. This will save CPU cycles.

3. **Using cin/cout effectively:** cin and cout operations are slower compared to scanf and printf, but can be optimized by using std::ios_base::sync_with_stdio(false) and cin.tie(NULL). This will make input/output operations faster.

Now let's apply these optimizations to the given code:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef complex<double> P;

P project(P& a, P& b, P& c) {
  b -= a; c -= a;
  P b_reciprocal = 1.0 / b;
  return a + b * real(c * b_reciprocal);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n;
  double ax, ay, bx, by, cx, cy;
  cin >> ax >> ay >> bx >> by >> n;

  P a, b, c;
  
  while (n--) {
    cin >> cx >> cy;
    a = P(ax, ay); b = P(bx, by); c = P(cx, cy);
    P p = project(a, b, c);
    printf("%.8f %.8f\n", p.real(), p.imag());
  }
  
  return 0;
}
```
This optimized code should run faster and consume less memory than the original version.