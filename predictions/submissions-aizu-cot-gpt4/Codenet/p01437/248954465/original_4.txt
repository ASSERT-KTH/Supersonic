The optimization of the program can be performed in the following steps:

1. Use the standard C++ library headers instead of the combined header file. Including the combined stdc++.h file causes the compiler to include and compile all standard libraries even if they are not used in the program. This increases the compile time unnecessarily. In this program, you only need iostream, string, and cstring.

2. Instead of using 'endl' to end a line, use '\n'. 'endl' causes an unnecessary flush of the output buffer, which slows down the program. '\n' doesn't have this issue.

3. Avoid using global variables. Instead, pass them as arguments to the functions. This improves readability and maintainability of the code.

4. Instead of using the 'find' function to get the direction index, a map can be used. The 'find' function has a time complexity of O(n), where n is the string length. However, a map has a time complexity of O(1) for the 'find' operation.

5. After finding the start position and direction, break the loop to save time.

Here is the optimized program:

```c++
#include <iostream>
#include <string>
#include <cstring>
#include <map>
using namespace std;
typedef long long int64;
const string tmp = "NESW";
const int vy[] = {-1, 0, 1, 0}, vx[] = {0, 1, 0, -1};
map<char, int> dir = {{'N', 0}, {'E', 1}, {'S', 2}, {'W', 3}};

void dfs(int64 nxt[100][100][4], string C[100], int x, int y, int v, int64 step, int H, int W) {
  int nx = x + vx[v], ny = y + vy[v], nv = (v + 1) % 4;
  if (step == 0) {
    cout << y + 1 << " " << x + 1 << " " << tmp[v] << "\n";
    return;
  } else if (0 <= nx && 0 <= ny && nx < W && ny < H && C[ny][nx] != '#') {
    int64 loop = ~nxt[nx][ny][v] ? nxt[x][y][v] - nxt[nx][ny][v] + 1 : step;
    nxt[nx][ny][v] = nxt[x][y][v] + 1;
    return (dfs(nxt, C, nx, ny, v, (step - 1) % loop, H, W));
  } else {
    nxt[x][y][nv] = nxt[x][y][v];
    return (dfs(nxt, C, x, y, nv, step, H, W));
  }
}

int main() {
  int H, W, sx, sy, sv;
  int64 L;
  string C[100];
  while (cin >> H >> W >> L, H) {
    int64 nxt[100][100][4];
    memset(nxt, -1, sizeof(nxt));
    for (int i = 0; i < H; i++) {
      cin >> C[i];
      for (int j = 0; j < W; j++) {
        if (dir.find(C[i][j]) != dir.end()) {
          sx = j, sy = i, sv = dir[C[i][j]];
          break;
        }
      }
    }
    nxt[sx][sy][sv] = 0;
    dfs(nxt, C, sx, sy, sv, L, H, W);
  }
}
```

This optimized program has better runtime performance and uses memory more efficiently than the original one.