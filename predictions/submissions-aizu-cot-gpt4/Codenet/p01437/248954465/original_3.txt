To optimize this program, we can perform a few steps:

1. The `#include <bits/stdc++.h>` includes more headers than required, which increases the compilation time. It's better to include only those headers that are necessary.

2. The usage of `cin` and `cout` for I/O operations is slower. We can use `scanf` and `printf` instead for faster I/O.

3. The usage of `endl` to end a line is slower because it causes a flush operation, which is not necessary in this code. Instead, we can use `"\n"`.

4. The usage of if-else constructs can be slightly optimized by reordering the conditions. The most likely condition should be checked first.

5. The `tmp.find` function has a time complexity of O(n). We can create a map to store the index of each character in `tmp` to reduce the time complexity to O(1).

Here's the optimized program:

```cpp
#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <map>
using namespace std;
typedef long long int64;
const string tmp = "NESW";
const int vy[] = {-1, 0, 1, 0}, vx[] = {0, 1, 0, -1};
int H, W;
int64 L;
string C[100];
int sx, sy, sv;
int64 nxt[100][100][4];
map<char, int> tmpMap = {{'N', 0}, {'E', 1}, {'S', 2}, {'W', 3}};
void dfs(int x, int y, int v, int64 step) {
  int nx = x + vx[v], ny = y + vy[v], nv = (v + 1) % 4;
  if (step == 0) {
    printf("%d %d %c\n", y + 1, x + 1, tmp[v]);
    return;
  }
  if (0 <= nx && 0 <= ny && nx < W && ny < H && C[ny][nx] != '#') {
    int64 loop = ~nxt[nx][ny][v] ? nxt[x][y][v] - nxt[nx][ny][v] + 1 : step;
    nxt[nx][ny][v] = nxt[x][y][v] + 1;
    return (dfs(nx, ny, v, (step - 1) % loop));
  }
  nxt[x][y][nv] = nxt[x][y][v];
  return (dfs(x, y, nv, step));
}
int main() {
  while (scanf("%d %d %lld", &H, &W, &L), H) {
    memset(nxt, -1, sizeof(nxt));
    for (int i = 0; i < H; i++) {
      cin >> C[i];
      for (int j = 0; j < W; j++) {
        if (tmpMap.count(C[i][j]))
          sx = j, sy = i, sv = tmpMap[C[i][j]];
      }
    }
    nxt[sx][sy][sv] = 0;
    dfs(sx, sy, sv, L);
  }
}
```