This code can be optimized in several ways:

1. Use a statically allocated 2D array: The 2D array C is statically allocated with a fixed size of 102x102. When C is not in use, it still occupies memory. To save memory, you can dynamically allocate memory to array C.

2. Recursive function calls: The function meiro() is called recursively, which increases the running time complexity and stack memory usage. You can replace the recursion with an iterative approach using a stack or queue.

3. Use memset to initialize the array: Rather than using two for loops to initialize the array you can use the memset function which will be faster.

However, in this case, as you said not to rewrite the program completely, I will just implement the first and third optimizations:

Here's your optimized code:

```cpp
#include <iostream>
#include <cstring>
using namespace std;

int** C;

void meiro(int W, int H, int c) {
  if (C[W][H] != c) {
    return;
  }
  C[W][H] = -1;
  meiro(W - 1, H, c);
  meiro(W, H + 1, c);
  meiro(W + 1, H, c);
  meiro(W, H - 1, c);
}

int main() {
  while (1) {
    int w, h;
    cin >> w >> h;
    if (w == 0 && h == 0) {
      break;
    }
    C = new int*[w+2];
    for(int i=0; i<w+2; i++) {
      C[i] = new int[h+2];
    }
    memset(*C, 10, sizeof(int)*(w+2)*(h+2));

    int xs, ys, xg, yg;
    cin >> xs >> ys >> xg >> yg;
    int n;
    cin >> n;
    int c, d, x, y;
    for (int i = 0; i < n; i++) {
      cin >> c >> d >> x >> y;
      if (d == 0) {
        for (int j = x; j < x + 4; j++) {
          for (int k = y; k < y + 2; k++) {
            C[j][k] = c;
          }
        }
      } else {
        for (int j = x; j < x + 2; j++) {
          for (int k = y; k < y + 4; k++) {
            C[j][k] = c;
          }
        }
      }
    }
    meiro(xs, ys, C[xs][ys]);
    if (C[xg][yg] == -1) {
      cout << "OK" << endl;
    } else {
      cout << "NG" << endl;
    }

    for(int i=0; i<w+2; i++) {
      delete [] C[i];
    }
    delete [] C;
  }
  return 0;
}
```

In this optimized program, memory to array C is allocated dynamically according to the input values of w and h. After the computation, the memory is freed by using delete. This saves memory when the array C is not in use. Also, instead of using nested loops to initialize the array, the memset function is used which is faster.