The program can be optimized for running time and memory usage in the following ways:

1. Use an array of smaller size. The size of the array C is 102x102, which seems too large for the inputs. If the maximum values of w and h are 100, an array of size 101x101 should suffice. If you know the maximum possible values of w and h, you can reduce the size of the array accordingly. This will reduce the memory usage.

2. Avoid multiple calls to the function meiro() in the recursion. Each call to this function includes a check if C[W][H] != c. Instead of making this check each time, you can check if W and H are within the valid range before calling the function. This will reduce the number of function calls and thereby improve the running time.

Here is the optimized version of the program:

```C++
#include <iostream>
using namespace std;
int C[101][101];

void meiro(int W, int H, int c) {
  C[W][H] = -1;
  if (W > 0 && C[W - 1][H] == c) meiro(W - 1, H, c);
  if (H < 100 && C[W][H + 1] == c) meiro(W, H + 1, c);
  if (W < 100 && C[W + 1][H] == c) meiro(W + 1, H, c);
  if (H > 0 && C[W][H - 1] == c) meiro(W, H - 1, c);
}

int main() {
  while (1) {
    int w, h;
    cin >> w >> h;
    if (w == 0 && h == 0) break;

    for (int i = 0; i <= w; i++)
      for (int j = 0; j <= h; j++)
        C[i][j] = 10;

    int xs, ys, xg, yg;
    cin >> xs >> ys >> xg >> yg;
    int n;
    cin >> n;
    int c, d, x, y;
    for (int i = 0; i < n; i++) {
      cin >> c >> d >> x >> y;
      if (d == 0) {
        for (int j = x; j < x + 4; j++)
          for (int k = y; k < y + 2; k++)
            C[j][k] = c;
      } else {
        for (int j = x; j < x + 2; j++)
          for (int k = y; k < y + 4; k++)
            C[j][k] = c;
      }
    }
    if (C[xs][ys] != -1) meiro(xs, ys, C[xs][ys]);
    if (C[xg][yg] == -1)
      cout << "OK" << endl;
    else
      cout << "NG" << endl;
  }
  return 0;
}
```

In this optimized version, I have reduced the size of the array C to 101x101 and moved the condition checks for W and H into the main function before the recursive calls to meiro(). This will reduce the number of unnecessary function calls. I have also modified the range of the for loop initializing the array C to only initialize the cells that will be used, which will save some time.