Optimization Steps:

1. Remove the global variable 'isOK' and return a boolean value from the DFS function. This avoids unnecessary global state and allows the compiler to optimize better.
2. The DFS function is called recursively, which can result in a stack overflow for large inputs. To avoid this, we can have conditions to return early in the function.
3. The initialization of the 'Board' variable can be optimized by using memset function which is faster than the double loop.
4. Instead of setting the value of 'Board[x][y]' to 0 in DFS function, we can set it to a different value which isn't valid. This way, we can avoid checking the condition Board[x][y] != c multiple times.

Optimized Program:

```c++
#include <iostream>
#include <cstring>
using namespace std;

int Board[102][102];
int xs, ys, xg, yg;

bool DFS(int c, int x, int y) {
  if (x < 0 || x > 101 || y < 0 || y > 101 || Board[x][y] != c)
    return false;
  if (x == xg && y == yg)
    return true;
  
  Board[x][y] = -2;
  return DFS(c, x + 1, y) || DFS(c, x, y + 1) || DFS(c, x - 1, y) || DFS(c, x, y - 1);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int w, h;
  while (true) {
    cin >> w >> h;
    if (w == 0 && h == 0)
      break;
      
    memset(Board, -1, sizeof(Board));

    cin >> xs >> ys >> xg >> yg;
    int n, c, d, x, y;
    cin >> n;
    for (int t = 0; t < n; t++) {
      cin >> c >> d >> x >> y;
      int wb = 2 + (!d * 2);
      int hb = 2 + (d * 2);
      for (int i = 0; i < hb; i++) {
        for (int j = 0; j < wb; j++)
          Board[x + j][y + i] = c;
      }
    }
    if (DFS(Board[xs][ys], xs, ys))
      cout << "OK" << '\n';
    else
      cout << "NG" << '\n';
  }
  return 0;
}
```
Please note:
1. I've also added `ios_base::sync_with_stdio(false); cin.tie(NULL);` in main function for faster input/output operations.
2. Remember that this approach can still cause stack overflow for large inputs. Consider a non-recursive approach if that is a concern.