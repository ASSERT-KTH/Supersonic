There are multiple steps you can take to optimize this program:

1. Avoid Global Variables: Using global variables is generally considered a bad practice in C/C++. They increase the program's memory footprint and can make debugging more difficult. In this case, the Board array and isOK variable can be moved into the main function and passed as arguments to the DFS function.

2. Use std::array Instead of C-style Array: std::array is a container that encapsulates fixed size arrays. It is more efficient and safer than traditional C-style arrays.

3. Use std::array<bool, 102> Instead of int For Board: Since the Board array is mainly used to store boolean values (0 or 1), using an array of bools instead of ints could save memory.

4. Avoid Recursion in DFS: Recursion can lead to a large amount of memory being used for the call stack, especially for deep recursions. Converting the recursive DFS function to an iterative one using a stack can save memory.

5. Use fast I/O operations: Using scanf and printf instead of cin and cout can speed up I/O operations.

Here is the optimized version of your code:

```cpp
#include <iostream>
#include <array>
#include <stack>

using namespace std;

void DFS(array<array<bool, 102>, 102>& Board, bool& isOK, int xs, int ys, int xg, int yg) {
  stack<pair<int, int>> s;
  s.push({xs, ys});
  while (!s.empty()) {
    int x = s.top().first;
    int y = s.top().second;
    s.pop();
    if (Board[x][y]) {
      if (x == xg && y == yg) {
        isOK = true;
        return;
      }
      Board[x][y] = false;
      s.push({x + 1, y});
      s.push({x, y + 1});
      s.push({x - 1, y});
      s.push({x, y - 1});
    }
  }
}

int main() {
  array<array<bool, 102>, 102> Board;
  bool isOK;
  int xs, ys, xg, yg;
  int w, h;
  while (scanf("%d %d", &w, &h), w || h) {
    fill(Board.begin(), Board.end(), false);
    scanf("%d %d %d %d", &xs, &ys, &xg, &yg);
    int n, c, d, x, y;
    scanf("%d", &n);
    for (int t = 0; t < n; t++) {
      scanf("%d %d %d %d", &c, &d, &x, &y);
      int wb = 2 + (!d * 2);
      int hb = 2 + (d * 2);
      for (int i = 0; i < hb; i++) {
        for (int j = 0; j < wb; j++)
          Board[x + j][y + i] = c;
      }
    }
    DFS(Board, isOK, xs, ys, xg, yg);
    if (isOK)
      printf("OK\n");
    else
      printf("NG\n");
  }
  return 0;
}
```

Please note that this optimization might not be significant in small inputs. However, it can be beneficial when dealing with large inputs.