The given C++ program is performing a Depth First Search (DFS) algorithm to solve a problem. It can be optimized in several ways:

1. **Avoid using global variables:** Global variables can be avoided by passing them as arguments to functions. This would make the code more maintainable and less error-prone. In this program, `Board`, `isOK`, `xs`, `ys`, `xg`, `yg` are global variables. 

2. **Avoid unnecessary computations:** The initialization of the `Board` array with -1 is done for every element of the array but it's not necessary for every case. We only need to initialize the necessary cells that will be used in the DFS. So, we can initialize it in the loop where we read the input for the blocks.

3. **Pass by reference:** When calling the DFS function, the board is passed by value which means a copy of the board is created every time. This is not efficient in terms of memory and time. It would be better to pass it by reference.

**Optimized program:**

Please note that the optimization strategy applied here does not guarantee a significant running time or memory usage reduction. The actual impact depends on the input data and the specific context. 

```cpp
#include <iostream>
#include <vector>
using namespace std;

bool DFS(vector<vector<int>>& Board, int c, int x, int y, int xg, int yg) {
  if (Board[x][y] != c) {
    return false;
  } else if (x == xg && y == yg) {
    return true;
  }
  Board[x][y] = 0;
  return DFS(Board, c, x + 1, y, xg, yg) || DFS(Board, c, x, y + 1, xg, yg) || DFS(Board, c, x - 1, y, xg, yg) || DFS(Board, c, x, y - 1, xg, yg);
}

int main() {
  int w, h;
  while (true) {
    cin >> w >> h;
    if (w == 0 && h == 0)
      break;
    vector<vector<int>> Board(102, vector<int>(102, -1));
    int xs, ys, xg, yg;
    cin >> xs >> ys >> xg >> yg;
    int n, c, d, x, y;
    cin >> n;
    for (int t = 0; t < n; t++) {
      cin >> c >> d >> x >> y;
      int wb = 2 + (!d * 2);
      int hb = 2 + (d * 2);
      for (int i = 0; i < hb; i++) {
        for (int j = 0; j < wb; j++)
          Board[x + j][y + i] = c;
      }
    }
    if (DFS(Board, Board[xs][ys], xs, ys, xg, yg))
      cout << "OK" << endl;
    else
      cout << "NG" << endl;
  }
  return 0;
}
```