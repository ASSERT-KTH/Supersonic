There are several optimizations that can be done to this program:

1. Eliminate Global Variables: Global variables can be a source of confusion in larger programs, and it's generally good practice to avoid them when possible. Here, `Board`, `isOK`, `xs`, `ys`, `xg`, `yg` are declared globally but they can be declared in the main function and passed to DFS function as parameters.

2. Use `std::vector` instead of raw array: `std::vector` is a dynamic array which automatically handles its memory. It's safer and more idiomatic in C++ than raw arrays.

3. Early return in DFS: In the DFS function, after checking each direction, return immediately if `isOK` is already true. This can save unnecessary recursive calls.

Here's the optimized code with these changes:

```cpp
#include <iostream>
#include <vector>
using namespace std;

void DFS(vector<vector<int>>& Board, bool& isOK, int xs, int ys, int xg, int yg, int c, int x, int y) {
    if (Board[x][y] != c) {
        return;
    } else if (x == xg && y == yg) {
        isOK = true;
        return;
    }
    Board[x][y] = 0;
    if (!isOK) DFS(Board, isOK, xs, ys, xg, yg, c, x + 1, y);
    if (!isOK) DFS(Board, isOK, xs, ys, xg, yg, c, x, y + 1);
    if (!isOK) DFS(Board, isOK, xs, ys, xg, yg, c, x - 1, y);
    if (!isOK) DFS(Board, isOK, xs, ys, xg, yg, c, x, y - 1);
}

int main() {
    int w, h;
    while (true) {
        cin >> w >> h;
        if (w == 0 && h == 0)
            break;
        bool isOK = false;
        vector<vector<int>> Board(102, vector<int>(102, -1));
        int xs, ys, xg, yg;
        cin >> xs >> ys >> xg >> yg;
        int n, c, d, x, y;
        cin >> n;
        for (int t = 0; t < n; t++) {
            cin >> c >> d >> x >> y;
            int wb = 2 + (!d * 2);
            int hb = 2 + (d * 2);
            for (int i = 0; i < hb; i++) {
                for (int j = 0; j < wb; j++)
                    Board[x + j][y + i] = c;
            }
        }
        DFS(Board, isOK, xs, ys, xg, yg, Board[xs][ys], xs, ys);
        if (isOK)
            cout << "OK" << endl;
        else
            cout << "NG" << endl;
    }
    return 0;
}
```
This version of the code is not only more efficient, but also better structured and easier to read and understand.