This code is a good example of a Depth-First Search (DFS) implementation in a 2D board. However, there are a few things we can do to optimize this code:

1. **Remove unnecessary operations**: Every time the DFS function is called, it checks if the current cell has the same color, if it's the target or if it's been visited. We can combine these conditions in a single if statement, which will reduce the number of comparisons.

2. **Avoid using global variables**: Global variables take up space in the global memory area, which is not freed until the program finishes. It's better to pass them as arguments to the function, so they don't occupy memory all the time.

3. **Initialize board in a more efficient way**: Instead of using two nested for loops to initialize the board, we can use the std::fill function from the STL. This function is more efficient because it uses a single loop while the nested loops have a time complexity of O(n^2).

4. **Use fast input/output operations**: The cin and cout operations are slower than scanf and printf. To increase the speed of input/output operations, we can use scanf and printf instead of cin and cout.

Here is the optimized code:

```cpp
#include <iostream>
#include <algorithm>
using namespace std;

void DFS(int Board[102][102], int c, int x, int y, int xg, int yg, bool &isOK) {
  if (Board[x][y] != c || x == xg && y == yg) {
    isOK = (x == xg && y == yg);
    return;
  }
  Board[x][y] = 0;
  DFS(Board, c, x + 1, y, xg, yg, isOK);
  DFS(Board, c, x, y + 1, xg, yg, isOK);
  DFS(Board, c, x - 1, y, xg, yg, isOK);
  DFS(Board, c, x, y - 1, xg, yg, isOK);
}

int main() {
  int w, h;
  while (true) {
    scanf("%d%d", &w, &h);
    if (w == 0 && h == 0)
      break;
    bool isOK = false;
    int Board[102][102];
    fill(&Board[0][0], &Board[0][0] + sizeof(Board), -1);
    int xs, ys, xg, yg;
    scanf("%d%d%d%d", &xs, &ys, &xg, &yg);
    int n, c, d, x, y;
    scanf("%d", &n);
    for (int t = 0; t < n; t++) {
      scanf("%d%d%d%d", &c, &d, &x, &y);
      int wb = 2 + (!d * 2);
      int hb = 2 + (d * 2);
      for (int i = 0; i < hb; i++) {
        for (int j = 0; j < wb; j++)
          Board[x + j][y + i] = c;
      }
    }
    DFS(Board, Board[xs][ys], xs, ys, xg, yg, isOK);
    if (isOK)
      printf("OK\n");
    else
      printf("NG\n");
  }
  return 0;
}
```

This optimized code should run faster and consume less memory than the original one.