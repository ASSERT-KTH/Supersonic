1. First of all, if the size of the matrix is too large and most of its elements are 0, then it's better to replace the 2D array with a map or unordered_map. In this case, it's better to use unordered_map because it provides a faster average time complexity of O(1) for search, insert, and delete operations. 

2. Secondly, we are not using the variable 'n' anywhere in the program, so we can remove it. 

3. Thirdly, initialize variables where they are declared. This makes the code cleaner.

4. Lastly, we can use 'continue' to skip the current iteration instead of using 'break' to exit the loop when 'n', 'm', and 'a' are all zero. This makes the code clearer.

Here's the optimized code:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;

int main() {
  int m, a;
  pair<int, int> p;
  while (true) {
    cin >> m >> a;
    if (m == 0 && a == 0) {
      continue;
    }

    unordered_map<int, unordered_map<int, int>> amida;

    for (int i = 0; i < m; i++) {
      int h, p, q;
      cin >> h >> p >> q;
      amida[p][h] = 1;
    }

    for (int j = 1000; j > 0; j--) {
      if (amida[a][j] == 1)
        a++;
      else if (amida[a - 1][j] == 1)
        a--;
    }

    cout << a << endl;
  }

  return 0;
}
```
Please note that this code assumes that the input is always correct. If the input is not guaranteed to be correct, you should add error checking.