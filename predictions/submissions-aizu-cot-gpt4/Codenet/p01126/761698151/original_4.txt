The original program is written in C++, which reads three integers n, m, and a from the keyboard in an infinite loop. If all of these integers are zero, it breaks the loop. Then it initializes a 2D array with zeros and fills it with integers from the keyboard. Finally, it performs a calculation and outputs the result. 

Optimization steps:
1. Move the declaration of variables outside the loop to avoid unnecessary memory allocation and deallocation. This will improve the performance in terms of time complexity.
2. Since we have a 2D array, we are wasting a lot of memory if we are not using all its elements. A better approach would be to use a data structure that only stores the necessary elements, like std::map, which would be more memory efficient.
3. Use std::ios_base::sync_with_stdio(false); and cin.tie(NULL); to make i/o operations faster.
4. Using post-increment (++a) instead of pre-increment (a++) as post-increment create a temporary variable which adds to memory usage.
5. Use '\n' instead of endl to avoid unnecessary flush of buffer.

Optimized program:

```cpp
#include <iostream>
#include <map>
using namespace std;

int main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, m, a;
  int h, p, q;
  map<pair<int, int>, int> amida;
  while (true) {
    cin >> n >> m >> a;
    if (n == 0 && m == 0 && a == 0) {
      break;
    }
    amida.clear();
    for (int i = 0; i < m; ++i) {
      cin >> h >> p >> q;
      amida[make_pair(p, h)] = 1;
    }
    for (int j = 1000; j > 0; --j) {
      if (amida[make_pair(a, j)] == 1)
        ++a;
      else if (amida[make_pair(a - 1, j)] == 1)
        --a;
    }
    cout << a << '\n';
  }

  return 0;
}
```