Here are the steps to optimize the program:

1. Avoid reinitializing the array "amida" in every iteration of the while loop. Instead, declare it once outside the loop, and reset it to zero in each iteration.
2. Instead of checking if "amida[a][j] == 1" and "amida[a - 1][j] == 1", it is better to store their values in variables and then use these variables to check the conditions. This is because accessing an array element is costly in terms of time complexity.
3. Variables `h`, `p` and `q` are initialized to 0 in each iteration of the loop which is unnecessary. They should be declared once outside the loop, and then just updated in each iteration.
4. Despite the fact that the code is written in C++, it uses C-style array. It's better to use C++'s Standard Template Library (STL) vector which is dynamic and can handle memory more efficiently.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  int n, m, a, h, p, q;
  vector<vector<int>> amida(101, vector<int>(1001, 0));

  while (true) {
    cin >> n >> m >> a;
    if (n == 0 && m == 0 && a == 0) {
      break;
    }

    for (int i = 0; i < 101; i++) {
      fill(amida[i].begin(), amida[i].end(), 0);
    }

    for (int i = 0; i < m; i++) {
      cin >> h >> p >> q;
      amida[p][h] = 1;
    }

    for (int j = 1000; j > 0; j--) {
      int current = amida[a][j];
      int previous = amida[a - 1][j];
      if (current == 1)
        a++;
      else if (previous == 1)
        a--;
    }

    cout << a << endl;
  }

  return 0;
}
```
In this optimized code, the array is replaced with vector, and array elements are accessed only once instead of multiple times. The variables are declared and initialized only once, and the vector is filled with 0 in each iteration, instead of reinitializing it.