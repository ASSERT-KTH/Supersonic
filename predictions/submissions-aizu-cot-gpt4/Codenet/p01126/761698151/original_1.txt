The main optimization opportunities in this program involve reducing redundant operations and leveraging early termination conditions. Here are some improvements you can consider:

1. Declare variables `n`, `m`, `a`, `h`, `p`, `q` only once outside the infinite loop. This will reduce the overhead of variable declaration inside the loop.

2. The array `amida` doesn't need to be set to zero every iteration. Instead, only the used parts of the array should be reset. To do that, we need to keep the maximum `h` used in each iteration, then we can reset only rows `p` and `p+1` up to `h` after processing each pair `p` and `q`.

3. `amida[a][j]` and `amida[a - 1][j]` are being accessed multiple times. It is better to store these values in temporary variables to reduce memory access.

Below is the optimized code:

```c++
#include <iostream>
using namespace std;

int main() {
  int n, m, a, h, p, q;
  int max_h;
  int amida[101][1001] = {{0}};
  while (true) {
    cin >> n >> m >> a;
    if (n == 0 && m == 0 && a == 0) {
      break;
    }
    max_h = 0;
    for (int i = 0; i < m; i++) {
      cin >> h >> p >> q;
      max_h = max(max_h, h);
      amida[p][h] = 1;
    }
    for (int j = max_h; j > 0; j--) {
      int current = amida[a][j];
      int previous = amida[a - 1][j];
      if (current == 1)
        a++;
      else if (previous == 1)
        a--;
      if (j == max_h) {
        fill(amida[p], amida[p] + max_h + 1, 0);
        fill(amida[p+1], amida[p+1] + max_h + 1, 0);
      }
    }
    cout << a << endl;
  }
  return 0;
}
```

Please note that the effectiveness of these optimizations might vary based on the specific inputs and the compiler being used.