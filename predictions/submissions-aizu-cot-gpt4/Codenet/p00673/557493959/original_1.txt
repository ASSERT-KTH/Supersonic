This code seems quite optimized already, but there are a few small changes that could be made.

1) Avoid unnecessary creation of temporary objects: Currently, `std::pair` objects are being created every time the `augment` function calls `Q.push` or `return make_pair`. Using `std::make_pair` to create a pair is not necessary and instead, we can directly create an instance of `std::pair`. This can potentially save some time.

2) Use range-based for loop: The range-based for loop is faster than the traditional for loop because it doesn't involve any function call like traditional for loop does with `std::vector::size()`. This can be applied in the loops iterating over `G[u]`.

3) Reserve memory for vectors: For vectors like `T[i]`, you can use `std::vector::reserve` before `resize` to preallocate memory, which can reduce the time spent on memory allocation. However, this is only beneficial if the size of the vectors is large and predictable.

Optimized code after applying above points:

```cpp
#include <cstdio>
#include <map>
#include <queue>
#define rep(i, n) for (int i = 0; i < (n); i++)
using namespace std;
const int V_MAX = 6000;
const int CAPA_INF = 1 << 29;
const int COST_INF = 1 << 29;
template <class T, class U> struct edge {
  int v, rev;
  T capa;
  U cost;
  T flow;
};
template <class T, class U>
void add_directed_edge(vector<edge<T, U>> *G, int u, int v, T capa, U cost) {
  G[u].push_back((edge<T, U>){v, G[v].size(), capa, cost, 0});
  G[v].push_back((edge<T, U>){u, G[u].size() - 1, 0, -cost, 0});
}
template <class T, class U>
pair<T, U> augment(int n, vector<edge<T, U>> *G, int s, int t, U *pot) {
  static int pre[V_MAX];
  static U d[V_MAX];
  rep(u, n) d[u] = (u == s ? 0 : COST_INF);
  bool ok = false;
  priority_queue<pair<U, int>> Q;
  Q.push({0, s});
  while (!Q.empty()) {
    int u = Q.top().second;
    U cost = -Q.top().first;
    Q.pop();
    if (cost < d[u])
      continue;
    if (u == t)
      ok = true;
    for(auto &e : G[u]) {
      U cost2 = cost + e.cost + pot[u] - pot[e.v];
      if (e.capa - e.flow > 0 && cost2 < d[e.v]) {
        d[e.v] = cost2;
        pre[e.v] = e.rev;
        Q.push({-cost2, e.v});
      }
    }
  }
  if (!ok)
    return {0, 0};
  T water = CAPA_INF;
  for (int v = t; v != s;) {
    edge<T, U> &e1 = G[v][pre[v]];
    edge<T, U> &e2 = G[e1.v][e1.rev];
    water = min(water, e2.capa - e2.flow);
    v = e1.v;
  }
  U cost = 0;
  for (int v = t; v != s;) {
    edge<T, U> &e1 = G[v][pre[v]];
    edge<T, U> &e2 = G[e1.v][e1.rev];
    e1.flow -= water;
    e2.flow += water;
    cost += water * e2.cost;
    v = e1.v;
  }
  rep(u, n) pot[u] += d[u];
  return {water, cost};
}
... // rest of the program remains the same.
```
Please note that the optimization might not be significant and can vary based on the input size and data.