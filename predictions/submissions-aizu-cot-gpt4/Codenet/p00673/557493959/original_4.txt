First, let's outline some improvements that can be made to the code:

1. **Usage of auto keyword:** In modern C++, it is often better to use auto keyword in the for loop. It makes the code cleaner and easier to read. This is especially true when dealing with complex types like iterators or templates.

2. **Usage of const and references:** It's better to use const reference in the loop to prevent unnecessary copying.

3. **Avoid Usage of C-style array:** In C++, it is recommended to use STL container like std::array or std::vector instead of C-style array for better type safety and convenience.

4. **Reduce the scope of variables:** By reducing the scope of variables to the minimum, we can avoid unnecessary memory usage and also make the code more readable because we know exactly where a variable is used.

5. **Avoid using magic numbers:** In this code, numbers like 99, 100, and 6000 are used directly which is not a good practice. It's better to define them as constants with meaningful names.

Here is the optimized code:

```cpp
#include <cstdio>
#include <vector>
#include <map>
#include <queue>
#define rep(i, n) for (int i = 0; i < (n); ++i)
using namespace std;

const int V_MAX = 6000;
const int CAPA_INF = 1 << 29;
const int COST_INF = 1 << 29;

template <class T, class U> 
struct edge {
  int v, rev;
  T capa;
  U cost;
  T flow;
};

template <class T, class U>
void add_directed_edge(vector<edge<T, U>>& G, int u, int v, T capa, U cost) {
  G[u].emplace_back((edge<T, U>){v, static_cast<int>(G[v].size()), capa, cost, 0});
  G[v].emplace_back((edge<T, U>){u, static_cast<int>(G[u].size() - 1), 0, -cost, 0});
}

// ... rest of the code

int main() {
  for (int n; scanf("%d", &n), n;) {
    vector<train> T[99];
    rep(i, n - 1) {
      int m;
      scanf("%d", &m);
      T[i].resize(m);
      for (auto& t : T[i]) scanf("%d%d%d", &t.t1, &t.t2, &t.cost);
    }

    // ... rest of the code
}
```

Please note that this is a partial optimization. The full optimization needs to be applied to the whole code.