I can see a few optimizations that can be done to this code:

1. The `#include <bits/stdc++.h>` is known to be problematic because it includes a lot of unnecessary headers which can increase the compile time. Instead, you should include only those headers that you really need.

2. Macros (`#define`) are generally discouraged in modern C++. Instead, you should use functions or other language features. In this case, however, the macros are not used anywhere in the code, so you can safely remove them.

3. The `typedef` statements are used to define some types, but not all of these types are used in the code. You can remove the unused ones to clean up the code.

4. The `inf`, `mod`, `eps`, `dx`, and `dy` constants are not used in the code. You can remove them.

5. The `string now = ""` initialization is unnecessary. An empty string is the default value for a `std::string`, so you can just declare it as `string now`.

6. The `cin >> next` line can be moved to the condition part of the `for` loop to make the code more concise.

7. You can replace multiple `if` statements with a single `if` statement that checks for all conditions at once.

Here is the optimized code:

```cpp
#include <iostream>
#include <string>

using namespace std;

int main() {
    int n;
    while (cin >> n, n) {
        int ans = 0;
        string now, next;
        for (int i = 0; i < n && cin >> next; ++i) {
            if ((now == "lu" && next == "ru") || (now == "ru" && next == "lu") 
                || (now == "ld" && next == "rd") || (now == "rd" && next == "ld"))
                ++ans;
            now = move(next);
        }
        cout << ans << endl;
    }
    return 0;
}
```

This version of the program is leaner and more efficient, and it should run faster due to the reduced number of `if` statements and the use of `std::move` to avoid copying strings.