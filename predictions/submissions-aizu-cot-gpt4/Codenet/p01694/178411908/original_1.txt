The given C/C++ program reads a series of strings from the standard input and checks for certain pairs (lu-ru, ru-lu, ld-rd, rd-ld). If one of these pairs is found, the program increments an answer counter.

Here are the steps to optimize the program:
1. Avoid using `#include <bits/stdc++.h>` which is not a standard library and includes more libraries than necessary. Instead, include only the necessary libraries.
2. Avoid using `using namespace std;` which could lead to name conflicts. It is better to prefix standard library entities with `std::`.
3. Avoid using `typedef` for type aliasing. The `using` keyword is the modern C++ way.
4. Remove unused types and macros to reduce clutter and the potential for errors.
5. Use `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(NULL);` to speed up `cin` and `cout`.
6. Change the `if-else if` structure to a switch-case structure to improve readability and potentially performance.

Optimized Program:
```cpp
#include <iostream>
#include <string>

#define rep(i, n) for (int i = 0; i < (int)n; ++i)

const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  
  int n;
  while (std::cin >> n, n) {
    int ans = 0;
    std::string now = "", next;
    rep(i, n) {
      std::cin >> next;
      switch (next[0]) {
        case 'r':
          if ((now == "lu" && next == "ru") || (now == "ld" && next == "rd"))
            ans++;
          break;
        case 'l':
          if ((now == "ru" && next == "lu") || (now == "rd" && next == "ld"))
            ans++;
          break;
      }
      now = next;
    }
    std::cout << ans << std::endl;
  }
  return 0;
}
```
Note: The optimization here is mainly for code quality and readability. The actual performance might not increase noticeably because the original code is already pretty efficient. Also, `cin` and `cout` are not the fastest ways to do input/output in C++. For better performance, consider using C-style `scanf` and `printf` instead.