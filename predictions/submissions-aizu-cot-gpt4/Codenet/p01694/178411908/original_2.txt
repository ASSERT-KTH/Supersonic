Optimization steps:

1. The `#include <bits/stdc++.h>` is generally considered a bad practice because it includes all the standard library headers at once, which can increase compile time. Instead, only include those headers which are actually needed.

2. The macros rep, REP, rer, each, and all are not used in the code. So, removing them will make the code cleaner and easier to read.

3. The type definitions (typedefs) that are not used in the code can also be removed to reduce clutter.

4. The constants, inf, mod, eps, dx[], dy[] are not used in the code. Removing these will make the code cleaner and easier to read.

5. Instead of using `std::string` for `now` and `next`, we can use `char[3]` which can save memory as we know that only two characters and a null character are required.

6. Using `std::ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` can significantly speed up cin and cout.

Optimized code:

```cpp
#include <iostream>
#include <string.h>

using namespace std;
typedef pair<int, int> pii;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n;
  while (cin >> n, n) {
    int ans = 0;
    char now[3] = "", next[3];
    for(int i=0; i<n; ++i) {
      cin >> next;
      if (!strcmp(now, "lu") && !strcmp(next, "ru"))
        ans++;
      else if (!strcmp(now, "ru") && !strcmp(next, "lu"))
        ans++;
      else if (!strcmp(now, "ld") && !strcmp(next, "rd"))
        ans++;
      else if (!strcmp(now, "rd") && !strcmp(next, "ld"))
        ans++;
      strcpy(now, next);
    }
    cout << ans << "\n";
  }
  return 0;
}
```

Please note that direct string comparison using `==` operator is not possible in C-style strings (char arrays). So, we have to use `strcmp` function from `string.h`. Also, to copy `next` to `now`, we need to use `strcpy` function instead of assignment operator `=`.