Here are the steps to optimize the code:

1. Remove `#include <bits/stdc++.h>`: This is a non-standard library that includes a lot of unnecessary headers, which can slow down the compile time. Replace it with specific headers that are actually used in the program.

2. Remove unused macros and typedefs: There are several macros and typedefs defined in the program that are not used anywhere. Removing them will make the code cleaner and slightly reduce the compile time.

3. Use `std::ios::sync_with_stdio(false)` and `std::cin.tie(NULL)`: These lines can significantly speed up the input-output operations in C++.

4. Use `unordered_map` for string comparison: Comparing strings with `==` operator is an O(n) operation. By mapping each string to a unique integer using `unordered_map` and comparing integers instead, we can reduce this to an O(1) operation.

Here is the optimized code:

```cpp
#include <iostream>
#include <string>
#include <unordered_map>

using namespace std;

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);

  unordered_map<string, int> dir_map = {{"lu", 1}, {"ru", 2}, {"ld", 3}, {"rd", 4}};

  int n;
  while (cin >> n, n) {
    int ans = 0;
    int now = 0, next;
    string next_str;
    for (int i = 0; i < n; ++i) {
      cin >> next_str;
      next = dir_map[next_str];
      if ((now == 1 && next == 2) || (now == 2 && next == 1) || 
          (now == 3 && next == 4) || (now == 4 && next == 3))
        ans++;
      now = next;
    }
    cout << ans << '\n';
  }

  return 0;
}
```
Note: The `unordered_map` is initialized with the four possible string directions mapped to unique integers. The string comparison is then replaced with integer comparison.