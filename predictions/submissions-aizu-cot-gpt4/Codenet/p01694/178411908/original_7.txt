This program has several potential optimization points:

1. **Avoiding unnecessary string comparisons**: Instead of comparing strings, we can use an enumeration to represent the four directions and compare the enumeration values.

2. **Reducing the number of conditional checks**: The four if-else conditions can be reduced into a single line using a lookup array.

3. **Avoiding unnecessary I/O operations**: The program uses cin and cout for input and output. These operations can be slow, especially when used in a loop. We can optimize this by using scanf and printf instead.

4. **Avoiding excessive usage of std namespace**: The whole std namespace is imported using "using namespace std". This is considered bad practice as it can lead to name clashes and make the code harder to read and debug.

Here is the optimized program with above mentioned points:

```cpp
#include <cstdio>
enum Direction { lu, ru, ld, rd };

Direction toDirection(const char* str) {
    switch (str[0]) {
        case 'l': return (str[1] == 'u') ? lu : ld;
        case 'r': return (str[1] == 'u') ? ru : rd;
        default: return lu; // just to avoid compiler warning
    }
}

int main() {
    int n;
    while (scanf("%d", &n), n) {
        int ans = 0;
        Direction now = lu, next;
        char str[3];
        for (int i = 0; i < n; ++i) {
            scanf("%s", str);
            next = toDirection(str);
            if ((now == lu && next == ru) || (now == ru && next == lu) || 
                (now == ld && next == rd) || (now == rd && next == ld))
                ans++;
            now = next;
        }
        printf("%d\n", ans);
    }
    return 0;
}
```

This optimized version of the program should be faster and use less memory than the original version.