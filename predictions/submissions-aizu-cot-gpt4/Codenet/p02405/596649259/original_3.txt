This program creates a grid of size HxW where each cell is filled with either '.' or '#'. The cell is filled with '#' if the sum of its row number and column number is even, otherwise, it's filled with '.'.

Optimization steps:

1. Repeatedly using `cout` to print individual characters can be slow. It would be more efficient to build the output as a string and then print it once at the end of each iteration.

2. We're performing a modulus operation on every cell. We can avoid this by noticing that the pattern of dots and hashes repeats every two rows and columns. We can create two strings: one for even rows and one for odd rows, and then simply alternate between them.

3. Since the pattern repeats every two rows, we only need to create strings of length `W`, rather than `H * W`. This reduces the amount of memory needed.

4. The reading of `H` and `W` can be moved into the condition of the `while` loop, which makes the code cleaner and easier to read.

Optimized program:

```cpp
#include <iostream>
#include <string>
using namespace std;
int main() {
  int H, W;
  while (cin >> H >> W && H != 0 && W != 0) {
    string evenRow, oddRow;
    for (int i = 1; i <= W; i++) {
      evenRow += ".#"[i % 2];
      oddRow += ".#"[i % 2 == 0];
    }
    for (int i = 1; i <= H; i++) {
      cout << ((i % 2) ? oddRow : evenRow) << endl;
    }
    cout << endl;
  }
  return 0;
}
```
This optimized program first creates two strings `evenRow` and `oddRow` corresponding to the two possible types of rows in the grid. Then it prints `H` rows, alternating between `evenRow` and `oddRow` based on whether the row number is even or odd. This avoids the need to compute the modulus operation for every cell in the grid, and it only prints each row once, reducing the time spent on I/O operations.