This program is already quite optimal. However, there are a few small changes that we can do to improve its performance.

1. Use '\n' instead of endl: The endl manipulator in C++ flushes the output buffer every time it is called, which means it takes extra time. We can replace endl with '\n' which simply adds a new line without flushing the buffer.

2. Use fast input-output: We can use ios_base::sync_with_stdio(0) and cin.tie(0) to make the input-output faster.

3. Use char array instead of string: We can use a char array instead of a string for ".#". This will reduce the overhead of string operations.

Now, let's implement these optimizations:

```c++
#include <iostream>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false); 
  cin.tie(NULL);
  int H, W;
  char pattern[] = ".#";
  while (cin >> H >> W && H != 0 && W != 0) {
    for (int i = 1; i <= H; i++) {
      for (int j = 1; j <= W; j++) {
        cout << pattern[(i + j) % 2];
      }
      cout << '\n';
    }
    cout << '\n';
  }
  return 0;
}
```

These optimizations will significantly reduce the running time of the program. It should be noted, however, that the effect of these optimizations may not be noticeable for small inputs but they can make a difference for larger inputs.