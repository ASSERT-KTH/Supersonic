This program prints a checkerboard pattern of size H*W, where the board alternates between '.' and '#' characters. The pattern is recalculated and printed until the user inputs 0 for either H or W.

Here are a few optimizations:

1. Instead of calculating and printing the pattern for each cell, we can calculate and store the pattern for an entire row first. This will reduce the number of cout calls from H*W to just H for each pattern, as we'll be printing the entire row in one go.

2. We can use '\n' instead of endl to print new lines. endl flushes the output buffer every time it's called, which can slow down the program if it's called frequently. '\n' doesn't flush the buffer, so it's faster.

3. The array access operator for calculating the pattern can be replaced with a ternary operator, which is easier to understand and doesn't require an array to be created.

Here's the optimized program:

```cpp
#include <iostream>
#include <string>
using namespace std;

int main() {
  int H, W;
  while (cin >> H >> W && H != 0 && W != 0) {
    for (int i = 1; i <= H; i++) {
      string row;
      for (int j = 1; j <= W; j++) {
        row += (i + j) % 2 == 0 ? '.' : '#';
      }
      cout << row << '\n';
    }
    cout << '\n';
  }
  return 0;
}
```