This program takes input for height and width and prints a checkerboard pattern. The pattern's size matches the input dimensions. It continues to take input and print patterns until the input for both height and width is 0. 

The main potential optimization here is to reduce the number of calls to `std::cout` to improve the runtime. 

Each call to `std::cout` requires a certain amount of overhead. So, instead of printing each character individually, we can build the string for each line first, and then print the entire line in one go. This reduces the number of `std::cout` calls from O(H*W) to O(H) for each input pair.

Here's the optimized code:

```c++
#include <iostream>
#include <string>
using namespace std;

int main() {
  int H, W;
  cin >> H >> W;
  while (H != 0 && W != 0) {
    for (int i = 1; i <= H; i++) {
      string line;
      for (int j = 1; j <= W; j++) {
        line += ".#"[(i + j) % 2 == 0];
      }
      cout << line << endl;
    }
    cout << endl;
    cin >> H >> W;
  }
  return 0;
}
```
The string `line` is used to build the entire line of the pattern before printing it. This results in a single call to `std::cout` per line, instead of making a separate call for each character.

Note: Even though `std::string` does take up additional memory, the increase is relatively small. The string `line` only holds one line of output at a time, and it is reinitialized with every row. This is a reasonable trade-off for the improved runtime.