Optimization:

1. Input/Output Stream: C++ std::cin and std::cout are slower compared to scanf and printf, because cin/cout synchronize with stdio, which makes it thread safe. So, we can use scanf and printf for faster input-output operations.
2. String Concatenation: In the inner loop, we are using cout statement for each character, which is not efficient. Instead, we can create a string for each row and print it at once. This reduces the IO operations which are often costly.
3. Avoid endl: Using endl after every output operation flushes the buffer, which increases the time of operation. We can use "\n" instead.
4. Avoid computation in the loop: The value of ".#"[(i + j) % 2 == 0] can be pre-computed for all 4 possible combinations of i%2 and j%2. We can use these pre-computed values in our program to avoid the computation in the loop.

Optimized Code:

```cpp
#include <cstdio>
using namespace std;
int main() {
  int H, W;
  char map[2][2] = { {'.', '#'}, {'#', '.'} };
  while (scanf("%d %d", &H, &W) != EOF && H != 0 && W != 0) {
    for (int i = 0; i < H; i++) {
      string row = "";
      for (int j = 0; j < W; j++) {
        row += map[i%2][j%2];
      }
      printf("%s\n", row.c_str());
    }
    printf("\n");
  }
  return 0;
}
```