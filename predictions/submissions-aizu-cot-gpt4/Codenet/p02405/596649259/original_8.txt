The program you provided is creating a grid of "." and "#" characters based on the input H and W. The optimization can be done mainly in two steps:

1. Reducing the use of 'endl': Using 'endl' not only puts a new line but also flushes the output stream which can increase the running time of the program. Hence, we should replace 'endl' with '\n' whenever possible.

2. Optimizing the printing: We can see that the program is printing the same string in each line, hence we can prepare the string first and then print it H times. This way we reduce the number of operations performed.

Here is the optimized code:

```cpp
#include <iostream>
#include <string>
using namespace std;
int main() {
  int H, W;
  while (cin >> H >> W && H != 0 && W != 0) {
    string line1, line2;
    for (int j = 1; j <= W; j++) {
      line1 += ".#"[(j % 2 == 0)];
      line2 += ".#"[(j % 2 != 0)];
    }
    for (int i = 1; i <= H; i++) {
      if(i % 2 == 0) cout << line2 << '\n';
      else cout << line1 << '\n';
    }
    cout << '\n';
  }
  return 0;
}
```

In this program, I first prepare the two possible strings, 'line1' and 'line2', that can be printed. Then, based on the row index, I print either 'line1' or 'line2'. This significantly reduces the number of operations performed by the program.