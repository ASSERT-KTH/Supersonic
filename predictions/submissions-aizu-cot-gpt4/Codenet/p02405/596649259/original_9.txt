Optimization Steps:

1. The program reads two integers H and W and prints a grid of size HxW where each tile alternates between '.' and '#'. It uses iostream for input and output, which is not as fast as other methods in C++. We can use scanf and printf instead for faster I/O.

2. The program uses an array of characters ".#" and the index [(i + j) % 2 == 0] to decide whether to print '.' or '#'. Using bitwise AND operation would be faster than using modulus operation and equality check.

3. The program checks (H != 0 && W != 0) twice in each loop - once in the while loop condition and once after the cin >> H >> W; statement. We can eliminate the second check by moving the cin >> H >> W; statement to the beginning of the while loop.

4. The program prints each character separately using cout. We can gain some speed by storing the entire line in a string and printing the string all at once.

Optimized Program:
```cpp
#include <cstdio>
#include <string>
using namespace std;
int main() {
  int H, W;
  while (scanf("%d %d", &H, &W) == 2 && H != 0 && W != 0) {
    string line;
    for (int i = 1; i <= H; i++) {
      line.clear();
      for (int j = 1; j <= W; j++) {
        line += ".#"[(i + j) & 1];
      }
      printf("%s\n", line.c_str());
    }
    printf("\n");
  }
  return 0;
}
```
Please note that this optimization may not be necessary if the program is not performance-critical. The original program is more readable and easier to understand. The optimized program may run a little faster, but it is also more complex and harder to maintain.