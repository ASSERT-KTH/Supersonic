There are few possible optimizations on the above program:

1. Avoid using `<bits/stdc++.h>` as it includes all the standard libraries which increases the compilation time. Include only necessary headers.
2. Avoid using `std::endl` as it causes unnecessary flushing of the buffer. Use "\n" instead.
3. Use fast input-output to reduce the execution time.
4. Avoid using `memset` for 2D arrays as it takes more time. Initialize the 2D array with nested for loop.
5. Avoid using recursion (`saiki` function) as it uses stack memory. Use iterative approach instead.

Now, let's implement these optimizations.

```cpp
#include <iostream>
#include <cstring>
using namespace std;

int mp[1001][1001], dp[1001][1001];
int h, w, n;

void printPath(int x, int y) {
    int dx[] = {0, 1}, dy[] = {1, 0};
    while(x != w || y != h) {
        x += dx[mp[y][x]], y += dy[mp[y][x]];
    }
    cout << y + 1 << " " << x + 1 << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    while (1) {
        cin >> h >> w >> n;
        if (!h && !w && !n)
            break;
        for (int i = 0; i < h; i++)
            for (int j = 0; j < w; j++)
                cin >> mp[i][j];
        for(int i=0; i<1001; i++)
            for(int j=0; j<1001; j++)
                dp[i][j] = 0;
        dp[0][0] = n - 1;
        for (int i = 0; i < h; i++)
            for (int j = 0; j < w; j++) {
                dp[i][j + 1] += dp[i][j] / 2 + mp[i][j] * dp[i][j] % 2;
                dp[i + 1][j] += dp[i][j] / 2 + !mp[i][j] * dp[i][j] % 2;
                if (dp[i][j] % 2)
                    mp[i][j] = !mp[i][j];
            }
        printPath(0, 0);
    }
    return 0;
}
```

This optimized code should run faster and use memory more efficiently than the original one.