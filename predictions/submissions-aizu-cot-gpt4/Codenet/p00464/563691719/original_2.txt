The given program is already quite well written, however, there are a few areas where we can optimize it.

First, the recursion function `saiki` may cause a stack overflow if the recursion is too deep. In this case, we can replace it with a while loop to save memory.

Second, the use of cin and cout can be slow, so we can optimize it by replacing cin and cout with scanf and printf, which are faster.

The program is using a 2D array `dp` of size 1001x1001. This is a big array and it might cause memory usage problems if not handled properly. The `memset(dp, 0, sizeof(dp))` line clears the `dp` array for each test case, which is a costly operation. A better approach is to only clear the cells that were used in the previous test case, thus reducing the number of operations.

The optimized code is shown below:

```cpp
#include<bits/stdc++.h>
using namespace std;

int mp[1001][1001], dp[1001][1001];
int h, w, n;

void saiki(int x, int y) {
  int dx[] = {0, 1}, dy[] = {1, 0};
  while (y != h && x != w)
  {
    int temp = mp[y][x];
    x += dx[temp];
    y += dy[temp];
  }
  printf("%d %d\n", y + 1, x + 1);
}

int main() {
  while (1) {
    scanf("%d %d %d", &h, &w, &n);
    if (!h && !w && !n)
      break;

    for (int i = 0; i < h; i++)
      for (int j = 0; j < w; j++)
        scanf("%d", &mp[i][j]);

    vector<pair<int, int>> used;
    dp[0][0] = n - 1;
    used.emplace_back(0, 0);
    for (int i = 0; i < h; i++)
      for (int j = 0; j < w; j++) {
        if(dp[i][j]) {
          dp[i][j + 1] += dp[i][j] / 2 + mp[i][j] * dp[i][j] % 2;
          dp[i + 1][j] += dp[i][j] / 2 + !mp[i][j] * dp[i][j] % 2;
          if (dp[i][j] % 2)
            mp[i][j] = !mp[i][j];
          used.emplace_back(i, j + 1);
          used.emplace_back(i + 1, j);
        }
      }
    saiki(0, 0);
    
    for (auto &p: used)
      dp[p.first][p.second] = 0;
  }
  return 0;
}
```

In this optimized code, a vector `used` is introduced to keep track of the cells in `dp` that have been used in the current test case. After each test case, only the used cells are reset to 0. This prevents unnecessary operations on cells that haven't been used, thereby speeding up the program.