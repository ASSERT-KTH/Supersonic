The given C++ code is related to a specific scenario and does not seem to have any obvious points of optimization regarding memory usage or running time. However, a few points are worth noting:

1. The code uses `#include <bits/stdc++.h>`, which includes almost all standard C++ libraries. This increases the compilation time, even though not all libraries are used in the code. It's better to explicitly include only the libraries that are used in the code.

2. The recursive function `saiki` may cause a stack overflow if the coordinates `x` and `y` do not meet the base case for a long time. Iterative methods are generally preferred for such scenarios.

3. The `memset` function is used to initialize the array `dp` to 0. In C++, you can initialize an array to 0 while declaring it, which eliminates the need for `memset`.

4. The `while(1)` loop can be changed to a `do-while` loop since we are always performing the loop at least once.

5. The two-dimensional arrays `mp` and `dp` are declared with a fixed size. If the actual data is much smaller, this results in wasted memory. However, the size of these arrays should be determined by the problem context, so we'll leave them as is in this case.

Here is the optimized code:

```c++
#include<iostream>
#include<cstring>
using namespace std;

const int MAX = 1001;
int mp[MAX][MAX];
long long dp[MAX][MAX];

void saiki(int h, int w) {
  int x = 0, y = 0, dx[] = {0, 1}, dy[] = {1, 0};
  while (x != w && y != h) {
    int temp = x;
    x += dx[mp[y][x]];
    y += dy[mp[temp][y]];
  }
  cout << y + 1 << " " << x + 1 << endl;
}

int main() {
  int h, w, n;
  do {
    cin >> h >> w >> n;
    if (!h && !w && !n)
      break;
    for (int i = 0; i < h; i++)
      for (int j = 0; j < w; j++)
        cin >> mp[i][j];
    memset(dp, 0, sizeof(dp));
    dp[0][0] = n - 1;
    for (int i = 0; i < h; i++)
      for (int j = 0; j < w; j++) {
        dp[i][j + 1] += dp[i][j] / 2 + mp[i][j] * dp[i][j] % 2;
        dp[i + 1][j] += dp[i][j] / 2 + !mp[i][j] * dp[i][j] % 2;
        if (dp[i][j] % 2)
          mp[i][j] = !mp[i][j];
      }
    saiki(h, w);
  } while (true);

  return 0;
}
```

Note: The above code will only work properly if the input is correctly formatted and within valid ranges. In a real-world scenario, you should always validate and sanitize your inputs.