The main optimization here should be to avoid using the 'bits/stdc++.h' header file as it includes a lot of unnecessary libraries, increasing the compile time. Instead, we should only include the libraries we need, which are 'iostream' and 'cstring'. 

The next step would be the removal of the unused semicolon on line 5.

Another improvement would be to use std::ios::sync_with_stdio(false) and cin.tie(NULL) at the start of the main function. This will speed up cin and cout by not synchronizing them with the standard C I/O libraries.

Also, we can replace the 'endl' in the cout statement with '\n'. 'endl' flushes the output buffer every time it's used, which can be slower than just outputting '\n'.

Here is the optimized code:

```cpp
#include <iostream>
#include <cstring>
using namespace std;

int mp[1001][1001], dp[1001][1001];
int h, w, n;

void saiki(int x, int y) {
  int dx[] = {0, 1}, dy[] = {1, 0};
  if (y == h || x == w)
    cout << y + 1 << " " << x + 1 << '\n';
  else
    saiki(x + dx[mp[y][x]], y + dy[mp[y][x]]);
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);

  while (1) {
    cin >> h >> w >> n;
    if (!h && !w && !n)
      break;
    for (int i = 0; i < h; i++)
      for (int j = 0; j < w; j++)
        cin >> mp[i][j];
    memset(dp, 0, sizeof(dp));
    dp[0][0] = n - 1;
    for (int i = 0; i < h; i++)
      for (int j = 0; j < w; j++) {
        dp[i][j + 1] += dp[i][j] / 2 + mp[i][j] * dp[i][j] % 2;
        dp[i + 1][j] += dp[i][j] / 2 + !mp[i][j] * dp[i][j] % 2;
        if (dp[i][j] % 2)
          mp[i][j] = !mp[i][j];
      }
    saiki(0, 0);
  }

  return 0;
}
```

The code is now optimized for faster execution and will compile faster because it's not using the 'bits/stdc++.h' header file anymore.