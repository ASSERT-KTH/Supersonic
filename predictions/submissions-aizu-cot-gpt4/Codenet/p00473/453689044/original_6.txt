The optimization steps I will take are:

1. First, I will remove the `#include <iostream>` line since we are not using any of its features. We are using `printf`, `scanf` from `cstdio` for input-output operations.

2. Replace all instances of `memset` with a loop. It's a common misconception that `memset` is faster than a loop. In reality, `memset` is not necessarily faster and can sometimes be slower, especially for small arrays. Moreover, it's less readable and more prone to errors, like `-1` being interpreted as `255` due to `unsigned char` conversion.

3. The function `minCost` is just reimplementing the standard library function `std::min`, but with handling for `-1`. I'll use `std::min` instead and handle `-1` in the `solve` function. This reduces the function call overhead.

4. Rather than copying `dp` into `tmp` every time, I'll use `std::swap` to swap their pointers. This is much faster than copying the whole array.

Here is the optimized code:

```cpp
#include <cstdio>
#include <algorithm>

int n;
int t[10002];
int dp[5002][2], tmp[5002][2];

int solve() {
  for (int j = 0; j <= n / 2; j++) {
      tmp[j][0] = tmp[j][1] = -1;
  }
  tmp[1][0] = tmp[0][1] = 0;
  for (int i = 1; i < n; i++) {
    for (int j = 0; j <= n / 2; j++) {
      dp[j][0] = dp[j][1] = -1;
      for (int pre = 0; pre < 2; pre++) {
        if (tmp[j][pre] == -1)
          continue;
        for (int next = 0; next < 2; next++) {
          if (pre == next) {
            if (next == 0 && (dp[j + 1][next] == -1 || dp[j + 1][next] > tmp[j][pre]))
              dp[j + 1][next] = tmp[j][pre];
            else if (next == 1 && (dp[j][next] == -1 || dp[j][next] > tmp[j][pre]))
              dp[j][next] = tmp[j][pre];
          } else {
            if (next == 0 && (dp[j + 1][next] == -1 || dp[j + 1][next] > tmp[j][pre] + t[i - 1]))
              dp[j + 1][next] = tmp[j][pre] + t[i - 1];
            else if (next == 1 && (dp[j][next] == -1 || dp[j][next] > tmp[j][pre] + t[i - 1]))
              dp[j][next] = tmp[j][pre] + t[i - 1];
          }
        }
      }
    }
    std::swap(dp, tmp);
  }
  return std::min(dp[n / 2][0], dp[n / 2][1]);
}

int main() {
  scanf("%d", &n);
  for (int i = 0; i < n - 1; i++) {
    scanf("%d", &t[i]);
  }
  printf("%d\n", solve());
}
```

Note: It's important to test the performance of both versions of the code on your specific machine and compiler, as different systems can have different performance characteristics.