Here are the steps that can help to optimize the above program in terms of running time and memory usage:

1. Remove the usage of `std::endl` and use `\n` instead. The reason is `std::endl` actually does two things: it outputs a newline, and it flushes the output buffer. In cases where you just want a newline, use `\n`.

2. Avoid using C-style input/output functions (`scanf`, `printf`) mixed with C++ style input/output (`std::cin`, `std::cout`). This might cause unnecessary flushes of the stream and slow down the program. Since we're already using C++ style libraries (`<iostream>`), we can just stick with C++ style input/output.

3. The `minCost` function is essentially equivalent to `std::min`. We can use standard library functions where possible, as they're usually optimized for performance.

4. Avoid passing integers by reference. It's actually slower than passing them by value due to the dereferencing overhead.

Here is the optimized program:

```cpp
#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;

int n;
int t[10002];
int dp[5002][2], tmp[5002][2];

int solve() {
  memset(tmp, -1, sizeof(tmp));
  tmp[1][0] = tmp[0][1] = 0;

  for (int i = 1; i < n; i++) {
    memset(dp, -1, sizeof(dp));
    for (int j = 0; j <= n / 2; j++) {
      for (int pre = 0; pre < 2; pre++) {
        if (tmp[j][pre] == -1)
          continue;
        for (int next = 0; next < 2; next++) {
          if (pre == next) {
            if (next == 0)
              dp[j + 1][next] = min(dp[j + 1][next], tmp[j][pre]);
            else
              dp[j][next] = min(dp[j][next], tmp[j][pre]);
          } else {
            if (next == 0)
              dp[j + 1][next] = min(dp[j + 1][next], tmp[j][pre] + t[i - 1]);
            else
              dp[j][next] = min(dp[j][next], tmp[j][pre] + t[i - 1]);
          }
        }
      }
    }
    memcpy(tmp, dp, sizeof(dp));
  }
  return min(dp[n / 2][0], dp[n / 2][1]);
}

int main() {
  cin >> n;
  for (int i = 0; i < n - 1; i++) {
    cin >> t[i];
  }
  cout << solve() << '\n';
}
```

In the optimized program, I've made the following changes:

- Replaced the `minCost` function with `std::min`.
- Removed unnecessary usage of `std::endl`.
- Replaced `scanf` and `printf` with `std::cin` and `std::cout`.
- Removed passing integers by reference in the `minCost` function.
- Replaced the double `for` loop used to copy `dp` to `tmp` with a single `memcpy` call. This is a more efficient way of copying arrays.