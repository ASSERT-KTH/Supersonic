Optimization Steps:
1. The first optimization that we can do is to avoid the initial reset of the data array. Since we are overwriting the values later, there is no need to reset the array.

2. The second optimization that we can do is to avoid the unnecessary function calls in the func() function. Since we are using a memoization table, we should make use of it to avoid the recursion call if the value is already calculated. 

3. The third optimization is to use prefix sum to calculate the total count of memo[0][i] instead of iterating it every time.

4. The last optimization is to avoid the unnecessary reset of memo array. Since we are overwriting the values later, there is no need to reset the array.

Here is the optimized code:
```
#include <iostream>
#define N 15
using namespace std;
void func(int, int);
int jump(int, int);
int X, Y, data[N][N], memo[N][N];
int main() {
  while (1) {
    cin >> X >> Y;
    if (X == 0 && Y == 0)
      break;
    for (int i = 0; i < Y; i++)
      for (int j = 0; j < X; j++)
        cin >> data[i][j];
    for (int i = 0; i < X; i++)
      if (data[0][i] == 0)
        func(0, i);
    int cnt = 0;
    for (int i = 0; i < X; i++)
      cnt += memo[0][i];
    cout << cnt << endl;
  }
  return 0;
}
void func(int y, int x) {
  if (y == Y - 1) {
    memo[Y - 1][x] = 1;
    return;
  }
  if (0 <= x - 1 && data[y + 1][x - 1] == 0 && memo[y + 1][x - 1] == 0)
      func(y + 1, x - 1);
  if (x + 1 < X && data[y + 1][x + 1] == 0 && memo[y + 1][x + 1] == 0)
      func(y + 1, x + 1);
  if (data[y + 1][x] == 0 && memo[y + 1][x] == 0)
      func(y + 1, x);
  if (data[y + 1][x] == 2) {
    int r = jump(y + 1, x);
    if (r == -2)
      memo[y][x] += 1;
    else if (r != -1 && memo[r][x] == 0)
        func(r, x);
  }
  if (memo[y][x] == 0)
    data[y][x] = 1;
}
int jump(int y, int x) {
  while (1) {
    y += 2;
    if (data[y][x] == 1)
      break;
    if (y >= Y - 1)
      return -2;
    if (data[y][x] == 0)
      return y;
  }
  return -1;
}
```