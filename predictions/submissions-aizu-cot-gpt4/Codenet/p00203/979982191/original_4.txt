Here are the steps to optimize the given C/C++ code:

1. **Avoid Redundant Computations** - The function `func()` is called recursively and computes the same values multiple times. To avoid this, we can use dynamic programming. We can store the results of `func()` in the `memo` array and reuse them instead of recalculating.

2. **Avoid Full Array Initialization** - There is no need to initialize the entire `data` array with zeros every time in the main function. Instead, we can just initialize the necessary parts which are going to be used in each iteration.

3. **Optimize Jump Function** - The `jump()` function contains an infinite loop and several checks. We can replace this with a simple for loop.

Now, let's implement these optimizations in the code:

```cpp
#include <iostream>
#define N 15
using namespace std;
void func(int, int);
int jump(int, int);
int X, Y, data[N][N], memo[N][N];
int main() {
  while (1) {
    cin >> X >> Y;
    if (X == 0 && Y == 0)
      break;
    for (int i = 0; i < Y; i++)
      for (int j = 0; j < X; j++) {
        cin >> data[i][j];
        memo[i][j] = 0;
      }
    for (int i = 0; i < X; i++)
      if (data[0][i] == 0)
        func(0, i);
    int cnt = 0;
    for (int i = 0; i < X; i++)
      cnt += memo[0][i];
    cout << cnt << endl;
  }
  return 0;
}
void func(int y, int x) {
  if (y == Y - 1) {
    memo[Y - 1][x] = 1;
    return;
  }
  if (0 <= x - 1 && data[y + 1][x - 1] == 0) {
    if (memo[y + 1][x - 1] == 0)
      func(y + 1, x - 1);
    memo[y][x] += memo[y + 1][x - 1];
  }
  if (x + 1 < X && data[y + 1][x + 1] == 0) {
    if (memo[y + 1][x + 1] == 0)
      func(y + 1, x + 1);
    memo[y][x] += memo[y + 1][x + 1];
  }
  if (data[y + 1][x] == 0) {
    if (memo[y + 1][x] == 0)
      func(y + 1, x);
    memo[y][x] += memo[y + 1][x];
  }
  if (data[y + 1][x] == 2) {
    int r = jump(y + 1, x);
    if (r == -2)
      memo[y][x] += 1;
    else if (r != -1) {
      if (memo[r][x] == 0)
        func(r, x);
      memo[y][x] += memo[r][x];
    }
  }
}
int jump(int y, int x) {
  for (; y < Y - 1; y += 2) {
    if (data[y][x] == 1)
      return -1;
    if (data[y][x] == 0)
      return y;
  }
  return -2;
}
```

In this optimized code, we now avoid redundant computations by using memoization. We also initialize only necessary parts of the `data` array and we optimize the `jump()` function by replacing the infinite loop with a simple for loop.