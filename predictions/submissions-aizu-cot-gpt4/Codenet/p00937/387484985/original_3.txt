Sure, here are the steps for optimization:

1. Removing unused variables and imports: In the code, the `M` variable is declared but not used. This can be removed. Also, the `<bits/stdc++.h>` header file is a GCC specific file that includes a lot of unnecessary stuff. We can remove this and only include the libraries we actually use.

2. Reducing the number of nested loops: The code has several nested loops which are costly in terms of the running time. The use of `break` statement can help to avoid unnecessary iterations in some loops.

3. Using `std::ios::sync_with_stdio(false);` and `cin.tie(NULL);`: This can significantly speed up the I/O operations. This makes input and output more efficient by removing the synchronization between C and C++ I/O streams.

4. Use `printf` and `scanf` instead of `cin` and `cout` for faster I/O.

5. Using `reserve` function for vector `idx`: This function is used to reserve storage for the vector elements and thus reduces the number of memory reallocations.

Optimized Code:

```cpp
#include <iostream>
#include <vector>
using namespace std;
int N;
int A[3];
vector<int> G[51];
bool used[51];
bool dp[101][51][51];

int main() {
  std::ios::sync_with_stdio(false);
  cin.tie(NULL);
  
  scanf("%d", &N);
  for (int i = 0; i < 3; i++)
    scanf("%d", &A[i]);
    
  for (int i = 0, f, t; i < N; i++) {
    scanf("%d %d", &f, &t);
    f--;
    t--;
    G[f].push_back(t);
  }

  for (int i = 0; i < N; i++)
    dp[0][i][i] = true;
  
  for (int i = 1; i < 101; i++) {
    for (int j = 0; j < N; j++) {
      for (int k = 0; k < N; k++) {
        if (dp[i - 1][j][k]) {
          for (int to : G[k]) {
            dp[i][j][to] = true;
          }
        }
      }
    }
  }

  used[N - 1] = true;
  for (int ite = 1;; ite++) {
    bool ok = false;
    vector<int> idx;
    idx.reserve(N);
    for (int i = 0; i < N; i++) {
      if (used[i])
        continue;
      int cnt = 0;
      for (int j = 0; j < 3; j++) {
        int a = A[j];
        for (int k = 0; k < N; k++) {
          if (dp[a][i][k] && used[k]) {
            cnt++;
            break;
          }
        }
        if(cnt == 3) {
          ok = true;
          idx.push_back(i);
          break;
        }
      }
    }
    if (ok) {
      for (int i : idx) {
        used[i] = true;
      }
      if (used[0]) {
        printf("%d\n",ite);
        return 0;
      }
    } else {
      break;
    }
  }
  printf("IMPOSSIBLE\n");
  return 0;
}
```
This optimized version of the code should run faster and use less memory than the original one.