Here are the steps to optimize the code:

1. Remove the unnecessary usage of macro definitions, like `#define r(i, n) for (auto i = 0; i < n; i++)` and `#define s(c) static_cast<int>((c).size())`. These macros are not being used in an optimized manner and make the code less readable.
2. Change the `scanf` and `printf` to `cin` and `cout` for consistency and use `ios_base::sync_with_stdio(false); cin.tie(NULL);` to speed up I/O operations.
3. The array size `A[10001]` can be a waste of memory if `n` is much less than 10001. It is better to dynamically allocate the size of the array based on the input `n`.
4. Instead of using two for loops to find the minimum and count occurrences, we could use one loop to do both tasks.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false); 
  cin.tie(NULL);
  
  int n;
  cin >> n;
  int min = 2000000, t;
  vector<int> A(n+1, 0);
  
  for (int i = 0; i < n; i++) {
    cin >> t;
    A[t]++;
    if (t < min)
      min = t;
  }
  
  A[min]--;
  cout << min;
  for (int i = min; i <= n; i++) {
    for(int j = 0; j < A[i]; j++) { 
      cout << ' ' << i; 
    }
  }
  cout << '\n';
  
  return 0;
}
```

Note: The optimization is a trade-off. In this case, I have optimized for speed rather than memory. The above code will run faster but will use slightly more memory because of the extra space in the vector `A`.