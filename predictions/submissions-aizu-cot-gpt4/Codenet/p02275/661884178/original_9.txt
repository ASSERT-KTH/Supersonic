Optimization Steps:

1. Replace 'bits/stdc++.h' with necessary header files. 'bits/stdc++.h' is not a standard library and including it might slow down the compilation process because it includes all the standard C++ libraries, which we don't need. 

2. Replace scanf() and cout with cin and printf(). std::cin and std::cout are slower compared to scanf() and printf() because they have internal overhead caused by synchronization with stdio. 

3. Avoid using 'auto' in the for loop, specify the type explicitly. This is more of a best practice and clarity point than an optimization but in some cases, it can avoid unnecessary type conversions.

4. Avoid using static_cast<int>() for array size, which is unnecessary and can cause overhead.

5. Avoid using the macro '#define', as it can cause problems in the code. Instead, use inline functions.

6. Use fast I/O operations to improve the performance of input and output operations.

After applying these optimizations, the below is the optimized code:

```cpp
#include <iostream>
#include <cstdio>
#define SIZE 10001
#define fastIO ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)

using namespace std;

inline void loop(int n, void (*f)(int)) {
    for (int i = 0; i < n; i++) {
        f(i);
    }
}

int main() {
    fastIO;
    int n;
    cin >> n;
    int min = 2000000, t, A[SIZE]{};
    loop(n, [&](int) {
        cin >> t;
        if (t < min)
            min = t;
        A[t]++;
    });
    A[min]--;
    printf("%d", min);
    for (int i = min; i < SIZE; i++) {
        loop(A[i], [&](int) { printf(" %d", i); });
    }
    printf("\n");
    return 0;
}
```