There are several optimization opportunities in your code. Here are some steps to optimize it:

1. Use std::ios::sync_with_stdio(false) to speed up cin and cout operations.
2. Use scanf/printf instead of cin/cout for better performance.
3. You don't need to decrease A[min] as the loop for printing will handle it correctly.
4. Use printf instead of cout for better performance.
5. Instead of using the auto keyword in the for loop, use int for better performance.

Now, let's generate the optimized code based on these steps:

```cpp
#include <bits/stdc++.h>
using namespace std;
#define r(i, n) for (int i = 0; i < n; i++)
#define s(c) static_cast<int>((c).size())

int main() {
  std::ios::sync_with_stdio(false); // Speed up cin and cout operations.
  int n;
  scanf("%d", &n);
  int min = 2000000, t, A[10001]{};
  r(i, n) {
    scanf("%d", &t);
    if (t < min)
      min = t;
    A[t]++;
  }

  printf("%d", min); // Use printf instead of cout.
  for (int i = min; i < 10001; i++) {
    r(j, A[i]) { printf(" %d", i); } // Use printf instead of cout.
  }
  printf("\n"); // Use printf instead of cout.
  return 0;
}
```

Please note that using scanf/printf instead of cin/cout and not using the auto keyword can lead to significant performance improvements in some cases. However, these changes may make the code less readable, so they should be used judiciously.