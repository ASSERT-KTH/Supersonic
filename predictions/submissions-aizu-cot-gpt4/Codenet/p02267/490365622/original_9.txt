Optimization Steps:

1. The main time-consuming part in this program is the nested loop where it checks if an element in array T[] exists in array S[]. This operation in the worst-case scenario takes O(n*q) time complexity. We can optimize this part by using a data structure, like a map or set, which can help us to find an element in constant time O(1). However, as C/C++ does not have built-in hash set or hash map, we will use a sorted array and binary search to achieve the O(log n) complexity.

2. To use binary search, we need to sort array S[] first, which will take O(n log n) time. After that, for each element in array T[], we can use binary search to check if it exists in array S[].

3. We can also optimize the memory usage by not storing the elements of T[] at all. We can check each element of T[] against S[] right after we read it.

Here is the optimized program:

```c++
#include <stdio.h>
#include <algorithm>

int main() {
  int n, S[10000], q, i, j, cnt = 0;
  scanf("%d", &n);
  for (i = 0; i < n; i++)
    scanf("%d", &S[i]);
  std::sort(S, S + n); // Sort the array S
  int T;
  scanf("%d", &q);
  for (j = 0; j < q; j++) {
    scanf("%d", &T);
    if (std::binary_search(S, S + n, T)) // Use binary search to find T in S
      cnt++;
  }
  printf("%d\n", cnt);
  return 0;
}
```

Note that the include `<algorithm>` is added for using `std::sort` and `std::binary_search` functions.