Optimization Steps:
1. This program is trying to count the number of elements in array T[] that are also present in array S[]. The original program scans each element of T[] and then scans the entire S[] to see if that element exists in S[]. This results in a time complexity of O(n*q) which can be costly if both n and q are large.

2. Instead of this approach, we can sort the array S[] first. After sorting, we can use binary search to find an element in S[]. Binary search is much faster than a simple scan for large arrays. It can bring down the time complexity from O(n) to O(log n). So overall time complexity will become O(q log n) for searching all elements of T[] in S[]. This will significantly improve the running time for large inputs.

3. The only extra memory used in this program is for the arrays S[] and T[]. The size of these arrays is fixed and depends on the input size. So we cannot optimize the memory usage further without changing the functionality of the program.

4. So in the optimized program, we will first sort the S[] array and then use binary search instead of simple scanning for each element of T[].

Here is the optimized program:

```C
#include <stdio.h>
#include <algorithm>

bool binary_search(int* arr, int size, int key) {
  int left = 0;
  int right = size;
  while (left < right) {
    int mid = (left + right) / 2;
    if (arr[mid] == key)
      return true;
    else if (key < arr[mid])
      right = mid;
    else
      left = mid + 1;
  }
  return false;
}

int main() {
  int n, S[10000], q, T[500], i, cnt = 0;
  scanf("%d", &n);
  for (i = 0; i < n; i++)
    scanf("%d", &S[i]);
  std::sort(S, S+n);
  scanf("%d", &q);
  for (i = 0; i < q; i++)
    scanf("%d", &T[i]);
  for (i = 0; i < q; i++)
    if (binary_search(S, n, T[i]))
      cnt++;
  printf("%d\n", cnt);
  return 0;
}
```
Please note that this program uses the `<algorithm>` library for sorting and implements binary search in the `binary_search` function. It is assumed that the program is allowed to use this library.