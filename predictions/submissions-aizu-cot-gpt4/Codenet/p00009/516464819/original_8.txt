The optimization can be done in the following ways:

1. **Use of vector instead of list:** The list data structure in C++ is inefficient in terms of memory usage and also in terms of time complexity for accessing elements. We can replace it with vector which is more cache friendly and provides faster access.

2. **Use of unordered_map:** In the main function, we are traversing the primes list for each input which is inefficient. We can use an unordered_map to store the primes so that we can check if a number is prime or not in O(1) time.

3. **Avoiding unnecessary multiplication:** In the sieve function, we are calculating `skip = i * 2` for each i inside the loop. We can calculate it once outside the loop and use it.

4. **Avoiding square root calculation in each iteration:** The value of `end = sqrt(n)` is calculated in each iteration. We can calculate it once and use it in the loop.

Here's the optimized program:

```cpp
#include <algorithm>
#include <cmath>
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

void sieve(int n, vector<int> &primes, unordered_map<int, bool> &primeCheck) {
  vector<bool> v(n + 1, true);
  int end = sqrt(n);
  for (int i = 3; i <= end; i += 2) {
    if (!v[i])
      continue;
    int skip = i * 2;
    for (int j = i * i; j <= n; j += skip)
      v[j] = false;
  }
  primes.push_back(2);
  primeCheck[2] = true;
  for (int i = 3; i <= n; i += 2) {
    if (v[i]) {
      primes.push_back(i);
      primeCheck[i] = true;
    }
  }
}

int main() {
  vector<int> primes;
  unordered_map<int, bool> primeCheck;
  vector<int> inputs;
  for (int x; cin >> x;)
    inputs.push_back(x);
  sieve(*max_element(inputs.begin(), inputs.end()), primes, primeCheck);
  for (auto x : inputs) {
    int count = 0;
    for (auto p : primes) {
      if (p > x)
        break;
      if (primeCheck[x]){
        count++;
        break;
      } else
        count++;
    }
    cout << count << endl;
  }
  return 0;
}
```
The memory usage and running time of the program are reduced with these modifications.