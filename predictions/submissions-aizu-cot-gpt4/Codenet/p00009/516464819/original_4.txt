Optimization Steps:

1. The algorithm currently checks for prime numbers from the largest input number, which might be unnecessary if we have a lot of small numbers. We could instead use a predefined upper limit for the sieve function.

2. Converting list of primes to a vector of primes would make our program run faster. The reason is that vectors are stored in contiguous memory locations which allows faster access due to locality of reference, while lists are node-based containers.

3. In the main loop, we are counting primes by iterating through the prime list for each input. This is not efficient. We can instead use binary search to find the number of primes less than or equal to the input. This will reduce the time complexity from O(n) to O(log n).

4. We can also use the std::ios::sync_with_stdio(false); and cin.tie(NULL); to make cin and cout faster. This will disable the synchronization between the C and C++ standard streams. By default, all standard streams are synchronized, which means that cin, cout and scanf, printf tie together and can be mixed.

Optimized Program:

```cpp
#include <algorithm>
#include <cmath>
#include <iostream>
#include <vector>
using namespace std;

void sieve(int n, vector<int> &primes) {
  vector<bool> v(n + 1, true);
  for (int i = 3, end = sqrt(n); i <= end; i += 2) {
    if (!v[i])
      continue;
    for (int j = i * i, skip = i * 2; j <= n; j += skip)
      v[j] = false;
  }
  primes.push_back(2);
  for (int i = 3; i <= n; i += 2)
    if (v[i])
      primes.push_back(i);
}

int main() {
  std::ios::sync_with_stdio(false);
  cin.tie(NULL);
  
  vector<int> primes;
  vector<int> inputs;
  for (int x; cin >> x;)
    inputs.push_back(x);
  sieve(1000000, primes);
  for (auto x : inputs) {
    auto upper = upper_bound(primes.begin(), primes.end(), x);
    cout << upper - primes.begin() << endl;
  }
  return 0;
}
```
Please note that the upper limit in the sieve function is set to 1,000,000. You may want to adjust this value based on the expected range of your input.
