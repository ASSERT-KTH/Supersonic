The given code calculates prime numbers up to the maximum number in the input and stores them in a list. Then, for each input number, it counts the number of primes less than or equal to the input number by linear search.

Here are some steps to optimize this code:

1. The `std::list` is not the best choice for storing primes, because it supports only bidirectional iteration that takes more time and memory than `std::vector`. We should replace `std::list<int>` with `std::vector<int>` for primes.
2. The inner loop in the main function is not efficient, it iterates through all primes to count the number of primes less than or equal to the input number. We can use binary search to find the position of input number in the primes vector, which is more efficient than linear search.
3. We can use `std::lower_bound` function to implement the binary search, which returns an iterator pointing to the first element that is not less than the input number. The position of this element is the number of primes less than or equal to the input number.

Here is the optimized code:

```cpp
#include <algorithm>
#include <cmath>
#include <iostream>
#include <vector>
using namespace std;
void sieve(int n, vector<int> &primes) {
  vector<bool> v(n + 1, true);
  for (int i = 2, end = sqrt(n); i <= end; ++i) {
    if (!v[i])
      continue;
    for (int j = i * i; j <= n; j += i)
      v[j] = false;
  }
  for (int i = 2; i <= n; ++i)
    if (v[i])
      primes.push_back(i);
}
int main() {
  vector<int> primes;
  vector<int> inputs;
  for (int x; cin >> x;)
    inputs.push_back(x);
  sieve(*max_element(inputs.begin(), inputs.end()), primes);
  for (auto x : inputs) {
    cout << lower_bound(primes.begin(), primes.end(), x + 1) - primes.begin() << endl;
  }
  return 0;
}
```
This optimized code should run faster and use less memory than the original one.