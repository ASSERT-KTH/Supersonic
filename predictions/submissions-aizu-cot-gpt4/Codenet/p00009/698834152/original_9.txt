Optimization Steps:

1. The outer loop in the main function is used for finding prime numbers. We can optimize it using the Sieve of Eratosthenes algorithm which is more efficient. In this algorithm, we only need to consider numbers up to the square root of MAX.

2. The inner loop is to mark the multiples of the current number as not prime. We can start the loop from i*i instead of 2*i to reduce unnecessary iterations.

3. Also, we are unnecessarily updating the num_prime[] array for all values of i. We can optimize it by only updating it when the number is prime.

Optimized Program:

```cpp
#include <iostream>
#include <cmath>
#define MAX 999999
using namespace std;
int num_prime[MAX + 1];
bool not_prime_flag[MAX + 1];
int main() {
  int n;
  int limit = sqrt(MAX);
  for (int i = 2; i <= limit; ++i) {
    if (!not_prime_flag[i]) {
      for (int j = i * i; j <= MAX; j += i) {
        not_prime_flag[j] = true;
      }
    }
  }
  int count = 0;
  for (int i = 2; i <= MAX; ++i) {
    if (!not_prime_flag[i]) {
      num_prime[i] = ++count;
    }
  }
  while (cin >> n) {
    cout << num_prime[n] << endl;
  }
  return 0;
}
```
This optimized program should run faster and use less memory than the original program.