The given program is finding prime numbers up to a maximum limit (MAX) and then for any given number n, it tells the number of prime numbers less than or equal to n. 

Optimization Steps:
1. We can improve the inner loop by starting `j` from `i` instead of `2`, because for any `k < i`, `k*i` would have already been marked when `i = k`.

2. The sieve algorithm can be optimized by iterating over the odd numbers only. The reason is that 2 is the only even prime number. So, we can mark the numbers by incrementing `j` with `2*i` instead of `i` which means we are skipping the even multiples.

3. In the inner loop, we are marking the multiples of `i` as not prime. We are going beyond `n` but we need to calculate the primes only up to `n`. Hence, we can break the loop as soon as `i * j` is greater than `n`.

4. We are calculating the prefix sum of primes for all numbers up to MAX. But we need to calculate the sum only up to `n`. Hence, we can calculate the prefix sum after getting the value of `n`.

5. We can eliminate the use of the num_prime array by just using a single variable to keep track of the count of primes.

Optimized Program:
```cpp
#include <iostream>
#define MAX 999999
using namespace std;
bool not_prime_flag[MAX + 1];

int main() {
  int n;
  for (int i = 2; i * i <= MAX; ++i) {
    if (!not_prime_flag[i]) {
      for (int j = i; i * j <= MAX; j += 2) {
        not_prime_flag[i * j] = true;
      }
    }
  }
  while (cin >> n) {
    int prime_count = 0;
    for (int i = 2; i <= n; ++i) {
      prime_count += !not_prime_flag[i];
    }
    cout << prime_count << endl;
  }
  return 0;
}
```
This optimized program is more efficient in terms of memory and also runs faster.