The given program is a prime number counter. It counts the number of prime numbers upto a given number n. The program uses the Sieve of Eratosthenes algorithm, but it does not implement it in an optimal way. Let's go through the optimization steps:

1. The inner loop in the Sieve of Eratosthenes algorithm can start from i*i, not from 2*i. The reason is that all numbers n where n < i*i are already marked by previous steps.

2. In the Sieve of Eratosthenes algorithm, you only need to run the outer loop until sqrt(MAX). The reason is that for each composite number n, there will be a factor f such that f <= sqrt(n).

3. Instead of dynamically calculating the prefix sum in num_prime[i] = num_prime[i - 1] + !not_prime_flag[i], we can calculate the prefix sums after we have marked all non-prime numbers.

4. Use std::ios_base::sync_with_stdio(false); and cin.tie(NULL); to disable synchronization between the C and C++ standard streams, which can speed up input and output operations.

Optimized program:

```cpp
#include <iostream>
#include <cmath>
#define MAX 999999
using namespace std;
int num_prime[MAX + 1];
bool not_prime_flag[MAX + 1];
int main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n;
  for (int i = 2; i * i <= MAX; ++i) {
    if (!not_prime_flag[i]) {
      for (int j = i * i; j <= MAX; j += i) {
        not_prime_flag[j] = true;
      }
    }
  }
  num_prime[0] = num_prime[1] = 0;
  for (int i = 2; i <= MAX; ++i) {
    num_prime[i] = num_prime[i - 1] + !not_prime_flag[i];
  }
  while (cin >> n) {
    cout << num_prime[n] << endl;
  }
  return 0;
}
```
Note: This optimization is for running time. For memory usage, one could consider using a bitset or a segmented sieve technique but it would change the structure of the program significantly.