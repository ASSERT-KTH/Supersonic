First, the given program is trying to find the number of prime numbers less than or equal to a given number `n`. It uses the Sieve of Eratosthenes algorithm to mark non-prime numbers. The algorithm runs in O(n log log n) time which is very efficient for large `n`.

Optimization 1:
The inner loop starts from `2*i`. This can be optimized to start from `i*i`.
Reason: When `i` is the current prime, all the numbers less than `i*i` have already been marked by previous primes. So, we can start from `i*i`.

Optimization 2:
The increment in the inner loop is `j`. It can be optimized to `2*i`.
Reason: When `i` is a prime, `i*i+i` will be even (if `i>2`), which means it is not a prime. So, we can skip even multiples and hence increment by `2*i` instead of `j`.

Optimization 3:
Check and increment for `num_prime[i]` can be moved inside the `if` condition because it is only required to be executed when `i` is prime (when `!not_prime_flag[i]` is true).

Optimization 4:
We can use `std::ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` to make `cin` and `cout` more efficient.

Here's the optimized program:

```cpp
#include <iostream>
#define MAX 999999
using namespace std;
int num_prime[MAX + 1];
bool not_prime_flag[MAX + 1];
int main() {
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
    for (int i = 2; i < MAX + 1; ++i) {
        if (!not_prime_flag[i]) {
            for (int j = i * i; j < MAX + 1; j += 2 * i) {
                not_prime_flag[j] = true;
            }
            num_prime[i] = num_prime[i - 1] + 1;
        }
        else {
            num_prime[i] = num_prime[i - 1];
        }
    }
    while (cin >> n) {
        cout << num_prime[n] << "\n";
    }
    return 0;
}
```
This optimized program will have better running time and memory usage in comparison to the original one.