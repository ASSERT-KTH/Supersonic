Step by Step Optimization:

1. Pre-calculation: We can pre-calculate all prime numbers till MAX using the Sieve of Eratosthenes which is an efficient algorithm for finding all prime numbers up to any given limit. It does so by iteratively marking the multiples of each prime, starting from the first prime number, 2.

2. Loop optimization: We can optimize the loop that marks the not prime numbers (not_prime_flag). Instead of starting from 2 for every i, we can start from i itself because multiples of numbers smaller than i would have already been marked in previous iterations.

3. Use of bitwise operations: Instead of incrementing the prime count by !not_prime_flag[i] we can use bitwise NOT operator. The bitwise NOT operator will be faster than the logical NOT operator.

Here is the optimized code:

```cpp
#include <iostream>
#define MAX 999999
using namespace std;
int num_prime[MAX + 1];
bool not_prime_flag[MAX + 1];
int main() {
  int n;
  for (int i = 2; i * i <= MAX; ++i) {
    if (!not_prime_flag[i]) {
      for (int j = i; i * j <= MAX; ++j) {
        not_prime_flag[i * j] = true;
      }
    }
  }
  for (int i = 2; i <= MAX; ++i){
    num_prime[i] = num_prime[i - 1] + ~not_prime_flag[i] + 1;
  }
  while (cin >> n) {
    cout << num_prime[n] << endl;
  }
  return 0;
}
```
In the optimized code, we first mark the multiples of each prime number till sqrt(MAX). After that, we calculate the prefix sum array of prime numbers till MAX. This will give us the number of prime numbers till any number n in O(1) time.