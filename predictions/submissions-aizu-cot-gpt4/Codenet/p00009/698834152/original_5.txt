The current program is using the Sieve of Eratosthenes algorithm to find all prime numbers up to a given number. The optimization could be done by reducing the time complexity of the inner loop and by reducing the space complexity of the not_prime_flag array.

Here are the steps for optimization:

1. Reduce the time complexity by starting the inner loop from `i*i` instead of `2*i`. Because any number `n` that is smaller than `i*i` and is a multiple of `i` has already been marked as non-prime by some number smaller than `i`.

2. The space complexity of the not_prime_flag array could be reduced by replacing the bool array with a bitset. A bitset is an array data structure that compactly stores bits. It can save memory compared to the bool array.

3. The algorithm can be further optimized by checking only odd numbers. We know that except for 2, all prime numbers are odd. So we can skip even numbers.

Here is the optimized program:

```C++
#include <iostream>
#include <bitset>
#define MAX 999999
using namespace std;
int num_prime[MAX + 1];
bitset<MAX+1> not_prime_flag;
int main() {
  int n;
  num_prime[2] = 1;
  for (int i = 3; i < MAX + 1; i += 2) {
    if (!not_prime_flag[i]) {
      for (int j = i; (long long)j * i < MAX + 1; j += 2) {
        not_prime_flag[i * j] = true;
      }
    }
    num_prime[i] = num_prime[i - 1] + !not_prime_flag[i];
    if(i+1 <= MAX) num_prime[i+1] = num_prime[i]; // handle even numbers
  }
  while (cin >> n) {
    cout << num_prime[n] << endl;
  }
  return 0;
}
```

This optimized program reduces the time complexity from `O(n log log n)` to `O(n log log sqrt(n))` and the space complexity from `O(n)` to `O(n/8)`.