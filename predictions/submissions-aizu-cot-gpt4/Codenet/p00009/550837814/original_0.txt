Step 1: Calculate the square root of 1000000 only once instead of in every loop iteration, which will reduce the overhead of calculating the square root in every iteration of the loop.

Step 2: Use a larger data type for the array, such as long long int, to prevent possible overflow when the array values are added up.

Step 3: Instead of using a nested for loop to mark the multiples of i as not prime, use a while loop which is faster in this case since it only iterates when the condition is true.

Step 4: Instead of using scanf in an infinite loop to read the input, use it once and then use a for loop to print the results. This way the program will only scan the input once, reducing the number of system calls and potentially increasing speed.

The optimized program:

```c++
#include <math.h>
#include <stdio.h>
int main() {
  int i, j;
  long long int n;
  long long int num[1000000];
  for (i = 0; i < 1000000; i++) {
    num[i] = 1;
  }
  num[0] = num[1] = 0;
  int limit = sqrt(1000000);
  for (i = 2; i < limit; i++) {
    if (num[i] == 1) {
      j = i * i;
      while(j < 1000000){
        num[j] = 0;
        j += i;
      }
    }
  }
  for (i = 1; i < 1000000 - 1; i++) {
    num[i + 1] += num[i];
  }
  scanf("%lld", &n);
  for (i = 0; i < n; i++) {
    printf("%lld\n", num[i]);
  }
  return 0;
}
```