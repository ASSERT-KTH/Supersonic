Step 1: Pre-calculate sqrt(1000000)
The sqrt(1000000) is calculated in every iteration of the for-loop which is unnecessary. sqrt(1000000) is constant and can be calculated once and stored in a variable. This will reduce the number of sqrt operations from 1000000 to just 1.

Step 2: Use bitwise operations for setting and checking the num array
Instead of setting num[i] to 1 and 0 and then checking if num[i] == 1, we can use bitwise operations to set and check if the i-th bit is set. This will reduce the memory usage of the num array.

Step 3: Use bitwise shift for multiplication and addition
Instead of doing i * i and i + 1, we can use bitwise shift to reduce the time it takes to perform these operations. i * i is equivalent to i << 1 and i + 1 is equivalent to i | 1.

Step 4: Use getchar() instead of scanf() for reading input
getchar() is faster than scanf(). We can use getchar() to read the input one character at a time and convert it to an integer. This will reduce the time it takes to read the input.

Here is the optimized program:

```c
#include <math.h>
#include <stdio.h>

#define MAX 1000000
#define SQRT_MAX 1000

int main() {
  int i, j;

  unsigned char num[MAX / 8 + 1] = {0};
  int sqrt_max = sqrt(MAX);

  for (i = 2; i < sqrt_max; i++) {
    if (!(num[i / 8] & (1 << (i % 8)))) {
      for (j = i * i; j < MAX; j += i)
        num[j / 8] |= 1 << (j % 8);
    }
  }

  for (i = 3; i < MAX; i++)
    if (!(num[i / 8] & (1 << (i % 8))))
      num[i / 8] += num[(i - 1) / 8];

  int n;
  while ((n = getchar()) != EOF) {
    n -= '0';
    printf("%d\n", num[n / 8] & (1 << (n % 8)) ? 0 : 1);
  }

  return 0;
}
```

Note: The above program assumes that the input numbers are single-digit. If the input numbers can be larger, you will need to modify the getchar() part to correctly convert a string of characters into an integer.