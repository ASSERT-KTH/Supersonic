This program appears to be performing the Sieve of Eratosthenes, which is an algorithm to find all primes less than a given number, and then a prefix sum on the array, and finally, it outputs the cumulative count of primes up to each number read from the input until end of file.

Here are the optimization steps:

1. The first loop is initializing the array. However, we're using an integer array where a boolean array could suffice. Boolean array will use less memory.

2. For the Sieve of Eratosthenes, we are checking every number up to the square root of the maximum number. But, we're calculating the square root in every iteration of the loop which is unnecessary and time consuming. We should calculate it once and store the value.

3. During the sieve, we're starting from `i*i`. We can start from `2*i`, which will reduce the number of iterations and hence, will speed up the program.

Here is the optimized program:

```cpp
#include <math.h>
#include <stdio.h>
bool num[1000000];
int main() {
  int i, j;
  int n;
  int limit = sqrt(1000000);
  for (i = 2; i <= limit; i++) {
    if (!num[i]) {
      for (j = 2*i; j < 1000000; j += i)
        num[j] = true;
    }
  }
  for (i = 2; i < 1000000; i++) {
    num[i] += num[i-1];
  }
  while (scanf("%d", &n) != EOF) {
    printf("%d\n", num[n]);
  }
  return 0;
}
```
Now, the program is optimized for both running time and memory usage.