Optimizations:

1. Use `bool` instead of `int` to store the flag in the `num` array. This reduces memory usage as `bool` uses only 1 byte compared to `int` which uses 4 bytes.

2. Precompute `sqrt(1000000)` to avoid repeated computation in the loop.

3. Instead of `scanf` in a loop, use a single `scanf` call before the loop to read the number of queries, and `scanf` inside the loop to read each query. This reduces the overhead of checking for EOF in each iteration of the loop.

4. If the current number is not prime (i.e., `num[i]` is `false`), there's no need to add it to the next number. So, add a condition to check if `num[i]` is `true` before adding it to `num[i+1]`.

5. Declare the loop variables inside the loop, not outside. This is a good practice and increases readability.

Here is the optimized code:

```c++
#include <cmath>
#include <cstdio>
#include <vector>
using namespace std;

int main() {
  vector<bool> num(1000000, true);
  num[0] = num[1] = false;
  int sqrtN = sqrt(1000000);
  for (int i = 2; i <= sqrtN; i++) {
    if (num[i]) {
      for (int j = i * i; j < 1000000; j += i)
        num[j] = false;
    }
  }
  for (int i = 1; i < 1000000 - 1; i++) {
    if (num[i])
      num[i + 1] += num[i];
  }
  int queryCount;
  scanf("%d", &queryCount);
  for (int i = 0; i < queryCount; i++) {
    int n;
    scanf("%d", &n);
    printf("%d\n", num[n]);
  }
  return 0;
}
```