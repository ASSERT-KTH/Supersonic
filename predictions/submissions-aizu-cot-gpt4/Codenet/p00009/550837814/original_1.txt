There are few steps that you can take to optimize this program:
1. Avoid computing `sqrt(1000000)` every time in the loop, calculate it once and store the value in a variable.
2. You don't need to initialize all the `num` array members to `1` at the beginning. You can initialize them to `0` by default using `memset` which is faster and then only modify some members to `1` in your loop.
3. The outer loop in `num[i + 1] += num[i];` is unnecessary, you can compute this in the previous loop.
4. You are storing a large array of size `1000000` on the stack, which is not recommended as it can lead to a stack overflow. You should allocate on the heap instead.
5. You can use `std::vector` instead of raw arrays to manage memory automatically.
6. You can replace `scanf` and `printf` with `std::cin` and `std::cout` for better performance in C++.
7. Make your variables `const` if they're not going to change. This can help the compiler optimize your code.
8. You can use `auto` for type deduction to make your code cleaner and safer in C++.

Here's the optimized version:

```cpp
#include <math.h>
#include <iostream>
#include <vector>
#include <cstring>

int main() {
  const int size = 1000000;
  std::vector<int> num(size, 0);
  num[0] = num[1] = 0;
  const int sqrtSize = static_cast<int>(sqrt(size));
  for (auto i = 2; i < sqrtSize; i++) {
    if (num[i] == 0) {
      for (auto j = i * i; j < size; j += i)
        num[j] = 1;
    }
    num[i + 1] += num[i];
  }
  int n;
  while (std::cin >> n) {
    std::cout << num[n] << "\n";
  }
  return 0;
}

```
Please note that if you need to stick with C, you cannot use `std::vector`, `std::cin`, `std::cout` and `auto`. These are C++ features. In this case, you can use `malloc` or `calloc` to allocate memory on the heap for the array `num`.