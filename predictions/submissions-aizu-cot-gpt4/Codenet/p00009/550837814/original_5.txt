This program is a simple implementation of the Sieve of Eratosthenes algorithm to find all prime numbers up to a given limit. It also includes a cumulative sum array to count the number of primes up to a given index.

Here are a few optimizations that could be made:

1. In the second loop, the outer loop iterates until the square root of the maximum limit. However, the square root is calculated at each step of the loop, which is inefficient. We can calculate the square root once before the loop and then use that value.

2. We can change the data type of the 'num' array from 'int' to 'bool'. Since the 'num' array only contains binary values (0 and 1), using 'bool' instead of 'int' will reduce the memory consumption.

3. We can avoid the last loop for cumulative sums by doing the sum in the second loop itself when we are marking the composite numbers. 

4. The last loop for input can be made more idiomatic C.

Here is the optimized code:

```c
#include <math.h>
#include <stdio.h>
#include <stdbool.h>

int main() {
  int i, j;
  int n;
  bool num[1000000];
  for (i = 0; i < 1000000; i++) {
    num[i] = true;
  }
  num[0] = num[1] = false;
  int limit = (int)sqrt(1000000);
  for (i = 2; i <= limit; i++) {
    if (num[i]) {
      for (j = i * i; j < 1000000; j += i) {
        num[j] = false;
      }
      num[i] += num[i-1];
    }
  }
  for (i = limit+1; i < 1000000; i++) {
    num[i] += num[i-1];
  }
  while (scanf("%d", &n) != EOF) {
    printf("%d\n", num[n]);
  }
  return 0;
}
```
