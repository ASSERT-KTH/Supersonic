Step 1: The value of PI is a constant and can be declared as a `const`. This will prevent any accidental modification in code later and also helps in optimization as compiler can make assumptions about const variables and optimize accordingly.

Step 2: Instead of using both `iostream` and `cstdio`, we can use only `iostream`. This reduces the overhead of including two libraries.

Step 3: The calculation `PI * r` is common in both the calculations. We can store it in a variable and use it in both places. This reduces the number of multiplications.

Step 4: We can use `std::cout` instead of `printf`. It's slightly faster and more type-safe than `printf()`.

Optimized Code:

```cpp
#include <iostream>
using namespace std;
int main() {
  const double PI = 3.141592653589;
  double r;
  cin >> r;
  double pi_r = PI * r;
  cout << pi_r * r << " " << 2 * pi_r << "\n";
  return 0;
}
```

Note: The difference between `printf()` and `cout` in performance is negligible and the choice between the two should be made based on the specific requirements of the task at hand.