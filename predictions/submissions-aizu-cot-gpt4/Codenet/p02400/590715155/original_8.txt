The program is already simple and pretty optimized. However, there are a few things that we can tweak to theoretically increase the efficiency a little more.

1.  Use `std::cout` instead of `printf`: The `printf` function is a C function and is generally slower than its C++ counterpart, `std::cout`. It also doesn't do type checking. So, we can replace `printf` with `std::cout` for better efficiency and safety.

2.  Use `const` keyword for PI: Since the value of PI is not changing throughout the program, we can declare it as a `const`. This could potentially allow the compiler to make some optimizations.

3.  Inline computation: The computations can be done directly in the `std::cout` statement. This avoids the need for intermediary variables and can potentially increase the speed of your code. However, this is a micro-optimization and it might not have a significant impact on the running time.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;

int main() {
  const double PI = 3.141592653589;
  double r;
  cin >> r;
  cout << PI * r * r << " " << 2 * PI * r << "\n";
  return 0;
}
```

Please note that these are micro-optimizations and they might not improve the running time significantly. The original code is simple and already quite efficient. It's always a good idea to focus on writing clean, readable, and maintainable code before thinking about optimizations.