Optimization Steps:

1. Avoiding redundant computations: In the calculation of the circumference `l`, `r + r` is used to represent `2 * r`. This is a redundant operation. Multiplication operation is faster than addition operation in modern processors. Also, precomputing `2*r` and using it in the circumference calculation can save computation.
2. Using constants: The value of Ï€ is a constant, and is better represented as `const double PI`. This makes the code more readable and maintainable. 
3. Using `std::fixed` and `std::setprecision`: The `printf` function is a C legacy in C++ and it is not type safe. It is better to use `std::fixed` and `std::setprecision` to set the precision of the floating point output. This makes the code safer and more C++ idiomatic.

Optimized Program:

```cpp
#include <iostream>
#include <iomanip>
using namespace std;

const double PI = 3.141592653589;

int main() {
    double r;
    cin >> r;

    double r_doubled = r * 2;
    double area = PI * r * r;
    double circumference = PI * r_doubled;

    cout << fixed << setprecision(8) << area << " " << circumference << "\n";
}
```

This program is more optimized in terms of running time because it avoids redundant computation. It is more memory-efficient because it uses only one additional double variable (`r_doubled`). It is also safer and more C++ idiomatic because it uses `std::fixed` and `std::setprecision` instead of `printf`.