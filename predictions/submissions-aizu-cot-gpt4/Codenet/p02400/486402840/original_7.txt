The given C++ program calculates the area ('s') and circumference ('l') of a circle, given its radius ('r'). The Pi constant ('x') is also defined in the program. 

1. Use Constants: The first optimization that we can do is to use the constant keyword for the value of 'x'. This will ensure the program does not accidentally modify the value of 'x' and will help the compiler to optimize the code.

2. Simplify Calculations: In the calculation of the circumference 'l', we can simplify 'r + r' to '2 * r'. This won't make a significant difference in terms of performance but makes the intent of the code clearer. 

3. Use 'cout' Instead of 'printf': The 'printf' function is a C function and it is slower and less type-safe than 'cout'. Therefore, using 'cout' can lead to better performance and is considered better practice in C++.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int main() {
  const double PI = 3.141592653589;
  double r, s, l;
  cin >> r;
  s = r * r * PI;
  l = 2 * PI * r;
  cout.precision(9);
  cout << s << " " << l << "\n";
}
```

Please note, the 'printf' function and 'cout' handle trailing zeros differently. 'printf' will print trailing zeros, while 'cout' won't unless you set a specific precision using 'cout.precision(n)'. In this case, we've set the precision to 9 to match the original 'printf' behavior.