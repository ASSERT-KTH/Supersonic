There are a few possible optimizations for this code:

1. Avoid repeatedly calling the .size() method of the vector in the loop. Instead, store the size in a variable before the loop. Calling .size() repeatedly might have a computational cost, though most modern C++ STL implementations make this a constant time operation.

2. The vectors "veca" and "vecb" are only used for storing the results, and there is no need for them to be vectors. We can directly print the result in the first while loop and remove the second for loop entirely. This will save memory and some CPU time.

3. Instead of checking if 'game_a > game_b' and 'game_a == game_b' separately, we can check if 'game_a >= game_b'. This will save us one comparison operation in case 'game_a' is greater than 'game_b'.

Here is the optimized version of the code:

```cpp
#include <iostream>

int main() {
  int a = 0;
  int b = 0;
  int game_a, game_b;
  int n;
  
  while (1) {
    std::cin >> n;
    if (n == 0)
      break;
    else {
      for (int i = 0; i < n; ++i) {
        std::cin >> game_a >> game_b;
        if (game_a >= game_b)
          a += game_a + game_b;
        else
          b += game_a + game_b;
      }
      std::cout << a << " " << b << std::endl;
      a = 0;
      b = 0;
    }
  }
  
  return 0;
}
```

This version of the code will run faster and use less memory than the original version.