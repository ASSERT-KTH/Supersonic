Step 1: Minimize the usage of vectors - The code uses vectors to store the results of each game session, however, it is possible to output the result instantly after each game session ends. This way, we do not need to store the results in memory, thus reducing memory usage.

Step 2: Remove unnecessary variables - The variable 'vec' is declared, but not used anywhere in the program. Removing it will reduce memory usage.

Step 3: Use prefix increment - In the for loop, use prefix increment (++i) instead of postfix increment (i++). Although the difference is negligible in this case, it is a good practice to use prefix increment in loops because it avoids unnecessary temporary object creation and destruction.

Step 4: Streamline the calculation of 'a' and 'b' - The calculation of 'a' and 'b' can be simplified. Regardless of whether 'game_a' is equal to, greater than, or less than 'game_b', 'game_a + game_b' is always added to either 'a' or 'b'. This common part can be taken out and calculated only once.

Here is the optimized code:

```cpp
#include <iostream>

int main() {
  int n;
  int a = 0;
  int b = 0;
  int game_a, game_b;
  while (1) {
    std::cin >> n;
    if (n == 0)
      break;
    else {
      for (int i = 0; i < n; ++i) {
        std::cin >> game_a >> game_b;
        int total = game_a + game_b;
        if (game_a >= game_b)
          a += total;
        else
          b += total;
      }
      std::cout << a << " " << b << std::endl;
      a = 0;
      b = 0;
    }
  }
  return 0;
}
```
The optimized code should run faster and use less memory than the original one.