This program is already quite optimized, but a few small modifications can be made to slightly improve its efficiency:

1. The variable `vec` is declared but never used, so it can be removed to save memory.
2. The vector `veca` and `vecb` are only used to store the results before printing them. Instead of storing these results, we can print them directly after each round of the game, which will save memory and also make the program more responsive in real time.
3. The condition `game_a == game_b` results in code duplication since the same operation `a += game_a; b += game_b;` is performed regardless of whether `game_a` is equal to, less than or greater than `game_b`. This can be simplified by removing this condition and only checking whether `game_a` is less than `game_b`.

Here is the optimized program:

```cpp
#include <iostream>

int main() {
  int n;
  int a = 0;
  int b = 0;
  int game_a, game_b;
  while (1) {
    std::cin >> n;
    if (n == 0)
      break;
    else {
      for (int i = 0; i < n; ++i) {
        std::cin >> game_a >> game_b;
        if (game_a > game_b)
          a += game_a + game_b;
        else
          b += game_a + game_b;
      }
      std::cout << a << " " << b << std::endl;
      a = 0;
      b = 0;
    }
  }
  return 0;
}
```
Remember that the benefits of these optimizations will be negligible for small inputs. They may only become noticeable for very large inputs where the size of `veca` and `vecb` becomes substantial.