The program reads a number of score pairs (game_a, game_b) from input and performs some calculations on them, storing the results in two vectors. Then it prints the results.

Here are the optimization steps:

1. Use a structure instead of two separate vectors: Instead of using two separate vectors to store the results, you can store them in a single vector of pairs or, better yet, a vector of a custom struct. This will reduce the overhead of managing two separate vectors and make the code easier to understand.

2. Reserve space for the vector: If you know the maximum number of elements that will be stored in the vector, you can use the reserve() function to preallocate memory for them. This can significantly improve performance for larger vectors because it prevents multiple reallocations and copies as the vector grows.

3. Use std::ios::sync_with_stdio(0): This will untie C++ streams from C streams, which can improve I/O performance.

4. Use cin.tie(NULL): This will untie cin from cout, which can also improve I/O performance.

5. Avoid flushing the output buffer unnecessarily: Instead of using std::endl to print a newline and flush the output buffer, you can just print a newline character '\n'. Flushing the output buffer unnecessarily can degrade performance.

Here is the optimized version of the program:

```C++
#include <iostream>
#include <vector>

struct Result {
  int a;
  int b;
};

int main() {
  std::ios::sync_with_stdio(0);
  std::cin.tie(NULL);

  int n;
  int game_a, game_b;
  std::vector<Result> results;
  results.reserve(100);  // Assume a maximum of 100 results

  while (1) {
    std::cin >> n;
    if (n == 0)
      break;

    Result result = {0, 0};

    for (int i = 0; i < n; ++i) {
      std::cin >> game_a >> game_b;
      if (game_a >= game_b)
        result.a += game_a + game_b;
      else
        result.b += game_a + game_b;
    }

    results.push_back(result);
  }

  for (const auto& result : results) {
    std::cout << result.a << " " << result.b << '\n';
  }

  return 0;
}
```
In the given code, I assume that the maximum number of results is 100. If you know the exact number, you should replace 100 with that number. If you don't know the maximum number of results but you know that it's likely to be large, you can still use reserve() with a reasonable estimate to improve performance.