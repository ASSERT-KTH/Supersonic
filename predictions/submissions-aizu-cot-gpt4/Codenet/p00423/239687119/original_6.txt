Optimization Steps:

1. Preallocate memory for vectors: Since the maximum size of the vectors veca and vecb is known (equals n), it is better to preallocate memory for these vectors. This can potentially save time by avoiding reallocations during the push_back operations.
2. Use prefix increment: In C++, the prefix increment operator (++i) is usually faster than the postfix increment operator (i++) for non-fundamental types. This is because the postfix increment involves a copy operation. Although the difference is negligible for fundamental types, it is a good habit to use prefix increment for consistency.
3. Combine printing loop: Instead of storing the values in 'veca' and 'vecb' and then printing them out in a separate loop, we can just print the values directly after they are calculated. This reduces memory usage as we no longer need the vectors, and might speed up the program as there are less operations to perform.
4. Remove unused variable: The variable 'vec' is declared but never used, so we can remove it to clean up the code.

Optimized code:

```cpp
#include <iostream>

int main() {
  int n;
  int a = 0;
  int b = 0;
  int game_a, game_b;
  
  while (1) {
    std::cin >> n;
    if (n == 0)
      break;
    else {
      for (int i = 0; i < n; ++i) {
        std::cin >> game_a >> game_b;
        if (game_a == game_b) {
          a += game_a;
          b += game_b;
        } else if (game_a > game_b)
          a += game_a + game_b;
        else
          b += game_a + game_b;
      }
      std::cout << a << " " << b << std::endl;
      a = 0;
      b = 0;
    }
  }

  return 0;
}
```
