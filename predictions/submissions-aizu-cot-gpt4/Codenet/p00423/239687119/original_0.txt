We can make a few optimizations to this program:

1. Use `std::ios_base::sync_with_stdio(false)` and `std::cin.tie(NULL)`: The first line is used to untie C++ and C streams, which are tied by default. The second line is used to untie cin and cout which are also tied by default. By untieing them, we can speed up the IO operations.
2. Reserve memory for `veca` and `vecb`: If you know the number of elements that are going to be stored in a vector in advance, it's better to reserve memory for them to avoid the overhead of memory reallocation.
3. Use `emplace_back` instead of `push_back`: `emplace_back` constructs the object in-place rather than creating a temporary object and then copying/moving it to the vector. So, it can be faster than `push_back` in some cases.
4. Use `'\n'` instead of `std::endl`: `std::endl` flushes the stream, which can slow down the program. If you don't need to flush the stream, you can use `'\n'` to add a newline.
5. Remove unnecessary variables: The variable `vec` is declared but never used, so we can remove it.

Let's now apply these optimizations:

```cpp
#include <iostream>
#include <vector>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  int n;
  int a = 0;
  int b = 0;
  int game_a, game_b;
  std::vector<int> veca, vecb;
  veca.reserve(1000); // Assume 1000 as a reasonable reserve size.
  vecb.reserve(1000); // Assume 1000 as a reasonable reserve size.

  while (1) {
    std::cin >> n;
    if (n == 0)
      break;
    else {
      for (int i = 0; i < n; ++i) {
        std::cin >> game_a >> game_b;
        if (game_a == game_b) {
          a += game_a;
          b += game_b;
        } else if (game_a > game_b)
          a += game_a + game_b;
        else
          b += game_a + game_b;
      }
      veca.emplace_back(a);
      vecb.emplace_back(b);
      a = 0;
      b = 0;
    }
  }
  for (int i = 0; i < veca.size(); ++i) {
    std::cout << veca[i] << " " << vecb[i] << '\n';
  }
  return 0;
}
```
Note: The reserve size of 1000 is just an assumption. You should adjust it based on your knowledge of the problem.