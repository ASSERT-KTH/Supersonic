This program seems to be about a game where two players (a and b) gather points and the total points they gather in each round are stored in two vectors veca and vecb respectively. After the game ends (when n == 0), the program prints out the total points of a and b in each round.

Optimizations that can be done include:

1. Reducing repeated calculations: In the current program, "game_a + game_b" is calculated twice if "game_a != game_b". We can calculate it beforehand and store it in a variable.

2. Reducing memory usage: Currently, we are using two vectors to store the scores of each round. We can use a vector of pair to store both scores in the same element of the vector. This is more memory efficient and makes the code cleaner.

3. Reducing unnecessary checks: In the current program, we check if "game_a == game_b" first and then check if "game_a > game_b". If "game_a == game_b" is false, then we know that "game_a > game_b" or "game_a < game_b" must be true, so we don't need to check the second condition again. 

Here's the optimized program:

```cpp
#include <iostream>
#include <vector>
int main() {
  int n;
  int a = 0;
  int b = 0;
  int game_a, game_b;
  std::vector<std::pair<int, int>> vec;
  while (1) {
    std::cin >> n;
    if (n == 0)
      break;
    else {
      for (int i = 0; i < n; ++i) {
        std::cin >> game_a >> game_b;
        int sum = game_a + game_b;
        if (game_a >= game_b)
          a += sum;
        else
          b += sum;
      }
      vec.push_back(std::make_pair(a, b));
      a = 0;
      b = 0;
    }
  }
  for (const auto& scores : vec) {
    std::cout << scores.first << " " << scores.second << std::endl;
  }
  return 0;
}
```
In this optimized program, we firstly reduced repeated calculations by calculating "game_a + game_b" beforehand and storing it in a variable "sum". Then we reduced memory usage by using a vector of pair to store both scores in the same element of the vector. Finally, we reduced unnecessary checks by checking if "game_a >= game_b" first and then, if this is false, we know that "game_a < game_b" must be true, so we don't need to check the second condition again.