The given program is a C++ program and I can see several opportunities to optimize it for both running time and memory usage. Here are the steps:

1. The first optimization is to avoid calling the `std::vector::size` function in each iteration of the loop. Instead, we can calculate the size once before the loop and use that value inside the loop.

2. Another optimization is to reduce the number of times we call the `push_back` function on the vectors `veca` and `vecb`. We can reserve memory for these vectors in advance if we know the maximum size they can reach. In this case, we don't know the exact size, but we can make an educated guess and reserve some memory upfront. This way, the vectors won't need to reallocate memory and copy elements every time they grow.

3. We are using two vectors `veca` and `vecb` to store the results, this could be optimized by using a single vector of pairs. This will reduce the memory usage and make the code more efficient.

4. The variables `a`, `b`, `game_a`, and `game_b` are not used outside of the while loop, so they can be declared inside the loop to reduce their scope and improve readability.

5. The condition `if (n == 0)` can be checked right after the input to `n`, so we can break the loop immediately if `n` equals 0.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
int main() {
  int n;
  std::vector<std::pair<int, int>> vec;
  vec.reserve(100);  // Reserve memory upfront for efficiency
  while (std::cin >> n && n != 0) {
    int a = 0, b = 0;
    for (int i = 0; i < n; ++i) {
      int game_a, game_b;
      std::cin >> game_a >> game_b;
      if (game_a == game_b) {
        a += game_a;
        b += game_b;
      } else if (game_a > game_b)
        a += game_a + game_b;
      else
        b += game_a + game_b;
    }
    vec.push_back({a, b});
  }
  int size = vec.size();
  for (int i = 0; i < size; ++i) {
    std::cout << vec[i].first << " " << vec[i].second << std::endl;
  }
  return 0;
}
```