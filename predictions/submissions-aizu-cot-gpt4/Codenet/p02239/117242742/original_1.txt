The provided C/C++ program is implementing Breadth-First Search (BFS) on a graph represented by a 2D matrix. The optimization can be done considering these points:

1) Memory Usage: The memory usage can be optimized by using adjacency list representation of the graph instead of adjacency matrix. The adjacency list representation of a graph is more space efficient when the graph is sparse (i.e., number of edges is much less than number of vertices).

2) Running Time: The running time can be optimized by minimizing the number of iterations in the BFS function. In the BFS function, the loop is iterating over all vertices irrespective of whether there is an edge between the current vertex and the iterated vertex or not. This can be avoided by using adjacency list representation.

Let's implement these optimizations.

```
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<int> adj[105], d(105, -1), visited(105, false);

void bfs(int s) {
    visited[s] = true;
    d[s] = 0;
    queue<int> q;
    q.push(s);
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        for (int i = 0; i < adj[u].size(); i++) {
            int v = adj[u][i];
            if (!visited[v]) {
                d[v] = d[u] + 1;
                visited[v] = true;
                q.push(v);
            }
        }
    }
}

int main() {
    int n;
    cin >> n;
    for (int i = 0; i < n; i++) {
        int u, k;
        cin >> u >> k;
        u--;
        for (int j = 0; j < k; j++) {
            int v;
            cin >> v;
            v--;
            adj[u].push_back(v);
        }
    }
    bfs(0);
    for (int i = 0; i < n; i++)
        cout << i + 1 << ' ' << d[i] << endl;
    return 0;
}
```

In this optimized code, the adjacency matrix is replaced by an adjacency list. The bfs function now iterates only over the vertices adjacent to the current vertex which reduces the number of iterations and hence the running time. The space complexity is also reduced as the adjacency list is more space efficient than the adjacency matrix for sparse graphs.