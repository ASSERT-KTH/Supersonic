This C++ program uses BFS (Breadth-first Search) to calculate the shortest distances from a given node to all other nodes in a graph. The graph is represented as an adjacency matrix `m`. The array `v` is used to mark the visited nodes and `d` is used to store the distances. The BFS is implemented in the function `bfs`.

1. Optimize the BFS loop: The BFS loop iterates over all nodes in each run. However, we know that the BFS only needs to consider the neighboring nodes. So we can replace the adjacency matrix with an adjacency list to save memory and to optimize the speed of the BFS. An adjacency list is a more memory-efficient way to represent a graph if the graph is sparse, i.e., it has fewer edges.

2. Avoiding unnecessary operations: In the BFS function, it first checks `m[u][i] && !v[i]`. In case `m[u][i]` is `false`, it unnecessarily checks `!v[i]`. Instead, we can check `!v[i]` first and then check `m[u][i]`.

3. Use a boolean array: `v` array is of integer type which takes up more space compared to boolean. As we are only storing two states (visited or not), we can use a boolean array instead.

4. Use `std::ios_base::sync_with_stdio(false)`: This can speed up the I/O operations in C++.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> adj;
vector<bool> visited;
vector<int> dist;

void bfs(int s) {
  visited[s] = true;
  dist[s] = 0;
  queue<int> q;
  q.push(s);
  while (!q.empty()) {
    int u = q.front();
    q.pop();
    for (int i : adj[u]) {
      if (!visited[i]) {
        dist[i] = dist[u] + 1;
        visited[i] = true;
        q.push(i);
      }
    }
  }
}

int main() {
  std::ios_base::sync_with_stdio(false); // optimize I/O operations
  int n, u, v, k;
  cin >> n;
  
  adj.resize(n);
  visited.resize(n, false);
  dist.resize(n, -1);

  for (int i = 0; i < n; i++) {
    cin >> u >> k;
    for (int j = 0; j < k; j++) {
      cin >> v;
      adj[u - 1].push_back(v - 1);
    }
  }
  bfs(0);
  for (int i = 0; i < n; i++)
    cout << i + 1 << ' ' << dist[i] << '\n';
  return 0;
}
```