Here are the optimizations I would make:

1. Reduce the size of the adjacency matrix `m` to fit the exact size of the input. This will save memory.
2. Make the BFS function inline to potentially speed up the execution time.
3. Use `std::ios::sync_with_stdio(false);` and `std::cin.tie(nullptr);` at the beginning of the `main` function to speed up the I/O operations.
4. Use `'\n'` instead of `endl` to avoid unnecessary flushes of the output buffer, which may slow down the program.

Here is the optimized program:

```c++
#include <iostream>
#include <queue>
using namespace std;
vector<vector<int>> m;
vector<int> v, d;
inline void bfs(int s) {
  v[s] = true;
  d[s] = 0;
  queue<int> q;
  q.push(s);
  while (!q.empty()) {
    int u = q.front();
    q.pop();
    for (int i = 0; i < m[u].size(); i++) {
      if (m[u][i] && !v[i]) {
        d[i] = d[u] + 1;
        v[i] = true;
        q.push(i);
      }
    }
  }
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  int n;
  cin >> n;
  m.resize(n, vector<int>(n, 0));
  v.resize(n, 0);
  d.resize(n, -1);
  for (int i = 0; i < n; i++) {
    int u, k;
    cin >> u >> k;
    for (int j = 0; j < k; j++) {
      int v;
      cin >> v;
      m[u - 1][v - 1] = true;
    }
  }
  bfs(0);
  for (int i = 0; i < n; i++)
    cout << i + 1 << ' ' << d[i] << '\n';
  return 0;
}
```

Although these optimizations will likely make the program faster and use less memory, the actual impact will depend on the specific input and the characteristics of the machine where the program is run.