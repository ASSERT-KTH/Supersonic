Here are some steps that could be taken to optimize the given C/C++ program:

1. Use `std::ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` before performing any input/output operations to speed up cin and cout. This can help reduce the running time of the program because it disables the synchronization of all the C++ standard streams with their corresponding standard C streams if it is called before the program performs its first input or output operation.

2. Use `std::vector` instead of C-style arrays. This will not necessarily improve performance but it's a better practice in C++. `std::vector` is safer and more versatile than C-style arrays. Also, `std::vector` automatically manages the memory it uses, which can help reduce memory usage and prevent memory leaks.

3. Use `reserve` function for `std::vector` before inserting elements to preallocate memory. It prevents unnecessary reallocations and copies during insertions.

4. Limit the scope of variables to the block where they are used. This can help reduce memory usage because the memory for these variables is freed when the block in which they are declared is exited.

Now, let's optimize the given C/C++ program according to these steps:

```cpp
#include <iostream>
#include <queue>
#include <vector>
using namespace std;

vector<vector<int>> m;
vector<int> v, d;

void bfs(int s) {
  v[s] = true;
  d[s] = 0;
  queue<int> q;
  q.push(s);
  while (!q.empty()) {
    int u = q.front();
    q.pop();
    for (int i = 0; i < m[u].size(); i++) {
      if (m[u][i] && !v[i]) {
        d[i] = d[u] + 1;
        v[i] = true;
        q.push(i);
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n;
  cin >> n;
  m.resize(n);
  v.resize(n);
  d.resize(n, -1);

  for (int i = 0; i < n; i++) {
    int u, k;
    cin >> u >> k;
    m[u - 1].reserve(k);
    for (int j = 0; j < k; j++) {
      int v;
      cin >> v;
      m[u - 1][v - 1] = true;
    }
  }
  bfs(0);
  for (int i = 0; i < n; i++)
    cout << i + 1 << ' ' << d[i] << '\n';
  return 0;
}
```