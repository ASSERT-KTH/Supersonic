Here are the steps to optimize the given C/C++ program:

1. Reducing the size of the matrix from 105x105 to nxn: In the original program, the size of the matrix 'm' is always 105x105, which is wasteful when 'n' is much smaller than 105. A dynamic matrix can reduce memory usage significantly when 'n' is small.

2. Using an adjacency list instead of an adjacency matrix: An adjacency matrix uses O(n^2) memory, whereas an adjacency list uses O(m + n) memory, where m is the number of edges and n is the number of vertices. If the graph is sparse (i.e., m is much smaller than n^2), an adjacency list is much more memory-efficient.

3. Using a vector instead of an array for 'v' and 'd': A vector is a dynamic data structure, whereas an array is a static data structure. Using a vector instead of an array allows the program to use only as much memory as it needs, rather than always using the maximum amount of memory.

4. Using cin.tie(0), ios_base::sync_with_stdio(false) and cout.tie(0): These lines of code disable synchronization of the C and C++ standard streams. This can make input and output operations faster.

Here is the optimized version of your program:

```cpp
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> adj;
vector<int> v, d;

void bfs(int s) {
  v[s] = true;
  d[s] = 0;
  queue<int> q;
  q.push(s);
  while (!q.empty()) {
    int u = q.front();
    q.pop();
    for (int i : adj[u]) {
      if (!v[i]) {
        d[i] = d[u] + 1;
        v[i] = true;
        q.push(i);
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

  int n;
  cin >> n;

  adj.resize(n);
  v.resize(n, false);
  d.resize(n, -1);

  for (int i = 0; i < n; i++) {
    int u, k;
    cin >> u >> k;
    u--;
    for (int j = 0; j < k; j++) {
      int v;
      cin >> v;
      v--;
      adj[u].push_back(v);
    }
  }

  bfs(0);

  for (int i = 0; i < n; i++)
    cout << i + 1 << ' ' << d[i] << '\n';

  return 0;
}
```
The main optimization for this program is the data structure change from matrix to adjacency list. This change can significantly reduce memory usage when the graph is sparse, while the impact on time complexity is minimal.