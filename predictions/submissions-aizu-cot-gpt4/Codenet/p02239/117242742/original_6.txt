The given program is an implementation of Breadth First Search (BFS) in a graph. The graph is represented as an adjacency matrix `m`, and the BFS is used to calculate the shortest distance `d` from the first node to each of the other nodes in the graph. The array `v` is used to keep track of visited nodes.

Here are some possible optimizations:

1. Move the array `v` inside the `bfs` function. This array is only used inside this function, so it does not need to be a global variable.

2. Use `std::vector` instead of raw arrays for `m`, `v` and `d`. `std::vector` is easier to use and safer than raw arrays. It automatically manages the memory for you, so you don't have to worry about allocating and deallocating memory. It also has a size associated with it, so you don't have to pass around the size separately.

3. Use `std::ios::sync_with_stdio(false)` and `std::cin.tie(NULL)` to speed up input and output operations. These commands disable the synchronization between the C and C++ standard streams, which can make input and output operations faster.

4. Use `reserve()` function for vector `m` to preallocate memory. This can improve performance by minimizing reallocations.

Here is the optimized code:

```
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

void bfs(int s, vector<vector<int>>& m, vector<int>& d, vector<bool>& v, int n) {
    v[s] = true;
    d[s] = 0;
    queue<int> q;
    q.push(s);
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        for (int i = 0; i < n; i++) {
            if (m[u][i] && !v[i]) {
                d[i] = d[u] + 1;
                v[i] = true;
                q.push(i);
            }
        }
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    int n;
    cin >> n;
    vector<int> d(n, -1);
    vector<bool> v(n, false);
    vector<vector<int>> m;
    m.reserve(n);
    for (int i = 0; i < n; i++) {
        m[i].reserve(n);
    }
    for (int i = 0; i < n; i++) {
        int u, v, k;
        cin >> u >> k;
        for (int j = 0; j < k; j++) {
            cin >> v;
            m[u - 1][v - 1] = 1;
        }
    }
    bfs(0, m, d, v, n);
    for (int i = 0; i < n; i++)
        cout << i + 1 << ' ' << d[i] << '\n';
    return 0;
}
```
