In this code, there are a few places we can optimize. 

1. Use of `std::ios::sync_with_stdio(false)`: This command will help to untie C++ standard streams from their corresponding C streams. It will speed up the I/O operations but you have to be careful after using it. After using this command, you can't use C and C++ standard streams alternatively.

2. Using `std::cin.tie(NULL)`: This command unties `cin` from `cout`. Tied streams ensure that one stream is flushed automatically before each I/O operation on the other stream.

3. Use a boolean array: The `m` array is currently an int array. We can change it to a boolean array because we're only storing true or false in it. This will save memory because a boolean uses less memory than an int.

4. Use `std::vector`: Instead of using C-style arrays `v` and `d`, we can use `std::vector`. This will not result in a speedup, but it will make the code more readable and less prone to errors.

Now, let's implement these changes:

```cpp
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

bool m[105][105]; // Change int array to bool array
vector<int> v(105), d(105); // Change C-style arrays to vectors
int n;

void bfs(int s) {
  v[s] = true;
  d[s] = 0;
  queue<int> q;
  q.push(s);

  while (!q.empty()) {
    int u = q.front();
    q.pop();
    for (int i = 0; i < n; i++) {
      if (m[u][i] && !v[i]) {
        d[i] = d[u] + 1;
        v[i] = true;
        q.push(i);
      }
    }
  }
}

int main() {
  ios::sync_with_stdio(false); // Optimize I/O operations
  cin.tie(NULL); // Untie cin from cout

  cin >> n;
  
  for (int i = 0; i < n; i++)
    d[i] = -1;
  
  for (int i = 0; i < n; i++) {
    int u, v, k;
    cin >> u >> k;
    for (int j = 0; j < k; j++) {
      cin >> v;
      m[u - 1][v - 1] = true;
    }
  }

  bfs(0);
  
  for (int i = 0; i < n; i++)
    cout << i + 1 << ' ' << d[i] << '\n'; // Use '\n' instead of endl
  
  return 0;
}
```

In this optimized code, we've speeded up the I/O operations and reduced memory usage by changing the int array to a bool array and replaced C-style arrays with vectors.