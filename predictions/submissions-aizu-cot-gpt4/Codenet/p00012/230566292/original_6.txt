Here is the step-by-step optimization of the given C/C++ code:

1. Remove unused `#include <algorithm>` and `using Plane = vector<Point>;`. They are not used in the entire program so it's unnecessary to include them.

2. Combine two function calls of `cross_prod(b, c)` and `dot_prod(b, c)` to a single call in `ccwise` function, to avoid redundant calculations.

3. In `Line` and `LineSeg` constructors, use initializer lists. This is better than assigning the values in the constructor body because it avoids creating a temporary object.

4. The `testcase_ends` function call in the `main` function is a bit tricky. The `!` operator can be removed and instead, the loop can be changed to `while(testcase_ends() == 0)`, which is more readable.

5. The `solved` variable serves no real purpose in the program and doesn't affect the output, so it can be removed.

Here is the optimized version of the code:

```cpp
#include <complex>
#include <cstdio>
using namespace std;
static const double EPS = 1e-12;
static const double INF = 1e24;
using Point = complex<double>;

namespace std {
bool operator<(const Point &a, const Point &b) {
  return real(a) != real(b) ? real(a) < real(b) : imag(a) < imag(b);
}
}

double cross_prod(const Point &a, const Point &b) { return imag(conj(a) * b); }
double dot_prod(const Point &a, const Point &b) { return real(conj(a) * b); }

struct Line : public pair<Point, Point> {
  Line(const Point &a, const Point &b) : pair<Point, Point>(a, b) {}
};

struct LineSeg : public pair<Point, Point> {
  LineSeg(const Point &a, const Point &b) : pair<Point, Point>(a, b) {}
};

struct Circle {
  Point p;
  double r;
  Circle(const Point &p, const double r) : p(p), r(r) {}
};

enum CCWiseState {
  ONLINE_FRONT = -2,
  CLOCKWISE,
  ON_SEGMENT,
  COUNTER_CLOCKWISE,
  ONLINE_BACK,
};

CCWiseState ccwise(Point a, Point b, Point c) {
  b -= a;
  c -= a;
  double cross = cross_prod(b, c);
  double dot = dot_prod(b, c);
  if (cross > 0) {
    return COUNTER_CLOCKWISE;
  } else if (cross < 0) {
    return CLOCKWISE;
  } else if (dot < 0) {
    return ONLINE_BACK;
  } else if (norm(b) < norm(c)) {
    return ONLINE_FRONT;
  } else {
    return ON_SEGMENT;
  }
}

bool testcase_ends() {
  double x, y;
  if (scanf("%lf %lf", &x, &y) == EOF)
    return 1;
  Point A(x, y);
  scanf("%lf %lf", &x, &y);
  Point B(x, y);
  scanf("%lf %lf", &x, &y);
  Point C(x, y);
  scanf("%lf %lf", &x, &y);
  Point P(x, y);
  CCWiseState tmp = ccwise(A, P, B);
  if (tmp != ccwise(B, P, C)) {
    return !printf("NO\n");
  } else if (tmp != ccwise(C, P, A)) {
    return !printf("NO\n");
  }
  printf("YES\n");
  return 0;
}

int main() {
  while (testcase_ends() == 0);
  return 0;
}
```