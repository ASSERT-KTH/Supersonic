In the given code, there are some opportunities for both runtime and memory optimization. Here are the steps that can be taken:

1. Avoid using the `pow` function for each calculation in the `ck` function. Instead, pre-calculate `1.0 / p` outside the `for` loop and use this value inside the loop.

2. Use `memset` to initialize the `minutes` array to `false`. This is much faster than setting each element to `false` individually in a loop.

3. Declare the variable `tm` outside the `totime` function. This avoids declaring and destroying the variable each time the function is called.

4. Use `std::ios_base::sync_with_stdio(false)` in the `main` function. This can speed up `cin` and `cout`.

Here is the optimized code incorporating the above steps:

```cpp
#include <bits/stdc++.h>
using namespace std;
int s, n, t, m, p;
bool minutes[7 * 24 * 60];
int wbits, tbits;
int tm;

double ck(int start) {
  int cnt = 0;
  double inv_p = 1.0 / p;
  for (int i = 0; i < m; i++, start += t) {
    bool flag = true;
    for (int j = 0; j <= s; j++) {
      if (!minutes[(start + j) % (7 * 24 * 60)]) {
        flag = false;
        break;
      }
    }
    cnt += flag;
  }
  return (1.0 - pow(1.0 - inv_p, (double)cnt * n));
}
inline int todays(int i) { return (i / (24 * 60)); }
inline bool totime(int i) {
  tm = i % (24 * 60) / 24;
  return (tm >= 18 || tm < 6);
}
int main() {
  std::ios_base::sync_with_stdio(false);
  string weekday, time;
  while (cin >> s >> n >> t >> weekday >> time >> p >> m, m) {
    if (weekday == "All")
      wbits = (1 << 7) - 1;
    else
      wbits = 1;
    if (time == "Night")
      tbits = 1;
    else if (time == "Day")
      tbits = 2;
    else
      tbits = 3;
    memset(minutes, false, sizeof(minutes));
    for (int i = 7 * 24 * 60 - 1; i >= 0; i--) {
      if ((wbits & (1 << i / 1440)) && (tbits & (1 << ((i / 360 + 1) % 4 / 2))))
        minutes[i] = true;
    }
    double ans = 0.0;
    for (int i = 24 * 60 - 1; i >= 0; i--) {
      ans = max(ans, ck(i));
    }
    cout << fixed << setprecision(16) << ans << endl;
  }
}
```
