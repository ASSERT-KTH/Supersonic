The given C/C++ program can be optimized in several ways:

1. Remove `#include <bits/stdc++.h>` and only include the necessary libraries. Including `<bits/stdc++.h>` slows down the compilation process because it includes a lot of unnecessary libraries.

2. Use `std::array<bool, 7 * 24 * 60>` instead of C-style arrays. This is safer and allows us to use STL algorithms and functions.

3. Instead of using the pow function in the ck function, calculate the power iteratively. This avoids unnecessary floating-point operations and thus speeds up the calculation.

4. Remove inline functions `todays` and `totime` as they are not used in the program.

5. The `minutes` array is filled with the same value in a loop. Use `std::fill` instead, which is more readable and potentially faster.

6. Avoid using global variables. Here, they are not necessary and can lead to confusing code and potential bugs.

Here is the optimized version:

```c++
#include <iostream>
#include <algorithm>
#include <string>
#include <cmath>
#include <array>
#include <iomanip>

using namespace std;

double ck(int start, int s, int m, int t, int p, int n, array<bool, 7 * 24 * 60>& minutes) {
  int cnt = 0;
  for (int i = 0; i < m; i++, start += t) {
    bool flag = true;
    for (int j = 0; j <= s; j++) {
      if (!minutes[(start + j) % (7 * 24 * 60)]) {
        flag = false;
        break;
      }
    }
    cnt += flag;
  }
  double result = 1.0;
  for (int i = 0; i < cnt * n; i++) {
    result *= (1.0 - 1.0 / p);
  }
  return (1.0 - result);
}

int main() {
  int s, n, t, m, p;
  string weekday, time;
  while (cin >> s >> n >> t >> weekday >> time >> p >> m, m) {
    int wbits = (weekday == "All") ? (1 << 7) - 1 : 1;
    int tbits = (time == "Night") ? 1 : (time == "Day") ? 2 : 3;
    array<bool, 7 * 24 * 60> minutes;
    fill(minutes.begin(), minutes.end(), false);
    for (int i = 7 * 24 * 60 - 1; i >= 0; i--) {
      if ((wbits & (1 << i / 1440)) && (tbits & (1 << ((i / 360 + 1) % 4 / 2))))
        minutes[i] = true;
    }
    double ans = 0.0;
    for (int i = 24 * 60 - 1; i >= 0; i--) {
      ans = max(ans, ck(i, s, m, t, p, n, minutes));
    }
    cout << fixed << setprecision(16) << ans << endl;
  }
}
```
This optimized program should run faster and use memory more efficiently than the original one.