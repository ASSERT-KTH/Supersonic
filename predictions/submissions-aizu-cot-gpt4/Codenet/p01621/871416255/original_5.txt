Here are the optimization steps for the given C/C++ program:

1. Avoid usage of `#include <bits/stdc++.h>`: This header file includes quite a lot of files, and adds extra compilation time. You should include only those files which are being used in the program.

2. Precomputing the modulo operation: In the loop that calculates the `ck(int start)` function, there's a modulo operation inside the loop. You could pre-compute `start % (7 * 24 * 60)` outside the loop to save some runtime.

3. Using `std::ios_base::sync_with_stdio(false);`: This makes input and output more efficient.

4. Using `std::cin.tie(NULL);`: This unties cin from cout. Tied streams ensure that one stream is flushed automatically before each I/O operation on the other stream.

After applying these optimizations, the optimized program is as follows:

```cpp
#include <iostream>
#include <iomanip>
#include <cmath>
#include <string>
using namespace std;
int s, n, t, m, p;
bool minutes[7 * 24 * 60];
int wbits, tbits;
double ck(int start) {
  int cnt = 0;
  start = start % (7 * 24 * 60);
  for (int i = 0; i < m; i++, start += t) {
    bool flag = true;
    for (int j = 0; j <= s; j++) {
      if (!minutes[(start + j) % (7 * 24 * 60)]) {
        flag = false;
        break;
      }
    }
    cnt += flag;
  }
  return (1.0 - pow(1.0 - 1.0 / p, (double)cnt * n));
}
inline int todays(int i) { return (i / (24 * 60)); }
inline bool totime(int i) {
  int tm = i % (24 * 60) / 24;
  return (tm >= 18 || tm < 6);
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  string weekday, time;
  while (cin >> s >> n >> t >> weekday >> time >> p >> m, m) {
    if (weekday == "All")
      wbits = (1 << 7) - 1;
    else
      wbits = 1;
    if (time == "Night")
      tbits = 1;
    else if (time == "Day")
      tbits = 2;
    else
      tbits = 3;
    double ans = 0.0;
    for (int i = 7 * 24 * 60 - 1; i >= 0; i--) {
      if ((wbits & (1 << i / 1440)) && (tbits & (1 << ((i / 360 + 1) % 4 / 2))))
        minutes[i] = true;
      else
        minutes[i] = false;
    }
    for (int i = 24 * 60 - 1; i >= 0; i--) {
      ans = max(ans, ck(i));
    }
    cout << fixed << setprecision(16) << ans << endl;
  }
}
```