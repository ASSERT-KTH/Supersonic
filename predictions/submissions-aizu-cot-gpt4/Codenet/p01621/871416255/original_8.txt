This C++ program can be optimized by reducing the number of calculations and memory usage. Here's a step-by-step optimization process:

1. In the ck function, the calculation of (1.0 - 1.0 / p) is repeated in every iteration of the for loop. This can be calculated once and stored in a variable to reduce computation time.
2. The minutes array is of fixed size and all elements are initialized to false in every iteration of the main function. This array can be replaced by a bitset which is more memory efficient and also provides a fast way to reset all bits to false.
3. Instead of calling pow in every iteration of the for loop in the ck function, we can use a loop to calculate the power. This is because pow function is much slower than the multiplication operation.
4. The return statement of the ck function can be simplified by removing the multiplication by 1.0 and removing the explicit cast to double, as the division operation already produces a double result.

Now, let's see the optimized code:

```C++
#include <bits/stdc++.h>
using namespace std;

int s, n, t, m, p;
bitset<7 * 24 * 60> minutes;
int wbits, tbits;

double ck(int start) {
  int cnt = 0;
  double prob = 1.0 - 1.0 / p;
  for (int i = 0; i < m; i++, start += t) {
    bool flag = true;
    for (int j = 0; j <= s; j++) {
      if (!minutes[(start + j) % (7 * 24 * 60)]) {
        flag = false;
        break;
      }
    }
    cnt += flag;
  }
  double result = 1.0;
  for(int i = 0; i < cnt * n; ++i){
    result *= prob;
  }
  return 1.0 - result;
}

int main() {
  string weekday, time;
  while (cin >> s >> n >> t >> weekday >> time >> p >> m, m) {
    if (weekday == "All")
      wbits = (1 << 7) - 1;
    else
      wbits = 1;
    if (time == "Night")
      tbits = 1;
    else if (time == "Day")
      tbits = 2;
    else
      tbits = 3;
    double ans = 0.0;
    for (int i = 7 * 24 * 60 - 1; i >= 0; i--) {
      minutes[i] = (wbits & (1 << i / 1440)) && (tbits & (1 << ((i / 360 + 1) % 4 / 2)));
    }
    for (int i = 24 * 60 - 1; i >= 0; i--) {
      ans = max(ans, ck(i));
    }
    cout << fixed << setprecision(16) << ans << endl;
    minutes.reset();
  }
}
```
Note: using bitset from C++ STL can speed up the program and reduce memory usage. The reset function sets all bits in the bitset to false which is more efficient than manually setting each element in the array to false.