Here are some optimizations you can apply to this program:

1. Avoid using `#include <bits/stdc++.h>`. This header file includes a lot of libraries which can slow down the compilation process. Only include necessary header files.

2. Instead of using `pow` function to compute `(1.0 - 1.0 / p)`, you can calculate it once and store it in a variable.

3. `fixed` and `setprecision` are set globally for the stream, so it's enough to set them once for the entire program, not every time in the loop.

Given these changes, the optimized version of your program will look like this:

```cpp
#include <iostream>
#include <iomanip>
#include <cmath>
#include <string>
using namespace std;

int s, n, t, m, p;
bool minutes[7 * 24 * 60];
int wbits, tbits;
double subtract;

double ck(int start) {
  int cnt = 0;
  for (int i = 0; i < m; i++, start += t) {
    bool flag = true;
    for (int j = 0; j <= s; j++) {
      if (!minutes[(start + j) % (7 * 24 * 60)]) {
        flag = false;
        break;
      }
    }
    cnt += flag;
  }
  return (1.0 - pow(subtract, (double)cnt * n));
}

inline int todays(int i) { return (i / (24 * 60)); }

inline bool totime(int i) {
  int tm = i % (24 * 60) / 24;
  return (tm >= 18 || tm < 6);
}

int main() {
  string weekday, time;
  cout << fixed << setprecision(16);
  while (cin >> s >> n >> t >> weekday >> time >> p >> m, m) {
    if (weekday == "All")
      wbits = (1 << 7) - 1;
    else
      wbits = 1;
    if (time == "Night")
      tbits = 1;
    else if (time == "Day")
      tbits = 2;
    else
      tbits = 3;
    double ans = 0.0;
    subtract = 1.0 - 1.0 / p;
    for (int i = 7 * 24 * 60 - 1; i >= 0; i--) {
      if ((wbits & (1 << i / 1440)) && (tbits & (1 << ((i / 360 + 1) % 4 / 2))))
        minutes[i] = true;
      else
        minutes[i] = false;
    }
    for (int i = 24 * 60 - 1; i >= 0; i--) {
      ans = max(ans, ck(i));
    }
    cout << ans << endl;
  }
}
```
This code should perform better than the original one in terms of both running time and memory usage.