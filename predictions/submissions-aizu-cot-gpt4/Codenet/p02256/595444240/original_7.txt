The given C/C++ program calculates the greatest common divisor (GCD) of two numbers using the Euclidean algorithm. While the algorithm itself is efficient, the program can be optimized by reducing the number of variable assignments and removing the unnecessary while loop condition. 

Step by step optimization:

1. `c = a % b;` and `a = b;` are redundant in the first iteration of the loop. These assignments can be moved inside the loop to save a few CPU cycles in the first iteration.

2. The while loop condition `c > 0` is not necessary. The loop will automatically terminate when `b` becomes 0 which is the base condition for the Euclidean algorithm. So, change the loop condition to `while (b)`.

3. The variable `i` is declared but not used anywhere in the code. Remove the unused variable `i` to save memory.

Optimized Code:

```c
#include <stdio.h>
int main() {
  int a, b, c;
  scanf("%d%d", &a, &b);
  while (b) {
    c = a % b;
    a = b;
    b = c;
  }
  printf("%d\n", a);
  return 0;
}
```
This optimized code performs the same function as the original code but is more efficient due to fewer variable assignments and a more efficient while loop condition. Also, removing the unused variable saves memory.