The C/C++ program you provided is implementing the Euclidean algorithm that computes the greatest common divisor (GCD) of two non-negative integers a and b. However, the program is not very efficient because it uses a loop to repeatedly perform the division and modulus operations until b becomes zero.

Here are the steps to optimize the program:

1. Replace the while loop with a recursive function call. This reduces the number of iterations and eliminates the need for the intermediate variable 'c'.

2. Change the variable 'i' which is not used anywhere in the code. By doing this, we can reduce the memory usage of the program.

Here is the optimized program:

```c
#include <stdio.h>

int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

int main() {
    int a, b;
    scanf("%d%d", &a, &b);
    printf("%d\n", gcd(a, b));
    return 0;
}
```

The function gcd(a, b) computes the greatest common divisor of a and b using recursion. If b is zero, it returns a, otherwise, it calls itself with b and the remainder of a divided by b. The recursion ends when b becomes zero, at which point a is the greatest common divisor of the original a and b. In main(), it inputs two integers a and b, and then prints their greatest common divisor.