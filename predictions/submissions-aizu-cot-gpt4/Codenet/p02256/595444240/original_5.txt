The given program calculates the greatest common divisor (GCD) of two numbers using the Euclidean algorithm. The main optimization we can make here is to remove the unnecessary while loop condition. Instead, we can use a do-while loop that will run until 'b' is 0. This way, we don't have to initialize 'c' to 1 unnecessarily. Also, the condition 'c > 0' is checked just after calculating the value of 'c' which is an extra operation. Using a do-while loop will remove this extra check.

Here are the optimization steps:

1. Remove 'c' initialization to 1 at the beginning.
2. Replace the while loop with a do-while loop.
3. Check whether 'b' is 0 in the loop condition.

Now, let's write the optimized code:

```C
#include <stdio.h>
int main() {
  int a, b, c;
  scanf("%d%d", &a, &b);
  do {
    c = a % b;
    a = b;
    b = c;
  } while (b != 0);
  printf("%d\n", a);
}
```
The optimized code now has slightly better performance because it avoids one unnecessary initialization and one extra conditional check in each iteration of the loop.