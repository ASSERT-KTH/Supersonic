The given code is an implementation of the Euclidean algorithm to find the greatest common divisor (GCD) of two numbers. However, it can be optimized for running time.

Optimization Steps:

1. Change the while loop to a for loop: The while loop is currently checking if `c > 0` at each iteration, but it's possible to change this to a for loop where the condition is `b != 0`, which is more efficient and avoids the need for the `c > 0` check.

2. Use the `std::swap` function to swap `a` and `b`: This is a more efficient way to swap `a` and `b` compared to the current method of using a temporary variable `c`.

3. Remove the unnecessary `i` variable: The `i` variable is not used in the program, so it can be removed to save memory.

4. The `scanf` and `printf` functions can be replaced with `std::cin` and `std::cout`: These are more efficient in C++ and also provide type safety.

Final Optimized Program:

```cpp
#include <iostream>
#include <algorithm>

int main() {
    int a, b;
    std::cin >> a >> b;
    while (b != 0) {
        a = a % b;
        std::swap(a, b);
    }
    std::cout << a << std::endl;
    return 0;
}
```
This optimized program will run more efficiently than the original version, and it also uses less memory due to the removal of the unused variable `i` and the temporary variable `c`.