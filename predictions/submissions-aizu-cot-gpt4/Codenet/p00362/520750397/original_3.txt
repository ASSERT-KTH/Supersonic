This C/C++ code is quite complex and unreadable due to the extensive use of macros, bitwise operations, and ternary operators. However, some optimization can still be done.

Here are some of the optimization steps:
1. Use arrays instead of maps. Arrays are generally faster than maps in terms of access time, and since the keys of your map are integers, you can use them as indices of an array.
2. Avoid unnecessary calls to `M(f ^ f & -f)`. This operation seems to be quite heavy, and it's better to store its results and use them later.
3. Use prefix increment `++variable` instead of postfix increment `variable++`. The prefix increment is generally faster because it doesn't need to store the original value.
4. Use `ios_base::sync_with_stdio(false); cin.tie(NULL);` to speed up cin and cout.
5. Avoid unnecessary calculations in the loop. Calculate as much as possible beforehand and store the results for later use.

Here's the optimized code:

```cpp
#include <bits/stdc++.h>

#define SIZE 200000

typedef long long L;
using namespace std;

vector<tuple<L, L, L>> T[SIZE];
L P[SIZE] = {}, E[SIZE] = {}, Z[SIZE] = {}, H[SIZE] = {}, C[SIZE] = {}, A[SIZE] = {}, O[SIZE] = {}, X[SIZE] = {}, B[SIZE] = {}, k, n, a, b, c;
char s[SIZE] = {};

L M(L f) { return f ? B[f] + M(f & (f - 1)) : 0; }

void S(L a, L i) {
  for (a = M(++i); i < SIZE; i += i & -i)
    B[i] += a;
}

void D(L f) {
  L d;
  Z[f] = 1;
  for (auto I = T[f].begin(); I != T[f].end(); I++)
    d = get<0>(*I), Z[d] || (P[d] = f, E[d] = E[f] + 1, C[d] = get<1>(*I), D(d),
    Z[f] += Z[d], H[f] = (!H[f] | Z[H[f]] < Z[d]) ? d : H[f]);
}

L K(L f) {
  a = X[f];
  n = X[b];
  return a - n ? M(O[E[a] < E[n] ? a = n, n = b, b = f, n : f]) + K(P[a])
               : abs(M(O[f]) - M(O[b]));
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL);
  cin >> n >> k;
  while (--n)
    cin >> a >> b >> c, T[a].push_back(make_tuple(b, c, 0)), T[b].push_back(make_tuple(a, c, 0));
  for (D(a = b = 0); n < Z[0]; ++n, a = H[P[n]] - n ? n : 0)
    for (; !b | a; S(a = H[a], O[a] = ++b))
      X[a] = n;
  for (cin >> a; cin >> s >> a >> b; S(H[a], O[a]), S(a, O[a] - 1))
    s[0] == '2' ? cout << K(a) << '\n', 0 : A[a] += b;
  return 0;
}
```

Please note that due to the complexity and unreadability of the original code, it's hard to be sure that these optimizations will work without any side effects. It's also worth noting that the original code has a very cryptic and non-standard style, which makes it really hard to understand and maintain. It's always better to write clean and readable code rather than trying to squeeze out every bit of performance.