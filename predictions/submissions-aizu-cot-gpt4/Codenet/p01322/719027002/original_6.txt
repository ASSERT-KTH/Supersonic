The program is a basic input/output processing program that does some string comparison and integer addition. The main inefficiency lies in the nested loops. The program compares each input string 'l' with all 'b' strings in each iteration. This problem can be solved using a map (std::unordered_map in C++). This data structure uses hash function to search keys and it has constant time complexity for search, insert and delete operations. 

First, we can replace the string array 'b' with an unordered_map, where 'b' strings are keys and 'o' integers are values. This way we can get rid of the nested loop that compares 'b' and 'l'. Instead, we can directly check if 'l' is in the map and if it is, just add the corresponding value to 'ans'.

The optimized version of the program would look like this:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;

int main() {
  int n, m; 
  unordered_map<string, int> b_map;
  string l, b;
  int o, ans;

  while(true) {
    cin >> n >> m;
    if (!n && !m)
      break;
    ans = 0;
    b_map.clear();
    for(int i = 0; i < n; i++) {
      cin >> b >> o;
      b_map[b] = o;
    }
    for(int i = 0; i < m; i++) {
      cin >> l;
      if(b_map.count(l) > 0) {
        ans += b_map[l];
      }
    }
    cout << ans << endl;
  }
}
```

In terms of memory usage, the optimized program still uses O(n) memory, same as the original one, where n is the number of 'b' strings. The memory usage is slightly larger because std::unordered_map overhead. But the running time is greatly improved from O(n*m) to O(n+m), where m is the number of 'l' strings.