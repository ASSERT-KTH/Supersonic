The existing C/C++ program could be optimized in the following ways:

1. Using an unordered_map instead of parallel arrays: The unordered_map provides an average constant-time complexity for search, insert, and delete operations. It significantly improves the performance when the number of entries is large.

2. Reducing unnecessary string comparisons: In the existing program, for each string 'l' input, it checks with all the strings 'b[i]'. However, the majority of the comparisons are unnecessary since the string 'l' only matches with one string 'b[i]'. We can avoid this by using an unordered_map.

3. Reducing the scope of variables: Variables like 'ans' and 'l' are only needed inside the main while loop. So, we can declare them inside the loop to reduce their scope and make the code cleaner.

Optimized program:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;

int main() {
    int n, m;
    for (;;) {
        cin >> n >> m;
        if (!n && !m)
            break;
        unordered_map<string, int> b;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            string s;
            int o;
            cin >> s >> o;
            b[s] = o;
        }
        for (int i = 0; i < m; i++) {
            string l;
            cin >> l;
            if (b.find(l) != b.end())
                ans += b[l];
        }
        cout << ans << endl;
    }
}
```

This code uses an unordered_map 'b' instead of parallel arrays. For each string 'l' input, it checks if it is in the map. If it is, it adds the corresponding value to 'ans'. The search operation in the unordered_map has an average time complexity of O(1), which is faster than the O(n) complexity in the original code.