First, let's walk through the optimization steps one by one:

1. The first optimization can be done by reducing the scope of the variables. The variables 'l' and 'ans' are declared outside the infinite loop but they are used only inside the loop, so we can move their declarations inside the loop. This will save memory as these variables will be created and destroyed in each iteration, and it will make the code cleaner and easier to understand.

2. The second optimization can be done by utilizing the 'continue' statement. Currently, if a match is found, a flag 'f' is set to true and it is used to add to 'ans' and break the inner loop. We can instead use continue to skip the rest of the loop when a mismatch is found, and add to 'ans' and break the loop when we reach the end of the string without finding a mismatch.

3. The third optimization can be done by using 'const' for the string 'l'. This string is never modified, so it can be declared as 'const' to allow the compiler to make further optimizations.

Here's the optimized code:

```cpp
#include <iostream>
using namespace std;
int main() {
  int n, m, o[100];
  string b[100];
  for (;;) {
    cin >> n >> m;
    if (!n && !m)
      break;
    int ans = 0;
    for (int i = 0; i < n; i++)
      cin >> b[i] >> o[i];
    for (int i = 0; i < m; i++) {
      const string l;
      cin >> l;
      for (int j = 0; j < n; j++) {
        for (int k = 0; k < 8; k++) {
          if (b[j][k] != '*' && b[j][k] != l[k]) {
            continue;
          }
        }
        ans += o[j];
        break;
      }
    }
    cout << ans << endl;
  }
}
```