Step 1: Reducing the number of iterations in inner loops
The innermost loop that checks the string character by character can be optimized by using the string compare function instead of iterating through every character of the string. This would save time on each iteration.

Step 2: Reducing memory usage
We can reduce the memory usage by declaring the variables inside the loops where they are used, thus limiting their scope and allowing the memory to be freed up sooner.

Step 3: Reducing input/output operations
Instead of displaying the output after each iteration, we can accumulate the results in a string and display it at the end of the program. This would reduce the number of input/output operations, which are time-consuming.

Here is the optimized code:

```cpp
#include <iostream>
#include <string.h>
using namespace std;
int main() {
  int n, m;
  string output;
  for (;;) {
    cin >> n >> m;
    if (!n && !m)
      break;
    string b[100];
    int o[100];
    int ans = 0;
    for (int i = 0; i < n; i++)
      cin >> b[i] >> o[i];
    for (int i = 0; i < m; i++) {
      string l;
      cin >> l;
      for (int j = 0; j < n; j++) {
        if (b[j] == "*" || b[j] == l) {
          ans += o[j];
          break;
        }
      }
    }
    output += to_string(ans) + "\n";
  }
  cout << output;
}
```
This optimized program reduces the number of iterations in the inner loop, reduces memory usage by limiting the scope of variables, and reduces the number of input/output operations by accumulating the results in a string and displaying it at the end of the program.