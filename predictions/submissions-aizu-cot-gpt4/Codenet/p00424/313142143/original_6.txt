The given C++ code isn't efficient in terms of memory and time complexity. Here are the optimization steps:

1. Remove `#import <iostream>`. It's not needed because you're using C-style input/output, not C++ style.
2. Remove `#define z std::cin >>`. It makes the code harder to understand. Replace `z` with `std::cin >>` in the code.
3. Declare `char a, b` outside of the loop. This avoids re-declaration in each loop iteration.
4. Declare `int d[256]` outside of the loop. This avoids creating and destroying the array in each loop iteration, which is a waste of time and memory.
5. The `d` array should be zero-initialized only when necessary, not in each loop iteration. Move zero-initialization into the loop where `n` is input.
6. Again, replace `putchar(a + d[a])` with `std::cout << a + d[a]`. This makes the code more C++-style consistent.

Here is the optimized code:

```cpp
#include <stdio.h>
#include <iostream>

int main() {
  int n;
  char a, b;
  int d[256];

  while (std::cin >> n && n) {
    std::fill(d, d + 256, 0);
    for (; n--; d[a] = b - a)
      std::cin >> a >> b;
    for (std::cin >> n; n--; std::cout << char(a + d[a]))
      std::cin >> a;
    std::cout << "\n";
  }
}
```

Please note that the optimized code still maintains the original functionality. It improves memory usage by avoiding unnecessary re-allocations and initializations, and it improves readability by removing the macro and making the code more consistent.