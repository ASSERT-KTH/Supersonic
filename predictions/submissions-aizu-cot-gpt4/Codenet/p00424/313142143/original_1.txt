The code you've provided is already quite optimized, but there are still a few areas that can be improved:

1. Use of Macros: In C/C++, macros are processed by the preprocessor before the actual compilation starts. They are not functions and do not involve context switch during execution. So, they are faster than functions. But the problem with macros is that they are not type-safe and can lead to errors if not used carefully. In your code, `#define z std::cin >>` is used as a macro to read from standard input. It's not a good practice to use macros in this way because it makes the code less readable and can lead to errors. It's better to use standard cin>> statement directly.

2. Variable Declaration: In your code, the array `int d[256] = {}` is declared inside the loop. So for each iteration of the loop, this array is created and destroyed which is an unnecessary overhead. You can declare this array outside the loop and reset it to zero at the start of each iteration. This way, the array is created only once and its values are just set to zero for each iteration.

3. Use of putchar: In your code, `putchar(a + d[a])` is used to print the character. The putchar function is slower because it is a low-level function that operates on single characters. You can use cout instead which is faster because it operates on strings.

Here is the optimized code:

```C++
#include <iostream>
#include <cstring>

int main() {
  int n;
  int d[256];
  char a, b;
  
  while(std::cin >> n && n) {
    memset(d, 0, sizeof(d));
    for (int i = 0; i < n; ++i) {
      std::cin >> a >> b;
      d[a] = b - a;
    }
    std::cin >> n;
    for (int i = 0; i < n; ++i) {
      std::cin >> a;
      std::cout << char(a + d[a]);
    }
    std::cout << "\n";
  }
}
```