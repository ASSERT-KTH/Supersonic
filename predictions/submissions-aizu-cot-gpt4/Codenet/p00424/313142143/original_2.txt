The program is already optimized in terms of memory usage because it uses an array d[256] for storing the differences between characters. But there is room for optimization in terms of running time. Here are the steps to follow:

1. Instead of using the macro 'z' which replaces 'std::cin >>', we can directly use 'std::cin >>'. This is because the macro expansion time increases the compilation time, although this effect might not be significant.
2. The program calls 'puts("")' in every iteration of the outer loop. We can replace it with 'std::cout << "\n";' to avoid the function call overhead. Again, the effect might not be significant.
3. We can also use 'std::cin.tie(NULL);' and 'std::ios_base::sync_with_stdio(false);' to make the input/output operations faster.
4. Instead of using 'putchar(a + d[a])' we may use 'std::cout << static_cast<char>(a + d[a]);' to avoid the function call overhead.

Now, let's implement these changes:

```cpp
#include <iostream>
int main() {
  std::cin.tie(NULL);
  std::ios_base::sync_with_stdio(false);
  
  int n;
  for (char a, b; std::cin >> n, n; std::cout << "\n") {
    int d[256] = {};
    for (; n--; d[a] = b - a)
      std::cin >> a >> b;
    for (std::cin >> n; n--; std::cout << static_cast<char>(a + d[a]))
      std::cin >> a;
  }
}
```

Please note that these optimizations will not make a big difference in the running time, but they do make the code cleaner and more direct. The main running time is determined by the 'for' loops, which are necessary for the task that the program is doing.