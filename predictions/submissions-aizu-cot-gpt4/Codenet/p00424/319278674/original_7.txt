This code is quite cryptic due to the lack of meaningful variable names, usage of global variables, and other non-best-practices. However, the question asks for optimization, not readability improvements. 

Here are the steps to optimize this code:

1. The array 't' is over-provisioned. It is defined with 999 elements but it is used as a character array. We can define it as a char array of size 256 (the number of unique ASCII characters). This will save a lot of memory.

2. The bzero function is used to zero out the array 't'. This function is part of the POSIX library and is considered deprecated in favor of memset. We can replace it with memset, which is standard in C and likely more optimized in modern C libraries.

3. The scanf and putchar functions are called in a loop, which can be quite slow due to the overhead of function calls. We can optimize this by reading the input all at once and processing it in memory, and writing the output all at once as well.

Here is the optimized version of your code:

```c
#include <stdio.h>
#include <string.h>

int main() {
  int n;
  char t[256], i;
  
  while (scanf("%d", &n) == 1) {
    
    memset(t, 0, sizeof(t));  // zero out array
    
    while (n-- > 0) {
      scanf(" %c %c", &i, t);
      t[i] = *t;
    }
    
    scanf("%d", &n);  // read number of queries
    
    char queries[n + 1], results[n + 1];
    scanf("%s", queries);  // read all queries at once
    
    for (int j = 0; j < n; j++) {
      i = queries[j];
      results[j] = !t[i] * i + t[i];
    }
    
    results[n] = '\0';
    puts(results);  // print all results at once
  }
  
  return 0;
}
```
Please note that this code assumes that the input is well-formed and does not contain invalid characters. If this is not the case, additional error checking might be necessary.