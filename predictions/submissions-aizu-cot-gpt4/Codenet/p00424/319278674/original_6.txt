This program is a bit confusing due to its unconventional structure and usage of implicit types and uninitialized variables, which is not a recommended practice in modern C/C++ programming. However, let's try to optimize it step by step.

1. The first line declares n and an array t of size 999 without specifying their types. We can specify the type as int to make it clear.

2. The variable i is used as an argument to the main function without specifying its type. This is not standard C/C++. We can specify it as int in the function parameter.

3. In the first for loop, the condition clause is doing some heavy work, which is not recommended. We can split the scanf and multiplication operation into separate lines to make it clearer.

4. The function bzero is deprecated in favor of memset. We'll use memset instead.

5. The second scanf in the first for loop reads a character into an int variable i, which is incorrect. We need to read it into a char variable.

6. The second for loop also reads a character into an int variable i. We need to correct this as well.

7. The use of putchar function is a bit tricky. It seems like it's intending to print the ASCII character corresponding to the value of i when t[i] is not zero, and print nothing when t[i] is zero. We can make this clearer.

Here is the optimized version of the code:

```C++
#include <stdio.h>
#include <string.h>  

int n, t[999], i;
char c;

int main() {
  while (scanf("%d", &n) != EOF) {
    if (n == 0) break;
    memset(t, 0, sizeof t);
    for (; n--; t[i] = *t) {
      scanf(" %c %c", &c, (char*)t);
      i = c;
    }
    scanf("%d", &n);
    for (; n--; ) {
      scanf(" %c", &c);
      i = c;
      if (t[i] != 0) putchar(i);
    }
    puts("");
  }
  return 0;
}
```

Please note that this optimized version may still not work as expected due to the complexity and ambiguity of the original program. It's best to understand the original purpose of the program and rewrite it in a clearer and more standard way.