This program is inefficient and unclear in its current form. Here are some potential optimizations:

1. Change variable names: The variable names n, t[999], i are not very descriptive. Changing them to something more descriptive will make the code easier to understand and debug.

2. Avoid global variable: The variables n, t[999] are declared globally. It's a good practice to avoid global variables and instead pass them as arguments to functions where needed.

3. Use memset instead of bzero: The function bzero is deprecated and can be replaced with memset which is more standard.

4. Use size_t for array index: It's better to use size_t for array index and sizes as it's a standard unsigned integer type that is ideal for array indexing and loop counters. It can represent the size of any object in bytes.

5. Remove unnecessary multiplication: In the first loop, n is multiplied with the return value of scanf which is unnecessary. scanf returns the number of successfully read items. If the read fails, scanf returns EOF and this can be checked directly.

6. Improve readabilty: The code is quite hard to understand in its current form. Breaking down the code into smaller functions can improve readability and potentially improve performance.

7. Use consistent code style: The code style is inconsistent which makes the code hard to read. Using a consistent code style improves readability and maintainability.

Here is the optimized code:

```c
#include <stdio.h>
#include <string.h>

void process_input(size_t *n, char *t) {
  memset(t, 0, 999 * sizeof(char));
  char temp;
  
  for (size_t i = 0; i < *n; i++) {
    scanf(" %c", &temp);
    t[i] = temp == '\0' ? 0 : temp;
  }

  scanf("%zu", n);
}

void process_output(size_t n, char *t) {
  char temp;

  for (size_t i = 0; i < n; i++) {
    scanf(" %c", &temp);
    putchar(!t[temp] * temp + t[temp]);
  }
}

int main() {
  size_t n;
  char t[999];

  while (scanf("%zu", &n) != EOF) {
    process_input(&n, t);
    process_output(n, t);
  }

  return 0;
}
```

Note: This code assumes that the input format is correct. If the input format can be incorrect, error checking should be added.