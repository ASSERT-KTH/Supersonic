In this program, the optimization can be done in the following ways:

Step 1: Use of 'switch' statement instead of 'if' statement. 'switch' is generally faster when it comes to multiple conditions. In this case, the operator 'z' can have multiple values and hence, a 'switch' would be a better choice.

Step 2: Use of 'puts' instead of 'printf' for printing a single integer. 'puts' is faster than 'printf' as it doesn't need to parse the format string.

Step 3: Avoid division by zero. If 'y' is 0 and 'z' is '/', it will cause a division by zero error. We should check this before performing the division.

Step 4: Remove unnecessary 'return 0;' at the end. The 'while' loop will only end when the function returns, making the last 'return 0;' unreachable and unnecessary.

Here is the optimized program:

```cpp
#include <cstdio>
using namespace std;
int main() {
  int x, y;
  char z;
  char buffer[50];
  while (1) {
    scanf("%d %c %d", &x, &z, &y);
    switch (z) {
        case '?':
            return 0;
        case '+':
            sprintf(buffer, "%d", x + y);
            puts(buffer);
            break;
        case '-':
            sprintf(buffer, "%d", x - y);
            puts(buffer);
            break;
        case '/':
            if (y != 0) {
                sprintf(buffer, "%d", x / y);
                puts(buffer);
            }
            break;
        case '*':
            sprintf(buffer, "%d", x * y);
            puts(buffer);
            break;
    }
  }
}
```