The optimization techniques that we will employ for this program are:

1. **Switch-case instead of if-else:**
   Using switch-case is more efficient than if-else in this case because of branch prediction. In our case, there are several fixed options ('+', '-', '/', '*'), so switch-case will be more efficient.

2. **Removing the 'using namespace std':**
   In this case, we are not using any standard library functions where we need to reference the std namespace, so we can remove it to save memory.

3. **Return statement inside the loop:**
   We should avoid using return statements inside loops, it's not a good practice. We should use break instead and have only one return statement at the end of the function.

Here is the optimized program:

```cpp
#include <cstdio>

int main() {
  int x, y;
  char z;
  
  while (true) {
    scanf("%d %c %d", &x, &z, &y);
    switch(z) {
      case '?':
        break;
      case '+':
        printf("%d\n", x + y);
        break;
      case '-':
        printf("%d\n", x - y);
        break;
      case '/':
        printf("%d\n", x / y);
        break;
      case '*':
        printf("%d\n", x * y);
        break;
      default:
        break;
    }
    if (z == '?') {
      break;
    }
  }
  return 0;
}
```
This version of the code is more efficient in terms of running time and memory usage and also maintains the same functionality as the original code.