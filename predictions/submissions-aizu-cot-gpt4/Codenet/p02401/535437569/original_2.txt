Here are the steps to optimize the given program:

1. Using `iostream` instead of `cstdio`: Although using `cstdio` can be faster, it is generally safer and more familiar to most to use `iostream` in C++. This is not a necessary change and might not increase performance but will make the code more readable and C++-like.

2. Use a `switch` statement instead of `if-else`: A switch statement can provide a small speedup because it uses a jump table under the hood, allowing the code to directly jump to the appropriate case instead of checking each condition one by one.

3. Pre-declare the variables: By pre-declaring the variables `int result` and `char operator`, we can avoid allocating and deallocating memory for these variables on each loop iteration.

4. Check for division by zero: in the case where `z == '/'`, you should check if `y` is zero before trying to divide `x` by `y` to avoid a runtime error.

5. Remove the `return 0;` after the `while` loop: the `return 0;` statement after the `while` loop is unreachable and thus unnecessary.

Here's the optimized version of given code:

```cpp
#include <iostream>
using namespace std;

int main() {
  int x, y, result;
  char z;

  while (true) {
    cin >> x >> z >> y;

    switch(z) {
      case '?':
        return 0;
      case '+':
        result = x + y;
        break;
      case '-':
        result = x - y;
        break;
      case '/':
        if (y != 0) {
          result = x / y;
        } else {
          cout << "Error: Division by zero is not allowed." << endl;
          continue;
        }
        break;
      case '*':
        result = x * y;
        break;
      default:
        cout << "Invalid operator." << endl;
        continue;
    }

    cout << result << endl;
  }
}
```
In this optimized version, the code becomes more readable and safe, and a potential runtime error is avoided. The speedup from using a `switch` statement instead of an `if-else` chain might be small, but it helps to make the code cleaner and more organized.