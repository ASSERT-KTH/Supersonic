The given C/C++ program reads an expression from the user in the format "x operator y", where "x" and "y" are integers, and "operator" is one among '+', '-', '/', '*', or '?'. If operator is '+', '-', '/', or '*', it performs the corresponding operation and prints the result. If operator is '?', it terminates the program.

Optimization Steps:

Step 1: We can use 'switch' statement instead of multiple 'else if' cases. The 'switch' statement is generally more efficient than 'else if' when there are more than 2 conditions, because it uses a jump table internally.

Step 2: In the '/' operation, we can add a check to avoid division by zero error.

Step 3: We don't need to use 'std' namespace here as we are not using any standard C++ library functions or objects.

Given these steps, here is the optimized program:

```c++
#include <cstdio>

int main() {
  int x, y;
  char z;

  while (1) {
    scanf("%d %c %d", &x, &z, &y);

    if (z == '?') {
      return 0;
    }

    switch (z) {
      case '+':
        printf("%d\n", x + y);
        break;
      case '-':
        printf("%d\n", x - y);
        break;
      case '/':
        if (y != 0) {
          printf("%d\n", x / y);
        }
        break;
      case '*':
        printf("%d\n", x * y);
        break;
    }
  }

  return 0;
}
```

This optimized program has a reduced running time because of the use of 'switch' instead of 'else if', and it also avoids a potential division by zero error. The memory usage remains the same because no additional variables or data structures are used.