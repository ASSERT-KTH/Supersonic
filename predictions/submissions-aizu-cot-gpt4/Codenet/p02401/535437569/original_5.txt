First, let's analyze the given code:

1. It reads input from the standard input until a '?' character is read. 

2. Each input consists of two integers and an operator between them. 

3. The program then performs the operation specified by the operator and prints the result. 

4. If the operator is '/', the program doesn't check if the divisor is zero, which can lead to a runtime error. 

Optimization steps:

1. Since we are continuously using printf and scanf functions, it would be better to use ios_base::sync_with_stdio(false) to turn off synchronization with the C library's standard streams. This can speed up I/O.

2. In the while loop, instead of checking the operator against each operator separately, we can use a switch statement. Switch statements are generally faster than if-else statements when there are more than two conditions because the compiler can optimize switch statements by building a jump table, which allows it to jump directly to the code for the matching case, rather than checking each condition in turn.

3. We should add a check for division by zero to avoid a potential runtime error.

4. As a good practice, use return EXIT_SUCCESS instead of return 0 in the main function. Although they are technically the same, EXIT_SUCCESS better conveys the intention.

The optimized code:

```cpp
#include <cstdio>
#include <cstdlib>

int main() {
    std::ios_base::sync_with_stdio(false);
    int x, y;
    char z;
    while (1) {
        scanf("%d %c %d", &x, &z, &y);
        if (z == '?') {
            return EXIT_SUCCESS;
        }
        switch (z) {
            case '+':
                printf("%d\n", x + y);
                break;
            case '-':
                printf("%d\n", x - y);
                break;
            case '/':
                if (y != 0) {
                    printf("%d\n", x / y);
                } else {
                    printf("Error: Division by zero\n");
                }
                break;
            case '*':
                printf("%d\n", x * y);
                break;
            default:
                printf("Error: Unknown operator\n");
        }
    }
}
```
Please note that while the switch statement might be faster in some cases, modern compilers are very good at optimizing code, and the difference in performance might be negligible. The main benefit of the switch statement in this case is that the code becomes cleaner and easier to read.