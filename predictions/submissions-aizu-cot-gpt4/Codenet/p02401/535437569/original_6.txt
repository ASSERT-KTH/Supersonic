Optimization Steps:

1. The "while(1)" loop always checks for the condition to be true, which adds an extra operation for each iteration. We can replace it with a "for(;;)" loop which does not have any condition to check and thus saves CPU cycles.

2. The if-else conditions are checked sequentially and even if the first condition is met, it will check all the others. We can replace it with a switch-case which will directly jump to the corresponding case and thus reduce the number of comparisons.

3. The division operation is susceptible to divide by zero error. We should check if y is zero before division.

Optimized Code:

```cpp
#include <cstdio>
using namespace std;
int main() {
  int x, y;
  char z;
  for(;;) {
    scanf("%d %c %d", &x, &z, &y);
    switch (z) {
      case '?':
        return 0;
      case '+':
        printf("%d\n", x + y);
        break;
      case '-':
        printf("%d\n", x - y);
        break;
      case '/':
        if (y != 0) {
          printf("%d\n", x / y);
        } else {
          printf("Error: Division by zero\n");
        }
        break;
      case '*':
        printf("%d\n", x * y);
        break;
    }
  }
  return 0;
}
```
For the sake of completeness, it is important to note that the original code, as well as the optimized one, are not handling possible errors during the execution of the `scanf` function. It's always a good practice to check the return value of this function to confirm that the expected number of input items were successfully assigned.