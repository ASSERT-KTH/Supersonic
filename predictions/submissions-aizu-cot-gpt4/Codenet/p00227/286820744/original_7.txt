The given C++ program can be optimized in the following ways:

1. Reserve Memory for Vector: When we use push_back operation in vector, it might have to reallocate memory and copy the elements to the new location. To prevent this, we can reserve memory in advance if we know the size beforehand.

2. Avoid using at() function: vegetables.at(i) function does a range check before accessing the element. As we are sure that 'i' will never go out of range, we can use the [] operator instead which does not do the range check and is faster.

3. Use prefix increment: Prefix increment (++i) is faster than postfix (i++) as postfix creates a copy.

4. Avoid Multiple Accesses: We are accessing the vector 'vegetables' multiple times in the loop. This can be avoided by taking the value in a variable and using that.

5. Use std::ios_base::sync_with_stdio(false): This can speed up I/O operations as it avoids unnecessary synchronization between C and C++ streams.

Let's apply these optimizations to the code:

```c++
#include <algorithm>
#include <iostream>
#include <vector>

int main() {
  std::ios_base::sync_with_stdio(false);
  int num, cap, price;
  while (std::cin >> num >> cap) {
    if (num == 0 && cap == 0) {
      break;
    }
    std::vector<int> vegetables;
    vegetables.reserve(num);
    for (int i = 0; i < num; ++i) {
      std::cin >> price;
      vegetables.push_back(price);
    }
    sort(vegetables.begin(), vegetables.end(), std::greater<int>());
    int sum = 0;
    for (int i = 0; i < num; ++i) {
      if ((i + 1) % cap != 0) {
        sum += vegetables[i];
      }
    }
    std::cout << sum << std::endl;
  }
}
```
Please note that in some cases, the impact of these optimizations might be minimal and depends on the specific program and the system it's running on.