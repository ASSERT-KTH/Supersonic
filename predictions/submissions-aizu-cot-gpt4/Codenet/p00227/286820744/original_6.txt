Here are the optimization steps:

1. Reserve vector size: It is better to allocate memory for vector at once when we know the size (num). This will reduce the vector resizing operation and hence improve memory usage.
2. Use operator[] instead of at(): The method vector::at() does boundary check and it's slower than operator[]. Since we control the iteration, we can make sure it never exceeds the boundary.
3. Use prefix increment (++i) instead of postfix (i++): The prefix increment is faster because it doesn't require a temporary object to hold the intermediate result unlike the postfix increment.
4. Use for loop instead of while loop: We can simplify the loop logic by using a for loop and an if condition to check for the index we should skip.

Here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
int main() {
  int num, cap, price;
  while (std::cin >> num >> cap) {
    if (num == 0 && cap == 0) {
      break;
    }
    std::vector<int> vegetables(num);
    for (int i = 0; i < num; ++i) {
      std::cin >> price;
      vegetables[i] = price;
    }
    sort(vegetables.begin(), vegetables.end(), std::greater<int>());
    int sum = 0;
    for (int i = 0; i < num; ++i) {
      if (i % cap != (cap - 1)) {
        sum += vegetables[i];
      }
    }
    std::cout << sum << std::endl;
  }
}
```
Please note that there is no performance difference between prefix and postfix increment for primitive types in C++. The difference only occurs for user-defined types (like iterators or complex classes) where the compiler can't optimize the temporary copy away. But it's a good habit to use prefix increment when the result of the operation is not used.