Here are some optimization steps for your code:

1) Reserve memory for vector: The std::vector dynamically reallocates memory when you push back new elements and it runs out of space. This can be time consuming. If you know in advance how many elements you will add (which is the case here), you can avoid this by using the reserve function.

2) Access elements directly: Using the at() function to access elements in a vector is slower than using the [] operator because at() checks if the index is within the bounds of the array. Since we are sure that we are not going to access an index out of bounds, we can safely use the [] operator.

3) Remove unnecessary condition check: The condition 'if ((i + 1) % cap != 0)' is checked for each element in the vector. We can avoid this by simply incrementing 'i' by 'cap' each time after adding the (cap - 1) numbers to the sum.

4) Use std::ios::sync_with_stdio(false): This can be used to decouple C and C++ standard streams, which can potentially speed up input/output operations.

Here is your optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>

int main() {
  std::ios::sync_with_stdio(false);
  int num, cap, price;
  while (std::cin >> num >> cap) {
    if (num == 0 && cap == 0) {
      break;
    }
    std::vector<int> vegetables(num);
    for (int i = 0; i < num; ++i) {
      std::cin >> price;
      vegetables[i] = price;
    }
    sort(vegetables.rbegin(), vegetables.rend());
    int sum = 0;
    for (int i = 0; i < num; i += cap) {
      for (int j = i; j < std::min(i+cap-1, num); ++j) {
        sum += vegetables[j];
      }
    }
    std::cout << sum << std::endl;
  }
}
```