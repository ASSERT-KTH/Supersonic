Step by Step Optimization:

1. Replacing Multiplication Operation with Bitwise Shifts: In many systems, bitwise operations are faster than multiplications. In the given program, we are calculating the cube of a number (x * x * x). This can be replaced by left shifting the bits of number twice (x << 2). However, note that this optimization is highly system-dependent and may not always result in significant improvements.

Note: This optimization is not suitable for this context as it is incorrect to equate cubic calculation and bit-shift operation. The correct optimization would be to store the result of 'x * x' in a variable and use it for further multiplication to save processing time.

2. Reducing Memory Usage: It is not necessary to store the cube of the number in a variable before printing it. We can directly print the result thus saving memory.

Here is the optimized code:

```c
#include <stdio.h>

int main(void) {
  int x;
  scanf("%d", &x);
  int x_square = x * x;
  printf("%d\n", x_square * x);
  return 0;
}
```

Please note that these optimizations are negligible for such a small and simple program, but they would be beneficial if the program were part of a larger system or if it was run frequently.