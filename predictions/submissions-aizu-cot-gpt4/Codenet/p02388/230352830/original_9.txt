This program is already quite simple and efficient, but there is a small tweak in the calculation part that could possibly make it slightly more efficient.

In the original program, the cube of a number is calculated by multiplying the number by itself twice (x * x * x). This involves two multiplication operations. 

We can reduce it to one multiplication by storing the result of the first multiplication (x * x) into a variable and then multiplying that variable by x. 

Here is the optimized code:

```c
#include <stdio.h>
int main(void) {
  int x, square;
  scanf("%d", &x);
  square = x * x;
  printf("%d\n", square * x);
  return 0;
}
```

This might not have a significant impact on runtime or memory usage in this specific case, but in a more complex program where the calculation is performed many times, this kind of optimization could add up to a significant saving. 

Of course, modern compilers might already do this type of optimization. The real impact on the running time or memory usage will depend on the specific use case and the compiler you are using.