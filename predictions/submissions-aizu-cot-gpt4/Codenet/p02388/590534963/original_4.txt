There isn't much to optimize in terms of memory usage and running time in this code because it's a simple program that does not involve any memory-hungry data structures or time-consuming operations. 

However, one minor optimization we can make is to avoid the multiplication operator, which is slower than the shift operator. We can replace "n * n * n" with "n << 1 * n" if n is a power of 2. However, in this case, since n can be any integer, this optimization is not applicable. 

Another optimization we can make is to store the result of "n * n * n" in a variable before we print it out. This way, if we need to use the result elsewhere in the code, we don't have to compute it again. This could save us some CPU cycles. Furthermore, this makes our code more maintainable and easier to understand.

Here's the optimized code:

```
#include <iostream>
using namespace std;
int main() {
  int n;
  cin >> n;
  int result = n * n * n;
  cout << result << endl;
  return 0;
}
```
