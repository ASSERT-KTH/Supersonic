Step 1: 
Firstly, storing the cube of the number directly into a variable and then printing the variable could be slightly faster than calculating the cube and printing it directly, because the printing function will not have to wait for the multiplication operation to complete.

Step 2: 
Secondly, we can avoid the use of `endl`. `endl` is used to insert a new line and it also flushes the stream. But in this case, we don't need to flush the stream, a simple new line('\n') will work. Flushing the stream unnecessarily can decrease the performance of the code.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
int main() {
  int n;
  cin >> n;
  int result = n * n * n;
  cout << result << '\n';
  return 0;
}
```
The difference in performance between the original and optimized code is negligible for this specific example, but the principles applied here can be helpful for larger, more complex programs.