The given program is pretty efficient and straightforward. It reads an integer 'n' from standard input, computes 'n' cubed, and outputs the result.

However, there is a small optimization that can be made. The calculation `n * n * n` can be costly, especially if 'n' is a really large number. Since multiplication is associative, it doesn't matter in which order we perform the calculation, so we can store the result of `n * n` in a variable and then multiply that by 'n'.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;
int main() {
  int n;
  cin >> n;
  int n_squared = n * n; // Store the result of n * n
  cout << n_squared * n << endl; // Multiply the result by n
  return 0;
}
```

But, in reality, modern compilers are very efficient and they optimize this kind of operations under the hood. So, both versions of the code will be optimized to the same machine code by a modern compiler.