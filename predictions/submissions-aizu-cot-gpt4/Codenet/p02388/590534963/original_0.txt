The given program is already efficient. This program reads an integer from standard input and outputs the cube of that number. However, there is a small optimization that can be made. 

Currently, the program is doing the cube operation as `n * n * n`. We can reduce the number of multiplications by storing the result of `n * n` in a variable and then multiplying it by n.

Optimized Code:

```cpp
#include <iostream>
using namespace std;

int main() {
  int n;
  cin >> n;
  int square = n * n;  // store the square of n
  cout << square * n << endl;  // multiply the square by n to get the cube
  return 0;
}
```

But, keep in mind these are micro-optimizations and modern compilers are already capable of performing such optimizations on their own. Hence, you may not see a significant difference in the performance of the initial and optimized code.