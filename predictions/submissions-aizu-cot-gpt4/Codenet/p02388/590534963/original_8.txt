This program is already quite efficient, but there is one small optimization that can be made in terms of computation.

In the original program, the cube of a number n is calculated by performing two multiplication operations (n * n * n).

This calculation can be performed slightly faster by first calculating the square of n (n * n), storing that in a variable, and then multiplying the result by n.

Here's the step-by-step optimization:

1. Initialize an integer variable, say `square`, and store the value of `n * n` in it.
2. Then, calculate the cube by multiplying `square` by `n`.

This way, we still calculate the cube of `n` but potentially a bit faster as the multiplication operation is now performed one less time.

Here's the optimized program:

```c++
#include <iostream>
using namespace std;
int main() {
  int n;
  cin >> n;
  int square = n * n;
  cout << square * n << endl;
  return 0;
}
```

Do note that the gains from this optimization are minimal, and might even be nonexistent due to compiler optimizations. Modern compilers are usually smart enough to optimize such calculations on their own. In fact, the original program might even be faster due to some compilers recognizing the pattern and optimizing it better than the manual optimization. Therefore, it's always a good idea to profile your program before and after the optimization to ensure it's actually faster.