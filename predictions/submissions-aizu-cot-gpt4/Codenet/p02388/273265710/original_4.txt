The optimization in the given program can be achieved in the following ways:

1. Inline Function: Since `cubedNum` is a small function, we can declare it as an inline function. This would eliminate the overhead of a function call.

2. Efficient Power Calculation: Instead of using a loop to calculate the cube of a number, we can directly multiply the number three times. This will reduce the time complexity.

3. Input validation: Use cin.fail() to validate input rather than loop indefinitely.

4. Code Readability: Although not a direct optimization, improving code readability can help in better understanding and further optimization of the code. Using more meaningful variable names can achieve this.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
inline void cubedNum() {
  int inputNum;
  while (true) {
    cin >> inputNum;
    if (cin.fail()) {
      cin.clear();
      cin.ignore(numeric_limits<streamsize>::max(), '\n');
      continue;
    }
    if ((0 <= inputNum) && (inputNum <= 100)) {
      break;
    }
  }
  int result = inputNum * inputNum * inputNum;
  cout << result << endl;
}
int main() {
  cubedNum();
  return 0;
}
```
Please note that optimization also depends on the compiler and hardware. For some compilers and hardware, the original code might be faster.