First, I will explain the optimization step by step:

1. We can remove the `void` parameter in the function declaration and definition as it's not required in C++. It just adds unnecessary clutter to the code.

2. The `while (1)` loop is used to get a valid input between 0 and 100 from the user. However, it's better to use a `do-while` loop as it's more suitable for this purpose and makes the code more readable.

3. The `for` loop is used to calculate the cube of the input number. However, we can directly use `inputNum * inputNum * inputNum` to calculate the cube. This will make the code simpler and more efficient because it avoids the unnecessary overhead of a loop.

4. We don't need the `return;` statement at the end of the `cubedNum()` function. In C++, reaching the end of a void function is equivalent to a return statement.

Here is the optimized program:
```cpp
#include <iostream>
using namespace std;

void cubedNum() {
    int inputNum;
    do {
        cin >> inputNum;
    } while (inputNum < 0 || inputNum > 100);
    
    int result = inputNum * inputNum * inputNum;
    cout << result << endl;
}

int main() {
    cubedNum();
    return 0;
}
```
This optimized version of the program is simpler, more readable, and more efficient than the original version.