This C++ program reads an integer input from the user, cubes it and prints the result. The optimizations I would suggest are:

1. There's no need to initialize `inputNum` with `-1` because it's immediately overwritten by the user's input.
2. The `result` variable can be initialized with `inputNum` itself instead of `1` to avoid one multiplication operation.
3. The `while(1)` loop is not efficient. It's better to use a `do-while` loop for input validation as it guarantees execution at least once.
4. The `for` loop for calculating the cube can be replaced by direct multiplication to reduce the time complexity from O(n) to O(1).
5. The `void` in the function and main declaration is unnecessary in C++.
6. `using namespace std;` is generally not recommended as it can lead to name collisions. Use `std::` before `cin`, `cout` and `endl` instead.

Here is the optimized code following these steps:

```cpp
#include <iostream>

void cubedNum() {
  int inputNum, result;
  
  do {
    std::cin >> inputNum;
  } while (inputNum < 0 || inputNum > 100);
  
  result = inputNum * inputNum * inputNum;
  
  std::cout << result << std::endl;
}

int main() {
  cubedNum();
  return 0;
}
```
This optimized version of the program reduces unnecessary operations and uses more efficient ways to do input validation and cube calculation, improving both running time and memory usage.