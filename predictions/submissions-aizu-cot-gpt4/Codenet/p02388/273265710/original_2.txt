The given C++ program calculates the cube of a user-input number between 0 and 100. The cube of a number is calculated by multiplying the number three times with itself. However, there are few areas where we could optimize this program:

1. Instead of using the for loop to multiply the input number three times, we could directly multiply the number with itself twice to get the cube. This will reduce the time complexity of the program.

2. The function `cubedNum` doesn't require any arguments and doesn't return anything. It's better if we modify it to accept an argument and return the result. This will make the function more reusable. 

3. The while loop in the function `cubedNum` is used to validate the input. However, it is better to validate it in the `main` function and then pass the validated number to the `cubedNum` function.

Here is the optimized version of your program:

```cpp
#include <iostream>
using namespace std;

int cubedNum(int inputNum) {
  return inputNum * inputNum * inputNum;
}

int main(void) {
  int inputNum = -1;
  
  while (true) {
    cin >> inputNum;
    if ((0 <= inputNum) && (inputNum <= 100)) {
      break;
    }
  }
  
  int result = cubedNum(inputNum);
  cout << result << endl;
  
  return 0;
}
```

In this optimized version, the function `cubedNum` is now more flexible because it returns the result and takes an argument. This means it can be used elsewhere in the program or even in other programs. Also, by moving the input validation to the `main` function, the `cubedNum` function now only does one job, which makes the code cleaner and easier to maintain.