The main problem with the original code is that it uses a for loop to compute the cube of a number, which is inefficient. Instead, we can use the pow() function from the cmath library, which is more efficient and easier to understand. 

The pow function raises its first argument to the power of its second argument, so we can use it to calculate the cube of a number in a single line of code. 

The optimized code is as follows:

```cpp
#include <iostream>
#include <cmath>
using namespace std;

void cubedNum() {
  int inputNum = -1;
  while (1) {
    cin >> inputNum;
    if ((0 <= inputNum) && (inputNum <= 100)) {
      break;
    }
  }
  
  int result = pow(inputNum, 3); // Use pow() function instead of a loop
  cout << result << endl;
  return;
}

int main() {
  cubedNum();
  return 0;
}
```

This optimized code uses less memory (since we're not storing an extra variable i), and it should also run faster (since we're not running a loop).