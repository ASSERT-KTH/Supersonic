Firstly, the `bits/stdc++.h` header is generally not a good practice to use in C++ programs because it includes a lot of unnecessary headers, slowing down the compile time. It's better to include only headers that are necessary for your program.

Secondly, in the `SegmentTree` struct, you are assigning 0 to the `seg` and `add` vectors in the constructor, which is unnecessary because `std::vector` automatically initializes its elements to 0.

Also, the `(l + r) / 2` operation is used twice in each `Add` and `Query` method. This operation can be calculated once and stored in a variable to be reused, reducing the number of operations.

Finally, for your `main` function, `scanf` and `printf` are usually faster than `cin` and `cout` in C++. You already used `scanf` but `cout` is used in the end. To optimize the code further, you should use `printf` instead of `cout`.

Here is your optimized C++ program:

```c++
#include <vector>
#include <cstdio>
#include <algorithm>
using namespace std;
struct SegmentTree {
  vector<int> seg, add;
  int sz;
  SegmentTree(int n) {
    sz = 1;
    while (sz < n)
      sz *= 2;
    seg.resize(sz * 2 + 1);
    add.resize(sz * 2 + 1);
  }
  void Add(int a, int b, int x, int k, int l, int r) {
    if (a >= r || b <= l) {
      return;
    } else if (a <= l && r <= b) {
      add[k] += x;
    } else {
      int mid = (l + r) / 2;
      Add(a, b, x, 2 * k + 1, l, mid);
      Add(a, b, x, 2 * k + 2, mid, r);
      seg[k] = seg[2 * k + 1] + add[2 * k + 1] + seg[2 * k + 2] + add[2 * k + 2];
    }
  }
  int Query(int a, int b, int k, int l, int r) {
    if (a >= r || b <= l)
      return (0);
    if (a <= l && r <= b)
      return (seg[k] + add[k]);
    int mid = (l + r) / 2;
    return (Query(a, b, 2 * k + 1, l, mid) +
            Query(a, b, 2 * k + 2, mid, r) + add[k]);
  }
  void Add(int a, int b, int x) { Add(a, b, x, 0, 0, sz); }
  int Query(int a, int b) { return (Query(a, b, 0, 0, sz)); }
};
int main() {
  int N, M, P[100000];
  scanf("%d %d", &N, &M);
  SegmentTree segtree(N);
  for (int i = 0; i < M; i++) {
    scanf("%d", &P[i]);
    --P[i];
  }
  for (int i = 1; i < M; i++) {
    int u = min(P[i - 1], P[i]), v = max(P[i - 1], P[i]);
    segtree.Add(u, v, 1);
  }
  long long ret = 0;
  for (int i = 0; i < N - 1; i++) {
    long long used = segtree.Query(i, i + 1);
    int A, B, C;
    scanf("%d %d %d", &A, &B, &C);
    ret += min(used * A, C + used * B);
  }
  printf("%lld\n", ret);
}
```