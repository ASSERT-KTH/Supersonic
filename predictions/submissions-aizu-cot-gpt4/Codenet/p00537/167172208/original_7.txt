The given code is already quite optimized and there are only a few areas where it can be improved. The program is a Segment Tree data structure, where each node stores the sum of a range of the input array. The Segment Tree is a binary tree, and it is used for getting the sum of a range in an array, and for updating the values of a range in O(log n) time. Here are some minor improvements that can be made to further optimize the code:

1. Change the `#include <bits/stdc++.h>` to include only the libraries that are used in the program. This will reduce the compilation time.

2. Use `ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);` to speed up the I/O operations.

3. Instead of using `scanf`, use `cin` for input and `cout` for output.

4. The `min` function in the main function can be replaced with a ternary operator, which is slightly faster.

Here is the optimized code:

```c++
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct SegmentTree {
    vector<int> seg, add;
    int sz;
    SegmentTree(int n) {
        sz = 1;
        while (sz < n) sz *= 2;
        seg.assign(sz * 2 + 1, 0), add.assign(sz * 2 + 1, 0);
    }
    void Add(int a, int b, int x, int k, int l, int r) {
        if (a >= r || b <= l) return;
        else if (a <= l && r <= b) add[k] += x;
        else {
            Add(a, b, x, 2 * k + 1, l, (l + r) / 2);
            Add(a, b, x, 2 * k + 2, (l + r) / 2, r);
            seg[k] = seg[2 * k + 1] + add[2 * k + 1] + seg[2 * k + 2] + add[2 * k + 2];
        }
    }
    int Query(int a, int b, int k, int l, int r) {
        if (a >= r || b <= l) return 0;
        if (a <= l && r <= b) return seg[k] + add[k];
        return Query(a, b, 2 * k + 1, l, (l + r) / 2) + Query(a, b, 2 * k + 2, (l + r) / 2, r) + add[k];
    }
    void Add(int a, int b, int x) { Add(a, b, x, 0, 0, sz); }
    int Query(int a, int b) { return Query(a, b, 0, 0, sz); }
};

int main() {
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    int N, M, P[100000];
    cin >> N >> M;
    SegmentTree segtree(N);
    for (int i = 0; i < M; i++) {
        cin >> P[i];
        --P[i];
    }
    for (int i = 1; i < M; i++) {
        int u = P[i - 1] < P[i] ? P[i - 1] : P[i], v = P[i - 1] > P[i] ? P[i - 1] : P[i];
        segtree.Add(u, v, 1);
    }
    long long ret = 0;
    for (int i = 0; i < N - 1; i++) {
        long long used = segtree.Query(i, i + 1);
        int A, B, C;
        cin >> A >> B >> C;
        ret += min(used * A, C + used * B);
    }
    cout << ret << endl;
}
```
Please note that the optimized code will have a noticeable impact on large inputs. For small inputs, the difference will be negligible.
