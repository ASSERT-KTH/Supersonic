This program reads a string and a number 'm' from the standard input. Then it reads 'm' numbers, sums them up as 't', and shifts each character of the string 't' positions to the right. If the string is 'abcde' and 't' is 3, the output will be 'deabc'.

Here are the optimizations:

1. The 'strlen()' function in the loop can be replaced with a variable that stores the length of the string. This will reduce the number of function calls.
2. The 'printf()' function inside the loop can be replaced with putchar() since we are only printing one character at a time. 'putchar()' is faster than 'printf()'.
3. 'scanf()' is used twice. We can reduce this to one 'scanf()' call before the loops, and increment 'h' and 't' inside the first loop.
4. The global variables 'i', 'm', 'h', 't', and 'a' can be defined inside the 'main()' function to reduce the scope and improve readability.

Here is the optimized program:

```c
#include <string.h>

int main() {
  char s[201];
  int i, m, h, t, a;

  while (scanf("%s%d", s, &m), s[0] != '-') {
    a = strlen(s);
    for (i = t = 0; i < m; i++) {
      scanf("%d", &h);
      t += h;
    }
    for (i = 0; i < a; i++)
      putchar(s[(t + i) % a]);
    putchar('\n');
  }

  return 0;
}
```

Please note that the program will behave incorrectly if 't' is negative or larger than the length of the string. It will also fail to handle any input errors. These issues are not addressed in the optimized code, as the task was to optimize for running time and memory usage, not to modify the program's functionality.