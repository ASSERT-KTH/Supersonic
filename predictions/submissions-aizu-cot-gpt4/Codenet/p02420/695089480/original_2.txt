This program reads a string and a number, then it reads "number" amount of shifts and applies them to the string. The optimization can be made in the following ways:

1. Use `ios_base::sync_with_stdio(false);` at the start of the main function which unties C++ standard streams from their corresponding C streams to reduce time taken by I/O operations.
2. Use `std::cin.tie(NULL);` to untie cin from cout to reduce time taken by I/O operations.
3. `std::cin` and `std::cout` can be used instead of `scanf` and `printf` for better type safety and they are more C++ styled.
4. Use `std::vector<int>` to store the shifts so that cumulative shift can be calculated in one pass.
5. Use `%=` operator to reduce the shift to the range of the string length, which will reduce the calculation in the printing loop.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    char s[201];
    int m, h, t;
    while (std::cin >> s >> m && s[0] != '-') {
        int a = strlen(s);
        std::vector<int> shifts(m);
        for (int i = 0; i < m; ++i) {
          std::cin >> h;
          t += h;
        }
        t %= a;
        for (int i = 0; i < a; ++i)
            std::cout << s[(t + i) % a];
        std::cout << '\n';
    }
    return 0;
}
```

This program should run faster and use less memory than the original program.