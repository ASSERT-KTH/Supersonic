This program reads strings and rotates them based on the input. For each test case, it reads a string and a number m, which represents the number of rotations. Then it reads m numbers, each representing a rotation. The program then prints the rotated string. The program reads test cases until it encounters a string "-".

1. Avoid Global Variables: Global variables can make the code harder to understand and maintain, and they can potentially lead to bugs due to unexpected side effects. In this program, we can move the variables `i`, `m`, `h`, `t`, and `a` into the `main` function.

2. Reuse Variables: The program uses separate variables for the same purpose. For example, `i` is used as a loop counter in two different loops. We can reuse it to save memory.

3. Use `puts` function to print new line: Instead of `puts("")`, we can use `putchar('\n')` to print a new line. This is more efficient because it directly prints a new line character, without having to create and process a string.

4. Optimize the rotation: The program currently calculates the total rotation by summing up all the rotations. However, since the rotation is cyclic, we can use modular arithmetic to only keep the rotation within the length of the string. This can reduce unnecessary computation.

Here is the optimized program:

```c
#include <string.h>

int main() {
  char s[201];
  int m, h, t, a;
  
  while (scanf("%s%d", s, &m), s[0] != '-') {
    a = strlen(s);
    t = 0;
    
    for (int i = 0; i < m; i++) {
      scanf("%d", &h);
      t = (t + h) % a;  // Optimize rotation calculation
    }
  
    for (int i = 0; i < a; i++) {
      printf("%c", s[(t + i) % a]);
    }
  
    putchar('\n');  // Print new line more efficiently
  }

  return 0;
}
```

Note: I assume that the original code behaves correctly and that changing the behavior is not part of the optimization. If there are bugs in the original code, more modifications may be necessary.