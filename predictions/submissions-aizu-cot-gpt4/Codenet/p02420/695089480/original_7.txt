The given C program reads a string and a number, rotates the string by positions given in the following numbers, and then prints the rotated string.

There are several optimizations that can be made:

1. The first optimization is to use `std::string` instead of `char[]`. This is because `std::string` is safer, more efficient, and provides more functionality. It also automatically manages memory, which can help prevent memory leaks.

2. The second optimization is to replace `scanf` and `printf` with `std::cin` and `std::cout`. This is because these are more C++-like and can be faster.

3. The third optimization is to use `std::getline` to read the string. This avoids the need to check for the end of string character '-'.

4. The fourth optimization is to use `std::rotate` from the STL to handle the rotation. This is a much more efficient and cleaner way to handle the rotation.

5. The fifth optimization is to declare variables where they are needed, not at the top of the function. This makes the code cleaner and easier to understand.

Optimized Program:

```c++
#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string s;
    int m, h, t = 0;
    while (std::getline(std::cin, s) && s[0] != '-') {
        std::cin >> m;
        for (int i = 0; i < m; i++) {
            std::cin >> h;
            t += h;
            std::rotate(s.begin(), s.begin() + t, s.end());
        }
        std::cout << s << std::endl;
    }
    return 0;
}
```

Please note that the original program is written in pure C, while the optimized program is in C++, which provides more functionalities and better safety features.