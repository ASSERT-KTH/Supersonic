This program seems to be a simple character rotation application. It reads a string and a number of rotations from the input, performs the rotations and prints the rotated string until it encounters a string starting with "-".

Here are some optimization steps:

1. The function strlen() is being called once for each string. However, its result is not changing during the execution of the loop, so it can be calculated once and stored in a variable. This will eliminate unnecessary function calls.

2. Instead of using printf to print a single character, we can use putchar. Putchar is faster because it doesn't have to parse a format string.

3. The variables i, m, h, t, a are declared globally which makes it harder to understand their use and can lead to bugs and hard to maintain code. It's better to declare them in the smallest scope where they are needed.

4. The sum of rotations t is calculated using modulo operation for each character in the string. This is unnecessary, we can calculate the effective rotation once before entering the loop.

Here is the optimized version of the code:

```
#include <string.h>

int main() {
  char s[201];
  while (scanf("%s", s) && s[0] != '-') {
    int rotations, totalRotations = 0, len = strlen(s);
    scanf("%d", &rotations);

    for (int i = 0; i < rotations; i++) {
      int rotation;
      scanf("%d", &rotation);
      totalRotations += rotation;
    }

    totalRotations %= len; // effective rotation

    for (int i = 0; i < len; i++) {
      putchar(s[(totalRotations + i) % len]);
    }
    putchar('\n');
  }
  return 0;
}
```
Let me explain the changes:

- I moved the variables i, m, h, t, a inside the main function and renamed them to more meaningful names.
- I moved the calculation of the string length outside of the for loop.
- I replaced the printf function with the putchar function.
- I moved the calculation of the total rotations outside the second for loop.
- I added a return statement to the main function to make it clear that the program ends correctly.