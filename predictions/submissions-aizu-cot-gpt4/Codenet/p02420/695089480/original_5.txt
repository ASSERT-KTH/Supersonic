This program reads a series of strings and numbers from the standard input, performs some calculations, and prints out characters from the strings based on the results of the calculations. Here are some optimizations that can be done:

1. The `strlen()` function is called once for every string. This function runs in O(n) time, where n is the length of the string. Since the length of the string doesn't change, we can call `strlen()` just once and store the result, which we can then reuse. This will save time.

2. The `printf()` function is called once for every character in the string. This function is relatively expensive in terms of time because it has to convert the arguments to a format suitable for output. We can save time by calling `printf()` just once for the entire string, rather than once for each character.

3. The variable `t` is incremented by `h` in every iteration of the first inner loop. But `h` is not used anywhere else in the program. We can save memory by getting rid of `h` and incrementing `t` directly.

Here is the optimized version of the program:

```c
#include <string.h>
i, m, t, a;
main() {
  char s[201];
  char output[201];
  for (; scanf("%s%d", s, &m), s[0] != '-'; puts("")) {
    a = strlen(s);
    for (i = t = 0; i < m; i++)
      scanf("%d", &t);
    for (i = 0; i < a; i++)
      output[i] = s[(t + i) % a];
    output[i] = '\0';
    printf("%s\n", output);
  }
}
```
In this optimized version, `strlen()` is called just once for each string, `printf()` is called just once for each string, and the variable `h` has been eliminated. Therefore, this version should run faster and use less memory than the original version.