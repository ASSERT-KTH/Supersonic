The given program is already fairly optimized. However, some small changes could be made to make it a bit more efficient:

1. Move the declaration of the variables `sy` and `sx` inside the loop. This reduces the scope of the variables and may help in memory optimization.

2. Use `++cnt` instead of `cnt++`. Pre-increment (++cnt) is faster than post-increment (cnt++) because post-increment tends to create a copy of the object incremented and returns the un-incremented version. Though modern compilers can optimize this, it's a good practice to use pre-increment where possible.

3. Instead of checking `mp[i][j]` in every iteration of the loop, store its value in a variable and use that variable. This reduces the number of times we access the memory, thus optimizing the code.

Here is the optimized version of the code:

```cpp
#include <cstdio>
using namespace std;
#define rep(i, x) for (int i = 0; i < (int)(x); ++i)
int dx[] = {-1, 1, 0, 0}, dy[] = {0, 0, -1, 1};
char mp[20][22];
int H, W;
void dfs(int y, int x) {
  if (y < 0 || y >= H || x < 0 || x >= W || mp[y][x] == '#' || mp[y][x] == ' ')
    return;
  mp[y][x] = ' ';
  rep(i, 4) dfs(y + dy[i], x + dx[i]);
}
int main() {
  while (scanf("%d %d", &W, &H), H || W) {
    rep(i, H) rep(j, W) {
      scanf("\n%c", &mp[i][j]);
      if (mp[i][j] == '@') {
        int sy = i, sx = j;
        mp[i][j] = '.';
        dfs(sy, sx);
      }
    }
    int cnt = 0;
    rep(i, H) rep(j, W) {
      char cell = mp[i][j];
      if (cell == ' ') ++cnt;
    }
    printf("%d\n", cnt);
  }
}
```
This version of the code is slightly more efficient. However, the differences would likely only be noticeable for very large inputs.