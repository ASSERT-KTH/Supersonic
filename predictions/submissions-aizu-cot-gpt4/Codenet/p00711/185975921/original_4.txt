Here are the steps that can be followed to optimize the given C/C++ program:

1. Minimize the number of times the 'mp' variable is accessed: The 'mp' variable is checked multiple times in the dfs function and main function. Accessing array elements is expensive and should be minimized. 

2. Reuse computed values: The value "y + dy[i], x + dx[i]" is computed twice. This can be computed once and stored in a variable.

3. Reduce the number of recursive calls: The dfs function is called recursively in a loop. However, we can reduce the number of recursive calls by checking the conditions before calling the function.

Optimized Program:

```c++
#include <cstdio>
using namespace std;
#define rep(i, x) for (int i = 0; i < (int)(x); ++i)
int dx[] = {-1, 1, 0, 0}, dy[] = {0, 0, -1, 1};
char mp[20][22];
int H, W;
void dfs(int y, int x) {
  if (y < 0 || y >= H || x < 0 || x >= W || mp[y][x] == '#' || mp[y][x] == ' ')
    return;
  mp[y][x] = ' ';
  int nx, ny;
  rep(i, 4) {
    nx = x + dx[i];
    ny = y + dy[i];
    if (nx >= 0 && nx < W && ny >= 0 && ny < H && mp[ny][nx] != '#' && mp[ny][nx] != ' ')
      dfs(ny, nx);
  }
}
int main() {
  while (scanf("%d %d", &W, &H), H || W) {
    int sy, sx;
    rep(i, H) rep(j, W) {
      scanf("\n%c", &mp[i][j]);
      if (mp[i][j] == '@')
        sy = i, sx = j, mp[i][j] = '.';
    }
    dfs(sy, sx);
    int cnt = 0;
    rep(i, H) rep(j, W) if (mp[i][j] == ' ') cnt++;
    printf("%d\n", cnt);
  }
}
```
In this optimized version, the number of times 'mp' variable is accessed is reduced by checking conditions before calling dfs function. This avoids unnecessary checks and reduces the number of recursive calls. The computed values "y + dy[i], x + dx[i]" are reused by storing them in 'nx' and 'ny' variables. This avoids the expense of recomputing the same values.