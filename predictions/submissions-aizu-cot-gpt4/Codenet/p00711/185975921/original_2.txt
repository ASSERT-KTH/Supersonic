The optimizations I would suggest for your code are:

1. Instead of using "scanf", use "fscanf". "fscanf" is faster than "scanf" because "scanf" is a formatted input function that reads data from stdin (which is a stream), while "fscanf" reads directly from the file.
   
2. Instead of using "printf", use "fprintf". Similar to the reason above, "fprintf" prints directly to the file, which is faster than "printf".
   
3. The arrays "dx" and "dy" can be declared as constants, as their values are not changing anywhere in the program. Declaring them as constants will help the compiler optimize the program.
   
4. The "rep" macro is used for loop iteration. Instead of this, you can use a normal "for" loop. It's easier to read and debug.
   
5. The "int cnt = 0;" declaration can be moved to the beginning of the main function to save memory.

Here is the optimized code:

```cpp
#include <cstdio>
using namespace std;

const int dx[] = {-1, 1, 0, 0}, dy[] = {0, 0, -1, 1};
char mp[20][22];
int H, W;

void dfs(int y, int x) {
  if (y < 0 || y >= H || x < 0 || x >= W || mp[y][x] == '#' || mp[y][x] == ' ')
    return;
  mp[y][x] = ' ';
  for(int i = 0; i < 4; i++) dfs(y + dy[i], x + dx[i]);
}

int main() {
  int cnt = 0;
  while (fscanf(stdin, "%d %d", &W, &H), H || W) {
    int sy, sx;
    for(int i = 0; i < H; i++) {
      for(int j = 0; j < W; j++) {
        fscanf(stdin, "\n%c", &mp[i][j]);
        if (mp[i][j] == '@') {
          sy = i, sx = j, mp[i][j] = '.';
        }
      }
    }
    dfs(sy, sx);
    cnt = 0;
    for(int i = 0; i < H; i++) {
      for(int j = 0; j < W; j++) {
        if (mp[i][j] == ' ') cnt++;
      }
    }
    fprintf(stdout, "%d\n", cnt);
  }
  return 0;
}
```
Please note that these optimizations may not have a significant impact on the execution time or memory usage of your program, but they follow good programming practices and make the code cleaner and more efficient.