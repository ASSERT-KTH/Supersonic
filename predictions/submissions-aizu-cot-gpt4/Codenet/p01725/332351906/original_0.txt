This C++ code basically performs some kind of arithmetic calculations on a string input. There are several optimization strategies that can be applied in this case:

1. Avoid Global Variables: Global variables are generally slower than local variables because they reside in the heap rather than the stack.

2. Use an array instead of a map for character lookup: Maps in C++ are implemented as red-black trees and have a time complexity of O(log n) for lookup, insertion and deletion operations. Arrays have a time complexity of O(1) for these operations.

3. Avoid Using std::endl: std::endl inserts a newline character into the output buffer and then flushes the buffer. This is generally slower than simply inserting a newline character.

4. Avoid unnecessary calculations: The same calculations are done multiple times. This can be avoided by storing the result of the calculation and reusing it.

5. Use prefix increment: Prefix increment (++i) is generally faster than postfix increment (i++) in C++. This is because postfix increment creates a copy of the object, increments the value, and then returns the original copy, while prefix increment simply increments the value and returns the incremented value.

Here is the optimized version of the program:

```c++
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int p;
char ch[1 << 8];
string S;

ll bnf();
ll getNum();

ll calc(int c) {
  ll res;
  if (S[p] == '(')
    ++p, res = bnf(), ++p;
  else
    res = getNum();
  while (p < S.size() && S[p] != ')' && ch[S[p]] > c)
    res = ((S[p] == '+') ? res += calc(ch[S[p++]]) : ((S[p] == '-') ? res -= calc(ch[S[p++]]) : res *= calc(ch[S[p++]])));
  return res;
}

ll bnf() {
  ll res = calc(-1);
  while (p < S.size() && S[p] != ')')
    res = ((S[p] == '+') ? res += calc(ch[S[p++]]) : ((S[p] == '-') ? res -= calc(ch[S[p++]]) : res *= calc(ch[S[p++]])));
  return res;
}

ll getNum() {
  ll res = 0;
  while (isdigit(S[p]))
    res = res * 10 + S[p++] - '0';
  return res;
}

int main() {
  cin >> S;
  ll res = bnf();
  for (int i = 0; i < 3; ++i)
    for (int j = 0; j < 3; ++j)
      for (int k = 0; k < 3; ++k) {
        ch['+'] = i, ch['-'] = j, ch['*'] = k;
        p = 0;
        res = max(res, calc(-100));
      }
  cout << res << "\n";
  return 0;
}
```

The optimization is based on the above strategies, with repeated calculations removed and less costly operators used.