Optimizations:

1. Removing #include <bits/stdc++.h>: It's a non-standard, compiler specific library and it includes a lot of unnecessary stuff which may increase compilation time. We can replace it with only the necessary standard libraries.

2. Replacing the usage of std::endl with '\n': std::endl causes the output buffer to flush, which can slow down the program. In most scenarios, '\n' is sufficient.

3. Avoiding the usage of global variables: Global variables can make the program harder to understand and debug. We can pass these variables as function arguments where necessary.

4. Replace string S with char array: Using char array instead of string can reduce the memory usage and improve performance.

Here, these optimizations are applied:

```
#include <iostream>
#include <algorithm>
#include <cctype>

typedef long long ll;

ll bnf(char *S, int &p, int *ch);
ll getNum(char *S, int &p) {
  ll res = 0;
  while (isdigit(S[p]))
    res = res * 10 + S[p++] - '0';
  return res;
}
ll get(ll &a, ll b, char c) {
  if (c == '+')
    a += b;
  if (c == '-')
    a -= b;
  if (c == '*')
    a *= b;
  return a;
}
ll calc(char *S, int &p, int *ch, int c) {
  ll res, t;
  if (S[p] == '(')
    p++, res = bnf(S, p, ch), p++;
  else
    res = getNum(S, p);
  while (S[p] != '\0' && S[p] != ')' && ch[S[p]] > c)
    t = S[p++], get(res, calc(S, p, ch, ch[t]), t);
  return res;
}
ll bnf(char *S, int &p, int *ch) {
  ll res = calc(S, p, ch, -1), t;
  while (S[p] != '\0' && S[p] != ')')
    t = S[p++], get(res, calc(S, p, ch, ch[t]), t);
  return res;
}
int main() {
  char S[1000];
  std::cin >> S;
  ll res = bnf(S, 0, new int[1 << 8]);
  for (int i = 0; i < 3; i++)
    for (int j = 0; j < 3; j++)
      for (int k = 0; k < 3; k++) {
        int ch[1 << 8];
        ch['+'] = i, ch['-'] = j, ch['*'] = k;
        int p = 0;
        res = std::max(res, calc(S, p, ch, -100));
      }
  std::cout << res << '\n';
  return 0;
}
```