Here are some steps to optimize the given program:

1- Use of getchar/ungetc: Using scanf for reading the string can be slower than using getchar. Moreover, using getchar allows us to remove the need for strlen as we can check each character as we read them.

2- Removal of redundant checks: The program has several redundant if-else checks that can be eliminated.

3- Use of switch-case: Instead of multiple while loops, we can use a switch-case statement to determine the character and increment the appropriate counter.

4- Removal of unnecessary fill: The initial fill of the array is unnecessary, we can remove this operation.

5- Removal of last scanf: The last scanf doesn't seem to serve any purpose and can be removed.

Now, let's implement these optimizations:

```
#include <algorithm>
#include <cstdio>
using namespace std;
char x;
int a = 0, b = 0, c = 0, d = 0, maxi = 0;
int main() {
  x = getchar();
  while (x != '\n') {
    switch(x){
      case 'J':
        a++;
        break;
      case 'O':
        if(a > b)
          b++;
        break;
      case 'I':
        if(b > c){
          c++;
          d = max(d, c);
        }
        break;
      default:
        a = b = c = 0;
        break;
    }
    x = getchar();
  }
  printf("%d\n", d);
  return 0;
}
```

This optimized code should be faster and use less memory than the original.