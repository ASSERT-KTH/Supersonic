The given code can be optimized in the following ways:

1. Removal of unused code: The `algorithm` and `vector` libraries are imported but not used in the program. Similarly, the variable `pai` is also declared but not used. We can remove these to clean up the code. 

2. Combine headers: We have included `bits/stdc++.h` which is a header file that includes most of the standard libraries. This means including additional libraries like `algorithm` and `vector` is not necessary. However, including `bits/stdc++.h` is not recommended in production code because it includes more than what is required which can increase compilation time. Therefore, we can replace `bits/stdc++.h` with the specific headers that we need which are `stdio.h` for `printf` and `scanf`.

3. Use of braces in conditional statements: It's a good practice to always use braces `{}` in if/else statements to make the code clearer and avoid any potential bugs. 

Here is the optimized version of your code:

```
#include <stdio.h>
using namespace std;
int main() {
  int a, b;
  scanf("%d %d", &a, &b);
  if (a > b) {
    printf("a > b\n");
  } else if (a < b) {
    printf("a < b\n");
  } else {
    printf("a == b\n");
  }
  return 0;
}
```