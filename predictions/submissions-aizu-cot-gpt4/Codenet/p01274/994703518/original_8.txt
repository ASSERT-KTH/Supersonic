The original program does perform pretty well, but there is some room for optimization. 

1. One of the potential bottlenecks could be the use of the `scanf` function for input. We can get rid of this function and use a faster I/O method instead to reduce the execution time.

2. Secondly, the inner loop in the last part of the program runs `n` times for each of `10001` values of `i`, resulting in a time complexity of `O(n*10001)`. This loop is finding the lower bound of `num[j] - dp2[i]` in the `dp1` array. We can sort the `dp1` array and use binary search to find the lower bound, which will significantly speed up the program.

3. The condition `if (dp2[i] < 0)` can be check before the inner loop, which will save time in case the condition is true.

4. We can also replace the `printf` function with `cout` to for fast output.

Here's the optimized code:

```cpp
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <iostream>
#define ll long long
#define maxn 100009
#define inf 999999999999
using namespace std;
ll dp1[10009];
ll dp2[10006];
char s[25];
int num[105];
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, m, x, y;
  while (cin >> n) {
    if (n == 0)
      break;
    for (int i = 0; i < n; i++)
      cin >> num[i];
    sort(num, num + n);
    for (int i = 1; i <= 10000; i++)
      dp2[i] = -inf;
    dp2[0] = 0;
    memset(dp1, 0, sizeof dp1);
    cin >> m;
    bool flag = 0;
    for (int i = 0; i < m; i++) {
      cin >> s >> x >> s >> y;
      if (x == 0 && y > 0)
        flag = 1;
      if (s[0] == 'S') {
        for (int j = x; j <= 10000; j++)
          dp1[j] = max(dp1[j], dp1[j - x] + y);
      } else {
        for (int j = x; j <= 10000; j++)
          dp2[j] = max(dp2[j], dp2[j - x] + y);
      }
    }
    if (flag) {
      cout << "0\n";
      continue;
    }
    sort(dp1, dp1+10001);
    ll ans = 1ll << 60, sum;
    for (int i = 0; i < 10001; i++) {
      if (dp2[i] < 0)
        continue;
      sum = i;
      for (int j = 0; j < n; j++) {
        sum += lower_bound(dp1, dp1 + 10000, num[j] - dp2[i]) - dp1;
      }
      ans = min(ans, sum);
    }
    cout << ans << "\n";
  }
  return 0;
}
```
This program should run faster and consume less memory than the original version.