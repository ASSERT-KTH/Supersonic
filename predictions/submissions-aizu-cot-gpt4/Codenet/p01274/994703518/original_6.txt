This program has a few areas that can be optimized:

1. **Avoid unnecessary computations**: The "lower_bound" function is called in a loop over the array `dp1`. But `num[j] - dp2[i]` doesn't depend on `j`, so you can compute it before the loop and store it in a variable.

2. **Memory usage**: The size of array `dp1` and `dp2` is 10009 and 10006 respectively. But in the program, at most 10000 elements of these arrays are used. So, array size can be reduced to 10001.

3. **Prefer pre-increment over post-increment**: Pre-increment (`++i`) is usually faster than post-increment (`i++`) in C++ because post-increment involves a copy operation.

4. **Avoid unnecessary IO operations**: The `flag` variable checks whether there's a command with x = 0 and y > 0. If such a command is found, the program prints "0" and continues to the next iteration. This can be optimized by breaking the loop as soon as such a command is found, and moving the printing operation after the loop.

Here's the optimized code with the above changes:

```cpp
#include <algorithm>
#include <cstdio>
#include <cstring>
#define ll long long
#define maxn 100009
#define inf 999999999999
using namespace std;
ll dp1[10001];
ll dp2[10001];
char s[25];
int num[105];
int main() {
  int n, m, x, y;
  while (scanf("%d", &n) != EOF) {
    if (n == 0)
      break;
    for (int i = 0; i < n; ++i)
      scanf("%d", &num[i]);
    sort(num, num + n);
    for (int i = 1; i <= 10000; ++i)
      dp2[i] = -inf;
    dp2[0] = 0;
    memset(dp1, 0, sizeof dp1);
    scanf("%d", &m);
    bool flag = 0;
    for (int i = 0; i < m; ++i) {
      scanf("%s", s);
      scanf("%d", &x);
      scanf("%s", s);
      scanf("%d", &y);
      if (x == 0 && y > 0) {
        flag = 1;
        break;
      }
      if (s[0] == 'S') {
        for (int j = x; j <= 10000; ++j)
          dp1[j] = max(dp1[j], dp1[j - x] + y);
      } else {
        for (int j = x; j <= 10000; ++j)
          dp2[j] = max(dp2[j], dp2[j - x] + y);
      }
    }
    if (flag) {
      puts("0");
      continue;
    }
    ll ans = 1ll << 60, sum;
    for (int i = 0; i < 10001; ++i) {
      if (dp2[i] < 0)
        continue;
      sum = i;
      auto bound = lower_bound(dp1, dp1 + 10000, -dp2[i]);
      for (int j = 0; j < n; ++j) {
        sum += bound - dp1;
      }
      ans = min(ans, sum);
    }
    printf("%lld\n", ans);
  }
  return 0;
}
```