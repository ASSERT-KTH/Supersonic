This program appears to be a type of dynamic programming problem where it tries to minimize a certain value (ans). There are several parts we can optimize to make the program run faster or use memory more efficiently. 

Here are some steps we can take to optimize the program:

1. Reduce the size of arrays: The size of the arrays dp1, dp2 and num seem larger than necessary. The size of these arrays should be related to the input size 'n' and 'm'. We will keep them as they are for now, as reducing their size may require significant changes to the program.

2. Avoid unnecessary computation: The program repeatedly calculates 'dp1[j - x] + y' and 'dp2[j - x] + y' in the loops. We can store these values in a variable before the loop to avoid calculating them multiple times.

3. Use faster I/O methods: The scanf and printf functions are slower than other I/O methods in C++. We can replace these functions with faster alternatives, such as cin and cout. However, in competitive programming, faster I/O methods may not be necessary. Moreover, it is usually recommended to use scanf and printf for compatibility and precision reasons.

4. Move flag checking inside the loop: Currently, the program checks the flag after the loop. We can move this check inside the loop to break the loop early when the flag is set.

Here is the optimized code:

```c++
#include <algorithm>
#include <cstdio>
#include <cstring>
#define ll long long
#define maxn 100009
#define inf 999999999999
using namespace std;
ll dp1[10009];
ll dp2[10006];
char s[25];
int num[105];
int main() {
  int n, m, x, y;
  while (scanf("%d", &n) != EOF) {
    if (n == 0)
      break;
    for (int i = 0; i < n; i++)
      scanf("%d", &num[i]);
    sort(num, num + n);
    for (int i = 1; i <= 10000; i++)
      dp2[i] = -inf;
    dp2[0] = 0;
    memset(dp1, 0, sizeof dp1);
    scanf("%d", &m);
    bool flag = 0;
    for (int i = 0; i < m; i++) {
      scanf("%s", s);
      scanf("%d", &x);
      scanf("%s", s);
      scanf("%d", &y);
      if (x == 0 && y > 0) {
        flag = 1;
        puts("0");
        continue;
      }
      ll val = s[0] == 'S' ? dp1[j - x] + y : dp2[j - x] + y;
      for (int j = x; j <= 10000; j++) {
        if(s[0] == 'S') {
          dp1[j] = max(dp1[j], val);
        } else {
          dp2[j] = max(dp2[j], val);
        }
      }
    }
    if (flag)
      continue;
    ll ans = 1ll << 60, sum;
    for (int i = 0; i < 10001; i++) {
      if (dp2[i] < 0)
        continue;
      sum = i;
      for (int j = 0; j < n; j++) {
        sum += lower_bound(dp1, dp1 + 10000, num[j] - dp2[i]) - dp1;
      }
      ans = min(ans, sum);
    }
    printf("%lld\n", ans);
  }
  return 0;
}
```

Please test the optimized code and compare it with the original one to ensure that the optimized code works as expected and gives the correct result.