This code is already relatively optimized, but there are a few areas where the performance can be improved further. The optimizations mainly revolve around reducing unnecessary computation and memory usage.

1. Reduce memory usage by declaring variables when needed: Instead of declaring all variables at the beginning of the program, it's more efficient to declare them when they are needed.

2. Avoid using `scanf` and `printf` for I/O operations: These functions are slower compared to `cin` and `cout` in C++. As this program heavily depends on I/O operations, using faster functions can significantly improve the running time.

3. Use `std::array` instead of C-style arrays: `std::array` is a container that encapsulates fixed size arrays, and its size is known at compile time. It's safer and generally more efficient than traditional C-style arrays.

4. Use `std::fill` instead of `memset`: `std::fill` is type-safe, and it's generally more efficient than `memset` which is a low-level, C-style function.

5. Use `auto` to deduce the type of an expression: This can reduce the chance of type mismatch errors and make the code cleaner.

6. Use `constexpr` for constant expressions: This informs the compiler that the variable can be computed at compile time, leading to faster code execution.

Here is the optimized version of the code:

```
#include <algorithm>
#include <array>
#include <iostream>

constexpr long long inf = 999999999999;
constexpr int maxn = 100009;

int main() {
  std::array<long long, 10009> dp1;
  std::array<long long, 10006> dp2;
  std::array<int, 105> num;

  int n, m, x, y;

  while (std::cin >> n) {
    if (n == 0) break;

    for (int i = 0; i < n; i++) {
      std::cin >> num[i];
    }

    std::sort(num.begin(), num.begin() + n);

    dp2.fill(-inf);
    dp2[0] = 0;

    dp1.fill(0);

    std::cin >> m;

    bool flag = 0;
    char s[25];

    for (int i = 0; i < m; i++) {
      std::cin >> s >> x >> s >> y;

      if (x == 0 && y > 0) flag = 1;

      if (s[0] == 'S') {
        for (int j = x; j <= 10000; j++)
          dp1[j] = std::max(dp1[j], dp1[j - x] + y);
      } else {
        for (int j = x; j <= 10000; j++)
          dp2[j] = std::max(dp2[j], dp2[j - x] + y);
      }
    }

    if (flag) {
      std::cout << "0\n";
      continue;
    }

    long long ans = 1LL << 60, sum;

    for (int i = 0; i < 10001; i++) {
      if (dp2[i] < 0) continue;

      sum = i;

      for (int j = 0; j < n; j++) {
        auto iter = std::lower_bound(dp1.begin(), dp1.begin() + 10000, num[j] - dp2[i]);
        sum += iter - dp1.begin();
      }

      ans = std::min(ans, sum);
    }

    std::cout << ans << "\n";
  }

  return 0;
}
```