Here are some optimizations for the given C/C++ program step by step:

1. Avoid Recalculation: In the second last for loop, `lower_bound(dp1, dp1 + 10000, num[j] - dp2[i]) - dp1` is recalculated n times. You can store this value in a variable to avoid this recalculation.

2. Variable Scope: The variables 'x', 'y', and 's' are only used inside the while loop, so you can move their declaration inside the while loop to limit their scope and release memory when they are not needed.

3. Optimize IO operations: We can use `ios_base::sync_with_stdio(false); cin.tie(NULL);` to speed up cin and cout operations.

Here is the optimized program:

```C++
#include <algorithm>
#include <cstdio>
#include <cstring>
#define ll long long
#define maxn 100009
#define inf 999999999999
using namespace std;
ll dp1[10009];
ll dp2[10006];
int num[105];
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, m;
  while (scanf("%d", &n) != EOF) {
    if (n == 0)
      break;
    for (int i = 0; i < n; i++)
      scanf("%d", &num[i]);
    sort(num, num + n);
    for (int i = 1; i <= 10000; i++)
      dp2[i] = -inf;
    dp2[0] = 0;
    memset(dp1, 0, sizeof dp1);
    scanf("%d", &m);
    bool flag = 0;
    for (int i = 0; i < m; i++) {
      char s[25];
      int x, y;
      scanf("%s", s);
      scanf("%d", &x);
      scanf("%s", s);
      scanf("%d", &y);
      if (x == 0 && y > 0)
        flag = 1;
      if (s[0] == 'S') {
        for (int j = x; j <= 10000; j++)
          dp1[j] = max(dp1[j], dp1[j - x] + y);
      } else {
        for (int j = x; j <= 10000; j++)
          dp2[j] = max(dp2[j], dp2[j - x] + y);
      }
    }
    if (flag) {
      puts("0");
      continue;
    }
    ll ans = 1ll << 60, sum;
    for (int i = 0; i < 10001; i++) {
      if (dp2[i] < 0)
        continue;
      sum = i;
      ll temp = lower_bound(dp1, dp1 + 10000, num[0] - dp2[i]) - dp1;
      for (int j = 0; j < n; j++) {
        sum += temp;
      }
      ans = min(ans, sum);
    }
    printf("%lld\n", ans);
  }
  return 0;
}
```

Please note that the effect of these optimizations might not be significant in this particular program as the main time complexity comes from the sort operation and the nested for loops. Further optimization might require more significant changes in the logic of the program.