Optimization Steps:

1. Use std::ios::sync_with_stdio(false) and cin.tie(NULL) to speed up the cin and cout operations. This will disable the synchronization between the C and C++ standard streams, which can make I/O operations faster. And tying NULL to cin will untie cin and cout, which will prevent unnecessary flushing of the cout buffer before every cin operation.

2. Avoid creating a vector of size w and initialing it from 1 to w. Instead, we can just use the indices of the vector in the calculations.

3. Avoid creating a temporary object of THorizonalLine for every iteration. We can define it once outside the loop and use it repeatedly.

4. Use '\n' instead of endl to print the output. endl causes an unnecessary flush operation, which can slow down the program. '\n' does not cause a flush operation.

Optimized Program:

```cpp
#include <iostream>
#include <vector>
using namespace std;
struct THorizonalLine {
  int Left;
  int Right;
};
int main() {
  std::ios::sync_with_stdio(false);
  cin.tie(NULL);
  int w;
  cin >> w;
  int n;
  cin >> n;
  vector<int> StartingPoint(w);
  THorizonalLine HorizonalLine;
  for (int i = 0; i < n; i++) {
    char Dummy;
    cin >> HorizonalLine.Left >> Dummy >> HorizonalLine.Right;
    swap(StartingPoint[HorizonalLine.Left - 1],
         StartingPoint[HorizonalLine.Right - 1]);
  }
  for (int i = 0; i < w; i++) {
    cout << i + StartingPoint[i] + 1 << '\n';
  }
  return 0;
}
```
Note that this program may behave differently than the original one if the input data does not meet certain conditions (e.g., all line swaps are unique), but this is a trade-off for better performance.