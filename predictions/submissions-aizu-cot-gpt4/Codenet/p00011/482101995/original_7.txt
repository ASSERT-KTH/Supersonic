The program can be optimized in the following ways:

1. Reduce Memory Usage: The vector `StartingPoint` is initialized with a sequence from 1 to w. This is not strictly necessary as the value at any index i can be calculated as i+1. So, instead of storing these values, we can infer them when needed. This eliminates the need to store and initialize the vector, thereby reducing memory usage.

2. Reduce Running Time: The current program uses swap operation in the loop to swap elements at different positions in the vector. This operation is not necessary because we already know the logic of the sequence (i+1). We can directly calculate the final position of each line segment without using additional memory space. 

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
struct THorizonalLine {
  int Left;
  int Right;
};
int main() {
  int w;
  cin >> w;
  int n;
  cin >> n;
  int StartingPoint[w];
  for (int i = 0; i < n; i++) {
    THorizonalLine HorizonalLine;
    char Dummy;
    cin >> HorizonalLine.Left >> Dummy >> HorizonalLine.Right;
    StartingPoint[HorizonalLine.Left - 1] = HorizonalLine.Right;
    StartingPoint[HorizonalLine.Right - 1] = HorizonalLine.Left;
  }
  for (int i = 0; i < w; i++) {
    if (StartingPoint[i] == 0) {
      cout << i + 1 << endl;
    } else {
      cout << StartingPoint[i] << endl;
    }
  }
  return 0;
}
```
This optimized program saves memory by not initializing a vector with values that can be easily calculated. It also reduces running time by directly calculating the final position of each line segment, rather than swapping elements in the vector.