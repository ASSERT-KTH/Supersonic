The initial code swaps the elements of the StartingPoint vector according to the left and right points of the THorizontalLine. It has a time complexity of O(w) and a space complexity of O(w) as it creates a vector of size w and then iterates over it.

Here are the steps to optimize the code:

1. Reserve memory for the vector: Reserving memory for the vector before pushing elements into it can save time and space because it avoids unnecessary reallocations and copies.

2. Use fast input/output methods: Using scanf/printf instead of cin/cout can also speed up the program as they are faster for handling input/output operations.

3. Avoid creating unnecessary temporary variables: The dummy variable is not necessary and can be avoided.

4. Avoid creating unnecessary struct instances: We can directly read the left and right values instead of creating a THorizontalLine struct instance for each iteration.

The optimized version of the code will then look like this:

```cpp
#include <cstdio>
#include <vector>
using namespace std;
int main() {
  int w;
  scanf("%d", &w);
  vector<int> StartingPoint;
  StartingPoint.reserve(w);
  for (int i = 0; i < w; i++) {
    StartingPoint[i] = i + 1;
  }
  int n;
  scanf("%d", &n);
  for (int i = 0; i < n; i++) {
    int left, right;
    scanf("%d,%d", &left, &right);
    swap(StartingPoint[left - 1], StartingPoint[right - 1]);
  }
  for (int i = 0; i < w; i++) {
    printf("%d\n", StartingPoint[i]);
  }
  return 0;
}
```
Note: This optimized code assumes that inputs are in the correct format and does not handle errors in the input format. The use of scanf/printf for faster input/output may also not be portable to all C++ environments.