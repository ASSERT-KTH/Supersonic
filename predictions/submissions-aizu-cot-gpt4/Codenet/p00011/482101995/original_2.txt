In the given code, most of the operations are already optimal. However, there's a small optimization that can be done. It involves the initialization of the `StartingPoint` vector. 

In the current code, you're initializing the vector in a separate loop. Instead of that, you can initialize it at the time of declaration itself using the iota function of the algorithm library.

Here are the steps to optimize:

1. Include the algorithm library to use the iota function.
2. Use the `iota` function to initialize `StartingPoint` in one line at the time of declaration itself. `iota` function will fill the vector with increasing integers starting from 1.
3. Remove the unnecessary initialization loop. 

Here's the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
struct THorizonalLine {
  int Left;
  int Right;
};
int main() {
  int w;
  cin >> w;
  int n;
  cin >> n;
  vector<int> StartingPoint(w);
  iota(StartingPoint.begin(), StartingPoint.end(), 1);
  for (int i = 0; i < n; i++) {
    THorizonalLine HorizonalLine;
    char Dummy;
    cin >> HorizonalLine.Left >> Dummy >> HorizonalLine.Right;
    swap(StartingPoint[HorizonalLine.Left - 1],
         StartingPoint[HorizonalLine.Right - 1]);
  }
  for (int i = 0; i < w; i++) {
    cout << StartingPoint[i] << endl;
  }
  return 0;
}
```
This optimization may not bring a significant improvement in runtime, but it simplifies the code and makes it more readable.