The primary optimization that can be done here is to reduce the redundant space usage. The `StartingPoint` vector is initialized with `i + 1`, where `i` is the index. Then, in the process, it only swaps values at different positions.

So, it is not necessary to initialize the `StartingPoint` vector at the beginning. We can directly swap the indices (which are `i + 1`) during the process. This way, we can avoid initializing and storing the vector, which saves both time and memory.

Here's the optimized code step-by-step:

1. Remove the initialization of the `StartingPoint` vector.

2. Instead of swapping elements of `StartingPoint`, directly swap `Left` and `Right` in the `THorizonalLine` struct.

3. For printing, directly print the index + 1, which is equivalent to the original `StartingPoint[i]` value.

Here's the optimized code:

```cpp
#include <iostream>
using namespace std;

struct THorizonalLine {
  int Left;
  int Right;
};

int main() {
  int w;
  cin >> w;
  int n;
  cin >> n;
  THorizonalLine HorizonalLine;

  for (int i = 0; i < n; i++) {
    char Dummy;
    cin >> HorizonalLine.Left >> Dummy >> HorizonalLine.Right;
    swap(HorizonalLine.Left, HorizonalLine.Right);
  }

  for (int i = 0; i < w; i++) {
    cout << i+1 << endl;
  }

  return 0;
}
```

Please note that the optimized code above assumes that the input for `THorizonalLine` will always be in the range of `1` to `w`. If this is not the case, you may need to check or validate the inputs.