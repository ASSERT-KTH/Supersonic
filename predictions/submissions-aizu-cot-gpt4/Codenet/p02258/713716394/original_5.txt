Step-by-step optimization:

1. The two for loop traversals of the vector R can be combined into one. This will reduce the running time from 2n to n.
2. The iterators itr and itrE are not necessary, and the for loop can be replaced with a range-based for loop. This will reduce memory usage.
3. The initial values of maxProfit and Ri are hard-coded. It's better to use the first element of vector R as the initial value for Ri and 0 as the initial value for maxProfit.

Optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  int n;
  cin >> n;
  vector<int> R(n);
  
  // initialize Ri and maxProfit to the first input value and 0 respectively
  cin >> R[0];
  int Ri = R[0];
  int maxProfit = 0;
  
  // combine input reading and profit calculation into one loop
  for (int i = 1; i < n; i++) {
    cin >> R[i];
    maxProfit = max(maxProfit, R[i] - Ri);
    Ri = min(Ri, R[i]);
  }

  cout << maxProfit << endl;
  
  return 0;
}
```
This version of the program reads the inputs and calculates the maximum profit in a single pass, improving the runtime. The use of iterators has been removed, which slightly reduces memory usage. The initialization of Ri and maxProfit has been improved to not rely on hard-coded values.