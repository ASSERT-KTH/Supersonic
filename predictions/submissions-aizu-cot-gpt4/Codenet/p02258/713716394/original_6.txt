Here are the steps to optimize the given program:

1. Remove the iterators and use range-based for loop: Iterators are a bit slower and more error-prone due to manual incrementation.

2. Avoid using `std::endl` and use `"\n"` instead: `std::endl` inserts a newline character into the output sequence and it flushes the output buffer, which can significantly decrease the performance of the program if done frequently. 

3. Use `std::ios_base::sync_with_stdio(false)` and `std::cin.tie(NULL)`: This can speed up I/O operations.

4. Use `reserve()`: This will allocate memory at once and avoid reallocations.

5. Remove unnecessary `using namespace std`: It's better to avoid `using namespace std` in the global scope to prevent name clashes.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  int n;
  int maxProfit = 1 - 1000000000;
  int Ri = 2000000000;
  std::cin >> n;
  std::vector<int> R;
  R.reserve(n);
  
  for (int i = 0; i < n; i++) {
    int temp;
    std::cin >> temp;
    R.push_back(temp);
  }
  
  for (const auto& val : R) {
    if (maxProfit < val - Ri) {
      maxProfit = val - Ri;
    }
    if (val < Ri) {
      Ri = val;
    }
  }
  std::cout << maxProfit << "\n";
  return 0;
}
```
