Optimization steps:

1. There is no need to define iterators `itr` and `itrE` before reading input. We can define them just before the loop where they are used.
2. The second loop, which is used for calculating `maxProfit`, seems to be iterating from the start of the vector to its end. We could merge the first and second loops into one to avoid repeated iteration.
3. The variable `Ri` is initially assigned a value of 2000000000. It's more appropriate to assign it the first element of the vector `R` after reading the first input.
4. `Ri` is updated if `*itr` is smaller than `Ri`, which is unnecessary if `*itr` is equal to `Ri`. So, we can change the condition to `*itr < Ri`.
5. `std::ios::sync_with_stdio(0)` and `cin.tie(0)` can be used to speed up `cin` and `cout`.

Optimized program:

```C++
#include <iostream>
#include <vector>
using namespace std;
int main() {
  std::ios::sync_with_stdio(0);
  cin.tie(0);
  int n;
  int maxProfit = 1 - 1000000000;
  cin >> n;
  vector<int> R(n);
  cin >> R[0];
  int Ri = R[0];
  for (int i = 1; i < n; i++) {
    cin >> R[i];
    if (maxProfit < R[i] - Ri) {
      maxProfit = R[i] - Ri;
    }
    if (R[i] < Ri) {
      Ri = R[i];
    }
  }
  cout << maxProfit << endl;
  return 0;
}
```