The optimization steps are as follows:

1. Avoid using iterators to read and manipulate elements of the vector. Instead, use traditional integer index-based access. This can lead to more efficient code because it avoids the overhead of iterator operations.

2. Reserve memory for the vector upfront using the reserve() function. This can potentially reduce the number of memory reallocations needed as elements are added to the vector, which can be quite expensive in terms of time.

3. Reduce the number of global variables. You do not need 'Ri' as a global variable. It can be initialized inside the for loop.

4. Combine the two for loops into one. This reduces the number of iterations over the vector from two to one, thereby reducing the time complexity.

The optimized code based on these steps is as follows:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  int n;
  cin >> n;
  
  vector<int> R;
  R.reserve(n);
  
  int maxProfit = 1 - 1000000000;
  int Ri = R[0];
  
  for (int i = 0; i < n; i++) {
    int temp;
    cin >> temp;
    R.push_back(temp);
    
    if (i == 0) {
      Ri = R[0];
    }
    else {
      if (maxProfit < R[i] - Ri) {
        maxProfit = R[i] - Ri;
      }
      if (R[i] < Ri) {
        Ri = R[i];
      }
    }
  }
  
  cout << maxProfit << endl;
  
  return 0;
}
```

Please note that this code assumes that the user will always input a value for 'n' that is greater than zero. If this is not guaranteed, additional error checking should be incorporated.