Here are the optimizations steps:

1. Instead of using iterators to read and access elements in the vector, use the index. This will not only reduce the complexity but also make the code cleaner and easier to understand.

2. Instead of having two separate loops for reading inputs and calculating the max profit, you can combine them into one loop. This reduces the number of iterations, thus reducing the runtime.

3. Instead of storing all stock prices in a vector, store only the current and minimum stock price. This will significantly reduce the memory usage.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    int maxProfit = INT_MIN;
    int minPrice = INT_MAX;
    for (int i = 0; i < n; i++) {
        int currPrice;
        cin >> currPrice;
        minPrice = min(minPrice, currPrice);
        maxProfit = max(maxProfit, currPrice - minPrice);
    }
    cout << maxProfit << endl;
    return 0;
}
```
This program will have a similar output to the original one but with faster running time and less memory usage.