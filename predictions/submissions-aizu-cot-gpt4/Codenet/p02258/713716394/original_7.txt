Optimizations:

1. Remove the usage of iterators for the vector and use a simple for loop. This would make the code easier to read and understand. It would also remove the overhead of using iterators.

2. There is no need to initialize the vector R with size n and then fill it with values. We can read the input values directly into the vector using push_back function.

3. We can combine the two for loops into one. This would reduce the time complexity of the program.

4. Instead of using std::cin and std::cout for input and output, we can use faster I/O methods like scanf and printf.

Here is the optimized code:

```c++
#include <iostream>
#include <vector>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false); 
    cin.tie(NULL); 

    int n;
    cin >> n;
    int maxProfit = -2e9;
    int minPrice = 2e9;

    for (int i = 0; i < n; i++) {
        int price;
        cin >> price;
        maxProfit = max(maxProfit, price - minPrice);
        minPrice = min(minPrice, price);
    }
    cout << maxProfit << "\n";
    return 0;
}
```

By merging the two for loops into one, we reduce the time complexity of the program. We read the price directly into the variable and compute the maxProfit and minPrice in the same loop. We also switched to using the min and max functions for better readability. The use of ios_base::sync_with_stdio(false); and cin.tie(NULL); is to speed up the cin and cout operations.