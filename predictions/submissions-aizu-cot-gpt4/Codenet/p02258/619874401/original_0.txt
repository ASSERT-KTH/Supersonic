This C++ program is already quite efficient. It calculates the maximum difference in an array while only iterating through the array once, which is O(n) complexity. It's hard to optimize it further in terms of time complexity. 

However, we can make the following small modifications:

1. Use `std::ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` to make cin and cout faster. This can be useful when dealing with large amounts of input and output. 

2. Instead of declaring a large array of size `MAX = 200000`, we can dynamically allocate memory according to the size `n`. This can reduce the memory usage when `n` is significantly less than `MAX`.

Here is the optimized program:
```cpp
#include <algorithm>
#include <iostream>
using namespace std;

int main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n;
  cin >> n;

  int* R = new int[n];
  for (int i = 0; i < n; i++)
    cin >> R[i];

  int maxv = R[1] - R[0];
  int minv = R[0];

  for (int i = 1; i < n; i++) {
    maxv = max(maxv, R[i] - minv);
    minv = min(minv, R[i]);
  }

  cout << maxv << "\n";
  delete[] R;

  return 0;
}
```
Remember to always delete dynamically allocated memory to avoid memory leaks.