Optimization Steps:

1. The first step we can take to optimize this code is to use faster IO. C++'s cin and cout operations are quite slow in comparison to scanf and printf from C. So we will replace cin and cout with scanf and printf respectively.

2. Second, we can see that the array R is declared with a fixed constant size of MAX = 200000. This takes up unnecessary memory when n, the actual number of elements we use, is less than MAX. A better approach would be to declare R with size n after we read n.

3. Lastly, it's better to avoid using 'std' namespace. It's a bad practice to use 'using namespace std'. So, we will avoid it.

Optimized code:

```cpp
#include <algorithm>
#include <cstdio>
#include <vector>

int main() {
  int n;
  scanf("%d", &n);
  std::vector<int> R(n);
  for (int i = 0; i < n; i++)
    scanf("%d", &R[i]);
  int maxv = R[1] - R[0];
  int minv = R[0];
  for (int i = 1; i < n; i++) {
    maxv = std::max(maxv, R[i] - minv);
    minv = std::min(minv, R[i]);
  }
  printf("%d\n", maxv);
  return 0;
}
```

Note: Since we're using std::vector instead of a standard array, the memory usage will be optimized as vectors use dynamic size allocation. However, this could slightly increase the time complexity due to dynamic memory allocation and deallocation. If the number of elements 'n' is always going to be close to 200000, using a standard array with size 200000 might be more time efficient.