Optimization steps:

1. The first optimization is to use `std::ios::sync_with_stdio(false)` and `cin.tie(NULL)`. These are used to untie `cin` from `cout` and to stop `cin` from syncing with C's stdio, thereby speeding up input and output from the console.

2. The second optimization is to use fast input/output functions instead of `cin` and `cout`. This is because `cin` and `cout` are slower than `scanf` and `printf`.

3. Instead of using `std::max` and `std::min`, we can use simple conditional statements, which are faster.

Here is the optimized code:

```cpp
#include <cstdio>
#define MAX 200000

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);
  
  int R[MAX], n;
  scanf("%d", &n);
  
  for (int i = 0; i < n; i++)
    scanf("%d", &R[i]);
  
  int maxv = R[1] - R[0];
  int minv = R[0];
  
  for (int i = 1; i < n; i++) {
    maxv = (maxv > (R[i] - minv)) ? maxv : (R[i] - minv);
    minv = (minv < R[i]) ? minv : R[i];
  }
  
  printf("%d\n", maxv);
  return 0;
}
```
This optimized version of the program will run significantly faster than the original version, especially when dealing with large inputs. Other than these, the rest of the code is already quite efficient.