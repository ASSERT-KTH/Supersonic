The given C++ program is already quite efficient. Here's how it works:

- It reads an integer n and then n more integers into an array R.
- It calculates the difference between each pair of integers and keeps track of the maximum difference and the minimum value encountered so far.

However, there are a few minor modifications you can make to optimize it further:

1. Use std::ios_base::sync_with_stdio(false); This line of code will make the input/output in C++ faster than usual. This can be used when you want to reduce the time of cin and cout. In most of the cases, you should also add cin.tie(NULL); This unties cin from cout. Tied streams ensure that one stream is flushed automatically before each I/O operation on the other stream.

2. Instead of using the array R[MAX], use a dynamic array or a vector. This way, the program only uses the memory it needs for n integers, rather than always allocating memory for MAX integers.

3. We can remove the 'using namespace std;' line and use std:: before cin, cout, max and min. It's a good practice to avoid 'using namespace std;' in larger programs to prevent naming conflicts.

Here's the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    int n;
    std::cin >> n;
    std::vector<int> R(n);

    for (int i = 0; i < n; i++)
        std::cin >> R[i];
    
    int maxv = R[1] - R[0];
    int minv = R[0];

    for (int i = 1; i < n; i++) {
        maxv = std::max(maxv, R[i] - minv);
        minv = std::min(minv, R[i]);
    }

    std::cout << maxv << "\n";
    
    return 0;
}
```

Please note that the performance improvement with these modifications would be negligible for small inputs, but for larger inputs, using a vector instead of an array can help reduce memory usage if n is far less than MAX.