The code you provided is already quite optimized in terms of time complexity. It computes the maximum difference in an array of integers in O(n) time which is the best we can achieve for this problem.

However, there's a small memory-related optimization that can be done. The static const int MAX = 200000 is allocating memory for 200000 integers even if the input size n is much less than that. We can dynamically allocate memory based on the input size to save memory. We can use a vector instead of an array for this.

Here's the optimized code after making the above modifications:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

int main() {
  int n;
  cin >> n;
  vector<int> R(n);
  for (int i = 0; i < n; i++)
    cin >> R[i];
  int maxv = R[1] - R[0];
  int minv = R[0];
  for (int i = 1; i < n; i++) {
    maxv = max(maxv, R[i] - minv);
    minv = min(minv, R[i]);
  }
  cout << maxv << endl;
  return 0;
}
```

The optimized program uses a vector to store the integers and the size of the vector is determined based on the input size n. This reduces the memory usage of the program when n is much less than 200000. The time complexity of the program remains O(n) which is optimal for this problem.