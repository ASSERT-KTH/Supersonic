This C++ program is already quite efficient. However, there are a couple of minor optimizations we can do:

1. Use Fast Input/Output: Instead of using cin and cout, we can use scanf and printf which are faster.

2. Reserve Memory in Advance: The memory for the array R is not reserved in advance. Reserving memory in advance can be faster because it reduces the need for reallocations.

3. Minimize use of std::min and std::max: Instead of using the standard library functions std::min and std::max, we can use simple if statements to check and update minv and maxv. This is because function calls may have overhead, especially inside loops.

Here's the optimized program:

```c++
#include <stdio.h>
static const int MAX = 200000;
int R[MAX];
int main() {
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
        scanf("%d", &R[i]);
    int maxv = R[1] - R[0];
    int minv = R[0];
    for (int i = 1; i < n; i++) {
        int tmp = R[i] - minv;
        if (tmp > maxv) maxv = tmp;
        if (R[i] < minv) minv = R[i];
    }
    printf("%d\n", maxv);
    return 0;
}
```
