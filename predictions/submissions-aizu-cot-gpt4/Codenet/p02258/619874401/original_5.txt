Here are the steps for optimization:

1. `std::ios_base::sync_with_stdio(false);`: This line of code allows to untie C++ and C streams. When it's enabled, C++ streams are synchronized with C streams. This means before each I/O operation, C++ streams ensure that C streams have synced correctly with the underlying standard C I/O library, which causes overhead and results in slower execution of the program. Disabling this feature can speed up I/O operations.

2. `cin.tie(NULL);`: This unties cin from cout. Tied streams ensure that one stream is flushed automatically before each I/O operation on the other stream. By default cin is tied to cout to provide a sensible user interaction. For example, when you extract something from cin, the program first flushes cout to display all output before the user input is read. In cin/cout intensive programs, it's beneficial to untie cin from cout, which can be done by using cin.tie(NULL).

3. Do not use `std::endl` to create a new line. `std::endl` actually flushes the stream buffer. So, it is slower than '\n'. If you need a new line, just use '\n'.

4. Use prefix increment/decrement instead of postfix. The reason is that the postfix operator involves a copy of the object, so it's slower. In prefix, no copy of the object is made.

Here is the optimized version of the given program:

```cpp
#include <algorithm>
#include <iostream>
using namespace std;
static const int MAX = 200000;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int R[MAX], n;
  cin >> n;
  for (int i = 0; i < n; ++i)
    cin >> R[i];
  int maxv = R[1] - R[0];
  int minv = R[0];
  for (int i = 1; i < n; ++i) {
    maxv = max(maxv, R[i] - minv);
    minv = min(minv, R[i]);
  }
  cout << maxv << '\n';
  return 0;
}
```