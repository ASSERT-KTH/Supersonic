Step 1: Using "std::ios::sync_with_stdio(false);" This line of code will make the input and output more efficient which in turn will make the program faster. When true, cin is guaranteed to be synchronized with printf and scanf, meaning you can freely interleave calls to cin and printf (or cout and scanf). When false, this guarantee is gone and cin/cout can use a separate buffer, which may be faster in some cases.

Step 2: Declare the array R as static. This will move the array from stack to global (more precisely, BSS segment). This is important when dealing with large arrays, as stack could overflow if the array is too large. In some cases, it may also provide minor performance improvements.

Step 3: Using "std::max" and "std::min" instead of "max" and "min". This will make the code more readable and it's also the recommended way to call these functions in C++.

Here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
using namespace std;
static const int MAX = 200000;
static int R[MAX];
int main() {
  std::ios::sync_with_stdio(false);
  int n;
  cin >> n;
  for (int i = 0; i < n; i++)
    cin >> R[i];
  int maxv = R[1] - R[0];
  int minv = R[0];
  for (int i = 1; i < n; i++) {
    maxv = std::max(maxv, R[i] - minv);
    minv = std::min(minv, R[i]);
  }
  cout << maxv << endl;
  return 0;
}
```