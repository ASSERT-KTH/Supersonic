The given C/C++ program is to find out the maximum number of people who can eat at the same time. The program calculates the start and end time for morning, lunch, and dinner for each person, sorts these times, and then uses three nested loops to check for every combination of morning, lunch, and dinner times, how many people can eat at that time.

The main optimization that can be done in this program is to reduce the number of iterations in the nested loops. The program is currently using a brute force method to check all possible combinations of morning, lunch, and dinner times. This results in a time complexity of O(n^4), which is very high. Instead, we can use a more efficient algorithm to solve this problem.

One way to do this is by sorting the start and end times of each meal and then using two pointers to find the maximum overlap. We can also keep track of the current count of overlapping intervals and update our answer when we find a greater count.

However, since the task is to make a small modification to the original program, the best we can do is to remove unnecessary variables and function calls, and use more efficient data structures where possible.

Here is the optimized program:

```cpp
#include <algorithm>
#include <stdio.h>
#include <vector>
#define BIG_NUM 2000000000
#define MOD 1000000007
#define EPS 0.000000001
using namespace std;
struct Info {
  int mornint_start, morning_end, lunch_start, lunch_end, dinner_start,
      dinner_end;
};
int calc(int hour, int minute) { return 60 * hour + minute; }
int main() {
  int N;
  scanf("%d", &N);
  Info info[N];
  vector<int> MORNING, LUNCH, DINNER;

  for (int i = 0; i < N; i++) {
    scanf("%d %d %d %d %d %d %d %d %d %d %d %d", &info[i].mornint_start, 
    &info[i].morning_end, &info[i].lunch_start, &info[i].lunch_end, 
    &info[i].dinner_start, &info[i].dinner_end);
    
    info[i].mornint_start = calc(info[i].mornint_start, info[i].morning_end);
    info[i].morning_end = calc(info[i].mornint_start, info[i].morning_end);
    MORNING.push_back(info[i].mornint_start);
    MORNING.push_back(info[i].morning_end);
    
    info[i].lunch_start = calc(info[i].lunch_start, info[i].lunch_end);
    info[i].lunch_end = calc(info[i].lunch_start, info[i].lunch_end);
    LUNCH.push_back(info[i].lunch_start);
    LUNCH.push_back(info[i].lunch_end);
    
    info[i].dinner_start = calc(info[i].dinner_start, info[i].dinner_end);
    info[i].dinner_end = calc(info[i].dinner_start, info[i].dinner_end);
    DINNER.push_back(info[i].dinner_start);
    DINNER.push_back(info[i].dinner_end);
  }

  sort(MORNING.begin(), MORNING.end());
  sort(LUNCH.begin(), LUNCH.end());
  sort(DINNER.begin(), DINNER.end());

  int ans = 0, tmp;

  for (int a = 0; a < MORNING.size(); a++) {
    for (int b = 0; b < LUNCH.size(); b++) {
      for (int c = 0; c < DINNER.size(); c++) {
        tmp = 0;
        for (int i = 0; i < N; i++) {
          if (info[i].mornint_start <= MORNING[a] &&
              info[i].morning_end >= MORNING[a] &&
              info[i].lunch_start <= LUNCH[b] &&
              info[i].lunch_end >= LUNCH[b] &&
              info[i].dinner_start <= DINNER[c] &&
              info[i].dinner_end >= DINNER[c]) {
            tmp++;
          }
        }
        if (tmp > ans) {
          ans = tmp;
        }
      }
    }
  }
  printf("%d\n", ans);
  return 0;
}
```

Note: This program still has a time complexity of O(n^4), which is not efficient for large inputs. The optimal solution requires a completely different approach using interval scheduling or segment trees, which cannot be achieved by making small modifications to the original program.