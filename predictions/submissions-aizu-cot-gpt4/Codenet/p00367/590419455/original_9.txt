The given code contains three nested loops, which results in O(N^4) time complexity. This is very inefficient and will lead to slow execution times for larger input sizes. The innermost loop checks if a given time falls within the morning, lunch, and dinner times of a person. This loop can be removed by using a clever technique. Instead of checking if a time falls within the time range of a person in the innermost loop, we can increment a counter for a given time when it is the start time of a person's meal, and decrement it when it is the end time. This way, we don't need to check all the times for all the people, and we can simply iterate through the sorted times while updating the counter. This reduces the time complexity to O(N log N) due to sorting.

Here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

struct Event {
    int time, type;
    bool operator<(const Event& rhs) const {
        if (time != rhs.time) return time < rhs.time;
        return type > rhs.type; // start event has higher priority
    }
};

int calc(int hour, int minute) { return 60 * hour + minute; }

int main() {
    int N;
    scanf("%d", &N);
    vector<Event> events;
    int m_st_h, m_st_m, m_ed_h, m_ed_m, l_st_h, l_st_m, l_ed_h, l_ed_m, d_st_h, d_st_m, d_ed_h, d_ed_m;
    for (int i = 0; i < N; i++) {
        scanf("%d %d %d %d %d %d %d %d %d %d %d %d", &m_st_h, &m_st_m, &m_ed_h, &m_ed_m, &l_st_h, &l_st_m, &l_ed_h, &l_ed_m, &d_st_h, &d_st_m, &d_ed_h, &d_ed_m);
        events.push_back({calc(m_st_h, m_st_m), 1});
        events.push_back({calc(m_ed_h, m_ed_m), -1});
        events.push_back({calc(l_st_h, l_st_m), 1});
        events.push_back({calc(l_ed_h, l_ed_m), -1});
        events.push_back({calc(d_st_h, d_st_m), 1});
        events.push_back({calc(d_ed_h, d_ed_m), -1});
    }
    sort(events.begin(), events.end());
    int ans = 0, cnt = 0;
    for (const auto& e : events) {
        cnt += e.type;
        ans = max(ans, cnt);
    }
    printf("%d\n", ans);
    return 0;
}
```

In the optimized code, an `Event` struct is used to store the time and type (start or end) of an event. This allows us to store all the events in a single vector, instead of storing them separately for morning, lunch, and dinner times. The events are sorted by time, and if two events have the same time, the start event is given higher priority. This is to ensure that if a person's meal ends at the same time as another person's meal starts, the start event is processed first, resulting in the correct count of the number of people having a meal at a given time. The maximum count is updated each time an event is processed.