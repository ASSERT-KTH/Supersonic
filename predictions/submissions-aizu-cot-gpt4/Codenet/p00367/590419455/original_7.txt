This program is executing three nested loops which makes the time complexity of the program O(n^3) which can be highly inefficient for larger size inputs. Also, there is another loop inside the innermost loop which is checking for the conditions which is making this program even slower. 

Optimizations:

1. The 'tmp' value is calculated for each combination of MORNING[a], LUNCH[b], and DINNER[c], but in reality it's not necessary to calculate it for all combinations. We can find the maximum 'tmp' value for each time in MORNING, LUNCH, and DINNER separately, and then find the maximum among them. This will reduce the time complexity to O(n^2).

2. Remove the unnecessary vector variables MORNING, LUNCH, DINNER. We are storing the start and end time of every meal in these vectors, but we are only using the start and end time of each meal in the 'tmp' calculation. We can directly use the start and end time from 'info' structure.

3. Use 'max' function instead of 'if' condition to update 'ans'. This will make the code cleaner.

Here is the optimized code:

```cpp
#include <algorithm>
#include <cfloat>
#include <cmath>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <stdio.h>
#include <string>
#include <time.h>
#include <vector>
typedef long long int ll;
typedef unsigned long long int ull;
#define BIG_NUM 2000000000
#define MOD 1000000007
#define EPS 0.000000001
using namespace std;
struct Info {
  int mornint_start, morning_end, lunch_start, lunch_end, dinner_start,
      dinner_end;
};
int calc(int hour, int minute) { return 60 * hour + minute; }
int main() {
  int N;
  scanf("%d", &N);
  Info info[N];
  int m_st_h, m_st_m, m_ed_h, m_ed_m, l_st_h, l_st_m, l_ed_h, l_ed_m, d_st_h,
      d_st_m, d_ed_h, d_ed_m;
  for (int i = 0; i < N; i++) {
    scanf("%d %d %d %d %d %d %d %d %d %d %d %d", &m_st_h, &m_st_m, &m_ed_h,
          &m_ed_m, &l_st_h, &l_st_m, &l_ed_h, &l_ed_m, &d_st_h, &d_st_m,
          &d_ed_h, &d_ed_m);
    info[i].mornint_start = calc(m_st_h, m_st_m);
    info[i].morning_end = calc(m_ed_h, m_ed_m);
    info[i].lunch_start = calc(l_st_h, l_st_m);
    info[i].lunch_end = calc(l_ed_h, l_ed_m);
    info[i].dinner_start = calc(d_st_h, d_st_m);
    info[i].dinner_end = calc(d_ed_h, d_ed_m);
  }
  int ans = 0, tmp;
  for (int i = 0; i < N; i++) {
    tmp = 0;
    for (int j = 0; j < N; j++) {
      if (info[j].mornint_start <= info[i].mornint_start &&
          info[j].morning_end >= info[i].morning_end &&
          info[j].lunch_start <= info[i].lunch_start &&
          info[j].lunch_end >= info[i].lunch_end &&
          info[j].dinner_start <= info[i].dinner_start &&
          info[j].dinner_end >= info[i].dinner_end) {
        tmp++;
      }
    }
    ans = max(ans, tmp);
  }
  printf("%d\n", ans);
  return 0;
}
```

Please note that the optimization may change the output of the program if the input has multiple combinations with the same maximum 'tmp' value. The optimized program will only find the first one, while the original program will find the last one. But as the problem does not specify which one to find, both are valid solutions.
