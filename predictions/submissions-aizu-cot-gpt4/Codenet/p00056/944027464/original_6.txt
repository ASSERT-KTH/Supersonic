Here are the steps to optimize the above program:

1. Use `reserve()` to allocate memory to the vector `primes` in advance. It prevents the overhead of resizing the vector again and again when new elements are added.

2. The second for loop where you are checking the primality can be made more efficient by running it till square root of 'i' instead of 'i'. Because a larger factor of the number must be a multiple of a smaller factor that has already been checked.

3. The inner loop where you are setting `isPrime[j]` to false can start from `i*i` because, for `j < i*i`, `j` would have already been marked non-prime by some prime number smaller than `i`.

4. Instead of using `isPrime.at(n - primes[i])` use `isPrime[n - primes[i]]`. The function `at()` does range checking and throws an exception if the accessed position is out of range, while the operator `[]` does not. So, the operator `[]` is faster.

5. Instead of using `primes.size()` inside the loop condition, store the size in a variable outside the loop and use it. This will prevent the size() function from being called repeatedly.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <cmath>
using namespace std;
int main(void) {
  vector<bool> isPrime(51000 + 1, true);
  vector<int> primes;
  primes.reserve(51000); // Reserve memory in advance
  isPrime[0] = isPrime[1] = false;
  for (int i = 2; i*i <= 51000; i++) {
    if (isPrime[i]) {
      for (int j = i*i; j <= 51000; j += i) {
        isPrime[j] = false;
      }
    }
  }
  for (int i = 2; i <= 51000; i++) {
    if (isPrime[i])
      primes.push_back(i);
  }
  int n;
  int size = primes.size(); // Store size in a variable
  while (cin >> n && n != 0) {
    int kotae = 0;
    for (int i = 0; i < size; i++) {
      if (primes[i] <= n / 2) {
        if (isPrime[n - primes[i]]) // Use operator [] instead of at()
          kotae++;
      }
    }
    cout << kotae << endl;
  }
  return 0;
}
```