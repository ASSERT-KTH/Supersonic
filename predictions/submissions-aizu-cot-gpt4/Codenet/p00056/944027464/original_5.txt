Here are the optimization steps:

1. The loop for setting all odd numbers as prime is not really necessary. We can initially set all numbers as prime and for each number we find that is not a prime, we set its flag to false. This saves us from setting all odd numbers as prime initially.
2. In the second loop, we don't need to go up to 51000 for i. We can stop at sqrt(51000) since any non-prime number will have a factor less than or equal to its square root.
3. The inner loop doesn't have to start from i+i. It can start from i*i because any composite numbers less than i*i would have been already marked as non-prime by some smaller prime number.
4. In the third loop, we don't need to create a separate vector for primes. We can check the isPrime vector directly. This saves memory usage.
5. In the input loop, we don't need to check all primes. We can stop at n/2 because the condition primes[i] <= n / 2 will be always false for primes[i] > n/2.

Here's the optimized code:

```c++
#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

int main(void) {
  vector<bool> isPrime(51000 + 1, true);
  isPrime[0] = isPrime[1] = false;
  for (int i = 2; i <= sqrt(51000); i++) {
    if (isPrime[i]) {
      for (int j = i * i; j <= 51000; j += i) {
        isPrime[j] = false;
      }
    }
  }
  int n;
  while (cin >> n && n != 0) {
    int kotae = 0;
    for (int i = 2; i <= n / 2; i++) {
      if (isPrime[i] && isPrime[n - i])
        kotae++;
    }
    cout << kotae << endl;
  }
  return 0;
}
```
Note: This optimization considers that the isPrime vector can fit in the memory. If this is not the case, a different approach is needed.