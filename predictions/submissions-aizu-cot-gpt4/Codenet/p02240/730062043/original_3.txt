Optimization steps:

1. Using the Path Compression technique in the find function: In the Union-Find algorithm, the find function is used to determine the parent of a given element. The path compression technique involves changing the parent of each node to the root node when the find function is called. This speeds up subsequent find operations on the same element.

2. Replacing the endl with '\n': The endl in C++ not only inserts a new line, but it also flushes the output buffer, whereas '\n' just inserts a new line. So, '\n' is faster than endl.

3. Using fast I/O methods: cin and cout are slower than scanf and printf, respectively. We can increase the speed of cin and cout by adding ios_base::sync_with_stdio(false) and cin.tie(NULL) at the beginning of the main function.

Here's the optimized code:

```c++
#include <iostream>
using namespace std;

int find(int join[], int x) {
    if (join[x] != x)
        join[x] = find(join, join[x]);
    return join[x];
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n, m, join[100000], num[100000], s, t;
    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        join[i] = i;
        num[i] = 0;
    }
    for (int i = 0; i < m; i++) {
        cin >> s >> t;
        s = find(join, s);
        t = find(join, t);
        if (s != t) {
            if (num[s] < num[t])
                join[s] = join[t];
            else {
                join[t] = join[s];
                if (num[s] == num[t])
                    num[s]++;
            }
        }
    }
    int q;
    cin >> q;
    for (int i = 0; i < q; i++) {
        cin >> s >> t;
        if (find(join, s) == find(join, t))
            cout << "yes\n";
        else
            cout << "no\n";
    }
}
```
Please note that if the input/output speed is not a problem, then step 3 is not necessary.