The given program uses the Union-Find data structure for disjoint set unions. However, it has a very inefficient Find operation which results in a high running time. This can be optimized by applying a technique called "path compression" in the find operation, which flattens the structure of the tree whenever Find is executed. Each node in the tree will directly point to the root of the tree which improves the running time to nearly constant.

Let's optimize the program:

1. Modify the find function to implement path compression.

Here is the optimized version of the program:

```cpp
#include <iostream>
using namespace std;

int find(int join[], int x) {
  if (x != join[x])
    join[x] = find(join, join[x]);
  return join[x];
}

int main(int argc, char *argv[]) {
  int n, m, join[100000], num[100000], s, t;
  cin >> n >> m;
  
  for (int i = 0; i < n; i++) {
    join[i] = i;
    num[i] = 0;
  }
  
  for (int i = 0; i < m; i++) {
    cin >> s >> t;
    s = find(join, s);
    t = find(join, t);
    
    if (s != t) {
      if (num[s] < num[t])
        join[s] = join[t];
      else {
        join[t] = join[s];
        if (num[s] == num[t])
          num[s]++;
      }
    }
  }
  
  int q;
  cin >> q;
  
  for (int i = 0; i < q; i++) {
    cin >> s >> t;
    if (find(join, s) == find(join, t))
      cout << "yes\n";
    else
      cout << "no\n";
  }
}
```
This optimization improves the time complexity of the find operation from O(n) to almost O(1), which significantly improves the overall running time of the program.