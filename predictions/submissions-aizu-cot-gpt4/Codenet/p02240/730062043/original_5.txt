The program given is implementing the union-find data structure, which is often used in graph algorithms to quickly determine whether two elements are in the same set or not. It is also used to join two sets.

Optimizations:

1. Path Compression: This is an optimization technique for the union-find algorithm. In the find function, once the root of a node is found, the parent of every node encountered on the way up is set to the root. This greatly reduces the tree's height in the future, resulting in faster queries.

2. Using fast input/output methods: The cin and cout operations are slower than using scanf and printf. This could significantly reduce the running time for large inputs.

3. Reserve output: Instead of outputting "yes" or "no" right away, we could store them in a string and output all at once. This could reduce IO operations and therefore, reducing the running time.

Optimized Program:

```cpp
#include <iostream>
#include <cstdio>
#include <string>

using namespace std;

int join[100000], num[100000];

int find(int x) {
    if (join[x] != x) {
        join[x] = find(join[x]); // path compression
    }
    return join[x];
}

int main() {
    ios_base::sync_with_stdio(false); 
    cin.tie(NULL); // fast IO
    
    int n, m, s, t;
    
    scanf("%d %d", &n, &m);

    for (int i = 0; i < n; i++) {
        join[i] = i;
        num[i] = 0;
    }
    for (int i = 0; i < m; i++) {
        scanf("%d %d", &s, &t);
        s = find(s);
        t = find(t);
        if (s != t) {
            if (num[s] < num[t])
                join[s] = join[t];
            else {
                join[t] = join[s];
                if (num[s] == num[t])
                    num[s]++;
            }
        }
    }
    int q;
    string result = "";
    
    scanf("%d", &q);
    
    for (int i = 0; i < q; i++) {
        scanf("%d %d", &s, &t);
        if (find(s) == find(t))
            result += "yes\n";
        else
            result += "no\n";
    }
    printf("%s", result.c_str());
    return 0;
}
```
This version of the program uses less memory and runs faster because of path compression, faster IO and reduced IO operations.