The main optimization for this program needs to be done in the `find` function. This function is currently using recursion which could lead to a stack overflow for large inputs. Instead, we can use iteration to make it more efficient.

Furthermore, we can use path compression in the `find` function. Path compression is a technique where when we find the root of a set, we make all the elements in the path from the original element to the root point directly to the root. This significantly reduces the tree depth and speeds up future queries.

Here are the optimization steps:

1. Replace recursion with iteration in the `find` function.
2. Apply path compression in the `find` function.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;

int find(int join[], int x) {
  int root = x;
  while (root != join[root]) {
    root = join[root];
  }
  
  // Path compression
  while (x != root) {
    int next = join[x];
    join[x] = root;
    x = next;
  }
  
  return root;
}

int main(int argc, char *argv[]) {
  int n, m, join[100000], num[100000], s, t;
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    join[i] = i;
    num[i] = 0;
  }
  for (int i = 0; i < m; i++) {
    cin >> s >> t;
    s = find(join, s);
    t = find(join, t);
    if (s != t) {
      if (num[s] < num[t])
        join[s] = join[t];
      else {
        join[t] = join[s];
        if (num[s] == num[t])
          num[s]++;
      }
    }
  }
  int q;
  cin >> q;
  for (int i = 0; i < q; i++) {
    cin >> s >> t;
    if (find(join, s) == find(join, t))
      cout << "yes\n";
    else
      cout << "no\n";
  }
}
```

This program is now optimized for both running time and memory usage.