We can make the following optimizations to the given C/C++ program:

1. **Path Compression in Union-Find Algorithm:** The `find` function is a typical representation of a disjoint-set data structure. A common optimization for this kind of data structure is path compression, which flattens the structure of the tree whenever `find` is called. It means, when we perform a `find`, we make each node on the path point directly to the root. This would make subsequent `find` operations faster. This optimization reduces the time complexity from O(n) to almost O(1).

2. **Input and Output Optimization:** Another optimization that can be done is to replace `cin` and `cout` with faster input/output methods because `cin` and `cout` are slower. For this, we can use `scanf` and `printf` which are faster.

3. **Avoid Unnecessary Global Variables:** We can also reduce the use of global variables, and pass them as function arguments as needed.

Here is the optimized code after applying these optimizations:

```cpp
#include <cstdio>
using namespace std;

int find(int join[], int x) {
    if (join[x] != x) {
        join[x] = find(join, join[x]);
    }
    return join[x];
}

int main() {
    int n, m, s, t, q;
    scanf("%d%d", &n, &m);
    int join[100000], num[100000];
    for (int i = 0; i < n; i++) {
        join[i] = i;
        num[i] = 0;
    }
    for (int i = 0; i < m; i++) {
        scanf("%d%d", &s, &t);
        s = find(join, s);
        t = find(join, t);
        if (s != t) {
            if (num[s] < num[t])
                join[s] = join[t];
            else {
                join[t] = join[s];
                if (num[s] == num[t])
                    num[s]++;
            }
        }
    }
    scanf("%d", &q);
    for (int i = 0; i < q; i++) {
        scanf("%d%d", &s, &t);
        if (find(join, s) == find(join, t))
            printf("yes\n");
        else
            printf("no\n");
    }
    return 0;
}
```

Please note that this program now uses `scanf` and `printf` for input/output and the `find` function has been updated to perform path compression. This will make the program run faster and use less memory. Also, the global variables are now declared locally.
