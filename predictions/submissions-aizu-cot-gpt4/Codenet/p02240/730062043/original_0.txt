Here are some steps we can take to optimize the given program:

1. **Use of Path Compression in Disjoint Set Union (DSU):** In the find function, we are recursively finding the parent of a node. We can improve this process by also updating the parent of the given node during recursion, this technique is known as path compression. It will improve the time complexity of DSU operations from O(n) to almost O(1).

2. **Avoiding the use of std::endl:** std::endl not only inserts a new line but also calls std::flush, which can cause unnecessary overhead. Instead, we can just output "\n".

3. **Faster I/O:** The cin and cout operations are slower. To make the input-output operations faster we can use std::ios::sync_with_stdio(false), cin.tie(NULL) and cout.tie(NULL). This will make the execution of the program faster.

Here is the optimized C++ program:

```cpp
#include <iostream>

using namespace std;

int find(int join[], int x) {
    return join[x] = (x == join[x]) ? x : find(join, join[x]);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n, m, join[100000], num[100000], s, t;
    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        join[i] = i;
        num[i] = 0;
    }
    for (int i = 0; i < m; i++) {
        cin >> s >> t;
        s = find(join, s);
        t = find(join, t);
        if (s != t) {
            if (num[s] < num[t])
                join[s] = join[t];
            else {
                join[t] = join[s];
                if (num[s] == num[t])
                    num[s]++;
            }
        }
    }
    int q;
    cin >> q;
    for (int i = 0; i < q; i++) {
        cin >> s >> t;
        if (find(join, s) == find(join, t))
            cout << "yes\n";
        else
            cout << "no\n";
    }
    return 0;
}
```
