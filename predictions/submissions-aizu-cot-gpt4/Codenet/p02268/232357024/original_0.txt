In the given code, there are a few optimizations that can be made to reduce running time and memory usage:

1. Use Fast Input/Output: Reading or writing data is one of the most time-consuming operations. Using C++ I/O (cin, cout) is slower than scanf and printf from C. However, if we use cin and cout with ios_base::sync_with_stdio(false); cin.tie(NULL); this can speed up the I/O operations.

2. Avoid Variables Declaration Inside Loop: We can avoid the declaration of variable 'T' and 'mid' inside the for loop.

3. Dynamic Memory Allocation: Static memory allocation like 'int S[n]' is not safe. It's better to use dynamic memory allocation which is safer and more flexible.

4. Use '\n' Instead of endl: The endl command in C++ will flush the stream, which will cause the program to slow down. Using '\n' is generally faster when you need to add a new line.

Here is the optimized version of your code:

```cpp
#include <iostream>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false); 
    cin.tie(NULL);

    int n;
    cin >> n;
    int* S = new int[n]; // Dynamic memory allocation
    for (int i = 0; i < n; ++i) {
        cin >> S[i];
    }

    int cnt = 0;
    int q, T, mid;
    cin >> q;

    for (int i = 0; i < q; ++i) {
        cin >> T;
        int left = 0;
        int right = n;
        mid = (right + left) / 2;
        while (left < right) {
            if (T > S[mid]) {
                left = mid + 1;
            } else if (T < S[mid]) {
                right = mid;
            } else {
                ++cnt;
                break;
            }
            mid = (right + left) / 2;
        }
    }
    cout << cnt << '\n'; // Use '\n' instead of endl

    delete[] S; // Deallocate the memory
    return 0;
}
```

This optimized code improves the I/O operations, uses dynamic memory allocation, avoids variable declaration inside the loop, and replaces endl with '\n' to speed up execution. Also, it's important to deallocate the memory after usage to prevent memory leaks.