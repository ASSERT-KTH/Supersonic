The optimization steps would be:

1. Instead of using scanf and printf, use cin and cout as they are faster in C++ and this also eliminates the need to include cstdio.
2. The allocation of array S[n] is not standard in C++. It is better to use vector<int> S(n) which is a dynamic array and is standard in C++.
3. You are recalculating mid in every iteration of the inner while loop. Instead, you can calculate mid only when left or right is modified. This will reduce the unnecessary calculation of mid.
4. The binary search code can be rewritten using STL function lower_bound which will simplify the code and potentially make it more efficient.

Here's the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false); 
  cin.tie(NULL);
  
  int n;
  cin >> n;
  vector<int> S(n);
  for (int i = 0; i < n; ++i) {
    cin >> S[i];
  }
  int cnt = 0;
  int q;
  cin >> q;
  for (int i = 0; i < q; ++i) {
    int T;
    cin >> T;
    if(binary_search(S.begin(),S.end(),T)) {
        ++cnt;
    }
  }
  cout << cnt << "\n";
  return 0;
}
```
The line "ios_base::sync_with_stdio(false); cin.tie(NULL);" is used to make cin and cout more efficient. It turns off the synchronization between the C and C++ standard streams.