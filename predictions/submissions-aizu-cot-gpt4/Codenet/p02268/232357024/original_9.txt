Here are some steps to optimize the given C/C++ program:

1. Using C++ Standard Template Library (STL) `std::vector` instead of a C-style array: Vectors are more efficient than arrays because you don't need to know the size at compile time. They can expand as needed, which is very powerful, especially for input of unknown or variable size.

2. The `scanf` function is slower than `cin`, as it has to parse the format string at runtime. `cin` is faster because the type is known at compile time. However, `cin` and `cout` can be slower than `printf` and `scanf` if synchronization with C's standard streams (which is enabled by default) is not turned off. We can disable this synchronization to speed up `cin` and `cout`.

3. The given program uses binary search to find if an element exists in the array. However, it can be optimized by using the C++ STL function `std::binary_search` which does the same thing more efficiently.

4. Declaring variables `left`, `right`, `mid` inside the loop means that these variables will be created and destroyed in each iteration. Moving their declaration outside of the loop will reduce memory usage.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n;
    cin >> n;
    vector<int> S(n);
    for (int &val : S) {
        cin >> val;
    }

    int cnt = 0;
    int q, T;
    cin >> q;
    int left, right, mid;
    for (int i = 0; i < q; ++i) {
        cin >> T;
        if(binary_search(S.begin(), S.end(), T)){
            ++cnt;
        }
    }
    cout << cnt << "\n";
    return 0;
}
```

Note that if the input array is not sorted, you should sort it before using `std::binary_search`.