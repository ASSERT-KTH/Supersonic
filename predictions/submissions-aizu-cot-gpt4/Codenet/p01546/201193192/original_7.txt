The code you've provided is a complex and advanced algorithm that solves a problem using graph theory and dynamic programming. However, several minor optimizations can still be made to this code. Here are some of them:

1. Avoid unnecessary usage of `#define`. In this case, the `for_` and `for_rev` macros are unnecessary. They don't make the code any faster or more readable, and may even cause confusion to some readers. We can replace them with conventional for-loops.

2. Avoid using `#include <bits/stdc++.h>`. This header file includes a large number of standard library headers, which increases the compile time. Instead, we should only include the headers that our program actually needs.

3. Minimize the use of temporary vectors in the `mul` function. Instead of creating a new vector `res` and assigning `a` to it, we can directly work on `a`.

4. In the `shortPhase` function, instead of checking `if (max_score >= K)` twice, we can use a `do while` loop to optimize it. 

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

typedef vector<int> Ary;
typedef vector<Ary> Mat;

struct Edge {
  int to, c;
};

void maxUpdate(int &a, int b) { a = max(a, b); }

void mul(Mat &a, Mat &b) {
  int N = a.size();
  for(int i = 0; i < N; ++i) {
    for(int j = 0; j < N; ++j) {
      for(int k = 0; k < N; ++k) {
        if (a[i][k] >= 0 && b[k][j] >= 0)
          maxUpdate(a[i][j], a[i][k] + b[k][j]);
      }
    }
  }
}

int V, K, E, dp[155][155], prv[155][155];
vector<vector<Edge>> adj;

void restore(int step, int v) {
  int c = step;
  vector<int> path;
  while (v != -1) {
    path.push_back(v);
    v = prv[c--][v];
  }
  reverse(path.begin(), path.end());
  for(int i = 0; i < step + 1; ++i) cout << path[i] << (i < step ? " " : "\n");
}

bool shortPhase() {
  memset(dp, -1, sizeof(dp));
  memset(prv, -1, sizeof(prv));
  for(int v = 0; v < V; ++v) dp[0][v] = 0;
  int max_score = -1, step = -1, terminal = -1;
  do {
    for(int v = 0; v < V; ++v) {
      if (dp[step][v] == -1)
        continue;
      for (Edge e : adj[v]) {
        if (dp[step + 1][e.to] < dp[step][v] + e.c) {
          dp[step + 1][e.to] = dp[step][v] + e.c;
          prv[step + 1][e.to] = v;
          if (max_score < dp[step + 1][e.to]) {
            max_score = dp[step + 1][e.to];
            terminal = e.to;
          }
        }
      }
    }
    step++;
  } while(max_score < K && step < 150);
  if (max_score >= K) {
    cout << step << endl;
    restore(step, terminal);
    return true;
  }
  if (max_score == -1) {
    cout << -1 << endl;
    return true;
  }
  return false;
}

int calcMinStep() {
  Mat mat[21], ini(V, Ary(V, -1));
  for(int v = 0; v < V; ++v) {
    for (Edge e : adj[v]) {
      maxUpdate(ini[v][e.to], e.c);
    }
  }
  mat[0] = ini;
  for(int i = 0; i < 20; ++i) mul(mat[i + 1], mat[i]);
  int res = 0;
  Mat x(V, Ary(V, -1)), nx;
  for(int v = 0; v < V; ++v) x[v][v] = 0;
  for(int h = 19; h >= 0; --h) {
    mul(nx, mat[h]);
    int max_score = 0;
    for(int u = 0; u < V; ++u) {
      for(int v = 0; v < V; ++v) {
        maxUpdate(max_score, nx[u][v]);
      }
    }
    if (max_score < K) {
      x = nx;
      res += 1 << h;
    }
  }
  return res + 1;
}

void solve() {
  if (!shortPhase()) {
    int ans = calcMinStep();
    cout << (ans > (int)1e6 ? -1 : ans) << endl;
  }
}

int main() {
  cin >> V >> E >> K;
  adj.assign(V, vector<Edge>());
  for(int i = 0; i < E; ++i) {
    int u, v, c;
    cin >> u >> v >> c;
    adj[u].push_back(Edge{v, c});
  }
  solve();
}
```