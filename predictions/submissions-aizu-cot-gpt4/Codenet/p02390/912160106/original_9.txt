You can optimize this code in a few ways:

1. Instead of using separate subtraction operations to update the value of `is`, you can use the modulus operator (`%`). This operation directly gives the remainder of a division operation, which is exactly what you're trying to calculate in the second and third steps.

2. Instead of storing the input in `is` and then replacing its value, you can directly store the input in `h`, `m`, and `s`. This reduces the memory usage because you're using one less variable.

3. You can also make the input and output operations more efficient by using `std::ios_base::sync_with_stdio(false);`. This line of code disables the synchronization between the C and C++ standard streams. By default, all standard streams are synchronized at the beginning and the end of the program. Turning off synchronization can speed up input/output operations.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  int h, m, s;
  cin >> s;
  h = s / 3600;
  s %= 3600;
  m = s / 60;
  s %= 60;
  cout << h << ":" << m << ":" << s << endl;
  return 0;
}
```

This optimized program does exactly the same thing as the original program, but it runs faster and uses less memory.