Here are some steps to optimize the program:

1. Use int main() instead of main(c), because the latter is not standard and may not work on some compilers.
2. Use int instead of auto-int for variables, because auto-int is deprecated and may not work on some compilers.
3. Use bool or int for boolean variables, because '!!' operator is used to convert integer to boolean.
4. Use memset with sizeof operator to clear the array, because it's safer and clearer.
5. Use explicit comparison in the condition of for loop, because it's clearer.
6. Use a constant instead of a magic number 232, because it's clearer and easier to modify.
7. Use functions to calculate the values of b and h, because it's clearer and easier to understand.
8. Use a variable to store the result of printf, because it's clearer and can avoid unnecessary computation.

Here is the optimized program:

```c++
#include <stdio.h>
#include <string.h>
#include <unistd.h>

const int ARRAY_SIZE = 99;
const int MODULUS = 5;
const int PRINTF_BUFFER_SIZE = 232;

int R[ARRAY_SIZE];
int i, h, b;

bool isCharacterInArray(int c) {
  return R[c];
}

bool isCharacterNotInArray(int c) {
  return !R[c];
}

void updateArray(int c) {
  R[c] ^= 1 << i % MODULUS;
}

int main() {
  int c;
  for (; read(0, &c, 1) == 1;
       ++i > 9 && memset(R, i = h = b = printf("%d %d\n", h, b - h) != 0, sizeof(R))) {
    b += isCharacterInArray(c);
    h += isCharacterNotInArray(c);
    updateArray(c);
  }
  return 0;
}
```

Please note that the original program is very obfuscated and it's hard to understand what it's doing. The optimized program is clearer, but it may not be correct because the original program is so obfuscated.