The given C/C++ code is written in a very cryptic and obfuscated manner, which makes it hard to understand and optimize. However, there are some obvious changes that can be made to improve the efficiency of this code.

1. The global variables R, i, h, and b are not typed. In C not typing a variable defaults it to int, but this is bad practice and can lead to confusion and bugs. We should specify the types of these variables to make the code clearer.

2. The for loop in the main function is doing too much. It's not only looping, but also reading from input, performing bitwise operations, and printing output. We should break down these operations into separate functions to make the code easier to understand and optimize.

3. The use of the bitwise operator and the mod operator in the for loop is unnecessary and may slow down the code. We can replace the bitwise operation with a simple assignment and remove the mod operator by resetting the variable i when it reaches 5.

4. The usage of the function memset() with a size of 232 is incorrect, as the array R is only of size 99. This could lead to writing out of bounds of the array, which is undefined behavior in C/C++.

5. The use of the read() function for reading a single byte from the input is inefficient. We can use the standard input function getchar() which is faster because it buffers the input.

6. The main function does not have a return statement, which is bad practice. We should add a return statement at the end of main to indicate that the program has finished successfully.

Here is the optimized code:

```c
#include<stdio.h>

int R[99], i, h, b;

void process(int c) {
  b += !!R[c];
  h += !(R[c] = (i < 5) ? 1 : 0);
  if (++i > 9) {
    printf("%d %d\n", h, b - h);
    i = h = b = 0;
  }
}

int main() {
  int c;
  while ((c = getchar()) != EOF)
    process(c);
  return 0;
}
```
In this optimized code, we first include the stdio.h header file for the input/output functions. We then type the global variables as int and define a function process() that performs the operations previously done in the for loop. The main function now only reads from input and calls process(). Finally, we add a return statement at the end of main.