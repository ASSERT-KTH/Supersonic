Here is the optimization process:

1. **Avoid Global Variables:** Global variables are stored in heap, which is slower compared to stack. Therefore, the variables `R[99]`, `i`, `h`, and `b` are moved inside the main function. This will reduce the access time.

2. **Avoid Using Modulus Operator:** The modulus operator `%` is computationally expensive. Since `i % 5` will always be within the range 0 to 4, we can replace `i % 5` with `i - 5 * (i / 5)`, which gives the same result but is faster.

3. **Use Local Variable for Recurring Calculations:** The expression `1 << i - 5 * (i / 5)` is used twice in the program. Calculating it once and storing it in a local variable reduces computation time.

4. **Avoid Using Not Operator Twice:** `!!R[c]` can be replaced with `R[c] != 0`. This is easier to read and understand.

Here is the optimized code:

```c
#include <unistd.h>
#include <stdio.h>
#include <string.h>

int main(int c) {
    int R[99] = {0}, i = 0, h = 0, b = 0;
    for (; read(0, &c, 1); ++i) {
        if (i > 9) {
            memset(R, 0, sizeof(R));
            printf("%d %d\n", h, b - h);
            i = h = b = 0;
        }
        int shift = 1 << (i - 5 * (i / 5));
        b += R[c] != 0;
        h += !(R[c] ^= shift);
    }
    return 0;
}
```
This optimized code should run faster and use less memory than the original code.