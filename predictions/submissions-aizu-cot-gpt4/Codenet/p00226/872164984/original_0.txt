The given program has a number of inefficiencies and areas that can be improved:

1. Global variables: The variables `R[99]`, `i`, `h`, and `b` are globally declared, which can lead to unnecessary memory usage. They can be declared inside the main function to limit their scope, reducing memory usage.

2. The use of the function `memset`: This function is used to set all bits of a variable to a specific value. In this case, it is being used to reset all values in the array `R` to `i = h = b = !printf("%d %d\n", h, b - h)`. The `memset` function is typically less efficient than direct assignment. Therefore, a loop can be used to manually reset the values in `R`, and the variables `i`, `h`, and `b` can be reset directly.

3. The use of bitwise operations: Bitwise operations are generally slower than arithmetic operations. The code `R[c] ^= 1 << i % 5` can be replaced with a simple assignment `R[c] = 1` and `R[c] = 0` depending on the value of `i % 5`.

Considering these points, here's the optimized version of the code:

```c
int main() {
    int R[99] = {0};
    int i = 0, h = 0, b = 0, c;
    while (read(0, &c, 1)) {
        b += !!R[c];
        if (!(R[c] = i % 5 == 0 ? 1 : 0)) {
            h++;
        }
        if (++i > 9) {
            printf("%d %d\n", h, b - h);
            for (int j = 0; j < 99; j++) {
                R[j] = 0;
            }
            i = h = b = 0;
        }
    }
    return 0;
}
```

This version of the code is better optimized for both running time and memory usage. The use of global variables has been minimized, the use of the less efficient `memset` function has been avoided, and the slower bitwise operations have been replaced with faster arithmetic operations.