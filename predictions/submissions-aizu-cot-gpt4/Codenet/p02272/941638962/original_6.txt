Here are some steps to optimize the program in terms of running time and memory usage:

1. Avoid Global Variables: In your program, you are using global variables which is not a good practice. In larger programs, it can make it difficult to keep track of what's modifying the variable, and can increase the chance of bugs. It can also increase memory usage because the lifetime of a global variable is the entire runtime of the program.

2. Optimize Input/Output operations: In C++, cin and cout are slower than scanf and printf. But if you include the line `ios_base::sync_with_stdio(false);` at the beginning of the main function, cin and cout can be as fast as scanf and printf.

3. Use std::vector Instead of Raw Arrays: std::vector is a dynamic array and is safer and easier to manage than raw arrays. It automatically manages its memory. If you are not careful with raw arrays, you can run into memory leaks or out of bounds errors. 

4. Avoid Unnecessary Copies: In your merge function, you are copying elements from the original array to the Left and Right arrays. This is unnecessary and can be avoided by directly accessing the elements in the original array. This reduces the memory usage and also the time spent on copying elements.

After applying these optimizations, the optimized program is as follows:

```cpp
#include <iostream>
#include <vector>
using namespace std;

void mergesort(vector<int>&, int, int);
void merge(vector<int>&, int, int, int);

int main() {
    ios_base::sync_with_stdio(false);
    int n;
    cin >> n;
    vector<int> S(n);
    for (int i = 0; i < n; i++)
        cin >> S[i];
    int count = 0;
    mergesort(S, 0, n);
    for (int i = 0; i < n; i++) {
        cout << S[i];
        if (i != n - 1)
            cout << " ";
    }
    cout << "\n" << count << "\n";
    return 0;
}

void mergesort(vector<int>& S, int left, int right) {
    if (left + 1 < right) {
        int mid = (left + right) / 2;
        mergesort(S, left, mid);
        mergesort(S, mid, right);
        merge(S, left, mid, right);
    }
}

void merge(vector<int>& S, int left, int mid, int right) {
    int n1 = mid - left;
    int n2 = right - mid;
    int i = 0, j = mid, k = left;
    while (k < right) {
        if (j >= right || (i < mid && S[i] <= S[j])) {
            S[k++] = S[i++];
        } else {
            S[k++] = S[j++];
            count += mid - i;
        }
    }
}
```

This optimized program avoids global variables, uses std::vector instead of raw arrays, avoids unnecessary copying, and optimizes input/output operations.