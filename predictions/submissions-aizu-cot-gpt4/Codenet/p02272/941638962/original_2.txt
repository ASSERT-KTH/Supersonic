The given program is using Merge Sort to sort an array. There are a few areas where we can make optimizations to improve both time complexity and memory usage:

1. Avoid Global Variables: Using global variables can lead to excessive memory usage, especially when the variables are arrays with a large size. In this case, we can move the declaration of the variables `n1`, `n2`, `i`, `j`, `k`, `Left` and `Right` from the global scope to the local scope of the `merge` function where they are actually used.

2. Avoid unnecessary Copying: In the `merge` function, the elements of the original array are being copied to two temporary arrays `Left` and `Right`. This step is not necessary and can be avoided by directly using the original array for comparison.

3. Use a Better Way to Print the Array: In the current code, the array is being printed element by element in a loop. This is not efficient and can be improved by using `printf`'s format specifiers and a loop.

Here is the optimized version of your code based on the above optimizations:

```c
#include <stdio.h>
#define MAX 1000000001

void mergesort(int *, int, int);
void merge(int *, int, int, int);

int count = 0, n;

int main(void) {
    int S[500000];
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
        scanf("%d", &S[i]);
    mergesort(S, 0, n);
    for (int i = 0; i < n; i++) {
        printf("%d", S[i]);
        if (i != n - 1)
            printf(" ");
    }
    printf("\n%d\n", count);
    return 0;
}

void mergesort(int *S, int left, int right) {
    int mid;
    if (left + 1 < right) {
        mid = (left + right) / 2;
        mergesort(S, left, mid);
        mergesort(S, mid, right);
        merge(S, left, mid, right);
    }
}

void merge(int *S, int left, int mid, int right) {
    int n1 = mid - left;
    int n2 = right - mid;
    int i = 0;
    int j = mid;
    int k = left;
    while (k < right) {
        if (S[j] > S[i])
            S[k++] = S[i++];
        else
            S[k++] = S[j++];
        if (i == mid) i = right;
        if (j == right) j = mid;
    }
    count += right - left;
}
```

Please pay attention that the optimization level might depend on the compiler optimizations. It might do some of these optimizations automatically.