The given program is a simple implementation of merge sort algorithm that sorts an array of integers. To optimize the program, the following steps can be taken:

1. Initializing variables: Variables n1, n2, n, i, j in the merge function are declared but not initialized immediately which may lead to unnecessary memory allocation. We can declare and initialize these variables in the same line which will make the program more efficient and easier to read.

2. Inline variable declaration: Variables i and j can be declared inside the for loop - this is a common practice in modern C/C++ and can make the logic clearer.

3. Avoiding unnecessary usage of global variables: Global variables increase memory usage and can be avoided in this case. The 'cnt' variable can be declared inside the main function and passed to the merge function as a reference parameter.

4. Use of std::endl: Using std::endl to insert a newline character and flush the stream is more expensive in terms of time and performance than using '\n' to insert a newline character.

Here is the optimized code:

```cpp
#include <algorithm>
#include <cstdio>
#include <iostream>
#include <string>
using namespace std;
const int INF = 1000000001;
const int MAX = 500000;

int S[MAX] = {0}, L[1 + MAX / 2] = {0}, R[1 + MAX / 2] = {0};

void merge(int *A, int left, int mid, int right, int &cnt) {
  int n1 = mid - left;
  int n2 = right - mid;
  for (int i = 0; i < n1; i++) {
    L[i] = A[left + i];
  }
  for (int i = 0; i < n2; i++) {
    R[i] = A[mid + i];
  }
  L[n1] = INF;
  R[n2] = INF;
  int i = 0;
  int j = 0;
  for (int k = 0; k < right - left; k++) {
    if (L[i] <= R[j]) {
      A[left + k] = L[i];
      i++;
    } else {
      A[left + k] = R[j];
      j++;
    }
    cnt++;
  }
}

void mergesort(int *A, int left, int right, int &cnt) {
  if (left + 1 < right) {
    int mid = (left + right) / 2;
    mergesort(A, left, mid, cnt);
    mergesort(A, mid, right, cnt);
    merge(A, left, mid, right, cnt);
  }
}

int main() {
  int N;
  int cnt = 0;
  cin >> N;
  for (int i = 0; i < N; i++) {
    cin >> S[i];
  }
  mergesort(S, 0, N, cnt);
  for (int i = 0; i < N; i++) {
    cout << S[i];
    if(i < N - 1) {
        cout << " ";
    } else {
        cout << "\n";
    }
  }
  cout << cnt << "\n";
  return 0;
}
```

Note: With this optimization, the code becomes more efficient but the overall time complexity and space complexity of the merge sort algorithm cannot be improved, it will remain O(n log n) and O(n) respectively.