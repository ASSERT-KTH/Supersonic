There are several ways to optimize this code:

1. Inline Functions: The merge and mergesort functions are small and called multiple times. By declaring them inline, we can potentially save the overhead of function calls.

2. Avoid Repeated Calculations: In the merge function, "right - left" is calculated twice, once in the for loop and once in the if condition. We can store this value in a variable and use it instead.

3. Use Fast IO: "cin" and "cout" are slower compared to scanf and printf. Therefore, we can use scanf and printf to speed up input/output.

4. Reduce Use of Global Variables: The use of global variables can lead to memory leaks and bugs. We can use local variables instead.

5. Use iostream instead of both iostream and cstdio. In this code, cstdio is not necessary.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <string>
using namespace std;

const int INF = 1000000001;
const int MAX = 500000;

inline void merge(int *A, int left, int mid, int right, int &cnt) {
  int n1, n2, n, i, j;
  int L[1 + MAX / 2] = {0}, R[1 + MAX / 2] = {0};

  n1 = mid - left;
  n2 = right - mid;
  for (int i = 0; i < n1; i++) {
    L[i] = A[left + i];
  }
  for (int i = 0; i < n2; i++) {
    R[i] = A[mid + i];
  }
  L[n1] = INF;
  R[n2] = INF;
  i = 0;
  j = 0;
  int range = right - left;

  for (int k = 0; k < range; k++) {
    if (L[i] <= R[j]) {
      A[left + k] = L[i];
      i++;
    } else {
      A[left + k] = R[j];
      j++;
    }
    cnt++;
  }
}

inline void mergesort(int *A, int left, int right, int &cnt) {
  int mid;
  if (left + 1 < right) {
    mid = (left + right) / 2;
    mergesort(A, left, mid, cnt);
    mergesort(A, mid, right, cnt);
    merge(A, left, mid, right, cnt);
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);

  int N, cnt = 0;
  int S[MAX] = {0};

  cin >> N;

  for (int i = 0; i < N; i++) {
    cin >> S[i];
  }
  
  mergesort(S, 0, N, cnt);
  
  for (int i = 0; i < N; i++) {
    if (i == N - 1) {
      cout << S[i] << "\n";
    } else {
      cout << S[i] << " ";
    }
  }
  cout << cnt << "\n";
  return 0;
}
```