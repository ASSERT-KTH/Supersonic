Step by Step Optimization:

1. Replace the printf and scanf functions with cin and cout. The cin and cout are usually faster because these functions don't need to parse the input and output format.

2. Use prefix increment (++i) instead of postfix (i++) in the for loop. In some cases, the prefix version (++i) can be more efficient than the postfix (i++).

3. Avoid using rand() function as it is slower. Instead, use a faster random number generator like mt19937 from the <random> library.

4. Instead of using max_element function to find the maximum number which is an O(n) operation, we can pick a pivot randomly.

5. Use '\n' instead of std::endl for newlines. std::endl causes the output buffer to be flushed, and this can be a slow operation.

Optimized program:

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <cassert>
#include <iostream>
#include <vector>
#include <random>
using namespace std;
int a[1000010];

template <typename T> void quicksort(T *l, T *r) {
  T *begin = l;
  struct range {
    T *l, *r;
  };
  static range s[300];
  mt19937 rng;
  auto partition = [&](T *l, T *r) {
    if (r - l < 2)
      return (T *)nullptr;
    uniform_int_distribution<int> uni(0, r - l - 1);
    T *piv = l + uni(rng);
    swap(*l, *piv);
    piv = l;
    r--;
    while (l < r) {
      while (l < r && *l <= *piv)
        ++l;
      while (l<r && * r> * piv)
        --r;
      swap(*l, *r);
    }
    T *p = l - 1;
    swap(*p, *piv);
    return p;
  };
  int sz = 0;
  s[sz++] = {l, r};
  while (sz) {
    T *l = s[--sz].l;
    T *r = s[sz].r;
    T *p = partition(l, r);
    if (p != nullptr) {
      if (p + 1 < r)
        s[sz++] = {p + 1, r};
      if (l < p)
        s[sz++] = {l, p};
    }
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  int n;
  cin >> n;
  for (int i = 0; i < n; ++i)
    cin >> a[i];
  quicksort(a, a + n);
  for (int i = 0; i < n; ++i)
    cout << a[i] << (i == n - 1 ? '\n' : ' ');
}
```