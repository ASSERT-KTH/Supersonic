First, let's break down the optimization steps:

1. **Using more efficient I/O methods**: The `scanf` and `printf` functions are slower compared to `cin` and `cout`. However, we can make `cin` and `cout` as fast as `scanf` and `printf` by using `ios_base::sync_with_stdio(false);` and `cin.tie(NULL);`. Also, we are using `printf` to print the array with a space or newline. We can simply use `cout` to do this more efficiently.

2. **Avoiding unnecessary checks**: In the `quicksort` function, there is a check for whether the pivot is the maximum element in the array. This check uses `max_element` which leads to unnecessary computations. We can remove this check to optimize the program.

3. **Using standard library functions**: Instead of implementing quicksort manually, we can use the `sort` function from the standard library. This function is usually implemented as introsort, which is a quicksort and heapsort hybrid that is both fast and avoids quicksort's worst-case scenario.

Here is the optimized version of the code:

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <cassert>
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <vector>
using namespace std;
int a[1000010];

int main() {
  ios_base::sync_with_stdio(false); 
  cin.tie(NULL);
  
  srand(time(0));
  int n;
  cin >> n;
  
  for (int i = 0; i < n; i++)
    cin >> a[i];

  sort(a, a + n);

  for (int i = 0; i < n; i++)
    cout << a[i] << (i == n - 1 ? '\n' : ' ');
}
```

Please note that the optimized code uses the standard library `sort` function which is generally more efficient and safer than implementing a sorting algorithm manually. However, if a custom sorting algorithm is required for a specific reason, the original `quicksort` function could be optimized further.