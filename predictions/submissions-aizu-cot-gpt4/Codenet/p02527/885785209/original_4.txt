Program Optimization:

1. In the partition function, we're using `max_element` to find the maximum element in the range. This is unnecessary and adds extra O(n) time complexity. Instead, we can just choose the last element as a pivot.

2. The program uses a custom quicksort function. But the Standard Template Library (STL) already provides a sort function which is optimized and probably faster than a custom one.

3. The program uses `scanf` and `printf` for input and output. We can use `cin` and `cout` instead which are simpler and easier to read.

4. The program uses a statically declared array 'a'. By using a vector, we can make the code safer and more flexible.

5. The program uses 'rand' for generating random pivot which is not a good practice. The pivot should be a median of three elements (first, middle, last).

Optimized program:

```C++
#include <iostream>
#include <vector>
#include <ctime>
#include <algorithm>
using namespace std;

int main() {
    srand(time(0));
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; i++)
        cin >> a[i];
    sort(a.begin(), a.end());
    for (int i = 0; i < n; i++)
        cout << a[i] << (i == n - 1 ? '\n' : ' ');
}
```

In this optimized version, we've eliminated the custom quicksort function and used STL's sort function instead. Also, we've replaced the static array with a vector and the `scanf` and `printf` functions with `cin` and `cout`. All of these changes help to optimize the program in terms of running time and memory usage.