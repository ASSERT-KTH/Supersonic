The major optimization for this code is to replace the custom quicksort function with the built-in sort function of C++. The built-in sort function uses a combination of quicksort, heapsort, and insertion sort, and it is usually more optimized than hand written sort functions. It also reduces the complexity of the code, which makes it more maintainable and less error-prone.

The other optimization is the use of cin and cout instead of scanf and printf. Although scanf and printf are slightly faster than cin and cout, the difference is negligible and cin and cout are safer and more C++ style. However, to keep the speed of cin and cout close to scanf and printf, we can use std::ios::sync_with_stdio(false). It will make sure that the C++ streams are not synchronized with the C streams.

Here is the optimized version of the code:

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <algorithm>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <vector>
using namespace std;
int a[1000010];

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  srand(time(0));
  int n;
  cin >> n;
  for (int i = 0; i < n; i++)
    cin >> a[i];
  sort(a, a + n);
  for (int i = 0; i < n; i++)
    cout << a[i] << (i == n - 1 ? '\n' : ' ');
}
```
The code now uses the built-in sort function and the cin and cout for I/O operations. The use of ios::sync_with_stdio(false) and cin.tie(0) ensure that the I/O operations are fast.