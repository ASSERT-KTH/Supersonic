Optimization Steps:
1. Use `std::unordered_map` to store the inserted numbers. This will give us O(1) time complexity for finding a number, instead of O(log n) in the binary search tree approach.
2. Remove the `find` function, as it's no longer needed
3. Replace the `insert` function with `std::unordered_map::insert` function
4. Remove the `Node` struct and related variables, as they are no longer needed
5. The `preorder` and `inorder` function will be removed because they can't be used with `std::unordered_map`.
6. Replace `printf` with `cout` for consistency
7. Use `std::endl` instead of `\n` for flushing the output buffer, which can be beneficial in some situations

Here is the optimized code:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;

unordered_map<int, bool> nodes;

int main() {
  int n, x;
  string com;
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> com;
    if (com == "insert") {
      cin >> x;
      nodes[x] = true;
    } else if (com == "print") {
      for (const auto &node : nodes)
        cout << node.first << " ";
      cout << endl;
    } else if (com == "find") {
      cin >> x;
      if (nodes.find(x) != nodes.end())
        cout << "yes" << endl;
      else
        cout << "no" << endl;
    }
  }
  return 0;
}
```

Please note that this code will not maintain the order of the elements as the original code does. If you need to maintain the order of the elements, you should use `std::map` instead of `std::unordered_map`.