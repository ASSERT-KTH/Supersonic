Here are some steps to optimize the given code:

1. Use `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(NULL);` at the beginning of the main function to reduce the time taken by cin and cout operations.

2. Use `'\n'` instead of `std::endl`. `std::endl` causes a flush operation which slows down the program.

3. Optimize memory usage by deleting the nodes in the binary tree when they are no longer needed. This can be done by creating a destructor for Node structure.

4. Rather than creating a new Node for every insert operation, we can create a pool of nodes at the start and then allocate from it as needed. This reduces the overhead of dynamic memory allocation. However, this optimization is more complex and may not be necessary if the number of nodes is not very large. 

Here is the optimized code:

```cpp
#include <cstdio>
#include <iostream>
using namespace std;
struct Node {
  int key;
  Node *parent, *left, *right;
  ~Node() {
    delete left;
    delete right;
  }
};
Node *root, *NIL;
void insert(int k) {
  Node *y = NIL;
  Node *x = root;
  Node *z;
  z = new Node;
  z->key = k;
  z->left = NIL;
  z->right = NIL;
  while (x != NIL) {
    y = x;
    if (z->key < x->key) {
      x = x->left;
    } else {
      x = x->right;
    }
  }
  z->parent = y;
  if (y == NIL) {
    root = z;
  } else {
    if (z->key < y->key)
      y->left = z;
    else
      y->right = z;
  }
}
bool find(int k) {
  Node *v = root;
  while (v != NIL) {
    if (k == v->key)
      return true;
    if (k < v->key) {
      v = v->left;
    } else {
      v = v->right;
    }
  }
  return false;
}
void inorder(Node *u) {
  if (u == NIL)
    return;
  inorder(u->left);
  printf(" %d", u->key);
  inorder(u->right);
}
void preorder(Node *u) {
  if (u == NIL)
    return;
  printf(" %d", u->key);
  preorder(u->left);
  preorder(u->right);
}
int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  int n, x;
  string com;
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> com;
    if (com == "insert") {
      cin >> x;
      insert(x);
    } else if (com == "print") {
      inorder(root);
      cout << '\n';
      preorder(root);
      cout << '\n';
    } else if (com == "find") {
      cin >> x;
      if (find(x))
        cout << "yes" << '\n';
      else
        cout << "no" << '\n';
    }
  }
  delete root;
  return 0;
}
```

Please note that these optimizations may not make a noticeable difference for small inputs, but they can significantly improve the performance for large inputs. The most impactful optimization here is likely the use of `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(NULL);` which can greatly speed up cin and cout operations.