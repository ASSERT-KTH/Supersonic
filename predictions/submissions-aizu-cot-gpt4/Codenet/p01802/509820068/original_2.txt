Here is the step by step explanation of the optimization:

1. Remove unnecessary `#include <map>` and `#include <string>` because there is no use of these libraries in the code.

2. The calculation `double cost = sqrt(i * i + j * j);` is repeated even when `i + j != d`. So, move this line under the condition `if (i + j == d) {`.

3. The variable `j` starts from `i` and goes up to `d`. But because of the condition `if (i + j == d)`, only one value of `j` will satisfy this. Hence, we can directly calculate `j` by using `j = d - i` instead of looping from `i` to `d`.

4. The calculation of `cost` and `gap` involves use of `sqrt` function which is computationally expensive. Hence, we can optimize the code by avoiding finding the square root until we need to print the result.

5. Replace magic number `100000` with `std::numeric_limits<double>::max()` for more clarity.

After applying these changes, here is the optimized version of the code:

```cpp
#include <iostream>
#include <math.h>
#include <limits>
using namespace std;

int main() {
  int d, e;
  while (1) {
    cin >> d >> e;
    double min = numeric_limits<double>::max();
    if (d == 0 && e == 0)
      break;

    for (int i = 0; i <= d; i++) {
      int j = d - i;
      double cost_sq = i * i + j * j;
      double gap_sq = (cost_sq - e * e) * (cost_sq - e * e);
      if (gap_sq < min) {
        min = gap_sq;
      }
    }
    cout << sqrt(min) << endl;
  }
  return 0;
}
```