Step 1: I/O operations in C++ using cin and cout are slower than scanf and printf in C. So it's recommended to use scanf and printf for faster I/O operations. Since you also have included cstdio, you can use printf instead of cout for output.

Step 2: Instead of using an infinite loop while(1) and breaking it when a condition is met, it is more efficient to use a while loop with the condition directly. It makes the code cleaner and avoids unnecessary loops.

Step 3: You are repeatedly calling the Q.top() method in the while loop. You can avoid these repeated function calls by calling it once and storing the result in a variable.

Step 4: Also, it's not necessary to create a default constructor for the struct data because you are not using it.

Here is the optimized version of your program:

```cpp
#include <cstdio>
#include <queue>
using namespace std;
const int MAX = 1000001;
int S[MAX];
struct data {
  int num, score;
  data(int n, int s) : num(n), score(s) {}
  bool operator<(const data &d) const {
    if (score != d.score)
      return score < d.score;
    return num > d.num;
  }
};
int main() {
  int n, m;
  scanf("%d %d", &n, &m);
  priority_queue<data> Q;
  Q.push(data(0, 0));
  while (m--) {
    int a, b;
    scanf("%d %d", &a, &b);
    S[a] += b;
    Q.push(data(a, S[a]));
    data now = Q.top();
    while (now.score != S[now.num]) {
      Q.pop();
      now = Q.top();
    }
    printf("%d %d\n", now.num, now.score);
  }
  return 0;
}
```
Please note that the actual performance gain from these optimizations might be minimal depending on the input size and the compiler optimizations.