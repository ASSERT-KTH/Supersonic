Optimization steps:

1. Use `std::ios_base::sync_with_stdio(false)` to disable synchronization between the C and C++ standard streams. This can potentially speed up I/O operations.

2. Use `cin.tie(NULL)` to untie `cin` from `cout`. This allows `cin` and `cout` to buffer independently, which can make I/O faster.

3. Replace `endl` with `'\n'`. `endl` causes a flush operation, which can be slower. `'\n'` achieves the same result without flushing the buffer.

4. Instead of creating a `data` variable `now` and then assigning it the value of `Q.top()`, declare `now` as a reference to `Q.top()`. This way, you avoid copying the object. However, remember to pop the queue before the next iteration to prevent accessing a destroyed object.

Here is the optimized code:

```cpp
#include <cstdio>
#include <iostream>
#include <queue>
using namespace std;
const int MAX = 1000001;
int S[MAX];
struct data {
  int num, score;
  data() {}
  data(int n, int s) : num(n), score(s) {}
  bool operator<(const data &d) const {
    if (score != d.score)
      return score < d.score;
    return num > d.num;
  }
};
int main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, m;
  scanf("%d %d", &n, &m);
  priority_queue<data> Q;
  Q.push(data(0, 0));
  while (m--) {
    int a, b;
    scanf("%d %d", &a, &b);
    S[a] += b;
    Q.push(data(a, S[a]));
    while (1) {
      const data &now = Q.top();
      if (now.score == S[now.num]) {
        cout << now.num << " " << now.score << '\n';
        break;
      }
      Q.pop();
    }
  }
  return 0;
}
```

Remember, the effectiveness of these optimizations can vary depending on the exact situation and the compiler being used. Always make sure to test your program to ensure the changes have the desired effect.