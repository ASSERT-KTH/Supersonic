Let's break down this given code and understand the optimization points:

1) The given code uses the 'iostream' library to output data but uses 'cstdio' for input. One can use 'iostream' for both input and output to maintain consistency and improve readability.

2) The 'while' loop in the code runs indefinitely until a break condition is met. Instead, a 'do-while' loop can be used where the condition is checked at the end of the loop. This can improve readability and maintainability of the code.

3) The 'now' object is created every time in the loop and is not used outside the loop. This could increase the memory footprint of the program. Instead, the 'now' object can be created once outside the loop and updated inside the loop.

4) The 'data' struct does not need a default constructor. Removing it can reduce the complexity of the code.

5) The 'data' struct is not a part of any class or namespace. Encapsulating it inside a namespace will improve the organization of the code.

6) The 'scanf' function is used for input which is slower compared to 'cin'. Using 'cin' will improve the performance of the code.

Here is the optimized version of the code considering the above points:

```cpp
#include <iostream>
#include <queue>
using namespace std;
const int MAX = 1000001;
int S[MAX];
namespace MySpace {
    struct data {
        int num, score;
        data(int n, int s) : num(n), score(s) {}
        bool operator<(const data &d) const {
            if (score != d.score)
                return score < d.score;
            return num > d.num;
        }
    };
}
int main() {
    int n, m;
    cin >> n >> m;
    priority_queue<MySpace::data> Q;
    Q.push(MySpace::data(0, 0));
    MySpace::data now;
    do {
        int a, b;
        cin >> a >> b;
        S[a] += b;
        Q.push(MySpace::data(a, S[a]));
        now = Q.top();
        if (now.score == S[now.num]) {
            cout << now.num << " " << now.score << endl;
        } else {
            Q.pop();
        }
    } while (now.score != S[now.num]);
    return 0;
}
```