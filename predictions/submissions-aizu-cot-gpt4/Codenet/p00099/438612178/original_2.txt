There are a few optimizations we can make:

1. Use scanf and printf instead of cin and cout for I/O operations. They are faster due to lower overhead.
2. Reserve memory for priority queue. This can help to reduce the number of memory reallocations.
3. Avoid the creation of unnecessary temporary data objects. Instead of creating a new 'now' object, we can directly use the object returned by Q.top(). 
4. Instead of using an endless loop with break statement, use a condition in while loop. This makes the code cleaner and easier to understand.

Let's apply these optimizations:

```
#include <cstdio>
#include <queue>
using namespace std;
const int MAX = 1000001;
int S[MAX];
struct data {
  int num, score;
  data() {}
  data(int n, int s) : num(n), score(s) {}
  bool operator<(const data &d) const {
    if (score != d.score)
      return score < d.score;
    return num > d.num;
  }
};
int main() {
  int n, m;
  scanf("%d %d", &n, &m);
  priority_queue<data> Q;
  Q.reserve(m); // Reserve memory
  Q.push(data(0, 0));
  while (m--) {
    int a, b;
    scanf("%d %d", &a, &b);
    S[a] += b;
    Q.push(data(a, S[a]));
    while (Q.top().score != S[Q.top().num]) {
      Q.pop();
    }
    printf("%d %d\n", Q.top().num, Q.top().score);
  }
  return 0;
}
```

Note: It's important to remember that the reserve method is not standard for priority_queue. If you are using a compiler that doesn't support it, you may need to use a custom priority queue or a different data structure altogether.