The main optimization possibilities for this program are:

1. Avoid unnecessary object creation: In the current program, a new `data` object is created every time we read from the queue. This can be avoided by using a reference instead.

2. Avoid using `endl`: `endl` not only inserts a newline but also flushes the stream which can be an expensive operation. Use `'\n'` instead when you only want to insert a newline.

3. Use `ios_base::sync_with_stdio(false)`: This unhooks C++ streams from their corresponding C streams. It can give a significant speedup.

4. Use `cin.tie(NULL)`: This unties `cin` from `cout`. When `cin` is tied to `cout`, any input operation on `cin` causes `cout` to be flushed. This can be unnecessary and cause a slowdown.

Here's the optimized program:

```C++
#include <cstdio>
#include <iostream>
#include <queue>
using namespace std;
const int MAX = 1000001;
int S[MAX];
struct data {
  int num, score;
  data() {}
  data(int n, int s) : num(n), score(s) {}
  bool operator<(const data &d) const {
    if (score != d.score)
      return score < d.score;
    return num > d.num;
  }
};
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, m;
  scanf("%d %d", &n, &m);
  priority_queue<data> Q;
  Q.push(data(0, 0));
  while (m--) {
    int a, b;
    scanf("%d %d", &a, &b);
    S[a] += b;
    Q.push(data(a, S[a]));
    while (1) {
      const data &now = Q.top();
      if (now.score == S[now.num]) {
        cout << now.num << " " << now.score << '\n';
        break;
      }
      Q.pop();
    }
  }
  return 0;
}
```
Please note that these optimizations are specific to C++ and may not apply to other languages. Also, they might not show significant improvement for smaller inputs but can greatly improve the performance for larger inputs.