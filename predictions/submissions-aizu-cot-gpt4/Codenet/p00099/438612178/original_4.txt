The optimization steps are as follows:

1. The usage of scanf() and printf() functions is faster than cin and cout because they are buffer-based and do not need to sync with the standard C streams while cin and cout have to.
2. Avoid repeatedly calling Q.top() and Q.pop() by storing the result in a variable.
3. Avoid the unnecessary creation of temporary data objects by using const references whenever possible.
4. Use "\n" instead of endl to avoid unnecessary flushing of the output buffer, which can slow down the output.

The optimized program is as follows:

```cpp
#include <cstdio>
#include <queue>
using namespace std;
const int MAX = 1000001;
int S[MAX];
struct data {
  int num, score;
  data() {}
  data(int n, int s) : num(n), score(s) {}
  bool operator<(const data &d) const {
    if (score != d.score)
      return score < d.score;
    return num > d.num;
  }
};
int main() {
  int n, m;
  scanf("%d %d", &n, &m);
  priority_queue<data> Q;
  Q.push(data(0, 0));
  while (m--) {
    int a, b;
    scanf("%d %d", &a, &b);
    S[a] += b;
    Q.push(data(a, S[a]));
    while (1) {
      const data &now = Q.top();
      if (now.score == S[now.num]) {
        printf("%d %d\n", now.num, now.score);
        break;
      }
      Q.pop();
    }
  }
  return 0;
}
```