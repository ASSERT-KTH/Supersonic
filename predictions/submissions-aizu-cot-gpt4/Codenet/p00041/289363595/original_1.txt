First of all, we can notice that this program is continuously printing 110000 '(' characters, which is a huge number and can be optimized. Instead of using a loop to print the same character 110000 times, we can just prepare a string of '(' characters and print that string. This can drastically reduce the execution time of the program.

Second, we also can notice that the program is reading 4 numbers and checking if the first number is 0 to break the loop. We can optimize this by checking the number immediately after reading it. If the first number is 0, then there is no need to read the remaining numbers.

Here is the optimized program:

```c++
#include <stdio.h>
#include <string.h>

int main() {
  int a[4];
  char str[110001];
  memset(str, '(', 110000);
  str[110000] = '\0';
  
  while(1) {
    scanf("%d", &a[0]);
    if (a[0] == 0) {
      break;
    }
    for (int i = 1; i < 4; ++i) {
      scanf("%d", &a[i]);
    }
    printf("%s", str);
    printf("%d+%d+%d+%d\n", a[0], a[1], a[2], a[3]);
  }
}
```
In this optimized program, we have used memset() to prepare a string of '(' characters and printf() to print that string. This can reduce the running time of the program. Also, we have moved the check for '0' immediately after reading the first number, which can save time when the first number is 0.