The program you have provided reads four integers into an array in an infinite while loop. If the first integer is zero, it breaks the loop. Otherwise, it prints out 110000 open parentheses, then the four integers separated by plus signs, and then a newline character.

Here is the optimized version of your code:

```
#include <stdio.h>

int main() {
  int a[4];
  while (scanf("%d", &a[0]), a[0]) {
    for (int i = 1; i < 4; ++i) {
      scanf("%d", &a[i]);
    }
    printf("%.*s%d+%d+%d+%d\n", 110000, "(", a[0], a[1], a[2], a[3]);
  }
}
```

Step by Step Optimization:

1. The first optimization is to merge the first scanf into the while loop condition. This reduces the number of times we need to check if `a[0] == 0` to exit the loop. Now, the scanf is executed, and then a[0] is checked. If it's zero, the loop ends. If not, the rest of the loop is executed.

2. We then start the for loop from 1 instead of 0 since we have already read the first integer in the while loop condition.

3. Next, we use `printf` to print the parentheses instead of calling `putchar` 110000 times which is quite inefficient. We use the `printf` field width specifier to repeat a single character.

Remember that this optimization assumes that we are okay with sacrificing some memory for runtime efficiency. If memory is a big concern, the original version may be more suitable, but in most cases, this is a reasonable trade-off.

Please note that this optimization is a micro-optimization. In realistic scenarios, the I/O operations such as `printf` and `scanf` will dominate the running time of this program, and optimizing the loop structure will have negligible impact.