Here are the optimization steps:

1. The first for loop is reading inputs into the array. Instead of checking for the condition a[0] == 0 after the loop, we can check it inside the loop while input is being read. This way, we can break the loop as soon as we encounter a[0] == 0, saving unnecessary iterations.

2. In the second for loop, we are just printing out '('. Instead of using a loop for this, we can use the printf function with a format specification to print the character '(' 110000 times. This saves a lot of time by removing the overhead of the loop.

3. Printf is slower than putchar but since we are printing a large number of same characters, using printf with format specification is faster in this case.

4. The compiler can't optimize the putchar('\n') as it can printf("\n"), so we can replace putchar('\n') with printf("\n"), it will be faster.

Now, let's implement these optimizations in code:

```c
#include <stdio.h>
int main() {
  int a[4];
  while (1) {
    for (int i = 0; i < 4; ++i) {
      scanf("%d", &a[i]);
      if (i == 0 && a[0] == 0) {
        return 0;
      }  
    }
    printf("%0*c", 110000, '(');
    printf("%d+%d+%d+%d\n", a[0], a[1], a[2], a[3]);
  }
  return 0;
}
```

This optimized code should run faster and use less memory than the original code.