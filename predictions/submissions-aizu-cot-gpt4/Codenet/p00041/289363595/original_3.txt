The program can be optimized in the following ways:

1. The function putchar() is being called 110000 times in a loop to print '(' character. This operation can be optimized by using printf() with a string of '(' repeated 110000 times.

2. The array a[] is being populated in each iteration of the while loop. Instead, we can input the values directly into the printf() function.

Here is the optimized code:

```c
#include <stdio.h>
int main() {
  int a[4];
  char str[110001];
  memset(str, '(', 110000);
  str[110000] = '\0';
  while (1) {
    scanf("%d %d %d %d", &a[0], &a[1], &a[2], &a[3]);
    if (a[0] == 0) {
      break;
    }
    printf("%s%d+%d+%d+%d\n", str, a[0], a[1], a[2], a[3]);
  }
}
```

In this version of the code, we declared a string `str` of size 110001 and filled it with '(' using `memset()`. The size is 110001 to accommodate for the null character at the end of the string. Then in the while loop, we input the values directly into `printf()`. This reduces the need for the first for loop which populated the array. The large number of `putchar()` calls are replaced with a single `printf()` call which prints the entire string of '(' characters.