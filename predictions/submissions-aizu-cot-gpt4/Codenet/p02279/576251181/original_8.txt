The program you've posted is a tree model where each node contains a pointer to its parent, its leftmost child and its right sibling. It reads a certain number of elements from the user input and maps the parent-child relationship among them. The program also prints each node's information including its parent, depth, type (root, leaf or internal node) and its children.

Here is the step by step optimization:

1. Merging separate `scanf` calls into one:
  Multiple `scanf` calls can be replaced by a single `scanf` call for efficiency. This reduces the number of function calls.

2. Reducing the use of redundant variables:
  The variable `c2` is redundant. We can directly assign the right sibling to the `c1` node.

3. Use of calloc over malloc:
  `Calloc` initializes the allocated memory to zero which makes the initialization of the structure members unnecessary. Moreover, it's safer than `malloc` because it checks for overflow when calculating the size of memory needed.

4. Replacing the `getDepth` function with a depth field in the structure:
  The `getDepth` function iteratively goes up the tree to find the depth of the node. We can save time by adding a depth field to the structure and updating it when we add nodes.

Here is the optimized version of your program:

```c
#include <stdio.h>
#include <stdlib.h>

typedef struct node {
  int id;
  int depth;
  struct node *parent;
  struct node *leftMostChild;
  struct node *rightSibling;
} * nodePointer;

nodePointer make1node(void);
void printNode(nodePointer);
void printType(nodePointer);
void printChild(nodePointer);
nodePointer init(int);
nodePointer head;

int main(void) {
  int i, j;
  int n;
  int id, k, c1;
  nodePointer p1, p2;
  nodePointer *arr;
  head = init(-1);
  scanf("%d", &n);
  arr = (nodePointer *)calloc(n, sizeof(nodePointer));
  for (i = 0; i < n; i++)
    arr[i] = init(i);
  for (i = 0; i < n; i++) {
    scanf("%d %d", &id, &k);
    for (j = 0; j < k; j++) {
      scanf("%d", &c1);
      if (j == 0) {
        arr[id]->leftMostChild = arr[c1];
      } else {
        p2->rightSibling = arr[c1];
      }
      arr[c1]->parent = arr[id];
      arr[c1]->depth = arr[id]->depth + 1;
      p2 = arr[c1];
    }
  }
  for (i = 0; i < n; i++)
    printNode(arr[i]);
  return 0;
}

nodePointer init(int id) {
  nodePointer p;
  p = make1node();
  p->id = id;
  return p;
}

void printNode(nodePointer p) {
  printf("node %d: ", p->id);
  if (p->parent != NULL)
    printf("parent = %d, ", p->parent->id);
  else
    printf("parent = -1, ");
  printf("depth = %d, ", p->depth);
  printType(p);
  printf(", ");
  printChild(p);
  printf("\n");
}

nodePointer make1node(void) {
  nodePointer p = (nodePointer)calloc(1, sizeof(struct node));
  return p;
}

void printType(nodePointer p) {
  if (p->parent == NULL)
    printf("root");
  else if (p->leftMostChild == NULL)
    printf("leaf");
  else
    printf("internal node");
}

void printChild(nodePointer p) {
  printf("[");
  if (p->leftMostChild != NULL) {
    p = p->leftMostChild;
    printf("%d", p->id);
    for (; p->rightSibling != NULL; p = p->rightSibling)
      printf(", %d", p->rightSibling->id);
  }
  printf("]");
}
```
Please note that the above code is optimized for running time. For memory optimization, you may need to free up the allocated memory once it is no longer needed.