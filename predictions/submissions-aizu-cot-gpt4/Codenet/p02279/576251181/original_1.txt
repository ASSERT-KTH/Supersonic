Step 1: Remove Redundant Code
In the main function, there is a redundant variable head. It is initialized but never used in the code. We can remove this variable to improve memory usage.

Step 2: Apply Efficient Memory Allocation
In the main function, memory is allocated for the array arr but it is never freed which leads to a memory leak. So, we should free this memory after we are done using it to save memory.

Step 3: Optimize Depth Calculation
The function getDepth calculates the depth of a node by traversing up to the root for each node. This operation has a time complexity of O(n) for each node, resulting in a total complexity of O(n^2) for all nodes. We can instead calculate depth while building the tree and store it in each node. This will reduce the time complexity to O(n).

Step 4: Avoid Multiple Scans
In the main function, we are scanning the id and number of children (k) separately. Instead, we can scan them together to save runtime.

Now, let's implement these optimizations:

```
#include <stdio.h>
#include <stdlib.h>

typedef struct node {
  int id;
  int depth; // Add a depth field to optimize depth calculation
  struct node *parent;
  struct node *leftMostChild;
  struct node *rightSibling;
} * nodePointer;

nodePointer make1node(void);
void printNode(nodePointer);
void printType(nodePointer);
void printChild(nodePointer);
nodePointer init(int, int); // Modify init to accept depth as well
nodePointer *arr;

int main(void) {
  int i, j;
  int n;
  int id;
  int k;
  int c1, c2;
  scanf("%d", &n);
  arr = (nodePointer *)malloc(sizeof(nodePointer) * n);
  for (i = 0; i < n; i++)
    arr[i] = init(i, 0);
  for (i = 0; i < n; i++) {
    scanf("%d %d", &id, &k); // Scan id and k together
    for (j = 0; j < k; j++) {
      scanf("%d", &c1);
      if (j == 0) {
        arr[id]->leftMostChild = arr[c1];
      } else {
        arr[c2]->rightSibling = arr[c1];
      }
      arr[c1]->parent = arr[id];
      arr[c1]->depth = arr[id]->depth + 1; // Calculate depth here
      c2 = c1;
    }
  }
  for (i = 0; i < n; i++)
    printNode(arr[i]);
  free(arr); // Free memory after use
  return 0;
}

nodePointer init(int id, int depth) { // Modify init to accept depth
  nodePointer p;
  p = make1node();
  p->id = id;
  p->depth = depth; // Initialize depth
  p->parent = NULL;
  p->leftMostChild = NULL;
  p->rightSibling = NULL;
  return p;
}

void printNode(nodePointer p) {
  printf("node %d: ", p->id);
  if (p->parent != NULL)
    printf("parent = %d, ", p->parent->id);
  else
    printf("parent = -1, ");
  printf("depth = %d, ", p->depth); // Use stored depth
  printType(p);
  printf(", ");
  printChild(p);
  printf("\n");
}

nodePointer make1node(void) {
  nodePointer p = (nodePointer)malloc(sizeof(struct node));
  return p;
}

void printType(nodePointer p) {
  if (p->parent == NULL)
    printf("root");
  else if (p->leftMostChild == NULL)
    printf("leaf");
  else
    printf("internal node");
}

void printChild(nodePointer p) {
  printf("[");
  if (p->leftMostChild != NULL) {
    p = p->leftMostChild;
    printf("%d", p->id);
    for (; p->rightSibling != NULL; p = p->rightSibling)
      printf(", %d", p->rightSibling->id);
  }
  printf("]");
}
```