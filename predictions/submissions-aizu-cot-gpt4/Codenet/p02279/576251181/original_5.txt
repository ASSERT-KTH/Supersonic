The given program creates a tree data structure, with the nodes having an id, parent, leftmost child, and right sibling. The nodes are stored in an array, and relationships between them are established through input. The program then prints information about each node. The getDepth function calculates the depth of a node in the tree by traversing up to the root node. Here are some steps we can take to optimize this program:

1. Use `scanf("%d%d", &id, &k);` instead of two separate `scanf()` calls. This will reduce the number of system calls, and hence, will improve performance.

2. Use a local variable instead of calling `getDepth()` function in `printNode()`. Calling a function includes overheads like saving the program counter, saving and restoring registers, and it takes more time due to these overheads. 

3. Move the `printChild()` function call inside the if condition where we check if the `leftMostChild` is `NULL` or not. This way, we won't call `printChild()` when the `leftMostChild` is `NULL`.

4. Avoid unnecessary initialisation of `nodePointer p2;` in the `main()` function since it is not used anywhere in the program.

Here is the optimized code:

```c
#include <stdio.h>
#include <stdlib.h>

typedef struct node {
  int id;
  struct node *parent;
  struct node *leftMostChild;
  struct node *rightSibling;
} * nodePointer;

nodePointer make1node(void);
void printNode(nodePointer);
int getDepth(nodePointer);
void printType(nodePointer);
void printChild(nodePointer);
nodePointer init(int);

nodePointer head;

int main(void) {
  int i, j, n, id, k, c1, c2;
  nodePointer p1;
  nodePointer *arr;

  head = init(-1);

  scanf("%d", &n);
  arr = (nodePointer *)malloc(sizeof(nodePointer) * n);

  for (i = 0; i < n; i++)
    arr[i] = init(i);

  for (i = 0; i < n; i++) {
    scanf("%d%d", &id, &k);

    for (j = 0; j < k; j++) {
      scanf("%d", &c1);
      if (j == 0) {
        arr[id]->leftMostChild = arr[c1];
      } else {
        arr[c2]->rightSibling = arr[c1];
      }
      arr[c1]->parent = arr[id];
      c2 = c1;
    }
  }

  for (i = 0; i < n; i++)
    printNode(arr[i]);

  return 0;
}

nodePointer init(int id) {
  nodePointer p = make1node();

  p->id = id;
  p->parent = NULL;
  p->leftMostChild = NULL;
  p->rightSibling = NULL;

  return p;
}

void printNode(nodePointer p) {
  int depth = getDepth(p);

  printf("node %d: ", p->id);
  
  if (p->parent != NULL)
    printf("parent = %d, ", p->parent->id);
  else
    printf("parent = -1, ");

  printf("depth = %d, ", depth);
  
  printType(p);

  if(p->leftMostChild != NULL) {
    printf(", ");
    printChild(p);
  }

  printf("\n");
}

nodePointer make1node(void) {
  nodePointer p = (nodePointer)malloc(sizeof(struct node));
  return p;
}

int getDepth(nodePointer p) {
  int depth;

  for (depth = 0; p->parent != NULL; p = p->parent)
    depth++;

  return depth;
}

void printType(nodePointer p) {
  if (p->parent == NULL)
    printf("root");
  else if (p->leftMostChild == NULL)
    printf("leaf");
  else
    printf("internal node");
}

void printChild(nodePointer p) {
  printf("[");
  p = p->leftMostChild;
  printf("%d", p->id);

  while (p->rightSibling != NULL) {
    p = p->rightSibling;
    printf(", %d", p->id);
  }

  printf("]");
}
```