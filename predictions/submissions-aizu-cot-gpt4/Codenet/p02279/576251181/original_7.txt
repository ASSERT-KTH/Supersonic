The primary optimization changes that we can make in this code are:

1. **Memory Allocation**: Rather than allocating memory for the array of pointers after reading the number of nodes, we can allocate it prior to reading the number. This would avoid the unnecessary use of dynamic memory allocation which can be expensive in terms of time and memory.

2. **Avoiding Repeated Calls**: In the printNode function, the getDepth function is called which traverses the tree to find the depth of the node. This operation is repeated for every node. We can avoid this repeated calculation by maintaining an additional field in the node structure to store the depth of the node. We can update this field every time we connect a child to the parent.

3. **Minimizing I/O operations**: We can use a single scanf statement to read multiple inputs in the same line. This would reduce the number of I/O operations which are expensive in terms of time.

Here is the optimized code implementing these changes:

```c
#include <stdio.h>
#include <stdlib.h>
typedef struct node {
  int id;
  int depth; // new field to store the depth of the node
  struct node *parent;
  struct node *leftMostChild;
  struct node *rightSibling;
} * nodePointer;

nodePointer make1node(void);
void printNode(nodePointer);
void printType(nodePointer);
void printChild(nodePointer);
nodePointer init(int);
nodePointer head;

nodePointer arr[1000]; // static memory allocation

int main(void) {
  int i, j;
  int n;
  int id;
  int k;
  int c1, c2;
  nodePointer p1, p2;
  head = init(-1);
  scanf("%d", &n);
  for (i = 0; i < n; i++)
    arr[i] = init(i);
  for (i = 0; i < n; i++) {
    scanf("%d %d", &id, &k); // reading multiple inputs in the same line
    for (j = 0; j < k; j++) {
      scanf("%d", &c1);
      if (j == 0) {
        arr[id]->leftMostChild = arr[c1];
      } else {
        arr[c2]->rightSibling = arr[c1];
      }
      arr[c1]->parent = arr[id];
      arr[c1]->depth = arr[id]->depth + 1; // updating the depth of the node
      c2 = c1;
    }
  }
  for (i = 0; i < n; i++)
    printNode(arr[i]);
  return 0;
}

nodePointer init(int id) {
  nodePointer p;
  p = make1node();
  p->id = id;
  p->parent = NULL;
  p->leftMostChild = NULL;
  p->rightSibling = NULL;
  p->depth = 0; // initializing the depth to 0
  return p;
}

void printNode(nodePointer p) {
  printf("node %d: ", p->id);
  if (p->parent != NULL)
    printf("parent = %d, ", p->parent->id);
  else
    printf("parent = -1, ");
  printf("depth = %d, ", p->depth); // using the stored depth
  printType(p);
  printf(", ");
  printChild(p);
  printf("\n");
}

nodePointer make1node(void) {
  nodePointer p = (nodePointer)malloc(sizeof(struct node));
  return p;
}

void printType(nodePointer p) {
  if (p->parent == NULL)
    printf("root");
  else if (p->leftMostChild == NULL)
    printf("leaf");
  else
    printf("internal node");
}

void printChild(nodePointer p) {
  printf("[");
  if (p->leftMostChild != NULL) {
    p = p->leftMostChild;
    printf("%d", p->id);
    for (; p->rightSibling != NULL; p = p->rightSibling)
      printf(", %d", p->rightSibling->id);
  }
  printf("]");
}
```
Note: The static memory allocation assumes that the number of nodes would not be more than 1000. If the number of nodes can be larger, you can adjust the size of the array accordingly or revert back to dynamic memory allocation.