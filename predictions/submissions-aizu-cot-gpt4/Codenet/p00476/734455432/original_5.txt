Optimization Steps:

1. Use static arrays: Dynamic memory allocation is expensive in terms of time. Since the size of the arrays is known at compile time, we can declare them as static arrays.

2. Remove the unnecessary use of pairs: The functions `_rmq_getMax` and `rmq_getMaxIdx` use pairs to return two values. We can eliminate the use of pairs by passing the values to be modified as pointers to the function.

3. Inline small functions: The functions `rmq_getMax` and `rmq_getMaxIdx` are small and are used inside a loop. By inlining these functions, we can reduce the overhead of function calls.

4. Use `ios_base::sync_with_stdio(false)`: This line of code disables the synchronization between the C and C++ standard streams. As a result, it speeds up the input/output operations.

5. Use `cin.tie(NULL)`: This line of code unties `cin` from `cout`. Tied streams ensure that one stream is flushed automatically before each I/O operation on the other stream.

6. Replace printf and scanf with cout and cin: The printf and scanf functions are slower than cout and cin when the synchronization between the C and C++ standard streams is disabled.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;

const int INF = 1 << 28;
const static int size = 1 << 20;
int seg_v[size * 2 - 1], seg_a[size * 2 - 1], rmq[size * 2 - 1];
int N, H, d[100000], h[100000];

void seg_add(int l, int r, int x, int k = 0, int a = 0, int b = size) {
  if (b <= l || r <= a)
    return;
  if (l <= a && b <= r) {
    seg_a[k] += x;
    while (k) {
      k = (k - 1) / 2;
      seg_v[k] = max(seg_v[k * 2 + 1] + seg_a[k * 2 + 1],
                     seg_v[k * 2 + 2] + seg_a[k * 2 + 2]);
    }
    return;
  }
  int m = (a + b) / 2;
  seg_add(l, r, x, k * 2 + 1, a, m);
  seg_add(l, r, x, k * 2 + 2, m, b);
}

int seg_getMax(int l, int r, int k = 0, int a = 0, int b = size) {
  if (b <= l || r <= a)
    return -INF;
  if (l <= a && b <= r)
    return seg_a[k] + seg_v[k];
  int m = (a + b) / 2;
  int vl = seg_getMax(l, r, k * 2 + 1, a, m);
  int vr = seg_getMax(l, r, k * 2 + 2, m, b);
  return seg_a[k] + max(vl, vr);
}

void rmq_update(int k, int x) {
  int i = k;
  k += size - 1;
  rmq[k] = x;
  while (k) {
    k = (k - 1) / 2;
    rmq[k] = max(rmq[k * 2 + 1], rmq[k * 2 + 2]);
  }
}

void _rmq_getMax(int l, int r, int *max, int *idx, int k = 0, int a = 0, int b = size) {
  if (b <= l || r <= a) {
    *max = -INF;
    *idx = -1;
    return;
  }
  if (l <= a && b <= r) {
    *max = rmq[k];
    *idx = k - size + 1;
    return;
  }
  int m = (a + b) / 2;
  int vl, vr, il, ir;
  _rmq_getMax(l, r, &vl, &il, k * 2 + 1, a, m);
  _rmq_getMax(l, r, &vr, &ir, k * 2 + 2, m, b);
  if (vl > vr) {
    *max = vl;
    *idx = il;
  } else {
    *max = vr;
    *idx = ir;
  }
}

inline int rmq_getMax(int l, int r) {
  int max, idx;
  _rmq_getMax(l, r, &max, &idx);
  return max;
}

inline int rmq_getMaxIdx(int l, int r) {
  int max, idx;
  _rmq_getMax(l, r, &max, &idx);
  return idx;
}

void solve() {
  long long int res = 0;
  for (int i = 0; i < N; i++) {
    rmq_update(i, h[i]);
  }
  seg_add(0, N, H);
  for (int i = 0; i < N; i++) {
    if (seg_getMax(i, i + 1) > H) {
      seg_add(i, N, H - seg_getMax(i, i + 1));
    }
    seg_add(i, N, -d[i]);
    while (seg_getMax(i, i + 1) <= 0) {
      int idx = rmq_getMaxIdx(0, i);
      if (h[idx] > H - seg_getMax(idx, i)) {
        h[idx] = H - seg_getMax(idx, i);
        rmq_update(idx, h[idx]);
        continue;
      }
      int s = (H - seg_getMax(idx, i)) / h[idx];
      int hp = seg_getMax(i, i + 1);
      int need = -hp + 1;
      int t = (need / h[idx]) + !!(need % h[idx]);
      int num = min(s, t);
      seg_add(idx, N, h[idx] * num);
      res += num;
    }
  }
  cout << res << '\n';
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> N >> H;
  for (int i = 0; i < N - 1; i++) {
    cin >> d[i + 1] >> h[i];
  }
  solve();
}
```