Optimization Steps:
1. Avoid using `#include <bits/stdc++.h>` as it includes a lot of unnecessary headers which increases the compile time. Instead, include only those headers which are required.
2. The 'size' constant is 1 << 20 which is equal to 2^20. This is a very large array size that may cause a stack overflow error. If the arrays `seg_v`, `seg_a` and `rmq` are not needed to be this large in all the cases, consider using dynamic allocation for the arrays or use `std::vector` instead. This will save memory. But you should be aware that it might slightly increase the time complexity due to the overhead of dynamic memory allocation.
3. Use `std::max` function instead of using ternary operator for finding maximum. It increases the readability of the code.
4. Avoid using `printf` and `scanf`, instead use `std::cout` and `std::cin`. It increases the readability and consistency of the code.
5. Use `std::endl` instead of `\n` with `std::cout`. It flushes the output buffer and can prevent problems down the line.
6. Avoid using global variables. It's a good practice to avoid them unless they are absolutely necessary. They can cause problems with code maintenance and debugging. Instead, pass them as parameters to the functions or use them as local variables within the functions.

The optimized code:

```C++
#include <iostream>
#include <utility>
#include <vector>
#include <algorithm>
using namespace std;

const int INF = 1 << 28;
typedef pair<int, int> Pr;

vector<int> d, h;
vector<int> seg_v, seg_a;
vector<Pr> rmq;
int size = 1 << 20;

void seg_add(int l, int r, int x, int k = 0, int a = 0, int b = size) {
//...
}

int seg_getMax(int l, int r, int k = 0, int a = 0, int b = size) {
//...
}

void rmq_update(int k, int x) {
//...
}

Pr _rmq_getMax(int l, int r, int k = 0, int a = 0, int b = size) {
//...
}

int rmq_getMax(int l, int r) {
//...
}

int rmq_getMaxIdx(int l, int r) {
//...
}

void solve(int N, int H) {
//...
}

int main() {
  int N, H;
  cin >> N >> H;
  d.resize(N);
  h.resize(N);
  seg_v.resize(size * 2 - 1);
  seg_a.resize(size * 2 - 1);
  rmq.resize(size * 2 - 1);
  for (int i = 0; i < N - 1; i++) {
    cin >> d[i+1] >> h[i];
  }
  solve(N, H);
}
```

Please note that the complete functions aren't mentioned in the optimized code block. You can fill them in the same way as it was done in the original program.