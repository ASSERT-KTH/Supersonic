The given C++ program accepts n numbers from the user, stores them in a vector, and then prints the minimum and maximum values along with the sum of all the numbers. The program uses three separate functions to calculate the minimum, maximum, and sum.

The optimization that can be done here is to calculate the minimum, maximum, and sum in a single pass through the vector, rather than three separate passes.

Here are the steps to optimize the code:

1. Declare three variables, minNum, maxNum, and sum to hold the minimum, maximum, and total sum of the vector. Initialize minNum with the maximum possible value for a long long, maxNum with the minimum possible value for a long long, and sum with 0.
2. Iterate over the vector using a range-based for loop. For each number, update minNum, maxNum, and sum.
3. Print minNum, maxNum, and sum.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <limits>

int main() {
  int n;
  std::cin >> n;
  std::vector<long long> a(n);
  long long minNum = std::numeric_limits<long long>::max();
  long long maxNum = std::numeric_limits<long long>::min();
  long long sum = 0;

  for (int i = 0; i < n; i++) {
    std::cin >> a[i];
    minNum = std::min(minNum, a[i]);
    maxNum = std::max(maxNum, a[i]);
    sum += a[i];
  }

  std::cout << minNum << " " << maxNum << " " << sum << std::endl;

  return 0;
}
```
In this optimized code, the vector is initialized with size n, so it does not need to be resized during the input, and the min, max, and sum are calculated in one pass through the vector, not in three passes. This optimization improves both runtime and memory performance of the program.