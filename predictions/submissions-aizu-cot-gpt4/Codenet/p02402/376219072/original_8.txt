Here are the steps to optimize the program:

1. Reserve memory for the vector: The `std::vector::push_back` function may cause reallocations if the current capacity of the vector is not enough to hold the new element. This requires a new, larger block of memory to be allocated, the old elements to be moved or copied to the new location and the old memory to be freed. This can be quite an expensive operation. By calling `std::vector::reserve` we can prevent unnecessary reallocations.

2. Single pass for Min, Max and Sum: The program currently makes three separate passes over the data to find the minimum, maximum and sum. These operations can be combined into a single pass. This reduces the time complexity from O(3n) to O(n).

Optimized Program:

```C++
#include <algorithm>
#include <iostream>
#include <numeric>
#include <vector>

int main() {
  int n;
  std::cin >> n;
  std::vector<long long> a;
  a.reserve(n);
  long long minElement = std::numeric_limits<long long>::max();
  long long maxElement = std::numeric_limits<long long>::min();
  long long sum = 0;

  for (int i = 0; i < n; i++) {
    long long ii;
    std::cin >> ii;
    a.push_back(ii);
    minElement = std::min(minElement, ii);
    maxElement = std::max(maxElement, ii);
    sum += ii;
  }

  std::cout << minElement << " " << maxElement << " " << sum << std::endl;
}
```

This version of the program uses less memory (because it avoids unnecessary reallocations of the vector) and is faster (because it processes the elements in one pass instead of three).