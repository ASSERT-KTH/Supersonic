Optimization Steps:

1. Reserve the space for the vector `a` beforehand: This reduces the number of memory reallocations done when using `push_back()` method. This optimization helps to reduce the time complexity.

2. Compute the minimum and maximum elements, and the sum in a single loop: In the original program, we're traversing the array three times separately to calculate the minimum element, maximum element and the sum. This can be optimized to be done in a single loop. This reduces the time complexity from O(3n) to O(n).

Optimized C/C++ Program:
```
#include <iostream>
#include <vector>
#include <limits>
int main() {
  int n;
  std::cin >> n;
  std::vector<long long> a;
  a.reserve(n); // Reserve space for n elements in the vector
  long long min_num = std::numeric_limits<long long>::max();
  long long max_num = std::numeric_limits<long long>::min();
  long long sum = 0;
  for (int i = 0; i < n; i++) {
    long long ii;
    std::cin >> ii;
    a.push_back(ii);
    // Compute the minimum, maximum and sum in the same loop
    min_num = std::min(min_num, ii);
    max_num = std::max(max_num, ii);
    sum += ii;
  }
  std::cout << min_num << " " << max_num << " " << sum << std::endl;
}
```
This optimized program is expected to perform better for large input sizes compared to the original one.
