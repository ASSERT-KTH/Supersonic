The main optimization that can be made in this program is to combine the three separate traversals of the vector into a single traversal. In the current program, `std::min_element`, `std::max_element`, and `std::accumulate` each traverse the entire vector once. This results in O(3n) complexity, which can be optimized to O(n).

To do this, we can use a single loop after we've read all the elements. Inside this loop, we'll keep track of the minimum, maximum, and sum of the elements, updating them as necessary. This way, we only go through the elements in the vector once.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>

int main() {
  int n;
  std::cin >> n;
  std::vector<long long> a(n);
  long long min_value = LLONG_MAX;
  long long max_value = LLONG_MIN;
  long long total = 0;
  for (int i = 0; i < n; i++) {
    std::cin >> a[i];
    min_value = std::min(min_value, a[i]);
    max_value = std::max(max_value, a[i]);
    total += a[i];
  }
  std::cout << min_value << " " << max_value << " " << total << std::endl;
}
```

The optimizations made are:

1. Combined the three separate traversals of the vector into a single traversal.
2. Remove the use of `push_back` to add elements to the vector. Instead, initialize the vector with the known size `n` to avoid potential reallocations of the vector. And then directly assign the elements at their respective indices when reading the input.
3. Use `std::min` and `std::max` to keep track of the minimum and maximum value while reading the input.
4. Keep a running total of the elements to replace the use of `std::accumulate`.
