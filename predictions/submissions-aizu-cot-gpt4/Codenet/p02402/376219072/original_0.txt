1. Reserve memory for the vector in advance: Since the size of the vector is known at the beginning of the program, it is better to reserve memory for the vector in advance, which will prevent the unnecessary reallocations that can occur when using push_back().

2. Use std::minmax_element instead of two function calls: The std::min_element and std::max_element functions both traverse the full range of the vector. This can be optimized by using the std::minmax_element function, which returns both the minimum and maximum element in the range with a single full traversal.

3. Accumulate while reading inputs: Instead of using std::accumulate to sum up the elements of the vector after all the elements have been read, it would be faster to accumulate the sum while reading the inputs. This will eliminate the need to traverse the entire vector again.

Here is the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>

int main() {
  int n;
  std::cin >> n;
  std::vector<long long> a;
  a.reserve(n);  // reserve memory in advance
  long long sum = 0;
  for (int i = 0; i < n; i++) {
    long long ii;
    std::cin >> ii;
    a.push_back(ii);
    sum += ii;  // accumulate sum while reading inputs
  }
  auto minmax = std::minmax_element(a.begin(), a.end());  // find min and max with a single traversal
  std::cout << *minmax.first << " " << *minmax.second << " " << sum << std::endl;
}
```