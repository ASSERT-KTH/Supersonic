The given code reads a series of integers from the input, stores them in a vector, and then finds the minimum and maximum elements, and the sum of all elements. There are several places where the code could be optimized:

1. The vector `a` is declared without a pre-defined size. This can cause multiple reallocations when we call `push_back`, which is time-consuming. Since we know the size of the vector beforehand (it's `n`), we can allocate the memory at once.

2. The `std::min_element`, `std::max_element` and `std::accumulate` functions are traversing the entire vector each, which makes the complexity O(3n). We can combine these operations into a single loop to reduce the complexity to O(n).

Here's the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <limits>

int main() {
    int n;
    std::cin >> n;
    
    std::vector<long long> a(n);  // Allocate memory at once
    long long sum = 0;
    long long minVal = std::numeric_limits<long long>::max();
    long long maxVal = std::numeric_limits<long long>::min();
    
    for (int i = 0; i < n; ++i) {
        std::cin >> a[i];
        sum += a[i];
        minVal = std::min(minVal, a[i]);
        maxVal = std::max(maxVal, a[i]);
    }
    
    std::cout << minVal << " " << maxVal << " " << sum << std::endl;
    
    return 0;
}
```
In this optimized code, we read the integers directly into the vector (avoiding `push_back`), and we calculate the sum, min and max values on the fly. This avoids the need for multiple traversals of the vector.