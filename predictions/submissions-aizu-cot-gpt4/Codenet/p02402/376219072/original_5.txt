Optimization Steps:

1. Reserve space in vector 'a': Since the size 'n' of the vector is known beforehand, we can reserve the space in the vector. This will prevent the vector from resizing, which is a costly operation. 

2. Use one pass to find min, max and sum: In the original program, min_element, max_element, and accumulate functions are traversing the vector three times. We can calculate the minimum element, maximum element, and the sum in one pass. This will reduce the number of traversals from 3 to 1.

3. Use std::ios_base::sync_with_stdio(false): This will speed up the I/O operations, which can be a bottleneck in programs that perform a lot of I/O operations.

Optimized Program:

```cpp
#include <iostream>
#include <vector>
#include <limits>

int main() {
    std::ios_base::sync_with_stdio(false);
    int n;
    std::cin >> n;
    std::vector<long long> a;
    a.reserve(n);
    long long min = std::numeric_limits<long long>::max();
    long long max = std::numeric_limits<long long>::min();
    long long sum = 0;

    for (int i = 0; i < n; i++) {
        long long ii;
        std::cin >> ii;
        a.push_back(ii);
        if(ii < min) min = ii;
        if(ii > max) max = ii;
        sum += ii;
    }
    std::cout << min << " " << max << " " << sum << std::endl;
    return 0;
}
```
This optimized program performs the same operations as the original one but with less time complexity and memory usage.