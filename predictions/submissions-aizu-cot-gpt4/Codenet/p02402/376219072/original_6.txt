This program takes an integer `n` as input, then accepts `n` long long integers and stores them into a vector `a`. After that, it finds the minimum and maximum elements in the vector and computes the sum of all elements in the vector, and finally outputs these three values.

The optimization we can do here is to calculate the minimum, maximum, and sum in a single loop. In the current version, the minimum, maximum, and sum are calculated in three separate loops (hidden inside the `std::min_element`, `std::max_element`, and `std::accumulate` functions). We can instead calculate these in a single loop to reduce the number of iterations from 3n to n, which will improve the running time.

Another optimization is to use `reserve(n)` function on the vector before pushing back elements. This will reserve the required memory at once, instead of reallocating memory when the vector grows, which would reduce memory reallocations. 

After these two improvements, the optimized version of the program is as follows:
```cpp
#include <iostream>
#include <vector>
int main() {
  int n;
  std::cin >> n;
  std::vector<long long> a;
  a.reserve(n);
  long long min_val = LLONG_MAX;
  long long max_val = LLONG_MIN;
  long long sum = 0;
  for (int i = 0; i < n; i++) {
    long long ii;
    std::cin >> ii;
    a.push_back(ii);
    min_val = std::min(min_val, ii);
    max_val = std::max(max_val, ii);
    sum += ii;
  }
  std::cout << min_val << " " << max_val << " " << sum << std::endl;
}
```