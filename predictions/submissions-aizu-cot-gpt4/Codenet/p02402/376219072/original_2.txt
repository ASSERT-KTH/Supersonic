Here are the steps to optimize this program:

1. Reserve space for the vector in advance: If you know the size of the vector in advance, use the `reserve()` function to allocate the memory once instead of on each `push_back()`. It can significantly improve performance by avoiding reallocations and memory copying.

2. Combine the min, max and sum operations into a single loop: Instead of performing three separate iterations over the vector to find the min, max and sum, perform all these operations in a single loop. This will reduce the time complexity from O(3n) to O(n).

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <vector>
#include <limits>

int main() {
  int n;
  std::cin >> n;
  
  std::vector<long long> a;
  a.reserve(n);  // reserve memory upfront
  
  long long min = std::numeric_limits<long long>::max();
  long long max = std::numeric_limits<long long>::min();
  long long sum = 0LL;
  
  for (int i = 0; i < n; i++) {
    long long ii;
    std::cin >> ii;
    a.push_back(ii);
    
    // calculate min, max, and sum in a single loop
    if (ii < min) min = ii;
    if (ii > max) max = ii;
    sum += ii;
  }
  
  std::cout << min << " " << max << " " << sum << std::endl;
}
```
This version of the program will run faster and use memory more efficiently than the original version.