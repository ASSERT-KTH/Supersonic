First, the original code is not efficient because it goes through the vector three times to find minimum element, maximum element and the sum of all elements respectively. This can be optimized to a single iteration where we calculate the minimum, maximum, and sum at the same time.

Second, the vector 'a' is initialized without specifying its size. If we know the size of the vector beforehand (which we do from the user input 'n'), we can reserve the memory space for it in advance using 'reserve' function. This will reduce the overhead of dynamic memory allocation that happens when we use 'push_back' function on the vector. 

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <limits>

int main() {
  int n;
  std::cin >> n;
  
  std::vector<long long> a;
  a.reserve(n);

  long long sum = 0LL;
  long long min = std::numeric_limits<long long>::max();
  long long max = std::numeric_limits<long long>::min();

  for (int i = 0; i < n; i++) {
    long long ii;
    std::cin >> ii;
    a.push_back(ii);
    sum += ii;
    if (ii < min) min = ii;
    if (ii > max) max = ii;
  }

  std::cout << min << " " << max << " " << sum << std::endl;
  return 0;
}
```
The 'numeric_limits' is used to initialize min and max to the maximum and minimum possible values of long long data type respectively.