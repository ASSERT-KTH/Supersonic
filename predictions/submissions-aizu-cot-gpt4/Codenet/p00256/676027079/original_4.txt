The given C++ program can be optimized in the following ways:

1. Use of Enum: Instead of using multiple if-else statements, you can use enumeration to make the code cleaner and more readable. It also has the added advantage of making the code more maintainable as the program grows.

2. Avoiding Recomputation: In the program, the function `check()` is called multiple times with the same argument. This can be avoided by storing the result of the function call in a variable and using that variable whenever needed.

3. Avoiding Vector for Small Inputs: In the `main()` function, a vector `a` is used to store the parsed inputs. Since the number of inputs is small and fixed, an array can be used instead of a vector to save memory.

4. Avoiding String Concatenation: The program concatenates strings to form the output. This can be avoided by printing the outputs separately. This reduces the time complexity from O(n^2) to O(n) where n is the size of the string.

Here is the optimized code:

```cpp
#include <iostream>
typedef long long ll;
enum month {January = 31, February = 28, March = 31, April = 30, May = 31, June = 30, July = 31, August = 31, September = 30, October = 31, November = 30, December = 31};
month M[] = {January, February, March, April, May, June, July, August, September, October, November, December};

bool check(ll y) { return (y % 4 == 0 && (y % 100 != 0 || y % 400 == 0)); }

struct S {
  ll y, m, d;
};

struct Ma {
  ll b, ka, t, w, ki;
};

S M2S(ll b, ll ka, ll t, ll w, ll ki) {
  ka += b * 20;
  t += ka * 20;
  w += t * 18;
  ki += w * 20;
  S res;
  res.y = 2012, res.m = 12, res.d = 21 + ki;
  if (res.d <= 31)
    return res;
  bool checked = check(res.y + 1);
  while (res.d / (365 + checked))
    res.y++, res.d -= (365 + checked);
  if (res.d == 0)
    res.m--, res.d = M[res.m - 1] + (checked && res.m == 2);
  if (res.d <= 31)
    return res;
  res.y++, res.m = 1, res.d -= 31;
  while (res.d / (M[res.m - 1] + (checked && res.m == 2))) {
    res.d -= (M[res.m - 1] + (checked && res.m == 2));
    res.m++;
  }
  if (res.d == 0)
    res.m--, res.d = M[res.m - 1] + (checked && res.m == 2);
  return res;
}

Ma S2M(ll y, ll m, ll d) {
  y -= 2012;
  if (y)
    d += 10;
  else
    d = (d - 21);
  for (int i = 0; i < m - 1 && y; i++)
    d += (M[i] + (i == 1 && check(y + 2012)));
  y--;
  while (y > 0)
    d += (365 + check(y + 2012)), y--;
  Ma res;
  d %= 13 * 20 * 20 * 18 * 20;
  res.ki = d;
  res.w = res.ki / 20;
  res.ki %= 20;
  res.t = res.w / 18;
  res.w %= 18;
  res.ka = res.t / 20;
  res.t %= 20;
  res.b = res.ka / 20;
  res.ka %= 20;
  return res;
}

int main() {
  while (1) {
    std::string str;
    std::cin >> str;
    if (str == "#")
      break;
    int a[5];
    int i = 0, num = 0, index = 0;
    while (str[i]) {
      if (str[i] == '.')
        a[index++] = num, num = 0;
      else
        num = num * 10 + str[i] - '0';
      i++;
    }
    a[index] = num;
    if (index == 4) {
      S ans = M2S(a[0], a[1], a[2], a[3], a[4]);
      std::cout << ans.y << "." << ans.m << "." << ans.d << std::endl;
    } else {
      Ma ans = S2M(a[0], a[1], a[2]);
      std::cout << ans.b << "." << ans.ka << "." << ans.t << "." << ans.w << "." << ans.ki << std::endl;
    }
  }
  return 0;
}
```