Here are the steps to optimize the program:

Step 1: Remove unnecessary loop for initializing 'inact' array.
The array 'inact' is initialized with zeros using a loop. This loop is unnecessary as 'inact' array can be initialized with zeros at the time of declaration.

Step 2: Reduce scope and initialization of 'act' and 'ans' array.
The arrays 'act' and 'ans' are declared and initialized for the size of 100, but we only need to initialize them up to 'col' and 'row' respectively. We can declare and initialize them after we know the value of 'row' and 'col'.

Step 3: Use scanf in a loop to get 'act' values.
Instead of initializing 'act' to zeros and then assigning values from user input, we can directly get the 'act' values from user input.

Step 4: Combine the loops for 'ans' calculation and printing.
We can combine the loops for calculating 'ans' values and printing them, this will reduce the number of iterations over 'ans' array.

Here is the optimized program:

```c
#include <stdio.h>
int main() {
  int inact[100][100] = {0}; // Initialize with zeros at declaration
  int row, col;
  int i, j;
  
  scanf("%d %d", &row, &col);

  int act[col]; // Declare 'act' after knowing 'col'
  int ans[row] = {0}; // Declare and initialize 'ans' after knowing 'row'

  for (i = 0; i < row; i++) {
    for (j = 0; j < col; j++) {
      scanf("%d", &inact[i][j]);
    }
  }
  
  for (i = 0; i < col; i++) {
    scanf("%d", &act[i]);
  }
  
  for (i = 0; i < row; i++) {
    for (j = 0; j < col; j++) {
      ans[i] += inact[i][j] * act[j];
    }
    printf("%d\n", ans[i]); // Combine calculation and printing
  }
  
  return 0;
}
```
Please note that this optimization is using Variable Length Array (VLA) feature in C99. If you're using a C++ compiler or a C compiler that doesn't support C99, you'll need to dynamically allocate memory for 'act' and 'ans' arrays.