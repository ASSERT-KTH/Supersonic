There are a few places where this program can be optimized:

1. In the place where arrays `inact`, `act` and `ans` are being initialized to 0, you're initializing every element of the arrays regardless of the actual size that will be used which is determined by `row` and `col` from the user input. This can be a waste of time if `row` and `col` are much less than 100. The initialization of these arrays to 0 can be moved after the input of `row` and `col` so that only the required number of elements are initialized.

2. For the `inact` array, the initialization loop and input loop can be combined into one loop. This way, after a row is inputted, it can be immediately used for calculation of `ans` array. This not only saves some running time by avoiding an unnecessary loop but also saves memory by not needing to store the entire `inact` array at once. Only one row of `inact` array is needed at a time.

Here is the optimized program:

```c
#include <stdio.h>
int main() {
  int inact[100];
  int act[100];
  int ans[100];
  int row, col;
  int i, j;

  scanf("%d %d", &row, &col);

  for (i = 0; i < col; i++) {
    act[i] = 0;
  }

  for (i = 0; i < row; i++) {
    ans[i] = 0;
  }

  for (i = 0; i < row; i++) {
    for (j = 0; j < col; j++) {
      scanf("%d", &inact[j]);
      ans[i] += inact[j] * act[j];
    }
  }

  for (i = 0; i < row; i++) {
    printf("%d\n", ans[i]);
  }
  return 0;
}
```

This optimized program will run faster and use less memory for cases when `row` and `col` are much less than 100. The optimizations are based on the specific behavior of this program and may not be applicable to all C/C++ programs.