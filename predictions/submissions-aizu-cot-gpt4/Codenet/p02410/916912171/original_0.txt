The given C/C++ program initializes 2D and 1D arrays, takes user inputs, performs a multiplication operation, and finally prints the results.

Here is the step-by-step optimization:

1. Initialization of 2D and 1D arrays: The 'inact', 'act', and 'ans' arrays are being initialized with 0's. Instead of manually looping through each element of the array to set it to 0, we can use the 'memset' function from the 'cstring' library to initialize all elements to 0 in constant time. This will optimize the running time.

2. I/O operations: The 'scanf' and 'printf' functions are slower compared to 'cin' and 'cout' in C++. In order to optimize the running time, we can use 'cin' and 'cout' for I/O operations.

3. The 'std::ios_base::sync_with_stdio(false)' and 'cin.tie(NULL)' functions can be used to untie 'cin'/'cout' and 'scanf'/'printf', so they will not wait for each other making the I/O operations faster. It can optimize the running time further.

Here is the optimized code:

```cpp
#include <iostream>
#include <cstring>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  int inact[100][100];
  int act[100];
  int ans[100];
  int row, col;

  std::memset(inact, 0, sizeof(inact));
  std::memset(act, 0, sizeof(act));
  std::memset(ans, 0, sizeof(ans));

  std::cin >> row >> col;
  for (int i = 0; i < row; i++) {
    for (int j = 0; j < col; j++) {
      std::cin >> inact[i][j];
    }
  }
  for (int i = 0; i < col; i++) {
    std::cin >> act[i];
  }
  for (int i = 0; i < row; i++) {
    for (int j = 0; j < col; j++) {
      ans[i] += inact[i][j] * act[j];
    }
  }
  for (int i = 0; i < row; i++) {
    std::cout << ans[i] << '\n';
  }
  return 0;
}
```

Please note that C/C++ programs are compiled before they are executed. So, the optimization of running time and memory usage depends on the compiler as well. The compiler can also optimize the program at compile time.