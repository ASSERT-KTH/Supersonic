Optimization Steps:

1. We don't need to initialize the entire 100x100 array 'inact' or the arrays 'act' and 'ans' to zero at the beginning. Instead, we can initially initialize only the elements up to 'row' and 'col' respectively, after reading these values. This can save memory and time if 'row' and 'col' are much less than 100.

2. Similarly, when initializing 'ans', we only need to initialize up to 'row', not 100.

3. In the multiplication step, we can use the compound assignment operator "+=" to directly add and assign the result to 'ans[i]'. This will make the program more concise and slightly faster.

Here is the optimized code:

```c
#include <stdio.h>

int main() {
  int inact[100][100];
  int act[100];
  int ans[100];
  int row, col;
  int i, j;

  scanf("%d %d", &row, &col);
  
  for (i = 0; i < row; i++) {
    ans[i] = 0;
    for (j = 0; j < col; j++) {
      scanf("%d", &inact[i][j]);
    }
  }
  for (i = 0; i < col; i++) {
    scanf("%d", &act[i]);
  }
  for (i = 0; i < row; i++) {
    for (j = 0; j < col; j++) {
      ans[i] += inact[i][j] * act[j];
    }
  }
  for (i = 0; i < row; i++) {
    printf("%d\n", ans[i]);
  }
  return 0;
}
```

This optimized code will run faster and consume less memory when 'row' and 'col' are significantly less than 100.