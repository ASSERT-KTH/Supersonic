Optimization:

1) The initialization of arrays: inact, act, and ans, are not necessary. In C/C++, arrays are not initialized to any default value, so if you need them to be zero you have to initialize them yourself. But in this code, we fill these arrays with values after initialization. So, the zero-initialization is not necessary and can be removed.

2) Use of scanf and printf: scanf and printf are usually slower due to the fact that they are formatted I/O functions. If the code is intended to be run in an environment where the input and output speed matters (like in Competitive Programming), you should use faster input and output methods. However, for a general case, scanf and printf are fine to use.

3) The calculation in the loop where 'ans' array is calculated can be optimized. The multiplication inside the loop 'inact[i][j] * act[j]' can be replaced by a shift operation if the 'act' array only contains powers of 2. Shift operations are faster than multiplication.

However, this third optimization step is situational and dependent on the 'act' array. So, we will not implement it in our code. 

Here is the optimized code:

```c
#include <stdio.h>
int main() {
  int inact[100][100];
  int act[100];
  int ans[100];
  int row, col;
  int i, j;
  
  scanf("%d %d", &row, &col);
  for (i = 0; i < row; i++) {
    for (j = 0; j < col; j++) {
      scanf("%d", &inact[i][j]);
    }
  }
  for (i = 0; i < col; i++) {
    scanf("%d", &act[i]);
  }
  for (i = 0; i < row; i++) {
    for (j = 0; j < col; j++) {
      ans[i] += inact[i][j] * act[j];
    }
  }
  for (i = 0; i < row; i++) {
    printf("%d\n", ans[i]);
  }
  return 0;
}
```
In this optimized code, we removed the unnecessary zero-initialization of the arrays which decreases the running time of the program. The other optimization methods are situational and dependent on the specific use case of the code.