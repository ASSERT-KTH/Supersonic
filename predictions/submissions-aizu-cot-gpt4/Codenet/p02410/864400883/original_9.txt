Optimization Steps:

1. Instead of using a 2D array `a[100][100]` to store the input, which consumes a lot of memory, you can take the input and immediately perform the multiplication with the corresponding element from `b[]` array. This way, you are eliminating the need for a 2D array, thus saving memory.

2. The variable `x` is unnecessary as you can directly store the input into the 2D array in the original code. However, in the optimized version, you will directly multiply the input with the corresponding element from `b[]` array and add it to `c`.

3. The variable `c` is reset to 0 at the end of the inner loop in the original code. In the optimized version, you just need to reset `c` at the start of the outer loop.

4. As a minor optimization, `std::ios_base::sync_with_stdio(false);` can be added to make I/O operations faster. 

Optimized Code:

```cpp
#include <iostream>
using namespace std;
int main() {
  std::ios_base::sync_with_stdio(false);
  int n, m, y, b[100];
  cin >> n >> m;
  for (int j = 0; j < m; j++) {
    cin >> y;
    b[j] = y;
  }
  for (int i = 0; i < n; i++) {
    int c = 0;
    for (int j = 0; j < m; j++) {
      int temp;
      cin >> temp;
      c += temp * b[j];
    }
    cout << c << endl;
  }
  return 0;
}
```
This optimized code significantly reduces memory usage by avoiding the use of a 2D array and also slightly improves the execution time by reducing the number of operations inside the inner loop.