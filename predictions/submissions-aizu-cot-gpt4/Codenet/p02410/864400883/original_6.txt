Sure, let's go through the optimizations step by step:

1. Avoid unnecessary copies: You do not need to store the input values 'x' and 'y' in separate variables before storing them in the arrays 'a' and 'b'. You can directly store the input into these arrays. This will save memory and a small amount of time.

2. Reduce scope of loop variables: Instead of declaring the loop counter variables 'i' and 'j' in each loop, we can declare them once at the start of the main function and reuse them. This will save a small amount of time because the program does not need to create and destroy these variables each time a loop starts and ends.

3. Use '\n' instead of endl: The 'endl' manipulator not only inserts a new line, but also flushes the output buffer every time it's used. If you're not interested in immediately seeing the output or if you don't need the buffer to be flushed at that point, you can just use '\n' to insert a new line. This can lead to a significant speed improvement when printing a large amount of data.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;

int main() {
  int n, m, a[100][100], b[100], c = 0, i, j;
  
  cin >> n >> m;
  
  for (i = 0; i < n; i++) {
    for (j = 0; j < m; j++) {
      cin >> a[i][j];
    }
  }
  
  for (j = 0; j < m; j++) {
    cin >> b[j];
  }
  
  for (i = 0; i < n; i++) {
    for (j = 0; j < m; j++) {
      c += a[i][j] * b[j];
    }
    cout << c << '\n';
    c = 0;
  }
  return 0;
}
```
Please note that these are micro-optimizations. The general structure of the program is already efficient.