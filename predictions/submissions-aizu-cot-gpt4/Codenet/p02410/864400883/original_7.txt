First, I want to point out that if the size 'n' and 'm' are not larger than 100, the program's memory usage will not be a problem. If 'n' or 'm' is very large, we need to use dynamic allocation instead of static allocation. For this problem, I will assume 'n' and 'm' do not exceed 100.

Here are the steps to optimize the program:

1) The first optimization is to reduce the usage of 'cin' and 'cout' because they are slower than 'scanf' and 'printf'.

2) The second one is to remove the unnecessary variable 'x', 'y'. We don't need to store the value before putting it into 'a' and 'b', we can directly assign the input to 'a' and 'b'.

3) The third optimization is to reduce the usage of the variable 'c'. We can directly print the result instead of using 'c' to store it. This not only reduces the usage of memory but also makes the program cleaner.

4) The fourth optimization is to use prefix increment (++i or ++j) instead of postfix (i++ or j++). This is because postfix increment involves a temporary object and leads to extra overhead in C++.

5) The last one is to use '\n' instead of 'endl'. 'endl' will cause a flush operation which is time-consuming.

Here is the optimized code:

```cpp
#include <stdio.h>

int main() {
  int n, m;
  int a[100][100], b[100];
  scanf("%d%d", &n, &m);
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      scanf("%d", &a[i][j]);
    }
  }
  for (int j = 0; j < m; ++j) {
    scanf("%d", &b[j]);
  }
  for (int i = 0; i < n; ++i) {
    int sum = 0;
    for (int j = 0; j < m; ++j) {
      sum += a[i][j] * b[j];
    }
    printf("%d\n", sum);
  }
  return 0;
}
```

Please keep in mind that these optimizations will not have a significant impact for small inputs. However, they can make a difference for larger inputs.