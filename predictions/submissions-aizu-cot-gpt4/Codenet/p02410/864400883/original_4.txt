This program reads two 2-D arrays from user input and then multiplies the corresponding elements together, sums the products, and outputs the results. Here are some possible optimization steps:

1. Reduce the number of variables: Currently, the program uses `x` and `y` as temporary variables to store input before assigning it to the arrays. This is unnecessary, as you can assign the input directly to the arrays. This doesn't make a big difference in terms of performance, but it does make the code cleaner and easier to read.

2. Use `std::ios::sync_with_stdio(false)`: This line can significantly speed up C++ I/O, making it nearly as fast as C-style I/O. However, it may cause issues if you're mixing C++ and C-style I/O in the same program. In this case, it's safe to use because the program only uses C++ I/O.

3. Use `std::cin.tie(NULL)`: This line unties `cin` from `cout`, meaning that `cout` will not be flushed before every `cin`. This can also improve I/O performance.

Now, let's apply these optimizations to the code:

```cpp
#include <iostream>
using namespace std;
int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  int n, m;
  int a[100][100], b[100];
  int c = 0;
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      cin >> a[i][j];
    }
  }
  for (int j = 0; j < m; j++) {
    cin >> b[j];
  }
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      c += a[i][j] * b[j];
    }
    cout << c << '\n';
    c = 0;
  }
  return 0;
}
```

One more thing, I replaced `endl` with `'\n'`. This is because `endl` causes an unnecessary flush of the buffer, which can slow down I/O. Since we're only using `cout` for output, there's no need to flush the buffer every time we output a line.