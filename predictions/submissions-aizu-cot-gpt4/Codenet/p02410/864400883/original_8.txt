There are a few optimizations that can be considered:

1. We can remove the `x` and `y` variables entirely and read input directly into the arrays. This will reduce memory usage slightly.

2. We should consider reserving memory for the arrays dynamically based on the input `n` and `m`. This avoids reserving unnecessary memory when `n` and `m` are significantly less than 100.

3. In the final loop, where `c` is calculated and then reset, we can declare `c` in the scope of the outer loop to avoid resetting it manually.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
int main() {
  int n, m;
  cin >> n >> m;
  int **a = new int*[n];
  for(int i = 0; i < n; ++i)
    a[i] = new int[m];
  int *b = new int[m];
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      cin >> a[i][j];
    }
  }
  for (int j = 0; j < m; j++) {
    cin >> b[j];
  }
  for (int i = 0; i < n; i++) {
    int c = 0;
    for (int j = 0; j < m; j++) {
      c += a[i][j] * b[j];
    }
    cout << c << endl;
  }
  for(int i = 0; i < n; ++i)
    delete [] a[i];
  delete [] a;
  delete [] b;
  return 0;
}
```

Please note that the optimized version uses dynamic memory allocation for the arrays and, therefore, it is necessary to delete the allocated memory at the end of the program to prevent memory leaks.