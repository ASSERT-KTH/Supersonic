This program includes a lot of unnecessary includes, which could be removed to save memory and improve compilation speed. Also, the use of macros can be replaced with inbuilt C++ features for better performance and readability.

Step-by-step optimization:

1. Remove unnecessary includes: All the includes are not required by this program. Only necessary includes should be kept like `<iostream>`, `<string>`, `<algorithm>` and `<cstring>`. 

2. Replace macros with C++ features: Macros such as `rep` and `max_swap` can be replaced with C++ loops and `std::max` respectively. Macros can be error-prone and difficult to debug.

3. Use `std::vector` instead of C-style array: C++ `std::vector` is safer and more flexible than C-style array. It can be resized dynamically and provides several useful member functions.

Now, let's present the optimized version of the code.

```cpp
#include <iostream>
#include <string>
#include <algorithm>
#include <cstring>
#include <vector>

using namespace std;

int dpru(const vector<int>& c, const vector<int>& v, int n, int m) {
    int dp[333][333];
    memset(dp, 0, sizeof(dp));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j <= m; ++j) {
            dp[i + 1][j] = dp[i][j];
            if (j >= c[i])
                dp[i + 1][j] = max(dp[i + 1][j], dp[i + 1][j - c[i]] + v[i]);
        }
    }
    return dp[n][m];
}

int main() {
    int n, m;
    while (cin >> n >> m) {
        vector<int> c(n);
        vector<vector<int>> v(3, vector<int>(n));
        for(int i = 0; i < n; i++){
            string s;
            int t;
            cin.ignore();
            getline(cin, s);
            cin >> t;
            c[i] = t;
            for(int j = 0; j < 3; j++){
                cin >> v[j][i];
            }
        }
        int res = 0;
        for(int i = 0; i < 3; i++) {
            res = max(res, dpru(c, v[i], n, m));
        }
        cout << res << endl;
    }
}
```
This optimized version of the program is more readable, uses less memory, and should run faster.