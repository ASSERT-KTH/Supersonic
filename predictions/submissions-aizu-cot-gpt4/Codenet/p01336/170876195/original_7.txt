Step by step optimization process:

1. Remove Unused Headers: There are a lot of header files included in this program which are not being used. Including unnecessary headers increases the compilation time. We will remove those headers which are not required.

2. Remove Unused Macros: Macros like `rall(c)`, `CLEAR(arr, val)`, `min_swap(T &a, const T &b)` are not being used in the program. We will remove them to clean up the code.

3. Use std::max instead of max_swap: Instead of using the custom function `max_swap`, we can use the built-in function `std::max` which is more efficient and makes code cleaner.

4. Initialize Variables at Declaration: Variables `c` and `v` are declared before they are needed. It is better to declare them just before they are used.

5. Use std::vector instead of C-style array: We can replace C-style arrays with std::vector. std::vectors are safer and easier to use.

6. Remove Unused Variables: Variables like `PI`, `dx[]`, `dy[]`, `ll`, `pint` are not being used anywhere in the program. We will remove these unused variables.

7. Use auto keyword: In the foreach macro, we can use auto to make the code cleaner.

Here is the optimized code:

```
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
using namespace std;

#define foreach(it, c) for (auto it = (c).begin(); it != (c).end(); ++it)
#define all(c) (c).begin(), (c).end()

#define rep(i, n) for (int i = 0; i < n; ++i)

int n, m;

int dpru(vector<int> &c, vector<int> &v) {
  vector<vector<int>> dp(333, vector<int>(333, 0));
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j <= m; ++j) {
      dp[i + 1][j] = dp[i][j];
      if (j >= c[i])
        dp[i + 1][j] = max(dp[i + 1][j], dp[i + 1][j - c[i]] + v[i]);
    }
  }
  return dp[n][m];
}

int main() {
  while (cin >> n >> m) {
    vector<int> c(n), v[3][n];
    rep(i, n) {
      string s;
      int t;
      getline(cin, s);
      getline(cin, s);
      cin >> t;
      c[i] = t;
      rep(j, 3) cin >> v[j][i];
    }
    int res = 0;
    rep(i, 3) res = max(res, dpru(c, v[i]));
    cout << res << endl;
  }
}
```