The code is well-written but there are few places where still we can make some optimization. Here are the steps to optimize the program:

1. Only include necessary libraries: First of all, the program includes a lot of libraries. Not all of them seem to be used in the code. Unnecessary includes take up both compile-time and run-time.

2. Avoiding global variables: Global variables can slow down access time, it's generally a good idea to avoid them if possible. In this case, `n` and `m` could be passed to the `dpru` function as parameters.

3. Avoid using `endl`: `endl` not only inserts a newline, but also flushes the output stream. This can be quite costly in terms of performance. Use `'\n'` instead.

4. Size of array: The size of the array `c` and the second dimension of the array `v` are hard-coded to 333. This may be larger than necessary, resulting in wasted memory. If the maximum size can be determined at runtime, consider dynamically allocating these arrays instead.

Here is the optimized program:

```c++
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
using namespace std;

#define CLEAR(arr, val) memset(arr, val, sizeof(arr))
#define rep(i, n) for (int i = 0; i < n; ++i)
template <class T> void max_swap(T &a, const T &b) { a = max(a, b); }

int dpru(int *c, int *v, int n, int m) {
  int dp[333][333];
  CLEAR(dp, 0);
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j <= m; ++j) {
      dp[i + 1][j] = dp[i][j];
      if (j >= c[i])
        max_swap(dp[i + 1][j], dp[i + 1][j - c[i]] + v[i]);
    }
  }
  return dp[n][m];
}

int main() {
  int n, m;
  while (cin >> n >> m) {
    int c[333], v[3][333];
    rep(i, n) {
      string s;
      int t;
      getline(cin, s);
      getline(cin, s);
      cin >> t;
      c[i] = t;
      rep(j, 3) cin >> v[j][i];
    }
    int res = 0;
    rep(i, 3) max_swap(res, dpru(c, v[i], n, m));
    cout << res << '\n';
  }
}
```
