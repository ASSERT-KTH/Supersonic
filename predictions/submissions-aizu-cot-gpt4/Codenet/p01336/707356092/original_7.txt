The given C++ program could be optimized by reusing the computed results in dp[i][j] and avoiding unnecessary checks in the innermost loop. Also, we can improve the efficiency of this program by reducing the number of calls to size() method of vector and by avoiding the multiplication operation inside the max function call.

Let's go through the optimization steps:

1. Store the size of the vector idols in a variable. This will avoid multiple calls to the size() method, which is not efficient.
2. Replace the multiplication operation inside the max function call with a pre-calculated value. This will reduce the computational overhead.
3. Reuse the computed results in dp[i][j] by using the previously calculated value in the next calculation. This will avoid unnecessary computations.

Here is the optimized code:

```cpp
#define _USE_MATH_DEFINES
#define INF 0x3f3f3f3f
#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <deque>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
using namespace std;
typedef long long ll;
typedef pair<int, int> P;
typedef pair<int, P> PP;
int tx[] = {0, 1, 0, -1};
int ty[] = {-1, 0, 1, 0};
static const double EPS = 1e-8;
class Data {
public:
  string mName;
  int mC, mV, mD, mL;
  Data(string _n, int _c, int _v, int _d, int _l) {
    mName = _n;
    mC = _c;
    mV = _v;
    mD = _d;
    mL = _l;
  }
};
int dp[301][3];
int main() {
  int N, M;
  string line;
  stringstream ss;
  while (getline(cin, line)) {
    ss << line;
    ss >> N >> M;
    ss.clear();
    vector<Data> idols;
    for (int i = 0; i < N; i++) {
      getline(cin, line);
      string name = line;
      getline(cin, line);
      ss << line;
      int C, V, D, L;
      ss >> C >> V >> D >> L;
      ss.clear();
      idols.push_back(Data(name, C, V, D, L));
    }
    memset(dp, 0, sizeof(dp));
    int size = idols.size();
    for (int i = 0; i <= M; i++) {
      for (int j = 0; j < size; j++) {
        for (int k = 0; k <= 300; k++) {
          if (i - idols[j].mC * k < 0)
            break;
          int valC = dp[i - idols[j].mC * k][0] + idols[j].mV * k;
          int valD = dp[i - idols[j].mC * k][1] + idols[j].mD * k;
          int valL = dp[i - idols[j].mC * k][2] + idols[j].mL * k;
          dp[i][0] = max(valC, dp[i][0]);
          dp[i][1] = max(valD, dp[i][1]);
          dp[i][2] = max(valL, dp[i][2]);
        }
      }
    }
    int maxv = 0;
    for (int i = 0; i <= M; i++) {
      for (int j = 0; j < 3; j++) {
        maxv = max(dp[i][j], maxv);
      }
    }
    printf("%d\n", maxv);
  }
}
```