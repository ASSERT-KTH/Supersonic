Optimization Steps:

1. Remove the usage of "strlen(num)" in the loop condition. This function calculates the length of the string each time it runs, which slows down the loop. Instead, calculate the length before the loop and store it in a variable.
2. The program takes a string input and then checks if the first character is '0' to break the loop. Instead of using a string to take the input, you can use a character, which will use less memory.
3. The 'scanf' function is slower than 'cin' in C++. You can replace it with 'cin'.

Optimized Program:

```cpp
#include <iostream>
#include <cstring>
using namespace std;

int main() {
  char num[1001];
  while (true) {
    cin >> num;
    if (num[0] == '0')
      break;
    int sum = 0;
    int length = strlen(num);
    for (int i = 0; i < length; i++) {
      sum += num[i] - '0';
    }
    cout << sum << "\n";
  }
  return 0;
}
```

Note: These optimizations help improve the runtime and memory usage of the program, yet the overall improvement might be negligible for small inputs. The improvements become significant when dealing with large inputs or when these pieces of code are part of a larger, more complex system.