Step by step optimization:

1. Avoid calling `strlen(num)` inside the loop. This function will run through the entire array to find the null character marking the end of the string, making it an O(n) operation. Since it is inside the loop, it will be called n times, making the overall complexity of the loop O(n^2). Instead, call it once before the loop and store the result in a variable.

2. Since the objective is to break the loop when the entered number is '0', you don't need to store the number in a char array. Instead, a single char variable is sufficient. This will save memory.

3. Instead of using `scanf` and `printf`, we can use `cin` and `cout` which are faster. Also, `iostream` is already included, so there is no need to include `cstdio`.

Optimized program:

```cpp
#include <iostream>
using namespace std;
int main() {
  char num;
  while (1) {
    cin >> num;
    if (num == '0')
      break;
    int sum = 0;
    for (int i = 0; num[i] != '\0'; i++) {
      sum += num[i] - '0';
    }
    cout << sum << endl;
  }
  return 0;
}
```

Please, note that this optimization will work only if the program is supposed to read one single digit at a time. If the program should read a number with multiple digits at a time, the original implementation with a string (or an array of characters) should be kept. However, the optimization of the for loop (calculate the length of the string before the loop) still applies.