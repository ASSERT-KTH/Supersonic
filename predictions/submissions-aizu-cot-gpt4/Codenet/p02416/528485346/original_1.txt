The given program reads a string of numbers and calculates the sum of the digits. It continues to read and process strings until a string starting with '0' is entered.

The program can be optimized in the following ways:

1. Avoid using `strlen(num)` in the loop condition: The function `strlen` calculates the length of the string on every iteration, which results in unnecessary overhead. To optimize this, you can calculate the length of the string once before the loop and store it in a variable.

2. Use `std::ios_base::sync_with_stdio(false)` to disable synchronization between the C and C++ standard streams. By default, all standard streams are synchronized, which ensure a proper ordering of output. But for single threaded code where you are sure to use only C++ or C streams, it is safe to disable it, hence gaining performance.

3. Use `std::cin.tie(NULL)` to untie `cin` from `cout`. By default, `cin` is tied to `cout` to ensure a proper ordering of input and output. But in your code, there is no such requirement, hence it is safe to untie them, which will result in faster IO.

4. Instead of `scanf` and `printf`, use `std::cin` and `std::cout`. The C++ streams are generally faster and safer.

Here is the optimized program:

```cpp
#include <iostream>
#include <cstring>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    char num[1001];
    while (true) {
        cin >> num;
        if (num[0] == '0')
            break;
        int len = strlen(num);
        int sum = 0;
        for (int i = 0; i < len; i++) {
            sum += num[i] - '0';
        }
        cout << sum << "\n";
    }
    return 0;
}
```

Please note that the performance gain from these optimizations may not be significant depending on the system and compiler you are using. However, these are general strategies to optimize C++ code for speed and memory.