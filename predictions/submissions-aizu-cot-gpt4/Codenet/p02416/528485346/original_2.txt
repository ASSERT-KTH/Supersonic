Step 1: You're calling `strlen(num)` in each iteration of your loop. `strlen` function traverses the whole string to find its length, so this is inefficient. Instead, you can call `strlen` once before the loop starts and store the result in a variable.

Step 2: Instead of using `scanf` and `printf`, we can use `cin` and `cout` which are faster and safer as they are part of the C++ standard library.

Step 3: Use `std::ios_base::sync_with_stdio(false)` before the while loop. It unties `cin` from `cout`, reducing unnecessary overhead.

Step 4: Avoid using `using namespace std;` as it can lead to naming conflicts. This is a good practice and not exactly an optimization.

Here is the optimized code:

```cpp
#include <iostream>
#include <cstring>

int main() {
    std::ios_base::sync_with_stdio(false);
    char num[1001];
    while (1) {
        std::cin >> num;
        if (num[0] == '0')
            break;
        int sum = 0;
        int len = std::strlen(num);
        for (int i = 0; i < len; i++) {
            sum += num[i] - '0';
        }
        std::cout << sum << "\n";
    }
    return 0;
}
```

Remember that the optimizations mentioned here will not always give you a noticeable performance improvement, these are mostly good practices to follow to write efficient code.