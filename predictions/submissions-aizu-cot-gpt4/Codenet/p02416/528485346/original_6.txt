First, let's look at the code and identify areas for potential optimization:

1. `strlen(num)`: The `strlen` function is called in every iteration of the loop. The function's time complexity is O(n), which means it scans the whole string to find its length. This results in unnecessary computation in every iteration.

2. `scanf("%s", num)`: The `scanf` function is used to read strings, but it's safer and more efficient to use `fgets` because it also considers the maximum size of the buffer to prevent buffer overflow.

Here's the optimized version of the code:

```cpp
#include <cstdio>
#include <cstring>
#include <iostream>
using namespace std;
int main() {
  char num[1001];
  while (1) {
    fgets(num, 1001, stdin);
    if (num[0] == '0')
      break;
    int sum = 0;
    int len = strlen(num);
    for (int i = 0; i < len; i++) {
      sum += num[i] - '0';
    }
    printf("%d\n", sum);
  }
  return 0;
}
```

Explanation:

1. Replaced `scanf` with `fgets` to read the string. This function reads up to n - 1 characters from the input stream referenced by stdin and stores them into the character array pointed to by num. It also appends a null character at the end to make it a valid string.

2. Stored the length of the string in the variable 'len' before the loop to avoid calling `strlen` in each iteration, reducing the time complexity of the loop from quadratic to linear.

These changes should make the code run faster and also safer by preventing buffer overflow.