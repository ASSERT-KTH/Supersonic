Sure, we can optimize the provided program by reducing the number of calls to the strlen function and instead calculate the length of the string once and store it in a variable. In your current implementation, strlen is called for each iteration of the loop, resulting in unnecessary overhead since the length of the string does not change within the loop. 

Here are the steps to optimize the program:

1. Replace the repeated calls to strlen with a single call before the loop starts and store the result in a variable.
2. Use the stored length value in the loop condition.

Here is the optimized version of your program:

```cpp
#include <cstdio>
#include <cstring>
#include <iostream>
using namespace std;
int main() {
  char num[1001];
  while (1) {
    scanf("%s", num);
    if (num[0] == '0')
      break;
    int sum = 0;
    int length = strlen(num);
    for (int i = 0; length > i; i++) {
      sum += num[i] - '0';
    }
    printf("%d\n", sum);
  }
  return 0;
}
```
This version reduces the number of calls to the strlen function, improving the running time of the program. The memory usage is not significantly changed, as we added only one integer variable.
