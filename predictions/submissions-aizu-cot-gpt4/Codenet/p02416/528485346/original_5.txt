The program above reads a sequence of numbers as strings and calculates the sum of individual digits in each number. The loop continues until '0' is input.

There are few areas that can be optimized:

1. Avoid calling `strlen(num)` multiple times inside the loop. It is better to calculate the length only once and store it in a variable. As `strlen` function iterates over the entire string to find its length, calling it in each iteration of the loop would lead to unnecessary overhead.

2. The `scanf` function is slower than `cin` in C++. So, it is better to use `cin` instead of `scanf`. The same applies to `printf`. Instead, `cout` can be used.

3. `using namespace std;` is generally considered bad practice. It's better to use `std::` prefix when using functions or objects from the standard library.

Here is the optimized version of your program:

```cpp
#include <iostream>
#include <cstring>

int main() {
  char num[1001];
  while (true) {
    std::cin >> num;
    if (num[0] == '0')
      break;
    int sum = 0;
    int length = std::strlen(num);
    for (int i = 0; i < length; ++i) {
      sum += num[i] - '0';
    }
    std::cout << sum << "\n";
  }
  return 0;
}
```

The program is now optimized for both speed and memory usage. The number of function calls inside the loop has been reduced, leading to faster execution. The use of `std::cin` and `std::cout` instead of `scanf` and `printf` has also made the program more idiomatic C++.