Step by step optimization:
1. The first thing that comes to mind is the `strlen(num)` in the `for` loop. It's called in every iteration which is not efficient as the string length doesn't change. We can calculate it once before the loop and use the result in the loop condition.
2. Instead of using `scanf` and `printf` which are slower due to their variable argument handling nature, we can use `cin` and `cout` for input and output respectively. This will speed up the I/O operations.
3. The `while (1)` loop is not very clear. We can instead use `while (cin >> num && num[0] != '0')` to make the code more understandable and compact.

Now, let's implement these optimizations:

```cpp
#include <iostream>
#include <cstring>
using namespace std;

int main() {
    char num[1001];

    while (cin >> num && num[0] != '0') {
        int sum = 0;
        int len = strlen(num);
        for (int i = 0; i < len; i++) {
            sum += num[i] - '0';
        }
        cout << sum << "\n";
    }

    return 0;
}
```

This optimized program does exactly the same thing as the original one, but it's more efficient in terms of running time and memory usage.