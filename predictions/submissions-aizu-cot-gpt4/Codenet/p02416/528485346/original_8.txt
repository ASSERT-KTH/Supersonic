The C/C++ program you have given is reading a number as a string and then calculating the sum of its digits until a '0' is entered. The program is simple and not much can be optimized in terms of memory usage, but there is one major inefficiency that can be optimized for running time.

The inefficiency lies in the use of `strlen(num)` inside the for loop condition. The `strlen()` function calculates the length of the string every single time it's called, thus making the program run in O(n^2) time complexity where n is the number of digits in the input. This can be optimized by calculating `strlen(num)` once per input and storing it in a variable.

Here is the optimized version of the program:

```
#include <cstdio>
#include <cstring>
#include <iostream>
using namespace std;
int main() {
  char num[1001];
  while (1) {
    scanf("%s", num);
    if (num[0] == '0')
      break;
    int sum = 0;
    int length = strlen(num);
    for (int i = 0; i < length; i++) {
      sum += num[i] - '0';
    }
    printf("%d\n", sum);
  }
  return 0;
}
```

In the optimized code, the length of the input string is calculated just once per input and stored in the variable `length`. This small modification reduces the time complexity of the program to O(n), making it significantly faster for large inputs.