First, I will explain the optimization step by step:

1. We can remove the first double loop that initializes the dp array to 0. In C++, global arrays are automatically initialized to 0. So, we can save time by removing this unnecessary initialization.

2. As for memory optimization, since the dp calculation only relies on the previous state, we can reduce the dp array from 2D to 1D. This saves a lot of memory.

3. Also, the array a can be reduced in size. Since we only need the current and previous input, we can just use two variables to keep track of them.

Now, I will provide the optimized code:

```C++
#include <iostream>
using namespace std;
long long dp[21];
int main() {
    int N;
    cin >> N;
    int prev_a, a;
    cin >> prev_a;
    dp[prev_a] = 1;
    for (int i = 2; i <= N; i++) {
        long long new_dp[21] = {};
        cin >> a;
        for (int j = 0; j <= 20; j++) {
            if (j - prev_a >= 0) {
                new_dp[j] += dp[j - prev_a];
            }
            if (j + prev_a <= 20) {
                new_dp[j] += dp[j + prev_a];
            }
        }
        for (int j = 0; j <= 20; j++) {
            dp[j] = new_dp[j]; // Update dp for next iteration
        }
        prev_a = a; // Update prev_a for next iteration
    }
    cout << dp[a] << endl;
    return 0;
}
```

In this optimized program, we only use one 1D array `dp` and two integer variables `prev_a` and `a` as opposed to the 2D array and 1D array in the original program. This saves a lot of memory. We also save time by removing the unnecessary initialization of `dp`.