This C/C++ program can be optimized in the following ways:

1. **Avoid Initialization of the Unused Part of the Array**: In this program, `dp[110][21]` is initialized to 0, but not all elements are used. We know that `N` is the actual number of elements in the array `a`, so we only need to initialize `dp[N][21]` to 0 instead of `dp[110][21]`. This will save both time and memory.

2. **Use `std::ios::sync_with_stdio(false)`:** This line makes C++ standard streams unsynchronized, which makes them faster.

3. **Use `std::cin.tie(NULL)`:** This unties cin from cout. Tied streams ensure that one stream is flushed automatically before each I/O operation on the other stream.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
int a[101];
long long dp[101][21];

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);
  
  int N;
  cin >> N;
  
  for (int i = 0; i <= N; i++) {
    for (int j = 0; j <= 20; j++) {
      dp[i][j] = 0;
    }
  }
  
  for (int i = 1; i <= N; i++) {
    cin >> a[i];
  }
  
  dp[1][a[1]] = 1;
  for (int i = 2; i < N; i++) {
    for (int j = 0; j <= 20; j++) {
      if (j - a[i] >= 0)
        dp[i][j] += dp[i - 1][j - a[i]];
      if (j + a[i] <= 20)
        dp[i][j] += dp[i - 1][j + a[i]];
    }
  }
  
  cout << dp[N - 1][a[N]] << '\n';
  return 0;
}
```
In the optimized version, first, the size of the array `dp` is reduced to `dp[101][21]` which matches the possible maximum input range. The initialization process is also optimized to only initialize elements that will be used. Secondly, the `std::ios::sync_with_stdio(false)` and `std::cin.tie(NULL)` calls are used to speed up the input/output operations. Finally, the `endl` is replaced with `'\n'` to avoid unnecessary flushing of the output buffer.