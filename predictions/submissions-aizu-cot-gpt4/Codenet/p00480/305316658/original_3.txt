Here are the optimization steps:

1. Instead of initializing the whole dp array to 0, we can just initialize the first row and column to zero. Because, when we read the input, we immediately overwrite the corresponding cell in the dp array. Therefore, we don't need to initialize the whole array.
2. We can also combine the two for loops into one, which will reduce the number of iterations and thus the running time. Right now, the first loop is reading the inputs and the second loop is performing computations. We can perform the computations right after reading each input.
3. We can use "cin.tie(NULL)" and "ios_base::sync_with_stdio(false)" to speed up the cin/cout operations.

Now, let's implement these optimizations:

```c++
#include <iostream>
using namespace std;
int a[101];
long long dp[110][21];

int main() {
  int N;
  cin.tie(NULL);
  ios_base::sync_with_stdio(false);
  cin >> N;
  
  for (int j = 0; j <= 20; j++) {
    dp[0][j] = 0;
  }
  
  for (int i = 1; i <= N; i++) {
    cin >> a[i];
    dp[i][0] = 0;
    dp[i][a[i]] = 1;
    for (int j = 1; j <= 20; j++) {
      if (j - a[i] >= 0)
        dp[i][j] += dp[i - 1][j - a[i]];
      if (j + a[i] <= 20)
        dp[i][j] += dp[i - 1][j + a[i]];
    }
  }
  cout << dp[N - 1][a[N]] << endl;
  return 0;
}
```
Please note that the above changes will improve the running time of the program by reducing the number of iterations and speeding up the cin/cout operations. However, the memory usage will remain the same as we are still using the same amount of memory. To reduce memory usage, we would need to change the algorithm to use less memory, which might not be possible in this case without affecting the correctness of the program.