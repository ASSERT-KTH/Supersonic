Here are some of the optimizations you can make:

1. Use of uninitialized data: The array `a[]` has size 101 but the program only populates the first `N` elements. This means for `N < 101`, the rest of the array has uninitialized values, which can lead to undefined behavior. To address this, you can dynamically allocate the array based on the value of `N`.

2. Redundant initialization: The program initializes all values of `dp[][]` to 0. This is unnecessary because global and static variables in C++ are automatically initialized to 0. You can remove this initialization loop to save time.

3. Memory usage: The program uses a 2D array `dp[][]` of size `110x21`. You can reduce its size to be `N x 21`, because we only need `N` elements in the first dimension.

4. Compute only required values: In the second nested loop, the program computes all values of `dp[][]` even though it only needs `dp[N - 1][a[N]]`. You can add a condition to stop the computation when `i >= N`.

5. Use `ios_base::sync_with_stdio(false)`: This can speed up I/O operations in some cases.

Let's apply these optimizations to the code:

```C++
#include <iostream>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  int N;
  cin >> N;
  int* a = new int[N + 1];
  long long** dp = new long long*[N];
  for(int i = 0; i < N; i++) dp[i] = new long long[21]();

  for (int i = 1; i <= N; i++) {
    cin >> a[i];
  }

  dp[0][a[1]] = 1;

  for (int i = 1; i < N; i++) {
    for (int j = 0; j <= 20; j++) {
      if (j - a[i] >= 0)
        dp[i][j] += dp[i - 1][j - a[i]];
      if (j + a[i] <= 20)
        dp[i][j] += dp[i - 1][j + a[i]];
    }
    if(i >= N - 1) break;
  }

  cout << dp[N - 1][a[N]] << endl;

  for(int i = 0; i < N; i++) delete[] dp[i];
  delete[] dp;
  delete[] a;

  return 0;
}
```
This code is more efficient in terms of running time and memory usage. It only computes and stores the necessary values.