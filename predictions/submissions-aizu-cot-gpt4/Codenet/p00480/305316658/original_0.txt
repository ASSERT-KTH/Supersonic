The optimization steps are as follows:

1. Remove the initialization loop for the dp array. The global or static arrays in C++ are by default initialized to zero.

2. The dimension of the dp array is larger than necessary. As we see in the program we only use dp[i][j] where i ranges from 1 to N, and j ranges from 0 to 20. So change the size of dp array to [101][21] instead of [110][21].

3. Use pre-increment operators (++i) instead of post-increment (i++) where applicable. Pre-increment operators are generally more efficient in C++ because they increment the value without creating a temporary object. 

Now let's apply these optimizations to the code:

```c++
#include <iostream>
using namespace std;

int a[101];
long long dp[101][21]; // Reduce the size of dp array

int main() {
  int N;
  cin >> N;

  for (int i = 1; i <= N; ++i) { // Use pre-increment operator
    cin >> a[i];
  }

  dp[1][a[1]] = 1;

  for (int i = 2; i < N; ++i) { // Use pre-increment operator
    for (int j = 0; j <= 20; ++j) { // Use pre-increment operator
      if (j - a[i] >= 0)
        dp[i][j] += dp[i - 1][j - a[i]];
      if (j + a[i] <= 20)
        dp[i][j] += dp[i - 1][j + a[i]];
    }
  }

  cout << dp[N - 1][a[N]] << endl;
  return 0;
}
```

Note: The actual performance improvement from using pre-increment operators over post-increment operators is compiler and context-dependent. In many situations, modern compilers will optimize away the difference. However, it's still a good practice to use pre-increment operators when the return value is not used.