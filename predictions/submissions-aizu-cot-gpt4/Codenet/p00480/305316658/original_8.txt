The given code is pretty optimized, but there are a few points where we can make minor improvements:

1. If you are not using the `std` namespace anywhere else in the program, you can avoid using the `using namespace std;` line. This will reduce the scope of the `std` namespace to only where it's needed.

2. You initialize all elements of the `dp` array to `0`, but this is unnecessary because global and static variables in C++ are automatically initialized to `0`. You can remove that initialization loop.

3. You can reduce the size of the `dp` array. Currently, it's size is `110x21` (2310 elements). But you only use `N` rows, where `N` is less than or equal to `100`. We can change the size of the `dp` array to `101x21` to save memory.

Here's the optimized code:

```cpp
#include <iostream>

int a[101];
long long dp[101][21];

int main() {
  int N;
  std::cin >> N;

  for (int i = 1; i <= N; i++) {
    std::cin >> a[i];
  }
  
  dp[1][a[1]] = 1;
  
  for (int i = 2; i < N; i++) {
    for (int j = 0; j <= 20; j++) {
      if (j - a[i] >= 0)
        dp[i][j] += dp[i - 1][j - a[i]];
      if (j + a[i] <= 20)
        dp[i][j] += dp[i - 1][j + a[i]];
    }
  }
  
  std::cout << dp[N - 1][a[N]] << std::endl;
  return 0;
}
```
This code is not drastically different from the original one, but it's slightly more memory-efficient and it avoids unnecessary initializations.