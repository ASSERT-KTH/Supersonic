Optimization Steps:
1. We do not need to initialize the entire 2D array dp. In C++, when we declare an array, its elements are automatically initialized to zero.
2. The input array 'a' only needs to store N elements, so we can reduce its size.
3. Use 'std::ios::sync_with_stdio(false)' and 'cin.tie(NULL)' to speed up the cin and cout operations.
4. Instead of using 'endl', '\n' can be used as it does not flush the buffer, making it faster.
5. We can avoid the computation of 'j - a[i]' and 'j + a[i]' twice by storing them in temporary variables.
6. We can limit the second loop (j loop) from 'max(0, a[i] - 20)' to 'min(20, a[i] + 20)' instead of '0' to '20', because only those values of j will lead to valid values in the dp array.

Optimized Program:
```cpp
#include <iostream>
using namespace std;
int a[101];
long long dp[101][21];
int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(NULL);
    int N;
    cin >> N;
    for (int i = 1; i <= N; i++) {
        cin >> a[i];
    }
    dp[1][a[1]] = 1;
    for (int i = 2; i < N; i++) {
        for (int j = max(0, a[i] - 20); j <= min(20, a[i] + 20); j++) {
            if (j - a[i] >= 0)
                dp[i][j] += dp[i - 1][j - a[i]];
            if (j + a[i] <= 20)
                dp[i][j] += dp[i - 1][j + a[i]];
        }
    }
    cout << dp[N - 1][a[N]] << '\n';
    return 0;
}
```