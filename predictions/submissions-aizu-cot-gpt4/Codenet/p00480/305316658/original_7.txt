The original program already appears to be quite optimized in terms of its algorithmic approach. It uses dynamic programming, which is typically one of the most efficient ways to solve this kind of problem. However, there are a few small changes that could potentially improve the performance:

1. Avoiding unnecessary initialization: The program initializes all the elements of the dp array to 0, but this is unnecessary because global and static variables in C++ are automatically initialized to 0.

2. Memory usage: The program declares an array of size 101 for 'a' and 110 for 'dp', but the actual size required is 'N' which is input by the user. We can declare these arrays dynamically to save memory.

3. Input/Output method: cin and cout are slower compared to scanf and printf. If the input size is large, this can lead to time limit exceeded errors. So, we can replace cin and cout with scanf and printf.

Optimized Program:

```cpp
#include <cstdio>
long long dp[21];
int main() {
  int N;
  scanf("%d", &N);
  int *a = new int[N+1];
  for (int i = 1; i <= N; i++) {
    scanf("%d", &a[i]);
  }
  dp[a[1]] = 1;
  for (int i = 2; i < N; i++) {
    long long next[21] = {0};
    for (int j = 0; j <= 20; j++) {
      if (j - a[i] >= 0)
        next[j] += dp[j - a[i]];
      if (j + a[i] <= 20)
        next[j] += dp[j + a[i]];
    }
    for (int j = 0; j <= 20; j++) {
        dp[j] = next[j];
    }
  }
  printf("%lld\n", dp[a[N]]);
  delete[] a;
  return 0;
}
```

Please note, the array 'next' is used to store the next state's dp value. The reason we can't directly update dp[j] in the loop is because dp[j] may be used later in the current loop. So we need to store the next state's dp value temporarily and update dp after the loop.