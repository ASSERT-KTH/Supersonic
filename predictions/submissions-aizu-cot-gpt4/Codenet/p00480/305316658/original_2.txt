This C++ program can be optimized in several ways:

1. **Avoid unnecessary initializations**: The 2D array 'dp' is initialized with 0s using nested for loops at the beginning of the main function. However, in C++, global static variables are automatically initialized to 0. Therefore, the initialization loops are unnecessary and can be removed.

2. **Use pre-increment instead of post-increment**: In C++, pre-increment (++i) is generally faster than post-increment (i++), because post-increment involves a temporary object. Change all post-increments in the loops to pre-increments.

3. **Reduce scope of variables**: Variables 'i' and 'j' don't need to be declared at the beginning of main(). They can be declared within the scope of the loops where they are used. This makes the program cleaner and restricts the scope of 'i' and 'j' to where they are needed.

4. **Use Fast I/O Methods**: cin and cout are slower when compared to scanf and printf. Therefore, we can use scanf and printf instead of cin and cout for faster I/O.

Here is the optimized program:

```cpp
#include <cstdio>
long long dp[110][21];
int a[101];
int main() {
  int N;
  scanf("%d", &N);
  for (int i = 1; i <= N; ++i) {
    scanf("%d", &a[i]);
  }
  dp[1][a[1]] = 1;
  for (int i = 2; i < N; ++i) {
    for (int j = 0; j <= 20; ++j) {
      if (j - a[i] >= 0)
        dp[i][j] += dp[i - 1][j - a[i]];
      if (j + a[i] <= 20)
        dp[i][j] += dp[i - 1][j + a[i]];
    }
  }
  printf("%lld\n", dp[N - 1][a[N]]);
  return 0;
}
```
The above optimized code is faster and more efficient in terms of memory usage. It avoids unnecessary initializations, uses pre-increment for faster execution, declares variables in their minimal necessary scope, and uses faster I/O methods.