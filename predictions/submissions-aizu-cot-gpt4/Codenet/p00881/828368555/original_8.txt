Optimization steps:

1. Minimize the number of calls to `std::map::operator[]` and `std::map::count` to reduce the time complexity. 
2. Use `std::map::find` method to find the key in the map only once. If the key is found, return the corresponding value. If not, compute the value, store it in the map, and return it. This way, we only search the map once instead of potentially three times (`count` + two `operator[]` calls).
3. Reserve space for vectors `a` and `b` to reduce the number of memory allocations when calling `std::vector::push_back`.

Optimized program:

```cpp
#include <iostream>
#include <map>
#include <string>
#include <vector>
using namespace std;
map<pair<vector<int>, int>, int> mp;
string qes[128];

int search(vector<int> &vi, int depth, int used, int m, int n) {
  auto searchResult = mp.find(make_pair(vi, used));
  
  if (searchResult != mp.end())
    return searchResult->second; 
  
  if (vi.size() > (1 << (m - depth)))
    return 100;
  
  if (vi.size() == 1)
    return depth;
  
  int res = 100;
  
  for (int i = 0; i < m; i++) {
    if ((used >> i) & 1)
      continue;
    
    vector<int> a, b;
    a.reserve(vi.size());
    b.reserve(vi.size());
    
    for (int j = 0; j < vi.size(); j++) {
      if (qes[vi[j]][i] == '0')
        a.push_back(vi[j]);
      else
        b.push_back(vi[j]);
    }
    
    if (a.empty() || b.empty())
      continue;
    
    res = min(res, max(search(a, depth + 1, used | (1 << i), m, n),
                       search(b, depth + 1, used | (1 << i), m, n)));
  }
  
  return mp[make_pair(vi, used)] = res;
}

int main() {
  int m, n;
  while (cin >> m >> n, m) {
    for (int i = 0; i < n; i++)
      cin >> qes[i];
    
    vector<int> vi(n);
    for (int i = 0; i < n; i++)
      vi[i] = i;
    
    mp.clear();
    cout << search(vi, 0, 0, m, n) << endl;
  }
}
```

This optimized program will reduce the runtime by limiting the number of map lookups and reducing the number of memory allocations.