There are multiple ways to optimize the given code, here are the steps:

1. The first and most significant optimization would be to avoid duplicate lookups in std::map. In the original code, we are searching the same key twice in the map. Once for checking if the key exists and then to get its value. This can be optimized by using a single lookup.

2. Instead of calling std::map's count function to check if a key exists in map, we can use the find function which will return an iterator to the element if it is found, or map::end otherwise. This way, we can both check if the element exists and get its value with a single lookup.

3. The second optimization would be to avoid creating temporary pair objects. In the original code, we are creating temporary pair objects for map lookup and insertion. This can be optimized by creating a pair object once and reusing it for map lookup and insertion.

4. The third optimization would be to use reserve method for the vectors a and b. This will allocate memory for the vectors in advance and will avoid multiple memory reallocations during the execution of the program.

5. The fourth optimization is to use std::ios::sync_with_stdio(false); in main function. It will disconnect C++ standard streams from their C counterparts. This might provide a significant speedup in some cases.

Here is the optimized code:

```cpp
#include <iostream>
#include <map>
#include <string>
#include <vector>
using namespace std;

map<pair<vector<int>, int>, int> mp;
string qes[128];

int search(vector<int> &vi, int depth, int used, int m, int n) {
  pair<vector<int>, int> key = make_pair(vi, used);
  auto it = mp.find(key);
  if (it != mp.end())
    return it->second;
  if (vi.size() > (1 << (m - depth)))
    return 100;
  if (vi.size() == 1)
    return depth;
  int res = 100;
  for (int i = 0; i < m; i++) {
    if ((used >> i) & 1)
      continue;
    vector<int> a, b;
    a.reserve(vi.size());
    b.reserve(vi.size());
    for (int j = 0; j < vi.size(); j++) {
      if (qes[vi[j]][i] == '0')
        a.push_back(vi[j]);
      else
        b.push_back(vi[j]);
    }
    if (a.empty() || b.empty())
      continue;
    res = min(res, max(search(a, depth + 1, used | (1 << i), m, n),
                       search(b, depth + 1, used | (1 << i), m, n)));
  }
  return mp[key] = res;
}

int main() {
  ios::sync_with_stdio(false);
  int m, n;
  while (cin >> m >> n, m) {
    for (int i = 0; i < n; i++)
      cin >> qes[i];
    vector<int> vi(n);
    for (int i = 0; i < n; i++)
      vi[i] = i;
    mp.clear();
    cout << search(vi, 0, 0, m, n) << endl;
  }
}
```

In this optimized version, the code has been modified to improve running time and memory usage.