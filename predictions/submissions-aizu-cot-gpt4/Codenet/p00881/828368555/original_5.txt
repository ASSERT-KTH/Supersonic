This code's optimization will focus on three main areas:

1. Reduce duplicate computations: The code currently creates the key for the `map` twice in the `search` function. This computation can be done once, stored in a variable, and then used in both places. This will reduce the computation time.

2. Reducing the use of vectors: The code creates two temporary vectors `a` and `b` in each call to the `search` function, which can significantly increase memory usage in recursive calls. We could instead use two integers to count the number of '0's and '1's, and only create vectors when it's necessary to make recursive calls.

3. Use `unordered_map` instead of `map`: The `map` container in C++ is implemented as a red-black tree which gives it a log(n) lookup and insertion time. The `unordered_map` container, however, is implemented as a hash table, giving it an average constant time lookup and insertion. This can speed up the program significantly.

Here is the optimized code:

```cpp
#include <iostream>
#include <unordered_map>
#include <string>
#include <vector>
using namespace std;

unordered_map<pair<vector<int>, int>, int> mp;
string qes[128];

int search(vector<int> &vi, int depth, int used, int m, int n) {
  auto key = make_pair(vi, used);
  if (mp.count(key))
    return mp[key];
  if (vi.size() > (1 << (m - depth)))
    return 100;
  if (vi.size() == 1)
    return depth;
  int res = 100;
  for (int i = 0; i < m; i++) {
    if ((used >> i) & 1)
      continue;
    vector<int> a, b;
    int count_a = 0, count_b = 0;
    for (int j = 0; j < vi.size(); j++) {
      if (qes[vi[j]][i] == '0') {
        count_a++;
        if (res > depth + 1) a.push_back(vi[j]);
      } else {
        count_b++;
        if (res > depth + 1) b.push_back(vi[j]);
      }
    }
    if (count_a == 0 || count_b == 0)
      continue;
    if (res > depth + 1) {
      res = min(res, max(search(a, depth + 1, used | (1 << i), m, n),
                         search(b, depth + 1, used | (1 << i), m, n)));
    }
  }
  return mp[key] = res;
}

int main() {
  int m, n;
  while (cin >> m >> n, m) {
    for (int i = 0; i < n; i++)
      cin >> qes[i];
    vector<int> vi(n);
    for (int i = 0; i < n; i++)
      vi[i] = i;
    mp.clear();
    cout << search(vi, 0, 0, m, n) << endl;
  }
}
```

The optimized code reduces memory usage by avoiding unnecessary vector creation. It also lowers the time complexity by reducing duplicate computations and replacing `map` with `unordered_map`.