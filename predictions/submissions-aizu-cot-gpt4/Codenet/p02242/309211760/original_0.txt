The main operation that can be optimized in this program is the repetitive searching for minimal distance vertex in function dijkstra(). This operation is performed in a linear way, which leads to a bad time complexity of O(n^2), where n is the number of vertices.

This operation can be optimized by using priority queue (heap structure) instead of a simple array to keep track of vertices with minimal distance. Priority queue is a data structure which always keep the minimal (or maximal, depends on the configuration) element at the front, which can extract the minimal element in O(1) and insert an element in O(log n).

This small modification can greatly reduce the time complexity of this program by using more efficient data structures, and won't increase the memory usage as we are only replacing the data structure used to store vertices.

Here is the optimized program:

```cpp
#include <iostream>
#include <queue>
#include <vector>
#include <utility>
using namespace std;
static const int MAX = 100;
static const int INFTY = (1 << 21);
static const int WHITE = 0;
static const int BLACK = 2;
int n, M[MAX][MAX];
void dijkstra() {
  int d[MAX];
  bool color[MAX] = {false};
  for (int i = 0; i < n; i++) {
    d[i] = INFTY;
  }
  d[0] = 0;
  priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> PQ;
  PQ.push(make_pair(0, 0));
  while (!PQ.empty()) {
    pair<int, int> f = PQ.top(); PQ.pop();
    int u = f.second;
    color[u] = true;
    if (d[u] < f.first) continue;
    for (int v = 0; v < n; v++) {
      if (color[v] != BLACK && M[u][v] != INFTY) {
        if (d[v] > d[u] + M[u][v]) {
          d[v] = d[u] + M[u][v];
          PQ.push(make_pair(d[v], v));
        }
      }
    }
  }
  for (int i = 0; i < n; i++) {
    cout << i << " " << (d[i] == INFTY ? -1 : d[i]) << endl;
  }
}
int main() {
  cin >> n;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < MAX; j++) {
      M[i][j] = INFTY;
    }
  }
  int k, c, u, v;
  for (int i = 0; i < n; i++) {
    cin >> u >> k;
    for (int j = 0; j < k; j++) {
      cin >> v >> c;
      M[u][v] = c;
    }
  }
  dijkstra();
  return 0;
}
```
This program now has a complexity of O((E+V)logV) where E is the number of edges and V is the number of vertices.