The current code already follows a good algorithm (Dijkstra's algorithm) for finding the shortest path in a graph, so the algorithm itself doesn't need to be changed for optimization. However, there are few small modifications that can be done to optimize memory usage and runtime.

1. Avoid unnecessary memory allocation: The matrix `M` is initialized with `INFTY` for all cells but only `n` rows are actually used. So, instead of `MAX`, dimension `n` can be used which is known at runtime.

2. Reduce the scope of variables: Variables like `k`, `c`, `u`, `v` in the `main()` function are not used outside the for loop, so we can reduce their scope by declaring them inside the for loop.

3. Use faster I/O methods: `cin` and `cout` are slower compared to `scanf` and `printf`. So, we can use `scanf` and `printf` for faster I/O operations.

4. Use `break` to exit the loop: When `u == -1`, we can break the loop instead of using a 'while(1)' with a break condition inside. This can improve the readability of the code and can avoid potential infinite loops.

Here is the optimized code after applying the above steps:

```c++
#include <cstdio>
#define MAX 100
#define INFTY (1 << 21)
#define WHITE 0
#define GRAY 1
#define BLACK 2

int n, **M;

void dijkstra() {
  int minv;
  int d[MAX], color[MAX];
  for (int i = 0; i < n; i++) {
    d[i] = INFTY;
    color[i] = WHITE;
  }
  d[0] = 0;
  color[0] = GRAY;
  while (1) {
    minv = INFTY;
    int u = -1;
    for (int i = 0; i < n; i++) {
      if (minv > d[i] && color[i] != BLACK) {
        u = i;
        minv = d[i];
      }
    }
    if (u == -1)
      break;
    color[u] = BLACK;
    for (int v = 0; v < n; v++) {
      if (color[v] != BLACK && M[u][v] != INFTY) {
        if (d[v] > d[u] + M[u][v]) {
          d[v] = d[u] + M[u][v];
          color[v] = GRAY;
        }
      }
    }
  }
  for (int i = 0; i < n; i++) {
    printf("%d %d\n", i, (d[i] == INFTY ? -1 : d[i]));
  }
}

int main() {
  scanf("%d", &n);
  M = new int*[n];
  for(int i = 0; i < n; i++) {
    M[i] = new int[n];
    for(int j = 0; j < n; j++) {
      M[i][j] = INFTY;
    }
  }
  for (int i = 0; i < n; i++) {
    int u, k;
    scanf("%d %d", &u, &k);
    for (int j = 0; j < k; j++) {
      int v, c;
      scanf("%d %d", &v, &c);
      M[u][v] = c;
    }
  }
  dijkstra();
  for(int i = 0; i < n; i++) {
    delete [] M[i];
  }
  delete [] M;
  return 0;
}
```

Remember to properly deallocate the dynamically allocated memory to avoid memory leaks.