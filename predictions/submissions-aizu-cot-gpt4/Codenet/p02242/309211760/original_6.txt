Step 1: Avoid unnecessary re-computation

In your while loop, you are scanning the entire array of `d` and `color` on each iteration to find the node with the minimum distance value. This is inefficient. Instead, you can use a priority queue (implemented as a heap) to maintain the nodes sorted by their distance. This way you can get the node with minimum distance in O(1) time and remove it in O(log n) time. This will drastically reduce your running time from O(n^2) to O(n log n).

Step 2: Minimize memory usage

In the existing code, the 2D array `M` is of size `MAX x MAX` which is 100x100 = 10000 elements, this is very large and most of it will not be used if `n` is much less than `MAX`. Instead of a 2D array, we can use an adjacency list to represent the graph, which will save a lot of memory.

Step 3: Removing unnecessary variables

The color array is not necessary. You can directly check in the priority queue whether a node is processed or not.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const int INFTY = (1 << 21);
const int MAX = 100;
typedef pair<int, int> P;

vector<P> adj[MAX];
int n;

void dijkstra() {
    priority_queue<P, vector<P>, greater<P>> pq;
    vector<int> d(n, INFTY);
    d[0] = 0;
    pq.push(P(0, 0));
    while (!pq.empty()) {
        P p = pq.top(); pq.pop();
        int u = p.second;
        if (d[u] < p.first) continue;
        for (auto &x : adj[u]) {
            int v = x.first, dist = x.second;
            if (d[v] > d[u] + dist) {
                d[v] = d[u] + dist;
                pq.push(P(d[v], v));
            }
        }
    }
    for (int i = 0; i < n; i++) {
        cout << i << " " << (d[i] == INFTY ? -1 : d[i]) << endl;
    }
}

int main() {
    cin >> n;
    int k, c, u, v;
    for (int i = 0; i < n; i++) {
        cin >> u >> k;
        for (int j = 0; j < k; j++) {
            cin >> v >> c;
            adj[u].push_back(P(v, c));
        }
    }
    dijkstra();
    return 0;
}
```

Note: In C++, we can use `pair<int, int>` to represent a pair of integers. `priority_queue<P, vector<P>, greater<P>>` is a minimum priority queue of pairs where the pairs are sorted by their first element. `greater<P>` is a comparison function that sorts the pairs in non-decreasing order of their first element. In our case, the first element of the pair is the distance and the second element is the node number.