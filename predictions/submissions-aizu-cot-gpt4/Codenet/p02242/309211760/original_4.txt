The optimization of this program mainly focuses on improving memory usage and running time. Here are the steps:

1. Use a priority queue to store the nodes, which can speed up the process of finding the minimum distance node. It can reduce the time complexity from O(n) to O(logn).

2. Use an adjacency list instead of an adjacency matrix to store the graph. It can save memory when the graph is sparse.

Here's the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
static const int MAX = 100;
static const int INFTY = (1 << 21);
int n;
typedef pair<int, int> P; // pair of minimum distance and vertex number
vector<P> adj[MAX]; // adjacency list

void dijkstra() {
  priority_queue<P, vector<P>, greater<P>> PQ; // min heap
  int d[MAX];
  fill(d, d + n, INFTY);
  d[0] = 0;
  PQ.push(P(0, 0));
  
  while (!PQ.empty()) {
    P p = PQ.top(); PQ.pop();
    int u = p.second;
    if (d[u] < p.first) continue;
    for (auto &e : adj[u]) {
      if (d[e.second] > d[u] + e.first) {
        d[e.second] = d[u] + e.first;
        PQ.push(P(d[e.second], e.second));
      }
    }
  }
  
  for (int i = 0; i < n; i++) {
    cout << i << " " << (d[i] == INFTY ? -1 : d[i]) << endl;
  }
}

int main() {
  cin >> n;
  int k, c, u, v;
  for (int i = 0; i < n; i++) {
    cin >> u >> k;
    for (int j = 0; j < k; j++) {
      cin >> v >> c;
      adj[u].push_back(P(c, v));
    }
  }
  dijkstra();
  return 0;
}
```

In this optimized version, the algorithm is essentially the same, but it's more efficient because we're using a priority queue and an adjacency list. The priority queue allows us to quickly find the node with the shortest distance, and the adjacency list allows us to only store the edges that actually exist, saving memory.