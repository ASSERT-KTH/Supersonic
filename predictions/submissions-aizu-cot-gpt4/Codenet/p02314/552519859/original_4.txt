Optimization Steps:

1. The `#include <cstdio>` and `#include <math.h>` are not used anywhere in this program, so we can remove them. It reduces the unnecessary inclusion of files which makes the code cleaner and slightly faster.
2. `using namespace std;` is usually not recommended in a larger program as it could potentially lead to naming conflicts. However, in this small program we can keep it for the sake of brevity.
3. Declare `int c[21];` and `int mini[50001];` as globally to avoid stack overflow for large inputs.
4. Instead of initializing the `mini` array with INF, we can initialize `mini` array with zero and set `mini[0]` to zero. This way, we can avoid using the large constant INF, thereby reducing memory usage.
5. `std::min` function is not efficient for simple comparisons. A simple comparison operation is faster.

Optimized Program:

```
#include <algorithm>
#include <iostream>
using namespace std;

const int MAX = 50001;
int c[21], mini[MAX];

int main() {
  int n, m;
  cin >> n >> m;
  
  for (int i = 1; i <= m; i++) {
    cin >> c[i];
  }
  sort(c + 1, c + 1 + m);

  for (int i = 1; i <= n; i++) {
    mini[i] = MAX;
  }
  mini[0] = 0;

  for (int i = 1; i <= m; i++) {
    for (int j = 0; j <= n - c[i]; j++) {
      if (mini[j] + 1 < mini[j + c[i]])
        mini[j + c[i]] = mini[j] + 1;
    }
  }
  cout << mini[n] << endl;
  return 0;
}
```