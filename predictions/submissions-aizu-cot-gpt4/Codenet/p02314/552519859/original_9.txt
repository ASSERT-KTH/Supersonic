The optimization steps are as follows:

1. The array "mini" is initialized with a value of INF. However, we can initialize it with a maximum value in C++ using the numeric_limits property from the limits library. This will not only make the initialization faster but will also make it easier to understand. 

2. The inner loop in the program is not efficient. It starts from 0 for every iteration of the outer loop. Instead, it can start from the current coin value 'c[i]' which will reduce the number of unnecessary iterations significantly.

3. We can use `std::fill` to fill the array `mini` which is more efficient than the loop.

4. The program uses both cstdio and iostream. We should stick with iostream for both input and output. This will make the program more consistent and potentially faster because fewer libraries are included.

5. Finally, we don't need to use the math library in this program, so it can be removed.

Here is the optimized code after applying these steps:

```C++
#include <algorithm>
#include <iostream>
#include <limits>
using namespace std;

const int INF = numeric_limits<int>::max();

int main() {
  int n, m;
  cin >> n >> m;
  int c[21];
  int mini[50001];
  
  for (int i = 1; i <= m; i++) {
    cin >> c[i];
  }
  
  sort(c + 1, c + m + 1);
  
  fill(mini, mini + n + 1, INF);
  mini[0] = 0;
  
  for (int i = 1; i <= m; i++) {
    for (int j = c[i]; j <= n; j++) {
      mini[j] = min(mini[j], mini[j - c[i]] + 1);
    }
  }
  
  cout << mini[n] << endl;
  return 0;
}
```

The time complexity of the optimized program is O(n*m) where n is the target sum and m is the number of coin denominations. The space complexity is O(n), where n is the target sum. The time complexity is the same as the original program but the implementation is more efficient.