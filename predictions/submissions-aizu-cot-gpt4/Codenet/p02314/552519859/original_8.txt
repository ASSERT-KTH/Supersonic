Optimization Steps:

1. The usage of the `std::min` function can be reduced by checking the conditions before assignment.
2. The usage of `std::sort` can be high as it has a O(nlogn) time complexity. But since the problem doesn't seem to require sorted input, we can remove it.
3. The `mini` array is initialized to `INF` for `n` elements, but this could be avoided if we initialize it to `INF` only when it is actually going to be used in the loop.
4. Use `scanf` and `printf` instead of `cin` and `cout` for faster I/O operations.

Optimized Code:

```cpp
#include <cstdio>
#include <algorithm>
using namespace std;
const int INF = 2000000000;
int main() {
    int n, m;
    scanf("%d %d",&n,&m);
    int c[21];
    int mini[50001] = {0};
    for (int i = 1; i <= m; i++) {
        scanf("%d",&c[i]);
    }
    for (int i = 1; i <= n; i++)
        mini[i] = INF;
    for (int i = 1; i <= m; i++) {
        for (int j = 0; j <= n - c[i]; j++) {
            if (mini[j] + 1 < mini[j + c[i]])
                mini[j + c[i]] = mini[j] + 1;
        }
    }
    printf("%d\n",mini[n]);
    return 0;
}
```
This optimized version of the program should run faster due to the reduced number of operations and improved I/O operations.