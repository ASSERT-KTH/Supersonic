The given code has a time complexity of O(n*m) and space complexity of O(n). It can be optimized by reducing the computation in the inner loop. Here are the optimization steps:

1. Remove the sort function: The sort function has a time complexity of O(m log m) which is not necessary in this case because the order of elements in array `c` does not affect the result.

2. Reduce the range of inner loop: The inner loop starts from 0 to `n - c[i]`, where `c[i]` is the i-th coin. For each coin, it checks all the possible sums that can be made using this coin. This is redundant because the results of previous sums are already stored in the `mini` array. The inner loop can start from `c[i]` instead of 0 to reduce the computation.

3. Initialize the `mini` array with 0: The `mini` array is used to store the minimum number of coins needed to make a sum. It is initialized with `INF` for all sums except 0. However, it can be initialized with 0 because the default value of `mini[j + c[i]]` is 0 which means no coin is needed to make a sum of 0.

Here is the optimized program:

```cpp
#include <cstdio>
#include <iostream>
using namespace std;
const int INF = 2000000000;
int main() {
  int n, m;
  cin >> n >> m;
  int c[21];
  int mini[50001] = {0};
  for (int i = 1; i <= m; i++) {
    cin >> c[i];
  }
  for (int i = 1; i <= n; i++)
    mini[i] = INF;
  for (int i = 1; i <= m; i++) {
    for (int j = c[i]; j <= n; j++) {
      mini[j] = min(mini[j] + 1, mini[j - c[i]] + 1);
    }
  }
  cout << mini[n] << endl;
  return 0;
}
```

This program has a time complexity of O(n*m) and space complexity of O(n), but it reduces the computation in the inner loop which can speed up the program in practice.