The main inefficiency in this code is the use of a nested loop for calculating the minimum number of coins. This results in a time complexity of O(n*m), which can be quite inefficient when `n` and `m` are large. We can optimize this by using a dynamic programming approach where we only calculate the minimum number of coins for each amount once, and then use these values for larger amounts. 

The first step in the optimization is to initialize the `mini` array with a large value, except for the 0th position, which should be 0 because no coins are needed for an amount of 0.

The second step is to loop through each coin, and for each coin, we loop through from the coin value to `n`. If the current amount (i) is greater than or equal to the current coin value, we update the minimum number of coins needed for amount `i` by comparing the current value and `1+mini[i-coin]`.

By doing this, we make sure that each amount is only calculated once, which reduces the time complexity.

Here is the optimized code:

```cpp
#include <algorithm>
#include <cstdio>
#include <iostream>
#include <math.h>
using namespace std;
const int INF = 2000000000;
int main() {
  int n, m;
  cin >> n >> m;
  int c[21];
  int mini[50001];
  fill(mini, mini+n+1, INF);
  mini[0] = 0;
  for (int i = 1; i <= m; i++) {
    cin >> c[i];
  }
  sort(c + 1, c + 1 + m);
  for (int i = 1; i <= m; i++) {
    for (int j = c[i]; j <= n; j++) {
      mini[j] = min(mini[j], mini[j-c[i]]+1);
    }
  }
  cout << mini[n] << endl;
  return 0;
}
```

This optimized code has a time complexity of O(n*m), but since we are not repeating calculations for each amount, the actual running time will be much faster. We also have a constant space complexity of O(n), which is the same as the original code.