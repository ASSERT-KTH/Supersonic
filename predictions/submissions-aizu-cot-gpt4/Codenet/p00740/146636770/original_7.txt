The original program can be optimized in a few ways:

1. The array `stone` doesn't need to be initialized in every iteration of the while loop. Instead, we can move the initialization outside the loop. This way, we only initialize the array once, saving time.

2. The nested for loop at the end of the while loop seems to be doing nothing useful as the calculated result `k` is not used anywhere. This is a huge waste of CPU cycles, so we can simply remove this part of the code.

3. The `cin >> n >> p;` can be combined into one line. This won't have a significant impact on performance, but it makes the code cleaner.

4. The calculation `i = (i + 1) % n` can be replaced with `++i % n` to avoid unnecessary addition when `i` is incremented.

5. The `bowl = bowl + stone[i];` can be replaced with `bowl += stone[i];` for better readability.

6. The `if (bowl == 0 && stone[i] == p)` can be replaced with `if (!bowl && stone[i] == p)` for better readability.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;

int main(void) {
  int stone[50] = {0};
  int n, p, bowl, ans;
  bool flg;
  
  while (1) {
    cin >> n >> p;

    if (n == 0 && p == 0) {
      return 0;
    }

    bowl = p;
    flg = true;

    for (int i = 0; flg; i = (i + 1) % n) {
      if (bowl == 0) {
        bowl += stone[i];
        stone[i] = 0;
      } else {
        stone[i]++;
        bowl--;
        if (!bowl && stone[i] == p) {
          ans = i;
          flg = false;
        }
      }
    }

    cout << ans << endl;
  }
}
```
This optimized version will run faster and consume less memory than the original version.