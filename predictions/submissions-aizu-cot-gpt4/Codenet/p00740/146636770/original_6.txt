The program can be optimized in the following ways:

1) Move the declaration of the "stone" array outside of the infinite while loop. This will prevent the program from allocating and deallocating memory for the array in each iteration of the loop, thus reducing memory usage.

2) The two nested for-loops at the end of the program are useless. They do nothing but waste CPU time by performing 1,000,000 * 1,000,000 operations. This part of the code should be deleted to improve runtime.

3) The "flg" variable is used to break out of the loop when the right condition is met. This can be simplified by replacing the "flg" condition in the for-loop with the desired condition (bowl != 0 || stone[i] != p) and removing the "flg" variable, saving a little bit of memory.

4) Instead of using two separate cin statements to get the values of n and p, you can use a single cin statement with the >> operator, which might be slightly faster.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;

int main(void) {
  int stone[50];
  while (1) {
    for (int k = 0; k < 50; k++) {
      stone[k] = 0;
    }
    int bowl, n, p;
    cin >> n >> p;
    if (n == 0 && p == 0) {
      return 0;
    }
    bowl = p;
    int ans;
    for (int i = 0; bowl != 0 || stone[i] != p; i = (i + 1) % n) {
      if (bowl == 0) {
        bowl = bowl + stone[i];
        stone[i] = 0;
      } else {
        stone[i]++;
        bowl--;
        if (bowl == 0 && stone[i] == p) {
          ans = i;
        }
      }
    }
    cout << ans << endl;
  }
}
```
