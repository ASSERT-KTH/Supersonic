The given program can be optimized for running time and memory usage in several ways:

1. Unnecessary Loop: The nested loop at the end of the program which does a computation and stores it into an unused variable 'k' is unnecessary and can be removed. This will vastly improve the running time as the loop has a time complexity of O(1,000,000^2).

2. Initialization of 'stone' array: Instead of using a loop to initialize each element of the 'stone' array to 0, you can use the array initialization syntax to initialize all elements at once. This will reduce the time complexity of this operation from O(n) to O(1).

3. Input reading: Instead of reading 'n' and 'p' separately, we can read them together. This will reduce the number of input operations from 2 to 1.

Here is the optimized version of the given program:

```cpp
#include <iostream>
using namespace std;
int main(void) {
  while (1) {
    int stone[50] = {0}; // initialize all elements to 0
    int bowl;
    int n, p;
    cin >> n >> p; // read n and p together
    if (n == 0 && p == 0) {
      return 0;
    }
    bowl = p;
    bool flg = true;
    int ans;
    for (int i = 0; flg; i = (i + 1) % n) {
      if (bowl == 0) {
        bowl = bowl + stone[i];
        stone[i] = 0;
      } else {
        stone[i]++;
        bowl--;
        if (bowl == 0 && stone[i] == p) {
          ans = i;
          flg = false;
        }
      }
    }
    cout << ans << endl;
  }
}
```
The optimized version of the program runs faster and uses less memory than the original version.