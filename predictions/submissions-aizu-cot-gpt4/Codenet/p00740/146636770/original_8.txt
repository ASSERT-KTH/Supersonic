The program has several parts where we can optimize it:

1. We can move the `int stone[50]` array declaration outside the while loop. This way, we don't create and destroy the array for each iteration, which saves time and memory.

2. The initialization of the `stone` array with zeros can be done with `memset` which is faster than a loop.

3. The nested loop with `i` and `j` just calculates `k` but doesn't use the value at all. This whole block can be removed.

4. The `cin >> n >> p` can be combined into one line, which slightly optimizes the code.

5. The `bool flg` variable, which is used to break the loop, can be replaced with a `break` statement. This is more efficient and makes the code clear.

6. The `bowl = p` assignment can be moved to where `bowl` is declared.

Here is the optimized version of the code:

```cpp
#include <iostream>
#include <cstring>
using namespace std;

int main(void) {
  int stone[50];
  
  while (1) {
    memset(stone, 0, sizeof(stone));
    
    int n, p;
    cin >> n >> p;
    if (n == 0 && p == 0) {
      return 0;
    }
    
    int bowl = p;
    int ans;
    
    for (int i = 0; ; i = (i + 1) % n) {
      if (bowl == 0) {
        bowl = bowl + stone[i];
        stone[i] = 0;
      } else {
        stone[i]++;
        bowl--;
        if (bowl == 0 && stone[i] == p) {
          ans = i;
          break;
        }
      }
    }
    
    cout << ans << endl;
  }
}
```

This version of the code has the same functionality but is more efficient in terms of memory and running time.