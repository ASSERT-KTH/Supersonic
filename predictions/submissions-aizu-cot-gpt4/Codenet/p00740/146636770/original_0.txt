Optimization Steps:

1. Initialize the `stone` array only once, outside the while loop, instead of in each iteration. This will save a lot of time as array initialization is an expensive operation.

2. Remove the unnecessary nested loop at the end of the while loop which is wasting CPU cycles. It does not contribute to the main logic of the program.

3. Combine the two `cin` statements into one. This won't make a huge difference, but it's a small optimization.

4. Remove the `bowl = bowl + stone[i];` line and replace it with `bowl = stone[i];`. This is because `bowl` is always zero when this line is executed, so there is no need to add it.

5. Declare the `ans` variable outside the while loop to avoid redeclaration in each iteration.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;

int main(void) {
  int stone[50] = {0};
  int ans;
  while (1) {
    int bowl, n, p;
    cin >> n >> p;
    if (n == 0 && p == 0) {
      return 0;
    }
    bowl = p;
    bool flg = true;
    for (int i = 0; flg; i = (i + 1) % n) {
      if (bowl == 0) {
        bowl = stone[i];
        stone[i] = 0;
      } else {
        stone[i]++;
        bowl--;
        if (bowl == 0 && stone[i] == p) {
          ans = i;
          flg = false;
        }
      }
    }
    cout << ans << endl;
  }
}
```
These modifications will make the program run faster and use less memory.