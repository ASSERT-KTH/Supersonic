Here are some optimization steps:

1. The initialization of the array `stone` can be removed as it is not necessary to initialize the array to 0. C++ does not require arrays to be initialized before usage.

2. The variables `n`, `p` and `bowl` can be declared in the while loop scope instead of the main function scope as they are only used inside the while loop. This can potentially save memory as the variables are destroyed at the end of each loop iteration.

3. The nested for loop at the end of the while loop does not provide any functional value to the program and can be removed. This loop creates a variable `k`, adds `i` and `j` to it, but does not use `k` for anything meaningful which results in unnecessary computation and memory usage.

4. The boolean flag `flg` is used to break the for-loop, but this can be achieved by using a break statement instead. This eliminates the need for the boolean variable and makes the code more readable.

Here is the optimized code:

```cpp
#include <iostream>
using namespace std;
int main(void) {
  while (1) {
    int stone[50];
    int n, p, bowl;

    cin >> n >> p;

    if (n == 0 && p == 0) {
      return 0;
    }

    bowl = p;

    int ans;
    for (int i = 0; ; i = (i + 1) % n) {
      if (bowl == 0) {
        bowl = bowl + stone[i];
        stone[i] = 0;
      } else {
        stone[i]++;
        bowl--;
        if (bowl == 0 && stone[i] == p) {
          ans = i;
          break;
        }
      }
    }

    cout << ans << endl;
  }
}
```

Please note that the optimization in terms of time and space complexity would be negligible as the changes are minor and the main logic of the code remains the same. However, removing the nested for-loop would significantly decrease the running time of the program.