Step 1:

The first optimization can be done by moving "int stone[50];" outside the while loop. This would make sure that the array is not created and destroyed in each iteration of the while loop, reducing memory allocation and deallocation overhead.

Step 2:

The second optimization is to remove the nested for loops at the end of the while loop. These loops seem to serve no purpose other than wasting CPU cycles because the computed value of 'k' is not used anywhere.

Step 3:

The third optimization is to combine the two cin calls into one line. This will reduce the number of input/output operations, which are typically slow.

Here is the optimized program:

```cpp
#include <iostream>
using namespace std;
int main(void) {
  int stone[50] = {0};
  int bowl, n, p, ans;
  bool flg;
  while (1) {
    cin >> n >> p;
    if (n == 0 && p == 0) {
      return 0;
    }
    bowl = p;
    flg = true;
    for (int i = 0; flg; i = (i + 1) % n) {
      if (bowl == 0) {
        bowl = bowl + stone[i];
        stone[i] = 0;
      } else {
        stone[i]++;
        bowl--;
        if (bowl == 0 && stone[i] == p) {
          ans = i;
          flg = false;
        }
      }
    }
    cout << ans << endl;
  }
}
```
Please note that this optimization does not necessarily improve the speed of the program, but it does reduce the memory usage and makes the code cleaner.