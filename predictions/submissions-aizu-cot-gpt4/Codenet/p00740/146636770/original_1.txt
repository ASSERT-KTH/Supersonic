The program can be optimized in several ways:

1. Move the declaration of the "stone" array out of the infinite while loop. By doing this, the allocation of the array won't be done in each iteration of the loop, saving time and memory.

2. There's no need to initialize the "stone" array to 0 since it is reset in every iteration of the inner loop.

3. The nested loop at the end of the program doesn't seem to do anything useful. The variable "k" is computed but never used. Unless it has some side effect that's not shown in the code, this loop can be removed.

4. Rather than using cin for input, you can use scanf, as it is faster.

Here is the optimized version of the code:

```
#include <iostream>
using namespace std;
int main(void) {
  int stone[50];
  int bowl, n, p, ans;
  while (1) {
    scanf("%d%d", &n, &p);
    if (n == 0 && p == 0) {
      return 0;
    }
    bowl = p;
    bool flg = true;
    for (int i = 0; flg; i = (i + 1) % n) {
      if (bowl == 0) {
        bowl = bowl + stone[i];
        stone[i] = 0;
      } else {
        stone[i]++;
        bowl--;
        if (bowl == 0 && stone[i] == p) {
          ans = i;
          flg = false;
        }
      }
    }
    cout << ans << endl;
  }
}
```