Here are the optimization steps:

1. The initialization of the `stone` array can be removed. In C++, local variables of built-in types are not initialized by default. However, in this case, the initialization is not necessary since each element of the array is assigned a value before being used.

2. The nested loop at the bottom of the code doesn't actually contribute to any output or change in the program's state, so it can be removed. It seems to be just used for creating a delay which is unnecessary and causes a high running time.

3. The variables `n`, `p`, `bowl`, `ans`, `flg` can be declared outside the while loop to save memory.

4. The `cin` calls to read `n` and `p` can be combined into a single line.

Here's the optimized code:

```cpp
#include <iostream>
using namespace std;

int main(void) {
  int stone[50];
  int bowl, n, p, ans;
  bool flg;

  while (1) {
    cin >> n >> p;

    if (n == 0 && p == 0) {
      return 0;
    }

    bowl = p;
    flg = true;

    for (int i = 0; flg; i = (i + 1) % n) {
      if (bowl == 0) {
        bowl = bowl + stone[i];
        stone[i] = 0;
      } else {
        stone[i]++;
        bowl--;
        if (bowl == 0 && stone[i] == p) {
          ans = i;
          flg = false;
        }
      }
    }

    cout << ans << endl;
  }
}
```

This optimized version of the program should run faster and use less memory than the original version.