Optimization Steps:

1. Reserve memory for vector: A vector dynamically allocates memory as elements are added. This can sometimes cause overhead if the size of the data is known in advance. In the case of the 'starts' vector, we know that in the worst case, it can hold n*n elements. Thus, we can reserve memory for n*n elements in advance which can improve the performance. 
   
2. Use emplace_back instead of push_back: When we use push_back, a new object is created and then this new object is copied to the vector. However, if we use emplace_back, the new object is constructed in place thus avoiding the overhead of temporary object creation and destruction.
   
3. Avoid unneccessary multiplication: In the current code, the 'a' variable is multiplied by -1 if it is less than 0. However, we can avoid this multiplication by just negating the 'a' variable.
   
4. Avoid unnecessary assignment: If 'sum' is not equal to 0, then 'ret' is already false. So, we can remove the assignment 'ret = false' inside the if condition.

Optimized Program:

```cpp
#include <algorithm>
#include <functional>
#include <iostream>
#include <map>
#include <stdio.h>
#include <string>
#include <vector>
using namespace std;
typedef long long ll;
#define rep(i, n) for (int i = 0; i < (n); i++)
typedef pair<int, int> Point;
typedef pair<int, Point> SP;
typedef vector<vector<int>> Mat;
int dx[] = {0, 1, 0, -1};
int dy[] = {-1, 0, 1, 0};
int n;
Mat mat;
vector<vector<bool>> used;
vector<SP> starts;
bool dfs(int cur, int sum, int x, int y) {
  if (starts[cur].first == sum) {
    cur++;
    sum = 0;
    if (cur >= starts.size()) {
      return true;
    }
    x = starts[cur].second.second;
    y = starts[cur].second.first;
  } else if (starts[cur].first < sum) {
    return false;
  }
  for (int i = 0; i < 4; i++) {
    int nx = x + dx[i];
    int ny = y + dy[i];
    if (0 <= nx && nx < n && 0 <= ny && ny < n && !used[ny][nx]) {
      used[ny][nx] = true;
      if (dfs(cur, sum + mat[ny][nx], nx, ny))
        return true;
      used[ny][nx] = false;
    }
  }
  return false;
}
void solve() {
  mat = Mat(n, vector<int>(n));
  used = vector<vector<bool>>(n, vector<bool>(n, false));
  starts.clear();
  starts.reserve(n*n);
  int sum = 0;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      int a;
      cin >> a;
      sum += a;
      if (a < 0) {
        a = -a;
        used[i][j] = true;
        starts.emplace_back(a, Point(i, j));
      }
      mat[i][j] = a;
    }
  }
  bool ret = false;
  if (sum != 0) {
    // ret is already false
  } else if (starts.size() == 1) {
    ret = true;
  } else {
    sort(starts.begin(), starts.end(), greater<SP>());
    ret = dfs(0, 0, starts[0].second.second, starts[0].second.first);
  }
  cout << (ret ? "YES" : "NO") << endl;
  return;
}
int main() {
  while (true) {
    cin >> n;
    if (n == 0)
      break;
    solve();
  }
  return 0;
}
```