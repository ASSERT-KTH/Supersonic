The optimization of the given C/C++ program can be achieved by doing the following:

1. Precompute the values of `east` and `west` for all `N` people instead of recomputing them for each query. This change reduces the time complexity of the program from `O(N*Q)` to `O(N+Q)`. This is a significant improvement when the number of queries `Q` is large.

2. Instead of using an array to store the people's indices, use a single integer. This change reduces the memory usage of the program. The array `people` is not necessary because we can directly use the value read from the input.

Here is the optimized code:

```cpp
#include <iostream>
#include <limits.h>
using namespace std;
using ll = long long;
const ll MIN = -(LONG_LONG_MAX - 1);

int main() {
  int N, Q;
  ll T;
  cin >> N >> T >> Q;
  ll A[100001];
  int D[100001];
  ll east[100001], west[100001];
  for (int i = 0; i < N; i++) {
    cin >> A[i] >> D[i];
    if (D[i] == 1) {
      east[i] = i > 0 && D[i-1] == 1 ? A[i-1] : A[i];
      west[i] = MIN;
    } else {
      west[i] = i > 0 && D[i-1] == 2 ? A[i-1] : A[i];
      east[i] = MIN;
    }
  }
  int person;
  ll t;
  for (int i = 0; i < Q; i++) {
    cin >> person;
    person--;
    if (D[person] == 1) {
      t = (east[person] + A[person]) / 2;
      if (T < abs(t - A[person])) {
        cout << A[person] + T << endl;
      } else {
        cout << t << endl;
      }
    } else {
      t = (west[person] + A[person]) / 2;
      if (T < abs(A[person] - t)) {
        cout << A[person] - T << endl;
      } else {
        cout << t << endl;
      }
    }
  }
  return 0;
}
```

Note: This optimized code assumes that the `D` array contains only the values `1` and `2`. If it can contain other values, then additional checks should be added to the computation of `east` and `west`.