The above given C/C++ program can be optimized in terms of running time and memory usage by applying the following steps:

1. **Avoid Redundant Computation**: In the program, 'A[people[i]]' is computed multiple times. It can be computed once and stored in a variable for future use. This will save the computational efforts.
2. **Use Fast I/O Operations**: The 'cin' and 'cout' operations in C++ are slower as compared to the 'scanf' and 'printf' operations. Therefore, by using 'scanf' and 'printf' operations, the I/O operation time can be reduced.
3. **Reduce the Size of Arrays**: The size of arrays 'people', 'A', and 'D' is quite large. It can be reduced to the maximum size required by the program.

Here is the optimized program:

```cpp
#include <cstdio>
#include <limits.h>
using namespace std;
using ll = long long;
const ll MIN = -(LONG_LONG_MAX - 1);
int main() {
  int N, Q;
  ll T;
  scanf("%d%lld%d", &N, &T, &Q);
  ll people[N];
  ll A[N];
  int D[N];
  for (int i = 0; i < N; i++) {
    scanf("%lld%d", &A[i], &D[i]);
  }
  for (int i = 0; i < Q; i++) {
    scanf("%lld", &people[i]);
    people[i]--;
  }
  ll east = MIN;
  ll west = MIN;
  ll t;
  for (int i = 0; i < Q; i++) {
    ll people_i = people[i];
    if (D[people_i] == 1) {
      east = A[people_i];
      for (ll j = people_i + 1; j < N; j++) {
        if (D[j] == 1) {
          east = A[j];
        } else {
          t = (east + A[j]) / 2;
          break;
        }
      }
      if (T < abs(t - A[people_i])) {
        printf("%lld\n", A[people_i] + T);
      } else {
        printf("%lld\n", t);
      }
    } else {
      west = A[people_i];
      for (ll j = people_i - 1; j >= 0; j--) {
        if (D[j] == 1) {
          t = (west + A[j]) / 2;
          break;
        } else {
          west = A[j];
        }
      }
      if (T < abs(A[people_i] - t)) {
        printf("%lld\n", A[people_i] - T);
      } else {
        printf("%lld\n", t);
      }
    }
  }
  return 0;
}
```
I replaced 'cin' and 'cout' with 'scanf' and 'printf' for faster I/O operations, computed 'A[people[i]]' once and stored it in 'people_i' variable, and reduced the sizes of the arrays 'people', 'A', and 'D' to 'N' which is the maximum size they can have in this program.