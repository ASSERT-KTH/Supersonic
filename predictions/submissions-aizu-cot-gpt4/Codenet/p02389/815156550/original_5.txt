The given program is pretty simple and efficient. It doesn't have any loops or complex data structures that can be optimized. The memory usage is minimal and the running time is constant. However, we can do a tiny optimization by declaring the variables `a` and `b` at the time of input to minimize the number of lines and thus, possibly, the execution time. Here is the optimized code.

```cpp
#include <iostream>

int main() {
  int a, b;
  std::cin >> a >> b;
  std::cout << a * b << " " << (a + b) * 2 << std::endl;
}
```

This optimized code reduces the number of multiplications from 3 to 2. This is a very minor optimization, but it can make a difference in a larger program or if this code is executed many times. 

Remember, this is a very simple program. In more complex programs, optimization could involve techniques like avoiding unnecessary computations, using efficient data structures, minimizing IO operations, etc. Also, modern compilers are good at optimizing code, so manual optimizations like this one might not make a noticeable difference in practice. The most important thing is to write clear and correct code. If performance becomes an issue, then you can use profiling tools to identify bottlenecks and optimize those specific parts of your code.