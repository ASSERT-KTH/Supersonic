The given code is pretty simple and efficient already, but there's a small optimization you can make in terms of running time. The `printf` function is considered slower than `puts` or `putchar` because it has to parse the format string. Since you are only printing integers followed by a newline, you can use `putchar` to print the newline and `printf` for the integers.

Here's the optimized program:

```
#include <stdio.h>
int main() {
  int a, b;
  scanf("%d %d", &a, &b);
  int area = a * b;
  int c = a * 2 + b * 2;
  printf("%d ", area);
  printf("%d", c);
  putchar('\n');
}
```

This optimization is very minimal and may not result in a noticeable difference in execution time, but it is technically faster because it avoids the need to parse the format string in the second `printf` call. 

As for memory optimization, the given code is already optimal. It only uses four integers, which is the minimum required to perform the task. 

It's worth mentioning that in practice, such micro-optimizations are rarely needed. Compiler optimizations usually take care of these things, and they can often do a better job than a human. The key to writing efficient code is not micro-optimizations, but choosing the right algorithms and data structures for the task at hand.