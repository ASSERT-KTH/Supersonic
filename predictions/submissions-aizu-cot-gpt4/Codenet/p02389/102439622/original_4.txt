The given C/C++ program is quite simple and already efficient. It reads two integers, calculates the area and the perimeter of a rectangle with sides of these lengths, and then prints these two values. 

However, there is a minimal optimization we can do. We can avoid calculating `a * 2` and `b * 2` separately and calculate `2 * (a + b)` instead. This way, there is only one multiplication operation instead of two, thus saving a very small amount of computational resource.

Here is the optimized code:

```c
#include <stdio.h>
int main() {
  int a, b;
  scanf("%d %d", &a, &b);
  int area = a * b;
  int c = 2 * (a + b);
  printf("%d %d\n", area, c);
}
```

Please note that this optimization is very minor and may not result in a noticeable difference in running time or memory usage for this specific program since the operations here are very simple. The real benefit of this optimization might be seen in more complex and larger programs. 

Also, the effectiveness of this optimization might depend on the specific compiler and its ability to optimize code on its own during compilation. Some compilers might already perform this kind of optimization automatically.