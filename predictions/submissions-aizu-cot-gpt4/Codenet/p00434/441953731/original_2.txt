Optimization:

1. Avoid using `#include <bits/stdc++.h>` because this includes a lot of unnecessary libraries which makes the program slower and consumes more memory. Instead, include only required libraries, in this case `iostream` and `set`.

2. Use `ios_base::sync_with_stdio(false); cin.tie(NULL);` to make input/output faster.

3. Use `reserve()` function for `set` to avoid the internal reallocation of memory which can save time when the number of elements is large.

Here is the optimized program:

```cpp
#include <iostream>
#include <set>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  set<int> data;
  data.reserve(30);  // Reserve space for 30 elements
  int n;
  for (int i = 0; i < 28; i++) {
    cin >> n;
    data.insert(n);
  }
  
  for (int i = 1; i <= 30; i++) {
    if (!data.count(i))
      cout << i << '\n';
  }

  return 0;
}
```
Please note that `reserve()` is not a valid function for the std::set in C++. It's used in vector, deque, and string to allocate memory in advance. But in this case, the size of the set is not big enough to cause a significant performance issue. 

Also note that the `endl` manipulator not only inserts a newline, but it also flushes the output buffer every time it's called. This can make your output operations significantly slower. Replacing `endl` with `'\n'` can therefore speed up your code when you're doing a lot of output. 

The `ios_base::sync_with_stdio(false); cin.tie(NULL);` lines are used to untie C and C++ standard streams, and to turn off synchronization of all the C++ standard streams with their corresponding standard C streams. This can make input and output operations more efficient.