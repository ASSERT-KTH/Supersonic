In the given code, a set is used to store the input. The set data structure in C++ is implemented using a self-balancing binary search tree and hence, operations like insertion and count take O(logN) time. However, since the range of numbers is small (1 to 30), we can use an array of size 30 to store the presence of numbers which would require constant time for insertion and checking presence.

Here are the steps to optimize the code:

1. Replace the set with an array of size 31. Initialize all values to 0. The indices of the array will represent the numbers from 1 to 30.
2. Instead of inserting into the set, mark the corresponding index in the array as 1.
3. Finally, instead of checking if a number is present in the set, check if the value at the corresponding index in the array is 0.

The optimized code is as follows:

```cpp
#include <bits/stdc++.h>
using namespace std;
int main() {
  vector<int> data(31, 0);
  int n;
  for (int i = 0; i < 28; i++) {
    cin >> n;
    data[n] = 1;
  }
  for (int i = 1; i <= 30; i++) {
    if (data[i] == 0)
      cout << i << endl;
  }
}
```

This code runs faster since all operations are constant time, and also uses less memory since an array of integers is smaller than a set of integers.