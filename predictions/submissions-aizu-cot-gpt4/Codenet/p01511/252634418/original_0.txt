I see a few potential optimizations for this C++ code:

1. Using the "reserve" function: The "push_back" operation may cause a vector to reallocate its memory if the current capacity is not enough to hold the new element. It's better to know the size of the data beforehand and reserve the space.

2. Using prefix increment (++i) instead of post-increment (i++): In C++, the post-increment involves a copy of the object, which makes it slightly less efficient than prefix increment.

3. Use of "#define" for constants: Defining constants using "#define" can cause problems because it doesn't respect scope and type rules.

4. Avoiding "using namespace std": This command brings everything from the std namespace into the global namespace, which can lead to name clashing issues.

5. Use of modulus operator: Modulus operation is computationally expensive. It can be replaced with a simple if condition to check overflow.

Here is your modified code:

```cpp
#include <iostream>
#include <vector>
#include <map>
#include <cstdio>
using std::cin;
using std::cout;
using std::endl;
using std::vector;
using std::pair;
using std::map;
using std::ostream;

typedef long long ll;
typedef vector<ll> vl;
typedef vector<vl> mat;

const ll mod = 1000000009;

mat mul(const mat &A, const mat &B) {
  int n = A.size();
  mat C(n, vl(n));
  for (int i = 0; i < n; ++i) 
    for (int j = 0; j < n; ++j) 
      for (int k = 0; k < n; ++k){
        C[i][j] += A[i][k] * B[k][j];
        if (C[i][j] >= mod) {
          C[i][j] -= mod;
        }
      }
  return C;
}

mat mat_pow(const mat &A, ll x) {
  int n = A.size();
  mat ret(n, vl(n));
  for (int i = 0; i < n; ++i) ret[i][i] = 1;
  mat P(A);
  while (x) {
    if (x & 1)
      ret = mul(ret, P);
    P = mul(P, P);
    x >>= 1;
  }
  return ret;
}

vl mul(const mat &A, const vl &b) {
  int n = A.size();
  vl ret(n);
  for (int i = 0; i < n; ++i) 
    for (int j = 0; j < n; ++j) {
      ret[i] += A[i][j] * b[j];
      if (ret[i] >= mod) {
        ret[i] -= mod;
      }
    }
  return ret;
}

int main() {
  int T = 1;
  int w, n;
  ll h;
  while (cin >> w >> h >> n, w) {
    map<ll, vector<int>> obj;
    for (int i = 0; i < n; ++i) {
      ll x, y;
      cin >> x >> y;
      --x;
      --y;
      if (y > 0) {
        obj[y].push_back(x);
      }
    }
    mat O(w, vl(w));
    for (int i = 0; i < w; ++i) {
      for (int j = -1; j <= 1; ++j) {
        if (0 <= i + j && i + j < w)
          O[i][i + j] = 1;
      }
    }
    mat A(w, vl(w));
    for (int i = 0; i < w; ++i) A[i][i] = 1;
    ll ny = 0;
    for (const auto &p : obj) {
      ll Y = p.first;
      if (Y - ny > 1) {
        A = mul(mat_pow(O, Y - ny - 1), A);
      }
      mat B(O);
      for (int i : p.second) {
        for (int j = -1; j <= 1; ++j) {
          if (0 <= i + j && i + j < w)
            B[i][i + j] = 0;
        }
      }
      A = mul(B, A);
      ny = Y;
    }
    if (ny != h - 1)
      A = mul(mat_pow(O, h - 1 - ny), A);
    vector<ll> b(w);
    b[0] = 1;
    vector<ll> res = mul(A, b);
    ll ans = res[w - 1];
    printf("Case %d: %lld\n", T++, ans);
  }
  return 0;
}
```
