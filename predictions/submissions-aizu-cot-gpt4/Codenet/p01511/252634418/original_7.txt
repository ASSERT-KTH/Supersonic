Optimization Steps:
1. The first optimization that can be done is to replace the use of `std::map` with `std::unordered_map`. `std::unordered_map` has an average time complexity of O(1) for search, insert, and delete operations, compared to `std::map`'s O(log(n)) complexity. This change will speed up the program.
2. The second optimization that can be done is to use `reserve()` method to reserve memory for the vectors. This can prevent the expensive resizing of vectors. 
3. The third optimization that can be done is to pass the large objects (like matrices and vectors) to the functions by reference rather than by value. This will save both time and memory as it will avoid copying the objects.
4. The last optimization is to use "Fast Input/Output" methods. This can be done by untieing the cin and cout streams and by not using cin and cout for I/O operations.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define rep(i, n) for (int(i) = 0; (i) < (int)(n); ++(i))
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define fi first
#define se second
#define dbg(x) cout << #x " = " << ((x)) << endl
template <class T, class U>
ostream &operator<<(ostream &o, const pair<T, U> &p) {
  o << "(" << p.fi << "," << p.se << ")";
  return o;
}
template <class T> ostream &operator<<(ostream &o, const vector<T> &v) {
  o << "[";
  for (T t : v) {
    o << t << ",";
  }
  o << "]";
  return o;
}
const ll mod = 1000000009;
using vl = vector<ll>;
using mat = vector<vl>;
void mul(mat &A, const mat &B) {
  int n = A.size();
  mat C(n, vl(n));
  rep(i, n) rep(j, n) rep(k, n)(C[i][j] += A[i][k] * B[k][j]) %= mod;
  swap(A, C);
}
void mat_pow(mat &A, ll x) {
  int n = A.size();
  mat ret(n, vl(n));
  rep(i, n) ret[i][i] = 1;
  while (x) {
    if (x & 1)
      mul(ret, A);
    mul(A, A);
    x >>= 1;
  }
  swap(A, ret);
}
void mul(const mat &A, vl &b) {
  int n = A.size();
  vl ret(n);
  rep(i, n) rep(j, n)(ret[i] += A[i][j] * b[j]) %= mod;
  swap(b, ret);
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int T = 1;
  int w, n;
  ll h;
  while (scanf("%d %lld %d", &w, &h, &n) != EOF, w) {
    unordered_map<ll, vector<int>> obj;
    obj.reserve(n);
    rep(i, n) {
      ll x, y;
      scanf("%lld %lld", &x, &y);
      --x;
      --y;
      if (y > 0) {
        obj[y].pb(x);
      }
    }
    mat O(w, vl(w));
    rep(i, w) {
      for (int j = -1; j <= 1; ++j) {
        if (0 <= i + j && i + j < w)
          O[i][i + j] = 1;
      }
    }
    mat A(w, vl(w));
    rep(i, w) A[i][i] = 1;
    ll ny = 0;
    for (const auto &p : obj) {
      ll Y = p.fi;
      if (Y - ny > 1) {
        mat_pow(O, Y - ny - 1);
        mul(O, A);
      }
      mat B(O);
      for (int i : p.se) {
        for (int j = -1; j <= 1; ++j) {
          if (0 <= i + j && i + j < w)
            B[i][i + j] = 0;
        }
      }
      mul(B, A);
      ny = Y;
    }
    if (ny != h - 1) {
      mat_pow(O, h - 1 - ny);
      mul(O, A);
    }
    vector<ll> b(w);
    b[0] = 1;
    mul(A, b);
    ll ans = b[w - 1];
    printf("Case %d: %lld\n", T++, ans);
  }
  return 0;
}
```