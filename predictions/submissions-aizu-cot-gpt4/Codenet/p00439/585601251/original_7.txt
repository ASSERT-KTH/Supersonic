Optimizations:

1. The usage of the `std::vector<long long> ac(n + 1, 0);` is not optimal as it is storing the sum of all the elements up to the current index, which is not necessary. We can calculate the sum of the first `k` elements and then maintain that sum by adding the new element and subtracting the `k`th element from the past in each iteration. This will reduce the memory usage from `O(n)` to `O(1)`.

2. We are using `cin` and `cout` for input/output which can be slower compared to other methods. We can use `scanf` and `printf` instead for faster input/output.

Here's the optimized code:

```cpp
#include <algorithm>
#include <climits>
#include <cstdio>
using namespace std;
int main() {
  int n, k;
  while (scanf("%d%d", &n, &k), n) {
    long long sum = 0, res = -LLONG_MAX, num;
    for (int i = 1; i <= n; ++i) {
      scanf("%lld", &num);
      if(i <= k){
        sum += num;
      } else{
        sum = sum + num - ac[i - k];
      }
      if(i >= k){
        res = max(res, sum);
      } 
    }
    printf("%lld\n", res);
  }
  return 0;
}
```

This code will have a better performance regarding both running time and memory usage.
