The given C/C++ program can be optimized for running time and memory usage by:

1. Removing the inner loop that sets all the elements in the table to 'false' for each iteration of 'Q'. Instead, we declare and initialize the table array inside the loop so that it is reset to 'false' for each new iteration.

2. Reducing the memory usage by using a vector instead of a dynamic array. The size of the vector will be determined by the value of 'N' for each iteration. This will ensure that memory usage is proportional to 'N', which is more efficient than using a fixed size of 1000001 for each iteration.

3. Removing the unnecessary 'FLG' variable and instead using a 'break' statement to exit the loop when a repeating value is found.

4. Using std::max function instead of ternary operator for finding the max value.

5. Removing unnecessary includes. Only `stdio.h`, `algorithm`, and `vector` are required for this program.

Here is the optimized version of the program:

```cpp
#include <algorithm>
#include <stdio.h>
#include <vector>
using namespace std;
int main() {
  int Q, N, count, tmp, max, S;
  scanf("%d", &Q);
  for (int loop = 0; loop < Q; loop++) {
    scanf("%d", &N);
    vector<bool> table(N + 1, false);
    table[N] = true;
    count = 0;
    while (N / 10 != 0) {
      max = 0;
      for (S = 10; N / S != 0; S *= 10) {
        tmp = (N / S) * (N % S);
        max = std::max(max, tmp);
      }
      N = max;
      if (table[N]) {
        printf("-1\n");
        break;
      }
      table[N] = true;
      count++;
    }
    if (N / 10 == 0) {
      printf("%d\n", count);
    }
  }
  return 0;
}
```
This version of the program will use less memory and perform fewer operations, thereby reducing the running time.