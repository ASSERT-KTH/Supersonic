The given program takes several numbers as input and performs some calculations on each of them. The calculations involve checking the maximum product of two parts of the number and replacing the number with this maximum product until we reach a single digit or until we reach a number that we have already encountered.

We can optimize the program in the following ways:

1. Reduce memory usage: We are allocating a large boolean array of size 1,000,001 for each test case even though we only use up to the value of N. We can reduce the memory usage by dynamically allocating the array to be of size N+1 for each test case.

2. Reduce redundant calculations: The program is performing the multiplication and modulus operation in each iteration of the inner loop. Since the multiplication and modulus operations are quite expensive, we can reduce the number of these operations by storing the results in variables and updating them in each iteration.

3. Optimizing the loop count: The condition of the inner loop (N / S != 0) is checking if the number has more digits than the current value of S. But since we are only interested in the maximum product, we only need to perform this loop until we have split the number into two non-zero parts. Therefore, we can stop the loop when S > N / 10.

Here is the optimized program:

```cpp
#include <stdio.h>
using namespace std;
int main() {
  int Q, N, count, tmp, max, S;
  bool FLG;
  scanf("%d", &Q);
  for (int loop = 0; loop < Q; loop++) {
    scanf("%d", &N);
    bool *table = new bool[N + 1]();
    count = 0;
    table[N] = true;
    FLG = false;
    while (true) {
      if (N / 10 == 0)
        break;
      max = 0;
      int NS = N, mod = N % 10;
      for (S = 10; S <= NS / 10; S *= 10) {
        NS /= 10;
        tmp = NS * mod;
        max = (max >= tmp) ? max : tmp;
        mod = N % S;
      }
      N = max;
      if (table[N] == true) {
        FLG = true;
        break;
      } else {
        table[N] = true;
        count++;
      }
    }
    delete[] table;
    if (FLG) {
      printf("-1\n");
    } else {
      printf("%d\n", count);
    }
  }
  return 0;
}
```