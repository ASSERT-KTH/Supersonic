The optimizations that could be performed on the given code are as follows:

1. Repeated Initialization of "table" array: The "table" array is initialized to false for each query. Instead, we can set the particular value back to false after we process each query. This way, we don't have to initialize the entire array for each query.

2. Dynamic Memory Allocation: The dynamic memory allocation for the "table" array can be replaced with static memory allocation. Dynamic memory allocations and deallocations consume more time and can lead to memory leaks if not handled properly. As the size of the array is known and it's not very large, it's better to allocate it statically.

3. Redundant Check: The check "N / 10 == 0" is done at the start of the while loop. This check is redundant because if N is less than 10, the for loop will not execute and N will remain the same. So, in the next iteration of the while loop, N / 10 will still be zero and the loop will break. Therefore, this check can be removed.

4. Unnecessary else statement: There's an unnecessary else statement in the while loop. If the if condition is true, the loop will break, so we don't need an else statement.

5. Use of bitwise operations: For an integer, multiplying or dividing by a power of 10 can be replaced by left shift (<<) or right shift (>>) bitwise operations.

Now, let's make these optimizations in the code:

```
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <stdio.h>
#include <vector>
using namespace std;

bool table[1000001];

int main() {
  int Q, N, count, tmp, max, S;
  bool FLG;
  scanf("%d", &Q);
  
  for (int loop = 0; loop < Q; loop++) {
    count = 0;
    scanf("%d", &N);
    table[N] = true;
    FLG = false;

    while (N >= 10) {
      max = 0;
      for (S = 10; N / S != 0; S *= 10) {
        tmp = (N / S) * (N % S);
        max = (max >= tmp) ? max : tmp;
      }

      N = max;

      if (table[N] == true) {
        FLG = true;
        break;
      }

      table[N] = true;
      count++;
    }

    if (FLG) {
      printf("-1\n");
    } else {
      printf("%d\n", count);
    }

    table[N] = false;
  }

  return 0;
}
```
Note: The point about bitwise operations is not applicable here as left/right shift operations are not equivalent to multiplying/dividing by 10. They are equivalent to multiplying/dividing by 2. Therefore, this point has been disregarded in the optimized code.