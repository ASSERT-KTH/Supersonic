Optimization Steps:

1. Remove unused libraries: `#include <algorithm>`, `#include <cmath>`, `#include <queue>`, `#include <stack>`, `#include <vector>`. They are not used in this program.

2. Instead of creating a boolean array of size 1000001 for every query, we can create it once outside the loop and reset its values for each query. This will save memory allocation and deallocation time for each query.

3. Instead of using `scanf` and `printf`, we can use `cin` and `cout`. They are safer as `scanf` and `printf` are prone to format specifier errors. However, `scanf` and `printf` are faster than `cin` and `cout`. So, if speed is a concern, we should stick with `scanf` and `printf`.

4. The condition `N / 10 == 0` can be replaced with `N < 10` which is more intuitive and bit faster.

5. The condition `if (table[N] == true)` can be replaced with `if (table[N])` which is more concise and faster.

Here is the optimized code:

```cpp
#include <stdio.h>
using namespace std;

int main() {
    int Q, N, count, tmp, max, S;
    bool FLG;
    scanf("%d", &Q);
    bool *table = new bool[1000001];
    for (int loop = 0; loop < Q; loop++) {
        for (int i = 0; i <= 1000000; i++)
            table[i] = false;
        count = 0;
        scanf("%d", &N);
        table[N] = true;
        FLG = false;
        while (N >= 10) {
            max = 0;
            for (S = 10; N / S != 0; S *= 10) {
                tmp = (N / S) * (N % S);
                max = (max >= tmp) ? max : tmp;
            }
            N = max;
            if (table[N]) {
                FLG = true;
                break;
            } else {
                table[N] = true;
                count++;
            }
        }
        if (FLG) {
            printf("-1\n");
        } else {
            printf("%d\n", count);
        }
    }
    delete[] table;
    return 0;
}
```

The optimized program has a smaller footprint, as we removed unnecessary includes. Also, it should run faster because we've improved some conditions and reduced the frequency of memory allocations.