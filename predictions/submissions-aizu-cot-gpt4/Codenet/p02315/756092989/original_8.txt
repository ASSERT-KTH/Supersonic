There are several ways to optimize the given program without completely rewriting it. Here are some steps:

1. Remove unused code: The provided program has a lot of unused code (unused macros and function), which increases the size of the program without any benefit. We can safely remove this code to make the program smaller and cleaner.

2. Avoid global variables: The usage of global variables can lead to code that is hard to understand and debug, and can cause issues with memory usage. In this case, the variables `n`, `W`, `weight`, `value`, and `dp` are defined globally but used locally in the main function. We can move these variables to the main function to make the program cleaner and safer.

3. Use std::vector instead of arrays: C++ arrays are harder to use than std::vector, because they don't know their own size, and they can't be resized. In this case, we can replace the arrays `weight` and `value` with vectors, and replace the 2D array `dp` with a 2D vector.

4. Avoid using macros for constants: The constant `PI` is defined as a macro, but in C++, it's better to use a `const` variable for this purpose.

Here is the optimized version of the program:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    int n, W;
    cin >> n >> W;

    vector<int> weight(n), value(n);
    for (int i = 0; i < n; i++) {
        cin >> value[i] >> weight[i];
    }

    vector<vector<int>> dp(n+1, vector<int>(W+1, 0));
    for (int i = 0; i < n; i++) {
        for (int w = 0; w <= W; w++) {
            if (w >= weight[i]) {
                dp[i + 1][w] = max(dp[i][w - weight[i]] + value[i], dp[i][w]);
            } else {
                dp[i + 1][w] = dp[i][w];
            }
        }
    }

    cout << dp[n][W] << endl;
    return 0;
}
```

This program should have the same functionality as the original one, but it is cleaner, smaller, and safer because it doesn't use global variables, doesn't use C++ arrays, and doesn't have unused code.