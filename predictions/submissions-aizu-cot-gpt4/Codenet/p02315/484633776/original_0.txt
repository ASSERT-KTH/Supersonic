Optimization Steps:

1. Use `vector<int>` instead of `int[]` for `value` and `weight` arrays. Vectors have dynamic size, so they do not reserve unnecessary memory.
2. The `dp` array is being initialized with `0` for its first row. Since C++ automatically initializes integer arrays with `0`, we can remove this initialization loop.
3. Use `std::ios::sync_with_stdio(false); cin.tie(NULL);` to speed up cin and cout operations.
4. Replace `endl` with `\n` for faster output. `endl` flushes the output buffer every time it's called, which can slow down our program significantly.

Here is the optimized code:

```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    int N, W;
    cin >> N >> W;

    vector<int> value(N), weight(N);
    for (int i = 0; i < N; i++)
        cin >> value[i] >> weight[i];

    int dp[110][10010];
    for (int i = 0; i < N; i++) {
        for (int w = 0; w <= W; w++) {
            if (w >= weight[i])
                dp[i + 1][w] = max(dp[i][w - weight[i]] + value[i], dp[i][w]);
            else
                dp[i + 1][w] = dp[i][w];
        }
    }
    cout << dp[N][W] << "\n";
    return 0;
}
```

Please note that the optimization of `dp` array size is not possible as the size depends on the input. The size of the `dp` array is set to the maximum possible size based on the constraints of the problem. It would be good to know the constraints of `N` and `W` to further optimize the array size.