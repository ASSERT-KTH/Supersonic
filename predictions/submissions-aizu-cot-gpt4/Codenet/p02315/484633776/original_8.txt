Here are the optimization steps:

1. Avoid the use of "#include <bits/stdc++.h>" as it includes a lot of unnecessary libraries which increase the compilation time. Instead, include only the necessary libraries.
2. The program is using variable-length arrays (vla) for "value" and "weight", which is not a standard C++ feature. It's better to use std::vector for dynamic arrays.
3. In the initialization of dp matrix, instead of running a loop from 0 to W-1, we can initialize the whole dp matrix to 0 using memset. This will save time if W is a large number.
4. The dp matrix is of size [110][10010] which takes up a lot of space. Since the current row in the dp matrix only depends on the previous row, we can reduce the space complexity from O(NW) to O(W) by keeping only one row.

Optimized program:

```cpp
#include <iostream>
#include <vector>
#include <cstring>
#include <algorithm>

using namespace std;

int main() {
  int N, W;
  cin >> N >> W;
  vector<int> value(N), weight(N);
  for (int i = 0; i < N; i++)
    cin >> value[i] >> weight[i];
  int dp[10010];
  memset(dp, 0, sizeof(dp));
  for (int i = 0; i < N; i++) {
    for (int w = W; w >= weight[i]; w--) {
      dp[w] = max(dp[w - weight[i]] + value[i], dp[w]);
    }
  }
  cout << dp[W] << endl;
  return 0;
}
```
In the optimized program, the inner loop in the dp calculation goes from W to weight[i] (i.e. in a decreasing order). This is to avoid using the same item multiple times. If the loop goes from weight[i] to W, it could use the same item more than once because dp[w] is updated before dp[w-weight[i]] in the same iteration.