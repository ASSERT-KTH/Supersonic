Here are the steps to optimize the given program:

1. Remove `#include <bits/stdc++.h>` since it includes a lot of unnecessary libraries, which increases the compilation time. Instead, only include necessary libraries like `#include <iostream>` and `#include <algorithm>`.
2. Use `std::vector` instead of C-style arrays. Vectors are easier to use, more efficient, and safer. 
3. If possible, reduce the dimension of the dp table. Here the dp table is of dimension `N * W`. However, the `dp[i + 1][w]` only depends on the `dp[i][*]`. Hence we can reduce the dimension of dp to `1 * W`.
   
Here is the optimized program:

```c++
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
  int N, W;
  cin >> N >> W;
  vector<int> value(N), weight(N);
  for (int i = 0; i < N; i++)
    cin >> value[i] >> weight[i];

  vector<int> dp(W + 1, 0);
  for (int i = 0; i < N; i++) {
    for (int w = W; w >= weight[i]; w--) {
      dp[w] = max(dp[w - weight[i]] + value[i], dp[w]);
    }
  }

  cout << dp[W] << endl;
  return 0;
}
```
Note: The loop order of `w` has been reversed. This is because we are using a one-dimensional array to store the dp values. If we go from small to large, we would be using the dp value of the current round, and it would lead to errors. By going from large to small, we ensure that we are using the dp value from the previous round, which is correct.