Here are the steps to optimize this program:

1. The array `dp` is defined with a maximum size of 1001 * 10001, which is wasting memory if `N` and `W` are smaller. To save memory, we can dynamically allocate the memory for `dp` according to the input values. We will use `std::vector` to achieve this.

2. The inner loop in the program goes from 0 to `W`, but it's not necessary to loop from 0 if `j` is smaller than `w[i]`. We can start the loop from `w[i]`.

3. We can use `std::ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` to make input and output operations more efficient.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int N, W;
  cin >> N >> W;

  vector<int> v(N), w(N);
  for (int i = 0; i < N; i++)
    cin >> v[i] >> w[i];

  vector<vector<int>> dp(N+1, vector<int>(W+1, 0));

  for (int i = 0; i < N; i++) {
    for (int j = w[i]; j <= W; j++) {
      dp[i + 1][j] = max(dp[i][j], dp[i][j - w[i]] + v[i]);
    }
    if (i < N-1)
      for (int j = 0; j < w[i+1]; ++j)
        dp[i + 1][j] = dp[i][j];
  }
  
  cout << dp[N][W] << '\n';

  return 0;
}
```

Here, we have used `std::vector` to dynamically allocate memory for `dp`, which saves memory when `N` and `W` are smaller. We have also optimized the inner loop to start from `w[i]` instead of 0, which can save some time. Lastly, we have used `std::ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` to make input and output operations more efficient.