Here are the steps to optimize this code.

1. Use `std::ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` to optimize the input/output in C++. This can make a significant difference in the running time of programs that perform a large amount of input/output operations.

2. We should avoid using global variables when they are not necessary. In this case, `dp` array can be defined inside the `main()` function.

3. Instead of using a 2D array for `dp`, we can use a 1D array. The reason is that we only use the current and the previous states in the calculation. Therefore, a 2D array is not necessary, and a 1D array can save memory space.

4. We also need to reverse the order of the inner for loop. This is because we are now using a 1D array, and we need to make sure that the `dp[j - w[i]] + v[i]` part is always from the previous state, not the current state.

5. We no longer need to check `if (j - w[i] < 0)`, as we reversed the inner for loop.

Here is the optimized program:

```cpp
#include <iostream>
#include <vector>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int N, W;
  cin >> N >> W;
  vector<int> v(N), w(N);
  for (int i = 0; i < N; i++)
    cin >> v[i] >> w[i];

  vector<int> dp(W+1, 0);
  for (int i = 0; i < N; i++) {
    for (int j = W; j >= w[i]; j--) {
      dp[j] = max(dp[j], dp[j - w[i]] + v[i]);
    }
  }

  cout << dp[W] << endl;

  return 0;
}
```

This optimized version of the program will have better performance in terms of both running time and memory usage.