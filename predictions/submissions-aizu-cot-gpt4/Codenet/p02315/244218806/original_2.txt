Step by step optimizations:

1. Reduce the size of `dp` array: The `dp` array is used to keep track of the maximum value that can be taken with a certain weight. But we only need to keep track of the current and next state, so we can reduce the size to 2*10001.

2. Optimizing the loop order: The second loop is iterating from 0 to W. But it can be done in reverse order. This way, we can avoid having an if condition inside the second loop which checks if `j - w[i] < 0`. Reversing the second loop guarantees that `j - w[i]` is always greater than or equal to 0.

Optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;
int dp[2][10001];
int main() {
  int N, W;
  cin >> N >> W;
  vector<int> v(N), w(N);
  for (int i = 0; i < N; i++)
    cin >> v[i] >> w[i];
  for (int i = 0; i < N; i++) {
    for (int j = W; j >= 0; j--) {
      if (j >= w[i]) {
        dp[(i + 1) % 2][j] = max(dp[i % 2][j], dp[i % 2][j - w[i]] + v[i]);
      } else {
        dp[(i + 1) % 2][j] = dp[i % 2][j];
      }
    }
  }
  cout << dp[N % 2][W] << endl;
  return 0;
}
```
In this optimized version, we reduced the size of `dp` array from 1001*10001 to 2*10001 which saves memory. And by reversing the second loop, we removed an if condition, which reduces branching in the code and helps to improve the running time.