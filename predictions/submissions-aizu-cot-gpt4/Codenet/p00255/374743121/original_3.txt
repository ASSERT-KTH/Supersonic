The main optimization opportunities in this code are:

1. The third loop is reading values into the array `j` but does not seem to be using them. If these values are not used, we can avoid reading them entirely. You should verify whether these values are needed in the rest of your program. If they are not, removing this loop will yield a significant speedup.

2. The fourth loop is sorting the array `j` every time. If the order of these values does not matter, you could eliminate this sort, which would yield another significant speedup. Again, you need to verify whether the sorted order is needed elsewhere in your program.

3. The array `j` is statically allocated with a large size. If the actual number of elements is often much less than this, you could save memory by dynamically allocating this array with the exact size needed.

4. In the second loop, the addition `s += a` could potentially cause an overflow. You should consider checking for this and handling it appropriately.

5. The variable `a` is being used to store both the input values and the maximum product. Using separate variables for these would make the code clearer and might enable further optimizations.

Optimized code:

```
#include <iostream>
using namespace std;

int main() {
  for (long long i, n, s, a, max_product;; cout << max_product << endl) {
    cin >> n;
    if (!n)
      break;
    long long* j = new long long[n];
    for (i = s = 0; i < n; ++i) {
      cin >> a;
      s += a;
    }
    for (i = n - 1; i > 0; --i) {
      cin >> j[i];
    }
    max_product = 0;
    for (i = n - 1; i >= 0; --i) {
      max_product = max(i * s, max_product);
    }
    delete[] j;
  }
  return 0;
}
```

Please note that in C++ we should always return an integer from `main()` function. Also, we need to ensure that the dynamic memory allocated with `new` is always freed with `delete[]`.