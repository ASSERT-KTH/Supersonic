The given program receives a series of numbers, sorts them and computes the maximum value of the product of the number of elements and their sum. Here are some optimization steps we can take:

1. Avoid Global Variables: Global variables are slower to access than local variables, so we can move the variables `i`, `n`, `j`, `s`, and `a` into the `main` function.

2. Minimize I/O Operations: Instead of taking the input in three separate loops, we can read all the input in a single loop. This will minimize the number of I/O operations which are costly in terms of time.

3. Use Efficient Data Structure: Instead of using an array `j` for storing the input numbers, we can use a vector. A vector in C++ is a dynamic array that can grow or shrink in size when an element is added or removed. We can directly sort the vector which will save time in handling the array.

4. Return Zero at the End: Although not necessary in all compilers, it's good practice to return zero at the end of the `main` function to indicate successful termination of the program.

Here is the optimized program:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
int main() {
  long long n, s, a;
  while (true) {
    cin >> n;
    if (!n)
      break;
    vector<long long> j(n);
    for (s = a = 0; n-- > 0; s += a) {
      cin >> a;
      j[n] = a;
    }
    sort(j.begin(), j.end());
    for (n = j.size(); n > 0; --n)
      a = max(n * s, a);
    cout << a << endl;
  }
  return 0;
}
```
This optimized code has a better structure, fewer I/O operations and uses an efficient data structure (vector), which should result in better overall performance.