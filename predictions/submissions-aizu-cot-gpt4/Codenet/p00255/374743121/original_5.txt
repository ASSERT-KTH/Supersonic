Step 1: The first optimization we can do is to change the way we are storing our inputs. It is always a good practice to store the input in a container like vector or array before processing it. This will help in reducing the time complexity of the program. 

Step 2: The second optimization is to remove redundant calculations. We are currently calculating 'n' times 's' inside the loop which is not necessary. We can calculate it once and use it inside the loop.

Step 3: The third optimization is to use 'std::ios_base::sync_with_stdio(false);'. This line of code will make input and output operations faster.

Step 4: The fourth optimization is to use 'cin.tie(NULL);'. This line of code unties 'cin' from 'cout'. Tied streams ensure that the buffer is flushed, i.e., all the output is shown before an input is taken. This makes sure that before input is taken, all previous output has been shown. But since we are not taking input and output simultaneously, we can untie them to save time.

Step 5: The fifth optimization is to remove the unnecessary if condition to break the loop. We can use the while loop to achieve the same functionality.

Here is the optimized code:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

int main() {
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    long long n;
    while (cin >> n && n != 0) {
        vector<long long> j(n);
        long long s = 0, a = 0;
        for (long long i = 0; i < n; i++) {
            cin >> j[i];
            s += j[i];
        }
        sort(j.begin(), j.end());
        long long value = n * s;
        for (long long i = n-1; i >= 0; i--) {
            a = max(value, a);
            s -= j[i];
            value = i * s;
        }
        cout << a << endl;
    }
    return 0;
}
```
Note: The return type of main() is int. It is good practice to return a value from main() function as it indicates the exit status of the program.