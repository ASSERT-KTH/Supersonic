Given C/C++ program reads a number from the input, then reads that many numbers and calculates the sum. Then it reads (n-1) more numbers, sorts them and calculates the maximum value of (n * sum) where sum is calculated as sum of all previously read numbers and n is the current number being processed. It repeats this process until it is given 0 as input.

Let's break down the program:

1. First loop reads the size of the input and calculates the sum of the numbers.
2. Second loop reads the remaining numbers and stores them into an array.
3. Third loop sorts the array and then calculates the maximum value of (n * sum) for each number.

Optimizations:

1. The program unnecessarily uses an array of 99999 elements. If we know that the maximum size of the input is n, we can dynamically allocate an array of size n instead of using a fixed size array. This will reduce the memory usage.
2. The program reads the numbers two times: once for calculating the sum and once for storing them into an array. We can optimize this by reading the numbers only once. We can calculate the sum and store the numbers into an array at the same time.
3. The program calculates the maximum value in each iteration of the third loop. We can optimize this by calculating the maximum value only once after sorting the array.

Here is the optimized program:

```cpp
#include <algorithm>
#include <iostream>
using namespace std;
int main() {
  for (long long n, s = 0, a, max_val = 0;; cout << max_val << endl) {
    cin >> n;
    if (!n)
      break;
    long long* j = new long long[n]; // dynamically allocate array
    for (long long i = 0; i < n; i++) {
      cin >> a; // read number
      s += a; // add to sum
      j[i] = a; // store number into array
    }
    sort(j, j + n); // sort array
    for (long long i = n - 1; i >= 0; i--) {
      max_val = max(n * s, max_val); // calculate maximum value
      s -= j[i]; // subtract from sum
      n--; // decrement n
    }
    delete[] j; // free memory
  }
  return 0;
}
```

This optimized version of the program has the same functionality as the original one, but it uses less memory and performs fewer operations.