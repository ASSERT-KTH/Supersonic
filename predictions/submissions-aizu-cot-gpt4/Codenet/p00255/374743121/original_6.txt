This C/C++ program seems to be doing a lot of unnecessary work. Here are the steps to optimize it:

1. The condition `n > 0` in the third loop is unnecessary. The loop will naturally break when `n` becomes zero, and this check just adds extra computation.
2. The `sort` function is being used to sort the array `j`. However, the first element of the array is being skipped, which is unnecessary. We should sort the entire array from `j[0]` to `j[n-1]`.
3. The `cin` operation in the second loop seems unnecessary as it doesn't affect the program's output. We can remove it.
4. The variable `s` is being used to calculate the sum of the inputs, but it's not necessary to calculate the sum separately. We can calculate the sum inside the last loop, which will save one full pass of the input data.
5. The program is using `long long` for all its variables. If the problem constraints allow, we can use `int` instead to save memory.

Now let's rewrite the code with these optimizations:

```cpp
#include <algorithm>
#include <iostream>
using namespace std;
main() {
  for (int i, n, j[99999], a;; cout << a << endl) {
    cin >> n;
    if (!n)
      break;
    int s = 0;
    for (i = 0; i < n; cin >> j[i++])
      ;
    sort(j, j + n);
    for (a = 0; n > 0; a = max(n-- * s, a))
      s += j[n];
  }
}
```
In this optimized version, we have reduced the number of loops from 3 to 2, removed unnecessary input and check, and reduced the memory usage by using `int` instead of `long long`. This version should run faster and use less memory than the original one.