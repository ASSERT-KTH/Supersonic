The given code is quite inefficient and can be optimized in the following ways:

1. Removing unnecessary operations: The second loop that reads into the array `j` is not being used anywhere. This loop can be removed as it unnecessarily increases the time complexity of the program.

2. Reducing scope of variables: The variables `i, n, s, a` are currently in the scope of the main function. They should be inside the loop scope as they are not used outside the loop.

3. Proper use of `cin` and `cout`: `cin` and `cout` are slower than scanf and printf. If speed is a critical factor, we should use `scanf` and `printf`.

4. Improving loop efficiency: The decrement operator in the loop definition is less efficient than the increment operator. It's better to rewrite the loop to use increment.

5. Avoiding post-increment: In the loops, there is use of post increment (`i++`). Pre-increment (`++i`) is more efficient than post-increment in C/C++ as post-increment involves a copy operation.

6. Using return statement: The main function should return an integer value to indicate that the program has ended correctly.

Here is the optimized code:

```c++
#include <cstdio>
#include <algorithm>
using namespace std;
int main() {
    while(true) {
        long long n;
        scanf("%lld", &n);
        if (!n)
            break;
        long long a = 0, s = 0;
        for (long long i = 0; i < n; ++i) {
            scanf("%lld", &a);
            s += a;
        }
        for (long long i = 1; i <= n; ++i)
            a = max(i * s, a);
        printf("%lld\n", a);
    }
    return 0;
}
```
This optimized code performs the same functionality as the original one but in a more efficient way.