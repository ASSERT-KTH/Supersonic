Here are the steps to optimize the given code:

1. The code uses unbuffered I/O operations for reading input and output, which can be slower. The buffering can be added to speed up the reading and writing processes.

2. The code also contains an unneeded sorting operation. It sorts the array 'j', but this sorted array is not used anywhere. So, this sorting operation can be removed.

3. It is better to declare the variables outside the loop if they are used in each iteration.

4. The variable 'a' is used before its value is initialized which can lead to undefined behavior. It is used in the first loop for the sum 's' and in the max function in the last loop. It should be initialized before it is used.

5. The array 'j' has a fixed size of 99999, but it seems that it only needs to be as large as 'n'. If 'n' is much smaller than 99999, a lot of memory is wasted. We can use a dynamic array or std::vector to save memory.

Now let's apply these optimizations to the code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    long long i, n, s, a;
    vector<long long> j;
    while (true) {
        cin >> n;
        if (!n)
            break;
        j.resize(n);
        a = s = 0;
        for (i = 0; i < n; ++i) {
            cin >> a;
            s += a;
        }
        for (i = n - 1; i > 0; --i)
            cin >> j[i];
        for (; n > 0; --n) {
            a = max(n * s, a);
            s += j[n];
        }
        cout << a << "\n";
    }
    return 0;
}
```
The optimized version of the code uses buffered I/O operations, removes an unnecessary sorting operation, puts variable declarations outside of the loop, initializes the variable 'a' before it's used in the loops, and uses a vector for the array 'j' to save memory.