The optimization here can be done by reducing the amount of ternary operators used and replacing them with an array of structures. Each structure will contain a weight limit and the corresponding weight class name. In this approach, we just need to loop over the array and find the appropriate weight class for the given weight. This will significantly reduce the amount of code and improve the readability, making the program easier to maintain. Also, it will reduce the complexity from O(n) to O(1), thus improving the running time.

Here is the optimized code:

```cpp
#include <stdio.h>

// Define a structure to hold the weight limit and the corresponding weight class name
struct weight_class {
    float limit;
    char *name;
};

// Define an array of weight classes
struct weight_class classes[] = {
    {91, "heavy"},
    {81, "light heavy"},
    {75, "middle"},
    {69, "light middle"},
    {64, "welter"},
    {60, "light welter"},
    {57, "light"},
    {54, "feather"},
    {51, "bantam"},
    {48, "fly"},
    {0, "light fly"},
};

int main() {
    float f;

    while (~scanf("%f", &f)) {
        for (int i = 0; i < sizeof(classes)/sizeof(classes[0]); ++i) {
            if (f > classes[i].limit) {
                puts(classes[i].name);
                break;
            }
        }
    }

    return 0;
}
```
This code first reads the input weight. It then loops through the array of weight classes. For each weight class, it checks if the input weight is greater than the limit of the current weight class. If it is, it prints the name of the weight class and breaks the loop. If it's not, it continues to the next weight class.
