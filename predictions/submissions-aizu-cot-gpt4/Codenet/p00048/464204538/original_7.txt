The C/C++ program you provided gets a float number as input and checks which range the float is in. The ranges are defined with the help of nested ternary operators which makes the code unreadable and hard to maintain. Also it uses a bitwise NOT '~' operator on scanf which is not a good programming practice. It's better to explicitly check the return value of scanf. 

Optimizations:

1. Store the range values and corresponding names in two arrays.
2. Use a while loop to get the user input until scanf fails.
3. Use a for loop to check which range the float is in. This will reduce the number of comparisons and make the code more readable.

The optimized version of the program is as follows:

```C++
#include <stdio.h>

const char *names[] = {"heavy", "light heavy", "middle", "light middle", "welter", "light welter", "light", "feather", "bantam", "fly", "light fly"};
float limits[] = {91, 81, 75, 69, 64, 60, 57, 54, 51, 48, 0};
int size = sizeof(limits)/sizeof(limits[0]);

int main() {
  float f;
  while (scanf("%f", &f) == 1) {
    for (int i = 0; i < size; i++) {
      if (f > limits[i]) {
        printf("%s\n", names[i]);
        break;
      }
    }
  }
  return 0;
}
```

The optimized version is easier to read, maintain, and is efficient because the number of comparisons is reduced.