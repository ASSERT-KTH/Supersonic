The given code can be optimized for running time and memory usage by the following ways:

1. **Use of `int main()`:** In C/C++, it is a good practice to declare the return type of main function as int instead of void. This is because it returns an integer value to the operating system after successful execution. 

2. **Use of `while` loop instead of `for` loop:** The `for` loop is used when the number of iterations is known beforehand. In this case, since the number of iterations is not known, a `while` loop would be more efficient. 

3. **Avoiding multiple `puts` calls:** The code has multiple calls to `puts` nested within a conditional operator. This can be optimized by using an array of strings and an index to access the correct string. This reduces the number of `puts` calls to just one, reducing the time complexity.

4. **Avoiding nested ternary operations:** Deeply nested ternary operators are generally discouraged, as they can make code difficult to understand and maintain. Instead, a better approach would be to use an if-else ladder or a switch-case construct.

Here is the optimized code:

```c
#include <stdio.h>

int main() {
    float f;
    const char* categories[] = {"light fly", "fly", "bantam", "feather", "light", "light welter", "welter", 
                                "light middle", "middle", "light heavy", "heavy"};
    int weights[] = {48, 51, 54, 57, 60, 64, 69, 75, 81, 91};

    while(scanf("%f", &f) != EOF) {
        int i;
        for (i = 0; i < 10; i++) {
            if (f <= weights[i]) {
                break;
            }
        }
        puts(categories[i]);
    }
    return 0;
}
```
In the optimized code, the weights are stored in an array and the categories are stored in another array. In the while loop, the weight is read until EOF is encountered. Then in the for loop, the weight is compared with the weights array until a match is found, then the index of the match is used to print the corresponding category. This approach simplifies the code and improves its readability.