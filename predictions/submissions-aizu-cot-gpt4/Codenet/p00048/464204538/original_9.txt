The given program reads a floating point number and outputs a string based on its value. The strings represent different weight categories. The input reading and string outputting is done in a loop until there's no more input.

Optimizations:

1. Make the function `main` return `int` explicitly: The function `main` is supposed to return an `int` in standard C/C++. The program given doesn't specify a return type, which is not a good practice. We should explicitly define it as `int`.

2. Use `printf` instead of `puts`: `puts` adds a newline at the end of the output, which might not always be desirable. `printf` gives us more control over what is printed.

3. Using a lookup table: Instead of using the long if-else chain with multiple ternary operators, we can use an array of structures. Each structure would hold the upper limit for a weight category and the corresponding string. We then just loop through the array and find the first category where the weight is less than or equal to the upper limit.

Here's the optimized program:

```C
#include <stdio.h>

typedef struct {
    float upper_limit;
    const char* category;
} WeightCategory;

int main() {
    float f;
    WeightCategory categories[] = {
        { 91, "heavy" },
        { 81, "light heavy" },
        { 75, "middle" },
        { 69, "light middle" },
        { 64, "welter" },
        { 60, "light welter" },
        { 57, "light" },
        { 54, "feather" },
        { 51, "bantam" },
        { 48, "fly" },
        { 0, "light fly" } // 0 is a sentinel value, it will never be reached
    };
    while (scanf("%f", &f) == 1) {
        for (int i = 0; i < sizeof(categories)/sizeof(WeightCategory); ++i) {
            if (f > categories[i].upper_limit) {
                printf("%s\n", categories[i].category);
                break;
            }
        }
    }
    return 0;
}
```
This optimized program should have faster running time since it avoids multiple checks in the if-else chain, and it should also use less memory because it avoids the duplication of the ternary operator structure.