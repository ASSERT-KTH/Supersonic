Here are the optimization steps for this C/C++ program:

- Instead of using the bitwise NOT operator (~) on the result of scanf(), use the EOF constant for comparison. This is more straightforward and readable.
- Use an array of structures to store the weight categories and their corresponding limits. This is more efficient than a long if-else or ternary operator chain, and it also makes the code more maintainable.
- Declare function main() with an int return type. This is required by the C standard.

Now, here is the optimized program:

```c
#include <stdio.h>

typedef struct {
    float weight;
    const char *category;
} WeightCategory;

WeightCategory categories[] = {
    {91, "heavy"},
    {81, "light heavy"},
    {75, "middle"},
    {69, "light middle"},
    {64, "welter"},
    {60, "light welter"},
    {57, "light"},
    {54, "feather"},
    {51, "bantam"},
    {48, "fly"},
    {0, "light fly"}
};

int main() {
    float f;
    while (scanf("%f", &f) != EOF) {
        int i;
        for (i = 0; i < sizeof(categories)/sizeof(WeightCategory); ++i) {
            if (f > categories[i].weight) {
                puts(categories[i].category);
                break;
            }
        }
    }
    return 0;
}
```

This version of the program is optimized in terms of both running time and memory usage. It is also more readable and maintainable than the original.