This code is quite complex, so there are several ways we can optimize it.

1. **Avoid using bits/stdc++.h**: As it includes all standard libraries, including the ones that we don't use in our code. It increases the compilation time. We should only include the libraries that we are using in our code.

2. **Avoid using 'endl'**: It is slower because it forces a flushing stream. We can use "\n" instead.

3. **Avoid integer division and multiplication**: In the charge function, we can store the result of division and multiplication in a variable instead of calculating it twice.

4. **Avoid using vector where arrays can be used**: Arrays are more cache-friendly and faster than vectors in most of the cases.

5. **Using prefix increment (++i) instead of postfix (i++)**: It can be faster in some context as it could avoid unnecessary temporary object.

6. **Avoid unnecessary calculation in loops**: For example, in the main function, there is a calculation of m_pay and n_pay that can be pulled out from the innermost loop.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <numeric>
using namespace std;

int payment(int* p) {
    return 10 * p[0] + 50 * p[1] + 100 * p[2] + 500 * p[3];
}

void charge(int m, int* ans) {
    ans[3] = m / 500;
    m %= 500;
    ans[2] = m / 100;
    m %= 100;
    ans[1] = m / 50;
    m %= 50;
    ans[0] = m / 10;
}

bool judge(int* f, int* ch) {
    for (int i = 0; i < 4; ++i)
        if (f[i] == 1 and ch[i] > 0)
            return false;
    return true;
}

int main() {
    int N;
    cin >> N;
    while (1) {
        int c[4], sum = 0, f[4] = {0}, mini = 1e+9, pay[4], ans[4];
        for (int i = 0; i < 4; ++i) {
            cin >> c[i];
            sum += c[i];
        }
        for (pay[0] = 0; pay[0] <= c[0]; ++pay[0]) {
            f[0] = pay[0] > 0;
            for (pay[1] = 0; pay[1] <= c[1]; ++pay[1]) {
                f[1] = pay[1] > 0;
                for (pay[2] = 0; pay[2] <= c[2]; ++pay[2]) {
                    f[2] = pay[2] > 0;
                    for (pay[3] = 0; pay[3] <= c[3]; ++pay[3]) {
                        f[3] = pay[3] > 0;
                        int m_pay = payment(pay);
                        if (m_pay >= N) {
                            int ch[4];
                            charge(m_pay - N, ch);
                            int n_pay = pay[0] + pay[1] + pay[2] + pay[3];
                            int n_charge = ch[0] + ch[1] + ch[2] + ch[3];
                            if (mini > sum - n_pay + n_charge && judge(f, ch)) {
                                copy(begin(pay), end(pay), begin(ans));
                                mini = sum - n_pay + n_charge;
                            }
                        }
                    }
                }
            }
        }
        for (int i = 0; i < 4; ++i) {
            if (ans[i] > 0)
                cout << (i + 1) * 10 * (i + 1) << " " << ans[i] << "\n";
        }
        cin >> N;
        if (!N)
            break;
        cout << "\n";
    }
}
```