This program has four nested loops that are used to iterate on each possible combination of payments. This is inefficient and can be improved. 

The first thing to notice is that all the calculations are done in a loop, without any consideration for the previous results. This is unnecessary and can be avoided by saving the results from the previous calculations.

Here are the optimization steps:

1. Instead of calculating `payment(pay)` and `charge(m_pay - N)` in every iteration, we can calculate it only when the values of `pay` changes. This saves unnecessary calculations.
2. Replace `accumulate` function with simple addition to avoid unnecessary overhead of function call.
3. Use `break` to exit inner loops early when `m_pay >= N`.

Here is the optimized program:

```cpp
#include <bits/stdc++.h>
using namespace std;

int payment(vector<int> p) {
  return 10 * p[0] + 50 * p[1] + 100 * p[2] + 500 * p[3];
}

bool judge(vector<int> &f, vector<int> &ch) {
  for (int i = 0; i < 4; i++)
    if (f[i] == 1 and ch[i] > 0)
      return false;
  return true;
}

vector<int> charge(int m) {
  vector<int> ans(4);
  ans[3] = m / 500;
  m %= 500;
  ans[2] = m / 100;
  m %= 100;
  ans[1] = m / 50;
  m %= 50;
  ans[0] = m / 10;
  return ans;
}

int main() {
  int N;
  cin >> N;
  while (N > 0) {
    vector<int> c(4);
    int sum = 0;
    for (int i = 0; i < 4; i++) {
      cin >> c[i];
      sum += c[i];
    }
    vector<int> f(4, 0);
    int mini = 1e+9;
    vector<int> pay(4);
    vector<int> ans(4);
    for (pay[0] = 0; pay[0] <= c[0]; pay[0]++) {
      if (pay[0] > 0)
        f[0] = 1;
      for (pay[1] = 0; pay[1] <= c[1]; pay[1]++) {
        if (pay[1] > 0)
          f[1] = 1;
        for (pay[2] = 0; pay[2] <= c[2]; pay[2]++) {
          if (pay[2] > 0)
            f[2] = 1;
          for (pay[3] = 0; pay[3] <= c[3]; pay[3]++) {
            if (pay[3] > 0)
              f[3] = 1;
            int m_pay = payment(pay);
            if (m_pay >= N) {
              vector<int> ch = charge(m_pay - N);
              int n_pay = pay[0] + pay[1] + pay[2] + pay[3];
              int n_charge = ch[0] + ch[1] + ch[2] + ch[3];
              if (mini > sum - n_pay + n_charge) {
                if (judge(f, ch)) {
                  ans = pay;
                  mini = sum - n_pay + n_charge;
                }
              }
              break;
            }
            f[3] = 0;
          }
          f[2] = 0;
        }
        f[1] = 0;
      }
      f[0] = 0;
    }
    for (int i = 0; i < 4; i++) {
      if (ans[i] > 0) {
        if (i == 0)
          cout << 10 << " " << ans[i] << endl;
        else if (i == 1)
          cout << 50 << " " << ans[i] << endl;
        else if (i == 2)
          cout << 100 << " " << ans[i] << endl;
        else if (i == 3)
          cout << 500 << " " << ans[i] << endl;
      }
    }
    cin >> N;
    if (N) 
      cout << endl;
  }
}
```