The given code is an implementation of the Matrix Chain Multiplication problem. It uses dynamic programming for solving the problem. 

Here are the steps for the optimization:

1. Currently, the code is using a lot of global variables. Since global variables occupy memory for the entire lifetime of the program, it's better to avoid them whenever possible. We can pass these as function parameters instead of declaring them globally.

2. In the matrixChainOrder function, the INF constant is used to initialize m[i][j]. Since the INF value is high, it consumes more space. Instead of using INF, we can use INT_MAX which is a predefined value in C/C++ and automatically adjusts according to the system's architecture.

3. The scanf function in the main function is used to input the array. scanf has a high time complexity. Instead, you can use the faster getchar_unlocked() function.

4. The printf function is used to print the output. printf has a high time complexity. Instead, you can use the faster putchar_unlocked() function.

Here's the optimized version of your program:

```c
#include <stdio.h>
#include <limits.h>

int matrixChainOrder(int p[], int pl) {
  int m[pl][pl];
  int n, i, j, l, k, q;
  n = pl - 1;
  for (i = 1; i <= n; i++) {
    m[i][i] = 0;
  }
  for (l = 2; l <= n; l++) {
    for (i = 1; i <= n - l + 1; i++) {
      j = i + l - 1;
      m[i][j] = INT_MAX;
      for (k = i; k < j; k++) {
        q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
        if (m[i][j] > q)
          m[i][j] = q;
      }
    }
  }
  return m[1][n];
}

int main() {
  int n, i, x, k;
  scanf("%d", &n);
  int p[n+1];
  for (i = 0; i < n; i++) {
    scanf("%d", &p[i]);
    if (i < n - 1)
      scanf("%d", &k);
  }
  scanf("%d", &p[n]);
  x = matrixChainOrder(p, n + 1);
  printf("%d\n", x);
  return 0;
}
```
Note: The getchar_unlocked() and putchar_unlocked() functions are not used here because they are non-standard and not portable. They might not work on all systems. If the system supports these functions, they can be used to improve the I/O speed.