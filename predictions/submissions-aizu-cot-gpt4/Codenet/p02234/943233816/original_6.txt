The given C/C++ program calculates the minimum number of multiplications needed to multiply a chain of matrices. The program uses the Matrix Chain Multiplication algorithm which is a dynamic programming algorithm.

The program is already quite optimal, but there are some minor improvements that can be made for both running time and memory usage:

1. Memory Usage: Instead of declaring the arrays `m` and `p` with a fixed size of 101, we can dynamically allocate memory for these arrays based on the input size `n`. This will reduce the memory usage when `n` is significantly less than 101.

2. Running time: We can combine the two input loops in the `main` function into a single loop. This will reduce the running time by a constant factor.

Here is the optimized program:

```c++
#include <stdio.h>
#include <stdlib.h>
#define INF 100000000

int matrixChainOrder(int* p, int** m, int pl) {
  int n = pl - 1;
  for (int i = 1; i <= n; i++) {
    m[i][i] = 0;
  }
  for (int l = 2; l <= n; l++) {
    for (int i = 1; i <= n - l + 1; i++) {
      int j = i + l - 1;
      m[i][j] = INF;
      for (int k = i; k < j; k++) {
        int q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
        if (m[i][j] > q)
          m[i][j] = q;
      }
    }
  }
  return m[1][n];
}

int main() {
  int n;
  scanf("%d", &n);
  int* p = (int*)malloc((n+1)*sizeof(int));
  int** m = (int**)malloc((n+1)*sizeof(int*));
  for(int i=0; i<=n; i++){
    m[i] = (int*)malloc((n+1)*sizeof(int));
  }
  for (int i = 0; i < n; i++) {
    scanf("%d%d", &p[i], &p[i+1]);
  }
  int x = matrixChainOrder(p, m, n + 1);
  printf("%d\n", x);
  
  free(p);
  for(int i=0; i<=n; i++){
    free(m[i]);
  }
  free(m);

  return 0;
}
```

In this program, we first dynamically allocate memory for `m` and `p` based on the input size `n`. Then in the `main` function, we combine the two input loops into a single loop, which reduces the running time by a constant factor. After the calculation, we free the memory we allocated to avoid memory leak. 

Note: This program assumes that the input is valid and the memory allocation is successful, for simplicity. In a production environment, you should always check the return value of `malloc` to make sure the memory allocation is successful.