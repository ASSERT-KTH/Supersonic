Optimization Step-by-Step:

1. Avoid unnecessary computation: In the given code, the value of `p[i - 1] * p[k]` is computed multiple times within the innermost loop. We can optimize this by computing it once before the loop and storing it in a variable.

2. Use faster I/O methods: The `scanf` and `printf` functions are slower compared to other I/O methods available in C++. We can replace them with `cin` and `cout` which are faster. Also, to further speed up the I/O operations, we can add `ios_base::sync_with_stdio(false); cin.tie(NULL);` at the beginning of the main function.

3. Remove redundant code: The condition `if (i < n - 1)` before the second `scanf` in the main function is not required, as the loop already ensures that `i` will be less than `n - 1`.

Optimized Program:

```cpp
#include <iostream>
#define INF 100000000
int m[101][101];
int p[101];

int matrixChainOrder(int pl) {
  int n = pl - 1;
  for (int i = 1; i <= n; i++)
    m[i][i] = 0;
  
  for (int l = 2; l <= n; l++) {
    for (int i = 1; i <= n - l + 1; i++) {
      int j = i + l - 1;
      m[i][j] = INF;
      
      for (int k = i; k < j; k++) {
        int prod = p[i - 1] * p[k];
        int q = m[i][k] + m[k + 1][j] + prod * p[j];
        if (m[i][j] > q)
          m[i][j] = q;
      }
    }
  }
  return m[1][n];
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n, x, k;
  cin >> n;
  
  for (int i = 0; i < n; i++) {
    cin >> p[i] >> k;
  }
  
  cin >> p[n];
  
  x = matrixChainOrder(n + 1);
  
  cout << x << "\n";
  
  return 0;
}
```

Please note that the given optimization might not yield a significant improvement for small inputs, but for larger inputs, it could reduce the running time of the program.