#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

typedef long long ll;

const int MAXN = 100005;
vector<pair<ll, ll>> graph[MAXN];

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    ll n, sum = 0;
    cin >> n;
    for (ll i = 0, x, y, w; i < n - 1; i++) {
        cin >> x >> y >> w;
        --x; --y;
        graph[x].emplace_back(y, w);
        graph[y].emplace_back(x, w);
        sum += w;
    }
    queue<pair<ll, ll>> q;
    vector<bool> visited(n + 1, false);
    q.push({0, 0});
    visited[0] = true;
    ll max_w = 0;
    while (!q.empty()) {
        auto [v, w] = q.front();
        q.pop();
        max_w = max(max_w, w);
        for (auto [to, weight] : graph[v]) {
            if (!visited[to]) {
                visited[to] = true;
                q.push({to, w + weight});
            }
        }
    }
    cout << (2 * sum) - max_w << '\n';
    return 0;
}