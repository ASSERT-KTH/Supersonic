#include <iostream>
#include <vector>
#include <cstdio>
using namespace std;

typedef long long ll;

void solve() {
  int n, ln;
  cin >> n >> ln;
  vector<ll> flag(n);
  for (int i = 0; i < n; ++i) {
    cin >> flag[i];
  }

  int v1{1}, v2{1}, l{0}, r{n - 1};
  long double p1{0}, p2{static_cast<long double>(ln)}, ans{0};

  while (l <= r) {
    long double t1 = (flag[l] - p1) / v1;
    long double t2 = (p2 - flag[r]) / v2;

    if (t1 < t2) {
      p1 = flag[l++];
      p2 -= v2 * t1;
      ++v1;
      ans += t1;
    } else if (t1 > t2) {
      p2 = flag[r--];
      p1 += v1 * t2;
      ++v2;
      ans += t2;
    } else {
      p1 = flag[l++];
      p2 = flag[r--];
      ++v1;
      ++v2;
      ans += t1;
    }
  }
  ans += (p2 - p1) / (v1 + v2);
  printf("%.14Lf\n", ans);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  
  int t;
  cin >> t;
  while (t--) {
    solve();
  }
}