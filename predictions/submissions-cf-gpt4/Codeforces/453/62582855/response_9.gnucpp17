#include <bits/stdc++.h>
using namespace std;
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
#define sz(x) int((x).size())
#define all(x) (x).begin(), (x).end()
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0Rd(i, a) for (int i = (a)-1; i >= 0; i--)
#define trav(a, x) for (auto &a : x)
#define ckmin(T, a, b) ((T) = min((T), (b)))

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  
  const int MAXV = 61;
  int N;
  cin >> N;
  
  vi a(N);
  F0R(i, N) cin >> a[i];
  
  vi pri;
  FOR(v, 2, MAXV) {
    bool ok = true;
    trav(p, pri) if (v % p == 0) ok = false;
    if (ok) pri.push_back(v);
  }
  
  vi mask(MAXV);
  FOR(v, 1, MAXV) { 
    F0R(i, sz(pri)) if (v % pri[i] == 0) mask[v] |= 1 << i; 
  }
  
  vvpii dp(N + 1, vpii(1 << sz(pri), {INT_MAX, -1}));
  dp[0][0].first = -1;
  
  F0R(i, N) F0R(m, 1 << sz(pri)) if (dp[i][m].first < INT_MAX) {
    FOR(v, 1, MAXV) if (!(mask[v] & m)) {
      ckmin(dp[i + 1][m ^ mask[v]], make_pair(dp[i][m].first + abs(v - a[i]), v));
    }
  }
  
  vi b(N);
  int m = min_element(all(dp.back())) - dp.back().begin();
  F0Rd(i, N) {
    b[i] = dp[i + 1][m].second;
    m ^= mask[b[i]];
  }
  
  F0R(i, N) { 
    cout << b[i] << " "; 
  }
  cout << "\n";
  
  return 0;
}