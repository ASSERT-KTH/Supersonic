```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout << fixed << setprecision(15);

  const int MAXV = 61;
  int N;
  cin >> N;
  vector<int> a(N);
  for (auto &ai : a) cin >> ai;

  vector<int> pri;
  for (int v = 2; v < MAXV; v++) {
    bool isPrime = true;
    for (const auto &p : pri)
      if (v % p == 0) {
        isPrime = false;
        break;
      }
    if (isPrime) pri.push_back(v);
  }

  vector<int> mask(MAXV);
  for (int v = 1; v < MAXV; v++)
    for (size_t i = 0; i < pri.size(); i++)
      if (v % pri[i] == 0) mask[v] |= 1 << i;

  vector<vector<pair<int, int>>> dp(N + 1, vector<pair<int, int>>(1 << pri.size(), {INT_MAX, -1}));
  dp[0][0].first = 0;

  for (int i = 0; i < N; i++)
    for (int m = 0; m < (1 << pri.size()); m++)
      if (dp[i][m].first < INT_MAX)
        for (int v = 1; v < MAXV; v++)
          if (!(mask[v] & m))
            dp[i + 1][m | mask[v]] = min(dp[i + 1][m | mask[v]], make_pair(dp[i][m].first + abs(a[i] - v), v));

  vector<int> b(N);
  pair<int, int> minPair = *min_element(dp.back().begin(), dp.back().end());
  int m = find(dp.back().begin(), dp.back().end(), minPair) - dp.back().begin();

  for (int i = N - 1; i >= 0; i--) {
    b[i] = dp[i + 1][m].second;
    m ^= mask[b[i]];
  }

  for (const auto &bi : b) cout << bi << ' ';
  cout << '\n';

  return 0;
}
```