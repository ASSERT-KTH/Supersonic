#include <bits/stdc++.h>
using namespace std;
constexpr int MAXV = 61;
constexpr int MAXN = 3005;
constexpr int MAXP = 19;
constexpr int INF = 1e9;
int N, a[MAXN], dp[MAXN][1<<MAXP], pre[MAXN][1<<MAXP], mask[MAXV];
vector<int> primes;

void add_prime(int v) {
    for (int p : primes) if (v % p == 0) return;
    primes.push_back(v);
}

void solve() {
    cin >> N;
    for (int i = 1; i <= N; ++i) cin >> a[i];
    for (int v = 2; v <= MAXV; ++v) add_prime(v);
    for (int v = 1; v <= MAXV; ++v) {
        for (int i = 0; i < primes.size(); ++i) {
            if (v % primes[i] == 0) mask[v] |= 1 << i;
        }
    }
    for (int i = 0; i <= N; ++i) {
        for (int j = 0; j < (1 << primes.size()); ++j) {
            dp[i][j] = INF;
        }
    }
    dp[0][0] = 0;
    for (int i = 0; i < N; ++i) {
        for (int m = 0; m < (1 << primes.size()); ++m) {
            for (int v = 1; v <= MAXV; ++v) {
                if (!(mask[v] & m) && dp[i][m] + abs(a[i+1] - v) < dp[i+1][m | mask[v]]) {
                    dp[i+1][m | mask[v]] = dp[i][m] + abs(a[i+1] - v);
                    pre[i+1][m | mask[v]] = v;
                }
            }
        }
    }
    int m = min_element(dp[N], dp[N] + (1 << primes.size())) - dp[N];
    vector<int> res(N+1);
    for (int i = N; i >= 1; --i) {
        res[i] = pre[i][m];
        m ^= mask[res[i]];
    }
    for (int i = 1; i <= N; ++i) cout << res[i] << " ";
    cout << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    solve();
    return 0;
}