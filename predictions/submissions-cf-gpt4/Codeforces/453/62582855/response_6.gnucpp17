#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAXV = 61;
int N;
vector<int> a(MAXV);
vector<int> mask(MAXV);
vector<vector<pair<int, int>>> dp;
vector<int> b(MAXV);

void ckmin(pair<int, int> &a, const pair<int, int> &b) { a = min(a, b); }

void solve() {
    cin >> N;
    for (int i = 0; i < N; ++i) cin >> a[i];

    vector<int> pri;
    for (int v = 2; v < MAXV; ++v) {
        bool ok = true;
        for (const auto &p : pri)
            if (v % p == 0) ok = false;
        if (ok) pri.push_back(v);
    }

    for (int v = 1; v < MAXV; ++v) 
        for (int i = 0; i < pri.size(); ++i) 
            if (v % pri[i] == 0) mask[v] |= 1 << i;

    dp = vector<vector<pair<int, int>>>(N + 1, vector<pair<int, int>>(1 << pri.size(), {INT_MAX, -1}));
    dp[0][0].first = -1;
    for (int i = 0; i < N; ++i) 
        for (int m = 0; m < (1 << pri.size()); ++m) 
            if (dp[i][m].first < INT_MAX) 
                for (int v = 1; v < MAXV; ++v) 
                    if (!(mask[v] & m)) 
                        ckmin(dp[i + 1][m ^ mask[v]], make_pair(dp[i][m].first + abs(v - a[i]), v));

    int m = min_element(dp.back().begin(), dp.back().end()) - dp.back().begin();
    for (int i = N-1; i >= 0; --i) {
        b[i] = dp[i + 1][m].second;
        m ^= mask[b[i]];
    }

    for (const auto &i : b) cout << i << " ";
    cout << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    solve();
    return 0;
}