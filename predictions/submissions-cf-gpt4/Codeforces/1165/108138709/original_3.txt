```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
typedef long long ll;

const int N = 2e5 + 7;
int n, m;
int k[N], t[N], sum;
vector<int> p, s[N];

bool check(int x) {
    fill(t, t + N, 0);
    int now = x, ned = sum;
    int i = lower_bound(p.begin(), p.end(), x) - p.begin();
    for(int j = min(N - 1, x); j >= 1; --j) {
        now = min(now, j);
        if (now == 0 or ned == 0)
            break;
        for (auto &it : s[j]) {
            int buy = min(now, k[it] - t[it]);
            t[it] += buy;
            ned -= buy;
            now -= buy;
        }
    }
    return x - now >= ned;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m;
    for(int i = 1; i <= n; ++i) {
        cin >> k[i];
        sum += k[i];
    }
    for(int i = 1; i <= m; ++i) {
        int d, t;
        cin >> d >> t;
        p.push_back(d);
        s[d].push_back(t);
    }
    sort(p.begin(), p.end());
    int l = 1, r = sum * 2, ans = 1;
    while (l <= r) {
        int mid = l + (r - l) / 2;
        if (check(mid))
            ans = mid, r = mid - 1;
        else
            l = mid + 1;
    }
    cout << ans << "\n";
    return 0;
}
```