```C++
#include <bits/stdc++.h>
using namespace std;

#define js ios::sync_with_stdio(false); cin.tie(0); cout.tie(0)
#define pai pair<int, int>
typedef long long ll;
const int N = 2e5 + 7;
int n, m;
int k[N], t[N], sum;
vector<int> p, s[N];

inline ll read() {
  ll s = 0, w = 1;
  char ch = getchar();
  for (; !isdigit(ch); ch = getchar())
    if (ch == '-')
      w = -1;
  for (; isdigit(ch); ch = getchar())
    s = (s << 1) + (s << 3) + (ch ^ 48);
  return s * w;
}

inline void print(ll x, int op = 10) {
  if (!x) {
    putchar('0');
    if (op)
      putchar(op);
    return;
  }
  char F[40];
  ll tmp = x > 0 ? x : -x;
  if (x < 0)
    putchar('-');
  int cnt = 0;
  while (tmp > 0) {
    F[cnt++] = tmp % 10 + '0';
    tmp /= 10;
  }
  while (cnt > 0)
    putchar(F[--cnt]);
  if (op)
    putchar(op);
}

bool check(int x) {
  memset(t, 0, sizeof(t));
  int now = x, ned = sum, cnt = 0;
  int i = lower_bound(p.begin(), p.end(), x) - p.begin();
  for (int i = min(N - 1, x); i >= 1; --i) {
    now = min(now, i);
    if (now == 0 or ned == 0)
      break;
    for (auto &it : s[i]) {
      int buy = min(now, k[it] - t[it]);
      t[it] += buy;
      ned -= buy;
      now -= buy;
      cnt += buy;
    }
  }
  return x - cnt >= ned * 2;
}

void solve() {
  n = read(), m = read();
  for(int i = 1; i <= n; ++i) {
    k[i] = read();
    sum += k[i];
  }
  for(int i = 1; i <= m; ++i) {
    int d = read(), t = read();
    p.push_back(d);
    s[d].push_back(t);
  }
  sort(p.begin(), p.end());
  int l = 1, r = sum * 2, ans = 1;
  while (l <= r) {
    int mid = (l + r) / 2;
    if (check(mid))
      ans = mid, r = mid - 1;
    else
      l = mid + 1;
  }
  print(ans);
}

int main() {
  js;
  solve();
  return 0;
}
```