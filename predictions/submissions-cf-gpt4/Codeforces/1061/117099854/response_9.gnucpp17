#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
typedef long long ll;
const int N = 1e6 + 15;
const ll mod = 1000000007;
vector<ll> dp(N);
vector<int> divs[N];
void preprocess() {
    for (int i = 1; i < N; ++i)
        for (int j = i; j < N; j += i)
            divs[j].push_back(i);
}
void solve() {
    ll n;
    cin >> n;
    dp[0] = 1;
    for (ll i = 1; i <= n; i++) {
        ll x;
        cin >> x;
        for (int j = divs[x].size() - 1; j >= 0; --j) {
            dp[divs[x][j]] += dp[divs[x][j] - 1];
            dp[divs[x][j]] %= mod;
        }
    }
    ll ans = 0;
    for (ll i = 1; i <= n; i++)
        ans = (ans + dp[i]) % mod;
    cout << ans;
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    preprocess();
    solve();
}