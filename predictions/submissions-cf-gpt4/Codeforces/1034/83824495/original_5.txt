```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

constexpr int N = 17000005;
vector<int> lpf(N), cont(N);

void sieve() {
    for (int i = 2; i < N; i++) {
        if (lpf[i] == 0) {
            lpf[i] = i;
            for (int64_t j = int64_t(i) * i; j < N; j += i) {
                if (lpf[j] == 0)
                    lpf[j] = i;
            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    sieve();
    int n;
    cin >> n;
    vector<int> arr(n);
    int mcd = 0;
    for (int& x : arr) {
        cin >> x;
        mcd = gcd(mcd, x);
    }
    for (int& x : arr)
        x /= mcd;
    for (int& x : arr) {
        while (x > 1) {
            int f = lpf[x];
            cont[f]++;
            while (x % f == 0)
                x /= f;
        }
    }
    int maxi = *max_element(cont.begin(), cont.end());
    cout << (maxi == 0 ? -1 : n - maxi) << '\n';
}
```