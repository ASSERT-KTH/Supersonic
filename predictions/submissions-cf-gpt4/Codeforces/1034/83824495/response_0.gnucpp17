#include <iostream>
#include <vector>
#include <algorithm>

const int N = 17000005;
std::vector<int> lpf(N), cont(N);
std::vector<int> arr;

void sieve() {
    for (int i = 2; i < N; ++i) {
        if (lpf[i] == 0) {
            lpf[i] = i;
            for (long long j = static_cast<long long>(i) * i; j < N; j += i) {
                if (lpf[j] == 0)
                    lpf[j] = i;
            }
        }
    }
}

void countFactors(int n) {
    while (n > 1) {
        int f = lpf[n];
        cont[f]++;
        while (n % f == 0)
            n /= f;
    }
}

int main() {
    sieve();
    int n;
    std::cin >> n;
    arr.resize(n);
    int mcd = 0;
    for (int &i : arr) {
        std::cin >> i;
        mcd = std::gcd(mcd, i);
    }
    std::for_each(arr.begin(), arr.end(), [&](int &i) { i /= mcd; });
    std::for_each(arr.begin(), arr.end(), countFactors);
    int maxi = *std::max_element(cont.begin(), cont.end());
    std::cout << (maxi == 0 ? -1 : n - maxi) << '\n';
    return 0;
}