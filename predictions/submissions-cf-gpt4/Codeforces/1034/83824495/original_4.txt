```C++
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

constexpr int N = 17000005;
int lpf[N], cont[N];

inline void sieve() {
    for (int i = 2; i < N; i++) {
        if (!lpf[i]) {
            lpf[i] = i;
            for (int64_t j = int64_t(i) * i; j < N; j += i)
                if (!lpf[j])
                    lpf[j] = i;
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    sieve();
    int n;
    cin >> n;
    vector<int> arr(n);
    int mcd = 0;
    for (auto& x : arr) {
        cin >> x;
        mcd = __gcd(mcd, x);
    }
    for (auto& x : arr) {
        x /= mcd;
        while (x > 1) {
            int f = lpf[x];
            cont[f]++;
            while (!(x % f))
                x /= f;
        }
    }
    int maxi = *max_element(cont, cont + N);
    cout << ((maxi) ? n - maxi : -1) << '\n';
    return 0;
}
```