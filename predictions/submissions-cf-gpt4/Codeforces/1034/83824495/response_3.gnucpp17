#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int N = 17000005;
int lpf[N];
int cont[N];

void sieve() {
  for (int i = 2; i * i < N; i++) {
    if (lpf[i] != 0) continue;
    lpf[i] = i;
    for (int j = i * i; j < N; j += i) {
      if (lpf[j] == 0) lpf[j] = i;
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  sieve();

  int n;
  cin >> n;
  vector<int> arr(n);
  int mcd = 0;
  for (int& x : arr) {
    cin >> x;
    mcd = __gcd(mcd, x);
  }
  
  for (int& x : arr) x /= mcd;
  
  for (int& x : arr) {
    while (x > 1) {
      int f = lpf[x];
      cont[f]++;
      while (x % f == 0) x /= f;
    }
  }
  
  int maxi = *max_element(cont, cont + N);
  cout << (maxi == 0 ? -1 : n - maxi) << '\n';
  return 0;
}