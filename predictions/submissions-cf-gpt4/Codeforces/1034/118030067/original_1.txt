```cpp
#include <iostream>
#include <vector>
#include <bitset>
#include <unordered_map>
#include <algorithm>
#include <set>
#define int long long int
#define ff first
#define ss second
const int INF = 1e9+7;
const int maxN = 15000007;
bitset<maxN> primes;
int spf[maxN];
using namespace std;

inline void fio() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
}

inline int gcd(int x, int y) {
  while (y != 0) {
    int r = x % y;
    x = y;
    y = r;
  }
  return x;
}

inline void sieve() {
  primes.set();
  primes[0] = primes[1] = 0;
  for (int i = 2; i < maxN; i++)
    spf[i] = i;
  for (int i = 4; i < maxN; i += 2) {
    primes[i] = 0;
    spf[i] = 2;
  }
  for (int i = 3; i*i < maxN; i++) {
    if (primes[i]) {
      for (int j = i * i; j < maxN; j += i) {
        primes[j] = 0;
        spf[j] = i;
      }
    }
  }
}

void solve() {
  sieve();
  int n;
  cin >> n;
  vector<int> v(n);
  int gcdIs = 0;
  for (int i = 0; i < n; i++) {
    cin >> v[i];
    gcdIs = gcd(gcdIs, v[i]);
  }
  for (int& i : v) {
    i /= gcdIs;
  }
  unordered_map<int, int> countOfFactors;
  for (int& eleInArray : v) {
    set<int> primeFactors;
    while (eleInArray != 1) {
      primeFactors.insert(spf[eleInArray]);
      eleInArray /= spf[eleInArray];
    }
    for (const int& i : primeFactors)
      countOfFactors[i]++;
  }
  int keep = 0;
  for (const auto& i : countOfFactors) {
    keep = max(keep, i.ss);
  }
  keep ? (cout << n - keep) : (cout << "-1");
}

int32_t main() {
  fio();
  solve();
  return 0;
}
```