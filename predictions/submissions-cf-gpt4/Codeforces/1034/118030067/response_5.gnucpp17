#include <iostream>
#include <vector>
#include <unordered_map>
#include <bitset>
#include <algorithm>
#define int long long

const int maxN = 15000007;
std::bitset<maxN> primes;
int spf[maxN];

void sieve() {
  primes.set();
  primes[0] = primes[1] = 0;
  for (int i = 2; i < maxN; i++)
    spf[i] = i;
  for (int i = 4; i < maxN; i += 2) {
    primes[i] = 0;
    spf[i] = 2;
  }
  for (int i = 3; i * i < maxN; i++) {
    if (primes[i]) {
      for (int j = i * i; j < maxN; j += i) {
        primes[j] = 0;
        spf[j] = i;
      }
    }
  }
}

std::unordered_map<int, int> countOfFactors;
void factorize(int n) {
  while (n != 1) {
    countOfFactors[spf[n]]++;
    n /= spf[n];
  }
}

int gcd(int x, int y) { return y ? gcd(y, x % y) : x; }

void solve() {
  sieve();
  int n;
  std::cin >> n;
  std::vector<int> v(n);
  int gcdIs = 0;
  for (int i = 0; i < n; i++) {
    std::cin >> v[i];
    gcdIs = gcd(gcdIs, v[i]);
  }
  for (int &eleInArray : v) {
    eleInArray /= gcdIs;
    factorize(eleInArray);
  }
  int keep = 0;
  for (const auto &i : countOfFactors) {
    keep = std::max(keep, i.second);
  }
  std::cout << (keep ? n - keep : -1);
}

int32_t main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  solve();
  return 0;
}