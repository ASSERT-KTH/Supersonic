#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn = 1e5 + 5;
bool vis[maxn];
ll c[maxn];
ll ans, cur;
vector<ll> primes;
map<ll, int> cnt;
void getprime(int x) {
  vis[1] = true;
  for (int i = 2; i <= x; i++) {
    if (!vis[i])
      primes.push_back(i);
    for (auto p : primes) {
      if (i * p > x)
        break;
      vis[i * p] = true;
      if (i % p == 0)
        break;
    }
  }
}
void dfs(map<ll, int>::iterator it, ll val) {
  if (it == cnt.end()) {
    ll a = val;
    ll b = cur / val;
    if (a <= 100000 && b <= 100000 && c[a] && c[b]) {
      if (a == b)
        ans += c[a] * (c[a] - 1);
      else
        ans += c[a] * c[b];
    }
  } else {
    map<ll, int>::iterator nit = it;
    nit++;
    for (int i = 0; i <= it->second; i++) {
      dfs(nit, val);
      val *= it->first;
    }
  }
}
int main() {
  int n, k;
  scanf("%d%d", &n, &k);
  getprime(100000);
  if (k == 2) {
    map<ll, ll> all;
    for (int i = 1; i <= n; i++) {
      ll t;
      scanf("%lld", &t);
      cnt.clear();
      for (auto x : primes) {
        if (x > t)
          break;
        while (t % x == 0) {
          cnt[x]++;
          t /= x;
        }
      }
      ll h = 1;
      for (auto x : cnt)
        if (x.second & 1)
          h *= x.first;
      all[h]++;
    }
    for (auto x : all) {
      ans += x.second * (x.second - 1) / 2;
    }
  } else {
    for (int i = 1; i <= n; i++) {
      ll t;
      scanf("%lld", &t);
      c[t]++;
    }
    ll x = 1;
    cur = 1;
    while (cur <= 10000000000LL) {
      cnt.clear();
      dfs(cnt.begin(), 1);
      x++;
      cur = x * x * x;
      if (cur > 1e10)
        break;
    }
    ans /= 2;
  }
  printf("%lld\n", ans);
  return 0;
}