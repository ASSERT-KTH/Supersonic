#include <bits/stdc++.h>
using namespace std;

constexpr int MAXN = 100005;
long long c[MAXN];
bool judge[MAXN];
vector<long long> primes;
map<long long, int> cnt;
long long ans, cur;

long long gcd(long long a, long long b) {
  while (b != 0) {
    a %= b;
    swap(a, b);
  }
  return a;
}

long long mul(long long a, long long b, long long mod) {
  long long ret = 0;
  a %= mod;
  b %= mod;
  while (b) {
    if (b & 1)
      ret = (ret + a) % mod;
    a = (a << 1) % mod;
    b >>= 1;
  }
  return ret;
}

long long fast_pow(long long a, long long b, long long mod) {
  long long ret = 1;
  a %= mod;
  while (b) {
    if (b & 1)
      ret = mul(ret, a, mod);
    a = mul(a, a, mod);
    b >>= 1;
  }
  return ret;
}

bool check(long long a, long long n) {
  long long x = n - 1;
  int t = 0;
  while ((x & 1) == 0) {
    x >>= 1;
    ++t;
  }
  x = fast_pow(a, x, n);
  long long y;
  for (int i = 1; i <= t; ++i) {
    y = mul(x, x, n);
    if (y == 1 && x != 1 && x != n - 1)
      return true;
    x = y;
  }
  return y != 1;
}

bool Miller_Rabin(long long n) {
  if (n < 2 || (n != 2 && n % 2 == 0))
    return false;
  const int arr[12] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37};
  for (int i = 0; i < 12; ++i) {
    if (arr[i] == n)
      return true;
    if (check(arr[i], n))
      return false;
  }
  return true;
}

long long Pollard_rho(long long n, int c) {
  long long i = 1, k = 2, x = rand() % n, y = x, d;
  while (true) {
    ++i;
    x = (mul(x, x, n) + c) % n;
    d = gcd(abs(y - x), n);
    if (d > 1 && d < n)
      return d;
    if (i == k) {
      y = x;
      k <<= 1;
    }
  }
}

void factorize(long long n, map<long long, int> &cnt, int c = 107) {
  if (n == 1)
    return;
  if (Miller_Rabin(n)) {
    ++cnt[n];
    return;
  }
  long long p = n;
  while (p >= n)
    p = Pollard_rho(p, c--);
  factorize(p, cnt, c);
  factorize(n / p, cnt, c);
}

void dfs(map<long long, int>::iterator it, long long val) {
  if (it == cnt.end()) {
    if (val <= MAXN && cur / val <= MAXN && c[val] && c[cur / val]) {
      if (val == cur / val)
        ans += c[val] * (c[val] - 1);
      else
        ans += c[val] * c[cur / val];
    }
  } else {
    for (int i = 0; i <= it->second; ++i) {
      dfs(next(it), val);
      val *= it->first;
    }
  }
}

inline void getprime(int x) {
  for (int i = 2; i <= x; ++i) {
    if (!judge[i])
      primes.push_back(i);
    for (auto p : primes) {
      if (i * p > x)
        break;
      judge[i * p] = true;
      if (i % p == 0)
        break;
    }
  }
}

int main() {
  int n, k;
  scanf("%d%d", &n, &k);
  if (k == 2) {
    map<long long, long long> all;
    getprime(MAXN);
    for (int i = 0; i < n; ++i) {
      int t;
      scanf("%d", &t);
      cnt.clear();
      for (auto x : primes) {
        if (x > t)
          break;
        while (t % x == 0) {
          ++cnt[x];
          t /= x;
        }
      }
      long long h = 1;
      for (auto x : cnt)
        if (x.second & 1)
          h *= x.first;
      ++all[h];
    }
    for (auto x : all) {
      ans += x.second * (x.second - 1) / 2;
    }
  } else {
    for (int i = 0; i < n; ++i) {
      int t;
      scanf("%d", &t);
      ++c[t];
    }
    long long x = 1;
    cur = 1;
    while (cur <= 1e10) {
      cnt.clear();
      factorize(cur, cnt);
      dfs(cnt.begin(), 1);
      ++x;
      cur = x;
      for (int j = 1; j <= k; ++j) {
        cur *= x;
        if (cur > 1e10)
          break;
      }
    }
    ans /= 2;
  }
  printf("%lld\n", ans);
  return 0;
}