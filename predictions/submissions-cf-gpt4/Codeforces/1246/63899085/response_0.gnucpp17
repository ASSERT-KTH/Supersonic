#include <bits/stdc++.h>
#define ll long long
using namespace std;

const int N = 1e5 + 7;
const int K = 100;
int n, k;
ll ans, c[N];
vector<int> primes;
vector<ll> cnt[K];
map<int, int> factor;

void sieve() {
    vector<bool> isPrime(N, true);
    isPrime[0] = isPrime[1] = false;
    for(int p = 2; p * p < N; p++) {
        if(isPrime[p]) {
            for(int i = p * p; i < N; i += p)
                isPrime[i] = false;
        }
    }
    for(int i = 2; i < N; ++i)
        if(isPrime[i])
            primes.push_back(i);
}

void factorize(int x) {
    factor.clear();
    for(int p : primes) {
        if(p > x) break;
        while(x % p == 0) {
            factor[p]++;
            x /= p;
        }
    }
    if(x > 1) factor[x]++;
}

int main() {
    scanf("%d%d", &n, &k);
    sieve();
    if(k == 2) {
        map<int, ll> all;
        for(int i = 0; i < n; ++i) {
            int t;
            scanf("%d", &t);
            factorize(t);
            int h = 1;
            for(auto x : factor)
                if(x.second & 1)
                    h *= x.first;
            all[h]++;
        }
        for(auto x : all)
            ans += x.second * (x.second - 1) / 2;
    } else {
        for(int i = 0; i < n; ++i) {
            int t;
            scanf("%d", &t);
            c[t]++;
        }
        for(ll x = 1; ; ++x) {
            ll cur = 1;
            for(int j = 0; j < k; ++j) {
                cur *= x;
                if(cur > 1e10) break;
            }
            if(cur > 1e10) break;
            factorize(cur);
            for(auto it = factor.begin(); it != factor.end(); ++it) {
                for(int i = 0; i <= it->second; i++) {
                    cnt[i].push_back(it->first);
                }
            }
            for(auto v : cnt) {
                for(ll val : v) {
                    ll a = val, b = cur / val;
                    if(a <= 1e5 && b <= 1e5 && c[a] && c[b])
                        if(a == b) ans += c[a] * (c[a] - 1);
                        else ans += c[a] * c[b];
                }
                v.clear();
            }
        }
        ans /= 2;
    }
    printf("%lld\n", ans);
    return 0;
}