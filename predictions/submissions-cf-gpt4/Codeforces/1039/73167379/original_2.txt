```
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#include <bits/stdc++.h>
#define vec vector
#define ms multiset
#define pb push_back
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define uid uniform_int_distribution
#define fast cin.tie(0); cout.tie(0); cin.sync_with_stdio(0); cout.sync_with_stdio(0);
using namespace std;
typedef long long ll;
typedef string str;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
constexpr int G = 400002;
int a, OPA = -1;
vec<int> l[G];
int skok[G], o[G], zam[G], GR[G][2], mxd[G], mxp[G], dp[G][2], sz[G], good[G];
vec<int> gd, bd;

int CALC(int v, int p) {
  mxd[v] = 1;
  sz[v] = 1;
  int c1 = 0, c2 = 0;
  for (const int h : l[v]) {
    if (h == p) continue;
    int x = CALC(h, v);
    mxd[v] = max(mxd[v], x + 1);
    sz[v] += sz[h];
    if (x >= c1) c2 = c1, c1 = x;
    else if (x > c2) c2 = x;
  }
  mxp[v] = c1 + c2 + 1;
  return mxd[v];
}

int find_centroid(int v, int p) {
  int MX = 0, num = -1;
  for (const int h : l[v]) {
    if (h != p && sz[h] > MX) MX = sz[h], num = h;
  }
  return MX > a / 2 ? find_centroid(num, v) : v;
}

void KROLIK(int v) {
  (good[v] ? gd : bd).pb(v);
  for (const int h : l[v]) {
    if (!good[h]) KROLIK(h);
  }
}

void RIP_PAPA(int v, int p) {
  l[v].erase(remove(l[v].begin(), l[v].end(), p), l[v].end());
  for (const int h : l[v]) RIP_PAPA(h, v);
}

int eba = 0;
void rnm(int v) {
  zam[v] = eba++;
  deque<int> dq = {v};
  while (!dq.empty()) {
    int x = dq.front(); dq.pop_front();
    for (const int h : l[x]) {
      if (zam[h] != -1) continue;
      dq.pb(h);
      zam[h] = eba++;
    }
  }
}

int iba = 0;
void rnm2(int v) {
  zam[v] = iba++;
  deque<int> dq = {v};
  while (!dq.empty()) {
    int x = dq.front(); dq.pop_front();
    for (const int h : l[x]) {
      zam[h] = iba++;
      if (!good[h]) dq.pb(h);
    }
  }
}

int GA(int LEN) {
  if (o[LEN] != -1) return o[LEN];
  int d1 = 0, d2 = 0, w, rg;
  for (int q = a - 1; q >= 0; q--) {
    if (good[q]) {
      dp[q][0] = sz[q] / LEN;
      dp[q][1] = sz[q] % LEN;
      continue;
    }
    dp[q][0] = 0;
    w = GR[q][0], rg = GR[q][1];
    for (; w <= rg; w++) {
      dp[q][0] += dp[w][0];
      if (dp[w][1] >= d1) d2 = d1, d1 = dp[w][1];
      else d2 = max(d2, dp[w][1]);
    }
    if (d1 + d2 + 1 < LEN) dp[q][1] = d1 + 1;
    else dp[q][0]++, dp[q][1] = 0;
  }
  return o[LEN] = dp[0][0];
}

int main() {
  fast;
  cin >> a;
  o[1] = a;
  for (int q = 1; q <= a; q++) skok[a / q]++;
  for (int &i : skok) i /= 2;
  vec<pii> reb(a - 1);
  for (int q = 0; q < a - 1; q++) {
    int x, y;
    cin >> x >> y; x--, y--;
    reb[q] = {x, y};
    l[x].pb(y), l[y].pb(x);
  }
  rnm(0);
  for (int q = 0; q < a; q++) l[q].clear();
  for (pii &p : reb) {
    l[zam[p.first]].pb(zam[p.second]);
    l[zam[p.second]].pb(zam[p.first]);
  }
  RIP_PAPA(0, -1);
  CALC(0, -1);
  for (int q = 0; q < a; q++) good[q] = sz[q] == mxd[q];
  rnm2(0);
  for (int q = 0; q < a; q++) {
    if (zam[q] == -1) continue;
    sz[zam[q]] = sz[q];
    mxd[zam[q]] = mxd[q];
    mxp[zam[q]] = mxp[q];
  }
  for (int q = 0; q < a; q++) l[q].clear();
  for (pii p : reb) {
    if (min(zam[p.first], zam[p.second]) > -1) {
      l[zam[p.first]].pb(zam[p.second]);
    }
  }
  for (int q = 0; q < a; q++) {
    GR[q][0] = l[q].size() ? l[q][0] : a;
    GR[q][1] = l[q].size() ? l[q].back() : q;
  }
  int diam = *max_element(mxp, mxp + a);
  fill(o + diam + 1, o + a + 1, 0);
  o[diam] = 1;
  int H = min(a - 1, static_cast<int>(sqrt(a * log2(a)) / 2)), I = 2;
  int tyt;
  for (; I <= H; I++) {
    OPA = I / 2;
    o[I] = GA(I);
  }
  for (; I <= a;) {
    OPA = I / 2;
    tyt = GA(I);
    int lf = I, rg = min(a + 1, lf + skok[tyt] + 1);
    if (tyt == 0) break;
    if (tyt == 1) lf = diam, rg = diam + 1;
    while (lf + 1 < rg) {
      int md = (lf + rg) / 2;
      (GA(md) == tyt) ? lf = md : rg = md;
    }
    for (; I < rg; I++) o[I] = tyt;
  }
  for (int q = 1; q <= a; q++) {
    cout << max(0, o[q]) << "\n";
  }
  return 0;
}
```