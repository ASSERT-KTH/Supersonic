```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;

const int MAXN = 400002;
int n, a[MAXN], b[MAXN], c[MAXN], d[MAXN], e[MAXN], f[MAXN], g[MAXN], h[MAXN], i[MAXN], j[MAXN], k[MAXN], l[MAXN], m[MAXN], o[MAXN], p[MAXN], q[MAXN], r[MAXN], s[MAXN], t[MAXN], u[MAXN], v[MAXN], w[MAXN], x[MAXN], y[MAXN], z[MAXN];
vector<int> adj[MAXN];

int read() {
    int x = 0, f = 1;
    char ch = getchar();
    while (ch < '0' || ch > '9') {
        if (ch == '-')
            f = -1;
        ch = getchar();
    }
    while (ch >= '0' && ch <= '9') {
        x = x * 10 + ch - '0';
        ch = getchar();
    }
    return x * f;
}

void write(int x) {
    if (x < 0) {
        putchar('-');
        x = -x;
    }
    if (x > 9)
        write(x / 10);
    putchar(x % 10 + '0');
}

void writeln(int x) {
    write(x);
    puts("");
}

int find_centroid(int v, int fa) {
    int sz = c[v] = 1, mx = 0;
    for (auto u : adj[v]) {
        if (u == fa)
            continue;
        int w = find_centroid(u, v);
        sz += c[u];
        mx = max(mx, w);
    }
    mx = max(mx, n - sz);
    if (mx * 2 <= n)
        return v;
    else
        return -1;
}

void solve(int v) {
    v = find_centroid(v, -1);
    if (v == -1)
        return;
    int sz = c[v];
    for (int i = 0; i <= sz; i++) {
        m[i] = 0;
    }
    m[0] = 1;
    for (auto u : adj[v]) {
        for (int i = sz; i >= c[u]; i--) {
            m[i] = max(m[i], m[i - c[u]]);
        }
    }
    for (int i = 0; i <= sz; i++) {
        p[i] = max(p[i], m[i]);
    }
    adj[v].clear();
    for (auto u : adj[v]) {
        adj[u].erase(v);
        solve(u);
    }
}

int main() {
    n = read();
    for (int i = 1; i < n; i++) {
        int u = read(), v = read();
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    solve(1);
    for (int i = 1; i <= n; i++) {
        writeln(p[i]);
    }
    return 0;
}
```