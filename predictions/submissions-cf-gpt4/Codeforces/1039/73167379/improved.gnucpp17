#pragma optimization_level 3
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#include <bits/stdc++.h>
#define F first
#define S second
#define vec vector
#define ms multiset
#define pb push_back
#define pll pair<ll, ll>
#define pdd pair<ld, ld>
#define pq priority_queue
#define umap unordered_map
#define uset unordered_set
#define pii pair<int, int>
#define pnn pair<Node *, Node *>
#define uid uniform_int_distribution
#define FILE                                                                   \
  ifstream in("sumsqr.in");                                                    \
  ofstream out("sumsqr.out");
#define fast                                                                   \
  cin.tie(0);                                                                  \
  cout.tie(0);                                                                 \
  cin.sync_with_stdio(0);                                                      \
  cout.sync_with_stdio(0);
using namespace std;
typedef string str;
typedef long long ll;
typedef long double ld;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
int getChar() {
  static char buf[1 << 16];
  static int pos = 0, size = 0;
  if (pos == size) {
    pos = 0;
    size = (int)fread(buf, sizeof(buf[0]), sizeof(buf) / sizeof(buf[0]), stdin);
  }
  return buf[pos++];
}
inline int ni() {
  char c = getChar();
  for (; c == '\n' || c == ' ';)
    c = getChar();
  int o = 0;
  for (; c != ' ' && c != '\n'; c = getChar())
    o = o * 10 + c - '0';
  return o;
}
inline void putChar(int c) {
  static char buf[1 << 16];
  static int pos = 0;
  if (c == EOF || pos == 1 << 16) {
    fwrite(buf, sizeof(buf[0]), pos, stdout);
    pos = 0;
  }
  if (c == EOF)
    return;
  buf[pos++] = c;
}
void printInt(int val) {
  char buf[7];
  int pos = 0;
  if (val == 0)
    buf[pos++] = 48;
  for (; val; val /= 10)
    buf[pos++] = 48 + val % 10;
  for (pos--; pos >= 0;)
    putChar(buf[pos--]);
  putChar('\n');
}
const int G = 400002;
int a, OPA = -1;
vec<int> l[G];
int skok[G], o[G], zam[G], GR[G][2], mxd[G], mxp[G], dp[G][2], sz[G], good[G];
vec<int> gd, bd;
int CALC(int v, int p, int D) {
  mxd[v] = 1;
  sz[v] = 1;
  int c1 = 0, c2 = 0;
  for (int h : l[v]) {
    if (h == p)
      continue;
    int x = CALC(h, v, D + 1);
    mxd[v] = max(mxd[v], x + 1);
    sz[v] += sz[h];
    if (x >= c1)
      c2 = c1, c1 = x;
    else if (x > c2)
      c2 = x;
  }
  mxp[v] = c1 + c2 + 1;
  return mxd[v];
}
int find_centroid(int v, int p) {
  int MX = 0, num = -1;
  for (int h : l[v]) {
    if (h != p && sz[h] > MX)
      MX = sz[h], num = h;
  }
  return MX > a / 2 ? find_centroid(num, v) : v;
}
void KROLIK(int v) {
  if (good[v])
    gd.pb(v);
  else
    bd.pb(v);
  for (int h : l[v]) {
    if (!good[h])
      KROLIK(h);
  }
}
void RIP_PAPA(int v, int p) {
  for (int q = 0; q < l[v].size(); q++) {
    if (l[v][q] == p) {
      l[v].erase(l[v].begin() + q);
      break;
    }
  }
  for (int h : l[v])
    RIP_PAPA(h, v);
}
int eba = 0;
void rnm(int v) {
  zam[v] = eba++;
  deque<int> dq = {v};
  for (; dq.size();) {
    int x = dq[0];
    dq.pop_front();
    for (int h : l[x]) {
      if (zam[h] != -1)
        continue;
      dq.pb(h);
      zam[h] = eba++;
    }
  }
}
int iba = 0;
void rnm2(int v) {
  zam[v] = iba++;
  deque<int> dq = {v};
  for (; dq.size();) {
    int x = dq[0];
    dq.pop_front();
    for (int h : l[x]) {
      zam[h] = iba++;
      if (good[h])
        continue;
      dq.pb(h);
    }
  }
}
int ST;
int GA(int LEN) {
  if (o[LEN] != -1)
    return o[LEN];
  int d1, d2, w, rg;
  for (int q = ST; q >= 0; q--) {
    if (good[q]) {
      dp[q][0] = sz[q] / LEN;
      dp[q][1] = sz[q] % LEN;
      continue;
    }
    dp[q][0] = 0;
    d1 = d2 = 0, w = GR[q][0], rg = GR[q][1];
    for (; w <= rg; w++) {
      dp[q][0] += dp[w][0];
      if (dp[w][1] >= d1)
        d2 = d1, d1 = dp[w][1];
      else
        d2 = max(d2, dp[w][1]);
    }
    if (d1 + d2 + 1 < LEN)
      dp[q][1] = d1 + 1;
    else
      dp[q][0]++, dp[q][1] = 0;
  }
  return o[LEN] = dp[0][0];
}
int main() {
  fast;
  memset(o, -1, sizeof(o));
  memset(zam, -1, sizeof(zam));
  a = ni();
  o[1] = a;
  ST = a - 1;
  for (int q = 1; q <= a; q++)
    skok[a / q]++;
  for (int &i : skok)
    i /= 2;
  vec<pii> reb(a - 1);
  for (int q = 0; q < a - 1; q++) {
    int x = ni() - 1, y = ni() - 1;
    reb[q] = {x, y};
    l[x].pb(y);
    l[y].pb(x);
  }
  rnm(0);
  for (int q = 0; q < a; q++)
    l[q].clear();
  for (pii p : reb) {
    l[zam[p.F]].pb(zam[p.S]);
    l[zam[p.S]].pb(zam[p.F]);
  }
  RIP_PAPA(0, -1);
  reb.clear();
  for (int q = 0; q < a; q++)
    for (int h : l[q])
      reb.pb({q, h});
  CALC(0, -1, 1);
  for (int q = 0; q < a; q++)
    good[q] = sz[q] == mxd[q];
  memset(zam, -1, sizeof(zam));
  zam[0] = 0;
  if (!good[0])
    rnm2(0);
  else
    iba = 1;
  ST = iba - 1;
  for (int q = 0; q < a; q++) {
    if (zam[q] == -1)
      continue;
    sz[zam[q]] = sz[q];
    mxd[zam[q]] = mxd[q];
    mxp[zam[q]] = mxp[q];
  }
  for (int q = 0; q < a; q++)
    l[q].clear();
  for (pii p : reb) {
    if (min(zam[p.F], zam[p.S]) > -1) {
      l[zam[p.F]].pb(zam[p.S]);
    }
  }
  for (int q = 0; q < a; q++) {
    GR[q][0] = l[q].size() ? l[q][0] : a;
    GR[q][1] = l[q].size() ? l[q].back() : q;
  }
  for (int q = 0; q < a; q++)
    good[q] = sz[q] == mxd[q];
  int diam = 0;
  for (int &i : mxp)
    diam = max(i, diam);
  o[diam] = 1;
  for (int q = diam + 1; q <= a; q++)
    o[q] = 0;
  int H = min(a - 1, (int)(sqrt(a * log2(a)) / 2)), I = 2;
  for (; I <= H; I++) {
    o[I] = GA(I);
    OPA = I / 2;
  }
  int tyt;
  for (; I <= a;) {
    OPA = I / 2;
    tyt = GA(I);
    int lf = I, rg = min(a + 1, lf + skok[tyt] + 1);
    if (tyt == 0)
      break;
    if (tyt == 1)
      lf = diam, rg = diam + 1;
    for (; lf + 1 < rg;) {
      int md = (lf + rg) / 2;
      if (GA(md) == tyt)
        lf = md;
      else
        rg = md;
    }
    for (; I < rg; I++)
      o[I] = tyt;
  }
  for (int q = 1; q <= a; q++) {
    printInt(max(0, o[q]));
  }
  putChar(EOF);
}
