```cpp
#define MAX_SIZE 400002
#define fast                                                                   \
  ios::sync_with_stdio(false);                                                  \
  cin.tie(0);                                                                  \
  cout.tie(0);
#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;

vector<int> adj[MAX_SIZE];
int size[MAX_SIZE], maxDepth[MAX_SIZE], maxPath[MAX_SIZE], dp[MAX_SIZE][2], order[MAX_SIZE][2];
bool isCentroid[MAX_SIZE];
int n, a;

void dfs(int v, int p) {
  size[v] = 1;
  int max1 = 0, max2 = 0;
  for (int u : adj[v]) {
    if (u == p)
      continue;
    dfs(u, v);
    size[v] += size[u];
    if (maxDepth[u] >= max1) {
      max2 = max1;
      max1 = maxDepth[u];
    } else if (maxDepth[u] > max2) {
      max2 = maxDepth[u];
    }
  }
  maxPath[v] = max1 + max2 + 1;
  maxDepth[v] = max1 + 1;
}

int findCentroid(int v, int p) {
  for (int u : adj[v]) {
    if (u != p && size[u] > n / 2) {
      return findCentroid(u, v);
    }
  }
  return v;
}

void solve(int v, int p, int d) {
  dp[v][0] = size[v] / d;
  dp[v][1] = size[v] % d;
  for (int u : adj[v]) {
    if (u == p || isCentroid[u])
      continue;
    solve(u, v, d);
    dp[v][0] += dp[u][0];
    dp[v][1] = max(dp[v][1], dp[u][1]);
  }
  if (dp[v][1] >= d) {
    dp[v][0]++;
    dp[v][1] -= d;
  }
}

int main() {
  fast;
  cin >> n;
  for (int i = 0; i < n - 1; i++) {
    int x, y;
    cin >> x >> y;
    x--, y--;
    adj[x].push_back(y);
    adj[y].push_back(x);
  }
  dfs(0, -1);
  int centroid = findCentroid(0, -1);
  isCentroid[centroid] = true;
  for (int i = 1; i <= n; i++) {
    solve(centroid, -1, i);
    cout << dp[centroid][0] << '\n';
  }
  return 0;
}
```