#define MAXN 400000
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
int n, a, b, lo, hi, mid, centroid, csz, sz[MAXN+10], parent[MAXN+10], dp[MAXN+10], ans[MAXN+10], vis[MAXN+10];
vi adj[MAXN+10];
vector<pii> edges;
ll sum[MAXN+10];
void dfs(int u, int p)
{
    parent[u] = p;
    sz[u] = 1;
    for (int i = 0; i < adj[u].size(); i++)
    {
        int v = adj[u][i];
        if (v == p) continue;
        dfs(v,u);
        sz[u] += sz[v];
    }
}
void find_centroid(int u, int p)
{
    int mxsz = 0;
    for (int i = 0; i < adj[u].size(); i++)
    {
        int v = adj[u][i];
        if (v == p || vis[v]) continue;
        mxsz = max(mxsz,sz[v]);
        if (mxsz > n/2)
        {
            find_centroid(v,u);
            return;
        }
    }
    centroid = u;
    csz = sz[u];
}
void dfs2(int u, int p, int val)
{
    dp[u] = val;
    sum[val]++;
    for (int i = 0; i < adj[u].size(); i++)
    {
        int v = adj[u][i];
        if (v == p || vis[v]) continue;
        dfs2(v,u,val+1);
    }
}
void solve(int u)
{
    dfs(u,0);
    n = sz[u];
    find_centroid(u,0);
    u = centroid;
    vis[u] = 1;
    int mxval = 0;
    for (int i = 0; i < adj[u].size(); i++)
    {
        int v = adj[u][i];
        if (vis[v]) continue;
        dfs2(v,u,1);
        mxval = max(mxval,dp[v]);
    }
    for (int i = mxval; i >= 1; i--)
    {
        sum[i-1] += sum[i];
    }
    ans[1] = max(ans[1],csz);
    for (int i = 2; i <= mxval; i++)
    {
        ans[i] = max(ans[i],(int)sum[i]);
    }
    for (int i = 0; i < adj[u].size(); i++)
    {
        int v = adj[u][i];
        if (vis[v]) continue;
        solve(v);
    }
}
int main()
{
    ios_base::sync_with_stdio(0); cin.tie(0);
    cin >> n;
    for (int i = 1; i < n; i++)
    {
        cin >> a >> b;
        a--; b--;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    solve(0);
    for (int i = 1; i <= n; i++)
    {
        cout << ans[i] << "\n";
    }
    return 0;
}