```cpp
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
typedef pair<int, int> pii;
const int G = 400002;
int a;
vector<int> l[G];
int skok[G], o[G], zam[G], GR[G][2], mxd[G], mxp[G], dp[G][2], sz[G], good[G];

void calc(int v, int p) {
  mxd[v] = 1;
  sz[v] = 1;
  int c1 = 0, c2 = 0;
  for (int h : l[v]) {
    if (h == p)
      continue;
    int x = calc(h, v) + 1;
    mxd[v] = max(mxd[v], x);
    sz[v] += sz[h];
    if (x >= c1)
      c2 = c1, c1 = x;
    else if (x > c2)
      c2 = x;
  }
  mxp[v] = c1 + c2 + 1;
  return mxd[v];
}

int find_centroid(int v, int p) {
  int MX = 0, num = -1;
  for (int h : l[v]) {
    if (h != p && sz[h] > MX)
      MX = sz[h], num = h;
  }
  return MX > a / 2 ? find_centroid(num, v) : v;
}

void remove_tree(int v, int p) {
  l[v].erase(remove(l[v].begin(), l[v].end(), p), l[v].end());
  for (int h : l[v])
    remove_tree(h, v);
}

void rename_tree(int v, int &num) {
  zam[v] = num++;
  for (int h : l[v]) {
    if (zam[h] != -1)
      continue;
    rename_tree(h, num);
  }
}

int ga(int LEN, int ST) {
  if (o[LEN] != -1)
    return o[LEN];
  for (int q = ST; q >= 0; q--) {
    if (good[q]) {
      dp[q][0] = sz[q] / LEN;
      dp[q][1] = sz[q] % LEN;
      continue;
    }
    dp[q][0] = 0;
    int d1 = 0, d2 = 0, w = GR[q][0], rg = GR[q][1];
    for (; w <= rg; w++) {
      dp[q][0] += dp[w][0];
      if (dp[w][1] >= d1)
        d2 = d1, d1 = dp[w][1];
      else
        d2 = max(d2, dp[w][1]);
    }
    if (d1 + d2 + 1 < LEN)
      dp[q][1] = d1 + 1;
    else
      dp[q][0]++, dp[q][1] = 0;
  }
  return o[LEN] = dp[0][0];
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  memset(o, -1, sizeof o);
  memset(zam, -1, sizeof zam);
  cin >> a;
  o[1] = a;
  for (int q = 1; q <= a; q++)
    skok[a / q]++;
  for (int &i : skok)
    i /= 2;
  vector<pii> reb(a - 1);
  for (int q = 0; q < a - 1; q++) {
    int x, y;
    cin >> x >> y;
    x--, y--;
    reb[q] = {x, y};
    l[x].push_back(y);
    l[y].push_back(x);
  }
  int num = 0;
  rename_tree(0, num);
  for (int q = 0; q < a; q++)
    l[q].clear();
  for (pii p : reb) {
    l[zam[p.first]].push_back(zam[p.second]);
    l[zam[p.second]].push_back(zam[p.first]);
  }
  remove_tree(0, -1);
  reb.clear();
  for (int q = 0; q < a; q++) {
    for (int h : l[q])
      reb.push_back({q, h});
  }
  calc(0, -1);
  for (int q = 0; q < a; q++)
    good[q] = sz[q] == mxd[q];
  memset(zam, -1, sizeof zam);
  zam[0] = 0;
  if (!good[0])
    rename_tree(0, num);
  for (int q = 0; q < a; q++) {
    if (zam[q] == -1)
      continue;
    sz[zam[q]] = sz[q];
    mxd[zam[q]] = mxd[q];
    mxp[zam[q]] = mxp[q];
  }
  for (int q = 0; q < a; q++)
    l[q].clear();
  for (pii p : reb) {
    if (min(zam[p.first], zam[p.second]) > -1) {
      l[zam[p.first]].push_back(zam[p.second]);
    }
  }
  for (int q = 0; q < a; q++) {
    GR[q][0] = l[q].size() ? l[q][0] : a;
    GR[q][1] = l[q].size() ? l[q].back() : q;
  }
  for (int q = 0; q < a; q++)
    good[q] = sz[q] == mxd[q];
  int diam = 0;
  for (int &i : mxp)
    diam = max(i, diam);
  o[diam] = 1;
  for (int q = diam + 1; q <= a; q++)
    o[q] = 0;
  int H = min(a - 1, (int)(sqrt(a * log2(a)) / 2)), I = 2;
  for (; I <= H; I++) {
    o[I] = ga(I, num - 1);
  }
  int tyt;
  for (; I <= a;) {
    tyt = ga(I, num - 1);
    int lf = I, rg = min(a + 1, lf + skok[tyt] + 1);
    if (tyt == 0)
      break;
    if (tyt == 1)
      lf = diam, rg = diam + 1;
    for (; lf + 1 < rg;) {
      int md = (lf + rg) / 2;
      if (ga(md, num - 1) == tyt)
        lf = md;
      else
        rg = md;
    }
    for (; I < rg; I++)
      o[I] = tyt;
  }
  for (int q = 1; q <= a; q++) {
    cout << max(0, o[q]) << "\n";
  }
  return 0;
}
```