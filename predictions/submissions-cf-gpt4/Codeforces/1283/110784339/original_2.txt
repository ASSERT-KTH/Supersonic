```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>

#define ll long long

using std::cin;
using std::cout;
using std::vector;
using std::queue;
using std::unordered_map;

struct custom_hash {
    size_t operator()(uint64_t x) const {
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }
};

void solve() {
    int n, m;
    cin >> n >> m;
    vector<ll> v(n);
    for (auto &x : v)
        cin >> x;

    unordered_map<ll, ll, custom_hash> d;
    queue<ll> q;
    for (const auto &x : v) {
        if (!d.count(x)) {
            d[x] = 0LL;
            q.push(x);
        }
    }
    vector<ll> res;
    res.reserve(m);
    ll mini_sum = 0LL;
    while (!q.empty() && res.size() < m) {
        ll cur = q.front();
        q.pop();
        if (d[cur] != 0) {
            res.push_back(cur);
            mini_sum += d[cur];
        }
        for (auto neighbor : {cur - 1, cur + 1}) {
            if (!d.count(neighbor)) {
                d[neighbor] = d[cur] + 1;
                q.push(neighbor);
            }
        }
    }
    cout << mini_sum << "\n";
    for (const auto &x : res)
        cout << x << " ";
    cout << "\n";
}

int main() {
    std::ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    solve();
    return 0;
}
```