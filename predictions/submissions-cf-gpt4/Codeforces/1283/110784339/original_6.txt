```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <queue>
#include <algorithm>
#include <chrono>
#include <random>

using namespace std;

struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

void solve() {
    int n, m;
    cin >> n >> m;
    vector<int> v(n);
    for (auto &x : v)
        cin >> x;
    unordered_map<long long, long long, custom_hash> d;
    queue<long long> q;
    for (int i = 0; i < n; i++) {
        d[v[i]] = 0LL;
        q.push(v[i]);
    }
    vector<long long> res;
    long long mini_sum = 0LL;
    while (!q.empty() && (int)res.size() < m) {
        long long cur = q.front();
        q.pop();
        if (d[cur] != 0) {
            res.push_back(cur);
            mini_sum += d[cur];
        }
        if (!d.count(cur - 1)) {
            d[cur - 1] = d[cur] + 1;
            q.push(cur - 1);
        }
        if (!d.count(cur + 1)) {
            d[cur + 1] = d[cur] + 1;
            q.push(cur + 1);
        }
    }
    shuffle(res.begin(), res.end(), rng);
    cout << mini_sum << "\n";
    for (auto x : res)
        cout << x << " ";
    cout << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    solve();
    return 0;
}
```