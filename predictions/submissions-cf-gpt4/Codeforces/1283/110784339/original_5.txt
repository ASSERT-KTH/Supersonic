```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
#include <chrono>
#include <random>
#include <algorithm>

typedef long long ll;
typedef std::pair<ll, ll> pll;
typedef std::vector<int> vi;
typedef std::vector<ll> vll;

struct custom_hash {
  static uint64_t splitmix64(uint64_t x) {
    x += 0x9e3779b97f4a7c15;
    x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
    x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
    return x ^ (x >> 31);
  }
  size_t operator()(uint64_t x) const {
    static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
    return splitmix64(x + FIXED_RANDOM);
  }
};

std::mt19937 rng(std::chrono::high_resolution_clock::now().time_since_epoch().count());

void solve() {
  int n, m;
  std::cin >> n >> m;
  vi v(n);
  for (auto &x : v)
    std::cin >> x;
  
  std::unordered_map<ll, ll, custom_hash> d;
  std::priority_queue<ll, std::vector<ll>, std::greater<ll>> q;
  
  for (int i = 0; i < n; i++) {
    d[v[i]] = 0;
    q.push(v[i]);
  }
  
  vll res;
  ll mini_sum = 0;
  
  while (res.size() < m) {
    ll cur = q.top();
    q.pop();
    
    if (d[cur] != 0) {
      res.push_back(cur);
      mini_sum += d[cur];
    }
    
    if (d.find(cur - 1) == d.end()) {
      d[cur - 1] = d[cur] + 1;
      q.push(cur - 1);
    }
    
    if (d.find(cur + 1) == d.end()) {
      d[cur + 1] = d[cur] + 1;
      q.push(cur + 1);
    }
  }
  
  std::shuffle(res.begin(), res.end(), rng);
  std::cout << mini_sum << "\n";
  
  for (auto x : res)
    std::cout << x << " ";
  std::cout << "\n";
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);
  
  solve();
  
  return 0;
}
```