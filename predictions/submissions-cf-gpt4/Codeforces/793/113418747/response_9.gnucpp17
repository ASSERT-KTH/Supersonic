#include <iostream>
#include <algorithm>
#include <vector>

const int INF = 1000000007;

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  int n, p, m;
  std::cin >> n >> p >> m;

  std::vector<std::vector<int>> c(n + 1, std::vector<int>(n + 1, INF));
  std::vector<std::vector<std::vector<std::vector<int>>>> f(n + 1, std::vector<std::vector<std::vector<int>>>(n + 1, std::vector<std::vector<int>>(p + 1, std::vector<int>(2, INF))));

  for (int i = 0, x, y, dis; i < m; ++i) {
    std::cin >> x >> y >> dis;
    c[x][y] = std::min(dis, c[x][y]);
  }

  for (int i = 1; i <= n; ++i) {
    f[i][i][1][0] = f[i][i][1][1] = 0;
  }

  for (int d = 1; d < n; ++d) {
    for (int i = 1; i + d <= n; ++i) {
      int j = i + d;
      for (int k = 2; k <= p; ++k) {
        for (int i2 = i + 1; i2 < j; ++i2) {
          int temp = std::min(f[i2][j][k - 1][0] + c[i][i2], f[i2][j][k - 1][1] + c[i][j]);
          f[i][j][k][0] = std::min(temp, f[i][j][k][0]);
        }
        f[i][j][k][0] = std::min(f[j][j][k - 1][0] + c[i][j], f[i][j][k][0]);
        for (int j2 = j - 1; j2 > i; --j2) {
          int temp = std::min(f[i][j2][k - 1][1] + c[j][j2], f[i][j2][k - 1][0] + c[j][i]);
          f[i][j][k][1] = std::min(temp, f[i][j][k][1]);
        }
        f[i][j][k][1] = std::min(f[i][i][k - 1][1] + c[j][i], f[i][j][k][1]);
      }
    }
  }

  int ans = INF;
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j) {
      ans = std::min(ans, std::min(f[i][j][p][0], f[i][j][p][1]));
    }
  }

  std::cout << (ans == INF ? -1 : ans) << '\n';
}