#include <bits/stdc++.h>
using namespace std;
const int INF = 1000000007;
const int N = 81;
int n, m, p, c[N][N], f[N][2][N];

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n >> p >> m;
    fill(&c[0][0], &c[0][0] + sizeof(c) / sizeof(int), INF);
    fill(&f[0][0][0], &f[0][0][0] + sizeof(f) / sizeof(int), INF);

    for (int i = 0, x, y, dis; i < m; ++i) {
        cin >> x >> y >> dis;
        c[x][y] = min(dis, c[x][y]);
    }
    for (int i = 1; i <= n; ++i)
        f[i][0][1] = f[i][1][1] = 0;

    for (int d = 1; d < n; ++d) {
        for (int k = 2; k <= p; ++k) {
            for (int i = 1, j = i + d; j <= n; ++i, ++j) {
                for (int i2 = i + 1; i2 < j; ++i2) {
                    f[j][0][k] = min({
                        f[j][0][k],
                        f[i2][0][k - 1] + c[i][i2],
                        f[i2][0][k - 1] + c[i][j],
                        f[i2][0][k] + c[i][i2],
                        f[i2][0][k] + c[i][j]
                    });
                    for (int j2 = j - 1; j2 > i; --j2) {
                        f[j][1][k] = min({
                            f[j][1][k],
                            f[j2][1][k - 1] + c[j][j2],
                            f[j2][1][k - 1] + c[j][i],
                            f[j2][1][k] + c[j][j2],
                            f[j2][1][k] + c[j][i]
                        });
                    }
                }
            }
        }
    }

    cout << (*min_element(&f[0][0][p], &f[0][0][p] + n + 1) == INF ? -1 : *min_element(&f[0][0][p], &f[0][0][p] + n + 1)) << endl;
}