#include <algorithm>
#include <cmath>
#include <iostream>
#include <vector>

using ll = long long;
const ll INF = 1e18;

void testcase();

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    testcase();
    return 0;
}

void testcase() {
    int n;
    std::cin >> n;
    std::vector<ll> vec(n);

    ll sum = 0;
    for (int i = 0; i < n; i++) {
        std::cin >> vec[i];
        sum += vec[i];
    }

    std::sort(vec.begin(), vec.end());

    ll count = INF;
    for (ll c = 1; ; c++) {
        ll newcount = 0;
        ll xx = 1;
        for (int i = 0; i < n; i++) {
            newcount += std::abs(xx - vec[i]);
            if (newcount >= count) {
                break;
            }
            xx *= c;
            if (xx > vec[n - 1]) {
                break;
            }
        }
        if (newcount < count) {
            count = newcount;
        } else {
            break;
        }
    }

    ll min_count = std::min({count, sum, (ll)n});
    std::cout << min_count << std::endl;
}