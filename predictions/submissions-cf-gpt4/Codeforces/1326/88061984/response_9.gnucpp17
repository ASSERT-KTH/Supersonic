#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

vector<int> computeLPSArray(string& str)
{
    int M = str.size();
    vector<int> lps(M, 0);
    int len = 0;
    int i = 1;
    while (i < M) {
        if (str[i] == str[len]) {
            len++;
            lps[i] = len;
            i++;
        }
        else {
            if (len != 0) {
                len = lps[len - 1];
            }
            else {
                lps[i] = 0;
                i++;
            }
        }
    }
    return lps;
}

int longestPrefixSuffixPallindrome(string& str)
{
    string rev = str;
    reverse(rev.begin(), rev.end());
    string concat = str + "?" + rev;
    vector<int> lps = computeLPSArray(concat);
    return lps.back();
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    int t;
    cin >> t;
    while (t--) {
        string str;
        cin >> str;
        int ans = longestPrefixSuffixPallindrome(str);
        cout << ans << endl;
    }
}