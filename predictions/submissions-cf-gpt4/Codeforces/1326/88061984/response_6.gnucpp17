#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdint>

using namespace std;
using int64 = int64_t;

int kmp(const string& s) {
  vector<int> lps(s.size(), 0);
  for (size_t i = 1; i < s.size(); i++) {
    int previous_index = lps[i - 1];
    while (previous_index > 0 && s[i] != s[previous_index]) {
      previous_index = lps[previous_index - 1];
    }
    lps[i] = previous_index + (s[i] == s[previous_index] ? 1 : 0);
  }
  return lps.back();
}

int remainingStringLongestPallindrome(string s) {
  string t = s + "?";
  reverse(s.begin(), s.end());
  t += s;
  return kmp(t);
}

string longestPrefixSuffixPallindrome(string s) {
  size_t length = 0;
  for (size_t i = 0, j = s.size() - 1; i < j; i++, j--) {
    if (s[i] != s[j]) {
      break;
    }
    length++;
  }
  string ans = s.substr(0, length);
  string remaining = s.substr(length, s.size() - 2 * length);
  if (!remaining.empty()) {
    int longest_prefix = remainingStringLongestPallindrome(remaining);
    reverse(remaining.begin(), remaining.end());
    int longest_suffix = remainingStringLongestPallindrome(remaining);
    ans += remaining.substr(0, max(longest_prefix, longest_suffix));
  }
  ans += s.substr(s.size() - length, length);
  return ans;
}

int main() {
  int64 t;
  cin >> t;
  while (t--) {
    string str;
    cin >> str;
    cout << longestPrefixSuffixPallindrome(str) << '\n';
  }
  return 0;
}