```cpp
#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;
typedef long long int lli;
typedef int64_t ll64;
#define pb push_back
#define frr(i, a) for (int i = 0; i < a; i++)
#define frl(i, a) for (lli i = 0; i < a; i++)
int kmp(const string &s) {
  int n = s.size();
  vector<int> lps(n, 0);
  for (int i = 1, len = 0; i < n;) {
    if (s[i] == s[len]) {
      lps[i++] = ++len;
    } else {
      if (len) {
        len = lps[len - 1];
      } else {
        lps[i++] = 0;
      }
    }
  }
  return lps.back();
}
int remainingStringLongestPallindrome(const string &s) {
  string t = s;
  t += '?';
  t.insert(t.end(), s.rbegin(), s.rend());
  return kmp(t);
}
string longestPrefixSuffixPallindrome(const string &s) {
  int n = s.size();
  int len = 0;
  for (int i = 0, j = n - 1; i < j; i++, j--) {
    if (s[i] != s[j]) {
      break;
    }
    len++;
  }
  string ans = s.substr(0, len);
  string remaining = s.substr(len, n - 2 * len);
  if (!remaining.empty()) {
    int longest_prefix = remainingStringLongestPallindrome(remaining);
    reverse(remaining.begin(), remaining.end());
    int longest_suffix = remainingStringLongestPallindrome(remaining);
    ans += remaining.substr(0, max(longest_prefix, longest_suffix));
  }
  ans += s.substr(n - len);
  return ans;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  lli t;
  cin >> t;
  while (t--) {
    string str;
    cin >> str;
    cout << longestPrefixSuffixPallindrome(str) << '\n';
  }
}
```