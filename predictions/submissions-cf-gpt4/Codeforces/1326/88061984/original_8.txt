```
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
using ll = long long;

int kmp(const string& s) {
  vector<int> lps(s.size(), 0);
  for (size_t i = 1; i < s.size(); i++) {
    int previous_index = lps[i - 1];
    while (previous_index > 0 && s[i] != s[previous_index])
      previous_index = lps[previous_index - 1];
    lps[i] = previous_index + (s[i] == s[previous_index]);
  }
  return lps.back();
}

int remainingStringLongestPallindrome(const string& s) {
  string t = s + "?";
  reverse(t.begin() + s.size(), t.end());
  return kmp(t);
}

string longestPrefixSuffixPallindrome(const string& s) {
  size_t length = 0;
  size_t n = s.size();
  for (size_t i = 0, j = n - 1; i < j; i++, j--) {
    if (s[i] != s[j]) break;
    length++;
  }
  string ans = s.substr(0, length);
  string remaining = s.substr(length, (n - (2 * length)));
  if (!remaining.empty()) {
    int longest_prefix = remainingStringLongestPallindrome(remaining);
    reverse(remaining.begin(), remaining.end());
    int longest_suffix = remainingStringLongestPallindrome(remaining);
    if (longest_prefix > longest_suffix)
      reverse(remaining.begin(), remaining.end());
    ans += remaining.substr(0, max(longest_prefix, longest_suffix));
  }
  ans += s.substr(n - length, length);
  return ans;
}

int main() {
  ll t;
  cin >> t;
  while (t--) {
    string str;
    cin >> str;
    cout << longestPrefixSuffixPallindrome(str) << endl;
  }
  return 0;
}
```