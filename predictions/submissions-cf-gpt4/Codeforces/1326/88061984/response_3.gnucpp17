#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

std::vector<int> prefix_function(const std::string& s) {
    int n = (int)s.length();
    std::vector<int> pi(n);
    for (int i = 1; i < n; i++) {
        int j = pi[i-1];
        while (j > 0 && s[i] != s[j])
            j = pi[j-1];
        if (s[i] == s[j]) ++j;
        pi[i] = j;
    }
    return pi;
}

std::string solve(const std::string& s) {
    int n = (int)s.length();
    std::string a = s;
    reverse(a.begin(), a.end());
    a = a + "#" + s;
    auto pi = prefix_function(a);
    int mid = pi[(int)pi.size()-1];

    int len = 0;
    for (int i = 0, j = n - 1; i < j; i++, j--)
        if (s[i] == s[j])
            len = i + 1;

    std::string prefix = s.substr(0, len);
    std::string suffix = s.substr(n - len, len);
    std::string middle = s.substr(len, n - 2 * len);
    if ((int)middle.size() < mid) middle = s.substr(len, mid);
    return prefix + middle + suffix;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    int t;
    std::cin >> t;
    while (t--) {
        std::string str;
        std::cin >> str;
        std::string ans = solve(str);
        std::cout << ans << "\n";
    }
    return 0;
}