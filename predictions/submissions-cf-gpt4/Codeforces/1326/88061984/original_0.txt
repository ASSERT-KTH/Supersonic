```cpp
#include <iostream>
#include <vector>
#include <algorithm>
typedef long long lli;

std::vector<int> computeLPSArray(const std::string &str) {
    std::vector<int> lps(str.size(), 0);
    int len = 0;
    int i = 1;
    while (i < str.size()) {
        if (str[i] == str[len]) {
            lps[i++] = ++len;
        } else {
            if (len != 0) {
                len = lps[len - 1];
            } else {
                lps[i++] = 0;
            }
        }
    }
    return lps;
}

std::string longestPrefixSuffixPallindrome(const std::string &str) {
    int n = str.size();
    int len = 0;
    for (int i = 0, j = n - 1; i < j; i++, j--) {
        if (str[i] != str[j]) {
            break;
        }
        len++;
    }
    std::string ans = str.substr(0, len);
    std::string remaining = str.substr(len, n - 2 * len);
    if (!remaining.empty()) {
        std::string temp = remaining + "?" + std::string(remaining.rbegin(), remaining.rend());
        int longest_prefix = computeLPSArray(temp).back();
        temp = std::string(remaining.rbegin(), remaining.rend()) + "?" + remaining;
        int longest_suffix = computeLPSArray(temp).back();
        if (longest_prefix > longest_suffix) {
            ans += remaining.substr(0, longest_prefix);
        } else {
            ans += remaining.substr(remaining.size() - longest_suffix);
        }
    }
    ans += str.substr(n - len, len);
    return ans;
}

int main() {
    lli t;
    std::cin >> t;
    while (t--) {
        std::string str;
        std::cin >> str;
        std::cout << longestPrefixSuffixPallindrome(str) << std::endl;
    }
}
```