```cpp
#include <bits/stdc++.h>
using namespace std;
using pii = pair<int, int>;
const int maxLig = (1e5) + 5;
const int maxCol = 12;
char grille[maxLig][maxCol];
pii go[maxLig][maxCol];
int blocRef[maxLig];
bool compBloc(int bloc, int sqr, int nbLig, int nbCol, int tps, int proc[maxLig][maxCol]) {
  int deb = bloc * sqr, fin = min(nbLig, (bloc + 1) * sqr);
  if (deb > nbLig)
    return false;
  for (int lig = deb + 1; lig <= fin; ++lig) {
    blocRef[lig] = bloc;
    for (int col = 1; col <= nbCol; ++col) {
      if (proc[lig][col] == tps)
        continue;
      proc[lig][col] = tps;
      int nextLig = lig, nextCol = col;
      switch (grille[lig][col]) {
        case '<': --nextCol; break;
        case '>': ++nextCol; break;
        case '^': --nextLig; break;
      }
      go[lig][col] = (nextLig == deb || grille[nextLig][nextCol] == '~') ? make_pair(nextLig, nextCol) : (grille[lig][col] != '^' && grille[lig][nextCol] != '^' && grille[lig][col] != grille[lig][nextCol]) ? make_pair(0, 0) : go[nextLig][nextCol];
    }
  }
  return true;
}
pii getFin(int lig, int col) {
  while (grille[lig][col] != '~') {
    tie(lig, col) = go[lig][col];
  }
  return {lig, col};
}
int main() {
  int nbLig, nbCol, nbReq, tps = 1, sqr = 600, proc[maxLig][maxCol] = {0};
  cin >> nbLig >> nbCol >> nbReq;
  fill_n(&grille[0][0], maxLig * maxCol, '~');
  for (int lig = 1; lig <= nbLig; ++lig)
    for (int col = 1; col <= nbCol; ++col)
      cin >> grille[lig][col];
  for (int bloc = 0; compBloc(bloc, sqr, nbLig, nbCol, tps, proc); ++bloc);
  for (int req = 0; req < nbReq; ++req) {
    char mode;
    cin >> mode;
    int lig, col;
    cin >> lig >> col;
    if (mode == 'A') {
      pii res = getFin(lig, col);
      if (res == pii{0, 0})
        res = {-1, -1};
      cout << res.first << " " << res.second << "\n";
    } else {
      ++tps;
      char nv;
      cin >> nv;
      grille[lig][col] = nv;
      int bloc = blocRef[lig];
      compBloc(bloc, sqr, nbLig, nbCol, tps, proc);
      if (bloc)
        compBloc(bloc - 1, sqr, nbLig, nbCol, tps, proc);
    }
  }
}
```