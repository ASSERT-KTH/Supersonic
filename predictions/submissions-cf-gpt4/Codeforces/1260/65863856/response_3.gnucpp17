#include <algorithm>
#include <vector>
#include <iostream>
using namespace std;
template <typename T> class LazySegmentTree {
  int n;
  vector<T> arr;
  vector<T> lazy;
  void push(int node, int left_node, int right_node) {
    if (lazy[node]) {
      arr[node] += (right_node - left_node) * lazy[node];
      if (right_node - left_node > 1) {
        lazy[2 * node + 1] += lazy[node];
        lazy[2 * node + 2] += lazy[node];
      }
      lazy[node] = 0;
    }
  }
  T query(int node, int left_node, int right_node, int left, int right) {
    push(node, left_node, right_node);
    if (right <= left_node || right_node <= left) {
      return 0;
    }
    if (left <= left_node && right_node <= right) {
      return arr[node];
    }
    int mid = (left_node + right_node) / 2;
    return query(2 * node + 1, left_node, mid, left, right) +
           query(2 * node + 2, mid, right_node, left, right);
  }
  void update(int node, int left_node, int right_node, int left, int right,
              T val) {
    push(node, left_node, right_node);
    if (right <= left_node || right_node <= left) {
      return;
    }
    if (left <= left_node && right_node <= right) {
      lazy[node] += val;
      push(node, left_node, right_node);
      return;
    }
    int mid = (left_node + right_node) / 2;
    update(2 * node + 1, left_node, mid, left, right, val);
    update(2 * node + 2, mid, right_node, left, right, val);
    arr[node] = arr[2 * node + 1] + arr[2 * node + 2];
  }

public:
  LazySegmentTree(int n) {
    this->n = n;
    arr = vector<T>(4 * n);
    lazy = vector<T>(4 * n);
  }
  T range_query(int l, int r) { return query(0, 0, n, l, r); }
  void range_update(int l, int r, T val) { update(0, 0, n, l, r, val); }
};
int m, n, k, t;
int a[200000];
int l[200000];
int r[200000];
int d[200000];
bool is_possible(int mid) {
  LazySegmentTree<int> stree(n + 1);
  int min_agility = a[mid];
  for (int i = 0; i < k; i++) {
    if (d[i] > min_agility) {
      stree.range_update(l[i] - 1, r[i], 1);
    }
  }
  int req_time = n + 1 + 2 * stree.range_query(0, n + 1);
  return req_time <= t;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cin >> m >> n >> k >> t;
  for (int i = 0; i < m; i++) {
    cin >> a[i];
  }
  for (int i = 0; i < k; i++) {
    cin >> l[i] >> r[i] >> d[i];
  }
  sort(a, a + m);
  int left = 0;
  int right = m - 1;
  while (left < right) {
    int mid = (left + right + 1) / 2;
    if (is_possible(mid)) {
      left = mid;
    } else {
      right = mid - 1;
    }
  }
  printf("%d\n", m - left);
}