```cpp
#include <algorithm>
#include <ios>
#include <iostream>
#include <numeric>
#include <vector>

using namespace std;

vector<int> depth, below, score;
vector<vector<int>> adj;

void compute_depth(int u, int p = -1) {
  for (int v : adj[u]) {
    if (v != p) {
      depth[v] = depth[u] + 1;
      compute_depth(v, u);
    }
  }
}

void compute_below(int u, int p = -1) {
  for (int v : adj[u]) {
    if (v != p) {
      compute_below(v, u);
      below[u] += below[v] + 1;
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int n, k;
  cin >> n >> k;
  
  adj.resize(n);
  depth.resize(n);
  below.resize(n);
  score.resize(n);
  
  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    cin >> u >> v;
    --u; --v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  
  compute_depth(0);
  compute_below(0);
  
  transform(depth.begin(), depth.end(), below.begin(), score.begin(), minus<int>());
  
  nth_element(score.begin(), score.begin() + k, score.end(), greater<int>());
  
  cout << accumulate(score.begin(), score.begin() + k, 0ll) << '\n';
}
```