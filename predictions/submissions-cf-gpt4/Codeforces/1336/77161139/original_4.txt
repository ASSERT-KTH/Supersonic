```C++
#include <algorithm>
#include <ios>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;
void compute_depth(int u, int p, vector<vector<int>> &adj, vector<int> &depth) {
  for (const int& v : adj[u]) {
    if (v != p) {
      depth[v] = depth[u] + 1;
      compute_depth(v, u, adj, depth);
    }
  }
}
void compute_below(int u, int p, vector<vector<int>> &adj, vector<int> &below) {
  for (const int& v : adj[u]) {
    if (v != p) {
      compute_below(v, u, adj, below);
      below[u] += below[v] + 1;
    }
  }
}
int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int n, k;
  std::cin >> n >> k;
  vector<vector<int>> adj(n);
  vector<int> u(n-1), v(n-1);
  for (int i = 0; i < n - 1; ++i) {
    std::cin >> u[i] >> v[i];
    --u[i];
    --v[i];
  }
  for (int i = 0; i < n - 1; ++i) {
    adj[u[i]].push_back(v[i]);
    adj[v[i]].push_back(u[i]);
  }
  vector<int> depth(n, 0), below(n, 0);
  compute_depth(0, -1, adj, depth);
  compute_below(0, -1, adj, below);
  for (int i = 0; i < n; ++i) {
    depth[i] -= below[i];
  }
  std::nth_element(depth.begin(), depth.begin() + k, depth.end(), greater<int>());
  cout << accumulate(depth.begin(), depth.begin() + k, 0LL) << '\n';
}
```