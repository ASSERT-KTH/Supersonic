```cpp
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include <iostream>
#include <algorithm>
#define int long long
using namespace std;
const int maxn = 2e3 + 7;
int ul[maxn][maxn];
int ur[maxn][maxn];
int dl[maxn][maxn];
int dr[maxn][maxn];
char kek[maxn][maxn];
void fast_io() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}
void solve() {
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      cin >> kek[i][j];
    }
  }
  for (int i = 1; i < n; i++) {
    for (int j = 1; j < m; j++) {
      if (kek[i][j] == kek[i - 1][j] && kek[i][j] == kek[i][j - 1]) {
        ul[i][j] = min(ul[i - 1][j], ul[i][j - 1]) + 1;
      }
      if (kek[i][j] == kek[i - 1][m - j] && kek[i][j] == kek[i][m - j + 1]) {
        ur[i][m - j] = min(ur[i - 1][m - j], ur[i][m - j + 1]) + 1;
      }
      if (kek[n - i][j] == kek[n - i + 1][j] && kek[n - i][j] == kek[n - i][j - 1]) {
        dl[n - i][j] = min(dl[n - i + 1][j], dl[n - i][j - 1]) + 1;
      }
      if (kek[n - i][m - j] == kek[n - i + 1][m - j] && kek[n - i][m - j] == kek[n - i][m - j + 1]) {
        dr[n - i][m - j] = min(dr[n - i + 1][m - j], dr[n - i][m - j + 1]) + 1;
      }
    }
  }
  int ans = 0;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      ans += min({ul[i][j], ur[i][j], dl[i][j], dr[i][j]}) + 1;
    }
  }
  cout << ans << endl;
}
signed main() {
  fast_io();
  solve();
}
```