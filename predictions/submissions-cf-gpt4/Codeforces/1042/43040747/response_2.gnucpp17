#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
using namespace std;
typedef long long ll;

ll n, t, ans = 0, k = 1;

struct pbdsm {
    vector<pair<ll, ll>> tree;

    void insert(pair<ll, ll> val) {
        tree.push_back(val);
        sort(tree.begin(), tree.end());
    }
    
    size_t order_of_key(pair<ll, ll> val) {
        return lower_bound(tree.begin(), tree.end(), val) - tree.begin();
    }

    size_t size() {
        return tree.size();
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> t;
    vector<ll> v(n + 1);
    v[0] = 0;
    pbdsm A;
    A.insert({0, 0});
    for (ll i = 1; i <= n; ++i) {
        cin >> v[i];
        v[i] += v[i - 1];
        ans += A.size() - A.order_of_key({v[i] - t, 2e6});
        A.insert({v[i], k++});
    }
    cout << ans;
    return 0;
}