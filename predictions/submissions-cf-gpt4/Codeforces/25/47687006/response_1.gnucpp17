#include <bits/stdc++.h>
using namespace std;

vector<int> parent;
vector<pair<int, int>> uselessRoads;
int n, hb;

int find_set(int ii) {
  return ii == parent[ii] ? ii : parent[ii] = find_set(parent[ii]);
}

inline void union_sets(int a, int b) {
  a = find_set(a);
  b = find_set(b);
  if (a != b)
    parent[b] = a;
  else
    uselessRoads.emplace_back(a, b);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  cin >> n;
  parent.resize(n);
  iota(parent.begin(), parent.end(), 0);

  for (int i = 1, rd1, rd2; i < n; ++i) {
    cin >> rd1 >> rd2;
    union_sets(rd1 - 1, rd2 - 1);
  }

  cout << uselessRoads.size() << '\n';
  hb = find(parent.begin(), parent.end(), -1) - parent.begin();

  for (int i = hb; i < n; i++)
    if (parent[i] == i && i != hb)
      cout << uselessRoads.back().first + 1 << ' '
           << uselessRoads.back().second + 1 << ' ' << hb + 1 << ' '
           << i + 1 << '\n', uselessRoads.pop_back();
}