#include <iostream>
#include <vector>

std::vector<int> parent;
std::vector<std::pair<int, int>> uselessRoads;

int find_set(int ii) {
  if (ii != parent[ii])
    parent[ii] = find_set(parent[ii]);
  return parent[ii];
}

void union_sets(int a, int b) {
  a = find_set(a);
  b = find_set(b);
  if (a != b)
    parent[b] = a;
  else
    uselessRoads.emplace_back(a, b);
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  
  int n;
  std::cin >> n;
  parent.resize(n);
  for (int i = 0; i < n; i++)
    parent[i] = i;
    
  for (int i = 1; i < n; i++) {
    int rd1, rd2;
    std::cin >> rd1 >> rd2;
    union_sets(rd1 - 1, rd2 - 1);
  }

  std::cout << uselessRoads.size() << '\n';

  int hb = -1, currURoad = 0;
  for (int i = 0; i < n; i++)
    if (parent[i] == i)
      if (hb == -1)
        hb = i;
      else {
        std::cout << uselessRoads[currURoad].first + 1 << ' '
             << uselessRoads[currURoad].second + 1 << ' ' << hb + 1 << ' '
             << i + 1 << '\n';
        currURoad++;
      }
}