#include <iostream>
#include <vector>
#include <utility>
using namespace std;

vector<int> parent;
vector<pair<int, int>> uselessRoads;
int n, hb, currURoad;

int find_set(int ii) {
    return ii == parent[ii] ? ii : parent[ii] = find_set(parent[ii]);
}

void union_sets(int a, int b) {
    int aa = find_set(a);
    int bb = find_set(b);
    if (aa != bb)
        parent[bb] = aa;
    else
        uselessRoads.emplace_back(a, b);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n;
    parent.resize(n);
    for (int i = 0; i < n; i++)
        parent[i] = i;
    for (int i = 1; i < n; i++) {
        int rd1, rd2;
        cin >> rd1 >> rd2;
        union_sets(rd1 - 1, rd2 - 1);
    }
    cout << uselessRoads.size() << '\n';
    hb = -1;
    for (int i = 0; i < n; i++)
        if (parent[i] == i)
            if (hb == -1)
                hb = i;
            else {
                cout << uselessRoads[currURoad].first + 1 << ' '
                    << uselessRoads[currURoad].second + 1 << ' ' << hb + 1 << ' '
                    << i + 1 << '\n';
                currURoad++;
            }
    return 0;
}