#include <cstdio>
#include <vector>
#include <algorithm>

int parent[200005];
std::pair<int, int> uselessRoads[200005];
int n, hb, currURoad;

int find_set(int ii) {
  return ii == parent[ii] ? ii : (parent[ii] = find_set(parent[ii]));
}

void union_sets(int a, int b) {
  int aa = find_set(a);
  int bb = find_set(b);
  if (aa != bb)
    parent[bb] = aa;
  else
    uselessRoads[currURoad++] = {a, b};
}

int main() {
  scanf("%d", &n);
  for (int i = 0; i < n; i++)
    parent[i] = i;
  for (int i = 1; i < n; i++) {
    int rd1, rd2;
    scanf("%d %d", &rd1, &rd2);
    union_sets(rd1 - 1, rd2 - 1);
  }
  printf("%d\n", currURoad);
  hb = -1;
  for (int i = 0; i < n; i++)
    if (parent[i] == i)
      if (hb == -1)
        hb = i;
      else {
        printf("%d %d %d %d\n",
            uselessRoads[currURoad - 1].first + 1,
            uselessRoads[currURoad - 1].second + 1,
            hb + 1,
            i + 1);
      }
  return 0;
}