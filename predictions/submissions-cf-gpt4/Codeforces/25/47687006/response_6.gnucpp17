#include <iostream>
#include <vector>
#include <utility>
using namespace std;
vector<int> parent;
vector<pair<int, int>> uselessRoads;
int n, hb, currURoad;
int find_set(int ii) {
  if (ii != parent[ii])
    parent[ii] = find_set(parent[ii]);
  return parent[ii];
}
void union_sets(int a, int b) {
  a = find_set(a);
  b = find_set(b);
  if (a != b)
    parent[b] = a;
  else
    uselessRoads.emplace_back(a, b);
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
#ifdef fileIO
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  cin >> n;
  parent.resize(n);
  iota(parent.begin(), parent.end(), 0);
  for (int i = 1; i < n; i++) {
    int rd1, rd2;
    cin >> rd1 >> rd2;
    union_sets(rd1 - 1, rd2 - 1);
  }
  cout << uselessRoads.size() << '\n';
  hb = find_set(0);
  for (int i = 1; i < n; i++)
    if (int root = find_set(i); root != hb) {
      cout << uselessRoads[currURoad].first + 1 << ' '
           << uselessRoads[currURoad].second + 1 << ' ' << hb + 1 << ' '
           << i + 1 << '\n';
      currURoad++;
      hb = root;
    }
}