#include <iostream>
#include <vector>
#include <utility>

std::vector<int> parent;
std::vector<std::pair<int, int>> uselessRoads;

void make_set(int v) {
    parent[v] = v;
}

int find_set(int v) {
    if (v == parent[v])
        return v;
    return parent[v] = find_set(parent[v]);
}

void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b)
        parent[b] = a;
    else
        uselessRoads.emplace_back(a, b);
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);

    int n;
    std::cin >> n;

    parent.resize(n);
    for (int i = 0; i < n; i++)
        make_set(i);

    for (int i = 1; i < n; i++) {
        int a, b;
        std::cin >> a >> b;
        union_sets(a - 1, b - 1);
    }

    std::cout << uselessRoads.size() << '\n';
    
    int firstHead = -1;
    for (int i = 0, currURoad = 0; i < n; i++) {
        if (parent[i] == i) {
            if (firstHead == -1)
                firstHead = i;
            else {
                std::cout << uselessRoads[currURoad].first + 1 << ' '
                     << uselessRoads[currURoad].second + 1 << ' ' << firstHead + 1 << ' '
                     << i + 1 << '\n';
                currURoad++;
            }
        }
    }
    return 0;
}