```c++
#include <vector>
#include <algorithm>
#include <cstdio>
using namespace std;
const int M = 100000 + 10, N = 50 * M;

char gc() {
  char c;
  while((c = getchar()) != '0' && c != '1');
  return c;
}

int n, m, d, nscc, clo, top;
bool open[M][55];
int dfn[N], lowlink[N], idscc[N], stk[N], ops[N], dp[N];
bool instk[N], vis[N];
vector<int> e[N], escc[N];

inline void dn(int &x, int y) { if (y < x) x = y; }
inline int id(int u, int t) { return (u - 1) * d + t; }

void dfscc(int k) {
  dfn[k] = lowlink[k] = ++clo;
  instk[stk[top++] = k] = true;
  for (int p : e[k]) {
    if (!dfn[p]) dfscc(p), dn(lowlink[k], lowlink[p]);
    else if (instk[p]) dn(lowlink[k], dfn[p]);
  }
  if (lowlink[k] == dfn[k]) {
    ++nscc;
    while (stk[--top] != k) {
      instk[stk[top]] = false;
      idscc[stk[top]] = nscc;
    }
    idscc[k] = nscc;
    instk[k] = false;
  }
}

void getSCC(int n) {
  for (int k = 1; k <= n; ++k) if (!dfn[k]) dfscc(k);
  for (int k = 1; k <= n; ++k) for (int p : e[k]) if (idscc[k] != idscc[p]) escc[idscc[k]].push_back(idscc[p]);
}

int dfsdp(int k) {
  if (vis[k]) return dp[k];
  vis[k] = true;
  for (auto p : escc[k]) dp[k] = max(dp[k], dfsdp(p));
  return dp[k] += ops[k];
}

int main() {
  scanf("%d%d%d", &n, &m, &d);
  for (int i = 1, u, v; i <= m; ++i) {
    scanf("%d%d", &u, &v);
    for (int j = 1; j <= d; ++j) e[id(u, j)].push_back(id(v, (j % d) + 1));
  }
  for (int i = 1; i <= n; ++i) for (int j = 1; j <= d; ++j) open[i][j] = gc() - '0';
  getSCC(n * d);
  for (int i = 1; i <= n; ++i) {
    vector<int> tmp;
    for (int j = 1; j <= d; ++j) if (open[i][j]) tmp.push_back(idscc[id(i, j)]);
    sort(tmp.begin(), tmp.end());
    tmp.erase(unique(tmp.begin(), tmp.end()), tmp.end());
    for (int j : tmp) ++ops[j];
  }
  printf("%d", dfsdp(idscc[id(1, 1)]));
  return 0;
}
```