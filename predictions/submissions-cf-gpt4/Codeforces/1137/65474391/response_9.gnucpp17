#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#define fi first
#define se second
using namespace std;
const int MAXN = 200005;
struct node {
  int cnt, par, lev, inp;
  int chn, idx, col, adj;
};
int n, q;
vector<int> g[MAXN];
node a[MAXN];
int bit[2 * MAXN];
int chains = 0, timer = 0, colour = 0;
vector<int> chain[MAXN];
vector<pair<int, int>> col[MAXN];
vector<int> pos[MAXN];
int root[MAXN];
void Init() {
  ios ::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cin >> n >> q;
  for (int i = 1; i < n; ++i) {
    int u, v;
    cin >> u >> v;
    g[u].push_back(v);
    g[v].push_back(u);
  }
  a[n].par = -1;
  a[n].lev = 1;
  a[n].chn = 0;
  a[n].idx = 0;
  root[0] = n;
  colour = n;
}
int query(int x) {
  int res = 0;
  for (int i = x; i >= 1; i -= i & (-i)) {
    res += bit[i];
  }
  return res;
}
void update(int x, int d) {
  for (int i = x; i < 2 * MAXN; i += i & (-i)) {
    bit[i] += d;
  }
}
void DFS(int u) {
  a[u].inp = ++timer;
  a[u].cnt = 1;
  for (int v : g[u]) {
    if (a[v].par == 0) {
      a[v].par = u;
      a[v].lev = a[u].lev + 1;
      DFS(v);
      a[u].cnt += a[v].cnt;
    }
  }
}
void HLD(int u) {
  chain[a[u].chn].push_back(u);
  col[a[u].chn].emplace_back(a[u].idx, a[u].col);
  pos[a[u].chn].push_back(a[u].idx);
  int heavy = 0, which = 0;
  for (int v : g[u]) {
    if (v != a[u].par and a[v].cnt > heavy) {
      heavy = a[v].cnt;
      which = v;
    }
  }
  if (heavy == 0 or which == 0)
    return;
  a[which].chn = a[u].chn;
  a[which].idx = a[u].idx + 1;
  for (int v : g[u]) {
    if (v == a[u].par)
      continue;
    if (v != which) {
      a[v].chn = ++chains;
      a[v].idx = 0;
    }
    HLD(v);
  }
}
int main() {
  Init();
  DFS(n);
  HLD(n);
  for (int i = 0; i < MAXN; ++i) {
    sort(col[i].begin(), col[i].end());
    sort(pos[i].begin(), pos[i].end());
  }
  return 0;
}