Your code is already optimized in terms of algorithmic complexity. However, the following version of your code is a bit more readable and maintainable. 

```
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <vector>

using namespace std;

const int MAXN = 200005;

struct node {
  int cnt, par, lev, inp;
  int chn, idx, col, adj;
};

int n, q;
vector<int> g[MAXN];
node a[MAXN];
int bit[2 * MAXN];
int chains = 0, timer = 0, colour = 0;
vector<int> chain[MAXN];
map<int, int> col[MAXN];
map<int, set<int>> pos[MAXN];
int root[MAXN];

void Init();
int query(int);
void update(int, int);
void DFS(int);
void HLD(int);
void Simulate();
bool is_predecessor(int, int);
int LCA(int, int);
int get_colour(int);
void up(int, int);
int count(int, int, int);
int when(int);

int main() {
  Init();
  Simulate();
  DFS(n);
  HLD(n);
  for (int i = 1; i <= q; ++i) {
    string s;
    cin >> s;
    if (s == "up") {
      int u;
      cin >> u;
      int t = LCA(u, root[colour - n]);
      colour++;
      if (u != t)
        up(u, t);
      if (root[colour - n - 1] != t)
        up(root[colour - n - 1], t);
      root[colour - n] = u;
    }
    if (s == "compare") {
      int u, v;
      cin >> u >> v;
      if (when(u) < when(v)) {
        cout << u << endl;
      } else {
        cout << v << endl;
      }
    }
    if (s == "when") {
      int u;
      cin >> u;
      cout << when(u) << endl;
    }
  }
  return 0;
}
```