#include <iostream>
#include <vector>
using namespace std;

const int MAX_P = 30;

int dp[2][1 << MAX_P];

int rec(vector<int>& A, int p) {
    if (p < 0)
        return 0;
    int n = A.size();
    int mask = (1 << p) - 1;
    vector<int> B, C;
    B.reserve(n);
    C.reserve(n);
    for (int x : A) {
        ((x >> p) & 1 ? B : C).push_back(x & mask);
    }
    if (B.empty())
        return rec(C, p - 1);
    if (C.empty())
        return rec(B, p - 1);
    return min(rec(B, p - 1), rec(C, p - 1)) + (1 << p);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int n;
    cin >> n;
    vector<int> A(n);
    for (int i = 0; i < n; ++i) {
        cin >> A[i];
    }
    cout << rec(A, MAX_P) << '\n';
    return 0;
}