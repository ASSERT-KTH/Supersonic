```
#include <vector>
#include <queue>
#include <cstdio>

const int MAX = 200010;
std::vector<int> graph[MAX];
bool visited[MAX];
int nodeCount, edgeCount;

void bfs(int node) {
  nodeCount = 0, edgeCount = 0;
  std::queue<int> q;
  q.push(node);
  while (!q.empty()) {
    node = q.front();
    q.pop();
    nodeCount++;
    if (graph[node].size() == 2)
      edgeCount++;
    visited[node] = true;
    for (int i = 0; i < graph[node].size(); i++) {
      int nextNode = graph[node][i];
      if (!visited[nextNode]) {
        visited[nextNode] = true;
        q.push(nextNode);
      }
    }
  }
}

int main() {
  int n, m, a, b, c = 0;
  std::scanf("%d %d", &n, &m);
  while (m--) {
    std::scanf("%d %d", &a, &b);
    graph[a].push_back(b);
    graph[b].push_back(a);
  }
  for (int i = 1; i <= n; i++) {
    if (!visited[i]) {
      bfs(i);
      if (nodeCount == edgeCount)
        c++;
    }
  }
  std::printf("%d\n", c);
  return 0;
}
```