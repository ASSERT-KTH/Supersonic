#include <bits/stdc++.h>
using namespace std;

struct SegTree {
  vector<int> sand, sor, lazy;
  int n;
  SegTree(int n_) : n(n_), sand(2 * n_), sor(2 * n_), lazy(2 * n_) {}
  inline void push(int id, int il, int ir) {
    if (lazy[id]) {
      sand[il] |= lazy[id];
      sor[il] |= lazy[id];
      lazy[il] |= lazy[id];
      sand[ir] |= lazy[id];
      sor[ir] |= lazy[id];
      lazy[ir] |= lazy[id];
      lazy[id] = 0;
    }
  }
  void update(int x, int y, int v, int id = 0, int l = 0, int r = -1) {
    if (r == -1) r = n;
    if (x <= l && r <= y) {
      sand[id] |= v;
      sor[id] |= v;
      lazy[id] |= v;
      return;
    }
    if (x >= r || l >= y)
      return;
    push(id, id * 2 + 1, id * 2 + 2);
    int mid = (l + r) >> 1;
    update(x, y, v, id * 2 + 1, l, mid);
    update(x, y, v, id * 2 + 2, mid, r);
    sand[id] = sand[id * 2 + 1] & sand[id * 2 + 2];
    sor[id] = sor[id * 2 + 1] | sor[id * 2 + 2];
  }
  pair<int, int> get(int x, int y, int id = 0, int l = 0, int r = -1) {
    if (r == -1) r = n;
    if (x <= l && r <= y) {
      return {sand[id], sor[id]};
    }
    if (x >= r || l >= y)
      return {(1 << 16) - 1, 0};
    push(id, id * 2 + 1, id * 2 + 2);
    int mid = (l + r) >> 1;
    auto retl = get(x, y, id * 2 + 1, l, mid);
    auto retr = get(x, y, id * 2 + 2, mid, r);
    return {retl.first & retr.first, retl.second | retr.second};
  }
};

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int k, q;
  cin >> k >> q;
  int n = 1 << k, mask = (1 << k) - 1;
  SegTree low(n), hig(n);
  vector<tuple<long long, long long, int>> cons;
  for (int i = 0; i < q; ++i) {
    long long l, r;
    int v;
    cin >> l >> r >> v;
    int la = l & mask, lb = l >> k;
    int ra = r & mask, rb = r >> k;
    low.update(max(la, 0), min(n, ra + 1), v);
    hig.update(max(lb, 0), min(n, rb + 1), v);
    cons.emplace_back(l, r, v);
  }
  auto cek = [&](int la, int ra, int lb, int rb, int v) {
    return ((low.get(la, ra + 1).second & hig.get(lb, rb + 1).second) == v);
  };
  for (auto &c : cons) {
    long long l, r;
    int v;
    tie(l, r, v) = c;
    int la = l & mask, lb = l >> k;
    int ra = r & mask, rb = r >> k;
    if (!cek(la, ra, lb, rb, v)) {
      puts("impossible");
      return 0;
    }
  }
  puts("possible");
  return 0;
}