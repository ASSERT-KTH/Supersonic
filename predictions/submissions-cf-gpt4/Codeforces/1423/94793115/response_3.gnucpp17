#include <bits/stdc++.h>
using namespace std;

struct SegTree {
    int n;
    vector<int> sand, sor, lazy;

    SegTree(int n_) : n(n_), sand(2 * n, 0), sor(2 * n, 0), lazy(2 * n, 0) {}

    inline void upd(int id, int v) {
        sand[id] |= v;
        sor[id] |= v;
        lazy[id] |= v;
    }

    inline void push(int id, int il, int ir) {
        if (lazy[id]) {
            upd(il, lazy[id]);
            upd(ir, lazy[id]);
            lazy[id] = 0;
        }
    }

    void update(int x, int y, int v, int id = 0, int l = 0, int r = -1) {
        if(r < 0) r = n;

        if (x <= l && r <= y) {
            upd(id, v);
            return;
        }
        if (x >= r || l >= y)
            return;

        int mid = (l + r) >> 1, il = id + 1, ir = id + 2 * (mid - l);
        push(id, il, ir);
        update(x, y, v, il, l, mid);
        update(x, y, v, ir, mid, r);
        sand[id] = sand[il] & sand[ir];
        sor[id] = sor[il] | sor[ir];
    }

    pair<int, int> get(int x, int y, int id = 0, int l = 0, int r = -1) {
        if(r < 0) r = n;

        if (x <= l && r <= y) {
            return {sand[id], sor[id]};
        }
        if (x >= r || l >= y)
            return {(1 << 16) - 1, 0};

        int mid = (l + r) >> 1, il = id + 1, ir = id + 2 * (mid - l);
        push(id, il, ir);
        auto retl = get(x, y, il, l, mid);
        auto retr = get(x, y, ir, mid, r);
        return {retl.first & retr.first, retl.second | retr.second};
    }
};

int main() {
    ios::sync_with_stdio(false); cin.tie(0);

    int k, q;
    cin >> k >> q;
    int n = 1 << k, mask = (1 << k) - 1;
    SegTree low(n), hig(n);
    vector<tuple<long long, long long, int>> cons;
    for (int i = 0; i < q; ++i) {
        long long l, r;
        int v;
        cin >> l >> r >> v;
        int la = l & mask, lb = (l >> k) & mask;
        int ra = r & mask, rb = (r >> k) & mask;
        if (lb + 1 < rb) {
            low.update(0, n, v);
        } else if (lb < rb) {
            low.update(la, n, v);
            low.update(0, ra + 1, v);
        } else {
            low.update(la, ra + 1, v);
        }
        hig.update(lb, rb + 1, v);
        cons.emplace_back(l, r, v);
    }

    auto check = [&](int la, int ra, int lb, int rb, int v) {
        auto resh = hig.get(lb, rb + 1);
        auto resl = low.get(la, ra + 1);
        return (resl.second & resh.second) == v;
    };

    for (const auto &c : cons) {
        long long l, r;
        int v;
        tie(l, r, v) = c;
        int la = l & mask, lb = (l >> k) & mask;
        int ra = r & mask, rb = (r >> k) & mask;
        if (!check(la, lb == rb ? ra : n - 1, lb, lb, v) ||
            !check(0, lb == rb ? 0 : ra, rb, rb, v) ||
            (lb + 1 < rb && !check(0, n - 1, lb + 1, rb - 1, v))) {
            cout << "impossible\n";
            return 0;
        }
    }

    cout << "possible\n";
    return 0;
}