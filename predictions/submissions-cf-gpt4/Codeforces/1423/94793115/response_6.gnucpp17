#include <bits/stdc++.h>
using namespace std;

struct SegTree {
    vector<int> sand, sor, lazy;
    int n;
    SegTree(int n_) {
        n = n_;
        sand.resize(n << 1);
        sor.resize(n << 1);
        lazy.resize(n << 1);
    }

    inline void upd(int id, int v) {
        sand[id] |= v;
        sor[id] |= v;
        lazy[id] |= v;
    }

    inline void push(int id, int il, int ir) {
        if (!lazy[id]) return;
        upd(il, lazy[id]);
        upd(ir, lazy[id]);
        lazy[id] = 0;
    }

    void update(int x, int y, int v, int id = 0, int l = 0) {
        int r = n;
        if (x <= l && r <= y) {
            upd(id, v);
            return;
        }
        if (x >= r || l >= y) return;
        int mid = (l + r) >> 1, il = id + 1, ir = id + ((mid - l) << 1);
        push(id, il, ir);
        update(x, y, v, il, l, mid);
        update(x, y, v, ir, mid, r);
        sand[id] = sand[il] & sand[ir];
        sor[id] = sor[il] | sor[ir];
    }

    pair<int, int> get(int x, int y, int id = 0, int l = 0) {
        int r = n;
        if (x <= l && r <= y) return {sand[id], sor[id]};
        if (x >= r || l >= y) return {(1 << 16) - 1, 0};
        int mid = (l + r) >> 1, il = id + 1, ir = id + ((mid - l) << 1);
        push(id, il, ir);
        auto retl = get(x, y, il, l, mid), retr = get(x, y, ir, mid, r);
        return {retl.first & retr.first, retl.second | retr.second};
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int k, q;
    cin >> k >> q;
    int n = 1 << k, mask = (1 << k) - 1;
    SegTree low(n), hig(n);
    vector<tuple<long long, long long, int>> cons;

    for (int i = 0; i < q; ++i) {
        long long l, r;
        int v;
        cin >> l >> r >> v;
        int la = l & mask, lb = (l >> k) & mask, ra = r & mask, rb = (r >> k) & mask;
        if (lb + 1 < rb) low.update(0, n, v); 
        else if (lb < rb) low.update(la, n, v), low.update(0, ra + 1, v);
        else low.update(la, ra + 1, v);
        hig.update(lb, rb + 1, v);
        cons.emplace_back(l, r, v);
    }

    auto cek = [&](int la, int ra, int lb, int rb, int v) {
        return (low.get(la, ra + 1).second & hig.get(lb, rb + 1).second) == v;
    };

    bool ok = true;
    for (auto &c : cons) {
        long long l, r;
        int v;
        tie(l, r, v) = c;
        int la = l & mask, lb = (l >> k) & mask, ra = r & mask, rb = (r >> k) & mask;
        if (lb == rb) ok &= cek(la, ra, lb, rb, v);
        else ok &= cek(la, n - 1, lb, lb, v) & cek(0, ra, rb, rb, v) & cek(0, n - 1, lb + 1, rb - 1, v);
        if (!ok) break;
    }

    cout << (ok ? "possible\n" : "impossible\n");
    return 0;
}