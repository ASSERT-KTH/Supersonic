#include <bits/stdc++.h>
using namespace std;

struct SegTree {
  vector<int> s_and, s_or, lazy;
  int n;

  SegTree(int n_) {
    n = n_;
    s_and.assign(n * 2, 0);
    s_or.assign(n * 2, 0);
    lazy.assign(n * 2, 0);
  }

  inline void upd(int id, int v) {
    s_and[id] |= v;
    s_or[id] |= v;
    lazy[id] |= v;
  }

  inline void push(int id, int il, int ir) {
    if (!lazy[id])
      return;
    upd(il, lazy[id]);
    upd(ir, lazy[id]);
    lazy[id] = 0;
  }

  void update(int x, int y, int v, int id, int l, int r) {
    if (x <= l && r <= y) {
      upd(id, v);
      return;
    }
    if (x >= r || l >= y)
      return;
    int mid = (l + r) >> 1, il = id << 1, ir = (id << 1) + 1;
    push(id, il, ir);
    update(x, y, v, il, l, mid);
    update(x, y, v, ir, mid, r);
    s_and[id] = s_and[il] & s_and[ir];
    s_or[id] = s_or[il] | s_or[ir];
  }

  void update(int x, int y, int v) { update(x, y, v, 1, 0, n); }

  pair<int, int> get(int x, int y, int id, int l, int r) {
    if (x <= l && r <= y)
      return {s_and[id], s_or[id]};
    if (x >= r || l >= y)
      return {(1 << 16) - 1, 0};
    int mid = (l + r) >> 1, il = id << 1, ir = (id << 1) + 1;
    push(id, il, ir);
    auto retl = get(x, y, il, l, mid);
    auto retr = get(x, y, ir, mid, r);
    return {retl.first & retr.first, retl.second | retr.second};
  }

  pair<int, int> get(int x, int y) { return get(x, y, 1, 0, n); }

  void print(int id, int l, int r) {
    if (r - l < 2) {
      printf("%d\n", s_and[id]);
      return;
    }
    int mid = (l + r) >> 1, il = id << 1, ir = (id << 1) + 1;
    push(id, il, ir);
    print(il, l, mid);
    print(ir, mid, r);
  }

  void print() { print(1, 0, n); }
};

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);

  int k, q;
  cin >> k >> q;
  int n = 1 << k, mask = (1 << k) - 1;
  SegTree low(n), hig(n);
  vector<tuple<long long, long long, int>> cons;

  for (int i = 0; i < q; ++i) {
    long long l, r;
    int v;
    cin >> l >> r >> v;
    int la = l & mask, lb = (l >> k) & mask;
    int ra = r & mask, rb = (r >> k) & mask;

    if (lb + 1 < rb)
      low.update(0, n, v);
    else if (lb < rb) {
      low.update(la, n, v);
      low.update(0, ra + 1, v);
    } else
      low.update(la, ra + 1, v);

    hig.update(lb, rb + 1, v);
    cons.emplace_back(l, r, v);
  }

  bool ok = true;
  for (auto &c : cons) {
    long long l, r;
    int v;
    tie(l, r, v) = c;
    int la = l & mask, lb = (l >> k) & mask;
    int ra = r & mask, rb = (r >> k) & mask;
    if (lb == rb) {
      ok = (low.get(la, ra).second & hig.get(lb, rb + 1).second) == v;
    } else {
      ok = (low.get(la, n - 1).second & hig.get(lb, lb + 1).second) == v;
      ok &= (low.get(0, ra + 1).second & hig.get(rb, rb + 1).second) == v;
      if (lb + 1 < rb) {
        ok &= (low.get(0, n - 1).second & hig.get(lb + 1, rb - 1 + 1).second) == v;
      }
    }
    if (!ok)
      break;
  }

  if (!ok)
    cout << "impossible\n";
  else {
    cout << "possible\n";
    low.print();
    hig.print();
  }

  return 0;
}