```cpp
#include <algorithm>
#include <iostream>
#include <vector>

struct Point {
    int x, y;
    Point() : x(0), y(0) {}
    Point(int x, int y) : x(x), y(y) {}
};

inline long long cross(const Point &a, const Point &b, const Point &c) {
    return (long long)(a.x - c.x) * (b.y - c.y) - (long long)(a.y - c.y) * (b.x - c.x);
}

struct Kierunek {
    Point wek;
    int p, q;
};

int main() {
    std::ios_base::sync_with_stdio(false); 
    int n;
    long long S;
    std::cin >> n >> S;
    S *= 2;
    std::vector<Point> tab(n + 1);
    std::vector<int> poz(n + 1);
    std::vector<Point> stab(n + 1);

    for (int i = 1; i <= n; ++i)
        std::cin >> tab[i].x >> tab[i].y;

    std::iota(poz.begin(), poz.end(), 0);
    stab = tab;
    std::sort(stab.begin() + 1, stab.end(), [](const Point &a, const Point &b) { return a.x < b.x || (a.x == b.x && a.y > b.y); });

    std::vector<Kierunek> kol(n * (n - 1) / 2);
    for (int i = 1; i <= n; ++i)
        for (int j = i + 1; j <= n; ++j)
            kol.push_back({{tab[j].y - tab[i].y, tab[i].x - tab[j].x}, i, j});

    std::sort(kol.begin(), kol.end(), [](const Kierunek &a, const Kierunek &b) { return a.wek.y * b.wek.x < b.wek.y * a.wek.x; });

    for (auto &u : kol) {
        std::swap(stab[poz[u.p]], stab[poz[u.q]]);
        std::swap(poz[u.p], poz[u.q]);

        auto it = std::lower_bound(stab.begin() + 1, stab.end(), Point{u.wek.y, -u.wek.x}, [&](const Point &a, const Point &b) { return cross(tab[u.q], a, tab[u.p]) < S; });

        if (it != stab.end() && cross(tab[u.q], *it, tab[u.p]) == S) {
            std::cout << "Yes\n" << tab[u.p].x << ' ' << tab[u.p].y << '\n' << tab[u.q].x << ' ' << tab[u.q].y << '\n' << it->x << ' ' << it->y << '\n';
            return 0;
        }
    }

    std::cout << "No\n";
    return 0;
}
```