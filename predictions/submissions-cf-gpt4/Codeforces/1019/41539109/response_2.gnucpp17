#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct POINT {
  int x, y;
  POINT(int x = 0, int y = 0) : x(x), y(y) {}
};

inline long long cross(const POINT &a, const POINT &b, const POINT &c) {
  return (long long)(a.x - c.x) * (b.y - c.y) - (long long)(a.y - c.y) * (b.x - c.x);
}

const int N = 2000;
int n;
long long S;
POINT tab[N + 7];
int poz[N + 7];
POINT stab[N + 7];

struct kierunek {
  POINT wek;
  int p, q;
};

int main() {
  ios_base::sync_with_stdio(0);
  cin >> n >> S;
  S *= 2;
  for (int i = 1; i <= n; ++i)
    cin >> tab[i].x >> tab[i].y;

  sort(tab + 1, tab + n + 1, [](const POINT &a, const POINT &b) -> bool {
    return a.x == b.x ? a.y > b.y : a.x < b.x;
  });

  for (int i = 1; i <= n; ++i) {
    poz[i] = i;
    stab[i] = tab[i];
  }

  vector<kierunek> kol;
  kol.reserve((n * (n - 1)) / 2);
  for (int i = 1; i <= n; ++i) {
    for (int j = i + 1; j <= n; ++j) {
      kol.push_back({POINT(tab[j].y - tab[i].y, tab[i].x - tab[j].x), i, j});
    }
  }

  sort(kol.begin(), kol.end(),
       [](const kierunek &a, const kierunek &b) -> bool {
         return a.wek.y * b.wek.x < b.wek.y * a.wek.x;
       });

  for (kierunek u : kol) {
    int p = u.p;
    int q = u.q;
    swap(stab[poz[p]], stab[poz[q]]);
    swap(poz[p], poz[q]);
    int l = 1;
    int r = n;
    while (l <= r) {
      int s = (l + r) / 2;
      long long ww = cross(tab[q], stab[s], tab[p]);
      if (ww == S) {
        cout << "Yes\n";
        cout << tab[p].x << ' ' << tab[p].y << '\n';
        cout << tab[q].x << ' ' << tab[q].y << '\n';
        cout << stab[s].x << ' ' << stab[s].y << '\n';
        return 0;
      }
      if (ww > S)
        r = s - 1;
      else
        l = s + 1;
    }
  }
  cout << "No\n";
  return 0;
}