#include <bits/stdc++.h>
using namespace std;
#pragma GCC optimize("O3")
struct POINT {
  int x, y;
  POINT() : x(0), y(0) {}
  POINT(int x, int y) : x(x), y(y) {}
  POINT operator+(const POINT &t) const { return POINT(x + t.x, y + t.y); }
  POINT operator-(const POINT &t) const { return POINT(x - t.x, y - t.y); }
  POINT operator!() const { return POINT(-y, x); }
};
inline long long cross(const POINT &a, const POINT &b, const POINT &c) {
  return ((long long)a.x * b.y - (long long)a.y * b.x) - ((long long)c.x * (a.y - b.y));
}
inline bool halfPlane(const POINT &p) {
  return p.y ? p.y < 0 : p.x < 0;
}
inline bool angSortCmp(const POINT &a, const POINT &b) {
  return halfPlane(a) != halfPlane(b) ? halfPlane(a) < halfPlane(b) : cross(a, b, POINT(0, 0)) > 0;
}
struct kierunek {
  POINT wek;
  int p, q;
};
int main() {
  ios_base::sync_with_stdio(0);
  int n;
  long long S;
  cin >> n >> S;
  S <<= 1;
  vector<POINT> tab(n + 1), stab(n + 1);
  vector<int> poz(n + 1);
  for (int i = 1; i <= n; ++i) {
    cin >> tab[i].x >> tab[i].y;
    poz[i] = i;
    stab[i] = tab[i];
  }
  sort(tab.begin() + 1, tab.end(), [](const POINT &a, const POINT &b) -> bool {
    return a.x != b.x ? a.x < b.x : a.y > b.y;
  });
  vector<kierunek> kol(n * (n - 1) / 2);
  for (int i = 1, it = 0; i <= n; ++i) {
    for (int j = i + 1; j <= n; ++j) {
      kol[it++] = {!(tab[j] - tab[i]), i, j};
    }
  }
  sort(kol.begin(), kol.end(),
       [](const kierunek &a, const kierunek &b) -> bool {
         return angSortCmp(a.wek, b.wek);
       });
  for (kierunek u : kol) {
    int p = u.p;
    int q = u.q;
    swap(stab[poz[p]], stab[poz[q]]);
    swap(poz[p], poz[q]);
    for(auto r : {S, -S}) {
      int l = 1, s;
      while (l <= n) {
        s = (l + n) / 2;
        long long ww = cross(tab[q], stab[s], tab[p]);
        if (ww == r) {
          cout << "Yes\n" << tab[p].x << ' ' << tab[p].y << "\n" << tab[q].x << ' ' << tab[q].y << "\n" << stab[s].x << ' ' << stab[s].y << "\n";
          return 0;
        }
        ww > r ? n = s - 1 : l = s + 1;
      }
    }
  }
  cout << "No\n";
  return 0;
}