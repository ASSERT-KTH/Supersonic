#include <bits/stdc++.h>
using namespace std;
constexpr int N = 2000;

struct POINT {
  int x, y;
  POINT() : x(0), y(0) {}
  explicit POINT(int x, int y) : x(x), y(y) {}
  POINT operator+(const POINT &t) const { return POINT(x + t.x, y + t.y); }
  POINT operator-(const POINT &t) const { return POINT(x - t.x, y - t.y); }
  POINT operator!() const { return POINT(-y, x); }
};
inline long long dot(const POINT &a, const POINT &b) { return static_cast<long long>(a.x) * b.x + static_cast<long long>(a.y) * b.y; }
inline long long cross(const POINT &a, const POINT &b) { return static_cast<long long>(a.x) * b.y - static_cast<long long>(a.y) * b.x; }
inline long long cross(const POINT &a, const POINT &b, const POINT &c) { return cross(a - c, b - c); }
struct kierunek { POINT wek; int p, q; };

inline bool halfPlane(const POINT &p) { return p.y == 0 ? p.x < 0 : p.y < 0; }
inline bool angSortCmp(const POINT &a, const POINT &b) { return halfPlane(a) != halfPlane(b) ? halfPlane(a) < halfPlane(b) : cross(a, b) > 0; }

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int n;
  long long S;
  cin >> n >> S;
  S <<= 1;
  
  POINT tab[N + 7];
  int poz[N + 7];
  POINT stab[N + 7];
  
  for (int i = 1; i <= n; ++i)
    cin >> tab[i].x >> tab[i].y;

  sort(tab + 1, tab + n + 1, [](const POINT &a, const POINT &b) { return a.x == b.x ? a.y > b.y : a.x < b.x; });

  for (int i = 1; i <= n; ++i) {
    poz[i] = i;
    stab[i] = tab[i];
  }

  vector<kierunek> kol((n * (n - 1)) / 2);
  int it = 0;
  for (int i = 1; i <= n; ++i) {
    for (int j = i + 1; j <= n; ++j) {
      kol[it++] = {!(tab[j] - tab[i]), i, j};
    }
  }

  sort(kol.begin(), kol.end(), [](const kierunek &a, const kierunek &b) { return angSortCmp(a.wek, b.wek); });

  for (const auto& u : kol) {
    swap(stab[poz[u.p]], stab[poz[u.q]]);
    swap(poz[u.p], poz[u.q]);
    
    for(int k = 0; k < 2; ++k) {
      int l = 1, r = n;
      while (l <= r) {
        int s = (l + r) >> 1;
        long long ww = cross(tab[u.q], stab[s], tab[u.p]);
        if (ww == (k == 0 ? S : -S)) {
          cout << "Yes\n" << tab[u.p].x << ' ' << tab[u.p].y << '\n' << tab[u.q].x << ' ' << tab[u.q].y << '\n' << stab[s].x << ' ' << stab[s].y << '\n';
          return 0;
        }
        (ww > (k == 0 ? S : -S)) ? r = s - 1 : l = s + 1;
      }
    }
  }
  cout << "No\n";
  return 0;
}