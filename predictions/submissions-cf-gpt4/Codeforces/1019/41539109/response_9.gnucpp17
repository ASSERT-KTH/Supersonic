#include <algorithm>
#include <iostream>
#include <vector>

struct POINT {
    int x, y;
    POINT() : x(0), y(0) {}
    POINT(int x, int y) : x(x), y(y) {}
    POINT operator+(const POINT &t) const { return POINT(x + t.x, y + t.y); }
    POINT operator-(const POINT &t) const { return POINT(x - t.x, y - t.y); }
    POINT operator!() const { return POINT(-y, x); }
};

inline long long dot(const POINT &a, const POINT &b) {
    return static_cast<long long>(a.x) * b.x + static_cast<long long>(a.y) * b.y;
}

inline long long cross(const POINT &a, const POINT &b) {
    return static_cast<long long>(a.x) * b.y - static_cast<long long>(a.y) * b.x;
}

inline bool halfPlane(const POINT &p) {
    return p.y == 0 ? p.x < 0 : p.y < 0;
}

inline bool angSortCmp(const POINT &a, const POINT &b) {
    bool ha = halfPlane(a);
    bool hb = halfPlane(b);
    return ha != hb ? ha < hb : cross(a, b) > 0;
}

struct kierunek {
    POINT wek;
    int p, q;
};

int main() {
    constexpr int N = 2000;
    int n;
    long long S;
    POINT tab[N + 7];
    int poz[N + 7];
    POINT stab[N + 7];
    std::cin >> n >> S;
    S *= 2;
    for (int i = 1; i <= n; ++i)
        std::cin >> tab[i].x >> tab[i].y;

    std::sort(tab + 1, tab + n + 1, [](const POINT &a, const POINT &b) {
        return a.x != b.x ? a.x < b.x : a.y > b.y;
    });

    std::vector<kierunek> kol(n * (n - 1) / 2);
    for (int i = 1; i <= n; ++i) {
        poz[i] = i;
        stab[i] = tab[i];
        for (int j = i + 1; j <= n; ++j) {
            kol[i].wek = !(tab[j] - tab[i]);
            kol[i].p = i;
            kol[i].q = j;
        }
    }

    std::sort(kol.begin(), kol.end(), [](const kierunek &a, const kierunek &b) {
        return angSortCmp(a.wek, b.wek);
    });

    for (const auto &u : kol) {
        int p = u.p;
        int q = u.q;
        std::swap(stab[poz[p]], stab[poz[q]]);
        std::swap(poz[p], poz[q]);
        for (int s = 0; s <= n; ++s) {
            long long ww = cross(tab[q], stab[s], tab[p]);
            if (ww == S || ww == -S) {
                std::cout << "Yes\n" << tab[p].x << ' ' << tab[p].y << "\n" << tab[q].x << ' ' << tab[q].y << "\n" << stab[s].x << ' ' << stab[s].y << std::endl;
                return 0;
            }
        }
    }
    std::cout << "No" << std::endl;
    return 0;
}