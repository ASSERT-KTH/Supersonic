```c++
#include <bits/stdc++.h>
using namespace std;

struct POINT {
  int x, y;
  POINT(int x = 0, int y = 0) : x(x), y(y) {}
  POINT operator+(const POINT &t) const { return POINT(x + t.x, y + t.y); }
  POINT operator-(const POINT &t) const { return POINT(x - t.x, y - t.y); }
  friend inline long long cross(const POINT &a, const POINT &b) {
    return (long long)a.x * b.y - (long long)a.y * b.x;
  }
  friend inline bool angSortCmp(const POINT &a, const POINT &b) {
    bool ha = a.y == 0 ? a.x < 0 : a.y < 0;
    bool hb = b.y == 0 ? b.x < 0 : b.y < 0;
    return ha == hb ? cross(a, b) > 0 : ha < hb;
  }
};

const int N = 2000;
int n;
long long S;
POINT tab[N + 1], stab[N + 1];
int poz[N + 1];

struct kierunek {
  POINT wek;
  int p, q;
};

int main() {
  ios_base::sync_with_stdio(0);
  cin >> n >> S;
  S *= 2;
  for (int i = 1; i <= n; ++i)
    cin >> tab[i].x >> tab[i].y;
  sort(tab + 1, tab + n + 1, [](const POINT &a, const POINT &b) -> bool {
    return a.x == b.x ? a.y > b.y : a.x < b.x;
  });
  iota(poz + 1, poz + n + 1, 1);
  copy(tab + 1, tab + n + 1, stab + 1);
  vector<kierunek> kol((n * (n - 1)) / 2);
  for (int i = 1, it = 0; i <= n; ++i)
    for (int j = i + 1; j <= n; ++j) {
      kol[it++] = {!(tab[j] - tab[i]), i, j};
    }
  sort(kol.begin(), kol.end(), [](const kierunek &a, const kierunek &b) -> bool {
    return angSortCmp(a.wek, b.wek);
  });
  for (kierunek u : kol) {
    swap(stab[poz[u.p]], stab[poz[u.q]]);
    swap(poz[u.p], poz[u.q]);
    auto s_it = lower_bound(stab + 1, stab + n + 1, POINT(S, S),
                            [&](const POINT &a, const POINT &b) {
                              return cross(tab[u.q], a, tab[u.p]) < b.x;
                            });
    if (s_it != stab + n + 1 && cross(tab[u.q], *s_it, tab[u.p]) == S) {
      cout << "Yes\n"
           << tab[u.p].x << ' ' << tab[u.p].y << '\n'
           << tab[u.q].x << ' ' << tab[u.q].y << '\n'
           << s_it->x << ' ' << s_it->y << '\n';
      return 0;
    }
  }
  cout << "No\n";
  return 0;
}
```