```cpp
#include <iostream>
#include <vector>
#include <algorithm>

#pragma GCC optimize("O3")

struct POINT {
  int x, y;
  POINT(int x=0, int y=0) : x(x), y(y) {}

  POINT operator+(const POINT &t) const { return POINT(x + t.x, y + t.y); }
  POINT operator-(const POINT &t) const { return POINT(x - t.x, y - t.y); }
  POINT operator!() const { return POINT(-y, x); }
};

inline long long cross(const POINT &a, const POINT &b) {
  return static_cast<long long>(a.x) * b.y - static_cast<long long>(a.y) * b.x;
}

inline long long cross(const POINT &a, const POINT &b, const POINT &c) {
  return cross(a - c, b - c);
}

struct kierunek {
  POINT wek;
  int p, q;
};

const int N = 2000;
int n;
long long S;
POINT tab[N + 7];
int poz[N + 7];
POINT stab[N + 7];

bool angSortCmp(const kierunek &a, const kierunek &b) {
  bool ha = a.wek.y == 0 ? a.wek.x < 0 : a.wek.y < 0;
  bool hb = b.wek.y == 0 ? b.wek.x < 0 : b.wek.y < 0;
  return ha != hb ? ha < hb : cross(a.wek, b.wek) > 0;
}

int main() {
  std::ios_base::sync_with_stdio(0);
  std::cin >> n >> S;
  S *= 2;

  for (int i = 1; i <= n; ++i) {
    std::cin >> tab[i].x >> tab[i].y;
    poz[i] = i;
    stab[i] = tab[i];
  }

  std::sort(tab + 1, tab + n + 1, [](const POINT &a, const POINT &b) {
    return a.x == b.x ? a.y > b.y : a.x < b.x;
  });

  std::vector<kierunek> kol(n * (n - 1) / 2);

  int it = 0;
  for (int i = 1; i <= n; ++i) {
    for (int j = i + 1; j <= n; ++j) {
      kol[it++] = { !(tab[j] - tab[i]), i, j };
    }
  }

  std::sort(kol.begin(), kol.end(), angSortCmp);

  for (kierunek u : kol) {
    std::swap(stab[poz[u.p]], stab[poz[u.q]]);
    std::swap(poz[u.p], poz[u.q]);
    int l = 1, r = n;
    while (l <= r) {
      int s = (l + r) / 2;
      long long ww = cross(tab[u.q], stab[s], tab[u.p]);
      if (std::abs(ww) == S) {
        std::cout << "Yes" << std::endl;
        std::cout << tab[u.p].x << ' ' << tab[u.p].y << std::endl;
        std::cout << tab[u.q].x << ' ' << tab[u.q].y << std::endl;
        std::cout << stab[s].x << ' ' << stab[s].y << std::endl;
        return 0;
      }
      if (ww > ww < 0 ? -S : S)
        r = s - 1;
      else
        l = s + 1;
    }
  }

  std::cout << "No" << std::endl;
  return 0;
}
```