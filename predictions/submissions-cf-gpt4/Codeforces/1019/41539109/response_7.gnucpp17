#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

struct POINT {
    int x, y;
};

constexpr int N = 2000;
POINT tab[N + 7];
int poz[N + 7];
POINT stab[N + 7];

struct kierunek {
    POINT wek;
    int p, q;
};

inline long long cross(const POINT& a, const POINT& b) {
    return static_cast<long long>(a.x) * b.y - static_cast<long long>(a.y) * b.x;
}

inline long long cross(const POINT& a, const POINT& b, const POINT& c) {
    return cross(a - c, b - c);
}

inline bool angSortCmp(const kierunek& a, const kierunek& b) {
    return cross(a.wek, b.wek) > 0;
}

int main() {
    ios_base::sync_with_stdio(0);
    int n;
    long long S;
    cin >> n >> S;
    S *= 2;
    for (int i = 1; i <= n; ++i)
        cin >> tab[i].x >> tab[i].y;
    sort(tab + 1, tab + n + 1, [](const POINT& a, const POINT& b) -> bool {
        return a.x < b.x || (a.x == b.x && a.y > b.y);
    });
    for (int i = 1; i <= n; ++i) {
        poz[i] = i;
        stab[i] = tab[i];
    }
    vector<kierunek> kol(n * (n - 1) / 2);
    for (int i = 1; i <= n; ++i) {
        for (int j = i + 1; j <= n; ++j) {
            kol[(i-1)*n+j-i-1] = {{tab[j].y - tab[i].y, tab[i].x - tab[j].x}, i, j};
        }
    }
    sort(kol.begin(), kol.end(), angSortCmp);
    for (auto& u : kol) {
        swap(stab[poz[u.p]], stab[poz[u.q]]);
        swap(poz[u.p], poz[u.q]);
        int l = 1;
        int r = n;
        while (l <= r) {
            int s = (l + r) / 2;
            long long ww = cross(tab[u.q], stab[s], tab[u.p]);
            if (ww == S || ww == -S) {
                cout << "Yes\n";
                cout << tab[u.p].x << ' ' << tab[u.p].y << '\n';
                cout << tab[u.q].x << ' ' << tab[u.q].y << '\n';
                cout << stab[s].x << ' ' << stab[s].y << '\n';
                return 0;
            }
            (ww > S || ww > -S) ? r = s - 1 : l = s + 1;
        }
    }
    cout << "No\n";
    return 0;
}