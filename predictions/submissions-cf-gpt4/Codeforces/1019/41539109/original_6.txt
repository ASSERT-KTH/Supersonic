```cpp
#include <algorithm>
#include <iostream>
#include <vector>
#define N 2000

struct POINT {
  int x, y;
  POINT(int x = 0, int y = 0) : x(x), y(y) {}
  POINT operator+(const POINT &t) const { return POINT(x + t.x, y + t.y); }
  POINT operator-(const POINT &t) const { return POINT(x - t.x, y - t.y); }
};

struct kierunek {
  POINT wek;
  int p, q;
};

long long cross(const POINT &a, const POINT &b) {
  return static_cast<long long>(a.x) * b.y - static_cast<long long>(a.y) * b.x;
}

long long cross(const POINT &a, const POINT &b, const POINT &c) {
  return cross(a - c, b - c);
}

bool angSortCmp(const kierunek &a, const kierunek &b) {
  return cross(a.wek, b.wek) > 0;
}

POINT tab[N + 1];
int poz[N + 1];
POINT stab[N + 1];

int main() {
  std::ios_base::sync_with_stdio(0);
  int n;
  long long S;
  std::cin >> n >> S;
  S *= 2;
  for (int i = 1; i <= n; ++i)
    std::cin >> tab[i].x >> tab[i].y;
  std::iota(poz+1, poz+n+1, 1);
  std::copy(tab+1, tab+n+1, stab+1);
  std::sort(tab + 1, tab + n + 1, [](const POINT &a, const POINT &b) {
    return a.x == b.x ? a.y > b.y : a.x < b.x;
  });
  std::vector<kierunek> kol((n * (n - 1)) / 2);
  for (int i = 1, it = 0; i <= n; ++i) {
    for (int j = i + 1; j <= n; ++j, ++it) {
      kol[it].wek = POINT(-(tab[j].y - tab[i].y), tab[j].x - tab[i].x);
      kol[it].p = i;
      kol[it].q = j;
    }
  }
  std::sort(kol.begin(), kol.end(), angSortCmp);
  for (const auto &u : kol) {
    swap(stab[poz[u.p]], stab[poz[u.q]]);
    swap(poz[u.p], poz[u.q]);
    for (int lr = 0; lr <= 1; lr++) {
      int l = 1, r = n;
      while (l <= r) {
        int s = (l + r) / 2;
        long long ww = cross(tab[u.q], stab[s], tab[u.p]);
        if (ww == (lr == 0 ? S : -S)) {
          std::cout << "Yes\n" << tab[u.p].x << ' ' << tab[u.p].y << '\n' 
                    << tab[u.q].x << ' ' << tab[u.q].y << '\n' 
                    << stab[s].x << ' ' << stab[s].y << '\n';
          return 0;
        }
        ww > (lr == 0 ? S : -S) ? r = s - 1 : l = s + 1;
      }
    }
  }
  std::cout << "No\n";
  return 0;
}
```