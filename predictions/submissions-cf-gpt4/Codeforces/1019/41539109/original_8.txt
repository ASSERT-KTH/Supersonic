```cpp
#include <bits/stdc++.h>
using namespace std;
struct POINT {
  int x, y;
  POINT(int x = 0, int y = 0) : x(x), y(y) {}
  POINT operator+(const POINT &t) const { return POINT(x + t.x, y + t.y); }
  POINT operator-(const POINT &t) const { return POINT(x - t.x, y - t.y); }
};
constexpr int N = 2000;
POINT tab[N + 7];
struct Kierunek {
  POINT wek;
  int p, q;
};
long long cross(const POINT &a, const POINT &b, const POINT &c) {
  return 1LL * (a.x - c.x) * (b.y - c.y) - 1LL * (a.y - c.y) * (b.x - c.x);
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  int n;
  long long S;
  cin >> n >> S;
  S <<= 1;
  for (int i = 0; i < n; ++i)
    cin >> tab[i].x >> tab[i].y;
  sort(tab, tab + n, [](const POINT &a, const POINT &b) -> bool {
    return a.x < b.x || (a.x == b.x && a.y > b.y);
  });
  vector<Kierunek> kol(n * (n - 1) / 2);
  int it = 0;
  for (int i = 0; i < n; ++i)
    for (int j = i + 1; j < n; ++j)
      kol[it++] = {POINT(tab[j].y - tab[i].y, tab[i].x - tab[j].x), i, j};
  sort(kol.begin(), kol.end(), [](const Kierunek &a, const Kierunek &b) -> bool {
    return 1LL * a.wek.x * b.wek.y > 1LL * a.wek.y * b.wek.x;
  });
  for (const auto &u : kol) {
    vector<POINT> vec(tab, tab + n);
    vec.erase(vec.begin() + u.p);
    vec.erase(vec.begin() + u.q - (u.p < u.q));
    auto p = lower_bound(vec.begin(), vec.end(), S,
                         [&](const POINT &a, const POINT &b) -> bool {
                           return cross(tab[u.p], a, tab[u.q]) < b;
                         });
    if (p != vec.end() && cross(tab[u.p], *p, tab[u.q]) == S) {
      cout << "Yes\n";
      cout << tab[u.p].x << ' ' << tab[u.p].y << '\n';
      cout << tab[u.q].x << ' ' << tab[u.q].y << '\n';
      cout << p->x << ' ' << p->y << '\n';
      return 0;
    }
  }
  cout << "No\n";
  return 0;
}
```