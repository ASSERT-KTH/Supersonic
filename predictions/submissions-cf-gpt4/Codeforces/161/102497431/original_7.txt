```c++
#include <bits/stdc++.h>
#define N 50005
#define K 505
#define pb push_back
#define ff first
#define ss second
using namespace std;

typedef long long ll;
typedef pair<ll, ll> pll;

const ll MOD = 1e9 + 7;
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

vector<int> g[N];
ll ans;
int n, k;
ll dp[N][K];

inline ll mrand(ll B) { return (ull)rng() % B; }

inline ll cross(pll p1, pll p2) {
  return p1.ff * p2.ss - p2.ff * p1.ss;
}

inline bool online(pll a, pll b, pll c) {
  pll p1{b.ff - a.ff, b.ss - a.ss};
  pll p2{c.ff - a.ff, c.ss - a.ss};
  return cross(p1, p2) == 0;
}

inline void z_func(vector<int> &z, vector<int> &s) {
  int L = 0, R = 0;
  int n = s.size();
  for (int i = 1; i < n; i++) {
    if (i > R) {
      L = R = i;
      while (R < n && s[R - L] == s[R])
        R++;
      z[i] = R - L;
      R--;
    } else {
      int k = i - L;
      if (z[k] < R - i + 1)
        z[i] = z[k];
      else {
        L = i;
        while (R < n && s[R - L] == s[R])
          R++;
        z[i] = R - L;
        R--;
      }
    }
  }
}

void dfs(int node, int par) {
  for (auto &u : g[node]) {
    if (u == par)
      continue;
    dfs(u, node);
    for (int i = 1; i <= k; i++) {
      dp[node][i] += dp[u][i - 1];
    }
  }
  ans += dp[node][k];
  ll tot = 0;
  for (int i = 1, j = k - 1; i < k; i++, j--) {
    for (auto &u : g[node]) {
      if (u == par)
        continue;
      tot += (dp[u][i - 1]) * (dp[node][j] - dp[u][j - 1]);
    }
  }
  ans += tot >> 1;
  dp[node][0] = 1LL;
}

void work() {
  scanf("%d%d", &n, &k);
  for (int i = 0; i < n - 1; i++) {
    int u, v;
    scanf("%d%d", &u, &v);
    --u, --v;
    g[u].pb(v), g[v].pb(u);
  }
  dfs(0, -1);
  printf("%lld\n", ans);
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  work();
  return 0;
}
```