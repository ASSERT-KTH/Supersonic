#include <iostream>
#include <vector>
#include <random>
#include <chrono>
using namespace std;

typedef long long ll;
typedef pair<ll, ll> pll;

const ll MOD = 1e9 + 7;
const ll llinf = 1ll << 60;
const int N = 50005;
const int K = 505;

vector<int> g[N];
ll dp[N][K];
int n, k;
ll ans;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

bool online(pll a, pll b, pll c) {
  pll p1{b.first - a.first, b.second - a.second};
  pll p2{c.first - a.first, c.second - a.second};
  return p1.first * p2.second - p2.first * p1.second == 0;
}

void z_func(vector<int> &z, const vector<int> &s, int n) {
  for (int i = 1, L = 0, R = 0; i < n; i++) {
    if (i <= R)
      z[i] = min(z[i - L], R - i + 1);
    while (i + z[i] < n && s[z[i]] == s[i + z[i]])
      z[i]++;
    if (i + z[i] - 1 > R)
      L = i, R = i + z[i] - 1;
  }
}

void dfs(int node, int par) {
  for (auto &u : g[node]) {
    if (u != par) {
      dfs(u, node);
      for (int i = 1; i <= k; i++) {
        dp[node][i] += dp[u][i - 1];
      }
    }
  }
  dp[node][0] = 1LL;
  ans += dp[node][k];
  for (int i = 1, j = k - 1; i < k; i++, j--) {
    ll tot = 0;
    for (auto &u : g[node]) {
      if (u != par)
        tot += dp[u][i - 1] * (dp[node][j] - (u > 0 ? dp[u][j - 1] : 0));
    }
    ans += tot / 2;
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  cin >> n >> k;

  for (int i = 0, u, v; i < n - 1; i++) {
    cin >> u >> v, --u, --v;
    g[u].push_back(v), g[v].push_back(u);
  }

  dfs(0, -1);
  
  cout << ans << "\n";

  return 0;
}