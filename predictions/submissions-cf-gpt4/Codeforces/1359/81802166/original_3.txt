```
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

typedef long long int lli;

lli maxSubArraySum(const vector<lli>& a, lli n, lli F) {
  lli max_so_far = INT_MIN;
  lli max_ending_here = 0;
  lli M = -31;

  for (lli i = 0; i < n; i++) {
    M = max(M, a[i]);
    max_ending_here = max_ending_here + a[i];

    if (max_so_far < max_ending_here && M == F)
      max_so_far = max_ending_here;

    if (max_ending_here < 0 || M > F)
      max_ending_here = 0, M = -31;
  }

  return max_so_far;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  lli n;
  cin >> n;
  
  vector<lli> a(n);
  
  for (lli& num : a) 
    cin >> num;

  lli R = 0;

  for (lli i = -30; i < 31; i++) 
    R = max(R, maxSubArraySum(a, n, i) - i);
  
  cout << R << endl;

  return 0;
}
```