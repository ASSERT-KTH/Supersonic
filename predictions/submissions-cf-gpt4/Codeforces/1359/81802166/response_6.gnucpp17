#include <iostream>
#include <vector>

typedef long long int lli;

lli maxSubArraySum(std::vector<lli>& a, lli F) {
    lli max_so_far = std::numeric_limits<lli>::min(), max_ending_here = 0;
    lli M = -31;
    for (lli i = 0; i < a.size(); i++) {
        M = std::max(M, a[i]);
        max_ending_here = max_ending_here + a[i];
        if ((max_so_far < max_ending_here) && (M == F))
            max_so_far = max_ending_here;
        if (max_ending_here < 0 || M > F)
            max_ending_here = 0, M = -31;
    }
    return max_so_far;
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
  
    lli n;
    std::cin >> n;
    std::vector<lli> a(n);
    for (lli i = 0; i < n; i++) std::cin >> a[i];
    lli R = 0;
    for (lli i = -30; i < 31; i++) {
        R = std::max(R, (maxSubArraySum(a, i) - i));
    }
    std::cout << R << "\n";
    return 0;
}