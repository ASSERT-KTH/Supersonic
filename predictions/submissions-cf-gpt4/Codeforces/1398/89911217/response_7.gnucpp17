#include <bits/stdc++.h>
#define int long long
using namespace std;

const int N = 210;
int len[3];
vector<int> v[3];
int dp[N][N][N];

int solve(int idx0, int idx1, int idx2) {
  if (idx0 >= v[0].size() && idx1 >= v[1].size() && idx2 >= v[2].size()) {
    return 0;
  }
  int &ret = dp[idx0][idx1][idx2];
  if (ret != -1) {
    return ret;
  }
  ret = 0;
  if (idx0 < v[0].size() and idx1 < v[1].size()) {
    ret = max(ret, v[0][idx0] * v[1][idx1] + solve(idx0 + 1, idx1 + 1, idx2));
  }
  if (idx0 < v[0].size() and idx2 < v[2].size()) {
    ret = max(ret, v[0][idx0] * v[2][idx2] + solve(idx0 + 1, idx1, idx2 + 1));
  }
  if (idx1 < v[1].size() and idx2 < v[2].size()) {
    ret = max(ret, v[1][idx1] * v[2][idx2] + solve(idx0, idx1 + 1, idx2 + 1));
  }
  ret = max({ret, solve(idx0 + 1, idx1, idx2), solve(idx0, idx1 + 1, idx2), solve(idx0, idx1, idx2 + 1)});
  return ret;
}

int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  for (int i = 0; i < 3; ++i) {
    cin >> len[i];
    v[i].resize(len[i]);
  }
  for (int i = 0; i < 3; ++i) {
    for (int j = 0; j < len[i]; ++j) {
      cin >> v[i][j];
    }
    sort(v[i].rbegin(), v[i].rend());
  }
  memset(dp, -1, sizeof dp);
  cout << solve(0, 0, 0);
  return 0;
}