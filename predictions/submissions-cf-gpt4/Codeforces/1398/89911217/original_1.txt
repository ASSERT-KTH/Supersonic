```cpp
#include <bits/stdc++.h>
#define _ ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define int long long
const int N = 210;
using namespace std;

vector<int> v[3];
int dp[N][N][N];

int solve(int idx0, int idx1, int idx2) {
  if (idx0 >= v[0].size() && idx1 >= v[1].size() && idx2 >= v[2].size()) {
    return 0;
  }
  if (dp[idx0][idx1][idx2] != -1) {
    return dp[idx0][idx1][idx2];
  }
  
  int ans = 0;
  if (idx0 < v[0].size() && idx1 < v[1].size()) {
    ans = max(ans, v[0][idx0] * v[1][idx1] + solve(idx0 + 1, idx1 + 1, idx2));
  }
  if (idx0 < v[0].size() && idx2 < v[2].size()) {
    ans = max(ans, v[0][idx0] * v[2][idx2] + solve(idx0 + 1, idx1, idx2 + 1));
  }
  if (idx1 < v[1].size() && idx2 < v[2].size()) {
    ans = max(ans, v[1][idx1] * v[2][idx2] + solve(idx0, idx1 + 1, idx2 + 1));
  }
  ans = max({ans, solve(idx0 + 1, idx1, idx2), solve(idx0, idx1 + 1, idx2), solve(idx0, idx1, idx2 + 1)});
  return dp[idx0][idx1][idx2] = ans;
}

int32_t main() {
  _ int len;
  for (int i = 0; i < 3; ++i) {
    cin >> len;
    v[i].resize(len);
    for (int j = 0; j < len; ++j) {
      cin >> v[i][j];
    }
    sort(v[i].rbegin(), v[i].rend());
  }
  memset(dp, -1, sizeof dp);
  cout << solve(0, 0, 0);
  return 0;
}
```