```cpp
#include <bits/stdc++.h>
#define int long long
using namespace std;
const int N = 210;
int len[3];
vector<int> v[3];
int dp[N][N][N];

int solve(int idx0, int idx1, int idx2) {
  if (idx0 >= len[0] && idx1 >= len[1] && idx2 >= len[2]) {
    return 0;
  }
  if (dp[idx0][idx1][idx2] != -1) {
    return dp[idx0][idx1][idx2];
  }
  int ans = 0;
  if (idx0 < len[0] && idx1 < len[1]) {
    ans = max(ans, v[0][idx0] * v[1][idx1] + solve(idx0 + 1, idx1 + 1, idx2));
  }
  if (idx0 < len[0] && idx2 < len[2]) {
    ans = max(ans, v[0][idx0] * v[2][idx2] + solve(idx0 + 1, idx1, idx2 + 1));
  }
  if (idx1 < len[1] && idx2 < len[2]) {
    ans = max(ans, v[1][idx1] * v[2][idx2] + solve(idx0, idx1 + 1, idx2 + 1));
  }
  ans = max({ans, solve(idx0 + 1, idx1, idx2), solve(idx0, idx1 + 1, idx2), solve(idx0, idx1, idx2 + 1)});
  dp[idx0][idx1][idx2] = ans;
  return ans;
}

int32_t main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  for (int i = 0; i < 3; ++i) {
    cin >> len[i];
    v[i].resize(len[i]);
  }
  for (int i = 0; i < 3; ++i) {
    for (int j = 0; j < len[i]; ++j) {
      cin >> v[i][j];
    }
    sort(v[i].rbegin(), v[i].rend());
  }
  memset(dp, -1, sizeof dp);
  cout << solve(0, 0, 0);
  return 0;
}
```