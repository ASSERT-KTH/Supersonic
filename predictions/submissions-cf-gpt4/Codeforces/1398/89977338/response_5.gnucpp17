#include <iostream>
#include <vector>
#include <cmath>
#include <complex>
#include <algorithm>

using namespace std;

typedef long long ll;
typedef complex<double> cpx;

#define sz(x) ((int) (x).size())
#define rep(i, n) for(int i = 0; i < (n); i++)

void fft(vector<cpx> &a, bool inv){
    int n = sz(a), j = 0;
    vector<cpx> roots(n / 2);
    for(int i = 1; i < n; i++){
        int bit = (n >> 1);
        while(j >= bit){
            j -= bit;
            bit >>= 1;
        }
        j += bit;
        if(i < j) swap(a[i], a[j]);
    }
    double ang = 2 * acos(-1) / n * (inv ? -1 : 1);
    for(int i = 0; i < n / 2; i++){
        roots[i] = cpx(cos(ang * i), sin(ang * i));
    }
    for(int i = 2; i <= n; i <<= 1){
        int step = n / i;
        for(int j = 0; j < n; j += i){
            for(int k = 0; k < i / 2; k++){
                cpx u = a[j+k], v = a[j+k+i/2] * roots[step * k];
                a[j + k] = u + v;
                a[j + k + i / 2] = u - v;
            }
        }
    }
    if(inv) for(cpx &x : a) x /= n;
}

vector<ll> multiply(vector<ll> &v, vector<ll> &w){
    vector<cpx> fv(v.begin(), v.end()), fw(w.begin(), w.end());
    int n = 2;
    while(n < sz(v) + sz(w)) n <<= 1;
    fv.resize(n);
    fw.resize(n);
    fft(fv, false);
    fft(fw, false);
    for(int i = 0; i < n; i++) fv[i] *= fw[i];
    fft(fv, true);
    vector<ll> ret(n);
    for(int i = 0; i < n; i++) ret[i] = (ll)round(fv[i].real());
    return ret;
}

const int MAXN = (int)1e6+10;
vector<int> primes;
int mind[MAXN];
bool isPrime[MAXN];
void sieve(){
    mind[1] = 1;
    for(int i = 2; i < MAXN; i++){
        if(mind[i] == 0){
            mind[i] = i;
            primes.push_back(i);
            isPrime[i] = true;
        }
        for(int j = 0; j < sz(primes) && primes[j] <= mind[i] && i * primes[j] < MAXN; j++){
            mind[i * primes[j]] = primes[j];
        }
    }
    for(int i = 2; i < MAXN; i++){
        int j = i;
        while(j > 1){
            if(mind[j] != mind[j / mind[j]]) isPrime[i] = false;
            j /= mind[j];
        }
    }
}

int x, y, n;
vector<int> a;
vector<ll> freq1, freq2;
vector<int> ans;

void solve(){
    cin >> n >> x >> y;
    a.resize(n);
    for(int i = 0; i < n; i++){
        cin >> a[i];
        freq1[a[i] + x]++;
        freq2[-a[i] + x]++;
    }
    auto res = multiply(freq1, freq2);
    int q;
    cin >> q;
    while(q--){
        int c;
        cin >> c;
        ans[c] = 0;
        for(int i = 1; i * i <= c; i++){
            if(c % i == 0){
                if(res[(i << 1) + (y << 1)] && isPrime[i]){
                    ans[c] = max(ans[c], i);
                }
                if(res[(c / i << 1) + (y << 1)] && isPrime[c / i]){
                    ans[c] = max(ans[c], c / i);
                }
            }
        }
    }
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    freq1.resize(2 * MAXN);
    freq2.resize(2 * MAXN);
    ans.resize(MAXN);
    sieve();
    solve();
    for(int i = 1; i < MAXN; i++){
        if(ans[i]) cout << ans[i] << '\n';
    }
    return 0;
}