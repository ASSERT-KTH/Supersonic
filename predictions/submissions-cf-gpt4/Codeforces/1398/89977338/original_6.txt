```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
#define fore(i, a, b) for (int i = a; i < b; i++)
#define SZ(a) ((int)(a).size())
#define pb push_back
#define fst first
#define snd second
#define MAXN (1 << 20)
int n, x, y, lp[MAXN + 1], res[MAXN];
bool can[MAXN];
vector<int> pr;
void SieveOfEratosthenes() {
  for (int i = 2; i <= MAXN; i++) {
    if (lp[i] == 0)
      lp[i] = i, pr.pb(i);
    for (int j = 0; j < SZ(pr) && pr[j] <= lp[i] && i * pr[j] <= MAXN; ++j)
      lp[i * pr[j]] = pr[j];
  }
}
void div_rec(vector<ll> &r, vector<pair<ll, int>> &f, int k, ll c) {
  if (k == f.size()) {
    r.pb(c);
    return;
  }
  fore(i, 0, f[k].snd + 1) div_rec(r, f, k + 1, c), c *= f[k].fst;
}
typedef ll tf;
typedef vector<tf> poly;
const double pi = acos(-1.0);
complex<double> cp1[MAXN + 9], cp2[MAXN + 9];
int R[MAXN + 9];
void dft(complex<double> *a, int n, bool inv) {
  fore(i, 0, n) if (R[i] < i) swap(a[R[i]], a[i]);
  for (int m = 2; m <= n; m *= 2) {
    double z = 2 * pi / m * (inv ? -1 : 1);
    complex<double> wi = exp(complex<double>(0, z));
    for (int j = 0; j < n; j += m) {
      complex<double> w(1);
      for (int k = j, k2 = j + m / 2; k2 < j + m; k++, k2++) {
        complex<double> u = a[k];
        complex<double> v = a[k2] * w;
        a[k] = u + v;
        a[k2] = u - v;
        w = w * wi;
      }
    }
  }
  if (inv)
    fore(i, 0, n) a[i] /= n;
}
poly multiply(poly &p1, poly &p2) {
  int n = p1.size() + p2.size() + 1;
  int m = 1, cnt = 0;
  while (m <= n)
    m += m, cnt++;
  fore(i, 0, m) {
    R[i] = 0;
    fore(j, 0, cnt) R[i] = (R[i] << 1) | ((i >> j) & 1);
  }
  fore(i, 0, m) cp1[i] = 0, cp2[i] = 0;
  fore(i, 0, p1.size()) cp1[i] = p1[i];
  fore(i, 0, p2.size()) cp2[i] = p2[i];
  dft(cp1, m, false);
  dft(cp2, m, false);
  fore(i, 0, m) cp1[i] *= cp2[i];
  dft(cp1, m, true);
  poly res;
  n -= 2;
  fore(i, 0, n) res.pb((tf)floor(cp1[i].real() + 0.5));
  return res;
}
vector<int> g[MAXN];
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  SieveOfEratosthenes();
  cin >> n >> x >> y;
  int OFFSET = x;
  poly l(2 * OFFSET + 1), r(2 * OFFSET + 1);
  fore(i, 0, n + 1) {
    int X;
    cin >> X;
    l[X + OFFSET]++;
    r[-X + OFFSET]++;
  }
  poly p = multiply(l, r);
  fore(i, 0, 2 * OFFSET) if (i + 2 * OFFSET < SZ(p) && p[i + 2 * OFFSET])
      can[i] = 1;
  int q;
  cin >> q;
  memset(res, -1, sizeof(res));
  fore(_, 0, q + 1) {
    int X;
    cin >> X;
    if (!SZ(g[X])) {
      int it = X;
      vector<ii> aux;
      while (it != 1) {
        if (!SZ(aux) || aux.back().fst != lp[it])
          aux.pb({lp[it], 1});
        else
          aux.back().snd++;
        it /= lp[it];
      }
      div_rec(g[X], aux, 0, 1);
    }
    for (int i : g[X]) {
      ll need = i - 2 * y;
      if (need <= 0 || need % 2)
        continue;
      if (can[need / 2])
        res[_] = max(res[_], i);
    }
  }
  fore(i, 0, q) cout << res[i] << " \n"[i == q - 1];
  return 0;
}

```