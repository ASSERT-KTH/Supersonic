#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;

typedef long long ll;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  ll n, m, k;
  cin >> n >> m >> k;
  vector<pair<ll, int>> t(2 * n);
  for (int i = 0; i < n; ++i) {
    ll l, r;
    cin >> l >> r;
    t[2 * i] = make_pair(l, 1);
    t[2 * i + 1] = make_pair(r + 1, -1);
  }
  sort(t.begin(), t.end());
  vector<ll> states(1 << k, 0);
  ll streams = 0, pp = t[0].first;
  for (auto& [np, change] : t) {
    ll curr_stream = __builtin_popcountll(streams);
    states[streams] += curr_stream % 2 * (np - pp);
    streams ^= (1ll << (change == -1 ? __builtin_ctzll(streams) : curr_stream));
    pp = np;
  }
  cout << states[0] << "\n";
  return 0;
}