#include <algorithm>
#include <vector>
#include <iostream>
typedef long long ll;
#define all(s) s.begin(), s.end()
#define rep(i, n) for (ll i = 0; i < n; ++i)

int main(int argc, char **argv) {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  ll n, m, k;
  std::cin >> n >> m >> k;
  std::vector<std::vector<ll>> t(2 * n, std::vector<ll>(3));
  rep(i, n) {
    ll l, r;
    std::cin >> l >> r;
    t[2 * i] = {l, 1, i};
    t[2 * i + 1] = {r + 1, -1, i};
  }
  std::sort(all(t));

  std::vector<ll> states(1 << k, 0);
  std::vector<ll> newstates(1 << k, 0);
  ll sz = 0, pi = t[0][2], ni, pp = t[0][0], np;
  std::vector<ll> streams;
  rep(i, 2 * n) {
    ni = t[i][2];
    np = t[i][0];
    if (t[i][1] == -1) {
      --sz;
      ll gi = 0;
      while (streams[gi] != ni) {
        ++gi;
      }
      rep(b, 1 << sz) {
        ll mask1 = ((b >> gi) << (gi + 1)) + (b % (1 << gi));
        ll mask2 = mask1 + (1 << gi);
        newstates[b] =
            std::max(states[mask1] + (__builtin_popcount(mask1) % 2) * (np - pp),
                states[mask2] + (__builtin_popcount(mask2) % 2) * (np - pp));
      }
      states.swap(newstates);
      streams.erase(streams.begin() + gi);
    } else {
      streams.push_back(ni);
      rep(b, 1 << sz) {
        newstates[b] = states[b] + (__builtin_popcount(b) % 2) * (np - pp);
        newstates[b + (1 << sz)] =
            states[b] + (__builtin_popcount(b) % 2) * (np - pp);
      }
      states.swap(newstates);
      ++sz;
    }
    pi = ni;
    pp = np;
  }
  std::cout << states[0] << " ";
  return 0;
}