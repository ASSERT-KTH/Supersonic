#include <iostream>
#include <vector>
#include <algorithm>
#define rep(i, n) for (ll i = 0; i < n; ++i)
typedef long long ll;

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  ll n;
  std::cin >> n;

  std::vector<std::tuple<ll, ll, ll>> t(2 * n);
  rep(i, n) {
    ll l, r;
    std::cin >> l >> r;
    t[2 * i] = {l, 1, i};
    t[2 * i + 1] = {r + 1, -1, i};
  }
  std::sort(t.begin(), t.end());

  std::vector<ll> states(1 << n, 0), newstates(1 << n, 0), streams;
  ll size = 0, prev_index = std::get<2>(t[0]), prev_position = std::get<0>(t[0]);

  rep(i, 2 * n) {
    ll new_index = std::get<2>(t[i]), new_position = std::get<0>(t[i]);
    if (std::get<1>(t[i]) == -1) {
      --size;
      ll gi = 0;
      while (streams[gi] != new_index) { ++gi; }
      rep(b, 1 << size) {
        ll exp1 = ((b >> gi) << (gi + 1)) + (b % (1 << gi));
        ll exp2 = exp1 + (1 << gi);
        newstates[b] = std::max(states[exp1] + (__builtin_popcount(exp1) % 2) * (new_position - prev_position),
                                states[exp2] + (__builtin_popcount(exp2) % 2) * (new_position - prev_position));
      }
      states.swap(newstates);
      streams.erase(streams.begin() + gi);
    } else {
      streams.push_back(new_index);
      rep(b, 1 << size) {
        newstates[b] = states[b] + (__builtin_popcount(b) % 2) * (new_position - prev_position);
        newstates[b + (1 << size)] = states[b] + (__builtin_popcount(b) % 2) * (new_position - prev_position);
      }
      states.swap(newstates);
      ++size;
    }
    prev_index = new_index;
    prev_position = new_position;
  }
  std::cout << states[0] << "\n";
  return 0;
}