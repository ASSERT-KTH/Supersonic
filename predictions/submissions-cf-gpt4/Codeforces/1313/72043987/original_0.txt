```cpp
#include <algorithm>
#include <vector>
#include <iostream>
using namespace std;
typedef long long ll;
typedef pair<ll, ll> P;
const ll INF = 1e9;
const ll MOD = 1000000007;

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  ll n, m, k;
  cin >> n >> m >> k;
  vector<P> t(2 * n);
  for (ll i = 0; i < n; ++i) {
    ll l, r;
    cin >> l >> r;
    t[2 * i] = make_pair(l, i+1);
    t[2 * i + 1] = make_pair(r + 1, -(i+1));
  }
  
  sort(t.begin(), t.end());
  vector<ll> states(1 << k, 0);
  vector<ll> newstates(1 << k, 0);
  ll sz = 0;
  ll prev = t[0].first;
  vector<ll> streams;
  
  for (const auto& [np, ni] : t) {
    if (ni < 0) {
      --sz;
      ll gi = 0;
      while (streams[gi] != -ni) ++gi;
      for (ll b = 0; b < (1 << sz); ++b) {
        ll exp1 = ((b >> gi) << (gi + 1)) + (b % (1 << gi));
        ll exp2 = exp1 + (1 << gi);
        newstates[b] = max(states[exp1] + (__builtin_popcount(exp1) % 2) * (np - prev),
                           states[exp2] + (__builtin_popcount(exp2) % 2) * (np - prev));
      }
      states.swap(newstates);
      streams.erase(streams.begin() + gi);
    } else {
      streams.push_back(ni);
      for (ll b = 0; b < (1 << sz); ++b) {
        newstates[b] = states[b] + (__builtin_popcount(b) % 2) * (np - prev);
        newstates[b + (1 << sz)] = states[b] + (__builtin_popcount(b) % 2) * (np - prev);
      }
      states.swap(newstates);
      ++sz;
    }
    prev = np;
  }
  cout << states[0];
  return 0;
}
```
