```C++
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
typedef long long ll;
const ll INF = 1e9;
const ll MOD = 1000000007;

int main(int argc, char **argv) {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  ll n, m, k;
  cin >> n >> m >> k;

  vector<vector<ll>> t(2 * n, vector<ll>(3));
  for (ll i = 0; i < n; ++i) {
    ll l, r;
    cin >> l >> r;
    t[2 * i] = {l, 1, i};
    t[2 * i + 1] = {r + 1, -1, i};
  }

  sort(t.begin(), t.end());

  vector<ll> states(1 << k, 0), newstates(1 << k, 0);
  ll sz = 0;
  ll pi = t[0][2], ni, pp = t[0][0], np;
  vector<ll> streams;

  for (ll i = 0; i < 2 * n; ++i) {
    ni = t[i][2];
    np = t[i][0];

    if (t[i][1] == -1) {
      --sz;
      ll gi = 0;
      while (streams[gi] != ni)
        ++gi;

      for (ll b = 0; b < 1 << sz; ++b) {
        ll exp1 = ((b >> gi) << (gi + 1)) + (b % (1 << gi));
        ll exp2 = exp1 + (1 << gi);
        newstates[b] = max(states[exp1] + (__builtin_popcount(exp1) % 2) * (np - pp),
                           states[exp2] + (__builtin_popcount(exp2) % 2) * (np - pp));
      }

      states.swap(newstates);
      streams.erase(streams.begin() + gi);
    } 
    else {
      streams.push_back(ni);
      for (ll b = 0; b < 1 << sz; ++b) {
        newstates[b] = states[b] + (__builtin_popcount(b) % 2) * (np - pp);
        newstates[b + (1 << sz)] = states[b] + (__builtin_popcount(b) % 2) * (np - pp);
      }

      states.swap(newstates);
      ++sz;
    }

    pi = ni;
    pp = np;
  }

  cout << states[0] << " ";
}
```