#include <iostream>
#include <algorithm>
using namespace std;
typedef long long ll;
const int N = 5e5 + 9;
ll a[N], l[N], r[N], res[N], tree[4*N];
inline ll query(int node, int start, int end, int l, int r, ll x) {
    if(r < start || end < l || tree[node] > x) return 0;
    if(l <= start && end <= r && start == end) return start;
    int mid = (start + end) / 2;
    ll p1 = query(2*node, start, mid, l, r, x);
    if(p1) return p1;
    return query(2*node+1, mid+1, end, l, r, x);
}
inline void update(int node, int start, int end, int idx, ll val) {
    if(start == end) tree[node] = val;
    else {
        int mid = (start + end) / 2;
        if(start <= idx && idx <= mid) update(2*node, start, mid, idx, val);
        else update(2*node+1, mid+1, end, idx, val);
        tree[node] = min(tree[2*node], tree[2*node+1]);
    }
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int n; cin >> n;
    for(int i=1; i<=n; i++) cin >> a[i];
    for(int i=1; i<=n; i++) {
        int j = query(1, 1, n, 1, i-1, a[i]);
        update(1, 1, n, i, a[i]);
        l[i] = l[j] + a[i] * (i-j);
    }
    fill(tree, tree+4*N, 1e18);
    reverse(a+1, a+n+1);
    for(int i=1; i<=n; i++) {
        int j = query(1, 1, n, 1, i-1, a[i]);
        update(1, 1, n, i, a[i]);
        r[i] = r[j] + a[i] * (i-j);
    }
    reverse(r+1, r+n+1);
    reverse(a+1, a+n+1);
    ll sum = -1;
    int pos = -1;
    for(int i=1; i<=n; i++) {
        if(sum < l[i] + r[i] - a[i]) {
            sum = l[i] + r[i] - a[i];
            pos = i;
        }
    }
    ll minn = a[pos];
    for(int i=pos; i<=n; i++) {
        minn = min(minn, a[i]);
        res[i] = minn;
    }
    minn = a[pos];
    for(int i=pos-1; i>=1; i--) {
        minn = min(minn, a[i]);
        res[i] = minn;
    }
    for(int i=1; i<=n; i++) cout << res[i] << ' ';
    return 0;
}