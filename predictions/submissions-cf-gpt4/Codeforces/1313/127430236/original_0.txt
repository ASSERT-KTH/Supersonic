```
#include <algorithm>
#include <cstring>
#include <iostream>
using namespace std;
#define int long long
const int N = 5e5 + 9;
int a[N], node[4 * N], l[N], r[N], res[N];

void update(int id, int l, int r, int pos, int x) {
  if (l > pos || r < pos)
    return;
  node[id] = (l == r) ? x : min(update(id * 2, l, (l + r) / 2, pos, x),
                                 update(id * 2 + 1, (l + r) / 2 + 1, r, pos, x));
}

int find(int id, int l, int r, int tr, int ph, int x) {
  if (tr > ph || l > ph || r < tr || node[id] > x)
    return 0;
  if (l == r)
    return r;
  int mid = (l + r) / 2;
  if (l >= tr && r <= ph)
    return (node[id * 2 + 1] <= x) ? find(id * 2 + 1, mid + 1, r, tr, ph, x)
                                    : find(id * 2, l, mid, tr, ph, x);
  return max(find(id * 2, l, mid, tr, ph, x),
             find(id * 2 + 1, mid + 1, r, tr, ph, x));
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  int n;
  cin >> n;
  for (int i = 1; i <= n; i++)
    cin >> a[i];
  int id;
  for (int i = 1; i <= n; i++) {
    id = find(1, 1, n, 1, i - 1, a[i]);
    update(1, 1, n, i, a[i]);
    l[i] = l[id] + a[i] * (i - id);
  }
  memset(node, 0, sizeof(node));
  reverse(a + 1, a + 1 + n);
  for (int i = 1; i <= n; i++) {
    id = find(1, 1, n, 1, i - 1, a[i]);
    update(1, 1, n, i, a[i]);
    r[i] = r[id] + a[i] * (i - id);
  }
  reverse(a + 1, a + 1 + n);
  int sum = 0, pos;
  for (int i = 1; i <= n; i++)
    if (sum < l[i] + r[n - i + 1] - a[i]) {
      sum = l[i] + r[n - i + 1] - a[i];
      pos = i;
    }
  for (int i = pos; i >= 1; i--)
    res[i] = min(res[i + 1], a[i]);
  for (int i = pos + 1; i <= n; i++)
    res[i] = min(res[i - 1], a[i]);
  for_each(res + 1, res + n + 1, [](int x) { cout << x << " "; });
  return 0;
}
```