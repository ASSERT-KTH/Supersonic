```C++
#include <iostream>
#include <algorithm>
#include <cstring>

#define int long long
const int N = 5e5 + 9;
int a[N], node[4 * N], l[N], r[N], res[N];

void update(int id, int l, int r, int pos, int x) {
  if (pos < l || pos > r) return;
  if (l == r) {
    node[id] = x;
    return;
  }
  int mid = l + (r - l) / 2;
  update(id << 1, l, mid, pos, x);
  update((id << 1) | 1, mid + 1, r, pos, x);
  node[id] = std::min(node[id << 1], node[(id << 1) | 1]);
}

int find(int id, int l, int r, int tr, int ph, int x) {
  if (ph < tr || l > ph || r < tr || node[id] > x) return 0;
  if (l == r) return r;
  int mid = l + (r - l) / 2;
  int res = 0;
  if (mid >= tr && node[(id << 1) | 1] <= x) res = find((id << 1) | 1, mid + 1, r, tr, ph, x);
  if (!res) res = find(id << 1, l, mid, tr, ph, x);
  return res;
}

signed main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(0);
  int n;
  std::cin >> n;
  for (int i = 1; i <= n; i++)
    std::cin >> a[i];
  int id;
  for (int i = 1; i <= n; i++) {
    id = find(1, 1, n, 1, i - 1, a[i]);
    update(1, 1, n, i, a[i]);
    l[i] = l[id] + a[i] * (i - id);
  }
  memset(node, 0, sizeof(node));
  std::reverse(a + 1, a + n + 1);
  for (int i = 1; i <= n; i++) {
    id = find(1, 1, n, 1, i - 1, a[i]);
    update(1, 1, n, i, a[i]);
    r[i] = r[id] + a[i] * (i - id);
  }
  std::reverse(a + 1, a + n + 1);
  std::reverse(r + 1, r + n + 1);
  int sum = 0, pos;
  for (int i = 1; i <= n; i++)
    if (sum < l[i] + r[i] - a[i]) {
      sum = l[i] + r[i] - a[i];
      pos = i;
    }
  int minn = a[pos];
  res[pos] = a[pos];
  for (int i = pos - 1; i >= 1; i--) {
    minn = std::min(minn, a[i]);
    res[i] = minn;
  }
  minn = a[pos];
  for (int i = pos + 1; i <= n; i++) {
    minn = std::min(minn, a[i]);
    res[i] = minn;
  }
  for (int i = 1; i <= n; i++)
    std::cout << res[i] << " ";
  return 0;
}
```