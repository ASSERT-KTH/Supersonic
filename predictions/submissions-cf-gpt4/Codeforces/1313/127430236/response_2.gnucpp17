#include <algorithm>
#include <cstring>
#include <iostream>
using namespace std;
typedef long long ll;
const ll MAX = 5e5 + 9;
ll a[MAX], node[4 * MAX], l[MAX], r[MAX], res[MAX];
void update(ll id, ll l, ll r, ll pos, ll x) {
  if (l > pos || r < pos)
    return;
  node[id] = (l == r) ? x : min(update(id << 1, l, (l + r) >> 1, pos, x), update((id << 1)|1, ((l + r) >> 1) + 1, r, pos, x));
}
ll find(ll id, ll l, ll r, ll tr, ll ph, ll x) {
  if (tr > ph || l > ph || r < tr || node[id] > x)
    return 0;
  if (l == r)
    return r;
  ll mid = (l + r) >> 1;
  if (l >= tr && r <= ph) {
    if (node[id] > x)
      return 0;
    if (node[(id << 1)|1] <= x)
      return find((id << 1)|1, mid + 1, r, tr, ph, x);
    else
      return find(id << 1, l, mid, tr, ph, x);
  }
  return max(find(id << 1, l, mid, tr, ph, x),
             find((id << 1)|1, mid + 1, r, tr, ph, x));
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  ll n;
  cin >> n;
  for (ll i = 1; i <= n; i++)
    cin >> a[i];
  ll id;
  id = 0;
  for (ll i = 1; i <= n; i++) {
    id = find(1, 1, n, 1, i - 1, a[i]);
    update(1, 1, n, i, a[i]);
    l[i] = l[id] + a[i] * (i - id);
  }
  memset(node, 0, sizeof(node));
  reverse(a + 1, a + n + 1);
  for (ll i = 1; i <= n; i++) {
    id = find(1, 1, n, 1, i - 1, a[i]);
    update(1, 1, n, i, a[i]);
    r[i] = r[id] + a[i] * (i - id);
  }
  reverse(a + 1, a + n + 1);
  ll sum = 0, pos;
  for (ll i = 1; i <= n; i++)
    if (sum < l[i] + r[n - i + 1] - a[i]) {
      sum = l[i] + r[n - i + 1] - a[i];
      pos = i;
    }
  ll minn = a[pos];
  res[pos] = a[pos];
  for (ll i = pos - 1; i >= 1; i--) {
    minn = min(minn, a[i]);
    res[i] = minn;
  }
  minn = a[pos];
  for (ll i = pos + 1; i <= n; i++) {
    minn = min(minn, a[i]);
    res[i] = minn;
  }
  for (ll i = 1; i <= n; i++)
    cout << res[i] << " ";
  return 0;
}