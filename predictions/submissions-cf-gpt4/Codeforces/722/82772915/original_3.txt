```c++
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
#define ll long long
#define maxn 500005

ll arr[maxn], group_sum[maxn], ans[maxn];
int parent[maxn];
bool visited[maxn];

int find_set(int v) {
    if (v == parent[v])
        return v;
    return parent[v] = find_set(parent[v]);
}

void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b) {
        if (group_sum[a] < group_sum[b])
            swap(a, b);
        group_sum[a] += group_sum[b];
        parent[b] = a;
    }
}

int main() {
    ios_base::sync_with_stdio(false); cin.tie(nullptr);
    int n; cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> arr[i];
        parent[i] = i;
        group_sum[i] = arr[i];
    }

    vector<int> p(n+1);
    for (int i = 1; i <= n; ++i) {
        cin >> p[i];
    }

    ll res = 0;
    for (int i = n; i >= 1; --i) {
        int v = p[i];
        visited[v] = true;
        if (v > 1 && visited[v-1]) {
            union_sets(v, v-1);
        }
        if (v < n && visited[v+1]) {
            union_sets(v, v+1);
        }
        res = max(res, group_sum[find_set(v)]);
        ans[i-1] = res;
    }

    for (int i = 0; i < n; ++i) {
        cout << ans[i] << "\n";
    }

    return 0;
}
```