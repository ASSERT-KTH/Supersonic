```
#include <iostream>
#include <map>
#include <set>
#include <vector>
#include <utility>
using namespace std;

typedef pair<int, int> ip;

ip slope(int x1, int y1, int x2, int y2) {
    int tmp1 = x2 - x1, tmp2 = y2 - y1;
    int tmp3 = __gcd(abs(tmp1), abs(tmp2));
    if (tmp1 == 0)
        return {0, 1};
    if (tmp2 == 0)
        return {1, 0};
    tmp1 /= tmp3, tmp2 /= tmp3;
    if (tmp1 < 0)
        tmp1 *= -1, tmp2 *= -1;
    return {tmp1, tmp2};
}

ip intercept(int x1, int y1, int x2, int y2) {
    int tmp1 = y2 * x1 - x2 * y1, tmp2 = x2 - x1;
    int tmp3 = __gcd(abs(tmp1), abs(tmp2));
    if (tmp2 == 0)
        return {x1, 0};
    tmp1 /= tmp3, tmp2 /= tmp3;
    if (tmp1 < 0)
        tmp1 *= -1, tmp2 *= -1;
    return {tmp1, tmp2};
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int n;
    cin >> n;
    vector<ip> points(n);
    for(int i=0; i<n; ++i)
        cin >> points[i].first >> points[i].second;
    set<pair<ip, ip>> unique_lines;
    map<ip, set<ip>> slopes_to_intercepts;
    for(int i=0; i<n; ++i) {
        for(int j=i+1; j<n; ++j) {
            ip s = slope(points[i].first, points[i].second, points[j].first, points[j].second);
            ip c = intercept(points[i].first, points[i].second, points[j].first, points[j].second);
            unique_lines.insert({s, c});
            slopes_to_intercepts[s].insert(c);
        }
    }
    long long x = 0;
    for(auto& kv : slopes_to_intercepts) {
        long long si = kv.second.size();
        x += si * (si - 1) / 2;
    }
    long long si = unique_lines.size();
    cout << si * (si - 1) / 2 - x;
}
```