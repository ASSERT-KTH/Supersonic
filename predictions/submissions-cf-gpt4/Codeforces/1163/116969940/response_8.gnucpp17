#include <bits/stdc++.h>
using namespace std;
const int INF = 1e9 + 7;
const long long INF64 = 9e18;
const long long mod = 1e9 + 7;
const int mxN = 1e9 + 5;

int main() {
  ios_base ::sync_with_stdio(0);
  cin.tie(NULL);
  cout.tie(NULL);
  cout.precision(35);
  int n;
  cin >> n;

  vector<int> mp(100005, 0);
  multiset<int> st;
  map<int, int> cnt;
  set<int> cst;
  int ans = 0;

  for (int i = 0; i < n; ++i) {
    int x;
    cin >> x;
    if (mp[x]) {
      auto idx = st.find(mp[x]);
      cnt[mp[x]]--;
      st.erase(idx);
    }
    mp[x]++;
    cnt[mp[x]]++;
    cst.insert(x);
    st.insert(mp[x]);
    auto f = *st.begin();
    auto sec = st.upper_bound(f);
    if (sec == st.end()) sec--;
    auto s = *sec;
    int w = cnt[f], y = cnt[s];
    if (cst.size() == 1) ans = i;
    if (max(w, y) == i + 1 && f == 1) ans = i;
    if (f * w + s * y == i + 1) {
      if (y == 1 && (s == 1 || s - 1 == f)) ans = i;
      else if (w == 1 && (f == 1 || f - 1 == s)) ans = i;
      else if (y == 1 && w == 1 && (max(f, s) - 1 == min(f, s) || min(f, s) == 1)) ans = i;
    }
  }

  cout << ans + 1 << endl;
  return 0;
}