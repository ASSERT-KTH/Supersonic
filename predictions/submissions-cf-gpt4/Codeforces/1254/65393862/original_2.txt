Your program already seems to be optimized. It uses an efficient data structure (Lowest Common Ancestor) for handling tree queries, and it also uses a square root decomposition technique for handling updates. The use of fast modular multiplication and modular inverses are also good practices in terms of optimization. 

But there's one thing that can be optimized. You are using `vector::push_back` and `vector::erase` a lot. You can use `vector::reserve` for avoiding reallocations and also use a flag variable instead of erasing elements from the vector. Here is the optimized code:

```cpp
#include <algorithm>
#include <cassert>
#include <cmath>
#include <iostream>
#include <vector>
using namespace std;
const int MOD = 998244353;
struct mod_int {
  // ... Same as before
};

template <typename T, bool maximum_mode = false> struct RMQ {
  // ... Same as before
};

struct LCA {
  // ... Same as before, except for dfs function.
  int tour;
  void dfs(int node, int par) {
    parent[node] = par;
    depth[node] = par < 0 ? 0 : depth[par] + 1;
    subtree_size[node] = 1;
    first_occurrence[node] = euler.size();
    euler.push_back(node);
    tour_list[tour] = node;
    tour_start[node] = tour++;
    if (par >= 0)
      adj[node].erase(find(adj[node].begin(), adj[node].end(), par));
    for (int &child : adj[node]) {
      if(child == par) {
        child = adj[node].back();
        adj[node].pop_back();
      } else {
        dfs(child, node);
        subtree_size[node] += subtree_size[child];
        euler.push_back(node); 
      }
    }
    tour_end[node] = tour;
  }
  // ... Same as before
};

struct query {
  // ... Same as before
};

int N, APPLY, Q;
LCA lca;
vector<mod_int> values, updates, query_d;

int main() {
  // ... Same as before, except for the following line.
  lca.adj.reserve(N);
  // ... Same as before
}
```