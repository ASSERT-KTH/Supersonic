```C++
#include <vector>
#include <iostream>
#include <cmath>
using namespace std;

const int MOD = 998244353;
typedef long long ll;

inline int add(int a, int b, int m = MOD) {a += b; return a >= m ? a - m : a;}
inline int mul(int a, int b, int m = MOD) {return (ll) a * b % m;}
inline int power(int a, ll b, int m = MOD) {
    int res = 1;
    while (b > 0) {
        if (b & 1) res = mul(res, a, m);
        a = mul(a, a, m);
        b >>= 1;
    }
    return res;
}
inline int inv(int a, int m = MOD) {return power(a, m - 2, m);}

struct LCA {
    vector<int> height, first, euler, logTable;
    vector<vector<int>> parent;
    void dfs(vector<vector<int>> const& graph, int node, int prevNode) {
        first[node] = euler.size();
        euler.push_back(node);
        parent[0][node] = prevNode;
        for (int i = 1; i < 20; ++i) {
            parent[i][node] = parent[i - 1][parent[i - 1][node]];
        }
        for (int nextNode : graph[node]) {
            if (nextNode != prevNode) {
                height[nextNode] = height[node] + 1;
                dfs(graph, nextNode, node);
                euler.push_back(node);
            }
        }
    }
    LCA(vector<vector<int>> const& graph, int root) {
        int n = graph.size();
        height.resize(n);
        first.resize(n);
        euler.reserve(2 * n);
        parent.assign(20, vector<int>(n));
        dfs(graph, root, root);
        int m = euler.size();
        logTable.resize(m + 1);
        logTable[1] = 0;
        for (int i = 2; i <= m; ++i) {
            logTable[i] = logTable[i / 2] + 1;
        }
    }
    int get(int a, int b) {
        a = first[a], b = first[b];
        if (a > b) swap(a, b);
        int bit = logTable[b - a + 1];
        return min(parent[bit][euler[a]], parent[bit][euler[b - (1 << bit) + 1]]);
    }
    int dist(int a, int b) {
        return height[a] + height[b] - 2 * height[get(a, b)];
    }
};

vector<int> cnt;
vector<int> dist;
vector<vector<int>> g;
vector<int> sz;
vector<int> par;

void dfs(int v, int p = -1) {
    sz[v] = 1;
    par[v] = p;
    if(p != -1) dist[v] = dist[p] + 1;
    for(int u : g[v]) {
        if(u == p) continue;
        dfs(u, v);
        sz[v] += sz[u];
    }
}

void APPLY() {
    dfs(0);
    for(int u = 1; u < g.size(); u++) {
        int v = par[u];
        cnt[v] = add(cnt[v], mul(sz[u], cnt[u]));
        cnt[0] = add(cnt[0], mul(g.size() - sz[u], cnt[u]));
    }
    for(int v = g.size() - 1; v > 0; v--) {
        int u = par[v];
        cnt[v] = add(cnt[v], cnt[u]);
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int n, q;
    cin >> n >> q;
    g.resize(n);
    cnt.assign(n, 0);
    dist.assign(n, 0);
    sz.assign(n, 0);
    par.assign(n, 0);
    for(int i = 0; i < n - 1; i++) {
        int u, v;
        cin >> u >> v;
        u--; v--;
        g[u].emplace_back(v);
        g[v].emplace_back(u);
    }
    LCA lca(g, 0);
    vector<pair<int, int>> updates;
    while(q--) {
        int t, v;
        cin >> t >> v;
        v--;
        if(t == 1) {
            int d;
            cin >> d;
            updates.emplace_back(v, d);
            if(updates.size() * updates.size() > n) {
                for(auto& [v, d] : updates) {
                    cnt[v] = add(cnt[v], d);
                }
                APPLY();
                updates.clear();
            }
        }
        else {
            int ans = cnt[v];
            for(auto& [u, d] : updates) {
                int l = lca.get(u, v);
                int dist_v_l = dist[v] - dist[l];
                int dist_u_l = dist[u] - dist[l];
                if(dist_u_l == 0) ans = add(ans, d);
                else ans = add(ans, mul(d, inv(n)));
                if(dist_v_l == dist_u_l + 1) ans = add(ans, mul(d, n - sz[u]));
                if(dist_v_l == dist_u_l) ans = add(ans, mul(d, sz[u]));
            }
            cout << ans << "\n";
        }
    }
}
```