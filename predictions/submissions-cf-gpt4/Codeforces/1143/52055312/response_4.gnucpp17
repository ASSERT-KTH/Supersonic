#include <iostream>
#include <vector>
#include <algorithm>

#define N 100005

int n, x, y, t;
std::vector<int> tree[N];
int c[N], par[N], h[N], ve[N];
bool ans[N], yes;

bool cmp(int x, int y) { return h[x] > h[y]; }

void built_h(int i, int k) {
  h[i] = k;
  for (auto& j : tree[i]) {
    if (par[i] != j) {
      built_h(j, k + 1);
    }
  }
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  
  std::cin >> n;
  for (int i = 1; i <= n; i++) {
    ve[i] = i;
    std::cin >> x >> y;
    if (x == -1)
      t = i, par[i] = i;
    else
      par[i] = x;
    c[i] = y;
    if (x != -1)
      tree[x].emplace_back(i);
  }
  built_h(t, 1);
  std::sort(ve + 1, ve + n + 1, cmp);
  for (int i = 1; i <= n; i++) {
    int ok = c[ve[i]];
    for (auto& j : tree[ve[i]])
      ok &= c[j];
    if (!ok)
      ans[ve[i]] = true, yes = true;
  }
  if (!yes)
    std::cout << -1;
  else
    for (int i = 1; i <= n; i++)
      if (ans[i])
        std::cout << i << " ";
}