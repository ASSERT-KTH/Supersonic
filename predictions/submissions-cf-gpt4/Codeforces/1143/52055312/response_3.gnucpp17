#include <iostream>
#include <vector>
#include <algorithm>
#define N 100005
using namespace std;
vector<int> tree[N];
int c[N], par[N], h[N], ve[N];
bool ans[N], yes;

struct cmp {
    bool operator() (const int &x, const int &y) { 
        return h[x] > h[y]; 
    }
};

void built_h(int i, int k) {
  h[i] = k;
  for (const auto &j : tree[i]) {
    if (par[i] != j) {
      built_h(j, k + 1);
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, x, y, t;
  cin >> n;
  for (int i = 1; i <= n; i++) {
    ve[i] = i;
    cin >> x >> y;
    if (x == -1)
      t = i, par[i] = i;
    else
      par[i] = x;
    c[i] = y;
    if (x != -1)
      tree[x].emplace_back(i);
  }
  built_h(t, 1);
  sort(ve + 1, ve + n + 1, cmp());
  for (int i = 1; i <= n; i++) {
    bool ok = false;
    for (const auto &j : tree[ve[i]])
      if (!c[j]) {
        ok = true;
        break;
      }
    if (!c[ve[i]])
      ok = true;
    if (!ok)
      ans[ve[i]] = true, yes = true;
  }
  if (!yes)
    cout << -1;
  else
    for (int i = 1; i <= n; i++)
      if (ans[i])
        cout << i << " ";
}