#include <bits/stdc++.h>
#define len 1000006
#define mod 1000000007
#define MP make_pair
#define pb push_back
#define F first
#define S second
#define ln length()
#define INF (1LL << 61)
#define nl "\n"
#define fio(a, b) freopen(a, "r", stdin); freopen(b, "w", stdout);
#define ios ios::sync_with_stdio(0); cin.tie(0);

typedef long long ll;
typedef unsigned long long ul;

ul modpow(ul x, ul n, ul m) {
  ul u = 1;
  while (n > 0) {
    if (n & 1) u = (u * x) % m;
    x = (x * x) % m;
    n >>= 1;
  }
  return u % m;
}

ul mod_(ll x, ll m) {
  return ((x % m) + m) % m;
}

bool prm[len];
void make_prm() {
  std::fill(prm, prm + len, true);
  prm[0] = prm[1] = false;
  for (int first = 2; first * first <= len; first++) {
    if (prm[first]) {
      for (int second = first * first; second < len; second += first)
        prm[second] = false;
    }
  }
}

std::vector<int> factor;
void make_factor(int n) {
  factor.clear();
  for (int i = 1; i * i <= n; i++) {
    if (n % i == 0) {
      factor.pb(i);
      if (i != n / i) factor.pb(n / i);
    }
  }
}

ul pascal_tri[2][105];
void make_pascalTri(int n) {
  pascal_tri[0][0] = 1;
  for (int i = 1; i <= n; i++) {
    pascal_tri[i & 1][0] = 1;
    for (int j = 1; j <= i; j++) {
      pascal_tri[i & 1][j] = (pascal_tri[!(i & 1)][j] + pascal_tri[!(i & 1)][j - 1]) % mod;
    }
  }
}

ll gcd(ll a, ll b) {
  while (b != 0) {
    a %= b;
    std::swap(a, b);
  }
  return a;
}

bool is_perfect(ll n) {
  ll i = std::sqrt(n);
  return i * i == n;
}

ul n, k;
ul sm, ans;
bool vis[len];
std::vector<ll> adj[len];

ll dfs(ll n, ll p) {
  if (vis[n])
    return 0;
  vis[n] = true;
  ll x = 1;
  for (auto u : adj[n]) {
    if (u != p)
      x += dfs(u, n);
  }
  return x;
}

int main() {
  std::cin >> n >> k;
  for (ll i = 1, u, v, x; i < n; i++) {
    std::cin >> u >> v >> x;
    if (x == 0)
      adj[u].pb(v), adj[v].pb(u);
  }
  for (ll i = 1; i <= n; i++) {
    if (!vis[i]) {
      sm += modpow(dfs(i, -1), k, mod);
      sm = mod_(sm, mod);
    }
  }
  ans = modpow(n, k, mod);
  std::cout << mod_(ans - sm, mod);
  return 0;
}