```c++
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
typedef long long ll;
typedef unsigned long long ul;

const int len = 1e6 + 5;
const ll mod = 1e9 + 7;

ul modpow(ul x, ul n, ul m) {
  ul u = 1;
  while(n > 0) {
    if(n & 1) u = (u * x) % m;
    x = (x * x) % m;
    n >>= 1;
  }
  return u;
}

ul mod_(ll x, ll m) {
  return ((x % m) + m) % m;
}

bool vis[len];
vector<ll> adj[len];
ll dfs(ll, ll);

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  
  ul n, k;
  cin >> n >> k;
  
  for (ll i = 1; i < n; i++) {
    ll u, v, x;
    cin >> u >> v >> x;
    if (x == 0) {
      adj[u].push_back(v);
      adj[v].push_back(u);
    }
  }
  
  ul sm = 0, ans = modpow(n, k, mod);
  for (ll i = 1; i <= n; i++) {
    if (!vis[i]) {
      sm += modpow(dfs(i, -1), k, mod);
      sm = mod_(sm, mod);
    }
  }
  cout << mod_(ans - sm, mod);

  return 0;
}

ll dfs(ll n, ll p) {
  if (vis[n]) return 0;
  vis[n] = true;
  ll x = 0;
  for (auto u : adj[n]) {
    if (u != p)
      x += dfs(u, n);
  }
  return x + 1;
}
```