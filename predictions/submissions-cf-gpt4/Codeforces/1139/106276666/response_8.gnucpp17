#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ul;
#define len 1000005
#define mod 1000000007
#define pq(a) priority_queue<a>
#define pqd(b) priority_queue<b, vector<b>, greater<b>>
#define MP make_pair
#define v(i) vector<i>
#define p(aa, bb) pair<aa, bb>
#define pb push_back
#define pp pop_back
#define clr(a) memset((a), 0, sizeof((a)))
#define rep(i, a, b) for (ll i = (a); i <= (b); i++)
#define repd(i, a, b) for (ll i = (a); i >= (b); i--)
#define all(a) ((a).begin(), (a).end())
#define F first
#define S second
#define ln length()
#define INF (1LL << 61)
#define co cout <<
#define ci cin >>
#define nl "\n"

ul modpow(ul x, ul n, ul m) {
  if (n == 0)
    return 1UL % m;
  ul u = modpow(x, n / 2, m);
  u = (u * u) % m;
  if (n % 2 == 1)
    u = (u * x) % m;
  return u;
}
ul mod_(ll x, ll m) {
  if (x > 0)
    return x % m;
  else
    return (m - abs(x) % m) % m;
}

bool prm[len];
void make_prm() {
  fill(prm, prm + len, true);
  prm[0] = prm[1] = false;
  for (ll i = 2; i * i <= len; i++) {
    if (prm[i]) {
      for (ll j = i * i; j <= len; j += i)
        prm[j] = false;
    }
  }
}

v(ll) factor;
void make_factor(ll n) {
  factor.clear();
  for (ll i = 1; i * i <= n; i++) {
    if (n % i == 0) {
      factor.pb(i);
      if (i != n / i)
        factor.pb(n / i);
    }
  }
}

ul pascal_tri[2][105];
void make_pascalTri(int n) {
  clr(pascal_tri);
  rep(i, 0, n) {
    pascal_tri[i & 1][0] = pascal_tri[i & 1][i] = 1;
    rep(j, 1, i - 1) {
      pascal_tri[i & 1][j] = (pascal_tri[!(i & 1)][j - 1] + pascal_tri[!(i & 1)][j]) % mod;
    }
  }
}

ul n, k;
ul sm, ans;
bool vis[len];
v(ll) adj[len];

ll dfs(ll n, ll p) {
  if (vis[n])
    return 0;
  vis[n] = true;
  ll x = 0;
  for (auto u : adj[n]) {
    if (u != p)
      x += dfs(u, n);
  }
  return x + 1;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  ci n >> k;
  rep(i, 1, n - 1) {
    ll u, v, x;
    ci u >> v >> x;
    if (x == 0)
      adj[u].pb(v), adj[v].pb(u);
  }
  clr(vis);
  rep(i, 1, n) {
    if (!vis[i]) {
      sm += modpow(dfs(i, -1), k, mod);
      sm = mod_(sm, mod);
    }
  }
  ans = modpow(n, k, mod);
  co mod_(ans - sm, mod) << nl;
  return 0;
}