```C++
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ul = unsigned long long;
constexpr ul len = 1e6 + 5;
constexpr ul mod = 1e9 + 7;
using vi = vector<ll>;
bool is_prime[len];
ul pascal_tri[2][105]{};

ul mod_pow(ul x, ul n, ul m) {
    ul u = 1;
    while(n > 0){
        if(n & 1)
            u = (u * x) % m;
        x = (x * x) % m;
        n >>= 1;
    }
    return u;
}

ul mod_(ll x, ll m) {
    ll r = x % m;
    return r < 0 ? r + m : r;
}

void sieve() {
    fill(begin(is_prime), begin(is_prime) + len, true);
    is_prime[0] = is_prime[1] = false;
    for (ul i = 2; i * i < len; ++i)
        if (is_prime[i])
            for (ul j = i * i; j < len; j += i)
                is_prime[j] = false;
}

vi factors(ul n) {
    vi factor;
    for (ul i = 1; i * i <= n; ++i) {
        if (n % i == 0) {
            factor.push_back(i);
            if(i * i != n)
                factor.push_back(n / i);
        }
    }
    return factor;
}

void make_pascalTri(int n) {
    bool f = 0;
    memset(pascal_tri, 0, sizeof(pascal_tri));
    for (int i = 0; i <= n; ++i) {
        pascal_tri[f][0] = 1;
        for (int j = 1; j <= i; ++j) {
            pascal_tri[f][j] = pascal_tri[!f][j] + pascal_tri[!f][j - 1];
        }
        f = !f;
    }
}

ll gcd(ll a, ll b) {
    while (b != 0) {
        ll temp = a % b;
        a = b;
        b = temp;
    }
    return a;
}

bool is_perfect(ll n) {
    ll i = sqrt(n);
    return i * i == n;
}

ul n, k;
ul sm, ans;
bool vis[len];
vi adj[len];

ll dfs(ll n, ll p) {
    if (vis[n])
        return 0;
    vis[n] = true;
    ll x = 1;
    for (auto u : adj[n]) 
        if (u != p)
            x += dfs(u, n);
    return x;
}

int main() {
    cin >> n >> k;
    for (ll i = 1; i < n; ++i) {
        ll u, v, x;
        cin >> u >> v >> x;
        if (!x) {
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
    }
    for (ll i = 1; i <= n; ++i) {
        if (!vis[i]) {
            sm += mod_pow(dfs(i, -1), k, mod);
            sm = mod_(sm, mod);
        }
    }
    ans = mod_pow(n, k, mod);
    cout << mod_(ans - sm, mod);
    return 0;
}
```