#include <iostream>
#include <vector>
#include <cstring>

#define MOD 1000000007
#define MAXN 1000006

typedef long long ll;

bool isPrime[MAXN];
std::vector<ll> adj[MAXN];
bool visited[MAXN];
ll dp[MAXN];

ll quickPow(ll a, ll b, ll m) {
  ll ret = 1;
  while (b) {
    if (b & 1) ret = ret * a % m;
    a = a * a % m;
    b >>= 1;
  }
  return ret;
}

void sieve() {
  memset(isPrime, true, sizeof(isPrime));
  isPrime[0] = isPrime[1] = false;
  for (int p = 2; p * p <= MAXN; p++) {
    if (isPrime[p]) {
      for (int i = p * p; i <= MAXN; i += p)
        isPrime[i] = false;
    }
  }
}

ll dfs(int node, int parent) {
  if (visited[node]) return dp[node];
  visited[node] = true;
  dp[node] = 1;
  for (auto child : adj[node]) {
    if (child != parent)
      dp[node] = (dp[node] + dfs(child, node)) % MOD;
  }
  return dp[node];
}

int main() {
  int n, k;
  std::cin >> n >> k;
  sieve();
  for (int i = 1; i < n; i++) {
    ll u, v, x;
    std::cin >> u >> v >> x;
    if (x == 0) {
      adj[u].push_back(v);
      adj[v].push_back(u);
    }
  }
  ll total = 0;
  for (int i = 1; i <= n; i++) {
    if (!visited[i]) {
      total = (total + quickPow(dfs(i, -1), k, MOD)) % MOD;
    }
  }
  ll ans = (quickPow(n, k, MOD) + MOD - total) % MOD;
  std::cout << ans << "\n";
  return 0;
}