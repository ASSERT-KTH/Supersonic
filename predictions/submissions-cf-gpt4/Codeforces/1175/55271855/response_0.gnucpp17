#include <iostream>
#include <algorithm>

using namespace std;
typedef long long ll;

ll lcm(ll a, ll b) { return a * b / __gcd(a, b); }

int const MAX = (1 << 19);
int A[MAX];
int dp[MAX][19];

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);

  int n, m, i;
  cin >> n >> m;

  for(i = 0; i < MAX; i++) A[i] = i;

  for(i = 0; i < n; i++) {
    int x, y;
    cin >> x >> y;
    A[x] = max(A[x], y);
  }

  dp[0][0] = A[0];
  for (int i = 1; i < (1 << 19); i++) {
    dp[i][0] = A[i] = max(A[i], A[i - 1]);
  }

  for (int j = 1; j < 19; j++) {
    for (int i = 0; i < MAX; i++) {
      dp[i][j] = dp[dp[i][j - 1]][j - 1];
    }
  }

  while (m--) {
    int l, r, nb = 0;
    cin >> l >> r;
    for (int j = 18; j >= 0; j--) {
      if (dp[l][j] < r) {
        nb += 1 << j;
        l = dp[l][j];
      }
    }
    if (dp[l][0] >= r)
      nb++;
    else
      nb = -1;
    cout << nb << "\n";
  }
  return 0;
}