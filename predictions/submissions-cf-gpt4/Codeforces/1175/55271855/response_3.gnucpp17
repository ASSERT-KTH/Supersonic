#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
typedef long long ll;
const int MAX = (1 << 19);
int A[MAX];
int dp[MAX][19];
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, m;
  cin >> n >> m;
  fill(A, A + MAX, 0);
  for (int i = 0; i < n; i++) {
    int x, y;
    cin >> x >> y;
    A[x] = max(A[x], y);
  }
  dp[0][0] = A[0];
  for (int i = 1; i < MAX; i++) {
    A[i] = max(A[i], A[i - 1]);
    dp[i][0] = A[i];
  }
  for (int j = 1; j < 19; j++) {
    for (int i = 0; i + (1 << j) <= MAX; i++) {
      dp[i][j] = max(dp[i][j - 1], dp[i + (1 << (j - 1))][j - 1]);
    }
  }
  while (m--) {
    int l, r;
    cin >> l >> r;
    int res = 0;
    for (int j = 18; j >= 0; j--) {
      if (dp[l][j] < r) {
        res += 1 << j;
        l += 1 << j;
      }
    }
    if (dp[l][0] >= r)
      res++;
    else
      res = -1;
    cout << res << "\n";
  }
  return 0;
}