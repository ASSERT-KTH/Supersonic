#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define FOR(i, a, n) for (ll i = (ll)a; i < (ll)n; ++i)
#define REP(i, n) FOR(i, 0, n)

const int INF = 1 << 30;
const ll LLINF = 1LL << 60;
const ll MOD = 1000000007;

ll u[4010][4010], W[4010][4010];

vector<vector<ll>> divide_and_conquer(ll h, ll w, const auto &f) {
  vector<vector<ll>> dp(h, vector<ll>(w, LLINF));
  dp[0][0] = f(0, 0);
  for (ll i = 0; i < h; ++i) {
    for (ll j = 0; j < w; ++j) {
      if (i + 1 < h) dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + f(i + 1, j));
      if (j + 1 < w) dp[i][j + 1] = min(dp[i][j + 1], dp[i][j] + f(i, j + 1));
    }
  }
  return dp;
}

void solve(int n, int k) {
  REP(i, n) {
    REP(j, n) {
      u[i][j] = getchar() - '0';
      getchar();
    }
  }
  FOR(w, 1, n + 1) {
    for (int l = 0, r = l + w; r < n; ++l, ++r) {
      W[l][r] = u[l][r];
      if (w >= 2)
        W[l][r] += W[l + 1][r] + W[l][r - 1] - W[l + 1][r - 1];
    }
  }
  auto f = [&](ll i, ll j) { return W[i][j]; };
  auto dp = divide_and_conquer(n, n, f);
  cout << dp[k - 1][n - 1] << endl;
}

int main(void) {
  int n, k;
  scanf("%d %d ", &n, &k);
  solve(n, k);
  return 0;
}