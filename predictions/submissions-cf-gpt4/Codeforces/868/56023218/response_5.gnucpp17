#include <bits/stdc++.h>
#define REP(i, n) for (ll i = 0; i < (n); ++i)
#define FOR(i, a, n) for (ll i = (a); i < (n); ++i)
using ll = long long;
constexpr ll INF = 1LL << 60;
constexpr ll MOD = 1000000007;

template <typename T>
vector<vector<T>> divide_and_conquer(ll h, ll w, const auto &f) {
  vector<vector<T>> dp(h, vector<T>(w, INF));
  REP(i, w) dp[0][i] = f(0, i);
  FOR(i, 1, h) REP(j, w) dp[i][j] = INF;

  function<void(ll, ll, ll, ll, ll)> dfs = [&](ll i, ll l, ll r, ll optl,
                                               ll optr) {
    if (l > r)
      return;
    ll mid = (l + r) >> 1, optm = -1;
    FOR(j, optl, min(mid, optr) + 1) {
      T cost = dp[i][j] + f(j + 1, mid);
      if (cost < dp[i + 1][mid]) {
        dp[i + 1][mid] = cost;
        optm = j;
      }
    }
    dfs(i, l, mid - 1, optl, optm);
    dfs(i, mid + 1, r, optm, optr);
  };

  REP(i, h - 1) dfs(i, 0, w - 1, 0, w - 1);
  return dp;
}

void solve() {
  ll N, K;
  std::cin >> N >> K;
  vector<ll> A(N);
  REP(i, N) {
    std::cin >> A[i];
    --A[i];
  }
  ll L = 0, R = 0, sum = 0;
  vector<ll> appear(N);
  appear[A[0]]++;
  auto add = [&](ll idx) { sum += appear[A[idx]]++; };
  auto del = [&](ll idx) { sum -= --appear[A[idx]]; };
  auto f = [&](ll l, ll r) {
    while (L > l)
      add(--L);
    while (R < r)
      add(++R);
    while (L < l)
      del(L++);
    while (R > r)
      del(R--);
    return sum;
  };
  auto dp = divide_and_conquer<ll>(K, N, f);
  std::cout << dp[K - 1][N - 1] << std::endl;
}

int main() {
  solve();
  return 0;
}