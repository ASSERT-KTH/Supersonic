```C++
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int INF = 1 << 30;
const ll LLINF = 1LL << 60;

vector<vector<ll>> divide_and_conquer(int h, int w, const function<ll(int, int)> &f) {
  vector<vector<ll>> dp(h, vector<ll>(w, LLINF));
  vector<vector<int>> opt(h, vector<int>(w));
  for(int i=0; i<w; i++) {
    dp[0][i] = f(0, i);
    opt[0][i] = 0;
  }
  for(int i=1; i<h; i++) {
    deque<pair<ll, int>> deq;
    deq.push_back({dp[i-1][0], 0});
    for(int j=0; j<w; j++) {
      while(!deq.empty() && deq.front().second < opt[i-1][j]) deq.pop_front();
      dp[i][j] = deq.front().first + f(deq.front().second+1, j);
      opt[i][j] = deq.front().second;
      ll val = dp[i-1][j+1] - f(j+1, j+1);
      while(!deq.empty() && deq.back().first >= val) deq.pop_back();
      deq.push_back({val, j+1});
    }
  }
  return dp;
}

int main(void) {
  int n, k;
  cin >> n >> k;
  vector<vector<int>> u(n, vector<int>(n)), W(n, vector<int>(n));
  for(int i=0; i<n; i++) {
    for(int j=0; j<n; j++) {
      scanf("%1d", &u[i][j]);
    }
  }
  for(int w=1; w<=n; w++) {
    for(int l=0, r=l+w; r<n; ++l, ++r) {
      W[l][r] = u[l][r];
      if(w >= 2) W[l][r] += W[l+1][r] + W[l][r-1] - W[l+1][r-1];
    }
  }
  auto dp = divide_and_conquer(k, n, [&](int i, int j){ return W[i][j]; });
  cout << dp[k-1][n-1] << endl;
  return 0;
}
```