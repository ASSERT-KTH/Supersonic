#define __IceQuarze__
#ifdef __IceQuarze__
#include <algorithm>
#include <vector>
#include <unordered_set>
#include <iostream>
#define pb push_back
#define ins insert
#define es erase
#define bg begin()
#define ed end()
#define vl vector<ll>
#define usl unordered_set<ll>
typedef long long int ll;
using namespace std;
template <typename T> void gi(T &value) { std::cin >> value; }
template <typename T, typename... Args> void gi(T &value, Args &... args) {
  std::cin >> value;
  gi(args...);
}
template <typename T> void _po(const vector<T> &v) {
  for (auto &t : v) {
    cout << t << " ";
  }
  cout << endl;
}
template <typename T> void _po(const T &value) {
  std::cout << value << std::endl;
}
template <typename T, typename... Args>
void _po(const T &value, const Args &... args) {
  std::cout << value << " ";
  _po(args...);
}
template <typename... Args> void po(const Args &... args) {
#ifdef __DEBUG__
  std::cout << "> ";
#endif
  _po(args...);
}
#endif
int main() {
  ll n, t;
  gi(n);
  vl va(n), vb(n);
  for (ll &i : va) gi(i);
  for (ll &i : vb) gi(i);

  usl stb(vb.begin(), vb.end());

  vl vc(n);
  for (ll i = 0; i < n; ++i) {
    auto it = stb.lower_bound((n - va[i]) % n);
    if (it != stb.ed && (*it + va[i]) % n < (*stb.bg + va[i]) % n) {
      vc[i] = (*it + va[i]) % n;
      stb.es(it);
    } else {
      vc[i] = (*stb.bg + va[i]) % n;
      stb.es(stb.bg);
    }
  }
  po(vc);
  return 0;
}