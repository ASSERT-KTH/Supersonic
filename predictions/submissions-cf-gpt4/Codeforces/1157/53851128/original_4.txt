```cpp
#define __IceQuarze__
#ifdef __IceQuarze__
#include <algorithm>
#include <iostream>
#include <set>
#include <vector>
typedef long long int ll;
using namespace std;
#define pb push_back
#define ins insert
#define es erase
#define bg begin()
#define ed end()
#define vl vector<ll>
#define msl multiset<ll>
template <typename T> void gi(T &value) { std::cin >> value; }
template <typename T, typename... Args> void gi(T &value, Args &... args) {
  std::cin >> value;
  gi(args...);
}
template <typename T> void _po(const vector<T> &v) {
  for (auto &t : v) {
    cout << t << " ";
  }
  cout << endl;
}
template <typename T> void _po(const T &value) {
  std::cout << value << std::endl;
}
template <typename T, typename... Args>
void _po(const T &value, const Args &... args) {
  std::cout << value << " ";
  _po(args...);
}
template <typename... Args> void po(const Args &... args) {
  _po(args...);
}
#endif
int main() {
  ll n, t;
  gi(n);
  vl va(n), vb(n);
  for (ll i = 0; i < n; ++i) {
    gi(t);
    va[i] = t;
  }
  for (ll i = 0; i < n; ++i) {
    gi(t);
    vb[i] = t;
  }
  msl stb(vb.begin(), vb.end());
  vl vc(n);
  for (auto i : va) {
    auto it = stb.lower_bound((n - i) % n);
    if (it != stb.ed && (*it + i) % n < (*stb.bg + i) % n) {
      vc.pb((*it + i) % n);
      stb.es(it);
    } else {
      vc.pb((*stb.bg + i) % n);
      stb.es(stb.bg);
    }
  }
  po(vc);
  return 0;
}
```