#include <algorithm>
#include <iostream>
#include <vector>
#include <set>
typedef long long int ll;
using namespace std;

template <typename T> void gi(T &value) { std::cin >> value; }
template <typename T, typename... Args> void gi(T &value, Args &... args) {
  std::cin >> value;
  gi(args...);
}

template <typename T> void po(const vector<T> &v) {
  for (auto &t : v) {
    cout << t << " ";
  }
  cout << endl;
}

int main() {
  ll n, t;
  gi(n);
  vector<ll> va(n), vb(n), vc(n);
  for (ll i = 0; i < n; ++i) {
    gi(t);
    va[i] = t;
  }
  for (ll i = 0; i < n; ++i) {
    gi(t);
    vb[i] = t;
  }
  multiset<ll> stb(vb.begin(), vb.end());
  for (auto i : va) {
    auto it = stb.lower_bound((n - i) % n);
    if (it == stb.end()) it = stb.begin();
    vc.push_back((*it + i) % n);
    stb.erase(it);
  }
  po(vc);
  return 0;
}