#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef array<int, 2> ar;
#define pb push_back
#define all(v) (v).begin(), (v).end()
#define sz(x) (int)(x).size()

struct digraph {
  int n;
  vector<vi> adj, adj2;
  digraph(int _n, vector<ar> &e) {
    n = _n;
    adj = vector<vi>(n);
    adj2 = vector<vi>(n);
    for(auto &a : e) {
      adj[a[0]].pb(a[1]);
      adj2[a[1]].pb(a[0]);
    }
  }
  vi toposort() {
    vi d(n);
    queue<int> qu;
    for(int i = 0; i < n; i++) {
      d[i] = sz(adj2[i]);
      if (!d[i])
        qu.push(i);
    }
    vi ans;
    while (qu.size()) {
      int u = qu.front();
      qu.pop();
      for(auto &v : adj[u]) {
        --d[v];
        if (!d[v])
          qu.push(v);
      }
      ans.pb(u);
    }
    if (sz(ans) < n)
      ans.clear();
    return ans;
  }
};

void solve() {
  int n;
  cin >> n;
  vi a(n), b(n);
  for(auto &val : a) cin >> val;
  for(auto &val : b) cin >> val;
  vector<ar> e;
  for(int i = 0; i < n; i++)
    if (~b[i])
      e.pb({i, b[i] - 1});
  digraph g(n, e);
  ll ans = 0;
  vi t = g.toposort(), ans1, d;
  for(auto &x : t) {
    if (a[x] > 0) {
      ans1.pb(x+1);
      ans += a[x];
      if (b[x] >= 0)
        a[b[x] - 1] += a[x];
    } else
      d.pb(x+1);
  }
  for(auto it = d.rbegin(); it != d.rend(); it++)
    ans += a[*it-1], ans1.pb(*it);
  cout << ans << "\n";
  for(auto &val : ans1) cout << val << " ";
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  solve();
  return 0;
}