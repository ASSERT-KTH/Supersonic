#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<ll> vec;
typedef vector<vec> mat;
#define pb(a) push_back(a)
#define INF (1ll << 60)
#define rep(i, n) for(ll i = 0; i < (n); ++i)

void solve() {
  ll n;
  cin >> n;
  vec a(n), b(n);
  rep(i, n) cin >> a[i];
  rep(i, n) {
    cin >> b[i];
    if (b[i] != -1) {
      --b[i];
    }
  }
  vec indeg(n, 0);
  vec outdeg(n, 0);
  vec edge(n, -1);
  rep(i, n) {
    if (b[i] != -1) {
      edge[i] = b[i];
      ++indeg[b[i]];
      ++outdeg[i];
    }
  }
  vec res;
  vec ans;
  rep(i, n) {
    if (indeg[i] == 0 && a[i] >= 0) {
      res.push_back(i);
    }
  }
  while (!res.empty()) {
    ll v = res.back();
    res.pop_back();
    ans.push_back(v);
    if (edge[v] != -1) {
      a[edge[v]] += a[v];
      --indeg[edge[v]];
      if (indeg[edge[v]] == 0 && a[edge[v]] >= 0) {
        res.push_back(edge[v]);
      }
    }
  }
  vec neg;
  rep(i, n) {
    if (indeg[i] == 0 && a[i] < 0) {
      neg.push_back(i);
    }
  }
  while (!neg.empty()) {
    ll v = neg.back();
    neg.pop_back();
    ans.push_back(v);
    if (edge[v] != -1) {
      --indeg[edge[v]];
      if (indeg[edge[v]] == 0 && a[edge[v]] < 0) {
        neg.push_back(edge[v]);
      }
    }
  }
  ll sum = 0;
  for (auto v : ans) {
    sum += a[v];
  }
  cout << sum << "\n";
  for (auto v : ans) {
    cout << v + 1 << " ";
  }
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  solve();
  return 0;
}