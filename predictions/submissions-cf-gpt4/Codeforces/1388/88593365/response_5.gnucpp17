#include <bits/stdc++.h>
using namespace std;
#define int long long
const int MAXN = 1e5 + 5;
vector<int> edge[MAXN], rev[MAXN], order, component;
int visited[MAXN], comp[MAXN];
int arr[MAXN], sum[MAXN], dp[MAXN];
bool instack[MAXN];
stack<int> s;
int counter = 0;

void dfs(int node) {
    visited[node] = 1;
    for (auto child : edge[node]) {
        if (!visited[child]) {
            dfs(child);
        }
    }
    order.push_back(node);
}

void dfs1(int node) {
    visited[node] = 0;
    comp[node] = counter;
    sum[counter] += arr[node];
    component.push_back(node);
    for (auto child : rev[node]) {
        if (visited[child]) {
            dfs1(child);
        }
    }
}

void dfs2(int node) {
    visited[node] = 1;
    for (auto child : edge[node]) {
        if (!visited[child]) {
            dfs2(child);
        }
        dp[node] = max(dp[node], dp[child]);
    }
    dp[node] += sum[node];
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        x--;
        if (x != -1) {
            edge[i].push_back(x);
            rev[x].push_back(i);
        }
    }
    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            dfs(i);
        }
    }
    for (int i = n - 1; i >= 0; i--) {
        if (visited[order[i]]) {
            dfs1(order[i]);
            counter++;
        }
    }
    for (int i = 0; i < n; i++) {
        visited[i] = 0;
    }
    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            dfs2(i);
        }
    }
    int ans = *max_element(dp, dp + n);
    cout << ans << "\n";
    return 0;
}