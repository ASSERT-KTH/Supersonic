#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define vi vector
#define pb push_back
#define all(v) (v).begin(), (v).end()

long const M = 1e9 + 7;
const ll INF = 1e18;
const long mxN = 1e5 + 2;

struct digraph {
  int n;
  vi<vi<int>> adj;
  digraph(int _n, vi<array<int, 2>> &e) {
    n = _n;
    adj = vi<vi<int>>(n);
    for (auto a : e) {
      adj[a[0]].pb(a[1]);
    }
  }
  vi<int> toposort() {
    vi<int> d(n), ans;
    queue<int> qu;
    for (int i = 0; i < n; ++i) {
      d[i] = adj[i].size();
      if (!d[i])
        qu.push(i);
    }
    while (!qu.empty()) {
      int u = qu.front();
      qu.pop();
      for (auto v : adj[u]) {
        --d[v];
        if (!d[v])
          qu.push(v);
      }
      ans.pb(u);
    }
    if (ans.size() < n)
      ans.clear();
    return ans;
  }
};

void solve() {
  int n;
  cin >> n;
  vi<int> a(n), b(n);
  for (auto &x : a) cin >> x;
  for (auto &x : b) cin >> x;
  vi<array<int, 2>> e;
  for (int i = 0; i < n; ++i)
    if (b[i] >= 0)
      e.pb({i, b[i] - 1});
  digraph g(n, e);
  int ans = 0;
  vi<int> t = g.toposort(), ans1, d;
  for (auto x : t) {
    if (a[x] > 0) {
      ans1.pb(x + 1);
      ans += a[x];
      if (b[x] >= 0)
        a[b[x] - 1] += a[x];
    } else
      d.pb(x);
  }
  for (auto rit = d.rbegin(); rit != d.rend(); ++rit) {
    ans += a[*rit];
    ans1.pb(*rit + 1);
  }
  cout << ans << "\n";
  for (auto x : ans1) cout << x << " ";
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  solve();
  return 0;
}