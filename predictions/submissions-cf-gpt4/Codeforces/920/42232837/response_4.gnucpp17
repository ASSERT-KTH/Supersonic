#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <cstring>

using namespace std;

const int maxn = 1.8e7;
bool pr[maxn + 100];
vector<long long> pint, f;

void sieve() {
    memset(pr, true, sizeof(pr));
    pr[0] = pr[1] = false;
    for (int p=2; p*p<=maxn; p++) {
        if (pr[p]) {
            for (int i=p*p; i<=maxn; i += p)
                pr[i] = false;
        }
    }
    for (int i = 2; i <= maxn; i++)
        if (pr[i])
            pint.push_back(i);
}

void fac(int x) {
    f.clear();
    for (int i = 0; i < pint.size() && pint[i] * pint[i] <= x; i++) {
        if (x % pint[i] == 0) {
            f.push_back(pint[i]);
            while (x % pint[i] == 0)
                x /= pint[i];
        }
    }
    if (x != 1) 
        f.push_back(x);
}

int solve(int val) {
    int ret = 0, lim = 1 << f.size();
    for (int j = 1; j < lim; j++) {
        int tp = 1, ct = 0;
        for (int i = 0; i < (int)f.size(); i++) {
            if ((j >> i) & 1) {
                tp *= f[i];
                ct++;
            }
        }
        ret += (ct % 2 ? 1 : -1) * val / tp;
    }
    return val - ret;
}

int main() {
    sieve();
    int cas, x, p, k;
    scanf("%d",&cas);
    while (cas--) {
        scanf("%d%d%d", &x, &p, &k);
        fac(p);
        int a1 = solve(x), L = x+1, R = maxn, ans = 0;
        while (L <= R) {
            int mid = (L + R) / 2;
            int val = solve(mid) - a1;
            if (val >= k) {
                ans = mid;
                R = mid - 1;
            } else {
                L = mid + 1;
            }
        }
        printf("%d\n", ans);
    }
    return 0;
}