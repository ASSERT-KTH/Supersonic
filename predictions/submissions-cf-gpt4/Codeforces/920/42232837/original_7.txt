```cpp
#include <vector>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;

const int maxn = 1.8e7;
vector<int> primes;
bool is_prime[maxn + 100];
vector<int> factors;

void sieve() {
    memset(is_prime, true, sizeof(is_prime));
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i * i <= maxn; ++i) {
        if (is_prime[i]) {
            for (int j = i * i; j <= maxn; j += i) {
                is_prime[j] = false;
            }
        }
    }
    for (int i = 2; i <= maxn; i++) {
        if (is_prime[i]) {
            primes.push_back(i);
        }
    }
}

void factorize(int x) {
    factors.clear();
    for (auto i : primes) {
        if (i * i > x)
            break;
        if (x % i == 0) {
            factors.push_back(i);
            while (x % i == 0)
                x /= i;
        }
    }
    if (x != 1)
        factors.push_back(x);
}

int solve(int val) {
    int ret = 0;
    int lim = 1 << factors.size();
    for (int j = 1; j < lim; ++j) {
        int product = 1, count = 0;
        for (int i = 0; i < (int)factors.size(); ++i) {
            if ((j >> i) & 1) {
                product *= factors[i];
                count++;
            }
        }
        ret += (count % 2 ? 1 : -1) * val / product;
    }
    return val - ret;
}

int main() {
    sieve();
    int test_cases, x, p, k;
    scanf("%d", &test_cases);
    while (test_cases--) {
        scanf("%d%d%d", &x, &p, &k);
        factorize(p);
        int initial = solve(x), L = x + 1, R = maxn, result = 0;
        while (L <= R) {
            int mid = (L + R) / 2;
            int val = solve(mid) - initial;
            if (val >= k) {
                result = mid;
                R = mid - 1;
            } else {
                L = mid + 1;
            }
        }
        printf("%d\n", result);
    }
    return 0;
}
```