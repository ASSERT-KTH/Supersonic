#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;

class Graph {
public:
    int n;
    vector<vi> adjList;
    Graph(int nodeNumber) : n(nodeNumber), adjList(n + 1) {}

    void addEdge(int a, int b) {
        adjList[a].push_back(b);
        adjList[b].push_back(a);
    }

    ll findAnswer() {
        vector<int> color(n + 1, -1);
        vector<ll> powerOfTwo(n + 1);
        powerOfTwo[0] = 1;
        for (int i = 1; i <= n; ++i) {
            powerOfTwo[i] = powerOfTwo[i-1] * 2 % 998244353;
        }
        ll totalWays = 1;
        for (int c = 1; c <= n; ++c) {
            if (color[c] == -1) {
                vector<int> colorCount(2, 0);
                queue<int> q;
                q.push(c);
                color[c] = 0;
                ++colorCount[0];
                while (!q.empty()) {
                    int node = q.front();
                    q.pop();
                    for (int neighbor : adjList[node]) {
                        if (color[neighbor] == -1) {
                            color[neighbor] = color[node] ^ 1;
                            ++colorCount[color[neighbor]];
                            q.push(neighbor);
                        } else if (color[neighbor] == color[node]) {
                            return 0;
                        }
                    }
                }
                totalWays = totalWays * (powerOfTwo[colorCount[0]] + powerOfTwo[colorCount[1]]) % 998244353;
            }
        }
        return totalWays;
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        Graph g(n);
        for (int c = 0; c < m; c++) {
            int u, v;
            cin >> u >> v;
            g.addEdge(u, v);
        }
        cout << g.findAnswer() << "\n";
    }
}