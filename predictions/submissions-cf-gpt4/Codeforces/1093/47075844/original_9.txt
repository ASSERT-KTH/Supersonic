```c++
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<ll> vi;
vector<vi> adj;
vector<ll> color;
vector<ll> grcol;
vector<ll> powr;
bool bfs(int node) {
    queue<int> q;
    color[node] = 1;
    q.push(node);
    while (!q.empty()) {
        int cur = q.front();
        q.pop();
        for (auto child : adj[cur]) {
            if (!color[child]) {
                color[child] = 3 - color[cur];
                grcol[color[child]]++;
                q.push(child);
            } else if (color[child] == color[cur]) {
                return false;
            }
        }
    }
    return true;
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    powr.resize(3 * 100000);
    ll k = 1;
    for (int c = 0; c < 3 * 100000; c++) {
        powr[c] = k;
        k = (k * 2) % 998244353;
    }
    int tests;
    cin >> tests;
    while (tests--) {
        int n, m;
        cin >> n >> m;
        adj = vector<vi>(n + 1);
        color = vector<ll>(n + 1);
        grcol = vector<ll>(3);
        grcol[1] = 1;
        ll result = 1;
        for (int c = 0; c < m; c++) {
            int a, b;
            cin >> a >> b;
            adj[a].push_back(b);
            adj[b].push_back(a);
        }
        for (int i = 1; i <= n; i++) {
            if (!color[i]) {
                if (!bfs(i)) {
                    result = 0;
                    break;
                }
                result = (result * (powr[grcol[1]] + powr[grcol[2]])) % 998244353;
                grcol[2] = 0;
                grcol[1] = 1;
            }
        }
        cout << result << endl;
    }
    return 0;
}
```