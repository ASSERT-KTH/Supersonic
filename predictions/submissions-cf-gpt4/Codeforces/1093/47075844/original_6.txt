```cpp
#include <bits/stdc++.h>
using namespace std;
typedef vector<int> vi;
typedef long long ll;
vector<string> split(const string &s, char c) {
  vector<string> v;
  stringstream ss(s);
  string x;
  while (getline(ss, x, c))
    v.emplace_back(x);
  return move(v);
}
template <typename T, typename... Args> inline string arrStr(T arr, int n) {
  stringstream s;
  s << "[";
  for (int i = 0; i < n - 1; i++)
    s << arr[i] << ",";
  s << arr[n - 1] << "]";
  return s.str();
}
#define debug(x)                                                               \
  { cerr << #x << " = " << x << endl; }
#define mod 998244353
#define MAX 20000000
#define test()                                                                 \
  long long o;                                                                 \
  cin >> o;                                                                    \
  while (o--)
#define pb push_back
#define sz(k) k.size()
#define F first
#define S second
#define mem(a, x) memset(a, x, sizeof(a))
#define pr(x) cout << fixed << setprecision(x);
template <class t = int> t get() {
  t a;
  std::cin >> a;
  return a;
}
int r, c, n, k;
vector<int> powr;
class graphNode {
public:
  vi adj;
  int a;
  graphNode() { a = 0; }
};
class graph {
public:
  int n;
  vector<graphNode> nodes;
  graph(int nodeNumber) {
    n = nodeNumber;
    nodes.resize(n + 1);
  }
  void addEdge(int a, int b) {
    nodes[a].adj.pb(b);
    nodes[b].adj.pb(a);
  }
  ll findans() {
    vector<bool> visited(n + 1, false);
    vi col(n + 1);
    vi grcol(3);
    grcol[1] = 1;
    ll res = 1;
    for (c = 1; c < n + 1; c++) {
      if (!visited[c]) {
        col[c] = 1;
        if (!bfs(c, col, visited, grcol)) {
          return 0;
        } else {
          res = (res * (powr[grcol[1]] + powr[grcol[2]])) % mod;
        }
        grcol[2] = 0;
        grcol[1] = 1;
      }
    }
    return res;
  }
  bool bfs(int p, vi &col, vector<bool> &visited, vi &grcol) {
    queue<int> q;
    visited[p] = true;
    q.push(p);
    while (!q.empty()) {
      int itr = q.front();
      q.pop();
      int chcol = (col[itr] == 2) ? 1 : 2;
      for (int i = 0; i < sz(nodes[itr].adj); i++) {
        k = nodes[itr].adj[i];
        if (col[k] == 0 || col[k] == chcol) {
          if (col[k] == 0) {
            col[k] = chcol;
            grcol[chcol]++;
          }
        } else
          return false;
        if (!visited[nodes[itr].adj[i]]) {
          visited[k] = true;
          q.push(k);
        }
      }
    }
    return true;
  }
};
int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  powr.resize(3 * 100000);
  ll k = 1;
  for (c = 0; c < 3 * 100000; c++) {
    powr[c] = k;
    k = (k * 2) % mod;
  }
  test() {
    int n, m;
    cin >> n >> m;
    graph mygraph(n);
    for (c = 0; c < m; c++) {
      mygraph.addEdge(get(), get());
    }
    cout << mygraph.findans() << endl;
  }
}
```