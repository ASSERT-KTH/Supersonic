```
#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pi;
typedef vector<int> vi;
typedef long long ll;

vector<string> split(const string &s, char c) {
  vector<string> v;
  stringstream ss(s);
  string x;
  while (getline(ss, x, c))
    v.emplace_back(std::move(x));
  return v;
}

class graph {
public:
  int n;
  vector<vector<int>> adj;
  vector<int> col;
  vector<int> powr;
  const int mod = 998244353;
  
  graph(int nodeNumber) {
    n = nodeNumber;
    adj.resize(n + 1);
    col.resize(n + 1);
    powr.resize(3 * 100000);
    ll k = 1;
    for (int c = 0; c < powr.size(); ++c) {
      powr[c] = k;
      k = (k * 2) % mod;
    }
  }

  void addEdge(int a, int b) {
    adj[a].push_back(b);
    adj[b].push_back(a);
  }

  ll findans() {
    vector<bool> visited(n + 1, false);
    vector<int> grcol(3);
    grcol[1] = 1;
    ll res = 1;
    for (int c = 1; c <= n; ++c) {
      if (!visited[c]) {
        col[c] = 1;
        if (!bfs(c, grcol)) {
          return 0;
        } else {
          res = (res * (powr[grcol[1]] + powr[grcol[2]])) % mod;
        }
        grcol[2] = 0;
        grcol[1] = 1;
      }
    }
    return res;
  }

  bool bfs(int p, vector<int> &grcol) {
    queue<int> q;
    visited[p] = true;
    q.push(p);
    while (!q.empty()) {
      int itr = q.front();
      q.pop();
      int chcol = (col[itr] == 2) ? 1 : 2;
      for (int i = 0; i < adj[itr].size(); ++i) {
        int k = adj[itr][i];
        if (col[k] == 0 || col[k] == chcol) {
          if (col[k] == 0) {
            col[k] = chcol;
            grcol[chcol]++;
          }
        } else
          return false;
        if (!visited[adj[itr][i]]) {
          visited[k] = true;
          q.push(k);
        }
      }
    }
    return true;
  }
};

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;
  while (t--) {
    int n, m;
    cin >> n >> m;
    graph mygraph(n);
    for (int c = 0; c < m; c++) {
      int u, v;
      cin >> u >> v;
      mygraph.addEdge(u, v);
    }
    cout << mygraph.findans() << '\n';
  }
  return 0;
}
```