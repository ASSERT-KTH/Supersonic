```c++
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  int n, k;
  cin >> n >> k;
  vector<vector<int>> a(n, vector<int>(k));
  
  for (auto &ai : a)
    for (auto &aij : ai)
      cin >> aij;

  vector<vector<int>> sum(n+1, vector<int>(1<<k));
  
  for (int i = 0; i < n; ++i)
    for (int mask = 0; mask < (1<<k); ++mask)
      for (int j = 0; j < k; ++j)
        sum[i+1][mask] = sum[i][mask] + a[i][j] * ((mask>>j&1)?1:-1);

  vector<vector<int>> dp(n+1, vector<int>(1<<k, -1e9));
  dp[0][0] = 0;
  
  for (int i = 0; i < n; ++i)
    for (int mask = 0; mask < (1<<k); ++mask)
      for (int submask = mask; ; submask = (submask-1)&mask) {
        dp[i+1][mask] = max(dp[i+1][mask], dp[i][mask^submask] + sum[i+1][submask]);
        if (submask == 0) break;
      }
  
  int q;
  cin >> q;
  
  while (q--) {
    int type;
    cin >> type;
    
    if (type == 1) {
      int i;
      cin >> i;
      --i;
      
      vector<int> b(k);
      for (auto &bj : b)
        cin >> bj;
      
      for (int mask = 0; mask < (1<<k); ++mask)
        for (int j = 0; j < k; ++j)
          sum[i+1][mask] = sum[i][mask] + b[j] * ((mask>>j&1)?1:-1);
      
      for (int mask = 0; mask < (1<<k); ++mask)
        for (int submask = mask; ; submask = (submask-1)&mask) {
          dp[i+1][mask] = max(dp[i+1][mask], dp[i][mask^submask] + sum[i+1][submask]);
          if (submask == 0) break;
        }
    } else {
      int l, r;
      cin >> l >> r;
      --l, --r;
      
      int ans = -1e9;
      for (int mask = 0; mask < (1<<k); ++mask)
        ans = max(ans, dp[r+1][mask] - sum[l][mask]);
      
      cout << ans << '\n';
    }
  }
}
```