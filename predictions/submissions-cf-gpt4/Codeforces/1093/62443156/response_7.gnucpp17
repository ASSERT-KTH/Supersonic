#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int n, k;
    cin >> n >> k;

    vector<vector<int>> a(n, vector<int>(k));
    for (auto &ai : a)
        for (int &aj : ai)
            cin >> aj;

    vector<vector<pair<int, int>>> trees(1 << k, vector<pair<int, int>>(n, {1e9, -1e9}));
    for (int mask = 0; mask < (1 << k); ++mask) {
        for (int i = 0; i < n; ++i) {
            int val = 0;
            for (int j = 0; j < k; ++j) {
                if (mask & (1 << j)) {
                    val += a[i][j];
                } else {
                    val -= a[i][j];
                }
            }
            trees[mask][i] = {min(val, trees[mask][i].first), max(val, trees[mask][i].second)};
        }
    }

    int q;
    cin >> q;
    while (q--) {
        int type;
        cin >> type;
        if (type == 1) {
            int i;
            cin >> i;
            --i;
            vector<int> b(k);
            for (int &bj : b)
                cin >> bj;

            for (int mask = 0; mask < (1 << k); ++mask) {
                int val = 0;
                for (int j = 0; j < k; ++j) {
                    if (mask & (1 << j)) {
                        val += b[j];
                    } else {
                        val -= b[j];
                    }
                }
                trees[mask][i] = {min(val, trees[mask][i].first), max(val, trees[mask][i].second)};
            }
        } else {
            int l, r;
            cin >> l >> r;
            --l, --r;
            int ans = -1e9;
            for (int mask = 0; mask < (1 << k); ++mask) {
                int minVal = 1e9, maxVal = -1e9;
                for (int i = l; i <= r; ++i) {
                    minVal = min(minVal, trees[mask][i].first);
                    maxVal = max(maxVal, trees[mask][i].second);
                }
                ans = max(ans, maxVal - minVal);
            }
            cout << ans << '\n';
        }
    }
    return 0;
}