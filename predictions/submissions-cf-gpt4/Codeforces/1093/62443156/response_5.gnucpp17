#include <vector>
#include <algorithm>
using namespace std;

template<typename T, typename JoinFn>
class seg_tree {
public:
    seg_tree(int n, const T &zero = T(), const JoinFn &join_fn = JoinFn())
        : join_fn_(join_fn), n_(n), data_(2 * n, zero) {}
    seg_tree(const vector<T> &data, const JoinFn &join_fn = JoinFn())
        : join_fn_(join_fn), n_((int) data.size()), data_(2 * n) {
        copy(data.begin(), data.end(), data_.begin() + n_);
        build();
    }

    void update(int pos, const T &val) {
        for (data_[pos += n_] = val; pos > 1; pos >>= 1)
            data_[pos >> 1] = join_fn_(data_[pos], data_[pos ^ 1]);
    }

    T query(int l, int r) const {
        T resl = data_[l += n_], resr = data_[++r += n_];
        for (; l < r; l >>= 1, r >>= 1) {
            if (l & 1) resl = join_fn_(resl, data_[l++]);
            if (r & 1) resr = join_fn_(data_[--r], resr);
        }
        return join_fn_(resl, resr);
    }
private:
    const JoinFn join_fn_;
    const int n_;
    vector<T> data_;

    void build() {
        for (int i = n_ - 1; i > 0; --i)
            data_[i] = join_fn_(data_[i << 1], data_[i << 1 | 1]);
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    int n, k;
    cin >> n >> k;
    vector<vector<int>> a(n, vector<int>(k));
    for (auto &ai : a)
        for (auto &aij : ai)
            cin >> aij;

    auto join = [](const pair<int, int> &a, const pair<int, int> &b) {
        return pair(min(a.first, b.first), max(a.second, b.second));
    };
    vector<seg_tree<pair<int, int>, decltype(join)>> trees;
    trees.reserve(1 << k);

    for (int mask = 0; mask < (1 << k); ++mask) {
        vector<pair<int, int>> vals(n);
        for (int i = 0; i < n; ++i) {
            int val = 0;
            for (int j = 0; j < k; ++j)
                val += ((mask >> j) & 1 ? a[i][j] : -a[i][j]);
            vals[i] = {val, val};
        }
        trees.emplace_back(vals, join);
    }

    int q;
    cin >> q;
    while (q--) {
        int type;
        cin >> type;
        if (type == 1) {
            int i;
            cin >> i;
            --i;
            vector<int> b(k);
            for (auto &bj : b)
                cin >> bj;
            for (int mask = 0; mask < (1 << k); ++mask) {
                int val = 0;
                for (int j = 0; j < k; ++j)
                    val += ((mask >> j) & 1 ? b[j] : -b[j]);
                trees[mask].update(i, {val, val});
            }
        } else {
            int l, r;
            cin >> l >> r;
            --l, --r;
            int ans = -1e9;
            for (auto &tree : trees) {
                auto a = tree.query(l, r);
                ans = max(ans, a.second - a.first);
            }
            cout << ans << '\n';
        }
    }
    return 0;
}