#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#define forn(k, n) for (int k = 0; k < (n); ++k)
#define all(c) begin(c), end(c)
template <class C> inline void log_c(const C &c) {
#ifdef LOCAL_PROJECT
  std::copy(
      std::begin(c), std::end(c),
      std::ostream_iterator<std::remove_reference_t<decltype(*std::begin(c))>>(
          std::clog, " "));
  std::clog << std::endl;
#endif
}
template <class C> inline int sz(const C &c) {
  return static_cast<int>(std::size(c));
}
using namespace std;
using pii = pair<int, int>;
const std::string eol = "\n";
void solve() {
  int n, d;
  cin >> n >> d;
  vector<bool> tab(100, false);
  forn(k, 10) { tab[k * 10 + d] = tab[d * 10 + k] = true; }
  for (int k = 0; k < 100; ++k) if (tab[k]) {
    for (int j = k; j < 100; j += k) { tab[j] = true; }
  }
  forn(k, n) {
    int ak;
    cin >> ak;
    cout << (ak < sz(tab) && tab[ak] ? "YES" : "NO") << eol;
  }
}
int main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int test_sample_count;
  cin >> test_sample_count;
  while (test_sample_count--) {
    solve();
  }
  return 0;
}