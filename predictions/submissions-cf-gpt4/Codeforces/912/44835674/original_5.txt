```c++
#ifndef NDEBUG
#define NDEBUG
#endif
#include <bits/stdc++.h>
#define cn const
#define cauto cn auto
#define FOR(i, from, to) for (int i = (from); i <= (to); ++i)
#define endl "\n"
#define mp make_pair
#define pb push_back
#define F first
#define S second
#define X F
#define Y S
#define CONT(c) begin(c), end(c)
#define ARR(a, sz) (a), ((a) + (sz))
using ll = long long;
using dd = long double;
#ifdef DBG
cn bool dbg = true;
#else
cn bool dbg = false;
#endif
template <typename T> constexpr T sqr(const T &x) { return x * x; }
ll rd() {
  ll x;
  std::cin >> x;
  assert(std::cin);
  return x;
}
cn int maxN = 16;
int p[maxN];
int n;
bool prime(int x) {
  if (x < 2) return false;
  if (x < 4) return true;
  if (x % 2 == 0 || x % 3 == 0) return false;
  for (int i = 5; i * i <= x; i += 6)
    if (x % i == 0 || x % (i + 2) == 0) return false;
  return true;
}
cn ll MAX = 1e18;
void safe_mul(ll &a, int b) {
  if (a <= MAX / b)
    a *= b;
  else
    a = -1;
}
void gen_all(cn std::vector<int> &src, std::vector<ll> &dest, ll cur = 1, int ind = 0) {
  if (ind == src.size()) {
    dest.pb(cur);
    return;
  }
  while (cur != -1) {
    gen_all(src, dest, cur, ind + 1);
    safe_mul(cur, src[ind]);
  }
}
std::vector<ll> A, B;
ll cnt(ll val) {
  int ind = B.size() - 1;
  ll res = 0;
  for (cauto e : A) {
    if (e > val)
      break;
    res += upper_bound(CONT(B), val / e) - begin(B);
  }
  return res;
}
int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cin >> n;
  FOR(i, 0, n-1)
  std::cin >> p[i];
  {
    cn int B_sz = 9;
    std::vector<int> pA;
    FOR(i, B_sz, n - 1)
    pA.pb(p[i]);
    gen_all(pA, A);
    std::vector<int> pB;
    FOR(i, 0, min(B_sz, n)-1)
    pB.pb(p[i]);
    gen_all(pB, B);
  }
  std::sort(CONT(A)), std::sort(CONT(B));
  cn int k = rd();
  ll l = 0, r = 1e18;
  while (l + 1 != r) {
    cauto m = (l + r) / 2;
    if (cnt(m) >= k)
      r = m;
    else
      l = m;
  }
  std::cout << r;
}
```