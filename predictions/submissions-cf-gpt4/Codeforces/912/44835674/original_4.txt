```cpp
#include <algorithm>
#include <iostream>
#include <vector>
#include <cmath>
#include <cassert>

using namespace std;

constexpr int maxN = 16;
int p[maxN];
int n;

bool prime(int x) {
  for (int d = 2, end = sqrt(x); d <= end; ++d)
    if (x % d == 0)
      return false;
  return true;
}

constexpr long long MAX = 1e18;
void safe_mul(long long &a, int b) {
  if (a <= MAX / b)
    a *= b;
  else
    a = -1;
}

void gen_all(const vector<int> &src, vector<long long> &dest, long long cur = 1, int ind = 0) {
  if (ind == src.size()) {
    dest.push_back(cur);
    return;
  }
  while (cur != -1) {
    gen_all(src, dest, cur, ind + 1);
    safe_mul(cur, src[ind]);
  }
}

long long cnt(long long val, const vector<long long>& A, const vector<long long>& B) {
  long long res = 0;
  for (const auto &e : A) {
    if (e > val)
      break;
    res += upper_bound(B.begin(), B.end(), val / e) - B.begin();
  }
  return res;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);

  cin >> n;
  for(int i=0; i<n; i++)
    cin >> p[i];

  vector<int> pA;
  for(int i = n-1; i >= n/2; --i)
    pA.push_back(p[i]);
  vector<long long> A;
  gen_all(pA, A);

  vector<int> pB;
  for(int i = 0; i < n/2; ++i)
    pB.push_back(p[i]);
  vector<long long> B;
  gen_all(pB, B);

  sort(A.begin(), A.end());
  sort(B.begin(), B.end());

  long long k;
  cin >> k;
  long long l = 0, r = 1e18;
  while (l + 1 != r) {
    auto m = (l + r) / 2;
    if (cnt(m, A, B) >= k)
      r = m;
    else
      l = m;
  }
  cout << r;
}
```