```C++
#include <bits/stdc++.h>
using namespace std;
using ll = long long;

const int maxN = 16;
int primes[maxN];
int n;

bool isPrime(int x) {
    for (int i = 2; i * i <= x; ++i)
        if (x % i == 0)
            return false;
    return true;
}

void generatePrimes() {
    int last = 1;
    for(int i = 0; i < maxN; ++i) {
        while (!isPrime(++last)) {}
        primes[i] = last;
    }
}

vector<ll> generateProducts(vector<int>& factors) {
    vector<ll> products = {1};
    for (int factor : factors) {
        int n = products.size();
        for (int i = 0; i < n; ++i) {
            ll product = products[i] * (ll)factor;
            if (product > 0 && product <= 1e18)
                products.push_back(product);
        }
    }
    return products;
}

ll countProductsLessThan(vector<ll>& A, vector<ll>& B, ll val) {
    int j = B.size();
    ll res = 0;
    for (ll a : A) {
        while (j > 0 && a * B[j-1] > val) --j;
        res += j;
    }
    return res;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n;
    for(int i = 0; i < n; ++i)
        cin >> primes[i];

    vector<int> factorsA(primes, primes+n/2);
    vector<int> factorsB(primes+n/2, primes+n);

    vector<ll> productsA = generateProducts(factorsA);
    vector<ll> productsB = generateProducts(factorsB);

    sort(productsA.begin(), productsA.end());
    sort(productsB.begin(), productsB.end());

    int k; cin >> k;

    ll l = 0, r = 1e18;
    while (l + 1 < r) {
        ll m = l + (r-l)/2;
        if (countProductsLessThan(productsA, productsB, m) >= k)
            r = m;
        else
            l = m;
    }

    cout << r;
}
```