```cpp
#include <iostream>
#include <string.h>
using namespace std;
int t, n, m, G;
char maze[51][51] = {0};
bool visited[51][51] = {0};

inline bool checkCondition(int r, int c) {
    return maze[r][c] == 'G' || (r == n && c == m && G > 0);
}

inline void blockCell(int r, int c) {
    if (maze[r][c] == '.')
        maze[r][c] = '#';
}

bool block(int r, int c) {
    if (r > 1 && (checkCondition(r - 1, c) || (maze[r - 1][c] == '.' && (blockCell(r - 1, c), true))))
        return false;
    if (r < n && (checkCondition(r + 1, c) || (maze[r + 1][c] == '.' && (blockCell(r + 1, c), true))))
        return false;
    if (c > 1 && (checkCondition(r, c - 1) || (maze[r][c - 1] == '.' && (blockCell(r, c - 1), true))))
        return false;
    if (c < m && (checkCondition(r, c + 1) || (maze[r][c + 1] == '.' && (blockCell(r, c + 1), true))))
        return false;
    return true;
}

void dfs(int r, int c) {
    if (r <= 0 || c <= 0 || r > n || c > m || maze[r][c] == '#' || visited[r][c])
        return;
    visited[r][c] = 1;
    if (maze[r][c] == 'G') {
        G--;
    }
    dfs(r + 1, c);
    dfs(r - 1, c);
    dfs(r, c + 1);
    dfs(r, c - 1);
}

int main() {
    cin >> t;
    while (t--) {
        cin >> n >> m;
        bool flag = false;
        G = 0;
        memset(visited, 0, sizeof(visited));
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= m; j++)
                cin >> maze[i][j];

        for (int i = 1; i <= n && !flag; i++)
            for (int j = 1; j <= m && !flag; j++)
                if (maze[i][j] == 'B' && !block(i, j)) {
                    cout << "No\n";
                    flag = true;
                    break;
                } else if (maze[i][j] == 'G') {
                    G++;
                }
        if (flag)
            continue;
        dfs(n, m);
        cout << (G == 0 ? "Yes\n" : "No\n");
    }
    return 0;
}
```