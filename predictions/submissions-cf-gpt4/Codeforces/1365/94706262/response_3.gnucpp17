#include <iostream>
#include <string.h>
using namespace std;
constexpr int MAX = 51;
int t, n, m, G;
char maze[MAX][MAX] = {0};
bool visited[MAX][MAX] = {0};

void block(int r, int c) {
  int dr[] = {-1, 1, 0, 0};
  int dc[] = {0, 0, -1, 1};
  for (int i = 0; i < 4; ++i) {
    int nr = r + dr[i], nc = c + dc[i];
    if (nr > 0 && nr <= n && nc > 0 && nc <= m && maze[nr][nc] == '.') {
      maze[nr][nc] = '#';
    }
  }
}

void dfs(int r, int c) {
  int dr[] = {-1, 1, 0, 0};
  int dc[] = {0, 0, -1, 1};
  visited[r][c] = 1;
  if (maze[r][c] == 'G') {
    --G;
  }
  for (int i = 0; i < 4; ++i) {
    int nr = r + dr[i], nc = c + dc[i];
    if (nr > 0 && nr <= n && nc > 0 && nc <= m && maze[nr][nc] != '#' && !visited[nr][nc]) {
      dfs(nr, nc);
    }
  }
}

int main() {
  cin >> t;
  while (t--) {
    cin >> n >> m;
    G = 0;
    memset(visited, 0, sizeof(visited));
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= m; j++) {
        cin >> maze[i][j];
        if (maze[i][j] == 'G') {
          ++G;
        }
      }
    }
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= m; j++) {
        if (maze[i][j] == 'B') {
          block(i, j);
        }
      }
    }
    dfs(n, m);
    cout << (G == 0 ? "Yes\n" : "No\n");
  }
  return 0;
}