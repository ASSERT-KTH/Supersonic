#include <iostream>
#include <cstring>

constexpr int MAX_SIZE = 51;

int t, n, m, G;
char maze[MAX_SIZE][MAX_SIZE];
bool visited[MAX_SIZE][MAX_SIZE];

inline bool block(int r, int c) {
    int dr[] = {-1, 1, 0, 0};
    int dc[] = {0, 0, -1, 1};
    
    for (int i = 0; i < 4; ++i) {
        int nr = r + dr[i], nc = c + dc[i];
        if (nr > 0 && nr <= n && nc > 0 && nc <= m) {
            if (maze[nr][nc] == 'G' || (nr == n && nc == m && G > 0)) {
                return false;
            }
            if (maze[nr][nc] == '.') {
                maze[nr][nc] = '#';
            }
        }
    }
    return true;
}

void dfs(int r, int c) {
    if (r <= 0 || c <= 0 || r > n || c > m || maze[r][c] == '#' || visited[r][c])
        return;

    visited[r][c] = true;
    if (maze[r][c] == 'G') {
        --G;
    }

    dfs(r + 1, c);
    dfs(r - 1, c);
    dfs(r, c + 1);
    dfs(r, c - 1);
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    std::cin >> t;
    while (t--) {
        std::cin >> n >> m;
        bool flag = false;
        G = 0;
        std::memset(visited, 0, sizeof(visited));

        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= m; ++j) {
                std::cin >> maze[i][j];
                if (maze[i][j] == 'G') {
                    ++G;
                }
            }
        }
        for (int i = 1; i <= n && !flag; ++i) {
            for (int j = 1; j <= m && !flag; j++) {
                if (maze[i][j] == 'B' && !block(i, j)) {
                    std::cout << "No\n";
                    flag = true;
                }
            }
        }
        if (!flag) {
            dfs(n, m);
            std::cout << (G == 0 ? "Yes\n" : "No\n");
        }
    }
    return 0;
}