```C++
#include <iostream>
#include <string.h>
using namespace std;
constexpr int MAX_SIZE = 51;
int t, n, m, G;
char maze[MAX_SIZE][MAX_SIZE] = {0};
bool visited[MAX_SIZE][MAX_SIZE] = {0};

inline void block(int r, int c) {
  if (maze[r - 1][c] == '.') maze[r - 1][c] = '#';
  if (maze[r + 1][c] == '.') maze[r + 1][c] = '#';
  if (maze[r][c - 1] == '.') maze[r][c - 1] = '#';
  if (maze[r][c + 1] == '.') maze[r][c + 1] = '#';
}

inline void dfs(int r, int c) {
  if (r <= 0 || c <= 0 || r > n || c > m || maze[r][c] == '#' || visited[r][c])
    return;
  visited[r][c] = 1;
  if (maze[r][c] == 'G') 
    G--;
  dfs(r + 1, c);
  dfs(r - 1, c);
  dfs(r, c + 1);
  dfs(r, c - 1);
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL);
  cin >> t;
  while (t--) {
    cin >> n >> m;
    G = 0;
    memset(visited, 0, sizeof(visited));
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= m; j++) {
        cin >> maze[i][j];
        if (maze[i][j] == 'B') block(i, j);
        else if (maze[i][j] == 'G') G++;
      }
    }
    dfs(n, m);
    cout << (G ? "No\n" : "Yes\n");
  }
  return 0;
}
```