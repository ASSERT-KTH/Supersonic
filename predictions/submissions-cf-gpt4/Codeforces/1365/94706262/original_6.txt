```C++
#include <iostream>
#include <string.h>
using namespace std;

constexpr int MAX_SIZE = 51;
char maze[MAX_SIZE][MAX_SIZE] = {0};
bool visited[MAX_SIZE][MAX_SIZE] = {0};
int t, n, m, G;

inline bool block(int r, int c) {
  int adjR[] = {-1, 1, 0, 0};
  int adjC[] = {0, 0, -1, 1};
  
  for (int i = 0; i < 4; ++i) {
    int newR = r + adjR[i];
    int newC = c + adjC[i];
    
    if (newR > 0 && newR <= n && newC > 0 && newC <= m) {
      if (maze[newR][newC] == 'G' || (newR == n && newC == m && G > 0)) {
        return false;
      }
      if (maze[newR][newC] == '.') {
        maze[newR][newC] = '#';
      }
    }
  }
  
  return true;
}

inline void dfs(int r, int c) {
  if (r <= 0 || c <= 0 || r > n || c > m)
    return;
  if (maze[r][c] == '#' || visited[r][c])
    return;
  visited[r][c] = 1;
  if (maze[r][c] == 'G') {
    G--;
  }
  dfs(r + 1, c);
  dfs(r - 1, c);
  dfs(r, c + 1);
  dfs(r, c - 1);
}

int main() {
  cin >> t;
  while (t--) {
    cin >> n >> m;
    G = 0;
    memset(visited, 0, sizeof(visited));
    
    for (int i = 1; i <= n; i++)
      for (int j = 1; j <= m; j++)
        cin >> maze[i][j];
        
    for (int i = 1; i <= n; i++) {
      bool flag = false;
      for (int j = 1; j <= m; j++) {
        if (maze[i][j] == 'B' && !block(i, j)) {
          cout << "No\n";
          flag = true;
          break;
        } else if (maze[i][j] == 'G') {
          G++;
        }
      }
      if (flag) break;
    }
    
    dfs(n, m);
    
    cout << (G == 0 ? "Yes\n" : "No\n");
  }
  return 0;
}
```