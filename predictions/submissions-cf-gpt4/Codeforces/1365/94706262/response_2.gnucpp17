#include <iostream>
#include <string.h>
using namespace std;
int t, n, m, G;
char maze[51][51] = {0};
bool visited[51][51] = {0};
bool block(int r, int c) {
  int dr[4] = {-1, 1, 0, 0};
  int dc[4] = {0, 0, -1, 1};
  for (int i = 0; i < 4; i++) {
    int nr = r + dr[i], nc = c + dc[i];
    if (nr > 0 && nc > 0 && nr <= n && nc <= m) {
      if (maze[nr][nc] == 'G' || (nr == n && nc == m && G > 0)) {
        return false;
      }
      if (maze[nr][nc] == '.') {
        maze[nr][nc] = '#';
      }
    }
  }
  return true;
}
void dfs(int r, int c) {
  if (r <= 0 || c <= 0 || r > n || c > m || maze[r][c] == '#' || visited[r][c])
    return;
  visited[r][c] = 1;
  if (maze[r][c] == 'G') {
    G--;
  }
  dfs(r + 1, c);
  dfs(r - 1, c);
  dfs(r, c + 1);
  dfs(r, c - 1);
}
int main() {
  cin >> t;
  while (t--) {
    cin >> n >> m;
    bool flag = false;
    G = 0;
    memset(visited, 0, sizeof(visited));
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= m; j++) {
        cin >> maze[i][j];
        if(maze[i][j] == 'G') G++;
      }
    }
    for (int i = 1; i <= n && !flag; i++) {
      for (int j = 1; j <= m && !flag; j++) {
        if (maze[i][j] == 'B' && !block(i, j)) {
            cout << "No\n";
            flag = true;
        }
      }
    }
    if (!flag) {
      dfs(n, m);
      cout << (G == 0 ? "Yes\n" : "No\n");
    }
  }
  return 0;
}