#include <iostream>
#include <string.h>
using namespace std;
constexpr int SIZE = 51;
char maze[SIZE][SIZE] = {0};
bool visited[SIZE][SIZE] = {0};
int t, n, m, G;

inline void blockPath(int r, int c, const char &symbol) {
    if (maze[r][c] == '.' && !(r == n && c == m && G > 0)) {
        maze[r][c] = symbol;
    }
}

bool block(int r, int c) {
    if (r > 1) {
        if (maze[r - 1][c] == 'G') return false;
        blockPath(r - 1, c, '#');
    }
    if (r < n) {
        if (maze[r + 1][c] == 'G') return false;
        blockPath(r + 1, c, '#');
    }
    if (c > 1) {
        if (maze[r][c - 1] == 'G') return false;
        blockPath(r, c - 1, '#');
    }
    if (c < m) {
        if (maze[r][c + 1] == 'G') return false;
        blockPath(r, c + 1, '#');
    }
    return true;
}

void dfs(int r, int c) {
    if (r <= 0 || c <= 0 || r > n || c > m || maze[r][c] == '#' || visited[r][c]) return;
    visited[r][c] = 1;
    if (maze[r][c] == 'G') G--;
    dfs(r + 1, c);
    dfs(r - 1, c);
    dfs(r, c + 1);
    dfs(r, c - 1);
}

int main() {
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> t;
    while (t--) {
        cin >> n >> m;
        bool flag = false;
        G = 0;
        memset(visited, 0, sizeof(visited));
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                cin >> maze[i][j];
                if (maze[i][j] == 'B' && !block(i, j)) {
                    flag = true;
                } else if (maze[i][j] == 'G') {
                    G++;
                }
            }
            if (flag) break;
        }
        if (flag) {
            cout << "No\n";
            continue;
        }
        dfs(n, m);
        cout << (G == 0 ? "Yes\n" : "No\n");
    }
    return 0;
}