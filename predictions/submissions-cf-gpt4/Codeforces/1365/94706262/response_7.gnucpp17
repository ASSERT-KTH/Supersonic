#include <iostream>
#include <string.h>
using namespace std;

constexpr int SIZE = 51;

int t, n, m, G;
char maze[SIZE][SIZE] = {0};
bool visited[SIZE][SIZE] = {0};

inline bool isInvalid(int r, int c) {
    return r <= 0 || c <= 0 || r > n || c > m;
}

inline bool isBlock(int r, int c) {
    return maze[r][c] == 'G' || (r == n && c == m && G > 0);
}

inline void blockCell(int r, int c) {
    if (maze[r][c] == '.') {
        maze[r][c] = '#';
    }
}

bool block(int r, int c) {
    if (r - 1 > 0) {
        if (isBlock(r - 1, c)) return false;
        blockCell(r - 1, c);
    }
    if (r + 1 <= n) {
        if (isBlock(r + 1, c)) return false;
        blockCell(r + 1, c);
    }
    if (c - 1 > 0) {
        if (isBlock(r, c - 1)) return false;
        blockCell(r, c - 1);
    }
    if (c + 1 <= m) {
        if (isBlock(r, c + 1)) return false;
        blockCell(r, c + 1);
    }
    return true;
}

void dfs(int r, int c) {
    if (isInvalid(r, c) || maze[r][c] == '#' || visited[r][c]) return;
    visited[r][c] = 1;
    if (maze[r][c] == 'G') G--;
    dfs(r + 1, c);
    dfs(r - 1, c);
    dfs(r, c + 1);
    dfs(r, c - 1);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> t;
    while (t--) {
        cin >> n >> m;
        bool flag = false;
        G = 0;
        memset(visited, 0, sizeof(visited));
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                cin >> maze[i][j];
                if (maze[i][j] == 'G') G++;
            }
        }
        for (int i = 1; i <= n && !flag; i++) {
            for (int j = 1; j <= m && !flag; j++) {
                if (maze[i][j] == 'B' && !block(i, j)) {
                    cout << "No\n";
                    flag = true;
                }
            }
        }
        if (!flag) {
            dfs(n, m);
            cout << (G == 0 ? "Yes\n" : "No\n");
        }
    }
    return 0;
}