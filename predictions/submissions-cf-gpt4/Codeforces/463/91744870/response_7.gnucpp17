#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

void solve() {
    ll n;
    cin >> n;
    vector<vector<ll>> a(n, vector<ll>(n));
    vector<ll> diag1(2 * n - 1), diag2(2 * n - 1);
    vector<pii> ans(2, {0, 0});
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> a[i][j];
            diag1[i + j] += a[i][j];
            diag2[i - j + n - 1] += a[i][j];
        }
    }
    vector<vector<ll>> dp(n, vector<ll>(n));
    for (int i = n - 1; i >= 0; --i) {
        for (int j = n - 1; j >= 0; --j) {
            if (i + 1 < n) dp[i][j] = max(dp[i][j], dp[i + 1][j]);
            if (j + 1 < n) dp[i][j] = max(dp[i][j], dp[i][j + 1]);
            dp[i][j] = max(dp[i][j], diag1[i + j] + diag2[i - j + n - 1] - a[i][j]);
            if (dp[i][j] > dp[ans[(i + j) % 2].first][ans[(i + j) % 2].second]) {
                ans[(i + j) % 2] = {i, j};
            }
        }
    }
    cout << dp[ans[0].first][ans[0].second] + dp[ans[1].first][ans[1].second] << "\n";
    for (int i = 0; i < 2; ++i) {
        cout << ans[i].first + 1 << " " << ans[i].second + 1 << " ";
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    solve();
    return 0;
}