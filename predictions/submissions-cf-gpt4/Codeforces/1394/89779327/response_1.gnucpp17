#include <iostream>
#include <vector>
#include <algorithm>
#include <bitset>
using namespace std;

const int MAXN = 200200;
const int MAXK = 10;
const int MOD = 1e9 + 7;

struct Edge {
    int node, index;
};

int n, m, k;
vector<Edge> graph[MAXN];
bitset<MAXK> self[MAXK], bans[MAXK][MAXK], allowed[MAXK];
int cnt[MAXK][MAXK], total;
long long res;

bool operator<(const Edge &a, const Edge &b) {
    return graph[a.node].size() < graph[b.node].size() || (graph[a.node].size() == graph[b.node].size() && a.index < b.index);
}

void rec(int i = 0) {
    if (i == k) {
        res = (res + 1) % MOD;
        return;
    }
    bitset<MAXK> tmp = allowed;
    for (int j = 0; j < k; ++j) {
        if (!self[i][j] && allowed[j]) {
            total += cnt[i][j];
            allowed &= ~bans[i][j];
            rec(i + 1);
            total -= cnt[i][j];
            allowed = tmp;
        }
    }
}

int main() {
    cin >> n >> m >> k;
    for (int i = 0; i < m; ++i) {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u].push_back({v, w});
    }
    for (int u = 1; u <= n; ++u) {
        sort(graph[u].begin(), graph[u].end());
        for (int j = 0; j < graph[u].size(); ++j) {
            Edge &e = graph[u][j];
            ++cnt[e.node][e.index];
            for (int h = 0; h < j; ++h) {
                Edge &f = graph[u][h];
                bans[e.node][e.index].set(f.index);
                bans[f.node][f.index].set(e.index);
            }
        }
    }
    for (int i = 0; i < k; ++i)
        allowed.set(i);
    rec();
    cout << res << "\n";
    return 0;
}