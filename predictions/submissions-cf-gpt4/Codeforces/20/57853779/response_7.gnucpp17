#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef long long ll;
const ll INF = 1e18;
const int MAXN = 100005;
vector<pair<int, ll>> adj[MAXN];
vector<bool> processed(MAXN, false);
vector<ll> distance(MAXN, INF);
vector<int> p(MAXN, -1);

void dijkstra(int x){
    distance[x] = 0;
    using pii = pair<ll, int>;
    priority_queue<pii, vector<pii>, greater<pii>> q;
    q.push({0, x});
    while (!q.empty()) {
        int a = q.top().second;
        q.pop();
        if (processed[a])
            continue;
        processed[a] = true;
        for (auto u : adj[a]) {
            int b = u.first;
            ll w = u.second;
            if (distance[a] + w < distance[b]) {
                distance[b] = distance[a] + w;
                p[b] = a;
                q.push({distance[b], b});
            }
        }
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    int n, m;
    cin >> n >> m;
    if (m == 0) {
        cout << "-1\n";
        return 0;
    }
    for (int i = 0; i < m; i++) {
        int a, b;
        ll w;
        cin >> a >> b >> w;
        adj[a].push_back({b, w});
        adj[b].push_back({a, w});
    }
    dijkstra(1);
    if (p[n] == -1) {
        cout << "-1\n";
        return 0;
    }
    vector<int> path;
    for (int v = n; v != 1; v = p[v]) {
        path.push_back(v);
    }
    path.push_back(1);
    for (int i = path.size() - 1; i >= 0; --i)
        cout << path[i] << ' ';
    cout << '\n';
    return 0;
}