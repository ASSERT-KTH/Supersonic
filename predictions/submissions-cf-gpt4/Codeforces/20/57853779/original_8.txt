```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

typedef long long ll;
const ll INF = 1e18;
const int maxn = 100005;

std::vector<std::pair<int, ll>> adj[maxn];
std::vector<bool> processed(maxn, false);
std::vector<ll> distance(maxn, INF);
std::vector<int> p(maxn, -1);
std::priority_queue<std::pair<ll, int>, std::vector<std::pair<ll, int>>, std::greater<>> q;

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);
  int n, m;
  std::cin >> n >> m;
  if (m == 0) {
    std::cout << "-1\n";
    return 0;
  }
  for (int i = 0; i < m; i++) {
    int a, b; ll w;
    std::cin >> a >> b >> w;
    adj[a].emplace_back(b, w);
    adj[b].emplace_back(a, w);
  }
  distance[1] = 0;
  q.push({0, 1});
  while (!q.empty()) {
    int a = q.top().second; q.pop();
    if (processed[a]) continue;
    processed[a] = true;
    for (auto &u : adj[a]) {
      int b = u.first; ll w = u.second;
      if (distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        p[b] = a;
        q.push({distance[b], b});
      }
    }
  }
  if (p[n] == -1) {
    std::cout << "-1\n";
    return 0;
  }
  std::vector<int> path;
  for (int v = n; v != 1; v = p[v]) {
    path.push_back(v);
  }
  path.push_back(1);
  std::reverse(path.begin(), path.end());
  for (auto i : path)
    std::cout << i << ' ';
  std::cout << '\n';
  return 0;
}
```