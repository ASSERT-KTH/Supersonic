#include <iostream>
#include <vector>
#include <queue>
#define MAXN 100005
#define INF 1e18
typedef long long ll;
typedef std::pair<ll, ll> pll;

std::vector<pll> adj[MAXN];
std::vector<bool> processed(MAXN, false);
std::vector<ll> distance(MAXN, INF);
std::vector<ll> p(MAXN, -1);
std::priority_queue<pll, std::vector<pll>, std::greater<pll>> q;

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(NULL);

    ll n, m;
    std::cin >> n >> m;
    if (m == 0) {
        std::cout << "-1\n";
        return 0;
    }

    for (ll i = 0; i < m; i++) {
        ll a, b, w;
        std::cin >> a >> b >> w;
        adj[a].emplace_back(b, w);
        adj[b].emplace_back(a, w);
    }

    distance[1] = 0;
    q.push({0, 1});

    while (!q.empty()) {
        ll a = q.top().second;
        q.pop();
        if (processed[a])
            continue;
        processed[a] = true;
        for (auto u : adj[a]) {
            ll b = u.first, w = u.second;
            if (distance[a] + w < distance[b]) {
                distance[b] = distance[a] + w;
                p[b] = a;
                q.push({distance[b], b});
            }
        }
    }

    if (p[n] == -1) {
        std::cout << "-1\n";
        return 0;
    }

    std::vector<ll> path;
    for (ll v = n; v != 1; v = p[v]) {
        path.emplace_back(v);
    }
    path.emplace_back(1);

    for (auto it = path.rbegin(); it != path.rend(); ++it)
        std::cout << *it << ' ';
    std::cout << '\n';

    return 0;
}