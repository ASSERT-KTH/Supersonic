#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
using namespace std;
#define INF 1e18
const int maxn = 100005;
using pii = pair<int, int>;
vector<pii> adj[maxn];
vector<int> distance(maxn, INF);
vector<int> p(maxn, -1);
vector<bool> processed(maxn, false);
priority_queue<pii, vector<pii>, greater<pii>> q;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, m;
  cin >> n >> m;
  if (m == 0) {
    cout << "-1\n";
    return 0;
  }
  for (int i = 0; i < m; i++) {
    int a, b, w;
    cin >> a >> b >> w;
    adj[a].emplace_back(b, w);
    adj[b].emplace_back(a, w);
  }
  distance[1] = 0;
  q.emplace(0, 1);
  while (!q.empty()) {
    int a = q.top().second;
    q.pop();
    if (processed[a])
      continue;
    processed[a] = true;
    for (auto &u : adj[a]) {
      int b = u.first, w = u.second;
      if (distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        p[b] = a;
        q.emplace(distance[b], b);
      }
    }
  }
  if (p[n] == -1) {
    cout << "-1\n";
    return 0;
  }
  vector<int> path;
  for (int v = n; v != 1; v = p[v]) {
    path.push_back(v);
  }
  path.push_back(1);
  reverse(path.begin(), path.end());
  for (auto &i : path)
    cout << i << ' ';
  cout << '\n';
}