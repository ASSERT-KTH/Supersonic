#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;
using pii = pair<int, int>;

const int INF = 1e9;
const int maxn = 100005;
vector<pii> adj[maxn];
vector<int> dist(maxn, INF);
vector<int> p(maxn, -1);
vector<bool> processed(maxn, false);

inline void optimizeIO()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
}

int32_t main() {
    optimizeIO();
    int n, m;
    cin >> n >> m;
    if (m == 0) {
        cout << "-1" << endl;
        return 0;
    }
    for (int i = 0; i < m; i++) {
        int a, b, w;
        cin >> a >> b >> w;
        adj[a].emplace_back(b, w);
        adj[b].emplace_back(a, w);
    }
    dist[1] = 0;
    priority_queue<pii, vector<pii>, greater<pii>> q;
    q.emplace(0, 1);
    while (!q.empty()) {
        int a = q.top().second;
        q.pop();
        if (processed[a])
            continue;
        processed[a] = true;
        for (auto u : adj[a]) {
            int b = u.first, w = u.second;
            if (dist[a] + w < dist[b]) {
                dist[b] = dist[a] + w;
                p[b] = a;
                q.emplace(dist[b], b);
            }
        }
    }
    if (p[n] == -1) {
        cout << "-1" << endl;
        return 0;
    }
    vector<int> path;
    for (int v = n; v != 1; v = p[v]) {
        path.push_back(v);
    }
    path.push_back(1);
    reverse(path.begin(), path.end());
    for (auto i : path)
        cout << i << ' ';
    cout << endl;
}