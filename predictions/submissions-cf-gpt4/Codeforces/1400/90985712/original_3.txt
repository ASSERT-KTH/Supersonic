```
#include <iostream>
#include <vector>
#include <unordered_set>
#include <cstring>

#define int long long
#define M 998244353
#define N 300005
#define X 42
#define K 20

using namespace std;

int cnk[X][X];
int fact[N], defact[N];
int dp[1 << K][X];
int sz[1 << K];
vector<int> op[N], cl[N];
pair<int, int> lr[N];
pair<int, int> bad[K];
bool has[N];
bool f[N], f2[N];

int bpow(int a, int n) {
    int ret = 1;
    for (; n; n >>= 1, a = a * a % M)
        if (n & 1) ret = ret * a % M;
    return ret;
}

int obr(int x) { return bpow(x, M - 2); }

void init() {
    cnk[0][0] = 1;
    for (int n = 1; n < X; ++n) {
        cnk[n][0] = 1;
        for (int k = 1; k <= n; ++k)
            cnk[n][k] = (cnk[n - 1][k] + cnk[n - 1][k - 1]) % M;
    }
    fact[0] = 1;
    for (int i = 1; i < N; ++i)
        fact[i] = fact[i - 1] * i % M;
    defact[N - 1] = obr(fact[N - 1]);
    for (int i = N - 1; i; --i)
        defact[i - 1] = defact[i] * i % M;
}

int get_cnk(int n, int k) {
    if (k > n || k < 0) return 0;
    if (n < X) return cnk[n][k];
    return fact[n] * defact[k] % M * defact[n - k] % M;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    init();
    int n, m;
    cin >> n >> m;

    for (int i = 0; i < n; ++i) {
        cin >> lr[i].first >> lr[i].second;
        op[lr[i].first].push_back(i);
        cl[lr[i].second].push_back(i);
    }

    for (int i = 0; i < m; ++i) {
        cin >> bad[i].first >> bad[i].second;
        --bad[i].first, --bad[i].second;
    }

    dp[0][0] = 1;
    sz[0] = 0;
    for (int mask = 1; mask < (1 << m); ++mask) {
        int pos = __builtin_ctz(mask);
        int nmask = 0, alone = 0, x = bad[pos].first, nmask2 = 0, alone2 = 0;
        unordered_set<int> lol;
        vector<int> kek, kek2;
        for (int i = 0; i < m; ++i) {
            if (mask >> i & 1) {
                if (bad[i].first != x && bad[i].second != x)
                    nmask |= 1 << i;
                lol.insert(bad[i].first);
                lol.insert(bad[i].second);
                if (bad[i].first == x && !f[bad[i].second]) {
                    f[bad[i].second] = 1;
                    kek.push_back(bad[i].second);
                }
                if (bad[i].second == x && !f[bad[i].first]) {
                    f[bad[i].first] = 1;
                    kek.push_back(bad[i].first);
                }
            }
        }
        for (int i = 0; i < m; ++i) {
            if (mask >> i & 1) {
                if (nmask >> i & 1 && !f[bad[i].first] && !f[bad[i].second])
                    nmask2 |= 1 << i;
                if (f[bad[i].first] && bad[i].second != x && !f[bad[i].second] &&
                    !f2[bad[i].second]) {
                    f2[bad[i].second] = 1;
                    kek2.push_back(bad[i].second);
                }
                if (f[bad[i].second] && bad[i].first != x && !f[bad[i].first] &&
                    !f2[bad[i].first]) {
                    f2[bad[i].first] = 1;
                    kek2.push_back(bad[i].first);
                }
            }
        }

        for (int elem : kek)
            if (!any_of(kek.begin(), kek.end(), [&](int i) { return nmask >> i & 1 && (bad[i].first == elem || bad[i].second == elem); }))
                ++alone;
        for (int elem : kek2)
            if (!any_of(kek2.begin(), kek2.end(), [&](int i) { return nmask2 >> i & 1 && (bad[i].first == elem || bad[i].second == elem); }))
                ++alone2;

        dp[mask][0] = 1;
        sz[mask] = lol.size();
        for (int i = 1; i < X; ++i) {
            if (i > sz[mask]) break;
            for (int t = 0; t <= min(i, alone); ++t)
                dp[mask][i] = (dp[mask][i] + dp[nmask][i - t] * get_cnk(alone, t)) % M;
            for (int t = 0; t <= min(i - 1, alone2); ++t)
                dp[mask][i] = (dp[mask][i] + dp[nmask2][i - t - 1] * get_cnk(alone2, t)) % M;
        }
        for (int elem : kek) f[elem] = 0;
        for (int elem : kek2) f2[elem] = 0;
    }

    int res = 0, cnt = 0;
    for (int len = 1; len <= n; ++len) {
        for (int elem : op[len]) {
            ++cnt;
            has[elem] = 1;
        }

        int mask = 0;
        for (int i = 0; i < m; ++i)
            if (has[bad[i].first] && has[bad[i].second])
                mask |= 1 << i;

        for (int t = 0; t <= min(X - 1, len); ++t)
            res = (res + dp[mask][t] * get_cnk(cnt - sz[mask], len - t)) % M;

        for (int elem : cl[len])
            has[elem] = 0, --cnt;
    }

    cout << res << '\n';
}
```