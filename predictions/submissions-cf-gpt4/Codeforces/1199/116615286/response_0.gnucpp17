#include <iostream>
#include <vector>
#include <cstring>
#define FAST_IO std::ios_base::sync_with_stdio(false), std::cin.tie(nullptr), std::cout.tie(nullptr);

const int MAX = 300005;
std::vector<int> adj[MAX];
bool match[MAX];

int main() {
    FAST_IO;
    int t, n, m;
    std::cin >> t;
    while (t--) {
        std::cin >> n >> m;
        std::vector<int> matching, independentSet;
        for (int i = 1; i <= 3 * n; ++i) {
            adj[i].clear();
        }
        std::memset(match, false, sizeof(match));
        for (int i = 1; i <= m; ++i) {
            int x, y;
            std::cin >> x >> y;
            adj[x].push_back(i);
            adj[y].push_back(i);
        }
        for (int i = 1; i <= 3 * n; ++i) {
            if (!match[i] && !adj[i].empty()) {
                int edge = adj[i].back();
                adj[i].pop_back();
                if (!match[edge]) {
                    matching.push_back(edge);
                    match[edge] = match[i] = true;
                }
            }
        }
        if (matching.size() >= n) {
            std::cout << "Matching\n";
            for (int i = 0; i < n; ++i) {
                std::cout << matching[i] << " ";
            }
            std::cout << '\n';
            continue;
        }
        for (int i = 1; i <= 3 * n; ++i) {
            if (!match[i]) {
                independentSet.push_back(i);
            }
        }
        if (independentSet.size() >= n) {
            std::cout << "IndSet\n";
            for (int i = 0; i < n; ++i) {
                std::cout << independentSet[i] << " ";
            }
        } else {
            std::cout << "Impossible";
        }
        std::cout << '\n';
    }
}