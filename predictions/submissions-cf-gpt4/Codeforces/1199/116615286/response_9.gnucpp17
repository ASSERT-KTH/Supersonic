#include <iostream>
#include <vector>
#include <cstring>
using namespace std;
const int maxN = 3e5 + 5;
vector<int> adj[maxN];
bool match[maxN];
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        for (int i = 1; i <= 3 * n; i++) {
            adj[i].clear();
            match[i] = false;
        }
        for (int i = 1; i <= m; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(i);
            adj[v].push_back(-i);
        }
        vector<int> matching, indSet;
        for (int i = 1; i <= 3 * n; i++) {
            if (match[i]) continue;
            for(auto j: adj[i]) {
                int v = j > 0 ? j : -j;
                if (!match[v]) {
                    match[v] = true;
                    if (j > 0) matching.push_back(j);
                    else indSet.push_back(i);
                    break;
                }
            }
        }
        if (matching.size() >= n) {
            cout << "Matching" << '\n';
            for (int i = 0; i < n; i++) {
                cout << matching[i] << " ";
            }
            cout << '\n';
        } else if (indSet.size() >= n) {
            cout << "IndSet" << '\n';
            for (int i = 0; i < n; i++) {
                cout << indSet[i] << " ";
            }
            cout << '\n';
        } else {
            cout << "Impossible" << '\n';
        }
    }
    return 0;
}