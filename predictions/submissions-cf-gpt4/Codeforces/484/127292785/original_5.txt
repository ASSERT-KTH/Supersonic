```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#define lli int

using namespace std;

struct SparseTable {
  lli N, K;
  vector<vector<lli>> table;
  vector<lli> logtwo;
  
  SparseTable(vector<lli> &a): N(a.size()), K(log2(N) + 2), table(N, vector<lli>(K)), logtwo(N + 5) {
    logtwo[1] = 0;
    for (lli i = 2; i <= N; ++i) {
      logtwo[i] = logtwo[i / 2] + 1;
    }
    for (lli i = N - 1; i >= 0; --i) {
      table[i][0] = a[i];
      for (lli j = 1; i + (1LL << j) - 1 < N; ++j) {
        table[i][j] = max(table[i][j - 1], table[i + (1LL << (j - 1))][j - 1]);
      }
    }
  }
  
  lli query(lli l, lli r) {
    lli temp = logtwo[r - l + 1];
    return max(table[l][temp], table[r - (1LL << temp) + 1][temp]);
  }
};

void solve() {
  lli R = 1e6;
  vector<lli> a(R + 5, 0);
  lli n;
  cin >> n;
  for (lli i = 0; i < n; ++i) {
    lli x;
    cin >> x;
    a[x] = x;
  }
  SparseTable tab(a);
  lli maxi = 0;
  for (lli i = 2; i <= R; ++i) {
    if (a[i] == 0)
      continue;
    for (lli j = i; j <= R; j += i) {
      lli temp = tab.query(j, min(j + i - 1, R)) - j;
      maxi = max(maxi, temp);
    }
  }
  cout << maxi << '\n';
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  solve();
  return 0;
}
```