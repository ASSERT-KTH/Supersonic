```c++
#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

#define lli int
#define ve vector<lli>
#define fr(i, a, n) for (lli i = a; i < n; i++)
#define all(x) (x).begin(), (x).end()

struct SparseTable {
  lli N, K;
  vector<ve> table;
  ve logtwo;
  
  lli f(lli a, lli b) { return max(a, b); }

  SparseTable(ve a) {
    N = a.size();
    K = log2(N) + 1;
    table = vector<ve>(N, ve(K));
    logtwo = ve(N + 1);
    logtwo[1] = 0;
    fr(i, 2, N + 1) { logtwo[i] = logtwo[i / 2] + 1; }
    for (lli i = N - 1; i >= 0; --i) {
      table[i][0] = a[i];
      for (lli j = 1; i + (1 << j) <= N; ++j) {
        table[i][j] = f(table[i][j - 1], table[i + (1 << (j - 1))][j - 1]);
      }
    }
  }

  lli query(lli l, lli r) {
    lli temp = logtwo[r - l + 1];
    lli ans = f(table[l][temp], table[r - (1 << temp) + 1][temp]);
    return ans;
  }
};

void solve() {
  lli R = 1e6;
  ve a(R + 1, 0);
  lli n;
  cin >> n;
  fr(i, 0, n) {
    lli x;
    cin >> x;
    a[x] = x;
  }
  SparseTable tab(a);
  lli maxi = 0;
  for (lli i = 2; i <= R; ++i) {
    if (!a[i])
      continue;
    for (lli j = i; j <= R; j += i) {
      lli temp = tab.query(j, min(j + i - 1, R)) - j;
      maxi = max(maxi, temp);
    }
  }
  cout << maxi << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  lli test = 1;
  while (test--) {
    solve();
  }
}
```