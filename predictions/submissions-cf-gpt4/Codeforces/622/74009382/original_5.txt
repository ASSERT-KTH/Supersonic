```
#include <iostream>
#include <algorithm>
#define MOD 1000000007
#define N 1000006

typedef long long ll;
typedef long double ld;

ll power(ll a, ll b, ll p) {
    ll t = 1;
    while (b) {
        if (b&1) t = (t*a)%p;
        a = (a*a)%p;
        b >>= 1;
    }
    return t;
}

ll fact[N], inv[N], a[N];

ll C(ll n, ll r) {
    if (r<0 || r>n) return 0;
    if (!r || r==n) return 1;
    return fact[n]*inv[r]%MOD*inv[n-r]%MOD;
}

ll lagrange(ll n, ll k) {
    if (n<=k) return a[n];
    ll ans = 0;
    fact[0] = inv[0] = 1;
    for (ll i=1; i<=k+1; i++) {
        fact[i] = fact[i-1]*i%MOD;
        inv[i] = power(fact[i], MOD-2, MOD);
    }
    for (ll i=0; i<=k+1; i++) {
        ll tmp = a[i]*inv[i]%MOD*inv[k+1-i]%MOD;
        if ((k+1-i)&1) ans = (ans-tmp+MOD)%MOD;
        else ans = (ans+tmp)%MOD;
    }
    for (ll i=0; i<=k+1; i++) ans = ans*(n-i+MOD)%MOD;
    ans = ans*power(fact[k+1], MOD-2, MOD)%MOD;
    return ans;
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    std::cout.tie(0);
    ll n, k;
    std::cin >> n >> k;
    a[0] = 0;
    for (ll i=1; i<=k+1; i++) a[i] = (a[i-1]+power(i, k, MOD))%MOD;
    std::cout << lagrange(n, k);
    return 0;
}
```