#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
const int N = 1e6 + 5;
const int M = 1e9 + 7;
const int INF = 1e18;

inline ll add(ll a, ll b, ll m = M) { return (((a + b) % m + m) % m); }
inline ll mul(ll a, ll b, ll m = M) { return (((a % m) * (b % m)) % m); }
ll pw(ll a, ll b, ll m = M) {
  ll r = 1;
  while (b) {
    if (b & 1)
      r = mul(r, a, m);
    a = mul(a, a, m);
    b >>= 1;
  }
  return r;
}

struct mod_int {
  int val;
  mod_int(ll v = 0) {
    v = v % M;
    if (v < 0)
      v += M;
    val = v;
  }

  mod_int &operator+=(const mod_int &other) {
    val += other.val;
    if (val >= M)
      val -= M;
    return *this;
  }

  mod_int &operator-=(const mod_int &other) {
    val -= other.val;
    if (val < 0)
      val += M;
    return *this;
  }

  mod_int &operator*=(const mod_int &other) {
    val = mul(val, other.val);
    return *this;
  }

  mod_int operator-() const { return mod_int(-val); }
  bool operator==(const mod_int &other) const { return val == other.val; }
};

mod_int P[N];
mod_int ele[N];

void solve() {
  int n, k;
  cin >> n >> k;

  P[0] = 0;
  for (int i = 1; i <= k + 3; i++) {
    P[i] = P[i - 1];
    P[i] += pw(i, k);
  }

  if (n <= k + 2) {
    cout << P[n].val << "\n";
    return;
  }

  mod_int ans = 0;
  mod_int binom = 1;
  mod_int binom_inv = 1;
  for (int i = 1; i <= k + 2; i++) {
    if (i > 1) {
      binom *= (n - i + 2);
      binom *= mod_int(i - 1).val;
      binom_inv *= -mod_int(i - 1).val;
      binom_inv *= mod_int(n - i + 3).val;
      binom *= binom_inv;
    }
    ans += binom * P[i];
  }
  cout << ans.val << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

  solve();
  return 0;
}
