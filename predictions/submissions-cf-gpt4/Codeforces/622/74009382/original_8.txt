```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 1e6 + 5, M = 1e9 + 7;
ll P[N], ele[N];
ll pw(ll a, ll b = M - 2, ll p = M) {
  if (b == 0) return 1;
  ll t = pw(a, b / 2, p);
  return b % 2 ? t * t % p * a % p : t * t % p;
}
struct mod_int {
  ll val;
  mod_int(ll v = 0) {
    if (v < 0) v = v % M + M;
    if (v >= M) v %= M;
    val = v;
  }
  mod_int &operator+=(const mod_int &other) {
    if ((val += other.val) >= M) val -= M;
    return *this;
  }
  mod_int &operator-=(const mod_int &other) {
    if ((val -= other.val) < 0) val += M;
    return *this;
  }
  mod_int &operator*=(const mod_int &other) {
    val = val * other.val % M;
    return *this;
  }
  mod_int &operator/=(const mod_int &other) {
    return *this *= other.inv();
  }
  mod_int inv() const {
    return pw(val);
  }
};
void solve() {
  int n, k;
  cin >> n >> k;
  for (int i = 1; i < k + 4; i++)
    P[i] = (P[i - 1] + pw(i, k)) % M;
  if (n <= k + 2) {
    cout << P[n] << '\n';
    return;
  }
  mod_int ans = P[1], e = 1;
  for (int i = 1; i <= k + 1; i++)
    e = e * (n - i) / i;
  for (int i = 2; i < k + 3; i++) {
    e = e * (n - i + 1) / (k - i + 2);
    ans += e * P[i];
  }
  cout << ans.val << '\n';
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  int t = 1;
  while (t--)
    solve();
  return 0;
}
```