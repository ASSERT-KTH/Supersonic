```c++
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<ll> vll;
typedef pair<ll, ll> pll;

const ll MOD = 1e9 + 7;
const ll N = 1e6 + 5;

struct mod_int {
  ll val;
  mod_int(ll v = 0) : val(v % MOD) {
    if (val < 0) val += MOD;
  }
  mod_int& operator+=(const mod_int &other) {
    val += other.val;
    if (val >= MOD) val -= MOD;
    return *this;
  }
  mod_int& operator*=(const mod_int &other) {
    val = (val * other.val) % MOD;
    return *this;
  }
  mod_int inv() const {
    ll a = val, b = MOD, u = 1, v = 0;
    while (b) {
      ll t = a / b;
      a -= t * b; swap(a, b);
      u -= t * v; swap(u, v);
    }
    return mod_int(u);
  }
};

mod_int operator*(mod_int a, const mod_int &b) {
  return a *= b;
}
mod_int operator+(mod_int a, const mod_int &b) {
  return a += b;
}

mod_int power(mod_int a, ll b) {
  mod_int res(1);
  while (b) {
    if (b & 1) res *= a;
    a *= a;
    b >>= 1;
  }
  return res;
}

vll fact(N), invfact(N);

void solve() {
  ll n, k;
  cin >> n >> k;

  if (n <= k + 2) {
    mod_int res;
    for (ll i = 1; i <= n; i++) {
      res += power(mod_int(i), k);
    }
    cout << res.val << '\n';
    return;
  }

  fact[0] = invfact[0] = 1;
  for (ll i = 1; i <= k + 2; i++) {
    fact[i] = (fact[i-1] * i) % MOD;
    invfact[i] = invfact[i-1] * mod_int(i).inv();
  }

  vector<mod_int> f(k + 3), pref(k + 3);
  for (ll i = 1; i <= k + 2; i++) {
    f[i] = power(mod_int(i), k);
    pref[i] = pref[i-1] + f[i];
  }

  mod_int res;
  for (ll i = 1; i <= k + 2; i++) {
    mod_int term = pref[i] - pref[i-1];
    term *= fact[i-1] * fact[k+2-i] * ((k + 2 - i) % 2 ? -1 : 1);
    res += term;
  }
  res *= mod_int(n).inv();

  cout << res.val << '\n';
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  solve();
  return 0;
}
```
