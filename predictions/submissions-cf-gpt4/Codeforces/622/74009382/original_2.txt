```
#include <iostream>
#include <vector>
#include <cstdint>
#include <cassert>

using namespace std;
using ll = long long;
constexpr int MOD = 1e9 + 7;

struct mod_int {
    int val;

    mod_int(long long v = 0) {
        if (v < 0) v = v % MOD + MOD;
        if (v >= MOD) v %= MOD;
        val = v;
    }

    mod_int& operator+=(const mod_int &other) {
        val += other.val;
        if (val >= MOD) val -= MOD;
        return *this;
    }

    mod_int& operator*=(const mod_int &other) {
        val = (uint64_t)val * other.val % MOD;
        return *this;
    }

    mod_int pow(long long p) const {
        assert(p >= 0);
        mod_int a = *this, result = 1;
        while (p > 0) {
            if (p & 1) result *= a;
            a *= a;
            p >>= 1;
        }
        return result;
    }
};

void solve() {
    int n, k;
    cin >> n >> k;
    vector<mod_int> P(n + 5);
    vector<mod_int> ele(n + 5, 1);
    for (int i = 1; i <= k + 3; i++) {
        mod_int j = i;
        P[i] = P[i - 1] + j.pow(k);
    }
    if (n <= k + 2) {
        cout << P[n].val;
        return;
    }
    for (int i = 1; i < k + 2; i++) {
        ele[i + 1] = ele[i] * (MOD + n - i - 1) / (MOD - i);
    }
    mod_int ans = 0;
    for (int i = 1; i <= k + 2; i++) {
        ans += ele[i] * P[i];
    }
    cout << ans.val;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int t = 1;
    while (t--) solve();
    return 0;
}
```