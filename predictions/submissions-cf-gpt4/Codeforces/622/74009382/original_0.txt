```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int MOD = 1e9 + 7;
const int N = 1e6 + 5;
ll pw(ll a, ll b = MOD - 2, ll p = MOD) {
  ll res = 1;
  while (b > 0) {
    if (b & 1) res = (1LL * a * res) % p;
    a = (1LL * a * a) % p;
    b >>= 1;
  }
  return res;
}
struct mod_int {
  ll val;
  mod_int(ll v = 0) {
    if (v < 0) v = v % MOD + MOD;
    if (v >= MOD) v %= MOD;
    val = v;
  }
  mod_int &operator+=(const mod_int &other) {
    val += other.val;
    if (val >= MOD) val -= MOD;
    return *this;
  }
  mod_int &operator-=(const mod_int &other) {
    val -= other.val;
    if (val < 0) val += MOD;
    return *this;
  }
  mod_int &operator*=(const mod_int &other) {
    val = (ll)val * other.val % MOD;
    return *this;
  }
  mod_int &operator/=(const mod_int &other) { return *this *= other.inv(); }
  friend mod_int operator+(const mod_int &a, const mod_int &b) {
    return mod_int(a) += b;
  }
  friend mod_int operator-(const mod_int &a, const mod_int &b) {
    return mod_int(a) -= b;
  }
  friend mod_int operator*(const mod_int &a, const mod_int &b) {
    return mod_int(a) *= b;
  }
  friend mod_int operator/(const mod_int &a, const mod_int &b) {
    return mod_int(a) /= b;
  }
  mod_int inv() const { return pw(val); }
  mod_int pow(ll p) const {
    assert(p >= 0);
    mod_int a = *this, result = mod_int(1);
    while (p > 0) {
      if (p & 1) result *= a;
      a *= a;
      p >>= 1;
    }
    return result;
  }
  friend ostream &operator<<(ostream &stream, const mod_int &m) {
    return stream << m.val;
  }
  friend istream &operator>>(istream &stream, mod_int &m) {
    return stream >> m.val;
  }
};
mod_int P[N];
mod_int ele[N];
void solve() {
  ll n, k;
  cin >> n >> k;
  P[0] = 0;
  for (ll i = 1; i <= k + 3; i++) {
    P[i] = P[i - 1] + mod_int(i).pow(k);
  }
  if (n <= k + 3) {
    cout << P[n] << "\n";
    return;
  }
  ele[0] = 1;
  for (ll i = 1; i <= k + 3; i++) {
    ele[i] = ele[i - 1] * mod_int(n - i + 1) / mod_int(i);
  }
  mod_int ans = 0;
  for (ll i = 0; i <= k + 3; i++) {
    mod_int C = ele[i] * ele[k + 3 - i];
    if ((k + 3 - i) % 2) C = -C;
    ans += C * P[i];
  }
  cout << ans << "\n";
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int t = 1;
  while (t--) solve();
  return 0;
}
```