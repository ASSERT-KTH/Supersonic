```cpp
#include <iostream>
using namespace std;
#define rep(i, a, b) for (int i = a; i < b; i++)
#define int long long
#define M 1000000007
#define N 1e6 + 5
struct mod_int {
  int val;
  mod_int(long long v = 0) {
    if (v < 0)
      v = v % M + M;
    if (v >= M)
      v %= M;
    val = v;
  }
  static int mod_inv(int a, int m = M) {
    int g = m, r = a, x = 0, y = 1;
    while (r != 0) {
      int q = g / r;
      g %= r;
      swap(g, r);
      x -= q * y;
      swap(x, y);
    }
    return x < 0 ? x + m : x;
  }
  mod_int &operator+=(const mod_int &other) {
    val += other.val;
    if (val >= M)
      val -= M;
    return *this;
  }
  mod_int &operator*=(const mod_int &other) {
    val = val * other.val % M;
    return *this;
  }
  mod_int &operator/=(const mod_int &other) { return *this *= other.inv(); }
  friend mod_int operator+(const mod_int &a, const mod_int &b) { return mod_int(a) += b; }
  friend mod_int operator*(const mod_int &a, const mod_int &b) { return mod_int(a) *= b; }
  friend mod_int operator/(const mod_int &a, const mod_int &b) { return mod_int(a) /= b; }
  mod_int inv() const { return mod_inv(val); }
  friend istream &operator>>(istream &stream, mod_int &m) {
    return stream >> m.val;
  }
};
mod_int P[N];
mod_int ele[N];
void solve() {
  int n, k;
  cin >> n >> k;
  rep(i, 1, k + 4) {
    mod_int j = i;
    P[i] = P[i - 1] + j;
  }
  if (n <= k + 2) {
    cout << P[n].val;
    return;
  }
  ele[1] = 1;
  rep(i, 1, k + 2) {
    ele[1] *= (M + n - i - 1);
    ele[1] /= (M - i);
  }
  mod_int ans = 0;
  ans += ele[1] * P[1];
  rep(i, 2, k + 3) {
    ele[i] = ele[i - 1] * (M - k + i - 3);
    ele[i] /= (i - 1);
    ele[i] /= (M + n - i);
    ele[i] *= (M + n - i + 1);
    ans += ele[i] * P[i];
  }
  cout << ans.val;
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  int t = 1;
  while (t--)
    solve();
  return 0;
}
```