#include <bits/stdc++.h>
#define mod 1000000007
#define PI 3.14159265358979323846
#define int long long

std::ios_base::sync_with_stdio(false);
std::cin.tie(NULL);

int power(int x, int y, int p) {
    x = x % p;
    if (x == 0)
        return 0;

    int res = 1;
    while (y > 0) {
        if (y & 1)
            res = (res * x) % p;
        y = y >> 1;
        x = (x * x) % p;
    }
    return res;
}

std::vector<int> divisors(int n) {
    std::vector<int> v;
    int sqrtN = std::sqrt(n);
    for (int i = 2; i <= sqrtN; i++) {
        if (n % i == 0) {
            v.push_back(i);
            if (n / i != i)
                v.push_back(n / i);
        }
    }
    return v;
}

void solve() {
    int x, y;
    std::cin >> x >> y;
    if (y % x != 0) {
        std::cout << 0 << "\n";
        return;
    }
    if (y / x == 1) {
        std::cout << 1 << "\n";
        return;
    }

    int sum = y / x;
    int ans = power(2, sum - 1, mod);
    ans = (ans - 1 + mod) % mod;

    std::vector<int> div = divisors(sum);
    std::sort(div.begin(), div.end());

    std::map<int, int> mp;
    for (int div_i : div) {
        int cur = power(2, div_i - 1, mod);
        std::vector<int> div1 = divisors(div_i);
        for (int p : div1) {
            cur = (cur - mp[p] + mod) % mod;
        }
        mp[div_i] = (cur - 1 + mod) % mod;
        ans = (ans - (cur - 1) + mod) % mod;
    }
    std::cout << ans << "\n";
}

signed main() {
    solve();
    return 0;
}