```cpp
#include <vector>
#include <algorithm>
#include <stdio.h>

#define forn(i, n) for (int i = 0; i < int(n); i++)

const int N = 200 * 1000 + 13;
const long long INF64 = 1e18;

int n, k;
long long a[N], b[N];
long long cur[N];
std::vector<int> qr[N];

bool check(long long x) {
  forn(i, k) qr[i].clear();
  forn(i, n) {
    cur[i] = a[i];
    long long t = cur[i] / b[i] + 1;
    cur[i] %= b[i];
    if (t < k)
      qr[t].push_back(i);
  }
  int lst = 0;
  while (lst < k && qr[lst].empty())
    ++lst;
  
  forn(t, k) {
    if (lst <= t)
      return false;
    if (lst == k)
      return true;
    int i = qr[lst].back();
    if (cur[i] + x < b[i]) {
      cur[i] += x;
      continue;
    }
    qr[lst].pop_back();
    long long nt = (cur[i] + x) / b[i];
    cur[i] = (cur[i] + x) % b[i];
    if (lst + nt < k)
      qr[lst + nt].push_back(i);
    lst = std::min(lst, int(k - 1));
  }
  return true;
}

int main() {
  scanf("%d%d", &n, &k);
  forn(i, n) scanf("%lld", &a[i]);
  forn(i, n) scanf("%lld", &b[i]);
  long long l = 0, r = INF64;
  while (l < r - 1) {
    long long m = (l + r) / 2;
    if (check(m))
      r = m;
    else
      l = m;
  }
  if (!check(r))
    puts("-1");
  else
    printf("%lld\n", check(l) ? l : r);
  return 0;
}
```