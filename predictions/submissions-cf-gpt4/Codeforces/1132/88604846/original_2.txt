```cpp
#include <vector>
#include <algorithm>
#define forn(i, n) for (int i = 0; i < int(n); i++)
using namespace std;
const int N = 200 * 1000 + 13;
const long long INF64 = 1e18;
int n, k;
long long a[N];
int b[N];
long long cur[N];
vector<int> qr[N];

bool check(long long x) {
  forn(i, k) qr[i].clear();
  forn(i, n) {
    cur[i] = a[i] % b[i];
    if (a[i] / b[i] + 1 < k)
      qr[a[i] / b[i] + 1].push_back(i);
  }
  int lst = 0;
  forn(t, k) {
    while (lst < k && qr[lst].empty())
      ++lst;
    if (lst <= t)
      return false;
    if (lst == k)
      return true;
    int i = qr[lst].back();
    qr[lst].pop_back();
    long long nt = min((x + cur[i]) / b[i], (long long)(k - lst - 1));
    cur[i] = (cur[i] + x) % b[i];
    if (lst + nt < k)
      qr[lst + nt].push_back(i);
  }
  return true;
}

int main() {
  scanf("%d%d", &n, &k);
  forn(i, n) scanf("%lld", &a[i]);
  forn(i, n) scanf("%d", &b[i]);
  long long l = 0, r = INF64;
  while (l < r) {
    long long m = (l + r) / 2;
    if (check(m))
      r = m;
    else
      l = m + 1;
  }
  printf("%lld\n", (check(l) ? l : -1));
  return 0;
}
```