#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;

#define ll long long int

const int cons = 200005;
vector<ll> g[cons], vis(cons);
map<pair<ll, ll>, ll> u;
ll M;

void dfs(ll node, ll pv) {
  vis[node] = 1;
  for (ll child : g[node]) {
    if (vis[child] == 0) {
      u[{node, child}] = pv;
      u[{child, node}] = pv ^ 1;
      dfs(child, pv ^ 1);
    } else if (u.find({node, child}) == u.end()) {
      u[{node, child}] = pv;
      u[{child, node}] = pv ^ 1;
    } else if (u[{node, child}] != pv) {
      M = 1;
    }
  }
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  ll n = 0, m = 0, j = 0, k = 0;
  cin >> n >> m;
  vector<pair<ll, ll>> v(m);
  for(ll i = 0; i < m; i++) {
    cin >> j >> k;
    g[j].push_back(k);
    g[k].push_back(j);
    v[i] = {j, k};
  }
  dfs(1, 0);
  cout << (M ? "NO" : "YES") << endl;
  if (!M) {
    for(ll i = 0; i < m; i++)
      cout << u[v[i]];
  }
  return 0;
}