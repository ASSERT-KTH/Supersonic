#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef pair<ll, ll> pl;
const int MAXN = 200005;
vector<ll> g[MAXN], vis(MAXN);
map<pl, ll> u;
ll M = 0;

void dfs(ll node, ll pv) {
  vis[node] = 1;
  for (ll child : g[node]) {
    if (vis[child] == 0) {
      u[{node, child}] = pv;
      u[{child, node}] = pv ^ 1;
      dfs(child, pv ^ 1);
    } else if (u.find({node, child}) == u.end()) {
      u[{node, child}] = pv;
      u[{child, node}] = pv ^ 1;
    } else if (u[{node, child}] != pv) {
      M = 1;
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  ll n, m;
  cin >> n >> m;
  vector<pl> v(m);
  for (int i = 0; i < m; i++) {
    cin >> v[i].first >> v[i].second;
    g[v[i].first].push_back(v[i].second);
    g[v[i].second].push_back(v[i].first);
  }
  dfs(1, 0);
  if (M) {
    cout << "NO\n";
  } else {
    cout << "YES\n";
    for (int i = 0; i < m; i++) { cout << u[v[i]]; }
  }
  return 0;
}