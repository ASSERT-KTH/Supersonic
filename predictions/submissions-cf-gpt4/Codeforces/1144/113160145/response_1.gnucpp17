#include <iostream>
#include <vector>
#include <map>
#define ll long long int
using namespace std;
const ll cons = 200005;
ll N, M;
vector<ll> g[cons], vis(cons);
map<pair<ll, ll>, ll> u;
void dfs(ll node, ll pv) {
  vis[node] = 1;
  for (ll child : g[node]) {
    if (vis[child] == 0) {
      u[{node, child}] = pv;
      u[{child, node}] = pv ^ 1;
      dfs(child, pv ^ 1);
    } else {
      if (u.find({node, child}) != u.end()) {
        if (u[{node, child}] != pv) {
          M = 1;
        }
      } else {
        u[{node, child}] = pv;
        u[{child, node}] = pv ^ 1;
      }
    }
  }
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  ll n = 0, m = 0, i = 0, j = 0, k = 0;
  cin >> n >> m;
  vector<pair<ll, ll>> v;
  for(i=0; i<m; i++) {
    cin >> j >> k;
    g[j].push_back(k);
    g[k].push_back(j);
    v.push_back({j, k});
  }
  dfs(1, 0);
  if (M) {
    cout << "NO" << '\n';
  } else {
    cout << "YES" << '\n';
    for(i=0; i<m; i++) {
      cout << u[v[i]];
    }
    cout << '\n';
  }
  return 0;
}