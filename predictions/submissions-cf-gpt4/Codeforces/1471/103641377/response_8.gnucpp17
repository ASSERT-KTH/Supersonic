#include <iostream>
#include <unordered_map>
#include <vector>
#include <cmath>
#include <algorithm>
#include <chrono>

using namespace std;
using ll = long long;
using vi = vector<ll>;
using pii = pair<ll, ll>;

const int N = 1e6 + 5;
vi dp(N);

void preprocess() {
  dp[1] = 1;
  for(ll num = 1; num < N; ++num) {
    for(ll i = 2; i <= sqrt(num); ++i) {
      if (num % i == 0) {
        if (dp[num / i] % i)
          dp[num] = dp[num / i] * i;
        else
          dp[num] = dp[num / i] / i;
        break;
      }
    }
    if (dp[num] == 0)
      dp[num] = num;
  }
}

void solve() {
  ll n;
  cin >> n;
  unordered_map<int, int> mp;
  mp.reserve(1024);
  mp.max_load_factor(0.25);
  vi a(n);
  for(ll i = 0; i < n; ++i) cin >> a[i];
  ll ans1 = 1;
  for(ll i = 0; i < n; ++i) {
    mp[dp[a[i]]]++;
    ans1 = max(ans1, static_cast<ll>(mp[dp[a[i]]]));
  }
  ll ans2 = 0;
  for (auto& it : mp) {
    if (it.second % 2 == 0 || it.first == 1)
      ans2 += it.second;
  }
  ll q;
  cin >> q;
  while (q--) {
    ll w;
    cin >> w;
    if (w == 0)
      cout << ans1 << "\n";
    else
      cout << max(ans1, ans2) << "\n";
  }
}

int main() {
  auto start = chrono::high_resolution_clock::now();
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  preprocess();
  ll t = 1;
  cin >> t;
  while (t--)
    solve();
  auto end = chrono::high_resolution_clock::now();
  double tt = chrono::duration_cast<chrono::nanoseconds>(end - start).count();
  cout << "\nExecuted in: " << fixed << tt * 1e-9 << " sec";
  return 0;
}