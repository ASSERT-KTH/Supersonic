#include <iostream>
#include <vector>
#include <unordered_map>
#include <cmath>
#include <algorithm>

#define int long long

const int N = 1e6 + 5;
std::vector<int> dp(N);

void preprocess() {
  dp[1] = 1;
  for (int num = 1; num < N; ++num) {
    for (int i = 2; i <= sqrt(num); ++i) {
      if (num % i == 0) {
        if (dp[num / i] % i)
          dp[num] = dp[num / i] * i;
        else
          dp[num] = dp[num / i] / i;
        break;
      }
    }
    if (dp[num] == 0)
      dp[num] = num;
  }
}

void solve() {
  int n;
  std::cin >> n;
  std::unordered_map<int, int> mp;
  mp.reserve(1024);
  mp.max_load_factor(0.25);
  std::vector<int> a(n);
  for(int i = 0; i < n; ++i) std::cin >> a[i];
  int ans1 = 1;
  for(int i = 0; i < n; ++i) {
    mp[dp[a[i]]]++;
    ans1 = std::max(ans1, mp[dp[a[i]]]);
  }
  int ans2 = 0;
  for (const auto& it : mp) {
    if (it.second % 2 == 0 || it.first == 1)
      ans2 += it.second;
  }
  int q;
  std::cin >> q;
  while (q--) {
    int w;
    std::cin >> w;
    if (w == 0)
      std::cout << ans1 << "\n";
    else
      std::cout << std::max(ans1, ans2) << "\n";
  }
}

int32_t main() {
  std::ios::sync_with_stdio(false);
  preprocess();
  int t;
  std::cin >> t;
  while (t--)
    solve();
  return 0;
}