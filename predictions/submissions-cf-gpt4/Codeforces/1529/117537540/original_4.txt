```cpp
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
#define pii pair<long, long>
#define long long long
long MOD = 1e9 + 7;
const long INF = 1e18;
const int MAX = 600;
int N, M;
long matrix[MAX][MAX];
void dijisktra(int start) {
  vector<long> cost(N, INF);
  cost[start] = 0;
  priority_queue<pii, vector<pii>, greater<pii>> pq;
  pq.push({0, start});
  while (!pq.empty()) {
    int cur = pq.top().second;
    long cur_d = pq.top().first;
    pq.pop();
    if (cur_d != cost[cur]) continue;
    for (int j = 0; j < N; j++) {
      if (matrix[cur][j] != INF && cost[cur] + matrix[cur][j] < cost[j]) {
        cost[j] = cost[cur] + matrix[cur][j];
        pq.push({cost[j], j});
      }
    }
  }
  for (int i = 0; i < N; i++) {
    cout << cost[i] << " ";
  }
  cout << "\n";
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cin >> N >> M;
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
      matrix[i][j] = (i == j ? 0 : INF);
    }
  }
  for (int i = 0; i < M; i++) {
    int a, b;
    long c;
    cin >> a >> b >> c;
    matrix[a][b] = min(matrix[a][b], c);
  }
  for (int i = 0; i < N; i++) {
    dijisktra(i);
  }
  return 0;
}
```