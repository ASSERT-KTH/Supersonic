#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const long long INF = 1LL << 60;
const int MAXN = 600;
vector<pair<int, int>> adj[MAXN];
long long dist[MAXN][MAXN];

void dijkstra(int start, int N) {
    priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<pair<long long, int>>> pq;
    pq.push({0, start});
    dist[start][start] = 0;
    while (!pq.empty()) {
        int node = pq.top().second;
        long long d = pq.top().first;
        pq.pop();
        if (d != dist[start][node]) continue;
        for (auto &edge : adj[node]) {
            int next_node = edge.first;
            long long next_d = d + edge.second;
            if (next_d < dist[start][next_node]) {
                dist[start][next_node] = next_d;
                pq.push({next_d, next_node});
            }
        }
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int N, M;
    cin >> N >> M;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            dist[i][j] = INF;
        }
    }
    for (int i = 0; i < M; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        adj[u].push_back({v, w});
    }
    for (int i = 0; i < N; i++) {
        dijkstra(i, N);
    }

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (dist[i][j] == INF) dist[i][j] = -1;
            cout << dist[i][j] << " ";
        }
        cout << "\n";
    }

    return 0;
}