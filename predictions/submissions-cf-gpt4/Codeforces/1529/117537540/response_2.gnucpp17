#include <bits/stdc++.h>
using namespace std;
#define long long long
#define v vector
long MOD = 1e9 + 7;
void setIO(string name, bool submit) {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  if (submit) {
    freopen((name + ".in").c_str(), "r", stdin);
    freopen((name + ".out").c_str(), "w", stdout);
  }
}
int N, M;
int matrix[600][600];
void dijisktra(int start) {
  v<long> cost(N, 1e18);
  v<bool> marked(N, false);
  priority_queue<pair<long, int>, vector<pair<long, int>>, greater<pair<long, int>>> q;
  cost[start] = 0;
  q.push({0, start});
  while (!q.empty()) {
    int cur = q.top().second;
    q.pop();
    if (marked[cur]) continue;
    marked[cur] = true;
    for (int j = 0; j < N; j++) {
      long new_cost = cost[cur] + matrix[cur][j];
      if (new_cost < cost[j]) {
        cost[j] = new_cost;
        q.push({new_cost, j});
      }
    }
  }
  for (int i = 0; i < N; i++) {
    cout << cost[i] << " ";
  }
  cout << "\n";
}
int main() {
  setIO("", false);
  cin >> N >> M;
  fill(&matrix[0][0], &matrix[0][0] + sizeof(matrix) / sizeof(matrix[0][0]), 1 << 30);
  for (int i = 0; i < M; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    matrix[a][b] = c;
  }
  for (int i = 0; i < N; i++) {
    dijisktra(i);
  }
  return 0;
}