#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int MAXN = 600;
const ll INF = 1e18;
int N, M;
ll adj[MAXN][MAXN];
ll dist[MAXN];
bool visited[MAXN];
void dijkstra(int start) {
  fill(dist, dist + MAXN, INF);
  fill(visited, visited + MAXN, false);
  dist[start] = 0;
  for (int i = 0; i < N; i++) {
    int v = -1;
    for (int j = 0; j < N; j++) {
      if (!visited[j] && (v == -1 || dist[j] < dist[v]))
        v = j;
    }
    if (dist[v] == INF)
      break;
    visited[v] = true;
    for (int u = 0; u < N; u++) {
      if (dist[v] + adj[v][u] < dist[u]) {
        dist[u] = dist[v] + adj[v][u];
      }
    }
  }
  for (int i = 0; i < N; i++) {
    cout << (i == start ? 0 : dist[i]) << " ";
  }
  cout << "\n";
}
int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL);
  cin >> N >> M;
  for (int i = 0; i < N; i++) {
    fill(adj[i], adj[i] + N, INF);
  }
  for (int i = 0; i < M; i++) {
    int a, b; ll c;
    cin >> a >> b >> c;
    adj[a][b] = c;
  }
  for (int i = 0; i < N; i++) {
    dijkstra(i);
  }
  return 0;
}