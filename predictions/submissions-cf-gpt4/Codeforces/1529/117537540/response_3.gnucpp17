#include <bits/stdc++.h>
#define long long long
#define v vector
long MOD = 1e9 + 7;
int N, M;
int matrix[600][600];

void dijisktra(int start) {
  v<long> cost(N, 1e18);
  v<bool> marked(N, false);
  for (int j = 0; j < N; j++) {
    if (cost[j] > matrix[start][j])
      cost[j] = matrix[start][j];
  }
  while (true) {
    int cur = -1;
    for (int j = 0; j < N; j++) {
      if (cur == -1 && !marked[j]) cur = j;
      else if (!marked[j] && cost[cur] > cost[j]) cur = j;
    }
    if (cur == -1)
      break;
    marked[cur] = true;
    for (int j = 0; j < N; j++) {
      cost[(cur + j) % N] = std::min(cost[(cur + j) % N], cost[cur] + j);
    }
    for (int j = 0; j < N; j++) {
      int price = matrix[cur][j];
      cost[((j + cost[cur])) % N] = std::min(cost[((j + cost[cur])) % N], cost[cur] + price);
    }
  }
  cost[start] = 0;
  copy(cost.begin(), cost.end(), ostream_iterator<long>(cout, " "));
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cin >> N >> M;
  fill(&matrix[0][0], &matrix[0][0] + sizeof(matrix)/sizeof(int), 1 << 30);
  for (int i = 0; i < M; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    matrix[a][b] = c;
  }
  for (int i = 0; i < N; i++) {
    dijisktra(i);
  }
  return 0;
}