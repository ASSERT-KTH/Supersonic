```cpp
#include <vector>
#include <queue>
#include <iostream>
#include <limits>

using namespace std;

typedef pair<long long, long long> pii;
const long long INF = numeric_limits<long long>::max();

int N, M;
vector<vector<pii>> adj;

void dijkstra(int start) {
    vector<long long> dist(N, INF);
    priority_queue<pii, vector<pii>, greater<>> pq;
    dist[start] = 0;
    pq.push({0, start});
    
    while (!pq.empty()) {
        int v = pq.top().second;
        long long d_v = pq.top().first;
        pq.pop();
        if (d_v != dist[v])
            continue;

        for (auto edge : adj[v]) {
            int to = edge.first;
            long long len = edge.second;

            if (dist[v] + len < dist[to]) {
                dist[to] = dist[v] + len;
                pq.push({dist[to], to});
            }
        }
    }
    for (int i = 0; i < N; i++) {
        if (i == start)
            cout << 0 << " ";
        else
            cout << dist[i] << " ";
    }
    cout << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> N >> M;
    adj.resize(N);
    for (int i = 0; i < M; i++) {
        int a, b, c;
        cin >> a >> b >> c;
        adj[a].push_back({b, c});
    }
    for (int i = 0; i < N; i++) {
        dijkstra(i);
    }
    return 0;
}
```