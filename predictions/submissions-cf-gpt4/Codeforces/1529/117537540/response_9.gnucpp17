#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

#define pii pair<long long, int>
#define MAXN 600
#define INF 1e18

using namespace std;

int N, M;
long long matrix[MAXN][MAXN];
vector<long long> cost[MAXN];

void dijisktra(int start) {
  priority_queue<pii, vector<pii>, greater<pii>> pq;

  cost[start].assign(N, INF);
  cost[start][start] = 0;

  pq.push({0, start});

  while (!pq.empty()) {
    int node = pq.top().second;
    long long c = pq.top().first;
    pq.pop();

    if (c != cost[start][node]) continue;

    for (int next = 0; next < N; next++) {
      if (matrix[node][next] != INF) {
        if (cost[start][node] + matrix[node][next] < cost[start][next]) {
          cost[start][next] = cost[start][node] + matrix[node][next];
          pq.push({cost[start][next], next});
        }
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  cin >> N >> M;

  for (int i = 0; i < N; i++)
    fill(matrix[i], matrix[i] + N, INF);

  for (int i = 0; i < M; i++) {
    int a, b; long long c;
    cin >> a >> b >> c;
    matrix[a][b] = min(matrix[a][b], c);
  }

  for (int i = 0; i < N; i++)
    dijisktra(i);

  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++)
      cout << cost[i][j] << ' ';
    cout << '\n';
  }

  return 0;
}