#include <iostream>
#include <vector>
#include <queue>
#include <limits>
using namespace std;

const int INF = numeric_limits<int>::max();
vector<vector<pair<int, int>>> adj;

vector<int> dijkstra(int start, int N) {
    vector<int> dist(N, INF);
    dist[start] = 0;
    priority_queue<pair<int, int>> pq;
    pq.push({0, start});
    while (!pq.empty()) {
        int cost = -pq.top().first;
        int here = pq.top().second;
        pq.pop();
        if (dist[here] < cost) continue;
        for (auto& i : adj[here]) {
            int there = i.first;
            int nextDist = cost + i.second;
            if (dist[there] > nextDist) {
                dist[there] = nextDist;
                pq.push({-nextDist, there});
            }
        }
    }
    return dist;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int N, M;
    cin >> N >> M;
    adj.resize(N);
    for (int i = 0; i < M; i++) {
        int a, b, c;
        cin >> a >> b >> c;
        adj[a].push_back({b, c});
    }
    for (int i = 0; i < N; i++) {
        vector<int> result = dijkstra(i, N);
        for (int j = 0; j < N; j++) {
            if (result[j] == INF)
                cout << "INF ";
            else
                cout << result[j] << " ";
        }
        cout << '\n';
    }
    return 0;
}