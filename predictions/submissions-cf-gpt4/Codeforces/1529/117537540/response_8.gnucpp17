#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const ll INF = 1e18;
const ll MAXN = 600;
ll matrix[MAXN][MAXN];

void dijisktra(int start, int N) {
  vector<ll> cost(N, INF);
  vector<bool> marked(N, false);
  cost[start] = 0;
  for (int i = 0; i < N; i++) {
    int cur = -1;
    for (int j = 0; j < N; j++) {
      if (!marked[j] && (cur == -1 || cost[j] < cost[cur])) {
        cur = j;
      }
    }
    if (cost[cur] == INF)
      break;

    marked[cur] = true;
    for (int j = 0; j < N; j++) {
      if (matrix[cur][j] != INF && cost[cur] + matrix[cur][j] < cost[j]) {
        cost[j] = cost[cur] + matrix[cur][j];
      }
    }
  }
  for (int i = 0; i < N; i++) {
    cout << cost[i] << " ";
  }
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int N, M;
  cin >> N >> M;
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
      matrix[i][j] = (i == j) ? 0 : INF;
    }
  }
  for (int i = 0; i < M; i++) {
    int a, b;
    ll c;
    cin >> a >> b >> c;
    matrix[a][b] = c;
  }
  for (int i = 0; i < N; i++) {
    dijisktra(i, N);
  }
  return 0;
}