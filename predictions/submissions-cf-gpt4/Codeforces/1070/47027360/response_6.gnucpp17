#include <iostream>
#include <queue>
#include <vector>
#include <utility>

using namespace std;
typedef pair<int, int> pii;

vector<vector<bool>> visited(6000, vector<bool>(600, false));
vector<vector<pii>> dp(6000, vector<pii>(600));

int s, d;

bool bfs() {
    queue<pii> q;
    q.push(make_pair(s, 0));
    visited[s][0] = true;
    int f = 1, mul, sum;
    while (!q.empty()) {
        pii p = q.front();
        q.pop();
        for (int i = f; i < 10; ++i) {
            sum = p.first;
            sum -= i;
            mul = p.second * 10 + i;
            mul %= d;
            if (sum == 0 && mul == 0) {
                dp[sum][mul] = p;
                return true;
            }
            if (sum >= 0 && !visited[sum][mul]) {
                visited[sum][mul] = true;
                q.push(make_pair(sum, mul));
                dp[sum][mul] = p;
            }
        }
        f = 0;
    }
    return false;
}

void print(int sum, int mul) {
    if (sum != s || mul != 0) {
        print(dp[sum][mul].first, dp[sum][mul].second);
    }
    cout << sum - dp[sum][mul].first;
}

int main() {
    cin >> d >> s;
    if (bfs()) {
        print(0, 0);
    } else {
        cout << -1 << endl;
    }
    return 0;
}