#include <iostream>
#include <queue>
#include <utility>
#include <cstring>
using namespace std;

typedef pair<int, int> pii;
const int MAX = 6005;

bool visited[MAX][MAX];
pii dp[MAX][MAX];
int s, d;

bool bfs() {
  queue<pii> q;
  q.push(make_pair(s, 0));
  visited[s][0] = true;
  pii p;
  int f = 1, mul, sum;

  while (!q.empty()) {
    p = q.front();
    q.pop();

    for (int i = f; i < 10; i++) {
      sum = p.first - i;
      mul = (p.second * 10 + i) % d;
      
      if (sum == 0 && mul == 0) {
        dp[sum][mul] = make_pair(p.first, p.second);
        return true;
      }
      
      if (sum >= 0 && !visited[sum][mul]) {
        visited[sum][mul] = true;
        q.push(make_pair(sum, mul));
        dp[sum][mul] = make_pair(p.first, p.second);
      }
    }
    f = 0;
  }
  return false;
}

void print(int sum, int mul) {
  if (sum == s && mul == 0) return;
  print(dp[sum][mul].first, dp[sum][mul].second);
  cout << dp[sum][mul].first - sum;
}

int main() {
  cin >> d >> s;
  memset(visited, false, sizeof(visited));

  if (bfs()) {
    print(0, 0);
  } else {
    cout << -1 << '\n';
  }
  return 0;
}