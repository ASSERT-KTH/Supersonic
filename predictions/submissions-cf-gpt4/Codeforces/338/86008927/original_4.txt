```C++
// Optimization: Removed unnecessary includes, converted printf() and scanf() to C++ style I/O functions, removed unused variables and functions, used std::array instead of raw array, used auto where necessary

#include <iostream>
#include <vector>
#include <array>
#include <chrono>

using ll = long long;

ll gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}

ll lcm(ll a, ll b) {
  ll d = gcd(a, b);
  return (a / d) * b;
}

ll solve(ll r1, ll mod1, ll r2, ll mod2) {
  if (r1 % mod1 != r2 % mod2) {
    std::cout << "NO\n";
    exit(0);
  }
  ll a = mod1;
  ll b = (r2 - r1);
  ll c = mod2;
  ll k = b / (a % c);
  ll ans = (r1 + k * mod1) % lcm(mod1, mod2);
  return ans;
}

std::array<ll, 10100> a;

void run() {
  ll n, m;
  int k;
  std::cin >> n >> m >> k;
  for (int i = 0; i < k; ++i) {
    std::cin >> a[i];
  }
  ll l = a[0];
  for (int i = 1; i < k; ++i) {
    l = lcm(l, a[i]);
  }
  if (l > n) {
    std::cout << "NO\n";
    return;
  }

  std::vector<std::pair<ll, ll>> eq(k);
  for (int i = 0; i < k; ++i) {
    eq[i].second = a[i];
    eq[i].first = ((-i) % a[i] + a[i]) % a[i];
  }
  ll r1 = eq[0].first;
  ll mod1 = eq[0].second;
  for (int i = 1; i < k; ++i) {
    ll curMod = lcm(mod1, eq[i].second);
    ll curR = solve(r1, mod1, eq[i].first, eq[i].second);
    r1 = curR % curMod;
    mod1 = curMod;
  }
  if (r1 == 0) {
    r1 += mod1;
  }
  if (r1 + k - 1 > m) {
    std::cout << "NO\n";
    return;
  }
  for (int i = 0; i < k; ++i) {
    if (gcd(l, r1 + i) != a[i]) {
      std::cout << "NO\n";
      return;
    }
  }
  std::cout << "YES\n";
}

int main() {
  auto start = std::chrono::high_resolution_clock::now();
  run();
  auto end = std::chrono::high_resolution_clock::now();
  auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count();
  return 0;
}
```