#include <chrono>
#include <iostream>
#include <vector>

using namespace std;
using ll = long long;

const int N = 10100;
ll a[N];

ll gcd(ll a, ll b) {
  return b == 0 ? a : gcd(b, a % b);
}

ll lcm(ll a, ll b) {
  return a / gcd(a, b) * b;
}

ll binmul(ll a, ll b, ll mod) {
  ll res = 0;
  while (b > 0) {
    if (b & 1) res = (res + a) % mod;
    a = (a + a) % mod;
    b >>= 1;
  }
  return res;
}

ll solve(ll r1, ll mod1, ll r2, ll mod2) {
  ll g = gcd(mod1, mod2);
  if (r1 % g != r2 % g) exit(0);
  ll a = mod1 / g, b = (r2 - r1) / g, c = mod2 / g, x, y;
  for (x = 1, y = 0; a * x % c != 1; x++);
  ll k = binmul(b, x, c);
  return (r1 + k * mod1) % lcm(mod1, mod2);
}

void run() {
  ll n, m, l;
  int k;
  cin >> n >> m >> k;
  for (int i = 0; i < k; ++i) cin >> a[i];
  for (l = a[0], int i = 1; i < k; ++i) l = lcm(l, a[i]);
  if (l > n) return;
  vector<pair<ll, ll>> eq(k);
  for (int i = 0; i < k; ++i) {
    eq[i].second = a[i];
    eq[i].first = ((-i) % a[i] + a[i]) % a[i];
  }
  ll r1 = eq[0].first, mod1 = eq[0].second;
  for (int i = 1; i < k; ++i) {
    ll curMod = lcm(mod1, eq[i].second);
    ll curR = solve(r1, mod1, eq[i].first, eq[i].second);
    r1 = (curR % curMod + curMod) % curMod;
    mod1 = curMod;
  }
  if (r1 == 0) r1 += mod1;
  if (r1 + k - 1 > m) return;
  for (int i = 0; i < k; ++i) if (gcd(l, r1 + i) != a[i]) return;
  cout << "YES\n";
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  run();
  return 0;
}