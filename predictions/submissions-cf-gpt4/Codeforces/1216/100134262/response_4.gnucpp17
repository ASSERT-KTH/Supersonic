#include <bits/stdc++.h>
#define MAX_N 2000000
#define INF 1e18
#define ll long long

using namespace std;

ll dp[MAX_N + 5], lazy[MAX_N + 5];

void propagate(ll id, ll l, ll r) {
    dp[id] = min(dp[id], lazy[id]);
    if (l != r) {
        lazy[id << 1] = min(lazy[id << 1], lazy[id]);
        lazy[id << 1 | 1] = min(lazy[id << 1 | 1], lazy[id]);
    }
    lazy[id] = INF;
}

void update(ll id, ll l, ll r, ll lq, ll rq, ll val) {
    propagate(id, l, r);
    if (l > r || l > rq || r < lq)
        return;
    if (lq <= l && r <= rq) {
        lazy[id] = min(lazy[id], val);
        propagate(id, l, r);
        return;
    }
    ll mid = (l + r) >> 1;
    update(id << 1, l, mid, lq, rq, val);
    update(id << 1 | 1, mid + 1, r, lq, rq, val);
    dp[id] = min(dp[id << 1], dp[id << 1 | 1]);
}

ll query(ll id, ll l, ll r, ll lq, ll rq) {
    propagate(id, l, r);
    if (l > r || l > rq || r < lq)
        return INF;
    if (lq <= l && r <= rq)
        return dp[id];
    ll mid = (l + r) >> 1;
    return min(query(id << 1, l, mid, lq, rq),
               query(id << 1 | 1, mid + 1, r, lq, rq));
}

void solve() {
    fill(dp, dp + MAX_N + 5, INF);
    fill(lazy, lazy + MAX_N + 5, INF);
    ll n, k;
    cin >> n >> k;
    string s;
    cin >> s;
    ll m = 2 * n;
    for (ll i = 1; i <= n; i++) {
        if (i == 1)
            update(1, 1, m, i, i, i);
        else
            update(1, 1, m, i, i, query(1, 1, m, i - 1, i - 1) + i);
        if (s[i - 1] == '1') {
            ll lower_bound = max(i - k, 1LL);
            ll upper_bound = min(i + k, n);
            ll val = (i <= k + 1) ? i : query(1, 1, m, lower_bound - 1, i) + i;
            update(1, 1, m, lower_bound, upper_bound, val);
        }
    }
    cout << query(1, 1, m, n, n) << "\n";
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    solve();
    return 0;
}