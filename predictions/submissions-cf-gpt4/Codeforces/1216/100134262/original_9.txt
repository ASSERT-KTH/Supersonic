```
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

#define ll long long
#define MAXN 2000002
#define INF LLONG_MAX

using namespace std;

ll dp[MAXN], lazy[4 * MAXN];

void push(int id, int l, int r) {
    dp[id] = min(dp[id], lazy[id]);
    if (l != r) {
        lazy[2 * id] = min(lazy[2 * id], lazy[id]);
        lazy[2 * id + 1] = min(lazy[2 * id + 1], lazy[id]);
    }
    lazy[id] = INF;
}

void upd(int id, int l, int r, int lq, int rq, ll val) {
    push(id, l, r);
    if (l > r || l > rq || r < lq)
        return;
    if (lq <= l and r <= rq) {
        lazy[id] = min(lazy[id], val);
        push(id, l, r);
        return;
    }
    int mid = (l + r) / 2;
    upd(2 * id, l, mid, lq, rq, val);
    upd(2 * id + 1, mid + 1, r, lq, rq, val);
    dp[id] = min(dp[2 * id], dp[2 * id + 1]);
}

ll get(int id, int l, int r, int lq, int rq) {
    push(id, l, r);
    if (l > r || l > rq || r < lq)
        return INF;
    if (lq <= l and r <= rq)
        return dp[id];
    int mid = (l + r) / 2;
    return min(get(2 * id, l, mid, lq, rq),
               get(2 * id + 1, mid + 1, r, lq, rq));
}

void solve() {
    fill(dp, dp + MAXN, INF);
    fill(lazy, lazy + 4 * MAXN, INF);
    int n, k;
    cin >> n >> k;
    string s;
    cin >> s;
    int m = 2 * n;
    for (int i = 1; i <= n; i++) {
        if (i == 1)
            upd(1, 1, m, i, i, i);
        else
            upd(1, 1, m, i, i, get(1, 1, m, i - 1, i - 1) + i);
        if (i <= k + 1 && s[i - 1] == '1')
            upd(1, 1, m, i + 1, i + k, i);
        else if (s[i - 1] == '1' && i > k + 1) {
            ll gg = get(1, 1, m, i - k - 1, i);
            upd(1, 1, m, i - k, i + k, gg + i);
        }
    }
    cout << get(1, 1, m, n, n) << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    solve();
}
```