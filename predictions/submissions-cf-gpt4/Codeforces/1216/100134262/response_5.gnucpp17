#include <iostream>
#include <cstring>
#include <vector>
#define MAXN 301
#define MOD 1000000007
#define ll unsigned long long
using namespace std;

int spf[MAXN];
int fac[MAXN];
int dp[2000001], lazy[2000001] = {0};

void sieve() {
  spf[1] = 1;
  for (int i = 2; i < MAXN; i++)
    spf[i] = i;
  for (int i = 4; i < MAXN; i += 2)
    spf[i] = 2;
  for (int i = 3; i * i < MAXN; i++) {
    if (spf[i] == i) {
      for (int j = i * i; j < MAXN; j += i)
        if (spf[j] == j)
          spf[j] = i;
    }
  }
}

void push(int id, int l, int r) {
  dp[id] = min(dp[id], lazy[id]);
  if (l != r) {
    lazy[id * 2] = min(lazy[id * 2], lazy[id]);
    lazy[id * 2 + 1] = min(lazy[id * 2 + 1], lazy[id]);
  }
  lazy[id] = 1e18;
}

void upd(int id, int l, int r, int lq, int rq, int val) {
  push(id, l, r);
  if (l > r || l > rq || r < lq)
    return;
  if (lq <= l && r <= rq) {
    lazy[id] = min(lazy[id], val);
    push(id, l, r);
    return;
  }
  int mid = (l + r) >> 1;
  upd(id * 2, l, mid, lq, rq, val);
  upd(id * 2 + 1, mid + 1, r, lq, rq, val);
  dp[id] = min(dp[id * 2], dp[id * 2 + 1]);
}

int get(int id, int l, int r, int lq, int rq) {
  push(id, l, r);
  if (l > r || l > rq || r < lq)
    return 1e18;
  if (lq <= l && r <= rq)
    return dp[id];
  int mid = (l + r) >> 1;
  return min(get(id * 2, l, mid, lq, rq),
             get(id * 2 + 1, mid + 1, r, lq, rq));
}

void solve() {
  for (int i = 0; i <= 2000000; i++) {
    dp[i] = 1e18;
    lazy[i] = 1e18;
  }
  int n, k;
  cin >> n >> k;
  string s;
  cin >> s;
  int m = 2 * n;
  for (int i = 1; i <= n; i++) {
    if (i == 1)
      upd(1, 1, m, i, i, i);
    else
      upd(1, 1, m, i, i, get(1, 1, m, i - 1, i - 1) + i);
    if (i <= k + 1 && s[i - 1] == '1')
      upd(1, 1, m, i + 1, i + k, i);
    else if (s[i - 1] == '1' && i >= k + 2) {
      int gg = get(1, 1, m, i - k - 1, i);
      upd(1, 1, m, i - k, i + k, gg + i);
    }
  }
  cout << get(1, 1, m, n, n) << endl;
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(NULL);
  solve();
  return 0;
}