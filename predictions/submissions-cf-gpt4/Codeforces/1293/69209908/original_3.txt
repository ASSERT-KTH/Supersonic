```C++
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <cstdint>

using namespace std;

typedef int64_t ll;

struct Point {
  ll x, y;
};

ll dist(const Point &a, const Point &b) {
  return abs(a.x - b.x) + abs(a.y - b.y);
}

Point next(const Point &p, ll ax, ll bx, ll ay, ll by) {
  return {ax * p.x + bx, ay * p.y + by};
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

  ll xx, yy, ax, ay, bx, by, xs, ys, t;
  cin >> xx >> yy >> ax >> ay >> bx >> by >> xs >> ys >> t;

  vector<Point> arr;
  arr.reserve(70);

  Point cur_point = {xx, yy};
  Point dest_point = {xs, ys};

  if (dist(cur_point, dest_point) <= t) {
    arr.push_back(cur_point);
  }

  while (true) {
    cur_point = next(cur_point, ax, bx, ay, by);

    if (cur_point.x > dest_point.x || cur_point.y > dest_point.y || cur_point.x < 0 || cur_point.y < 0) {
      break;
    }

    if (dist(cur_point, dest_point) <= t) {
      arr.push_back(cur_point);
    }
  }

  ll ans = 0;
  for (size_t i = 0; i < arr.size(); ++i) {
    ll dus = dist(dest_point, arr[i]);
    if (dus <= t) {
      size_t j = i;
      while (j < arr.size() - 1 && dus + dist(arr[j], arr[j + 1]) <= t) {
        dus += dist(arr[j], arr[j + 1]);
        ++j;
      }
      ans = max(ans, j - i + 1);
    }
  }
  cout << ans;
}
```