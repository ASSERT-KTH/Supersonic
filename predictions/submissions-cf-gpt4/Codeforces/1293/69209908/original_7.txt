```cpp
#include <vector>
#include <algorithm>
#include <iostream>
#include <cmath>

using namespace std;

using ll = long long;
using pll = pair<ll, ll>;

ll dist(pll a, pll b) {
  return abs(a.first - b.first) + abs(a.second - b.second);
}

pll next(pll temp, ll ax, ll bx, ll ay, ll by) {
  return make_pair(ax * temp.first + bx, ay * temp.second + by);
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  ll xx, yy, ax, ay, bx, by, xs, ys, t;
  cin >> xx >> yy >> ax >> ay >> bx >> by >> xs >> ys >> t;

  vector<pll> arr;
  pll temp = make_pair(xx, yy);
  pll tx = make_pair(xs, ys);

  while (true) {
    ll dea = dist(temp, tx);
    if (dea <= t) {
      arr.push_back(temp);
    }
    pll next_temp = next(temp, ax, bx, ay, by);
    if (dist(tx, next_temp) > dea) {
      break;
    }
    temp = next_temp;
  }

  ll ans = 0;
  for (int i = 0; i < arr.size(); i++) {
    ll dus = dist(tx, arr[i]);
    ll tx = dus;
    int j = i;
    if (dus <= t) {
      while (j < arr.size() - 1 && dus <= t) {
        j++;
        dus += dist(arr[j], arr[j - 1]);
      }
      ans = max(ans, dus <= t ? (ll)j - i + 1 : (ll)j - i);
      dus = tx;
      j = i;
      while (j > 0 && dus <= t) {
        j--;
        dus += dist(arr[j], arr[j + 1]);
      }
      ans = max(ans, dus <= t ? (ll)i - j + 1 : (ll)i - j);
    }
  }
  cout << ans;
  return 0;
}
```