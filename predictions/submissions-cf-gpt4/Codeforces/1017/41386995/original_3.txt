```cpp
#include <cstdio>
#include <cstdlib>
#include <cstring>
#define ll long long
#define MAXN 2500000 + 2
#define MAXP 1992
#define MASK 63
#define MOD 4294967296
using namespace std;

inline ll read() {
    char s;
    ll k = 0, base = 1;
    while ((s = getchar()) != '-' && s != EOF && !(isdigit(s)))
        ;
    if (s == EOF)
        exit(0);
    if (s == '-')
        base = -1, s = getchar();
    while (isdigit(s)) {
        k = k * 10 + (s ^ '0');
        s = getchar();
    }
    return k * base;
}

inline ll f(unsigned int x, unsigned int A, unsigned int B, unsigned int C, unsigned int D) {
    return (ll)(A) * x * x * x + (ll)(B) * x * x + (ll)(C) * x + D;
}

inline unsigned int qwq(int x) {
    return (unsigned int)(x - x / 2 - x / 3 - x / 5 + x / 6 + x / 10 + x / 15 - x / 30);
}

unsigned int p[MAXN / 32 + 1];
unsigned int P[MAXP], l;
ll ans;

int main() {
    unsigned int n, A, B, C, D;
    unsigned int i, j, x, F1;
    bool flag = false;
    n = read();
    A = read(), B = read(), C = read(), D = read();
    for (i = 2; i * 2 <= n; i++) {
        if (i == 2 || i == 3 || i == 5 || ((i & 1) && i % 3 != 0 && i % 5 != 0 && !(p[qwq(i) >> 5] & (1 << (qwq(i) & MASK))))) {
            if (!flag) {
                P[++l] = i;
            }
            for (j = i, F1 = f(i, A, B, C, D); j <= n; j *= i) {
                ans = (ans + (ll)(n / j) * F1) % MOD;
                if ((ll)j * i > n)
                    break;
            }
        }
        if ((ll)P[l] * i > n) {
            flag = true;
        }
        while ((ll)P[l] * i > n)
            l--;
        for (j = 1; j <= l && (ll)P[j] * i <= n; j++) {
            x = P[j] * i;
            if ((x & 1) && x % 3 != 0 && x % 5 != 0) {
                p[qwq(x) >> 5] |= (1 << (qwq(x) & MASK));
            }
            if (i % P[j] == 0)
                break;
        }
    }
    for (; i <= n; i++) {
        if (i == 2 || i == 3 || i == 5 || ((i & 1) && i % 3 != 0 && i % 5 != 0 && !(p[qwq(i) >> 5] & (1 << (qwq(i) & MASK))))) {
            for (j = i, F1 = f(i, A, B, C, D); j <= n; j *= i) {
                ans = (ans + (ll)(n / j) * F1) % MOD;
                if ((ll)j * i > n)
                    break;
            }
        }
    }
    printf("%lld\n", ans);
    return 0;
}
```