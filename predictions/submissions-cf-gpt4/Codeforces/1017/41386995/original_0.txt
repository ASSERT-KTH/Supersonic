```C++
#include <iostream>
#include <vector>

#define ll long long
#define MAX 2500000 + 2

using namespace std;

unsigned int n, A, B, C, D;
unsigned int ans;
unsigned int p[MAX];
vector<unsigned int> P;

inline ll read() {
    ll k = 0, base = 1;
    char s;
    while ((s = getchar()) != '-' && s != EOF && !(isdigit(s)));
    if (s == EOF)
        exit(0);
    if (s == '-')
        base = -1, s = getchar();
    while (isdigit(s)) {
        k = k * 10 + (s ^ '0');
        s = getchar();
    }
    return k * base;
}

inline unsigned int f(unsigned int x) {
    return A * x * x * x + B * x * x + C * x + D;
}

inline bool prime(unsigned int x) {
    if(x == 2 || x == 3 || x == 5 || ((x & 1) && x % 3 != 0 && x % 5 != 0 && p[x] == 0)) 
        return true;
    return false;
}

int main() {
    ans = 0;
    unsigned int i, j, F1;
    bool flag = false;
    n = read();
    A = read(), B = read(), C = read(), D = read();
    for (i = 2; i * 2 <= n; i++) {
        if (prime(i)) {
            if (!flag) P.push_back(i);
            j = i;
            F1 = f(i);
            while (j <= n) {
                ans += (n / j) * F1;
                if ((ll)j * (ll)i > n) break;
                j *= i;
            }
        }
        if ((ll)P.back() * i > n) flag = true;
        while ((ll)P.back() * i > n) P.pop_back();
        for (j = 0; j < P.size() && (ll)P[j] * i <= n; j++) {
            if (i % P[j] == 0) break;
            if (prime(P[j] * i)) p[P[j] * i] = 1;
        }
    }
    for (; i <= n; i++) {
        if (prime(i)) {
            j = i;
            F1 = f(i);
            while (j <= n) {
                ans += (n / j) * F1;
                if ((ll)j * (ll)i > n) break;
                j *= i;
            }
        }
    }
    cout << ans;
    return 0;
}
```