```c++
#include <vector>
#include <map>
#include <algorithm>
#include <iostream>
#define NMAX 100001
#define INF (1LL << 60)
#define HALF (1LL << 59)
#define MOD 1000000007
#define BLOCK 518
#define base 31
#define nr_of_bits 21
#define LIMIT 1000

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
int dp[BLOCK][NMAX];
int cnt[NMAX];
vector<int> lvl[NMAX];
vector<int> v[NMAX];
vector<int> levelecu[NMAX];
map<int, int> mp;
map<int, int> l;
int depth;
char cul[NMAX];
int cc[NMAX];

void DFS(int node, int p, int level) {
  lvl[level].push_back(node);
  depth = max(depth, level);
  for (auto x : v[node]) {
    if (x != p)
      DFS(x, node, level + 1);
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  int n, x;
  cin >> n >> x;
  int a = x;
  int b = n - x;
  for (int i = 2; i <= n; i++) {
    cin >> x;
    v[x].push_back(i);
    v[i].push_back(x);
  }
  for (int i = 1; i <= n; i++) {
    cnt[i] = v[i].size() - (i != 1);
  }
  DFS(1, 0, 1);
  for (int i = 1; i <= n; i++) {
    if (lvl[i].size() == 0)
      continue;
    levelecu[lvl[i].size()].push_back(i);
    mp[lvl[i].size()]++;
  }
  int c = 0;
  dp[0][0] = 1;
  for (auto x : mp) {
    ++c;
    cc[c] = x.first;
    int val = x.first;
    int freq = x.second;
    for (int i = 0; i < val; i++) {
      l[i] = -1;
    }
    for (int i = 0; i <= a; i++) {
      if (dp[c - 1][i])
        l[i % val] = i;
      int rest = i % val;
      if (l[rest] != -1 && (i - l[rest]) / val <= freq) {
        dp[c][i] = 1;
      }
    }
  }
  vector<int> sol, alvl;
  if (dp[c][a]) {
    int cant = a;
    while (c > 0) {
      pii r = {cc[c], 0};
      c--;
      while (!dp[c][cant]) {
        cant -= r.first;
        r.second++;
      }
      while (r.second--)
        sol.push_back(r.first);
    }
    for (auto x : sol) {
      alvl.push_back(levelecu[x].back());
      levelecu[x].pop_back();
    }
    for (auto x : alvl) {
      for (auto y : lvl[x]) {
        cul[y] = 'a';
      }
    }
    cout << depth << "\n";
    for (int i = 1; i <= n; i++) {
      if (cul[i] != 'a')
        cul[i] = 'b';
      cout << cul[i];
    }
    return 0;
  }
  for (int i = 1; i <= n; i++) {
    if (lvl[i].size() == 0)
      continue;
    int sz = lvl[i].size();
    if (sz <= a) {
      a -= sz;
      for (auto x : lvl[i])
        cul[x] = 'a';
      continue;
    }
    if (sz <= b) {
      b -= sz;
      for (auto x : lvl[i])
        cul[x] = 'b';
      continue;
    }
    for (auto x : lvl[i]) {
      if (cnt[x] > 0) {
        cul[x] = (a > b) ? 'a' : 'b';
        (a > b) ? a-- : b--;
      }
    }
    for (auto x : lvl[i]) {
      if ((a > b && cul[x] != 'a') || (b >= a && cul[x] != 'b')) {
        cul[x] = (a > b) ? 'a' : 'b';
        (a > b) ? a-- : b--;
      }
    }
    for (auto x : lvl[i]) {
      if ((a > b && cul[x] != 'a') || (b >= a && cul[x] != 'b')) {
        cul[x] = (a > b) ? 'a' : 'b';
        (a > b) ? a-- : b--;
      }
    }
  }
  cout << depth + 1 << "\n";
  for (int i = 1; i <= n; i++) {
    cout << cul[i];
  }
  return 0;
}
```