#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <cstring>

using namespace std;

const int NMAX = 1e5+11;

int n, a, b, i, j, x;
int dp[520][NMAX], cnt[NMAX], cc[NMAX];
vector<int> v[NMAX], level[NMAX], levelecu[NMAX];
map<int, int> mp, l;

int depth;
char cul[NMAX];

void DFS(int node, int p, int level) {
  lvl[level].push_back(node);
  depth = max(depth, level);
  for (auto x : v[node]) {
    if (x == p)
      continue;
    DFS(x, node, level + 1);
  }
}

int main() {
  cin >> n >> a;
  b = n - a;
  for (i = 2; i <= n; i++) {
    cin >> x;
    v[x].push_back(i);
    v[i].push_back(x);
  }
  for (i = 1; i <= n; i++) {
    cnt[i] = v[i].size() - (i != 1);
  }
  DFS(1, 0, 1);
  for (i = 1; i <= n; i++) {
    if (lvl[i].size() == 0)
      continue;
    levelecu[lvl[i].size()].push_back(i);
    mp[lvl[i].size()]++;
  }
  int c = 0;
  dp[0][0] = 1;
  for (auto x : mp) {
    ++c;
    cc[c] = x.first;
    int val = x.first;
    int freq = x.second;
    l.clear();
    for (i = 0; i <= a; i++) {
      if (dp[c - 1][i])
        l[i % val] = i;
      if (l.count(i % val) && (i - l[i % val]) / val <= freq)
        dp[c][i] = 1;
    }
  }
  if (dp[c][a]) {
    int cant = a;
    vector<int> sol;
    while (c > 0) {
      int r = cc[c];
      c--;
      while (!dp[c][cant]) {
        cant -= r;
        sol.push_back(r);
      }
    }
    vector<int> alvl;
    for (auto x : sol) {
      alvl.push_back(levelecu[x].back());
      levelecu[x].pop_back();
    }
    for (auto x : alvl) {
      for (auto y : lvl[x]) {
        cul[y] = 'a';
      }
    }
    cout << depth << "\n";
    for (int i = 1; i <= n; i++) {
      if (cul[i] != 'a')
        cul[i] = 'b';
      cout << cul[i];
    }
    return 0;
  }
  for (int i = 1; i <= n; i++) {
    if (lvl[i].size() == 0)
      continue;
    int sz = lvl[i].size();
    if (sz <= a || sz <= b) {
      for (auto x : lvl[i])
        cul[x] = sz <= a ? 'a' : 'b';
      if (sz <= a) a -= sz;
      else b -= sz;
    }
  }
  cout << depth + 1 << "\n";
  for (int i = 1; i <= n; i++) {
    cout << cul[i];
  }
  return 0;
}