#include <iostream>
#include <vector>
#include <map>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
const ll NMAX = 100001;
vector<int> lvl[NMAX];
vector<int> v[NMAX];
vector<int> levelecu[NMAX];
map<int, int> mp;
int depth;
char cul[NMAX];
int cc[NMAX];
void DFS(int node, int p, int level) {
  lvl[level].push_back(node);
  depth = max(depth, level);
  for (auto x : v[node]) {
    if (x == p)
      continue;
    DFS(x, node, level + 1);
  }
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, x, i;
  cin >> n >> x;
  int a = x;
  int b = n - x;
  v[1].reserve(n);
  for (i = 2; i <= n; i++) {
    cin >> x;
    v[x].push_back(i);
    v[i].push_back(x);
  }
  DFS(1, 0, 1);
  for (i = 1; i <= n; i++) {
    if (lvl[i].empty())
      continue;
    levelecu[lvl[i].size()].push_back(i);
    mp[lvl[i].size()]++;
  }
  vector<int> dp(a+1, 0);
  dp[0] = 1;
  for (auto x : mp) {
    vector<int> dp_new(a+1, 0);
    for (int i = 0; i <= a; i++) {
      if (i >= x.first)
        dp_new[i] = max(dp_new[i-x.first], dp[i]);
      else
        dp_new[i] = dp[i];
    }
    dp = dp_new;
  }
  if (dp[a]) {
    int cant = a;
    vector<int> sol;
    for (auto x = mp.rbegin(); x != mp.rend(); ++x) {
      while (cant >= x->first) {
        cant -= x->first;
        sol.push_back(x->first);
        x->second--;
      }
    }
    for (auto x : sol) {
      for (auto y : lvl[x]) {
        cul[y] = 'a';
      }
    }
    cout << depth << "\n";
    for (int i = 1; i <= n; i++) {
      if (cul[i] != 'a')
        cul[i] = 'b';
      cout << cul[i];
    }
    return 0;
  }
  cout << depth + 1 << "\n";
  for (int i = 1; i <= n; i++) {
    if (lvl[i].empty())
      continue;
    for (auto x : lvl[i]) {
      if (a > b && a > 0) {
        cul[x] = 'a';
        a--;
      } else if (b > 0) {
        cul[x] = 'b';
        b--;
      }
    }
  }
  for (int i = 1; i <= n; i++) {
    cout << cul[i];
  }
  return 0;
}