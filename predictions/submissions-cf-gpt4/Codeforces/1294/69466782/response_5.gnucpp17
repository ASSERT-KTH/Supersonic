#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#define maxn 300005

using namespace std;

vector<int> graph[maxn];
int par[maxn], dist[maxn];
int n;
vector<int> vec;

pair<int, int> dfs(int u, int p = -1, int d = 0) {
  par[u] = p;
  dist[u] = d;
  pair<int, int> res = make_pair(d, u);
  
  for (int v : graph[u]) {
    if (v == p)
      continue;
    res = max(res, dfs(v, u, d + 1));
  }
  
  return res;
}

void bfs() {
  queue<int> Q;
  
  for (int v : vec) {
    dist[v] = 0;
    Q.push(v);
  }
  
  while (!Q.empty()) {
    int u = Q.front();
    Q.pop();
    
    for (int v : graph[u]) {
      if (dist[v] == -1) {
        dist[v] = dist[u] + 1;
        Q.push(v);
      }
    }
  }
  
  int mx = 0, node = 0;
  
  for (int i = 1; i <= n; i++) {
    if (dist[i] > mx) {
      mx = dist[i];
      node = i;
    }
  }
  
  cout << (int)vec.size() - 1 + mx << endl;
  cout << vec[0] << " " << node << " " << vec.back() << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  
  cin >> n;
  
  for (int i = 1; i < n; i++) {
    int u, v;
    cin >> u >> v;
    graph[u].push_back(v);
    graph[v].push_back(u);
  }
  
  pair<int, int> da = dfs(1);
  pair<int, int> df = dfs(da.second);
  
  for (int v = df.second; v != da.second; v = par[v])
    vec.push_back(v);
  
  vec.push_back(da.second);
  
  if (vec.size() == n) {
    cout << n - 1 << endl;
    cout << vec[0] << " " << vec[1] << " " << vec.back() << endl;
  } else {
    fill(dist + 1, dist + n + 1, -1);
    bfs();
  }
  
  return 0;
}