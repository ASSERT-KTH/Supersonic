```c++
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

constexpr int INF = 1 << 30;
constexpr int maxn = 1000005;
constexpr double PI = acos(-1.0);
constexpr ll mod = 1e9 + 7;

inline void normal(ll &a) {
  a %= mod;
  (a < 0) && (a += mod);
}

inline ll modMul(ll a, ll b) {
  a %= mod, b %= mod;
  normal(a), normal(b);
  return (a * b) % mod;
}

inline ll modAdd(ll a, ll b) {
  a %= mod, b %= mod;
  normal(a), normal(b);
  return (a + b) % mod;
}

inline ll modSub(ll a, ll b) {
  a %= mod, b %= mod;
  normal(a), normal(b);
  a -= b;
  normal(a);
  return a;
}

inline ll modPow(ll b, ll p) {
  ll r = 1;
  while (p) {
    if (p & 1)
      r = modMul(r, b);
    b = modMul(b, b);
    p >>= 1;
  }
  return r;
}

inline ll modInverse(ll a) { return modPow(a, mod - 2); }

inline ll modDiv(ll a, ll b) { return modMul(a, modInverse(b)); }

const int N = 3e5 + 5;
vector<int> graph[N];
int par[N];
int n;
vector<int> vec;

pair<int, int> dfs(int u, int p = -1, int dist = 0) {
  par[u] = p;
  pair<int, int> x = make_pair(dist, u);
  for (auto v : graph[u]) {
    if (v == p)
      continue;
    x = max(x, dfs(v, u, dist + 1));
  }
  return x;
}

void bfs() {
  queue<int> Q;
  vector<int> d(n + 1, -1);
  for (auto v : vec) {
    d[v] = 0;
    Q.push(v);
  }
  while (!Q.empty()) {
    int u = Q.front();
    Q.pop();
    for (auto v : graph[u]) {
      if (d[v] == -1) {
        d[v] = d[u] + 1;
        Q.push(v);
      }
    }
  }
  pair<int, int> ret = make_pair(d[1], 1);
  for (int i = 2; i <= n; i++) {
    ret = max(ret, make_pair(d[i], i));
  }
  cout << vec.size() - 1 + ret.first << "\n";
  cout << vec[0] << " " << ret.second << " " << vec.back() << "\n";
  return;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  
  cin >> n;
  for (int i = 1; i < n; i++) {
    int u, v;
    cin >> u >> v;
    graph[u].push_back(v);
    graph[v].push_back(u);
  }
  pair<int, int> da = dfs(1);
  pair<int, int> df = dfs(da.second);
  int v = df.second;
  while (v != da.second) {
    vec.push_back(v);
    v = par[v];
  }
  vec.push_back(da.second);
  if (vec.size() == n) {
    cout << n - 1 << "\n";
    cout << vec[0] << " " << vec[1] << " " << vec.back() << "\n";
  } else {
    bfs();
  }
}
```