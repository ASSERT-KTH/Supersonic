#include <iostream>
#include <vector>
#include <queue>

using namespace std;

vector<int> adj[200005];
int indeg[200005], order[200005];

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int t, n, m, a, b, c;
    vector<pair<int, int>> edges;
    cin >> t;
    while (t--) {
        cin >> n >> m;
        edges.clear();
        for (int i = 1; i <= n; i++) {
            adj[i].clear();
            indeg[i] = 0;
        }
        for (int i = 0; i < m; i++) {
            cin >> a >> b >> c;
            edges.push_back({b, c});
            if (a == 1) {
                adj[b].push_back(c);
                indeg[c]++;
            }
        }

        queue<int> q;
        for (int i = 1; i <= n; i++) {
            if (indeg[i] == 0) {
                q.push(i);
            }
        }

        int idx = 0;
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            order[node] = ++idx;
            for (int next : adj[node]) {
                if (--indeg[next] == 0) {
                    q.push(next);
                }
            }
        }

        if (idx == n) {
            cout << "YES\n";
            for (auto [u, v] : edges) {
                if (order[u] > order[v]) {
                    swap(u, v);
                }
                cout << u << ' ' << v << '\n';
            }
        } else {
            cout << "NO\n";
        }
    }

    return 0;
}