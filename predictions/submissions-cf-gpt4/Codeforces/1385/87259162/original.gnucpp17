#include <bits/stdc++.h>
using namespace std;
typedef long long int LL;
typedef unsigned long long ULL;
#define FORb(i, start, n) for (int i = start; i < n; i++)
#define FORe(i, end, n) for (int i = end; i >= n; i--)
#define print(arr, n)                                                          \
  for (int i = 0; i < n; ++i)                                                  \
  cout << arr[i] << " "
#define pii pair<int, int>
#define plli pair<LL, LL>
#define pdd pair<double, double>
#define pb(v, a) v.push_back(a);
#define ins(s, a) s.insert(a);
#define CPS (double)CLOCKS_PER_SEC
#ifdef _WIN32
#define gx getchar
#define px putchar
#define ps putchar(' ')
#define pn putchar('\n')
#else
#define gx getchar_unlocked
#define px putchar_unlocked
#define ps putchar_unlocked(' ')
#define pn putchar_unlocked('\n')
#endif
#define MOD1 1000000007LL
#define MOD2 998244353LL
#define EPSILON 0.00001
#define BIG INT_MAX
#define SMALL INT_MIN
void is(int &n) {
  int sign = 1;
  n = 0;
  char c = gx();
  while (c < '0' || c > '9') {
    if (c == '-')
      sign = -1;
    c = gx();
  }
  while (c >= '0' && c <= '9')
    n = (n << 3) + (n << 1) + c - '0', c = gx();
  n = n * sign;
}
void lis(LL &n) {
  int sign = 1;
  n = 0;
  char c = gx();
  while (c < '0' || c > '9') {
    if (c == '-')
      sign = -1;
    c = gx();
  }
  while (c >= '0' && c <= '9')
    n = (n << 3) + (n << 1) + c - '0', c = gx();
  n = n * (LL)(sign);
}
int ss(char a[]) {
  char c = gx();
  while (c == ' ' || c == '\n')
    c = gx();
  int i = 0;
  while (c != '\n')
    a[i++] = c, c = gx();
  a[i] = 0;
  return i;
}
int ws(char a[]) {
  char c = gx();
  while (c == ' ' || c == '\n')
    c = gx();
  int i = 0;
  while (c != '\n' && c != ' ')
    a[i++] = c, c = gx();
  a[i] = 0;
  return i;
}
void ip(int n) {
  if (n < 0) {
    n = -n;
    px('-');
  }
  int i = 10;
  char o[10];
  do {
    o[--i] = (n % 10) + '0';
    n /= 10;
  } while (n);
  do {
    px(o[i]);
  } while (++i < 10);
}
void lip(LL n) {
  if (n < 0LL) {
    n = -n;
    px('-');
  }
  int i = 21;
  char o[21];
  do {
    o[--i] = (n % 10LL) + '0';
    n /= 10LL;
  } while (n);
  do {
    px(o[i]);
  } while (++i < 21);
}
void stp(const char a[]) {
  const char *p = a;
  while (*p)
    px(*p++);
}
const int len = 200001;
vector<int> g[len];
vector<pii> directed_edges, undirected_edges;
vector<int> ts;
int *topo_order;
bool possible;
void dfs(int node, vector<bool> &visited) {
  visited[node] = true;
  for (int next : g[node]) {
    if (!visited[next]) {
      dfs(next, visited);
    }
  }
  pb(ts, node);
}
void compute(int n, int m) {
  vector<bool> visited(n + 1, false);
  FORb(i, 1, n + 1) {
    if (!visited[i]) {
      dfs(i, visited);
    }
  }
  int order = 0;
  FORe(i, n - 1, 0) { topo_order[ts[i]] = order++; }
  for (auto &e : directed_edges) {
    if (topo_order[e.first] > topo_order[e.second]) {
      possible = false;
      break;
    }
  }
  if (!possible) {
    cout << "NO" << endl;
    return;
  }
  cout << "YES" << endl;
  for (auto &p : directed_edges) {
    cout << p.first << " " << p.second << endl;
  }
  for (auto &p : undirected_edges) {
    if (topo_order[p.first] < topo_order[p.second]) {
      cout << p.first << " " << p.second << endl;
    } else {
      cout << p.second << " " << p.first << endl;
    }
  }
  free(topo_order);
}
void read_and_query() {
  int n, m;
  is(n);
  is(m);
  FORb(i, 0, n + 1) { g[i].clear(); }
  int t, u, v;
  directed_edges.clear();
  undirected_edges.clear();
  ts.clear();
  topo_order = (int *)calloc(n + 1, sizeof(int));
  possible = true;
  FORb(i, 0, m) {
    is(t);
    is(u);
    is(v);
    if (t == 0) {
      undirected_edges.push_back({u, v});
    } else {
      directed_edges.push_back({u, v});
      g[u].push_back(v);
    }
  }
  compute(n, m);
}
int main() {
  int t;
  is(t);
  while (t--) {
    read_and_query();
  }
  return 0;
}
