#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int len = 200001;
vector<int> g[len];
vector<pair<int, int>> edges;
vector<int> ts;
int topo_order[len];
bool possible;

void dfs(int node, vector<bool>& visited) {
  visited[node] = true;
  for (int next : g[node]) {
    if (!visited[next]) {
      dfs(next, visited);
    }
  }
  ts.push_back(node);
}

void compute(int n, int m) {
  vector<bool> visited(n + 1, false);
  for (int i = 1; i <= n; ++i) {
    if (!visited[i]) {
      dfs(i, visited);
    }
  }
  int order = 0;
  for (int i = n - 1; i >= 0; --i) {
    topo_order[ts[i]] = order++;
  }
  for (auto &e : edges) {
    if (topo_order[e.first] > topo_order[e.second]) {
      possible = false;
      break;
    }
  }
  if (!possible) {
    cout << "NO" << '\n';
    return;
  }
  cout << "YES" << '\n';
  for (auto &p : edges) {
    cout << p.first << " " << p.second << '\n';
  }
}

void read_and_query() {
  int n, m;
  cin >> n >> m;
  for (int i = 0; i <= n; ++i) {
    g[i].clear();
  }
  edges.clear();
  ts.clear();
  possible = true;
  for (int i = 0; i < m; ++i) {
    int t, u, v;
    cin >> t >> u >> v;
    edges.push_back({u, v});
    if (t == 1) {
      g[u].push_back(v);
    }
  }
  compute(n, m);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int t;
  cin >> t;
  while (t--) {
    read_and_query();
  }
  return 0;
}