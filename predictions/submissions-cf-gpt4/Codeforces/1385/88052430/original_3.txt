```c++
#include <bits/stdc++.h>
using namespace std;
#define int long long

vector<vector<int>> g;
vector<int> visited, TS;

bool dfs(int i) {
  static vector<int> stack(n + 1, 0);

  if (visited[i]) {
    return 0;
  } else if (stack[i]) {
    return 1;
  }

  stack[i] = visited[i] = 1;

  for (auto j : g[i]) {
    if (dfs(j))
        return 1;
  }
  
  stack[i] = 0;
  TS.push_back(i);

  return 0;
}

void solve() {
  int n, m;
  cin >> n >> m;
  g.resize(n + 1);
  visited.assign(n + 1, 0);
  TS.clear();

  vector<set<int>> G(n + 1);

  for (int i = 0; i < m; ++i) {
    int t, x, y;
    cin >> t >> x >> y;

    if (t) {
      g[x].push_back(y);
    }

    G[x].insert(y);
    G[y].insert(x);
  }

  for (int i = 1; i <= n; ++i) {
    if (g[i].empty() && !G[i].empty()) {
      bool ch = 1;

      for (auto j : G[i]) {
        ch &= (!G[j].count(i));
      }

      if (ch) {
        for (auto j : G[i]) {
          g[i].push_back(j);
        }
      }
    }
  }

  for (int i = 1; i <= n; ++i) {
    if (!visited[i] && dfs(i)) {
      cout << "NO" << endl;
      return;
    }
  }

  reverse(TS.begin(), TS.end());

  vector<int> pos(n + 1, 0);
  for (int i = 0; i < n; ++i)
    pos[TS[i]] = i;
  
  cout << "YES" << endl;
  for (int i = 1; i <= n; ++i) {
    for (auto j : G[i]) {
      if (pos[j] < pos[i]) {
        cout << j << " " << i << endl;
      }
    }
  }
}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;

  while (t--)
    solve();

  return 0;
}
```