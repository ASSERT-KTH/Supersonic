#include <bits/stdc++.h>
using namespace std;
#define int long long
#define f(i, a, b) for (int i = a; i < b; ++i)
#define all(a) a.begin(), a.end()

bool dfs(int i, vector<int> &visited, vector<int> &being_visited,
         vector<int> &TS, vector<vector<int>> &g) {
  if (being_visited[i]) {
    return true;
  } else if (!visited[i]) {
    being_visited[i] = 1;
    for (auto j : g[i]) {
      if (dfs(j, visited, being_visited, TS, g))
        return true;
    }
    being_visited[i] = 0;
    visited[i] = 1;
    TS.push_back(i);
  }
  return false;
}

void solve() {
  int n, m;
  cin >> n >> m;
  vector<int> visited(n + 1, 0), being_visited(n + 1, 0), TS;
  vector<vector<int>> g(n + 1);
  vector<set<int>> G(n + 1);
  f(i, 0, m) {
    int t, x, y;
    cin >> t >> x >> y;
    if (t)
      g[x].push_back(y);
    G[x].insert(y);
    G[y].insert(x);
  }
  f(i, 1, n + 1) {
    bool ch = 1;
    if (g[i].empty() && !G[i].empty()) {
      for (auto j : G[i]) {
        ch &= !G[j].count(i);
      }
    } else {
      ch = 0;
    }
    if (ch) {
      for (auto j : G[i]) {
        g[i].push_back(j);
      }
    }
  }
  f(i, 1, n + 1) {
    if (!visited[i] && dfs(i, visited, being_visited, TS, g)) {
      cout << "NO" << endl;
      return;
    }
  }
  reverse(all(TS));
  map<int, int> map;
  f(i, 0, n) map[TS[i]] = i;
  cout << "YES" << endl;
  f(i, 1, n + 1) {
    for (auto j : G[i]) {
      if (map[j] < map[i])
        cout << j << " " << i << endl;
    }
  }
}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);                                                               
  cout.tie(NULL);
  int t;
  cin >> t;
  while(t--) solve();
}