#include <bits/stdc++.h>
using namespace std;
#define int long long
#define f(i, a, b) for (int i = a; i < b; ++i)
#define all(a) a.begin(), a.end()

bool dfs(int i, vector<int> &visited, vector<int> &recStack, vector<int> &TS, vector<vector<int>> &g) {
    if (!visited[i]) {
        visited[i] = 1;
        recStack[i] = 1;
        for (auto j : g[i]) {
            if (!visited[j] && dfs(j, visited, recStack, TS, g))
                return true;
            else if (recStack[j])
                return true;
        }
    }
    recStack[i] = 0;
    TS.push_back(i);
    return false;
}

void solve() {
    int n, m;
    cin >> n >> m;
    vector<int> visited(n + 1, 0), recStack(n + 1, 0), TS;
    vector<vector<int>> g(n + 1);
    vector<set<int>> G(n + 1);
    f(i, 0, m) {
        int t, x, y;
        cin >> t >> x >> y;
        if (t)
            g[x].push_back(y);
        G[x].insert(y);
        G[y].insert(x);
    }
    f(i, 1, n + 1) {
        if (g[i].empty() && !G[i].empty()) {
            for (auto j : G[i])
                if (G[j].find(i) == G[j].end())
                    g[i].push_back(j);
        }
    }
    f(i, 1, n + 1) {
        if (!visited[i])
            if (dfs(i, visited, recStack, TS, g)) {
                cout << "NO" << endl;
                return;
            }
    }
    reverse(all(TS));
    map<int, int> mp;
    f(i, 0, n) mp[TS[i]] = i;
    cout << "YES" << endl;
    f(i, 1, n + 1)
        for (auto j : G[i])
            if (mp[j] < mp[i])
                cout << j << " " << i << endl;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int t = 1;
    cin >> t;
    while(t--)
        solve();
}