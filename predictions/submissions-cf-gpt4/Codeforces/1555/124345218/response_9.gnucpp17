#include <iostream>
#include <algorithm>
#include <vector>
#include <array>
#define f(i, x, n) for (int i = x; i < n; i++)
using namespace std;

constexpr int mod = 1e9 + 7;
constexpr int MAX_ARRAY_SIZE = 8000000;
int sgtree[MAX_ARRAY_SIZE], slow[MAX_ARRAY_SIZE];
int n, m;

using Triplet = array<int, 3>;
vector<Triplet> ve;

void dfs(int st, int en, int node, int rngst, int rngen, int value) {
  if (st > rngen || en < rngst) return;
  
  if (st >= rngst && en <= rngen) {
    slow[node] += value;
  } else {
    int mid = st + (en - st) / 2;
    dfs(st, mid, 2 * node, rngst, rngen, value);
    dfs(mid+1, en, 2 * node + 1, rngst, rngen, value);
  }
  sgtree[node] = min(sgtree[2 * node] + slow[2 * node], sgtree[2 * node + 1] + slow[2 * node + 1]);
}

void update(int i, int value) {
  dfs(1, m - 1, 1, ve[i][1], ve[i][2], value);
}

int minimum() {
  return sgtree[1] + slow[1];
}

void solve() {
  cin >> n >> m;
  if (m == 2) {
    cout << "0\n";
    return;
  }
  f(i, 0, n) {
    int l, r, w;
    cin >> l >> r >> w;
    if (l == 1 && r == m) {
      cout << "0\n";
      return;
    }
    ve.push_back({w, l, r - 1});
  }
  sort(ve.begin(), ve.end());
  int i = 0, j = -1, ans = INT_MAX;
  while (j < ((int)ve.size() - 1)) {
    if (minimum() > 0) {
      update(i, -1);
      ans = min(ans, ve[j][0] - ve[i][0]);
      i++;
    } else {
      j++;
      update(j, 1);
    }
  }
  while (minimum() > 0) {
    update(i, -1);
    ans = min(ans, ve[j][0] - ve[i][0]);
    i++;
  }
  cout << ans << '\n';
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int t = 1;
  f(tc, 1, t + 1) { solve(); }
  return 0;
}