```c++
#include <bits/stdc++.h>
#define ff first
#define ss second
#define pb push_back
#define ld long double
#define f(i, x, n) for (int i = x; i < n; i++)
using namespace std;
const int mod = 1e9 + 7;
int sgtree[8000000];
int slow[8000000];
int n, m;
vector<array<int, 3>> ve;

void dfs(int st, int en, int node, int rngst, int rngen, int value) {
  slow[2 * node] += slow[node];
  slow[2 * node + 1] += slow[node];
  sgtree[node] += slow[node];
  slow[node] = 0;
  if (rngen < st || rngst > en) {
    return;
  }
  if (st >= rngst && en <= rngen) {
    slow[node] += value;
  } else {
    dfs(st, (st + en) >> 1, 2 * node, rngst, rngen, value);
    dfs(((st + en) >> 1) + 1, en, 2 * node + 1, rngst, rngen, value);
  }
  sgtree[node] = min(sgtree[2 * node] + slow[2 * node],
                     sgtree[2 * node + 1] + slow[2 * node + 1]);
}

inline void del(int i) { dfs(1, m - 1, 1, ve[i][1], ve[i][2], -1); }
inline void add(int i) { dfs(1, m - 1, 1, ve[i][1], ve[i][2], 1); }
inline int check() { return sgtree[1] + slow[1]; }

void solve() {
  cin >> n >> m;
  if (m == 2) {
    cout << "0\n";
    return;
  }
  f(i, 0, n) {
    int l, r, w;
    cin >> l >> r >> w;
    if (l == 1 && r == m) {
      cout << "0\n";
      return;
    }
    ve.push_back({w, l, r - 1});
  }
  sort(ve.begin(), ve.end());
  int i = 0, j = -1, ans = INT_MAX;
  while (j < ((int)ve.size() - 1)) {
    if (check() > 0) {
      del(i++);
      ans = min(ans, ve[j][0] - ve[i][0]);
    } else {
      add(++j);
    }
  }
  while (check() > 0) {
    del(i++);
    ans = min(ans, ve[j][0] - ve[i][0]);
  }
  cout << ans << '\n';
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  solve();
  return 0;
}
```