```
#include <vector>
#include <array>
#include <algorithm>
#include <iostream>

constexpr int mod = 1e9 + 7;
int sgtree[8000000];
int slow[8000000];
int n, m;
std::vector<std::array<int, 3>> ve;

void dfs(int st, int en, int node, int rngst, int rngen, int value) {
  sgtree[node] += slow[node];
  slow[2 * node] += slow[node];
  slow[2 * node + 1] += slow[node];
  slow[node] = 0;
  if (st >= rngst && en <= rngen) {
    slow[node] += value;
    sgtree[node] += slow[node];
    slow[2 * node] += slow[node];
    slow[2 * node + 1] += slow[node];
    slow[node] = 0;
  } else if (!(en < rngst || st > rngen)) {
    dfs(st, (st + en) / 2, 2 * node, rngst, rngen, value);
    dfs(((st + en) / 2) + 1, en, 2 * node + 1, rngst, rngen, value);
    sgtree[node] = std::min(sgtree[2 * node] + slow[2 * node],
                       sgtree[2 * node + 1] + slow[2 * node + 1]);
  }
}
void del(int i) { dfs(1, m - 1, 1, ve[i][1], ve[i][2], -1); }
void add(int i) { dfs(1, m - 1, 1, ve[i][1], ve[i][2], 1); }
int check() { return sgtree[1] + slow[1]; }

void solve() {
  std::cin >> n >> m;
  if (m == 2) {
    std::cout << "0\n";
    return;
  }
  for (int i = 0; i < n; ++i) {
    int l, r, w;
    std::cin >> l >> r >> w;
    if (l == 1 && r == m) {
      std::cout << "0\n";
      return;
    }
    ve.push_back({w, l, r - 1});
  }
  std::sort(ve.begin(), ve.end());
  int i = 0, j = -1, ans = 1000000;
  while (j < ((int)ve.size() - 1)) {
    if (check() > 0) {
      del(i);
      ans = std::min(ans, ve[j][0] - ve[i][0]);
      i++;
    } else {
      j++;
      add(j);
    }
  }
  while (check() > 0) {
    del(i);
    ans = std::min(ans, ve[j][0] - ve[i][0]);
    i++;
  }
  std::cout << ans << '\n';
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  solve();
  return 0;
}
```