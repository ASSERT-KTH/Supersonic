```cpp
#include <vector>
#include <algorithm>
#include <iostream>

using namespace std;

const int mod = 1e9 + 7;
int sgtree[8000000]{};
int slow[8000000]{};
vector<array<int, 3>> ve;

void update(int node, int start, int end, int l, int r, int value) {
    sgtree[node] += slow[node];
    if(start != end) {
        slow[2 * node] += slow[node];
        slow[2 * node + 1] += slow[node];
    }
    slow[node] = 0;

    if(l > end || r < start) return;

    if(start >= l && end <= r) {
        sgtree[node] += value;
        if(start != end) {
            slow[2 * node] += value;
            slow[2 * node + 1] += value;
        }
        return;
    }

    int mid = (start + end) / 2;
    update(2 * node, start, mid, l, r, value);
    update(2 * node + 1, mid + 1, end, l, r, value);
    sgtree[node] = min(sgtree[2 * node], sgtree[2 * node + 1]);
}

void solve() {
    int n, m;
    cin >> n >> m;
    if (m == 2) {
        cout << "0\n";
        return;
    }
    for (int i = 0; i < n; i++) {
        int l, r, w;
        cin >> l >> r >> w;
        if (l == 1 && r == m) {
            cout << "0\n";
            return;
        }
        ve.push_back({w, l, r - 1});
    }

    sort(ve.begin(), ve.end());
    int i = 0, j = 0, ans = 1e9 + 7;
    while (j < n) {
        while(sgtree[1] < 1 && j < n) {
            update(1, 1, m - 1, ve[j][1], ve[j][2], 1);
            j++;
        }
        while(sgtree[1] >= 1) {
            ans = min(ans, ve[j - 1][0] - ve[i][0]);
            update(1, 1, m - 1, ve[i][1], ve[i][2], -1);
            i++;
        }
    }
    cout << ans << '\n';
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    solve();
    return 0;
}
```