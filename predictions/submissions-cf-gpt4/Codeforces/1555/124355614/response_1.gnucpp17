#include <bits/stdc++.h>
using namespace std;
const int N = 2e6 + 5;
int t[4 * N], push[4 * N];

inline void makepush(int v, int tl, int tr) {
  if (push[v] == 0) return;
  if (tl != tr) {
    push[v << 1] += push[v];
    push[(v << 1) | 1] += push[v];
    t[v << 1] += push[v];
    t[(v << 1) | 1] += push[v];
  }
  push[v] = 0;
}

inline void add(int v, int tl, int tr, int l, int r, int x) {
  if (l > r) return;
  makepush(v, tl, tr);
  if (tl == l && tr == r) {
    t[v] += x;
    push[v] += x;
    return;
  }
  int tm = (tl + tr) >> 1;
  add(v << 1, tl, tm, l, min(r, tm), x);
  add((v << 1) | 1, tm + 1, tr, max(l, tm + 1), r, x);
  t[v] = min(t[v << 1], t[(v << 1) | 1]);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, m;
  cin >> n >> m;
  vector<pair<int, pair<int, int>>> s(n);
  for (int i = 0; i < n; i++) {
    cin >> s[i].second.first >> s[i].second.second >> s[i].first;
    s[i].second.second--;
  }
  sort(s.begin(), s.end());
  int ptr = 0, ans = INT_MAX;
  for (int i = 0; i < n; i++) {
    while (ptr < n && t[1] == 0) {
      add(1, 1, m - 1, s[ptr].second.first, s[ptr].second.second, +1);
      ptr++;
    }
    if (t[1]) {
      ans = min(ans, s[ptr - 1].first - s[i].first);
    }
    add(1, 1, m - 1, s[i].second.first, s[i].second.second, -1);
  }
  cout << ans;
}