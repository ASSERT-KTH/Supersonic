#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 2e6 + 5;
int t[4 * N], push[4 * N];

inline void makepush(const int v, const int tl, const int tr) {
  if (!push[v]) return;
  if (tl != tr) {
    const int p = push[v];
    push[v * 2] += p;
    push[v * 2 + 1] += p;
    t[v * 2] += p;
    t[v * 2 + 1] += p;
  }
  push[v] = 0;
}

inline void add(const int v, const int tl, const int tr, const int l, const int r, const int x) {
  if (l > r) return;
  makepush(v, tl, tr);
  if (tl == l && tr == r) {
    t[v] += x;
    push[v] += x;
    return;
  }
  const int tm = (tl + tr) >> 1;
  add(v << 1, tl, tm, l, min(r, tm), x);
  add((v << 1) + 1, tm + 1, tr, max(l, tm + 1), r, x);
  t[v] = min(t[v << 1], t[(v << 1) + 1]);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int n, m;
  cin >> n >> m;
  vector<pair<int, pair<int, int>>> s(n);
  for (int i = 0; i < n; i++) {
    int l, r, w;
    cin >> l >> r >> w;
    s[i] = {w, {l, r - 1}};
  }
  sort(s.begin(), s.end());
  int ptr = -1, ans = INT_MAX;
  for (int i = 0; i < n; i++) {
    if (i > 0)
      add(1, 1, m - 1, s[i - 1].second.first, s[i - 1].second.second, -1);
    while (ptr + 1 < n && t[1] == 0) {
      ++ptr;
      add(1, 1, m - 1, s[ptr].second.first, s[ptr].second.second, +1);
    }
    if (t[1]) ans = min(ans, s[ptr].first - s[i].first);
  }
  cout << ans;
}