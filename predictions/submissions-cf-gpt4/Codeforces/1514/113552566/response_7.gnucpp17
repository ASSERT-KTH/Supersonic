#include <iostream>
#include <vector>
#include <algorithm>

#define FASTIO                                                                 \
  std::ios_base::sync_with_stdio(false);                                       \
  std::cin.tie(NULL);                                                          \
  std::cout.tie(NULL);

#define PRECISION std::cout << std::fixed << std::setprecision(20);

struct SegTree {
  std::vector<int> tree, arr;
  std::vector<std::vector<int>> store;
  int n;
  
  SegTree(int n, std::vector<int> _arr) : n(n), arr(std::move(_arr)) {
    tree.resize(4 * n);
    store.resize(n + 1);
    for (int i = 0; i < n; ++i)
      store[arr[i]].push_back(i);
    build(0, n - 1, 0);
  }
  void build(int ss, int se, int si) {
    if (ss == se) {
      tree[si] = arr[ss];
    } else {
      int mid = (ss + se) / 2;
      build(ss, mid, 2 * si + 1);
      build(mid + 1, se, 2 * si + 2);
      tree[si] = merge(tree[2 * si + 1], tree[2 * si + 2], ss, se);
    }
  }
  int merge(int lval, int rval, int sl, int sr) {
    return countOccurances(lval, sl, sr) >= countOccurances(rval, sl, sr) ? lval : rval;
  }
  int countOccurances(int val, int sl, int sr) {
    return std::upper_bound(store[val].begin(), store[val].end(), sr) -
           std::lower_bound(store[val].begin(), store[val].end(), sl);
  }
  int query(int qs, int qe) { return query(qs, qe, 0, n - 1, 0); }
  int query(int qs, int qe, int ss, int se, int si) {
    if (ss >= qs && se <= qe) {
      return tree[si];
    }
    int mid = (ss + se) / 2;
    if (qe <= mid) {
      return query(qs, qe, ss, mid, 2 * si + 1);
    } else if (qs > mid) {
      return query(qs, qe, mid + 1, se, 2 * si + 2);
    } else {
      return merge(query(qs, mid, ss, mid, 2 * si + 1),
                   query(mid+1, qe, mid + 1, se, 2 * si + 2), qs, qe);
    }
  }
};

void solve() {
  int n, q;
  std::cin >> n >> q;
  std::vector<int> arr(n);
  for (int i = 0; i < n; ++i)
    std::cin >> arr[i];
  SegTree tree(n, arr);
  while (q--) {
    int l, r;
    std::cin >> l >> r;
    --l; --r;
    int x = tree.query(l, r);
    int mx = tree.countOccurances(x, l, r);
    int len = r - l + 1;
    int extra = len - mx;
    int left = std::max(0, mx - extra - 1);
    std::cout << 1 + left << "\n";
  }
}

int main() {
  FASTIO;
  PRECISION;
  solve();
}