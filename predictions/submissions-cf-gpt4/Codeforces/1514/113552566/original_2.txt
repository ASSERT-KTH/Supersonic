```c++
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
#define FASTIO ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define PRECISION std::cout << std::fixed << std::setprecision(20);

struct SegTree {
  vector<int> tree, arr;
  vector<vector<int>> store;
  int n;
  SegTree(int n, vector<int> _arr) : n(n), arr(_arr), tree(4 * n), store(n + 1) {
    for (int i = 0; i < n; i++)
      store[arr[i]].push_back(i);
    build(0, n - 1, 0);
  }
  void build(int ss, int se, int si) {
    if (ss == se) {
      tree[si] = arr[ss];
      return;
    } 
    int mid = (ss + se) >> 1;
    build(ss, mid, si * 2 + 1);
    build(mid + 1, se, si * 2 + 2);
    int lval = tree[si * 2 + 1], rval = tree[si * 2 + 2];
    tree[si] = (store[lval].size() > store[rval].size() ? lval : rval);
  }
  int query(int qs, int qe, int ss, int se, int si) {
    if (ss > qe || se < qs) {
      return -1;
    }
    if (ss >= qs && se <= qe) {
      return tree[si];
    }
    int mid = ss + (se - ss) / 2;
    int lval = query(qs, qe, ss, mid, 2 * si + 1);
    int rval = query(qs, qe, mid + 1, se, 2 * si + 2);
    if (lval == -1) {
      return rval;
    }
    if (rval == -1) {
      return lval;
    }
    return (store[lval].size() > store[rval].size() ? lval : rval);
  }
  int query(int qs, int qe) {
    return query(qs, qe, 0, n - 1, 0);
  }
};

int main() {
  FASTIO;
  PRECISION;
  int n, q;
  cin >> n >> q;
  vector<int> arr(n);
  for (int &x : arr)
    cin >> x;
  SegTree tree(n, arr);
  while (q--) {
    int l, r;
    cin >> l >> r;
    --l, --r;
    int x = tree.query(l, r);
    int occ = upper_bound(tree.store[x].begin(), tree.store[x].end(), r) - lower_bound(tree.store[x].begin(), tree.store[x].end(), l);
    int len = r - l + 1;
    int ans = 1 + max(0, 2 * occ - len - 1);
    cout << ans << "\n";
  }
  return 0;
}
```