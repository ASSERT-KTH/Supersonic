```cpp
#include <vector>
#include <algorithm>
#include <iostream>
#include <iomanip>

typedef long long ll;
typedef long double ld;

#define FASTIO                                                                 \
  std::ios_base::sync_with_stdio(false);                                       \
  std::cin.tie(NULL);                                                          \
  std::cout.tie(NULL);
#define PRECISION std::cout << std::fixed << std::setprecision(20);

using namespace std;

struct SegTree {
  vector<int> tree, arr;
  vector<vector<int>> store;
  int n;
  SegTree(int n, vector<int> _arr) : n(n), tree(4 * n), store(n + 1), arr(std::move(_arr)) {
    for (int i = 0; i < n; i++)
      store[arr[i]].push_back(i);
    build(0, n - 1, 0);
  }
  int merge(int lval, int rval, int sl, int sr) {
    int cntl = upper_bound(store[lval].begin(), store[lval].end(), sr) -
               lower_bound(store[lval].begin(), store[lval].end(), sl);
    int cntr = upper_bound(store[rval].begin(), store[rval].end(), sr) -
               lower_bound(store[rval].begin(), store[rval].end(), sl);
    return cntl >= cntr ? lval : rval;
  }
  void build(int ss, int se, int si) {
    if (ss == se) {
      tree[si] = arr[ss];
    } else {
      int mid = ss + (se - ss) / 2;
      build(ss, mid, 2 * si + 1);
      build(mid + 1, se, 2 * si + 2);
      tree[si] = merge(tree[2 * si + 1], tree[2 * si + 2], ss, se);
    }
  }
  int query(int qs, int qe) { return query(qs, qe, 0, n - 1, 0); }
  int query(int qs, int qe, int ss, int se, int si) {
    if (ss >= qs && se <= qe) {
      return tree[si];
    }
    int mid = ss + (se - ss) / 2;
    if (qe <= mid) {
      return query(qs, qe, ss, mid, 2 * si + 1);
    } else if (qs > mid) {
      return query(qs, qe, mid + 1, se, 2 * si + 2);
    } else {
      return merge(query(qs, mid, ss, mid, 2 * si + 1),
                   query(mid + 1, qe, mid + 1, se, 2 * si + 2), qs, qe);
    }
  }
};

void solve() {
  int n, q;
  cin >> n >> q;
  vector<int> arr(n);
  for (int &i : arr)
    cin >> i;
  SegTree tree(n, arr);
  while (q--) {
    int l, r;
    cin >> l >> r;
    l--; r--;
    int x = tree.query(l, r);
    int mx = upper_bound(tree.store[x].begin(), tree.store[x].end(), r) -
             lower_bound(tree.store[x].begin(), tree.store[x].end(), l);
    int len = r - l + 1;
    cout << 1 + max(0, mx - (len - mx) - 1) << "\n";
  }
}

int main() {
  FASTIO;
  PRECISION;
  solve();
}
```