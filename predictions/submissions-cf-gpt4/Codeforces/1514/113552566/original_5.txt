```c++
#include <bits/stdc++.h>

#define FASTIO                                                                 \
  ios_base::sync_with_stdio(false);                                            \
  cin.tie(NULL);                                                               \
  cout.tie(NULL);
#define PRECISION std::cout << std::fixed << std::setprecision(20);

using namespace std;

struct SegTree {
  vector<int> tree, arr;
  vector<vector<int>> store;
  int n;

  SegTree(int n, vector<int> _arr) : n(n), arr(move(_arr)), tree(4 * n), store(n + 1) {
    for (int i = 0; i < n; ++i)
      store[arr[i]].push_back(i);
    build(0, n - 1, 0);
  }

  int merge(int lval, int rval, int sl, int sr) {
    return count(store[lval], sl, sr) >= count(store[rval], sl, sr) ? lval : rval;
  }

  static int count(vector<int> &v, int sl, int sr) {
    return upper_bound(v.begin(), v.end(), sr) - lower_bound(v.begin(), v.end(), sl);
  }

  void build(int ss, int se, int si) {
    if (ss == se) {
      tree[si] = arr[ss];
    } else {
      int mid = (ss + se) / 2;
      build(ss, mid, 2 * si + 1);
      build(mid + 1, se, 2 * si + 2);
      tree[si] = merge(tree[2 * si + 1], tree[2 * si + 2], ss, se);
    }
  }

  int query(int qs, int qe) { return query(qs, qe, 0, n - 1, 0); }

  int query(int qs, int qe, int ss, int se, int si) {
    if (ss >= qs && se <= qe) {
      return tree[si];
    }
    int mid = (ss + se) / 2;
    if (qe <= mid) {
      return query(qs, qe, ss, mid, 2 * si + 1);
    } else if (qs > mid) {
      return query(qs, qe, mid + 1, se, 2 * si + 2);
    } else {
      return merge(query(qs, mid, ss, mid, 2 * si + 1),
                   query(mid + 1, qe, mid + 1, se, 2 * si + 2), qs, qe);
    }
  }
};

void solve() {
  int n, q;
  cin >> n >> q;
  vector<int> arr(n);
  for (int & i : arr)
    cin >> i;
  SegTree tree(n, arr);
  while (q--) {
    int l, r;
    cin >> l >> r;
    --l; --r;
    int x = tree.query(l, r);
    int mx = SegTree::count(tree.store[x], l, r);
    int len = r - l + 1;
    cout << 1 + max(0, 2 * mx - len - 1) << "\n";
  }
}

int main() {
  FASTIO;
  PRECISION;
  int t = 1;
  while (t--) {
    solve();
  }
}
```