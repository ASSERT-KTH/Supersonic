#include <iostream>
#include <vector>
#include <algorithm>

#define int long long

using namespace std;

const int mx = 3e5 + 10;
vector<int> del[mx];

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int tc = 1, i, j, k;
    while (tc--) {
        int a, b;
        cin >> a >> b;
        vector<pair<int, int>> dif;
        vector<int> pre(a), suf(a);
        vector<pair<int, int>> v(a);
        int x, y;
        for (i = 0; i < a; i++) {
            cin >> x >> y;
            v[i] = {x, y};
            dif.push_back({y - x, i});
        }
        sort(dif.begin(), dif.end());
        for (i = 0; i < a; i++) {
            k = dif[i].second;
            suf[i] = (i == 0) ? v[k].second : suf[i - 1] + v[k].second;
        }
        for (i = a - 1; i >= 0; i--) {
            k = dif[i].second;
            pre[i] = (i == a - 1) ? v[k].first : pre[i + 1] + v[k].first;
        }
        for (i = 0; i < b; i++) {
            cin >> x >> y;
            k = v[x - 1].second - v[x - 1].first;
            int m = v[y - 1].second - v[y - 1].first;
            int val = (m <= k) ? v[x - 1].first + v[y - 1].second : v[x - 1].second + v[y - 1].first;
            del[x].push_back(val);
            del[y].push_back(val);
            if (del[x].size() > 1)
                del[x].back() += del[x][del[x].size() - 2];
            if (del[y].size() > 1)
                del[y].back() += del[y][del[y].size() - 2];
        }
        for (i = 0; i < a; i++) {
            int ans = 0;
            k = v[i].second - v[i].first;
            k = upper_bound(dif.begin(), dif.end(), make_pair(k, LONG_LONG_MAX)) - dif.begin();
            if (k - 1 >= 0)
                ans = suf[k - 1] + ((k - 1) * v[i].first) - v[i].second;
            if (k < a)
                ans += pre[k] + (a - k) * v[i].second;
            if (!del[i + 1].empty())
                ans -= del[i + 1].back();
            cout << ans << endl;
        }
    }
    return 0;
}