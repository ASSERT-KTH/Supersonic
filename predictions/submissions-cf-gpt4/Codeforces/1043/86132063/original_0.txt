```cpp
#include <algorithm>
#include <iostream>
#include <vector>
#define int long long
#define endl '\n'
using namespace std;

const int mx = 3e5 + 10;
vector<int> del[mx];

int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int a, b;
  cin >> a >> b;
  
  vector<pair<int, int>> v(a), dif(a);
  vector<int> pre(a), suf(a);
  int x, y;
  
  for (int i = 0; i < a; i++) {
    cin >> x >> y;
    v[i] = {x, y};
    dif[i] = {y - x, i};
  }
  
  sort(dif.begin(), dif.end());
  
  for (int i = 0; i < a; i++) {
    int k = dif[i].second;
    suf[i] = v[k].second;
    if (i)
      suf[i] += suf[i - 1];
  }
  
  for (int i = a - 1; i >= 0; i--) {
    int k = dif[i].second;
    pre[i] = v[k].first;
    if (i != a - 1)
      pre[i] += pre[i + 1];
  }
  
  for (int i = 0; i < b; i++) {
    cin >> x >> y;
    --x, --y; 
    int k = v[x].second - v[x].first;
    int m = v[y].second - v[y].first;
    if (m <= k) {
      del[x].push_back(v[x].first + v[y].second);
      del[y].push_back(v[x].first + v[y].second);
    } else {
      del[x].push_back(v[x].second + v[y].first);
      del[y].push_back(v[x].second + v[y].first);
    }
    if (del[x].size() > 1)
      del[x].back() += del[x][del[x].size() - 2];
    if (del[y].size() > 1)
      del[y].back() += del[y][del[y].size() - 2];
  }
  
  for (int i = 0; i < a; i++) {
    int ans = 0;
    int k = v[i].second - v[i].first;
    k = upper_bound(dif.begin(), dif.end(), make_pair(k, LLONG_MAX)) - dif.begin();
    if (k - 1 >= 0)
      ans = suf[k - 1] + ((k - 1) * v[i].first) - v[i].second;
    if (k < a) {
      ans += pre[k] + (a - k) * v[i].second;
    }
    if (!del[i].empty())
      ans -= del[i].back();
    cout << ans << endl;
  }
  
  return 0;
}
```