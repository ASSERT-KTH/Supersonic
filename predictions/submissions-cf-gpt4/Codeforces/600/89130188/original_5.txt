```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long lll;
const lll NR = 5e5 + 10;
vector<lll> v[NR];
lll n, sz[NR], big[NR], ans[NR], c[NR];

void dfs1(lll nod, lll prt) {
  sz[nod] = 1;
  for (auto it : v[nod]) {
    if (it != prt) {
      dfs1(it, nod);
      sz[nod] += sz[it];
      big[nod] = max(big[nod], sz[it]);
    }
  }
}

void dfs2(lll nod, lll prt, unordered_map<lll, lll> &mapp, lll &l_max) {
  lll nod_boss = -1, max_ = 0, sum = 0;
  for (auto it : v[nod]) {
    if (it != prt && big[nod] == sz[it]) {
      nod_boss = it;
      dfs2(it, nod, mapp, l_max);
      sum = ans[it];
      max_ = l_max;
      break;
    }
  }

  auto& color = mapp[c[nod]];
  color += 1;
  if (color >= max_) {
    if (color > max_) sum = 0;
    max_ = color;
    sum += c[nod];
  }

  for (auto it : v[nod]) {
    if (it == prt || it == nod_boss) continue;
    unordered_map<lll, lll> temp;
    dfs2(it, nod, temp, l_max);
    for (auto &it2 : temp) {
      auto& color = mapp[it2.first];
      color += it2.second;
      if (color >= max_) {
        if (color > max_) sum = 0;
        max_ = color;
        sum += it2.first;
      }
    }
  }
  l_max = max_;
  ans[nod] = sum;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  unordered_map<lll, lll> temp;
  cin >> n;
  for (lll i = 1; i <= n; ++i) cin >> c[i];
  for (lll i = 1, x, y; i < n; ++i) {
    cin >> x >> y;
    v[x].push_back(y);
    v[y].push_back(x);
  }
  dfs1(1, 0);
  lll x;
  dfs2(1, 0, temp, x);
  for (lll i = 1; i <= n; ++i) cout << ans[i] << ' ';
  cout << '\n';
  return 0;
}
```