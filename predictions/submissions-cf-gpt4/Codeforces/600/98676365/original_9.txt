```cpp
#include <vector>
#include <cstdio>
#define lson t[id].l
#define rson t[id].r
typedef long long ll;
const int maxn = 1e5 + 7;
struct Seg {
  int l, r, v;
  ll num, sum;
} t[maxn << 5];
int n, tot, cor[maxn], rt[maxn];
ll ans[maxn];
std::vector<int> G[maxn];
void up(int id) {
  if (t[lson].num == t[rson].num) {
    t[id].sum = t[lson].sum + t[rson].sum;
  } else {
    t[id].sum = t[lson].num > t[rson].num ? t[lson].sum : t[rson].sum;
  }
  t[id].num = std::max(t[lson].num, t[rson].num);
  t[id].v = t[id].num == t[lson].num ? t[lson].v : t[rson].v;
}
void modify(int &id, int l, int r, int p) {
  if (!id) id = ++tot;
  if (l == r) {
    t[id].num += 1;
    t[id].sum = l;
    t[id].v = l;
    return;
  }
  int mid = l + (r - l) / 2;
  p <= mid ? modify(lson, l, mid, p) : modify(rson, mid + 1, r, p);
  up(id);
}
int merge(int a, int b, int l, int r) {
  if (!a || !b) return a ? a : b;
  if (l == r) {
    t[a].num += t[b].num;
    return a;
  }
  int mid = l + (r - l) / 2;
  t[a].l = merge(t[a].l, t[b].l, l, mid);
  t[a].r = merge(t[a].r, t[b].r, mid + 1, r);
  up(a);
  return a;
}
void dfs(int u, int fa) {
  for (auto v : G[u]) {
    if (v != fa) {
      dfs(v, u);
      rt[u] = merge(rt[u], rt[v], 1, n);
    }
  }
  modify(rt[u], 1, n, cor[u]);
  ans[u] = t[rt[u]].sum;
}
int main() {
  scanf("%d", &n);
  tot = n;
  for (int i = 1; i <= n; ++i) scanf("%d", &cor[i]);
  for (int i = 1, u, v; i < n; ++i) {
    scanf("%d%d", &u, &v);
    G[u].push_back(v);
    G[v].push_back(u);
  }
  dfs(1, 0);
  for (int i = 1; i <= n; ++i) printf("%lld%c", ans[i], " \n"[i == n]);
  return 0;
}
```