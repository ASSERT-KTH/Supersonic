#include <vector>
#include <cstdio>
#define lson t[id].l
#define rson t[id].r
typedef long long ll;
template <class T> inline void read(T &x) {
  int f = 0;
  x = 0;
  char ch = getchar();
  for (; !isdigit(ch); ch = getchar())
    f |= (ch == '-');
  for (; isdigit(ch); ch = getchar())
    x = x * 10 + ch - '0';
  if (f)
    x = -x;
}
const int maxn = 1e5 + 7;
struct Seg {
  int l, r, v;
  ll num, sum;
} t[maxn << 5];
int n, tot, cor[maxn], rt[maxn];
ll ans[maxn];
std::vector<int> G[maxn];
void up(int id) {
  if (t[lson].num != t[rson].num) {
    if (t[lson].num > t[rson].num) {
      t[id].v = t[lson].v;
      t[id].sum = t[lson].sum;
    } else {
      t[id].v = t[rson].v;
      t[id].sum = t[rson].sum;
    }
    t[id].num = t[lson].num > t[rson].num ? t[lson].num : t[rson].num;
  } else {
    t[id].num = t[lson].num;
    t[id].v = t[lson].v;
    t[id].sum = t[lson].sum + t[rson].sum;
  }
}
void modify(int &id, int l, int r, int p) {
  if (!id)
    id = ++tot;
  if (l == r) {
    ++t[id].num;
    t[id].sum = t[id].v = l;
    return;
  }
  int mid = (l + r) / 2;
  if (p <= mid)
    modify(lson, l, mid, p);
  else
    modify(rson, mid + 1, r, p);
  up(id);
}
int merge(int a, int b, int l, int r) {
  if (!a || !b)
    return a ? a : b;
  if (l == r) {
    t[a].num += t[b].num;
    t[a].sum = t[a].v = l;
    return a;
  }
  int mid = (l + r) / 2;
  t[a].l = merge(t[a].l, t[b].l, l, mid);
  t[a].r = merge(t[a].r, t[b].r, mid + 1, r);
  up(a);
  return a;
}
void dfs(int u, int fa) {
  for (int v : G[u]) {
    if (v != fa) {
      dfs(v, u);
      u = merge(u, v, 1, n);
    }
  }
  modify(u, 1, n, cor[u]);
  ans[u] = t[u].sum;
}
void solve() {
  read(n);
  tot = n;
  for (int i = 1; i <= n; ++i)
    read(cor[i]);
  for (int i = 1, u, v; i < n; ++i) {
    read(u), read(v);
    G[u].push_back(v);
    G[v].push_back(u);
  }
  dfs(1, 0);
  for (int i = 1; i <= n; ++i) {
    printf("%lld%c", ans[i], " \n"[i == n]);
  }
}
int main() {
  solve();
  return 0;
}