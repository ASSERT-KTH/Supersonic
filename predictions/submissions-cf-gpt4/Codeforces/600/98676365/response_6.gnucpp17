#include <cstdio>
#include <vector>

template <class T>
inline void read(T& x) {
    int f = 0;
    x = 0;
    char ch = getchar();
    for (; !isdigit(ch); ch = getchar())
        f |= (ch == '-');
    for (; isdigit(ch); ch = getchar())
        x = x * 10 + ch - '0';
    if (f)
        x = -x;
}

struct Seg {
    int l, r, v;
    long long num, sum;
};

const int maxn = 100007;
Seg t[maxn << 5];
int n, tot, cor[maxn], rt[maxn];
long long ans[maxn];
std::vector<int> G[maxn];

void up(int id) {
    if (t[t[id].l].num > t[t[id].r].num) {
        t[id].num = t[t[id].l].num;
        t[id].v = t[t[id].l].v;
        t[id].sum = t[t[id].l].sum;
    } else if (t[t[id].l].num < t[t[id].r].num) {
        t[id].num = t[t[id].r].num;
        t[id].v = t[t[id].r].v;
        t[id].sum = t[t[id].r].sum;
    } else {
        t[id].num = t[t[id].l].num;
        t[id].v = t[t[id].l].v;
        t[id].sum = t[t[id].l].sum + t[t[id].r].sum;
    }
}

void modify(int& id, int l, int r, int p) {
    if (!id)
        id = ++tot;
    if (l == r) {
        ++t[id].num;
        t[id].sum = l;
        t[id].v = l;
        return;
    }
    int mid = (l + r) >> 1;
    if (p <= mid)
        modify(t[id].l, l, mid, p);
    else
        modify(t[id].r, mid + 1, r, p);
    up(id);
}

int merge(int a, int b, int l, int r) {
    if (!a)
        return b;
    if (!b)
        return a;
    if (l == r) {
        t[a].v = l;
        t[a].sum = l;
        t[a].num += t[b].num;
        return a;
    }
    int mid = (l + r) >> 1;
    t[a].l = merge(t[a].l, t[b].l, l, mid);
    t[a].r = merge(t[a].r, t[b].r, mid + 1, r);
    up(a);
    return a;
}

void dfs(int u, int fa) {
    for (auto v : G[u]) {
        if (v == fa)
            continue;
        dfs(v, u);
        merge(u, v, 1, n);
    }
    modify(u, 1, n, cor[u]);
    ans[u] = t[u].sum;
}

void solve() {
    read(n);
    tot = n;
    for (int i = 1; i <= n; ++i)
        read(cor[i]);
    for (int i = 1, u, v; i < n; ++i) {
        read(u);
        read(v);
        G[u].push_back(v);
        G[v].push_back(u);
    }
    dfs(1, 0);
    for (int i = 1; i <= n; ++i) {
        printf("%lld%c", ans[i], " \n"[i == n]);
    }
}

int main() {
    solve();
    return 0;
}