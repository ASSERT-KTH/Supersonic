```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

constexpr int maxn = 1e5 + 7;

struct Seg {
  int l, r, v;
  ll num, sum;
} t[maxn << 5];

int n, tot, cor[maxn], rt[maxn];
ll ans[maxn];
vector<int> G[maxn];

inline void up(int id) {
  int lson = t[id].l, rson = t[id].r;
  if (t[lson].num > t[rson].num) {
    t[id].num = t[lson].num;
    t[id].v = t[lson].v;
    t[id].sum = t[lson].sum;
  } else if (t[lson].num < t[rson].num) {
    t[id].num = t[rson].num;
    t[id].v = t[rson].v;
    t[id].sum = t[rson].sum;
  } else {
    t[id].num = t[lson].num;
    t[id].v = t[lson].v;
    t[id].sum = t[lson].sum + t[rson].sum;
  }
}

void modify(int &id, int l, int r, int p) {
  if (!id)
    id = ++tot;
  if (l == r) {
    t[id].num += 1;
    t[id].sum = l;
    t[id].v = l;
    return;
  }
  int mid = l + r >> 1;
  if (p <= mid)
    modify(t[id].l, l, mid, p);
  else
    modify(t[id].r, mid + 1, r, p);
  up(id);
}

int merge(int a, int b, int l, int r) {
  if (!a)
    return b;
  if (!b)
    return a;
  if (l == r) {
    t[a].v = l;
    t[a].sum = l;
    t[a].num += t[b].num;
    return a;
  }
  int mid = l + r >> 1;
  t[a].l = merge(t[a].l, t[b].l, l, mid);
  t[a].r = merge(t[a].r, t[b].r, mid + 1, r);
  up(a);
  return a;
}

void dfs(int u, int fa) {
  for (auto v : G[u]) {
    if (v == fa)
      continue;
    dfs(v, u);
    rt[u] = merge(rt[u], rt[v], 1, n);
  }
  modify(rt[u], 1, n, cor[u]);
  ans[u] = t[rt[u]].sum;
}

void solve() {
  cin >> n;
  tot = n;
  for (int i = 1; i <= n; ++i)
    cin >> cor[i];
  for (int i = 1, u, v; i < n; ++i) {
    cin >> u >> v;
    G[u].push_back(v);
    G[v].push_back(u);
  }
  dfs(1, 0);
  for (int i = 1; i <= n; ++i) {
    cout << ans[i] << (i == n ? '\n' : ' ');
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  solve();
  return 0;
}
```
