#include <bits/stdc++.h>

using namespace std;

const int MAXN = 500001;

vector<int> graph[MAXN];
int ans[MAXN];

int dfs(int v) {
    static vector<int> list;
    static bitset<MAXN> visited;
    
    if (ans[v]) return ans[v];

    list.clear();
    visited.reset();

    stack<int> s;
    s.push(v);
    visited.set(v);

    while (!s.empty()) {
        int now = s.top();
        s.pop();
        list.push_back(now);
        for (int next : graph[now])
            if (!visited[next]) {
                visited.set(next);
                s.push(next);
            }
    }

    int res = list.size();
    for (int next : list)
        ans[next] = res;
    return res;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int l;
        cin >> l;
        if (l <= 0)
            continue;
        int a;
        cin >> a;
        while (--l) {
            int b;
            cin >> b;
            graph[a].push_back(b);
            graph[b].push_back(a);
            a = b;
        }
    }

    for (int i = 1; i <= n; i++)
        cout << dfs(i) << " ";
    cout << endl;

    return 0;
}