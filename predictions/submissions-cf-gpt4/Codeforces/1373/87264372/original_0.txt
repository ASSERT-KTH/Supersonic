```
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  int t;
  cin >> t;
  
  while (t--) {
    int n;
    cin >> n;
    vi ar(n);
    
    for (int i = 0; i < n; ++i) { 
      cin >> ar[i]; 
    }

    vector<vll> dp(3, vll(n + 1, 0ll));

    for (int i = 0; i < n; ++i) {
      dp[0][i + 1] = dp[0][i] + (i & 1 ? 0 : ar[i]);
      
      if (i + 2 <= n)
        dp[1][i + 2] = max(dp[0][i], dp[1][i]) + ar[(i % 2 == 0 ? i + 1 : i)];

      dp[2][i + 1] = max({dp[0][i], dp[1][i], dp[2][i], dp[2][i + 1]}) +(i & 1 ? 0 : ar[i]);
    }

    cout << max({dp[0][n], dp[1][n], dp[2][n]}) << "\n";
  }
  return 0;
}
```