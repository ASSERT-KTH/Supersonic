#include <iostream>
#include <vector>
#include <algorithm>
#include <set>

using namespace std;

struct Interval {
    int start, end, index;
};

bool compareInterval(const Interval &i1, const Interval &i2) {
    if (i1.start != i2.start) 
        return i1.start < i2.start;
    return i1.end > i2.end;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n, k;
    cin >> n >> k;
    vector<Interval> intervals(n);
    for (int i = 0; i < n; ++i) {
        cin >> intervals[i].start >> intervals[i].end;
        intervals[i].index = i + 1;
    }
    sort(intervals.begin(), intervals.end(), compareInterval);

    multiset<int> endTimes;
    vector<int> result;
    for (const auto &interval : intervals) {
        endTimes.insert(interval.end);
        result.push_back(interval.index);
        while (endTimes.size() > k) {
            if (*endTimes.begin() < interval.end) {
                auto it = find(result.begin(), result.end(), intervals[distance(intervals.begin(), find_if(intervals.begin(), intervals.end(), [&](const Interval &itv) {
                    return itv.end == *endTimes.begin();
                }))].index);
                result.erase(it);
                endTimes.erase(endTimes.begin());
            } else {
                break;
            }
        }
    }

    cout << result.size() << '\n';
    for (auto i : result) {
        cout << i << ' ';
    }

    return 0;
}