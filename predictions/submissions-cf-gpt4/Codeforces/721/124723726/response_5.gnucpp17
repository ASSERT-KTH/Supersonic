#include <iostream>
#include <vector>
#include <algorithm>

using ll = long long int;
using ar = std::vector<ll>;
using mat = std::vector<std::vector<ll>>;
constexpr ll MOD = 1000000007;
constexpr ll inf = 1e9 + 7;

mat cn(ll n, ll m) { return mat(n, std::vector<ll>(m)); }

ll const madp2n = 5e5 + 1;

void solve() {
  ll t1 = 1;
  for (ll tt = 1; tt <= t1; tt++) {
    int n, m, T;
    std::cin >> n >> m >> T;
    std::vector<std::pair<int, int>> adj[n + 1];
    for (int i = 0; i < m; i++) {
      int u, v, w;
      std::cin >> u >> v >> w;
      adj[u].push_back({v, w});
    }
    mat dp(n + 1, std::vector<int>(n + 1, inf));
    mat par(n + 1, std::vector<int>(n + 1, -1));
    dp[1][1] = 0;
    std::vector<ll> indc(n + 1, -1);
    for (int j = 1; j < n; j++) {
      for (int i = 1; i <= n; i++) {
        for (auto &e : adj[i]) {
          ll to = e.first;
          if (dp[to][j + 1] > dp[i][j] + e.second && dp[i][j] + e.second <= T) {
            indc[to] = i;
            dp[to][j + 1] = dp[i][j] + e.second;
            par[to][j + 1] = i;
          }
        }
      }
    }
    int res = 0;
    for (int i = 1; i <= n; i++)
      if (dp[n][i] <= T)
        res = i;
    std::vector<int> ans;
    int cur = n;
    int jumps = res;
    ans.push_back(cur);
    while (jumps > 1) {
      ans.push_back(par[cur][jumps]);
      cur = par[cur][jumps];
      jumps--;
    }
    std::reverse(ans.begin(), ans.end());
    std::cout << res << std::endl;
    for (ll i : ans)
      std::cout << i << " ";
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  solve();
  return 0;
}