```
#include <iostream>
#include <vector>
#include <algorithm>
#include <utility>

using namespace std;
using ll = long long int;
using ar = vector<ll>;
using mat = vector<vector<ll>>;
const ll inf = 1e9 + 7;

mat cn(ll n, ll m) { return vector<vector<ll>>(n, vector<ll>(m)); }

void solve() {
  ll t1 = 1;
  for (ll tt = 1; tt <= t1; tt++) {
    int n, m, T;
    cin >> n >> m >> T;
    vector<vector<pair<int, int>>> adj(n + 1);
    for (int i = 0; i < m; i++) {
      int u, v, w;
      cin >> u >> v >> w;
      adj[u].push_back({v, w});
    }
    vector<vector<int>> dp = cn(n + 1, n + 1);
    vector<vector<int>> par = cn(n + 1, n + 1);
    fill(dp.begin(), dp.end(), vector<int>(n+1, inf));
    fill(par.begin(), par.end(), vector<int>(n+1, -1));

    dp[1][1] = 0;
    vector<ll> indc(n + 1, -1);
    for (int j = 1; j < n; j++) {
      for (int i = 1; i <= n; i++) {
        for (auto e : adj[i]) {
          ll to = e.first;
          if (dp[to][j + 1] > dp[i][j] + e.second && dp[i][j] + e.second <= T) {
            indc[to] = i;
            dp[to][j + 1] = dp[i][j] + e.second;
            par[to][j + 1] = i;
          }
        }
      }
    }
    int res = 0;
    for (int i = 1; i <= n; i++)
      if (dp[n][i] <= T)
        res = i;
    vector<int> ans;
    int cur = n;
    int jumps = res;
    ans.push_back(cur);
    while (jumps > 1) {
      ans.push_back(par[cur][jumps]);
      cur = par[cur][jumps];
      jumps--;
    }
    reverse(ans.begin(), ans.end());
    cout << res << endl;
    for (ll i : ans)
      cout << i << " ";
  }
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  solve();
  return 0;
}
```