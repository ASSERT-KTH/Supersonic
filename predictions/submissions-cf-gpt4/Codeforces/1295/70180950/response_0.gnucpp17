#include <iostream>
#include <vector>

using namespace std;

typedef long long ll;

ll min(ll a, ll b) { return a < b ? a : b; }

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    ll n;
    cin >> n;

    vector<ll> p(n), a(n), prefixSum(n), ps(n), tree(4*n, 0);
    for (ll i = 0; i < n; i++) {
        cin >> p[i];
        ps[--p[i]] = i;
    }
    for (ll i = 0; i < n; i++) {
        cin >> a[i];
        prefixSum[i] = a[i] + (i ? prefixSum[i-1] : 0);
    }

    auto build = [&](auto self, ll node, ll start, ll end) -> void {
        if (start == end) {
            tree[node] = prefixSum[start];
        } else {
            ll mid = (start + end) / 2;
            self(self, 2*node, start, mid);
            self(self, 2*node+1, mid+1, end);
            tree[node] = min(tree[2*node], tree[2*node+1]);
        }
    };

    build(build, 1, 0, n-1);

    auto update = [&](auto self, ll node, ll start, ll end, ll index, ll val) -> void {
        if (start == end) {
            tree[node] += val;
        } else {
            ll mid = (start + end) / 2;
            if (start <= index && index <= mid) {
                self(self, 2*node, start, mid, index, val);
            } else {
                self(self, 2*node+1, mid+1, end, index, val);
            }
            tree[node] = min(tree[2*node], tree[2*node+1]);
        }
    };

    ll ans = min(prefixSum[0], prefixSum[n-1]);
    for (ll i = 0; i < n; i++) {
        update(update, 1, 0, n-1, ps[i], -2*a[ps[i]]);
        if (i) {
            update(update, 1, 0, n-1, ps[i-1], 2*a[ps[i-1]]);
        }
        ans = min(ans, tree[1] + (i+1) * a[ps[i]]);
    }

    cout << ans << '\n';

    return 0;
}