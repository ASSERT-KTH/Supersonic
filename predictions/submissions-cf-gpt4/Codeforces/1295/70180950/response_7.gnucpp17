#include <algorithm>
#include <iostream>
#include <vector>
#define ll long long
using namespace std;

const ll maxn = ll(2e5) + 11;
const ll inf = ll(1e15) + 12;
ll n;
ll a[maxn], ps[maxn], p[maxn], pref[maxn];

struct node {
    ll l, mid, r, val, add;
    node *left, *right;
    node(ll l, ll r) : l(l), r(r), left(nullptr), right(nullptr), add(0), val(0) {
        mid = (l + r) >> 1;
    }
};

ll f(ll x, ll y) { return min(x, y); }

void build(node *root) {
    if (root->r - root->l == 1) {
        root->val = pref[root->l] + ((root->l == n - 1) ? inf : 0);
    } else {
        root->left = new node(root->l, root->mid);
        root->right = new node(root->mid, root->r);
        build(root->left);
        build(root->right);
        root->val = f(root->left->val, root->right->val);
    }
}

void push(node *root) {
    if (root->left) {
        root->left->add += root->add;
        root->right->add += root->add;
    }
    root->val += root->add;
    root->add = 0;
}

void add_val(node *root, ll ql, ll qr, ll val) {
    push(root);
    if (root->r <= ql || root->l >= qr) {
        return;
    }
    if (ql == root->l && root->r == qr) {
        root->add += val;
        push(root);
        return;
    }
    add_val(root->left, ql, min(root->mid, qr), val);
    add_val(root->right, max(root->mid, ql), qr, val);
    root->val = f(root->left->val, root->right->val);
}

ll get_min(node *root, ll ql, ll qr) {
    push(root);
    if (root->r <= ql || root->l >= qr) {
        return inf;
    }
    if (ql == root->l && root->r == qr) {
        return root->val;
    }
    return f(get_min(root->left, ql, min(root->mid, qr)), get_min(root->right, max(root->mid, ql), qr));
}

int main() {
    ios::sync_with_stdio(false);
    cin >> n;
    for (ll i = 0; i < n; i++) {
        cin >> p[i];
        ps[p[i] - 1] = i;
    }
    for (ll i = 0; i < n; i++) {
        cin >> a[i];
        pref[i] = a[i] + (i ? pref[i - 1] : 0);
    }
    node *root = new node(0, n);
    build(root);
    ll ans = min(a[0], a[n - 1]);
    ll mus = 0;
    for (ll i = 0; i < n; i++) {
        add_val(root, ps[i], n, -2 * a[ps[i]]);
        mus += a[ps[i]];
        ans = min(ans, get_min(root, 0, n) + mus);
    }
    cout << ans << endl;
    return 0;
}