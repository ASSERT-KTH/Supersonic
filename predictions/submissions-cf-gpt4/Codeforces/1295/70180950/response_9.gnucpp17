#include <iostream>
#include <vector>
#define ll long long
#define inf ll(1e15)
#define maxn ll(2e5) + 11
ll n;
ll a[maxn], ps[maxn], p[maxn], pref[maxn];
struct node {
  ll l, mid, r, val, add;
  node *left, *right;
  node(ll l, ll r) : l(l), r(r), val(0), add(0), mid((l + r) / 2), left(nullptr), right(nullptr) {}
};

void build(node *root) {
  if (root->r - root->l == 1) {
    root->val = root->l == n - 1 ? inf : pref[root->l];
  } else {
    root->left = new node(root->l, root->mid);
    root->right = new node(root->mid, root->r);
    build(root->left);
    build(root->right);
    root->val = std::min(root->left->val, root->right->val);
  }
}

void push(node *root) {
  if (root->left != nullptr) {
    root->left->add += root->add;
    root->right->add += root->add;
  }
  root->val += root->add;
  root->add = 0;
}

void add_val(node *root, ll ql, ll qr, ll val) {
  push(root);
  if (root->r <= ql || root->l >= qr) {
    return;
  }
  if (ql == root->l && root->r == qr) {
    root->add += val;
    push(root);
    return;
  }
  add_val(root->left, ql, std::min(root->mid, qr), val);
  add_val(root->right, std::max(root->mid, ql), qr, val);
  root->val = std::min(root->left->val, root->right->val);
}

ll get_min(node *root, ll ql, ll qr) {
  push(root);
  if (root->r <= ql || root->l >= qr) {
    return inf;
  }
  if (ql == root->l && root->r == qr) {
    return root->val;
  }
  return std::min(get_min(root->left, ql, std::min(root->mid, qr)),
           get_min(root->right, std::max(root->mid, ql), qr));
}

void solve() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(0);
  std::cin >> n;
  for (ll i = 0; i < n; i++) {
    ll cur;
    std::cin >> cur;
    p[i] = cur;
    ps[cur - 1] = i;
  }
  for (ll i = 0; i < n; i++) {
    ll cur;
    std::cin >> cur;
    a[i] = cur;
    pref[i] = i == 0 ? cur : pref[i - 1] + cur;
  }
  node *root = new node(0, n);
  build(root);
  ll ans = std::min(a[0], a[n - 1]);
  ll mus = 0;
  for (ll i = 0; i < n; i++) {
    add_val(root, ps[i], n, -2 * a[ps[i]]);
    mus += a[ps[i]];
    ll cur = get_min(root, 0, n) + mus;
    ans = std::min(ans, cur);
  }
  std::cout << ans << '\n';
}

int main() {
  solve();
  return 0;
}