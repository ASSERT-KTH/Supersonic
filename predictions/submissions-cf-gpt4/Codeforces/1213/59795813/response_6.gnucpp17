#include <iostream>
#include <vector>
#include <algorithm>
#define int long long
typedef std::pair<int, int> pii;
typedef std::vector<std::pair<int, pii>> vpii;
const int MAX = 2e5;
int n, m, u, q, v, w, par[MAX+1], sz[MAX+1], PS[MAX+1];
vpii e;
int root(int x) { return par[x] = (par[x] == x ? x : root(par[x])); }
int mrg(int x, int y) {
  int tmp;
  x = root(x), y = root(y);
  if (x == y)
    return 0;
  if (sz[x] < sz[y])
    std::swap(x, y);
  par[y] = x, tmp = sz[x] * sz[y], sz[x] += sz[y];
  return tmp;
}
void dsu() {
  for (int i = 0; i < n - 1; i++)
    PS[e[i].first] += mrg(e[i].second.first, e[i].second.second);
  for (int i = 1; i <= MAX; i++)
    PS[i] += PS[i - 1];
}
main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);
  std::cin >> n >> m;
  e.reserve(n - 1);
  for (int i = 0; i < n - 1; i++) {
    std::cin >> u >> v >> w;
    e.push_back({w, {u, v}});
  }
  std::sort(e.begin(), e.end());
  for (int i = 1; i <= n; i++)
    par[i] = i, sz[i] = 1;
  dsu();
  while (m--) {
    std::cin >> q;
    std::cout << PS[q] << ' ';
  }
}