#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>

using namespace std;

struct Edge {
    int weight;
    int u;
    int v;
};

vector<int> parent, rank_, sizes;

int findSet(int v) {
    if (v == parent[v])
        return v;
    return parent[v] = findSet(parent[v]);
}

void unionSets(int a, int b, vector<long long>& result) {
    a = findSet(a);
    b = findSet(b);
    if (a != b) {
        if (rank_[a] < rank_[b])
            swap(a, b);
        parent[b] = a;
        result.push_back(static_cast<long long>(sizes[a]) * sizes[b]);
        sizes[a] += sizes[b];
        if (rank_[a] == rank_[b])
            ++rank_[a];
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    int n, m;
    cin >> n >> m;
    vector<Edge> edges(n - 1);
    for (auto& edge : edges) {
        cin >> edge.u >> edge.v >> edge.weight;
    }

    sort(edges.begin(), edges.end(), [](const Edge& a, const Edge& b) {
        return a.weight < b.weight;
    });

    parent.resize(n + 1);
    iota(parent.begin(), parent.end(), 0);
    rank_.resize(n + 1, 0);
    sizes.resize(n + 1, 1);

    vector<long long> result;
    for (const auto& edge : edges) {
        unionSets(edge.u, edge.v, result);
    }

    sort(result.begin(), result.end());
    partial_sum(result.begin(), result.end(), result.begin());

    while (m--) {
        int q;
        cin >> q;
        auto it = upper_bound(result.begin(), result.end(), q);
        cout << (it == result.begin() ? 0 : *(prev(it))) << ' ';
    }

    return 0;
}