```c++
#include <bits/stdc++.h>
#define ll long long int
#define MOD 1000000007
#define oo 1000000000000000000
#define forr(i, n) for (int i = 0; i < n; i++)
#define fastio ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0)
#define all(x) x.begin(), x.end()
#define unique(v) sort(all(v)); v.resize(distance(v.begin(), unique(all(v))))
#define eb emplace_back
#define FF first
#define SS second
#define mem(a, v) memset(a, v, sizeof(a))
#define pb push_back
#define popcount(x) __builtin_popcount(x)
using namespace std;
struct custom_hash {
  static uint64_t splitmix64(uint64_t x) {
    x += 0x9e3779b97f4a7c15;
    x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
    x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
    return x ^ (x >> 31);
  }
  size_t operator()(uint64_t x) const {
    static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
    return splitmix64(x + FIXED_RANDOM);
  }
};
template <typename T> ostream &operator<<(ostream &output, const vector<T> &v) {
  if (v.empty()) return output;
  for (int i = 0; i < v.size() - 1; i++) output << v[i] << " ";
  output << v.back();
  return output;
}
template <typename T> istream &operator>>(istream &input, vector<T> &v) {
  for (auto &i : v) cin >> i;
  return input;
}
int power(long long x, long long n, const long long P) {
  if (x == 0) return 0;
  if (n == 0 || x == 1) return 1LL;
  x %= P;
  int res = 1;
  while (n > 0) {
    if (n & 1) res = (ll)res * x % P;
    x = (ll)x * x % P;
    n /= 2;
  }
  return res;
}
long long int power(long long int x, long long int n) {
  if (x == 0) return 0;
  else if (n == 0 || x == 1) return 1;
  long long res = 1;
  while (n > 0) {
    if (n & 1) res *= x;
    x *= x;
    n /= 2;
  }
  return res;
}
int inv(long long x) { return power(x, MOD - 2, MOD); }
long long int gcd(const long long int a, const long long int b) {
  if (b == 0) return a;
  return gcd(b, a % b);
}
long long int lcm(const long long int a, const long long int b) {
  return (a * b) / gcd(a, b);
}
void __sol() {
  int n;
  cin >> n;
  vector<pair<ll, ll>> v(n);
  forr(i, n) cin >> v[i].FF >> v[i].SS;
  if (n == 2) {
    cout << min(v[0].FF + max(0LL, v[1].FF - v[0].SS),
                v[1].FF + max(0LL, v[0].FF - v[1].SS))
         << "\n";
    return;
  }
  vector<ll> diff(n);
  ll sum = 0;
  for (int i = 0; i < n; i++) {
    diff[i] = max(0LL, v[(i + 1) % n].FF - v[i].SS);
    sum += diff[i];
  }
  ll ans = oo;
  for (int i = 0; i < n; i++) {
    ans = min(ans, v[i].FF + sum - diff[i]);
  }
  cout << ans << "\n";
}
int main() {
  fastio;
  int tc = 1;
  cin >> tc;
  while (tc--) __sol();
  return 0;
}
```