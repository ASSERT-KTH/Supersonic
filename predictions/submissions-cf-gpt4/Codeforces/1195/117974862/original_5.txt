```cpp
#include <iostream>
#include <algorithm>
#include <vector>
#define MAXN 100005

long long dp[MAXN][3], arr1[MAXN], arr2[MAXN];
int n;

long long dpF(int i, int last) {
    if (i == n) return 0;
    if (dp[i][last] != -1) return dp[i][last];

    long long op1 = 0, op2 = 0, op3 = 0;
    if (last != 1) op1 = arr1[i] + dpF(i + 1, 1);
    if (last != 2) op2 = arr2[i] + dpF(i + 1, 2);
    op3 = dpF(i + 1, last);

    return dp[i][last] = std::max({op1, op2, op3});
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL); std::cout.tie(NULL);

    std::fill(&dp[0][0], &dp[0][0] + sizeof(dp) / sizeof(dp[0][0]), -1);
    std::cin >> n;

    for (int i = 0; i < n; ++i) std::cin >> arr1[i];
    for (int i = 0; i < n; ++i) std::cin >> arr2[i];

    std::cout << dpF(0, 0) << "\n";

    return 0;
}
```