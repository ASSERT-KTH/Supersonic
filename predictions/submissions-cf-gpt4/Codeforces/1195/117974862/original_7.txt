```cpp
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

const int maxn = 100005;
long long arr1[maxn], arr2[maxn];
long long dp[maxn][3];
int n;

long long dpF(int i, int last) {
  if (i == n)
    return 0LL;
  if (dp[i][last] != -1)
    return dp[i][last];
  long long op1 = 0LL, op2 = 0LL, op3 = 0LL;
  if (last != 1)
    op1 = arr1[i] + dpF(i + 1, 1);
  if (last != 2)
    op2 = arr2[i] + dpF(i + 1, 2);
  op3 = dpF(i + 1, last);
  return dp[i][last] = max({op1, op2, op3});
}

void solve() {
  fill(&dp[0][0], &dp[0][0] + sizeof(dp) / sizeof(long long), -1);
  cin >> n;
  for(int i = 0; i < n; ++i) cin >> arr1[i];
  for(int i = 0; i < n; ++i) cin >> arr2[i];
  cout << dpF(0, 0) << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  solve();
  return 0;
}
```