#include <algorithm>
#include <iostream>
#include <cstdint>

using namespace std;
typedef int64_t ll;

ll gcd(ll a, ll b) {
  while (b != 0) {
    ll t = b;
    b = a % b;
    a = t;
  }
  return a < 0 ? -a : a;
}

ll lcm(ll a, ll b) {
  return a / gcd(a, b) * b;
}

ll pow(ll n, ll k) {
  ll ret = 1;
  while (k > 0) {
    if (k & 1)
      ret *= n;
    n *= n;
    k /= 2;
  }
  return ret;
}

ll modexp(ll n, ll k, ll md) {
  n %= md;
  ll ret = 1;
  while (k > 0) {
    if (k & 1)
      ret = (ret * n) % md;
    n = (n * n) % md;
    k /= 2;
  }
  return ret;
}

ll popcount(ll n) {
  ll ret = 0;
  while (n > 0) {
    ret += n & 1;
    n >>= 1;
  }
  return ret;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(nullptr);

  ll n, t;
  cin >> n >> t;
  ll a[n];
  for (ll i = 0; i < n; ++i) cin >> a[i];
  
  ll b[n + 1] = {0};
  for (ll i = 0; i < n; ++i) {
      b[i + 1] = b[i] + a[i];
  }
  int maxlen = 0;
  for (ll i = 1; i <= n; ++i) {
    ll to = b[i - 1] + t;
    auto it = upper_bound(b, b + n + 1, to);
    int len = (it - b) - i;
    maxlen = max(maxlen, len);
  }
  cout << maxlen << " ";
}