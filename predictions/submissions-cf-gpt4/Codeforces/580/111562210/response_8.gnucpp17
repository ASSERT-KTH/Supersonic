#include <bits/stdc++.h>
using namespace std;

long long gcd(long long a, long long b) {
    while (b != 0) {
        long long t = b;
        b = a % b;
        a = t;
    }
    return a;
}

int bsearch(int l, int h, int a[], int key) {
    while (l <= h) {
        int m = l + ((h - l) >> 1);
        if (a[m] == key)
            return m;
        else if (a[m] < key)
            l = m + 1;
        else
            h = m - 1;
    }
    return -1;
}

long long bin(long long a, long long b, long long m) {
    a %= m;
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = (res * a) % m;
        a = (a * a) % m;
        b >>= 1;
    }
    return res;
}

int find(int i, vector<int>& p) {
    if (p[i] != i)
        p[i] = find(p[i], p);
    return p[i];
}

void join(int u, int v, vector<int>& p) {
    p[find(u, p)] = find(v, p);
}

void dfs(int x, vector<int> ad[], vector<int>& vis, int cat[], int m, int cc,
         vector<int>& ans, int flag) {
    vis[x] = 1;
    cc = (cat[x - 1] == 1) ? cc + 1 : 0;
    m = max(m, cc);
    if (ad[x].size() == 1 && x != 1)
        ans.push_back(m);
    for (int i : ad[x]) {
        if (!vis[i])
            dfs(i, ad, vis, cat, m, cc, ans, cat[x - 1]);
    }
}

int main() {
    ios_base::sync_with_stdio(false); cin.tie(NULL);
    int n, m;
    cin >> n >> m;
    int cat[n];
    for (int& c : cat)
        cin >> c;
    if (n == 2) {
        cout << ((cat[1] == 0 || cat[0] + cat[1] <= m) ? 1 : 0) << endl;
        return 0;
    }
    vector<int> ad[n + 1], vis(n + 1, 0), ans;
    for (int i = 0; i < n - 1; ++i) {
        int x, y;
        cin >> x >> y;
        ad[x].push_back(y);
        ad[y].push_back(x);
    }
    dfs(1, ad, vis, cat, 0, 0, ans, cat[0]);
    cout << count_if(ans.begin(), ans.end(), [m](int i){ return i <= m; }) << endl;
    return 0;
}