#include <iostream>
#include <vector>
using namespace std;

int32_t main() {
  int n, m;
  cin >> n >> m;
  vector<int> cat(n);
  for (auto &c : cat) {
    cin >> c;
  }
  
  if (n == 2) {
    cout << ((cat[0] + cat[1] <= m) ? 1 : 0) << endl;
    return 0;
  }
  
  vector<vector<int>> ad(n + 1);
  for (int i = 0; i < n - 1; ++i) {
    int x, y;
    cin >> x >> y;
    ad[x].push_back(y);
    ad[y].push_back(x);
  }
  
  vector<int> vis(n + 1, 0), ans;
  int maxCats = 0, curCats = 0;
  
  function<void(int, int)> dfs = [&](int x, int p) {
    vis[x] = 1;
    curCats = (cat[x-1] ? curCats + 1 : 0);
    maxCats = max(maxCats, curCats);
    
    if (ad[x].size() == 1 && x != 1) {
      ans.push_back(maxCats);
    }
    
    for (auto &y : ad[x]) {
      if (!vis[y]) {
        dfs(y, cat[x-1]);
      }
    }
    
    curCats -= cat[x-1];
  };
  
  dfs(1, cat[0]);
  
  cout << count_if(ans.begin(), ans.end(), [&](int i) { return i <= m; }) << endl;
  
  return 0;
}