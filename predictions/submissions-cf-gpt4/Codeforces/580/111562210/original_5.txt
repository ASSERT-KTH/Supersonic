```c++
#include <bits/stdc++.h>
using namespace std;

long long gcd(long long a, long long b) {
  return b == 0 ? a : gcd(b, a % b);
}

int bsearch(int l, int h, int a[], int key) {
  while (l <= h) {
    int m = l + (h - l) / 2;
    if (a[m] == key) return m;
    else if (a[m] < key) l = m + 1;
    else h = m - 1;
  }
  return -1;
}

long long bin(long long a, long long b, long long m) {
  a %= m;
  long long res = 1;
  while (b > 0) {
    if (b & 1) res = res * a % m;
    a = a * a % m;
    b >>= 1;
  }
  return res;
}

int ncr(int n, int r) {
  long long res = 1;
  for (int i = 0; i < r; i++) {
    res = res * (n - i) / (i + 1);
  }
  return res;
}

int find(int i, vector<int>& p) {
  return p[i] == i ? i : p[i] = find(p[i], p);
}

void join(int u, int v, vector<int>& p) {
  int x = find(u, p);
  int y = find(v, p);
  if(x != y) p[x] = y;
}

void dfs(int x, vector<int> ad[], vector<int>& vis, vector<int>& cat, int m, int cc, vector<int>& ans) {
  vis[x] = 1;
  cc = (cat[x - 1] == 1) ? cc + 1 : 0;
  m = max(m, cc);
  if (ad[x].size() == 1 && x != 1) ans.push_back(m);
  for (int i = 0; i < ad[x].size(); i++) {
    if (!vis[ad[x][i]]) dfs(ad[x][i], ad, vis, cat, m, cc, ans);
  }
}

int32_t main() {
  int n, m;
  cin >> n >> m;
  vector<int> cat(n);
  for (int& c : cat) cin >> c;
  int an = 0;
  if (n == 2) {
    if (cat[1] == 0 || cat[0] + cat[1] <= m) an++;
    cout << an << endl;
    return 0;
  }
  vector<int> ad[n + 1], vis(n + 1, 0), ans;
  for (int i = 0; i < n - 1; i++) {
    int x, y;
    cin >> x >> y;
    ad[x].push_back(y);
    ad[y].push_back(x);
  }
  dfs(1, ad, vis, cat, 0, 0, ans);
  for (int i : ans) if (i <= m) ++an;
  cout << an << endl;
  return 0;
}
```