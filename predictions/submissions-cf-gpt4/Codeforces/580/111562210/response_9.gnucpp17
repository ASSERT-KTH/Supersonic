#include <bits/stdc++.h>
using namespace std;

const int MAX_N = 1e5 + 5;
vector<int> adj[MAX_N], cats(MAX_N), vis(MAX_N, 0), ans;

void dfs(int x, int m, int cc) {
    vis[x] = 1;
    cc = cats[x] ? cc + 1 : 0;
    m = max(m, cc);
    if (m > ::cats[0]) return;
    bool isLeaf = true;
    for (int i : adj[x]) {
        if (vis[i]) continue;
        dfs(i, m, cc);
        isLeaf = false;
    }
    if (isLeaf) ans.push_back(m);
}

int main() {
    ios_base::sync_with_stdio(false); cin.tie(nullptr);
    int n;
    cin >> n >> cats[0];
    for (int i = 1; i <= n; ++i) {
        cin >> cats[i];
    }
    for (int i = 1; i < n; ++i) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(1, 0, 0);
    cout << ans.size() << '\n';
    return 0;
}