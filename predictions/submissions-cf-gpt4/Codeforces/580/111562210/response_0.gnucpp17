#include <bits/stdc++.h>
using namespace std;

long long gcd(long long a, long long b) {
  while(b != 0) {
    long long t = b;
    b = a % b;
    a = t;
  }
  return a;
}

int bsearch(int l, int h, int a[], int key) {
  while (l <= h) {
    int m = l + ((h - l) >> 1);
    if (a[m] == key)
      return m;
    else if (a[m] < key)
      l = m + 1;
    else
      h = m - 1;
  }
  return -1;
}

long long bin(long long a, long long b, long long m) {
  a %= m;
  long long res = 1;
  while (b > 0) {
    if (b & 1)
      res = (res * a) % m;
    a = (a * a) % m;
    b >>= 1;
  }
  return res;
}

int ncr(int n, int r) {
  if (r > n - r) r = n - r; 
  long long res = 1;
  for (int i = 0; i < r; ++i) {
    res *= (n - i);
    res /= (i + 1);
  }
  return res;
}

int find(int i, const vector<int>& p) {
  return p[i] == i ? i : find(p[i], p);
}

void join(int u, int v, vector<int> &p) {
  p[find(u, p)] = find(v, p);
}

void dfs(int x, vector<int> ad[], vector<int> &vis, int cat[], int m, int cc,
         vector<int> &ans) {
  vis[x] = 1;
  cc = (cat[x - 1] == 1) ? cc+1 : 0;
  m = max(m, cc);
  if (ad[x].size() == 1 && x != 1) {
    ans.push_back(m);
  }
  for (int i : ad[x]) {
    if (!vis[i])
      dfs(i, ad, vis, cat, m, cc, ans);
  }
}

int32_t main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int n, m;
  cin >> n >> m;
  int cat[n];
  for (int &c : cat) cin >> c;
  int an = 0;
  if (n == 2) {
    an = (cat[1] == 0 || cat[0] + cat[1] <= m) ? 1 : 0;
    cout << an << '\n';
    return 0;
  }
  vector<int> ad[n + 1];
  for (int i = 0; i < n - 1; ++i) {
    int x, y;
    cin >> x >> y;
    ad[x].push_back(y);
    ad[y].push_back(x);
  }
  vector<int> vis(n + 1, 0);
  vector<int> ans;
  dfs(1, ad, vis, cat, 0, 0, ans);
  for (int a : ans) {
    if (a <= m)
      ++an;
  }
  cout << an << '\n';
  return 0;
}