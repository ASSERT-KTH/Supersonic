#include <vector>
#include <iostream>

int find(int i, std::vector<int>& p) {
    while (p[i] != i)
        i = p[i];
    return i;
}

void dfs(int x, std::vector<int> ad[], std::vector<int>& vis, int cat[], int m, int cc,
    std::vector<int>& ans, int flag) {
    vis[x] = 1;
    cc = (cat[x - 1] == 1) ? cc + 1 : 0;
    m = std::max(m, cc);
    if (ad[x].size() == 1 && x != 1) {
        ans.push_back(m);
    }
    for (auto y : ad[x]) {
        if (vis[y] == 0)
            dfs(y, ad, vis, cat, m, cc, ans, cat[x - 1]);
    }
}

int main() {
    int n, m;
    std::cin >> n >> m;
    int cat[n];
    for (int i = 0; i < n; i++) {
        std::cin >> cat[i];
    }
    int an = 0;
    if (n == 2) {
        if (cat[1] == 0 || cat[0] + cat[1] <= m)
            an++;
        std::cout << an << std::endl;
        return 0;
    }
    std::vector<int> ad[n + 1];
    for (int i = 0; i < n - 1; i++) {
        int x, y;
        std::cin >> x >> y;
        ad[x].push_back(y);
        ad[y].push_back(x);
    }
    std::vector<int> vis(n + 1, 0);
    std::vector<int> ans;
    dfs(1, ad, vis, cat, 0, 0, ans, cat[0]);
    for (auto a : ans) {
        if (a <= m)
            ++an;
    }
    std::cout << an << std::endl;
    return 0;
}