```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
const int N = 62;
const int mod = 998244353;
int dp[N][N][N], way[10][N][N];
unordered_map<string, bool> mp;
char s[10];
int dict(char a) {
  return isalpha(a) ? (isupper(a) ? a - 'A' : a - 'a' + 26) : a - '0' + 52;
}
void adding(int &a, int b) {
  a = ((a += b) >= mod) ? a - mod : a;
}
int mul(int a, int b) { return LL(a) * b % mod; }
int play(int i, int j, int k) {
  int arr[] = {i, j, k};
  sort(arr, arr + 3);
  return dp[arr[2]][arr[1]][arr[0]];
}
void solve() {
  int n;
  cin >> n;
  for (int i = 1; i <= n; ++i) {
    cin >> s;
    int len = strlen(s) - 1;
    if (!mp[s])
      way[len][dict(s[0])][dict(s[len])]++, mp[s] = true;
    reverse(s, s + len + 1);
    if (!mp[s])
      way[len][dict(s[0])][dict(s[len])]++, mp[s] = true;
  }
  int ans = 0;
  for (int L = 2; L <= 9; ++L) {
    memset(dp, 0, sizeof(dp));
    for (int i = 0; i < N; ++i)
      for (int j = 0; j <= i; ++j)
        for (int k = 0; k <= j; ++k)
          for (int l = 0; l < N; ++l)
            adding(dp[i][j][k], LL(way[L][i][l]) * way[L][j][l] % mod * way[L][k][l] % mod);
    for (int i = 0; i < N; ++i)
      for (int j = 0; j <= i; ++j)
        for (int k = 0; k < N; ++k)
          for (int l = 0; l <= k; ++l) {
            int a = mul(mul(play(i, k, l), play(j, l, k)),
                        mul(play(i, j, k), play(i, l, j)));
            if (k != l)
              adding(a, a);
            if (i != j)
              adding(a, a);
            adding(ans, a);
          }
  }
  cout << ans << '\n';
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  solve();
  return 0;
}
```