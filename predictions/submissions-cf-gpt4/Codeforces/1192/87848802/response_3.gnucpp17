#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
const int N = 62;
const int mod = 998244353;
int dp[N][N][N], way[10][N][N];
unordered_set<string> mp;
char s[10];

void adding(int &a, int b) {
  if ((a += b) >= mod)
    a -= mod;
}
int mul(int a, int b) { return a * 1ll * b % mod; }
int play(int i, int j, int k) {
  int mx = max({i, j, k});
  int mi = min({i, j, k});
  return dp[mx][i ^ j ^ k ^ mx ^ mi][mi];
}

int dict(char a) {
  if (isdigit(a))
    return a - '0' + 52;
  return isupper(a) ? a - 'A' : a - 'a' + 26;
}

void solve() {
  int n, len, ans = 0;
  scanf("%d", &n);
  for(int i = 1; i <= n; i++) {
    scanf(" %s", s);
    len = strlen(s) - 1;
    if (mp.insert(s).second)
      way[len][dict(s[0])][dict(s[len])]++;
    reverse(s, s + len + 1);
    if (mp.insert(s).second)
      way[len][dict(s[0])][dict(s[len])]++;
  }
  for(int L = 2; L <= 9; L++) {
    for(int i = 0; i < 62; i++) {
      for(int j = 0; j <= i; j++) {
        for(int k = 0; k <= j; k++) {
          dp[i][j][k] = 0;
          for(int l = 0; l < 62; l++)
            adding(dp[i][j][k], way[L][i][l] * 1ll * way[L][j][l] * way[L][k][l] % mod);
        }
      }
    }
    for(int i = 0; i < 62; i++) {
      for(int j = 0; j <= i; j++) {
        for(int k = 0; k < 62; k++) {
          for(int l = 0; l <= k; l++) {
            int a = mul(mul(play(i, k, l), play(j, l, k)), mul(play(i, j, k), play(i, l, j)));
            if (k != l)
              adding(a, a);
            if (i != j)
              adding(a, a);
            adding(ans, a);
          }
        }
      }
    }
  }
  printf("%d\n", ans);
}

int main() {
  solve();
  return 0;
}