#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <unordered_map>

#define SZ(a) (int)(a).size()
#define FOR(i, a, b) for (int i = (a); i <= (b); ++i)

using namespace std;

typedef long long LL;
typedef vector<int> VI;

const int N = 62;
const int mod = 998244353;

int dp[N][N][N], way[10][N][N];
unordered_map<string, bool> mp;
char s[10];

inline int dict(char a) {
  if (isalpha(a)) {
    if (isupper(a))
      return a - 'A';
    return a - 'a' + 26;
  }
  return a - '0' + 52;
}

inline void adding(int &a, int b) {
  if ((a += b) >= mod)
    a -= mod;
}

inline int add(int a, int b) { return ((a += b) >= mod) ? a - mod : a; }

inline int mul(int a, int b) { return a * 1ll * b % mod; }

inline int play(int i, int j, int k) {
  int mx = max({i, j, k});
  int mi = min({i, j, k});
  return dp[mx][i ^ j ^ k ^ mx ^ mi][mi];
}

void solve() {
  int n;
  scanf("%d", &n);
  FOR(i, 1, n) {
    scanf(" %s", s);
    int len = strlen(s) - 1;
    if (!mp[s])
      way[len][dict(s[0])][dict(s[len])]++, mp[s] = true;
    reverse(s, s + len + 1);
    if (!mp[s])
      way[len][dict(s[0])][dict(s[len])]++, mp[s] = true;
  }
  int ans = 0;
  FOR(L, 2, 9) {
    FOR(i, 0, 61) {
      FOR(j, 0, i) {
        FOR(k, 0, j) {
          dp[i][j][k] = 0;
          FOR(l, 0, 61) {
            int a = way[L][i][l] * 1ll * way[L][j][l] * way[L][k][l] % mod;
            adding(dp[i][j][k], a);
          }
        }
      }
    }
    FOR(i, 0, 61) {
      FOR(j, 0, i) {
        FOR(k, 0, 61) {
          FOR(l, 0, k) {
            int a = mul(mul(play(i, k, l), play(j, l, k)),
                        mul(play(i, j, k), play(i, l, j)));
            if (k != l)
              adding(a, a);
            if (i != j)
              adding(a, a);
            adding(ans, a);
          }
        }
      }
    }
  }
  printf("%d\n", ans);
}

int main() {
  solve();
  return 0;
}