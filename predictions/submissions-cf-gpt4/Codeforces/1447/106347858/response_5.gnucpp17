#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
typedef long long ll;

inline ll fastPow(ll base, ll power, ll mod) {
    ll res = 1;
    while (power) {
        if (power & 1)
            res = (res * base) % mod;
        power >>= 1;
        base = (base * base) % mod;
    }
    return res;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int T;
    cin >> T;
    while (T--) {
        int n, m;
        cin >> n >> m;
        vector<int> nums(n * m);
        for (int &x : nums) {
            cin >> x;
            if (x < 0)
                x *= -1;
        }
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int min_ele = *min_element(nums.begin(), nums.end());
        int neg_count = count_if(nums.begin(), nums.end(), [](int x) { return x < 0; });
        int zero_count = count(nums.begin(), nums.end(), 0);
        cout << (neg_count % 2 && (neg_count + zero_count) % 2 ? sum - 2 * min_ele : sum) << '\n';
    }
    return 0;
}