```c++
#include <bits/stdc++.h>
#define present(container, element) (container.find(element) != container.end()
#define all(c) c.begin(), c.end()
#define lli long long int
#define vi vector<int>
#define cpresent(container, element)                                           \
  (find(all(container), element) != container.end())
#define tr(container, it)                                                      \
  for (auto it = container.begin(); it != container.end(); it++)
using namespace std;
double c, m, p, v;
lli nc, nm, nv, mx, mc;
double dp[1005][1005][2];
double eps = 1e-14;
double getAns(lli cntC, lli cntM, double c, double m, double p, double v) {
  if (c <= eps && m <= eps) {
    return (double)(cntC + cntM + 1);
  }
  if(dp[int(c*100)][int(m*100)][c > eps && m > eps] != -1)
    return dp[int(c*100)][int(m*100)][c > eps && m > eps];
  double temp = 0;
  if (c > eps && m > eps) {
    temp += c * getAns(cntC + 1, cntM, max(0.0, c - v), m + min(c / 2, v / 2),
                       p + min(c / 2, v / 2), v) +
            m * getAns(cntC, cntM + 1, c + min(m / 2, v / 2), max(0.0, m - v),
                       p + min(m / 2, v / 2), v) +
            (cntC + cntM + 1) * p;
  } else if (c > eps) {
    temp += c * getAns(cntC + 1, cntM, max(0.0, c - v), m, p + min(c, v), v) +
            (cntC + cntM + 1) * p;
  } else {
    temp += m * getAns(cntC, cntM + 1, c, max(0.0, m - v), p + min(m, v), v) +
            (cntC + cntM + 1) * p;
  }
  return dp[int(c*100)][int(m*100)][c > eps && m > eps] = temp;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    cin >> c >> m >> p >> v;
    for (int i = 0; i < 100; i++) {
      for (int j = 0; j < 100; j++) {
        dp[i][j][0] = dp[i][j][1] = -1;
      }
    }
    cout << setprecision(15) << getAns(0, 0, c, m, p, v) << endl;
  }
  return 0;
}
```