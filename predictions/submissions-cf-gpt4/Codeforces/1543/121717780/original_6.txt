```c++
#include <iostream>
#include <iomanip>
#include <vector>
#include <algorithm>

using namespace std;

double c, m, p, v;
double dp[1005][1005];

double getAns(int cntC, int cntM) {
    if(dp[cntC][cntM] != -1) 
        return dp[cntC][cntM];
    if (c - cntC * v <= 0 && m - cntM * v <= 0) 
        return dp[cntC][cntM] = cntC + cntM + 1;
    double temp = 0;
    if (c - cntC * v > 0) {
        temp += (c - cntC * v) * getAns(cntC + 1, cntM);
    }
    if (m - cntM * v > 0) {
        temp += (m - cntM * v) * getAns(cntC, cntM + 1);
    }
    return dp[cntC][cntM] = temp + (cntC + cntM + 1) * p;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int t;
    cin >> t;
    while (t--) {
        cin >> c >> m >> p >> v;
        c *= 10000;
        m *= 10000;
        v *= 10000;
        for (int i = 0; i <= c; i++) {
            for (int j = 0; j <= m; j++) {
                dp[i][j] = -1;
            }
        }
        cout << setprecision(15) << getAns(0, 0) / 10000.0 << endl;
    }
    return 0;
}
```