#include <bits/stdc++.h>
using namespace std;

double dp[1005][1005];
double eps = 1e-14;

double getAns(int cntC, int cntM, double c, double m, double p, double v) {
  if(c <= eps && m <= eps)
    return cntC + cntM + 1;
  if(dp[cntC][cntM] != -1)
    return dp[cntC][cntM];
  double temp = 0;
  if(c > eps && m > eps) {
    temp += c * getAns(cntC + 1, cntM, max(0.0, c - v), min(m + min(c, v) / 2, 1.0), p + min(c, v) / 2, v) +
            m * getAns(cntC, cntM + 1, min(c + min(m, v) / 2, 1.0), max(0.0, m - v), p + min(m, v) / 2, v);
  } else if(c > eps) {
    temp += c * getAns(cntC + 1, cntM, max(0.0, c - v), m, p + min(c, v), v);
  } else {
    temp += m * getAns(cntC, cntM + 1, c, max(0.0, m - v), p + min(m, v), v);
  }
  temp += (cntC + cntM + 1) * p;
  dp[cntC][cntM] = temp;
  return temp;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  while(t--) {
    double c, m, p, v;
    cin >> c >> m >> p >> v;
    memset(dp, -1, sizeof(dp));
    cout << fixed << setprecision(12) << getAns(0, 0, c, m, p, v) << endl;
  }
  return 0;
}