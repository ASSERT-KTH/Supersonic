```cpp
#include <iostream>
#include <iomanip>
#include <vector>

using namespace std;
double c, m, p, v;
double dp[3005][3005];

double getAns(int cntC, int cntM) {
  if (dp[cntC][cntM] != -1) {
    return dp[cntC][cntM];
  }
  double &res = dp[cntC][cntM];
  res = 0;
  double nc = cntC * v;
  double nm = cntM * v;
  double np = 1 - nc - nm;
  if (nc > 0) {
    double distribute = min(nc, v);
    double addP = distribute / 2;
    if (nm > 0) {
      res += nc * (1 + getAns(cntC - 1, cntM + 1));
      res += nm * (1 + getAns(cntC + 1, cntM - 1));
    } else {
      res += nc * (1 + getAns(cntC - 1, cntM));
    }
    res += addP * (1 + getAns(cntC, cntM + 1));
  } else if (nm > 0) {
    double distribute = min(nm, v);
    double addP = distribute / 2;
    res += nm * (1 + getAns(cntC + 1, cntM - 1));
    res += addP * (1 + getAns(cntC + 1, cntM));
  }
  return res /= np;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    cin >> c >> m >> p >> v;
    for (int i = 0; i <= c * 1000; i++) {
      for (int j = 0; j <= m * 1000; j++) {
        dp[i][j] = -1;
      }
    }
    cout << setprecision(15) << getAns(c * 1000, m * 1000) << endl;
  }
  return 0;
}
```