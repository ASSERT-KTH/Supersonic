#include <iostream>
#include <iomanip>
#include <algorithm>

using namespace std;
double c, m, p, v;
double dp[3000][3000];
double eps = 1e-9;

double solve(int x, int y){
    if(dp[x][y] > -0.5) return dp[x][y];
    if(x < eps && y < eps){
        return dp[x][y] = 0;
    }
    dp[x][y] = 0;
    if(x >= eps){
        if(x > v - eps){
            dp[x][y] += (x / (c+m+p)) * (solve(x - v, y + min(v/2, y)) + 1);
            dp[x][y] += (x / (c+m+p)) * (solve(x - v, min(v/2, m)) + 1);
        }
        else dp[x][y] += (x / (c+m+p)) * (solve(0, m + min(x/2, y)) + 1);
    }
    if(y >= eps){
        if(y > v - eps){
            dp[x][y] += (y / (c+m+p)) * (solve(x + min(v/2, x), y - v) + 1);
            dp[x][y] += (y / (c+m+p)) * (solve(min(v/2, m), y - v) + 1);
        }
        else dp[x][y] += (y / (c+m+p)) * (solve(x + min(y/2, x), 0) + 1);
    }
    return dp[x][y];
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    cin >> c >> m >> p >> v;
    for(int i = 0; i < 3000; i++)
        for(int j = 0; j < 3000; j++)
            dp[i][j] = -1;
    cout << fixed << setprecision(15) << solve(c * 1000, m * 1000) << endl;
  }
  return 0;
}