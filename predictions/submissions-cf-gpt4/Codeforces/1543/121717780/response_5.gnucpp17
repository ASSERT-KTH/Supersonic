#include <bits/stdc++.h>
#define lli long long int
#define all(c) c.begin(), c.end()
using namespace std;
double c, m, p, v;
lli nc, nm, nv;
double dp[1005][1005][2];
double eps = 1e-14;
double getAns(lli cntC, lli cntM, bool used) {
  if (cntC > nc || cntM > nm) {
    return 0;
  }
  if (dp[cntC][cntM][used] > -0.5) {
    return dp[cntC][cntM][used];
  }
  double curP = p + max(0.0, c - cntC * v) / 10000 + max(0.0, m - cntM * v) / 10000;
  double &ans = dp[cntC][cntM][used] = curP * (cntC + cntM);
  if (cntC * v < c) {
    ans += c / 10000 * (getAns(cntC + 1, cntM, true) + 1);
  }
  if (cntM * v < m) {
    ans += m / 10000 * (getAns(cntC, cntM + 1, true) + 1);
  }
  return ans;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    cin >> c >> m >> p >> v;
    nc = c * 10000;
    nm = m * 10000;
    nv = v * 10000;
    for (int i = 0; i <= nc; i++) {
      for (int j = 0; j <= nm; j++) {
        dp[i][j][0] = dp[i][j][1] = -1;
      }
    }
    cout << fixed << setprecision(15) << getAns(0, 0, 0) << '\n';
  }
  return 0;
}