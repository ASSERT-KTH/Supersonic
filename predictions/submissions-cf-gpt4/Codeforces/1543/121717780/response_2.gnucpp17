#include <iostream>
#include <iomanip>
#include <vector>
#include <algorithm>

using namespace std;
double v;
int dp[3001][3001];
double solve(int c, int m, double p) {
  if (c == 0 && m == 0) return p;
  if (dp[c][m] >= 0) return dp[c][m] + p;
  double res = p;
  if (c > 0) {
    if (c > v) res += (solve(c-v, m+v/2, p+v/2) * c);
    else res += (solve(0, m+c/2, p+c/2) * c);
  }
  if (m > 0) {
    if (m > v) res += (solve(c+v/2, m-v, p+v/2) * m);
    else res += (solve(c+m/2, 0, p+m/2) * m);
  }
  return dp[c][m] = res-p;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    double c, m, p;
    cin >> c >> m >> p >> v;
    for (int i = 0; i < 3001; i++) 
      for (int j = 0; j < 3001; j++) 
        dp[i][j] = -1;
    cout << setprecision(15) << solve(c*1000, m*1000, p) << endl;
  }
  return 0;
}