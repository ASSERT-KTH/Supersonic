#include <bits/stdc++.h>
#define present(container, element) (container.find(element) != container.end()
#define all(c) c.begin(), c.end()
#define lli long long int
#define vi vector<int>
#define cpresent(container, element)                                           \
  (find(all(container), element) != container.end())
#define tr(container, it)                                                      \
  for (auto it = container.begin(); it != container.end(); it++)
using namespace std;
double c, m, p, v;
lli nc, nm, nv, mx, mc;
double dp[1005][1005];
double eps = 1e-14;

double getAns(lli cntC, lli cntM, double c, double m, double p, double v) {
  if (dp[cntC][cntM] > -0.5)
    return dp[cntC][cntM];
  if (c <= eps && m <= eps) {
    return dp[cntC][cntM] = (double)(cntC + cntM + 1);
  }
  double &temp = dp[cntC][cntM];
  temp = (cntC + cntM + 1) * p;
  if (c > eps) {
    double newC = max(0.0, c - v), newP = p + min(c, v);
    if (m > eps)
      temp += c * getAns(cntC + 1, cntM, newC / 2, m + newC / 2, newP, v);
    else
      temp += c * getAns(cntC + 1, cntM, newC, m, newP, v);
  }
  if (m > eps) {
    double newM = max(0.0, m - v), newP = p + min(m, v);
    if (c > eps)
      temp += m * getAns(cntC, cntM + 1, c + newM / 2, newM / 2, newP, v);
    else
      temp += m * getAns(cntC, cntM + 1, c, newM, newP, v);
  }
  return temp;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    cin >> c >> m >> p >> v;
    for (int i = 0; i < 1005; ++i)
      for (int j = 0; j < 1005 - i; ++j)
        dp[i][j] = -1;
    cout << setprecision(15) << getAns(0, 0, c, m, p, v) << endl;
  }
  return 0;
}