#include <bits/stdc++.h>
#define present(container, element) (container.find(element) != container.end()
#define all(c) c.begin(), c.end()
#define lli long long int
#define vi vector<int>
#define cpresent(container, element)                                           \
  (find(all(container), element) != container.end())
#define tr(container, it)                                                      \
  for (auto it = container.begin(); it != container.end(); it++)
using namespace std;
double c, m, p, v;
lli nc, nm, nv, mx, mc;
double dp[1005][1005][2];
double eps = 1e-14;
double getAns(lli cntC, lli cntM, bool flag) {
  if (cntC < 0 || cntM < 0)
    return 0;
  if (dp[cntC][cntM][flag] > -0.5)
    return dp[cntC][cntM][flag];
  if (flag == 0 && cntC == 0)
    return dp[cntC][cntM][flag] = (cntM + 1) * p;
  if (flag == 1 && cntM == 0)
    return dp[cntC][cntM][flag] = (cntC + 1) * p;
  double &ret = dp[cntC][cntM][flag] = 0;
  if (flag == 0) {
    if (cntC > nv)
      ret += c * (getAns(cntC - nv, cntM + nv / 2, 0) +
                  getAns(cntC - nv, cntM + nv / 2, 1));
    else
      ret += c * ((cntC + cntM + 2) * p + getAns(0, cntM + cntC / 2, 1));
    ret += (cntC + cntM + 1) * p;
  } else {
    if (cntM > nv)
      ret += m * (getAns(cntC + nv / 2, cntM - nv, 0) +
                  getAns(cntC + nv / 2, cntM - nv, 1));
    else
      ret += m * ((cntC + cntM + 2) * p + getAns(cntC + cntM / 2, 0, 0));
    ret += (cntC + cntM + 1) * p;
  }
  return ret;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    cin >> c >> m >> p >> v;
    nc = c * 10000;
    nm = m * 10000;
    nv = v * 10000;
    mx = (nc + nv - 1) / nv + (nc + nm + nv - 1) / nv + 1;
    mc = (nc + nm + nv - 1) / nv;
    for (int i = 0; i <= mx; i++)
      for (int j = 0; j <= mx; j++)
        dp[i][j][0] = dp[i][j][1] = -1;
    cout << setprecision(15) << max(getAns(nc, nm, 0), getAns(nc, nm, 1))
         << endl;
  }
  return 0;
}