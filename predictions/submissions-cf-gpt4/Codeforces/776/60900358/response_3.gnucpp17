#include <vector>
#include <iostream>

constexpr int N = 1e5 + 5;
int n, vis[2 * N], ord[2 * N], ordn, cnt, cmp[2 * N], val[N];
std::vector<int> adj[2 * N], adjt[2 * N];
int m, st[N], sw[N][2];

constexpr int v(int x) { return 2 * x; }
constexpr int nv(int x) { return 2 * x + 1; }

void add(int a, int b) {
  adj[a ^ 1].push_back(b);
  adj[b ^ 1].push_back(a);
  adjt[b].push_back(a ^ 1);
  adjt[a].push_back(b ^ 1);
}

void dfs(int x) {
  vis[x] = 1;
  for (auto v : adj[x])
    if (!vis[v])
      dfs(v);
  ord[ordn++] = x;
}

void dfst(int x) {
  cmp[x] = cnt, vis[x] = 0;
  for (auto v : adjt[x])
    if (vis[v])
      dfst(v);
}

bool run2sat() {
  for (int i = 1; i <= m; i++) {
    if (!vis[v(i)])
      dfs(v(i));
    if (!vis[nv(i)])
      dfs(nv(i));
  }
  for (int i = ordn - 1; i >= 0; i--)
    if (vis[ord[i]])
      cnt++, dfst(ord[i]);
  for (int i = 1; i <= m; i++) {
    if (cmp[v(i)] == cmp[nv(i)])
      return false;
    val[i] = cmp[v(i)] > cmp[nv(i)];
  }
  return true;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cin >> n >> m;
  for (int i = 1; i <= n; i++)
    std::cin >> st[i];
  int q, a;
  for (int i = 1; i <= m; i++) {
    std::cin >> q;
    while (q--) {
      std::cin >> a;
      sw[a][0] ? sw[a][1] = i : sw[a][0] = i;
    }
  }

  for (int i = 1; i <= n; i++) {
    int p = sw[i][0];
    int q = sw[i][1];
    if (!st[i])
      add(v(p), v(q)), add(nv(p), nv(q));
    else
      add(nv(p), v(q)), add(v(p), nv(q));
  }
  std::cout << (run2sat() ? "YES\n" : "NO\n");
}