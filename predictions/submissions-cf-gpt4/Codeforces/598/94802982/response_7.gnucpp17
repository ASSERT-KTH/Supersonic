#include <algorithm>
#include <iostream>
#include <cstring>
using namespace std;
typedef long long lld;
const int nmmx = 31, kmx = 51;
lld dp[nmmx][nmmx][kmx];
lld solve(int n, int m, int k) {
  lld &ans = dp[n][m][k];
  if (ans != -1)
    return ans;
  if (n * m == k || !k)
    return ans = 0;
  ans = 1e18;
  for (int i = 1, j; i + i <= n; ++i) {
    for (j = 0; j <= k; ++j) {
      if(j>i*m) break;
      ans = min(ans, m * m + solve(i, m, j) + solve(n - i, m, k - j));
    }
  }
  for (int i = 1, j; i + i <= m; ++i) {
    for (j = 0; j <= k; ++j) {
      if(j>i*n) break;
      ans = min(ans, n * n + solve(n, i, j) + solve(n, m - i, k - j));
    }
  }
  return ans;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  memset(dp, -1, sizeof(dp));
  solve(30, 30, 50);
  int t;
  cin >> t;
  while (t--) {
    int n, m, k;
    cin >> n >> m >> k;
    cout << solve(n, m, k) << '\n';
  }
  return 0;
}