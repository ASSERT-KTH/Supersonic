#include <algorithm>
#include <bitset>
#include <iostream>
#include <vector>
using namespace std;

constexpr int MAXN = 1005;
constexpr int MAXV = 1025;

int dp[MAXN][MAXV];
vector<int> a(MAXN), b(MAXN);

int recurse(int index, int OR, const int N, const int M) {
  if (index == N) return OR;
  if (dp[index][OR] != -1) return dp[index][OR];
  int answer = numeric_limits<int>::max();
  for (int i = 0; i < M; ++i)
    answer = min(answer, recurse(index + 1, OR | (a[index] & b[i]), N, M));
  return dp[index][OR] = answer;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < n; ++i) cin >> a[i];
  for (int i = 0; i < m; ++i) cin >> b[i];
  fill(&dp[0][0], &dp[0][0] + sizeof(dp) / sizeof(int), -1);
  cout << recurse(0, 0, n, m) << '\n';
  return 0;
}