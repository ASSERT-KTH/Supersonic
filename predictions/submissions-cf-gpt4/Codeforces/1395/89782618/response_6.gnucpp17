#include <algorithm>
#include <bitset>
#include <iostream>
#include <limits>
#include <vector>
using namespace std;

constexpr int MAX = 1 << 9;

int dp[1001][MAX];

int recurse(const vector<int> &a, const vector<int> &b, int index = 0, int OR = 0) {
  if (index == a.size()) {
    return OR;
  }
  if (dp[index][OR] != -1)
    return dp[index][OR];
  int answer = numeric_limits<int>::max();
  for (int i : b) {
    int ret = recurse(a, b, index + 1, OR | (a[index] & i));
    answer = min(answer, ret);
  }
  return dp[index][OR] = answer;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  int n, m;
  cin >> n >> m;
  vector<int> a(n), b(m);
  for (int& i : a)
    cin >> i;
  for (int& i : b)
    cin >> i;
  fill(&dp[0][0], &dp[0][0] + sizeof(dp) / sizeof(int), -1);
  cout << recurse(a, b) << '\n';
  return 0;
}