#include <iostream>
#include <unordered_map>
#include <random>
#include <chrono>
#include <vector>

using namespace std;
typedef unsigned long long ull;
typedef long long ll;

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

const int mxN = 1e6;
ull val[mxN], adj[mxN];
ll ans;

void solve() {
  unordered_map<ull, int> mp;
  for (int i = 0; i < mxN; ++i)
    ans += mp[adj[i]]++;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);

  int n, m;
  cin >> n >> m;

  for (int i = 0; i < n; ++i)
    val[i] = rng();

  vector<pair<int, int>> edges(m);
  for (int i = 0; i < m; ++i) {
    int u, v;
    cin >> u >> v;
    --u, --v;
    edges[i] = {u, v};
  }

  for (const auto& edge : edges) {
    adj[edge.first] += val[edge.second];
    adj[edge.second] += val[edge.first];
  }

  solve();
  for (int i = 0; i < n; ++i)
    adj[i] += val[i];

  solve();
  cout << ans;
  return 0;
}