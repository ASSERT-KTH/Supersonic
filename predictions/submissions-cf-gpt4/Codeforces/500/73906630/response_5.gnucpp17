#include <iostream>
#include <vector>
#include <algorithm>
#define MAX_N 400

int parent[MAX_N];
int rank[MAX_N];
int v[MAX_N];
std::vector<int> clusters[MAX_N];

int find(int i) {
  if (parent[i] != i)
    parent[i] = find(parent[i]);
  return parent[i];
}

void make_union(int i, int j) {
  int ri = find(i);
  int rj = find(j);
  if (ri != rj) {
    if (rank[ri] < rank[rj])
      parent[ri] = rj;
    else if (rank[ri] > rank[rj])
      parent[rj] = ri;
    else {
      parent[ri] = rj;
      rank[rj]++;
    }
  }
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);

  int n;
  std::cin >> n;

  for (int i = 0; i < n; i++) {
    parent[i] = i;
    rank[i] = 0;
    std::cin >> v[i];
  }

  for (int i = 0; i < n; i++) {
    std::string s;
    std::cin >> s;
    for (int j = 0; j < n; j++) {
      if (s[j] == '1') {
        make_union(i, j);
      }
    }
  }

  for (int i = 0; i < n; i++) {
    clusters[find(i)].push_back(v[i]);
  }

  for (int i = 0; i < n; i++) {
    if (!clusters[i].empty()) {
      std::sort(clusters[i].begin(), clusters[i].end());
    }
  }

  for (int i = 0; i < n; i++) {
    std::cout << clusters[find(i)].back() << ' ';
    clusters[find(i)].pop_back();
  }

  return 0;
}