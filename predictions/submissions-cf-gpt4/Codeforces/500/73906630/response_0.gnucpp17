#include <vector>
#include <algorithm>
#include <iostream>

#define int long long

const int N = 400;
int sz[N];
int a[N];
std::vector<int> groups[N];
int root(int i) {
    return a[i] == i ? i : (a[i] = root(a[i]));
}

void merge(int x, int y) {
    int u = root(x);
    int v = root(y);
    if (u != v) {
        if (sz[u] < sz[v]) std::swap(u, v);
        a[v] = u;
        sz[u] += sz[v];
    }
}

int32_t main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);

    int n;
    std::cin >> n;

    for (int i = 1; i <= n; i++) {
        a[i] = i;
        sz[i] = 1;
    }

    std::vector<int> v(n + 1);
    for (int i = 1; i <= n; i++) {
        std::cin >> v[i];
    }

    for (int i = 0; i < n; i++) {
        std::string s;
        std::cin >> s;
        for (int j = 0; j < n; j++) {
            if (s[j] == '1') merge(i + 1, j + 1);
        }
    }

    for (int i = 1; i <= n; i++) {
        groups[root(i)].push_back(v[i]);
    }

    for (int i = 1; i <= n; i++) {
        if (!groups[i].empty()) {
            std::sort(groups[i].begin(), groups[i].end());
        }
    }

    for (int i = 1, j; i <= n; i++) {
        j = root(i);
        std::cout << groups[j].front() << ' ';
        groups[j].erase(groups[j].begin());
    }

    std::cout << '\n';

    return 0;
}