#include <iostream>
#include <vector>
#include <algorithm>
#define int long long
const int N = 400;
int parent[N], size[N], order[N], cnt[N];
std::vector<int> v_e[N];

int root(int i) {
  while (i != parent[i]) {
    parent[i] = parent[parent[i]];
    i = parent[i];
  }
  return i;
}

void merge(int x, int y) {
  int u = root(x);
  int v = root(y);
  if (size[u] < size[v]) std::swap(u, v);
  parent[v] = u;
  size[u] += size[v];
}

int32_t main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);
  
  int n;
  std::cin >> n;
  
  for (int i = 1; i <= n; i++) {
    parent[i] = i;
    size[i] = 1;
    std::cin >> order[i];
  }
  
  std::string s;
  for (int i = 1; i <= n; i++) {
    std::cin >> s;
    for (int j = 1; j <= n; j++)
      if (s[j-1] == '1' && root(i) != root(j)) merge(i, j);
  }
  
  for (int i = 1; i <= n; i++) v_e[root(i)].push_back(order[i]);
  for (int i = 1; i <= n; i++) std::sort(v_e[i].begin(), v_e[i].end());
  
  for (int i = 1; i <= n; i++)
    std::cout << v_e[root(i)][cnt[root(i)]++] << " ";
  std::cout << '\n';

  return 0;
}