```c++
#include <iostream>
#include <vector>
#include <algorithm>
#define int long long

const int N = 400;
int sz[N];
int a[N];
std::vector<int> v_e[N];
int cnt[N];

void initialize() {
  for (int i = 1; i <= N - 1; i++) {
    a[i] = i;
    sz[i] = 1;
  }
}

int root(int i) {
  while (a[i] != i) {
    a[i] = a[a[i]];
    i = a[i];
  }
  return i;
}

void merge(int x, int y) {
  int u = root(x);
  int v = root(y);
  if (sz[u] < sz[v]) {
    std::swap(u, v);
  }
  a[v] = a[u];
  sz[u] += sz[v];
}

int32_t main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);

  int n;
  std::cin >> n;
  initialize();
  int v[n + 1];
  for (int i = 1; i <= n; i++) {
    std::cin >> v[i];
  }
  std::string s[n + 1];
  for (int i = 0; i < n; i++) {
    std::cin >> s[i];
    for (int j = 0; j < n; j++) {
      if (s[i][j] == '1') {
        if (root(i + 1) != root(j + 1)) {
          merge(i + 1, j + 1);
        }
      }
    }
  }
  for (int i = 1; i <= n; i++) {
    v_e[root(i)].push_back(v[i]);
  }
  for (int i = 1; i <= n; i++) {
    sort(v_e[i].begin(), v_e[i].end());
  }
  for (int i = 1; i <= n; i++) {
    int x = root(i);
    std::cout << v_e[x][cnt[x]++] << " ";
  }
  std::cout << "\n";
  return 0;
}
```