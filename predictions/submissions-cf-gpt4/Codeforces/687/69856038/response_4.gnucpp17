#include <algorithm>
#include <iostream>
using namespace std;
const int N = 1000, M = N * (N - 1) / 2;
int dsu[N * 2];
int find(int i) { return dsu[i] < 0 ? i : (dsu[i] = find(dsu[i])); }
bool join(int i, int j) {
  if ((i = find(i)) == (j = find(j)))
    return false;
  if (dsu[i] > dsu[j])
    swap(i, j);
  dsu[i] += dsu[j];
  dsu[j] = i;
  return true;
}
struct edge { int i, j, w; } es[M];
bool cmp(const edge &a, const edge &b) { return a.w > b.w; }
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int n, m, q;
  cin >> n >> m >> q;
  for (int h = 0; h < m; h++)
    cin >> es[h].i >> es[h].j >> es[h].w, --es[h].i, --es[h].j;
  sort(es, es + m, cmp);
  while (q-- > 0) {
    int l, r;
    cin >> l >> r, --l, --r;
    fill_n(dsu, n * 2, -1);
    int w = -1;
    for (int h = l; h <= r; h++) {
      int i = es[h].i;
      int j = es[h].j;
      int i0 = i << 1, i1 = i0 | 1;
      int j0 = j << 1, j1 = j0 | 1;
      if (join(i0, j1) && !join(i1, j0)) {
        w = es[h].w;
        break;
      }
    }
    cout << w << "\n";
  }
}