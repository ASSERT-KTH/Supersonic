#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int N = 1000;

struct edge {
    int from, to, weight, index;
};

int dsu[N * 2];

int find_set(int v) {
    return dsu[v] < 0 ? v : (dsu[v] = find_set(dsu[v]));
}

void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b) {
        if (dsu[a] > dsu[b])
            swap(a, b);
        dsu[a] += dsu[b];
        dsu[b] = a;
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int n, m, q;
    cin >> n >> m >> q;

    vector<edge> edges(m);
    for (int i = 0; i < m; ++i) {
        cin >> edges[i].from >> edges[i].to >> edges[i].weight;
        --edges[i].from; --edges[i].to;
        edges[i].index = i;
    }

    sort(edges.begin(), edges.end(), [](const edge& a, const edge& b) {
        return a.weight > b.weight;
    });

    for (int i = 0; i < q; ++i) {
        int l, r;
        cin >> l >> r;
        --l; --r;

        fill(dsu, dsu + 2 * n, -1);

        int ans = -1;
        for (const auto& e : edges) {
            if (e.index >= l && e.index <= r) {
                if (find_set(e.from << 1) != find_set(e.to << 1 | 1) ||
                    find_set(e.from << 1 | 1) != find_set(e.to << 1)) {
                    union_sets(e.from << 1, e.to << 1 | 1);
                    union_sets(e.from << 1 | 1, e.to << 1);
                    ans = e.weight;
                    break;
                }
            }
        }

        cout << ans << '\n';
    }

    return 0;
}