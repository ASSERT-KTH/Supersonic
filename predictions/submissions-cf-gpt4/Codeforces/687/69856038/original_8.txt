```cpp
#include <algorithm>
#include <iostream>
using namespace std;
const int N = 1000, M = N * (N - 1) / 2;
int dsu[N * 2];
int find(int i) { return dsu[i] < 0 ? i : (dsu[i] = find(dsu[i])); }
bool join(int i, int j) {
  i = find(i);
  j = find(j);
  if (i == j)
    return false;
  if (dsu[i] > dsu[j])
    dsu[i] = j;
  else {
    if (dsu[i] == dsu[j])
      dsu[i]--;
    dsu[j] = i;
  }
  return true;
}
struct edge {
  int i, j, w, h;
} e[M];
int main() {
  int n, m, q;
  scanf("%d%d%d", &n, &m, &q);
  for (int h = 0; h < m; h++) {
    scanf("%d%d%d", &e[h].i, &e[h].j, &e[h].w), e[h].i--, e[h].j--;
    e[h].h = h;
  }
  sort(e, e + m, [](edge a, edge b) { return a.w > b.w; });
  while (q-- > 0) {
    int l, r;
    scanf("%d%d", &l, &r), l--, r--;
    fill_n(dsu, n * 2, -1);
    int w = -1;
    for (int h = 0; h < m; h++) {
      if (l <= e[h].h && e[h].h <= r) {
        int i = e[h].i;
        int j = e[h].j;
        int i0 = i << 1, i1 = i0 | 1;
        int j0 = j << 1, j1 = j0 | 1;
        if (join(i0, j1) && !join(i1, j0)) {
          w = e[h].w;
          break;
        }
      }
    }
    printf("%d\n", w);
  }
}
```