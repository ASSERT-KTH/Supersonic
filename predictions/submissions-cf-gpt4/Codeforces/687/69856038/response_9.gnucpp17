#include <algorithm>
#include <iostream>
#include <vector>
#include <utility>
using namespace std;

const int N = 1000, M = N * (N - 1) / 2;
int dsu[N * 2];

int find(int i) { return dsu[i] < 0 ? i : (dsu[i] = find(dsu[i])); }

inline bool join(int i, int j) {
  if ((i = find(i)) == (j = find(j))) return false;
  if (dsu[i] > dsu[j])
    dsu[i] = j;
  else {
    if (dsu[i] == dsu[j]) dsu[i]--;
    dsu[j] = i;
  }
  return true;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n, m, q;
  cin >> n >> m >> q;

  vector<pair<int, pair<int, int>>> edge_list(m);
  vector<int> hh(m);

  for (int h = 0; h < m; ++h) {
    cin >> edge_list[h].second.first >> edge_list[h].second.second >> edge_list[h].first;
    --edge_list[h].second.first;
    --edge_list[h].second.second;
    hh[h] = h;
  }

  sort(begin(edge_list), end(edge_list), greater<pair<int, pair<int, int>>>());

  while (q-- > 0) {
    int l, r;
    cin >> l >> r;
    --l; --r;
    fill(begin(dsu), begin(dsu) + n * 2, -1);
    int w = -1;
    for (int h = 0; h < m; ++h) {
      if (l <= h && h <= r) {
        int i = edge_list[h].second.first, j = edge_list[h].second.second;
        int i0 = i << 1, i1 = i0 | 1, j0 = j << 1, j1 = j0 | 1;
        if (join(i0, j1) && !join(i1, j0)) {
          w = edge_list[h].first;
          break;
        }
      }
    }
    cout << w << '\n';
  }
  return 0;
}