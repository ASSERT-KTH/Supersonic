#include <bits/stdc++.h>
using namespace std;
#define int long long
typedef vector<int> vi;
typedef pair<int, int> pi;
#define mod 1000000007
#define fs first
#define sc second
#define pb push_back
#define all(c) (c).begin(), (c).end()
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)
const int MAXN = 100100;
vector<vector<int>> adj;
int n, a[MAXN], q;
struct dat {
  pi mx;
  pi mn;
} t[4 * MAXN];
dat zero;
dat combine(dat x, dat y) {
  dat res;
  if (a[x.mx.fs] > a[y.mx.fs]) {
    res.mx.fs = x.mx.fs;
    if (a[x.mx.sc] > a[y.mx.fs]) {
      res.mx.sc = x.mx.sc;
    } else {
      res.mx.sc = y.mx.fs;
    }
  } else {
    res.mx.fs = y.mx.fs;
    if (a[x.mx.fs] > a[y.mx.sc]) {
      res.mx.sc = x.mx.fs;
    } else {
      res.mx.sc = y.mx.sc;
    }
  }
  if (a[x.mn.fs] < a[y.mn.fs]) {
    res.mn.fs = x.mn.fs;
    if (a[x.mn.sc] < a[y.mn.fs]) {
      res.mn.sc = x.mn.sc;
    } else {
      res.mn.sc = y.mn.fs;
    }
  } else {
    res.mn.fs = y.mn.fs;
    if (a[x.mn.fs] < a[y.mn.sc]) {
      res.mn.sc = x.mn.fs;
    } else {
      res.mn.sc = y.mn.sc;
    }
  }
  return res;
}
void build(int v, int tl, int tr) {
  if (tl == tr) {
    t[v].mn = {tl, n + 1};
    t[v].mx = {tl, n + 2};
  } else {
    int tm = (tl + tr) >> 1;
    build(v << 1, tl, tm);
    build(v << 1 | 1, tm + 1, tr);
    t[v] = combine(t[v << 1], t[v << 1 | 1]);
  }
}
dat get(int v, int tl, int tr, int l, int r) {
  if (l > r)
    return zero;
  if (l == tl && r == tr)
    return t[v];
  int tm = (tl + tr) >> 1;
  return combine(get(v << 1, tl, tm, l, min(r, tm)),
                 get(v << 1 | 1, tm + 1, tr, max(l, tm + 1), r));
}
signed main() {
  IOS;
  cin >> n >> q;
  zero.mx = {n + 2, n + 2};
  zero.mn = {n + 1, n + 1};
  adj.resize(n + 1);
  for (int i = 1; i < n; i++) {
    int x;
    cin >> x;
    adj[x - 1].pb(i);
  }
  a[n + 1] = mod;
  a[n + 2] = 0;
  for (int i = 0; i < n; i++) {
    a[i] = i;
  }
  build(1, 0, n - 1);
  while (q--) {
    int l, r;
    cin >> l >> r;
    l--;
    r--;
    if (r - l < 2) {
      int ans = r;
      cout << ans + 1 << " " << l << endl;
      continue;
    }
    dat cur = get(1, 0, n - 1, l, r);
    if (l > r) {
      cout << cur.mn.fs + 1 << " " << l << endl;
    } else {
      cout << cur.mx.fs + 1 << " " << r << endl;
    }
  }
  return 0;
}