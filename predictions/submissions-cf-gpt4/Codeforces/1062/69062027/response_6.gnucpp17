#include <bits/stdc++.h>
using namespace std;
#define int long long

const int MAXN = 100100;
int n, a[MAXN];
vector<vector<int>> adj(MAXN);

struct dat {
  pair<int, int> mx;
  pair<int, int> mn;
} t[4 * MAXN];

dat zero, t[4 * MAXN];

dat combine(dat x, dat y) {
  dat res;
  res.mx = max(x.mx, y.mx);
  res.mn = min(x.mn, y.mn);
  return res;
}

void build(int v, int tl, int tr) {
  if (tl == tr) {
    t[v].mn = {a[tl], tl};
    t[v].mx = {a[tl], tl};
  } else {
    int tm = (tl + tr) / 2;
    build(2 * v, tl, tm);
    build(2 * v + 1, tm + 1, tr);
    t[v] = combine(t[2 * v], t[2 * v + 1]);
  }
}

dat get(int v, int tl, int tr, int l, int r) {
  if (l > r)
    return zero;
  if (l == tl && r == tr)
    return t[v];
  int tm = (tl + tr) / 2;
  return combine(get(v * 2, tl, tm, l, min(r, tm)),
                 get(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r));
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  
  int q;
  cin >> n >> q;
  zero.mx = {0, n + 1};
  zero.mn = {LONG_MAX, n + 1};
  
  for (int i = 1; i < n; i++) {
    int x;
    cin >> x;
    adj[x - 1].push_back(i);
  }
  
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }

  build(1, 0, n - 1);

  while (q--) {
    int l, r;
    cin >> l >> r;
    l--;
    r--;
    dat cur = get(1, 0, n - 1, l, r);
    cout << cur.mn.second + 1 << " " << cur.mx.first << endl;
  }

  return 0;
}