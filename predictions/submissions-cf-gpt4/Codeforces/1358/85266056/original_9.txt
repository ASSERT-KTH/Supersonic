```cpp
#include <iostream>
#include <vector>
using namespace std;
const long long MOD = 1e9 + 7;

inline long long getSum(long long n) {
    return n * (n + 1) / 2;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    long long n, x;
    cin >> n >> x;
    vector<long long> v(n);
    for (long long &x : v)
        cin >> x;
    v.insert(v.end(), v.begin(), v.end());
    n *= 2;
    vector<long long> u(n), z(n);
    u[0] = v[0];
    z[0] = getSum(v[0]);
    for (long long i = 1; i < n; i++) {
        u[i] = u[i - 1] + v[i];
        z[i] = z[i - 1] + getSum(v[i]);
    }
    long long ans = 0;
    for (long long i = 0, j = 0; i < n; i++) {
        if (u[i] < x)
            continue;
        while (u[i] - u[j] >= x)
            j++;
        long long total = z[i] - (j ? z[j - 1] : 0);
        if (j)
            total += getSum(u[j - 1] + x - u[i]);
        ans = max(ans, total);
    }
    cout << ans;
    return 0;
}
```