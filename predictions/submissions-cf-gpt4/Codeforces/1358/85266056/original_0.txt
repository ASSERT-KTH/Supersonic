```cpp
#include <iostream>
#include <vector>
using namespace std;
const long long MOD = 1e9 + 7;

inline long long getSum(long long n) { 
    return n * (n + 1) / 2; 
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    long long n, x;
    cin >> n >> x;
    vector<long long> v(n), u(2*n), z(2*n);
    for (long long &i : v)
        cin >> i;
    for (long long i = 0; i < n; i++) {
        u[i + n] = u[i] = v[i];
        z[i + n] = z[i] = getSum(v[i]);
    }
    for (long long i = 1; i < 2 * n; i++) {
        u[i] += u[i - 1];
        z[i] += z[i - 1];
    }
    long long  ans = 0;
    for (long long i = 0, j = 0; i < n; i++) {
        while (j + 1 < 2 * n && u[j + 1] - (i ? u[i - 1] : 0) < x)
            j++;
        long long y = u[j] - (i ? u[i - 1] : 0), s = z[j] - (i ? z[i - 1] : 0);
        ans = max(ans, s - getSum(y - x));
        if (y > x)
            ans = max(ans, s - getSum(y - x - 1));
    }
    cout << ans;
    return 0;
}
```