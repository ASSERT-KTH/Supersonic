```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
const long long MOD = 1e9 + 7;
inline long long getSum(long long n) { return n * (n + 1) / 2; }
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long n, x;
  cin >> n >> x;
  vector<long long> v(2 * n);
  for (long long i = 0; i < n; i++) {
    cin >> v[i];
    v[i + n] = v[i];
  }
  vector<long long> prefix_sum(2 * n + 1, 0);
  vector<long long> prefix_sum_sq(2 * n + 1, 0);
  for (long long i = 0; i < 2 * n; i++) {
    prefix_sum[i + 1] = prefix_sum[i] + v[i];
    prefix_sum_sq[i + 1] = prefix_sum_sq[i] + getSum(v[i]);
  }
  long long ans = 0;
  for (long long i = 0; i < n; i++) {
    long long right = lower_bound(prefix_sum.begin(), prefix_sum.end(), prefix_sum[2 * n - i] - x) - prefix_sum.begin();
    long long temp = prefix_sum_sq[2 * n - i] - prefix_sum_sq[right];
    if (right != 0) {
      long long diff = prefix_sum[2 * n - i] - prefix_sum[right] - x;
      temp += getSum(v[right - 1]) - getSum(diff);
    }
    ans = max(ans, temp);
  }
  cout << ans;
  return 0;
}
```