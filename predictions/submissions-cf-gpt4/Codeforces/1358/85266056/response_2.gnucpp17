#include <iostream>
#include <vector>
using namespace std;
const long long MOD = 1e9 + 7;

inline long long getSum(long long n) { return n * (n + 1) / 2; }

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long n, x;
  cin >> n >> x;
  vector<long long> v(2*n);
  for (long long i = 0; i < n; i++) {
    cin >> v[i];
    v[i + n] = v[i];
  }
  vector<long long> u(v), z(2*n);
  for (long long i = 1; i < 2*n; i++) {
    u[i] += u[i - 1];
    z[i] = v[i] * (v[i] + 1) / 2;
    z[i] += z[i - 1];
  }
  long long ans = 0;
  int s = 0, e = 0;
  long long days = 0, sums = 0;
  while (e < 2*n) {
    days += v[e];
    sums += getSum(v[e]);
    e++;
    while (days - v[s] >= x) {
      days -= v[s];
      sums -= getSum(v[s]);
      s++;
    }
    long long diff = max(days - x, 0LL);
    ans = max(ans, sums - getSum(diff));
  }
  cout << ans;
  return 0;
}