#include <iostream>
#include <vector>
using namespace std;
const long long MOD = 1e9 + 7;
inline long long getSum(long long n) { return ((n * (n + 1)) >> 1); }
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long n, x;
  cin >> n >> x;
  vector<long long> v(n*2);
  for (long long i = 0; i < n; ++i){
    cin >> v[i];
    v[i+n] = v[i];
  }
  vector<long long> prefixSum(n*2+1, 0), prefixSums(n*2+1, 0);
  for (int i = 1; i <= n*2; ++i) {
    prefixSum[i] = prefixSum[i-1] + v[i-1];
    prefixSums[i] = prefixSums[i-1] + getSum(v[i-1]);
  }
  long long ans = 0;
  for(long long i = n*2; i > 0; --i) {
    long long j = lower_bound(prefixSum.begin(), prefixSum.end(), prefixSum[i] - x) - prefixSum.begin();
    long long total = prefixSums[i] - prefixSums[j] + getSum(prefixSum[j] + x - prefixSum[i]);
    ans = max(ans, total);
  }
  cout << ans;
  return 0;
}