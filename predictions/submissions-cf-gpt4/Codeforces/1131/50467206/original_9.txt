```
#include <vector>
#include <iostream>
#include <queue>
#define ll long long

const ll INF = 1e18;
const int MAX = 1e7;
ll cost[MAX + 1], dp[MAX + 1];
std::deque<int> dq;

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);

  int N, M;
  std::cin >> N >> M;
  std::vector<std::vector<int>> heights(N + 1), costs(N + 1);

  for (int i = 1; i <= N; ++i) {
    int K;
    std::cin >> K;
    heights[i].resize(K);
    costs[i].resize(K);
    for (int &h : heights[i]) std::cin >> h;
    for (int &c : costs[i]) std::cin >> c;
  }

  int Q, curr = 0;
  std::cin >> Q;
  while (Q--) {
    int id, mult;
    std::cin >> id >> mult;
    for (size_t i = 0; i < heights[id].size(); ++i) {
      cost[++curr] = (ll)mult * costs[id][i];
      dp[curr] = INF;
    }
  }

  dp[0] = 0;
  dq.push_back(0);

  for (int i = 1; i <= M; ++i) {
    if (!dq.empty() && dq.front() < i - heights[i]) dq.pop_front();
    if (!dq.empty()) dp[i] = dp[dq.front()] + cost[i];
    while (!dq.empty() && dp[dq.back()] + cost[dq.back()] >= dp[i]) dq.pop_back();
    dq.push_back(i);
  }

  std::cout << dp[M] << '\n';
  return 0;
}
```