```cpp
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
const int inf_int = 1e9 + 5;
const long long inf_ll = 1e18 + 5;
const int NMax = 1e7 + 5;
int height[NMax];
long long cost[NMax], dp[NMax];
int main() {
  ios_base::sync_with_stdio(false); cin.tie(nullptr);
  int N, M;
  cin >> N >> M;
  vector<vector<int>> heightsOfBlock(N + 1), costsOfBlock(N + 1);
  for (int i = 1; i <= N; ++i) {
    int K;
    cin >> K;
    heightsOfBlock[i].resize(K);
    costsOfBlock[i].resize(K);
    for (int j = 0; j < K; ++j) {
      cin >> heightsOfBlock[i][j];
    }
    for (int j = 0; j < K; ++j) {
      cin >> costsOfBlock[i][j];
    }
  }
  int Q, curr = 0;
  cin >> Q;
  for (int i = 1; i <= Q; ++i) {
    int id, mult;
    cin >> id >> mult;
    for (int j = 0; j < heightsOfBlock[id].size(); ++j) {
      height[++curr] = heightsOfBlock[id][j];
      cost[curr] = (long long) mult * costsOfBlock[id][j];
    }
  }
  vector<pair<int, long long>> stackPushLeft, stackPushRight;
  for (int i = 1; i <= M; ++i) {
    long long minLeft = (i > 1) ? dp[i - 1] : inf_ll;
    while (!stackPushLeft.empty() &&
           i - height[i] + 1 <= stackPushLeft.back().first) {
      minLeft = min(minLeft, stackPushLeft.back().second);
      stackPushLeft.pop_back();
    }
    dp[i] = minLeft + cost[i];
    long long valHere = (i > 1) ? dp[i - 1] : inf_ll;
    minLeft = min(minLeft, valHere);
    stackPushLeft.push_back({i, minLeft});
    int idx = -1;
    while (!stackPushRight.empty() &&
           ((idx = stackPushRight.back().first) || true) &&
           idx + height[idx] - 1 < i) {
      stackPushRight.pop_back();
    }
    if (!stackPushRight.empty()) {
      long long dpPlusCost = stackPushRight.back().second;
      dp[i] = min(dp[i], dpPlusCost);
    }
    long long dpPlusCost = (i > 1) ? dp[i - 1] + cost[i] : inf_ll;
    if (!stackPushRight.empty()) {
      dpPlusCost = min(dpPlusCost, stackPushRight.back().second);
    }
    stackPushRight.push_back({i, dpPlusCost});
  }
  cout << dp[M] << '\n';
  return 0;
}
```