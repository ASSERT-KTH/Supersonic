#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int NMax = 1e7 + 5;

int height[NMax];
ll cost[NMax], dp[NMax];

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int N, M;
  cin >> N >> M;
  
  vector<vector<int>> heightsOfBlock(N + 1), costsOfBlock(N + 1);
  
  for (int i = 1; i <= N; ++i) {
    int K;
    cin >> K;
    heightsOfBlock[i].resize(K);
    costsOfBlock[i].resize(K);
    for (int& val : heightsOfBlock[i]) cin >> val;
    for (int& val : costsOfBlock[i]) cin >> val;
  }
  
  int Q, curr = 0;
  cin >> Q;
  
  for (int i = 1; i <= Q; ++i) {
    int id, mult;
    cin >> id >> mult;
    for (int j = 0; j < (int)heightsOfBlock[id].size(); ++j) {
      height[++curr] = heightsOfBlock[id][j];
      cost[curr] = 1LL * mult * costsOfBlock[id][j];
    }
  }
  
  deque<pair<int, ll>> stackPushLeft, stackPushRight;
  
  for (int i = 1; i <= M; ++i) {
    while (!stackPushLeft.empty() && i - height[i] + 1 <= stackPushLeft.back().first) {
      stackPushLeft.pop_back();
    }
    dp[i] = (stackPushLeft.empty() ? dp[i-1] : min(dp[i-1], stackPushLeft.back().second)) + cost[i];
    stackPushLeft.push_back({i, min(dp[i], dp[i-1])});

    while (!stackPushRight.empty() && stackPushRight.back().first + height[stackPushRight.back().first] - 1 < i) {
      stackPushRight.pop_back();
    }
    if (!stackPushRight.empty()) {
      dp[i] = min(dp[i], stackPushRight.back().second);
    }
    stackPushRight.push_back({i, min(dp[i-1] + cost[i], (stackPushRight.empty() ? dp[i] : stackPushRight.back().second))});
  }
  
  cout << dp[M] << '\n';
  return 0;
}