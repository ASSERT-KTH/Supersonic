```c++
#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <cmath>
#include <ctime>

using namespace std;

typedef long long ll;

const int M = 1e6 + 105;
int sieve_list[M], prime_list[M], prime_count;
vector<ll> prime_factors;

void sieve(int n) {
    for (int i = 2; i <= n; i++) {
        if (!sieve_list[i])
            prime_list[++prime_count] = i;
        for (int j = 1; i * prime_list[j] <= n; j++) {
            int k = i * prime_list[j];
            sieve_list[k] = 1;
            if (i % prime_list[j] == 0)
                break;
        }
    }
}

void prime_factorization(ll n) {
    prime_factors.clear();
    for (int i = 1; i <= prime_count && (ll)prime_list[i] * prime_list[i] <= n; i++)
        if (n % prime_list[i] == 0) {
            prime_factors.push_back(prime_list[i]);
            while (n % prime_list[i] == 0)
                n /= prime_list[i];
        }
    if (n > 1)
        prime_factors.push_back(n);
}

ll get_min_cost(vector<ll>& arr, ll div) {
    ll cost = 0;
    for (auto& num : arr) {
        if (num >= div) {
            ll temp = num % div;
            cost += min(temp, div - temp);
        } else
            cost += div - num;
    }
    return cost;
}

int main() {
    srand(time(0) + clock());
    sieve(1e6);

    int n;
    cin >> n;

    vector<ll> arr(n);
    for (auto& num : arr)
        cin >> num;

    random_shuffle(arr.begin(), arr.end());

    map<ll, int> factor_count;
    for (int i = 0; i < min(n, 1000); i++) {
        for (int j = -1; j <= 1; j++) {
            ll temp = arr[i] + j;
            if (temp > 1) {
                prime_factorization(temp);
                for (auto& factor : prime_factors)
                    factor_count[factor] = 1;
            }
        }
    }

    ll min_cost = n;
    for (auto& item : factor_count)
        min_cost = min(min_cost, get_min_cost(arr, item.first));

    cout << min_cost << "\n";

    return 0;
}
```