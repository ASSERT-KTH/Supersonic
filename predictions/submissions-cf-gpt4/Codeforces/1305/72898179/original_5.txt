```cpp
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;

const int M = 1e6 + 105;
vector<int> primes(M);
vector<int> isComposite(M);
void sieve(int n) {
    for(int i = 2; i <= n; ++i) {
        if(!isComposite[i])
            primes.push_back(i);
        for(int j = 0; j < primes.size() && i * primes[j] <= n; ++j) {
            isComposite[i * primes[j]] = 1;
            if(i % primes[j] == 0) break;
        }
    }
}

const int N = 2e5 + 5;
int n;
long long a[N];
vector<long long> factors;
void fen(long long n) {
    factors.clear();
    for(int i = 0; i < primes.size() && (long long)primes[i] * primes[i] <= n; ++i) {
        if(n % primes[i] == 0) {
            factors.push_back(primes[i]);
            while(n % primes[i] == 0)
                n /= primes[i];
        }
    }
    if(n > 1)
        factors.push_back(n);
}

map<long long, int> w;
long long ans;
void check(long long x) {
    long long s = 0;
    for(int i = 0; i < n; ++i) {
        if(a[i] >= x) {
            long long y = a[i] % x;
            s += min(y, x - y);
        } else
            s += x - a[i];
        if(s > ans)
            return;
    }
    ans = s;
}

int main() {
    srand(time(0) + clock());
    sieve(1e6);
    cin >> n;
    for(int i = 0; i < n; ++i)
        cin >> a[i];
    random_shuffle(a, a + n);
    for(int i = 0; i < min(n, 1000); ++i) {
        for(int j = -1; j <= 1; ++j) {
            long long x = a[i] + j;
            if(x > 1) {
                fen(x);
                for(int k = 0; k < factors.size(); ++k)
                    w[factors[k]] = 1;
            }
        }
    }
    ans = n;
    for(auto &it : w)
        check(it.first);
    cout << ans << "\n";
}
```