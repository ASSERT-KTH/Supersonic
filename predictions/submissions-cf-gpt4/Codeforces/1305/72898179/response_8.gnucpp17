#include <iostream>
#include <vector>
#include <algorithm>
#include <map>

using namespace std;

const int MAX_PRIME = 1e6;
vector<int> primes;
bool isPrime[MAX_PRIME + 5];

void sieve() {
    for (int i = 2; i <= MAX_PRIME; i++) {
        if (!isPrime[i]) {
            primes.push_back(i);
        }
        for (int j = 0; j < primes.size() && i * primes[j] <= MAX_PRIME; j++) {
            isPrime[i * primes[j]] = true;
            if (i % primes[j] == 0)
                break;
        }
    }
}

vector<long long> factors;
void factorize(long long n) {
    factors.clear();
    for (int i = 0; i < primes.size() && (long long)primes[i] * primes[i] <= n; i++)
        if (n % primes[i] == 0) {
            factors.push_back(primes[i]);
            while (n % primes[i] == 0)
                n /= primes[i];
        }
    if (n > 1)
        factors.push_back(n);
}

const int MAX_N = 2e5 + 5;
int n;
long long a[MAX_N];
map<long long, int> factorCount;
long long ans;

void check(long long x) {
    long long s = 0;
    for (int i = 1; i <= n; i++) {
        if (a[i] >= x) {
            long long y = a[i] % x;
            s += min(y, x - y);
        } else
            s += x - a[i];
        if (s > ans)
            return;
    }
    ans = s;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    sieve();
    cin >> n;
    for (int i = 1; i <= n; i++)
        cin >> a[i];
    random_shuffle(a + 1, a + n + 1);
    
    for (int i = 1; i <= min(n, 1000); i++)
        for (int j = -1; j <= 1; j++) {
            long long x = a[i] + j;
            if (x > 1) {
                factorize(x);
                for (auto &f : factors)
                    factorCount[f] = 1;
            }
        }
    
    ans = n;
    for (auto &p : factorCount)
        check(p.first);
    
    cout << ans << '\n';
    return 0;
}