```c++
#include <bits/stdc++.h>
using namespace std;

const int N = 250005;
pair<int,int> a[N];
int pos[N],dead[N],p[N];
int n,m,tot;

struct line{
    int l,r,sum;
}t[N*40];
int rt[N],cnt;

void build(int &x,int l,int r){
    x=++cnt;
    if(l==r) return;
    int mid=(l+r)>>1;
    build(t[x].l,l,mid);build(t[x].r,mid+1,r);
}

void change(int &x,int l,int r,int y,int L,int R,int k){
    t[++cnt]=t[y];t[cnt].sum+=k*(R-L+1);x=cnt;
    if(l==L&&r==R) return;
    int mid=(l+r)>>1;
    if(R<=mid) change(t[x].l,l,mid,t[y].l,L,R,k);
    else if(L>mid) change(t[x].r,mid+1,r,t[y].r,L,R,k);
    else{
        change(t[x].l,l,mid,t[y].l,L,mid,k);
        change(t[x].r,mid+1,r,t[y].r,mid+1,R,k);
    }
}

int query(int x,int l,int r,int L,int R){
    if(!t[x].sum||l==L&&r==R) return t[x].sum;
    int mid=(l+r)>>1;
    if(R<=mid) return query(t[x].l,l,mid,L,R);
    else if(L>mid) return query(t[x].r,mid+1,r,L,R);
    else return query(t[x].l,l,mid,L,mid)+query(t[x].r,mid+1,r,mid+1,R);
}

int find(int x){
    return x==p[x]?x:p[x]=find(p[x]);
}

int main(){
    cin>>n;
    build(rt[0],1,n+1);
    for(int i=1;i<=n;i++){
        cin>>a[i].first;
        if(a[i].first==1){
            p[++m]=m;
            pos[m]=i;
            change(rt[m],1,n+1,rt[m-1],i,i,1);
        }
        else if(a[i].first==2){
            cin>>a[i].second;a[i].second=find(a[i].second);
            change(rt[m],1,n+1,rt[m-1],pos[a[i].second]+1,i,-1);
            p[a[i].second]=m;
            pos[m]=i;
        }
        else if(a[i].first==3){
            cin>>a[i].second;a[i].second=find(a[i].second);
            change(rt[m],1,n+1,rt[m-1],pos[a[i].second]+1,i,1);
            p[a[i].second]=m;
            pos[m]=i;
        }
        else if(a[i].first==4){
            cin>>a[i].second;a[i].second=find(a[i].second);
            p[++m]=a[i].second;
            pos[m]=i;
            rt[m]=rt[m-1];
        }
        else{
            cin>>a[i].second;a[i].second=find(a[i].second);
            int x=find(a[i].first),y=a[i].second;
            if(query(rt[x],1,n+1,pos[y]+1,i)>0) p[x]=m,dead[x]=i;
            if(query(rt[y],1,n+1,pos[x]+1,i)>0) p[y]=m,dead[y]=i;
            rt[m]=rt[m-1];
        }
    }
    cout<<m<<endl;
    for(int i=1;i<=m;i++) cout<<dead[i]+1<<" ";
    return 0;
}
```