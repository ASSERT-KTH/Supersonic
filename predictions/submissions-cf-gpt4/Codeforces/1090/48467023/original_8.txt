```cpp
#include <iostream>
#include <vector>
#include <cassert>

const int INF = int(1e9);
const int N = 250 * 1000 + 555;
const int M = 30 * 1000 * 1000 + 555;

int n;
std::pair<int, std::pair<int, int>> qs[N];

struct Node {
  int sum, sval;
  Node* l;
  Node* r;
  Node() : sum(0), sval(-1), l(NULL), r(NULL) { }
  Node(int sum, int sval, Node* l, Node* r) : sum(sum), sval(sval), l(l), r(r) { }
};

Node nodes[M];
Node* getNode(int sum, int sval, Node* l, Node* r) {
  static int szn = 0;
  nodes[szn] = Node(sum, sval, l, r);
  return &nodes[szn++];
}

int getSum(Node* t, int len) {
  if (!t) return 0;
  if (t->sval != -1) return len * t->sval;
  return t->sum;
}

void update(Node* t, int l1, int l2) {
  t->sum = getSum(t->l, l1) + getSum(t->r, l2);
}

Node* setVal(Node* t, int l, int r, int lf, int rg, int val, int pushed = -1) {
  Node* nt = t ? getNode(t->sum, t->sval, t->l, t->r) : getNode(0, -1, NULL, NULL);
  if (pushed != -1) nt->sval = pushed;
  if (l == lf && r == rg) {
    nt->sval = val;
    return nt;
  }
  int mid = (l + r) >> 1;
  pushed = nt->sval;
  nt->sval = -1;
  if (lf < mid) nt->l = setVal(nt->l, l, mid, lf, std::min(mid, rg), val, pushed);
  if (rg > mid) nt->r = setVal(nt->r, mid, r, std::max(lf, mid), rg, val, pushed);
  update(nt, mid - l, r - mid);
  return nt;
}

int getPos(Node* t, int l, int r, int lf, int rg) {
  if (!t) return -1;
  if (t->sval != -1) return t->sval > 0 ? rg - 1 : -1;
  int mid = (l + r) >> 1;
  int ans = -1;
  if (rg > mid) ans = std::max(ans, getPos(t->r, mid, r, std::max(lf, mid), rg));
  if (lf < mid) ans = std::max(ans, getPos(t->l, l, mid, lf, std::min(mid, rg)));
  return ans;
}

int maxLen = -1;
bool sub(std::pair<int, Node*> &p, int pw) {
  pw = p.first - pw - 1;
  int pos = getPos(p.second, 0, maxLen, 0, pw + 1);
  if (pos < 0) return true;
  Node* nt = setVal(p.second, 0, maxLen, pos, pos + 1, 0);
  if (pos < pw) nt = setVal(nt, 0, maxLen, pos + 1, pw + 1, 1);
  p = {p.first, nt};
  return getSum(nt, maxLen) == 0;
}

int dead[N];
std::pair<int, std::pair<int, Node*>> ps[N];

void solve() {
  int cnt = 0;
  maxLen = n + 3;
  for (int i = 0; i < n; ++i) {
    int tp = qs[i].first;
    int a = qs[i].second.first - 1;
    int b = qs[i].second.second - 1;
    if (tp == 1) {
      int id = cnt++;
      dead[id] = -2;
      ps[id] = {0, {1, getNode(0, -1, NULL, NULL)}};
      ps[id].second.second = setVal(ps[id].second.second, 0, maxLen, 0, 1, 1);
    } else if (tp == 2) {
      if (dead[a] < 0) ps[a].first++;
    } else if (tp == 3) {
      if (dead[a] < 0) ps[a].second.second = setVal(ps[a].second.second, 0, maxLen, ps[a].second.first, ps[a].second.first + 1, 0);
      ps[a].second.first++;
    } else if (tp == 4) {
      int id = cnt++;
      dead[id] = -2;
      ps[id] = ps[a];
      if (dead[a] >= 0) dead[id] = i;
    } else {
      if (dead[a] < 0 && dead[b] < 0) {
        if (sub(ps[a].second, ps[b].first)) dead[a] = i;
        if (sub(ps[b].second, ps[a].first)) dead[b] = i;
      }
    }
  }
  std::cout << cnt << '\n';
  for (int i = 0; i < cnt; ++i) std::cout << dead[i] + 1 << " ";
  std::cout << '\n';
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);
  std::cin >> n;
  for (int i = 0; i < n; ++i) {
    std::cin >> qs[i].first;
    if (qs[i].first > 1) std::cin >> qs[i].second.first;
    if (qs[i].first == 5) std::cin >> qs[i].second.second;
  }
  solve();
  return 0;
}
```