```
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

using namespace std;

typedef pair<int, int> pii;
typedef vector<int> vi;

const int MAX = 3e5 + 5;
int n, arr[MAX], dp[MAX], p[MAX];
vi adj[MAX];
pii ans;

void dfs(int u) {
    dp[u] = arr[u];
    p[u] = u;
    for (int v : adj[u]) {
        dfs(v);
        if (dp[u] < dp[v] + arr[u]) {
            dp[u] = dp[v] + arr[u];
            p[u] = p[v];
        }
    }
    ans = max(ans, pii(dp[u], p[u]));
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> arr[i];
    }
    for (int i = 2; i <= n; ++i) {
        int x;
        cin >> x;
        adj[x].push_back(i);
    }
    dfs(1);
    cout << ans.first << '\n';
    vi nodes;
    for (int i = ans.second; i != p[i]; i = p[i]) {
        nodes.push_back(i);
    }
    nodes.push_back(p[ans.second]);
    reverse(nodes.begin(), nodes.end());
    for (int i : nodes) {
        cout << i << ' ';
    }
    return 0;
}
```