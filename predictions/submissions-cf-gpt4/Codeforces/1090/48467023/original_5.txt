```cpp
#include <iostream>
#include <vector>
#include <cassert>

#define MAX_N 250005
#define MAX_M 30000055

using namespace std;

struct Node {
    int sum, sval;
    Node *l, *r;
    Node(int sum = 0, int sval = -1, Node *l = nullptr, Node *r = nullptr) :
            sum(sum), sval(sval), l(l), r(r) {}
};

struct Query {
    int tp, a, b;
};

struct Package {
    int x;
    Node *t;
};

int n, m;
Query q[MAX_N];
Package p[MAX_N];
Node nodePool[MAX_M];
int dead[MAX_N], nodeCount;

inline int read() {
    if (!(cin >> n)) return 0;
    for (int i = 0; i < n; ++i) {
        cin >> q[i].tp >> q[i].a;
        if (q[i].tp > 1) --q[i].a;
        if (q[i].tp == 5) cin >> q[i].b, --q[i].b;
    }
    return 1;
}

inline Node* newNode(int sum = 0, int sval = -1, Node *l = nullptr, Node *r = nullptr) {
    assert(nodeCount < MAX_M);
    nodePool[nodeCount] = Node(sum, sval, l, r);
    return &nodePool[nodeCount++];
}

inline int getSum(Node *t, int len) {
    if (!t) return 0;
    if (t->sval != -1) return len * t->sval;
    return t->sum;
}

inline int push(Node *t) {
    int pushed = t->sval;
    t->sval = -1;
    return pushed;
}

void update(Node *t, int l1, int l2) {
    t->sum = getSum(t->l, l1) + getSum(t->r, l2);
}

Node* setVal(Node *t, int l, int r, int lf, int rg, int val, int pushed = -1) {
    Node *nt = t ? newNode(t->sum, t->sval, t->l, t->r) : newNode(0, -1, nullptr, nullptr);
    if (pushed != -1) nt->sval = pushed;
    if (l == lf && r == rg) {
        nt->sval = val;
        return nt;
    }
    int mid = (l + r) >> 1;
    pushed = push(nt);
    if (lf < mid) nt->l = setVal(nt->l, l, mid, lf, min(mid, rg), val, pushed);
    else if (pushed != -1) nt->l = nt->l ? newNode(nt->r->sum, pushed, nt->r->l, nt->r->r)
                                          : newNode(0, pushed, nullptr, nullptr);
    if (rg > mid) nt->r = setVal(nt->r, mid, r, max(lf, mid), rg, val, pushed);
    else if (pushed != -1) nt->r = nt->r ? newNode(nt->l->sum, pushed, nt->l->l, nt->l->r)
                                          : newNode(0, pushed, nullptr, nullptr);
    update(nt, mid - l, r - mid);
    return nt;
}

int getPos(Node *t, int l, int r, int lf, int rg) {
    if (!t) return -1;
    if (l == lf && r == rg) {
        if (l + 1 == r) return getSum(t, 1) ? l : -1;
        if (getSum(t, r - l) == 0) return -1;
    }
    if (t->sval != -1) return t->sval > 0 ? rg - 1 : -1;
    int mid = (l + r) >> 1, ans = -1;
    if (rg > mid && ans == -1) ans = max(ans, getPos(t->r, mid, r, max(lf, mid), rg));
    if (lf < mid && ans == -1) ans = max(ans, getPos(t->l, l, mid, lf, min(mid, rg)));
    return ans;
}

bool subtract(Package &p, int pw) {
    if (pw >= p.x) return true;
    pw = p.x - pw - 1;
    int pos = getPos(p.t, 0, n + 3, 0, pw + 1);
    if (pos < 0) return true;
    Node *nt = setVal(p.t, 0, n + 3, pos, pos + 1, 0);
    if (pos < pw) nt = setVal(nt, 0, n + 3, pos + 1, pw + 1, 1);
    p = {p.x, nt};
    return getSum(nt, n + 3) == 0;
}

inline void solve() {
    m = 0;
    for (int i = 0; i < n; ++i) {
        int tp = q[i].tp, a = q[i].a, b = q[i].b;
        if (tp == 1) {
            dead[m] = -2;
            p[m++] = {0, setVal(nullptr, 0, n + 3, 0, 1, 1)};
        } else if (tp == 2) {
            if (dead[a] < 0) ++p[a].x;
        } else if (tp == 3) {
            if (dead[a] < 0) {
                p[a].t = setVal(p[a].t, 0, n + 3, p[a].x, p[a].x + 1, 0);
                ++p[a].x;
            }
        } else if (tp == 4) {
            dead[m] = dead[a] >= 0 ? i : -2;
            p[m++] = p[a];
        } else {
            if (dead[a] < 0 && dead[b] < 0) {
                if (subtract(p[a], p[b].x)) dead[a] = i;
                if (subtract(p[b], p[a].x)) dead[b] = i;
            }
        }
    }
    cout << m << "\n";
    for (int i = 0; i < m; ++i) cout << dead[i] + 1 << " ";
    cout << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    if (read()) solve();
    return 0;
}
```