```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Node {
    Node* left;
    Node* right;
    int leftVal;
    int rightVal;
    int sum;
    int size;
    Node() : left(nullptr), right(nullptr), leftVal(0), rightVal(0), sum(0), size(0) {}
};

void insert(Node* root, int pos, int val) {
    root->sum += val;
    root->size++;
    if (root->size == 1) {
        root->leftVal = root->rightVal = pos;
        return;
    }
    if (!root->left || pos < root->left->rightVal) {
        if (!root->left) root->left = new Node();
        insert(root->left, pos, val);
    } else {
        if (!root->right) root->right = new Node();
        insert(root->right, pos, val);
    }
    root->leftVal = root->left->leftVal;
    root->rightVal = root->right ? root->right->rightVal : root->left->rightVal;
}

void remove(Node* root, int pos) {
    root->sum--;
    root->size--;
    if (root->size == 0) {
        root->leftVal = root->rightVal = 0;
        return;
    }
    if (pos <= root->left->rightVal) {
        remove(root->left, pos);
    } else {
        remove(root->right, pos);
    }
    root->leftVal = root->left->leftVal;
    root->rightVal = root->right ? root->right->rightVal : root->left->rightVal;
}

int sum(Node* root, int l, int r) {
    if (!root || l >= root->rightVal || r <= root->leftVal) {
        return 0;
    }
    if (l <= root->leftVal && r >= root->rightVal) {
        return root->sum;
    }
    return sum(root->left, l, r) + sum(root->right, l, r);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int n;
    cin >> n;

    vector<Node*> roots(n+1);
    roots[0] = new Node();

    for (int i = 1; i <= n; i++) {
        roots[i] = new Node(*roots[i-1]);
        int type;
        cin >> type;
        if (type == 1) {
            int x;
            cin >> x;
            insert(roots[i], x, 1);
        } else if (type == 2) {
            int x;
            cin >> x;
            remove(roots[i], x);
        } else if (type == 3) {
            int l, r;
            cin >> l >> r;
            cout << sum(roots[i], l, r+1) << "\n";
        }
    }

    return 0;
}
```