#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <map>
#include <algorithm>

using namespace std;

constexpr int MAXN = 100100;
constexpr int MAXQ = 200100;

int n, q, a[MAXN], st[MAXN][20], get_log[MAXQ];
map<int, long long> ans;

int gcd(int a, int b) {
  while (b) {
    a %= b;
    swap(a, b);
  }
  return a;
}

int get(int l, int r) {
  int sz = get_log[r - l];
  return gcd(st[l][sz], st[r - (1 << sz)][sz]);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  for(int i = 2; i < MAXQ; i++) {
    get_log[i] = get_log[i / 2] + 1;
  }
  
  cin >> n;
  
  for(int i = 0; i < n; i++) {
    cin >> a[i];
    st[i][0] = a[i];
  }
  
  for(int j = 1; j <= get_log[n]; j++) {
    for(int i = 0; i + (1 << j) <= n; i++) {
      st[i][j] = gcd(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]);
    }
  }
  
  for(int L = 0; L < n; L++) {
    int prev_ind = L, now_ind = L;
    while(now_ind < n) {
      int now_gcd = get(L, now_ind + 1);
      int l = now_ind, r = n;
      while(r - l > 1) {
        int m = (l + r) >> 1;
        if(get(L, m + 1) < now_gcd) r = m;
        else l = m;
      }
      ans[now_gcd] += r - prev_ind;
      now_ind = r;
      prev_ind = r;
    }
  }
  
  cin >> q;
  
  while(q--) {
    int x;
    cin >> x;
    cout << ans[x] << "\n";
  }
  
  return 0;
}
