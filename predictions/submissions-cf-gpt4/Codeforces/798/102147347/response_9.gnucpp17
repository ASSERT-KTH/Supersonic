#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
const int INF = 2e9;
const int N = 2e5 + 5;

int gcd(int a, int b) {
    while(b) {
        a %= b;
        swap(a, b);
    }
    return a;
}

int dp[N][2];

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    cin >> n;
    vector<int> a(n + 5);
    for(int i = 1; i <= n; ++i) 
        cin >> a[i];

    int g = 0;
    for(int i = 1; i <= n; ++i) 
        g = gcd(g, a[i]);

    if(g > 1) {
        cout << "YES\n0\n";
        return 0;
    }

    fill(dp[0], dp[0] + 2, INF);
    dp[0][0] = 0;
    for(int i = 1; i <= n + 2; ++i) 
        fill(dp[i], dp[i] + 2, INF);

    for(int i = 1; i <= n; ++i) {
        if(a[i] & 1 && a[i + 1] & 1) {
            dp[i][0] = min(dp[i][0], dp[i - 1][1]);
            dp[i][1] = min(dp[i][1], dp[i - 1][0] + 1);
        } else if(a[i] & 1) {
            dp[i][0] = min(dp[i][0], dp[i - 1][1]);
            dp[i][1] = min(dp[i][1], dp[i - 1][0] + 2);
        } else if(a[i + 1] & 1) {
            dp[i][0] = min({dp[i][0], dp[i - 1][1], dp[i - 1][0]});
            dp[i][1] = min(dp[i][1], min(dp[i - 1][0], dp[i - 1][1]) + 2);
        } else {
            dp[i][0] = min({dp[i][0], dp[i - 1][1], dp[i - 1][0]});
            dp[i][1] = dp[i][0];
        }
    }

    cout << "YES\n";
    cout << min(dp[n][0], dp[n][1]) << '\n';
    return 0;
}