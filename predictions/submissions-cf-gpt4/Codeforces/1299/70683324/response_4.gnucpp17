#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<ll, ll> pll;
typedef vector<ll> vl;
typedef vector<pll> vpll;

const ll INF = 0xFFFFFFFFFFFFFFFL;
ll seed;
mt19937 rng(seed = chrono::steady_clock::now().time_since_epoch().count());

inline ll rnd(ll l = 0, ll r = INF) {
  return uniform_int_distribution<ll>(l, r)(rng);
}

void addLine(vpll &c, pll z) {
  ll n = c.size();
  while (n > 1) {
    pll x = c[n - 2], y = c[n - 1];
    if ((x.second - y.second) * (z.first - y.first) >= (y.second - z.second) * (y.first - x.first))
      break;
    c.pop_back();
    n--;
  }
  c.push_back(z);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cout << fixed << setprecision(9);

  ll n;
  cin >> n;
  vl a(n+1, 0);
  for(int i = 1; i <= n; ++i) {
    cin >> a[i];
    a[i] += a[i-1];
  }
  vpll c;
  vl dd(n + 1, 0);
  for(ll i = n; i >= 1; --i) {
    addLine(c, {-i, a[i]});
    ll l = 0, r = c.size();
    while (r - l > 1) {
      ll mi = (l + r) / 2;
      if (c[mi].first * (c[mi].second - c[mi - 1].second) +
          c[mi].second * (c[mi - 1].first - c[mi].first) >=
          a[i - 1] * (c[mi - 1].first - c[mi].first) -
          (c[mi].second - c[mi - 1].second) * (i - 1))
        l = mi;
      else
        r = mi;
    }
    dd[i] = -c[l].first;
  }
  ll i = 1;
  while (i <= n) {
    ll j = dd[i];
    double m = static_cast<double>(a[j] - a[i - 1]) / (j - i + 1);
    while (i <= j) {
      cout << m << '\n';
      i++;
    }
  }
  return 0;
}