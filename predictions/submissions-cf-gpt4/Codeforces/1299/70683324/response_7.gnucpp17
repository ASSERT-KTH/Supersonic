#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("-ffloat-store")
#include <bits/stdc++.h>
using namespace std;
typedef long long int lli;
typedef pair<lli, lli> ii;
typedef vector<ii> vii;
typedef vector<lli> vi;
const lli INF = 0xFFFFFFFFFFFFFFFL;
lli seed;
mt19937 rng(seed = chrono::steady_clock::now().time_since_epoch().count());
inline lli rnd(lli l = 0, lli r = INF) {
  return uniform_int_distribution<lli>(l, r)(rng);
}
const lli maxN = 1000000L;
lli n, i, j, in;
vi a;
void addLine(vii &c, ii z) {
  while (c.size() > 1) {
    ii x = c[c.size() - 2], y = c[c.size() - 1];
    if ((x.second - y.second) * (z.first - y.first) >= (y.second - z.second) * (y.first - x.first))
      break;
    c.pop_back();
  }
  c.push_back(z);
}
int main(void) {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cout << std::fixed << std::setprecision(10);
  cin >> n;
  a.resize(n+1);
  for(i=1; i<=n; i++) {
    cin >> in;
    a[i] = in + a[i-1];
  }
  vii c;
  vi dd(n + 1, 0);
  for(i = n; i>=1; --i) {
    addLine(c, {-i, a[i]});
    lli l = 0, r = c.size();
    while (r - l > 1) {
      lli mi = (l + r) / 2;
      if (c[mi].first * (c[mi].second - c[mi - 1].second) +
          c[mi].second * (c[mi - 1].first - c[mi].first) >= 
          a[i - 1] * (c[mi - 1].first - c[mi].first) -
          (c[mi].second - c[mi - 1].second) * (i - 1))
        l = mi;
      else
        r = mi;
    }
    dd[i] = -c[l].first;
  }
  i = 1;
  while (i <= n) {
    j = dd[i];
    const double m = static_cast<double>(a[j] - a[i - 1]) / (j - i + 1);
    for (; i <= j; ++i) {
      printf("%.9lf\n", m);
    }
  }
  return 0;
}