```
#include <bits/stdc++.h>
using namespace std;
typedef long long int lli;
typedef double mytype;
typedef pair<lli, lli> ii;
typedef vector<ii> vii;
typedef vector<lli> vi;
const lli INF = 0xFFFFFFFFFFFFFFFL;

class CMP {
public:
  bool operator()(ii a, ii b) {
    return !(a.X < b.X || (a.X == b.X && a.Y <= b.Y));
  }
};

inline lli rnd(lli l = 0, lli r = INF) {
  static mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
  return uniform_int_distribution<lli>(l, r)(rng);
}

void addLine(vii &c, ii z) {
  while (c.size() > 1) {
    ii x = c[c.size() - 2], y = c[c.size() - 1];
    if ((x.Y - y.Y) * (z.X - y.X) >= (y.Y - z.Y) * (y.X - x.X))
      break;
    c.pop_back();
  }
  c.push_back(z);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cout << std::fixed << std::setprecision(10);
  lli n, i, j, in;
  cin >> n;
  vi a(n + 1, 0);
  for(i = 1; i <= n; ++i) {
    cin >> in;
    a[i] = in + a[i - 1];
  }
  vii c;
  vi dd(n + 1, 0);
  for(i = n; i >= 1; --i) {
    addLine(c, {-i, a[i]});
    lli l = 0, r = c.size();
    while (r - l > 1) {
      lli mi = (l + r) / 2;
      if (c[mi].X * (c[mi].Y - c[mi - 1].Y) +
          c[mi].Y * (c[mi - 1].X - c[mi].X) >=
          a[i - 1] * (c[mi - 1].X - c[mi].X) -
          (c[mi].Y - c[mi - 1].Y) * (i - 1))
        l = mi;
      else
        r = mi;
    }
    dd[i] = -c[l].X;
  }
  i = 1;
  while (i <= n) {
    j = dd[i];
    const mytype m = (a[j] - a[i - 1]) / (mytype)(j - i + 1);
    while (i <= j) {
      printf("%.9lf\n", m);
      i++;
    }
  }
  return 0;
}
```