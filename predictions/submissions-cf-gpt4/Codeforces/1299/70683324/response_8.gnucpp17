#include <bits/stdc++.h>
#define ll long long
#define pb push_back
#define all(x) x.begin(), x.end()
#define ld long double

using namespace std;

const int maxn = 200200;
const ld inf = 1e18;

struct Line {
    ll k, b;
    ld x;
    bool type;
    Line(ll _k, ll _b, ld _x, bool _type) {
        k = _k;
        b = _b;
        x = _x;
        type = _type;
    }
    ld get(ld _x) const {
        return k * _x + b;
    }
};

bool operator < (const Line &l, const Line &r) {
    if (l.type != r.type)
        return l.type < r.type;
    return l.k > r.k;
}

ld cross(Line &a, Line &b) {
    return 1.0 * (b.b - a.b) / (a.k - b.k);
}

struct Hull : multiset<Line> {
    bool has_prev(iterator it) {
        return it != begin();
    }
    bool has_next(iterator it) {
        return next(it) != end();
    }
    void update_border(iterator it) {
        if (has_next(it)) {
            Line temp = *next(it);
            erase(next(it));
            temp.x = cross(*it, temp);
            insert(temp);
        }
        if (has_prev(it)) {
            Line temp = *it;
            temp.x = cross(*prev(it), temp);
            erase(it);
            insert(temp);
        } else {
            Line temp = *it;
            temp.x = -inf;
            erase(it);
            insert(temp);
        }
    }
    void add_line(ll k, ll b) {
        Line l = Line(k, b, 0, 0);
        auto it = lower_bound(l);
        if (it != end() && it->k == k) {
            if (it->b > b)
                erase(it);
            else
                return;
        }
        it = insert(l);
        if (has_prev(it) && cross(*it, *prev(it)) < -1e9) {
            erase(it);
            return;
        }
        while (has_prev(it) && has_prev(prev(it)) && cross(*prev(it), *prev(prev(it))) > cross(*it, *prev(it)))
            erase(prev(it));
        while (has_next(it) && has_next(next(it)) && cross(*it, *next(it)) < cross(*next(it), *next(next(it))))
            erase(next(it));
        update_border(it);
    }
    ll get(ll x) {
        Line l = Line(0, 0, x, 1);
        auto it = upper_bound(l);
        it--;
        return it->get(x);
    }
};

ll a[maxn];

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    int n;
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
        a[i] += a[i - 1];
    }
    Hull h;
    h.add_line(0, 0);
    for (int i = 1; i <= n; ++i) {
        ll dp = h.get(i) + i * a[i] - a[i];
        h.add_line(-a[i], dp + a[i] * i);
        ld ans = (ld)dp / i;
        cout << setprecision(9) << fixed << ans << '\n';
    }
    return 0;
}