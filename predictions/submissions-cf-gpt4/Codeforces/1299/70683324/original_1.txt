```cpp
#include <bits/stdc++.h>
using namespace std;
using lli = long long int;
using ii = pair<lli, lli>;
using vi = vector<lli>;
using vii = vector<ii>;
const lli INF = 0xFFFFFFFFFFFFFFFL;

inline lli rnd(lli l = 0, lli r = INF) {
  static mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
  return uniform_int_distribution<lli>(l, r)(rng);
}

void addLine(vii &c, ii z) {
  while (c.size() > 1) {
    ii x = c[c.size() - 2], y = c[c.size() - 1];
    if ((x.second - y.second) * (z.first - y.first) >= (y.second - z.second) * (y.first - x.first))
      break;
    c.pop_back();
  }
  c.push_back(z);
}

int main(void) {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cout << std::fixed << std::setprecision(10);

  lli n;
  cin >> n;
  vi a(n+1, 0);
  for (lli i = 1; i <= n; ++i) {
    cin >> a[i];
    a[i] += a[i-1];
  }
  vii c;
  vi dd(n+1, 0);
  for (lli i = n; i >= 1; --i) {
    addLine(c, {-i, a[i]});
    lli l = 0, r = c.size();
    while (r - l > 1) {
      lli mi = (l + r) / 2;
      if (c[mi].first * (c[mi].second - c[mi - 1].second) +
          c[mi].second * (c[mi - 1].first - c[mi].first) >=
          a[i - 1] * (c[mi - 1].first - c[mi].first) -
          (c[mi].second - c[mi - 1].second) * (i - 1))
        l = mi;
      else
        r = mi;
    }
    dd[i] = -c[l].first;
  }
  lli i = 1;
  while (i <= n) {
    lli j = dd[i];
    double m = static_cast<double>(a[j] - a[i - 1]) / (j - i + 1);
    while (i <= j) {
      printf("%.9lf\n", m);
      i++;
    }
  }
  return 0;
}
```