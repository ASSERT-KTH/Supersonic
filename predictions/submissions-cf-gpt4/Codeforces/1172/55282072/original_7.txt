```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

using namespace std;

const int MAX = 2e5 + 5;
const int MOD = 998244353;

int add(int a, int b, int mod = MOD) {
    int res = a + b;
    if (res >= mod) {
        res -= mod;
    }
    return res;
}

int mul(int a, int b, int mod = MOD) {
    return (1LL * a * b) % mod;
}

int power(int a, int b, int mod = MOD) {
    int res = 1;
    while (b > 0) {
        if (b & 1) {
            res = mul(res, a, mod);
        }
        a = mul(a, a, mod);
        b >>= 1;
    }
    return res;
}

int fact[MAX], invfact[MAX];

void pre() {
    fact[0] = invfact[0] = 1;
    for (int i = 1; i < MAX; i++) {
        fact[i] = mul(i, fact[i - 1]);
        invfact[i] = power(fact[i], MOD - 2);
    }
}

int C(int n, int k) {
    if (k > n) {
        return 0;
    }
    int res = fact[n];
    res = mul(res, invfact[k]);
    res = mul(res, invfact[n - k]);
    return res;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    pre();
    int N, M;
    cin >> N >> M;
    vector<int> A(N), B(N);
    for (int i = 0; i < N; i++) {
        cin >> A[i];
        A[i] = 2 * A[i] - 1;
    }
    for (int i = 0; i < N; i++) {
        cin >> B[i];
    }
    int S = 0;
    for (int i = 0; i < N; i++) {
        S += B[i];
    }
    vector<int> dp(S + 1, 0), dp2(S + 1);
    dp[0] = 1;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j <= S; j++) {
            dp2[j] = dp[j];
            if (j >= B[i]) {
                dp2[j] = add(dp2[j], dp[j - B[i]]);
            }
        }
        dp = dp2;
        S -= B[i];
    }
    S = 0;
    for (int i = 0; i < N; i++) {
        S += B[i];
    }
    int ans = 0;
    for (int i = 0; i <= S; i++) {
        int ways = dp[i];
        int b = S - i;
        int a = i + M;
        if (a < b) {
            continue;
        }
        ways = mul(ways, C(a, b));
        ans = add(ans, ways);
    }
    for (int i = 0; i < N; i++) {
        int z = mul(B[i], power(S));
        if (A[i] == 1) {
            ans = add(ans, z);
        } else {
            ans = add(ans, MOD - z);
        }
    }
    cout << ans;
    return 0;
}
```