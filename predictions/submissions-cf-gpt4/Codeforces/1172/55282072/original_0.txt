```cpp
#include <bits/stdc++.h>
#define MOD 998244353
using namespace std;
typedef long long ll;

ll inv[410000], fact[410000], invf[410000], dp[2][410000], pw[2][410000], sum[2][410000], mul[2][410000], A[200000], W[200000];

ll power(ll a, ll b) {
    ll r = 1;
    while (b) {
        if (b & 1) r = r * a % MOD;
        a = a * a % MOD;
        b >>= 1;
    }
    return r;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n, m, i, j;
    cin >> n >> m;
    for (i = 0; i < n; i++) cin >> A[i];
    for (i = 0; i < n; i++) cin >> W[i];
    fact[0] = invf[0] = inv[1] = 1;
    for (i = 2; i <= 400000; i++) inv[i] = (MOD - MOD / i) * inv[MOD % i] % MOD;
    for (i = 1; i <= 400000; i++) fact[i] = fact[i - 1] * i % MOD;
    for (i = 1; i <= 400000; i++) invf[i] = invf[i - 1] * inv[i] % MOD;
    dp[0][0] = 1;
    int s = 0, t = 0;
    for (i = 0; i < n; i++) {
        if (A[i] == 1) s += W[i];
        else t += W[i];
    }
    for (i = 0; i <= m; i++) {
        pw[0][i] = power(s + i, MOD - 2);
        pw[1][i] = power(t - i, MOD - 2);
    }
    for (i = 0; i <= m; i++) {
        mul[0][i] = s + i;
        mul[1][i] = t - i;
        if (i) {
            mul[0][i] = mul[0][i] * mul[0][i - 1] % MOD;
            mul[1][i] = mul[1][i] * mul[1][i - 1] % MOD;
        }
    }
    for (i = 0; i < n; i++) {
        if (A[i] == 0) continue;
        for (j = m; j >= W[i]; j--) {
            dp[1][j] = (dp[1][j] + dp[1][j - W[i]] * inv[j] % MOD * (j - W[i]) % MOD * pw[0][j - W[i]] % MOD * mul[0][j - 1]) % MOD;
            dp[1][j] = (dp[1][j] + dp[0][j - W[i]] * inv[j] % MOD * (s + j - W[i]) % MOD * pw[0][j - W[i]] % MOD * mul[0][j - 1]) % MOD;
        }
        s -= W[i];
    }
    for (i = 0; i < n; i++) {
        if (A[i] == 1) continue;
        for (j = m; j >= W[i]; j--) {
            dp[0][j] = (dp[0][j] + dp[0][j - W[i]] * inv[j] % MOD * (j - W[i]) % MOD * pw[1][j - W[i]] % MOD * mul[1][j - 1]) % MOD;
            dp[0][j] = (dp[0][j] + dp[1][j - W[i]] * inv[j] % MOD * (t - j + W[i]) % MOD * pw[1][j - W[i]] % MOD * mul[1][j - 1]) % MOD;
        }
        t -= W[i];
    }
    for (i = 0; i <= m; i++) sum[0][i] = (dp[0][i] + dp[1][i]) * fact[i] % MOD;
    for (i = m; i; i--) sum[0][i - 1] = (sum[0][i - 1] + sum[0][i]) % MOD;
    for (i = 0; i <= m; i++) sum[1][i] = sum[0][i] * invf[i] % MOD;
    for (i = 1; i <= m; i++) sum[1][i] = (sum[1][i] + sum[1][i - 1]) % MOD;
    for (i = 0; i < n; i++) {
        ll ans = 0;
        for (j = 0; j < W[i]; j++) ans = (ans + sum[0][m - j] * invf[m - j] % MOD * fact[m - j - 1]) % MOD;
        ans = (ans + sum[1][m - W[i]] * (m - W[i] + 1)) % MOD;
        cout << ans * W[i] % MOD << "\n";
    }
    return 0;
}
```