```c++
#include <vector>
#include <stack>
#include <cstdio>
#include <algorithm>
#include <iostream>

constexpr int SIZE = 200010;
constexpr long long MAX = 10000000000;

std::vector<int> v1[SIZE], v2[SIZE];
int cost[SIZE];
int par[SIZE];
bool vis[SIZE];
std::stack<int> st;
long long temp;

void dfs(int source) {
    vis[source] = true;
    for (auto& i : v1[source]) {
        if (!vis[i]) {
            dfs(i);
        }
    }
    st.push(source);
}

void dfs2(int source, int val) {
    temp = std::min(temp, static_cast<long long>(cost[source]));
    vis[source] = false;
    par[source] = val;
    for (auto& i : v2[source]) {
        if (vis[i]) {
            dfs2(i, val);
        }
    }
}

int main() {
    int n;
    std::cin >> n;
    std::fill(par, par + SIZE, 0);
    for (int i = 1; i <= n; ++i)
        std::scanf("%d", &cost[i]);
    for (int i = 1; i <= n; ++i) {
        int x;
        std::scanf("%d", &x);
        v1[i].push_back(x);
        v2[x].push_back(i);
    }
    long long ans = 0;
    for (int i = 1; i <= n; ++i) {
        if (!vis[i])
            dfs(i);
    }
    while (!st.empty()) {
        int top = st.top();
        st.pop();
        if (vis[top]) {
            temp = MAX;
            dfs2(top, top);
            cost[top] = temp;
            ans += temp;
        }
    }
    for (int i = 0; i < SIZE; ++i) {
        for (auto& child : v1[i]) {
            if (par[i] != par[child]) {
                ans -= cost[par[i]];
                cost[par[i]] = 0;
            }
        }
    }
    std::cout << ans << std::endl;
    return 0;
}
```