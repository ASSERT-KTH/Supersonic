```c++
#include <vector>
#include <stack>
#include <iostream>

using namespace std;

constexpr int MAX_SIZE = 200010;
constexpr long long INF = 10000000000;

vector<int> v1[MAX_SIZE], v2[MAX_SIZE];
int cost[MAX_SIZE];
int par[MAX_SIZE];
bool vis[MAX_SIZE];
stack<int> st;
long long temp;

void dfs(int source) {
    vis[source] = true;
    for (auto& child : v1[source]) {
        if (!vis[child]) {
            dfs(child);
        }
    }
    st.push(source);
}

void dfs2(int source, int val) {
    temp = min(temp, static_cast<long long>(cost[source]));
    vis[source] = false;
    par[source] = val;
    for (auto& child : v2[source]) {
        if (vis[child]) {
            dfs2(child, val);
        }
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    cin >> n;

    fill_n(par, n + 1, 0);

    for (int i = 1; i <= n; ++i)
        cin >> cost[i];

    for (int i = 1; i <= n; ++i) {
        int x;
        cin >> x;
        v1[i].push_back(x);
        v2[x].push_back(i);
    }

    long long ans = 0;
    for (int i = 1; i <= n; ++i) {
        if (!vis[i])
            dfs(i);
    }

    while (!st.empty()) {
        int top = st.top();
        st.pop();
        if (vis[top]) {
            temp = INF;
            dfs2(top, top);
            cost[top] = temp;
            ans += temp;
        }
    }

    for (int i = 0; i <= n; ++i) {
        for (auto& child : v1[i]) {
            if (par[i] != par[child]) {
                ans -= cost[par[i]];
                cost[par[i]] = 0;
            }
        }
    }

    cout << ans << '\n';

    return 0;
}
```