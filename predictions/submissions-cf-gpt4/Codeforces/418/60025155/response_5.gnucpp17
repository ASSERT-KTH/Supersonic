#pragma GCC optimize("O3")
#pragma GCC target("sse4")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> pi;
typedef vector<int> vi;
#define FOR(i, a, b) for (int i = (a); i < (b); i++)
#define F0R(i, a) for (int i = 0; i < (a); i++)
#define all(x) begin(x), end(x)
#define sz(x) (int)x.size()
#define rsz resize
const int MOD = 1000000007;
const ll INF = 1e18;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
const int MX = 100005;
const int BLOCK = 1000;
const int NUM = MX / BLOCK + 1;
int cnt[NUM][2 * MX], CNT[NUM][MX], a[MX], A[MX];
bitset<MX> in[NUM];
vi con[NUM];
map<int, int> m;
int N;
int get(int x) {
  if (!m.count(x)) {
    m[x] = m.size();
  }
  return m[x];
}
void upd(int p, int inc) {
  int v = a[p];
  FOR(i, (p + BLOCK - 1) / BLOCK, N / BLOCK + 1) {
    CNT[i][cnt[i][v]]--;
    cnt[i][v] += inc;
    CNT[i][cnt[i][v]]++;
    if (cnt[i][v] > 0 && !in[i][cnt[i][v]]) {
      in[i][cnt[i][v]] = 1;
      con[i].push_back(cnt[i][v]);
    }
  }
}
int query2(int y) {
  int b = y / BLOCK;
  int ans = cnt[b][a[y]];
  FOR(i, BLOCK * b + 1, y + 1) ans += a[i] == a[y];
  return ans;
}
int query3(int y) {
  int mn = query2(y), ans = 0;
  int b = y / BLOCK;
  vi ok;
  for(auto &i : con[b]) {
    if (!CNT[b][i]) {
      in[b][i] = 0;
      continue;
    }
    ok.push_back(i);
    if (i >= mn)
      ans += CNT[b][i];
  }
  swap(con[b], ok);
  FOR(i, BLOCK * b + 1, y + 1) {
    cnt[b][a[i]]++;
    ans += cnt[b][a[i]] == mn;
  }
  FOR(i, BLOCK * b + 1, y + 1) cnt[b][a[i]]--;
  return ans;
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cin >> N;
  FOR(i, 1, N + 1) {
    cin >> A[i];
    a[i] = get(A[i]);
    upd(i, 1);
  }
  int M;
  cin >> M;
  F0R(i, M) {
    int t;
    cin >> t;
    if (t == 1) {
      int v, p;
      cin >> v >> p;
      upd(p, -1);
      A[p] = v;
      a[p] = get(v);
      upd(p, 1);
    } else {
      int x, y;
      cin >> x >> y;
      if (x == 1)
        cout << A[y] << "\n";
      else {
        if (x % 2 == 0)
          cout << query2(y) << "\n";
        else
          cout << query3(y) << "\n";
      }
    }
  }
}