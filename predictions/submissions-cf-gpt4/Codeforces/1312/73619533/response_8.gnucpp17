#include <bits/stdc++.h>
#define ll long long
#define pp pair<ll, ll>
#define ld long double
#define fi first
#define se second
#define all(x) (x).begin(), (x).end())
#define sz(v) (ll)(v.size())
#define hell (ll)1000000007
#define slld(x) scanf("%lld", &x)
ll t = 1, nn;
const ll maxn = 1e6 + 5, N = 1e6, nax = 26, inf = hell;
ll segtree[4 * maxn], lazy[4 * maxn], value[maxn], adj[nax][maxn];
std::vector<ll> good(maxn, 0), seta, tmp, dp(maxn, inf);

inline ll combine(ll x, ll y) { return std::min(x, y); }

inline void build(ll l, ll r, ll node = 1) {
  if (l == r) {
    segtree[node] = value[l];
    return;
  }
  ll mid = (l + r) >> 1;
  build(l, mid, node << 1);
  build(mid + 1, r, node << 1 | 1);
  segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

inline void lazify(ll l, ll r, ll node = 1) {
  if (lazy[node] == 0) return;
  segtree[node] += lazy[node];
  
  if (l < r) {
    lazy[node << 1] += lazy[node];
    lazy[node << 1 | 1] += lazy[node];
  }
  lazy[node] = 0;
}

inline void assign(ll l, ll r, ll idx, ll val, ll node = 1) {
  lazify(l, r, node);
  if (l == r) {
    segtree[node] = val;
    return;
  }
  ll mid = (l + r) >> 1;
  
  if (idx <= mid)
    assign(l, mid, idx, val, node << 1);
  else
    assign(mid + 1, r, idx, val, node << 1 | 1);
    
  segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

inline void updateRange(ll l, ll r, ll a, ll b, ll val, ll node = 1) {
  lazify(l, r, node);
  
  if (l > b || r < a)
    return;
    
  if (a <= l && r <= b) {
    segtree[node] += val;
    if (l < r) {
      lazy[node << 1] += val;
      lazy[node << 1 | 1] += val;
    }
    return;
  }
  
  ll mid = (l + r) >> 1;
  
  updateRange(l, mid, a, b, val, node << 1);
  updateRange(mid + 1, r, a, b, val, node << 1 | 1);
  
  segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

inline ll query(ll l, ll r, ll a, ll b, ll node = 1) {
  lazify(l, r, node);
  if (l > b || r < a)
    return inf;
    
  if (a <= l && r <= b)
    return segtree[node];
    
  ll mid = (l + r) >> 1;
  
  return combine(query(l, mid, a, b, node << 1), query(mid + 1, r, a, b, node << 1 | 1));
}

void dfs(ll node, ll par) {
  if (par != -1)
    dp[node] = std::min(dp[node], dp[par] + 1);
    
  if (good[node]) {
    updateRange(1, N, 1, sz(tmp), 1);
    dp[node] = std::min(dp[node], query(1, N, 1, sz(tmp)));
  }
  
  tmp.push_back(dp[node]);
  assign(1, N, sz(tmp), dp[node] + good[node]);
  
  for (ll i = 0; i < nax; ++i) {
    if (adj[i][node] != -1) {
      dfs(adj[i][node], node);
    }
  }
  
  assign(1, N, sz(tmp), inf);
  tmp.pop_back();
}

void solve() {
  memset(adj, -1, sizeof adj);
  ll n, x, k;
  std::cin >> n;
  nn = n;
  char c;
  
  std::fill(value, value + N + 1, inf);
  
  build(1, N);
  
  for (ll i = 1; i <= n; ++i) {
    std::cin >> x >> c;
    adj[c - 'a'][x] = i;
  }
  
  std::cin >> k;
  
  for (ll i = 0; i < k; ++i) {
    std::cin >> x;
    good[x] = 1;
    seta.push_back(x);
  }
  
  dp[0] = 0;
  
  dfs(0, -1);
  
  for (ll i = 0; i < k; ++i) std::cout << dp[seta[i]] << " ";
}

signed main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);
  
  while (t--) {
    solve();
  }
  return 0;
}