#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const ll maxn = 1e6 + 5, inf = 1e9 + 7;

vector<ll> dp(maxn, inf), lazy(4 * maxn), segtree(4 * maxn), value(maxn);
ll adj[26][maxn], good[maxn];

void build(ll node, ll l, ll r) {
  if (l == r) {
    segtree[node] = value[l]; return;
  }
  ll mid = (l + r) / 2;
  build(node << 1, l, mid);
  build(node << 1 | 1, mid + 1, r);
  segtree[node] = min(segtree[node << 1], segtree[node << 1 | 1]);
}

void push(ll node, ll l, ll r) {
  if (lazy[node] != 0) {
    segtree[node] += lazy[node];
    if (l != r) {
      lazy[node << 1] += lazy[node];
      lazy[node << 1 | 1] += lazy[node];
    }
    lazy[node] = 0;
  }
}

void update(ll node, ll l, ll r, ll a, ll b, ll val) {
  push(node, l, r);
  if (l > r || l > b || a > r) return;
  if (a <= l && r <= b) {
    segtree[node] += val;
    if (l != r) {
      lazy[node << 1] += val;
      lazy[node << 1 | 1] += val;
    }
    return;
  }
  ll mid = (l + r) / 2;
  update(node << 1, l, mid, a, b, val);
  update(node << 1 | 1, mid + 1, r, a, b, val);
  segtree[node] = min(segtree[node << 1], segtree[node << 1 | 1]);
}

ll query(ll node, ll l, ll r, ll a, ll b) {
  push(node, l, r);
  if (l > r || l > b || a > r) return inf;
  if (a <= l && r <= b) return segtree[node];
  ll mid = (l + r) / 2;
  return min(query(node << 1, l, mid, a, b), query(node << 1 | 1, mid + 1, r, a, b));
}

void dfs(ll node, ll par, vector<ll>& tmp) {
  if (par != -1) dp[node] = min(dp[node], dp[par] + 1);
  if (good[node]) {
    update(1, 1, maxn, 1, tmp.size(), 1);
    dp[node] = min(dp[node], query(1, 1, maxn, 1, tmp.size()));
  }
  tmp.push_back(dp[node]);
  update(1, 1, maxn, tmp.size(), tmp.size(), dp[node] + good[node]);
  for (ll i = 0; i < 26; ++i) {
    if (adj[i][node] != -1) {
      dfs(adj[i][node], node, tmp);
    }
  }
  update(1, 1, maxn, tmp.size(), tmp.size(), inf - dp[node] - good[node]);
  tmp.pop_back();
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  ll n, k;
  cin >> n;
  for (ll i = 1; i <= n; ++i) {
    ll x; char c;
    cin >> x >> c;
    adj[c - 'a'][x] = i;
  }
  cin >> k;
  vector<ll> seta(k), tmp = {0};
  for (ll& x : seta) {
    cin >> x;
    good[x] = 1;
  }
  build(1, 1, maxn);
  dfs(0, -1, tmp);
  for (ll x : seta) cout << dp[x] << ' ';
  cout << '\n';
  return 0;
}