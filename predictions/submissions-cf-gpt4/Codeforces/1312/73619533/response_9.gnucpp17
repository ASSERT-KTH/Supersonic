#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pp pair<ll, ll>
#define ld long double
#define fi first
#define se second
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define rep(i, a, b) for (ll i = a; i < b; i += 1)
#define sz(v) (ll)(v.size())
#define hell (ll)1000000007
#define slld(x) scanf("%lld", &x)
ll t = 1, nn;
const ll maxn = 1e6 + 5, N = 1e6, nax = 26, inf = hell;
ll segtree[4 * maxn], lazy[4 * maxn], value[maxn], adj[nax][maxn];
vector<ll> good(maxn, 0), seta, tmp, dp(maxn, inf);
ll combine(ll x, ll y) { return min(x, y); }

void build(ll node, ll l, ll r) {
  lazy[node] = 0;
  if (l == r) {
    segtree[node] = value[l];
    return;
  }
  ll mid = (l + r) / 2;
  build(node << 1, l, mid);
  build(node << 1 | 1, mid + 1, r);
  segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

void update(ll node, ll l, ll r, ll idx, ll val) {
  if (l == r) {
    segtree[node] = val;
    return;
  }
  ll mid = (l + r) / 2;
  if (idx <= mid) update(node << 1, l, mid, idx, val);
  else update(node << 1 | 1, mid + 1, r, idx, val);
  segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

ll query(ll node, ll l, ll r, ll a, ll b) {
  if (l > b || a > r) return inf;
  if (a <= l && r <= b) return segtree[node];
  ll mid = (l + r) / 2;
  return combine(query(node << 1, l, mid, a, b), query(node << 1 | 1, mid + 1, r, a, b));
}

void dfs(ll node, ll par) {
  if (par != -1) dp[node] = min(dp[node], dp[par] + 1);
  if (good[node]) {
    for (ll i = 0; i < sz(tmp); i++) update(1, 1, N, i + 1, tmp[i] + 1);
    dp[node] = min(dp[node], query(1, 1, N, 1, sz(tmp)));
  }
  tmp.pb(dp[node]);
  update(1, 1, N, sz(tmp), dp[node] + good[node]);
  rep(i, 0, nax) {
    if (adj[i][node] != -1) dfs(adj[i][node], node);
  }
  update(1, 1, N, sz(tmp), inf);
  tmp.pop_back();
}

void solve() {
  memset(adj, -1, sizeof adj);
  ll n, x, k;
  cin >> n;
  nn = n;
  char c;
  rep(i, 1, N + 1) value[i] = inf;
  build(1, 1, N);
  rep(i, 1, n + 1) {
    cin >> x >> c;
    adj[c - 'a'][x] = i;
  }
  cin >> k;
  rep(i, 0, k) {
    cin >> x;
    good[x] = 1;
    seta.pb(x);
  }
  dp[0] = 0;
  dfs(0, -1);
  rep(i, 0, k) cout << dp[seta[i]] << " ";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  while (t--) {
    solve();
  }
  return 0;
}