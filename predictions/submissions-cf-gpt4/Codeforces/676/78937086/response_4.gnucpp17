#include <iostream>
#include <vector>
#include <string>
using namespace std;

constexpr long long MOD = 1000000007;
constexpr long long mods = 1000000009;
constexpr long long mods1 = 37;
constexpr long long mods2 = 715827883;
constexpr int TestMillerRabin[12] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37};

inline long long mulmod(long long a, long long b, long long p) {
    long long x = 0, y = a % p;
    while (b > 0) {
        if (b & 1) x = (x + y) % p;
        y = (y << 1) % p;
        b >>= 1;
    }
    return x % p;
}

inline long long fastexp(long long x, long long y, long long p) {
    long long ans = 1;
    while (y > 0) {
        if (y & 1) ans = (ans * x) % p;
        y >>= 1;
        x = (x * x) % p;
    }
    return ans;
}

inline long long invmod(long long x, long long p) { return fastexp(x, p - 2, p); }

inline bool check_composite(long long n, long long a, long long d, int s) {
    long long x = fastexp(a, d, n);
    if (x == 1 || x == n - 1) return false;
    for (int r = 1; r < s; r++) {
        x = (x * x) % n;
        if (x == n - 1) return false;
    }
    return true;
}

inline bool isPrime(long long p) {
    if (p <= 1) return false;
    int r = 0;
    long long d = p - 1;
    while (!(d & 1)) {
        d >>= 1;
        r++;
    }
    for (auto value : TestMillerRabin) {
        if (p == value) return true;
        if (check_composite(p, value, d, r)) return false;
    }
    return true;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    int n, k;
    cin >> n >> k;

    int played = 0;
    string p;
    vector<string> values;
    values.reserve(n + 1);
    for (int i = 0; i < n + 1; i++) {
        string s;
        cin >> s;
        if (s != "?") played++;
        values.push_back(s);
    }

    if (k == 0) {
        cout << ((values[0] == "0" || (values[0] == "?" && played % 2 == 1)) ? "Yes" : "No");
    } else if (played == n + 1) {
        vector<long long> fv(n + 1);
        for (int i = 0; i <= n; i++) fv[i] = stoll(values[i]);
        vector<long long> mm(fv.size() + 5);
        mm[0] = 1;
        for (int i = 1; i <= n + 5; i++) mm[i] = (mm[i - 1] * k) % MOD;
        long long fv1 = 0;
        for (int i = 0; i <= n; i++) fv1 = (fv1 + fv[i] * mm[i]) % MOD;
        cout << ((fv1 == 0) ? "Yes" : "No");
    } else {
        cout << (((n + 1 - played) % 2 == 0) ? "Yes" : "No");
    }

    return 0;
}