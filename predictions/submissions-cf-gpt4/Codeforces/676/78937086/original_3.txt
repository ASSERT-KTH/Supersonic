```c++
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

constexpr ll MOD = 1000000007;
constexpr ll mods = 1000000009;
constexpr ll mods1 = 37;
constexpr ll mods2 = 715827883;
constexpr int TestMillerRabin[12] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37};

ll fastexp(ll x, ll y, ll p) {
  ll res = 1;
  x = x % p; 
  if (x == 0) return 0; 

  while (y > 0) {
    if (y & 1) res = (res * x) % p;
    y = y >> 1;
    x = (x * x) % p;
  }
  return res;
}

bool isPrime(ll p) {
  if (p <= 1) return false;
  int r = 0;
  ll d = p - 1;
  while (!(d & 1)) {
    d >>= 1;
    r++;
  }
  for (int i = 0; i < 12; i++) {
    int value = TestMillerRabin[i];
    if (p == value) return true;
    ll x = fastexp(value, d, p);
    if (x == 1 || x == p - 1) continue;
    for (int r = 0; r < s - 1; r++) {
      x = (x * x) % p;
      if (x == p - 1) break;
    }
    if (x != p - 1) return false;
  }
  return true;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, k;
  cin >> n >> k;
  vector<string> values(n + 1);
  for (auto& s : values) cin >> s;

  int played = count_if(values.begin(), values.end(), [](const string& s) { return s != "?"; });

  if (k == 0) {
    cout << ((values[0] == "0" || (values[0] == "?" && played % 2 == 1)) ? "Yes" : "No");
    return 0;
  }
  if (played == n + 1) {
    vector<ll> fv(n + 1);
    transform(values.begin(), values.end(), fv.begin(), [](const string& s) { return stoll(s); });
    vector<ll> mm1(n + 5), mm2(n + 5), mm3(n + 5), mm4(n + 5);
    mm1[0] = mm2[0] = mm3[0] = mm4[0] = 1;
    for (int i = 1; i < n + 5; i++) {
      mm1[i] = (mm1[i - 1] * k) % MOD;
      mm2[i] = (mm2[i - 1] * k) % mods;
      mm3[i] = (mm3[i - 1] * k) % mods1;
      mm4[i] = (mm4[i - 1] * k) % mods2;
    }
    ll fv1 = inner_product(fv.begin(), fv.end(), mm1.begin(), 0LL, plus<>(), [](ll a, ll b) { return (a * b) % MOD; });
    ll fv2 = inner_product(fv.begin(), fv.end(), mm2.begin(), 0LL, plus<>(), [](ll a, ll b) { return (a * b) % mods; });
    ll fv3 = inner_product(fv.begin(), fv.end(), mm3.begin(), 0LL, plus<>(), [](ll a, ll b) { return (a * b) % mods1; });
    ll fv4 = inner_product(fv.begin(), fv.end(), mm4.begin(), 0LL, plus<>(), [](ll a, ll b) { return (a * b) % mods2; });
    cout << ((fv1 == 0 && fv2 == 0 && fv3 == 0 && fv4 == 0) ? "Yes" : "No");
    return 0;
  }
  cout << (((played + n + 1) % 2 == 0) ? "Yes" : "No");
  return 0;
}
```