#include <vector>
#include <string>
#include <iostream>

#define MOD 1000000007
#define mods 1000000009
#define mods1 37
#define mods2 715827883

typedef long long ll;
typedef std::vector<int> vi;
typedef std::vector<ll> vl;

inline ll fastexp(ll x, ll y, ll p) {
  ll ans = 1;
  while (y > 0) {
    if (y & 1)
      ans = (ans * x) % p;
    y = y >> 1;
    x = (x * x) % p;
  }
  return ans % p;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);

  int n, k;
  std::cin >> n >> k;

  int played = 0;
  std::string p;
  std::vector<std::string> values;

  for (int i = 0; i < n + 1; i++) {
    std::string s;
    std::cin >> s;
    if (i == 0)
      p = s;
    if (s != "?")
      played++;
    values.push_back(s);
  }

  if (k == 0) {
    if (values[0] == "0" || (values[0] == "?" && played % 2 == 1))
      std::cout << "Yes";
    else
      std::cout << "No";
    return 0;
  }

  if (played == n + 1) {
    vl fv;
    for (auto &value : values)
      fv.push_back(std::stoi(value));

    ll mm1[n + 6], mm2[n + 6], mm3[n + 6], mm4[n + 6];
    mm1[0] = mm2[0] = mm3[0] = mm4[0] = 1;

    for (int i = 1; i < n + 6; i++) {
      mm1[i] = (mm1[i - 1] * k) % MOD;
      mm2[i] = (mm2[i - 1] * k) % mods;
      mm3[i] = (mm3[i - 1] * k) % mods1;
      mm4[i] = (mm4[i - 1] * k) % mods2;
    }

    ll fv1 = 0, fv2 = 0, fv3 = 0, fv4 = 0;

    for (int i = 0; i < fv.size(); i++) {
      fv1 = (fv1 + (fv[i] * mm1[i]) % MOD) % MOD;
      fv2 = (fv2 + (fv[i] * mm2[i]) % mods) % mods;
      fv3 = (fv3 + (fv[i] * mm3[i]) % mods1) % mods1;
      fv4 = (fv4 + (fv[i] * mm4[i]) % mods2) % mods2;
    }

    if (fv4 == 0 && fv1 == 0 && fv2 == 0 && fv3 == 0)
      std::cout << "Yes";
    else
      std::cout << "No";
    return 0;
  }

  if ((n + 1 - played) % 2 == 1)
      std::cout << "Yes";
  else
      std::cout << "No";

  return 0;
}