```c++
#include <iostream>
#include <vector>
#define MOD 1000000007
#define mods 1000000009
#define mods1 37
#define mods2 715827883
typedef long long ll;
typedef std::vector<int> vi;
typedef std::vector<ll> vl;
bool isPrime(ll p);
ll fastexp(ll x, ll y, ll p);
bool check_composite(ll n, ll a, ll d, int s);

int TestMillerRabin[12] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37};

int main() {
  std::ios_base::sync_with_stdio(0);
  std::cin.tie(0);
  std::cout.tie(0);
  
  int n, k;
  std::cin >> n >> k;
  int played = 0;
  std::string p;
  std::vector<std::string> values;
  values.reserve(n+1);
  for (int i = 0; i < n + 1; i++) {
    std::string s;
    std::cin >> s;
    if (s != "?")
      played++;
    values.push_back(s);
  }
  if (k == 0) {
    std::cout << ((values[0] == "0" || (values[0] == "?" && played % 2 == 1)) ? "Yes" : "No");
    return 0;
  }
  if (played == n + 1) {
    vl fv;
    fv.reserve(values.size());
    for (const auto& val : values)
      fv.push_back(stoi(val));
    ll mm1[fv.size() + 5];
    ll mm2[fv.size() + 5];
    ll mm3[fv.size() + 5];
    ll mm4[fv.size() + 5];
    mm1[0] = mm2[0] = mm3[0] = mm4[0] = 1;
    for (size_t i = 1; i < fv.size() + 5; i++) {
      mm1[i] = (1LL * mm1[i - 1] * k) % MOD;
      mm2[i] = (1LL * mm2[i - 1] * k) % mods;
      mm3[i] = (1LL * mm3[i - 1] * k) % mods1;
      mm4[i] = (1LL * mm4[i - 1] * k) % mods2;
    }
    ll fv1 = 0, fv2 = 0, fv3 = 0, fv4 = 0;
    for (size_t i = 0; i < fv.size(); i++) {
      fv1 = (fv1 + (1LL * fv[i] * mm1[i]) % MOD) % MOD;
      fv2 = (fv2 + (1LL * fv[i] * mm2[i]) % mods) % mods;
      fv3 = (fv3 + (1LL * fv[i] * mm3[i]) % mods1) % mods1;
      fv4 = (fv4 + (1LL * fv[i] * mm4[i]) % mods2) % mods2;
    }
    std::cout << ((fv4 == 0 && fv1 == 0 && fv2 == 0 && fv3 == 0) ? "Yes" : "No");
    return 0;
  }
  std::cout << (((played % 2 == 1) ? (n + 1 - played) % 2 == 1 : (n + 1 - played) % 2 == 0) ? "Yes" : "No");
  return 0;
}

ll fastexp(ll x, ll y, ll p) {
  ll ans = 1;
  while (y > 0) {
    if (y & 1)
      ans = (1LL * ans * x) % p;
    y = y >> 1;
    x = (1LL * x * x) % p;
  }
  return ans % p;
}

bool check_composite(ll n, ll a, ll d, int s) {
  ll x = fastexp(a, d, n);
  if (x == 1 || x == n - 1)
    return false;
  for (int r = 1; r < s; r++) {
    x = (1LL * x * x) % n;
    if (x == n - 1)
      return false;
  }
  return true;
}

bool isPrime(ll p) {
  if (p <= 1)
    return false;
  int r = 0;
  ll d = p - 1;
  while (!(d & 1)) {
    d >>= 1;
    r++;
  }
  for (int i = 0; i < 12; i++) {
    int value = TestMillerRabin[i];
    if (p == value)
      return true;
    if (check_composite(p, value, d, r))
      return false;
  }
  return true;
}
```