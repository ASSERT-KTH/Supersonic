```
#include <cstdio>
#define X 400001
#define MAXN 100001
struct node {
  int l, r;
  int lz;
  int sgn;
} sgt0[X], sgt1[X];

inline void pushup(node* sgt, int x) {
  sgt[x].sgn = (sgt[x << 1].sgn == sgt[x << 1 | 1].sgn) ? sgt[x << 1].sgn : 0;
}

inline void inv(int &x) { x = x % 2 == 0 ? 2 - x : -x; }

inline void pushdown(node* sgt, int x) {
  if (sgt[x].lz == 2) {
    sgt[x << 1].sgn = sgt[x << 1 | 1].sgn = -sgt[x << 1].sgn;
    inv(sgt[x << 1].lz);
    inv(sgt[x << 1 | 1].lz);
    sgt[x].lz = 0;
  }
  if (sgt[x].lz) {
    sgt[x << 1].sgn = sgt[x << 1 | 1].sgn = sgt[x].lz;
    sgt[x << 1].lz = sgt[x << 1 | 1].lz = sgt[x].lz;
    sgt[x].lz = 0;
  }
}

void build(node* sgt, int l, int r, int x) {
  sgt[x].l = l;
  sgt[x].r = r;
  sgt[x].lz = 0;
  if (l == r) {
    sgt[x].sgn = 1;
    return;
  }
  int mid = (l + r) >> 1;
  build(sgt, l, mid, x << 1);
  build(sgt, mid + 1, r, x << 1 | 1);
  pushup(sgt, x);
}

void update(node* sgt, int l, int r, int x, int val) {
  if (l <= sgt[x].l && r >= sgt[x].r) {
    if (val == 2) {
      inv(sgt[x].sgn);
      inv(sgt[x].lz);
    } else {
      sgt[x].sgn = sgt[x].lz = val;
    }
    return;
  }
  pushdown(sgt, x);
  int mid = (sgt[x].l + sgt[x].r) >> 1;
  if (l <= mid) {
    update(sgt, l, r, x << 1, val);
  }
  if (r > mid) {
    update(sgt, l, r, x << 1 | 1, val);
  }
  pushup(sgt, x);
}

int query(node* sgt, int a, int x) {
  if (sgt[x].l == a && sgt[x].r == a) {
    return sgt[x].sgn;
  }
  pushdown(sgt, x);
  int mid = (sgt[x].l + sgt[x].r) >> 1;
  return a <= mid ? query(sgt, a, x << 1) : query(sgt, a, x << 1 | 1);
}

int main() {
  int n, q;
  scanf("%d %d", &n, &q);
  int a[MAXN];
  for (int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
  }
  build(sgt0, 1, MAXN, 1);
  build(sgt1, 1, MAXN, 1);

  while (q--) {
    char s;
    int x;
    scanf(" %c %d", &s, &x);
    if (s == '>') {
      x++;
      if (x > 0) {
        update(sgt0, x, MAXN, 1, 1);
        update(sgt1, x, MAXN, 1, -1);
      } else {
        x = -x;
        update(sgt0, 1, x, 1, 2);
        update(sgt1, 1, x, 1, 2);
        update(sgt0, x + 1, MAXN, 1, 1);
        update(sgt1, x + 1, MAXN, 1, -1);
      }
    } else {
      x--;
      if (x < 0) {
        x = -x;
        update(sgt0, x, MAXN, 1, -1);
        update(sgt1, x, MAXN, 1, 1);
      } else {
        update(sgt0, 1, x, 1, 2);
        update(sgt1, 1, x, 1, 2);
        update(sgt0, x + 1, MAXN, 1, -1);
        update(sgt1, x + 1, MAXN, 1, 1);
      }
    }
  }
  for (int i = 0; i < n; i++) {
    int r = 0;
    if (a[i] < 0) {
      r = query(sgt0, -a[i], 1);
    } else if (a[i] > 0) {
      r = query(sgt1, a[i], 1);
    }
    printf("%d%c", a[i] * r, i == n - 1 ? '\n' : ' ');
  }
  return 0;
}
```