```
#include <iostream>
#include <vector>

#define MAX_SIZE 400001

struct Node {
    int l, r, lz, sgn;
};

Node tree0[MAX_SIZE], tree1[MAX_SIZE];
std::vector<int> data;

void build(Node* tree, int l, int r, int x) {
    tree[x].l = l;
    tree[x].r = r;
    tree[x].lz = 0;
    if (l == r) {
        tree[x].sgn = 1;
        return;
    }
    int mid = (l + r) >> 1;
    build(tree, l, mid, x << 1);
    build(tree, mid + 1, r, x << 1 | 1);
    tree[x].sgn = 1;
}

void update(Node* tree, int l, int r, int x, int val) {
    if (l <= tree[x].l && r >= tree[x].r) {
        tree[x].sgn *= val;
        tree[x].lz = val;
        return;
    }
    int mid = (tree[x].l + tree[x].r) >> 1;
    if (tree[x].lz) {
        tree[x << 1].sgn *= tree[x].lz;
        tree[x << 1 | 1].sgn *= tree[x].lz;
        tree[x << 1].lz = tree[x].lz;
        tree[x << 1 | 1].lz = tree[x].lz;
        tree[x].lz = 0;
    }
    if (l <= mid) update(tree, l, r, x << 1, val);
    if (r > mid) update(tree, l, r, x << 1 | 1, val);
}

int query(Node* tree, int a, int x) {
    if (tree[x].l == a && tree[x].r == a) return tree[x].sgn;
    int mid = (tree[x].l + tree[x].r) >> 1;
    if (tree[x].lz) {
        tree[x << 1].sgn *= tree[x].lz;
        tree[x << 1 | 1].sgn *= tree[x].lz;
        tree[x << 1].lz = tree[x].lz;
        tree[x << 1 | 1].lz = tree[x].lz;
        tree[x].lz = 0;
    }
    if (a <= mid) return query(tree, a, x << 1);
    return query(tree, a, x << 1 | 1);
}

int main() {
    int n, q;
    std::cin >> n >> q;
    data.resize(n);
    for (int i = 0; i < n; ++i) std::cin >> data[i];
    build(tree0, 1, n, 1);
    build(tree1, 1, n, 1);
    while (q--) {
        char s;
        int x;
        std::cin >> s >> x;
        if (s == '>') {
            if (x > 0) {
                update(tree0, x, n, 1, 1);
                update(tree1, x, n, 1, -1);
            } else {
                update(tree0, 1, -x, 1, -1);
                update(tree1, 1, -x, 1, -1);
                update(tree0, -x + 1, n, 1, 1);
                update(tree1, -x + 1, n, 1, -1);
            }
        } else {
            if (x < 0) {
                update(tree0, -x, n, 1, -1);
                update(tree1, -x, n, 1, -1);
            } else {
                update(tree0, 1, x, 1, 1);
                update(tree1, 1, x, 1, 1);
                update(tree0, x + 1, n, 1, -1);
                update(tree1, x + 1, n, 1, -1);
            }
        }
    }
    for (int i = 0; i < n; ++i) {
        int r = 0;
        if (data[i] < 0) r = query(tree0, -data[i], 1);
        else if (data[i] > 0) r = query(tree1, data[i], 1);
        std::cout << r * data[i] << ' ';
    }
    return 0;
}
```