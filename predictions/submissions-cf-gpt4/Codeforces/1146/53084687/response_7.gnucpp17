#include <cstdio>
#define X 400001
struct node {
  int l, r, lz, sgn;
} sgt0[X], sgt1[X];

void build(node sgt[], int l, int r, int x) {
  sgt[x].l = l, sgt[x].r = r, sgt[x].lz = 0, sgt[x].sgn = l == r;
  if (l != r) {
    int mid = (l + r) >> 1;
    build(sgt, l, mid, x << 1), build(sgt, mid + 1, r, x << 1 | 1);
  }
}

inline void inv(int &x) { x = x % 2 == 0 ? 2 - x : -x; }
inline void pushdown(node sgt[], int x) {
  if (sgt[x].lz) {
    if (sgt[x].lz == 2) {
      inv(sgt[x << 1].sgn), inv(sgt[x << 1 | 1].sgn);
      inv(sgt[x << 1].lz), inv(sgt[x << 1 | 1].lz);
    } else {
      sgt[x << 1].sgn = sgt[x << 1 | 1].sgn = sgt[x].lz;
      sgt[x << 1].lz = sgt[x << 1 | 1].lz = sgt[x].lz;
    }
    sgt[x].lz = 0;
  }
}

void update(node sgt[], int l, int r, int x, int val) {
  if (l <= sgt[x].l && r >= sgt[x].r) {
    if (val == 2) inv(sgt[x].sgn), inv(sgt[x].lz);
    else sgt[x].sgn = val, sgt[x].lz = val;
  } else {
    pushdown(sgt, x);
    int mid = (sgt[x].l + sgt[x].r) >> 1;
    if (l <= mid) update(sgt, l, r, x << 1, val);
    if (r > mid) update(sgt, l, r, x << 1 | 1, val);
  }
}

int query(node sgt[], int a, int x) {
  if (sgt[x].l == a && sgt[x].r == a) return sgt[x].sgn;
  pushdown(sgt, x);
  int mid = (sgt[x].l + sgt[x].r) >> 1;
  return a <= mid ? query(sgt, a, x << 1) : query(sgt, a, x << 1 | 1);
}

int main() {
  int n, q, a[X];
  scanf("%d %d", &n, &q);
  for (int i = 0; i < n; i++) scanf("%d", &a[i]);
  build(sgt0, 1, X, 1), build(sgt1, 1, X, 1);
  while (q--) {
    char s; int x;
    scanf(" %c %d", &s, &x);
    if (s == '>') {
      x = x <= 0 ? 1 : x + 1;
      update(sgt0, x, X, 1, 1), update(sgt1, x, X, 1, -1);
      if (x > 1) update(sgt0, 1, x - 1, 1, 2), update(sgt1, 1, x - 1, 1, 2);
    } else {
      x = x >= 0 ? -1 : x - 1;
      update(sgt0, -x, X, 1, -1), update(sgt1, -x, X, 1, 1);
      if (-x > 1) update(sgt0, 1, -x - 1, 1, 2), update(sgt1, 1, -x - 1, 1, 2);
    }
  }
  for (int i = 0; i < n; i++)
    printf("%d%c", a[i] * (a[i] < 0 ? query(sgt0, -a[i], 1) : query(sgt1, a[i], 1)), i == n - 1 ? '\n' : ' ');
  return 0;
}