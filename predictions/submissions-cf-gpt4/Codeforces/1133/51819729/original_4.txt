```cpp
#include<bits/stdc++.h>
using namespace std;

#define MAXN 200005
vector<int> g[MAXN], g_MST[MAXN];
vector<pair<int, int> > edge;
set<pair<int, int> > MST;
int deg[MAXN], dsu[MAXN], par[MAXN], chose[MAXN];

int find(int u) {
    if (dsu[u] == u) return u;
    return dsu[u] = find(dsu[u]);
}

void merge(int u, int v) {
    u = find(u), v = find(v);
    if (u != v) dsu[u] = v;
}

void dfs(int u, int p) {
    for (int v : g[u]) {
        if (v == p) continue;
        if (find(v) == find(u)) continue;
        merge(u, v);
        if (u < v) MST.insert({u, v});
        else MST.insert({v, u});
        g_MST[u].push_back(v), g_MST[v].push_back(u);
        dfs(v, u);
    }
}

void build_tree(int u, int p) {
    par[u] = p;
    for (int v : g_MST[u]) {
        if (v == p) continue;
        build_tree(v, u);
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n, m, k;
    cin >> n >> m >> k;
    while (m--) {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v), g[v].push_back(u);
        ++deg[u], ++deg[v];
        edge.emplace_back(u, v);
    }
    if (deg[1] < k) return cout << "NO", 0;
    for (int i = 1; i <= n; ++i) dsu[i] = i;
    sort(g[1].begin(), g[1].end(), [&](int u, int v) {
        return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
    });
    int cnt = 0;
    for (int v : g[1]) {
        if (deg[v] == 1) {
            merge(1, v);
            MST.insert({1, v});
            g_MST[1].push_back(v), g_MST[v].push_back(1);
            ++cnt;
        } else if (find(1) == find(v)) continue;
        else {
            merge(1, v);
            MST.insert({1, v});
            g_MST[1].push_back(v), g_MST[v].push_back(1);
            chose[v] = true;
            dfs(v, 1);
            if (++cnt == k) break;
        }
    }
    for (pair<int, int> E : edge) {
        int u = E.first, v = E.second;
        if (u == 1 || v == 1) continue;
        if (find(u) == find(v)) continue;
        merge(u, v);
        if (u < v) MST.insert({u, v});
        else MST.insert({v, u});
        g_MST[u].push_back(v), g_MST[v].push_back(u);
    }
    if (cnt > k || MST.size() < n - 1) return cout << "NO", 0;
    if (cnt == k) {
        puts("YES");
        for (pair<int, int> x : MST) printf("%d %d\n", x.first, x.second);
        return 0;
    }
    memset(par, -1, sizeof(par));
    par[1] = 1;
    build_tree(1, -1);
    for (int v : g[1]) {
        if (!chose[v]) {
            int p = par[v];
            if (p == 1) continue;
            if (v < p) MST.erase({v, p});
            else MST.erase({p, v});
            MST.insert({1, v});
            par[v] = 1;
            if (++cnt == k) break;
        }
    }
    puts("YES");
    for (pair<int, int> x : MST) printf("%d %d\n", x.first, x.second);
    return 0;
}
```