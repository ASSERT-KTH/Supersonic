```cpp
#include <cstdio>
#include <vector>
#include <set>
#include <algorithm>
#include <cstring>
using namespace std;
#define MAXN 2e5 + 100
typedef pair<int, int> pii;
struct DisjointSet {
  int parent[MAXN], rank[MAXN];
  DisjointSet(int n) {
    for (int i = 0; i <= n; ++i) {
      parent[i] = i;
      rank[i] = 0;
    }
  }
  int find(int u) {
    if (parent[u] == u) return u;
    return parent[u] = find(parent[u]);
  }
  void merge(int u, int v) {
    u = find(u), v = find(v);
    if (u == v) return;
    if (rank[u] < rank[v]) parent[u] = v;
    else if (rank[u] > rank[v]) parent[v] = u;
    else parent[v] = u, ++rank[u];
  }
};
vector<int> g[MAXN], g_MST[MAXN];
vector<pii> edge;
set<pii> MST;
int deg[MAXN], par[MAXN], cnt;
bool chose[MAXN];
bool cmp(int u, int v) {
  return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
}
void dfs(int u, DisjointSet &dsu) {
  for (auto v : g[u])
    if (dsu.find(1) == dsu.find(v)) continue;
    else {
      dsu.merge(dsu.find(1), dsu.find(v));
      if (u < v) MST.insert({u, v});
      else MST.insert({v, u});
      g_MST[u].push_back(v), g_MST[v].push_back(u);
      dfs(v, dsu);
    }
}
void build_tree(int u) {
  for (auto v : g_MST[u])
    if (par[v] == -1) par[v] = u, build_tree(v);
}
int main() {
  int n, m, k;
  scanf("%d%d%d", &n, &m, &k);
  while (m--) {
    int u, v;
    scanf("%d%d", &u, &v);
    g[u].push_back(v), g[v].push_back(u);
    ++deg[u], ++deg[v];
    edge.emplace_back(u, v);
  }
  if (deg[1] < k) return !printf("NO\n");
  sort(g[1].begin(), g[1].end(), cmp);
  DisjointSet dsu(n);
  int cnt = 0;
  for (auto v : g[1]) {
    if (deg[v] == 1) {
      dsu.merge(dsu.find(1), dsu.find(v));
      MST.insert({1, v});
      g_MST[1].push_back(v), g_MST[v].push_back(1);
      ++cnt;
    } else if (dsu.find(1) != dsu.find(v)) {
      dsu.merge(dsu.find(1), dsu.find(v));
      MST.insert({1, v});
      g_MST[1].push_back(v), g_MST[v].push_back(1);
      chose[v] = true, dfs(v, dsu);
      if (++cnt == k) break;
    }
  }
  for (auto E : edge) {
    int u = E.first, v = E.second;
    if (u == 1 || v == 1) continue;
    if (dsu.find(u) == dsu.find(v)) continue;
    dsu.merge(dsu.find(u), dsu.find(v));
    if (u < v) MST.insert({u, v});
    else MST.insert({v, u});
    g_MST[u].push_back(v), g_MST[v].push_back(u);
  }
  if (cnt > k || MST.size() < n - 1) return !printf("NO\n");
  if (cnt == k) {
    puts("YES");
    for (auto x : MST) printf("%d %d\n", x.first, x.second);
    return 0;
  }
  memset(par, -1, sizeof(par));
  par[1] = 1;
  build_tree(1);
  for (auto v : g[1])
    if (!chose[v]) {
      int p = par[v];
      if (p == 1) continue;
      if (v < p) MST.erase({v, p});
      else MST.erase({p, v});
      MST.insert({1, v});
      par[v] = 1;
      if (++cnt == k) break;
    }
  puts("YES");
  for (auto x : MST) printf("%d %d\n", x.first, x.second);
  return 0;
}
```