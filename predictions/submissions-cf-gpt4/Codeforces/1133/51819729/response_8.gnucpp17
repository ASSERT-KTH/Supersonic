#include <bits/stdc++.h>
using namespace std;

constexpr int MAXN = 200100;
vector<int> g[MAXN], g_MST[MAXN];
vector<pair<int, int>> edge;
set<pair<int, int>> MST;
int par[MAXN], deg[MAXN], chose[MAXN];
struct DSU {
    int parent[MAXN], rank[MAXN];
    DSU() { iota(parent, parent + MAXN, 0); fill(rank, rank + MAXN, 0); }
    int find(int u) { return parent[u] == u ? u : parent[u] = find(parent[u]); }
    void merge(int u, int v) {
        u = find(u), v = find(v);
        if (u == v) return;
        if (rank[u] < rank[v]) swap(u, v);
        parent[v] = u;
        if (rank[u] == rank[v]) ++rank[u];
    }
} dsu;

void dfs(int u) {
    for (auto v : g[u]) {
        if (dsu.find(1) == dsu.find(v))
            continue;
        dsu.merge(dsu.find(1), dsu.find(v));
        if (u < v)
            MST.insert({u, v});
        else
            MST.insert({v, u});
        g_MST[u].push_back(v), g_MST[v].push_back(u);
        dfs(v);
    }
}

void build_tree(int u) {
    for (auto v : g_MST[u]) {
        if (par[v] == -1)
            par[v] = u, build_tree(v);
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n, m, k;
    cin >> n >> m >> k;
    while (m--) {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v), g[v].push_back(u);
        ++deg[u], ++deg[v];
        edge.emplace_back(u, v);
    }

    if (deg[1] < k) return !printf("NO\n");
    sort(g[1].begin(), g[1].end(), [](int u, int v) { return make_pair(deg[u], u) < make_pair(deg[v], v); });
    int cnt = count_if(g[1].begin(), g[1].end(), [](int v) { return deg[v] == 1; });
    if (cnt > k) return !printf("NO\n");

    for (auto v : g[1]) {
        if (deg[v] == 1 || dsu.find(1) != dsu.find(v)) {
            dsu.merge(dsu.find(1), dsu.find(v));
            MST.insert({min(1, v), max(1, v)});
            g_MST[1].push_back(v), g_MST[v].push_back(1);
        }
        if (deg[v] > 1) {
            chose[v] = true, dfs(v);
            if (++cnt == k) break;
        }
    }

    for (auto E : edge) {
        int u = E.first, v = E.second;
        if (u == 1 || v == 1 || dsu.find(u) == dsu.find(v)) continue;
        dsu.merge(dsu.find(u), dsu.find(v));
        MST.insert({min(u, v), max(u, v)});
        g_MST[u].push_back(v), g_MST[v].push_back(u);
    }

    if (cnt != k || MST.size() < n - 1) return !printf("NO\n");
    fill(par, par + MAXN, -1);
    par[1] = 1;
    build_tree(1);
    for (auto v : g[1]) {
        if (chose[v] || par[v] == 1) continue;
        MST.erase({min(v, par[v]), max(v, par[v])});
        MST.insert({1, v});
        par[v] = 1;
        if (++cnt == k) break;
    }

    puts("YES");
    for (auto x : MST)
        printf("%d %d\n", x.first, x.second);
    return 0;
}