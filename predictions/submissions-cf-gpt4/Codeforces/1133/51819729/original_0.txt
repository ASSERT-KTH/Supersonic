```cpp
#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;
const int MAXN = 2e5 + 100;

vector<int> g[MAXN], g_MST[MAXN];
vector<pii> edge;
set<pii> MST;
int deg[MAXN], par[MAXN], dsu[MAXN], rank_[MAXN];
bool chose[MAXN];

int find(int u) {
    if (dsu[u] == u) return u;
    return dsu[u] = find(dsu[u]);
}

void merge(int u, int v) {
    u = find(u), v = find(v);
    if (u == v) return;
    if (rank_[u] < rank_[v]) dsu[u] = v;
    else if (rank_[u] > rank_[v]) dsu[v] = u;
    else dsu[v] = u, ++rank_[u];
}

void dfs(int u) {
    for (auto v : g[u])
        if (find(1) == find(v)) continue;
        else {
            merge(find(1), find(v));
            MST.insert({min(u, v), max(u, v)});
            g_MST[u].push_back(v), g_MST[v].push_back(u);
            dfs(v);
        }
}

void build_tree(int u) {
    for (auto v : g_MST[u])
        if (par[v] == -1) par[v] = u, build_tree(v);
}

int main() {
    ios_base::sync_with_stdio(0), cin.tie(0);
    int n, m, k;
    cin >> n >> m >> k;
    while (m--) {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v), g[v].push_back(u);
        ++deg[u], ++deg[v];
        edge.emplace_back(u, v);
    }

    for (int i = 0; i <= n; ++i) dsu[i] = i;

    if (deg[1] < k) return !printf("NO\n");

    sort(g[1].begin(), g[1].end(), [](int u, int v) {
        return deg[u] < deg[v] || (deg[u] == deg[v] && u < v);
    });

    int cnt = 0;
    for (auto v : g[1]) {
        if (deg[v] == 1) {
            merge(find(1), find(v));
            MST.insert({1, v});
            g_MST[1].push_back(v), g_MST[v].push_back(1);
            ++cnt;
        } else if (find(1) == find(v)) continue;
        else if (cnt < k) {
            merge(find(1), find(v));
            MST.insert({1, v});
            g_MST[1].push_back(v), g_MST[v].push_back(1);
            chose[v] = true, dfs(v);
            ++cnt;
        }
    }

    for (auto E : edge) {
        int u = E.first, v = E.second;
        if (u == 1 || v == 1) continue;
        if (find(u) == find(v)) continue;
        merge(find(u), find(v));
        MST.insert({min(u, v), max(u, v)});
        g_MST[u].push_back(v), g_MST[v].push_back(u);
    }

    if (cnt != k || MST.size() < n - 1) return !printf("NO\n");

    fill(par, par + MAXN, -1);
    par[1] = 1;
    build_tree(1);

    for (auto v : g[1]) {
        if (!chose[v]) {
            int p = par[v];
            if (p == 1) continue;
            MST.erase({min(v, p), max(v, p)});
            MST.insert({1, v});
            par[v] = 1;
            ++cnt;
            if (cnt == k) break;
        }
    }

    printf("YES\n");
    for (auto x : MST) printf("%d %d\n", x.first, x.second);
    return 0;
}
```