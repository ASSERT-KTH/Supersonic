#include <bits/stdc++.h>
using namespace std;

typedef pair<int, int> pii;

const int MAXN = 2e5 + 100;
vector<int> g[MAXN], g_MST[MAXN];
vector<pii> edge;
set<pii> MST;
int deg[MAXN];
int par[MAXN];
bool chose[MAXN];

struct DisjointSet {
  int parent[MAXN], rank[MAXN];
  void make(int u) { parent[u] = u, rank[u] = 0; };
  int find(int u) { return parent[u] == u ? u : parent[u] = find(parent[u]); }
  void merge(int u, int v) {
    if ((u = find(u)) == (v = find(v)))
      return;
    if (rank[u] < rank[v])
      swap(u, v);
    if (rank[u] == rank[v])
      ++rank[u];
    parent[v] = u;
  }
} dsu;

void dfs(int u) {
  for (auto v : g[u]) {
    if (dsu.find(u) == dsu.find(v))
      continue;
    dsu.merge(u, v);
    MST.insert({min(u, v), max(u, v)});
    g_MST[u].push_back(v), g_MST[v].push_back(u);
    dfs(v);
  }
}

void build_tree(int u) {
  for (auto v : g_MST[u]) {
    if (par[v] == -1) {
      par[v] = u;
      build_tree(v);
    }
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  int n, m, k;
  cin >> n >> m >> k;
  for (int i = 0; i < m; ++i) {
    int u, v;
    cin >> u >> v;
    g[u].push_back(v), g[v].push_back(u);
    ++deg[u], ++deg[v];
    edge.emplace_back(u, v);
  }

  if (deg[1] < k) {
    cout << "NO";
    return 0;
  }

  for (auto v : g[1]) {
    if (deg[v] != 1)
      continue;
    dsu.merge(1, v);
    MST.insert({1, v});
    g_MST[1].push_back(v), g_MST[v].push_back(1);
  }

  for (auto v : g[1]) {
    if (dsu.find(1) == dsu.find(v))
      continue;
    dsu.merge(1, v);
    MST.insert({1, v});
    g_MST[1].push_back(v), g_MST[v].push_back(1);
    chose[v] = true;
    dfs(v);
    if (MST.size() == k)
      break;
  }

  for (auto E : edge) {
    int u = E.first, v = E.second;
    if (u == 1 || v == 1 || dsu.find(u) == dsu.find(v))
      continue;
    dsu.merge(u, v);
    MST.insert({min(u, v), max(u, v)});
    g_MST[u].push_back(v), g_MST[v].push_back(u);
  }

  if (MST.size() < k || MST.size() < n - 1) {
    cout << "NO";
    return 0;
  }

  if (MST.size() == k) {
    cout << "YES\n";
    for (auto x : MST)
      cout << x.first << ' ' << x.second << '\n';
    return 0;
  }

  memset(par, -1, sizeof(par));
  par[1] = 1;
  build_tree(1);

  for (auto v : g[1]) {
    if (chose[v])
      continue;
    int p = par[v];
    MST.erase({min(p, v), max(p, v)});
    MST.insert({1, v});
    par[v] = 1;
    if (MST.size() == k)
      break;
  }

  cout << "YES\n";
  for (auto x : MST)
    cout << x.first << ' ' << x.second << '\n';

  return 0;
}