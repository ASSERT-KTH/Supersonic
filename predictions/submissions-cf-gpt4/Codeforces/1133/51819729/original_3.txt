```C++
#include <cstdio>
#include <algorithm>
#include <vector>
#include <set>
using namespace std;
const int MAXN = 2e5 + 100;
vector<int> g[MAXN], g_MST[MAXN];
vector<pair<int, int>> edge;
set<pair<int, int>> MST;
int deg[MAXN];
int par[MAXN];
bool cmp(int u, int v) {
  return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
}
void dfs(int u, int par[]) {
  for (auto v : g[u])
    if (par[v] == -1) {
      par[v] = u;
      dfs(v, par);
    }
}
int main() {
  int n, m, k;
  scanf("%d %d %d", &n, &m, &k);
  for (int i = 0; i < m; ++i) {
    int u, v;
    scanf("%d %d", &u, &v);
    g[u].push_back(v), g[v].push_back(u);
    ++deg[u], ++deg[v];
    edge.emplace_back(u, v);
  }
  if (deg[1] < k) {
    printf("NO");
    return 0;
  }
  sort(g[1].begin(), g[1].end(), cmp);
  fill(par, par + n + 1, -1);
  par[1] = 1;
  dfs(1, par);
  for (auto v : g[1])
    if (par[v] == -1) {
      par[v] = 1;
      if (v < 1)
        MST.insert({v, 1});
      else
        MST.insert({1, v});
      if (MST.size() == k)
        break;
    }
  if (MST.size() < k || MST.size() < n - 1) {
    printf("NO");
    return 0;
  }
  printf("YES\n");
  for (auto x : MST)
    printf("%d %d\n", x.first, x.second);
  return 0;
}
```