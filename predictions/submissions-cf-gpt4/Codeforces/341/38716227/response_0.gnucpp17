#include <bits/stdc++.h>
#define ll long long
const int mod = 1e9 + 7;
const int mxn = 1010;
ll multree[mxn][mxn][2], addtree[mxn][mxn][2];
ll yo(ll x) { return (x % 2); }
ll query2(ll tree[mxn][mxn][2], ll x, ll y) {
  ll mul = 0, add = 0;
  for (ll i = y; i > 0; i -= i & -i) {
    mul ^= tree[x][i][0];
    add ^= tree[x][i][1];
  }
  return (mul * yo(y)) ^ add;
}
ll query1(ll x, ll y) {
  ll mul = 0, add = 0;
  for (ll i = x; i > 0; i -= i & -i) {
    mul ^= query2(multree, i, y);
    add ^= query2(addtree, i, y);
  }
  return (mul * yo(x)) ^ add;
}
ll query(ll x1, ll y1, ll x2, ll y2) {
  return (query1(x2, y2) ^ query1(x1 - 1, y2) ^ query1(x2, y1 - 1) ^
          query1(x1 - 1, y1 - 1));
}
void upd2(ll tree[mxn][mxn][2], ll x, ll y, ll mul, ll add) {
  for (ll i = x; i < mxn; i += i & -i) {
    for (ll j = y; j < mxn; j += j & -j) {
      tree[i][j][0] ^= mul;
      tree[i][j][1] ^= add;
    }
  }
}
void upd1(ll x, ll y1, ll y2, ll mul, ll add) {
  upd2(multree, x, y1, mul, mul * yo(y1 - 1));
  upd2(multree, x, y2, mul, mul * yo(y2));
  upd2(addtree, x, y1, add, add * yo(y1 - 1));
  upd2(addtree, x, y2, add, add * yo(y2));
}
void upd(ll x1, ll y1, ll x2, ll y2, ll val) {
  upd1(x1, y1, y2, val, val * yo(x1 - 1));
  upd1(x2, y1, y2, val, val * yo(x2));
}
int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  ll n, q, tt, x1, y1, x2, y2, val;
  std::cin >> n >> q;
  while (q--) {
    std::cin >> tt;
    if (tt == 2) {
      std::cin >> x1 >> y1 >> x2 >> y2 >> val;
      upd(x1, y1, x2, y2, val);
    } else {
      std::cin >> x1 >> y1 >> x2 >> y2;
      std::cout << query(x1, y1, x2, y2) << "\n";
    }
  }
  return 0;
}