#include <algorithm>
#include <iostream>
#include <queue>
#include <vector>
using namespace std;

constexpr int N = 50000, M = 100000;
pair<int, int> rent[M + 1];
vector<int> by_length[N + 1];
int ans[N + 1];

struct Node {
    int l, r, val, pri, cnt;
    Node(int l, int r, int val, int pri, int cnt) : l(l), r(r), val(val), pri(pri), cnt(cnt) {}
};

vector<Node> treap;

inline int cnt(int x) {
    return x == -1 ? 0 : treap[x].cnt;
}

inline void push(int x) {
    if (x != -1)
        treap[x].cnt = 1 + cnt(treap[x].l) + cnt(treap[x].r);
}

void split(int x, int key, int& l, int& r) {
    if (x == -1) {
        l = r = -1;
    } else {
        if (treap[x].val <= key) {
            split(treap[x].r, key, treap[x].r, r);
            l = x;
        } else {
            split(treap[x].l, key, l, treap[x].l);
            r = x;
        }
        push(x);
    }
}

void merge(int& x, int l, int r) {
    if (l == -1 || r == -1) {
        x = l == -1 ? r : l;
    } else {
        if (treap[l].pri > treap[r].pri) {
            merge(treap[l].r, treap[l].r, r);
            x = l;
        } else {
            merge(treap[r].l, l, treap[r].l);
            x = r;
        }
        push(x);
    }
}

void insert(int& root, Node v) {
    if (root == -1) {
        root = treap.size();
        treap.push_back(v);
    } else if (treap[root].pri < v.pri) {
        split(root, v.val, v.l, v.r);
        root = treap.size();
        treap.push_back(v);
    } else {
        insert(v.val < treap[root].val ? treap[root].l : treap[root].r, v);
        push(root);
    }
}

int find(int& root, int val) {
    int l, r;
    split(root, val, l, r);
    int res = cnt(l);
    merge(root, l, r);
    return res;
}

int ft[N];

void add(int t) {
    for (int i = N - rent[t].first - 1; i < N; i |= i + 1)
        insert(ft[i], Node(-1, -1, rent[t].second, rand(), 1));
}

int query(int l, int r) {
    int res = M;
    for (int i = N - l; i > N - r; i &= i - 1)
        res = min(res, find(ft[i - 1], r));
    return res;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; ++i) {
        cin >> rent[i].first >> rent[i].second, --rent[i].first;
        by_length[rent[i].second - rent[i].first].push_back(i);
    }
    queue<pair<int, int>> for_rent;
    for (int epoch = n; epoch; --epoch) {
        for (int i : by_length[epoch])
            add(i);
        for_rent.emplace(0, n);
        while (!for_rent.empty()) {
            auto [l, r] = for_rent.front();
            for_rent.pop();
            int t = query(l, r);
            if (t != M) {
                ans[epoch] += rent[t].second - rent[t].first;
                for_rent.emplace(l, rent[t].first);
                for_rent.emplace(rent[t].second, r);
            }
        }
    }
    for (int rented = 1; rented <= n; ++rented)
        cout << ans[rented] << '\n';
    return 0;
}