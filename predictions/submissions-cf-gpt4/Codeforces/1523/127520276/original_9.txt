```c++
#include <algorithm>
#include <cstdlib>
#include <iostream>
#include <queue>
#include <random>
#include <tuple>
#include <utility>
#include <vector>
using namespace std;

constexpr int N = 5e4 + 5, M = 1e5 + 5, LOGN = 16;
int &mini(int &lhs, int rhs) { return lhs = min(lhs, rhs); }

struct CTVertex {
    int x, y, t;
    int l, r;
};

class CT {
public:
  CT() : root(-1), yseed(0), storage(N) {}

  void create(int r, int t) {
    yseed = (yseed ? yseed : rand()) * (RAND_MAX + 1u) + rand();
    storage[sz++] = {r, yseed, t, -1, -1};
    if (!add(root, sz - 1)) {
      --sz;
    }
  }

  int mintlq(int r) const {
    int res = M;
    int pos = root;
    while (pos != -1) {
      if (storage[pos].x > r) {
        pos = storage[pos].l;
      } else {
        res = storage[pos].t;
        pos = storage[pos].r;
      }
    }
    return res;
  }

private:
  int root;
  int sz = 0;
  unsigned yseed;
  vector<CTVertex> storage;

  bool add(int &t, int el) {
    bool adding = 0;
    int tt;
    if (t == -1) {
      t = el;
      adding = 1;
    } else if (storage[t].y > storage[el].y) {
      tie(adding, tt) = split(t, storage[el].x, storage[el].l, storage[el].r, storage[el].t);
      if (adding) {
        t = el;
        filterjoin(storage[el].r, -1, storage[el].r, storage[el].t);
      } else {
        t = tt;
      }
    } else if (storage[t].x > storage[el].x) {
      adding = add(storage[t].l, el);
      if (storage[t].t > storage[el].t) {
        filterjoin(t, storage[t].l, storage[t].r, storage[el].t);
      }
    } else if (storage[t].x == storage[el].x) {
      mini(storage[t].t, storage[el].t);
      filterjoin(storage[t].r, -1, storage[t].r, storage[el].t);
    } else if (storage[t].t > storage[el].t) {
      adding = add(storage[t].r, el);
    }
    return adding;
  }

  pair<bool, int> split(int t, int x, int &l, int &r, int tval) {
    bool splitting = 0;
    int tt;
    if (t == -1) {
      l = r = -1;
      splitting = 1;
    } else if (storage[t].x > x) {
      tie(splitting, tt) = split(storage[t].l, x, l, storage[t].l, tval);
      if (splitting) {
        r = t;
      } else {
        storage[t].l = tt;
        if (storage[t].t > tval) {
          filterjoin(t, storage[t].l, storage[t].r, tval);
        }
      }
    } else if (storage[t].x == x) {
      mini(storage[t].t, tval);
      filterjoin(storage[t].r, -1, storage[t].r, tval);
    } else if (storage[t].t > tval) {
      tie(splitting, tt) = split(storage[t].r, x, storage[t].r, r, tval);
      if (splitting) {
        l = t;
      } else {
        storage[t].r = tt;
      }
    }
    return {splitting, t};
  }

  void filterjoin(int &t, int l, int r, int tval) {
    while (r != -1 && storage[r].t > tval) {
      r = storage[r].r;
    }
    if (r == -1) {
      t = l;
    } else if (l == -1 || storage[l].y > storage[r].y) {
      filterjoin(storage[r].l, l, storage[r].l, tval);
      t = r;
    } else {
      filterjoin(storage[l].r, storage[l].r, r, tval);
      t = l;
    }
  }
};

using interval = pair<int, int>;
interval rent[M];
vector<int> by_length[N];
int ans[N];
CT ft[N];

void add(int t) {
  for (int i = N - rent[t].first - 2; i < N; i |= i + 1) {
    ft[i].create(rent[t].second, t);
  }
}

int query(int l, int r) {
  int res = M;
  for (int i = N - l; i > N - r; i &= i - 1) {
    res = min(res, ft[i - 1].mintlq(r));
  }
  return res;
}

int main() {
  cin.tie(0), ios_base::sync_with_stdio(0);
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; ++i) {
    cin >> rent[i].first >> rent[i].second, --rent[i].first;
    by_length[rent[i].second - rent[i].first].push_back(i);
  }
  queue<interval> for_rent;
  for (int epoch = n; epoch; --epoch) {
    for (int i : by_length[epoch]) {
      add(i);
    }
    for_rent.emplace(0, n);
    while (!for_rent.empty()) {
      auto [l, r] = for_rent.front();
      for_rent.pop();
      int t = query(l, r);
      if (t != M) {
        ans[epoch] += rent[t].second - rent[t].first;
        for_rent.emplace(l, rent[t].first);
        for_rent.emplace(rent[t].second, r);
      }
    }
  }
  for (int rented = 1; rented <= n; ++rented) {
    cout << ans[rented] << '\n';
  }
  return 0;
}
```