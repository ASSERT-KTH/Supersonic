```cpp
#include <algorithm>
#include <queue>
#include <vector>
#include <iostream>

using namespace std;

constexpr int N = 5e4, M = 1e5, LOGN = 16;
int &mini(int &lhs, int rhs) { return lhs = min(lhs, rhs); }

struct CTVertex {
    int x, y, t;
    int l, r;
};

vector<CTVertex> storage;
int root = -1;
unsigned yseed = 0;

inline int get(int ptr) { return storage[ptr]; }
inline int &get(int ptr) { return storage[ptr]; }

bool add(int &t, int el) {
    if (t == -1) {
        t = el;
        return true;
    } else if (storage[t].y > storage[el].y) {
        split(t, storage[el].x, storage[el].l, storage[el].r);
        t = el;
        return true;
    } else if (storage[t].x > storage[el].x) {
        return add(storage[t].l, el);
    }
    return false;
}

void split(int t, int x, int &l, int &r) {
    if (t == -1) {
        l = r = -1;
    } else if (storage[t].x > x) {
        split(storage[t].l, x, l, storage[t].l);
        r = t;
    } else {
        l = t;
        split(storage[t].r, x, storage[t].r, r);
    }
}

void create(int r, int t) {
    yseed = (yseed ? yseed : rand()) * (RAND_MAX + 1u) + rand();
    storage.push_back({r, yseed, t, -1, -1});
    if (!add(root, storage.size() - 1)) {
        storage.pop_back();
    }
}

int mintlq(int r) {
    int res = M;
    int pos = root;
    while (pos != -1) {
        if (storage[pos].x > r) {
            pos = storage[pos].l;
        } else {
            res = min(res, storage[pos].t);
            pos = storage[pos].r;
        }
    }
    return res;
}

using interval = pair<int, int>;
interval rent[M + 1];
vector<int> by_length[N + 1];
int ans[N + 1];
int ft[N];

void add(int t) {
    for (int i = N - rent[t].first - 1; i < N; i |= i + 1) {
        create(rent[t].second, t);
    }
}

int query(int l, int r) {
    int res = M;
    for (int i = N - l; i > N - r; i &= i - 1) {
        res = min(res, mintlq(r));
    }
    return res;
}

int main() {
    ios_base::sync_with_stdio(0);
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; ++i) {
        cin >> rent[i].first >> rent[i].second, --rent[i].first;
        by_length[rent[i].second - rent[i].first].push_back(i);
    }
    queue<interval> for_rent;
    for (int epoch = n; epoch; --epoch) {
        for (int i : by_length[epoch]) {
            add(i);
        }
        for_rent.emplace(0, n);
        while (!for_rent.empty()) {
            auto [l, r] = for_rent.front();
            for_rent.pop();
            int t = query(l, r);
            if (t != M) {
                ans[epoch] += rent[t].second - rent[t].first;
                for_rent.emplace(l, rent[t].first);
                for_rent.emplace(rent[t].second, r);
            }
        }
    }
    for (int rented = 1; rented <= n; ++rented) {
        cout << ans[rented] << '\n';
    }
    return 0;
}
```