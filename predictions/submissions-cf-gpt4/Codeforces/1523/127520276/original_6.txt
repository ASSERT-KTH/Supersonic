```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <random>
#include <tuple>

using namespace std;

constexpr int N = 5e4, M = 1e5, LOGN = 16;

int &mini(int &lhs, int rhs) { return lhs = min(lhs, rhs); }

class CT {
public:
    void create(int r, int t) {
        yseed = yseed ? yseed : rand();
        storage.emplace_back(r, yseed, t);
        if (!add(root, storage.size() - 1)) {
            storage.pop_back();
        }
    }

    int mintlq(int r) const {
        int res = M;
        int pos = root;
        while (pos != -1) {
            if (storage[pos].x > r) {
                pos = storage[pos].l;
            } else {
                res = storage[pos].t;
                pos = storage[pos].r;
            }
        }
        return res;
    }

private:
    struct CTVertex {
        int x, y, t, l, r;
        CTVertex(int x, unsigned y, int t) : x{x}, y{y}, t{t}, l{-1}, r{-1} {}
    };

    int root = -1;
    vector<CTVertex> storage;
    static unsigned yseed;

    bool add(int &t, int el) {
        if (t == -1) {
            t = el;
            return true;
        }

        CTVertex &t_vertex = storage[t];
        CTVertex &el_vertex = storage[el];
        if (t_vertex.y > el_vertex.y) {
            std::tie(el_vertex.l, el_vertex.r) = split(t, el_vertex.x, el_vertex.t);
            t = el;
            return true;
        }

        if (t_vertex.x > el_vertex.x) {
            if (add(t_vertex.l, el) && t_vertex.t > el_vertex.t) {
                t_vertex.r = merge(t_vertex.l, t_vertex.r, el_vertex.t);
            }
        } else if (t_vertex.x == el_vertex.x) {
            mini(t_vertex.t, el_vertex.t);
            t_vertex.r = merge(t_vertex.l, t_vertex.r, el_vertex.t);
        } else if (t_vertex.t > el_vertex.t) {
            return add(t_vertex.r, el);
        }

        return false;
    }

    pair<int, int> split(int t, int x, int tval) {
        if (t == -1) {
            return make_pair(-1, -1);
        }

        CTVertex &t_vertex = storage[t];
        if (t_vertex.x > x) {
            auto [l, r] = split(t_vertex.l, x, tval);
            t_vertex.l = r;
            if (t_vertex.t > tval) {
                t_vertex.r = merge(t_vertex.l, t_vertex.r, tval);
            }
            return make_pair(l, t);
        }

        auto [l, r] = split(t_vertex.r, x, tval);
        t_vertex.r = l;
        return make_pair(t, r);
    }

    int merge(int l, int r, int tval) {
        if (r == -1 || storage[r].t > tval) {
            return l;
        }
        if (l == -1 || storage[l].y > storage[r].y) {
            storage[r].l = merge(l, storage[r].l, tval);
            return r;
        }
        storage[l].r = merge(storage[l].r, r, tval);
        return l;
    }
};

unsigned CT::yseed{};

using interval = pair<int, int>;
interval rent[M + 1];
vector<int> by_length[N + 1];
int ans[N + 1];
CT ft[N];

void add(int t) {
    for (int i = N - rent[t].first - 1; i < N; i |= i + 1) {
        ft[i].create(rent[t].second, t);
    }
}

int query(int l, int r) {
    int res = M;
    for (int i = N - l; i > N - r; i &= i - 1) {
        res = min(res, ft[i - 1].mintlq(r));
    }
    return res;
}

int main() {
    cin.tie(0), ios_base::sync_with_stdio(0);
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; ++i) {
        cin >> rent[i].first >> rent[i].second, --rent[i].first;
        by_length[rent[i].second - rent[i].first].push_back(i);
    }
    queue<interval> for_rent;
    for (int epoch = n; epoch; --epoch) {
        for (int i : by_length[epoch]) {
            add(i);
        }
        for_rent.emplace(0, n);
        while (!for_rent.empty()) {
            auto [l, r] = for_rent.front();
            for_rent.pop();
            int t = query(l, r);
            if (t != M) {
                ans[epoch] += rent[t].second - rent[t].first;
                for_rent.emplace(l, rent[t].first);
                for_rent.emplace(rent[t].second, r);
            }
        }
    }
    for (int rented = 1; rented <= n; ++rented) {
        cout << ans[rented] << '\n';
    }
    return 0;
}
```