```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <chrono>

using namespace std;

const int mod = 1e9 + 7;
const int inf = 0x3f3f3f3f;
const int maxn = 1e5 + 10;
mt19937
    rng((unsigned int)chrono::steady_clock::now().time_since_epoch().count());

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);

  int n, m, p;
  cin >> n >> m >> p;
  vector<long long> a(n + 1);
  for (int i = 1; i <= n; ++i) {
    for (int j = 0; j < m; ++j) {
      char c;
      cin >> c;
      if (c == '1')
        a[i] += (1ll << j);
    }
  }
  vector<int> id(n + 1);
  iota(id.begin(), id.end(), 0);
  shuffle(id.begin() + 1, id.end(), rng);
  long long ans = 0;
  int num = 0;
  for (int i = 1; i <= min(200, n); ++i) {
    vector<int> one;
    for (int j = 0; j < m; ++j) {
      if ((a[id[i]] >> j) & 1)
        one.push_back(j);
    }
    vector<int> dp(1 << one.size());
    for (int j = 1; j <= n; ++j) {
      int tmp = 0;
      for (int k = 0; k < one.size(); ++k) {
        if ((a[j] >> one[k]) & 1)
          tmp += (1 << k);
      }
      dp[tmp]++;
    }
    for (int j = 0; j < one.size(); ++j) {
      for (int k = 0; k < (1 << one.size()); ++k) {
        if (k & (1 << j))
          dp[k ^ (1 << j)] += dp[k];
      }
    }
    for (int k = 0; k < (1 << one.size()); ++k) {
      if (dp[k] >= (n + 1) / 2 && __builtin_popcount(k) > num) {
        num = __builtin_popcount(k);
        ans = 0;
        for (int j = 0; j < one.size(); ++j) {
          if (k & (1 << j))
            ans += (1ll << one[j]);
        }
      }
    }
  }
  for (int i = 0; i < m; ++i) {
    cout << ((ans >> i) & 1);
  }
  cout << '\n';
  return 0;
}
```