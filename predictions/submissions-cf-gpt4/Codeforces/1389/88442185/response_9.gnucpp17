#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
#define ll long long
#define N 100005
#define Z 6
long long int dp[N][Z];

long long int f(int i, int k, int z, int arr[]) {
  if (k == 0 || i < 0)
    return 0;

  if (dp[i][z] != -1)
    return dp[i][z];

  long long int left = 0;
  if (z > 0)
    left = f(i - 1, k - 1, z - 1, arr);

  long long int right = 0;
  if (i != N-1)
    right = f(i + 1, k - 1, z, arr);

  return dp[i][z] = arr[i] + max(left, right);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    int n, k, z;
    cin >> n >> k >> z;
    int arr[n];
    for (int i = 0; i < n; i++) { cin >> arr[i]; }
    memset(dp, -1, sizeof(dp));
    cout << arr[0] + f(1, k, z, arr) << "\n";
  }
  return 0;
}