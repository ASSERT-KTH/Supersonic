```cpp
#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define mod 1000000007
#define ve vector
#define all(c) c.begin(), c.end()
#define fr(i, a, b) for(int i = a; i < b; i++)
#define frn(i, a, b) for(int i = a; i > b; i--)
#define sz(a) (int)((a).size())
const ll inf = 9e18;
ll tes, n, m;
ve<string> arr;
ve<ve<ve<ll>>> cum;
ve<ve<ve<ve<ll>>>> dp;

void solve() {
  cin >> n >> m;
  arr.resize(n);
  cum.resize(n+1, ve<ve<ll>>(m+1, ve<ll>(2, 0)));
  dp.resize(n+1, ve<ve<ve<ll>>>(m+1, ve<ve<ll>>(2, ve<ll>(2, 0))));
  for(auto& i: arr) cin >> i;
  frn(i, n - 1, -1) {
    fr(j, 0, m) {
      cum[i][j][0] = cum[i + 1][j][0];
      if (arr[i][j] == 'R')
        cum[i][j][0]++;
    }
  }
  frn(j, m - 1, -1) {
    fr(i, 0, n) {
      cum[i][j][1] = cum[i][j + 1][1];
      if (arr[i][j] == 'R')
        cum[i][j][1]++;
    }
  }
  frn(i, n - 1, -1) {
    frn(j, m - 1, -1) {
      if (i == n - 1 && j == m - 1)
        dp[i][j][0][0] = dp[i][j][0][1] = arr[i][j] == 'R' ? 0 : 1;
      else if (arr[i][j] != 'R')
        dp[i][j][0][0] = dp[i][j][0][1] =
            (dp[i + 1][j][0][0] + dp[i][j + 1][0][1]) % mod;
      else {
        dp[i][j][0][0] =
            (dp[i + 1][j + 1][1][0] -
             dp[n - cum[i][j][0] + (arr[i][j] == 'R' ? 1 : 0)][j + 1][1][0] +
             dp[i + 1][j + 1][1][1] - dp[i + 1][m - cum[i][j][1]][1][1] +
             (2ll * mod)) %
            mod;
        dp[i][j][0][1] =
            (dp[i + 1][j + 1][1][0] - dp[n - cum[i][j][0]][j + 1][1][0] +
             dp[i + 1][j + 1][1][1] -
             dp[i + 1][m - cum[i][j][1] + (arr[i][j] == 'R' ? 1 : 0)][1][1] +
             (2ll * mod)) %
            mod;
      }
      dp[i][j][1][0] = (dp[i + 1][j][1][0] + dp[i][j][0][0]) % mod;
      dp[i][j][1][1] = (dp[i][j + 1][1][1] + dp[i][j][0][1]) % mod;
    }
  }
  cout << dp[0][0][0][1] << endl;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  tes = 1;
  while (tes--) {
    solve();
  }
}
```