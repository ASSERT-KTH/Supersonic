```
#include <iostream>
#include <vector>
using namespace std;
typedef long long ll;
const int MAXN = 2000;
const ll MOD = 1e9 + 7;

ll dp[2][MAXN + 1][MAXN + 1];
ll sum[2][MAXN + 1][MAXN + 1];

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n, m;
    cin >> n >> m;
    vector<string> arr(n);
    for (int i = 0; i < n; ++i) cin >> arr[i];
    dp[1][n - 1][m - 1] = dp[0][n - 1][m - 1] = (arr[n - 1][m - 1] != 'R');
    for (int y = n - 1; y >= 0; --y) {
        for (int x = m - 1; x >= 0; --x) {
            if (y < n - 1 || x < m - 1) {
                dp[0][y][x] = dp[0][y + 1][x] + dp[0][y][x + 1] - dp[1][y + 1][x + 1];
                dp[1][y][x] = dp[1][y + 1][x] + dp[1][y][x + 1] - dp[0][y + 1][x + 1];
                if (arr[y][x] == 'R') swap(dp[0][y][x], dp[1][y][x]);
            }
            dp[0][y][x] = (dp[0][y][x] % MOD + MOD) % MOD;
            dp[1][y][x] = (dp[1][y][x] % MOD + MOD) % MOD;
        }
    }
    cout << dp[0][0][0] << "\n";
    return 0;
}
```