```C++
#include <iostream>
#include <vector>
#include <unordered_map>
#define fast ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
using namespace std;
const int N = 1e5 + 1;
vector<unordered_map<int, int>> p(N), r(N), mp(N);
int get(int a, int c) {
  if (p[a][c] == a)
    return a;
  return p[a][c] = get(p[a][c], c);
}
void unite(int a, int b, int c) {
  a = p[a].count(c) ? get(a, c) : p[a][c] = a;
  b = p[b].count(c) ? get(b, c) : p[b][c] = b;
  if (a != b) {
    if (r[a][c] < r[b][c])
      swap(a, b);
    p[b][c] = a;
    if (r[a][c] == r[b][c])
      r[a][c]++;
  }
}
int main() {
  fast;
  int n, m;
  cin >> n >> m;
  while (m--) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b, c);
  }
  int q;
  cin >> q;
  while (q--) {
    int a, b;
    cin >> a >> b;
    if (p[a].size() > p[b].size())
      swap(a, b);
    if (!mp[a][b]) {
      for (auto &c : p[a])
        if (p[b].count(c.first))
          mp[a][b] += (get(a, c.first) == get(b, c.first));
    }
    cout << mp[a][b] << '\n';
  }
  return 0;
}
```