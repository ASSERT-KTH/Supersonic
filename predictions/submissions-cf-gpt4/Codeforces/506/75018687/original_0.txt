```cpp
#include <algorithm>
#include <vector>
#include <unordered_set>
#include <unordered_map>
#define ld double
#define pii pair<int, int>
#define pb push_back
#define left left228
#define right right228
#define all(c) (c).begin(), (c).end()
using namespace std;
const int N = 1e5 + 1, inf = 1e9, sq = 1e5, lg = 20;
vector<unordered_map<int, int>> p(N), r(N), mp(N);

int get_parent(int a, int c) {
  if (p[a][c] == a)
    return a;
  return p[a][c] = get_parent(p[a][c], c);
}

void unite(int a, int b, int c) {
  if (p[a].find(c) == p[a].end())
    p[a][c] = a;
  else
    a = get_parent(a, c);

  if (p[b].find(c) == p[b].end())
    p[b][c] = b;
  else
    b = get_parent(b, c);

  if (a == b)
    return;

  if (r[a][c] == r[b][c])
    r[a][c]++;

  if (r[a][c] > r[b][c])
    p[b][c] = a;
  else
    p[a][c] = b;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b, c);
  }

  int q;
  cin >> q;
  while (q--) {
    int a, b;
    cin >> a >> b;
    if (p[a].size() > p[b].size())
      swap(a, b);
    if (mp[a].find(b) != mp[a].end()) {
      cout << mp[a][b] << endl;
      continue;
    }

    int res = 0;
    for (auto &c : p[a]) {
      if (p[b].find(c.first) != p[b].end())
        res += (get_parent(a, c.first) == get_parent(b, c.first));
    }
    mp[a][b] = res;
    cout << res << '\n';
  }
  return 0;
}
```