```c++
#include <algorithm>
#include <chrono>
#include <iostream>
#include <unordered_map>
#include <vector>
#define ld double
#define pii pair<int, int>
#define pb push_back
#define all(c) (c).begin(), (c).end()
#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
using namespace std;
const int N = 1e5 + 1;
unordered_map<int, int> p[N], r[N], mp[N];
int get(int a, int c) {
  return p[a][c] == a ? a : p[a][c] = get(p[a][c], c);
}
void unite(int a, int b, int c) {
  a = p[a].count(c) ? get(a, c) : p[a][c] = a;
  b = p[b].count(c) ? get(b, c) : p[b][c] = b;
  if (a == b) return;
  if (r[a][c] == r[b][c]) r[a][c]++;
  p[a][c] > r[b][c] ? p[b][c] = a : p[a][c] = b;
}
signed main() {
  fast;
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b, c);
  }
  int q;
  cin >> q;
  while (q--) {
    int a, b;
    cin >> a >> b;
    if (p[a].size() > p[b].size())
      swap(a, b);
    if (mp[a].count(b)) {
      cout << mp[a][b] << '\n';
      continue;
    }
    int res = count_if(all(p[a]), [&p, &a, &b](auto &c) {
      return p[b].count(c.first) && get(a, c.first) == get(b, c.first);
    });
    mp[a][b] = res;
    cout << res << '\n';
  }
  return 0;
}
```