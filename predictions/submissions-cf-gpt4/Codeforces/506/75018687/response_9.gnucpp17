#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;
const int N = 1e5 + 1;
vector<unordered_map<int, int>> parent(N), rank(N), mp(N);

int find_set(int v, int c) {
    if(v == parent[v][c])
        return v;
    return parent[v][c] = find_set(parent[v][c], c);
}

void union_sets(int a, int b, int c) {
    a = parent[a].count(c) ? find_set(a, c) : parent[a][c] = a;
    b = parent[b].count(c) ? find_set(b, c) : parent[b][c] = b;
    if (a != b) {
        if (rank[a][c] < rank[b][c])
            swap(a, b);
        parent[b][c] = a;
        if(rank[a][c] == rank[b][c])
            ++rank[a][c];
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int a, b, c;
        cin >> a >> b >> c;
        union_sets(a, b, c);
    }
    int q;
    cin >> q;
    while (q--) {
        int a, b;
        cin >> a >> b;
        if (parent[a].size() > parent[b].size())
            swap(a, b);
        if (mp[a].count(b)) {
            cout << mp[a][b] << endl;
            continue;
        }
        int res = 0;
        for (auto &c : parent[a]) {
            if (parent[b].count(c.first))
                res += (find_set(a, c.first) == find_set(b, c.first));
        }
        mp[a][b] = res;
        cout << res << '\n';
    }
    return 0;
}