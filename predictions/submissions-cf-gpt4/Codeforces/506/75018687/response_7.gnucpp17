#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

const int N = 1e5 + 1;
vector<unordered_map<int, int>> parent(N), rank_map(N), result_map(N);

int find_set(int a, int c) {
  if (parent[a][c] == a)
    return a;
  return parent[a][c] = find_set(parent[a][c], c);
}

void union_sets(int a, int b, int c) {
  if (parent[a].count(c))
    a = find_set(a, c);
  else
    parent[a][c] = a;
  if (parent[b].count(c))
    b = find_set(b, c);
  else
    parent[b][c] = b;
  if (a == b)
    return;
  if (rank_map[a][c] == rank_map[b][c])
    ++rank_map[a][c];
  if (rank_map[a][c] > rank_map[b][c])
    parent[b][c] = a;
  else
    parent[a][c] = b;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, m;
  cin >> n >> m;
  while (m--) {
    int a, b, c;
    cin >> a >> b >> c;
    union_sets(a, b, c);
  }

  int q;
  cin >> q;
  while (q--) {
    int a, b;
    cin >> a >> b;
    if (parent[a].size() > parent[b].size())
      swap(a, b);
    if (result_map[a].count(b)) {
      cout << result_map[a][b] << '\n';
      continue;
    }
    int res = 0;
    for (const auto &c : parent[a]) {
      if (parent[b].count(c.first))
        res += (find_set(a, c.first) == find_set(b, c.first));
    }
    result_map[a][b] = res;
    cout << res << '\n';
  }
  return 0;
}