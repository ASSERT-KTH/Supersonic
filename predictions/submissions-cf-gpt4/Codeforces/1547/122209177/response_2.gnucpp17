#include <vector>
#include <algorithm>
#include <iostream>
#define int long long int
const int mod = 1e9 + 7;
const int INF = 1e18;
const int N = 4e5 + 5;
std::vector<int> seg_tree(4 * N + 5, 0);
int a[N];
void build_tree(int tree_index, int strt_i, int end_i) {
  if (strt_i == end_i) {
    seg_tree[tree_index] = a[strt_i];
    return;
  }
  int mid = (strt_i + end_i) >> 1;
  build_tree(tree_index << 1, strt_i, mid);
  build_tree((tree_index << 1) + 1, mid + 1, end_i);
  seg_tree[tree_index] =
      std::gcd(seg_tree[tree_index << 1], seg_tree[(tree_index << 1) + 1]);
}
int query(int tree_index, int strt_i, int end_i, int q_strt, int q_end) {
  if (strt_i > q_end || end_i < q_strt)
    return 0;
  if (q_strt <= strt_i && q_end >= end_i)
    return seg_tree[tree_index];
  int mid = (strt_i + end_i) >> 1;
  int l = query(tree_index << 1, strt_i, mid, q_strt, q_end);
  int r = query((tree_index << 1) + 1, mid + 1, end_i, q_strt, q_end);
  return std::gcd(l, r);
}
void solve() {
  int n;
  std::cin >> n;
  for(int i = 1; i < n + 1; ++i) {
    std::cin >> a[i]; 
    a[i + n] = a[i];
  }
  build_tree(1, 1, 2 * n);
  int ans = 0, g = 0;
  for(int i = 1; i < n + 1; ++i) {
    g = std::gcd(g, a[i]);
  }
  for(int i = 1; i < n + 1; ++i) {
    int r = 2 * n, l = i + 1, temp = INF, cnt = 0;
    if (a[i] == g)
      continue;
    while (l <= r) {
      int mid = (l + r) >> 1;
      int x = query(1, 1, 2 * n, l, mid);
      int y = std::gcd(x, a[i]);
      if (y == g)
        temp = std::min(temp, mid - l + 1 + cnt), r = mid - 1;
      else
        a[i] = std::gcd(a[i], x), cnt += mid - l + 1, l = mid + 1;
    }
    ans = std::max(ans, temp);
  }
  std::cout << ans << std::endl;
  return;
}
signed main() {
  std::ios::sync_with_stdio(0);
  std::cin.tie(0);
  int t = 1;
  std::cin >> t;
  for(int i = 1; i < t + 1; ++i) {
      solve();
  }
  return 0;
}