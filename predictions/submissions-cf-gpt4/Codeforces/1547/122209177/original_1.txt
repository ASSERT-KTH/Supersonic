```c++
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
using ll = long long;

const ll mod = 1e9 + 7;
const ll INF = 1e18;
const ll N = 4e5 + 5;
vector<ll> seg_tree(4 * N + 5, 0);
ll a[N];

void build_tree(ll tree_index, ll strt_i, ll end_i) {
  if (strt_i == end_i) {
    seg_tree[tree_index] = a[strt_i];
    return;
  }
  ll mid = (strt_i + end_i) / 2;
  build_tree(tree_index * 2, strt_i, mid);
  build_tree(tree_index * 2 + 1, mid + 1, end_i);
  seg_tree[tree_index] =
      __gcd(seg_tree[tree_index * 2], seg_tree[tree_index * 2 + 1]);
}

ll query(ll tree_index, ll strt_i, ll end_i, ll q_strt, ll q_end) {
  if (strt_i > q_end || end_i < q_strt)
    return 0;
  if (q_strt <= strt_i && q_end >= end_i)
    return seg_tree[tree_index];
  ll mid = (strt_i + end_i) / 2;
  ll l = query(2 * tree_index, strt_i, mid, q_strt, q_end);
  ll r = query(2 * tree_index + 1, mid + 1, end_i, q_strt, q_end);
  return __gcd(l, r);
}

void solve() {
  ll n;
  cin >> n;
  for(ll i = 1; i <= n; ++i) {
    cin >> a[i];
    a[i + n] = a[i];
  }
  build_tree(1, 1, 2 * n);
  ll ans = 0, g = 0;
  for(ll i = 1; i <= n; ++i) 
    g = __gcd(g, a[i]);
  for(ll i = 1; i <= n; ++i) {
    ll r = 2 * n, l = i + 1, temp = INF, cnt = 0;
    if (a[i] == g)
      continue;
    while (l <= r) {
      ll mid = (l + r) / 2;
      ll x = query(1, 1, 2 * n, l, mid);
      ll y = __gcd(x, a[i]);
      if (y == g)
        temp = min(temp, mid - l + 1 + cnt), r = mid - 1;
      else
        a[i] = __gcd(a[i], x), cnt += mid - l + 1, l = mid + 1;
    }
    ans = max(ans, temp);
  }
  cout << ans << '\n';
}

int main() {
  cin.sync_with_stdio(0);
  cin.tie(0);
  ll t;
  cin >> t;
  while(t--) { 
     solve(); 
  }
  return 0;
}
```