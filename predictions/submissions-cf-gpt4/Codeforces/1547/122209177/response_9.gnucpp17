#include <bits/stdc++.h>
using namespace std;
#define int long long int
const int INF = 1e18;
const int N = 4e5 + 5;
int seg_tree[4 * N + 5];
int a[N];

void build_tree(int ti, int si, int ei) {
  if (si == ei) {
    seg_tree[ti] = a[si];
    return;
  }
  int mid = si + ((ei - si) >> 1);
  build_tree(ti << 1, si, mid);
  build_tree(ti << 1 | 1, mid + 1, ei);
  seg_tree[ti] = __gcd(seg_tree[ti << 1], seg_tree[ti << 1 | 1]);
}

int query(int ti, int si, int ei, int qs, int qe) {
  if (ei < qs || si > qe)
    return 0;
  if (qs <= si && qe >= ei)
    return seg_tree[ti];
  int mid = si + ((ei - si) >> 1);
  return __gcd(query(ti << 1, si, mid, qs, qe), query(ti << 1 | 1, mid + 1, ei, qs, qe));
}

void solve() {
  int n;
  cin >> n;
  for (int i = 1; i <= n; ++i) {
    cin >> a[i];
    a[i + n] = a[i];
  }
  build_tree(1, 1, 2 * n);
  int ans = 0, g = 0;
  for (int i = 1; i <= n; ++i)
    g = __gcd(g, a[i]);
  for (int i = 1; i <= n; ++i) {
    if (a[i] == g)
      continue;
    int r = 2 * n, l = i + 1, temp = INF, cnt = 0;
    while (l <= r) {
      int mid = l + ((r - l) >> 1);
      int x = query(1, 1, 2 * n, l, mid);
      int y = __gcd(x, a[i]);
      if (y == g) {
        temp = min(temp, mid - l + 1 + cnt);
        r = mid - 1;
      } else {
        a[i] = __gcd(a[i], x);
        cnt += mid - l + 1;
        l = mid + 1;
      }
    }
    ans = max(ans, temp);
  }
  cout << ans << '\n';
}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int t;
  cin >> t;
  while (t--) solve();
  return 0;
}