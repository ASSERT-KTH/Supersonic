```
#include <iostream>
#include <vector>
#include <cmath>

const int MAX = 1e6 + 10;
std::vector<int> prime(MAX);
std::vector<bool> is_prime(MAX, true);
std::vector<int> ans(MAX);

void euler(const int& n) {
  is_prime[0] = is_prime[1] = false;
  for (int i = 2; i <= n; ++i) {
    if (is_prime[i])
      prime.push_back(i);
    for (auto& p : prime) {
      if (i * p > n)
        break;
      is_prime[i * p] = false;
      if (i % p == 0)
        break;
    }
  }
}

int main() {
  euler(MAX - 1);
  ans[0] = 0;
  for (int i = 1; i < MAX; ++i)
    ans[i] = ans[i - 1] + (is_prime[i] ? 1 : 0);
  int t;
  std::cin >> t;
  while (t--) {
    int n;
    std::cin >> n;
    if (n <= 3) {
      std::cout << n << std::endl;
      continue;
    }
    int l = 1, r = prime.size() - 1;
    while (l + 1 < r) {
      int mid = l + (r - l) / 2;
      if ((long long)prime[mid] * prime[mid] <= (long long)n)
        l = mid;
      else
        r = mid;
    }
    std::cout << ans[n] - ans[prime[l]] + 1 << std::endl;
  }
  return 0;
}
```