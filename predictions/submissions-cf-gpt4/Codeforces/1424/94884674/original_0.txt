```c++
#include <iostream>
#include <vector>
#include <cmath>

const int maxn = 1e6 + 10;
std::vector<bool> is_prime(maxn, true);
std::vector<int> primes;
std::vector<int> cumulative(maxn, 0);

void sieve(int n) {
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i * i <= n; ++i) {
        if (is_prime[i]) {
            for (int j = i * i; j <= n; j += i) {
                is_prime[j] = false;
            }
        }
    }

    for(int i = 2; i <= n; i++) {
        if (is_prime[i]) primes.push_back(i);
        cumulative[i] = cumulative[i - 1] + is_prime[i];
    }
}

int main() {
    sieve(maxn - 9);
    int t;
    std::cin >> t;

    while (t--) {
        int n;
        std::cin >> n;

        if (n <= 3) {
            std::cout << n << "\n";
            continue;
        }

        int l = 0, r = primes.size() - 1;
        while (l < r) {
            int mid = l + (r - l + 1) / 2;
            if (1LL * primes[mid] * primes[mid] <= n)
                l = mid;
            else
                r = mid - 1;
        }
        std::cout << cumulative[n] - cumulative[primes[l] - 1] + 1 << "\n";
    }
    return 0;
}
```