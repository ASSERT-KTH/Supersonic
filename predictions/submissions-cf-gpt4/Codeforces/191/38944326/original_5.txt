```c++
#include <algorithm>
#include <cstdio>
#include <unordered_map>
#include <utility>
#include <vector>
using namespace std;
const int N = 100001;
int par[N], hev[N], siz[N], dep[N], top[N], dif[N], bak[N];
vector<int> edg[N];
pair<int, int> out[N];
unordered_map<int, unordered_map<int, int>> ans;

void dfs(int u) {
  siz[u] = 1;
  for (int v : edg[u]) {
    if (v == par[u]) continue;
    par[v] = u;
    dep[v] = dep[u] + 1;
    dfs(v);
    siz[u] += siz[v];
    if (hev[u] == -1 || siz[v] > siz[hev[u]]) hev[u] = v;
  }
}

void dfs2(int u) {
  for (int v : edg[u]) {
    if (v == par[u]) continue;
    top[v] = (v == hev[u]) ? top[u] : v;
    dfs2(v);
  }
}

void path(int u, int v) {
  while (top[u] != top[v]) {
    if (dep[top[u]] > dep[top[v]]) swap(u, v);
    dif[top[v]]++;
    dif[v]--;
    bak[top[v]]++;
    v = par[top[v]];
  }
  if (dep[u] > dep[v]) swap(u, v);
  dif[u]++;
  dif[v]--;
}

void dfs3(int u, int cnt) {
  for (int v : edg[u]) {
    if (v == par[u]) continue;
    int& tmp = ans[min(u, v)][max(u, v)];
    tmp += (v == hev[u]) ? (cnt + dif[u]) : bak[v];
    dfs3(v, (v == hev[u]) ? cnt + dif[u] : 0);
  }
}

int main() {
  int n, k, u, v;
  scanf("%d\n", &n);
  for (int i = 0; i < n - 1; i++) {
    scanf("%d%d", &u, &v);
    u--;
    v--;
    edg[u].push_back(v);
    edg[v].push_back(u);
    out[i] = minmax(u, v);
    ans[u][v] = 0;
  }
  par[0] = dep[0] = top[0] = dif[0] = bak[0] = 0;
  dfs(0);
  dfs2(0);
  scanf("%d\n", &k);
  while (k--) {
    scanf("%d%d", &u, &v);
    u--; v--;
    path(u, v);
  }
  dfs3(0, 0);
  for (int i = 0; i < n - 1; i++)
    printf("%d ", ans[out[i].first][out[i].second]);
  printf("\n");
  return 0;
}
```