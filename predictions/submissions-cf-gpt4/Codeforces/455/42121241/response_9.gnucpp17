#include <bits/stdc++.h>
using namespace std;

const int N = 200200;
const int S = 450;
int n, m, cnt, l, r, x, y, tot, opt, a[N], ans[N], bel[N];
struct Query {
    int l, r, x, y, id;
} q[N];
vector<int> v[N];
int sum[N], pre[N];

bool cmp1(Query a, Query b) {
    if (bel[a.l] != bel[b.l]) return a.l < b.l;
    if (bel[a.r] != bel[b.r]) return a.r < b.r;
    return a.x < b.x;
}

bool cmp2(int a, int b) { return a > b; }

int main() {
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; i++) {
        scanf("%d", &a[i]);
        v[i / S + 1].push_back(a[i]);
    }
    for (int i = 1; i <= n / S + 1; i++) sort(v[i].begin(), v[i].end(), cmp2);
    for (int i = 1; i <= m; i++) {
        scanf("%d", &opt);
        if (opt == 1) {
            scanf("%d%d", &x, &y);
            a[x] = y;
            v[x / S + 1].clear();
            for (int j = S * (x / S); j <= min(n, S * (x / S + 1) - 1); j++)
                v[x / S + 1].push_back(a[j]);
            sort(v[x / S + 1].begin(), v[x / S + 1].end(), cmp2);
        } else {
            scanf("%d%d%d", &l, &r, &x);
            q[++cnt] = (Query){l, r, x, y, cnt};
            bel[cnt] = l / S + 1;
        }
    }
    sort(q + 1, q + cnt + 1, cmp1);
    int l = 1, r = 0;
    for (int i = 1; i <= cnt; i++) {
        while (l < q[i].l) {
            sum[a[l]]--;
            if (sum[a[l]] + 1 == q[i].x) tot--;
            if (sum[a[l]] == q[i].x) tot++;
            l++;
        }
        while (l > q[i].l) {
            l--;
            sum[a[l]]++;
            if (sum[a[l]] - 1 == q[i].x) tot--;
            if (sum[a[l]] == q[i].x) tot++;
        }
        while (r < q[i].r) {
            r++;
            sum[a[r]]++;
            if (sum[a[r]] - 1 == q[i].x) tot--;
            if (sum[a[r]] == q[i].x) tot++;
        }
        while (r > q[i].r) {
            sum[a[r]]--;
            if (sum[a[r]] + 1 == q[i].x) tot--;
            if (sum[a[r]] == q[i].x) tot++;
            r--;
        }
        ans[q[i].id] = tot;
        if (q[i].x == 1) ans[q[i].id] = r - l + 1;
    }
    for (int i = 1; i <= cnt; i++) printf("%d\n", ans[i]);
    return 0;
}