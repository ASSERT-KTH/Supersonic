#include <cmath>
#include <cstdio>
#include <vector>
using namespace std;
struct dat {
  static int n;
  vector<int> A;
  dat *next = NULL;
  int count(int p, int x) const {
    if (p > size()) {
      return next->count(p - size(), x);
    }
    return count(A.begin(), A.begin() + p, x) - A.begin();
  }
  void insert(int p, int x) {
    if (p > size()) {
      next->insert(p - size(), x);
      return;
    }
    A.insert(A.begin() + p, x);
    split();
  }
  int erase(int p) {
    if (size() < p)
      return next->erase(p - size());
    int x = A[p - 1];
    A.erase(A.begin() + p - 1);
    return x;
  }
  void push_back(int x) {
    A.push_back(x);
  }
  int pop_back() {
    int x = A.back();
    A.pop_back();
    return x;
  }
  int size() const { return A.size(); }
  void split() {
    if (size() < n << 1)
      return;
    dat *tmp = new dat;
    while (size() > n)
      tmp->A.insert(tmp->A.begin(), pop_back());
    tmp->next = next;
    next = tmp;
  }
  void merge() {
    if (next == NULL || size() + next->size() > n)
      return;
    dat *tmp = next;
    while (next->size() > 0)
      push_back(tmp->A[0]), tmp->A.erase(tmp->A.begin());
    next = tmp->next;
    delete tmp;
  }
};
int dat::n;
int main() {
  int n, m, last = 0;
  scanf("%d", &n);
  dat::n = ceil(sqrt(n << 2));
  dat *D = new dat, *cur = D;
  for (int i = 0; i < n; i++) {
    if (cur->size() >= dat::n) {
      cur->next = new dat;
      cur = cur->next;
    }
    int x;
    scanf("%d", &x);
    cur->push_back(x);
  }
  for (scanf("%d", &m); m > 0; m--) {
    int op, l, r, k;
    scanf("%d", &op);
    if (op == 1) {
      scanf("%d%d", &l, &r);
      l = (l + last - 1) % n + 1;
      r = (r + last - 1) % n + 1;
      D->insert(l - 1, D->erase(r));
    } else {
      scanf("%d%d%d", &l, &r, &k);
      l = (l + last - 1) % n + 1;
      r = (r + last - 1) % n + 1;
      k = (k + last - 1) % n + 1;
      l = D->count(l - 1, k);
      r = D->count(r, k);
      printf("%d\n", last = r - l);
    }
  }
}