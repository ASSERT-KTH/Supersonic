```c++
#include <bits/stdc++.h>
using namespace std;
#define int long long
#define pb push_back
#define mp make_pair
using pi = pair<int, int>;
using vi = vector<int>;
#define ff first
#define ss second
const int NUM = 1000030;
const int N = 1000000;
vector<int> lp, sieve;
vector<int> pr;
void primefactor();
void test() {
  int n, m;
  cin >> n >> m;
  if (n == 2) {
    cout << 2 << " " << 2 << "\n" << 1 << " " << 2 << " " << 2 << "\n";
    return;
  }
  int total_sum = *lower_bound(pr.begin(), pr.end(), n);
  cout << 2 << " " << total_sum << "\n";
  vector<pair<pi, int>> edges;
  edges.reserve(n); // Avoid reallocation
  int sum = 2;
  edges.pb(mp(pi(1, n), 2));
  for (int i = 2; i < n - 1; ++i) {
    edges.pb(mp(pi(1, i), 1));
    sum++;
  }
  if (n - 1 != 1)
    edges.pb(mp(pi(1, n - 1), total_sum - sum));
  m -= edges.size();
  for (int i = 2; i <= n && m > 0; ++i) {
    for (int j = i + 1; j <= n && m > 0; ++j) {
      edges.pb(mp(pi(i, j), max(total_sum - sum, 2ll) + 1));
      m--;
    }
  }
  for (auto &edge: edges) {
    cout << edge.ff.ff << " " << edge.ff.ss << " " << edge.ss << "\n";
  }
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  primefactor();
  test();
  return 0;
}
void primefactor() {
  lp.resize(N + 1, 0);
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (int j = 0; j < (int)pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}
```