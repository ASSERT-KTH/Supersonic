#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using pi = pair<ll, ll>;
using vi = vector<ll>;
using vvi = vector<vector<ll>>;
constexpr ll NUM = 1000030;
constexpr ll N = 1000000;
vector<ll> lp(N + 1, 0);
vector<ll> pr;
vector<pair<pi, ll>> edges;
void primefactor();
ll binpow(ll a, ll b, ll mod);
ll gcd(ll a, ll b);
bool comp(ll a, ll b);
void test() {
  ll n, m;
  cin >> n >> m;
  if (n == 2) {
    cout << 2 << " " << 2 << "\n" << 1 << " " << 2 << " " << 2 << "\n";
    return;
  }
  ll total_sum = *lower_bound(pr.begin(), pr.end(), n);
  cout << 2 << " " << total_sum << "\n";
  ll sum = 2;
  edges.emplace_back(make_pair(1, n), 2);
  for (ll i = 2; i < n - 1; i++) {
    edges.emplace_back(make_pair(1, i), 1);
    sum++;
  }
  if (n - 1 != 1)
    edges.emplace_back(make_pair(1, n - 1), total_sum - sum);
  m -= edges.size();
  for (ll i = 2; i <= n; i++) {
    if (m == 0)
      break;
    for (ll j = i + 1; j <= n; j++) {
      if (m == 0)
        break;
      edges.emplace_back(make_pair(i, j), max(total_sum - sum, 2ll) + 1);
      m--;
    }
  }
  for (const auto& e : edges) {
    cout << e.first.first << " " << e.first.second << " " << e.second << "\n";
  }
  edges.clear();
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  primefactor();
  ll t = 1;
  while (t--)
    test();
  return 0;
}
void primefactor() {
  for (ll i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (ll j = 0; j < pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}
ll binpow(ll a, ll b, ll mod) {
  ll res = 1;
  while (b > 0) {
    if (b & 1)
      res = (res * a) % mod;
    a = (a * a) % mod;
    b >>= 1;
  }
  return res % mod;
}
ll gcd(ll a, ll b) {
  if (b == 0)
    return a;
  else
    return gcd(b, a % b);
}
bool comp(ll a, ll b) { return a > b; }