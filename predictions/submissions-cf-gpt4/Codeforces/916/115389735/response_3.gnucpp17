#include <iostream>
#include <vector>
#include <algorithm>

#define int long long
#define pb push_back
#define ppb pop_back
#define mp make_pair
using pi = std::pair<int, int>;
using vi = std::vector<int>;
using vvi = std::vector<vi>;
#define ff first
#define ss second
#define all(x) x.begin(), x.end()
#define sz(x) (int)(x).size()
const int NUM = 1000030;
const int N = 1000000;
std::vector<int> lp, sieve, pr;

int binpow(int a, int b, int mod);
void primefactor();
void test();

signed main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  primefactor();
  int t = 1;
  while (t--)
    test();
  return 0;
}

void primefactor() {
  lp.resize(N + 1, 0);
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (int j = 0; j < (int)pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}

void test() {
  int n, m;
  std::cin >> n >> m;
  if (n == 2) {
    std::cout << 2 << " " << 2 << '\n';
    std::cout << 1 << " " << 2 << " " << 2 << '\n';
    return;
  }
  int total_sum = *lower_bound(all(pr), n);
  std::cout << 2 << " " << total_sum << '\n';
  std::vector<pi> edges(n-1);
  int sum = 2;
  edges[0] = mp(1, n);
  for (int i = 2; i < n; i++) {
    edges[i-1] = mp(1, i);
    sum++;
  }
  if (n - 1 != 1)
    edges[n-2].ss = total_sum - sum;
  m -= sz(edges);
  for (int i = 2; i <= n; i++) {
    if (m == 0)
      break;
    for (int j = i + 1; j <= n; j++) {
      if (m == 0)
        break;
      edges.emplace_back(mp(i, j), std::max(total_sum - sum, 2ll) + 1);
      m--;
    }
  }
  for (const auto& edge : edges) {
    std::cout << edge.ff << " " << edge.ss << '\n';
  }
}

int binpow(int a, int b, int mod) {
  int res = 1;
  while (b > 0) {
    if (b & 1)
      res = (res * a) % mod;
    a = (a * a) % mod;
    b >>= 1;
  }
  return res % mod;
}