#include <iostream>
#include <algorithm>
#include <vector>
#include <iterator>

#define int long long

std::vector<int> prime_numbers(int N) {
    std::vector<bool> prime(N + 1, true);
    prime[0] = prime[1] = false;
    for (int i = 2; i * i <= N; i++) {
        if (prime[i]) {
            for (int j = i * i; j <= N; j += i)
                prime[j] = false;
        }
    }
    std::vector<int> primes;
    for (int i = 2; i <= N; i++) {
        if (prime[i]) {
            primes.push_back(i);
        }
    }
    return primes;
}

void solve() {
    int n, m;
    std::cin >> n >> m;
    const auto& primes = prime_numbers(n);
    auto total_sum = *std::lower_bound(primes.begin(), primes.end(), n);

    std::cout << 2 << " " << total_sum << "\n";

    int sum = 2;
    for (int i = 2; i < n; i++) {
        std::cout << 1 << " " << i << " " << 1 << "\n";
        sum++;
    }
    std::cout << 1 << " " << n << " " << total_sum - sum + 1 << "\n";

    m -= n - 1;
    for (int i = 2; i <= n; i++) {
        for (int j = i + 1; j <= n && m; j++, m--) {
            std::cout << i << " " << j << " " << total_sum + 1 << "\n";
        }
    }
}

signed main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    solve();
    return 0;
}