```c++
#include <iostream>
#include <vector>
#include <algorithm>
#define int long long
#define pb push_back
#define mp make_pair
using pi = pair<int, int>;
using vi = vector<int>;
#define ff first
#define ss second

const int N = 1000000;
vi prime;
void generatePrime();

void test() {
  int n, m;
  cin >> n >> m;
  if (n == 2) {
    cout << 2 << " " << 2 << endl;
    cout << 1 << " " << 2 << " " << 2 << endl;
    return;
  }
  int total_sum = *lower_bound(prime.begin(), prime.end(), n);
  cout << 2 << " " << total_sum << endl;
  vector<pair<pi, int>> edges;
  int sum = 2;
  edges.pb(mp(pi(1, n), 2));
  for (int i = 2; i < n - 1; i++) {
    edges.pb(mp(pi(1, i), 1));
    sum++;
  }
  if (n - 1 != 1)
    edges.pb(mp(pi(1, n - 1), total_sum - sum));
  m -= edges.size();
  for (int i = 2; i <= n && m > 0; i++) {
    for (int j = i + 1; j <= n && m > 0; j++) {
      edges.pb(mp(pi(i, j), max(total_sum - sum, 2ll)));
      m--;
    }
  }
  for (const auto &edge : edges) {
    cout << edge.ff.ff << " " << edge.ff.ss << " " << edge.ss << "\n";
  }
}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  generatePrime();
  test();
  return 0;
}

void generatePrime() {
  vector<bool> is_prime(N+1, true);
  for (int i = 2; i <= N; i++) {
    if (is_prime[i]) {
      prime.pb(i);
      for (int j = 2*i; j <= N; j += i)
        is_prime[j] = false;
    }
  }
}
```