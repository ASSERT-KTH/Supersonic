```c++
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
#define int long long
using vi = vector<int>;
const int N = 1000000;
vector<int> lp, pr;
void primefactor();
void test() {
  int n, m;
  cin >> n >> m;
  if (n == 2) {
    cout << 2 << " " << 2 << "\n" << 1 << " " << 2 << " " << 2 << "\n";
    return;
  }
  int total_sum = *lower_bound(pr.begin(), pr.end(), n);
  cout << 2 << " " << total_sum << "\n";
  vector<pair<pair<int, int>, int>> edges;
  int sum = 2;
  edges.push_back({{1, n}, 2});
  for (int i = 2; i < n - 1; ++i) {
    edges.push_back({{1, i}, 1});
    sum++;
  }
  if (n - 1 != 1)
    edges.push_back({{1, n - 1}, total_sum - sum});
  m -= (int)edges.size();
  for (int i = 2; i <= n; ++i) {
    if (m == 0)
      break;
    for (int j = i + 1; j <= n; ++j) {
      if (m == 0)
        break;
      edges.push_back({{i, j}, max(total_sum - sum, 2ll) + 1});
      m--;
    }
  }
  for (auto &edge : edges)
    cout << edge.first.first << " " << edge.first.second << " " << edge.second << "\n";
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  primefactor();
  test();
  return 0;
}
void primefactor() {
  lp.resize(N + 1, 0);
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (int j = 0; j < (int)pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}
```