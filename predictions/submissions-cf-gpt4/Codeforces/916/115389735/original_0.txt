```cpp
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
#define int long long
#define pb push_back
#define mp make_pair
#define all(x) x.begin(), x.end()
#define sz(x) (int)(x).size()
const int N = 1000000;
vector<int> pr;
void primefactor();

void test() {
  int n, m;
  cin >> n >> m;
  if (n == 2) {
    cout << 2 << " " << 2 << endl;
    cout << 1 << " " << 2 << " " << 2 << endl;
    return;
  }
  int total_sum = *lower_bound(all(pr), n);
  cout << 2 << " " << total_sum << endl;
  vector<pair<int, pair<int, int>>> edges;
  int sum = 2;
  edges.pb(mp(1, mp(n, 2)));
  for (int i = 2; i < n - 1; i++) {
    edges.pb(mp(1, mp(i, 1)));
    sum++;
  }
  if (n - 1 != 1)
    edges.pb(mp(1, mp(n - 1, total_sum - sum)));
  m -= sz(edges);
  for (int i = 2; i <= n; i++) {
    if (m == 0)
      break;
    for (int j = i + 1; j <= n; j++) {
      if (m == 0)
        break;
      edges.pb(mp(i, mp(j, max(total_sum - sum, 2ll) + 1)));
      m--;
    }
  }
  for (auto &edge : edges) {
    cout << edge.first << " " << edge.second.first << " " << edge.second.second
         << "\n";
  }
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  primefactor();
  int t = 1;
  while (t--)
    test();
  return 0;
}
void primefactor() {
  vector<int> lp(N + 1, 0);
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (int j = 0; j < (int)pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}
```