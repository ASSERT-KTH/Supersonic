```
#include <stdio.h>
#include <stdbool.h>

int main() {
  int n, S[10000], q, T[500], i, j, cnt = 0;
  bool found[1000001] = {false}; // Initialize all elements to false
  scanf("%d", &n);
  for (i = 0; i < n; i++) {
    scanf("%d", &S[i]);
    found[S[i]] = true;
  }
  scanf("%d", &q);
  for (j = 0; j < q; j++)
    scanf("%d", &T[j]);
  for (i = 0; i < q; i++)
    if (found[T[i]])
      cnt++;
  printf("%d\n", cnt);
  return 0;
}
``` 

Explanation:

This new implementation avoids the nested loops for checking if an element of `T` is present in `S` and instead uses a boolean array `found` to keep track of which elements of `S` are present. The boolean array is indexed by the value of the element of `S` and initialized to `false` for all possible values. Then, during the loop that reads the elements of `S`, the corresponding element of `found` is set to `true`. Finally, the loop that checks if elements of `T` are present in `S` just checks the corresponding element of `found`. This optimization reduces the running time from O(nq) to O(n+q) and eliminates the need for the counter variable `cnt` altogether.