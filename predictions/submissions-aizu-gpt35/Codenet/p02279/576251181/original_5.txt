```c++
#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int id;
    struct node *parent;
    struct node *leftMostChild;
    struct node *rightSibling;
} *nodePointer;

nodePointer make1node(void);
void printNode(nodePointer);
int getDepth(const nodePointer);
void printType(const nodePointer);
void printChild(const nodePointer);
nodePointer init(const int);
nodePointer head;

int main(void) {
    int n;
    scanf("%d", &n);

    nodePointer *arr = (nodePointer*)calloc(n, sizeof(nodePointer));
    head = init(-1);

    for(int i = 0; i < n; ++i)
        arr[i] = init(i);

    for(int i = 0; i < n; ++i) {
        int id, k, c, c2 = -1;
        scanf("%d %d", &id, &k);

        for(int j = 0; j < k; ++j) {
            scanf("%d",&c);
            if(j == 0)
                arr[id]->leftMostChild = arr[c];
            else
                arr[c2]->rightSibling = arr[c];
            arr[c]->parent = arr[id];
            c2 = c;
        }
    }
    for(int i = 0; i < n; ++i)
        printNode(arr[i]);

    for(int i = 0; i < n; ++i)
        free(arr[i]);
    free(arr);
    return 0;
}

nodePointer init(const int id) {
    nodePointer p = make1node();
    p->id = id;
    p->parent = NULL;
    p->leftMostChild = NULL;
    p->rightSibling = NULL;
    return p;
}

void printNode(const nodePointer p) {
    printf("node %d: parent = %d, depth = %d, ", p->id, (p->parent == NULL) ? -1 : p->parent->id, getDepth(p));
    printType(p);
    printf(", ");
    printChild(p);
    printf("\n");
}

nodePointer make1node(void) {
    return (nodePointer)malloc(sizeof(struct node));
}

int getDepth(const nodePointer p) {
    int depth = 0;
    for(nodePointer i = p; i->parent != NULL; i = i->parent)
        ++depth;
    return depth;
}

void printType(const nodePointer p) {
    if(p->parent == NULL)
        printf("root");
    else if(p->leftMostChild == NULL)
        printf("leaf");
    else
        printf("internal node");
}

void printChild(const nodePointer p) {
    printf("[");
    if(p->leftMostChild != NULL) {
        printf("%d", p->leftMostChild->id);
        for(nodePointer i = p->leftMostChild->rightSibling; i != NULL; i = i->rightSibling)
            printf(", %d", i->id);
    }
    printf("]");
}
```