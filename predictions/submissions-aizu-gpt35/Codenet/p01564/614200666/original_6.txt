```c++
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

typedef long long ll;
const int INF = 1LL << 25;
const int DF = 1LL << 25;

struct LCNode {
  int sz, v, sm, lz;
  int lsm, rsm, ma, mv;
  bool rev;
  LCNode *p, *l, *r;

  LCNode(int v) : p(nullptr), l(nullptr), r(nullptr), sz(1), v(v), sm(v), lz(DF), rev(false),
                  lsm(max(v, 0)), rsm(max(v, 0)), ma(max(v, 0)), mv(v) {}

  void push() {
    if (rev) {
      if (l != nullptr) {
        l->reverseData();
      }
      if (r != nullptr) {
        r->reverseData();
      }
      rev = false;
    }
    if (lz != DF) {
      if (l != nullptr) {
        l->lazyData(lz);
      }
      if (r != nullptr) {
        r->lazyData(lz);
      }
      lz = DF;
    }
  }

  LCNode *update() {
    sz = 1 + (l ? l->sz : 0) + (r ? r->sz : 0);
    sm = v + (l ? l->sm : 0) + (r ? r->sm : 0);
    lsm = max(l ? l->lsm : 0, (l ? l->sm : 0) + v + max(0, r ? r->lsm : 0));
    rsm = max(r ? r->rsm : 0, (r ? r->sm : 0) + v + max(0, l ? l->rsm : 0));
    ma = max(max(l ? l->ma : 0, r ? r->ma : 0), max(0, l ? l->rsm : 0) + v + max(0, r ? r->lsm : 0));
    mv = max(v, max(l ? l->mv : -INF, r ? r->mv : -INF));
    return this;
  }

  void reverseData() {
    swap(l, r);
    swap(lsm, rsm);
    rev ^= true;
  }

  void lazyData(int d) {
    v = d;
    sm = sz * d;
    lsm = rsm = ma = max(0, sm);
    mv = d;
    lz = d;
  }

  void evert() {
    expose();
    reverseData();
  }

  void expose() {
    LCNode *u = this, *prev = nullptr;
    while (u != nullptr) {
      u->push();
      u->r = prev;
      prev = u;
      u = u->p;
    }
    this->splay();
  }

  void splay() {
    push();
    while (p != nullptr) {
      if (p->p == nullptr) {
        p->push();
        push();
        if (pos() == -1) {
          rotR();
        } else {
          rotL();
        }
      } else if (pos() == pos(p)) {
        p->push();
        push();
        (p->pos() == -1 ? p->rotR() : p->rotL());
        (pos() == -1 ? rotR() : rotL());
      } else {
        push();
        p->push();
        (pos() == -1 ? rotR() : rotL());
        (pos() == -1 ? rotR() : rotL());
      }
    }
  }

  void rotR() {
    LCNode *q = l;
    q->p = p;
    if (p != nullptr) {
      if (pos() == -1) {
        p->l = q;
      } else {
        p->r = q;
      }
    }
    l = q->r;
    if (q->r != nullptr) {
      q->r->p = this;
    }
    q->r = this;
    p = q;
    this->update();
    q->update();
  }

  void rotL() {
    LCNode *q = r;
    q->p = p;
    if (p != nullptr) {
      if (pos() == -1) {
        p->l = q;
      } else {
        p->r = q;
      }
    }
    r = q->l;
    if (q->l != nullptr) {
      q->l->p = this;
    }
    q->l = this;
    p = q;
    this->update();
    q->update();
  }

  int pos() {
    if (p != nullptr) {
      if (p->l == this) {
        return -1;
      }
      if (p->r == this) {
        return 1;
      }
    }
    return 0;
  }
};

const int MN = 201000;
LCNode tr[MN];

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int n, q;
  cin >> n >> q;
  for (int i = 0; i < n; i++) {
    int w;
    cin >> w;
    tr[i] = LCNode(w);
  }
  for (int i = 0; i < n - 1; i++) {
    int s, e;
    cin >> s >> e;
    s--;
    e--;
    tr[s].evert();
    tr[e].expose();
    tr[s].p = &tr[e];
  }
  for (int i = 0; i < q; i++) {
    int t, a, b, c;
    cin >> t >> a >> b >> c;
    a--;
    b--;
    if (t == 1) {
      tr[a].evert();
      tr[b].expose();
      tr[b].lazyData(c);
    } else {
      tr[a].evert();
      tr[b].expose();
      int d = tr[b].mv < 0 ? tr[b].mv : tr[b].ma;
      cout << d << "\n";
    }
  }
}
```