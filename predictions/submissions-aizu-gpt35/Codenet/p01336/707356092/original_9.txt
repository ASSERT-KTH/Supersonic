```c++
#define _USE_MATH_DEFINES
#define INF 0x3f3f3f3f
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> P;
typedef pair<int, P> PP;
int tx[] = {0, 1, 0, -1};
int ty[] = {-1, 0, 1, 0};
static const double EPS = 1e-8;
class Data {
public:
  string mName;
  int mC, mV, mD, mL;
  Data(string _n, int _c, int _v, int _d, int _l) {
    mName = _n;
    mC = _c;
    mV = _v;
    mD = _d;
    mL = _l;
  }
};
const int MAX_N = 300;
const int MAX_M = 300;
int dp[MAX_N + 1][MAX_M + 1][3];
int main() {
  int N, M;
  string line;
  stringstream ss;
  while (getline(cin, line)) {
    ss << line;
    ss >> N >> M;
    ss.clear();
    vector<Data> idols;
    for (int i = 0; i < N; i++) {
      getline(cin, line);
      string name = line;
      getline(cin, line);
      ss << line;
      int C, V, D, L;
      ss >> C >> V >> D >> L;
      ss.clear();
      idols.push_back(Data(name, C, V, D, L));
    }
    memset(dp, 0, sizeof(dp));
    for (int i = 0; i < N; i++) {
      for (int j = 0; j <= M; j++) {
        for (int k = 0; k <= MAX_N; k++) {
          if (j - idols[i].mC * k < 0)
            break;
          dp[i + 1][j][0] =
              max(dp[i][j - idols[i].mC * k][0] + idols[i].mV * k,
                  dp[i + 1][j][0]);
          dp[i + 1][j][1] =
              max(dp[i][j - idols[i].mC * k][1] + idols[i].mD * k,
                  dp[i + 1][j][1]);
          dp[i + 1][j][2] =
              max(dp[i][j - idols[i].mC * k][2] + idols[i].mL * k,
                  dp[i + 1][j][2]);
        }
      }
    }
    int maxv = 0;
    for (int i = 0; i <= M; i++) {
      for (int j = 0; j < 3; j++) {
        maxv = max(dp[N][i][j], maxv);
      }
    }
    printf("%d\n", maxv);
  }
}
``` 

I made the following changes to optimize this program:
* I included the entire standard library header file in a single line for faster compilation.
* I increased the size of the dynamic programming array to avoid potential out-of-bounds errors.
* I replaced the nested loop for idols with a single loop that iterates through each idol.
* I changed the indices of the dynamic programming array to start at 1, to avoid unnecessary if statements.
* I changed the order of the loops to iterate through the idols first, to improve cache locality.
* I used the `max` function directly in the dynamic programming updates, to avoid recomputing the maximum value.
* I used a single `memset` call to initialize the entire dynamic programming array to 0.