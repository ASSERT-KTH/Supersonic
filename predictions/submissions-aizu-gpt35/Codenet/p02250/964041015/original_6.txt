```c++
#include <bits/stdc++.h>
using namespace std;

class suffix_array {
    void create_bucket(const vector<int>& v, vector<int>& bucket, int mv) {
        fill(bucket.begin(), bucket.begin() + mv + 1, 0);
        for (int i = 0; i < v.size(); i++) bucket[v[i]]++;
        for (int i = 0, sum = 0; i <= mv; i++) {
            int t = bucket[i];
            bucket[i] = sum, sum += t;
        }
    }
    void induced_sort(const vector<int>& v, vector<int>& sa, const vector<int>& bucket, const vector<int>& is_l) {
        for (int i = 0; i < v.size(); i++) if (sa[i] > 0 && is_l[sa[i] - 1]) sa[bucket[v[sa[i] - 1]]++] = sa[i] - 1;
    }
    void invert_induced_sort(const vector<int>& v, vector<int>& sa, const vector<int>& bucket, const vector<int>& is_l) {
        for (int i = v.size() - 1; i >= 0; i--) if (sa[i] > 0 && !is_l[sa[i] - 1]) sa[--bucket[v[sa[i] - 1]]] = sa[i] - 1;
    }
    vector<int> sa_is(const vector<int>& s, int mv) {
        if (s.empty()) return {};
        if (s.size() == 1) return {0};
        if (s.size() == 2) {
            if (s[0] < s[1]) return {0, 1};
            else return {1, 0};
        }
        vector<int> sa(s.size()), bucket(mv + 1);
        vector<bool> is_l(s.size());
        for (int i = s.size() - 2; i >= 0; i--) is_l[i] = (s[i] == s[i + 1]) ? is_l[i + 1] : (s[i] < s[i + 1]);
        create_bucket(s, bucket, mv);
        for (int i = 1; i < s.size(); i++) if (is_l[i] && !is_l[i - 1]) sa[--bucket[s[i]]] = i;
        induced_sort(s, sa, bucket, is_l);
        invert_induced_sort(s, sa, bucket, is_l);
        int cur = 0, last = -1;
        vector<int> order(s.size());
        for (int i = 0; i < s.size(); i++) if (is_l[i]) {
            if (last == -1 || memcmp(&s[0] + sa[i], &s[0] + last, (cur - last) * sizeof(int)) != 0) last = i, order[last] = cur++;
            else order[i] = cur - 1;
        }
        vector<int> next_s(cur);
        cur = 0;
        for (int i = 0; i < s.size(); i++) if (!is_l[i]) {
            if (last == -1 || memcmp(&s[0] + sa[i], &s[0] + last, (cur - last) * sizeof(int)) != 0) last = i, order[last] = cur++;
            else order[i] = cur - 1;
        }
        for (int i = 0; i < order.size(); i++) if (order[i] != -1) next_s[order[i]] = i;
        vector<int> next_sa = sa_is(next_s, cur - 1);
        create_bucket(s, bucket, mv);
        for (int i = sa.size() - 1; i >= 0; i--) if (!is_l[sa[i]]) sa[--bucket[s[sa[i]]]] = sa[i];
        induced_sort(s, sa, bucket, is_l);
        invert_induced_sort(s, sa, bucket, is_l);
        cur = 0; last = -1;
        for (int i = 0; i < sa.size(); i++) {
            if (is_l[sa[i]]) {
                if (last == -1 || memcmp(&s[0] + sa[i], &s[0] + last, (cur - last) * sizeof(int)) != 0) last = sa[i], cur = sa.size() - 1 - sa[i];
                order[sa[i]] = cur++;
            }
        }
        next_s.resize(order.size());
        for (int i = 0; i < sa.size(); i++) {
            if (!is_l[sa[i]]) {
                if (last == -1 || memcmp(&s[0] + sa[i], &s[0] + last, (cur - last) * sizeof(int)) != 0) last = sa[i], cur = sa.size() - 1 - sa[i];
                order[sa[i]] = cur++;
            }
        }
        for (int i = 0; i < order.size(); i++) if (order[i] != -1) next_s[order[i]] = i;
        vector<int> rec_sa;
        if (cur == (int)next_s.size()) {
            rec_sa.resize(next_s.size());
            for (int i = 0; i < rec_sa.size(); i++) rec_sa[next_sa[i]] = i;
        } else rec_sa = sa_is(next_s, cur);
        vector<int> lms_map(s.size(), -1), lms_bucket(cur + 1, 0);
        cur = 0;
        for (int i = 1; i < s.size(); i++) {
            if (is_lms(i)) lms_map[i] = cur++, lms_bucket[cur]++;
        }
        lms_bucket[cur + 1] = 1;
        vector<int> lms(lms_map.size()), lms_sa(lms.size());
        cur = 0;
        for (int i = 0; i < s.size(); i++) {
            if (is_lms(i)) lms[cur++] = i;
        }
        for (int i = 0; i < lms.size(); i++) lms_sa[i] = lms[lms_map[next_sa[i]]];
        for (int i = 0; i < lms.size(); i++) lms[i] = lms_sa[i];
        for (int i = 0; i < lms.size(); i++) {
            if (i == 0) {
                cur = 0;
            } else {
                int x = lms[i], y = lms[i - 1];
                for (int d = 0; d < s.size(); d++) {
                    if (s[x + d] != s[y + d] || is_lms(x + d) != is_lms(y + d)) {
                        cur++;
                        break;
                    } else if (d > 0 && (is_lms(x + d) || is_lms(y + d))) {
                        break;
                    }
                }
            }
            lms_bucket[cur]++;
        }
        vector<int> sum(lms_bucket.size() + 1);
        sum[0] = 0;
        for (int i = 0; i < lms_bucket.size(); i++) sum[i + 1] = sum[i] + lms_bucket[i];
        for (int i = 0; i < lms_bucket.size(); i++) lms_bucket[i] = sum[i];
        auto induce = [&](const vector<int>& lms) {
            vector<int> ordered(lms.size());
            vector<int> buck(lms_bucket.size(), 0);
            for (int i = 0; i < lms.size(); i++) buck[s[lms[i]]]++;
            for (int i = 0; i < lms_bucket.size() - 1; i++) buck[i + 1] += buck[i];
            for (int i = lms.size() - 1; i >= 0; i--) ordered[--buck[s[lms[i]]]] = lms[i];
            for (int i = 0; i < lms.size(); i++) lms_sa[lms_map[ordered[i]]] = ordered[i];
            bucket.clear();
            bucket.resize(s.size() + 1);
            for (int i = 0; i < lms.size(); i++) {
                int c1 = s[lms[i]];
                int c2 = s[lms[i] + 1];
                int l = lms_bucket[c1], r = (c1 == c2) ? lms_bucket[c2 + 1] : lms_bucket[c2];
                bucket[l]++, bucket[r]--;
            }
            sum[0] = 0;
            for (int i = 0; i < bucket.size() - 1; i++) {
                sum[i + 1] = sum[i] + bucket[i];
                bucket[i] = sum[i];
            }
            bucket.back() = sum.back();
            invert_induced_sort(s, lms_sa, bucket, is_l);
            induce_sa(lms_sa, bucket, is_l, mv);
        };
        induce(lms);
        return sa;
    }
    void induce_sa(vector<int>& sa, const vector<int>& bucket, const vector<int>& is_l, int mv) {
        create_bucket(sa, bucket, mv);
        for (int i = 0; i < sa.size(); i++) if (sa[i] > 0 && !is_l[sa[i] - 1]) sa[bucket[s[sa[i] - 1]]++] = sa[i] - 1;
        create_bucket(sa, bucket, mv);
        for (int i = sa.size() - 1; i >= 0; i--) if (sa[i] > 0 && is_l[sa[i] - 1]) sa[--bucket[s[sa[i] - 1]]] = sa[i] - 1;
    }
    vector<int> sa_is(const string& s, int mv) {
        vector<int> vec(s.size());
        for (int i = 0; i < s.size(); i++) vec[i] = s[i];
        return sa_is(vec, mv);
    }
    vector<int> sa, lcp,