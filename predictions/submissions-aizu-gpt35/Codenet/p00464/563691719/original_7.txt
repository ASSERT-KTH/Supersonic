```
#include <bits/stdc++.h>
using namespace std;

int mp[1001][1001], dp[1001][1001];
int h, w, n;

void saiki(int x, int y) {
    int dx[] = {0, 1}, dy[] = {1, 0};
    if (y == h || x == w)
        cout << y + 1 << " " << x + 1 << endl;
    else
        saiki(x + dx[mp[y][x]], y + dy[mp[y][x]]);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    while (1) {
        cin >> h >> w >> n;
        if (!h && !w && !n) break;
        memset(dp, 0, sizeof(dp));
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                cin >> mp[i][j];
            }
        }
        dp[0][0] = n - 1;
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                if (dp[i][j] % 2) {
                    mp[i][j] = !mp[i][j];
                }
                dp[i][j + 1] += dp[i][j] / 2 + mp[i][j] * dp[i][j] % 2;
                dp[i + 1][j] += dp[i][j] / 2 + !mp[i][j] * dp[i][j] % 2;
            }
        }
        saiki(0, 0);
    }
    return 0;
}
```

Optimizations:
- Removed unnecessary semicolon.
- Added `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` to improve input/output speed.
- Swapped the order of inputting and initializing the `dp` array to avoid unnecessary memory manipulations.
- Moved the condition `if (dp[i][j] % 2)` before the calculations in the inner loop to avoid redundant calculations.