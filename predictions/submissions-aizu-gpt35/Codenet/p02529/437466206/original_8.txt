```
#include <stdio.h>
int main() {
  int i, k, n, q, t, C = 0, S[100], T[100];
  scanf("%d", &n);
  for (i = 0; i < n; i++) {
    scanf("%d", &S[i]);
  }
  scanf("%d", &q);
  for (i = 0; i < q; i++) {
    scanf("%d", &T[i]);
  }
  int hash[10000] = {0};
  for (i = 0; i < n; i++) {
    hash[S[i]]++;
  }
  for (i = 0; i < q; i++) {
    if (hash[T[i]] > 0) {
      C++;
    }
  }
  printf("%d\n", C);
  return 0;
}
``` 

Explanation: The previous program has a nested loop that takes O(n*q) time complexity, which can be very slow for large inputs. The optimized program uses a hash table to count the number of occurrences of each element in the input array `S`, which takes O(n) time complexity. Then, it uses the hash table to check the presence of each element in the input array `T`, which takes O(q) time complexity. Therefore, the overall time complexity is reduced to O(n+q) which is much faster than O(n*q).