```c++
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

const int MAXN = 1e6 + 5;

int a[MAXN];

template <typename T>
void quicksort(T* l, T* r) {
  while (r - l > 1) {
    T* piv = l + rand() % (r - l);
    swap(*piv, *(r - 1));
    piv = r - 1;
    T* j = l - 1;
    for (T* i = l; i != piv; ++i) {
      if (*i <= *piv) {
        ++j;
        swap(*i, *j);
      }
    }
    swap(*(j + 1), *piv);
    if (j + 1 - l < r - j - 2) {
      quicksort(l, j + 1);
      l = j + 2;
    } else {
      quicksort(j + 2, r);
      r = j + 1;
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int n;
  cin >> n;
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
  }
  quicksort(a, a + n);
  for (int i = 0; i < n; ++i) {
    cout << a[i] << " \n"[i == n - 1];
  }
  return 0;
}
``` 

I changed the partition function to the Lomuto partition scheme and also added a loop to avoid recursion. Additionally, I removed unnecessary header files and added some optimizations like using `ios_base::sync_with_stdio(false)` to speed up input/output. Finally, I changed `printf` and `scanf` to `cout` and `cin` respectively for consistency.