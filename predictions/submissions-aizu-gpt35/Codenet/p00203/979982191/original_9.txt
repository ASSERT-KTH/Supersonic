```cpp
#include <iostream>
#include <cstring> // for memset
#define N 15
using namespace std;
void func(int, int);
int jump(int, int);
int X, Y, data[N][N], memo[N][N];
int main() {
  ios_base::sync_with_stdio(false); // for faster I/O
  cin.tie(NULL); // for faster I/O

  while (1) {
    cin >> X >> Y;
    if (X == 0 && Y == 0)
      break;

    memset(data, 0, sizeof(data)); // for faster initialization
    memset(memo, 0, sizeof(memo)); // for faster initialization

    for (int i = 0; i < Y; i++)
      for (int j = 0; j < X; j++)
        cin >> data[i][j];

    int cnt = 0;
    for (int i = 0; i < X; i++)
      if (data[0][i] == 0) {
        func(0, i);
        cnt += memo[0][i];
      }

    cout << cnt << endl;
  }
  return 0;
}

void func(int y, int x) {
  if (y == Y - 1) {
    memo[Y - 1][x] = 1;
    return;
  }
  if (memo[y][x] > 0) // return early if already calculated
    return;

  if (0 <= x - 1 && data[y + 1][x - 1] == 0) {
    func(y + 1, x - 1);
    memo[y][x] += memo[y + 1][x - 1];
  }
  if (x + 1 < X && data[y + 1][x + 1] == 0) {
    func(y + 1, x + 1);
    memo[y][x] += memo[y + 1][x + 1];
  }
  if (data[y + 1][x] == 0) {
    func(y + 1, x);
    memo[y][x] += memo[y + 1][x];
  }
  if (data[y + 1][x] == 2) {
    int r = jump(y + 1, x);
    if (r == -2)
      memo[y][x] += 1;
    else if (r != -1) {
      func(r, x);
      memo[y][x] += memo[r][x];
    }
  }
  if (memo[y][x] == 0)
    data[y][x] = 1;
}

int jump(int y, int x) {
  while (1) {
    y += 2;
    if (data[y][x] == 1)
      break;
    if (y >= Y - 1)
      return -2;
    if (data[y][x] == 0)
      return y;
  }
  return -1;
}
```
Changes Made:
- Added `#include <cstring>` header for `memset()` function.
- Used `memset()` to initialize `data` and `memo` arrays to `0`.
- Added `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` to synchronize standard input/output with stdio library for faster I/O.
- Moved `cnt` calculation inside the loop where `func()` is called to avoid an additional loop.
- Added memoization to check if a calculation has already been done before or not. If it has been done before, then return the already calculated value instead of recalculating it.
- Changed the order of conditions inside `func()` to return early if the calculation has already been done before.