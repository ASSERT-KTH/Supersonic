```c++
#include <iostream>
#include <cstring>
#define M 1020001
#define L 14
char H[M][L+1]; // fix out of bounds error
int getnum(char ch) {
  switch(ch) { // use switch statement for better performance
    case 'A': return 1;
    case 'C': return 2;
    case 'G': return 3;
    default: return 4;
  }
}
unsigned long long getkey(char word[]) { // use unsigned long long for larger range of values
  int p = 1;
  unsigned long long sum = 0; // use unsigned long long for larger range of values
  for (int i = 0; word[i]; i++) {
    sum = sum + p * getnum(word[i]);
    p = p * 5 % M; // use modulus to prevent overflow
  }
  return sum;
}
int h1(unsigned long long k) { return k % M; }
int h2(unsigned long long k) { return 1 + (k % (M - 1)); }
int insert(char str[]) {
  unsigned long long key = getkey(str); // use unsigned long long for larger range of values
  for (int i = 0;; i++) {
    int h = (h1(key) + i * h2(key)) % M;
    if (strcmp(H[h], str) == 0) { // use strcmp to compare strings
      return 0;
    } else if (strlen(H[h]) == 0) {
      strcpy(H[h], str);
      return 1;
    }
  }
  return 0;
}
int find(char str[]) {
  unsigned long long key = getkey(str); // use unsigned long long for larger range of values
  for (int i = 0;; i++) {
    int h = (h1(key) + i * h2(key)) % M;
    if (strcmp(H[h], str) == 0) { // use strcmp to compare strings
      return 1;
    } else if (strlen(H[h]) == 0) {
      return 0;
    }
  }
  return 0;
}
int main() {
  char com[9], word[L+1];
  int NumOfCom;
  std::cin >> NumOfCom;
  std::memset(H, 0, sizeof(H)); // use memset to initialize array to 0
  while (NumOfCom--) { // use pre-decrement to simplify loop
    std::cin >> com >> word;
    if (com[0] == 'i') {
      insert(word);
    } else {
      std::cout << (find(word) ? "yes" : "no") << "\n"; // use ternary operator for concise code
    }
  }
  return 0;
}
```