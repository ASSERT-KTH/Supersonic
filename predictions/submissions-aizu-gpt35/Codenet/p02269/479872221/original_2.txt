```c++
#include <iostream>
using namespace std;
#include <string.h>
#include <string>
#define M 1020001
#define L 14
char H[M][L];
int getnum(char ch) {
  switch(ch) {
    case 'A':
      return 1;
    case 'C':
      return 2;
    case 'G':
      return 3;
    case 'T':
      return 4;
    default:
      return 0;
  }
}
long long getkey(char word[]) {
  int sum = 0, p = 1, i;
  for (i = 0; word[i]; i++) {
    sum = sum + p * getnum(word[i]);
    p = p * 5;
  }
  return sum;
}
int h1(int k) { return k % M; }
int h2(int k) { return 1 + (k % (M - 1)); }
int insert(char str[]) {
  int key, h, i;
  key = getkey(str);
  for (i = 0;; i++) {
    h = (h1(key) + i * h2(key)) % M;
    if (strcmp(H[h], str) == 0) {
      return 0;
    } else if (strlen(H[h]) == 0) {
      strcpy(H[h], str);
      return 1;
    }
  }
  return 0;
}
int find(char str[]) {
  int key, h, i;
  key = getkey(str);
  for (i = 0;; i++) {
    h = (h1(key) + i * h2(key)) % M;
    if (strcmp(H[h], str) == 0) {
      return 1;
    } else if (strlen(H[h]) == 0) {
      return 0;
    }
  }
  return 0;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  char com[9], word[14];
  int NumOfCom;
  cin >> NumOfCom;
  memset(H, 0, sizeof(H)); // clear the array before use
  while (NumOfCom) {
    cin >> com >> word;
    if (com[0] == 'i') {
      insert(word);
    } else {
      if (find(word)) {
        cout << "yes\n";
      } else {
        cout << "no\n";
      }
    }
    NumOfCom--;
  };
  return 0;
}
``` 

- Changed the `getnum` function to use a `switch` statement instead of an `if-else` chain.
- Added `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` to make input and output faster.
- Added `memset(H, 0, sizeof(H))` to clear the `H` array before use.
- Changed the `insert` and `find` functions to use `strcmp` instead of `strcmp(...)!=0` and `strcmp(...)==0`, respectively.
- Changed `cout << endl` to `cout << "\n"` for faster output.