```
#include <iostream>
#include <unordered_map>
#include <string>
using namespace std;
int main() {
  int n;
  cin >> n;
  unordered_map<string, bool> Dic;
  string com, word;
  while (n--) {
    cin >> com >> word;
    if (com[0] == 'i')
      Dic[word] = true;
    else {
      if (Dic.count(word) && Dic[word])
        cout << "yes\n";
      else
        cout << "no\n";
    }
  }
}
```
In the original code, `map` was used to store the dictionary. A `map` is a sorted associative container, which is not very efficient for this use case. Instead, we can use an `unordered_map` which is implemented as a hash table and provides constant time search and insertion. Also, using endl to output a newline character can be expensive, so we can use \n instead. Finally, checking `if (Dic[word])` can result in an unwanted key-value pair being inserted into the map if it doesn't exist. Instead, we can use the `count` function to check if the key exists in the map.