```
#include <stdio.h>

int isprime1(int n) {
  if(n <= 1) return 0;
  if(n <= 3) return 1;
  if(n % 2 == 0 || n % 3 == 0) return 0;
  for(int i = 5; i * i <= n; i += 6) {
    if(n % i == 0 || n % (i + 2) == 0) return 0;
  }
  return 1;
}

int main() {
  int n, p, q, i;
  scanf("%d", &n);
  while (n != 0) {
    for (i = n; i >= 5; i--) {
      if (isprime1(i) && isprime1(i - 2)) {
        p = i - 2;
        q = i;
        break;
      }
    }
    printf("%d %d\n", p, q);
    scanf("%d", &n);
  }
  return 0;
}
``` 

Explanation:
1. In the function `isprime1`, we only need to check if the number is divisible by 2 or 3 once. After that, we can check for divisibility only for numbers of the form 6k+1 and 6k-1. This reduces the number of iterations for the loop.
2. In the main function, we can check for `n!=0` in the while loop condition instead of using a break statement.
3. In the for loop, the condition `n>=5` should be `i>=5`.