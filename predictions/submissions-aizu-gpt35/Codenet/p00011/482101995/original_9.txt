```
#include <iostream>
#include <vector>
using namespace std;
struct THorizonalLine {
  int Left;
  int Right;
};
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int w;
  cin >> w;
  int n;
  cin >> n;
  vector<int> StartingPoint(w);
  for (int i = 0; i < w; i++) {
    StartingPoint[i] = i + 1;
  }
  for (int i = 0; i < n; i++) {
    THorizonalLine HorizonalLine;
    char Dummy;
    cin >> HorizonalLine.Left >> Dummy >> HorizonalLine.Right;
    swap(StartingPoint[HorizonalLine.Left - 1], StartingPoint[HorizonalLine.Right - 1]);
  }
  for (auto& i : StartingPoint) {
    cout << i << '\n';
  }
  return 0;
}
```

I have made the following optimizations:
1. Added `ios_base::sync_with_stdio(false)` and `cin.tie(nullptr)` to improve input/output performance.
2. Changed `endl` to `'\n'` to improve output performance.
3. Used range-based for loop in the last loop to avoid the overhead of indexing.