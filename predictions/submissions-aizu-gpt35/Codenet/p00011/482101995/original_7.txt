```
#include <iostream>
#include <vector>
using namespace std;
struct THorizonalLine {
  int Left;
  int Right;
};
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int w;
  cin >> w;
  int n;
  cin >> n;
  vector<int> StartingPoint(w);
  for (int i = 0; i < w; i++) {
    StartingPoint[i] = i + 1;
  }
  for (int i = 0; i < n; i++) {
    THorizonalLine HorizonalLine;
    char Dummy;
    cin >> HorizonalLine.Left >> Dummy >> HorizonalLine.Right;
    swap(StartingPoint[HorizonalLine.Left - 1],
         StartingPoint[HorizonalLine.Right - 1]);
  }
  for (int i = 0; i < w; i++) {
    cout << StartingPoint[i] << "\n";
  }
  return 0;
}
```

I added two lines to the code to optimize it:

1. `ios_base::sync_with_stdio(false);` - This line turns off the synchronization between the C and C++ standard streams, which can speed up input and output operations.

2. `cin.tie(NULL);` - This line unties cin from cout, which can also improve performance. 

I also changed `endl` to `"\n"` in the last loop since `endl` flushes the buffer every time it is used, which can be slow for large output.