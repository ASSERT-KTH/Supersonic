```
#include <bits/stdc++.h>
using namespace std;
#define rep(i, n) for (int i = 0; i < int(n); ++i)
#define all(a) a.begin(), a.end()

int solve(vector<string> &s, int n, int &y, int x) {
    if (isdigit(s[y][x])) {
        return s[y++][x] - '0';
    }
    char op = s[y][x];
    ++y, ++x;
    vector<int> term;
    while (y < n && (int)s[y].size() > x) {
        term.push_back(solve(s, n, y, x));
    }
    int res = term[0];
    for (int i = 1; i < term.size(); ++i) {
        if (op == '+') {
            res += term[i];
        } else {
            res *= term[i];
        }
    }
    return res;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
    while (cin >> n, n) {
        vector<string> s(n);
        rep(i, n) cin >> s[i];
        int y = 0;
        cout << solve(s, n, y, 0) << endl;
    }
    return 0;
}
```

Changes made:
- Added `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` to speed up input/output operations.
- Replaced `accumulate` with a simple loop to calculate the sum or product of the vector `term`, depending on the operator.
- Changed `if (op == '+')` to `else` for clarity.