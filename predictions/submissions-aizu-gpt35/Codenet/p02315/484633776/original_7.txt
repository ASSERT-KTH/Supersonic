```
#include <bits/stdc++.h>
using namespace std;
int main() {
  int N, W;
  cin >> N >> W;
  int value[N], weight[N];
  for (int i = 0; i < N; i++)
    cin >> value[i] >> weight[i];
  int dp[2][10010];
  memset(dp, 0, sizeof(dp));
  for (int i = 0; i < N; i++) {
    for (int w = 0; w <= W; w++) {
      if (w >= weight[i])
        dp[(i + 1) % 2][w] = max(dp[i % 2][w - weight[i]] + value[i], dp[i % 2][w]);
      else
        dp[(i + 1) % 2][w] = dp[i % 2][w];
    }
  }
  cout << dp[N % 2][W] << endl;
  return 0;
}
``` 

Explanation: 

1. Use a 2D array with a length of 2 for the `dp` array instead of a 2D array with length `110` and `10010`. This reduces the memory usage by 90%.

2. Use `memset` to initialize the `dp` array to 0. 

3. Use `i % 2` and `(i + 1) % 2` to switch between the two rows of the `dp` array, rather than creating a new array every time. 

4. Change the loop condition of the outer loop to `i < N` instead of `i <= N`.