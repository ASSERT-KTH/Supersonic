```
#include <bits/stdc++.h>
using namespace std;
int main() {
  int N, W;
  cin >> N >> W;
  int value[N], weight[N];
  for (int i = 0; i < N; i++)
    cin >> value[i] >> weight[i];
  int dp[2][10010] = {};
  for (int i = 0; i < N; i++) {
    for (int w = 0; w <= W; w++) {
      if (w >= weight[i])
        dp[(i + 1) % 2][w] = max(dp[i % 2][w - weight[i]] + value[i], dp[i % 2][w]);
      else
        dp[(i + 1) % 2][w] = dp[i % 2][w];
    }
  }
  cout << dp[N % 2][W] << endl;
  return 0;
}
``` 

Changes made:
1. Declared 2D array `dp` with only 2 rows instead of N+1 rows to reduce memory usage.
2. Replaced `dp[i+1][w]` with `dp[(i + 1) % 2][w]` and `dp[i][w]` with `dp[i % 2][w]` to use only two rows.
3. Initialized `dp[2][10010]` with 0 to avoid garbage values.
4. Removed the first loop and initialization of `dp` since it is not required in this optimized version.