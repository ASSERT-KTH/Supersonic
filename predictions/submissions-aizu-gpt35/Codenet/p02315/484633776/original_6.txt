```
#include <bits/stdc++.h>
using namespace std;
int main() {
  int N, W;
  cin >> N >> W;
  int value[N], weight[N];
  for (int i = 0; i < N; i++)
    cin >> value[i] >> weight[i];
  int dp[2][10010];
  for (int i = 0; i <= W; i++)
    dp[0][i] = 0;
  for (int i = 0; i < N; i++) {
    for (int w = 0; w <= W; w++) {
      if (w >= weight[i])
        dp[(i+1)%2][w] = max(dp[i%2][w - weight[i]] + value[i], dp[i%2][w]);
      else
        dp[(i+1)%2][w] = dp[i%2][w];
    }
  }
  cout << dp[N%2][W] << endl;
  return 0;
}
``` 

Explanation: 

1. The array `dp` is a two-dimensional array to store results of the subproblems. It has dimensions `[N+1][W+1]`. However, since the current row only depends on the previous row, we can use a two-row array instead to reduce memory usage.

2. In the original code, the loop that initializes the first row of `dp` only goes up to `W-1`. It should go up to `W` instead to ensure that all values of the first row are initialized.

3. In the inner loop, we can use the modulus operator to switch between the two rows of `dp` instead of using `i+1` and `i` to access the rows.

4. The final answer is stored in `dp[N][W]`. However, since we only need the last row of `dp` to compute the final answer, we can use the modulus operator to switch between the two rows and store the final answer in `dp[N%2][W]` instead.