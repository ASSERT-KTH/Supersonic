```
#include <iostream>
#include <vector>
using namespace std;
int dp[10001];
int main() {
  int N, W;
  cin >> N >> W;
  vector<int> v(N), w(N);
  for (int i = 0; i < N; i++)
    cin >> v[i] >> w[i];
  for (int i = 0; i < N; i++) {
    for (int j = W; j >= w[i]; j--) {
      dp[j] = max(dp[j], dp[j - w[i]] + v[i]);
    }
  }
  cout << dp[W] << endl;
  return 0;
}
``` 

Explanation:

1. Instead of using a 2D array, we can use a 1D array to store the maximum value that can be obtained for each weight.

2. We can iterate the weight from W to w[i] in the inner loop, as we only need to consider weights that are greater than or equal to the weight of the current item.

3. We can remove the i+1 index from dp[i+1][j] and just use dp[j]. This is possible because we are iterating through the items in order, so we don't need to keep track of which items we have processed.

4. By making these changes, we can reduce the memory usage and the running time of the program.