```
#include <iostream>
#include <vector>
using namespace std;
int dp[10001];
int main() {
  int N, W;
  cin >> N >> W;
  vector<int> v(N), w(N);
  for (int i = 0; i < N; i++)
    cin >> v[i] >> w[i];
  for (int i = 0; i < N; i++) {
    for (int j = W; j >= w[i]; j--) {
      dp[j] = max(dp[j], dp[j - w[i]] + v[i]);
    }
  }
  cout << dp[W] << endl;
  return 0;
}
```
Explanation: 

We can see that we don't need the 2D array `dp` with `N` rows and `W + 1` columns. Instead, we can just use a 1D array `dp` with `W + 1` elements.
Also, since we are only using `dp[i][j]` to calculate `dp[i+1][j]`, we can further optimize the space complexity by using only a 1D array `dp`.
We can also change the order of the loops. Instead of iterating over `j` from 0 to `W`, we can iterate over `j` from `W` to `w[i]` (inclusive), since we don't need to consider the cases where `j < w[i]`.
Finally, we can output `dp[W]` instead of `dp[N][W]`, since `dp[N][W]` is the maximum value that can be obtained using all `N` items and a knapsack of size `W`, which is what we want, and it is also equivalent to `dp[W]`, the maximum value that can be obtained using a knapsack of size `W`.