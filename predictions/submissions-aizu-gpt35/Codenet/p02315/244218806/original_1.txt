```
#include <iostream>
#include <vector>
using namespace std;
int dp[2][10001];
int main() {
  int N, W;
  cin >> N >> W;
  vector<int> v(N), w(N);
  for (int i = 0; i < N; i++)
    cin >> v[i] >> w[i];
  for (int i = 0; i < N; i++) {
    for (int j = 0; j <= W; j++) {
      if (j - w[i] < 0) {
        dp[(i + 1) % 2][j] = dp[i % 2][j];
      } else {
        dp[(i + 1) % 2][j] = max(dp[i % 2][j], dp[i % 2][j - w[i]] + v[i]);
      }
    }
  }
  cout << dp[N % 2][W] << endl;
  return 0;
}
```

Explanation: 

1. We can observe that the dp array is only dependent on the previous row, so we don't need to keep the entire dp array. Instead we can use two rows of dp array namely dp[i%2] and dp[(i+1)%2], where i is the current row number. 
2. This will reduce the memory usage from 1001*10001*4 bytes to 2*10001*4 bytes. 
3. Also, we can replace the expression `i+1` with `(i+1)%2` and `i` with `i%2`. This will help us to alternate between the two rows of the dp array.