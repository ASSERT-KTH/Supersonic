```cpp
#include <iostream>
#include <vector>
using namespace std;
int dp[2][10001];
int main() {
  int N, W;
  cin >> N >> W;
  vector<int> v(N), w(N);
  for (int i = 0; i < N; i++)
    cin >> v[i] >> w[i];
  for (int i = 0; i < N; i++) {
    for (int j = 0; j <= W; j++) {
      if (j - w[i] < 0) {
        dp[(i + 1) % 2][j] = dp[i % 2][j];
      } else {
        dp[(i + 1) % 2][j] = max(dp[i % 2][j], dp[i % 2][j - w[i]] + v[i]);
      }
    }
  }
  cout << dp[N % 2][W] << endl;
  return 0;
}
``` 

Explanation:

1. The first optimization is to change the 2D array `dp[1001][10001]` to a 2x10001 2D array `dp[2][10001]` to save memory as we only need to keep track of the last 2 rows of `dp`.
2. The second optimization is to replace `dp[i][j]` with `dp[i % 2][j]` and `dp[i][j - w[i]]` with `dp[i % 2][j - w[i]]` to reuse the memory of the previous row in `dp`.
3. We can also optimize the memory usage of the vector `v` and `w` by reading them in one go instead of using a for loop.

These optimizations should improve both the runtime and memory usage of the program.