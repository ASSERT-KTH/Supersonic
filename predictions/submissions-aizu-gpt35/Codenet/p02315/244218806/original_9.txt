```
#include <iostream>
#include <vector>
#include <cstring>
using namespace std;
int dp[1001][10001];
int main() {
  int N, W;
  cin >> N >> W;
  vector<int> v(N), w(N);
  for (int i = 0; i < N; i++)
    cin >> v[i] >> w[i];
  memset(dp, 0, sizeof(dp));
  for (int i = 0; i < N; i++) {
    for (int j = 0; j <= W; j++) {
      if (j - w[i] >= 0) {
        dp[i + 1][j] = max(dp[i][j], dp[i][j - w[i]] + v[i]);
      } else {
        dp[i + 1][j] = dp[i][j];
      }
    }
  }
  cout << dp[N][W] << endl;
  return 0;
}
```
Explanation:
1. Added `#include <cstring>` for using memset.
2. Initialized `dp` array to 0 using `memset(dp, 0, sizeof(dp))` before using it.
3. Changed the order of if-else conditions to prioritize the more frequent condition of `j - w[i] >= 0`.
4. Swapped the positions of `else` and `if` blocks to follow the more common execution path first.