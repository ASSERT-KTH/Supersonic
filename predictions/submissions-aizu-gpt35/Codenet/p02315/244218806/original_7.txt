```
#include <iostream>
#include <vector>
using namespace std;
const int MAXW = 10001;
int dp[2][MAXW];
int main() {
  int N, W;
  cin >> N >> W;
  vector<int> v(N), w(N);
  for (int i = 0; i < N; i++)
    cin >> v[i] >> w[i];
  for (int i = 0; i < N; i++) {
    for (int j = 0; j <= W; j++) {
      if (j - w[i] < 0) {
        dp[(i+1)%2][j] = dp[i%2][j];
      } else {
        dp[(i+1)%2][j] = max(dp[i%2][j], dp[i%2][j - w[i]] + v[i]);
      }
    }
  }
  cout << dp[N%2][W] << endl;
  return 0;
}
``` 

Explanation: 

The previous code has a memory allocation issue. It allocates a two-dimensional array with size 1001x10001, which takes up a lot of memory. However, the maximum value of W is only 10000, so we can reduce the size of the second dimension of the array to 10001. 

Additionally, the program can be optimized by using a rolling array. Since we only need the values of the previous row to calculate the current row, we can use a rolling array to save memory. We create a two-row array and use the modulo operator to switch between them.