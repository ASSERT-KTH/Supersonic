```
#include <iostream>
#include <vector>
using namespace std;

int main() {
  int N, W;
  cin >> N >> W;
  vector<int> v(N), w(N);
  for (int i = 0; i < N; i++)
    cin >> v[i] >> w[i];
  vector<int> dp(W+1, 0);
  for (int i = 0; i < N; i++) {
    for (int j = W; j >= w[i]; j--) {
        dp[j] = max(dp[j], dp[j - w[i]] + v[i]);
    }
  }
  cout << dp[W] << endl;
  return 0;
}
``` 

Explanation: 
- The original program uses a 2D array to store the maximum value of items that can be picked up with the given weight limit. This array has a size of 1001 * 10001 which can be very large if the values of N and W are large. 
- The optimized program uses a 1D vector to store the maximum value of items that can be picked up with the given weight limit. This vector has a size of W+1 which is much smaller than the 2D array used in the original program. 
- The optimized program also uses a reverse loop for the inner loop which helps in reducing the number of iterations. 
- Overall, the optimized program reduces the memory usage and improves the running time.