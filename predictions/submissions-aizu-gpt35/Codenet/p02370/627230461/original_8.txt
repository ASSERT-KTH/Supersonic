```
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int main() {
  int V, E;
  cin >> V >> E;
  vector<vector<int>> edge(V+1);
  vector<int> state(V+1, 0);
  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    edge[s].push_back(t);
    state[t]++;
  }
  queue<int> q;
  for (int i = 1; i <= V; i++) {
    if (state[i] == 0)
      q.push(i);
  }
  vector<int> ans;
  while (!q.empty()) {
    int u = q.front();
    q.pop();
    ans.push_back(u);
    for (int i = 0; i < edge[u].size(); i++) {
      int v = edge[u][i];
      state[v]--;
      if (state[v] == 0)
        q.push(v);
    }
  }
  for (int i = 0; i < ans.size(); i++) {
    cout << ans[i] << endl;
  }
  return 0;
}
``` 

Explanation: 

1. We change the size of the `edge` vector to `V+1` to avoid out of bounds access.
2. We use a `queue` to implement topological sort. Initially, we push all nodes with no incoming edges to the queue.
3. While the queue is not empty, we pop a node from the queue and add it to the result vector. We then reduce the incoming edge count of all its neighbors by 1. If any neighbor has no more incoming edges, we push it to the queue.
4. We output the result vector.