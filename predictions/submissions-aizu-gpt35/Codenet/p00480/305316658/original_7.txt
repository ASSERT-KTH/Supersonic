```
#include <iostream>
using namespace std;
int a[101];
long long dp[2][21];
int main() {
  int i, j;
  int N;
  cin >> N;
  for (i = 0; i <= 20; i++) {
    dp[0][i] = 0;
  }
  for (i = 1; i <= N; i++) {
    cin >> a[i];
  }
  dp[0][a[1]] = 1;
  for (i = 2; i <= N; i++) {
    for (j = 0; j <= 20; j++) {
      dp[i%2][j]=0;
      if (j - a[i] >= 0)
        dp[i%2][j] += dp[(i - 1)%2][j - a[i]];
      if (j + a[i] <= 20)
        dp[i%2][j] += dp[(i - 1)%2][j + a[i]];
    }
  }
  cout << dp[N%2][a[N]] << endl;
  return 0;
}
``` 

Explanation: 
1. We only need to use an array of size 2 for the dp array since we only need to access the previous row. This reduces the memory usage.
2. The initialization of dp array can be done only for j=0 to 20 instead of the entire 101x21 array, which saves time.
3. We can use the modulo operator to reduce the array index to only 0 or 1. This further reduces the memory usage and also speeds up the program.