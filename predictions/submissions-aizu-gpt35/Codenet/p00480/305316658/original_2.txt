```
#include <iostream>
using namespace std;
int a[101];
long long dp[2][21];
int main() {
  int i, j;
  int N;
  cin >> N;
  for (i = 0; i <= 20; i++) {
    dp[0][i] = 0;
  }
  dp[0][0] = 1;
  for (i = 1; i <= N; i++) {
    cin >> a[i];
    for (j = 0; j <= 20; j++) {
      dp[i % 2][j] = 0;
      if (j - a[i] >= 0)
        dp[i % 2][j] += dp[(i - 1) % 2][j - a[i]];
      if (j + a[i] <= 20)
        dp[i % 2][j] += dp[(i - 1) % 2][j + a[i]];
    }
  }
  cout << dp[N % 2][a[N]] << endl;
  return 0;
}
``` 

Explanation: 

1. We can reduce the memory usage of the program by observing that we only need the value of `dp[i-1][j]` for computing `dp[i][j]`. Thus, we can reduce the 2D array `dp` to a 1D array of size 21. 

2. We can further optimize the program by observing that we only need the values of `dp[i-1][j-a[i]]` and `dp[i-1][j+a[i]]` for computing `dp[i][j]`. Thus, we can use a rolling array to store the values of `dp`. 

3. Finally, we can replace the loop over `i` from `2` to `N-1` with a loop over `i` from `1` to `N` and use the modulo operator to switch between the two rows of the rolling array. This allows us to eliminate the initialization of `dp` at the beginning of each iteration of the loop over `i`.