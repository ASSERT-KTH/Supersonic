```
#include <iostream>
#include <vector>
using namespace std;
int main(void) {
  vector<bool> isPrime(51000 + 1, false);
  isPrime[2] = true;
  for (int i = 3; i * i <= 51000; i += 2) {
    if (!isPrime[i]) {
      for (int j = i * i; j <= 51000; j += i) {
        isPrime[j] = true;
      }
    }
  }
  vector<int> primes;
  primes.push_back(2);
  for (int i = 3; i < 51000; i += 2) {
    if (!isPrime[i])
      primes.push_back(i);
  }
  int n;
  while (cin >> n && n != 0) {
    int kotae = 0;
    for (int i = 0; i < primes.size() && primes[i] <= n / 2; i++) {
      if (!isPrime[n - primes[i]])
        kotae++;
    }
    cout << kotae << endl;
  }
  return 0;
}
```

The changes made to the code are:

1. In the second loop, we only need to loop until `i * i <= 51000` instead of `i < 51000`, as after `i * i > 51000`, all multiples of `i` have already been marked as composite.

2. In the second loop, we only need to consider odd numbers, so we can increment `i` by 2 instead of 1.

3. In the second loop, we can use a `if (!isPrime[i])` condition to check if `i` is prime and mark its multiples as composite.

4. In the third loop, we can use a `if (!isPrime[i])` condition to check if `i` is prime and add it to the `primes` vector.

5. In the fourth loop, we can add a condition `primes[i] <= n / 2` to skip unnecessary iterations.

6. In the fourth loop, we can directly check if `n - primes[i]` is composite instead of using the `at()` function, as we are sure that `n - primes[i]` is within the bounds of the `isPrime` vector.

These changes should improve both the running time and memory usage of the program.