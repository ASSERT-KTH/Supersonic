```
#include <iostream>
#include <vector>
using namespace std;

int main(void) {
  vector<bool> isPrime(51001, false);
  isPrime[2] = true;
  for (int i = 3; i <= 51000; i += 2) {
    isPrime[i] = true;
  }
  for (int i = 3; i * i <= 51000; i += 2) {
    if (isPrime[i]) {
      for (int j = i * i; j <= 51000; j += i) {
        isPrime[j] = false;
      }
    }
  }
  vector<int> primes;
  primes.push_back(2);
  for (int i = 3; i <= 51000; i += 2) {
    if (isPrime[i])
      primes.push_back(i);
  }
  int n;
  while (cin >> n && n != 0) {
    int kotae = 0;
    for (int i = 0; i < primes.size() && primes[i] <= n / 2; i++) {
      if (isPrime[n - primes[i]])
        kotae++;
    }
    cout << kotae << endl;
  }
  return 0;
}
```

Explanation:
1. The upper bound of the `isPrime` vector should be 51001 instead of 51000. This is because the loop in line 6 increments by 2, so 51000 is not included.
2. The second loop should only iterate up to `sqrt(51000)` for efficiency. This is because all composite numbers greater than `sqrt(51000)` have a prime factor less than or equal to `sqrt(51000)`.
3. In the third loop, we can start from 3 and increment by 2 to avoid checking even numbers which are not prime.
4. In the third loop, we can also change the condition to check `isPrime[i]` so that we only check multiples of primes.
5. In the fourth loop, we can combine the conditions for checking if `primes[i]` is less than or equal to `n/2` and if `isPrime[n - primes[i]]` is true. This can avoid unnecessary iterations.
6. We can remove the unnecessary use of `at()` in line 23 since we are sure that the index is within bounds.