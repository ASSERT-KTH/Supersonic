```cpp
#include <iostream>
#include <vector>
using namespace std;
int main(void) {
  vector<bool> isPrime(51000 + 1, false);
  isPrime[2] = true;
  for (int i = 3; i * i <= 51000; i += 2) {
    if (isPrime[i]) {
      for (int j = i * i; j <= 51000; j += i) {
        isPrime[j] = false;
      }
    }
    else isPrime[i] = true;
  }
  for (int i = 4; i <= 51000; i += 2) {
    isPrime[i] = false;
  }
  vector<int> primes;
  primes.push_back(2);
  for (int i = 3; i <= 51000; i += 2) {
    if (isPrime[i])
      primes.push_back(i);
  }
  int n;
  while (cin >> n && n != 0) {
    int kotae = 0;
    for (int i = 0; primes[i] <= n / 2; i++) {
      if (isPrime[n - primes[i]])
        kotae++;
    }
    cout << kotae << endl;
  }
  return 0;
}
```

The changes I have made in the code are:

1. In the isPrime array, I have made changes to the way we mark prime numbers. We only need to mark those numbers as prime which are not divisible by any smaller primes. So, we only need to loop through the array once and mark all numbers as prime which are not marked as composite. 

2. We can mark all even numbers as composite, except 2, as they are not prime. So, I have added a separate loop to mark all even numbers as composite.

3. In the last loop, I have used only one condition to check if the current prime number is less than or equal to n/2. This is because we only need to check the first half of the primes to find pairs that add up to n. 

These changes will make the code faster and more efficient in terms of memory usage.