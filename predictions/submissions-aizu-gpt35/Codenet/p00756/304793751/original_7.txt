```
#include <bits/stdc++.h>
using namespace std;

const int MAXN = 24;
int n;
int x[MAXN], y[MAXN], r[MAXN], c[MAXN];
bool memo[1 << MAXN];
bool ok(int a, int bit) {
  const int x_a = x[a], y_a = y[a], r_a = r[a];
  for (int i = 0; i < n; ++i) {
    if (((bit >> i) & 1) == 0) {
      continue;
    }
    const int dist = (x[i] - x_a) * (x[i] - x_a) + (y[i] - y_a) * (y[i] - y_a);
    const int sum = (r[i] + r_a) * (r[i] + r_a);
    if (dist < sum) {
      return false;
    }
  }
  return true;
}
int dfs(int bit, int cur) {
  if (memo[bit]) {
    return cur;
  }
  memo[bit] = true;
  int ret = cur;
  for (int i = 0; i < n; ++i) {
    if ((bit >> i) & 1) {
      continue;
    }
    if (!ok(i, bit)) {
      continue;
    }
    const int c_i = c[i];
    int to_bit = bit | (1 << i);
    int cnt = 1;
    for (int j = i + 1; j < n; ++j) {
      if ((bit >> j) & 1) {
        continue;
      }
      if (c[j] != c_i) {
        continue;
      }
      if (!ok(j, to_bit)) {
        continue;
      }
      to_bit |= 1 << j;
      ++cnt;
    }
    ret = max(ret, dfs(to_bit, cur + cnt));
  }
  return ret;
}
void solve() {
  fill_n(memo, 1 << n, false);
  cout << dfs(0, 0) << endl;
}
bool input() {
  cin >> n;
  if (!n) {
    return false;
  }
  for (int i = 0; i < n; ++i) {
    cin >> x[i] >> y[i] >> r[i] >> c[i];
  }
  return true;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  while (input()) {
    solve();
  }
  return 0;
}
```
