```c++
#include <algorithm>
#include <cstdio>
using uint = unsigned int;
static void print_partition_ints(const int as[], const uint q, const uint n) {
  char out_sep = '\0';
  for (uint i = 0; i < n; ++i) {
    char format[4] = {out_sep, '%', 'd', ' '};
    if (i == q) {
      format[1] = '[';
      format[3] = ']';
    }
    std::printf(format, as[i]);
    out_sep = ' ';
  }
  std::printf("\n");
}
static uint partition(int as[], const uint first, const uint last) {
  uint less = first;
  for (uint i = first; i < last; ++i) {
    if (as[i] <= as[last]) {
      std::swap(as[less], as[i]);
      ++less;
    }
  }
  std::swap(as[less], as[last]);
  return less;
}
int main() {
  uint n;
  std::scanf("%u", &n);
  int* as = new int[n];
  for (uint i = 0; i < n; ++i) {
    std::scanf("%d", &as[i]);
  }
  auto q = partition(as, 0, n - 1);
  print_partition_ints(as, q, n);
  delete[] as;
}
``` 

The first optimization is to use a character for `out_sep` instead of a string, since we're only printing one character at a time. We also make the `format` string an array of characters and build it manually depending on the value of `i`. This avoids the need for a conditional statement inside the `printf` call.

The second optimization is to use `uint` instead of `auto` for the loop variables and `less`, since we know the range of the values they can take.

The third optimization is to allocate the `as` array dynamically using `new` instead of declaring it as a variable-length array. This avoids the allocation of a large amount of memory on the stack, which can cause stack overflow errors for large input sizes. We also delete the array using `delete[]` after we're done with it, to avoid memory leaks.