```cpp
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <vector>
using namespace std;

typedef long long ll;

const int MAX_N = 12, MAX_M = 250, MAX_L = 10000;
const ll MOD = 1000000009;

int n, m, len[MAX_N], ans[MAX_M];
ll ha[MAX_N][MAX_L], gha[MAX_L], po[MAX_L];

void pre() {
  po[0] = 1;
  for (int i = 1; i < MAX_L; i++) po[i] = po[i - 1] * 31;

  for (int i = 0; i < n; i++) {
    string s;
    cin >> s;
    len[i] = s.size();
    for (int j = 1; j <= len[i]; j++)
      ha[i][j] = (ha[i][j - 1] * 31 + s[j - 1] - 'a' + 1) % MOD;
  }
}

void solve() {
  string text;
  cin >> m;
  for (int i = 1; i <= m; i++) {
    string s;
    cin >> s;
    text += s;
  }
  int t = text.size();

  memset(ans, 0, sizeof(ans));
  for (int i = 0; i < t; i++) {
    memset(gha, 0, sizeof(gha));
    for (int j = i + 1; j <= t; j++)
      gha[j] = (gha[j - 1] * 31 + text[j - 1] - 'a' + 1) % MOD;

    vector<int> v(n);
    for (int j = 0; j < n; j++) v[j] = j;

    do {
      int cur = 0;
      for (int j = 0, k = i + 1; j < n && k <= t; j++) {
        int p = v[j];
        if (k + len[p] - 1 > t) break;
        ll h = (gha[k + len[p] - 1] - gha[k - 1] * po[len[p]]) % MOD;
        if (h < 0) h += MOD;
        if (h == ha[p][len[p]]) {
          cur |= 1 << p;
          k += len[p];
        }
      }
      ans[i % MAX_M] += cur == (1 << n) - 1;
    } while (next_permutation(v.begin(), v.end()));
  }

  int res = 0;
  for (int i = 0; i < MAX_M; i++) res += ans[i];
  cout << res << endl;
}

int main() {
  while (cin >> n, n) {
    pre();
    while (cin >> m, m) solve();
  }
  return 0;
}
```

I removed unused headers, unused functions, and unused typedefs. I also simplified and optimized the algorithm.