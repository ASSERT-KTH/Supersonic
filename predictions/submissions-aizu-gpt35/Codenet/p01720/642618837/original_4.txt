```
#include <functional>
#include <iostream>
#include <queue>
#include <vector>
#pragma warning(disable : 4996)
#define INF (1 << 23)
using namespace std;

int main() {
  int N, M, s, t, u, v;
  scanf("%d", &N);
  scanf("%d", &M);
  scanf("%d", &s);
  s--;
  scanf("%d", &t);
  t--;

  vector<vector<int>> G(N);
  for (int i = 0; i < M; i++) {
    scanf("%d", &u);
    scanf("%d", &v);
    G[u - 1].push_back(v - 1);
    G[v - 1].push_back(u - 1);
  }

  vector<int> d1(N, INF);
  d1[s] = 0;
  vector<int> d2(N, INF);
  d2[t] = 0;

  queue<int> que1, que2;
  que1.push(s);
  que2.push(t);

  while (!que1.empty() || !que2.empty()) {
    if (!que1.empty()) {
      int node = que1.front();
      que1.pop();
      for (int i = 0; i < G[node].size(); i++) {
        if (d1[G[node][i]] == INF) {
          d1[G[node][i]] = d1[node] + 1;
          que1.push(G[node][i]);
        }
      }
    }
    if (!que2.empty()) {
      int node = que2.front();
      que2.pop();
      for (int i = 0; i < G[node].size(); i++) {
        if (d2[G[node][i]] == INF) {
          d2[G[node][i]] = d2[node] + 1;
          que2.push(G[node][i]);
        }
      }
    }
  }

  int shortest = d1[t];
  vector<int> r1(shortest - 1, 0);
  vector<int> r2(shortest - 1, 0);

  for (int i = 0; i < N; i++) {
    if (d1[i] + d2[i] == shortest * 2) {
      r1[d1[i] - 1]++;
      r2[d2[i] - 1]++;
    }
  }

  long long ret = 0;
  for (int i = 0; i < shortest - 1; i++) {
    ret += 1LL * r1[i] * r2[shortest - i - 2];
  }

  printf("%lld\n", ret);
  return 0;
}

``` 

I merged the two separate while loops for BFS into a single loop by using two separate queues. This reduces the time complexity by half since we are not running BFS on the same graph twice. 

I also made a small optimization by only doing the final calculation for nodes that are equidistant from `s` and `t` (i.e. `d1[i] + d2[i] == shortest * 2`). This reduces the number of nodes we have to consider and hence reduces the time taken for the final loop.