```
#include <cstdio>
#include <algorithm>
const int MAXN = 1e6 + 5;
int n, A[MAXN], cnt[MAXN];
int main() {
  scanf("%d", &n);
  for (int i = 0, x; i < n; ++i) {
    scanf("%d", &x);
    ++cnt[x + 1];
  }
  for (int i = 1; i < MAXN; ++i)
    cnt[i] += cnt[i - 1];
  for (int i = 0; i < n; ++i)
    A[--cnt[A[i] + 1]] = A[i];
  for (int i = 0; i < n; ++i)
    printf("%d ", A[i]);
}
```

Explanation:
The initial program sorts the given array using `std::sort()`. However, using counting sort instead of quicksort can significantly improve the running time when the range of the values in the array is small. In this case, the range is not specified, so we assume that it is not too large.

The optimized program uses counting sort to sort the array. It first reads in the values and increments the count of the corresponding index in the `cnt` array. Then, it calculates the prefix sum of the `cnt` array to find the starting index of each value in the sorted array. Finally, it places each value in its correct position in the sorted array using the starting index and the count array.

Note that the `const int MAXN` is set to be `1e6 + 5` to avoid using a magic number in the array size.