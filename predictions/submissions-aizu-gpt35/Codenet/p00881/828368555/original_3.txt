```c++
#include <iostream>
#include <map>
#include <string>
#include <vector>
using namespace std;

const int MAX_N = 128;
const int INF = 100;

map<pair<vector<int>, int>, int> mp;
string qes[MAX_N];
int used[MAX_N];
int dp[MAX_N][1 << 15];

int search(vector<int>& vi, int depth, int mask, int m, int n)
{
    if (mp.count(make_pair(vi, mask))) {
        return mp[make_pair(vi, mask)];
    }
    if (vi.size() > (1 << (m - depth))) {
        return INF;
    }
    if (vi.size() == 1) {
        return depth;
    }
    if (dp[vi[0]][mask] != -1) {
        return dp[vi[0]][mask] + depth;
    }
    int res = INF;
    for (int i = 0; i < m; i++) {
        if (used[i]) {
            continue;
        }
        vector<int> a, b;
        for (int j = 0; j < vi.size(); j++) {
            if (qes[vi[j]][i] == '0') {
                a.push_back(vi[j]);
            } else {
                b.push_back(vi[j]);
            }
        }
        if (a.empty() || b.empty()) {
            continue;
        }
        used[i] = true;
        res = min(res, search(a, depth + 1, mask | (1 << i), m, n));
        res = min(res, search(b, depth + 1, mask | (1 << i), m, n));
        used[i] = false;
    }
    for (int i = 0; i < vi.size(); i++) {
        dp[vi[i]][mask] = min(dp[vi[i]][mask], res - depth);
    }
    return mp[make_pair(vi, mask)] = res;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    int m, n;
    while (cin >> m >> n, m) {
        for (int i = 0; i < n; i++) {
            cin >> qes[i];
        }
        vector<int> vi(n);
        for (int i = 0; i < n; i++) {
            vi[i] = i;
        }
        mp.clear();
        memset(dp, -1, sizeof(dp));
        memset(used, false, sizeof(used));
        cout << search(vi, 0, 0, m, n) << '\n';
    }
    return 0;
}
```