```cpp
#include <iostream>
#include <map>
#include <string>
#include <vector>
#include <bitset>
using namespace std;

// Using bitset instead of vector for faster operations
map<pair<bitset<128>, int>, int> mp;
string qes[128];

int search(bitset<128> &bs, int depth, int used, int m, int n) {
  if (mp.count(make_pair(bs, used)))
    return mp[make_pair(bs, used)];
  if (bs.count() > (1 << (m - depth)))
    return 100;
  if (bs.count() == 1)
    return depth;
  int res = 100;
  for (int i = 0; i < m; i++) {
    if ((used >> i) & 1)
      continue;
    bitset<128> a, b;
    for (int j = 0; j < n; j++) {
      if (qes[j][i] == '0')
        a.set(j);
      else
        b.set(j);
    }
    if (a.none() || b.none())
      continue;
    res = min(res, max(search(a, depth + 1, used | (1 << i), m, n),
                       search(b, depth + 1, used | (1 << i), m, n)));
  }
  return mp[make_pair(bs, used)] = res;
}

int main() {
  int m, n;
  while (cin >> m >> n, m) {
    for (int i = 0; i < n; i++)
      cin >> qes[i];
    bitset<128> bs;
    bs.set();
    mp.clear();
    cout << search(bs, 0, 0, m, n) << endl;
  }
}
``` 

I used `std::bitset` instead of `std::vector` for faster operations. I also used `std::bitset::none()` instead of `empty()` for readability.