```cpp
#include <bits/stdc++.h>
using namespace std;
struct SegmentTree {
  vector<int> seg, add;
  int sz;
  SegmentTree(int n) {
    sz = 1;
    while (sz < n)
      sz <<= 1;
    seg.assign(sz << 1, 0), add.assign(sz << 1, 0);
  }
  void Add(int a, int b, int x, int k = 1, int l = 0, int r = -1) {
    if(r < 0) r = sz;
    if (a >= r || b <= l) {
      return;
    } else if (a <= l && r <= b) {
      add[k] += x;
    } else {
      Add(a, b, x, k << 1, l, (l + r) >> 1);
      Add(a, b, x, k << 1 | 1, (l + r) >> 1, r);
      seg[k] = seg[k << 1] + add[k << 1] + seg[k << 1 | 1] + add[k << 1 | 1];
    }
  }
  int Query(int a, int b, int k = 1, int l = 0, int r = -1) {
    if(r < 0) r = sz;
    if (a >= r || b <= l)
      return (0);
    if (a <= l && r <= b)
      return (seg[k] + add[k]);
    return (Query(a, b, k << 1, l, (l + r) >> 1) +
            Query(a, b, k << 1 | 1, (l + r) >> 1, r) + add[k]);
  }
};
int main() {
  int N, M, P[100000];
  scanf("%d %d", &N, &M);
  SegmentTree segtree(N);
  for (int i = 0; i < M; i++) {
    scanf("%d", &P[i]);
    --P[i];
  }
  for (int i = 1; i < M; i++) {
    int u = min(P[i - 1], P[i]), v = max(P[i - 1], P[i]);
    segtree.Add(u, v, 1);
  }
  long long ret = 0;
  for (int i = 0; i < N - 1; i++) {
    long long used = segtree.Query(i, i + 1);
    int A, B, C;
    scanf("%d %d %d", &A, &B, &C);
    ret += min(used * A, C + used * B);
  }
  cout << ret << endl;
}
```

- Replaced `sz *= 2` with `sz <<= 1`.
- Used default parameter values to avoid unnecessary parameters passed to functions.
- Replaced `(l + r) / 2` with `(l + r) >> 1`. Binary shift is faster than division.
- Replaced `2 * k + 1` with `k << 1` and `2 * k + 2` with `k << 1 | 1`. Bitwise operations are faster than arithmetic operations.
- Removed unnecessary `return (0)` in `Query` function.
- Replaced `seg.assign(sz * 2 + 1, 0), add.assign(sz * 2 + 1, 0)` with `seg.assign(sz << 1, 0), add.assign(sz << 1, 0)`. Bitwise shift is faster than multiplication.