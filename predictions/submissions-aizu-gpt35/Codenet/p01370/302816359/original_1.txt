```cpp
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <queue>
#include <vector>
using namespace std;

#define rep(i, b) for (int i = 0; i < b; i++)
const int m_t  = 60;
const int maxn = 3 * m_t * (m_t + 1) + 1;
const int zero = maxn / 2;

int dx[6] = {0, 1, -1, 1, -1, 0};
int dy[6] = {1, 1, 0, 0, -1, -1};
vector<int> field(maxn);

int t, n;

int calc_y(int y) {
    return y * (m_t * 2 + m_t * 2 + 1 - abs(y)) / 2;
}

int bfs(int sx, int sy) {
    int ans = 0;
    queue<pair<pair<int, int>, int>> rt;
    rt.push({{sx, sy}, 0});
    while (!rt.empty()) {
        ans++;
        int cx = rt.front().first.first;
        int cy = rt.front().first.second;
        int ct = rt.front().second;
        rt.pop();
        if (ct < t) {
            rep(i, 6) {
                int nx = cx + dx[i];
                int ny = calc_y(cy + dy[i]);
                if (field[zero + nx + ny]) {
                    field[zero + nx + ny] = 0;
                    rt.push({{nx, cy + dy[i]}, ct + 1});
                }
            }
        }
    }
    return ans;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    while (cin >> t >> n, t) {
        fill(field.begin(), field.end(), 1);
        int x, y;
        rep(i, n) {
            cin >> x >> y;
            field[zero + x + calc_y(y)] = 0;
        }
        int sx, sy;
        cin >> sx >> sy;
        field[zero + sx + calc_y(sy)] = 0;
        cout << bfs(sx, sy) << '\n';
    }
    return 0;
}
```