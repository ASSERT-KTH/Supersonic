```c++
#include <iostream>
#include <vector>
#include <queue>
#include <limits>
using namespace std;

const int INFTY = numeric_limits<int>::max();
const int WHITE = 0;
const int GRAY = 1;
const int BLACK = 2;

void dijkstra(int n, const vector<vector<pair<int,int>>>& edges) {
  vector<int> d(n, INFTY), color(n, WHITE);
  d[0] = 0;
  color[0] = GRAY;
  priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
  pq.emplace(0, 0);
  while (!pq.empty()) {
    int u = pq.top().second;
    int dist = pq.top().first;
    pq.pop();
    if (d[u] < dist) continue;
    color[u] = BLACK;
    for (auto& p : edges[u]) {
      int v = p.first;
      int cost = p.second;
      if (color[v] != BLACK && d[v] > d[u] + cost) {
        d[v] = d[u] + cost;
        color[v] = GRAY;
        pq.emplace(d[v], v);
      }
    }
  }
  for (int i = 0; i < n; i++) {
    cout << i << " " << (d[i] == INFTY ? -1 : d[i]) << endl;
  }
}

int main() {
  int n;
  cin >> n;
  vector<vector<pair<int,int>>> edges(n);
  for (int i = 0; i < n; i++) {
    int u, k;
    cin >> u >> k;
    for (int j = 0; j < k; j++) {
      int v, c;
      cin >> v >> c;
      edges[u].emplace_back(v, c);
    }
  }
  dijkstra(n, edges);
  return 0;
}
```
