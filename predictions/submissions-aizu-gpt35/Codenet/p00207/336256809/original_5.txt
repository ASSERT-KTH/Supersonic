```c++
#include <iostream>
#include <cstring>
using namespace std;

const int MAX = 102;
int C[MAX][MAX];
int xs, ys, xg, yg;

void meiro(int W, int H, int c) {
  if (C[W][H] != c) {
    return;
  }
  C[W][H] = -1;
  meiro(W - 1, H, c);
  meiro(W, H + 1, c);
  meiro(W + 1, H, c);
  meiro(W, H - 1, c);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  while (1) {
    int w, h;
    cin >> w >> h;
    if (w == 0 && h == 0) {
      break;
    }
    memset(C, 10, sizeof(C));
    cin >> xs >> ys >> xg >> yg;
    int n;
    cin >> n;
    int c, d, x, y;
    for (int i = 0; i < n; i++) {
      cin >> c >> d >> x >> y;
      if (d == 0) {
        for (int j = x; j < x + 4; j++) {
          for (int k = y; k < y + 2; k++) {
            C[j][k] = c;
          }
        }
      } else {
        for (int j = x; j < x + 2; j++) {
          for (int k = y; k < y + 4; k++) {
            C[j][k] = c;
          }
        }
      }
    }
    meiro(xs, ys, C[xs][ys]);
    if (C[xg][yg] == -1) {
      cout << "OK\n";
    } else {
      cout << "NG\n";
    }
  }
  return 0;
}
```
- Avoid using `using namespace std` which is considered a bad practice.
- Declare `MAX` once and use it henceforth.
- Avoid using `std::endl` and use `'\n'` instead.
- Use `memset` to initialize the array.
- Use `ios_base::sync_with_stdio(false)` and `cin.tie(nullptr)` to speed up the input-output process.
- Declare the global variables `xs`, `ys`, `xg`, `yg` at the top.