```c++
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <iostream>
#include <vector>
using namespace std;

const double EPS = 1e-6;

inline double add(double a, double b) {
  return abs(a + b) < EPS * (abs(a) + abs(b)) ? 0 : a + b;
}

struct point {
  double x, y;
  point() {}
  point(double x, double y) : x(x), y(y) {}
  point operator+(point p) { return point(add(x, p.x), add(y, p.y)); }
  point operator-(point p) { return point(add(x, -p.x), add(y, -p.y)); }
  point operator*(double d) { return point(x * d, y * d); }
  point operator/(double d) { return point(x / d, y / d); }
};

inline double dist(point a, point b) {
  double dx = a.x - b.x;
  double dy = a.y - b.y;
  return sqrt(dx*dx + dy*dy);
}

int main(void) {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, x, y, v;
  while (cin >> n, n) {
    vector<point> P(n);
    vector<double> V(n);
    for (int i = 0; i < n; i++) {
      cin >> x >> y >> v;
      P[i] = point(x, y);
      V[i] = v;
    }
    double r = 0.98;
    point now(0, 0);
    double d = 10;
    while (d > EPS) {
      int mx = 0;
      double mxd = 0;
      for (int j = 0; j < n; j++) {
        double tmp = dist(now, P[j]) / V[j];
        if (tmp > mxd) {
          mx = j;
          mxd = tmp;
        }
      }
      point dir = P[mx] - now;
      double norm = dist(P[mx], now);
      dir = dir / norm;
      dir = dir * d;
      now = now + dir;
      d *= r;
    }
    double ans = 0;
    for (int i = 0; i < n; i++) {
      ans = max(ans, dist(now, P[i]) / V[i]);
    }
    printf("%.8f\n", ans);
  }
  return 0;
}
```