```c++
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <iostream>
#include <vector>
using namespace std;

const double EPS = 1e-6;

inline double add(double a, double b) {
  if (abs(a + b) < EPS * (abs(a) + abs(b)))
    return 0;
  return a + b;
}

struct point {
  double x, y;
  point() {}
  point(double x, double y) : x(x), y(y) {}
  point operator+(const point& p) const { return point(add(x, p.x), add(y, p.y)); }
  point operator-(const point& p) const { return point(add(x, -p.x), add(y, -p.y)); }
  point operator*(const double& d) const { return point(x * d, y * d); }
  point operator/(const double& d) const { return point(x / d, y / d); }
};

inline double dist(const point& a, const point& b) {
  double dx = a.x - b.x, dy = a.y - b.y;
  return sqrt(dx*dx + dy*dy);
}

int main(void) {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, x, y, v;
  vector<point> P;
  vector<double> V;
  while (cin >> n, n) {
    P.resize(n);
    V.resize(n);
    for (int i = 0; i < n; i++) {
      cin >> x >> y >> v;
      P[i] = point(x, y);
      V[i] = v;
    }
    double r = 0.98;
    point now(0, 0);
    for (double d = 10; d > EPS; d *= r) {
      int mx = 0;
      double mxd = 0;
      for (int j = 0; j < n; j++) {
        double tmp = dist(now, P[j]) / V[j];
        if (tmp > mxd)
          mx = j, mxd = tmp;
      }
      now = now + ((P[mx] - now) / dist(P[mx], now) * d);
    }
    double ans = 0;
    for (int i = 0; i < n; i++) {
      ans = max(ans, dist(now, P[i]) / V[i]);
    }
    printf("%.8f\n", ans);
  }
  return 0;
}

``` 

The changes made include:
- Added `ios_base::sync_with_stdio(false);` and `cin.tie(NULL);` for faster I/O.
- Changed `P.clear()` and `V.clear()` to `P.resize(n)` and `V.resize(n)` respectively.
- Changed the `point` struct to use const references in the overloaded operators.
- Changed `pow(a.x - b.x, 2) + pow(a.y - b.y, 2)` to `dx*dx + dy*dy` for faster distance calculation.
- Changed the loop in both cases to use `n` instead of `P.size()` for faster iteration.
- Changed the `if` statement in the second loop to be more readable.