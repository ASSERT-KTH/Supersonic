```c++
#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>

using namespace std;

const double EPS = 1e-10;

struct Point {
    double x, y;
    Point() {}
    Point(double _x, double _y) : x(_x), y(_y) {}
    Point operator+(const Point& p) const { return Point(x + p.x, y + p.y); }
    Point operator-(const Point& p) const { return Point(x - p.x, y - p.y); }
    Point operator*(double k) const { return Point(x * k, y * k); }
    Point operator/(double k) const { return Point(x / k, y / k); }
    double norm() const { return x * x + y * y; }
    double abs() const { return sqrt(norm()); }
};

typedef Point Vector;
typedef vector<Point> Polygon;

double dot(const Vector& a, const Vector& b) { return a.x * b.x + a.y * b.y; }
double cross(const Vector& a, const Vector& b) { return a.x * b.y - a.y * b.x; }

int ccw(const Point& p0, const Point& p1, const Point& p2) {
    Vector a = p1 - p0;
    Vector b = p2 - p0;
    if (cross(a, b) > EPS) return 1;
    if (cross(a, b) < -EPS) return -1;
    if (dot(a, b) < -EPS) return 2;
    if (a.norm() < b.norm()) return -2;
    return 0;
}

bool orthogonal(const Point& p1, const Point& p2, const Point& p3, const Point& p4) {
    return abs(dot(p1 - p2, p3 - p4)) < EPS;
}

bool intersect(const Point& p1, const Point& p2, const Point& p3, const Point& p4) {
    return (ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 && ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0);
}

double distance_l_p(const Point& p, const Point& l1, const Point& l2) {
    return abs(cross(l2 - l1, p - l1)) / (l2 - l1).abs();
}

bool intersect_circle_point(const Point& center, double r, const Point& l1, const Point& l2) {
    return (distance_l_p(center, l1, l2) <= r + EPS);
}

bool isSimple(const Polygon& pol) {
    const int pol_size = pol.size();
    for (int i = 0; i < pol_size; i++) {
        for (int j = i + 2; j < pol_size; j++) {
            if (i == j || i == (j - 1 + pol_size) % pol_size || i == (j + 1) % pol_size) continue;
            if (intersect(pol[i], pol[i + 1], pol[j], pol[j + 1])) return false;
        }
    }
    return true;
}

bool isPointInsidePolygon(const Polygon& side, const Point& p) {
    int c = 0, sideSum = side.size();
    for (int i = 0; i < sideSum; i++) {
        if (cross(side[i + 1] - side[i], p - side[i]) > 0) c++;
    }
    return !(c % sideSum);
}

#define MAX_N 100

bool cmp_x(const Point& p, const Point& q) {
    if (p.x != q.x) return p.x < q.x;
    return p.y < q.y;
}

Polygon convex_hull(Point* ps, int n) {
    sort(ps, ps + n, cmp_x);
    int k = 0;
    Polygon qs(n * 2);
    for (int i = 0; i < n; i++) {
        while (k > 1 && cross((qs[k - 1] - qs[k - 2]), (ps[i] - qs[k - 1])) <= 0) k--;
        qs[k++] = ps[i];
    }
    for (int i = n - 2, t = k; i >= 0; i--) {
        while (k > t && cross((qs[k - 1] - qs[k - 2]), (ps[i] - qs[k - 1])) <= 0) k--;
        qs[k++] = ps[i];
    }
    qs.resize(k - 1);
    return qs;
}

int main() {
    int N;
    while (cin >> N && N) {
        Point ps[MAX_N];
        for (int i = 0; i < N; i++) {
            char ch;
            cin >> ps[i].x >> ch >> ps[i].y;
        }
        Polygon res = convex_hull(ps, N);
        cout << N - res.size() << endl;
    }
    return 0;
}
```