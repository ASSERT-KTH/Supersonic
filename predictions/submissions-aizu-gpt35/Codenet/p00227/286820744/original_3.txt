```
#include <algorithm>
#include <iostream>
#include <vector>
int main() {
  int num, cap, price, i;
  while (std::cin >> num >> cap) {
    if (num == 0 && cap == 0) {
      break;
    }
    std::vector<int> vegetables(num);
    for (i = 0; i < num; ++i) {
      std::cin >> price;
      vegetables[i] = price;
    }
    std::sort(vegetables.rbegin(), vegetables.rend());
    int sum = 0;
    for (i = 0; i < num; ++i) {
      if (i % cap != cap - 1) {
        sum += vegetables[i];
      }
    }
    std::cout << sum << std::endl;
  }
}
```

Optimizations:

1. Instead of using `push_back()` to add elements to the vector, we can pre-allocate the required space and use `operator[]` to directly assign the values at each index.

2. The `std::greater<int>` comparator can be replaced with `std::sort` using `std::reverse_iterator`s to sort the vector in descending order.

3. The `while` loop can be replaced with a `for` loop for better readability and to avoid the need for an extra counter variable `i`.

4. The condition `((i + 1) % cap != 0)` can be simplified to `(i % cap != cap - 1)`.