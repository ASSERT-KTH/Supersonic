```
#include <algorithm>
#include <iostream>
#include <vector>
int main() {
  int num, cap, price, i;
  while (std::cin >> num >> cap) {
    if (num == 0 && cap == 0) {
      break;
    }
    std::vector<int> vegetables(num);
    for (i = 0; i < num; ++i) {
      std::cin >> price;
      vegetables[i] = price;
    }
    std::sort(vegetables.rbegin(), vegetables.rend());
    int sum = 0;
    for (i = 0; i < num; ++i) {
      if (i % cap != cap - 1) {
        sum += vegetables[i];
      }
    }
    std::cout << sum << std::endl;
  }
}
```

Explanation:
- Instead of using `push_back` to add elements to the vector, we can preallocate the required space and directly assign values to the indices.
- We can sort the vector in descending order using `std::sort` and passing in `rbegin()` and `rend()` iterators.
- We can use a `for` loop instead of a `while` loop and eliminate the need for a separate counter variable.
- We can simplify the condition for adding prices to the sum by checking if the current index is not the last index in the current group of `cap` items.