```c++
#include <algorithm>
#include <cstdio>
#include <vector>
using namespace std;
class Point {
public:
    int x, y;
    Point(int a = 0, int b = 0) {
        x = a; // fixed initialization
        y = b; // fixed initialization
    };
    bool operator<(const Point &p) const {
        return y < p.y || (y == p.y && x < p.x);
    }
};
inline bool direct(const Point &base, const Point &a, const Point &b) { // fixed constness
    return (a.x - base.x) * (b.y - base.y) - (a.y - base.y) * (b.x - base.x) < 0;
}
int main() {
    int n, i;
    int k = 2;
    Point *P;
    Point *H;
    scanf("%d", &n);
    P = new Point[n];
    for (i = 0; i < n; ++i) { // fixed starting index
        scanf("%d%d", &P[i].x, &P[i].y); // fixed accessing the correct element
    }
    sort(P, P + n);
    H = new Point[2 * n];
    H[0] = P[0];
    H[1] = P[1];
    for (i = 0; i < n - 2; ++i) {
        while (k >= 2 && direct(H[k - 2], H[k - 1], P[i + 2]))
            k--;
        H[k++] = P[i + 2];
    }
    H[k++] = P[n - 2];
    for (i = n - 1; i > 1; i--) { // fixed loop condition
        while (k >= 2 && direct(H[k - 2], H[k - 1], P[i - 2])) // fixed accessing the correct element
            k--;
        H[k++] = P[i - 2]; // fixed accessing the correct element
    }
    printf("%d\n", k - 1);
    for (i = 0; i < k - 1; ++i) {
        printf("%d %d\n", H[i].x, H[i].y);
    }
    delete[] P; // added freeing the memory
    delete[] H; // added freeing the memory
    return 0;
}
```