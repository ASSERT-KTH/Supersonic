```c++
#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;
const int MAX_T = 3000, MAX_M = 300;
int M, start, goal, dice[6], N[MAX_M];
bool isPositionValid(int p) { return 0 <= p && p < M; }
vector<int> adj[MAX_M * 2 + 5];
int dist[MAX_M * 2 + 5];
bool vis[MAX_M * 2 + 5];
void addEdge(int u, int v) {
    adj[u].push_back(v);
}
void bfs(int s) {
    queue<int> q;
    q.push(s);
    dist[s] = 0;
    vis[s] = true;
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        for (int v : adj[u]) {
            if (!vis[v]) {
                vis[v] = true;
                dist[v] = dist[u] + 1;
                q.push(v);
            }
        }
    }
}
int main() {
    cin >> M;
    for (int r = 0; r < 6; r++)
        cin >> dice[r];
    cin >> start >> goal;
    start--, goal--;
    for (int m = 0; m < M; m++)
        cin >> N[m];
    for (int u = 0; u < M; u++) {
        for (int r = 0; r < 6; r++) {
            int v = u + dice[r] + N[u];
            if (isPositionValid(v)) {
                addEdge(u, M + v);
                addEdge(M + v, u);
            }
            v = u - dice[r] + N[u];
            if (isPositionValid(v)) {
                addEdge(u, M + v);
                addEdge(M + v, u);
            }
        }
    }
    memset(dist, 0x3f, sizeof dist);
    bfs(start);
    int position = start;
    for (int t = 0; t < MAX_T; t++) {
        if (position == goal)
            break;
        int r;
        cin >> r;
        int d = dice[r - 1];
        bool moved = false;
        for (int v : adj[position + M]) {
            if (dist[v] == dist[position + M] - 1) {
                position = v - M;
                moved = true;
                break;
            }
        }
        if (!moved) {
            for (int v : adj[position]) {
                if (dist[v] == dist[position] - 1) {
                    position = v;
                    break;
                }
            }
        }
        cout << (moved ? (position > goal ? -1 : 1) : 0) << endl;
    }
    return 0;
}
```