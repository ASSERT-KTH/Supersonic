```c++
#include <bits/stdc++.h>
using namespace std;
const int MAX_N = 1e5 + 5, MAX_M = 2e5 + 5;
int n, m, q, a[MAX_M], b[MAX_M], c, dist[MAX_N], T[MAX_N], cnt, U[MAX_N];
vector<pair<int, int>> x[MAX_N], y[MAX_N];
bool used[MAX_M];
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  cin >> n >> m >> q;
  for (int i = 0; i < m; i++) {
    cin >> a[i] >> b[i];
    x[a[i]].emplace_back(b[i], i);
    x[b[i]].emplace_back(a[i], i);
  }
  memset(dist, 0x3f, sizeof(dist));
  dist[1] = 0;
  queue<int> Q;
  Q.push(1);
  while (!Q.empty()) {
    int a1 = Q.front();
    Q.pop();
    for (pair<int, int> i : x[a1]) {
      if (dist[i.first] > dist[a1] + 1) {
        dist[i.first] = dist[a1] + 1;
        Q.push(i.first);
      }
    }
  }
  for (int i = 1; i <= n; i++) {
    for (pair<int, int> j : x[i]) {
      if (dist[i] < dist[j.first]) {
        y[i].emplace_back(j);
        T[j.first]++;
      }
    }
  }
  while (q--) {
    cin >> c;
    c--;
    queue<pair<int, int>> Q1;
    int ss = -1;
    if (dist[a[c]] < dist[b[c]])
      ss = b[c];
    if (dist[a[c]] > dist[b[c]])
      ss = a[c];
    if (ss >= 1 && U[ss] == 0 && used[c] == false) {
      Q1.emplace(ss, c);
      while (!Q1.empty()) {
        int a1 = Q1.front().first, a2 = Q1.front().second;
        Q1.pop();
        if (U[a1] == 1 || used[a2] == true)
          continue;
        T[a1]--;
        used[a2] = true;
        if (T[a1] != 0)
          continue;
        cnt++;
        U[a1] = 1;
        for (pair<int, int> j : y[a1]) {
          if (U[j.first] == 0)
            Q1.push(j);
        }
      }
    }
    cout << cnt << '\n';
  }
  return 0;
}
```

Optimizations made:
1. Replaced `scanf` and `printf` with `cin` and `cout` respectively.
2. Added `ios::sync_with_stdio(false)`, `cin.tie(nullptr)` and `cout.tie(nullptr)` to speed up I/O operations.
3. Declared `MAX_N` and `MAX_M` constants for maximum values of `n` and `m`.
4. Reduced the size of arrays `a` and `b` to `MAX_M`.
5. Replaced `fill` with `memset`.
6. Replaced `push_back` with `emplace_back`.
7. Reduced the size of arrays `dist`, `T` and `U` to `MAX_N`.
8. Replaced `cout << endl` with `cout << '\n'` for faster output.