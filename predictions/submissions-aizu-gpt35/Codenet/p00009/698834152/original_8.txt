```
#include <iostream>
#define MAX 999999
using namespace std;
int num_prime[MAX + 1];
bool not_prime_flag[MAX + 1];
int main() {
  ios_base::sync_with_stdio(false); // added line
  cin.tie(NULL); // added line
  int n;
  for (int i = 2; i * i <= MAX; ++i) { // optimized loop condition
    if (!not_prime_flag[i]) {
      for (int j = i * i; j <= MAX; j += i) { // optimized inner loop
        not_prime_flag[j] = true;
      }
    }
  }
  for (int i = 2; i <= MAX; ++i) { // optimized loop
    num_prime[i] = num_prime[i - 1] + !not_prime_flag[i];
  }
  while (cin >> n) {
    cout << num_prime[n] << endl;
  }
  return 0;
}
``` 

Explanation:
1. Added `ios_base::sync_with_stdio(false)` and `cin.tie(NULL)` to improve input/output speed.
2. Changed the loop condition of the outer loop to `i * i <= MAX` since all primes greater than the square root of `MAX` will have been marked as not prime by then.
3. Optimized the inner loop by starting at `i * i` instead of `2 * i`. This is because all smaller multiples of `i` would have already been marked as not prime by previous iterations of the outer loop. Also, we increment the inner loop by `i` instead of `2 * i` to avoid redundant checks.
4. Changed the loop to start at `2` instead of `i = 2` to avoid a redundant check for `i = 2`.