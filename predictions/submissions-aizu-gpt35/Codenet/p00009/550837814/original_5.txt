```
#include <math.h>
#include <stdio.h>

#define MAX 1000000

int main() {
  int i, j, n;
  int num[MAX] = {0};
  num[0] = num[1] = 1;
  for (i = 2; i < sqrt(MAX); i++) {
    if (num[i] == 0) {
      for (j = i * i; j < MAX; j += i)
        num[j] = 1;
    }
  }
  for (i = 1; i < MAX; i++) {
    num[i] += num[i - 1];
  }
  while (scanf("%d", &n) != EOF) {
    printf("%d\n", num[n]);
  }
  return 0;
}
```
In this optimized version, I have made the following changes:

- Defined a macro `MAX` to avoid using hard-coded constants.
- Initialize the array `num` with all zeros and changed the initialization of `num[0]` and `num[1]` to `1`.
- Changed the condition in the outer loop of the sieve algorithm to `num[i] == 0`, which is more intuitive and easier to understand.
- Changed the loop variable of the last loop to a `while` loop, which is more concise and efficient.
- Changed the order of the two loops that calculate the prefix sum, which is more efficient since it avoids updating the same element twice.