```c++
#include <iostream>
#include <vector>
using namespace std;
vector<int> Input(const int n) {
  vector<int> W(n);
  for (int i = 0; i < n; i++) {
    cin >> W[i];
  }
  return W;
}
bool IsAllLoaded(int P, const vector<int>& W, int k) {
  int CurrentSum = 0;
  for (int i = 0; i < W.size(); i++) {
    if (W[i] > P) {
      return false;
    }
    CurrentSum += W[i];
    if (CurrentSum > P) {
      CurrentSum = W[i];
      k--;
    }
    if (k == 0) {
      return false;
    }
  }
  return true;
}
int Calc(const vector<int>& W, int k) {
  int Sum = 0, MaxWeight = 0;
  for (auto weight : W) {
    Sum += weight;
    MaxWeight = max(MaxWeight, weight);
  }
  int l = MaxWeight, r = Sum;
  while (l < r) {
    int mid = (l + r) >> 1;
    if (IsAllLoaded(mid, W, k)) {
      r = mid;
    } else {
      l = mid + 1;
    }
  }
  return l;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int n, k;
  cin >> n >> k;
  auto W = Input(n);
  int P = Calc(W, k);
  cout << P << '\n';
  return 0;
}
``` 

Explanation: 
1. In the `Input` function, we can reserve the space for the vector in advance to avoid unnecessary reallocation and copy.
2. In the `IsAllLoaded` function, we can pass the vector by const reference to avoid copying, and we can simplify the code by removing the `TrackIndex` variable.
3. In the `Calc` function, we can compute the maximum weight in advance, and use binary search to find the minimum weight capacity that can load all packages. This will significantly reduce the time complexity from O(N^2) to O(NlogS), where S is the sum of all the package weights.