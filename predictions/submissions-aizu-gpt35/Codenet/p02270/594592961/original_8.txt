```c++
#include <iostream>
#include <vector>
using namespace std;

vector<int> Input(const int n) {
  vector<int> W(n);
  for (int i = 0; i < n; i++) {
    cin >> W[i];
  }
  return W;
}

bool IsAllLoaded(int P, const vector<int>& W, int k) {
  int CurrentSum = 0;
  for (int i = 0; i < W.size(); i++) {
    if (W[i] > P) {
      return false;
    }
    if (CurrentSum + W[i] > P) {
      k--;
      if (k == 0) {
        return false;
      }
      CurrentSum = 0;
    }
    CurrentSum += W[i];
  }
  return true;
}

int Calc(const vector<int>& W, int k) {
  int Sum = 0;
  int Max = 0;
  for (int i = 0; i < W.size(); i++) {
    Sum += W[i];
    Max = max(Max, W[i]);
  }
  int L = Max;
  int R = Sum;
  while (L < R) {
    int Mid = (L + R) / 2;
    if (IsAllLoaded(Mid, W, k)) {
      R = Mid;
    } else {
      L = Mid + 1;
    }
  }
  return L;
}

int main() {
  int n, k;
  cin >> n >> k;
  vector<int> W = Input(n);
  int P = Calc(W, k);
  cout << P << endl;
  return 0;
}
``` 

I replaced the `push_back` function with an initialization of the vector with size n. I also passed the vector by reference instead of copying it. I also removed the variable `TrackIndex` to simplify the code. Instead, I decremented the `k` variable when a new truck is needed. Additionally, I used binary search instead of iterating over all possible values of P.