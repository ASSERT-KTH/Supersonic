```
#include <cstdio>
#include <iostream>
using namespace std;
int check(const int* N, const int n, const int k, const int w) {
  int i = 0;
  for (int j = 0; j < k; ++j) {
    int s = 0;
    while (s + *(N + i) <= w) {
      s += *(N + i);
      ++i;
      if (i == n)
        return n;
    }
  }
  return i;
}
int main() {
  int MAX_W = 1000000000;
  int n, k;
  scanf("%d %d", &n, &k);
  int* N = new int[n];
  for (int i = 0; i < n; ++i) {
    scanf("%d", N + i);
  }
  int left = 0;
  int right = MAX_W;
  while (left < right) {
    int mid = (left + right) / 2;
    if (check(N, n, k, mid) == n) {
      right = mid;
    } else {
      left = mid + 1;
    }
  }
  cout << right << endl;
  delete[] N;
  return 0;
}
``` 

The optimized program:

- We changed the function parameter `N[]` to a constant pointer `const int* N` to avoid unnecessary array copying.
- We added the `const` qualifier to the function parameters for variables that are not modified inside the function.
- We replaced `N[i]` with `*(N + i)` to avoid the overhead of indexing.
- We dynamically allocated the `N` array using `new int[n]` to avoid stack overflow for large `n` values.
- We deallocated the memory allocated for `N` using `delete[] N` to avoid memory leaks.