```
#include <algorithm>
#include <cstdio>
#include <iostream>
#include <math.h>
using namespace std;
const int INF = 2000000000;
int main() {
  int n, m;
  cin >> n >> m;
  int c[21];
  int mini[50001];
  for (int i = 1; i <= m; i++) {
    cin >> c[i];
  }
  sort(c + 1, c + 1 + m);
  mini[0] = 0;
  for (int i = 1; i <= n; i++)
    mini[i] = INF;
  for (int i = 1; i <= m; i++) {
    for (int j = c[i]; j <= n; j++) {
      mini[j] = min(mini[j], mini[j - c[i]] + 1);
    }
  }
  cout << mini[n] << endl;
  return 0;
}
``` 

Explanation: 

1. In the original code, the array `mini` was initialized with `INF` values which is not necessary. Instead, the `mini[0]` value should be initialized to `0`.
2. In the inner loop, the starting value of `j` was `0`. However, since `c[i]` can be greater than `j`, it is better to start from `c[i]`. This reduces the number of iterations needed in the inner loop.
3. The `min` function can be moved inside the loop and the order of the arguments can be switched to reduce the number of comparisons.
4. By making these changes, the program's running time and memory usage can be improved.