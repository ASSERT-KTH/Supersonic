```
#include <algorithm>
#include <cstdio>
#include <iostream>
#include <math.h>
using namespace std;
const int INF = 2000000000;
int main() {
  int n, m;
  cin >> n >> m;
  int c[21];
  int mini[50001];
  for (int i = 1; i <= m; i++) {
    cin >> c[i];
  }
  sort(c + 1, c + 1 + m);
  for (int i = 1; i <= n; i++)
    mini[i] = INF;
  for (int i = 1; i <= m; i++) {
    for (int j = c[i]; j <= n; j++) {
      mini[j] = min(mini[j], mini[j - c[i]] + 1);
    }
  }
  cout << mini[n] << endl;
  return 0;
}
``` 

Explanation:

1. In the original code, the loop over `j` starts from 0 and goes up to `n - c[i]`. However, it is enough to start from `c[i]` because there is no need to consider values less than `c[i]` since they have already been covered in previous iterations. This eliminates unnecessary iterations and reduces the running time.

2. In the original code, the `min` function is called with two arguments, one of which is `INF`. However, this is not necessary because `mini[j]` is always less than or equal to `mini[j] + 1`. Therefore, we only need to call the `min` function with the two arguments `mini[j]` and `mini[j - c[i]] + 1`. This reduces the number of function calls and improves the performance.

3. I have also removed unnecessary headers and added some white spaces for better readability.