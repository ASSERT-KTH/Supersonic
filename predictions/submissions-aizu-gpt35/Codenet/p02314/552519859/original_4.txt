```c++
#include <algorithm>
#include <cstdio>
#include <iostream>
#include <math.h>
using namespace std;
const int INF = 2000000000;
int main()
{
  int n, m;
  cin >> n >> m;
  int c[21];
  int mini[50001];
  for (int i = 1; i <= m; i++) {
    cin >> c[i];
  }
  sort(c + 1, c + 1 + m);
  for (int i = 1; i <= n; i++)
    mini[i] = INF;
  for (int i = 1; i <= m; i++) {
    for (int j = c[i]; j <= n; j++) {
      mini[j] = min(mini[j], mini[j - c[i]] + 1);
    }
  }
  cout << mini[n] << endl;
  return 0;
}
```

I changed the inner loop to start at `c[i]` instead of `0` and end at `n` instead of `n-c[i]`. This way we don't need to check if `j+c[i]` is inside the bounds of the array `mini`. Also, I used `mini[j - c[i]]` instead of `mini[j] + 1` inside the `min` function to avoid accessing `mini` with an out-of-bounds index. Finally, I swapped the order of the operands inside the `min` function to put the constant `1` outside of it, which may help the compiler optimize the code better.