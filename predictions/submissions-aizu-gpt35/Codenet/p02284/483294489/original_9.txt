```c++
#include <cstdio>
#include <iostream>
#include <unordered_set>
using namespace std;

struct Node {
  int key;
  Node *parent, *left, *right;
};

Node *root, *NIL;

void insert(int k) {
  Node *y = NIL;
  Node *x = root;
  Node *z = new Node;
  z->key = k;
  z->left = NIL;
  z->right = NIL;
  while (x != NIL) {
    y = x;
    if (z->key < x->key) {
      x = x->left;
    } else {
      x = x->right;
    }
  }
  z->parent = y;
  if (y == NIL) {
    root = z;
  } else {
    if (z->key < y->key)
      y->left = z;
    else
      y->right = z;
  }
}

bool find(int k) {
  Node *v = root;
  while (v != NIL) {
    if (k == v->key)
      return true;
    if (k < v->key) {
      v = v->left;
    } else {
      v = v->right;
    }
  }
  return false;
}

void inorder(Node *u) {
  if (u == NIL)
    return;
  inorder(u->left);
  printf(" %d", u->key);
  inorder(u->right);
}

void preorder(Node *u) {
  if (u == NIL)
    return;
  printf(" %d", u->key);
  preorder(u->left);
  preorder(u->right);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  int n, x;
  string com;
  cin >> n;

  unordered_set<int> keys;
  while (n--) {
    cin >> com;
    if (com == "insert") {
      cin >> x;
      if (!keys.count(x)) {
        insert(x);
        keys.insert(x);
      }
    } else if (com == "print") {
      inorder(root);
      cout << endl;
      preorder(root);
      cout << endl;
    } else if (com == "find") {
      cin >> x;
      if (keys.count(x))
        cout << "yes" << endl;
      else
        cout << "no" << endl;
    }
  }
  return 0;
}
``` 

I have made the following changes in the program:
- Added `#include <unordered_set>` to use an unordered set to keep track of the keys present in the tree. This will help in reducing the running time of the find operation.
- Added `ios_base::sync_with_stdio(false)` and `cin.tie(nullptr)` to speed up the input and output streams.
- Modified the `insert()` function to check if the key already exists in the tree before inserting it. If the key already exists, it is not inserted again. This will help in reducing the memory usage of the program.