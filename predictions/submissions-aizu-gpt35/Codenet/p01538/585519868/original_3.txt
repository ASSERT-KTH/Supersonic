```
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <stdio.h>
#include <vector>
using namespace std;
int main() {
  int Q, N, count, tmp, max, S;
  bool FLG;
  scanf("%d", &Q);
  bool *table = new bool[1000001]();
  for (int loop = 0; loop < Q; loop++) {
    fill(table, table + 1000001, false);
    count = 0;
    scanf("%d", &N);
    table[N] = true;
    FLG = false;
    while (true) {
      if (N < 10)
        break;
      max = 0;
      for (S = 10; N / S != 0; S *= 10) {
        tmp = (N / S) * (N % S);
        max = (max >= tmp) ? max : tmp;
      }
      N = max;
      if (table[N]) {
        FLG = true;
        break;
      } else {
        table[N] = true;
        count++;
      }
    }
    if (FLG) {
      printf("-1\n");
    } else {
      printf("%d\n", count);
    }
  }
  delete[] table;
  return 0;
}
```

I have made the following changes to the code:
1. Initialized the boolean array `table` with zeroes using the `()` syntax while creating it.
2. Replaced the nested loop that sets all elements of `table` to false with the `fill` algorithm from `<algorithm>` library.
3. Changed the condition in the while loop to check if `N` is less than 10 instead of checking if it is divisible by 10.
4. Changed the if condition to check if `table[N]` is true instead of comparing it with `true`.
5. Used `delete[]` to release memory allocated using `new`.