```c++
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <vector>
using namespace std;
#define M 9999
int parent[M], a[M], b[M];
double dist[M];
struct Point {
  double x, y, z, r;
  Point() {}
  Point(double xx, double yy, double zz, double rr) : x(xx), y(yy), z(zz), r(rr) {}
  double distance(const Point &p) const {
    return sqrt((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y) + (z - p.z) * (z - p.z)) - r - p.r;
  }
};
int root(int a) { return parent[a] == a ? a : parent[a] = root(parent[a]); }
int unite(int a, int b) {
  int x = root(a), y = root(b);
  if (x == y)
    return 0;
  parent[x] = y;
  return 1;
}
int main() {
  int i, j, k, m, n;
  double x, y, z, r;
  for (; scanf("%d", &n), n;) {
    vector<Point> v(n);
    for (i = 0; i < n; i++)
      scanf("%lf%lf%lf%lf", &x, &y, &z, &r), v[i] = Point(x, y, z, r);
    for (i = 0; i < n; i++)
      parent[i] = i;
    for (m = i = 0; i < n; i++)
      for (j = i + 1; j < n; j++) {
        x = v[i].distance(v[j]);
        if (x <= 0)
          unite(i, j);
        else
          a[m] = i, b[m] = j, dist[m++] = x;
      }
    double ans = 0.0;
    for (sort(dist, dist + m), i = 0; i < m; i++)
      if (unite(a[i], b[i]))
        ans += dist[i];
    printf("%.3f\n", ans);
  }
}

``` 

I have made the following changes:
- Avoided using `vector<vector<double>>` as it is slower than `vector<Point>`.
- Used a struct `Point` to represent the points with its own method to calculate distance.
- Stored the calculated distance in a separate array `dist` to avoid recomputation.
- Removed the pair approach to storing distance and index and used a separate array `a` and `b` to store the points making up the distance.