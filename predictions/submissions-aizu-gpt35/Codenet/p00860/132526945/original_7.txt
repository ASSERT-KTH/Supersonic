```c++
#include <iostream>
#include <cstring>
#include <queue>
using namespace std;

const int MAXN = 16;
const int MAXS = 1 << 24;
const int INF = 0x3f3f3f3f;
const int dif[5] = {0, -1, 1, -16, 16};
int vis[MAXS];
char c[MAXN][MAXN];
bool wall[256];

inline bool check(int u, int v) {
    for (int i = 0; i < 24; i += 8) {
        int p1 = v >> i & 255;
        if (p1) {
            int j = i == 16 ? 0 : i + 8;
            if (wall[p1]) return false;
            int p2 = (v >> j % 24) & 255;
            if (p1 == p2) return false;
            if (p1 == (u >> j % 24 & 255) && p2 == (u >> i % 24 & 255)) 
                return false;
        }
    }
    return true;
}

int bfs(int start, int goal) {
    queue<int> q;
    q.push(start);
    vis[start] = 0;
    while (!q.empty()) {
        int u = q.front(); q.pop();
        if (u == goal) 
            return vis[u];
        for (int i1 = (u & 255) ? 4 : 0; i1 >= 0; --i1)
            for (int i2 = (u >> 8 & 255) ? 4 : 0; i2 >= 0; --i2)
                for (int i3 = (u >> 16) ? 4 : 0; i3 >= 0; --i3) {
                    int v = u + dif[i1] + (dif[i2] << 8) + (dif[i3] << 16);
                    if (vis[v] != INF) continue;
                    if (check(u, v)) {
                        vis[v] = vis[u] + 1;
                        q.push(v);
                    }
                }
    }
    return -1;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    int w, h;
    while (cin >> w >> h, w) {
        memset(vis, 0x3f, sizeof vis);
        memset(wall, false, sizeof wall);
        for (int i = 0; i < h; ++i) {
            for (int j = 0; j < w; ++j) {
                cin >> c[i][j];
            }
        }
        int goal = 0, start = 0;
        for (int i = 0; i < h; ++i) {
            for (int j = 0; j < w; ++j) {
                if (c[i][j] == '#') wall[i << 4 | j] = true;
                else if (isupper(c[i][j])) {
                    goal |= (i << 4 | j) << (c[i][j] - 'A') * 8;
                } else if (islower(c[i][j])) {
                    start |= (i << 4 | j) << (c[i][j] - 'a') * 8;
                }
            }
        }
        cout << bfs(start, goal) << endl;
    }
    return 0;
}
```