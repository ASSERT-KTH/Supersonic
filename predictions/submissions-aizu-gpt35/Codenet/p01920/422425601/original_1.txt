```c++
#include <bits/stdc++.h>
using namespace std;

const int MAXN = 2e5+5;

int n, q, x1[MAXN], x2[MAXN], bucket_size, bucket_num;
int64_t bucket_sum[MAXN], update[MAXN], ans;
string s;

void update_bucket(int bucket_index) {
  if(update[bucket_index] < 2) {
    for(int i = bucket_index*bucket_size; i < min((bucket_index+1)*bucket_size, n); i++) {
      x1[i] = update[bucket_index];
      if(i+1 < n) x2[i] = x1[i]*x1[i+1];
    }
    bucket_sum[bucket_index] = update[bucket_index]*(min((bucket_index+1)*bucket_size, n) - bucket_index*bucket_size);
    update[bucket_index] = 2;
  }
}

int64_t sum() {
  int64_t res = 0;
  for(int i = 0; i < bucket_num; i++) {
    if(update[i] == 2) res += bucket_sum[i];
    else res += update[i]*(min((i+1)*bucket_size, n) - i*bucket_size);
  }
  return res;
}

void update_query(int l, int r, int b) {
  while(l%bucket_size != 0 and l <= r) {
    update_bucket(l/bucket_size);
    ans += b - x1[l];
    if(x1[l] == 0) ans += x2[l];
    else if(b == 0) ans -= x2[l];
    x1[l] = b;
    if(l+1 < n) x2[l] = x1[l]*x1[l+1];
    l++;
  }
  while((r+1)%bucket_size != 0 and l <= r) {
    update_bucket(r/bucket_size);
    ans += b - x1[r];
    if(x1[r] == 0) ans += x2[r];
    else if(b == 0) ans -= x2[r];
    x1[r] = b;
    if(r+1 < n) x2[r] = x1[r]*x1[r+1];
    r--;
  }
  if(l > r) return;
  for(int i = l/bucket_size; i <= r/bucket_size; i++) update[i] = b;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> n >> s >> q;
  bucket_size = sqrt(n);
  bucket_num = (n+bucket_size-1)/bucket_size;
  for(int i = 0; i < n; i++) {
    x1[i] = s[i] - '0';
    if(i+1 < n) x2[i] = x1[i]*x1[i+1];
  }
  for(int i = 0; i < q; i++) {
    int l, r, b;
    cin >> l >> r >> b;
    l--, r--;
    update_query(l, r, b);
    cout << ans << '\n';
  }
  return 0;
}
```