```
#include <bits/stdc++.h>
using namespace std;
int main() {
  bool data[31] = {false};
  int n;
  for (int i = 0; i < 28; i++) {
    cin >> n;
    data[n] = true;
  }
  for (int i = 1; i <= 30; i++) {
    if (!data[i])
      cout << i << endl;
  }
}
```
In this optimized code, I've used a boolean array `data` of size 31, initialized with `false`. Instead of using a `set`, I'm setting the corresponding boolean value to `true` for each element in the input. Then, I'm iterating over integers from 1 to 30 and checking if the boolean value is `false` for that integer. If it is, I'm printing that integer. This approach reduces the memory usage and improves the running time of the program.