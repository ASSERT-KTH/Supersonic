```c++
#include <iostream>
#include <unordered_set>
using namespace std;

int main() {
  unordered_set<int> data;
  int n;
  for (int i = 0; i < 28; i++) {
    cin >> n;
    data.insert(n);
  }
  for (int i = 1; i <= 30; i++) {
    if (data.find(i) == data.end())
      cout << i << endl;
  }
  return 0;
}
```

Changes Made:
- Replaced `set` with `unordered_set` for faster insertion and lookup.
- Used `data.find(i) == data.end()` instead of `!data.count(i)` for faster lookup.

Explanation:
- `unordered_set` is a container that stores unique elements in no particular order, and allows for fast insertion, removal, and lookup of individual elements.
- `set` is also a similar container but it stores the elements in a specific order and this ordering takes time.
- Hence, replacing `set` with `unordered_set` can make the program much faster.
- `data.find(i) == data.end()` checks if the element `i` is not present in the set `data`, which is faster than `!data.count(i)` which checks for the count of the element `i` in the set `data`.