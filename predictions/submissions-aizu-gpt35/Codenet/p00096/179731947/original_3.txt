```
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

int main() {
  unsigned long long dp[4001][5];
  for (int i = 0; i < 5; i++)
    for (int j = 0; j < 4001; j++)
      dp[j][i] = i == 1 && j <= 1000 ? 1 : 0;
  for (int i = 2; i <= 4; i++)
    for (int j = 0; j <= 4000; j++) {
      unsigned long long sum = 0;
      for (int k = 0; k <= j && k <= 1000; k++)
        sum += dp[j - k][i - 1];
      dp[j][i] = sum;
    }
  int n;
  while (cin >> n)
    cout << dp[n][4] << endl;
  return 0;
}
```

The optimization is to avoid repeated calculation of `dp[j-k][i-1]` in the inner loop of the second `for` loop. Instead, we can save the sum of these values in a temporary variable `sum` and assign it to `dp[j][i]` after the inner loop completes.