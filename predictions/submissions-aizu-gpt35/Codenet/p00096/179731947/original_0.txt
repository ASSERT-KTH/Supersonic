```
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
int main() {
  unsigned long long dp[4001][5];
  for (int i = 0; i < 5; i++)
    for (int j = 0; j < 4001; j++)
      dp[j][i] = i == 1 && j <= 1000 ? 1 : 0;
  for (int i = 2; i <= 4; i++)
    for (int j = 0; j <= 4000; j++)
      dp[j][i] = dp[j][i-1] + (j>=i ? dp[j-i][i] : 0);
  int n;
  while (cin >> n)
    cout << dp[n][4] << endl;
  return 0;
}
``` 

I replaced the nested loop inside the second loop with a single line of code that finds the sum of two terms, the first term is `dp[j][i-1]` and the second term is `dp[j-i][i]` if `j-i >= 0`, otherwise it is 0. This optimization takes into account the fact that we keep adding to the previous column `i-1` in the `dp` array, and that `dp[j-i][i]` is already computed in a previous iteration of the second loop.