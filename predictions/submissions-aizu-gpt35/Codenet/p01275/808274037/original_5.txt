```cpp
#include <iostream>
using namespace std;

int k, ans;
int dif[12];
const int M = 10;

// new function to calculate the difference array
void calculate_difference(string& s, string& t) {
    for (int i = 0; i < k; i++) {
        dif[i] = ((int)(t[i] - s[i]) + M) % M;
    }
}

// modified function to pass the difference array as a parameter
void rec(int d, int p, int dif[]) {
    if (p == k) {
        ans = d;
        return;
    }
    if (d >= ans)
        return;
    int rot = dif[p];
    if (rot == 0) {
        rec(d, p + 1, dif);
        return;
    }
    rec(d + 1, p + 1, dif);
    for (int i = p; i < k; i++) {
        dif[i] = (dif[i] - rot) % M;
        rec(d + 1, p + 1, dif);
        dif[i] = (dif[i] + rot + M) % M; // revert back the difference array
    }
}

int main() {
    while (cin >> k, k) {
        string s, t;
        cin >> s >> t;
        calculate_difference(s, t); // calculate difference array
        ans = k;
        rec(0, 0, dif); // pass the difference array to the function
        cout << ans << endl;
    }
}
``` 

Explanation: 

- We created a new function `calculate_difference` to calculate the difference array which will be passed to the `rec` function as a parameter.
- We modified the `rec` function to accept the difference array as a parameter and also to revert back the difference array after the recursive calls are made. 
- This will avoid creating a new copy of the difference array for each recursive call, which will save memory.