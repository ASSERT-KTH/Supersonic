```c++
#include <cstdio>
#include <cstring>
#include <iostream>
using namespace std;

const int MAX_N = 5002;

int n;
int t[MAX_N - 1];
int dp[MAX_N / 2 + 1][2], tmp[MAX_N / 2 + 1][2];

inline int minCost(const int& a, const int& b) {
  return (a == -1 || b < a) ? b : a;
}

int solve() {
  memset(tmp, -1, sizeof(tmp));
  tmp[1][0] = tmp[0][1] = 0;
  for (int i = 1; i < n; i++) {
    memset(dp, -1, sizeof(dp));
    for (int j = 0; j <= n / 2; j++) {
      for (int pre = 0; pre < 2; pre++) {
        if (tmp[j][pre] == -1) continue;
        for (int next = 0; next < 2; next++) {
          if (pre == next) {
            if (next == 0) dp[j + 1][next] = minCost(dp[j + 1][next], tmp[j][pre]);
            else dp[j][next] = minCost(dp[j][next], tmp[j][pre]);
          } else {
            if (next == 0) dp[j + 1][next] = minCost(dp[j + 1][next], tmp[j][pre] + t[i - 1]);
            else dp[j][next] = minCost(dp[j][next], tmp[j][pre] + t[i - 1]);
          }
        }
      }
    }
    for (int j = 0; j <= n / 2; j++) {
      for (int k = 0; k < 2; k++) {
        tmp[j][k] = dp[j][k];
      }
    }
  }
  return minCost(dp[n / 2][0], dp[n / 2][1]);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  cin >> n;
  for (int i = 0; i < n - 1; i++) {
    cin >> t[i];
  }
  cout << solve() << '\n';

  return 0;
}
```

- Removed unnecessary header files.
- Used `cin` and `cout` for I/O.
- Used `const int MAX_N` instead of hardcoding `10002` and `5002`.
- Removed unnecessary reference to function arguments.
- Used `inline` for the `minCost` function.
- Simplified `minCost` function.
- `memset` and nested loops are expensive, so used a `tmp` array instead of `dp` for the first iteration.