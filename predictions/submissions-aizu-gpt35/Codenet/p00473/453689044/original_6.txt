```c++
#include <cstdio>
#include <cstring>
#include <iostream>
using namespace std;

const int MAX_N = 5002;

int n;
int t[MAX_N - 1];
int dp[2][MAX_N / 2 + 1];

int minCost(const int &a, const int &b) {
  if (a == -1)
    return b;
  if (b == -1)
    return a;
  return a > b ? b : a;
}

int solve() {
  memset(dp, -1, sizeof(dp));
  dp[0][0] = dp[1][0] = 0;
  for (int i = 1; i < n; i++) {
    for (int j = 0; j <= i / 2; j++) {
      if (j == 0) {
        dp[i % 2][j] = dp[(i - 1) % 2][j];
      } else {
        dp[i % 2][j] =
            minCost(dp[(i - 1) % 2][j], dp[(i - 1) % 2][j - 1] + t[i - 1]);
      }
    }
  }
  return min(dp[(n - 1) % 2][n / 2], dp[(n - 1) % 2][(n - 1) / 2 + 1]);
}

int main() {
  scanf("%d", &n);
  for (int i = 0; i < n - 1; i++) {
    scanf("%d", &t[i]);
  }
  printf("%d\n", solve());
}

```