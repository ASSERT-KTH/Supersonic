I have optimized your code below:

```
#include <algorithm>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <queue>
#include <vector>

using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;

#define REP(i, n) for (int i = 0; i < (n); ++i)
#define ALL(x) begin(x), end(x)
#define RALL(x) rbegin(x), rend(x)
#define DUMP(x) cerr << #x << " = " << (x) << endl
#define DEBUG(x) cerr << #x << " = " << (x) << " (L" << __LINE__ << ")" << endl

char field[16][16];
int csize, wsize;
int cx[3], cy[3], wx[3], wy[3];
int sx, sy, gx, gy;
int bfscost[10][10];
int DP[9][9][9][9][9][9][9][9];

struct state {
  int x, y;
  int cx[3], cy[3];
  int Sc;
  state(int _x, int _y, int _cx[], int _cy[], int _Sc) {
    x = _x, y = _y, Sc = _Sc;
    cx[0] = _cx[0], cx[1] = _cx[1], cx[2] = _cx[2];
    cy[0] = _cy[0], cy[1] = _cy[1], cy[2] = _cy[2];
  }
  bool operator<(const state &a) const {
    if (x != a.x) return x < a.x;
    if (y != a.y) return y < a.y;
    if (cx[0] != a.cx[0]) return cx[0] < a.cx[0];
    if (cx[1] != a.cx[1]) return cx[1] < a.cx[1];
    if (cx[2] != a.cx[2]) return cx[2] < a.cx[2];
    if (cy[0] != a.cy[0]) return cy[0] < a.cy[0];
    if (cy[1] != a.cy[1]) return cy[1] < a.cy[1];
    if (cy[2] != a.cy[2]) return cy[2] < a.cy[2];
    return Sc < a.Sc;
  }
  bool operator==(const state &a) const {
    return (x == a.x && y == a.y &&
            (cx[0] == a.cx[0] && cx[1] == a.cx[1] && cx[2] == a.cx[2]) &&
            (cy[0] == a.cy[0] && cy[1] == a.cy[1] && cy[2] == a.cy[2]) &&
            Sc == a.Sc);
  }
};

const int dx[] = {0, 1, 0, -1};
const int dy[] = {-1, 0, 1, 0};

bool isDel(int tx, int ty, int ncx[], int ncy[]) {
  if (field[ty][tx] != 'w') return true;
  REP(i, csize) {
    if (ncx[i] == tx && ncy[i] == ty) return true;
  }
  return false;
}

bool isContena(int tx, int ty, int ncx[], int ncy[], int Sc) {
  REP(i, csize) {
    if (ncx[i] == tx && ncy[i] == ty && !(Sc & (1 << i))) return true;
  }
  return false;
}

void BFS(int nx, int ny, int ncx[], int ncy[], int Sc) {
  memset(bfscost, -1, sizeof(bfscost));
  bfscost[ny][nx] = 0;
  queue<pii> q;
  q.push({nx, ny});
  while (!q.empty()) {
    int x = q.front().first, y = q.front().second;
    int cost = bfscost[y][x];
    q.pop();
    REP(k, 4) {
      int tx = x + dx[k];
      int ty = y + dy[k];
      if (field[ty][tx] == '#' || bfscost[ty][tx] != -1 ||
          isContena(tx, ty, ncx, ncy, Sc))
        continue;
      if (field[ty][tx] == 'w' && !isDel(tx, ty, ncx, ncy)) continue;
      bfscost[ty][tx] = cost + 1;
      q.push({tx, ty});
    }
  }
}

void input() {
  REP(i, H) {
    scanf("%s", field[i]);
    REP(j, W) {
      if (field[i][j] == '@') sx = j, sy = i;
      if (field[i][j] == 'E') gx = j, gy = i;
      if (field[i][j] == 'w') wx[wsize] = j, wy[wsize] = i, ++wsize;
      if (field[i][j] == 'c') cx[csize] = j, cy[csize] = i, ++csize;
    }
  }
}

void solve() {
  REP(i, 3) cx[i] = cy[i] = 0;
  memset(DP, -1, sizeof(DP));
  while (scanf("%d%d", &H, &W), H | W) {
    csize = wsize = 0;
    input();
    int res = INT_MAX;
    priority_queue<pair<int, state>, vector<pair<int, state>>,
                   greater<pair<int, state>>>
        q;
    q.push({0, state(sx, sy, cx, cy, 0)});
    DP[cx[0]][cy[0]][cx[1]][cy[1]][cx[2]][cy[2]][sx][sy] = 0;
    while (!q.empty()) {
      int cost = q.top().first;
      int nx = q.top().second.x, ny = q.top().second.y;
      int tSc = q.top().second.Sc;
      int ncx[3], ncy[3];
      REP(i, 3) ncx[i] = ncy[i] = 0;
      REP(i, csize) ncx[i] = q.top().second.cx[i],
                        ncy[i] = q.top().second.cy[i];
      q.pop();
      if (res <= cost) break;
      BFS(nx, ny, ncx, ncy, tSc);
      if (bfscost[gy][gx] != -1) res = min(res, cost + bfscost[gy][gx]);
      REP(i, csize) if (!(tSc & (1 << i))) {
        REP(j, 4) {
          int tx = ncx[i] + dx[j];
          int ty = ncy[i] + dy[j];
          if (bfscost[ty][tx] == -1) continue;
          int ttSc = tSc;
          int dir = (j + 2) % 4;
          int tcx = ncx[i], tcy = ncy[i];
          for (;;) {
            int ay = tcy + dy[dir];
            int ax = tcx + dx[dir];
            if (field[ay][ax] == '#' || isContena(ax, ay, ncx, ncy, tSc))
              break;
            tcx += dx[dir];
            tcy += dy[dir];
            if (field[ay][ax] == 'w' && !isDel(ax, ay, ncx, ncy)) {
              ttSc |= 1 << i;
              break;
            }
          }
          if (tcx == ncx[i] && tcy == ncy[i]) continue;
          int ttcx[3], ttcy[3];
          REP(k, 3) ttcx[k] = ttcy[k] = 0;
          REP(k, csize) ttcx[k] = ncx[k], ttcy[k] = ncy[k];
          ttcx[i] = tcx, ttcy[i] = tcy;
          int *dpp =
              &DP[ttcx[0]][ttcy[0]][ttcx[1]][ttcy[1]][ttcx[2]][ttcy[2]][tx][ty];
          if (*dpp == -1 || *dpp > cost + bfscost[ty][tx]) {
            *dpp = cost + bfscost[ty][tx];
            q.push({cost + bfscost[ty][tx],
                     state(tx, ty, ttcx, ttcy, ttSc)});
          }
        }
      }
    }
    printf("%d\n", res == INT_MAX ? -1 : res);
  }
}

int main() {
  solve();
  return 0;
}
```