The given code uses a recursive approach to solve a problem related to binary strings. However, the code can be optimized in several ways to improve its efficiency.

1. Use a vector instead of a map:
   - The code uses a map to store computed results for each combination of the input vector and the "used" bitmask. However, using a map introduces unnecessary overhead due to the hashing and look-up operations.
   - Instead of using a map, we can use a vector to store the computed results. The index of the vector will correspond to the hash value, which can be computed using the pair of input vector and "used" bitmask.
   - This change will reduce the memory usage and improve the performance.

2. Avoid unnecessary vector resizing:
   - The code checks the size of the input vector in multiple places. If the size exceeds a certain threshold, the function returns a fixed value.
   - Instead of resizing the vector, we can track the size using a separate variable and update it in each recursive call.
   - This change will eliminate the need for resizing the vector and improve the performance.

3. Use references instead of passing by value:
   - The code passes the vector by value in each recursive call, which creates unnecessary copies of the vector.
   - Instead, we can pass the vector by reference to avoid the copy operations.
   - This change will reduce the memory usage and improve the performance.

4. Optimize the loop:
   - The code uses a loop to iterate over each element of the input vector and divide them into two groups based on a condition.
   - Instead of using a loop, we can use the `std::partition` algorithm from the `<algorithm>` library to divide the elements into two groups based on a condition.
   - This change will improve the performance by reducing the number of operations performed in each recursive call.

Here is the optimized code:

```cpp
#include <iostream>
#include <map>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> mp;
string qes[128];

int search(vector<int>& vi, int depth, int used, int m, int n, int size) {
  if (mp[size * used + vi[0]] != -1)
    return mp[size * used + vi[0]];

  if (size > (1 << (m - depth)))
    return 100;

  if (size == 1)
    return depth;

  int res = 100;

  for (int i = 0; i < m; i++) {
    if ((used >> i) & 1)
      continue;

    vector<int>::iterator mid = partition(vi.begin(), vi.end(), [&](int j) {
      return (qes[j][i] == '0');
    });

    int a_size = mid - vi.begin();
    int b_size = size - a_size;

    if (a_size == 0 || b_size == 0)
      continue;

    res = min(res, max(search(vi, depth + 1, used | (1 << i), m, n, a_size),
                       search(mid, depth + 1, used | (1 << i), m, n, b_size)));
  }

  mp[size * used + vi[0]] = res;
  return res;
}

int main() {
  int m, n;
  while (cin >> m >> n, m) {
    for (int i = 0; i < n; i++)
      cin >> qes[i];

    vector<int> vi(n);
    for (int i = 0; i < n; i++)
      vi[i] = i;

    int size = n;
    mp.assign((1 << m) * n, -1);

    cout << search(vi, 0, 0, m, n, size) << endl;
  }
}
```

Note: I have used the `std::partition` algorithm to divide the vector into two groups based on a condition. This algorithm has a complexity of O(n), which is more efficient than the original loop implementation. However, the overall time complexity of the code remains the same, i.e., O(2^m * n^2 * m), where m is the number of columns and n is the number of rows.