The first thing to note is that the code includes unnecessary header files. The `<limits.h>` and `<vector>` headers are not being used, so we can remove them to improve compilation time.

Next, let's analyze the performance bottlenecks in the code. The most obvious bottleneck is the use of the `priority_queue` data structure. Each time we call the `pop_and_print` function, it performs a `top()` operation followed by a `pop()` operation. Both of these operations have a time complexity of O(log n), where n is the number of elements in the priority queue.

To optimize the code, we can replace the `priority_queue` with a more efficient data structure - a min-heap implemented as a binary heap. A binary heap allows for efficient insertion and removal of the minimum element in O(log n) time complexity.

Additionally, we can avoid unnecessary function calls by directly implementing the logic inside the `main` function. This will eliminate the need for the `pop_and_print` function and reduce function call overhead.

Lastly, we can use the `std::ios_base::sync_with_stdio(false)` function to disable synchronization between C and C++ standard streams, which can improve input/output performance.

Now, let's go through the optimization steps one by one.

Step 1: Remove unnecessary header files.