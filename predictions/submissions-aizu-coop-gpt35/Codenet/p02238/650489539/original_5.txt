The provided code is an implementation of the Depth-First Search (DFS) algorithm to find the discovery and finishing times of vertices in a directed graph. Although the code is correct and produces the desired output, there are several areas where it can be optimized for efficiency. 

1. Inefficient Data Structures:
   - The adjacency matrix `G` is implemented as a 2D array of size 101x101. This approach leads to unnecessary memory usage, especially if the actual number of vertices (`n`) is much smaller. A more efficient approach would be to use a dynamic data structure, such as an adjacency list, to represent the graph.
   - The `color` array is used to keep track of the visited status of each vertex. However, the array is initialized with a fixed size of 101, which is not efficient if the actual number of vertices is smaller. A better approach would be to dynamically allocate memory for the `color` array based on the value of `n`.

2. Redundant Computations:
   - The condition `if (i == next && G[i][i] > 0)` in the loop can be removed since it is redundant. The loop iterates from `1` to `n`, and the condition `i == next` will always be true.
   - The condition `if (G[i][next] > 0 && color[next] == WHITE)` can be simplified by checking `G[i][next]` first and then checking `color[next]` only if `G[i][next]` is non-zero. This avoids unnecessary checks when `G[i][next]` is zero.

3. Loop Optimization:
   - The two loops that initialize the `G` matrix and the `color` array can be optimized by using `memset` instead of nested loops. This will significantly reduce the number of iterations and improve performance.

4. Compiler Optimizations:
   - The use of compiler optimizations, such as loop unrolling or pragma directives, can be explored to allow the compiler to optimize certain parts of the code.

With these optimizations in mind, let's proceed with the step-by-step explanation and the optimized code.