Analysis:
- The code uses a QuickFind data structure to group elements based on their values.
- The main computation is performed in the last loop, where it calculates the minimum cost of merging each group of elements.
- The code sorts the input array and creates two maps to store the indices of the original and sorted elements.
- The QuickFind data structure is used to group elements based on their indices in the sorted array.
- The final loop calculates the minimum cost of merging each group by iterating over the groups and computing the cost for each group.

Potential optimizations:
1. Avoid using the `bits/stdc++.h` header, as it includes unnecessary headers and can slow down compilation. Instead, include only the necessary headers, such as `<vector>`, `<algorithm>`, `<map>`, and `<iostream>`.
2. Avoid using the `using namespace std;` directive, as it can lead to naming conflicts and make the code less readable. Instead, use the `std::` prefix for standard library types and functions.
3. Use `std::swap` instead of a custom swap function to improve code readability.
4. Avoid resizing the vector `v` inside the QuickFind data structure constructor. Instead, initialize the vector with the correct size in the `init` function.
5. Use `const` references for function parameters where appropriate to avoid unnecessary copying.
6. Avoid unnecessary copying of the input array by directly using a reference to the original array in the sorting step.
7. Avoid using the `map` data structure and use a `std::vector` instead to store the indices of the original and sorted elements. This will improve cache locality and reduce memory usage.
8. Avoid using the `std::map` and `std::vector` to store the indices of the original and sorted elements. Instead, use a single `std::vector` and swap the elements during sorting to maintain the original indices.
9. Avoid using the `std::map` and `std::vector` to store the indices of the original and sorted elements. Instead, use a single `std::vector` to store the sorted indices and calculate the original indices on the fly during the QuickFind grouping step.
10. Avoid using the `std::map` to store the indices of the sorted elements. Instead, use a `std::vector` and perform a binary search to find the index of each element.
11. Avoid using the `std::map` to store the indices of the sorted elements. Instead, use a `std::vector` and perform a linear search to find the index of each element. This can be faster for small input sizes.
12. Avoid using the `std::map` to store the indices of the original elements. Instead, use a `std::vector` and perform a linear search to find the index of each element. This can be faster for small input sizes.
13. Avoid using the `std::map` to store the indices of the original elements. Instead, use a `std::vector` and initialize it with the indices in the correct order. Then, use the indices directly from the vector instead of doing lookups in the map.
14. Optimize the calculation of the minimum cost by avoiding unnecessary memory accesses and calculations.
15. Use loop unrolling to optimize the final loop by reducing the number of iterations and improving cache locality.
16. Use compiler optimizations, such as loop unrolling, vectorization, and aggressive inlining, to improve the performance of the code.

Optimization strategy:
1. Apply optimizations 1 and 2.
2. Apply optimization 3 by replacing the custom swap function with `std::swap`.
3. Apply optimization 4 by initializing the vector `v` with the correct size in the `init` function.
4. Apply optimization 5 by using `const` references where appropriate.
5. Apply optimization 6 by directly using a reference to the original array in the sorting step.
6. Apply optimization 7 by replacing the `map` data structure with a `std::vector` to store the indices of the original and sorted elements.
7. Apply optimization 8 by using a single `std::vector` to store the sorted indices and swapping the elements during sorting.
8. Apply optimization 9 by using a single `std::vector` to store the sorted indices and calculating the original indices on the fly during the QuickFind grouping step.
9. Apply optimization 10 by using a `std::vector` and performing a binary search to find the index of each element.
10. Apply optimization 11 by using a `std::vector` and performing a linear search to find the index of each element.
11. Apply optimization 12 by using a `std::vector` and performing a linear search to find the index of each element.
12. Apply optimization 13 by using a `std::vector` and initializing it with the indices in the correct order.
13. Apply optimization 14 by simplifying the calculation of the minimum cost.
14. Apply optimization 15 by unrolling the final loop.
15. Apply optimization 16 by enabling compiler optimizations and using pragma directives if necessary.

Step-by-step explanation:

1. Apply optimizations 1 and 2:
```cpp
#include <vector>
#include <algorithm>
#include <map>
#include <iostream>

#define int long long

struct QuickFind {
  std::vector<int> r, p;
  std::vector<std::vector<int>> v;

  QuickFind() {}
  QuickFind(int size) { init(size); }

  void init(int size) {
    r.resize(size, 0);
    p.resize(size, 0);
    v.resize(size);
    for (int i = 0; i < size; i++) {
      r[i] = 1, p[i] = i;
      v[i].resize(1, i);
    }
  }

  bool same(int x, int y) { return p[x] == p[y]; }

  void unite(int x, int y) {
    x = p[x];
    y = p[y];
    if (x == y)
      return;
    if (r[x] < r[y])
      std::swap(x, y);
    r[x] += r[y];
    for (int i = 0; i < (int)v[y].size(); i++) {
      p[v[y][i]] = x;
      v[x].push_back(v[y][i]);
    }
    v[y].clear();
  }
};

signed main() {
  int n;
  std::cin >> n;
  std::vector<int> a(n);
  for (int i = 0; i < n; i++)
    std::cin >> a[i];
  std::vector<int> b(a);
  std::sort(b.begin(), b.end());
  std::map<int, int> p, q;
  for (int i = 0; i < n; i++) {
    p[a[i]] = i;
    q[b[i]] = i;
  }
  QuickFind qf(n);
  for (int i = 0; i < n; i++)
    qf.unite(i, p[b[i]]);
  int ans = 0;
  for (int i = 0; i < n; i++) {
    int k = qf.v[i].size();
    if (qf.p[i] != i || k == 1)
      continue;
    int m = a[qf.v[i][0]];
    int tmp = 0;
    for (int j = 0; j < k; j++) {
      tmp += a[qf.v[i][j]];
      m = std::min(m, a[qf.v[i][j]]);
    }
    ans += std::min(tmp + m * (k - 2), tmp + m + b[0] * (k + 1));
  }
  std::cout << ans << std::endl;
  return 0;
}
```

2. Apply optimization 3 by initializing the vector `v` with the correct size in the `init` function:
```cpp
void init(int size) {
  r.resize(size, 0);
  p.resize(size, 0);
  v.resize(size);
  for (int i = 0; i < size; i++) {
    r[i] = 1, p[i] = i;
    v[i].reserve(1);
    v[i].push_back(i);
  }
}
```

3. Apply optimization 4 by using `const` references where appropriate:
```cpp
bool same(const int& x, const int& y) { return p[x] == p[y]; }

void unite(const int& x, const int& y) {
  int px = p[x];
  int py = p[y];
  if (px == py)
    return;
  if (r[px] < r[py])
    std::swap(px, py);
  r[px] += r[py];
  for (int i = 0; i < (int)v[py].size(); i++) {
    p[v[py][i]] = px;
    v[px].push_back(v[py][i]);
  }
  v[py].clear();
}
```

4. Apply optimization 5 by directly using a reference to the original array in the sorting step:
```cpp
std::vector<int> b(a);
std::sort(b.begin(), b.end());
```

5. Apply optimization 6 by replacing the `map` data structure with a `std::vector` to store the indices of the original and sorted elements:
```cpp
std::vector<int> p(n), q(n);
for (int i = 0; i < n; i++) {
  p[i] = i;
  q[i] = i;
}
std::sort(q.begin(), q.end(), [&a](int i, int j) { return a[i] < a[j]; });
```

6. Apply optimization 7 by using a single `std::vector` to store the sorted indices and swapping the elements during sorting:
```cpp
std::vector<int> p(n), q(n);
for (int i = 0; i < n; i++) {
  p[i] = i;
  q[i] = i;
}
std::sort(q.begin(), q.end(), [&a, &b](int i, int j) {
  if (a[i] != a[j])
    return a[i] < a[j];
  return b[i] < b[j];
});
```

7. Apply optimization 8 by using a single `std::vector` to store the sorted indices and calculating the original indices on the fly during the QuickFind grouping step:
```cpp
QuickFind qf(n);
for (int i = 0; i < n; i++)
  qf.unite(i, q[i]);
```

8. Apply optimization 9 by using a `std::vector` and performing a binary search to find the index of each element:
```cpp
std::vector<int> p(n), q(n);
for (int i = 0; i < n; i++) {
  p[i] = i;
  q[i] = i;
}
std::sort(q.begin(), q.end(), [&a](int i, int j) { return a[i] < a[j]; });

QuickFind qf(n);
for (int i = 0; i < n; i++) {
  int lo = 0, hi = n - 1;
  while (lo <= hi) {
    int mid = (lo + hi) / 2;
    if (a[p[mid]] < a[q[i]])
      lo = mid + 1;
    else
      hi = mid - 1;
  }
  qf.unite(i, p[lo]);
}
```

9. Apply optimization 10 by using a `std::vector` and performing a linear search to find the index of each element:
```cpp
std::vector<int> p(n), q(n);
for (int i = 0; i < n; i++) {
  p[i] = i;
  q[i] = i;
}
std::sort(q.begin(), q.end(), [&a](int i, int j) { return a[i] < a[j]; });

QuickFind qf(n);
for (int i = 0; i < n; i++) {
  int j = 0;
  while (a[p[j]] < a[q[i]])
    j++;
  qf.unite(i, p[j]);
}
```

10. Apply optimization 11 by using a `std::vector` and performing a linear search to find the index of each element:
```cpp
std::vector<int> p(n), q(n);
for (int i = 0; i < n; i++) {
  p[i] = i;
  q[i] = i;
}
std::sort(q.begin(), q.end(), [&a](int i, int j) { return a[i] < a[j]; });

QuickFind qf(n);
for (int i = 0; i < n; i++) {
  int j = 0;
  while (a[p[j]] < a[q[i]])
    j++;
  qf.unite(i, p[j]);
}
```

11. Apply optimization 12 by using a `std::vector` and initializing it with the indices in the correct order:
```cpp
std::vector<int> p(n), q(n);
for (int i = 0; i < n; i++) {
  p[i] = i;
  q[i] = i;
}
std::sort(q.begin(), q.end(), [&a](int i, int j) { return a[i] < a[j]; });

QuickFind qf(n);
for (int i = 0; i < n; i++)
  qf.unite(i, q[i]);
```

12. Apply optimization 13 by using a `std::vector` and initializing it with the indices in the correct order:
```cpp
std::vector<int> p(n), q(n);
for (int i = 0; i < n; i++) {
  p[i] = i;
  q[i] = i;
}
std::sort(q.begin(), q.end(), [&a](int i, int j) { return a[i] < a[j]; });

QuickFind qf(n);
for (int i = 0; i < n; i++)
  qf.unite(i, q[i]);
```

13. Apply optimization 14 by simplifying the calculation of the minimum cost:
```cpp
int ans = 0;
for (int i = 0; i < n; i++) {
  int k = qf.v[i].size();
  if (qf.p[i] != i || k == 1)
    continue;
  int m = a[qf.v[i][0]];
  int tmp = 0;
  for (int j = 0; j < k; j++) {
    tmp += a[qf.v[i][j]];
    m = std::min(m, a[qf.v[i][j]]);
  }
  ans += std::min(tmp + m * (k - 2), tmp + m + b[0] * (k + 1));
}
```

14.