First, let's analyze the provided code to identify potential performance bottlenecks and inefficient memory usage:

1. The `Info` and `Data` structs are unnecessarily using character arrays for strings. Using `std::string` instead of character arrays can simplify the code and improve memory usage.

2. The `strCmp` function is comparing character arrays using a loop, which can be replaced with the `strcmp` function for more efficient string comparison.

3. The `ambiguousCmp` function has an unnecessary `FLG` variable and an empty `if` statement. This function can be simplified by directly returning the result of the comparison.

4. The `strcpy` function is redundant and can be replaced with the `strcpy` function from the C standard library.

5. The `ok_index` and `not_index` variables can be removed and replaced with the `std::vector` size functions.

6. The loops that check for erased elements can be optimized to stop iterating once an erased element is found.

7. The `queue` data structure can be replaced with a `vector` to avoid unnecessary memory allocations and deallocations.

8. The `printf` and `scanf` functions can be replaced with the `cout` and `cin` stream objects for improved I/O performance.

Based on these observations, here is the optimization strategy:

1. Replace the character arrays in the `Info` and `Data` structs with `std::string`.

2. Replace the `strCmp` function with the `strcmp` function.

3. Simplify the `ambiguousCmp` function by directly returning the result of the comparison.

4. Replace the `strcpy` function with the `strcpy` function from the C standard library.

5. Replace the `ok_index` and `not_index` variables with the `std::vector` size functions.

6. Optimize the loops that check for erased elements to stop iterating once an erased element is found.

7. Replace the `queue` data structure with a `vector`.

8. Replace the `printf` and `scanf` functions with the `cout` and `cin` stream objects.

Now, let's proceed with the step-by-step explanation and the optimized code block.