Upon analyzing the given code, I have identified several potential areas for optimization:

1. Redundant include statements: The code includes several unnecessary header files, such as `<algorithm>`, `<bitset>`, `<deque>`, `<limits>`, `<list>`, `<map>`, `<queue>`, `<set>`, `<sstream>`, and `<stack>`. These should be removed to improve compilation time.
2. Unnecessary macros: The macros `_USE_MATH_DEFINES`, `INF`, and `LINF` are defined but not used in the code. These should be removed as they serve no purpose.
3. Inefficient data structures: The `sum` array is used to store cumulative sums of the `beauty` array. However, the `sum` array is unnecessarily large and could be reduced in size to the length of the `beauty` array. Additionally, the `dp` array is initialized with a large value (`0x3f3f3f3f3f3f3f3f`) but only a small portion of it is used. Both of these arrays can be optimized to reduce memory usage.
4. Unoptimized loops: The nested loops in the `compute` function and the loop in the main `for` loop can be optimized to reduce the number of iterations and improve performance.
5. Redundant computations: The `compute` function performs the same calculations multiple times. These computations can be cached to avoid redundant calculations.

Based on these findings, I propose the following optimization strategy:

1. Remove unnecessary include statements.
2. Remove unused macros.
3. Optimize the `sum` and `dp` arrays to reduce memory usage.
4. Optimize the loops in the `compute` function and the main `for` loop.
5. Cache redundant computations to avoid redundant calculations.

Now, let's proceed with the step-by-step explanation and provide the optimized code.