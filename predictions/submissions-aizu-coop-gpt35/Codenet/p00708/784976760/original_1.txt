The provided code calculates the minimum cost to connect all given points using a network of wires. The code reads the coordinates and radii of the points, calculates the distances between each pair of points, and then uses a Union-Find algorithm to connect the points with minimum cost.

Here is a step-by-step optimization strategy for the code:

1. Avoid unnecessary vector of vectors:
   - The code uses a vector of vectors to store the coordinates and radii of the points. However, this introduces unnecessary memory overhead and indirection.
   - Instead of using a vector of vectors, we can use a single vector to store the coordinates and radii of the points. We can define a struct to hold the coordinates and radii and then use a vector of that struct.

2. Avoid unnecessary square root calculations:
   - The code calculates the Euclidean distance between each pair of points using the formula `sqrt((x1 - x2)^2 + (y1 - y2)^2 + (z1 - z2)^2)`.
   - Calculating square roots is computationally expensive. Instead of calculating the square root, we can compare the squared distances directly.
   - To avoid repeated calculations, we can precalculate the squared radii of each point.

3. Optimize the Union-Find algorithm:
   - The code uses the Union-Find algorithm to connect the points with minimum cost. However, the current implementation performs unnecessary root function calls.
   - We can optimize the Union-Find algorithm by using the union by rank and path compression techniques.
   - Union by rank ensures that the shorter tree is always attached to the root of the taller tree, reducing the overall height of the tree.
   - Path compression optimizes the find operation by compressing the path from a node to its root, reducing future find operations for the same node.

4. Compiler optimizations:
   - We can use compiler optimizations to improve the performance of the code.
   - Enable compiler optimizations, such as `-O2` or `-O3`, to allow the compiler to apply various optimizations, such as loop unrolling and function inlining.

Now, let's proceed with the optimization steps.