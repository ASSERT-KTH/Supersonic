Upon analyzing the provided code, I have identified a few areas that can be optimized for better performance and memory usage:

1. Unused statement: The line `0 <= a, b, c <= 100;` does not serve any purpose and can be removed.

2. Redundant memory usage: The variables `a`, `b`, and `c` are declared as integers, which may consume more memory than necessary. Since the values are constrained to the range 0-100, it would be more memory-efficient to use smaller data types like `unsigned char` or `uint8_t`.

3. Input validation: The code assumes that the input values are within the range 0-100, but it does not validate this assumption. Adding an input validation check can help prevent unexpected behavior if invalid input is provided.

4. Compiler optimization: We can enable compiler optimizations to allow the compiler to automatically optimize the code. This can be done by adding the appropriate compiler flags or pragmas.

Now, let's proceed with optimizing the code step-by-step:

```c
#include <stdio.h>
#include <stdint.h>

int main(void) {
  uint8_t a, b, c; // Use smaller data types to save memory
  scanf("%hhu %hhu %hhu", &a, &b, &c); // Use %hhu format specifier for unsigned char

  // Input validation
  if (a <= 100 && b <= 100 && c <= 100) {
    if (a < b && b < c) {
      printf("Yes\n");
    } else {
      printf("No\n");
    }
  } else {
    printf("Invalid input\n");
  }

  return 0;
}
```

In the optimized code:
1. We have replaced the `int` type with `uint8_t` to save memory. `uint8_t` is an unsigned 8-bit integer type that can hold values in the range 0-255.

2. We have modified the `scanf` format specifier to `%hhu`, which is the correct format specifier for `uint8_t`.

3. We have added input validation to check if the input values are within the valid range of 0-100. If any of the input values exceed this range, we print "Invalid input".

4. The logic to check if `a < b < c` remains the same.

Trade-offs:
- The optimization steps described here involve using smaller data types to save memory. While this reduces memory usage, it may also limit the range of values that can be stored in the variables. However, since the original code already assumed that the values are within the range 0-100, this trade-off is acceptable in this case.

- Enabling compiler optimizations can improve performance, but it may also result in less readable code. However, since we are not making significant changes to the logic of the code, the impact on readability should be minimal.

Overall, these optimizations should improve the performance and memory usage of the code without significantly changing its behavior.