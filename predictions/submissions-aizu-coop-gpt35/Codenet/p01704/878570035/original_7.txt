This code implements a simple optimization problem using a ternary search algorithm. The goal is to find the minimum cost by adjusting a weight parameter, given certain constraints and cost functions.

Upon analyzing the code, I have identified a few areas that can be optimized:

1. Redundant includes: The code includes the entire `<bits/stdc++.h>` header, which is unnecessary and can slow down compilation time. We can replace it with specific headers that are actually needed.

2. Unnecessary type definitions: The code defines `LL` and `PII` types but doesn't use them anywhere. We can remove these definitions to simplify the code.

3. Unnecessary precision: The constant `eps` is defined with a precision of 1e-7, but it is not used in the code. We can remove this constant.

4. Inefficient loop: The `calc()` function iterates over all elements in an array, performing a calculation for each element. This can be optimized by using a range-based for loop instead of an index-based loop.

5. Numeric constants: The code uses `INT_MAX` as the upper bound for the search range, which may not be an appropriate value for the problem. We can replace it with a more reasonable upper bound or calculate it dynamically based on the input.

6. Magic numbers: The code uses the value `200` as the number of iterations for the ternary search algorithm. This number is arbitrary and may not be optimal. We can replace it with a more reasonable value or adjust it dynamically based on the problem size.

Based on these observations, I will now provide an optimized version of the code.