Analysis:
1. The `Stack` class uses a `vector<int>` to store the elements. However, it does not specify an initial capacity, which can cause frequent reallocation and copying of elements as the stack grows. This can be improved by initializing the `vector` with a predetermined capacity.
2. The `isEmpty()` and `isFull()` functions can be optimized by comparing `top_` with `0` and `s_.size()` directly, instead of using a comparison operator.
3. The `push()` function can be optimized by directly assigning `x` to `s_[top_++]` instead of incrementing `top_` separately.
4. The `pop()` function can be optimized by directly returning `s_[--top_]` instead of using `top_ + 1`.

Optimization Strategy:
1. Initialize the `vector` in the `Stack` class with a predetermined capacity to avoid frequent reallocation and copying of elements.
2. Replace the comparison operators in `isEmpty()` and `isFull()` with direct comparisons to improve efficiency.
3. Modify the `push()` function to directly assign `x` to `s_[top_++]` for better performance.
4. Modify the `pop()` function to directly return `s_[--top_]` for better performance.

Step-by-Step Explanation:
1. Initialize the `vector` in the `Stack` class with a predetermined capacity:
   - Change the `Stack` constructor to accept the initial capacity as a parameter.
   - Modify the constructor implementation to initialize the `vector` with the given capacity: `s_(n)`.
2. Replace the comparison operators in `isEmpty()` and `isFull()`:
   - In the `Stack` class, replace `top_ == 0` with `top_ == 0u` in the `isEmpty()` function.
   - In the `Stack` class, replace `top_ == s_.size()` with `top_ == s_.size()` in the `isFull()` function.
3. Modify the `push()` function to directly assign `x` to `s_[top_++]`:
   - In the `push()` function, change `top_++; s_[top_] = x;` to `s_[top_++] = x;`.
4. Modify the `pop()` function to directly return `s_[--top_]`:
   - In the `pop()` function, change `top_--; return s_[top_ + 1];` to `return s_[--top_];`.

Optimized Code Block:

```cpp
#include <algorithm>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <vector>
using namespace std;

class Stack {
public:
  Stack(int n) : s_(n), top_(0){};
  bool isEmpty() { return top_ == 0u; }
  bool isFull() { return top_ == s_.size(); }
  void push(int x) {
    if (isFull()) {
      return;
    }
    s_[top_++] = x;
  }
  int pop() {
    if (isEmpty()) {
      return -1;
    }
    return s_[--top_];
  }

private:
  vector<int> s_;
  size_t top_;
};

int main() {
  char s[1000];
  Stack stack(110);
  while (scanf("%s", s) != EOF) {
    if (s[0] == '+') {
      int rhs = stack.pop();
      int lhs = stack.pop();
      int t = lhs + rhs;
      stack.push(t);
    } else if (s[0] == '-') {
      int rhs = stack.pop();
      int lhs = stack.pop();
      int t = lhs - rhs;
      stack.push(t);
    } else if (s[0] == '*') {
      int rhs = stack.pop();
      int lhs = stack.pop();
      int t = lhs * rhs;
      stack.push(t);
    } else {
      stack.push(atoi(s));
    }
  }
  printf("%d\n", stack.pop());
  return 0;
}
```

The optimized code focuses on improving the efficiency of the `Stack` class by initializing the vector with a predetermined capacity and optimizing the push and pop operations. These changes minimize memory usage and improve running time by reducing unnecessary operations and avoiding frequent reallocation of memory.