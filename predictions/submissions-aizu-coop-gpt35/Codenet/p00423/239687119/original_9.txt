After analyzing the provided code, I have identified several potential areas for optimization:

1. Inefficient memory usage: The code uses a vector of integers (veca and vecb) to store the result of each game. However, it is not necessary to store all the intermediate results. We can calculate the final result of each game and directly print it, eliminating the need for the vector.

2. Redundant computation: The code checks for game_a == game_b twice, once in the if statement and again in the else if statement. We can eliminate the redundant check by combining the two conditions.

3. Unnecessary variables: The variable "vec" is declared but never used. We can remove it to reduce unnecessary memory usage.

4. Unnecessary else statement: The else statement after the "if (n == 0) break;" condition is not needed. We can remove it to simplify the code.

To optimize the code, I propose the following steps:

1. Remove the vector declarations for veca and vecb, as they are not needed.

2. Combine the conditions for game_a == game_b and game_a > game_b into a single if statement, as they both result in the same calculation.

3. Remove the unused variable "vec".

4. Remove the unnecessary else statement after the "if (n == 0) break;" condition.

Here is the optimized code:

```cpp
#include <iostream>
int main() {
  int n;
  int a = 0;
  int b = 0;
  int game_a, game_b;
  
  while (1) {
    std::cin >> n;
    if (n == 0)
      break;

    for (int i = 0; i < n; ++i) {
      std::cin >> game_a >> game_b;
      if (game_a >= game_b) {
        a += game_a + game_b;
      } else {
        b += game_a + game_b;
      }
    }

    std::cout << a << " " << b << std::endl;
    a = 0;
    b = 0;
  }

  return 0;
}
```

By implementing these optimizations, we have eliminated unnecessary memory usage, reduced redundant computation, and simplified the code. These changes should result in improved performance and reduced memory usage.