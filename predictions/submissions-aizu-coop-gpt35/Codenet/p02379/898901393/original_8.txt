Code Analysis:

1. The code defines a struct `point` that represents a point in 2D space, with `x` and `y` coordinates.

2. The `distance` function calculates the Euclidean distance between two points using the formula `sqrt((x2-x1)^2 + (y2-y1)^2)`.

3. The `main` function prompts the user for the coordinates of two points, calculates the distance between them using the `distance` function, and prints the result.

Optimization Strategy:

1. Inefficient data structure: The `point` struct is fine and does not need optimization.

2. Redundant computation: The current code performs unnecessary multiplications in the distance calculation. We can optimize this by storing the results of the subtractions `(p1.x - p2.x)` and `(p1.y - p2.y)` in temporary variables and reusing them.

3. Compiler optimization: We can suggest the compiler to enable optimizations by using compiler flags such as `-O2` or `-O3`.

Step-by-Step Explanation:

1. Replace the line `temp = (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);` in the `distance` function with the following code:
```
double dx = p1.x - p2.x;
double dy = p1.y - p2.y;
temp = dx * dx + dy * dy;
```
This change avoids redundant calculations of `(p1.x - p2.x)` and `(p1.y - p2.y)`.

2. Add compiler optimization flags to the compilation command. For example, if using GCC, compile with `gcc -O2 program.c` to enable optimization level 2.

Optimized Code Block:

```c
#include <math.h>
#include <stdio.h>

typedef struct point {
  double x;
  double y;
} point;

double distance(point p1, point p2) {
  double dx = p1.x - p2.x;
  double dy = p1.y - p2.y;
  double temp = dx * dx + dy * dy;
  return sqrt(temp);
}

int main(void) {
  point p1, p2;
  double d;
  scanf("%lf%lf%lf%lf", &p1.x, &p1.y, &p2.x, &p2.y);
  d = distance(p1, p2);
  printf("%.5f\n", d);
  return 0;
}
```

The optimized code eliminates redundant calculations by storing the differences `(p1.x - p2.x)` and `(p1.y - p2.y)` in temporary variables `dx` and `dy`. Additionally, compiler optimization flags can be added to the compilation command to enable further optimization.