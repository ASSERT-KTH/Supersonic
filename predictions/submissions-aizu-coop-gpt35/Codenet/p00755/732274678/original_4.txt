Upon analyzing the code, I have identified several areas that can be optimized to improve performance and reduce memory usage:

1. Redundant Calculation of `tres`:
   - In the `calc` function, the variable `tres` is calculated and updated multiple times unnecessarily.
   - Instead of updating `tres` for every matching cell, we can update it only once after the `calc` function is called recursively.
   - This will avoid redundant calculations and improve performance.

2. Inefficient Memory Usage:
   - The `P` data structure is a 2D vector of integers, which can be quite memory-intensive.
   - We can replace the `P` data structure with a more memory-efficient alternative, such as a 2D array of integers.
   - This will reduce memory usage and improve performance.

3. Unnecessary Queue Size Check:
   - In the `on` function, the `while (!Q.empty())` loop is used to process all the elements in the queue.
   - However, there is an unnecessary check `if (used[now.first][now.second]) continue;` which can be removed.
   - Since the queue only contains unprocessed elements, there is no need to check if an element has already been processed.

4. Loop Unrolling:
   - In the main loop of the `on` function, there is a loop that iterates from 1 to 6.
   - We can optimize this loop by unrolling it and directly calling the recursive `on` function with the different values of `i`.
   - This will reduce the overhead of the loop and improve performance.

5. Compiler Optimization:
   - We can enable compiler optimizations to further improve the performance of the code.
   - Compiler optimizations can include loop unrolling, inline function expansion, and other optimizations specific to the compiler being used.
   - We can use compiler-specific pragmas or flags to enable these optimizations.

Now, I will provide a step-by-step explanation of each optimization step, along with the optimized code.