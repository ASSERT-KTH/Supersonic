The provided code calculates the topological ordering of a directed acyclic graph (DAG). However, there are several areas where the code can be optimized for efficiency:

1. Inefficient Data Structure: The current implementation uses a vector of vectors (`edge`) to represent the graph. This results in inefficient memory usage and slower access time for finding outgoing edges of a vertex.

2. Redundant Computation: The code iterates over the `state` vector multiple times to find the vertices with no incoming edges. This can be optimized to avoid redundant computations.

3. Inefficient Looping: The code uses three separate loops to print the elements of `ans`. This can be optimized to use a single loop.

4. Compiler Optimizations: Compiler optimizations can be used to hint the compiler to optimize certain parts of the code.

Now, let's proceed with the step-by-step explanation of each optimization:

1. Efficient Data Structure:
   - Instead of using a vector of vectors (`edge`), we can use a single vector of pairs to store the edges. Each pair will represent an edge from source to destination.
   - We can replace `vector<vector<int>> edge(10001)` with `vector<pair<int, int>> edge(E)`.
   - This change reduces memory usage and improves cache locality, as all edges are stored in a contiguous memory block.

2. Avoiding Redundant Computation:
   - Instead of iterating over the `state` vector to find vertices with no incoming edges, we can modify the edge construction loop to track the in-degree of each vertex.
   - We can replace `state[t]++;` with `state[t] = 1;` in the edge construction loop.
   - By doing this, we eliminate the need to iterate over the `state` vector separately to find vertices with no incoming edges.

3. Optimizing Looping:
   - We can combine the two loops that iterate over `ans` into a single loop.
   - Instead of iterating over `ans` using an index (`i`), we can use a range-based for loop to simplify the code.

4. Compiler Optimizations:
   - We can use compiler optimizations to hint the compiler to optimize certain parts of the code.
   - For example, we can use the `#pragma GCC optimize` directive to enable optimizations.
   - We can add the following directive before the `main()` function:
     ```cpp
     #pragma GCC optimize("O3")
     ```

Now, let's apply these optimization steps and provide the optimized code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  #pragma GCC optimize("O3")
  
  int V, E;
  cin >> V >> E;
  
  vector<int> state(V, 0);
  vector<pair<int, int>> edges(E);
  
  for (int i = 0; i < E; i++) {
    int s, t;
    cin >> s >> t;
    edges[i] = {s, t};
    state[t] = 1;
  }
  
  vector<int> ans;
  for (int i = 0; i < V; i++) {
    if (state[i] == 0)
      ans.push_back(i);
  }
  
  for (int i = 0; i < ans.size(); i++) {
    for (const auto& edge : edges) {
      if (edge.first == ans[i]) {
        int t = edge.second;
        state[t]--;
        if (state[t] == 0)
          ans.push_back(t);
      }
    }
  }
  
  for (const auto& vertex : ans) {
    cout << vertex << endl;
  }
  
  return 0;
}
```

This optimized code reduces memory usage by using a more efficient data structure, avoids redundant computations, optimizes looping, and utilizes compiler optimizations.