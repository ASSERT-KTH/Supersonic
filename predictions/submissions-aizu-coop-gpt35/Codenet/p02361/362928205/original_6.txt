The given code implements Dijkstra's algorithm to find the shortest path in a weighted graph. However, there are several areas where performance optimizations can be made. 

1. Avoid using the `std::vector` for the graph structure: The current implementation uses a `std::vector` to store the adjacency list. While this provides flexibility, it can be inefficient in terms of memory usage and cache locality. Instead, we can use a fixed-size array to represent the adjacency list.

2. Use a custom priority queue: The current implementation uses `std::priority_queue` to maintain the minimum distance. However, this data structure does not provide efficient access to elements, which can affect the performance. We can implement a custom priority queue using a binary heap or a Fibonacci heap to improve the efficiency of accessing elements.

3. Optimize the graph initialization: Currently, the graph is initialized by repeatedly calling `push_back` on the vector. This can be inefficient due to multiple memory allocations and copying of elements. A better approach would be to allocate memory for the entire graph in a single step and then populate it with the input data.

4. Use a smaller data type for distances: The distances are stored as integers, which may unnecessarily consume more memory. Since the maximum distance is defined as `INF = 1000000000`, we can use a smaller data type, such as `unsigned int` or `unsigned short`, to save memory.

5. Replace the `fill` function with a loop: The `fill` function is used to initialize the distances to `INF`. However, this can be replaced with a simple loop that iterates over the array and assigns the value. This avoids the function call overhead.

6. Use a `while` loop instead of a `for` loop for the inner iteration: The inner loop iterates over the adjacency list of each vertex. Instead of using a `for` loop, we can use a `while` loop to avoid the overhead of checking the size of the list at each iteration.

7. Use `printf` instead of `std::cout`: The code currently uses `printf` for output, which is generally faster than using `std::cout`.

Based on these optimizations, here is the optimized code:

```cpp
#include <cstdio>
#include <queue>
using namespace std;

const unsigned int INF = 1000000000;
const int MAX_V = 100000;
const int MAX_E = 100000;

struct edge {
  int to, cost;
};

edge G[MAX_V][MAX_E];
unsigned int d[MAX_V];

typedef pair<unsigned int, int> P;
P q[MAX_V];
int qSize;

void dijkstra(int v, int e, int r) {
  for (int i = 0; i < v; i++) {
    d[i] = INF;
  }
  
  d[r] = 0;
  qSize = 0;
  
  q[qSize++] = make_pair(0, r);
  make_heap(q, q + qSize);

  while (qSize > 0) {
    P p = q[0];
    pop_heap(q, q + qSize);
    qSize--;

    int nv = p.second;
    if (p.first > d[nv]) {
      continue;
    }

    for (int i = 0; i < e; i++) {
      int to = G[nv][i].to;
      unsigned int cost = G[nv][i].cost;

      if (d[nv] + cost < d[to]) {
        d[to] = d[nv] + cost;
        q[qSize++] = make_pair(d[to], to);
        push_heap(q, q + qSize);
      }
    }
  }
}

int main() {
  int v, e, r;
  scanf("%d %d %d", &v, &e, &r);

  for (int i = 0; i < e; i++) {
    int s, t, d;
    scanf("%d %d %d", &s, &t, &d);

    G[s][i].to = t;
    G[s][i].cost = d;
  }

  dijkstra(v, e, r);

  for (int i = 0; i < v; i++) {
    if (d[i] == INF) {
      printf("INF\n");
    } else {
      printf("%u\n", d[i]);
    }
  }

  return 0;
}
```

These optimizations aim to reduce memory usage and improve performance without sacrificing the functionality of the original code.