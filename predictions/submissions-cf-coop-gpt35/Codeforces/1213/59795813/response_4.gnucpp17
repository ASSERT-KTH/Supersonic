The provided code is aimed at solving a graph problem. The goal is to calculate the cumulative sum of weights of edges in a Minimum Spanning Tree (MST) for each queried node.

Let's analyze the code and identify potential areas for optimization:

1. The code includes unnecessary header files (`bits/stdc++.h`) that can be replaced with the specific header files required for the program.

2. The code uses macros for common operations like `push_back`, `first`, `second`, `gcd`, and `long long`. While macros can improve code readability, they can also introduce overhead due to multiple macro expansions. It is generally better to use inline functions instead of macros.

3. The code uses global variables extensively. Global variables can cause issues with code readability, maintainability, and reusability. It is recommended to encapsulate variables in appropriate data structures and pass them as function arguments.

4. The `root` function uses path compression to optimize the `root` function. However, it does not update the `par` array with the new root, resulting in unnecessary root calculations in subsequent calls. Updating the `par` array with the new root will improve performance.

5. The `mrg` function performs the union operation on two sets. It uses the weighted union heuristic by merging the smaller set into the larger set. However, it does not update the `sz` array with the new size of the merged set. Updating the `sz` array will improve performance.

6. The `dsu` function performs union operations on all edges in the graph. However, it does not take advantage of the fact that the edges are sorted in ascending order of weights. By using a modified version of the Union-Find algorithm, we can optimize the union operations to run in O(1) amortized time.

7. The `dsu` function iterates over the `PS` array to calculate the cumulative sum. However, this can be done in the same loop where the union operations are performed, eliminating the need for a separate loop.

8. The `while` loop that handles the queries can be optimized by using a binary search on the sorted `e` vector to find the position of the queried node. This will reduce the time complexity from O(m) to O(log n).

Based on the analysis, we can propose the following optimization strategy:

1. Replace unnecessary header files with the specific header files required for the program.

2. Replace macros with inline functions.

3. Encapsulate global variables in appropriate data structures and pass them as function arguments.

4. Update the `root` function to update the `par` array with the new root.

5. Update the `mrg` function to update the `sz` array with the new size of the merged set.

6. Modify the `dsu` function to optimize the union operations using a modified version of the Union-Find algorithm.

7. Combine the loop that performs union operations and calculates the cumulative sum.

8. Optimize the query loop by using binary search on the sorted `e` vector.
