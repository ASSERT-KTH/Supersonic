#include <iostream>
#include <vector>
#include <algorithm>
#include <map>

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0);
    std::cout.tie(0);

    int n, m;
    std::cin >> n >> m;

    std::vector<std::pair<int, std::pair<int, int>>> e(n - 1);
    for (int i = 0; i < n - 1; i++) {
        int u, v, w;
        std::cin >> u >> v >> w;
        e[i] = {w, {u, v}};
    }

    std::vector<int> par(n + 1), sz(n + 1, 1);
    std::vector<int> PS(n + 1, 0);

    std::sort(e.begin(), e.end());

    auto root = [&](int x) {
        return (par[x] == x ? x : par[x] = root(par[x]));
    };

    auto mrg = [&](int x, int y) {
        x = root(x), y = root(y);
        if (x == y)
            return 0;
        if (sz[x] < sz[y])
            std::swap(x, y);
        par[y] = x;
        sz[x] += sz[y];
        return sz[x] * sz[y];
    };

    for (int i = 1; i <= n; i++)
        par[i] = i;

    for (int i = 0; i < n - 1; i++)
        PS[e[i].second.first] += mrg(e[i].second.first, e[i].second.second);

    for (int i = 1; i <= n; i++)
        PS[i] += PS[i - 1];

    std::vector<int> queries(m);
    for (int i = 0; i < m; i++)
        std::cin >> queries[i];

    std::vector<int> results(m);
    for (int i = 0; i < m; i++)
        results[i] = PS[queries[i]];

    for (int i = 0; i < m; i++)
        std::cout << results[i] << ' ';

    return 0;
}