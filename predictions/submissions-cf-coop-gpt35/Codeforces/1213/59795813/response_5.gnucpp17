#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdint>

using namespace std;

typedef pair<int32_t, int32_t> pii;
typedef vector<int32_t> vi;
typedef map<int32_t, int32_t> mi;

const int32_t MAX = 2e5;

int32_t n, m, u, q, v, w, k;
int32_t par[MAX], sz[MAX], PS[MAX];

int32_t root(int32_t x) {
  if (par[x] == x)
    return x;
  return par[x] = root(par[x]);
}

int32_t mrg(int32_t x, int32_t y) {
  x = root(x);
  y = root(y);
  if (x == y)
    return 0;
  if (sz[x] < sz[y])
    swap(x, y);
  par[y] = x;
  int32_t tmp = sz[x] * sz[y];
  sz[x] += sz[y];
  return tmp;
}

void dsu() {
  for (int32_t i = 0; i < n - 1; i++)
    PS[e[i].first] += mrg(e[i].second.first, e[i].second.second);
  for (int32_t i = 1; i <= MAX; i++)
    PS[i] += PS[i - 1];
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  cin >> n >> m;
  vector<pair<int32_t, pii>> e(n - 1);
  for (int32_t i = 0; i < n - 1; i++) {
    cin >> u >> v >> w;
    e[i] = {w, {u, v}};
  }
  sort(e.begin(), e.end());

  for (int32_t i = 1; i <= n; i++)
    par[i] = i, sz[i] = 1;

  dsu();

  while (m--) {
    cin >> q;
    cout << PS[q] << ' ';
  }

  return 0;
}