#include <iostream>
using namespace std;

const int MOD = 1000000007;
const int MAX_N = 1000005;

int pw(int a, int b = MOD - 2, int p = MOD) {
  int result = 1;
  while (b > 0) {
    if (b & 1)
      result = (1LL * result * a) % p;
    a = (1LL * a * a) % p;
    b >>= 1;
  }
  return result;
}

struct mod_int {
  int val;
  
  mod_int(long long v = 0) {
    if (v < 0)
      v = v % MOD + MOD;
    if (v >= MOD)
      v %= MOD;
    val = v;
  }
  
  static int mod_inv(int a, int m = MOD) {
    return static_cast<int>(std::inverse(static_cast<long long>(a), static_cast<long long>(m)));
  }
  
  mod_int& operator+=(const mod_int& other) {
    val += other.val;
    if (val >= MOD)
      val -= MOD;
    return *this;
  }
  
  mod_int& operator-=(const mod_int& other) {
    val -= other.val;
    if (val < 0)
      val += MOD;
    return *this;
  }
  
  mod_int& operator*=(const mod_int& other) {
    val = (1LL * val * other.val) % MOD;
    return *this;
  }
  
  mod_int& operator/=(const mod_int& other) {
    return *this *= mod_int(mod_inv(other.val));
  }
  
  friend mod_int operator+(const mod_int& a, const mod_int& b) {
    return mod_int(a) += b;
  }
  
  friend mod_int operator-(const mod_int& a, const mod_int& b) {
    return mod_int(a) -= b;
  }
  
  friend mod_int operator*(const mod_int& a, const mod_int& b) {
    return mod_int(a) *= b;
  }
  
  friend mod_int operator/(const mod_int& a, const mod_int& b) {
    return mod_int(a) /= b;
  }
  
  friend ostream& operator<<(ostream& stream, const mod_int& m) {
    return stream << m.val;
  }
};

mod_int P[MAX_N];

void precompute_powers(int k) {
  for (int i = 1; i < k + 4; i++) {
    mod_int j = i;
    P[i] = P[i - 1] + j.pow(k);
  }
}

mod_int calculate_expression(int n, int k) {
  if (n <= k + 2) {
    return P[n];
  }
  
  mod_int ele = 1;
  for (int i = 1; i <= k + 2; i++) {
    ele *= (n - i + MOD) % MOD;
    ele /= (MOD - i) % MOD;
  }
  
  mod_int ans = ele * P[1];
  for (int i = 2; i <= k + 3; i++) {
    ele *= (MOD - k + i - 3) % MOD;
    ele /= (i - 1) % MOD;
    ele /= (n - i + MOD) % MOD;
    ele *= (n - i + 1) % MOD;
    ans += ele * P[i];
  }
  
  return ans;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  
  int n, k;
  cin >> n >> k;
  
  precompute_powers(k);
  mod_int result = calculate_expression(n, k);
  
  cout << result << endl;
  
  return 0;
}