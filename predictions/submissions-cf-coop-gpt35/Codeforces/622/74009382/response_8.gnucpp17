#include <iostream>
#include <cmath>
#define MOD 1000000007
#define M 1000000007

int pow(int a, int b = MOD - 2, int p = MOD) {
  if (b == 0)
    return 1;
  int t = pow(a, b / 2, p);
  if (b % 2)
    return (((1LL * a * t) % p) * t) % p;
  else
    return ((1LL * t * t) % p);
}

void solve() {
  int n, k;
  scanf("%d %d", &n, &k);
  int P[k + 4];
  int ele[k + 2];
  for (int i = 1; i < k + 4; i++) {
    int j = i;
    P[i] = P[i - 1] + pow(j, k);
  }
  if (n <= k + 2) {
    printf("%d", P[n]);
    return;
  }
  ele[1] = 1;
  for (int i = 1; i < k + 2; i++) {
    ele[1] *= (M + n - i - 1);
    ele[1] /= (M - i);
  }
  int ans = 0;
  ans += ele[1] * P[1];
  for (int i = 2; i < k + 3; i++) {
    ele[i] = ele[i - 1] * (M - k + i - 3);
    ele[i] /= (i - 1);
    ele[i] /= (M + n - i);
    ele[i] *= (M + n - i + 1);
    ans += ele[i] * P[i];
  }
  printf("%d", ans);
}

int main() {
  int t = 1;
  while (t--)
    solve();
  return 0;
}