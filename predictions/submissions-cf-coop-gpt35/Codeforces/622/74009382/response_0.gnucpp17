#include <iostream>
#include <vector>
using namespace std;

const int MOD = 1000000007;
const int MAX_N = 1000005;

// Precompute powers of j^k
vector<int> precomputePowers(int k) {
    vector<int> powers(k + 5);
    int j = 1;
    for (int i = 1; i < k + 5; i++) {
        j = (j * i) % MOD;
        powers[i] = (powers[i - 1] + j) % MOD;
    }
    return powers;
}

// Compute binomial coefficient C(n, k) modulo MOD
int binomialCoefficient(int n, int k) {
    int numerator = 1;
    int denominator = 1;
    for (int i = 0; i < k; i++) {
        numerator = (numerator * (n - i)) % MOD;
        denominator = (denominator * (i + 1)) % MOD;
    }
    int inverseDenominator = 1;
    int temp = denominator;
    while (temp > 1) {
        inverseDenominator = (inverseDenominator * (MOD - MOD / temp)) % MOD;
        temp = MOD % temp;
    }
    return (numerator * inverseDenominator) % MOD;
}

// Solve the problem
int solve(int n, int k) {
    if (n <= k + 2) {
        vector<int> powers = precomputePowers(k);
        return powers[n];
    }

    vector<int> ele(k + 3);
    ele[0] = 1;
    for (int i = 1; i <= k + 2; i++) {
        ele[i] = (ele[i - 1] * (n - i)) % MOD;
        ele[i] = (ele[i] * binomialCoefficient(MOD + n - i, MOD - i)) % MOD;
        ele[i] = (ele[i] * (MOD + n - i + 1)) % MOD;
    }

    vector<int> powers = precomputePowers(k);
    int ans = 0;
    for (int i = 1; i <= k + 3; i++) {
        ans = (ans + ele[i] * powers[i]) % MOD;
    }
    return ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int n, k;
    cin >> n >> k;
    int ans = solve(n, k);
    cout << ans << endl;

    return 0;
}