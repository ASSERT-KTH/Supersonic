#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int MOD = 1000000007;
const int N = 1e6 + 5;

struct mod_int {
  int val;
  
  mod_int(long long v = 0) {
    if (v < 0)
      v = v % MOD + MOD;
    if (v >= MOD)
      v %= MOD;
    val = v;
  }
  
  mod_int &operator+=(const mod_int &other) {
    val += other.val;
    if (val >= MOD)
      val -= MOD;
    return *this;
  }
  
  mod_int &operator-=(const mod_int &other) {
    val -= other.val;
    if (val < 0)
      val += MOD;
    return *this;
  }
  
  mod_int &operator*=(const mod_int &other) {
    val = (1LL * val * other.val) % MOD;
    return *this;
  }
  
  mod_int &operator/=(const mod_int &other) {
    return *this *= other.inv();
  }
  
  mod_int operator+(const mod_int &a) const {
    return mod_int(*this) += a;
  }
  
  mod_int operator-(const mod_int &a) const {
    return mod_int(*this) -= a;
  }
  
  mod_int operator*(const mod_int &a) const {
    return mod_int(*this) *= a;
  }
  
  mod_int operator/(const mod_int &a) const {
    return mod_int(*this) /= a;
  }
  
  mod_int inv() const {
    int g = MOD, r = val, x = 0, y = 1;
    while (r != 0) {
      int q = g / r;
      g %= r;
      swap(g, r);
      x -= q * y;
      swap(x, y);
    }
    return x < 0 ? x + MOD : x;
  }
  
  friend ostream &operator<<(ostream &stream, const mod_int &m) {
    return stream << m.val;
  }
  
  friend istream &operator>>(istream &stream, mod_int &m) {
    return stream >> m.val;
  }
};

mod_int P[N];

void solve() {
  int n, k;
  cin >> n >> k;
  
  for (int i = 1; i < k + 4; i++) {
    mod_int j = i;
    P[i] = P[i - 1] + j * j * j;
  }
  
  if (n <= k + 2) {
    cout << P[n];
    return;
  }
  
  mod_int ans = 0;
  mod_int ele = 1;
  
  for (int i = 1; i < k + 2; i++) {
    ele *= (n - i + 1);
    ele /= i;
    ans += ele * P[i];
  }
  
  cout << ans;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  
  solve();
  
  return 0;
}