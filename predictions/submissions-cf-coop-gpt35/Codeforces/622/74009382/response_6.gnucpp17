#include <iostream>

using namespace std;

const int MOD = 1000000007;
const int N = 1000005;

struct mod_int {
    int val;

    mod_int(long long v = 0) {
        if (v < 0)
            v = v % MOD + MOD;
        if (v >= MOD)
            v %= MOD;
        val = v;
    }

    mod_int operator+=(const mod_int &other) {
        val += other.val;
        if (val >= MOD)
            val -= MOD;
        return *this;
    }

    mod_int operator-=(const mod_int &other) {
        val -= other.val;
        if (val < 0)
            val += MOD;
        return *this;
    }

    mod_int operator*=(const mod_int &other) {
        val = (static_cast<long long>(val) * other.val) % MOD;
        return *this;
    }

    mod_int operator/=(const mod_int &other) {
        return *this *= other.inv();
    }

    friend mod_int operator+(const mod_int &a, const mod_int &b) {
        return mod_int(a) += b;
    }

    friend mod_int operator-(const mod_int &a, const mod_int &b) {
        return mod_int(a) -= b;
    }

    friend mod_int operator*(const mod_int &a, const mod_int &b) {
        return mod_int(a) *= b;
    }

    friend mod_int operator/(const mod_int &a, const mod_int &b) {
        return mod_int(a) /= b;
    }

    mod_int inv() const {
        return mod_inv(val);
    }

    mod_int pow(long long p) const {
        assert(p >= 0);
        mod_int a = *this, result = 1;
        while (p > 0) {
            if (p & 1)
                result *= a;
            a *= a;
            p >>= 1;
        }
        return result;
    }

    friend ostream &operator<<(ostream &stream, const mod_int &m) {
        return stream << m.val;
    }

private:
    static int mod_inv(int a, int m = MOD) {
        int g = m, r = a, x = 0, y = 1;
        while (r != 0) {
            int q = g / r;
            g %= r;
            swap(g, r);
            x -= q * y;
            swap(x, y);
        }
        return x < 0 ? x + m : x;
    }
};

mod_int P[N];

void solve() {
    int n, k;
    cin >> n >> k;

    for (int i = 1; i < k + 4; i++) {
        mod_int j = i;
        P[i] = P[i - 1] + j.pow(k);
    }

    if (n <= k + 2) {
        cout << P[n];
        return;
    }

    mod_int ans = 0;
    mod_int ele = 1;

    for (int i = 1; i <= k + 2; i++) {
        ele *= (n - i + 1);
        ele /= i;
        ans += ele * P[i];
    }

    cout << ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    solve();

    return 0;
}