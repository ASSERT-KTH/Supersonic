#include <iostream>
#include <vector>
using namespace std;

int find(vector<int>& dsu, int i) {
  return dsu[i] < 0 ? i : (dsu[i] = find(dsu, dsu[i]));
}

bool join(vector<int>& dsu, int i, int j) {
  i = find(dsu, i);
  j = find(dsu, j);

  if (i == j)
    return false;

  if (dsu[i] > dsu[j])
    dsu[i] = j;
  else {
    if (dsu[i] == dsu[j])
      dsu[i]--;
    dsu[j] = i;
  }

  return true;
}

int main() {
  int n, m, q;
  cin >> n >> m >> q;

  vector<int> dsu(n * 2);
  vector<int> ii(m), jj(m), ww(m), hh(m);

  for (int h = 0; h < m; h++) {
    int i, j, w;
    cin >> i >> j >> w;
    i--, j--;
    ii[h] = i;
    jj[h] = j;
    ww[h] = w;
    hh[h] = h;
  }

  while (q-- > 0) {
    int l, r;
    cin >> l >> r;
    l--, r--;

    fill_n(dsu.begin(), n * 2, -1);
    int w = -1;

    for (int h = l; h <= r; h++) {
      int h_ = hh[h];
      int i = ii[h_];
      int j = jj[h_];
      int i0 = i << 1, i1 = i0 | 1;
      int j0 = j << 1, j1 = j0 | 1;

      if (join(dsu, i0, j1) && !join(dsu, i1, j0)) {
        w = ww[h_];
        break;
      }
    }

    cout << w << "\n";
  }

  return 0;
}