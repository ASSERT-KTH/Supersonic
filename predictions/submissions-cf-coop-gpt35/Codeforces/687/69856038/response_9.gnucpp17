#include <algorithm>
#include <iostream>
#include <queue>
using namespace std;
const int N = 1000, M = N * (N - 1) / 2;
int parent[N * 2];
int rank[N * 2];
int find(int i) {
  if (parent[i] < 0)
    return i;
  return parent[i] = find(parent[i]);
}
bool join(int i, int j) {
  i = find(i);
  j = find(j);
  if (i == j)
    return false;
  if (rank[i] > rank[j])
    parent[j] = i;
  else {
    parent[i] = j;
    if (rank[i] == rank[j])
      rank[j]++;
  }
  return true;
}
int main() {
  int n, m, q;
  scanf("%d%d%d", &n, &m, &q);
  static int ii[M], jj[M], ww[M], hh[M];
  priority_queue<pair<int, int>> pq;
  for (int h = 0; h < m; h++) {
    int i, j, w;
    scanf("%d%d%d", &i, &j, &w), i--, j--;
    pq.push(make_pair(w, h));
  }
  int start = 0;
  while (hh[start] < l || hh[start] > r)
    start++;
  int end = start;
  while (end < m && hh[end] <= r)
    end++;
  while (q-- > 0) {
    int l, r;
    scanf("%d%d", &l, &r), l--, r--;
    fill_n(parent, n * 2, -1);
    fill_n(rank, n * 2, 0);
    int w = -1;
    for (int h = start; h < end; h++) {
      int h_ = hh[h];
      int i = ii[h_];
      int j = jj[h_];
      int i0 = i << 1, i1 = i0 | 1;
      int j0 = j << 1, j1 = j0 | 1;
      if (join(i0, j1) && !join(i1, j0)) {
        w = ww[h_];
        break;
      }
    }
    printf("%d\n", w);
  }
}