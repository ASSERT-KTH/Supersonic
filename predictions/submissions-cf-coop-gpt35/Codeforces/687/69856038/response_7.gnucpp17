#include <algorithm>
#include <iostream>
#include <vector>

const int N = 1000, M = N * (N - 1) / 2;

std::vector<int> dsu(N);

int find(int i) {
  while (dsu[i] >= 0) {
    i = dsu[i];
  }
  return i;
}

bool join(int i, int j) {
  i = find(i);
  j = find(j);

  if (i == j) {
    return false;
  }

  if (dsu[i] > dsu[j]) {
    std::swap(i, j);
  }

  dsu[i] += dsu[j];
  dsu[j] = i;

  return true;
}

int main() {
  int n, m, q;
  std::cin >> n >> m >> q;

  std::vector<int> ii(m), jj(m), ww(m), hh(m);
  for (int h = 0; h < m; h++) {
    int i, j, w;
    std::cin >> i >> j >> w;
    i--, j--;
    ii[h] = i;
    jj[h] = j;
    ww[h] = w;
    hh[h] = h;
  }

  std::sort(hh.begin(), hh.end(), [&](int a, int b) { return ww[a] > ww[b]; });

  while (q-- > 0) {
    int l, r;
    std::cin >> l >> r;
    l--, r--;

    std::fill(dsu.begin(), dsu.end(), -1);

    int w = -1;
    for (int h = 0; h < m; h++) {
      int h_ = hh[h];
      if (l <= h_ && h_ <= r) {
        int i = ii[h_];
        int j = jj[h_];
        int i0 = i << 1, i1 = i0 | 1;
        int j0 = j << 1, j1 = j0 | 1;

        if (join(i0, j1) && !join(i1, j0)) {
          w = ww[h_];
          break;
        }
      }
    }

    std::cout << w << "\n";
  }

  return 0;
}