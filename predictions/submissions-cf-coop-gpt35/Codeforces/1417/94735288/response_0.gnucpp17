#include <iostream>
#include <algorithm>
#include <numeric>
#include <vector>

int expo(int base, int exponent, int mod) {
  int ans = 1;
  base %= mod;
  while (exponent != 0) {
    if (exponent & 1)
      ans = (1LL * ans * base) % mod;
    base = (1LL * base * base) % mod;
    exponent >>= 1;
  }
  return ans % mod;
}

int inverse(int x, int mod) {
  int m0 = mod;
  int y = 0, x0 = 1;
  if (mod == 1)
    return 0;
  while (x > 1) {
    int q = x / mod;
    int t = mod;
    mod = x % mod, x = t;
    t = y;
    y = x0 - q * y;
    x0 = t;
  }
  if (x0 < 0)
    x0 += m0;
  return x0;
}

void solve() {
  int n, t;
  std::cin >> n >> t;
  std::vector<int> a(n);
  std::copy_n(std::istream_iterator<int>(std::cin), n, a.begin());

  int curMid = 1;
  int halfT = t / 2;
  std::vector<int> r(n);
  for (int i = 0; i < n; i++) {
    if (t % 2 == 0 && a[i] == halfT) {
      r[i] = (curMid++) % 2;
    } else if (2 * a[i] < t) {
      r[i] = 0;
    } else {
      r[i] = 1;
    }
  }

  std::copy(r.begin(), r.end(), std::ostream_iterator<int>(std::cout, " "));
  std::cout << '\n';
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);

  int t;
  std::cin >> t;
  while (t--) {
    solve();
  }

  return 0;
}