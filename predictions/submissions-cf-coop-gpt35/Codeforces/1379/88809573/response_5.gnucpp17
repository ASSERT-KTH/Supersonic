#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define mul_mod(a, b, c) a = (a * b) % mod
#define add_mod(a, b, c) a = (a + b) % mod
using namespace std;
typedef long long ll;
const int maxn = 2e5 + 10;
const int maxm = 5e5 + 10;
int q;
ll a[maxn], b[maxn];
ll suf[maxn];
ll ans;
int n, m;

int binary_search(ll val, int start, int end) {
  int low = start, high = end;
  while (low < high) {
    int mid = (low + high) / 2;
    if (a[mid] < val)
      low = mid + 1;
    else
      high = mid;
  }
  return low;
}

int main() {
  scanf("%d", &q);
  for (int i = 0; i < q; i++) {
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= m; i++) {
      scanf("%lld %lld", &a[i], &b[i]);
    }
    sort(a + 1, a + 1 + m);
    suf[m + 1] = 0;
    for (int i = m; i >= 1; i--)
      suf[i] = suf[i + 1] + a[i];
    ans = 0;
    if (n <= m)
      ans = suf[m - n + 1];
    for (int i = 1; i <= m; i++) {
      ll temp = 0;
      int pos = binary_search(b[i], 1, m);
      if (pos <= m - n + 1)
        continue;
      temp += suf[pos];
      int num = n - (m - pos + 1);
      if (a[i] < b[i])
        temp += a[i], num--;
      temp += num * b[i];
      ans = max(ans, temp);
    }
    cout << ans << endl;
  }
  return 0;
}