#include <algorithm>
#include <iostream>
#include <vector>

typedef long long ll;

const int maxn = 2e5 + 10;

int q;
struct node {
  ll a;
} f[maxn];
ll ans;
ll A[maxn], B[maxn];
ll suf[maxn];
int n, m;

inline void mul_mod(ll& a, ll b, ll c) {
  a = (a * b) % c;
}

inline void add_mod(ll& a, ll b, ll c) {
  a = (a + b) % c;
}

ll calculate_suffix_sum(int start_index) {
  ll sum = 0;
  for (int i = start_index; i <= m; i++) {
    sum += A[i];
  }
  return sum;
}

int binary_search_position(int value) {
  int low = 1, high = m;
  while (low <= high) {
    int mid = (low + high) / 2;
    if (A[mid] == value) {
      return mid;
    } else if (A[mid] < value) {
      low = mid + 1;
    } else {
      high = mid - 1;
    }
  }
  return low;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cin >> q;
  while (q--) {
    std::cin >> n >> m;
    for (int i = 1; i <= m; i++) {
      std::cin >> f[i].a;
      A[i] = f[i].a;
    }
    std::sort(A + 1, A + 1 + m);
    suf[m] = 0;
    for (int i = m - 1; i >= 1; i--) {
      suf[i] = suf[i + 1] + A[i];
    }
    ans = 0;
    if (n <= m) {
      ans = suf[m - n + 1];
    }
    int pos = binary_search_position(f[1].a);
    ll temp = suf[pos];
    int num = n - (m - pos + 1);
    if (f[1].a < f[1].b) {
      temp += f[1].a;
      num--;
    }
    temp += num * f[1].b;
    ans = std::max(ans, temp);
    for (int i = 2; i <= m; i++) {
      pos = binary_search_position(f[i].a);
      if (pos <= m - n + 1) {
        continue;
      }
      temp = suf[pos];
      num = n - (m - pos + 1);
      if (f[i].a < f[i].b) {
        temp += f[i].a;
        num--;
      }
      temp += num * f[i].b;
      ans = std::max(ans, temp);
    }
    std::cout << ans << "\n";
  }
  return 0;
}