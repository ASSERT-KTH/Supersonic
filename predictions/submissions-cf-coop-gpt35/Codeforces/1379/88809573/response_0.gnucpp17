#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <vector>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define mul_mod(a, b, c) a = (a * b) % mod
#define add_mod(a, b, c) a = (a + b) % mod
using namespace std;
typedef long long ll;
const int maxn = 2e5 + 10;
const int maxm = 5e5 + 10;

int q;
struct node {
  ll a, b;
} f[maxn];
ll ans;
ll A[maxn];
ll suf[maxn];
int n, m;

int main() {
  scanf("%d", &q);
  
  while (q--) {
    scanf("%d%d", &n, &m);

    // Read the pairs of long long integers
    for (int i = 1; i <= m; i++) {
      scanf("%lld %lld", &f[i].a, &f[i].b);
      A[i] = f[i].a;
    }

    // Sort the A array only once
    sort(A + 1, A + 1 + m);

    // Calculate suf array only once
    suf[m] = A[m];
    for (int i = m - 1; i >= 1; i--) {
      suf[i] = suf[i + 1] + A[i];
    }

    // Initialize ans to suf[m - n + 1]
    ans = suf[m - n + 1];

    for (int i = 1; i <= m; i++) {
      int pos = upper_bound(A + 1, A + 1 + m, f[i].b) - A; // Use upper_bound instead of lower_bound

      // Skip calculation if pos <= m - n + 1
      if (pos <= m - n + 1) {
        continue;
      }

      ll temp = suf[pos] + (n - (m - pos + 1)) * f[i].b;
      
      // Update temp if f[i].a < f[i].b
      if (f[i].a < f[i].b) {
        temp += f[i].a;
        temp -= f[i].b;
      }
      
      ans = max(ans, temp);
    }
    
    cout << ans << endl;
  }
  
  return 0;
}