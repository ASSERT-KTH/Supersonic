#include <iostream>
#include <string>
#include <vector>
using namespace std;

#define ll long long

string p = "abacaba";

bool counts(const string& s) {
  int c = 0;
  for (int i = 0; i < s.size(); i++) {
    bool ck = false;
    for (int j = 0; j < p.size(); j++) {
      if (s[i + j] != p[j]) {
        ck = true;
        break;
      }
    }
    c += (ck == false);
  }
  return c == 1;
}

vector<int> computePrefix(const string& pattern) {
  int m = pattern.size();
  vector<int> prefix(m);
  int k = 0;
  for (int i = 1; i < m; i++) {
    while (k > 0 && pattern[k] != pattern[i]) {
      k = prefix[k - 1];
    }
    if (pattern[k] == pattern[i]) {
      k++;
    }
    prefix[i] = k;
  }
  return prefix;
}

bool kmpSearch(const string& text, const string& pattern) {
  int n = text.size();
  int m = pattern.size();
  vector<int> prefix = computePrefix(pattern);
  int k = 0;
  for (int i = 0; i < n; i++) {
    while (k > 0 && pattern[k] != text[i]) {
      k = prefix[k - 1];
    }
    if (pattern[k] == text[i]) {
      k++;
    }
    if (k == m) {
      return true;
    }
  }
  return false;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int t;
  cin >> t;

  while (t--) {
    int n;
    cin >> n;
    string s, ss;
    cin >> s;

    bool found = false;

    for (int i = 0; i < n; i++) {
      ss = s;
      bool ck = false;

      if (ss[i] == '?' || ss[i] == 'a') {
        for (int j = 0; j < p.size(); j++) {
          if (ss[i + j] != p[j] && ss[i + j] != '?') {
            ck = true;
            break;
          } else {
            ss[i + j] = p[j];
          }
        }

        if (ck == false && kmpSearch(ss, p) && counts(ss)) {
          for (int i = 0; i < n; i++) {
            if (ss[i] == '?') {
              ss[i] = 'd';
            }
          }
          cout << "YES" << endl;
          cout << ss << endl;
          found = true;
          break;
        }
      }
    }

    if (!found) {
      cout << "NO" << endl;
    }
  }

  return 0;
}