Before diving into the optimization strategy, it is important to analyze the provided code and identify potential areas for improvement. Here are a few observations:

1. The code includes unnecessary header file inclusion (`<bits/stdc++.h>`) which can slow down the compilation process. Instead, we should include only the necessary header files.

2. There are a lot of unnecessary macro definitions that are not used in the code. These macros can make the code harder to read and understand.

3. The code uses a lot of unnecessary data structures and containers, such as `set`, `multiset`, and `tuple`. These data structures come with some overhead, and using simpler alternatives could lead to performance improvements.

4. The code includes unnecessary I/O synchronization (`fastio`) and uses `endl` for line breaks, which can be slower than using `'\n'`. These can be replaced with more efficient alternatives.

5. The code uses a lot of unnecessary variable assignments and comparisons, which can lead to redundant computations.

Based on these observations, here is an optimization strategy to improve the code's efficiency:

1. Remove unnecessary header file inclusion and only include the necessary header files.

2. Remove unnecessary macro definitions that are not used in the code.

3. Replace unnecessary data structures and containers (`set`, `multiset`, `tuple`) with simpler alternatives (`vector`, `pair`).

4. Remove unnecessary I/O synchronization (`fastio`) and replace `endl` with `'\n'` for line breaks.

5. Minimize redundant computations and variable assignments.

Let's now proceed with the step-by-step explanation and the optimized code.