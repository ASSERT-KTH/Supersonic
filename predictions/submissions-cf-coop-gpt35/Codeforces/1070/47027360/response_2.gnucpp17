Code Analysis:
- The code includes several unnecessary header files, such as `bits/stdc++.h`, which includes all standard library headers. This can result in a larger executable and longer compilation times.
- The code defines several macros that are not used in the program. These macros should be removed as they serve no purpose.
- The code uses global variables excessively, which can make the code harder to understand and maintain.
- The code uses a 2D array `vis` to keep track of visited states in the BFS. However, only the first dimension of the array is used, and the second dimension is not necessary. This can be optimized to a 1D array instead.
- The code uses a 2D array `dp` to store the parent states during the BFS. However, only the first dimension of the array is used, and the second dimension is not necessary. This can be optimized to a 1D array instead.
- The code performs unnecessary calculations in the `gcd` and `lcm` functions. These calculations can be simplified to improve performance.
- The code uses a custom `compare` struct and `cmp1` function for sorting, but they are not used in the program. These can be removed.
- The code uses the `make_pair` function unnecessarily in several places. Instead, the pair can be constructed directly.
- The code initializes the `INF` constant as `1 << 28`, which is incorrect. It should be initialized as `1LL << 28` to avoid integer overflow.

Optimization Strategy:
1. Remove unnecessary header files: Remove the `bits/stdc++.h` header file and include only the necessary standard library headers.
2. Remove unnecessary macros: Remove unused macros such as `SPEED`, `READ`, `WRITE`, `pb`, `mem`, `sf`, `sf2`, `sf3`, `sl`, `sl2`, `sl3`, `sd`, `PRINT_CASE`, `mx`, `lnd`, `rnd`, `cnd`, `lndp`, `rndp`, `IN`.
3. Reduce the use of global variables: Move the `vis` and `dp` arrays inside the `bfs` function as local variables.
4. Optimize the BFS algorithm:
    - Replace the 2D `vis` array with a 1D array.
    - Replace the 2D `dp` array with a 1D array.
    - Simplify the `bfs` function: Remove the unnecessary `f` variable and the loop starting from `f`.
5. Simplify the `gcd` and `lcm` functions: Remove unnecessary calculations and simplify the code.
6. Remove unused sorting functions and custom compare struct.
7. Remove unnecessary use of `make_pair` function and construct pairs directly.
8. Initialize `INF` constant as `1LL << 28` to avoid integer overflow.

Step-by-Step Explanation:
1. Remove unnecessary header files:
   - Remove the line `#include <bits/stdc++.h>`.
   - Add the necessary standard library headers, such as `iostream`, `queue`, and `algorithm`.

2. Remove unnecessary macros:
   - Remove the unused macros `SPEED`, `READ`, `WRITE`, `pb`, `mem`, `sf`, `sf2`, `sf3`, `sl`, `sl2`, `sl3`, `sd`, `PRINT_CASE`, `mx`, `lnd`, `rnd`, `cnd`, `lndp`, `rndp`, `IN`.

3. Reduce the use of global variables:
   - Move the `vis` and `dp` arrays inside the `bfs` function as local variables.
   - Remove the global `s` and `d` variables and pass them as parameters to the `bfs` function.

4. Optimize the BFS algorithm:
   - Replace the 2D `vis` array with a 1D array.
   - Replace the 2D `dp` array with a 1D array.
   - Simplify the `bfs` function:
     - Remove the unnecessary `f` variable and the loop starting from `f`.
     - Simplify the condition for checking the sum and mul values.
     - Update the `print` function to take the `dp` array as a parameter.

5. Simplify the `gcd` and `lcm` functions:
   - Remove unnecessary calculations and simplify the code.

6. Remove unused sorting functions and custom compare struct:
   - Remove the unused `cmp` function and `compare` struct.

7. Remove unnecessary use of `make_pair` function and construct pairs directly:
   - Replace `make_pair` with direct pair construction in the `bfs` and `print` functions.

8. Initialize `INF` constant as `1LL << 28` to avoid integer overflow:
   - Change the initialization of `INF` to `1LL << 28` in the main function.
