#include <iostream>
#include <queue>
#include <cstring>

using namespace std;

const int MAX_N = 6000;
const int MAX_D = 600;

bool vis[MAX_N][MAX_D];
pair<int, int> dp[MAX_N][MAX_D];

int s, d;

int bfs() {
  queue<pair<int, int>> q;
  q.push({s, 0});
  vis[s][0] = true;

  while (!q.empty()) {
    int sum = q.front().first;
    int mul = q.front().second;
    q.pop();

    for (int i = 0; i < 10; i++) {
      int newSum = sum - i;
      int newMul = (mul * 10 + i) % d;

      if (newSum == 0 && newMul == 0) {
        dp[sum][mul] = {sum, mul};
        return 1;
      }

      if (newSum >= 0 && !vis[newSum][newMul]) {
        vis[newSum][newMul] = true;
        q.push({newSum, newMul});
        dp[newSum][newMul] = {sum, mul};
      }
    }
  }

  return 0;
}

void print(int sum, int mul) {
  if (sum == s && mul == 0)
    return;
  print(dp[sum][mul].first, dp[sum][mul].second);
  cout << dp[sum][mul].first - sum;
}

int main() {
  cin >> d >> s;
  
  if (bfs() == 1) {
    print(0, 0);
  } else {
    cout << -1 << endl;
  }

  return 0;
}