#include <iostream>
#include <queue>
#include <vector>
#include <bitset>
using namespace std;

#define SPEED ios::sync_with_stdio(false); cin.tie(0); cout.tie(0)

int s, d;
int fx[] = {1, -1, 0, 0};
int fy[] = {0, 0, 1, -1};

inline void pb(vector<int>& v, int x) {
  v.push_back(x);
}

struct pii {
  int first;
  int second;
};

struct compare {
  bool operator()(const int &l, const int &r) { return l > r; }
};

int bfs() {
  queue<pii> q;
  q.push(make_pair(s, 0));
  bitset<600 * 600> vis;
  vector<pii> dp(600 * 600);
  vis[s * d] = 1;
  pii p;
  int f = 1, mul, sum;
  while (!q.empty()) {
    p = q.front();
    q.pop();
    for (int i = f; i < 10; i++) {
      sum = p.first;
      sum -= i;
      mul = p.second;
      mul *= 10;
      mul += i;
      mul %= d;
      if (sum == 0 && mul == 0) {
        dp[sum * d + mul] = make_pair(p.first, p.second);
        return 1;
      }
      if (sum >= 0 && !vis[sum * d + mul]) {
        vis[sum * d + mul] = 1;
        q.push(make_pair(sum, mul));
        dp[sum * d + mul] = make_pair(p.first, p.second);
      }
    }
    f = 0;
  }
  return 0;
}

void print(int sum, int mul) {
  vector<int> res;
  while (sum != s || mul != 0) {
    int prev_sum = dp[sum * d + mul].first;
    int prev_mul = dp[sum * d + mul].second;
    res.push_back(prev_sum - sum);
    sum = prev_sum;
    mul = prev_mul;
  }
  for (int i = res.size() - 1; i >= 0; i--) {
    cout << res[i];
  }
}

int main() {
  SPEED;
  cin >> d >> s;
  if (bfs() == 1) {
    print(0, 0);
  } else {
    cout << -1 << endl;
  }
  return 0;
}