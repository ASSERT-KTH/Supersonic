#include <bits/stdc++.h>
#include <boost/math/special_functions/fft.hpp>

using namespace std;
using namespace boost::math;

typedef long long ll;

#define int ll
#define db(x) cout << #x << " = " << x << "\n";
#define fore(i, a, b) for (int i = a, ggdem = b; i < ggdem; i++)
#define FIN                                                                    \
  ios::sync_with_stdio(false);                                                 \
  cin.tie(0);                                                                  \
  cout.tie(0)
#define SZ(a) ((int)(a).size())
#define ALL(a) a.begin(), a.end()
#define mset(a, b) memset(a, b, sizeof(a));
#define pb push_back
#define fst first
#define snd second

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
const int MAXN = 1 << 20;
int n, x, y, res[MAXN];
bool can[2 * MAXN];

typedef vector<int> poly;

struct CD {
  double r, i;
  CD(double r = 0, double i = 0) : r(r), i(i) {}
  double real() const { return r; }
  void operator/=(const int c) { r /= c, i /= c; }
};

CD operator*(const CD &a, const CD &b) {
  return CD(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r);
}

CD operator+(const CD &a, const CD &b) { return CD(a.r + b.r, a.i + b.i); }

CD operator-(const CD &a, const CD &b) { return CD(a.r - b.r, a.i - b.i); }

const double pi = acos(-1.0);

CD cp1[2 * MAXN + 9], cp2[2 * MAXN + 9];
int R[2 * MAXN + 9];

void dft(CD *a, int n, bool inv) {
  fore(i, 0, n) if (R[i] < i) swap(a[R[i]], a[i]);
  for (int m = 2; m <= n; m *= 2) {
    double z = 2 * pi / m * (inv ? -1 : 1);
    CD wi = CD(cos(z), sin(z));
    for (int j = 0; j < n; j += m) {
      CD w(1);
      for (int k = j, k2 = j + m / 2; k2 < j + m; k++, k2++) {
        CD u = a[k];
        CD v = a[k2] * w;
        a[k] = u + v;
        a[k2] = u - v;
        w = w * wi;
      }
    }
  }
  if (inv)
    fore(i, 0, n) a[i] /= n;
}

poly multiply(poly &p1, poly &p2) {
  int n = p1.size() + p2.size() + 1;
  int m = 1, cnt = 0;
  while (m <= n)
    m += m, cnt++;
  fore(i, 0, m) {
    R[i] = 0;
    fore(j, 0, cnt) R[i] = (R[i] << 1) | ((i >> j) & 1);
  }
  fore(i, 0, m) cp1[i] = 0, cp2[i] = 0;
  fore(i, 0, p1.size()) cp1[i] = p1[i];
  fore(i, 0, p2.size()) cp2[i] = p2[i];
  dft(cp1, m, false);
  dft(cp2, m, false);
  fore(i, 0, m) cp1[i] = cp1[i] * cp2[i];
  dft(cp1, m, true);
  poly res;
  n -= 2;
  fore(i, 0, n) res.pb((int)floor(cp1[i].real() + 0.5));
  return res;
}

int32_t main() {
  FIN;
  cin >> n >> x >> y;
  int OFFSET = x;
  poly l(2 * OFFSET + 1), r(2 * OFFSET + 1);
  fore(i, 0, n + 1) {
    int X;
    cin >> X;
    l[X + OFFSET]++;
    r[-X + OFFSET]++;
  }
  poly p = multiply(l, r);
  fore(i, 0, 2 * OFFSET) if (i + 2 * OFFSET < SZ(p) && p[i + 2 * OFFSET])
      can[i] = 1;
  int q;
  cin >> q;
  fill(res, res + q + 1, 0);
  fore(_, 0, q + 1) {
    int X;
    cin >> X;
    for (int i = 2 * y; i <= X; i += 2) {
      if (can[X - i])
        res[_] = max(res[_], i);
    }
  }
  fore(i, 0, q) cout << res[i] << " \n"[i == q - 1];
}