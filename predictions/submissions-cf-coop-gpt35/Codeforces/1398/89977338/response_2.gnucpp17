#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

typedef long long ll;

void SieveOfEratosthenes(int n, vector<int>& primes) {
    vector<bool> isPrime(n + 1, true);
    isPrime[0] = isPrime[1] = false;

    for (int p = 2; p * p <= n; p++) {
        if (isPrime[p]) {
            for (int i = p * p; i <= n; i += p) {
                isPrime[i] = false;
            }
        }
    }

    for (int p = 2; p <= n; p++) {
        if (isPrime[p]) {
            primes.push_back(p);
        }
    }
}

void div_iter(vector<ll>& r, const vector<pair<ll, int>>& f) {
    r.push_back(1);
    for (const auto& factor : f) {
        int sz = r.size();
        ll curr = 1;
        for (int i = 0; i < factor.second; i++) {
            curr *= factor.first;
            for (int j = 0; j < sz; j++) {
                r.push_back(curr * r[j]);
            }
        }
    }
}

struct CD {
    double r, i;
    CD(double r = 0, double i = 0) : r(r), i(i) {}
    double real() const { return r; }
    void operator/=(const int c) { r /= c, i /= c; }
};

CD operator*(const CD& a, const CD& b) {
    return CD(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r);
}

CD operator+(const CD& a, const CD& b) {
    return CD(a.r + b.r, a.i + b.i);
}

CD operator-(const CD& a, const CD& b) {
    return CD(a.r - b.r, a.i - b.i);
}

const double pi = acos(-1.0);
CD cp1[MAXN + 9], cp2[MAXN + 9];
int R[MAXN + 9];

void dft(CD* a, int n, bool inv) {
    for (int i = 0; i < n; i++) {
        if (R[i] < i) {
            swap(a[R[i]], a[i]);
        }
    }
  
    for (int m = 2; m <= n; m *= 2) {
        double z = 2 * pi / m * (inv ? -1 : 1);
        CD wi = CD(cos(z), sin(z));
      
        for (int j = 0; j < n; j += m) {
            CD w(1);
          
            for (int k = j, k2 = j + m / 2; k2 < j + m; k++, k2++) {
                CD u = a[k];
                CD v = a[k2] * w;
                a[k] = u + v;
                a[k2] = u - v;
                w = w * wi;
            }
        }
    }
  
    if (inv) {
        for (int i = 0; i < n; i++) {
            a[i] /= n;
        }
    }
}

vector<ll> multiply(const vector<ll>& p1, const vector<ll>& p2) {
    int n = p1.size() + p2.size() + 1;
    int m = 1, cnt = 0;
  
    while (m <= n) {
        m += m;
        cnt++;
    }
  
    for (int i = 0; i < m; i++) {
        R[i] = 0;
      
        for (int j = 0; j < cnt; j++) {
            R[i] = (R[i] << 1) | ((i >> j) & 1);
        }
    }
  
    for (int i = 0; i < m; i++) {
        cp1[i] = 0;
        cp2[i] = 0;
    }
  
    for (int i = 0; i < p1.size(); i++) {
        cp1[i] = p1[i];
    }
  
    for (int i = 0; i < p2.size(); i++) {
        cp2[i] = p2[i];
    }
  
    dft(cp1, m, false);
    dft(cp2, m, false);
  
    for (int i = 0; i < m; i++) {
        cp1[i] = cp1[i] * cp2[i];
    }
  
    dft(cp1, m, true);
  
    vector<ll> res;
    n -= 2;
  
    for (int i = 0; i < n; i++) {
        res.push_back((ll)floor(cp1[i].real() + 0.5));
    }
  
    return res;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
  
    int n, x, y;
    cin >> n >> x >> y;
  
    int OFFSET = x;
    vector<ll> l(2 * OFFSET + 1), r(2 * OFFSET + 1);
  
    for (int i = 0; i < n + 1; i++) {
        int X;
        cin >> X;
        l[X + OFFSET]++;
        r[-X + OFFSET]++;
    }
  
    vector<ll> p = multiply(l, r);
    vector<bool> can(2 * OFFSET);
  
    for (int i = 0; i < 2 * OFFSET; i++) {
        if (i + 2 * OFFSET < p.size() && p[i + 2 * OFFSET]) {
            can[i] = true;
        }
    }
  
    int q;
    cin >> q;
    vector<int> res(q, -1);
  
    for (int i = 0; i < q; i++) {
        int X;
        cin >> X;
      
        if (SZ(g[X]) == 0) {
            int it = X;
            vector<pair<ll, int>> aux;
          
            while (it != 1) {
                if (SZ(aux) == 0 || aux.back().first != lp[it]) {
                    aux.push_back({lp[it], 1});
                } else {
                    aux.back().second++;
                }
              
                it /= lp[it];
            }
          
            div_iter(g[X], aux);
        }
      
        for (int j : g[X]) {
            ll need = j - 2 * y;
          
            if (need > 0 && need % 2 == 0 && can[need / 2]) {
                res[i] = max(res[i], j);
            }
        }
    }
  
    for (int i = 0; i < q; i++) {
        cout << res[i] << " \n"[i == q - 1];
    }
  
    return 0;
}