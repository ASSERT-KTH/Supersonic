#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

using ll = long long;
using namespace std;

constexpr int MAXN = 1 << 20;

vector<int> pr;

void SieveOfEratosthenes() {
    vector<bool> isPrime(MAXN + 1, true);
    isPrime[0] = isPrime[1] = false;
    
    for (int i = 2; i * i <= MAXN; i++) {
        if (isPrime[i]) {
            for (int j = i * i; j <= MAXN; j += i) {
                isPrime[j] = false;
            }
        }
    }
    
    for (int i = 2; i <= MAXN; i++) {
        if (isPrime[i]) {
            pr.push_back(i);
        }
    }
}

void div_rec(vector<ll>& r, vector<pair<ll, int>>& f, int k, ll c) {
    if (k == f.size()) {
        r.push_back(c);
        return;
    }
    
    for (int i = 0; i <= f[k].second; i++) {
        div_rec(r, f, k + 1, c);
        c *= f[k].first;
    }
}

vector<ll> multiply(vector<ll>& p1, vector<ll>& p2) {
    int n = p1.size() + p2.size() + 1;
    int m = 1, cnt = 0;
    
    while (m <= n) {
        m += m;
        cnt++;
    }
    
    vector<int> R(m);
    for (int i = 0; i < m; i++) {
        R[i] = 0;
        for (int j = 0; j < cnt; j++) {
            R[i] = (R[i] << 1) | ((i >> j) & 1);
        }
    }
    
    vector<ll> cp1(m), cp2(m);
    for (int i = 0; i < p1.size(); i++) {
        cp1[i] = p1[i];
    }
    for (int i = 0; i < p2.size(); i++) {
        cp2[i] = p2[i];
    }
    
    vector<ll> a(m);
    for (int i = 0; i < m; i++) {
        int j = R[i];
        if (i < j) {
            swap(cp1[i], cp1[j]);
            swap(cp2[i], cp2[j]);
        }
    }
    
    for (int i = 2; i <= m; i *= 2) {
        double z = 2 * M_PI / i;
        for (int j = 0; j < m; j += i) {
            double w = 1;
            for (int k = j; k < j + i / 2; k++) {
                ll u = cp1[k];
                ll v = w * cp1[k + i / 2];
                cp1[k] = u + v;
                cp1[k + i / 2] = u - v;
                w *= exp(z * complex<double>(0, 1));
            }
        }
    }
    
    for (int i = 0; i < m; i++) {
        cp1[i] /= m;
    }
    
    return cp1;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    SieveOfEratosthenes();
    
    int n, x, y;
    cin >> n >> x >> y;
    
    int OFFSET = x;
    vector<ll> l(2 * OFFSET + 1), r(2 * OFFSET + 1);
    
    for (int i = 0; i <= n; i++) {
        int X;
        cin >> X;
        l[X + OFFSET]++;
        r[-X + OFFSET]++;
    }
    
    vector<ll> p = multiply(l, r);
    
    vector<bool> can(2 * OFFSET);
    for (int i = 2 * OFFSET; i < p.size(); i++) {
        if (p[i]) {
            can[i - 2 * OFFSET] = true;
        }
    }
    
    int q;
    cin >> q;
    
    vector<int> res(q, -1);
    
    for (int i = 0; i < q; i++) {
        int X;
        cin >> X;
        
        static vector<vector<int>> g(MAXN + 1);
        
        if (g[X].empty()) {
            int it = X;
            vector<pair<ll, int>> aux;
            while (it != 1) {
                if (aux.empty() || aux.back().first != pr[it]) {
                    aux.emplace_back(pr[it], 1);
                } else {
                    aux.back().second++;
                }
                it /= pr[it];
            }
            div_rec(g[X], aux, 0, 1);
        }
        
        for (int j : g[X]) {
            ll need = j - 2 * y;
            if (need > 0 && need % 2 == 0 && can[need / 2]) {
                res[i] = max(res[i], j);
            }
        }
    }
    
    for (int i = 0; i < q; i++) {
        cout << res[i] << " \n"[i == q - 1];
    }
    
    return 0;
}