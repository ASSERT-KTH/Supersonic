#include <iostream>
#include <vector>
#include <algorithm>

constexpr int inf = 0x3f3f3f3f3f3f3f3LL;
constexpr int mod = (int)1e9 + 7;

int solve(size_t& idx0, size_t& idx1, size_t& idx2, const std::vector<int>& v0, const std::vector<int>& v1, const std::vector<int>& v2, std::vector<std::vector<std::vector<int>>>& dp) {
    if (idx0 >= v0.size() && idx1 >= v1.size() && idx2 >= v2.size()) {
        return 0;
    }
    int& ans = dp[idx0][idx1][idx2];
    if (ans != -1) {
        return ans;
    }
    ans = 0;
    if (idx0 < v0.size() && idx1 < v1.size()) {
        ans = std::max(ans, v0[idx0] * v1[idx1] + solve(idx0 + 1, idx1 + 1, idx2, v0, v1, v2, dp));
    }
    if (idx0 < v0.size() && idx2 < v2.size()) {
        ans = std::max(ans, v0[idx0] * v2[idx2] + solve(idx0 + 1, idx1, idx2 + 1, v0, v1, v2, dp));
    }
    if (idx1 < v1.size() && idx2 < v2.size()) {
        ans = std::max(ans, v1[idx1] * v2[idx2] + solve(idx0, idx1 + 1, idx2 + 1, v0, v1, v2, dp));
    }
    ans = std::max(ans, solve(idx0 + 1, idx1, idx2, v0, v1, v2, dp));
    ans = std::max(ans, solve(idx0, idx1 + 1, idx2, v0, v1, v2, dp));
    ans = std::max(ans, solve(idx0, idx1, idx2 + 1, v0, v1, v2, dp));
    return ans;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(NULL);

    size_t len[3];
    std::cin >> len[0] >> len[1] >> len[2];
    std::vector<int> v[3];
    for (size_t i = 0; i < 3; ++i) {
        v[i].resize(len[i]);
        for (size_t j = 0; j < len[i]; ++j) {
            std::cin >> v[i][j];
        }
        std::sort(v[i].rbegin(), v[i].rend());
    }

    std::vector<std::vector<std::vector<int>>> dp(len[0] + 1, std::vector<std::vector<int>>(len[1] + 1, std::vector<int>(len[2] + 1, -1)));
    size_t idx0 = 0, idx1 = 0, idx2 = 0;
    std::cout << solve(idx0, idx1, idx2, v[0], v[1], v[2], dp);

    return 0;
}