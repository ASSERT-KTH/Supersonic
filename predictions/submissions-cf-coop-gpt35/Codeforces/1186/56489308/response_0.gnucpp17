#include <iostream>
#include <vector>
#include <cmath>

typedef long long ll;

double custom_abs(double x) {
    return (x < 0) ? -x : x;
}

int custom_floor(double x) {
    int res = static_cast<int>(x);
    return (res > x) ? res - 1 : res;
}

int custom_round(double x) {
    return static_cast<int>(x + 0.5);
}

ll custom_round_ll(double x) {
    return static_cast<ll>(x + 0.5);
}

int main() {
    std::ios_base::sync_with_stdio(false);
    int n;
    std::scanf("%d", &n);
    std::vector<double> a(n);
    double tol = 1.e-7;
    int ent = 0;
    double tot = 0.;
    for (int i = 0; i < n; i++) {
        std::scanf("%lf", &a[i]);
        if (custom_abs(custom_floor(a[i]) - a[i]) < tol) {
            ent++;
        }
        tot += custom_floor(a[i]);
    }
    ll rem = custom_round_ll(tot);
    std::fprintf(stderr, "rem %lld\n", rem);
    char buffer[1024];
    int pos = 0;
    for (int i = 0; i < n; i++) {
        if (rem < 0 && custom_abs(custom_floor(a[i]) - a[i]) > tol) {
            pos += std::sprintf(buffer + pos, "%d\n", custom_round(custom_floor(a[i])) + 1);
            rem++;
        } else {
            pos += std::sprintf(buffer + pos, "%d\n", custom_round(custom_floor(a[i])));
        }
    }
    std::printf("%s", buffer);
    return 0;
}