#include <iostream>
#include <vector>
#include <bitset>
#define ll long long
using namespace std;

unsigned int n, A, B, C, D;
unsigned int ans;

inline ll read() {
    char s;
    ll k = 0, base = 1;
    while ((s = getchar()) != '-' && s != EOF && !(isdigit(s)));
    if (s == EOF) exit(0);
    if (s == '-') base = -1, s = getchar();
    while (isdigit(s)) {
        k = k * 10 + (s ^ '0');
        s = getchar();
    }
    return k * base;
}

inline unsigned int f(unsigned int x) {
    return A * x * x * x + B * x * x + C * x + D;
}

int main() {
    ans = 0;
    n = read();
    A = read(), B = read(), C = read(), D = read();

    vector<bool> isPrime(n + 1, true);
    vector<unsigned int> primes;
    primes.reserve(n / 2);  // Assuming n is large, there will be approximately n/2 prime numbers

    for (unsigned int i = 2; i <= n; i++) {
        if (isPrime[i]) {
            primes.push_back(i);
            ans += f(i);

            for (unsigned int j = i * i; j <= n; j += i) {
                isPrime[j] = false;
            }
        }
    }

    // Calculate sum for remaining values of i
    for (unsigned int i = 2; i <= n; i++) {
        if (!isPrime[i]) continue;

        unsigned int j = i;
        unsigned int F1 = f(i);
        while (j <= n) {
            ans += (n / j) * F1;
            if ((ll)j * i > n) break;
            j *= i;
        }
    }

    cout << ans;
    return 0;
}