#include <iostream>
#include <bitset>
#include <cmath>
using namespace std;

inline int readInt() {
    int x;
    scanf("%d", &x);
    return x;
}

int main() {
    int ans = 0;
    int n = readInt();
    int A = readInt(), B = readInt(), C = readInt(), D = readInt();

    int xx = (1 << 6) - 1;
    bitset<2500000 + 2> p;

    for (int i = 2; i * 2 <= n; i++) {
        bool flag = false;
        int l = 0;
        int* P = new int[1992];

        if (i == 2 || i == 3 || i == 5 ||
            ((i & 1) && i % 3 != 0 && i % 5 != 0 &&
            !(p[(x = (unsigned int)(i - (i >> 1) - (i / 3) - (i / 5) + (i / 6) + (i / 10) + (i / 15) - (i / 30)))) >> 5] & ((unsigned int)1 << (x & xx)))) {
            if (!flag) {
                ++l;
                P[l] = i;
            }
            int j = i;
            int F1 = (((A * i + B) * i + C) * i + D);
            while (j <= n) {
                ans += (n / j) * F1;
                if ((long long)j * (long long)i > n)
                    break;
                j *= i;
            }
        }
        if ((long long)P[l] * i > n) {
            flag = true;
        }
        while ((long long)P[l] * i > n)
            l--;
        for (int j = 1; j <= l && (long long)P[j] * i <= n; j++) {
            int x = P[j] * i;
            if ((x & 1) && x % 3 != 0 && x % 5 != 0) {
                x = (unsigned int)(x - (x >> 1) - (x / 3) - (x / 5) + (x / 6) + (x / 10) + (x / 15) - (x / 30));
                p[x >> 5] |= (unsigned int)1 << (x & xx);
            }
            if (i % P[j] == 0)
                break;
        }
        delete[] P;
    }

    for (int i = sqrt(n) + 1; i <= n; i++) {
        if (i == 2 || i == 3 || i == 5 ||
            ((i & 1) && i % 3 != 0 && i % 5 != 0 &&
            !(p[(x = (unsigned int)(i - (i >> 1) - (i / 3) - (i / 5) + (i / 6) + (i / 10) + (i / 15) - (i / 30)))) >> 5] & ((unsigned int)1 << (x & xx)))) {
            int j = i;
            int F1 = (((A * i + B) * i + C) * i + D);
            while (j <= n) {
                ans += (n / j) * F1;
                if ((long long)j * i > n)
                    break;
                j *= i;
            }
        }
    }

    cout << ans;
    return 0;
}