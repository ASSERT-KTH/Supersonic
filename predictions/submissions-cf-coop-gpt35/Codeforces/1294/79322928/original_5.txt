Code Analysis:

1. The code includes unnecessary headers such as `<bits/stdc++.h>` and `<algorithm>`.
2. The use of macros for constants like `M`, `D`, and `PI` is unnecessary and can be replaced with regular constants.
3. The `sortbysec` function is not used anywhere in the code.
4. The `set` data structure is used to keep track of available elements, but it is not necessary since the elements are consecutive integers starting from 0.
5. The vector `a` can be replaced with a simple array since its size is fixed.
6. The line `while (tests-- > 0)` can be simplified to `while (tests--)`.
7. The line `for (int i = 0; i < max(2 * q, q + 100); i++)` can be simplified to `for (int i = 0; i < q + 100; i++)` because `q` is always positive.
8. The line `cout << *(s.begin()) << endl;` can be optimized to avoid the need for a function call.

Optimization Strategy:

1. Remove unnecessary headers: Remove the unnecessary headers `<bits/stdc++.h>` and `<algorithm>`. These headers are not used in the code and can be safely removed.

2. Replace macros with constants: Replace the macros `M`, `D`, and `PI` with regular constants. Macros can lead to unexpected behavior and are not recommended for defining constants.

3. Remove unused function: The `sortbysec` function is not used in the code and can be safely removed.

4. Remove unnecessary set: Remove the `set` data structure since it is not necessary. Instead, we can keep track of the available elements using a simple counter variable.

5. Replace vector with array: Replace the vector `a` with a simple array since its size is fixed. This will eliminate the overhead of dynamic memory allocation and deallocation.

6. Simplify while loop condition: Simplify the while loop condition `while (tests-- > 0)` to `while (tests--)` for better readability.

7. Simplify for loop condition: Simplify the for loop condition `for (int i = 0; i < max(2 * q, q + 100); i++)` to `for (int i = 0; i < q + 100; i++)` since `q` is always positive.

8. Optimize print statement: Optimize the print statement `cout << *(s.begin()) << endl;` by directly accessing the first element of the set using `*s.begin()`.

Step-by-Step Explanation:

1. Remove unnecessary headers:
```cpp
#include <vector>
```

2. Replace macros with constants:
```cpp
const int M = 1000000007;
const int D = 998244353;
const double PI = 3.14159265;
```

3. Remove unused function:
```cpp
// Remove the sortbysec function
```

4. Remove unnecessary set:
```cpp
// Remove the set<int> s;
```

5. Replace vector with array:
```cpp
int a[x] = {0};
```

6. Simplify while loop condition:
```cpp
while (tests--) {
```

7. Simplify for loop condition:
```cpp
for (int i = 0; i < q + 100; i++) {
```

8. Optimize print statement:
```cpp
cout << *s.begin() << endl;
```

Optimized Code:

```cpp
#include <iostream>
const int M = 1000000007;
const int D = 998244353;
const double PI = 3.14159265;
int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  int tests = 1;
  while (tests--) {
    int q, x;
    std::cin >> q >> x;
    int a[x] = {0};
    for (int i = 0; i < q + 100; i++)
      ;
    while (q-- > 0) {
      int y;
      std::cin >> y;
      int z = a[y % x] * x + y % x;
      a[y % x]++;
      std::cout << z << std::endl;
    }
  }
  return 0;
}
```

Note: The optimized code does not include the unnecessary headers, unused function, unused set, and unnecessary print statement. It also replaces the macros with constants, simplifies the loop conditions, and uses a simple array instead of a vector.