Code Analysis:
1. The code includes unnecessary header files.
2. The macro definitions for constants `M`, `D`, and `PI` are not used.
3. The `sortbysec` function is not used in the code.
4. The `while (tests-- > 0)` loop is unnecessary as it is only executed once.
5. The line `int a[x] = {0};` is not standard C++.
6. The `set<int> s` is used to store a range of integers, but it can be replaced with a vector for better performance.
7. The loop `for (int i = 0; i < max(2 * q, q + 100); i++)` is used to populate the set `s` with integers from 0 to `max(2 * q, q + 100) - 1`. This loop can be optimized by using the `vector` data structure instead of `set`.
8. The expression `y % x` is calculated multiple times in the loop. This calculation can be optimized by storing the result in a variable.
9. The line `a[y % x]++;` can be optimized by using a prefix increment instead of a postfix increment.

Optimization Strategy:
1. Remove unnecessary header files.
2. Remove unused macro definitions.
3. Remove the `sortbysec` function.
4. Remove the unnecessary `while (tests-- > 0)` loop.
5. Replace the `int a[x] = {0};` line with `vector<int> a(x, 0);`.
6. Replace the `set<int> s` with a `vector<bool> s(max(2 * q, q + 100), true);`.
7. Optimize the loop `for (int i = 0; i < max(2 * q, q + 100); i++)` by using a `vector<bool>` instead of `set`.
8. Store the result of `y % x` in a variable to avoid calculating it multiple times.
9. Use prefix increment instead of postfix increment for `a[y % x]++`.

Step-by-Step Explanation:
1. Remove unnecessary header files:
   - The `algorithm` and `bits/stdc++.h` headers are not used in the code, so they can be removed.

2. Remove unused macro definitions:
   - The macro definitions for `M`, `D`, and `PI` are not used in the code, so they can be removed.

3. Remove the `sortbysec` function:
   - The `sortbysec` function is not used in the code, so it can be removed.

4. Remove the unnecessary `while (tests-- > 0)` loop:
   - The `while (tests-- > 0)` loop is unnecessary as it is only executed once. It can be removed.

5. Replace the `int a[x] = {0};` line with `vector<int> a(x, 0);`:
   - The line `int a[x] = {0};` is not standard C++. Replace it with `vector<int> a(x, 0);` to initialize a vector of size `x` with all values set to 0.

6. Replace the `set<int> s` with a `vector<bool> s(max(2 * q, q + 100), true);`:
   - The `set<int> s` is used to store a range of integers, but it can be replaced with a `vector<bool>` for better performance. Initialize the vector with `max(2 * q, q + 100)` elements, all set to `true`.

7. Optimize the loop `for (int i = 0; i < max(2 * q, q + 100); i++)` by using a `vector<bool>` instead of `set`:
   - Replace the line `s.insert(i);` inside the loop with `s[i] = true;`.

8. Store the result of `y % x` in a variable to avoid calculating it multiple times:
   - Before the line `int z = a[y % x] * x + y % x;`, add the line `int mod = y % x;`. Use `mod` instead of `y % x` in the subsequent lines.

9. Use prefix increment instead of postfix increment for `a[y % x]++`:
   - Replace the line `a[y % x]++;` with `++a[y % x];`.

Optimized Code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int q, x;
  cin >> q >> x;
  vector<int> a(x, 0);
  vector<bool> s(max(2 * q, q + 100), true);

  for (int i = 0; i < max(2 * q, q + 100); i++)
    s[i] = true;

  while (q-- > 0) {
    int y;
    cin >> y;
    int mod = y % x;
    int z = a[mod] * x + mod;
    s[z] = false;
    ++a[mod];
    cout << distance(s.begin(), find(s.begin(), s.end(), true)) << endl;
  }

  return 0;
}
```

This optimized code removes unnecessary header files, macro definitions, and unused code. It replaces the set `s` with a `vector<bool>` for better performance. The loop to populate `s` is optimized by using a `vector<bool>` instead of a set. The code also stores the result of `y % x` in a variable to avoid repeated calculations and uses prefix increment instead of postfix increment for `a[y % x]++`.