#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <vector>
using namespace std;

typedef long long ll;

const ll mod = 1e9 + 7;

inline void normal(ll &a) {
  a %= mod;
  (a < 0) && (a += mod);
}

inline ll modMul(ll a, ll b) {
  a %= mod, b %= mod;
  normal(a), normal(b);
  return (a * b) % mod;
}

inline ll modAdd(ll a, ll b) {
  a %= mod, b %= mod;
  normal(a), normal(b);
  return (a + b) % mod;
}

inline ll modSub(ll a, ll b) {
  a %= mod, b %= mod;
  normal(a), normal(b);
  a -= b;
  normal(a);
  return a;
}

inline ll modPow(ll b, ll p) {
  ll r = 1;
  while (p) {
    if (p & 1)
      r = modMul(r, b);
    b = modMul(b, b);
    p >>= 1;
  }
  return r;
}

inline ll modInverse(ll a) {
  return modPow(a, mod - 2);
}

inline ll modDiv(ll a, ll b) {
  return modMul(a, modInverse(b));
}

const int N = 3e5 + 5;

unordered_map<int, unordered_set<int>> graph;
unordered_map<int, int> par;

vector<int> vec;

pair<int, int> dfs(int u, int p = -1, int dist = 0) {
  par[u] = p;
  auto x = make_pair(dist, u);
  stack<pair<int, int>> st;
  st.push(make_pair(u, dist));
  while (!st.empty()) {
    pair<int, int> node = st.top();
    st.pop();
    int curr = node.first;
    int currDist = node.second;
    if (currDist > x.first) {
      x = make_pair(currDist, curr);
    }
    for (auto v : graph[curr]) {
      if (v == p)
        continue;
      st.push(make_pair(v, currDist + 1));
    }
  }
  return x;
}

void bfs() {
  queue<int> Q;
  unordered_map<int, int> d;
  for (auto v : vec) {
    d[v] = 0;
    Q.push(v);
  }
  while (!Q.empty()) {
    int u = Q.front();
    Q.pop();
    for (auto v : graph[u]) {
      if (d[v] == 0) {
        d[v] = d[u] + 1;
        Q.push(v);
      }
    }
  }
  auto ret = make_pair(d[1], 1);
  for (int i = 2; i <= n; i++) {
    if (d[i] > ret.first) {
      ret = make_pair(d[i], i);
    }
  }
  cout << (int)vec.size() - 1 + ret.first << endl;
  cout << vec[0] << " " << ret.second << " " << vec.back() << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

  int n;
  cin >> n;
  for (int i = 1; i < n; i++) {
    int u, v;
    cin >> u >> v;
    graph[u].insert(v);
    graph[v].insert(u);
  }
  auto da = dfs(1);
  auto df = dfs(da.second);
  int v = df.second;
  while (v != da.second) {
    vec.push_back(v);
    v = par[v];
  }
  vec.push_back(da.second);
  if ((int)vec.size() == n) {
    cout << n - 1 << endl;
    cout << vec[0] << " " << vec[1] << " " << vec.back() << endl;
  } else {
    bfs();
  }

  return 0;
}