pair<int, int> dfs(int u) {
  stack<pair<int, int>> st;
  int dist = 0;
  int maxDist = 0;
  int farthestNode = u;
  st.push({u, 0});
  while (!st.empty()) {
    auto [node, idx] = st.top();
    if (idx < graph[node][0]) {
      int nextNode = graph[node][idx + 1];
      if (nextNode != par[node]) {
        dist = graph[node][idx] + 1;
        st.push({nextNode, 0});
        par[nextNode] = node;
        if (dist > maxDist) {
          maxDist = dist;
          farthestNode = nextNode;
        }
      }
      graph[node][idx]++;
    } else {
      st.pop();
    }
  }
  return {maxDist, farthestNode};
}