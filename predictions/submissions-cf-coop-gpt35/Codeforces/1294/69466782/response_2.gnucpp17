#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

#define FASTIO ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);

const int N = 3e5 + 5;
vector<int> graph[N];
int par[N];
int n;
vector<int> vec;

pair<int, int> dfs(int u, int p = -1) {
    par[u] = p;
    auto x = make_pair(0, u);
    for (auto v : graph[u]) {
        if (v == p)
            continue;
        auto temp = dfs(v, u);
        if (temp.first + 1 > x.first) {
            x.first = temp.first + 1;
            x.second = temp.second;
        }
    }
    return x;
}

void bfs() {
    queue<int> Q;
    vector<int> d(n + 1, -1);
    for (auto v : vec) {
        d[v] = 0;
        Q.push(v);
    }
    while (!Q.empty()) {
        int u = Q.front();
        Q.pop();
        for (auto v : graph[u]) {
            if (d[v] == -1) {
                d[v] = d[u] + 1;
                Q.push(v);
            }
        }
    }
    auto ret = make_pair(d[1], 1);
    for (int i = 2; i <= n; i++) {
        if (d[i] > ret.first) {
            ret.first = d[i];
            ret.second = i;
        }
    }
    cout << (int)vec.size() - 1 + ret.first << endl;
    cout << vec[0] << " " << ret.second << " " << vec.back() << endl;
}

int main() {
    FASTIO

    cin >> n;
    for (int i = 1; i < n; i++) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    auto da = dfs(1);
    auto df = dfs(da.second);
    int v = df.second;
    while (v != da.second) {
        vec.push_back(v);
        v = par[v];
    }
    vec.push_back(da.second);
    if ((int)vec.size() == n) {
        cout << n - 1 << endl;
        cout << vec[0] << " " << vec[1] << " " << vec.back() << endl;
    } else {
        bfs();
    }

    return 0;
}