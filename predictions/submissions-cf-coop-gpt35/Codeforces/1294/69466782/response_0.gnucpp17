#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <tuple>
using namespace std;

const int N = 3e5 + 5;

void dfsIterative(int u, int p, int dist, vector<int>& par, const vector<vector<int>>& graph) {
    stack<tuple<int, int, int>> st;
    st.push(make_tuple(u, p, dist));
    while (!st.empty()) {
        int u, p, dist;
        tie(u, p, dist) = st.top();
        st.pop();
        par[u] = p;
        for (auto v : graph[u]) {
            if (v == p)
                continue;
            st.push(make_tuple(v, u, dist + 1));
        }
    }
}

void bfs(const vector<int>& vec, const vector<vector<int>>& graph) {
    int n = graph.size() - 1;
    queue<int> Q;
    vector<int> d(n + 1, -1);
    for (auto v : vec) {
        d[v] = 0;
        Q.push(v);
    }
    while (!Q.empty()) {
        int u = Q.front();
        Q.pop();
        for (auto v : graph[u]) {
            if (d[v] == -1) {
                d[v] = d[u] + 1;
                Q.push(v);
            }
        }
    }
    auto ret = make_pair(d[vec[0]], vec[0]);
    for (int i = 1; i < vec.size(); i++) {
        ret = max(ret, make_pair(d[vec[i]], vec[i]));
    }
    cout << (int)vec.size() - 1 + ret.first << endl;
    cout << vec[0] << " " << ret.second << " " << vec.back() << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int n;
    cin >> n;
    vector<vector<int>> graph(n + 1);
    for (int i = 1; i < n; i++) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    vector<int> par(n + 1);
    dfsIterative(1, -1, 0, par, graph);
    vector<int> par2(n + 1);
    dfsIterative(par[1], -1, 0, par2, graph);
    vector<int> vec;
    int v = par2[par[1]];
    while (v != par[1]) {
        vec.push_back(v);
        v = par[v];
    }
    vec.push_back(par[1]);
    if ((int)vec.size() == n) {
        cout << n - 1 << endl;
        cout << vec[0] << " " << vec[1] << " " << vec.back() << endl;
    } else {
        bfs(vec, graph);
    }

    return 0;
}