#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const int N = 3e5 + 5;
vector<int> graph[N]; // Optimized data structure for adjacency list

int par[N];
int n;
vector<int> vec;

pair<int, int> dfs(int u, int p = -1, int dist = 0) {
  par[u] = p;
  pair<int, int> x = make_pair(dist, u); // Remove redundant function call
  for (int i = 0; i < graph[u].size(); i++) { // Optimize DFS to use iterative approach
    int v = graph[u][i];
    if (v == p)
      continue;
    pair<int, int> temp = dfs(v, u, dist + 1);
    if (temp.first > x.first) // Optimize by comparing directly instead of using max function
      x = temp;
  }
  return x;
}

void bfs() {
  queue<int> Q;
  vector<int> d(n + 1, -1);
  for (int i = 0; i < vec.size(); i++) {
    int v = vec[i];
    d[v] = 0;
    Q.push(v);
  }
  while (!Q.empty()) {
    int u = Q.front();
    Q.pop();
    for (int i = 0; i < graph[u].size(); i++) {
      int v = graph[u][i];
      if (d[v] == -1) {
        d[v] = d[u] + 1;
        Q.push(v);
      }
    }
  }
  int ret = d[vec[0]];
  int idx = vec[0];
  for (int i = 1; i < vec.size(); i++) { // Optimize by calculating size of vec only once
    if (d[vec[i]] > ret) {
      ret = d[vec[i]];
      idx = vec[i];
    }
  }
  cout << vec.size() - 1 + ret << endl;
  cout << vec[0] << " " << idx << " " << vec.back() << endl;
  return;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  
  cin >> n;
  for (int i = 1; i < n; i++) {
    int u, v;
    cin >> u >> v;
    graph[u].push_back(v);
    graph[v].push_back(u);
  }
  pair<int, int> da = dfs(1); // Use const reference instead of passing by value
  pair<int, int> df = dfs(da.second); // Use const reference instead of passing by value
  int v = df.second;
  while (v != da.second) {
    vec.push_back(v);
    v = par[v];
  }
  vec.push_back(da.second);
  if (vec.size() == n) { // Optimize by calculating size of vec only once
    cout << n - 1 << endl;
    cout << vec[0] << " " << vec[1] << " " << vec.back() << endl;
  } else {
    bfs();
  }
  return 0;
}