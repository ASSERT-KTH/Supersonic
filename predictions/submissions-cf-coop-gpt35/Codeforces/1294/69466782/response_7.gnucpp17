Upon analyzing the provided code, I have identified the following potential optimizations:

1. Remove unnecessary includes: The code includes many unnecessary headers, such as `<bits/stdc++.h>`, `<iostream>`, `<functional>`, and `<ext/pb_ds/assoc_container.hpp>`. Removing these unnecessary includes will reduce the compilation time and improve overall performance.

2. Remove unnecessary macros: The code defines macros for INF, endl, maxn, and PI, but they are not used in the program. Removing these unused macros will make the code cleaner and improve readability.

3. Improve data structure usage: The code uses a vector to store the graph, which is not an efficient data structure for this purpose. Instead, we can use an adjacency list representation to store the graph, which will reduce memory usage and improve performance.

4. Avoid unnecessary function calls: The code uses several unnecessary function calls, such as `normal()` and `modMul()`. These functions could be replaced with direct calculations, reducing function call overhead and improving performance.

5. Avoid unnecessary calculations: The code performs several unnecessary calculations, such as calculating `modInverse(b)` in `modDiv()`. We can eliminate these calculations by simplifying the code logic and directly calculating the required values.

6. Optimize the dfs() function: The dfs() function can be optimized by using tail recursion instead of recursion. This will improve performance and reduce memory usage.

7. Optimize the bfs() function: The bfs() function can be optimized by using a more efficient data structure for the queue, such as a deque. This will improve performance and reduce memory usage.

8. Reduce unnecessary memory allocations: The code uses several unnecessary memory allocations, such as creating a vector `d` in the bfs() function. We can avoid these unnecessary allocations by reusing existing variables or using more efficient data structures.
