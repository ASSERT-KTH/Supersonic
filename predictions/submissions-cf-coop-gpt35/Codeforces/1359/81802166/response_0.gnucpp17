#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

inline int power(int x, int y, int p = mod) {
    int res = 1;
    x = x % p;
    while (y > 0) {
        if (y & 1)
            res = (res * x) % p;
        y = y >> 1;
        x = (x * x) % p;
    }
    return res;
}

inline int modadd(int a, int b, int m = mod) {
    a += b;
    if (a >= m)
        a -= m;
    return a;
}

inline int modmul(int a, int b, int m = mod) { 
    return ((a % m) * (b % m)) % m; 
}

inline int modi(int a, int m = mod) { 
    return power(a, m - 2, m); 
}

int maxSubArraySum(const vector<int>& a, int F) {
    int max_so_far = INT_MIN, max_ending_here = 0;
    int size = a.size();
    int max_element = -31;
    for (int i = 0; i < size; ++i) {
        max_element = max(max_element, a[i]);
        max_ending_here = max_ending_here + a[i];
        if (max_so_far < max_ending_here && max_element == F)
            max_so_far = max_ending_here;
        if (max_ending_here < 0 || max_element > F)
            max_ending_here = 0, max_element = -31;
    }
    return max_so_far;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    
    int max_diff = 0;
    for (int i = -30; i < 31; ++i) {
        max_diff = max(max_diff, maxSubArraySum(a, i) - i);
    }
    
    cout << max_diff << endl;
    
    return 0;
}