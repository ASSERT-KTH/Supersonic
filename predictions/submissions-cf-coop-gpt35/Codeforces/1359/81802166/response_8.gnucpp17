#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <cmath>
#include <climits>

typedef long long int lli;

inline lli modmul(lli a, lli b, lli m = 998244353) {
    return ((a % m) * (b % m)) % m;
}

lli maxSubArraySum(const std::vector<lli>& a, lli F) {
    lli max_so_far = INT_MIN;
    lli max_ending_here = 0;
    lli max_a = *std::max_element(a.begin(), a.end());

    for (lli i = 0; i < a.size(); i++) {
        max_ending_here = std::max(max_ending_here + a[i], 0LL);
        if ((max_so_far < max_ending_here) && (max_a == F))
            max_so_far = max_ending_here;
        if (max_ending_here < 0 || max_a > F)
            max_ending_here = 0;
    }

    return max_so_far;
}

int main() {
    std::ios::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);

    lli T = 1;
    while (T--) {
        lli n;
        std::cin >> n;
        std::vector<lli> a(n);
        for (lli i = 0; i < n; i++)
            std::cin >> a[i];

        lli R = 0;
        lli max_a = *std::max_element(a.begin(), a.end());
        for (lli i = -30; i <= 30; i++) {
            if (i <= max_a)
                R = std::max(R, (maxSubArraySum(a, i) - i));
        }

        std::cout << R << std::endl;
    }

    return 0;
}