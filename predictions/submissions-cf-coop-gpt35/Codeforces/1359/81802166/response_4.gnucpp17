#include <iostream>
#include <vector>
using namespace std;

long long maxSubArraySum(const vector<long long>& a, int F) {
    long long max_so_far = INT_MIN, max_ending_here = 0;
    int M = -31;
    for (int i = 0; i < a.size(); i++) {
        M = max(M, a[i]);
        max_ending_here = max_ending_here + a[i];
        if ((max_so_far < max_ending_here) and (M == F))
            max_so_far = max_ending_here;
        if (max_ending_here < 0 or M > F)
            max_ending_here = 0, M = -31;
    }
    return max_so_far;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    int T = 1;
    while (T--) {
        int n;
        cin >> n;
        vector<long long> a(n);
        for (int i = 0; i < n; i++)
            cin >> a[i];

        long long result = 0;
        for (int i = -30; i < 31; i++) {
            long long subArraySum = maxSubArraySum(a, i);
            result = max(result, subArraySum - i);
        }
        cout << result << endl;
    }

    return 0;
}