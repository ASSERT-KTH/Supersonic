#include <algorithm>
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

const int N = 1e5 + 1;
unordered_map<int, int> p, r, mp;

int get(int a) {
  if (p[a] == a)
    return a;
  return p[a] = get(p[a]);
}

void unite(int a, int b) {
  a = get(a);
  b = get(b);
  if (a == b)
    return;
  if (r[a] == r[b])
    r[a]++;
  if (r[a] > r[b])
    p[b] = a;
  else
    p[a] = b;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  int n, m;
  cin >> n >> m;

  for (int i = 0; i < m; i++) {
    int a, b;
    cin >> a >> b;
    unite(a, b);
  }

  int q;
  cin >> q;

  while (q--) {
    int a, b;
    cin >> a >> b;

    if (p.size() > 1e7)
      p.clear();

    if (p[a] > p[b])
      swap(a, b);

    if (mp.count(a * N + b)) {
      cout << mp[a * N + b] << '\n';
      continue;
    }

    int res = 0;

    for (auto const &[node, parent] : p) {
      if (get(node) == get(a) && get(node) == get(b))
        res++;
    }

    mp[a * N + b] = res;
    cout << res << '\n';
  }

  return 0;
}