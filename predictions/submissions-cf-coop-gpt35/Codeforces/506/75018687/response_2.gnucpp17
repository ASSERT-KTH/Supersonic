#include <algorithm>
#include <iostream>
#include <map>
#include <unordered_map>
#include <vector>

#define ld double
#define pii pair<int, int>
#define pb push_back
#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)

using namespace std;

const int N = 1e5 + 1;

struct Key {
    int a, c;
    bool operator<(const Key& other) const {
        return a < other.a || (a == other.a && c < other.c);
    }
};

unordered_map<Key, int> p, r;
map<int, int> mp[N];

int get(int a, int c) {
    Key key = {a, c};
    while (p[key] != key) {
        key = p[key] = p[p[key]];
    }
    return key.a;
}

void unite(int a, int b, int c) {
    Key keyA = {a, c};
    Key keyB = {b, c};
    if (p[keyA] == Key{0, 0}) {
        p[keyA] = keyA;
    }
    if (p[keyB] == Key{0, 0}) {
        p[keyB] = keyB;
    }
    a = get(a, c);
    b = get(b, c);
    if (a == b) return;
    if (r[keyA] == r[keyB]) {
        r[keyA]++;
    }
    if (r[keyA] > r[keyB]) {
        p[keyB] = keyA;
    } else {
        p[keyA] = keyB;
    }
}

int main() {
    fast;
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int a, b, c;
        cin >> a >> b >> c;
        unite(a, b, c);
    }
    int q;
    cin >> q;
    while (q--) {
        int a, b;
        cin >> a >> b;
        if (mp[a].count(b)) {
            cout << mp[a][b] << endl;
            continue;
        }
        int res = 0;
        for (auto &c : mp[a]) {
            if (mp[b].count(c.first)) {
                int aParent = get(a, c.first);
                int bParent = get(b, c.first);
                res += (aParent == bParent);
            }
        }
        mp[a][b] = res;
        cout << res << '\n';
    }
    exit(0);
}