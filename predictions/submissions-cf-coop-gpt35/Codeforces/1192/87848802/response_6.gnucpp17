#include <bits/stdc++.h>
using namespace std;

const int N = 62;
const int mod = 998244353;

int dict(char a) {
  if (isalpha(a)) {
    if (isupper(a))
      return a - 'A';
    return a - 'a' + 26;
  }
  return a - '0' + 52;
}

int add(int a, int b) {
  return ((a += b) >= mod) ? a - mod : a;
}

int mul(int a, int b) {
  return a * 1ll * b % mod;
}

int main() {
  int n;
  scanf("%d", &n);

  // Preprocess the input
  vector<string> strings(n);
  unordered_map<string, bool> mp;
  vector<vector<vector<int>>> way(10, vector<vector<int>>(N, vector<int>(N, 0)));
  for (int i = 0; i < n; ++i) {
    char s[10];
    scanf(" %s", s);
    strings[i] = string(s);

    int len = strings[i].length() - 1;
    if (mp[strings[i]] == false)
      way[len][dict(strings[i][0])][dict(strings[i][len])]++, mp[strings[i]] = true;

    reverse(strings[i].begin(), strings[i].end());
    if (mp[strings[i]] == false)
      way[len][dict(strings[i][0])][dict(strings[i][len])]++, mp[strings[i]] = true;
  }

  int ans = 0;
  for (int L = 2; L <= 9; ++L) {
    for (int i = 0; i < N; ++i) {
      for (int j = 0; j <= i; ++j) {
        for (int k = 0; k <= j; ++k) {
          vector<vector<int>> dp(N, vector<int>(N, 0));
          for (int l = 0; l < N; ++l) {
            int a = (way[L][i][l] * 1ll * way[L][j][l] * way[L][k][l]) % mod;
            dp[i][j][k] = add(dp[i][j][k], a);
          }
        }
      }
    }
    for (int i = 0; i < N; ++i) {
      for (int j = 0; j <= i; ++j) {
        for (int k = 0; k < N; ++k) {
          for (int l = 0; l <= k; ++l) {
            // Calculate the values outside the loop
            int play_ikl = dp[i][k][l];
            int play_jlk = dp[j][l][k];
            int play_ijk = dp[i][j][k];
            int play_ilj = dp[i][l][j];

            int a = mul(mul(play_ikl, play_jlk), mul(play_ijk, play_ilj));
            if (k != l)
              a = add(a, a);
            if (i != j)
              a = add(a, a);
            ans = add(ans, a);
          }
        }
      }
    }
  }

  printf("%d\n", ans);
  return 0;
}