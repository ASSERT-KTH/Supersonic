#include <cstdio>
#include <cstring>
#include <algorithm>
#include <unordered_set>
#include <vector>

const int FIRST_INDEX = 0;
const int SECOND_INDEX = 1;

const auto push_back = std::back_inserter;
const auto emplace_back = std::emplace_back;
const auto begin = std::begin;
const auto end = std::end;
const auto size = std::size;

const auto FOR = [](int i, int a, int b) { for (; i <= b; ++i) };
const auto ROF = [](int i, int a, int b) { for (; i >= b; --i) };

const auto make_unique = [](auto& a) { std::sort(std::begin(a), std::end(a)); a.erase(std::unique(std::begin(a), std::end(a)), std::end(a)); };

using namespace std;

const int N = 62;
const int mod = 998244353;

int dp[N][N][N], way[10][N][N];
unordered_set<string> mp;
char s[10];

int dict(char a) {
  if (isalpha(a)) {
    if (isupper(a))
      return a - 'A';
    return a - 'a' + 26;
  }
  return a - '0' + 52;
}

void adding(int &a, int b) {
  if ((a += b) >= mod)
    a -= mod;
}

int add(int a, int b) { return ((a += b) >= mod) ? a - mod : a; }

int mul(int a, int b) { return a * 1ll * b % mod; }

int play(int i, int j, int k) {
  int mx = max(max(i, j), k);
  int mi = min(min(i, j), k);
  return dp[mx][i ^ j ^ k ^ mx ^ mi][mi];
}

void solve() {
  int n;
  scanf("%d", &n);
  FOR(i, 1, n) {
    scanf(" %s", s);
    int len = strlen(s) - 1;
    if (mp.count(s) == 0)
      way[len][dict(s[FIRST_INDEX])][dict(s[len])]++, mp.insert(s);
    reverse(s, s + len + 1);
    if (mp.count(s) == 0)
      way[len][dict(s[FIRST_INDEX])][dict(s[len])]++, mp.insert(s);
  }
  int ans = 0;
  FOR(L, 2, 9) {
    FOR(i, 0, 61) {
      FOR(j, 0, i) {
        FOR(k, 0, j) {
          dp[i][j][k] = 0;
          FOR(l, 0, 61) {
            int a = (way[L][i][l] * 1ll * way[L][j][l] * way[L][k][l]) % mod;
            adding(dp[i][j][k], a);
          }
        }
      }
    }
    FOR(i, 0, 61) {
      FOR(j, 0, i) {
        FOR(k, 0, 61) {
          FOR(l, 0, k) {
            int a = mul(mul(play(i, k, l), play(j, l, k)),
                        mul(play(i, j, k), play(i, l, j)));
            if (k != l)
              adding(a, a);
            if (i != j)
              adding(a, a);
            adding(ans, a);
          }
        }
      }
    }
  }
  printf("%d\n", ans);
}

int main() {
  solve();
  return 0;
}