#include <bits/stdc++.h>
using namespace std;

// Define constants
const int N = 62;
const int mod = 998244353;

// Define data structures
typedef pair<int, int> PII;
typedef long long LL;
typedef double DD;
typedef long double LD;
typedef pair<LL, LL> PLL;
typedef pair<DD, DD> PDD;
typedef vector<int> VI;
typedef vector<LL> VL;
typedef vector<VI> VVI;
typedef vector<VL> VVL;

// Define global variables
VVI dp(N, VVI(N, VI(N)));
VVL way(10, VVL(N, VL(N)));
unordered_map<string, bool> mp;

// Utility function to convert character to dictionary index
int dict(char a) {
  if (isalpha(a)) {
    if (isupper(a))
      return a - 'A';
    return a - 'a' + 26;
  }
  return a - '0' + 52;
}

// Utility function to perform modular addition
void adding(int &a, int b) {
  if ((a += b) >= mod)
    a -= mod;
}

// Utility function to perform modular addition
int add(int a, int b) {
  return ((a += b) >= mod) ? a - mod : a;
}

// Utility function to perform modular multiplication
int mul(int a, int b) {
  return a * 1ll * b % mod;
}

// Utility function to calculate the play value
int play(int i, int j, int k, const VVI& dp) {
  int mx = max(max(i, j), k);
  int mi = min(min(i, j), k);
  return dp[mx][i ^ j ^ k ^ mx ^ mi][mi];
}

// Main function to solve the problem
void solve() {
  int n;
  scanf("%d", &n);

  // Process input strings
  for (int i = 1; i <= n; ++i) {
    char s[10];
    scanf(" %s", s);
    int len = strlen(s) - 1;

    // Check if string already processed
    if (mp[s] == false)
      way[len][dict(s[0])][dict(s[len])]++, mp[s] = true;

    // Reverse the string and check if already processed
    reverse(s, s + len + 1);
    if (mp[s] == false)
      way[len][dict(s[0])][dict(s[len])]++, mp[s] = true;
  }

  int ans = 0;

  // Perform calculations
  for (int L = 2; L <= 9; L++) {
    for (int i = 0; i <= 61; i++) {
      for (int j = 0; j <= i; j++) {
        for (int k = 0; k <= j; k++) {
          dp[i][j][k] = 0;
          for (int l = 0; l <= 61; l++) {
            int a = (way[L][i][l] * 1ll * way[L][j][l] * way[L][k][l]) % mod;
            adding(dp[i][j][k], a);
          }
        }
      }
    }

    for (int i = 0; i <= 61; i++) {
      for (int j = 0; j <= i; j++) {
        for (int k = 0; k <= 61; k++) {
          for (int l = 0; l <= k; l++) {
            int a = mul(mul(play(i, k, l, dp), play(j, l, k, dp)),
                        mul(play(i, j, k, dp), play(i, l, j, dp)));

            // Add extra values if conditions are met
            if (k != l)
              adding(a, a);
            if (i != j)
              adding(a, a);
            adding(ans, a);
          }
        }
      }
    }
  }

  printf("%d\n", ans);
}

int main() {
  // Enable compiler optimizations
  #pragma GCC optimize("O2")

  solve();
  return 0;
}