#include <iostream>
#include <vector>
#include <queue>
using namespace std;

void solve() {
    int t1 = 1;
    for (int tt = 1; tt <= t1; tt++) {
        int n, m, T;
        cin >> n >> m >> T;
        vector<vector<pair<int, int>>> adj(n + 1);
        for (int i = 0; i < m; i++) {
            int u, v, w;
            cin >> u >> v >> w;
            adj[u].push_back({v, w});
        }
        vector<vector<long long>> dp(n + 1, vector<long long>(n + 1, 1e18));
        vector<vector<long long>> par(n + 1, vector<long long>(n + 1, -1));
        dp[1][1] = 0;
        vector<long long> indc(n + 1, -1);
        priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<pair<long long, int>>> pq;
        pq.push({0, 1});
        while (!pq.empty()) {
            auto [dist, u] = pq.top();
            pq.pop();
            if (dist > dp[u][n])
                continue;
            for (auto [v, w] : adj[u]) {
                if (dp[u][n] + w <= T && dp[u][n] + w < dp[v][n]) {
                    indc[v] = u;
                    dp[v][n] = dp[u][n] + w;
                    par[v][n] = u;
                    pq.push({dp[v][n], v});
                }
            }
        }
        int res = 0;
        for (int i = 1; i <= n; i++)
            if (dp[i][n] <= T)
                res = i;
        vector<int> ans;
        int cur = n;
        int jumps = res;
        ans.push_back(cur);
        while (jumps > 1) {
            ans.push_back(par[cur][jumps]);
            cur = par[cur][jumps];
            jumps--;
        }
        reverse(ans.begin(), ans.end());
        cout << res << endl;
        for (int i : ans)
            cout << i << " ";
        cout << endl;
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    solve();
    return 0;
}