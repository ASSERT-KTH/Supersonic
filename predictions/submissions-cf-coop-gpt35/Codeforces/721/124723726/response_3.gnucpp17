#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

void solve() {
    int t1 = 1;
    for (int tt = 1; tt <= t1; tt++) {
        int n, m, T;
        cin >> n >> m >> T;
        vector<vector<pair<int, int>>> adj(n + 1);
        for (int i = 0; i < m; i++) {
            int u, v, w;
            cin >> u >> v >> w;
            adj[u].push_back({v, w});
        }
        vector<int> dp(n * n, 1e9 + 7);
        vector<int> par(n * n, -1);
        dp[0] = 0;
        for (int j = 1; j <= n; j++) {
            for (int i = 1; i <= n && dp[(j - 1) * n + i - 1] <= T; i++) {
                for (auto e : adj[i]) {
                    int to = e.first;
                    if (dp[j * n + to - 1] > dp[(j - 1) * n + i - 1] + e.second) {
                        dp[j * n + to - 1] = dp[(j - 1) * n + i - 1] + e.second;
                        par[j * n + to - 1] = (j - 1) * n + i - 1;
                    }
                }
            }
        }
        int res = 0;
        for (int i = 1; i <= n; i++)
            if (dp[n * n + i - 1] <= T)
                res = i;
        vector<int> ans;
        int cur = n * n + res - 1;
        int jumps = res;
        ans.push_back(cur % n);
        while (jumps > 1) {
            cur = par[cur];
            ans.push_back(cur % n);
            jumps--;
        }
        reverse(ans.begin(), ans.end());
        cout << res << '\n';
        for (int i : ans)
            cout << i << ' ';
        cout << '\n';
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    solve();
    return 0;
}