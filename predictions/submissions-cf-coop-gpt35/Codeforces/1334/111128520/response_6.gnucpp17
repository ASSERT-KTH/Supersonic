#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Input {
    long long first;
    long long second;
};

long long power(long long x, long long n, const long long P) {
    if (x == 0)
        return 0;
    if (n == 0 || x == 1)
        return 1LL;
    x %= P;
    long long res = 1;
    while (n > 0) {
        if (n & 1)
            res = (res * x) % P;
        x = (x * x) % P;
        n /= 2;
    }
    return res;
}

long long power(long long x, long long n) {
    if (x == 0)
        return 0;
    else if (n == 0 || x == 1)
        return 1;
    long long res = 1;
    while (n > 0) {
        if (n & 1)
            res *= x;
        x *= x;
        n /= 2;
    }
    return res;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int tc;
    cin >> tc;
    while (tc--) {
        int n;
        cin >> n;
        vector<Input> v(n);
        for (int i = 0; i < n; i++) {
            cin >> v[i].first >> v[i].second;
        }
        if (n == 2) {
            cout << min(v[0].first + max(0LL, v[1].first - v[0].second),
                        v[1].first + max(0LL, v[0].first - v[1].second)) << "\n";
            continue;
        }
        long long cnt = 0, curr = v[0].first;
        for (int i = 0; i < n; i++) {
            cnt += curr;
            curr = max(0LL, v[(i + 1) % n].first - v[i].second);
        }
        long long ans = cnt;
        for (int i = 1; i < n; i++) {
            cnt += v[i].first - max(0LL, v[i].first - v[(i - 1 + n) % n].second);
            cnt += max(0LL, v[(i - 1 + n) % n].first - v[(i - 2 + n) % n].second);
            cnt -= v[(i - 1 + n) % n].first;
            ans = min(ans, cnt);
        }
        cout << ans << "\n";
    }

    return 0;
}