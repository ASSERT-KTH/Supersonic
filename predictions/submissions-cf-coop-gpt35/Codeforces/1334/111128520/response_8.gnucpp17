#include <iostream>
#include <vector>
#include <chrono>

using namespace std;

typedef long long ll;

void solve() {
    int n;
    cin >> n;

    vector<ll> a(n);
    vector<ll> b(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i] >> b[i];
    }

    if (n == 2) {
        cout << min(a[0] + max(0LL, a[1] - b[0]), a[1] + max(0LL, a[0] - b[1])) << "\n";
        return;
    }

    ll cnt = 0;
    ll curr = a[0];
    for (int i = 0; i < n; i++) {
        cnt += curr;
        curr = max(0LL, a[(i + 1) % n] - b[i]);
    }

    ll ans = cnt;
    for (int i = 1; i < n; i++) {
        cnt += a[i] - max(0LL, a[i] - b[(i - 1 + n) % n]);
        cnt += max(0LL, b[(i - 1 + n) % n] - a[(i - 2 + n) % n]);
        cnt -= b[(i - 1 + n) % n];
        ans = min(ans, cnt);
    }

    cout << ans << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int tc;
    cin >> tc;

    auto start_time = chrono::steady_clock::now();

    while (tc--) {
        solve();
    }

    auto end_time = chrono::steady_clock::now();
    auto duration = chrono::duration_cast<chrono::milliseconds>(end_time - start_time).count();
    cout << "Execution time: " << duration << " ms" << endl;

    return 0;
}