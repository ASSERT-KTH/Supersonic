#include <iostream>
#include <vector>
#include <array>
#include <queue>
#include <algorithm>
#include <cmath>
using namespace std;

constexpr double PI = 3.14159265;
constexpr int N = 200005;
using ll = long long int;

array<vector<int>, N> v, diam;
array<int, N> h, first, vis2, vis4, parent, dist;
vector<int> tour, path;

void height_initialise(int x, int& y) {
    h[x] = y;
    for (int node : v[x]) {
        if (h[node] == 0) {
            height_initialise(node, ++y);
        }
    }
}

void distanc(int x, int& y) {
    dist[x] = y;
    for (int node : v[x]) {
        if (dist[node] == 0) {
            distanc(node, ++y);
        }
    }
}

void euler(int x, int y) {
    vis2[x] = 1;
    tour.push_back(x);
    for (int node : v[x]) {
        if (vis2[node] == 0) {
            euler(node, x);
        }
    }
    if (y != 0) {
        tour.push_back(y);
    }
}

void euler_tour() {
    euler(1, 0);
    for (int i = 0; i < tour.size(); i++) {
        if (first[tour[i]] == 0) {
            first[tour[i]] = i;
        }
    }
}

void sparsemin() {
    int n = tour.size();
    for (int i = 0; i < n; i++) {
        stmin[i][0] = tour[i];
    }
    for (int j = 1; (1 << j) <= n; j++) {
        for (int i = 0; i <= n - (1 << j); i++) {
            int x = stmin[i][j - 1];
            int y = stmin[i + (1 << (j - 1))][j - 1];
            stmin[i][j] = (h[x] > h[y]) ? y : x;
        }
    }
}

int spminquery(int l, int r) {
    int length = r - l + 1;
    int k = log2(length);
    int x = stmin[l][k];
    int y = stmin[l + length - (1 << k)][k];
    return (h[x] < h[y]) ? x : y;
}

int bfs(int x, int flag) {
    int y;
    queue<int> q;
    q.push(x);
    while (!q.empty()) {
        x = q.front();
        q.pop();
        h[x] = -1; // Mark node as visited
        for (int node : v[x]) {
            if (h[node] != -1) {
                q.push(node);
                if (flag == 1) {
                    parent[node] = x;
                }
            }
        }
        y = x;
    }
    return y;
}

void diameter() {
    int x, y, z;
    x = bfs(1, 0);
    y = bfs(x, 1);
    int root1 = y;
    z = y;
    while (parent[z] != 0) {
        path.push_back(z);
        z = parent[z];
    }
    path.push_back(z);
    reverse(path.begin(), path.end());
    for (int i = 0; i < path.size(); i++) {
        vis4[path[i]] = 1;
        diam[i].push_back(path[i]);
    }
    int root = x;
    for (int i = 0; i < path.size(); i++) {
        queue<int> q;
        q.push(path[i]);
        while (!q.empty()) {
            x = q.front();
            q.pop();
            vis4[x] = 1;
            for (int node : v[x]) {
                if (vis4[node] == 0) {
                    q.push(node);
                    diam[i].push_back(node);
                }
            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    int n;
    cin >> n;

    array<pair<int, int>, N> an;
    for (int i = 0; i < n - 1; i++) {
        int x, y;
        cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }

    diameter();
    int height = 0;
    height_initialise(root, height);
    euler_tour();
    sparsemin();
    height = 0;
    distanc(root, height);

    ll ans = 0;
    for (int i = 0; i < path.size() / 2; i++) {
        for (int j = diam[i].size() - 1; j > 0; j--) {
            int x = root1;
            int y = diam[i][j];
            an.push_back(make_pair(x, y));
            int l = first[x];
            int r = first[y];
            int z = spminquery(min(l, r), max(l, r));
            z = dist[x] + dist[y] - 2 * dist[z];
            ans += z;
        }
    }

    int x = path.size() / 2;
    for (int i = x; i < path.size(); i++) {
        for (int j = diam[i].size() - 1; j > 0; j--) {
            x = root;
            int y = diam[i][j];
            an.push_back(make_pair(x, y));
            int l = first[x];
            int r = first[y];
            int z = spminquery(min(l, r), max(l, r));
            z = dist[x] + dist[y] - 2 * dist[z];
            ans += z;
        }
    }

    for (int i = path.size() - 1; i > 0; i--) {
        x = root;
        int y = diam[i][0];
        an.push_back(make_pair(x, y));
        int l = first[x];
        int r = first[y];
        int z = spminquery(min(l, r), max(l, r));
        z = dist[x] + dist[y] - 2 * dist[z];
        ans += z;
    }

    cout << ans << endl;
    for (int i = 0; i < an.size(); i++) {
        cout << an[i].first << " " << an[i].second << " " << an[i].second << "\n";
    }
    return 0;
}