#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(NULL);

    int tc = 1, i, j, k;
    while (tc--) {
        int a, b;
        std::scanf("%d %d", &a, &b);
        std::vector<std::pair<int, int>> v(a);
        std::vector<int> suf(a), pre(a), del[a+1];

        for (i = 0; i < a; i++) {
            std::scanf("%d %d", &v[i].first, &v[i].second);
        }

        std::sort(v.begin(), v.end(), [](const auto& lhs, const auto& rhs) {
            return (lhs.second - lhs.first) < (rhs.second - rhs.first);
        });

        for (i = 0; i < a; i++) {
            suf[i] = v[i].second;
            if (i > 0) {
                suf[i] += suf[i - 1];
            }
        }

        for (i = a - 1; i >= 0; i--) {
            pre[i] = v[i].first;
            if (i < a - 1) {
                pre[i] += pre[i + 1];
            }
        }

        for (i = 0; i < b; i++) {
            int x, y;
            std::scanf("%d %d", &x, &y);
            k = v[x - 1].second - v[x - 1].first;
            int m = v[y - 1].second - v[y - 1].first;
            if (m <= k) {
                del[x].push_back(v[x - 1].first + v[y - 1].second);
                del[y].push_back(v[x - 1].first + v[y - 1].second);
            } else {
                del[x].push_back(v[x - 1].second + v[y - 1].first);
                del[y].push_back(v[x - 1].second + v[y - 1].first);
            }

            k = static_cast<int>(del[x].size());
            if (k > 1) {
                del[x][k - 1] += del[x][k - 2];
            }

            k = static_cast<int>(del[y].size());
            if (k > 1) {
                del[y][k - 1] += del[y][k - 2];
            }
        }

        for (i = 0; i < a; i++) {
            int ans = 0;
            k = v[i].second - v[i].first;
            auto it = std::upper_bound(v.begin(), v.end(), k, [](int val, const auto& rhs) {
                return val < (rhs.second - rhs.first);
            });
            int idx = std::distance(v.begin(), it);

            if (idx - 1 >= 0) {
                ans = suf[idx - 1] + ((idx - 1) * v[i].first) - v[i].second;
            }

            if (idx < a) {
                ans += pre[idx] + (a - idx) * v[i].second;
            }

            if (!del[i + 1].empty()) {
                ans -= del[i + 1].back();
            }

            std::printf("%d\n", ans);
        }
    }

    return 0;
}