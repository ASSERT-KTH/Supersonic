#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int tc = 1, i, j, k;
  while (tc--) {
    int a, b;
    cin >> a >> b;
    vector<pair<int, int>>& v = *(new vector<pair<int, int>>(a));
    vector<int>& pre = *(new vector<int>(a));
    vector<int>& suf = *(new vector<int>(a));
    vector<vector<int>>& del = *(new vector<vector<int>>(a + 1));

    for (i = 0; i < a; i++) {
      cin >> v[i].first >> v[i].second;
    }

    for (i = 0; i < a; i++) {
      suf[i] = v[i].second;
      if (i > 0)
        suf[i] += suf[i - 1];
    }

    for (i = a - 1; i >= 0; i--) {
      pre[i] = v[i].first;
      if (i < a - 1)
        pre[i] += pre[i + 1];
    }

    for (i = 0; i < b; i++) {
      cin >> j >> k;
      int m = v[k - 1].second - v[k - 1].first;
      if (m <= (v[j - 1].second - v[j - 1].first)) {
        del[j].push_back(v[j - 1].first + v[k - 1].second);
        del[k].push_back(v[j - 1].first + v[k - 1].second);
      } else {
        del[j].push_back(v[j - 1].second + v[k - 1].first);
        del[k].push_back(v[j - 1].second + v[k - 1].first);
      }
      int size_j = del[j].size();
      if (size_j > 1)
        del[j][size_j - 1] += del[j][size_j - 2];
      int size_k = del[k].size();
      if (size_k > 1) {
        del[k][size_k - 1] += del[k][size_k - 2];
      }
    }

    for (i = 0; i < a; i++) {
      int ans = 0;
      int size_del = del[i + 1].size();
      int k = v[i].second - v[i].first;
      int pos = upper_bound(v.begin(), v.end(), make_pair(k, INT_MAX)) - v.begin();
      if (pos > 0)
        ans = suf[pos - 1] + ((pos - 1) * v[i].first) - v[i].second;
      if (pos < a) {
        ans += pre[pos] + (a - pos) * v[i].second;
      }
      if (size_del > 0)
        ans -= del[i + 1][size_del - 1];
      cout << ans << endl;
    }

    delete &v;
    delete &pre;
    delete &suf;
    delete &del;
  }
}