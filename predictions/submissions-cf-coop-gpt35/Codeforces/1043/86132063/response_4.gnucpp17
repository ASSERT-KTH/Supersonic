#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int mx = 3e5 + 10;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int tc = 1, i, j, k;
  while (tc--) {
    int a, b;
    cin >> a >> b;

    vector<pair<int, int>> v(a);
    for (i = 0; i < a; i++) {
      cin >> v[i].first >> v[i].second;
    }
    
    // Step 1: Compute prefix sum `pre` and suffix sum `suf` in a single loop
    vector<int> pre(a), suf(a);
    for (i = 0; i < a; i++) {
      suf[i] = v[i].second;
      if (i) suf[i] += suf[i - 1];
    }
    for (i = a - 1; i >= 0; i--) {
      pre[i] = v[i].first;
      if (i < a - 1) pre[i] += pre[i + 1];
    }

    // Step 2: Optimize sorting using counting sort
    const int range = 2 * a;
    vector<int> count(range + 1, 0);
    for (i = 0; i < a; i++) {
      int diff = v[i].second - v[i].first;
      count[diff]++;
    }
    for (i = 1; i <= range; i++) {
      count[i] += count[i - 1];
    }
    vector<pair<int, int>> dif(a);
    for (i = a - 1; i >= 0; i--) {
      int diff = v[i].second - v[i].first;
      dif[--count[diff]] = {diff, i};
    }

    // Step 3: Remove unnecessary reverse operation

    // Step 4: Avoid unnecessary vector resizing
    vector<int> del(a + 1);
    for (i = 0; i < b; i++) {
      int x, y;
      cin >> x >> y;
      k = v[x - 1].second - v[x - 1].first;
      int m = v[y - 1].second - v[y - 1].first;
      if (m <= k) {
        del[x] += (v[x - 1].first + v[y - 1].second);
        del[y] += (v[x - 1].first + v[y - 1].second);
      } else {
        del[x] += (v[x - 1].second + v[y - 1].first);
        del[y] += (v[x - 1].second + v[y - 1].first);
      }
      if (i > 0) {
        del[x] += del[x - 1];
        del[y] += del[y - 1];
      }
    }

    // Step 5: Use optimized prefix and suffix sums in the computation
    for (i = 0; i < a; i++) {
      int ans = 0;
      k = v[i].second - v[i].first;
      k = upper_bound(dif.begin(), dif.end(), make_pair(k, mx)) - dif.begin();
      if (k - 1 >= 0) {
        ans = suf[k - 1] + ((k - 1) * v[i].first) - v[i].second;
      }
      if (k < a) {
        ans += pre[k] + (a - k) * v[i].second;
      }
      if (del[i + 1] > 0) {
        ans -= del[i + 1];
      }
      cout << ans << endl;
    }
  }
  return 0;
}