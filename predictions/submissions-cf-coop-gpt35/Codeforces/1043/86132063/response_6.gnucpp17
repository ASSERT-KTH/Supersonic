#include <iostream>
#include <algorithm>
using namespace std;
const int mx = 3e5 + 10;
pair<int, int> dif[mx];
int pre[mx], suf[mx], del[mx][mx];

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int tc = 1, i, j, k;
  while (tc--) {
    int a, b;
    cin >> a >> b;
    pair<int, int> v[mx];
    int x, y;
    for (i = 0; i < a; i++) {
      cin >> x >> y;
      v[i] = {x, y};
      dif[i] = {y - x, i};
    }
    sort(dif, dif + a);
    suf[0] = v[dif[0].ss].ss;
    pre[a - 1] = v[dif[a - 1].ss].ff;
    for (i = 1; i < a; i++) {
      k = dif[i].ss;
      suf[i] = v[k].ss + suf[i - 1];
      pre[a - i - 1] = v[k].ff + pre[a - i];
    }
    for (i = 0; i < b; i++) {
      cin >> x >> y;
      k = v[x - 1].ss - v[x - 1].ff;
      int m = v[y - 1].ss - v[y - 1].ff;
      if (m <= k) {
        del[x][0] = v[x - 1].ff + v[y - 1].ss;
        del[y][0] = v[x - 1].ff + v[y - 1].ss;
      } else {
        del[x][0] = v[x - 1].ss + v[y - 1].ff;
        del[y][0] = v[x - 1].ss + v[y - 1].ff;
      }
      for (k = 1; k < a; k++) {
        del[x][k] = del[x][k - 1] + del[x][k];
        del[y][k] = del[y][k - 1] + del[y][k];
      }
    }
    for (i = 0; i < a; i++) {
      int ans = 0;
      k = v[i].ss - v[i].ff;
      int low = 0, high = a - 1;
      while (low <= high) {
        int mid = (low + high) / 2;
        if (dif[mid].ff <= k)
          low = mid + 1;
        else
          high = mid - 1;
      }
      k = low;
      if (k - 1 >= 0)
        ans = suf[k - 1] + ((k - 1) * v[i].ff) - v[i].ss;
      if (k < a) {
        ans += pre[k] + (a - k) * v[i].ss;
      }
      if (del[i + 1][a - 1])
        ans -= del[i + 1][a - 1];
      cout << ans << endl;
    }
  }
  return 0;
}