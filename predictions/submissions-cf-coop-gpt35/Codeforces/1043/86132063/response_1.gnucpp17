#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int tc = 1;
    while (tc--) {
        int a, b;
        cin >> a >> b;
        vector<pair<int, int>> v(a);
        vector<int> del[a+1];
        for (int i = 0; i < a; i++) {
            cin >> v[i].first >> v[i].second;
        }
        sort(v.begin(), v.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
            return (a.second - a.first) < (b.second - b.first);
        });

        vector<int> pre(a), suf(a);
        for (int i = 0; i < a; i++) {
            suf[i] = v[i].second;
            if (i > 0)
                suf[i] += suf[i - 1];
        }
        for (int i = a - 1; i >= 0; i--) {
            pre[i] = v[i].first;
            if (i < a - 1)
                pre[i] += pre[i + 1];
        }

        for (int i = 0; i < b; i++) {
            int x, y;
            cin >> x >> y;
            int k = v[x - 1].second - v[x - 1].first;
            int m = v[y - 1].second - v[y - 1].first;
            if (m <= k) {
                del[x].push_back(v[x - 1].first + v[y - 1].second);
                del[y].push_back(v[x - 1].first + v[y - 1].second);
            } else {
                del[x].push_back(v[x - 1].second + v[y - 1].first);
                del[y].push_back(v[x - 1].second + v[y - 1].first);
            }
            int k1 = del[x].size();
            if (k1 > 1)
                del[x][k1 - 1] += del[x][k1 - 2];
            int k2 = del[y].size();
            if (k2 > 1)
                del[y][k2 - 1] += del[y][k2 - 2];
        }

        for (int i = 0; i < a; i++) {
            int ans = 0;
            int k = v[i].second - v[i].first;
            int k1 = upper_bound(v.begin(), v.end(), make_pair(k, INT_MAX), [](const pair<int, int>& a, const pair<int, int>& b) {
                return (a.second - a.first) < (b.second - b.first);
            }) - v.begin();
            if (k1 - 1 >= 0)
                ans = suf[k1 - 1] + ((k1 - 1) * v[i].first) - v[i].second;
            if (k1 < a)
                ans += pre[k1] + (a - k1) * v[i].second;
            if (!del[i + 1].empty())
                ans -= del[i + 1].back();
            cout << ans << endl;
        }
    }

    return 0;
}