#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int tc = 1, i, j, k;
  while (tc--) {
    int a, b;
    scanf("%d %d", &a, &b);
    vector<pair<int, int>> dif(a);
    vector<int> pre(a), suf(a), del[a+1];
    vector<pair<int, int>> v(a);
    int x, y;
    for (i = 0; i < a; i++) {
      scanf("%d %d", &x, &y);
      v[i] = {x, y};
      dif[i] = {y - x, i};
    }
    sort(dif.begin(), dif.end());

    for (i = 0; i < a; i++) {
      k = dif[i].second;
      suf[i] = v[k].second;
      if (i)
        suf[i] += suf[i - 1];
    }

    for (i = a - 1; i >= 0; i--) {
      k = dif[i].second;
      pre[a - i - 1] = v[k].first;
      if (i)
        pre[a - i - 1] += pre[a - i - 2];
    }

    for (i = 0; i < b; i++) {
      scanf("%d %d", &x, &y);
      k = v[x - 1].second - v[x - 1].first;
      int m = v[y - 1].second - v[y - 1].first;
      if (m <= k) {
        del[x].push_back(v[x - 1].first + v[y - 1].second);
        del[y].push_back(v[x - 1].first + v[y - 1].second);
      } else
        del[x].push_back(v[x - 1].second + v[y - 1].first),
            del[y].push_back(v[x - 1].second + v[y - 1].first);

      k = del[x].size();
      if (k > 1)
        del[x][k - 1] += del[x][k - 2];
      k = del[y].size();
      if (k > 1) {
        del[y][k - 1] += del[y][k - 2];
      }
    }

    for (i = 0; i < a; i++) {
      int ans = 0;
      k = v[i].second - v[i].first;
      k = upper_bound(dif.begin(), dif.end(), make_pair(k, (int)1e18)) - dif.begin();
      ans = suf[k - 1] + (k - 1) * v[i].first - v[i].second + pre[a - k] + (a - k) * v[i].second;

      if (!del[i + 1].empty())
        ans -= del[i + 1].back();
      printf("%d\n", ans);
    }
  }

  return 0;
}