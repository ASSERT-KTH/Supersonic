#include <iostream>
#include <vector>
#include <unordered_set>
#include <algorithm>
#include <bitset>

int main() {
  int t;
  std::cin >> t;
  while (t--) {
    int n, res = 0;
    std::cin >> n;
    std::vector<int> even;
    even.reserve(n);
    std::unordered_set<int> st;
    st.reserve(n);
    for (int i = 0; i < n; i++) {
      int x;
      std::cin >> x;
      if (x % 2 == 0 && std::count(st.begin(), st.end(), x) == 0)
        even.push_back(x);
      st.insert(x);
    }
    std::sort(even.begin(), even.end(), std::greater<int>());
    std::vector<bool> used(even.size());
    for (int b : even) {
      if (!used[b]) {
        while (b % 2 == 0) {
          used[b] = true;
          b /= 2;
          ++res;
        }
      }
    }
    res = std::accumulate(even.begin(), even.end(), 0, [](int acc, int b) {
      return acc + std::bitset<sizeof(int) * CHAR_BIT>(b).count();
    });
    std::cout << res << std::endl;
  }
  return 0;
}