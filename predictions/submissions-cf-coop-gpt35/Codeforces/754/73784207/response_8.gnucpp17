#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include <climits>

using namespace std;

const int N = 6e5 + 5;
const int MAX_RANGE = 1e9 + 1;

pair<pair<int, int>, int> v[N];
int mp[MAX_RANGE] = {0};
int inv_map[N];
int segtree[4 * N] = {0};
int lazy[4 * N] = {0};

void spread(int node, int l, int r) {
  if (lazy[node] != 0) {
    segtree[node] += lazy[node];
    if (l != r) {
      lazy[2 * node + 1] += lazy[node];
      lazy[2 * node + 2] += lazy[node];
    }
  }
  lazy[node] = 0;
}

void update(int x, int y, int val, int node = 0, int l = 0, int r = N - 1) {
  spread(node, l, r);
  if (l > y || r < x || x > y)
    return;
  if (l >= x && r <= y) {
    lazy[node] += val;
    spread(node, l, r);
    return;
  }
  int mid = (l + r) >> 1;
  update(x, y, val, 2 * node + 1, l, mid);
  update(x, y, val, 2 * node + 2, mid + 1, r);
  segtree[node] = min(segtree[2 * node + 1], segtree[2 * node + 2]);
}

int query(int x, int y, int node = 0, int l = 0, int r = N - 1) {
  spread(node, l, r);
  if (l > y || r < x)
    return INT_MAX - 1;
  if (l >= x && r <= y) {
    return segtree[node];
  }
  int mid = (l + r) >> 1;
  return min(query(x, y, 2 * node + 1, l, mid),
             query(x, y, 2 * node + 2, mid + 1, r));
}

void solve() {
  sort(v, v + N);
  int c = 0;
  for (int i = 0; i < N; i++) {
    mp[v[i].first.first] = 0;
    mp[v[i].first.second] = 0;
  }
  for (auto& i : mp) {
    inv_map[c] = i.first;
    i.second = c++;
  }
  int mx = 0, idx = -1;
  for (int i = 0; i < N; i++) {
    update(mp[v[i].first.first], mp[v[i].first.second], 1);
    int scaled_val = mp[v[i].first.first];
    int tt = -1;
    int s = scaled_val, e = c;
    while (s <= e) {
      int mid = (s + e) >> 1;
      int val = query(scaled_val, mid);
      if (val >= k) {
        tt = mid;
        s = mid + 1;
      } else
        e = mid - 1;
    }
    if (tt == -1)
      continue;
    int temp = inv_map[tt] - v[i].first.first + 1;
    if (temp > mx) {
      mx = temp;
      idx = i;
    }
  }
  if (idx == -1) {
    cout << 0 << endl;
    for (int i = 1; i <= k; i++)
      cout << i << ' ';
    cout << endl;
    return;
  }
  int l = v[idx].first.first, r = l + mx - 1;
  vector<int> ans;
  for (int i = 0; i < N; i++) {
    if (k == 0)
      break;
    if (v[i].first.first <= l && r <= v[i].first.second) {
      ans.push_back(v[i].second);
      k--;
    }
  }
  sort(ans.begin(), ans.end());
  cout << mx << endl;
  for (int i : ans)
    cout << i << " ";
  cout << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  int n, k;
  cin >> n >> k;
  for (int i = 0; i < n; i++) {
    cin >> v[i].first.first >> v[i].first.second;
    v[i].second = i + 1;
  }
  
  solve();
  
  return 0;
}