#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma comment(linker, "/stack:200000000")
#include <algorithm>
#include <iostream>
#include <map>
#include <vector>
#define int long long
#define endl '\n'
using namespace std;

const int MAXN = 301;
vector<int> spf(MAXN);
vector<int> fac(MAXN);

void sieve() {
    spf[1] = 1;
    for (int i = 2; i < MAXN; i++) {
        if (spf[i] == 0) {
            spf[i] = i;
            for (int j = i * i; j < MAXN; j += i) {
                if (spf[j] == 0) {
                    spf[j] = i;
                }
            }
        }
    }
}

vector<pair<int, int>> getfactor(int a) {
    vector<pair<int, int>> factors;
    while (a > 1) {
        int prime = spf[a];
        int count = 0;
        while (a % prime == 0) {
            a /= prime;
            count++;
        }
        factors.push_back(make_pair(prime, count));
    }
    return factors;
}

int power(int x, int y, int p) {
    int res = 1;
    if (x == 0) {
        return 0;
    }
    while (y > 0) {
        if (y & 1) {
            res = (res * x);
        }
        y = y >> 1;
        x = (x * x);
    }
    return res;
}

int gcd(int a, int b) {
    if (a == 0) {
        return b;
    }
    return gcd(b % a, a);
}

int inverse(int a, int p) {
    return power(a, p - 2, p);
}

int ncr(int n, int r, int p) {
    if (r > n) {
        return 0;
    }
    if (r == 0) {
        return 1;
    }
    int result = 1;
    for (int i = 1; i <= r; i++) {
        result = (result * (n - i + 1) % p) * inverse(i, p) % p;
    }
    return result;
}

void solve() {
    sieve();
    int n, k;
    cin >> n >> k;
    string s;
    cin >> s;
    int m = 2 * n;
    vector<int> dp(m + 1, 1e18);
    vector<int> lazy(m + 1, 1e18);
    dp[1] = 0;
    lazy[1] = 0;
    for (int i = 2; i <= n; i++) {
        dp[i] = dp[i - 1] + i;
        if (i <= k + 1 && s[i - 1] == '1') {
            lazy[i + 1] = i;
        } else if (s[i - 1] == '1' && i >= k + 2) {
            int gg = dp[i - k - 1];
            lazy[i - k] = min(lazy[i - k], gg + i);
            lazy[i + k + 1] = i;
        }
    }
    cout << dp[n] << endl;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int test = 1;
    while (test--) {
        solve();
    }
    return 0;
}