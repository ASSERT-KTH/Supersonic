#include <iostream>
#include <vector>
#pragma GCC optimize("Ofast")

using namespace std;

typedef long long ll;

const ll maxn = ll(2e5) + 11;
const ll inf = ll(1e15) + 12;

ll n;
ll a[maxn], p[maxn];

struct node {
  ll l, mid, r, val, add;
  node *left, *right;
  
  node(ll l, ll r) : l(l), r(r) {
    add = 0;
    mid = (l + r) / 2;
    val = 0;
    left = right = nullptr;
  }
};

ll f(ll x, ll y) { return min(x, y); }

void build(node *root) {
  vector<node*> stack;
  stack.push_back(root);
  
  while (!stack.empty()) {
    node* current = stack.back();
    stack.pop_back();
    
    if (current->r - current->l == 1) {
      current->val = current->l == n - 1 ? inf : a[current->l];
    } else {
      current->left = new node(current->l, current->mid);
      current->right = new node(current->mid, current->r);
      stack.push_back(current->right);
      stack.push_back(current->left);
    }
    
    if (current->l != 0) {
      current->val = f(current->left->val, current->right->val);
    }
  }
}

void push(node *root) {
  if (root->left != nullptr) {
    root->left->add += root->add;
    root->right->add += root->add;
  }
  root->val += root->add;
  root->add = 0;
}

void add_val(node *root, ll ql, ll qr, ll val) {
  push(root);
  
  while (root->r > ql && root->l < qr) {
    if (root->r <= qr && root->l >= ql) {
      root->add += val;
      push(root);
      return;
    }
    
    if (qr <= root->mid) {
      root = root->left;
    } else if (ql >= root->mid) {
      root = root->right;
    } else {
      add_val(root->left, ql, min(root->mid, qr), val);
      add_val(root->right, max(root->mid, ql), qr, val);
      root->val = f(root->left->val, root->right->val);
      return;
    }
  }
}

ll get_min(node *root, ll ql, ll qr) {
  push(root);

  while (root->r > ql && root->l < qr) {
    if (root->r <= ql || root->l >= qr) {
      return inf;
    }
    
    if (qr <= root->mid) {
      root = root->left;
    } else if (ql >= root->mid) {
      root = root->right;
    } else {
      return f(get_min(root->left, ql, min(root->mid, qr)),
               get_min(root->right, max(root->mid, ql), qr));
    }
  }
  
  return root->val;
}

void solve() {
  cin >> n;
  
  for (ll i = 0; i < n; i++) {
    cin >> p[i];
    p[i]--;
  }
  
  for (ll i = 0; i < n; i++) {
    cin >> a[i];
    a[i] = i == 0 ? a[i] : a[i - 1] + a[i];
  }
  
  node *root = new node(0, n);
  build(root);
  
  ll ans = min(a[0], a[n - 1]);
  ll mus = 0;
  
  for (ll i = 0; i < n; i++) {
    add_val(root, p[i], n, -2 * a[p[i]]);
    mus += a[p[i]];
    ll cur = get_min(root, 0, n) + mus;
    ans = min(ans, cur);
  }
  
  cout << ans << endl;
}

int main() {
  ios::sync_with_stdio(false);
  solve();
  return 0;
}