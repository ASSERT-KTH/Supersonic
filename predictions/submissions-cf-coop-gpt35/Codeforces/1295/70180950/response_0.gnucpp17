#include <algorithm>
#include <cmath>
#include <iostream>
#include <set>
#include <string>
#include <vector>
#pragma GCC optimize("Ofast")
using namespace std;
typedef long long ll;
typedef long double ld;
#define pll pair<ll, ll>
#define pb push_back
const ll maxn = ll(2e5) + 11;
const ll inf = ll(1e15) + 12;
const ll mod = ll(1e9) + 7;
ll n;
ll a[maxn], ps[maxn], p[maxn], seg_tree[4 * maxn];

ll f(ll x, ll y) {
  return min(x, y);
}

void build() {
  for (ll i = n - 1; i >= 0; i--) {
    seg_tree[i] = f(seg_tree[2 * i], seg_tree[2 * i + 1]);
  }
}

void add_val(ll ql, ll qr, ll val) {
  ql += n;
  qr += n;
  
  while (ql < qr) {
    if (ql % 2 == 1) {
      seg_tree[ql] += val;
      ql++;
    }
    if (qr % 2 == 1) {
      qr--;
      seg_tree[qr] += val;
    }
    ql /= 2;
    qr /= 2;
  }
}

ll get_min(ll ql, ll qr) {
  ql += n;
  qr += n;
  ll res = inf;
  
  while (ql < qr) {
    if (ql % 2 == 1) {
      res = f(res, seg_tree[ql]);
      ql++;
    }
    if (qr % 2 == 1) {
      qr--;
      res = f(res, seg_tree[qr]);
    }
    ql /= 2;
    qr /= 2;
  }
  
  return res;
}

void solve() {
  cin >> n;

  for (ll i = 0; i < n; i++) {
    ll cur;
    cin >> cur;
    p[i] = cur;
    ps[cur - 1] = i;
  }

  for (ll i = 0; i < n; i++) {
    ll cur;
    cin >> cur;
    a[i] = cur;
    seg_tree[i + n] = cur;
  }

  build();

  ll ans = min(a[0], a[n - 1]);
  ll mus = 0;

  for (ll i = 0; i < n; i++) {
    add_val(ps[i], n, -2 * a[ps[i]]);
    mus += a[ps[i]];
    ll cur = get_min(0, n) + mus;
    ans = min(ans, cur);
  }

  cout << ans << endl;
}

int main() {
  ios::sync_with_stdio();
  solve();
  return 0;
}