#include <algorithm>
#include <cmath>
#include <iostream>
#include <set>
#include <string>
#include <vector>
#pragma GCC optimize("Ofast")
using namespace std;
typedef long long ll;
typedef long double ld;
#define pll pair<ll, ll>
#define pb push_back
const ll inf = ll(1e15) + 12;
const ll mod = ll(1e9) + 7;
ll n;
ll a[maxn], ps[maxn], p[maxn], pref[maxn];
struct node {
  ll l, mid, r, val, add;
  node *left, *right;
};
vector<node> tree(maxn);
ll f(ll x, ll y) { return min(x, y); }
void build() {
  for (ll i = n - 1; i >= 0; i--) {
    if (i == n - 1) {
      tree[i].val = inf;
    } else {
      tree[i].val = f(tree[2 * i + 1].val, tree[2 * i + 2].val);
    }
    tree[i].add = 0;
  }
}
void push(ll root) {
  if (tree[root].left != nullptr) {
    tree[2 * root + 1].add += tree[root].add;
    tree[2 * root + 2].add += tree[root].add;
  }
  tree[root].val += tree[root].add;
  tree[root].add = 0;
}
void add_val(ll root, ll ql, ll qr, ll val) {
  push(root);
  if (tree[root].r <= ql || tree[root].l >= qr) {
    return;
  }
  if (ql == tree[root].l && tree[root].r == qr) {
    tree[root].add += val;
    push(root);
    return;
  }
  add_val(2 * root + 1, ql, min(tree[root].mid, qr), val);
  add_val(2 * root + 2, max(tree[root].mid, ql), qr, val);
  tree[root].val = f(tree[2 * root + 1].val, tree[2 * root + 2].val);
}
ll get_min(ll root, ll ql, ll qr) {
  push(root);
  if (tree[root].r <= ql || tree[root].l >= qr) {
    return inf;
  }
  if (ql == tree[root].l && tree[root].r == qr) {
    return tree[root].val;
  }
  return f(get_min(2 * root + 1, ql, min(tree[root].mid, qr)),
           get_min(2 * root + 2, max(tree[root].mid, ql), qr));
}
void solve() {
  cin >> n;
  for (ll i = 0; i < n; i++) {
    ll cur;
    cin >> cur;
    p[i] = cur;
    ps[cur - 1] = i;
  }
  for (ll i = 0; i < n; i++) {
    ll cur;
    cin >> cur;
    a[i] = cur;
    if (i == 0) {
      pref[i] = cur;
    } else
      pref[i] = pref[i - 1] + cur;
  }
  build();
  ll ans = min(a[0], a[n - 1]);
  ll mus = 0;
  for (ll i = 0; i < n; i++) {
    add_val(ps[i], n, -2 * a[ps[i]]);
    mus += a[ps[i]];
    ll cur = get_min(0, n) + mus;
    ans = min(ans, cur);
  }
  cout << ans << endl;
}
int main() {
  ios::sync_with_stdio();
  solve();
  return 0;
}