#include <algorithm>
#include <cmath>
#include <iostream>
#include <set>
#include <string>
#include <vector>
#pragma GCC optimize("Ofast")
using namespace std;
typedef long long ll;
typedef long double ld;
#define pll pair<ll, ll>
#define pb push_back
const ll maxn = ll(2e5) + 11;
const ll inf = ll(1e15) + 12;
const ll mod = ll(1e9) + 7;
ll n;
ll a[maxn], p[maxn], pref[maxn];
struct node {
  ll l, mid, r, val, add;
  node *left, *right;
  node(ll l, ll r) : l(l), r(r) {
    add = 0;
    mid = (l + r) / 2;
    val = 0;
    left = right = nullptr;
  }
};
ll f(ll x, ll y) { return min(x, y); }
void build(node *root) {
  if (root->r - root->l == 1) {
    root->val = pref[root->l];
    if (root->l == n - 1) {
      root->val = inf;
    }
  } else {
    root->left = new node(root->l, root->mid);
    root->right = new node(root->mid, root->r);
    build(root->left);
    build(root->right);
    root->val = f(root->left->val, root->right->val);
  }
}

// Unroll the recursion in add_val
void add_val(node *root, ll ql, ll qr, ll val) {
  vector<node*> stack;
  stack.push_back(root);
  while (!stack.empty()) {
    node* current = stack.back();
    stack.pop_back();
    current->val += current->add;
    if (current->left != nullptr) {
      current->left->add += current->add;
      current->right->add += current->add;
    }
    current->add = 0;

    if (current->r <= ql || current->l >= qr) {
      continue;
    }
    if (ql == current->l && current->r == qr) {
      current->add += val;
      continue;
    }
    stack.push_back(current->right);
    stack.push_back(current->left);
  }
}

// Unroll the recursion in get_min
ll get_min(node *root, ll ql, ll qr) {
  vector<node*> stack;
  stack.push_back(root);
  ll result = inf;
  while (!stack.empty()) {
    node* current = stack.back();
    stack.pop_back();
    current->val += current->add;
    if (current->left != nullptr) {
      current->left->add += current->add;
      current->right->add += current->add;
    }
    current->add = 0;

    if (current->r <= ql || current->l >= qr) {
      continue;
    }
    if (ql == current->l && current->r == qr) {
      result = f(result, current->val);
      continue;
    }
    stack.push_back(current->right);
    stack.push_back(current->left);
  }
  return result;
}

void solve() {
  cin >> n;
  for (ll i = 0; i < n; i++) {
    ll cur;
    cin >> cur;
    p[cur - 1] = i;
  }
  for (ll i = 0; i < n; i++) {
    ll cur;
    cin >> cur;
    a[i] = cur;
    if (i == 0) {
      pref[i] = cur;
    } else
      pref[i] = pref[i - 1] + cur;
  }
  node *root = new node(0, n);
  build(root);
  ll ans = min(a[0], a[n - 1]);
  ll mus = 0;
  for (ll i = 0; i < n; i++) {
    add_val(root, p[i], n, -2 * a[p[i]]);
    mus += a[p[i]];
    ll cur = get_min(root, 0, n) + mus;
    ans = min(ans, cur);
  }
  cout << ans << endl;
}
int main() {
  ios::sync_with_stdio();
  solve();
  return 0;
}