#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma comment(linker, "/stack:200000000")
#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

#define fast ios_base::sync_with_stdio(false); cin.tie(NULL);
#define lli int
#define fr(i, a, n) for (lli i = a; i < (n); i++)
#define frx(i, a, n) for (lli i = a; i > (n); i--)
#define endl '\n'
#define op(x) cout << x << endl

struct SparseTable {
  lli N, K;
  vector<lli> table;
  vector<lli> logtwo;
  lli f(lli a, lli b) { return max(a, b); }
  SparseTable(vector<lli>& a) {
    N = a.size();
    K = log2(N) + 2;
    table = vector<lli>(N * K);
    logtwo = vector<lli>(N + 5);
    logtwo[1] = 0;
    fr(i, 2, N + 1) { logtwo[i] = logtwo[i / 2] + 1; }
    frx(i, N - 1, -1) {
      table[i * K] = a[i];
      for (lli j = 1; i + (1LL << j) - 1 < N; j++) {
        table[i * K + j] = f(table[i * K + j - 1], table[(i + (1LL << (j - 1))) * K + j - 1]);
      }
    }
  }
  lli query(lli l, lli r) {
    lli temp = logtwo[r - l + 1];
    lli ans = f(table[l * K + temp], table[(r - (1LL << temp) + 1) * K + temp]);
    return ans;
  }
};

void solve() {
  lli R = 1e6;
  vector<lli> a(R + 5, 0);
  lli n;
  cin >> n;
  fr(i, 0, n) {
    lli x;
    cin >> x;
    a[x] = x;
  }
  SparseTable tab(a);
  lli maxi = 0;
  for (lli i = 2; i * i <= R + 1; i++) {
    if (!a[i])
      continue;
    for (lli j = i; j <= R + 1; j += i) {
      lli temp = tab.query(j, min(j + i - 1, R)) - j;
      maxi = max(maxi, temp);
    }
  }
  op(maxi);
}

int main() {
  fast;
  lli test = 1;
  while (test--) {
    solve();
  }
  return 0;
}