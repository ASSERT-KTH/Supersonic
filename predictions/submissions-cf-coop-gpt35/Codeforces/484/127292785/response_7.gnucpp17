#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct SparseTable {
  vector<int> table;
  int f(int a, int b) { return max(a, b); }
  SparseTable(const vector<int>& a) {
    int N = a.size();
    table.resize(N);
    for (int i = 0; i < N; i++) {
      table[i] = a[i];
      if (i > 0) {
        table[i] = f(table[i], table[i - 1]);
      }
    }
  }
  int query(int l, int r) {
    if (l == 0) {
      return table[r];
    }
    return f(table[r], -table[l - 1]);
  }
};

void solve() {
  int R = 1e6;
  vector<int> a;
  a.reserve(R + 5);
  int n;
  cin >> n;
  for (int i = 0; i < n; i++) {
    int x;
    cin >> x;
    a[x] = x;
  }
  SparseTable tab(a);
  int maxi = 0;
  for (int i = 2; i <= R; i++) {
    if (!a[i])
      continue;
    for (int j = i; j <= R; j += i) {
      int temp = tab.query(j, min(j + i - 1, R)) - j;
      maxi = max(maxi, temp);
    }
  }
  cout << maxi << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int test = 1;
  while (test--) {
    solve();
  }
  return 0;
}