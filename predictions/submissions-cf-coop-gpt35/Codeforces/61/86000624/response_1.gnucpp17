#include <bits/stdc++.h>
using namespace std;
#define int long long
const int maxn = 100005;

// Define a struct for linked list nodes
struct Node {
  int vertex;
  int weight;
  Node* next;
};

signed main() {
  int n;
  cin >> n;

  int sum = 0;

  // Create an array of linked lists for adjacency list representation
  Node* adj[maxn] = {};

  for (int i = 0; i < n - 1; i++) {
    int x, y, w;
    cin >> x >> y >> w;

    // Add edges to the adjacency list
    Node* newNode = new Node;
    newNode->vertex = y - 1;
    newNode->weight = w;
    newNode->next = adj[x - 1];
    adj[x - 1] = newNode;

    newNode = new Node;
    newNode->vertex = x - 1;
    newNode->weight = w;
    newNode->next = adj[y - 1];
    adj[y - 1] = newNode;
  }

  // Perform BFS to find the maximum distance from the starting node
  queue<pair<int, int>> q;
  bool seen[n + 1] = {false};
  q.push(make_pair(0, 0));
  seen[0] = true;
  int big = -1;

  while (!q.empty()) {
    pair<int, int> s = q.front();
    q.pop();
    big = max(big, s.second);
    
    // Traverse the linked list for the current node
    Node* current = adj[s.first];
    while (current != NULL) {
      if (!seen[current->vertex]) {
        seen[current->vertex] = true;
        q.push(pair<int, int>(current->vertex, s.second + current->weight));
      }
      current = current->next;
    }
  }

  cout << (2 * sum) - big << endl;
}