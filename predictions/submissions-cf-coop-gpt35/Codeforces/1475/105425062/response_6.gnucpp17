#include <algorithm>
#include <climits>
#include <cmath>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <tuple>
#include <vector>
#define LSOne(S) ((S) & -(S))
const long long P = 1e9 + 7;
const double EPS = 1e-11;
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    vector<long long> v(n);
    vector<long long> cnt(2e5, 0);
    for (int i = 0; i < n; i++) {
      cin >> v[i];
      cnt[v[i] - 1]++;
    }
    sort(v.begin(), v.end());
    vector<long long> dp(2e5, 0);
    vector<bool> isPrime(2e5, true);
    vector<int> spf(2e5, 0);
    for (int i = 2; i <= sqrt(2e5); i++) {
      if (isPrime[i]) {
        spf[i] = i;
        for (int j = i * i; j < 2e5; j += i) {
          if (isPrime[j]) {
            spf[j] = i;
            isPrime[j] = false;
          }
        }
      }
    }
    for (int i = 2; i < 2e5; i++) {
      if (spf[i] == 0) {
        spf[i] = i;
      }
    }
    long long best = 0;
    for (int i = 0; i < n; i++) {
      int num = v[i];
      int maxOccurrences = 0;
      while (num > 1) {
        int factor = spf[num];
        maxOccurrences = max(maxOccurrences, dp[factor]);
        while (num % factor == 0) {
          num /= factor;
        }
      }
      maxOccurrences = max(maxOccurrences, dp[1]);
      dp[v[i]] = maxOccurrences + cnt[v[i] - 1];
      best = max(best, dp[v[i]]);
    }
    cout << n - best << '\n';
  }
}