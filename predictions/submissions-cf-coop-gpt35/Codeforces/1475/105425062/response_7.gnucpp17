#include <algorithm>
#include <climits>
#include <cmath>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <tuple>
#include <vector>
#define LSOne(S) ((S) & -(S))
const long long P = 1e9 + 7;
const double EPS = 1e-11;
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    vector<long long> v(n);
    int cnt[200001] = {0};
    for (int i = 0; i < n; i++) {
      cin >> v[i];
      cnt[v[i]]++;
    }
    int sqrtArr[200001];
    for (int i = 1; i <= 200000; i++) {
      sqrtArr[i] = sqrt(i);
    }
    int dp[200001] = {0};
    long long best = 0;
    stack<int> st;
    for (int i = 1; i <= 200000; i++) {
      if (cnt[i] == 0)
        continue;
      st.push(i);
    }
    while (!st.empty()) {
      int i = st.top();
      st.pop();
      for (int j = 2; j <= sqrtArr[i]; j++) {
        if (i % j == 0) {
          dp[i] = max(dp[i], max(dp[j], dp[i / j]));
        }
      }
      dp[i] = max(dp[i], dp[1]);
      dp[i] += cnt[i];
      best = max(best, (long long)dp[i]);
    }
    cout << n - best << '\n';
  }
}