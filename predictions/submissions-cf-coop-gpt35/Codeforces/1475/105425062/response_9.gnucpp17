#include <algorithm>
#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  scanf("%d", &t);
  while (t--) {
    int n;
    scanf("%d", &n);
    vector<long long> v(n);
    vector<long long> cnt;
    cnt.reserve(2e5 + 1);
    for (int i = 0; i < n; i++) {
      scanf("%lld", &v[i]);
      cnt[v[i]]++;
    }
    
    vector<long long> dp;
    dp.reserve(2e5 + 1);
    long long best = 0;
    vector<double> sqrt_vals;
    sqrt_vals.reserve(2e5 + 1);
    for (int i = 0; i <= 2e5; i++) {
      sqrt_vals.push_back(sqrt(i));
    }
    for (int i = 1; i <= 2e5; i++) {
      if (cnt[i] == 0)
        continue;
      long long max_dp = 0;
      for (int j = 0; j < n; j++) {
        if (v[j] == i)
          continue;
        int product = v[j] * i;
        if (product <= 2e5) {
          max_dp = max(max_dp, dp[product]);
        }
      }
      dp[i] = max(max_dp, dp[1]);
      dp[i] += cnt[i];
      best = max(best, dp[i]);
    }
    printf("%d\n", n - best);
  }
  return 0;
}