#include <algorithm>
#include <cmath>
#include <iostream>
#include <vector>
#define LSOne(S) ((S) & -(S))
const long long P = 1e9 + 7;
const double EPS = 1e-11;
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;

  while (t--) {
    int n;
    cin >> n;

    vector<long long> v(n);
    for (int i = 0; i < n; i++) {
      cin >> v[i];
    }

    vector<long long> cnt(*max_element(v.begin(), v.end()) + 1, 0);
    for (int i = 0; i < n; i++) {
      cnt[v[i]]++;
    }

    sort(v.begin(), v.end());

    vector<long long> dp(*max_element(v.begin(), v.end()) + 1, 0);
    long long best = 0;

    int max_val = *max_element(v.begin(), v.end());
    int sqrt_max_val = sqrt(max_val);

    for (int i = 1; i <= max_val; i++) {
      if (cnt[i] == 0)
        continue;

      for (int j = 2; j * j <= i; j++) {
        if (i % j == 0) {
          dp[i] = max(dp[i], max(dp[j], dp[i / j]));
        }
      }

      dp[i] = max(dp[i], dp[1]);
      dp[i] += cnt[i];
      best = max(best, dp[i]);
    }

    cout << n - best << '\n';
  }
}