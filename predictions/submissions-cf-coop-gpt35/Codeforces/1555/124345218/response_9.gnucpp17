#include <iostream>
#include <vector>
#include <algorithm>

#define f(i, x, n) for (int i = x; i < n; i++)

using namespace std;

const int mod = 1e9 + 7;
int sgtree[8000000];
int n, m;

int dfs(int st, int en, int node, int rngst, int rngen, int value) {
    sgtree[node] += value;

    while (st < en) {
        int mid = (st + en) / 2;
        if (rngst <= mid) {
            en = mid;
            node = 2 * node;
        } else {
            st = mid + 1;
            node = 2 * node + 1;
        }
        sgtree[node] += value;
    }

    return 0;
}

void del(int i) {
    dfs(1, m - 1, 1, ve[i][1], ve[i][2], -1);
}

void add(int i) {
    dfs(1, m - 1, 1, ve[i][1], ve[i][2], 1);
}

int check() {
    return sgtree[1];
}

void solve() {
    cin >> n >> m;
    
    if (m == 2) {
        cout << "0\n";
        return;
    }
    
    vector<array<int, 3>> ve(n);
    
    f(i, 0, n) {
        int l, r, w;
        cin >> l >> r >> w;
        
        if (l == 1 && r == m) {
            cout << "0\n";
            return;
        }
        
        ve[i] = {w, l, r - 1};
    }

    sort(ve.begin(), ve.end());

    int i = 0, j = -1, ans = 1000000;

    while (j < ve.size() - 1) {
        if (check() > 0) {
            del(i);
            ans = min(ans, ve[j][0] - ve[i][0]);
            i++;
        } else {
            j++;
            add(j);
        }
    }

    while (check() > 0) {
        del(i);
        ans = min(ans, ve[j][0] - ve[i][0]);
        i++;
    }

    cout << ans << '\n';
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int t = 1;
    f(tc, 1, t + 1) { solve(); }

    return 0;
}