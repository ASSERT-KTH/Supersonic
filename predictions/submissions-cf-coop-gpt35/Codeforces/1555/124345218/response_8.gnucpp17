#include <bits/stdc++.h>
#define ff first
#define ss second
#define pb push_back
#define ld long double
#define f(i, x, n) for (int i = x; i < n; i++)
using namespace std;
const int mod = 1e9 + 7;

struct Interval {
  int l, r, w;
};

const int N = 8000000;
int sgtree[N];
int slow[N];
int n, m;
Interval ve[N];

int dfs(int st, int en, int node, int rngst, int rngen, int value) {
  sgtree[node] += slow[node];
  slow[2 * node] += slow[node];
  slow[2 * node + 1] += slow[node];
  slow[node] = 0;
  
  if (st >= rngst && en <= rngen) {
    slow[node] += value;
    sgtree[node] += slow[node];
    slow[2 * node] += slow[node];
    slow[2 * node + 1] += slow[node];
    slow[node] = 0;
  } else if (en < rngst || st > rngen) {
    slow[node] += 0;
  } else {
    int mid = (st + en) / 2;
    dfs(st, mid, 2 * node, rngst, rngen, value);
    dfs(mid + 1, en, 2 * node + 1, rngst, rngen, value);
    sgtree[node] = min(sgtree[2 * node] + slow[2 * node], sgtree[2 * node + 1] + slow[2 * node + 1]);
  }
  
  return 0;
}

void solve() {
  cin >> n >> m;
  
  if (m == 2) {
    cout << "0\n";
    return;
  }
  
  f(i, 0, n) {
    cin >> ve[i].l >> ve[i].r >> ve[i].w;
    
    if (ve[i].l == 1 && ve[i].r == m) {
      cout << "0\n";
      return;
    }
    
    ve[i].r--;
  }
  
  sort(ve, ve + n, [](const Interval& a, const Interval& b) {
    return a.w < b.w;
  });
  
  int i = 0, j = -1, ans = 1000000;
  
  while (j < n - 1) {
    if (sgtree[1] + slow[1] > 0) {
      dfs(1, m - 1, 1, ve[i].l, ve[i].r, -1);
      ans = min(ans, ve[j].w - ve[i].w);
      i++;
    } else {
      j++;
      dfs(1, m - 1, 1, ve[j].l, ve[j].r, 1);
    }
  }
  
  while (sgtree[1] + slow[1] > 0) {
    dfs(1, m - 1, 1, ve[i].l, ve[i].r, -1);
    ans = min(ans, ve[j].w - ve[i].w);
    i++;
  }
  
  cout << ans << '\n';
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int t = 1;
  
  f(tc, 1, t + 1) {
    solve();
  }
  
  return 0;
}