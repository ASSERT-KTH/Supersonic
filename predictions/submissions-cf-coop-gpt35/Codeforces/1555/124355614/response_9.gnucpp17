#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

typedef long long ll;

const int N = 2e6 + 5;

struct Node {
    int t;
    int push;
};

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int n, m;
    cin >> n >> m;

    vector<pair<int, pair<int, int>>> s;
    for (int i = 0; i < n; i++) {
        int l, r, w;
        cin >> l >> r >> w;
        s.push_back({w, {l, r - 1}});
    }

    // Use counting sort or radix sort here to sort the input vector s based on the weight

    int ptr = -1, ans = INT_MAX;
    vector<Node> tree(4 * N);

    for (int i = 0; i < n; i++) {
        if (i > 0) {
            int l = s[i - 1].second.first;
            int r = s[i - 1].second.second;
            int x = -1;
            while (l <= r) {
                tree[l].t += x;
                tree[l].push += x;
                tree[r].t += x;
                tree[r].push += x;
                l++;
                r--;
            }
        }
        
        while (ptr + 1 < n && tree[1].t == 0) {
            ++ptr;
            int l = s[ptr].second.first;
            int r = s[ptr].second.second;
            int x = 1;
            while (l <= r) {
                tree[l].t += x;
                tree[l].push += x;
                tree[r].t += x;
                tree[r].push += x;
                l++;
                r--;
            }
        }

        if (tree[1].t) {
            int diff = s[ptr].first - s[i].first;
            ans = min(ans, diff);
        }
    }

    cout << ans;

    return 0;
}