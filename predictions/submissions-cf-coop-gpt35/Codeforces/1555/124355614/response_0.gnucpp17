#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

typedef long long ll;

void add(std::vector<int>& t, int l, int r, int x) {
    t[l] += x;
    if (r + 1 < t.size()) {
        t[r + 1] -= x;
    }
}

int main() {
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);

    int n, m;
    std::cin >> n >> m;

    std::vector<std::pair<int, std::pair<int, int>>> s;
    for (int i = 0; i < n; i++) {
        int l, r, w;
        std::cin >> l >> r >> w;
        s.push_back({w, {l, r - 1}});
    }

    std::sort(s.begin(), s.end());

    std::vector<int> t(m + 1, 0);
    size_t ptr = -1;
    int ans = INT_MAX;

    for (int i = 0; i < n; i++) {
        if (i > 0) {
            add(t, s[i - 1].second.first, s[i - 1].second.second, -1);
        }

        while (ptr + 1 < n && t[1] == 0) {
            ++ptr;
            add(t, s[ptr].second.first, s[ptr].second.second, +1);
        }

        if (t[1] != 0) {
            ans = std::min(ans, s[ptr].first - s[i].first);
        }
    }

    std::cout << ans;

    return 0;
}