#include <algorithm>
#include <cstring>
#include <iostream>
#include <map>
#include <queue>
#include <stdio.h>
#include <string>
#include <vector>
using namespace std;
#define ll long long
typedef pair<int, int> pii;
const int maxn = 1e6 + 5;
int n, m, ans;
char mz[maxn][maxn];
bool dfs() {
  stack<pii> st;
  st.push({0, 0});
  while (!st.empty()) {
    pii curr = st.top();
    st.pop();
    int x = curr.first;
    int y = curr.second;
    if (x == n - 1 && y == m - 1)
      return true;
    mz[x][y] = '*'; // Mark cell as visited
    if (x + 1 < n && mz[x + 1][y] != '#' && mz[x + 1][y] != '*')
      st.push({x + 1, y}); // Push down cell
    if (y + 1 < m && mz[x][y + 1] != '#' && mz[x][y + 1] != '*')
      st.push({x, y + 1}); // Push right cell
  }
  return false;
}
int main() {
  cin.sync_with_stdio(false);
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    cin >> mz[i];
  }
  if (!dfs()) {
    cout << 0;
  } else {
    if (mz[n - 1][m - 1] == '*')
      cout << 2;
    else
      cout << 1;
  }
  return 0;
}