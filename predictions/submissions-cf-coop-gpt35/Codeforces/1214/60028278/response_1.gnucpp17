#include <algorithm>
#include <iostream>
#include <set>
#include <vector>

using namespace std;

const int maxn = 1e6 + 5;

int n, m;

char mz[maxn][maxn];
set<pair<int, int>> visited;

bool dfs(int x, int y, bool startVisited) {
  if (x >= n || y >= m || mz[x][y] == '#' || visited.count({x, y}) > 0)
    return false;

  if (x == n - 1 && y == m - 1)
    return true;

  if (startVisited || (x != 0 || y != 0))
    visited.insert({x, y});

  return dfs(x + 1, y, startVisited) || dfs(x, y + 1, startVisited);
}

int main() {
  cin.sync_with_stdio(false);
  cin >> n >> m;

  for (int i = 0; i < n; i++) {
    cin >> mz[i];
  }

  if (!dfs(0, 0, false))
    cout << 0;
  else {
    visited.clear();
    if (!dfs(0, 0, true))
      cout << 1;
    else
      cout << 2;
  }

  return 0;
}