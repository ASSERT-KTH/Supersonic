#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

#define ll long long
#define MOD 1000000007
#define M 1001
#define fastIO                                                                 \
  ios_base::sync_with_stdio(false);                                            \
  cin.tie(NULL);

void calculatePowers(vector<ll>& pows) {
  pows[0] = 1;
  pows[1] = 1;
  for (ll i = 2; i <= 1000; i++) {
    pows[i] = (pows[i - 1] * 2) % MOD;
  }
}

void calculateCombinations(vector<vector<ll>>& c) {
  for (int i = 0; i < M; i++) {
    c[i][0] = 1;
    for (int j = 1; j <= i; j++) {
      c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % MOD;
    }
  }
}

ll power(ll x, ll y) {
  ll res = 1;
  x = x % MOD;
  if (x == 0) {
    return 0;
  }
  while (y > 0) {
    if (y % 2 == 1) {
      res = (res * x) % MOD;
    }
    y /= 2;
    x = (x * x) % MOD;
  }
  return res;
}

void quicksort(vector<ll>& arr, int low, int high) {
  if (low < high) {
    int pivot = partition(arr, low, high);
    quicksort(arr, low, pivot - 1);
    quicksort(arr, pivot + 1, high);
  }
}

int partition(vector<ll>& arr, int low, int high) {
  ll pivot = arr[high];
  int i = low - 1;
  for (int j = low; j <= high - 1; j++) {
    if (arr[j] < pivot) {
      i++;
      swap(arr[i], arr[j]);
    }
  }
  swap(arr[i + 1], arr[high]);
  return i + 1;
}

int main() {
  fastIO;
  vector<ll> pows(M);
  vector<vector<ll>> c(M, vector<ll>(M));
  calculatePowers(pows);
  calculateCombinations(c);

  ll m, n;
  cin >> n >> m;
  vector<ll> a(n);
  for (ll i = 0; i < n; i++) {
    cin >> a[i];
  }
  quicksort(a, 0, m - 1);

  ll sum = 1;
  ll d = n - m;
  for (int i = 1; i <= m; i++) {
    sum = (sum * c[d][a[i] - a[i - 1] - 1]) % MOD;
    d -= a[i] - a[i - 1] - 1;
  }
  for (int i = 2; i <= m; i++) {
    sum = (sum * pows[a[i] - a[i - 1] - 1]) % MOD;
  }
  cout << sum << "\n";
  return 0;
}