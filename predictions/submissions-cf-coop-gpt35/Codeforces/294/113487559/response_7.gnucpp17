#include <iostream>
#include <algorithm>
using namespace std;

const long long MOD = 1000000007;
const int MAX_N = 1001;

long long pows[MAX_N];
long long c[MAX_N];

void calculate_pows() {
    pows[0] = 1;
    pows[1] = 1;
    for (int i = 2; i <= MAX_N; i++) {
        pows[i] = (pows[i - 1] * 2) % MOD;
    }
}

void calculate_combinations(int n) {
    c[0] = 1;
    for (int i = 1; i <= n; i++) {
        c[i] = 1;
        for (int j = i - 1; j > 0; j--) {
            c[j] = (c[j] + c[j - 1]) % MOD;
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    calculate_pows();
    calculate_combinations(MAX_N);
    
    int n, m;
    cin >> n >> m;
    
    long long a[MAX_N];
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
    }
    
    partial_sort(a + 1, a + m + 1, a + n + 1);
    
    long long sum = 1;
    long long d = n - m;
    for (int i = 1; i <= m; i++) {
        sum = (sum * c[d]) % MOD;
        d -= a[i] - a[i - 1] - 1;
    }
    
    for (int i = 2; i <= m; i++) {
        sum = (sum * pows[a[i] - a[i - 1] - 1]) % MOD;
    }
    
    cout << sum << "\n";
    
    return 0;
}