#include <iostream>
#include <algorithm>

constexpr long long MOD = 1000000007;

long long power(long long x, long long y) {
  long long res = 1;
  x = x % MOD;
  while (y > 0) {
    if (y % 2 == 1) {
      res = (res * x) % MOD;
    }
    y /= 2;
    x = (x * x) % MOD;
  }
  return res;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  constexpr int M = 1001;
  long long pows[M];
  long long c[M];

  pows[0] = 1;
  pows[1] = 1;
  for (int i = 2; i < M; i++) {
    pows[i] = (pows[i - 1] * 2) % MOD;
  }

  c[0] = 1;
  for (int i = 1; i < M; i++) {
    c[i] = 1;
    for (int j = i - 1; j > 0; j--) {
      c[j] = (c[j] + c[j - 1]) % MOD;
    }
  }

  int n, m;
  std::cin >> n >> m;

  long long a[M];
  for (int i = 1; i <= n; i++) {
    std::cin >> a[i];
  }

  long long sum = 1;
  int d = n - m;
  for (int i = 1; i <= m; i++) {
    sum = (sum * c[d]) % MOD;
    d -= a[i] - a[i - 1] - 1;
  }

  for (int i = 2; i <= m; i++) {
    sum = (sum * pows[a[i] - a[i - 1] - 1]) % MOD;
  }

  std::cout << sum << "\n";
  std::cout.flush();

  return 0;
}