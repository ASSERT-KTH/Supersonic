Analysis:
1. There are unnecessary header files included. The `math.h` and `string.h` headers are not used in the code and can be removed.
2. The `using namespace std;` statement can be removed and replaced with explicit usage of `std::` namespace to avoid polluting the global namespace.
3. There is no need to declare `temp` outside the loop. It can be declared and initialized inside the loop for better readability and to avoid any unintended reuse of its value.
4. The `hasil` variable can be renamed to something more descriptive, like `count`.
5. The nested loops can be optimized. Currently, the program reads three values for each iteration of the outer loop, even if the condition `temp >= 2` is not satisfied. This can be avoided by breaking out of the inner loop as soon as `temp` becomes greater than or equal to 2.
6. There is no need to use the `math.h` library for this program.
7. The `using namespace std;` statement can be removed and replaced with explicit usage of `std::` namespace to avoid polluting the global namespace.

Optimization Strategy:
1. Remove unnecessary header files.
2. Replace `using namespace std;` with explicit usage of `std::`.
3. Move the declaration and initialization of `temp` inside the loop.
4. Rename `hasil` to `count`.
5. Optimize the nested loops by breaking out of the inner loop when `temp >= 2`.
6. Remove the unused `math.h` library.

Step-by-Step Explanation:
1. Remove the unnecessary header files `math.h` and `string.h`.
2. Replace the statement `using namespace std;` with explicit usage of `std::`.
3. Move the declaration and initialization of `temp` inside the loop to improve readability and avoid unintended reuse of its value.
4. Rename `hasil` to `count` for better code clarity.
5. Optimize the nested loops by breaking out of the inner loop as soon as `temp` becomes greater than or equal to 2. This avoids unnecessary iterations if `temp` is already 2 or more.
6. Remove the unused `math.h` library.

Optimized Code Block:
```cpp
#include <iostream>

int main() {
  int n;
  std::cin >> n;
  int count = 0;
  for (int i = 0; i < n; i++) {
    int temp = 0;
    for (int j = 0; j < 3; j++) {
      int y;
      std::cin >> y;
      if (y == 1) {
        temp++;
        if (temp >= 2) {
          break;
        }
      }
    }
    if (temp >= 2) {
      count++;
    }
  }
  std::cout << count;
  return 0;
}
```