The given code reads an integer `n` from the user and then loops `n` times. In each iteration, it reads three integers `y` and counts the number of times `y` is equal to 1. If the count is at least 2, it increments the variable `hasil`. Finally, it prints the value of `hasil`.

To optimize this code, we can make a few improvements:

1. Remove unnecessary headers: The code includes `<math.h>` and `<string.h>`, which are not used. We can remove them to reduce unnecessary overhead.

2. Avoid using `using namespace std;`: The `using namespace std;` statement brings all names from the `std` namespace into the global namespace. While convenient, it can lead to potential naming conflicts. It's better to explicitly specify the namespace for each name used, such as `std::cout` and `std::cin`.

3. Avoid repeated calculations: The code currently reads three integers in each iteration and checks if they are equal to 1. Instead of doing this three times, we can read the three integers at once and then count the number of 1s using bitwise operations.

4. Optimize the counting loop: The inner loop currently checks if each `y` is equal to 1 and increments `temp`. We can optimize this by using a bitwise AND operation to directly count the number of 1s in the three integers.

5. Reset `temp` inside the loop: The variable `temp` is not reset to 0 at the start of each iteration. This may lead to incorrect results if the number of 1s in the previous iteration affects the current iteration. We should reset `temp` to 0 at the beginning of the loop.

Here's the optimized code with explanations for each optimization step:

```cpp
#include <iostream>

int main() {
  int n, hasil = 0;
  std::cin >> n;

  for (int i = 0; i < n; i++) {
    int y1, y2, y3;
    std::cin >> y1 >> y2 >> y3;

    int temp = (y1 & 1) + (y2 & 1) + (y3 & 1);
    if (temp >= 2) {
      hasil++;
    }
  }

  std::cout << hasil;

  return 0;
}
```

In this optimized code:

1. We removed the unnecessary headers `<math.h>` and `<string.h>`.
2. We avoided using `using namespace std;`.
3. We read the three integers `y1`, `y2`, and `y3` at once, instead of reading them one by one.
4. We used bitwise operations `& 1` to count the number of 1s in `y1`, `y2`, and `y3`.
5. We reset `temp` to 0 at the beginning of each iteration to ensure correct counting.

These optimizations make the code more efficient by reducing unnecessary operations and improving memory usage.