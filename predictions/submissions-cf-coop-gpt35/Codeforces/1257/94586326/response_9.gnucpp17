#include <iostream>
#include <vector>
#include <map>
#include <limits>

typedef long long int ll;

void solve() {
  ll n;
  std::cin >> n;

  std::map<ll, std::vector<ll>> m;
  m.reserve(n); // Pre-allocate memory for the map

  for (int i = 0; i < n; i++) {
    ll val;
    std::cin >> val;
    m[val].emplace_back(i + 1); // Construct elements in-place
  }

  ll minres = std::numeric_limits<ll>::max();

  for (const auto& x : m) {
    const std::vector<ll>& v = x.second;

    if (v.size() > 1) {
      for (const auto& pos : v) {
        if (pos - v.back() > 0) { // Use const iterators and early exit
          minres = pos - v.back() + 1;
          break;
        }
      }
    }

    if (minres != std::numeric_limits<ll>::max()) { // Early exit
      break;
    }
  }

  if (minres == std::numeric_limits<ll>::max()) {
    std::cout << -1 << std::endl;
  } else {
    std::cout << minres << std::endl;
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  int t;
  std::cin >> t;

  while (t--) {
    solve();
  }

  return 0;
}