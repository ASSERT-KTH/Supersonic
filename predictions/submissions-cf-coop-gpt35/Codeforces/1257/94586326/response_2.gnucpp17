#include <iostream>
#include <vector>
#include <algorithm>
#include <limits>

struct Element {
    long long int value;
    std::vector<int> indices;
};

void solve() {
    long long int n;
    std::cin >> n;

    std::vector<Element> elements;
    elements.reserve(n);

    for (int i = 0; i < n; i++) {
        long long int val;
        std::cin >> val;

        auto it = std::find_if(elements.begin(), elements.end(), [&](const Element& e) {
            return e.value == val;
        });

        if (it == elements.end()) {
            elements.emplace_back(Element{val, {i + 1}});
        } else {
            it->indices.push_back(i + 1);
        }
    }

    long long int minres = std::numeric_limits<long long int>::max();

    for (const auto& element : elements) {
        const std::vector<int>& indices = element.indices;
        if (indices.size() > 1) {
            for (int i = 1; i < indices.size(); i++) {
                minres = std::min(minres, static_cast<long long int>(indices[i] - indices[i - 1] + 1));
            }
        }
    }

    if (minres == std::numeric_limits<long long int>::max()) {
        std::cout << -1 << '\n';
    } else {
        std::cout << minres << '\n';
    }
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    int t;
    std::cin >> t;

    while (t--) {
        solve();
    }

    return 0;
}