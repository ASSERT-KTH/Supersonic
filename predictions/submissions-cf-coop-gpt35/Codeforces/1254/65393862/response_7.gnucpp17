First, let's analyze the code to identify potential areas for optimization:

1. The `RMQ` class uses a 2D vector `range_low` to store the indexes of the minimum/maximum values in each range. This implementation requires a lot of memory and can be optimized.

2. The `LCA` class uses a lot of vectors to store information about the tree structure and queries. Some of these vectors can be combined or simplified to reduce memory usage.

3. The `main` function uses a vector `pending_queries` to store the pending queries. This vector can be optimized to reduce memory usage.

4. The `main` function performs updates and calculations for each query, which can be optimized further.

Based on this analysis, here is the optimization strategy:

1. Optimize the `RMQ` class:
   - Replace the 2D vector `range_low` with a 1D vector to store the indexes of the minimum/maximum values.
   - Use a `deque` instead of a vector to store the indexes. This allows efficient removal of the front element.

2. Optimize the `LCA` class:
   - Combine the `parent`, `depth`, `subtree_size`, `euler`, `first_occurrence`, `tour_start`, `tour_end`, and `tour_list` vectors into a single `struct` or `class`.
   - Use a `vector<int>` instead of a `vector<vector<int>>` for the `adj` vector to reduce memory usage.

3. Optimize the `main` function:
   - Use a `vector<query>` instead of a `vector<mod_int>` to store the pending queries.
   - Optimize the updates and calculations for each query to minimize memory usage and improve performance.
