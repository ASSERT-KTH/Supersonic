#include <iostream>
#include <vector>
using namespace std;
const int MOD = 998244353;

struct mod_int {
  int val;

  mod_int(long long v = 0) {
    if (v < 0)
      v = v % MOD + MOD;
    if (v >= MOD)
      v %= MOD;
    val = v;
  }

  static int mod_inv(int a, int m = MOD) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1)
      return 0;

    // Apply extended Euclidean algorithm
    while (a > 1) {
      q = a / m;
      t = m;
      m = a % m, a = t;
      t = x0;
      x0 = x1 - q * x0;
      x1 = t;
    }

    if (x1 < 0)
      x1 += m0;

    return x1;
  }

  mod_int &operator+=(const mod_int &other) {
    val += other.val;
    if (val >= MOD)
      val -= MOD;
    return *this;
  }

  mod_int &operator-=(const mod_int &other) {
    val -= other.val;
    if (val < 0)
      val += MOD;
    return *this;
  }

  static unsigned fast_mod(uint64_t x, unsigned m = MOD) {
#if !defined(_WIN32) || defined(_WIN64)
    return x % m;
#endif
    unsigned x_high = x >> 32, x_low = (unsigned)x;
    unsigned quot, rem;