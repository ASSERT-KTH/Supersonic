To optimize the given code, we can focus on the following areas:

1. Remove unnecessary includes: The code includes the entire `<bits/stdc++.h>` header, which is not necessary. We can remove this include and include only the required headers.

2. Avoid using macros: The code uses macros for loop iterations and other purposes. Macros can be error-prone and make the code difficult to read and debug. We can replace these macros with standard C++ constructs.

3. Optimize data structures: The `node` struct and the `tree` type are used to implement a binary tree. However, the implementation is not efficient in terms of memory usage. We can optimize this by using a more memory-efficient data structure such as an array-based representation of the binary tree.

4. Reduce redundant computations: There are several redundant computations in the code, such as recomputing the sum of a subtree multiple times. We can optimize these computations by storing intermediate results and reusing them when needed.

5. Use compiler optimizations: We can enable compiler optimizations to let the compiler perform various optimizations, such as loop unrolling, function inlining, and constant propagation.

Now let's go through each optimization step in detail:

1. Remove unnecessary includes:
   - Remove the `#include <bits/stdc++.h>` line.
   - Add the necessary includes for the specific functionality used in the code, such as `<iostream>` and `<vector>`.

2. Avoid using macros:
   - Replace the `fore`, `forn`, `sz`, `all`, `mp`, `pb`, `x`, and `y` macros with their corresponding C++ constructs.
   - Replace the `INF`, `INF64`, `EPS`, `N`, and `M` macros with appropriate constants or variables.

3. Optimize data structures:
   - Replace the `node` struct with a more memory-efficient array-based representation of the binary tree.
   - Replace the `tree` type with a pointer to the root of the binary tree.

4. Reduce redundant computations:
   - Store the sum of each subtree in the `node` struct and update it only when necessary.
   - Avoid unnecessary recursive calls by using iterative approaches where possible.

5. Use compiler optimizations:
   - Enable compiler optimizations by adding appropriate compiler flags or pragma directives.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <iomanip>

using namespace std;

const int INF = int(1e9);
const long long INF64 = long long(1e18);
const long double EPS = 1e-9;
const int N = 250 * 1000 + 555;
const int M = 30 * 1000 * 1000 + 555;

int n;
pair<int, pair<int, int>> qs[N];
int nodes[M][3]; // nodes[i] = {sum, sval, l, r}
int szn = 0;

int getsum(int t, int len) {
    if (nodes[t][1] != -1)
        return len * nodes[t][1];
    return nodes[t][0];
}

int push(int t) {
    int pushed = nodes[t][1];
    nodes[t][1] = -1;
    return pushed;
}

void upd(int t, int l1, int l2) {
    nodes[t][0] = getsum(nodes[t][2], l1) + getsum(nodes[t][3], l2);
}

int setVal(int t, int l, int r, int lf, int rg, int val, int pushed = -1) {
    int nt = szn++;
    nodes[nt][0] = nodes[t][0];
    nodes[nt][1] = pushed != -1 ? pushed : nodes[t][1];
    nodes[nt][2] = nodes[t][2];
    nodes[nt][3] = nodes[t][3];
    if (pushed != -1)
        nodes[nt][1] = pushed;
    if (l == lf && r == rg) {
        nodes[nt][1] = val;
        return nt;
    }
    int mid = (l + r) >> 1;
    pushed = push(nt);
    if (lf < mid)
        nodes[nt][2] = setVal(nodes[nt][2], l, mid, lf, min(mid, rg), val, pushed);
    else if (pushed != -1)
        nodes[nt][2] = nodes[nt][2] ? nodes[nodes[nt][2]][3] : 0;
    if (rg > mid)
        nodes[nt][3] = setVal(nodes[nt][3], mid, r, max(lf, mid), rg, val, pushed);
    else if (pushed != -1)
        nodes[nt][3] = nodes[nt][3] ? nodes[nodes[nt][3]][2] : 0;
    upd(nt, mid - l, r - mid);
    return nt;
}

int getPos(int t, int l, int r, int lf, int rg) {
    if (l == lf && r == rg) {
        if (l + 1 == r)
            return getsum(t, 1) ? l : -1;
        if (getsum(t, r - l) == 0)
            return -1;
    }
    if (nodes[t][1] != -1)
        return nodes[t][1] > 0 ? rg - 1 : -1;
    int mid = (l + r) >> 1;
    int ans = -1;
    if (rg > mid && ans == -1)
        ans = max(ans, getPos(nodes[t][3], mid, r, max(lf, mid), rg));
    if (lf < mid && ans == -1)
        ans = max(ans, getPos(nodes[t][2], l, mid, lf, min(mid, rg)));
    return ans;
}

int maxLen = -1;

bool sub(pair<int, int> &p, int pw) {
    if (pw >= p.first)
        return true;
    pw = p.first - pw - 1;
    int pos = getPos(p.second, 0, maxLen, 0, pw + 1);
    if (pos < 0)
        return true;
    int nt = setVal(p.second, 0, maxLen, pos, pos + 1, 0);
    if (pos < pw)
        nt = setVal(nt, 0, maxLen, pos + 1, pw + 1, 1);
    p = {p.first, nt};
    return getsum(nt, maxLen) == 0;
}

int dead[N];
pair<int, pair<int, int>> ps[N];

void solve() {
    int cnt = 0;
    maxLen = n + 3;
    for (int i = 0; i < n; i++) {
        int tp = qs[i].first;
        int a = qs[i].second.first, b = qs[i].second.second;
        a--, b--;
        if (tp == 1) {
            int id = cnt++;
            dead[id] = -2;
            ps[id] = {0, {1, setVal(0, 0, maxLen, 0, 1, 1)}};
        } else if (tp == 2) {
            if (dead[a] < 0)
                ps[a].first++;
        } else if (tp == 3) {
            if (dead[a] < 0) {
                ps[a].second.second = setVal(ps[a].second.second, 0, maxLen, ps[a].second.first, ps[a].second.first + 1, 0);
                ps[a].second.first++;
            }
        } else if (tp == 4) {
            int id = cnt++;
            dead[id] = -2;
            ps[id] = ps[a];
            if (dead[a] >= 0)
                dead[id] = i;
        } else {
            if (dead[a] < 0 && dead[b] < 0) {
                if (sub(ps[a].second, ps[b].first))
                    dead[a] = i;
                if (sub(ps[b].second, ps[a].first))
                    dead[b] = i;
            }
        }
    }
    cout << cnt << endl;
    for (int i = 0; i < cnt; i++)
        cout << dead[i] + 1 << " ";
    cout << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    cout << fixed << setprecision(15);
    if (cin >> n) {
        for (int i = 0; i < n; i++) {
            cin >> qs[i].first;
            if (qs[i].first > 1)
                cin >> qs[i].second.first;
            if (qs[i].first == 5)
                cin >> qs[i].second.second;
        }
        solve();
    }
    return