#include <iostream>
#include <vector>
#include <memory>
#include <cassert>

const int INF = int(1e9);
const long long INF64 = long long(1e18);
const double EPS = 1e-9;
const int N = 250 * 1000 + 555;

int n;
std::vector<std::pair<int, std::pair<int, int>>> qs(N);

class Node {
public:
    int sum, sval;
    std::unique_ptr<Node> l, r;

    Node() : sum(0), sval(-1), l(nullptr), r(nullptr) {}
    Node(int sum, int sval, std::unique_ptr<Node> l, std::unique_ptr<Node> r)
        : sum(sum), sval(sval), l(std::move(l)), r(std::move(r)) {}
};

typedef std::unique_ptr<Node> Tree;

int szn = 0;
std::vector<Node> nodes(M);

Tree getNode(int sum, int sval, Tree l, Tree r) {
    assert(szn < M);
    nodes[szn] = Node(sum, sval, std::move(l), std::move(r));
    return std::unique_ptr<Node>(&nodes[szn++]);
}

int getsum(const Tree& t, int len) {
    if (!t)
        return 0;
    if (t->sval != -1)
        return len * t->sval;
    return t->sum;
}

int push(Tree& t) {
    int pushed = t->sval;
    t->sval = -1;
    return pushed;
}

void upd(Tree& t, int l1, int l2) {
    t->sum = getsum(t->l, l1) + getsum(t->r, l2);
}

Tree setVal(Tree& t, int l, int r, int lf, int rg, int val, int pushed = -1) {
    Tree nt = t ? getNode(t->sum, t->sval, std::move(t->l), std::move(t->r))
                : getNode(0, -1, nullptr, nullptr);
    if (pushed != -1)
        nt->sval = pushed;
    if (l == lf && r == rg) {
        nt->sval = val;
        return nt;
    }
    int mid = (l + r) >> 1;
    pushed = push(nt);
    if (lf < mid)
        nt->l = setVal(nt->l, l, mid, lf, std::min(mid, rg), val, pushed);
    else if (pushed != -1)
        nt->l = nt->l ? getNode(nt->r->sum, pushed, std::move(nt->r->l), std::move(nt->r->r))
                      : getNode(0, pushed, nullptr, nullptr);
    if (rg > mid)
        nt->r = setVal(nt->r, mid, r, std::max(lf, mid), rg, val, pushed);
    else if (pushed != -1)
        nt->r = nt->r ? getNode(nt->l->sum, pushed, std::move(nt->l->l), std::move(nt->l->r))
                      : getNode(0, pushed, nullptr, nullptr);
    upd(nt, mid - l, r - mid);
    return nt;
}

int getPos(const Tree& t, int l, int r, int lf, int rg) {
    if (!t)
        return -1;
    if (l == lf && r == rg) {
        if (l + 1 == r)
            return getsum(t, 1) ? l : -1;
        if (getsum(t, r - l) == 0)
            return -1;
    }
    if (t->sval != -1)
        return t->sval > 0 ? rg - 1 : -1;
    int mid = (l + r) >> 1;
    int ans = -1;
    if (rg > mid && ans == -1)
        ans = std::max(ans, getPos(t->r, mid, r, std::max(lf, mid), rg));
    if (lf < mid && ans == -1)
        ans = std::max(ans, getPos(t->l, l, mid, lf, std::min(mid, rg)));
    return ans;
}

int maxLen = -1;

bool sub(std::pair<int, Tree>& p, int pw) {
    if (pw >= p.first)
        return true;
    pw = p.first - pw - 1;
    int pos = getPos(p.second, 0, maxLen, 0, pw + 1);
    if (pos < 0)
        return true;
    Tree nt = setVal(p.second, 0, maxLen, pos, pos + 1, 0);
    if (pos < pw)
        nt = setVal(nt, 0, maxLen, pos + 1, pw + 1, 1);
    p = {p.first, std::move(nt)};
    return getsum(p.second, maxLen) == 0;
}

std::vector<int> dead(N);
std::vector<std::pair<int, std::pair<int, Tree>>> ps(N);

void solve() {
    int cnt = 0;
    maxLen = n + 3;