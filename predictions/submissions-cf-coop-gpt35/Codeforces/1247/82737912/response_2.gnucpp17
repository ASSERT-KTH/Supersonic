#include <iostream>

const int MAX_SIZE = 2001;
const int MOD = 1000000007;

int n, m;
char arr[MAX_SIZE][MAX_SIZE];
int cum[MAX_SIZE][MAX_SIZE][2];
int dp[MAX_SIZE][MAX_SIZE][2][2];

void solve() {
    std::cin >> n >> m;
    for (int i = 0; i < n; i++) {
        std::cin >> arr[i];
    }

    for (int i = n - 1; i >= 0; i--) {
        for (int j = 0; j < m; j++) {
            cum[i][j][0] = cum[i + 1][j][0];
            if (arr[i][j] == 'R') {
                cum[i][j][0]++;
            }
        }
    }

    for (int j = m - 1; j >= 0; j--) {
        for (int i = 0; i < n; i++) {
            cum[i][j][1] = cum[i][j + 1][1];
            if (arr[i][j] == 'R') {
                cum[i][j][1]++;
            }
        }
    }

    for (int i = n - 1; i >= 0; i--) {
        for (int j = m - 1; j >= 0; j--) {
            if (i == n - 1 || j == m - 1) {
                if (i == n - 1 && j == m - 1) {
                    dp[i][j][0][0] = dp[i][j][0][1] = (arr[i][j] == 'R') ? 0 : 1;
                } else if (arr[i][j] != 'R') {
                    dp[i][j][0][0] = dp[i][j][0][1] = (dp[i + 1][j][0][0] + dp[i][j + 1][0][1]) % MOD;
                }
            } else {
                dp[i][j][0][0] = (dp[i + 1][j + 1][1][0] - dp[n - cum[i][j][0] + (arr[i][j] == 'R' ? 1 : 0)][j + 1][1][0] + dp[i + 1][j + 1][1][1] - dp[i + 1][m - cum[i][j][1]][1][1] + (2 * MOD)) % MOD;
                dp[i][j][0][1] = (dp[i + 1][j + 1][1][0] - dp[n - cum[i][j][0]][j + 1][1][0] + dp[i + 1][j + 1][1][1] - dp[i + 1][m - cum[i][j][1] + (arr[i][j] == 'R' ? 1 : 0)][1][1] + (2 * MOD)) % MOD;
            }
            dp[i][j][1][0] = (dp[i + 1][j][1][0] + dp[i][j][0][0]) % MOD;
            dp[i][j][1][1] = (dp[i][j + 1][1][1] + dp[i][j][0][1]) % MOD;
        }
    }

    std::cout << dp[0][0][0][1] << std::endl;
}

int main(void) {
    solve();
    return 0;
}