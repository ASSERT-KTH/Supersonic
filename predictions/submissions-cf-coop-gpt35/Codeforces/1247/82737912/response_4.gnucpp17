#include <iostream>
using namespace std;

const int MOD = 1000000007;

void solve() {
  int n, m;
  cin >> n >> m;

  char arr[2001][2001];
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      cin >> arr[i][j];
    }
  }

  int cum[2001][2001][2] = {0};
  for (int i = n - 1; i >= 0; i--) {
    for (int j = 0; j < m; j++) {
      cum[i][j][0] = cum[i + 1][j][0];
      if (arr[i][j] == 'R')
        cum[i][j][0]++;
    }
  }

  for (int j = m - 1; j >= 0; j--) {
    for (int i = 0; i < n; i++) {
      cum[i][j][1] = cum[i][j + 1][1];
      if (arr[i][j] == 'R')
        cum[i][j][1]++;
    }
  }

  int dp[2001][2001][2][2] = {0};
  for (int i = n - 1; i >= 0; i--) {
    for (int j = m - 1; j >= 0; j--) {
      if (i == n - 1 || j == m - 1) {
        if (i == n - 1 && j == m - 1)
          dp[i][j][0][0] = dp[i][j][0][1] = arr[i][j] == 'R' ? 0 : 1;
        else if (arr[i][j] != 'R')
          dp[i][j][0][0] = dp[i][j][0][1] =
              (dp[i + 1][j][0][0] + dp[i][j + 1][0][1]) % MOD;
      } else {
        dp[i][j][0][0] =
            (dp[i + 1][j + 1][1][0] -
             dp[n - cum[i][j][0] + (arr[i][j] == 'R' ? 1 : 0)][j + 1][1][0] +
             dp[i + 1][j + 1][1][1] - dp[i + 1][m - cum[i][j][1]][1][1] +
             (2 * MOD)) %
            MOD;
        dp[i][j][0][1] =
            (dp[i + 1][j + 1][1][0] - dp[n - cum[i][j][0]][j + 1][1][0] +
             dp[i + 1][j + 1][1][1] -
             dp[i + 1][m - cum[i][j][1] + (arr[i][j] == 'R' ? 1 : 0)][1][1] +
             (2 * MOD)) %
            MOD;
      }
      dp[i][j][1][0] = (dp[i + 1][j][1][0] + dp[i][j][0][0]) % MOD;
      dp[i][j][1][1] = (dp[i][j + 1][1][1] + dp[i][j][0][1]) % MOD;
    }
  }

  cout << dp[0][0][0][1] << endl;
}

int main(void) {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  solve();

  return 0;
}