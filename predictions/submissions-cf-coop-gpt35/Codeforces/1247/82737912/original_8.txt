To optimize the given C++ code, we can follow the following steps:

1. Remove unnecessary header files: The code includes the `<bits/stdc++.h>` header file, which is not a standard header file. It is recommended to include only the necessary standard header files, such as `<iostream>`, in order to minimize the compilation time and reduce memory usage.

2. Remove unnecessary macros: The code includes several macros that are not used in the program. These macros can be removed to improve code readability and reduce preprocessing time.

3. Avoid using the `using namespace std` directive: The code uses the `using namespace std` directive, which brings all the names from the `std` namespace into the global namespace. This can lead to name clashes and make the code less maintainable. It is better to use the `std::` prefix before standard library functions and types.

4. Avoid unnecessary vector resizing: The code initializes the `arr`, `cum`, and `dp` vectors with a fixed size of `2e3 + 1`. However, the actual size of these vectors is determined by the input values of `n` and `m`. Instead of using fixed sizes, we can initialize these vectors dynamically based on the input values of `n` and `m`.

5. Optimize the nested loops: The code contains several nested loops that can be optimized. For example, in the loop `frn(i, n - 1, -1)`, we can start the loop from `n - 1` and decrement `i` until it reaches `-1`. This can be optimized to a simple `for` loop with a decrementing iterator.

6. Optimize the power function: The code uses a custom `power` function to calculate the power of a number. However, this function can be replaced with the standard `std::pow` function, which is likely to be more optimized.

7. Use appropriate data types: The code uses `ll` (long long int) as the data type for several variables. However, this data type may not be necessary for all variables. We should use the smallest data type that can represent the expected range of values for each variable to save memory.

8. Avoid redundant computation: The code contains some redundant computations. For example, in the loop `fr(j, 0, m)`, the variable `arr[i][j]` is checked twice for the value 'R'. We can store the result of this check in a temporary variable to avoid redundant computations.

After applying these optimizations, the optimized code will look like this:

```cpp
#include <iostream>
#include <vector>
#include <cmath>

const int MOD = 1000000007;

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(NULL);

    int n, m;
    std::cin >> n >> m;

    std::vector<std::string> arr(n);
    for (int i = 0; i < n; i++) {
        std::cin >> arr[i];
    }

    std::vector<std::vector<std::vector<long long>>> cum(n + 1, std::vector<std::vector<long long>>(m + 1, std::vector<long long>(2, 0)));
    std::vector<std::vector<std::vector<std::vector<long long>>>> dp(n + 1, std::vector<std::vector<std::vector<long long>>>(m + 1, std::vector<std::vector<long long>>(2, std::vector<long long>(2, 0))));

    for (int i = n - 1; i >= 0; i--) {
        for (int j = 0; j < m; j++) {
            cum[i][j][0] = cum[i + 1][j][0];
            cum[i][j][1] = cum[i][j + 1][1];
            if (arr[i][j] == 'R') {
                cum[i][j][0]++;
                cum[i][j][1]++;
            }
        }
    }

    for (int i = n - 1; i >= 0; i--) {
        for (int j = m - 1; j >= 0; j--) {
            if (i == n - 1 || j == m - 1) {
                if (i == n - 1 && j == m - 1) {
                    dp[i][j][0][0] = dp[i][j][0][1] = arr[i][j] == 'R' ? 0 : 1;
                } else if (arr[i][j] != 'R') {
                    dp[i][j][0][0] = (dp[i + 1][j][0][0] + dp[i][j + 1][0][1]) % MOD;
                    dp[i][j][0][1] = dp[i][j][0][0];
                }
            } else {
                dp[i][j][0][0] = (dp[i + 1][j + 1][1][0] - dp[n - cum[i][j][0] + (arr[i][j] == 'R' ? 1 : 0)][j + 1][1][0] + dp[i + 1][j + 1][1][1] - dp[i + 1][m - cum[i][j][1]][1][1] + (2ll * MOD)) % MOD;
                dp[i][j][0][1] = (dp[i + 1][j + 1][1][0] - dp[n - cum[i][j][0]][j + 1][1][0] + dp[i + 1][j + 1][1][1] - dp[i + 1][m - cum[i][j][1] + (arr[i][j] == 'R' ? 1 : 0)][1][1] + (2ll * MOD)) % MOD;
            }
            dp[i][j][1][0] = (dp[i + 1][j][1][0] + dp[i][j][0][0]) % MOD;
            dp[i][j][1][1] = (dp[i][j + 1][1][1] + dp[i][j][0][1]) % MOD;
        }
    }

    std::cout << dp[0][0][0][1] << std::endl;

    return 0;
}
```

These optimizations aim to reduce unnecessary computations, improve memory usage, and enhance code readability. However, it's important to note that the optimization strategy may vary depending on the specific requirements and constraints of the system. It's recommended to measure the performance of the optimized code and make further adjustments if necessary.