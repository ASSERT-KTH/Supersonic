Analysis:

1. The function `read` takes a vector `v` as input and reads `n` integers from the input stream into the vector. This function is called in the `solve` function to read the input vector `v`. However, the input vector `v` is already being passed as a parameter to the `solve` function, so there is no need to read it separately. We can remove the `read` function and read the input directly in the `solve` function.

2. The loop that iterates over the input vector `v` from the end to the beginning can be optimized. Instead of checking if each element is already in the set `s`, we can use a vector `visited` to keep track of the elements that have already been encountered. This will avoid the need for searching in the set for each element. We can initialize the `visited` vector with `false` values and set the visited elements to `true` as we encounter them. This will reduce the time complexity of the loop from O(n^2) to O(n).

3. The set `s` is used to keep track of unique elements encountered in the input vector `v`. However, we only need to know the count of unique elements, not the actual elements themselves. We can replace the set `s` with a variable `cont` to keep track of the count.

4. The loop that reads `m` queries and prints the corresponding values from the `v` vector can be optimized. Currently, it performs a linear search in the `v` vector for each query. We can improve this by directly accessing the corresponding value from the `v` vector using the query index. This will reduce the time complexity of the loop from O(mn) to O(m).

Optimization Strategy:

1. Remove the `read` function and read the input directly in the `solve` function.
2. Replace the set `s` with a variable `cont` to keep track of the count of unique elements.
3. Replace the loop that iterates over the input vector `v` with a loop that uses a `visited` vector to keep track of visited elements.
4. Replace the loop that reads `m` queries and prints the corresponding values from the `v` vector with direct access to the `v` vector using the query index.

Step-by-Step Explanation:

1. Remove the `read` function and read the input directly in the `solve` function. This eliminates the unnecessary function call and reduces the code complexity.

2. Replace the set `s` with a variable `cont` to keep track of the count of unique elements. This eliminates the need for searching in the set for each element, improving the efficiency of the loop.

3. Replace the loop that iterates over the input vector `v` with a loop that uses a `visited` vector to keep track of visited elements. This eliminates the need for searching in the set for each element, further improving the efficiency of the loop.

4. Replace the loop that reads `m` queries and prints the corresponding values from the `v` vector with direct access to the `v` vector using the query index. This eliminates the need for searching in the vector for each query, improving the efficiency of the loop.

Optimized Code:

```cpp
#include <iostream>
#include <vector>
using namespace std;

void solve(int n, int m) {
  vector<int> v(n);
  for (int i = 0; i < n; i++) {
    cin >> v[i];
  }
  int cont = 0;
  vector<bool> visited(n, false);
  for (int i = n - 1; i >= 0; i--) {
    if (!visited[v[i] - 1]) {
      visited[v[i] - 1] = true;
      cont++;
    }
    v[i] = cont;
  }
  for (int i = 0; i < m; i++) {
    int q;
    cin >> q;
    cout << v[q - 1] << endl;
  }
}

int main() {
  int n, m;
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cin >> n >> m;
  solve(n, m);
  return 0;
}
```

This optimized code eliminates the unnecessary function call, replaces the set with a variable, and uses a visited array to avoid searching in the vector for each element. It also directly accesses the vector using the query index instead of performing a linear search. These optimizations improve the efficiency of the code by reducing time complexity and improving memory usage.