#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <stack>

#define LL long long
#define maxn 300010
#define M 15000010

using namespace std;

int main() {
  int n;
  scanf("%d", &n);
  
  // Step 1: Calculate the GCD of the entire array
  int g;
  for (register int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
  }
  g = std::gcd(a[0], a[1]);
  for (register int i = 2; i < n; i++) {
    g = std::gcd(g, a[i]);
  }
  
  // Step 2: Optimize the frequency counting process
  map<int, int> num;
  int maxx = 0;
  for (register int i = 0; i < n; i++) {
    int t = a[i] / g;
    num[t]++;
    if (t > maxx) {
      maxx = t;
    }
  }
  
  // Step 3: Improve the loop for finding the highest frequency
  int cnt = 0;
  int t = 0;
  
  // Sieve of Eratosthenes algorithm to find prime numbers up to maxx
  vector<bool> isPrime(maxx + 1, true);
  for (int p = 2; p * p <= maxx; p++) {
    if (isPrime[p]) {
      for (int i = p * p; i <= maxx; i += p) {
        isPrime[i] = false;
      }
    }
  }
  
  // Count frequencies of prime numbers
  for (register int i = 2; i <= maxx; i++) {
    if (isPrime[i]) {
      t = 0;
      for (register int j = i; j <= maxx; j += i) {
        t += num[j];
      }
      if (t > cnt) {
        cnt = t;
      }
    }
  }
  
  if (cnt == 0) {
    printf("-1\n");
  } else {
    printf("%d\n", n - cnt);
  }
  return 0;
}