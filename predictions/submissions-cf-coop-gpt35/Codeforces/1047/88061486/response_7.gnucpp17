#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <ctime>
#include <iostream>
#include <queue>
#include <stack>
#include <vector>
#define LL long long
#define maxn 300010
#define M 15000010
using namespace std;

int main() {
  int n, g;
  scanf("%d", &n);
  
  // Read input array
  vector<int> a(n);
  for (int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
  }
  
  // Calculate GCD using __gcd function
  g = a[0];
  for (int i = 1; i < n; i++) {
    g = __gcd(g, a[i]);
  }
  
  int maxx = 0, t;
  vector<int> num(M, 0), vis(M, 0);
  
  // Count occurrences of numbers divisible by GCD
  for (int i = 0; i < n; i++) {
    t = a[i] / g;
    num[t]++;
    maxx = max(maxx, t);
  }
  
  int cnt = 0;
  t = 0;
  
  // Sieve algorithm to count occurrences of divisible numbers
  for (int i = 2; i <= maxx; i++) {
    if (vis[i] == 0) {
      t = 0;
      for (int j = i; j <= maxx; j += i) {
        t += num[j];
        vis[j] = 1;
      }
      cnt = max(cnt, t);
    }
  }
  
  if (cnt == 0) {
    printf("-1\n");
  } else {
    printf("%d\n", n - cnt);
  }
  
  return 0;
}