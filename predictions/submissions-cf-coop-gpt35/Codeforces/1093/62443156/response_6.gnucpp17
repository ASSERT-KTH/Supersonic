#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <cctype>
#include <chrono>
#include <cmath>
#include <cstdlib>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <optional>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <string>
#include <string_view>
#include <tuple>
#include <type_traits>
#include <utility>
#include <vector>
using namespace std;

template <typename T1, typename T2>
std::ostream &operator<<(std::ostream &os, const std::pair<T1, T2> &p) {
  return os << '{' << p.first << ", " << p.second << '}';
}

template <typename Container,
          std::enable_if_t<!std::is_convertible_v<Container, std::string_view>,
                           typename Container::const_iterator> * = nullptr>
std::ostream &operator<<(std::ostream &os, const Container &c) {
  os << '{';
  for (auto it = c.begin(); it != c.end(); ++it) {
    if (it != c.begin()) {
      os << ", ";
    }
    os << *it;
  }
  return os << '}';
}

namespace detail {
template <typename T> void print(std::string_view name, const T &val) {
  std::cerr << name << " = " << val << std::endl;
}

template <typename T1, typename... Ts>
void print(std::string_view names, const T1 &val1, const Ts &... vals) {
  for (int i = 0, paren = 0; i < (int)names.size(); ++i) {
    if (names[i] == '(' || names[i] == '{') {
      ++paren;
    } else if (names[i] == ')' || names[i] == '}') {
      --paren;
    } else if (names[i] == ',' && paren == 0) {
      std::cerr << names.substr(0, i) << " = " << val1 << ',';
      return print(names.substr(i + 1), vals...);
    }
  }
}
} // namespace detail

#ifdef TYLER
#define debug(...)                                                             \
  do {                                                                         \
    std::cerr << "  " << __LINE__ << " | ";                                    \
    detail::print(#__VA_ARGS__, __VA_ARGS__);                                  \
  } while (false)
#else
#define debug(...) ((void)0)
#endif

template <typename T, typename JoinFn>
class seg_tree {
public:
  seg_tree(int n, const T &zero = T(), const JoinFn &join_fn = JoinFn())
      : join_fn_(join_fn), n_(n), data_(2 * next_power_of_two(n_) - 1, zero) {}

  seg_tree(const std::vector<T> &data, const JoinFn &join_fn = JoinFn())
      : join_fn_(join_fn), n_(data.size()), data_(data) {}

  int size() const { return n_; }

  template <typename UpdateFn>
  void update(int pos, const T &val, UpdateFn update_fn) {
    return update(0, 0, n_ - 1, pos, val, update_fn);
  }

  T query(int pos) const { return query(pos, pos); }

  T query(int first, int last) const {
    return query(0, 0, n_ - 1, first, last);
  }

  template <typename ContainsFn>
  int find(T val, ContainsFn contains_fn) const {
    if (!contains_fn(data_[0], val)) {
      return n_;
    }
    return find(0, 0, n_ - 1, val, contains_fn);
  }

  friend std::ostream &operator<<(std::ostream &os, const seg_tree &tree) {
    os << '{';
    for (int i = 0; i < tree.size(); ++i) {
      if (i != 0) {
        os << ", ";
      }
      os << tree.query(i);