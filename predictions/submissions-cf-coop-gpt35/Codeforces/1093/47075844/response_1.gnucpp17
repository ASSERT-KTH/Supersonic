#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int mod = 998244353;
const int MAX = 3 * 100000;

int powr[MAX];

template <class T>
T get() {
  T a;
  std::cin >> a;
  return a;
}

class graph {
public:
  int n;
  vector<vector<int>> adj;

  graph(int nodeNumber) {
    n = nodeNumber;
    adj.resize(n + 1);
  }

  void addEdge(int a, int b) {
    adj[a].push_back(b);
    adj[b].push_back(a);
  }

  long long findans() {
    vector<char> visited(n + 1, false);
    int col[n + 1];
    int grcol[3] = {0};

    long long res = 1;

    for (int c = 1; c < n + 1; c++) {
      if (!visited[c]) {
        col[c] = 1;

        if (!bfs(c, col, visited, grcol)) {
          return 0;
        } else {
          res = (res * (powr[grcol[1]] + powr[grcol[2]])) % mod;
        }

        grcol[2] = 0;
        grcol[1] = 1;
      }
    }

    return res;
  }

  bool bfs(int p, int col[], vector<char>& visited, int grcol[]) {
    int queue[MAX];
    int front = 0;
    int rear = 0;

    visited[p] = true;
    queue[rear++] = p;

    while (front < rear) {
      int itr = queue[front++];
      int chcol = (col[itr] == 2) ? 1 : 2;

      for (int i = 0; i < adj[itr].size(); i++) {
        int k = adj[itr][i];

        if (col[k] == 0 || col[k] == chcol) {
          if (col[k] == 0) {
            col[k] = chcol;
            grcol[chcol]++;
          }
        } else {
          return false;
        }

        if (!visited[k]) {
          visited[k] = true;
          queue[rear++] = k;
        }
      }
    }

    return true;
  }
};

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  for (int c = 0, k = 1; c < MAX; c++) {
    powr[c] = k;
    k = (k * 2) % mod;
  }

  int o;
  cin >> o;

  while (o--) {
    int n, m;
    cin >> n >> m;

    graph mygraph(n);

    for (int c = 0; c < m; c++) {
      mygraph.addEdge(get<int>(), get<int>());
    }

    cout << mygraph.findans() << endl;
  }

  return 0;
}