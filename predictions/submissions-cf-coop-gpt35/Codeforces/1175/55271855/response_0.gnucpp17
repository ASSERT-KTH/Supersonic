#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <cmath>

int main() {
  int n, m;
  std::cin >> n >> m;

  int const MAX = n;
  std::vector<int> A(MAX);
  for (int i = 0; i < MAX; i++) {
    A[i] = i;
  }

  for (int i = 0; i < n; i++) {
    int x, y;
    std::cin >> x >> y;
    A[x] = std::max(A[x], y);
  }

  std::map<int, std::map<int, int>> dp;
  dp[0][0] = A[0];
  for (int i = 1; i < MAX; i++) {
    dp[i][0] = A[i] = std::max(A[i], A[i - 1]);
  }

  for (int j = 1; j < 19; j++) {
    for (int i = 0; i < MAX; i++) {
      dp[i][j] = dp[dp[i][j - 1]][j - 1];
    }
  }

  while (m--) {
    int l, r, nb = 0;
    std::cin >> l >> r;

    auto it = dp.lower_bound(l);
    if (it != dp.end() && it->first < r) {
      nb += 1 << it->second;
      l = it->second;
      it = dp.lower_bound(l);
    }

    if (it != dp.end() && it->first >= r) {
      nb++;
    } else {
      nb = -1;
    }

    std::cout << nb << std::endl;
  }

  return 0;
}