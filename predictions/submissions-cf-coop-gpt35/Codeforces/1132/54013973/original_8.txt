The given code reads an integer `n`, followed by `n` integers into a vector `a`. It then sorts the vector, computes the cumulative sum of the elements, reads an integer `m`, and performs `m` queries. Each query reads an integer `x` and prints the sum of the last `x` elements of the sorted vector `a`.

To optimize this code, we can focus on the following areas:

1. Input/Output: The `fast` macro disables the synchronization between C and C++ standard streams, which can improve the input/output speed. However, it is not necessary in this code since there is no significant input/output operation. We can remove the `fast` macro.

2. Sorting: The code uses the `sort` function to sort the vector `a`. The `sort` function has a time complexity of O(n log n), which can be quite slow for large inputs. However, since we only need the sum of the last `x` elements, we can avoid sorting the entire vector. Instead, we can use a partial sorting algorithm, such as `nth_element`, to find the `x`-th largest element in linear time. This can significantly improve the performance, especially when `m` is much smaller than `n`.

3. Cumulative Sum: The code computes the cumulative sum of the elements in the vector `a` using a loop. This can be optimized by using the `partial_sum` function from the `<numeric>` library. The `partial_sum` function calculates the partial sums in a vector in linear time.

4. Output: The code prints the results of each query one by one using the `cout` stream. This can be slow when there are a large number of queries. Instead, we can store the results in a vector and print them all at once after all the queries have been processed.

Taking these optimizations into consideration, here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>

using namespace std;

#define ll long long int

int main() {
  ll n;
  cin >> n;
  
  vector<ll> a(n);
  for (ll i = 0; i < n; i++) {
    cin >> a[i];
  }
  
  ll m;
  cin >> m;
  
  vector<ll> queries(m);
  for (ll i = 0; i < m; i++) {
    cin >> queries[i];
  }

  // Sort the vector a partially
  nth_element(a.begin(), a.begin() + n - queries[m-1], a.end());
  
  // Calculate the partial sums
  partial_sum(a.begin(), a.end(), a.begin());
  
  vector<ll> results(m);
  for (ll i = 0; i < m; i++) {
    results[i] = a[n - queries[i]];
  }
  
  for (ll i = 0; i < m; i++) {
    cout << results[i] << endl;
  }
  
  return 0;
}
```

This optimized code improves the sorting algorithm, uses the `partial_sum` function to calculate the cumulative sum, and stores the results in a vector to reduce the number of output operations. These changes should result in a significant improvement in performance compared to the original code.