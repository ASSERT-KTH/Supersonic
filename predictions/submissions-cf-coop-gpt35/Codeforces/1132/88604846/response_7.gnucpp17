#include <iostream>
#include <vector>
#include <algorithm>

const long long INF64 = 1e18;

bool check(long long x, const std::vector<long long>& a, const std::vector<int>& b, int k) {
    int n = a.size();
    std::vector<std::vector<int>> qr(k);
    std::vector<long long> cur(a);
    
    for (int i = 0; i < n; i++) {
        long long t = cur[i] / b[i] + 1;
        cur[i] %= b[i];
        if (t < k)
            qr[t].push_back(i);
    }
    
    int lastNonEmpty = 0;
    
    for (int t = 0; t < k; t++) {
        while (lastNonEmpty < k && qr[lastNonEmpty].empty())
            ++lastNonEmpty;
        if (lastNonEmpty <= t)
            return false;
        if (lastNonEmpty == k)
            return true;
        int i = qr[lastNonEmpty].back();
        if (x < b[i] - cur[i]) {
            cur[i] += x;
            continue;
        }
        qr[lastNonEmpty].pop_back();
        cur[i] = (cur[i] + x) % b[i];
        int nt = (cur[i] + x) / b[i] - 1;
        if (lastNonEmpty + nt < k)
            qr[lastNonEmpty + nt].push_back(i);
    }
    
    return true;
}

int main() {
    int n, k;
    std::cin >> n >> k;
    
    std::vector<long long> a(n);
    std::vector<int> b(n);
    
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
    
    for (int i = 0; i < n; i++) {
        std::cin >> b[i];
    }
    
    long long l = 0, r = INF64;
    
    while (l < r - 1) {
        long long m = (l + r) / 2;
        if (check(m, a, b, k))
            r = m;
        else
            l = m;
    }
    
    if (!check(r, a, b, k))
        std::cout << -1 << std::endl;
    else
        std::cout << (check(l, a, b, k) ? l : r) << std::endl;
    
    return 0;
}