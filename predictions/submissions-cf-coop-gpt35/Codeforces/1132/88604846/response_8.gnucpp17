#include <bits/stdc++.h>
#define forn(i, n) for (int i = 0; i < int(n); i++)
using namespace std;
const int N = 200 * 1000 + 13;
const long long INF64 = 1e18;
int n, k;
long long a[N];
int b[N];
long long cur[N];
vector<int> qr[N];
bool check(long long x) {
  forn(i, k) qr[i].clear();
  forn(i, n) cur[i] = a[i];
  long long t[N];
  forn(i, n) {
    t[i] = cur[i] / b[i] + 1;
    cur[i] %= b[i];
    if (t[i] < k)
      qr[t[i]].push_back(i);
  }
  int lst = 0;
  for (int t = k-1; t >= 0; t--) {
    if (!qr[lst].empty()) {
      int i = qr[lst].back();
      qr[lst].pop_back();
      cur[i] = (cur[i] + x) % b[i];
      int nt = cur[i] / b[i];
      if (lst + nt < k)
        qr[lst + nt].push_back(i);
    }
    if (qr[lst].empty())
      lst++;
    if (lst <= t)
      return false;
  }
  return true;
}
int main() {
  scanf("%d%d", &n, &k);
  forn(i, n) scanf("%lld", &a[i]);
  forn(i, n) scanf("%d", &b[i]);
  long long l = 0, r = INF64;
  while (l + 1 < r) {
    long long m = (l + r) / 2;
    if (check(m))
      r = m;
    else
      l = m;
  }
  if (!check(r))
    puts("-1");
  else
    printf("%lld\n", check(l) ? l : r);
  return 0;
}