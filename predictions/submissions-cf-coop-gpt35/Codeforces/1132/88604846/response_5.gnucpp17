#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int N = 200 * 1000 + 13;
const long long INF64 = 1e18;

struct Element {
    long long a;
    int b;
};

bool compare(const Element& e1, const Element& e2) {
    return e1.a < e2.a;
}

bool check(long long x, const vector<Element>& elements, int n, int k) {
    vector<int> qr[n];
    vector<int> indices(n);
    vector<long long> cur(n);
    
    for (int i = 0; i < n; i++) {
        cur[i] = elements[i].a;
        indices[i] = i;
    }
    
    for (int i = 0; i < n; i++) {
        long long t = cur[i] / elements[i].b + 1;
        cur[i] %= elements[i].b;
        if (t < k)
            qr[t].push_back(i);
    }
    
    int lst = 0;
    for (int t = 0; t < k; t++) {
        while (lst < k && qr[lst].empty())
            ++lst;
        if (lst <= t)
            return false;
        if (lst == k)
            return true;
        int i = qr[lst].back();
        if (cur[i] + x < elements[i].b) {
            cur[i] += x;
            continue;
        }
        qr[lst].pop_back();
        long long nt = (cur[i] + x) / elements[i].b;
        cur[i] = (cur[i] + x) % elements[i].b;
        if (lst + nt < k)
            qr[lst + nt].push_back(i);
    }
    
    return true;
}

int main() {
    int n, k;
    cin >> n >> k;
    
    vector<Element> elements(n);
    for (int i = 0; i < n; i++) {
        cin >> elements[i].a;
    }
    for (int i = 0; i < n; i++) {
        cin >> elements[i].b;
    }
    
    sort(elements.begin(), elements.end(), compare);
    
    long long l = 0, r = INF64;
    while (l < r - 1) {
        long long m = (l + r) / 2;
        if (check(m, elements, n, k))
            r = m;
        else
            l = m;
    }
    
    if (!check(r, elements, n, k))
        cout << -1 << endl;
    else
        cout << (check(l, elements, n, k) ? l : r) << endl;
    
    return 0;
}