#include <bits/stdc++.h>
#define forn(i, n) for (int i = 0; i < int(n); i++)
using namespace std;
const int N = 200 * 1000 + 13;
const long long INF64 = 1e18;
int n, k;
long long a[N];
int b[N];
long long cur[N];
vector<int> qr[N];
bool check(long long x) {
  forn(i, k) qr[i].clear();
  forn(i, n) cur[i] = a[i] % b[i];
  forn(i, n) {
    int t = cur[i] / b[i];
    if (t < k)
      qr[t].push_back(i);
  }
  int lst = 0;
  forn(t, k) {
    while (lst < k && qr[lst].empty())
      ++lst;
    if (lst <= t)
      return false;
    if (lst == k)
      return true;
    int i = qr[lst].back();
    int nt = (cur[i] + x) / b[i];
    cur[i] = (cur[i] + x) % b[i];
    if (lst + nt < k)
      qr[lst + nt].push_back(i);
    qr[lst].pop_back();
  }
  return true;
}
int main() {
  scanf("%d%d", &n, &k);
  forn(i, n) scanf("%lld", &a[i]);
  forn(i, n) scanf("%d", &b[i]);
  long long l = 0, r = INF64;
  long long m = l + (r - l) / 2;  // Calculate m only once
  while (l + 1 < r) {  // Use l + 1 < r as loop condition
    if (check(m)) {  // Directly use result of previous check call
      r = m;
    } else {
      l = m;
    }
    m = l + (r - l) / 2;  // Calculate m only once
  }
  if (!check(r))
    puts("-1");
  else
    printf("%lld\n", check(l) ? l : r);
  return 0;
}