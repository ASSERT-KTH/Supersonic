#include <iostream>
#include <vector>
#include <algorithm>

void answer(bool v) {
  constexpr const char *s[2] = {"No", "Yes"};
  std::cout << s[v] << '\n';
}

void solve(const std::vector<size_t>& parent) {
  const size_t n = parent.size();
  std::vector<size_t> depth(n, 0);
  for (size_t i = 0; i < n; ++i) {
    if (parent[i] != -1)
      depth[i] = depth[parent[i]] + 1;
  }

  std::vector<size_t> sorted_nodes(n);
  std::iota(sorted_nodes.begin(), sorted_nodes.end(), 0);
  std::sort(sorted_nodes.begin(), sorted_nodes.end(), [&depth](size_t a, size_t b) {
    return depth[a] > depth[b];
  });

  bool result = true;
  for (size_t i : sorted_nodes) {
    if (parent[i] == -1)
      continue;

    unsigned k = 0;
    for (size_t x : sorted_nodes) {
      if (parent[x] == i)
        k += parent[x] == -1;
    }

    if (k < 3) {
      result = false;
      break;
    }
  }

  answer(result);
}

int main() {
  size_t n;
  std::cin >> n;

  std::vector<size_t> parent(n);
  for (size_t i = 1; i < n; ++i) {
    unsigned p;
    std::cin >> p;
    parent[i] = p - 1;
  }

  solve(parent);
  return 0;
}