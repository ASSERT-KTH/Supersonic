#include <iostream>
#include <vector>

void answer(bool v) {
  constexpr const char *s[2] = {"No", "Yes"};
  std::cout << s[v] << '\n';
}

// Depth-first search to count leaf nodes
size_t dfs(const std::vector<std::vector<size_t>>& g, size_t node) {
  if (g[node].empty()) {
    return 1; // Leaf node
  }
  
  size_t leaf_count = 0;
  for (const size_t child : g[node]) {
    leaf_count += dfs(g, child);
  }
  
  return leaf_count;
}

void solve(const std::vector<std::vector<size_t>>& g) {
  const size_t n = g.size();
  
  for (size_t i = 0; i < n; ++i) {
    size_t leaf_count = dfs(g, i);
    if (leaf_count < 3) {
      answer(false);
      return;
    }
  }
  
  answer(true);
}

int main() {
  size_t n;
  std::cin >> n;
  
  std::vector<std::vector<size_t>> g(n);
  
  for (size_t i = 1; i < n; ++i) {
    unsigned p;
    std::cin >> p;
    g[p - 1].push_back(i);
  }
  
  solve(g);
  
  return 0;
}