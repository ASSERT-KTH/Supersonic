#include <iostream>
#include <vector>

void answer(bool v) {
  constexpr const char *s[2] = {"No", "Yes"};
  std::cout << s[v] << '\n';
}

void solve(const std::vector<std::vector<size_t>> &adj) {
  const size_t n = adj.size();
  std::vector<bool> isLeaf(n, true);

  for (size_t i = 0; i < n; ++i) {
    for (const size_t x : adj[i]) {
      isLeaf[x] = false;
    }
  }

  for (size_t i = 0; i < n; ++i) {
    if (!adj[i].empty()) {
      unsigned k = 0;
      for (const size_t x : adj[i]) {
        k += isLeaf[x];
      }
      if (k < 3) {
        return answer(false);
      }
    }
  }
  answer(true);
}

int main() {
  size_t n;
  std::cin >> n;
  std::vector<std::vector<size_t>> adj(n);

  for (size_t i = 1; i < n; ++i) {
    unsigned p;
    std::cin >> p;
    adj[p - 1].push_back(i);
  }

  solve(adj);
  return 0;
}