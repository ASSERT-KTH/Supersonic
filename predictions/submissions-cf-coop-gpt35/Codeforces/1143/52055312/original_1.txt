Upon analyzing the provided code, I have identified the following potential performance bottlenecks and areas for optimization:

1. Inefficient data structure: The code uses a vector of vectors (`vector<vector<int>> tree(N)`) to represent a tree structure. However, this data structure is not efficient for tree traversal and can result in slow performance.

2. Redundant computations: The `built_h` function recursively computes the height of each node in the tree. However, this computation can be avoided by storing the height of each node as it is assigned in the main loop.

3. Unnecessary sorting: The `sort` function is used to sort the `ve` array based on the height of each node (`h[x] > h[y]`). However, this sorting is not required for the subsequent loop, as the loop only checks for the presence of certain conditions.

4. Inefficient loop condition: The second nested loop checks for the presence of certain conditions (`if (!c[tree[ve[i]][j]])`). However, this condition can be simplified and optimized.

To optimize the code, I will implement the following steps:

1. Replace the vector of vectors (`vector<vector<int>> tree(N)`) with a more efficient data structure for representing the tree. One possible alternative is to use an array of vectors (`vector<int> tree[N]`), where each index represents a node in the tree and the vector at each index holds the indices of its children nodes.

2. Remove the `built_h` function and instead calculate the height of each node in the main loop while assigning the parent and child nodes. This eliminates the need for a separate recursive function and reduces redundant computations.

3. Remove the sorting of the `ve` array (`sort(ve + 1, ve + n + 1, cmp)`) as it is not necessary for the subsequent loop.

4. Optimize the loop condition in the final loop to simplify and improve efficiency.

Here is the optimized code:

```cpp
#include <iostream>
#include <vector>
#define N 100005
using namespace std;

int n, x, y, t;
vector<int> tree[N];
int c[N], par[N], h[N], ve[N];
bool ans[N], yes;

void buildTree() {
    for (int i = 1; i <= n; i++) {
        ve[i] = i;
        cin >> x >> y;
        if (x == -1)
            t = i, par[i] = i;
        else
            par[i] = x;
        c[i] = y;
        if (x != -1)
            tree[x].push_back(i);
    }
}

void calculateHeight() {
    h[t] = 1;
    for (int i = 1; i <= n; i++) {
        int node = ve[i];
        h[node] = h[par[node]] + 1;
    }
}

int main() {
    cin >> n;
    buildTree();
    calculateHeight();

    for (int i = n; i >= 1; i--) {
        int node = ve[i];
        bool ok = false;
        for (int j = 0; j < tree[node].size(); j++) {
            int child = tree[node][j];
            if (!c[child]) {
                ok = true;
                break;
            }
        }
        if (!c[node])
            ok = true;
        if (!ok)
            ans[node] = true, yes = true;
    }

    if (!yes)
        cout << -1;
    else
        for (int i = 1; i <= n; i++)
            if (ans[i])
                cout << i << " ";

    return 0;
}
```

Explanation of optimizations:

1. Replacing the vector of vectors with an array of vectors (`vector<int> tree[N]`) improves memory usage and reduces the overhead of managing a dynamic data structure.

2. Removing the `built_h` function and calculating the height of each node in the main loop reduces redundant recursive computations and improves overall efficiency.

3. Removing the sorting of the `ve` array eliminates unnecessary overhead and improves the runtime of the program.

4. Optimizing the loop condition in the final loop simplifies the condition and improves efficiency.

By implementing these optimizations, the code will run more efficiently and use memory more effectively.