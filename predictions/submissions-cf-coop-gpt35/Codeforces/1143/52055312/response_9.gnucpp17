#include <iostream>
#include <vector>
#include <algorithm>
#define N 100005
using namespace std;

struct Node {
    int parent;
    vector<int> children;
};

int n, x, y, t;
Node tree[N];
int c[N], par[N], h[N], ve[N];
bool ans[N], yes;

bool cmp(int x, int y) {
    return h[x] > h[y];
}

void buildHeight(int node, int parentHeight) {
    h[node] = parentHeight + 1;
    for (int child : tree[node].children) {
        buildHeight(child, h[node]);
    }
}

int main() {
    cin >> n;
    for (int i = 1; i <= n; i++) {
        ve[i] = i;
        cin >> x >> y;
        if (x == -1) {
            t = i;
            par[i] = i;
        }
        else {
            par[i] = x;
            tree[x].children.push_back(i);
        }
        c[i] = y;
    }

    h[t] = 1;
    buildHeight(t, 1);

    sort(ve + 1, ve + n + 1, cmp);

    for (int i = 1; i <= n; i++) {
        int node = ve[i];
        bool ok = false;
        for (int child : tree[node].children) {
            if (!c[child]) {
                ok = true;
                break;
            }
        }
        if (!c[node])
            ok = true;
        if (!ok)
            ans[node] = true, yes = true;
    }

    if (!yes)
        cout << -1;
    else
        for (int i = 1; i <= n; i++)
            if (ans[i])
                cout << i << " ";
    
    return 0;
}