#include <iostream>
#include <vector>
using namespace std;

const int MAXN = 1000000;
int freq[MAXN];
int cfreq[MAXN];

bool isvalid(int n, int m, int x, int y, int T) {
  if (x < 1 || x > n || y < 1 || y > m)
    return false;
  fill(cfreq, cfreq + MAXN, 0);
  int i, j;
  x--;
  y--;
  for (i = 0; i < n; i++) {
    for (j = 0; j < m; j++) {
      cfreq[(abs(x - i) + abs(y - j))]++;
    }
  }
  for (i = 0; i < T; i++) {
    if (cfreq[i] != freq[i])
      return false;
  }
  return true;
}

pair<int, int> findSolution(int T) {
  int t, b = -1, x;
  for (t = 0; t < T; t++) {
    int k;
    cin >> k;
    freq[k]++;
    b = max(b, k);
  }
  for (t = 1; t < T; t++) {
    if (freq[t] != (t << 2))
      break;
  }
  x = t;
  int n, m, y;
  bool foundSolution = false;
  for (n = 1; n * n <= T; n++) {
    if (T % n == 0) {
      m = T / n;
      y = n + m - b - x;
      if (isvalid(n, m, x, y, T)) {
        foundSolution = true;
        break;
      } else if (isvalid(m, n, x, y, T)) {
        foundSolution = true;
        swap(n, m);
        break;
      }
    }
  }
  if (foundSolution) {
    return make_pair(n, m);
  } else {
    return make_pair(-1, -1);
  }
}

int main() {
  int T;
  cin >> T;
  pair<int, int> solution = findSolution(T);
  cout << solution.first << " " << solution.second << endl;
  cout << solution.second << " " << solution.first << endl;
  return 0;
}