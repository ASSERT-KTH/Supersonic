Code Analysis:

1. The code includes unnecessary header file `#include <bits/stdc++.h>`, which includes a large number of standard library headers. It is better to include only the required headers to reduce compilation time and memory usage.

2. The code defines multiple macros, such as `ll`, `ull`, `pb`, `mp`, etc., which can make the code less readable and harder to maintain. It is recommended to avoid using macros and instead use explicit type and function declarations.

3. The code uses `unordered_map` for storing values and their distances. However, the code does not require constant time lookup or insertion. Using a `vector` or `array` instead of an `unordered_map` can provide better performance.

4. The code uses `queue` to process elements in a breadth-first search manner. However, it is not necessary to use a queue in this case. A `vector` or `array` can be used to store the elements and their distances, and a simple loop can be used to process them.

5. The code uses `shuffle` function from the `<algorithm>` header to shuffle the elements in the `res` vector. However, shuffling the vector is not necessary, as the order of elements does not affect the result.

Optimization Strategy:

1. Remove the unnecessary header file `#include <bits/stdc++.h>`.

2. Replace the macros with explicit type and function declarations.

3. Replace the `unordered_map` with a `vector` or `array` to store values and their distances.

4. Replace the `queue` with a loop to process elements in a breadth-first search manner.

5. Remove the shuffling of the `res` vector.

Step-by-Step Explanation:

1. Remove the unnecessary header file `#include <bits/stdc++.h>`.
   - This header file includes a large number of standard library headers, which can increase compilation time and memory usage.
   - Instead, include only the required headers, such as `<iostream>`, `<vector>`, `<array>`, and `<algorithm>`.

2. Replace the macros with explicit type and function declarations.
   - The macros make the code less readable and harder to maintain.
   - Replace `ll` with `long long`, `ull` with `unsigned long long`, `pb` with `push_back`, `mp` with `make_pair`, etc.

3. Replace the `unordered_map` with a `vector` or `array` to store values and their distances.
   - The `unordered_map` is not necessary in this case, as constant time lookup or insertion is not required.
   - Instead, use a `vector` or `array` to store the values and their distances.
   - The index of the `vector` or `array` can represent the value, and the value at each index can represent the distance.

4. Replace the `queue` with a loop to process elements in a breadth-first search manner.
   - The `queue` can be replaced with a loop that iterates over the elements in the `vector` or `array`.
   - The loop can process each element, update its distance, and add the adjacent elements to the `vector` or `array`.

5. Remove the shuffling of the `res` vector.
   - The shuffling of the `res` vector is not necessary, as the order of elements does not affect the result.
   - Removing the shuffling can improve performance.

Optimized Code:

```cpp
#include <iostream>
#include <vector>
#include <array>
#include <algorithm>
#include <random>

typedef long long ll;
typedef unsigned long long ull;

void solve() {
  int n, m;
  std::cin >> n >> m;
  std::vector<int> v(n);
  for (auto &x : v)
    std::cin >> x;

  std::vector<ll> d(2e6 + 5, -1);
  std::vector<int> q;
  for (int i = 0; i < n; i++) {
    d[v[i]] = 0LL;
    q.push_back(v[i]);
  }

  std::vector<int> res;
  ll mini_sum = 0LL;
  for (int i = 0; i < q.size(); i++) {
    if ((int)res.size() == m)
      break;
    int cur = q[i];
    if (d[cur] != 0) {
      res.push_back(cur);
      mini_sum += d[cur];
    }
    if (cur - 1 >= 0 && d[cur - 1] == -1) {
      d[cur - 1] = d[cur] + 1;
      q.push_back(cur - 1);
    }
    if (cur + 1 <= 2e6 && d[cur + 1] == -1) {
      d[cur + 1] = d[cur] + 1;
      q.push_back(cur + 1);
    }
  }

  std::cout << mini_sum << "\n";
  for (auto x : res)
    std::cout << x << " ";
  std::cout << "\n";
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);

  int t = 1;
  while (t--) {
    solve();
  }

  return 0;
}
```