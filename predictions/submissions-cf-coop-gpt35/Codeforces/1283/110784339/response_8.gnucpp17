#include <iostream>
#include <vector>
#include <unordered_set>
#include <algorithm>

using namespace std;

void solve() {
  int n, m;
  cin >> n >> m;
  vector<int> v(n);
  for (auto &x : v)
    cin >> x;
  unordered_set<int> d;
  unordered_set<int> q;
  for (int i = 0; i < n; i++) {
    d.insert(v[i]);
    q.insert(v[i]);
  }
  vector<int> res;
  int mini_sum = 0;
  while (res.size() < m && !q.empty()) {
    int cur = *q.begin();
    q.erase(cur);
    if (d.count(cur) && d[cur] != 0) {
      res.push_back(cur);
      mini_sum += d[cur];
    }
    if (!d.count(cur - 1)) {
      d[cur - 1] = d[cur] + 1;
      q.insert(cur - 1);
    }
    if (!d.count(cur + 1)) {
      d[cur + 1] = d[cur] + 1;
      q.insert(cur + 1);
    }
  }
  cout << mini_sum << "\n";
  for (auto x : res)
    cout << x << " ";
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  solve();
  return 0;
}