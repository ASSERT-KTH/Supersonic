#include <iostream>
#include <vector>
#include <deque>
#include <algorithm>
#include <random>
using namespace std;

void solve() {
  int n, m;
  cin >> n >> m;
  
  vector<int> v(n);
  for (auto &x : v)
    cin >> x;
  
  vector<ll> d(v.size(), 0); // Store distances between integers and their nearest selected integers
  deque<ll> q; // Use deque instead of queue for BFS
  
  for (int i = 0; i < n; i++) {
    d[i] = 0LL;
    q.push_back(v[i]);
  }
  
  vector<ll> res; // Use vector instead of unordered_map to store selected subset
  ll mini_sum = 0LL;

  while (!q.empty()) {
    if ((int)res.size() == m)
      break;

    ll cur = q.front();
    q.pop_front();

    if (d[cur] != 0) {
      res.push_back(cur);
      mini_sum += d[cur];
    }

    if (find(res.begin(), res.end(), cur - 1) == res.end()) {
      d[cur - 1] = d[cur] + 1;
      q.push_back(cur - 1);
    }

    if (find(res.begin(), res.end(), cur + 1) == res.end()) {
      d[cur + 1] = d[cur] + 1;
      q.push_back(cur + 1);
    }
  }

  random_device rd;
  mt19937 rng(rd());
  shuffle(res.begin(), res.end(), rng); // Use Fisher-Yates shuffle algorithm

  cout << mini_sum << "\n";
  for (auto x : res)
    cout << x << " ";
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);

  int t = 1;
  while (t--) {
    solve();
  }

  return 0;
}