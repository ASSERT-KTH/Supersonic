#include <iostream>
#include <vector>
#include <unordered_map>
#include <deque>
#include <algorithm>
#include <random>

using namespace std;

#define ll long long
#define ull unsigned long long

struct custom_hash {
  static uint64_t splitmix64(uint64_t x) {
    x += 0x9e3779b97f4a7c15;
    x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
    x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
    return x ^ (x >> 31);
  }
  size_t operator()(uint64_t x) const {
    static const uint64_t FIXED_RANDOM =
        chrono::steady_clock::now().time_since_epoch().count();
    return splitmix64(x + FIXED_RANDOM);
  }
};

mt19937 rng(time(0));

void solve() {
  int n, m;
  cin >> n >> m;
  vector<int> v(n);
  for (auto &x : v)
    cin >> x;
  vector<ll> d(n, -1);
  deque<ll> q;
  for (int i = 0; i < n; i++) {
    d[v[i]] = 0;
    q.push_back(v[i]);
  }
  vector<ll> res;
  ll mini_sum = 0;
  while (!q.empty()) {
    if ((int)res.size() == m)
      break;
    ll cur = q.front();
    q.pop_front();
    if (d[cur] != 0) {
      res.push_back(cur);
      mini_sum += d[cur];
    }
    if (d[cur - 1] == -1) {
      d[cur - 1] = d[cur] + 1;
      q.push_back(cur - 1);
    }
    if (d[cur + 1] == -1) {
      d[cur + 1] = d[cur] + 1;
      q.push_back(cur + 1);
    }
  }
  for (int i = res.size() - 1; i > 0; i--) {
    int j = rng() % (i + 1);
    swap(res[i], res[j]);
  }
  cout << mini_sum << "\n";
  for (auto x : res)
    cout << x << " ";
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
  int t = 1;
  while (t--) {
    solve();
  }
  return 0;
}