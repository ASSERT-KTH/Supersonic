#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
using namespace std;

const int M = 1e6 + 105;
int bz[M], p[M], p0;

void sieve(int n) {
  for (int i = 2; i <= n; i++) {
    if (!bz[i])
      p[++p0] = i;
    for (int j = 1; i * p[j] <= n; j++) {
      int k = i * p[j];
      bz[k] = 1;
      if (i % p[j] == 0)
        break;
    }
  }
}

const int N = 2e5 + 5;
int n;
long long a[N];
long long u[1000], u0;

void fen(long long n) {
  u0 = 0;
  for (int i = 1; i <= p0 && (long long)p[i] * p[i] <= n; i++) {
    if (n % p[i] == 0) {
      u[++u0] = p[i];
      while (n % p[i] == 0)
        n /= p[i];
    }
  }
  if (n > 1)
    u[++u0] = n;
}

long long ans;

void check(long long x) {
  long long s = 0;
  for (int i = 1; i <= n; i++) {
    if (a[i] >= x) {
      long long y = a[i] % x;
      s += min(y, x - y);
    } else
      s += x - a[i];
    if (s > ans)
      return;
  }
  ans = s;
}

int main() {
  sieve(1e6);
  cin >> n;
  for (int i = 1; i <= n; i++)
    cin >> a[i];
  ans = n;
  for (int i = 1; i <= min(n, 1000); i++) {
    for (int j = -1; j <= 1; j++) {
      long long x = a[i] + j;
      if (x > 1) {
        fen(x);
        for (int k = 1; k <= u0; k++)
          w[u[k]] = 1;
      }
    }
  }
  for (it = w.begin(); it != w.end(); it++)
    check((*it).first);
  cout << ans << endl;
  return 0;
}