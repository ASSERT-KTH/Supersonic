#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;

const int M = 1e6 + 105;
const int N = 2e5 + 5;

vector<int> p; // prime numbers
vector<int> a(N); // array
vector<int> u; // prime factors

int ans;

void sieve(int n) {
    vector<bool> bz(n+1, false);
    for (int i = 2; i <= n; i++) {
        if (!bz[i])
            p.push_back(i);
        for (int j = 0; j < p.size() && i * p[j] <= n; j++) {
            int k = i * p[j];
            bz[k] = true;
            if (i % p[j] == 0)
                break;
        }
    }
}

void fen(int n) {
    u.clear();
    for (int i = 0; i < p.size() && p[i] * p[i] <= n; i++) {
        if (n % p[i] == 0) {
            u.push_back(p[i]);
            while (n % p[i] == 0)
                n /= p[i];
        }
    }
    if (n > 1)
        u.push_back(n);
}

void check(int x) {
    int s = 0;
    for (int i = 0; i < a.size(); i++) {
        if (a[i] >= x) {
            int y = a[i] % x;
            s += min(y, x - y);
        } else {
            s += x - a[i];
        }
        if (s > ans)
            return;
    }
    ans = s;
}

int main() {
    sieve(M);
    int n;
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    ans = n;
    for (int i = 0; i < n; i++) {
        fen(a[i]);
        for (int j = -1; j <= 1; j++) {
            int x = a[i] + j;
            if (x > 1) {
                fen(x);
                for (int k = 0; k < u.size(); k++) {
                    check(u[k]);
                }
            }
        }
    }
    cout << ans << endl;

    return 0;
}