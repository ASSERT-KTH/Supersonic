#include <bits/stdc++.h>
#define fo(i, x, y) for (int i = x, _b = y; i <= _b; i++)
#define ff(i, x, y) for (int i = x, _b = y; i < _b; i++)
#define fd(i, x, y) for (int i = x, _b = y; i >= _b; i--)
#define ll long long
#define pp printf
#define hh pp("\n")
using namespace std;
const int M = 1e6 + 105;
vector<bool> bz(M, false);
vector<int> p;
void sieve(int n) {
  fo(i, 2, n) {
    if (!bz[i])
      p.push_back(i);
    for (int j = 1; i * p[j] <= n; j++) {
      int k = i * p[j];
      bz[k] = true;
      if (i % p[j] == 0)
        break;
    }
  }
}
const int N = 2e5 + 5;
int n;
ll a[N];
vector<ll> u;
void fen(ll n) {
  if (n <= 1)
    return;
  for (int i = 0; i < p.size() && (ll)p[i] * p[i] <= n; i++)
    if (n % p[i] == 0) {
      u.push_back(p[i]);
      while (n % p[i] == 0)
        n /= p[i];
    }
  if (n > 1)
    u.push_back(n);
}
unordered_set<ll> w;
ll ans;
void check(ll x) {
  ll s = 0;
  fo(i, 1, n) {
    if (a[i] >= x) {
      ll y = a[i] % x;
      s += min(y, x - y);
    } else
      s += x - a[i];
  }
  ans = min(ans, s);
}
int main() {
  srand(time(0) + clock());
  sieve(1e6);
  scanf("%d", &n);
  fo(i, 1, n) scanf("%lld", &a[i]);
  random_shuffle(a + 1, a + n + 1);
  fo(i, 1, min(n, 1000)) {
    fo(j, -1, 1) {
      ll x = a[i] + j;
      if (x > 1) {
        fen(x);
        fo(k, 0, u.size() - 1) w.insert(u[k]);
      }
    }
  }
  ans = n;
  for (auto it = w.begin(); it != w.end(); it++)
    check((*it));
  pp("%lld\n", ans);
}