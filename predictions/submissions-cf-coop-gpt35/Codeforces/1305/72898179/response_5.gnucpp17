#include <bits/stdc++.h>
using namespace std;

const int M = 1e6 + 105;
const int N = 2e5 + 5;

bool isPrime[M];
int primes[M], p0;
int factors[N][30], f0[N];

void sieve(int n) {
  for (int i = 2; i <= n; i++) {
    if (!isPrime[i])
      primes[++p0] = i;
    for (int j = 1; i * primes[j] <= n; j++) {
      int k = i * primes[j];
      isPrime[k] = true;
      if (i % primes[j] == 0)
        break;
    }
  }
}

void factorize(ll n, int idx) {
  f0[idx] = 0;
  for (int i = 1; i <= p0 && (ll)primes[i] * primes[i] <= n; i++) {
    if (n % primes[i] == 0) {
      factors[idx][++f0[idx]] = primes[i];
      while (n % primes[i] == 0)
        n /= primes[i];
    }
  }
  if (n > 1)
    factors[idx][++f0[idx]] = n;
}

ll computeAnswer(ll x, int n, ll a[]) {
  ll ans = n;
  for (int i = 1; i <= n; i++) {
    ll s = 0;
    for (int j = 1; j <= f0[i]; j++) {
      ll y = a[i] % x;
      s += min(y, x - y);
    }
    ans = min(ans, s);
  }
  return ans;
}

int main() {
  srand(time(0) + clock());
  sieve(1e6);

  int n;
  ll a[N];

  scanf("%d", &n);
  for (int i = 1; i <= n; i++)
    scanf("%lld", &a[i]);

  random_shuffle(a + 1, a + n + 1);

  for (int i = 1; i <= min(n, 1000); i++) {
    for (int j = -1; j <= 1; j++) {
      ll x = a[i] + j;
      if (x > 1)
        factorize(x, i);
    }
  }

  ll ans = n;
  for (int i = 1; i <= n; i++) {
    ans = min(ans, computeAnswer(a[i], n, a));
  }

  printf("%lld\n", ans);
  return 0;
}