#include <iostream>
#include <vector>
#include <unordered_set>
#include <unordered_map>
#include <stack>
using namespace std;

bool dfs(int i, vector<int>& visited, vector<int>& being_visited, vector<int>& TS, vector<vector<bool>>& edges) {
  stack<int> s;
  s.push(i);
  being_visited[i] = true;

  while (!s.empty()) {
    int curr = s.top();
    bool found_unvisited = false;

    for (int j = 1; j < edges.size(); ++j) {
      if (edges[curr][j]) {
        if (!visited[j]) {
          if (being_visited[j]) {
            return true;
          } else {
            s.push(j);
            being_visited[j] = true;
            found_unvisited = true;
            break;
          }
        }
      }
    }

    if (!found_unvisited) {
      s.pop();
      visited[curr] = true;
      TS.push_back(curr);
    }
  }

  return false;
}

void solve() {
  int n, m;
  cin >> n >> m;
  vector<int> visited(n + 1, false), being_visited(n + 1, false), TS;
  vector<vector<bool>> edges(n + 1, vector<bool>(n + 1, false));

  for (int i = 0; i < m; ++i) {
    int t, x, y;
    cin >> t >> x >> y;
    if (t) {
      edges[x][y] = true;
    }
    edges[x][y] = true;
    edges[y][x] = true;
  }

  for (int i = 1; i <= n; ++i) {
    bool ch = true;
    if (edges[i].empty() && edges[i].size() > 0) {
      for (auto j : edges[i]) {
        ch &= (!edges[j][i]);
      }
    } else {
      ch = false;
    }

    if (ch) {
      for (auto j : edges[i]) {
        edges[i][j] = true;
      }
    }
  }

  auto havecycle = [&]() {
    for (int i = 1; i <= n; ++i) {
      if (!visited[i]) {
        if (dfs(i, visited, being_visited, TS, edges)) {
          return true;
        }
      }
    }
    return false;
  };

  if (havecycle()) {
    cout << "NO" << endl;
    return;
  }

  cout << "YES" << endl;
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j) {
      if (edges[j][i] && TS[j] < TS[i]) {
        cout << j << " " << i << endl;
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;
  for (; t--; solve());

  return 0;
}