#include <iostream>
#include <vector>
#include <unordered_set>
#include <map>

void solve() {
    int n, m;
    std::cin >> n >> m;

    std::vector<int> visited(n + 1, 0);
    std::vector<int> being_visited(n + 1, 0);
    std::vector<int> TS;
    std::vector<std::vector<int>> g(n + 1);
    std::vector<std::unordered_set<int>> G(n + 1);

    for (int i = 0; i < m; ++i) {
        int t, x, y;
        std::cin >> t >> x >> y;
        if (t)
            g[x].push_back(y);
        G[x].insert(y);
        G[y].insert(x);
    }

    for (int i = 1; i <= n; ++i) {
        bool ch = true;
        if (g[i].empty() && !G[i].empty()) {
            for (auto j : G[i]) {
                ch &= (!G[j].count(i));
            }
        } else {
            ch = false;
        }
        if (ch) {
            for (auto j : G[i]) {
                g[i].push_back(j);
            }
        }
    }

    auto havecycle = [&]() {
        for (int i = 1; i <= n; ++i) {
            if (!visited[i]) {
                if (dfs(i, visited, being_visited, TS, g)) {
                    return true;
                }
            }
        }
        return false;
    };

    if (havecycle()) {
        std::cout << "NO" << std::endl;
        return;
    }

    std::map<int, int> node_to_position;
    TS.reserve(n);
    for (int i = 1; i <= n; ++i) {
        node_to_position[TS[i]] = i;
    }

    std::cout << "YES" << std::endl;
    for (int i = 1; i <= n; ++i) {
        for (auto j : G[i]) {
            if (node_to_position[j] < node_to_position[i])
                std::cout << j << " " << i << std::endl;
        }
    }
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(NULL);

    int t = 1;
    std::cin >> t;
    for (; t--; solve())
        ;
    return 0;
}