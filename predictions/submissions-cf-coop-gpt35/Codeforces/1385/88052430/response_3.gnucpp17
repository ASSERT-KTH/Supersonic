#include <iostream>
#include <vector>
#include <map>
#include <set>
using namespace std;

bool dfs(int i, vector<int> &visited, vector<int> &being_visited, vector<int> &TS, vector<vector<int>> &g) {
    vector<int> stack;
    stack.push_back(i);
    being_visited[i] = 1;

    while (!stack.empty()) {
        int node = stack.back();
        if (visited[node]) {
            stack.pop_back();
            continue;
        }
        visited[node] = 1;

        bool has_unvisited_child = false;
        for (auto child : g[node]) {
            if (being_visited[child]) {
                return true;
            } else if (!visited[child]) {
                stack.push_back(child);
                being_visited[child] = 1;
                has_unvisited_child = true;
            }
        }

        if (!has_unvisited_child) {
            stack.pop_back();
            TS.push_back(node);
        }
    }

    return false;
}

void solve() {
    int n, m;
    cin >> n >> m;

    vector<int> visited(n + 1, 0), being_visited(n + 1, 0), TS;
    vector<vector<int>> g(n + 1);

    for (int i = 0; i < m; ++i) {
        int t, x, y;
        cin >> t >> x >> y;

        if (t) {
            g[x].push_back(y);
        }
    }

    for (int i = 1; i <= n; ++i) {
        bool ch = true;

        if (g[i].empty()) {
            for (auto j : g[i]) {
                ch &= (!g[j].count(i));
            }
        } else {
            ch = false;
        }

        if (ch) {
            for (auto j : g[i]) {
                g[i].push_back(j);
            }
        }
    }

    auto havecycle = [&]() {
        for (int i = 1; i <= n; ++i) {
            if (!visited[i]) {
                if (dfs(i, visited, being_visited, TS, g)) {
                    return true;
                }
            }
        }
        return false;
    };

    if (havecycle()) {
        cout << "NO" << endl;
        return;
    }

    reverse(TS.begin(), TS.end());

    cout << "YES" << endl;
    for (int i = 1; i <= n; ++i) {
        for (auto j : g[i]) {
            if (j < i) {
                cout << j << " " << i << endl;
            }
        }
    }
}

int main() {
    solve();
    return 0;
}