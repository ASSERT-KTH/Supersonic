The given code is a C++ program that solves a graph problem. The main objective of the code is to check if a given directed graph contains a cycle or not. If the graph contains a cycle, it outputs "NO"; otherwise, it outputs "YES" and prints the edges of a topological sort of the graph.

Upon analyzing the code, here are some potential areas for optimization:

1. Unnecessary Header Files: The code includes several unnecessary header files, such as `<bits/stdc++.h>` and `<ext/pb_ds/tree_policy.hpp>`. These header files are not required for the functionality of the code and can be removed.

2. Namespace Usage: The code extensively uses the `using namespace std` directive, which can lead to namespace pollution and potential naming conflicts. It is generally recommended to avoid this directive and instead use the `std::` prefix when necessary.

3. Redundant Data Structures: The code uses both a `vector<vector<int>>` and a `vector<set<int>>` to represent the graph. This duplication of data structures is unnecessary and can be optimized.

4. Inefficient Graph Traversal: The code uses a recursive depth-first search (DFS) algorithm to check for cycles in the graph. However, this recursive approach can be inefficient for large graphs and can lead to stack overflow errors. An iterative approach or an optimized DFS algorithm can be used instead.

5. Unoptimized Topological Sort: The code performs a reverse topological sort of the graph using a stack (`TS`) and a map (`map`). However, this approach can be optimized to eliminate the need for the stack and map data structures.

Based on these observations, here is an optimization strategy for the code:

1. Remove unnecessary header files, such as `<bits/stdc++.h>` and `<ext/pb_ds/tree_policy.hpp>`.
2. Avoid using the `using namespace std` directive and instead use the `std::` prefix when necessary.
3. Remove the redundant `vector<set<int>>` data structure and use the `vector<vector<int>>` directly to represent the graph.
4. Optimize the graph traversal algorithm to eliminate recursion and improve efficiency.
5. Optimize the topological sort algorithm to eliminate the need for the stack and map data structures.
