#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>

using namespace std;

bool dfs(int i, vector<int>& visited, vector<int>& being_visited, vector<int>& TS, const vector<vector<int>>& g) {
    if (visited[i]) {
        return false;
    } else if (being_visited[i]) {
        return true;
    } else {
        being_visited[i] = true;
        for (const auto& j : g[i]) {
            if (dfs(j, visited, being_visited, TS, g))
                return true;
        }
    }
    being_visited[i] = false;
    visited[i] = true;
    TS.push_back(i);
    return false;
}

void solve() {
    int n, m;
    cin >> n >> m;
    vector<int> visited(n + 1, 0), being_visited(n + 1, 0), TS;
    vector<vector<int>> g(n + 1);
    vector<set<int>> G(n + 1);
    for (int i = 0; i < m; ++i) {
        int t, x, y;
        cin >> t >> x >> y;
        if (t)
            g[x].push_back(y);
        G[x].insert(y);
        G[y].insert(x);
    }
    for (int i = 1; i <= n; ++i) {
        bool ch = true;
        if (g[i].empty() && !G[i].empty()) {
            for (const auto& j : G[i]) {
                ch &= (!G[j].count(i));
            }
        } else {
            ch = false;
        }
        if (ch) {
            for (const auto& j : G[i]) {
                g[i].push_back(j);
            }
        }
    }
    auto havecycle = [&]() {
        for (int i = 1; i <= n; ++i) {
            if (!visited[i]) {
                if (dfs(i, visited, being_visited, TS, g)) {
                    return true;
                }
            }
        }
        return false;
    };
    if (havecycle()) {
        cout << "NO" << endl;
        return;
    }
    reverse(TS.begin(), TS.end());
    vector<int> node_order(n + 1);
    for (int i = 0; i < n; ++i)
        node_order[TS[i]] = i;

    cout << "YES" << endl;
    for (int i = 1; i <= n; ++i) {
        for (const auto& j : G[i]) {
            if (node_order[j] < node_order[i])
                cout << j << " " << i << endl;
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    for (cin >> t; t--; solve())
        ;
    return 0;
}