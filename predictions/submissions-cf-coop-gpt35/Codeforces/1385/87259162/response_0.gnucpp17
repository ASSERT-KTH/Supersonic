#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <unordered_set>

struct Graph {
    int n;
    std::vector<std::vector<int>> g;
    std::vector<std::pair<int, int>> directed_edges;
    std::vector<std::pair<int, int>> undirected_edges;
    std::vector<int> ts;
    std::vector<int> topo_order;
    bool possible;

    Graph(int n) : n(n), g(n + 1), topo_order(n + 1), possible(true) {}

    void addDirectedEdge(int u, int v) {
        g[u].push_back(v);
        directed_edges.push_back({u, v});
    }

    void addUndirectedEdge(int u, int v) {
        undirected_edges.push_back({u, v});
    }

    void dfs(int node, std::vector<bool>& visited) {
        std::stack<int> st;
        visited[node] = true;
        st.push(node);

        while (!st.empty()) {
            int curr = st.top();
            st.pop();
            ts.push_back(curr);

            for (int next : g[curr]) {
                if (!visited[next]) {
                    visited[next] = true;
                    st.push(next);
                }
            }
        }
    }

    void compute() {
        std::vector<bool> visited(n + 1, false);
        for (int i = 1; i <= n; i++) {
            if (!visited[i]) {
                dfs(i, visited);
            }
        }

        int order = 0;
        for (int i = n - 1; i >= 0; i--) {
            topo_order[ts[i]] = order++;
        }

        for (auto& e : directed_edges) {
            if (topo_order[e.first] > topo_order[e.second]) {
                possible = false;
                break;
            }
        }

        if (!possible) {
            std::cout << "NO" << std::endl;
            return;
        }

        std::cout << "YES" << std::endl;
        for (auto& p : directed_edges) {
            std::cout << p.first << " " << p.second << std::endl;
        }

        for (auto& p : undirected_edges) {
            if (topo_order[p.first] < topo_order[p.second]) {
                std::cout << p.first << " " << p.second << std::endl;
            } else {
                std::cout << p.second << " " << p.first << std::endl;
            }
        }
    }
};

void read_and_query() {
    int n, m;
    std::cin >> n >> m;

    Graph graph(n);

    for (int i = 0; i < m; i++) {
        int t, u, v;
        std::cin >> t >> u >> v;
        if (t == 0) {
            graph.addUndirectedEdge(u, v);
        } else {
            graph.addDirectedEdge(u, v);
        }
    }

    graph.compute();
}

int main() {
    int t;
    std::cin >> t;

    while (t--) {
        read_and_query();
    }

    return 0;
}