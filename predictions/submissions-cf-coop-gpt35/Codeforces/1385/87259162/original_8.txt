Code Analysis:
1. The code includes unnecessary header files such as `<bits/stdc++.h>`. It is recommended to include only the necessary header files to reduce the overhead of including unnecessary code.
2. The code uses `typedef` for `long long int` and `unsigned long long` types, which can lead to confusion and make the code less readable. It is better to use explicit types like `int64_t` and `uint64_t`.
3. The code defines macros for loops, which can be replaced with standard for loops to improve readability.
4. The code uses a lot of unnecessary functions for input and output operations. These functions can be replaced with standard C++ IO functions like `cin` and `cout`.
5. The code uses dynamic memory allocation with `calloc` and `free` for `topo_order` array. It is better to use a `std::vector` instead of dynamic memory allocation to avoid manual memory management.

Optimization Strategy:
1. Remove unnecessary header files and macros to reduce code complexity and improve readability.
2. Replace `typedef` with explicit types for better code readability.
3. Replace custom input and output functions with standard C++ IO functions.
4. Replace dynamic memory allocation with `std::vector` for `topo_order` array to avoid manual memory management.

Step-by-Step Explanation:
1. Remove unnecessary header files and macros:
   - Remove the line `#include <bits/stdc++.h>`.
   - Remove the macro definitions `FORb`, `FORe`, `print`, `pii`, `plli`, `pdd`, `pb`, `ins`, `CPS`, `gx`, `px`, `ps`, `pn`, `MOD1`, `MOD2`, `EPSILON`, `BIG`, `SMALL`.
2. Replace `typedef` with explicit types:
   - Replace `typedef long long int LL;` with `int64_t`.
   - Replace `typedef unsigned long long ULL;` with `uint64_t`.
3. Replace custom input and output functions:
   - Replace `void is(int &n)` with `std::cin >> n`.
   - Replace `void lis(LL &n)` with `std::cin >> n`.
   - Replace `int ss(char a[])` with `std::cin >> a`.
   - Replace `int ws(char a[])` with `std::cin >> a`.
   - Replace `void ip(int n)` with `std::cout << n`.
   - Replace `void lip(LL n)` with `std::cout << n`.
   - Replace `void stp(const char a[])` with `std::cout << a`.
4. Replace dynamic memory allocation with `std::vector`:
   - Replace `int *topo_order` with `std::vector<int> topo_order(n + 1, 0)`.
   - Remove the line `free(topo_order)`.

Optimized Code Block:

```cpp
#include <iostream>
#include <vector>
using namespace std;

const int len = 200001;
vector<int> g[len];
vector<pair<int, int>> directed_edges, undirected_edges;
vector<int> ts;
vector<int> topo_order;
bool possible;

void dfs(int node, vector<bool> &visited) {
  visited[node] = true;
  for (int next : g[node]) {
    if (!visited[next]) {
      dfs(next, visited);
    }
  }
  ts.push_back(node);
}

void compute(int n, int m) {
  vector<bool> visited(n + 1, false);
  for (int i = 1; i <= n; i++) {
    if (!visited[i]) {
      dfs(i, visited);
    }
  }
  int order = 0;
  for (int i = n - 1; i >= 0; i--) {
    topo_order[ts[i]] = order++;
  }
  for (auto &e : directed_edges) {
    if (topo_order[e.first] > topo_order[e.second]) {
      possible = false;
      break;
    }
  }
  if (!possible) {
    cout << "NO" << endl;
    return;
  }
  cout << "YES" << endl;
  for (auto &p : directed_edges) {
    cout << p.first << " " << p.second << endl;
  }
  for (auto &p : undirected_edges) {
    if (topo_order[p.first] < topo_order[p.second]) {
      cout << p.first << " " << p.second << endl;
    } else {
      cout << p.second << " " << p.first << endl;
    }
  }
}

void read_and_query() {
  int n, m;
  cin >> n >> m;
  for (int i = 0; i <= n; i++) {
    g[i].clear();
  }
  int t, u, v;
  directed_edges.clear();
  undirected_edges.clear();
  ts.clear();
  topo_order.assign(n + 1, 0);
  possible = true;
  for (int i = 0; i < m; i++) {
    cin >> t >> u >> v;
    if (t == 0) {
      undirected_edges.push_back({u, v});
    } else {
      directed_edges.push_back({u, v});
      g[u].push_back(v);
    }
  }
  compute(n, m);
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    read_and_query();
  }
  return 0;
}
```

Note: The optimized code block preserves the functionality and output of the original code while improving code readability and avoiding unnecessary memory management.