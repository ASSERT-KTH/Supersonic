#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int len = 200001;
vector<int> g[len];
vector<pair<int, int>> directed_edges, undirected_edges;
vector<int> ts;

bool possible;

void dfs(int node, vector<bool>& visited) {
    visited[node] = true;
    for (int next : g[node]) {
        if (!visited[next]) {
            dfs(next, visited);
        }
    }
    ts.push_back(node);
}

void compute(int n, int m) {
    vector<bool> visited(n + 1, false);
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            dfs(i, visited);
        }
    }

    reverse(ts.begin(), ts.end());

    vector<int> topo_order(n + 1, 0);
    for (int i = 0; i < n; i++) {
        topo_order[ts[i]] = i;
    }

    for (auto& e : directed_edges) {
        if (topo_order[e.first] > topo_order[e.second]) {
            possible = false;
            break;
        }
    }

    if (!possible) {
        cout << "NO" << endl;
        return;
    }

    cout << "YES" << endl;

    for (auto& p : directed_edges) {
        cout << p.first << " " << p.second << endl;
    }

    for (auto& p : undirected_edges) {
        if (topo_order[p.first] < topo_order[p.second]) {
            cout << p.first << " " << p.second << endl;
        } else {
            cout << p.second << " " << p.first << endl;
        }
    }
}

void read_and_query() {
    int n, m;
    cin >> n >> m;

    for (int i = 0; i <= n; i++) {
        g[i].clear();
    }

    directed_edges.clear();
    undirected_edges.clear();
    ts.clear();

    possible = true;

    for (int i = 0; i < m; i++) {
        int t, u, v;
        cin >> t >> u >> v;

        if (t == 0) {
            undirected_edges.push_back({u, v});
        } else {
            directed_edges.push_back({u, v});
            g[u].push_back(v);
        }
    }

    compute(n, m);
}

int main() {
    int t;
    cin >> t;

    while (t--) {
        read_and_query();
    }

    return 0;
}