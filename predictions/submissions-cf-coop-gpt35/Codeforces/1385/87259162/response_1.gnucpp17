#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
using namespace std;

const int len = 200001;
int g[len][2];
int directed_edges[len][2];
int undirected_edges[len][2];
stack<int> ts;
bool visited[len];
int topo_order[len];

void dfs(int node) {
  visited[node] = true;
  for (int i = 0; i < 2; i++) {
    int next = g[node][i];
    if (!visited[next]) {
      dfs(next);
    }
  }
  ts.push(node);
}

void compute(int n, int m) {
  fill(visited, visited + len, false);
  while (!ts.empty()) {
    ts.pop();
  }

  for (int i = 1; i <= n; i++) {
    if (!visited[i]) {
      dfs(i);
    }
  }

  int order = 0;
  while (!ts.empty()) {
    topo_order[ts.top()] = order++;
    ts.pop();
  }

  for (int i = 0; i < m; i++) {
    int u = directed_edges[i][0];
    int v = directed_edges[i][1];
    if (topo_order[u] > topo_order[v]) {
      cout << "NO" << endl;
      return;
    }
  }

  cout << "YES" << endl;

  for (int i = 0; i < m; i++) {
    int u = directed_edges[i][0];
    int v = directed_edges[i][1];
    cout << u << " " << v << endl;
  }

  for (int i = 0; i < m; i++) {
    int u = undirected_edges[i][0];
    int v = undirected_edges[i][1];
    if (topo_order[u] < topo_order[v]) {
      cout << u << " " << v << endl;
    } else {
      cout << v << " " << u << endl;
    }
  }
}

void read_and_query() {
  int n, m;
  cin >> n >> m;

  for (int i = 0; i < len; i++) {
    g[i][0] = g[i][1] = 0;
    directed_edges[i][0] = directed_edges[i][1] = 0;
    undirected_edges[i][0] = undirected_edges[i][1] = 0;
  }

  for (int i = 0; i < m; i++) {
    int t, u, v;
    cin >> t >> u >> v;
    if (t == 0) {
      undirected_edges[i][0] = u;
      undirected_edges[i][1] = v;
    } else {
      directed_edges[i][0] = u;
      directed_edges[i][1] = v;
      g[u][0] = v;
    }
  }

  compute(n, m);
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    read_and_query();
  }
  return 0;
}