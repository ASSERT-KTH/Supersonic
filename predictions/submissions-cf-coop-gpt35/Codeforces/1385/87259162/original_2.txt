Code Analysis:
- The code includes unnecessary header files, such as `<bits/stdc++.h>`, which can slow down the compilation process.
- The code defines several unnecessary macros, such as `FORb`, `FORe`, `print`, `pii`, `plli`, `pdd`, `pb`, `ins`, `CPS`, `gx`, `px`, `ps`, `pn`, `MOD1`, `MOD2`, `EPSILON`, `BIG`, `SMALL`. These macros are not used in the code and should be removed.
- The code uses `typedef` for `long long int` and `unsigned long long` types, which can be replaced with the standard types `int64_t` and `uint64_t`.
- The code uses `#ifdef _WIN32` and `#else` directives for defining macros related to input/output functions. This can be replaced with standard input/output functions (`cin`, `cout`) to improve portability and readability.
- The code defines several unnecessary functions for input/output, such as `is`, `lis`, `ss`, `ws`, `ip`, `lip`, `stp`. These functions can be removed and replaced with standard input/output functions.
- The code uses a global array `vector<int> g[len]`, which is not efficient for large values of `len`. It would be better to use a dynamically allocated array or a `vector<vector<int>>` to represent the graph.
- The code uses a global variable `int *topo_order`, which is allocated using `calloc`. It would be better to use a `vector<int>` or a dynamically allocated array to store the topological order.
- The code uses a global variable `bool possible` to check if a topological order is possible. It would be better to use a local variable and return early if the order is not possible.
- The code uses `cout` for printing the output, which can be slow for large inputs. It would be better to store the output in a `stringstream` and then print it using `cout` once.
- The code uses `free` to deallocate memory, but it should use `delete` instead since the memory was allocated using `calloc`.

Optimization Strategy:
1. Remove unnecessary header files and macros.
2. Replace `typedef` for `long long int` and `unsigned long long` types with `int64_t` and `uint64_t`.
3. Replace the use of `#ifdef _WIN32` and `#else` directives with standard input/output functions.
4. Remove unnecessary input/output functions and replace them with standard input/output functions.
5. Replace the global array `vector<int> g[len]` with a dynamically allocated array or a `vector<vector<int>>`.
6. Replace the global variable `int *topo_order` with a `vector<int>` or a dynamically allocated array.
7. Use a local variable instead of the global variable `bool possible`.
8. Store the output in a `stringstream` and then print it using `cout`.
9. Replace `free` with `delete` to deallocate memory.

Step-by-Step Explanation:
1. Remove unnecessary header files and macros:
   - Remove the line `#include <bits/stdc++.h>`.
   - Remove the line `#define FORb(i, start, n) for (int i = start; i < n; i++)`.
   - Remove the line `#define FORe(i, end, n) for (int i = end; i >= n; i--)`.
   - Remove the line `#define print(arr, n) for (int i = 0; i < n; ++i) cout << arr[i] << " "`.
   - Remove the line `#define pii pair<int, int>`.
   - Remove the line `#define plli pair<LL, LL>`.
   - Remove the line `#define pdd pair<double, double>`.
   - Remove the line `#define pb(v, a) v.push_back(a)`.
   - Remove the line `#define ins(s, a) s.insert(a)`.
   - Remove the line `#define CPS (double)CLOCKS_PER_SEC`.
   - Remove the lines `#ifdef _WIN32`, `#define gx getchar`, `#define px putchar`, `#define ps putchar(' ')`, `#define pn putchar('\n')`.
   - Remove the lines `#else`, `#define gx getchar_unlocked`, `#define px putchar_unlocked`, `#define ps putchar_unlocked(' ')`, `#define pn putchar_unlocked('\n')`.
   - Remove the lines `#define MOD1 1000000007LL`, `#define MOD2 998244353LL`, `#define EPSILON 0.00001`, `#define BIG INT_MAX`, `#define SMALL INT_MIN`.
2. Replace `typedef` for `long long int` and `unsigned long long` types with `int64_t` and `uint64_t`:
   - Replace the line `typedef long long int LL` with `typedef int64_t LL`.
   - Replace the line `typedef unsigned long long ULL` with `typedef uint64_t ULL`.
3. Replace the use of `#ifdef _WIN32` and `#else` directives with standard input/output functions:
   - Replace the line `gx getchar` with `cin`.
   - Replace the line `px putchar` with `cout`.
   - Replace the line `ps putchar(' ')` with `cout << ' '`.
   - Replace the line `pn putchar('\n')` with `cout << '\n'`.
4. Remove unnecessary input/output functions and replace them with standard input/output functions:
   - Remove the function `void is(int &n)`.
   - Remove the function `void lis(LL &n)`.
   - Remove the function `int ss(char a[])`.
   - Remove the function `int ws(char a[])`.
   - Remove the function `void ip(int n)`.
   - Remove the function `void lip(LL n)`.
   - Remove the function `void stp(const char a[])`.
5. Replace the global array `vector<int> g[len]` with a dynamically allocated array or a `vector<vector<int>>`:
   - Replace the line `vector<int> g[len]` with `vector<vector<int>> g(len)`.
6. Replace the global variable `int *topo_order` with a `vector<int>` or a dynamically allocated array:
   - Replace the line `int *topo_order = (int *)calloc(n + 1, sizeof(int))` with `vector<int> topo_order(n + 1)`.
   - Replace the line `free(topo_order)` with `delete[] topo_order`.
7. Use a local variable instead of the global variable `bool possible`:
   - Replace the line `bool possible` with `bool is_possible`.
   - Replace all occurrences of `possible` with `is_possible`.
   - Remove the line `possible = true`.
8. Store the output in a `stringstream` and then print it using `cout`:
   - Include the `<sstream>` header file.
   - Replace the line `cout << "NO" << endl` with `oss << "NO\n"`.
   - Replace the line `cout << "YES" << endl` with `oss << "YES\n"`.
   - Replace all occurrences of `cout << p.first << " " << p.second << endl` with `oss << p.first << " " << p.second << '\n'`.
   - Replace the line `cout` with `oss`.
   - Add the line `cout << oss.str();` before the line `return 0`.
9. Replace `free` with `delete` to deallocate memory:
   - Replace the line `free(topo_order)` with `delete[] topo_order`.

Optimized Code Block:

```cpp
#include <iostream>
#include <vector>
#include <sstream>
#include <cstdint>

using namespace std;

typedef int64_t LL;
typedef uint64_t ULL;

const int len = 200001;
vector<vector<int>> g(len);

vector<pair<int, int>> directed_edges, undirected_edges;
vector<int> ts;
vector<int> topo_order;
bool is_possible;

void dfs(int node, vector<bool>& visited) {
    visited[node] = true;
    for (int next : g[node]) {
        if (!visited[next]) {
            dfs(next, visited);
        }
    }
    ts.push_back(node);
}

void compute(int n, int m) {
    vector<bool> visited(n + 1, false);
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            dfs(i, visited);
        }
    }

    int order = 0;
    for (int i = n - 1; i >= 0; i--) {
        topo_order[ts[i]] = order++;
    }

    for (auto& e : directed_edges) {
        if (topo_order[e.first] > topo_order[e.second]) {
            is_possible = false;
            break;
        }
    }

    stringstream oss;
    if (!is_possible) {
        oss << "NO\n";
    } else {
        oss << "YES\n";
        for (auto& p : directed_edges) {
            oss << p.first << " " << p.second << '\n';
        }
        for (auto& p : undirected_edges) {
            if (topo_order[p.first] < topo_order[p.second]) {
                oss << p.first << " " << p.second << '\n';
            } else {
                oss << p.second << " " << p.first << '\n';
            }
        }
    }

    cout << oss.str();
}

void read_and_query() {
    int n, m;
    cin >> n >> m;

    for (int i = 0; i < n + 1; i++) {
        g[i].clear();
    }

    int t, u, v;
    directed_edges.clear();
    undirected_edges.clear();
    ts.clear();
    topo_order.resize(n + 1);
    is_possible = true;

    for (int i = 0; i < m; i++) {
        cin >> t >> u >> v;
        if (t == 0) {
            undirected_edges.push_back({u, v});
        } else {
            directed_edges.push_back({u, v});
            g[u].push_back(v);
        }
    }

    compute(n, m);
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        read_and_query();
    }
    return 0;
}
```

This optimized code eliminates unnecessary header files, macros, and functions. It also improves the input/output process, uses more efficient data structures, and removes unnecessary memory allocation. Overall, these changes should result in improved performance and reduced memory usage.