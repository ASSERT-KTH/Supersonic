#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

typedef long long int LL;
typedef pair<int, int> pii;

void dfs(int node, vector<bool>& visited, vector<vector<int>>& adjList, vector<int>& topoOrder) {
    visited[node] = true;
    for(int next : adjList[node]) {
        if(!visited[next]) {
            dfs(next, visited, adjList, topoOrder);
        }
    }
    topoOrder.push_back(node);
}

void compute(int n, int m, vector<vector<int>>& adjList, vector<pii>& directedEdges, vector<pii>& undirectedEdges) {
    vector<bool> visited(n + 1, false);
    vector<int> topoOrder;
    for(int i = 1; i <= n; i++) {
        if(!visited[i]) {
            dfs(i, visited, adjList, topoOrder);
        }
    }
    vector<int> topoIndex(n + 1);
    for(int i = 0; i < n; i++) {
        topoIndex[topoOrder[i]] = i;
    }
    bool possible = true;
    for(auto& e : directedEdges) {
        if(topoIndex[e.first] > topoIndex[e.second]) {
            possible = false;
            break;
        }
    }
    if(!possible) {
        cout << "NO" << endl;
        return;
    }
    cout << "YES" << endl;
    for(auto& p : directedEdges) {
        cout << p.first << " " << p.second << endl;
    }
    for(auto& p : undirectedEdges) {
        if(topoIndex[p.first] < topoIndex[p.second]) {
            cout << p.first << " " << p.second << endl;
        } else {
            cout << p.second << " " << p.first << endl;
        }
    }
}

void read_and_query() {
    int n, m;
    cin >> n >> m;
    vector<vector<int>> adjList(n + 1);
    vector<pii> directedEdges, undirectedEdges;
    for(int i = 0; i < m; i++) {
        int t, u, v;
        cin >> t >> u >> v;
        if(t == 0) {
            undirectedEdges.push_back({u, v});
        } else {
            directedEdges.push_back({u, v});
            adjList[u].push_back(v);
        }
    }
    compute(n, m, adjList, directedEdges, undirectedEdges);
}

int main() {
    int t;
    cin >> t;
    while(t--) {
        read_and_query();
    }
    return 0;
}