#include <iostream>
#include <vector>
#include <sstream>
#include <cstdint>

using namespace std;

typedef int64_t LL;
typedef uint64_t ULL;

const int len = 200001;
vector<vector<int>> g(len);

vector<pair<int, int>> directed_edges, undirected_edges;
vector<int> ts;
vector<int> topo_order;
bool is_possible;

void dfs(int node, vector<bool>& visited) {
    visited[node] = true;
    for (int next : g[node]) {
        if (!visited[next]) {
            dfs(next, visited);
        }
    }
    ts.push_back(node);
}

void compute(int n, int m) {
    vector<bool> visited(n + 1, false);
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            dfs(i, visited);
        }
    }

    int order = 0;
    for (int i = n - 1; i >= 0; i--) {
        topo_order[ts[i]] = order++;
    }

    for (auto& e : directed_edges) {
        if (topo_order[e.first] > topo_order[e.second]) {
            is_possible = false;
            break;
        }
    }

    stringstream oss;
    if (!is_possible) {
        oss << "NO\n";
    } else {
        oss << "YES\n";
        for (auto& p : directed_edges) {
            oss << p.first << " " << p.second << '\n';
        }
        for (auto& p : undirected_edges) {
            if (topo_order[p.first] < topo_order[p.second]) {
                oss << p.first << " " << p.second << '\n';
            } else {
                oss << p.second << " " << p.first << '\n';
            }
        }
    }

    cout << oss.str();
}

void read_and_query() {
    int n, m;
    cin >> n >> m;

    for (int i = 0; i < n + 1; i++) {
        g[i].clear();
    }

    int t, u, v;
    directed_edges.clear();
    undirected_edges.clear();
    ts.clear();
    topo_order.resize(n + 1);
    is_possible = true;

    for (int i = 0; i < m; i++) {
        cin >> t >> u >> v;
        if (t == 0) {
            undirected_edges.push_back({u, v});
        } else {
            directed_edges.push_back({u, v});
            g[u].push_back(v);
        }
    }

    compute(n, m);
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        read_and_query();
    }
    return 0;
}