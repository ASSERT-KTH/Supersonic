#include <algorithm>
#include <iostream>
#include <vector>

int main() {
  int n_sets;
  scanf("%d", &n_sets);
  
  for (int set_number = 1; set_number <= n_sets; set_number++) {
    int n, W;
    scanf("%d %d", &n, &W);

    std::vector<int> x(W+1, 0); // Vector to store the counts of remaining weights
    x[W] = 200000;

    for (int i = 0; i < n; i++) {
      int weight;
      scanf("%d", &weight);

      // Perform binary search to find the best weight
      int left = 0, right = W;
      int best_w = W, remain = W;
      while (left <= right) {
        int mid = left + (right - left) / 2;
        if (mid - weight >= 0 && x[mid - weight] > 0 && mid - weight < remain) {
          best_w = mid;
          remain = mid - weight;
          right = mid - 1;
        } else {
          left = mid + 1;
        }
      }

      // Update counts and insert new weight
      x[best_w]--;
      if (x[best_w] == 0) {
        x.erase(x.begin() + best_w);
      }
      x.insert(x.begin() + remain, 1);
    }

    printf("%d\n", 200000 - x[W]);
  }

  return 0;
}