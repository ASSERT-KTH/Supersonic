The provided code appears to be solving a problem related to range queries and updates on an array. However, the code includes unnecessary template functions, unused variables, and inefficient data structures that can be optimized. The optimization strategy can be summarized as follows:

1. Remove unnecessary template functions: The template functions `to_string` are not used in the code and can be removed to reduce unnecessary function calls.

2. Replace `array` with a simple `pair`: The `pint` type, defined as `array<int, 3>`, can be replaced with a simpler `pair<int, int>` type to reduce memory usage and improve readability.

3. Optimize data structure for range queries: The `st` array is used to store the segment tree for range queries. However, the current implementation uses a struct to represent each node of the segment tree, which requires more memory. We can optimize this by using two separate arrays to store the maximum and minimum values instead of a struct. This will reduce the memory usage and improve cache efficiency.

4. Remove redundant builds: The function `build` is called twice, which is unnecessary. We can remove the first call to `build` as it is not required.

5. Avoid unnecessary sorting: The `b` vector is sorted using `sort` function, but it is not required for the given problem. We can remove the sorting step to improve performance.

6. Optimize the range update function: The `upd` function currently uses recursion to update the range in the segment tree. This can be optimized by using an iterative approach, such as a loop or a stack-based solution, to avoid the overhead of recursive function calls.

7. Optimize the range query functions: The `qry1` and `qry2` functions can be optimized by using an iterative approach instead of recursive calls. This will improve the performance of range queries.

8. Remove unnecessary vector operations: The code uses vector operations, such as `push_back`, to add elements to the `del` vector. We can replace this with a simple loop to improve performance.
