#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int MOD = 1e9 + 7;

pair<int, int> st[1 << 20];
int ans[2e5];

void build(int l1, int x, int n) {
    st[l1] = {x, x};
}

void upd(int l1, int r1, int x, int n) {
    st[l1].first -= x;
    st[l1].second -= x;
    if (st[l1].second == -MOD) {
        st[l1].second = 0;
    }
    st[l1].second += x;
}

int qry1(int l1, int r1, int n) {
    return st[l1].first;
}

int qry2(int l1, int r1, int n) {
    return st[l1].second;
}

void solve() {
    int n1;
    cin >> n1;
    vector<pair<int, int>> b(n1);
    for (int i = 0; i < n1; i++) {
        cin >> b[i].first;
        b[i].second = i;
    }

    int n = n1 + 1;

    for (int i = 0; i < n; i++) {
        build(i, i, n);
    }

    // Counting sort
    vector<int> count(n, 0);
    for (int i = 0; i < n1; i++) {
        count[b[i].first]++;
    }
    for (int i = 1; i < n; i++) {
        count[i] += count[i - 1];
    }

    for (int i = n1 - 1; i >= 0; i--) {
        int cur = b[i].first;
        int j = b[i].second;
        int p = qry1(j + 1, j + 1, n);
        int q = qry2(0, j, n);
        int r = qry1(j + 1, n - 1, n);
        ans[j] = (p - q + r - p - 1) / 2;
        upd(j + 1, n - 1, 2, n);
    }

    for (int i = 0; i < n; i++) {
        build(i, i, n);
    }

    for (int i = 0; i < n1; i++) {
        int cur = b[i].first;
        int j = b[i].second;
        int p = qry1(j + 1, j + 1, n);
        int q = qry2(0, j, n);
        int r = qry1(j + 1, n - 1, n);
        ans[j] = max(ans[j], (p - q + r - p) / 2);
        upd(j + 1, n - 1, 2, n);
    }

    for (int i = 0; i < n1; i++) {
        cout << ans[i] << " ";
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    solve();

    return 0;
}