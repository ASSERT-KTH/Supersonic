#include <iostream>
#include <vector>
#include <algorithm>
#include <sstream>

using namespace std;

#define int long long int

const int N = 2e5;
const int MOD = 1e9 + 7;

int n;

struct node {
  int mx, mi, lz;
};

node st[1 << 20];

void apply(int i, int x, int l2, int r2) {
  st[i].mx -= x;
  st[i].mi -= x;
  if (st[i].lz == -MOD)
    st[i].lz = 0;
  st[i].lz += x;
}

void push(int i, int l2, int mid, int r2) {
  if (st[i].lz == -MOD)
    return;
  apply(2 * i, st[i].lz, l2, mid);
  apply(2 * i + 1, st[i].lz, mid + 1, r2);
  st[i].lz = -MOD;
}

void build(int l1, int x, int i = 1, int l2 = 0, int r2 = n - 1) {
  if (l2 == r2) {
    st[i].mx = x;
    st[i].mi = x;
    st[i].lz = -MOD;
    return;
  }
  int mid = (l2 + r2) / 2;
  if (l1 <= mid)
    build(l1, x, 2 * i, l2, mid);
  else
    build(l1, x, 2 * i + 1, mid + 1, r2);
  st[i].mx = max(st[2 * i].mx, st[2 * i + 1].mx);
  st[i].mi = min(st[2 * i].mi, st[2 * i + 1].mi);
  st[i].lz = -MOD;
}

void upd(int l1, int r1, int x, int i = 1, int l2 = 0, int r2 = n - 1) {
  while (true) {
    if (l1 <= l2 && r2 <= r1) {
      apply(i, x, l2, r2);
      return;
    }
    int mid = (l2 + r2) / 2;
    push(i, l2, mid, r2);
    if (l1 <= mid)
      r2 = mid;
    else
      l2 = mid + 1;
    i *= 2;
    if (r1 > mid) {
      i += 1;
      l2 = mid + 1;
    }
  }
}

int qry1(int l1, int r1, int i = 1, int l2 = 0, int r2 = n - 1) {
  while (true) {
    if (l1 <= l2 && r2 <= r1) {
      return st[i].mx;
    }
    int mid = (l2 + r2) / 2;
    push(i, l2, mid, r2);
    if (l1 <= mid)
      r2 = mid;
    else
      l2 = mid + 1;
    i *= 2;
    if (r1 > mid) {
      i += 1;
      l2 = mid + 1;
    }
  }
}

int qry2(int l1, int r1, int i = 1, int l2 = 0, int r2 = n - 1) {
  while (true) {
    if (l1 <= l2 && r2 <= r1) {
      return st[i].mi;
    }
    int mid = (l2 + r2) / 2;
    push(i, l2, mid, r2);
    if (l1 <= mid)
      r2 = mid;
    else
      l2 = mid + 1;
    i *= 2;
    if (r1 > mid) {
      i += 1;
      l2 = mid + 1;
    }
  }
}

void solve() {
  int n1;
  cin >> n1;
  int arr[n1];
  vector<pair<int, int>> b;
  for (int i = 0; i < n1; i++) {
    cin >> arr[i];
    b.push_back({arr[i], i});
  }
  n = n1 + 1;
  build(0, 0);
  sort(b.begin(), b.end());
  int ans[n1];
  for (int i = 0; i < n1; i++) {
    ans[i] = 0;
  }
  for (int i = n1 - 1; i >= 0; i--) {
    vector<int> del;
    int cur = b[i].first;
    while (i >= 0 && b[i].first == cur) {
      int j = b[i].second;
      int p = qry1(j + 1, j + 1);
      int q = qry2(0, j);
      int r = qry1(j + 1, n - 1);
      del.push_back(b[i].second);