#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int N = 2e5;
const int MOD = 1e9 + 7;
int n;
struct node {
  int max_value, min_value, lazy;
} st[1 << 20];

void apply(int i, int x, int l2, int r2) {
  st[i].max_value -= x;
  st[i].min_value -= x;
  if (st[i].lazy == -MOD)
    st[i].lazy = 0;
  st[i].lazy += x;
}

void push(int i, int l2, int mid, int r2) {
  if (st[i].lazy == -MOD)
    return;
  apply(2 * i, st[i].lazy, l2, mid);
  apply(2 * i + 1, st[i].lazy, mid + 1, r2);
  st[i].lazy = -MOD;
}

void build(int l1, int x, int i = 1, int l2 = 0, int r2 = n - 1) {
  if (l2 == r2) {
    st[i].max_value = x;
    st[i].min_value = x;
    st[i].lazy = -MOD;
    return;
  }
  int mid = (l2 + r2) / 2;
  if (l1 <= mid)
    build(l1, x, 2 * i, l2, mid);
  else
    build(l1, x, 2 * i + 1, mid + 1, r2);
  st[i].max_value = max(st[2 * i].max_value, st[2 * i + 1].max_value);
  st[i].min_value = min(st[2 * i].min_value, st[2 * i + 1].min_value);
  st[i].lazy = -MOD;
}

void upd(int l1, int r1, int x, int i = 1, int l2 = 0, int r2 = n - 1) {
  if (l1 <= l2 && r2 <= r1) {
    apply(i, x, l2, r2);
    return;
  }
  int mid = (l2 + r2) / 2;
  push(i, l2, mid, r2);
  if (l1 <= mid)
    upd(l1, r1, x, 2 * i, l2, mid);
  if (mid < r1)
    upd(l1, r1, x, 2 * i + 1, mid + 1, r2);
  st[i].max_value = max(st[2 * i].max_value, st[2 * i + 1].max_value);
  st[i].min_value = min(st[2 * i].min_value, st[2 * i + 1].min_value);
}
