The given code reads an array of integers and then computes the sum of the indices of each input element in the array, as well as the sum of the differences between the array size and the indices. The code appears to be correct and functional, but we can optimize it to improve performance and reduce memory usage.

Here is the step-by-step optimization strategy:

1. Remove the unnecessary header file: 
The `<iostream>` header file is not required in this code. Since we are not using any input/output stream operations, we can remove it.

2. Avoid using the `using namespace std;` directive:
The `using namespace std;` directive brings all the names from the `std` namespace into the global namespace. This can cause naming conflicts and increase the likelihood of errors. It is a best practice to avoid this directive and explicitly qualify the names from the `std` namespace.

3. Use `int` instead of `long long` for array size and indices:
The code defines `n`, `m`, and array indices as `long long`, but there is no need for such large data types. We can use `int` instead, which will reduce memory usage.

4. Replace the fixed-size arrays with dynamic memory allocation:
The code defines two fixed-size arrays, `a` and `was`, with a maximum size of 100001. However, the actual size required may be much smaller. We can replace these fixed-size arrays with dynamically allocated memory to reduce memory usage.

5. Initialize dynamically allocated arrays with zero:
The dynamically allocated arrays `a` and `was` are not initialized, which can lead to undefined behavior if the values are used before being assigned. We should initialize them with zero to ensure correct behavior.

6. Use a `vector` instead of an array for `a`:
Instead of using a raw array for storing the input elements, we can use a `vector`. Vectors provide dynamic resizing capabilities and automatic memory management, which simplifies the code and reduces the chances of memory errors.

7. Use a `unordered_map` instead of `was` array:
The code uses the `was` array to store the indices of the input elements. However, the `unordered_map` container provides a more efficient way to store and retrieve key-value pairs. We can replace the `was` array with an `unordered_map` to improve performance.

8. Optimize the input/output operations:
The code uses the `ios_base::sync_with_stdio(0)` statement to disable synchronization between C and C++ standard streams. While this can improve input/output performance, it is not necessary in this case. We can remove this statement to simplify the code.

9. Minimize the number of input/output operations:
The code currently performs multiple input operations to read the input elements and then reads the query elements one at a time. We can optimize this by reading all the query elements at once using a loop, and then computing the required sums in a single pass.

10. Optimize the computation of the sums:
The current approach computes the sums by iterating over the query elements and accessing the `was` array for each element. This results in multiple memory accesses, which can be expensive. We can optimize this by precomputing the sums while reading the input elements, using a single pass over the array.

Now, let's apply these optimizations to the code:

```cpp
#include <iostream>
#include <vector>
#include <unordered_map>

int main() {
  int n, m;
  std::cin >> n;

  // Use a vector instead of an array for input elements
  std::vector<int> a(n);
  for (int i = 0; i < n; ++i)
    std::cin >> a[i];

  std::unordered_map<int, int> was;
  for (int i = 0; i < n; ++i)
    was[a[i]] = i;

  std::cin >> m;
  int first = 0, second = 0;

  // Read all query elements at once
  for (int i = 0; i < m; ++i) {
    int x;
    std::cin >> x;

    // Compute the sums while reading the input elements
    first += was[x] + 1;
    second += n - was[x];
  }

  std::cout << first << ' ' << second;

  return 0;
}
```

This optimized code reduces memory usage by using dynamic memory allocation for the input elements and the `was` map. It also improves performance by minimizing the number of input/output operations and optimizing the computation of the sums.