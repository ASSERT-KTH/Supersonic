The provided code reads an integer `n` followed by an array `a` of size `n`. It then reads another integer `m` and performs some calculations using the values in `a`. Finally, it prints the results.

Upon analyzing the code, I have identified a few potential areas for optimization:

1. The `was` array is used to store the indices of the elements in `a`. However, the size of the `was` array is not optimized. It is currently set to `100001`, which is larger than necessary for most cases.

2. The code uses the `ios_base::sync_with_stdio(0)` function to improve the synchronization between C++ streams and C streams. However, this may not have a noticeable impact on performance in this particular code.

3. The loop that populates the `was` array has a time complexity of O(n). We can improve this by using a more efficient data structure to store the indices of the elements.

4. The loop that calculates the values of `first` and `second` can be optimized by avoiding repeated calculations and unnecessary additions.

Based on these observations, I propose the following optimization steps:

1. Optimize the size of the `was` array based on the maximum value in `a`.
2. Use a `unordered_map` instead of the `was` array to store the indices of the elements in `a`.
3. Remove the `ios_base::sync_with_stdio(0)` function call.
4. Optimize the calculation of `first` and `second` by avoiding repeated calculations and unnecessary additions.

Here is the optimized code:

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;
#define int long long

int n, m, a[100001];
unordered_map<int, int> was;

int main() {
  cin >> n;
  for (int i = 0; i < n; ++i)
    cin >> a[i];

  for (int i = 0; i < n; ++i)
    was[a[i]] = i;

  cin >> m;
  int first = 0, second = 0;
  while (m--) {
    int x;
    cin >> x;
    first += was[x] + 1;
    second += n - was[x];
  }

  cout << first << ' ' << second;

  return 0;
}
```

Let's go through each optimization step in detail:

1. **Optimizing the size of the `was` array**: 
   - In the original code, the size of the `was` array is set to `100001`, which is larger than necessary for most cases.
   - We can optimize the size by determining the maximum value in the `a` array and setting the size of the `was` array accordingly.
   - This ensures that the `was` array is only as large as necessary, reducing memory usage.
   
2. **Using `unordered_map` instead of the `was` array**:
   - In the original code, the `was` array is used to store the indices of the elements in `a`.
   - However, using an `unordered_map` instead of an array can provide a more efficient data structure for this purpose.
   - An `unordered_map` has an average time complexity of O(1) for insertions and lookups, which is more efficient than the O(n) time complexity of accessing an array element.
   - By using an `unordered_map`, we can improve the performance of the loop that populates the `was` array.

3. **Removing the `ios_base::sync_with_stdio(0)` function call**:
   - The `ios_base::sync_with_stdio(0)` function call is used to improve the synchronization between C++ streams and C streams.
   - However, in this particular code, it may not have a noticeable impact on performance.
   - Removing this function call eliminates unnecessary code and improves code readability.

4. **Optimizing the calculation of `first` and `second`**:
   - In the original code, the calculation of `first` and `second` involves repeated calculations and unnecessary additions.
   - We can optimize this by avoiding repeated calculations and combining the additions into a single step.
   - By optimizing this loop, we can reduce the number of operations and improve the overall performance of the code.

Overall, these optimizations aim to improve the efficiency of the code by reducing memory usage and optimizing the calculation steps.