The provided code reads an integer value `n` followed by `n` integer values into an array `a`. It then populates an array `was` such that `was[a[i]] = i` for each element `a[i]`. After that, it reads another integer value `m` and performs some calculations using the `was` array. Finally, it outputs the values of `first` and `second`.

To optimize this code, we can focus on the following aspects:

1. Avoid unnecessary memory usage: The `was` array is used to store the indices of elements in `a`. However, the size of the `was` array is unnecessarily large, as it is initialized with a size of `100001`. We can reduce the size of the `was` array to the maximum value of `a[i]` to save memory.

2. Optimize the calculation of `first` and `second`: Currently, the code iterates through the `m` values and calculates `first` and `second` using the `was` array. We can optimize this calculation by using a single loop that calculates `first` and `second` simultaneously. This way, we avoid unnecessary iterations and improve the overall performance.

3. Use `std::unordered_map` instead of an array for `was`: The current implementation uses a regular array for `was`. However, using a hash map like `std::unordered_map` can provide better performance for large input sizes. This is because the lookup time for elements in the hash map is O(1) on average, while the lookup time for an array is O(n). By using a hash map, we can improve the lookup time for elements in `was`.

Based on these optimizations, here is the optimized code:

```cpp
#include <iostream>
#include <unordered_map>

int main() {
  std::ios_base::sync_with_stdio(false);
  
  int n, m;
  std::cin >> n;
  
  int a[n];
  for (int i = 0; i < n; ++i) {
    std::cin >> a[i];
  }
  
  std::unordered_map<int, int> was;
  for (int i = 0; i < n; ++i) {
    was[a[i]] = i;
  }
  
  std::cin >> m;
  
  int first = 0, second = 0;
  while (m--) {
    int x;
    std::cin >> x;
    first += was[x] + 1;
    second += n - was[x];
  }
  
  std::cout << first << ' ' << second;
  
  return 0;
}
```

In this optimized code, we have made the following changes:

1. Removed the unnecessary `#define int long long` directive, as it is not needed in this code.
2. Replaced the `using namespace std` directive with explicit `std` namespace usage to improve code readability and avoid potential naming conflicts.
3. Used `std::unordered_map` instead of the `was` array to store the indices of elements in `a`. The `std::unordered_map` provides a more efficient lookup time for elements.
4. Removed the unnecessary initialization of the `was` array to zero. The `std::unordered_map` will automatically initialize the values to zero when accessed for the first time.
5. Replaced the `ios_base::sync_with_stdio(0)` call with `std::ios_base::sync_with_stdio(false)` to improve input/output performance by disabling the synchronization between C and C++ standard streams.

By making these optimizations, we have reduced the memory usage by using a more efficient data structure and improved the overall performance of the code.