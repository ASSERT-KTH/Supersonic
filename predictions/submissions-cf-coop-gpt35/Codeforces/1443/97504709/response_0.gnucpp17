#include <iostream>
#include <vector>

template <typename T>
std::istream &operator>>(std::istream &input, std::vector<T> &v) {
  for (T &a : v)
    input >> a;
  return input;
}

void answer(bool v) {
  constexpr const char *s[2] = {"NO", "YES"};
  std::cout << s[v] << '\n';
}

void solve(std::vector<unsigned> &a) {
  unsigned cumulative_diff = 0;
  for (unsigned i = 1; i < a.size(); ++i) {
    if (a[i - 1] < a[i]) {
      unsigned d = a[i] - a[i - 1];
      cumulative_diff += d;
    }
  }

  for (unsigned &num : a) {
    if (num < cumulative_diff) {
      answer(false);
      return;
    }
    num -= cumulative_diff;
  }

  answer(true);
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);

  size_t t;
  std::cin >> t;

  std::vector<std::vector<unsigned>> test_cases(t);
  for (size_t i = 0; i < t; ++i) {
    size_t n;
    std::cin >> n;
    test_cases[i].resize(n);
    std::cin >> test_cases[i];
  }

  for (const auto &a : test_cases) {
    solve(a);
  }

  return 0;
}