#include <iostream>
#include <vector>
#include <array>
#include <algorithm>
#include <numeric>
#include <map>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  
  int T;
  std::cin >> T;
  
  while (T--) {
    int n;
    std::cin >> n;
    
    std::vector<std::array<int, 2>> vec;
    vec.reserve(n);
    
    for (int i = 0; i < n; i++) {
      int a;
      std::cin >> a;
      vec.emplace_back(a, 0);
    }
    
    for (int i = 0; i < n; i++) {
      int b;
      std::cin >> b;
      vec[i][1] = b;
    }
    
    std::sort(vec.begin(), vec.end());
    
    std::map<int, int> timeSum;
    timeSum.reserve(n);
    
    for (const auto& p : vec) {
      timeSum.emplace(p[0], 0).first->second += p[1];
    }
    
    int total = std::accumulate(vec.begin(), vec.end(), 0,
                                [](int sum, const auto& p) {
                                  return sum + p[1];
                                });
    
    int ans = total;
    
    for (auto it = vec.begin(); it != vec.end(); ++it) {
      if (it != vec.begin() && (*it)[0] == (*(it - 1))[0])
        continue;
      
      int temp = (*it)[0] + std::max(0LL, (total - timeSum[(*it)[0]] - (*it)[0]));
      ans = std::min(ans, temp);
      
      total -= timeSum[(*it)[0]];
      timeSum.erase((*it)[0]);
    }
    
    std::cout << ans << '\n';
  }
  
  return 0;
}