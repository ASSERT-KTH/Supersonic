#include <bits/stdc++.h>
using namespace std;
#define int long long
const int INF = 1e18;
const int maxn = 100005;
int32_t main() {
  int n, m;
  cin >> n >> m;
  if (m == 0) {
    cout << "-1" << endl;
    return 0;
  }
  int adj[maxn][maxn] = {0};
  for (int i = 0; i < m; i++) {
    int a, b, w;
    cin >> a >> b >> w;
    adj[a][b] = w;
    adj[b][a] = w;
  }
  int x = 1;
  bool processed[maxn] = {false};
  int distance[maxn] = {INF};
  int p[maxn] = {-1};
  distance[x] = 0;
  using pii = pair<int, int>;
  priority_queue<pii, vector<pii>, greater<pii>> q;
  q.push({0, x});
  while (!q.empty()) {
    int a = q.top().second;
    q.pop();
    if (processed[a])
      continue;
    processed[a] = true;
    for (int b = 1; b <= n; b++) {
      int w = adj[a][b];
      if (w > 0 && distance[a] + w < distance[b]) {
        distance[b] = distance[a] + w;
        p[b] = a;
        q.push({distance[b], b});
      }
    }
  }
  if (p[n] == -1) {
    cout << "-1" << endl;
    return 0;
  }
  for (int v = n; v != x; v = p[v]) {
    cout << v << ' ';
  }
  cout << x << endl;
}