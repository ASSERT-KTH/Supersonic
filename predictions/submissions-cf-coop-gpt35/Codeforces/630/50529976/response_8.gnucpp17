#include <iostream>
#include <vector>
#include <bitset>
using namespace std;

int dx4[] = {0, 0, -1, +1};
int dy4[] = {+1, -1, 0, 0};
int dx8[] = {1, 1, 0, -1, -1, -1, 0, 1, 0};
int dy8[] = {0, 1, 1, 1, 0, -1, -1, -1, 0};

int countSetBits(int mask) {
  return bitset<sizeof(mask) * 8>(mask).count();
}

int rightmostSetBit(int mask) {
  return log2(mask & -mask);
}

int main() {
  int n;
  cin >> n;
  long long ans = 0;
  for (int i = 1; i <= 2 * n - 2 - n + 1; i++) {
    if (i == 1 || i == (2 * n - 2 - n + 1)) {
      long long temp = 1;
      int z = 2 * n - 2 - n - 1;
      while (z--) {
        temp *= 4;
      }
      temp *= 3;
      temp *= 4;
      ans += temp;
    } else {
      long long temp = 1;
      int z = 2 * n - 2 - n - 2;
      while (z--) {
        temp *= 4;
      }
      temp *= 9;
      temp *= 4;
      ans += temp;
    }
  }
  cout << ans << endl;
  return 0;
}