#include <iostream>
#include <vector>

#define el '\n'

void optimize_io() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(NULL);
}

std::vector<long long> calculate(const std::vector<long long>& arr, const std::vector<std::vector<long long>>& operations) {
    std::vector<long long> ans(arr.size(), 0);
    std::vector<long long> op(operations.size(), 0);

    for (const auto& operation : operations) {
        int x = operation[0];
        int y = operation[1];
        op[x - 1]++;
        op[y]--;
    }

    for (int i = 1; i < op.size(); i++) {
        op[i] += op[i - 1];
    }

    for (const auto& operation : operations) {
        int a = operation[2];
        int b = operation[3];
        int c = operation[4];
        ans[a - 1] += op[b - 1] * c;
        ans[a] -= op[b - 1] * c;
    }

    for (int i = 1; i < ans.size(); i++) {
        ans[i] += ans[i - 1];
    }

    std::vector<long long> result(arr.size(), 0);
    for (int i = 0; i < arr.size(); i++) {
        result[i] = ans[i] + arr[i];
    }

    return result;
}

int main() {
    optimize_io();

    int n, m, k;
    std::cin >> n >> m >> k;

    std::vector<long long> arr(n, 0);
    for (int i = 0; i < n; i++) {
        std::cin >> arr[i];
    }

    std::vector<std::vector<long long>> operations(m, std::vector<long long>(3));
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < 3; j++) {
            std::cin >> operations[i][j];
        }
    }

    std::vector<std::vector<long long>> queries(k, std::vector<long long>(2));
    for (int i = 0; i < k; i++) {
        std::cin >> queries[i][0] >> queries[i][1];
    }

    std::vector<long long> result = calculate(arr, operations);

    std::cout << result[0] + arr[0] << " ";
    for (int i = 1; i < result.size(); i++) {
        std::cout << result[i] + arr[i] << " ";
    }
    std::cout << el;

    return 0;
}