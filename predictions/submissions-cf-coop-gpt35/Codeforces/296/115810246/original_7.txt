Code Analysis:
- The code includes unnecessary header files and typedefs.
- The code uses macros for common operations like newline, PI, make_pair, push_back, etc., which can be replaced with inline functions for better performance.
- The code uses global arrays to store values, which can be replaced with local arrays to reduce memory usage.
- The code performs unnecessary operations on the "op" array, which can be optimized.
- The code performs unnecessary operations on the "ans" array, which can be optimized.
- The code uses a loop to print the output, which can be optimized.

Optimization Strategy:
1. Remove unnecessary header files and typedefs to reduce unnecessary code and improve compilation time.
2. Replace macros with inline functions for better performance.
3. Replace global arrays with local arrays to reduce memory usage.
4. Optimize the "op" array calculations to avoid unnecessary operations.
5. Optimize the "ans" array calculations to avoid unnecessary operations.
6. Optimize the loop for printing the output to improve performance.

Step-by-Step Explanation:
1. Remove unnecessary header files and typedefs:
   - The code includes the "bits/stdc++.h" header file, which includes multiple standard library header files unnecessarily. Replace it with the specific required header files.
   - The typedefs "ll" and "vi" are not used in the code. Remove them.

2. Replace macros with inline functions:
   - Replace the macro "el" with an inline function "endline()".
   - Replace the macro "PI" with an inline function "pi()".
   - Replace the macro "MP" with an inline function "make_pair()".
   - Replace the macro "pb(v)" with an inline function "push_back(v)".
   - Replace the macro "all(v)" with an inline function "all(v)".
   - Replace the macro "sz(v)" with an inline function "size(v)".
   - Replace the macro "clr(v, d)" with an inline function "clear(v, d)".

3. Replace global arrays with local arrays:
   - Replace the global arrays "a[100005]", "b[100005]", "c[100005]", "ans[100005]", and "op[100005]" with local arrays inside the main() function.

4. Optimize the "op" array calculations:
   - Instead of using a loop to read values into the "op" array, calculate the difference between the indices "x" and "y" and directly update the "op" array at those indices.
   - This will eliminate the need for the loop and reduce the number of operations.

5. Optimize the "ans" array calculations:
   - Instead of using two separate loops to calculate the "ans" array, combine the calculations into a single loop.
   - Update the "ans" array at indices "a[i] - 1" and "b[i]" by adding or subtracting the product of "op[i]" and "c[i]".
   - This will reduce the number of loops and operations.

6. Optimize the loop for printing the output:
   - Instead of using a loop to print each element of the "ans" array, combine the printing operation with the calculation of the "ans" array within a single loop.
   - Print the updated value of "ans[i] + arr[i]" directly without storing it in the "ans" array.
   - This will reduce the number of loops and operations.

Optimized Code Block:

```cpp
#include <iostream>
#include <vector>
#include <cstring>

using namespace std;

inline void endline() {
    cout << '\n';
}

inline double pi() {
    return 3.14159265359;
}

template<typename T1, typename T2>
inline pair<T1, T2> make_pair(T1 x, T2 y) {
    return {x, y};
}

template<typename T>
inline void push_back(vector<T>& v, T val) {
    v.push_back(val);
}

template<typename T>
inline auto all(const T& v) {
    return v.begin(), v.end();
}

template<typename T>
inline int size(const T& v) {
    return v.size();
}

template<typename T>
inline void clear(T& v, int d) {
    memset(v, d, sizeof(v));
}

void INPUT() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
}

void OUTPUT() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

int main() {
    INPUT();
    OUTPUT();
    int n, m, k;
    cin >> n >> m >> k;
    vector<ll> arr(n);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    vector<ll> a(m), b(m), c(m), op(m), ans(n);
    for (int i = 0; i < m; i++) {
        cin >> a[i] >> b[i] >> c[i];
    }
    for (int i = 0; i < k; i++) {
        int x, y;
        cin >> x >> y;
        op[x - 1]++;
        op[y]--;
    }
    for (int i = 1; i < m; i++) {
        op[i] += op[i - 1];
    }
    for (int i = 0; i < m; i++) {
        ans[a[i] - 1] += op[i] * c[i];
        ans[b[i]] -= op[i] * c[i];
    }
    cout << ans[0] + arr[0] << " ";
    for (int i = 1; i < n; i++) {
        ans[i] += ans[i - 1];
        cout << ans[i] + arr[i] << " ";
    }
    cout << '\n';
    return 0;
}
```

The optimized code follows the same logic as the original code but makes several changes to improve performance and reduce memory usage. The changes include removing unnecessary header files and typedefs, replacing macros with inline functions, using local arrays instead of global arrays, optimizing the calculations for the "op" and "ans" arrays, and optimizing the loop for printing the output.