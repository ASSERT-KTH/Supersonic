Upon analyzing the given code, we can identify a few potential areas for optimization:

1. Redundant Header Inclusion: The code includes the entire `<bits/stdc++.h>` header, which is not recommended as it includes a large number of unnecessary header files. We can replace it with the necessary header files only, such as `<iostream>`, `<vector>`, and `<cstring>`.

2. Global Variables: The code declares several global variables, such as `a`, `b`, `c`, `ans`, and `op`. Global variables are generally discouraged as they can lead to code complexity and potential bugs. We can move these variables into the `main()` function and pass them as parameters to the functions that require them.

3. Array Sizes: The code declares arrays `a`, `b`, `c`, `ans`, and `op` with a fixed size of 100005. However, the actual size of these arrays may be smaller than this value. We can modify the array sizes to match the actual number of elements.

4. Input/Output Operations: The code uses `cin` and `cout` for input/output operations, which are slower compared to `scanf` and `printf`. We can replace the input/output operations with the corresponding C-style functions to improve efficiency.

5. Loop Optimization: The code uses a loop to read the input values of `arr`. However, we can optimize this loop by using `memcpy` to directly copy the input values into the `arr` array.

Now, let's proceed with the optimization steps one by one:
