#include <algorithm>
#include <iostream>
#include <vector>
#include <cstring>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);

  int t;
  std::cin >> t;

  while (t--) {
    int n, m;
    std::cin >> n >> m;

    std::vector<std::vector<int>> adj(3 * n + 1);
    std::vector<bool> match(3 * n + 1, false);
    std::vector<int> matching;
    matching.reserve(n);

    for (int i = 0; i < m; i++) {
      int x, y;
      std::cin >> x >> y;
      adj[x].push_back(y);
    }

    for (int i = 1; i <= 3 * n; i++) {
      if (match[i])
        continue;

      for (int j : adj[i]) {
        if (!match[j]) {
          matching.push_back(j);
          match[j] = true;
          match[i] = true;
          break;
        }
      }
    }

    if (matching.size() >= n) {
      std::cout << "Matching\n";
      for (int i = 0; i < n; i++) {
        std::cout << matching[i] << ' ';
      }
      std::cout << '\n';
    } else {
      std::vector<int> v;
      v.reserve(n);
      for (int i = 1; i <= 3 * n; i++) {
        if (!match[i]) {
          v.push_back(i);
        }
      }

      if (v.size() >= n) {
        std::cout << "IndSet\n";
        for (int i = 0; i < n; i++) {
          std::cout << v[i] << ' ';
        }
      } else {
        std::cout << "Impossible";
      }
      std::cout << '\n';
    }
  }

  return 0;
}