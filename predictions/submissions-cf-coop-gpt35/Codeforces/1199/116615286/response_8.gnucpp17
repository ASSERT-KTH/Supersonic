#include <iostream>
#include <vector>
#include <cstring>

#define FAST ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);

const int MAX_N = 100001;
const int MAX_M = 100001;

int t, n, m;
std::vector<std::pair<int, int>> adj[MAX_N];
bool match[MAX_N];
int matching[MAX_N];

int main() {
  FAST;

  std::cin >> t;
  
  while (t--) {
    std::cin >> n >> m;
    
    for (int i = 1; i <= n; i++) {
      adj[i].clear();
      match[i] = false;
    }

    for (int i = 1; i <= m; i++) {
      int x, y;
      std::cin >> x >> y;
      adj[x].emplace_back(y, i);
    }

    int matchCount = 0;
    
    for (int i = 1; i <= n; i++) {
      if (match[i])
        continue;

      for (const auto& edge : adj[i]) {
        int nd = edge.first;
        int ed = edge.second;

        if (!match[nd]) {
          matching[i] = ed;
          matching[nd] = ed;
          match[i] = true;
          match[nd] = true;
          matchCount += 2;
          break;
        }
      }
    }

    if (matchCount >= n) {
      std::cout << "Matching\n";
      for (int i = 1; i <= n; i++) {
        std::cout << matching[i] << " ";
      }
      std::cout << '\n';
    } else {
      std::vector<int> v;
      v.reserve(n - matchCount / 2);

      for (int i = 1; i <= n; i++) {
        if (!match[i])
          v.push_back(i);
      }

      if (v.size() >= n) {
        std::cout << "IndSet\n";
        for (int i = 0; i < n; i++) {
          std::cout << v[i] << " ";
        }
      } else {
        std::cout << "Impossible";
      }
      std::cout << '\n';
    }
  }
  
  return 0;
}