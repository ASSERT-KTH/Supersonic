#include <bits/stdc++.h>
using namespace std;

#define FTB(i, a, b) for (int i = a, _b = b; i <= _b; i++)
#define FT(i, a, b) for (int i = a, _b = b; i < _b; i++)
#define FTBb(i, a, b) for (int i = a, _b = b; i >= _b; i--)
#define FTb(i, a, b) for (int i = a, _b = b; i > _b; i--)
#define endl "\n"
#define PB push_back
#define mp make_pair
#define fi first
#define se second
#define debug cout << "VL\n";
#define coYES cout << "YES\n";
#define coNO cout << "NO\n";
#define coyes cout << "yes\n";
#define cono cout << "no\n";
#define coYes cout << "Yes\n";
#define coNo cout << "No\n";
#define PI 3.1415926535897
#define lbnd(f, s, gt) lower_bound(f, s, gt)
#define ubnd(f, s, gt) upper_bound(f, s, gt)
#define y1 aghksdmlsjdfjavljvlckdfmg
#define lamtron(n) fixed << setprecision(n)
#define ALL(s) s.begin(), s.end()
#define ONLINE_JUDGE gshysrthrrthbd

typedef long long LL;
typedef pair<LL, LL> II;
typedef vector<LL> VI;
typedef vector<II> VII;
typedef vector<bool> VB;

const int MAX_N = 500;

LL n, m, ng[MAX_N + 1][MAX_N + 1], dc[MAX_N + 1][MAX_N + 1];
char a[MAX_N][MAX_N];

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif

  cin >> n >> m;
  FTB(i, 0, n - 1) FTB(j, 0, m - 1) cin >> a[i][j];

  bool isDot;
  FTB(i, 0, n - 1) {
    FTB(j, 0, m - 1) {
      isDot = (a[i][j] == '.');

      if (isDot) {
        ng[i + 1][j + 1] = ng[i + 1][j] + 1;
        dc[i + 1][j + 1] = dc[i][j + 1] + 1;
      } else {
        ng[i + 1][j + 1] = ng[i + 1][j];
        dc[i + 1][j + 1] = dc[i][j + 1];
      }
    }
  }

  LL q;
  cin >> q;
  while (q--) {
    LL t, x, b, y, res = 0;
    cin >> t >> x >> b >> y;

    int rowStart = t, rowEnd = b;
    int colStart = x, colEnd = y;
    if (a[t - 1][x - 1] == '.' && a[t - 1][y - 1] == '.') {
      rowStart++;
      colStart++;
      res--;
    }

    res += ng[rowEnd][colEnd] - ng[rowStart - 1][colEnd];
    res += dc[rowEnd][colStart] - dc[rowEnd][colStart - 1];

    cout << res << endl;
  }

  return 0;
}