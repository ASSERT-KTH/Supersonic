#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

const int MOD = 1000000007;

int power(int x, int y, int p) {
  int res = 1;
  x = x % p;
  if (x == 0)
    return 0;
  while (y > 0) {
    if (y & 1)
      res = (res * x) % p;
    y = y >> 1;
    x = (x * x) % p;
  }
  return res;
}

std::vector<int> divisors(int n) {
  std::vector<int> v;
  for (int i = 2; i <= std::sqrt(n); i++) {
    if (n % i == 0) {
      if (n / i == i)
        v.push_back(i);
      else {
        v.push_back(i);
        v.push_back(n / i);
      }
    }
  }
  return v;
}

void solve() {
  int x, y;
  std::cin >> x >> y;
  
  if (y % x != 0) {
    std::cout << 0 << std::endl;
    return;
  }
  
  if (y / x == 1) {
    std::cout << 1 << std::endl;
    return;
  }
  
  int sum = y / x;
  int ans = power(2, sum - 1, MOD);
  ans = (ans - 1 + MOD) % MOD;
  
  std::vector<int> div = divisors(sum);
  
  std::sort(div.begin(), div.end()); // Sort the divisors
  
  std::vector<int> mp(div.size(), 0); // Use a vector instead of a map
  
  for (int i = 0; i < div.size(); i++) {
    int cur = power(2, div[i] - 1, MOD);
    std::vector<int> div1 = divisors(div[i]);
    for (int p : div1) {
      cur = (cur - mp[p] + MOD) % MOD;
    }
    mp[i] = (cur - 1 + MOD) % MOD;
    ans = (ans - (cur - 1) + MOD) % MOD;
  }
  
  std::cout << ans << std::endl;
}

int main() {
  solve();
  return 0;
}