#include <bits/stdc++.h>
using namespace std;
#define mod 1000000007
#define rep(i, n) for (int i = 0; i < n; i++)
#define rep1(i, a, b) for (int i = a; i < b; i++)
#define endl "\n"
#define PI 3.14159265358979323846
#define is_pot(n) (n && !(n & (n - 1)))
#define all(v) ((v).begin()), ((v).end())
#define degreesToRadians(angleDegrees) (angleDegrees * PI / 180.0)
#define radiansToDegrees(angleRadians) (angleRadians * 180.0 / PI)
#define int long long
#define fastio                                                                 \
  ios_base::sync_with_stdio(false);                                            \
  cin.tie(NULL);
#define epsilon 1e-9
typedef long long ll;
typedef long double ld;
int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};

int power(int x, int y, int p) {
  int res = 1;
  int x_mod_p = x % p;
  if (x_mod_p == 0)
    return 0;
  while (y > 0) {
    if (y & 1)
      res = (res * x_mod_p) % p;
    y = y >> 1;
    x_mod_p = (x_mod_p * x_mod_p) % p;
  }
  return res;
}

int divisors(int n, int* div) {
  int count = 0;
  for (int i = 2; i <= sqrt(n); i++) {
    if (n % i == 0) {
      if (n / i == i)
        div[count++] = i;
      else {
        div[count++] = i;
        div[count++] = n / i;
      }
    }
  }
  return count;
}

void solve() {
  int x, y;
  cin >> x >> y;
  if (y % x != 0) {
    cout << 0 << endl;
    return;
  }
  if (y / x == 1) {
    cout << 1 << endl;
    return;
  }
  int sum = y / x;
  int ans = power(2, sum - 1, mod);
  ans = (ans - 1 + mod) % mod;
  int div[1000]; // Assuming the maximum number of divisors is 1000
  int div_size = divisors(sum, div);
  unordered_map<int, int> mp;
  for (int i = 0; i < div_size; i++) {
    int cur = power(2, div[i] - 1, mod);
    int div1[1000]; // Assuming the maximum number of divisors is 1000
    int div1_size = divisors(div[i], div1);
    for (int j = 0; j < div1_size; j++) {
      cur = (cur - mp[div1[j]] + mod) % mod;
    }
    mp[div[i]] = (cur - 1 + mod) % mod;
    ans = (ans - (cur - 1) + mod) % mod;
  }
  cout << ans << endl;
}

signed main() {
  fastio
  solve();
  return 0;
}