#include <bits/stdc++.h>
using namespace std;

const int mod = 1000000007;
const double PI = 3.14159265358979323846;
const double epsilon = 1e-9;

typedef long long ll;

int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};

int power(int x, int y, int p) {
  int res = 1;
  x = x % p;
  if (x == 0)
    return 0;
  while (y > 0) {
    if (y & 1)
      res = (res * x) % p;
    y = y >> 1;
    x = (x * x) % p;
  }
  return res;
}

vector<int> divisors(int n) {
  vector<int> v;
  for (int i = 2; i <= sqrt(n); i++) {
    if (n % i == 0) {
      if (n / i == i)
        v.push_back(i);
      else {
        v.push_back(i);
        v.push_back(n / i);
      }
    }
  }
  return v;
}

void solve() {
  int x, y;
  cin >> x >> y;
  if (y % x != 0) {
    cout << 0 << endl;
    return;
  }
  if (y / x == 1) {
    cout << 1 << endl;
    return;
  }
  int sum = y / x;
  int ans = power(2, sum - 1, mod);
  ans = (ans - 1 + mod) % mod;
  vector<int> div = divisors(sum);
  sort(div.begin(), div.end());
  int mp[100001] = {0};
  for (int i = 0; i < div.size(); i++) {
    int cur = power(2, div[i] - 1, mod);
    vector<int> div1 = divisors(div[i]);
    for (int j = 0; j < div1.size(); j++) {
      cur = (cur - mp[div1[j]] + mod) % mod;
    }
    mp[div[i]] = (cur - 1 + mod) % mod;
    ans = (ans - (cur - 1) + mod) % mod;
  }
  cout << ans << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  solve();
  return 0;
}