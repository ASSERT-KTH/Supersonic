#include <algorithm>
#include <cstdio>
using namespace std;
const int X = 1e5;

class FenwickTree {
private:
  int size;
  int *tree;

public:
  FenwickTree(int n) {
    size = n;
    tree = new int[size + 1];
    fill(tree, tree + size + 1, 0);
  }

  ~FenwickTree() {
    delete[] tree;
  }

  void update(int index, int value) {
    for (; index <= size; index += index & -index) {
      tree[index] += value;
    }
  }

  int query(int index) {
    int result = 0;
    for (; index > 0; index -= index & -index) {
      result += tree[index];
    }
    return result;
  }
};

void update(FenwickTree &tree, int l, int r, int val) {
  tree.update(l, val);
  tree.update(r + 1, -val);
}

int query(FenwickTree &tree, int index) {
  return (index % 2 == 0 ? 2 - index : -index) * tree.query(index);
}

int main() {
  int n, q;
  scanf("%d %d", &n, &q);
  int a[n];
  for (int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
  }
  getchar();

  FenwickTree tree(X);

  while (q--) {
    char s;
    int x;
    scanf("%c %d\n", &s, &x);
    if (s == '>') {
      x++;
      if (x == 0) {
        x++;
      }
      if (x > 0) {
        update(tree, x, X, 1);
      } else {
        update(tree, 1, -x, 2);
        update(tree, -x + 1, X, 1);
      }
    } else {
      x--;
      if (x == 0) {
        x--;
      }
      if (x < 0) {
        update(tree, -x, X, -1);
      } else {
        update(tree, 1, x, 2);
        update(tree, x + 1, X, -1);
      }
    }
  }

  for (int i = 0; i < n; i++) {
    int r = 0;
    if (a[i] < 0) {
      r = query(tree, -a[i]);
    } else if (a[i] > 0) {
      r = query(tree, a[i]);
    }
    printf("%d%c", a[i] * r, i == n - 1 ? '\n' : ' ');
  }

  return 0;
}