#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int mx = 2e6 + 5;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);

  int n;
  cin >> n;
  vector<int> a(n);
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
  }

  int faust = __gcd(a[0], a[1]);
  for (int i = 2; i < n; ++i) {
    faust = __gcd(faust, a[i]);
  }

  a.push_back(2);
  vector<vector<int>> dp(n + 3, vector<int>(2));

  if (faust > 1) {
    cout << "YES" << endl;
    cout << 0 << endl;
    return 0;
  }

  for (int i = 1; i <= n; ++i) {
    if (a[i] % 2 and a[i + 1] % 2) {
      if (dp[i - 1][1] != mx) {
        dp[i][0] = dp[i - 1][1];
      }
      if (dp[i - 1][0] != mx) {
        dp[i][1] = dp[i - 1][0] + 1;
      }
    } else if (a[i] % 2 and a[i + 1] % 2 == 0) {
      if (dp[i - 1][1] != mx) {
        dp[i][0] = dp[i - 1][1];
      }
      if (dp[i - 1][0] != mx) {
        dp[i][1] = dp[i - 1][0] + 2;
      }
    } else if (a[i] % 2 == 0 and a[i + 1] % 2) {
      if (dp[i - 1][0] != mx and dp[i - 1][1] != mx) {
        dp[i][0] = min(dp[i - 1][0], dp[i - 1][1]);
      } else if (dp[i - 1][1] != mx) {
        dp[i][0] = dp[i - 1][1];
      } else if (dp[i - 1][0] != mx) {
        dp[i][0] = dp[i - 1][0];
      }
      if (dp[i - 1][0] != mx and dp[i - 1][1] != mx) {
        dp[i][1] = min(dp[i - 1][1] + 2, dp[i - 1][0] + 2);
      } else if (dp[i - 1][1] != mx) {
        dp[i][1] = dp[i - 1][1] + 2;
      } else if (dp[i - 1][0] != mx) {
        dp[i][1] = dp[i - 1][0] + 2;
      }
    } else if (a[i] % 2 == 0 and a[i + 1] % 2 == 0) {
      if (dp[i - 1][0] != mx and dp[i - 1][1] != mx) {
        dp[i][0] = min(dp[i - 1][0], dp[i - 1][1]);
      } else if (dp[i - 1][1] != mx) {
        dp[i][0] = dp[i - 1][1];
      } else if (dp[i - 1][0] != mx) {
        dp[i][0] = dp[i - 1][0];
      }
      dp[i][1] = dp[i][0];
    }
  }

  cout << "YES" << endl;
  if (mx == dp[n][0]) {
    cout << dp[n][1] << endl;
  } else {
    cout << dp[n][0] << endl;
  }

  return 0;
}