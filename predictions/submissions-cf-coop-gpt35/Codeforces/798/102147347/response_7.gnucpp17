#include <iostream>
#include <vector>
#include <cstring> // for memset

#define ll long long
#define rep(i, n) for (long long(i) = 0; (i) < (n); ++(i))
#define ref(i, a, b) for (long long(i) = (a); (i) <= (b); ++(i))
#define endl '\n'
#define st first
#define nd second
#define pb push_back
#define mp make_pair

const int mx = 2e6 + 5;
const int inf = 2e9;

int gcd(int a, int b, std::vector<std::vector<int>>& gcdCache) {
  if (a == b)
    return a;
  if (a == 0)
    return b;
  if (b == 0)
    return a;
  if (a > b)
    return gcd(a - b, b, gcdCache);
  else
    return gcd(a, b - a, gcdCache);
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);

  ll n;
  std::cin >> n;

  std::vector<int> a(n);
  rep(i, n) {
    std::cin >> a[i];
  }

  std::vector<std::vector<int>> gcdCache(n + 1, std::vector<int>(n + 1));
  ref(i, 1, n) {
    ref(j, i + 1, n) {
      gcdCache[i][j] = gcd(a[i - 1], a[j - 1], gcdCache);
    }
  }

  int faust = gcdCache[1][2];
  ref(i, 3, n) {
    faust = gcd(faust, a[i - 1], gcdCache);
  }

  std::vector<std::vector<int>> dp(n + 2, std::vector<int>(2, inf));
  dp[0][1] = inf;
  dp[0][0] = 0;

  if (faust > 1) {
    std::cout << "YES" << endl;
    std::cout << 0 << endl;
    return 0;
  }

  for (int i = 1; i <= n; ++i) {
    int prev0 = dp[i - 1][0];
    int prev1 = dp[i - 1][1];

    if (a[i - 1] % 2 and a[i] % 2) {
      if (prev1 != inf) {
        dp[i][0] = prev1;
      }
      if (prev0 != inf) {
        dp[i][1] = prev0 + 1;
      }
    } else if (a[i - 1] % 2 and a[i] % 2 == 0) {
      if (prev1 != inf) {
        dp[i][0] = prev1;
      }
      if (prev0 != inf) {
        dp[i][1] = prev0 + 2;
      }
    } else if (a[i - 1] % 2 == 0 and a[i] % 2) {
      if (prev0 != inf && prev1 != inf) {
        dp[i][0] = std::min(prev0, prev1);
      } else if (prev1 != inf) {
        dp[i][0] = prev1;
      } else if (prev0 != inf) {
        dp[i][0] = prev0;
      }
      if (prev0 != inf && prev1 != inf) {
        dp[i][1] = std::min(prev1 + 2, prev0 + 2);
      } else if (prev1 != inf) {
        dp[i][1] = prev1 + 2;
      } else if (prev0 != inf) {
        dp[i][1] = prev0 + 2;
      }
    } else if (a[i - 1] % 2 == 0 and a[i] % 2 == 0) {
      if (prev0 != inf && prev1 != inf) {
        dp[i][0] = std::min(prev0, prev1);
      } else if (prev1 != inf) {
        dp[i][0] = prev1;
      } else if (prev0 != inf) {
        dp[i][0] = prev0;
      }
      dp[i][1] = dp[i][0];
    }
  }

  std::cout << "YES" << endl;
  if (inf == dp[n][0]) {
    std::cout << dp[n][1] << endl;
  } else {
    std::cout << dp[n][0] << endl;
  }

  return 0;
}