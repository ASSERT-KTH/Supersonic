#include <bits/stdc++.h>
using namespace std;

struct Node {
  string data;
  Node* next;
};

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n;
  cin >> n;

  if (n == 1) {
    cout << 0;
    return 0;
  }

  // Create a circular linked list
  Node* head = nullptr;
  Node* prev = nullptr;
  for (int i = 0; i < n; i++) {
    string x;
    cin >> x;

    Node* newNode = new Node;
    newNode->data = x;
    newNode->next = nullptr;

    if (head == nullptr) {
      head = newNode;
    } else {
      prev->next = newNode;
    }

    prev = newNode;
  }
  prev->next = head; // Make the linked list circular

  int ans = 1000001;
  int counter = 0;

  Node* current = head;
  do {
    string s = current->data;

    // Rotate the string once until it matches s
    rotate(current->data.begin(), current->data.begin() + 1, current->data.end());

    for (int j = 0; j < n; j++) {
      int z = 1; // Start with z = 1
      while (current->data != s) {
        // Rotate the string once until it matches s
        rotate(current->data.begin(), current->data.begin() + 1, current->data.end());

        counter++;
        z++;
        if (z > 50) {
          cout << -1;
          return 0;
        }
      }
      current = current->next;
    }
    ans = min(ans, counter);
    counter = 0;
  } while (current != head);

  cout << ans;

  // Free memory
  current = head;
  do {
    Node* nextNode = current->next;
    delete current;
    current = nextNode;
  } while (current != head);

  return 0;
}