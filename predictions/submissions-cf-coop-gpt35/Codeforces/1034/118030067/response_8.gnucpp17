#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

const int maxN = 15000007;

std::vector<bool> primes(maxN, true);
std::vector<int> spf(maxN);
std::vector<int> countOfFactors(maxN);

void sieve() {
    primes[0] = primes[1] = false;
    spf[0] = spf[1] = 1;
    for (int i = 2; i < maxN; i++) {
        if (primes[i]) {
            spf[i] = i;
            for (int j = i * i; j < maxN; j += i) {
                primes[j] = false;
                spf[j] = i;
            }
        }
    }
}

void factorize(int n) {
    std::set<int> primeFactors;
    while (n != 1) {
        primeFactors.insert(spf[n]);
        n /= spf[n];
    }
    for (int i : primeFactors)
        countOfFactors[i]++;
}

int gcd(int x, int y) {
    return y ? gcd(y, x % y) : x;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    sieve();

    int n;
    std::cin >> n;
    std::vector<int> v(n);
    int gcdIs = 0;
    for (int i = 0; i < n; i++) {
        std::cin >> v[i];
        gcdIs = gcd(gcdIs, v[i]);
    }
    for (int i = 0; i < n; i++) {
        v[i] /= gcdIs;
    }
    for (int eleInArray : v) {
        factorize(eleInArray);
    }
    int keep = 0;
    for (int i = 0; i < maxN; i++) {
        keep = std::max(keep, countOfFactors[i]);
    }
    keep ? (std::cout << n - keep) : (std::cout << "-1");

    return 0;
}