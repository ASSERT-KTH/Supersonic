#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;

const int maxN = 15000007;

int gcd(int x, int y) {
  return y ? gcd(y, x % y) : x;
}

void sieve(bool primes[]) {
  fill_n(primes, maxN, true);
  primes[0] = primes[1] = false;
  for (int i = 4; i < maxN; i += 2) {
    primes[i] = false;
  }
  for (int i = 3; i < maxN; i += 2) {
    if (primes[i]) {
      for (int j = i * i; j < maxN; j += i) {
        primes[j] = false;
      }
    }
  }
}

void factorize(int n, vector<int>& primeFactors) {
  while (n % 2 == 0) {
    primeFactors.push_back(2);
    n /= 2;
  }
  for (int i = 3; i <= sqrt(n); i += 2) {
    while (n % i == 0) {
      primeFactors.push_back(i);
      n /= i;
    }
  }
  if (n > 2) {
    primeFactors.push_back(n);
  }
}

void solve() {
  bool primes[maxN];
  sieve(primes);

  int n;
  cin >> n;
  vector<int> v(n);
  int gcdIs = 0;
  for (int i = 0; i < n; i++) {
    cin >> v[i];
    gcdIs = gcd(gcdIs, v[i]);
  }
  for (int i = 0; i < n; i++) {
    v[i] /= gcdIs;
  }
  vector<int> primeFactors;
  for (int eleInArray : v) {
    factorize(eleInArray, primeFactors);
  }
  int countOfFactors[maxN] = {0};
  for (int i : primeFactors) {
    countOfFactors[i]++;
  }
  int keep = *max_element(countOfFactors, countOfFactors + maxN);
  keep ? (cout << n - keep) : (cout << "-1");
}

int main() {
  solve();
  return 0;
}