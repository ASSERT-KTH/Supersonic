#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int maxN = 15000007;

vector<int> primes(maxN, 1);
vector<int> spf(maxN);
vector<int> countOfFactors(maxN);

int gcd(int x, int y) {
    return y ? gcd(y, x % y) : x;
}

void sieve() {
    primes[0] = primes[1] = 0;
    spf[0] = spf[1] = 0;
    
    for (int i = 2; i < maxN; i++) {
        spf[i] = i;
    }
    
    for (int i = 2; i < maxN; i++) {
        if (primes[i]) {
            for (int j = i * i; j < maxN; j += i) {
                primes[j] = 0;
                spf[j] = i;
            }
        }
    }
}

void factorize(int n) {
    while (n != 1) {
        countOfFactors[spf[n]]++;
        n /= spf[n];
    }
}

void solve() {
    sieve();
    
    int n;
    cin >> n;
    
    vector<int> v(n);
    
    int gcdIs = 0;
    
    for (int i = 0; i < n; i++) {
        cin >> v[i];
        gcdIs = gcd(gcdIs, v[i]);
    }
    
    for (int i = 0; i < n; i++) {
        v[i] /= gcdIs;
        factorize(v[i]);
    }
    
    int keep = *max_element(countOfFactors.begin(), countOfFactors.end());
    
    keep ? (cout << n - keep) : (cout << "-1");
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    solve();
    
    return 0;
}