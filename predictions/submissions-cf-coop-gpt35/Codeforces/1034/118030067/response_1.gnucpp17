#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <bitset>
#include <map>

using std::vector;
using std::set;
using std::pair;
using std::bitset;
using std::map;
using std::max;
using std::cin;
using std::cout;

const int maxN = 15000007;
bitset<maxN> primes;
int spf[maxN];

void sieve() {
  primes.set();
  primes[0] = primes[1] = 0;
  for (int i = 2; i < maxN; i++)
    spf[i] = i;
  for (int i = 4; i < maxN; i += 2) {
    if (i != 2)
      primes[i] = 0;
    spf[i] = 2;
  }
  for (int i = 3; i < maxN; i++) {
    if (primes[i]) {
      for (int j = i * i; j < maxN; j += i) {
        primes[j] = 0;
        spf[j] = i;
      }
    }
  }
}

void factorize(const vector<int>& v, map<int, int>& countOfFactors) {
  for (int eleInArray : v) {
    set<int> primeFactors;
    int n = eleInArray;
    while (n != 1) {
      primeFactors.insert(spf[n]);
      n /= spf[n];
    }
    for (int i : primeFactors)
      countOfFactors[i]++;
  }
}

void solve() {
  sieve();
  int n;
  cin >> n;
  vector<int> v(n);
  int gcdIs = 0;
  for (int i = 0; i < n; i++) {
    cin >> v[i];
    gcdIs = std::__gcd(gcdIs, v[i]);
  }
  for (int i = 0; i < n; i++) {
    v[i] /= gcdIs;
  }
  map<int, int> countOfFactors;
  factorize(v, countOfFactors);
  int keep = 0;
  for (auto i : countOfFactors) {
    keep = max(keep, i.second);
  }
  keep ? (cout << n - keep) : (cout << "-1");
}

int main() {
  std::ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  solve();
  return 0;
}