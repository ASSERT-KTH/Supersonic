#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <cmath>
using namespace std;

int gcd(int x, int y) {
  return y ? gcd(y, x % y) : x;
}

void solve() {
  const int maxN = 15000007;
  int spf[maxN] = {0};
  int countOfFactors[maxN] = {0};

  spf[0] = spf[1] = 0;
  for (int i = 2; i < maxN; i++) {
    spf[i] = i;
  }
  for (int i = 2; i < maxN; i++) {
    if (spf[i] == i) {
      for (int j = i * i; j < maxN; j += i) {
        if (spf[j] == j) {
          spf[j] = i;
        }
      }
    }
  }

  int n;
  cin >> n;
  vector<int> v(n);
  int gcdIs = 0;
  for (int i = 0; i < n; i++) {
    cin >> v[i];
    gcdIs = gcd(gcdIs, v[i]);
  }
  for (int i = 0; i < n; i++) {
    v[i] /= gcdIs;
  }
  for (int eleInArray : v) {
    int n = eleInArray;
    set<int> primeFactors;
    while (n != 1) {
      primeFactors.insert(spf[n]);
      n /= spf[n];
    }
    for (int i : primeFactors) {
      countOfFactors[i]++;
    }
  }
  int keep = 0;
  for (int i = 0; i < maxN; i++) {
    keep = max(keep, countOfFactors[i]);
  }
  keep ? (cout << n - keep) : (cout << "-1");
}

int main() {
  solve();
  return 0;
}