#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
using ll = long long;

void sieve(vector<int>& lpf) {
  int N = lpf.size();
  for (int i = 2; i < N; i++) {
    if (lpf[i] == 0) {
      lpf[i] = i;
      for (ll j = 1LL * i * i; j < N; j += i) {
        if (lpf[j] == 0)
          lpf[j] = i;
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int n;
  cin >> n;
  
  vector<int> arr(n);
  int mcd = 0;
  
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
    mcd = gcd(mcd, arr[i]);
  }
  
  for (int i = 0; i < n; i++)
    arr[i] /= mcd;
  
  int maxFactor = *max_element(arr.begin(), arr.end());
  vector<int> cont(maxFactor + 1);
  
  for (int i = 0; i < n; i++) {
    int num = arr[i];
    while (num > 1) {
      int f = lpf[num];
      cont[f]++;
      while (num % f == 0)
        num /= f;
    }
  }
  
  int maxi = *max_element(cont.begin(), cont.end());
  
  if (maxi == 0)
    cout << -1 << '\n';
  else
    cout << n - maxi << '\n';
    
  return 0;
}