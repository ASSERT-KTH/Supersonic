#include <iostream>
#include <algorithm>
#include <unordered_map>
using namespace std;
using ll = long long;

void sieve(int maxElement, int lpf[]) {
  for (int i = 2; i <= maxElement; i++) {
    if (lpf[i] == 0) {
      lpf[i] = i;
      for (ll j = 1LL * i * i; j <= maxElement; j += i) {
        if (lpf[j] == 0)
          lpf[j] = i;
      }
    }
  }
}

int gcd(int a, int b) {
  while (b != 0) {
    int temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}

int main() {
  int n;
  cin >> n;
  int arr[n];
  int maxElement = 0;
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
    maxElement = max(maxElement, arr[i]);
  }
  
  int lpf[maxElement + 1] = {0};
  sieve(maxElement, lpf);

  int mcd = arr[0];
  for (int i = 1; i < n; i++) {
    mcd = gcd(mcd, arr[i]);
  }
  
  for (int i = 0; i < n; i++) {
    arr[i] /= mcd;
  }

  unordered_map<int, int> cont;
  for (int i = 0; i < n; i++) {
    int num = arr[i];
    while (num > 1) {
      int f = lpf[num];
      cont[f]++;
      while (num % f == 0)
        num /= f;
    }
  }

  int maxi = 0;
  for (auto it = cont.begin(); it != cont.end(); it++) {
    maxi = max(maxi, it->second);
  }

  if (maxi == 0)
    cout << -1 << '\n';
  else
    cout << n - maxi << '\n';

  return 0;
}