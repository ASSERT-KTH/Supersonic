#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <numeric>

typedef std::pair<int, int> Point;
typedef std::pair<int, int> SlopeIntercept;
typedef std::map<int, std::set<int>> SlopeInterceptMap;

int gcd(int a, int b) {
    return std::gcd(a, b);
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0);
    std::cout.tie(0);

    int n;
    std::cin >> n;

    std::vector<Point> points(n);
    for (int i = 0; i < n; i++) {
        std::cin >> points[i].first >> points[i].second;
    }

    SlopeInterceptMap slopeInterceptMap;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            int x1 = points[i].first;
            int y1 = points[i].second;
            int x2 = points[j].first;
            int y2 = points[j].second;

            int dx = x2 - x1;
            int dy = y2 - y1;
            int d = gcd(std::abs(dx), std::abs(dy));

            int slope = (dx / d) * 1000000 + (dy / d);
            int intercept = (y1 * x2 - x1 * y2) / d;

            slopeInterceptMap[slope].insert(intercept);
        }
    }

    long long count = 0;
    for (const auto& it : slopeInterceptMap) {
        int size = it.second.size();
        count += (1LL * size * (size - 1) / 2);
    }

    long long totalPairs = 1LL * n * (n - 1) / 2;
    long long result = totalPairs - count;

    std::cout << result << std::endl;

    return 0;
}