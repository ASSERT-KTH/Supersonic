#include <iostream>
#include <unordered_map>
#include <utility>

using namespace std;

typedef pair<int, int> ip;

pair<int, int> slope(int x1, int y1, int x2, int y2) {
    int tmp1 = x2 - x1, tmp2 = y2 - y1;
    int tmp3 = __gcd(abs(tmp1), abs(tmp2));
    if (tmp1 == 0 && tmp2 == 0)
        return make_pair(0, 0);
    if (tmp1 == 0)
        return make_pair(1, 0);
    if (tmp2 == 0)
        return make_pair(0, 1);
    tmp1 /= tmp3, tmp2 /= tmp3;
    if (tmp1 < 0)
        tmp1 *= -1, tmp2 *= -1;
    return make_pair(tmp2, tmp1);
}

pair<int, int> cept(int x1, int y1, int x2, int y2) {
    int tmp1 = y2 * x1 - x2 * y1, tmp2 = x2 - x1;
    int tmp3 = __gcd(abs(tmp1), abs(tmp2));
    if (tmp1 == 0 && tmp2 == 0)
        return make_pair(0, 0);
    if (tmp1 == 0)
        return make_pair(0, 1);
    if (tmp2 == 0)
        return make_pair(x1, 0);
    tmp1 /= tmp3, tmp2 /= tmp3;
    if (tmp1 < 0)
        tmp1 *= -1, tmp2 *= -1;
    return make_pair(tmp1, tmp2);
}

int main() {
    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
    int n;
    cin >> n;
    ip a[n];
    for (int i = 0; i < n; i++) {
        cin >> a[i].first >> a[i].second;
    }
    unordered_map<pair<int, int>, int> slopeInterceptCount;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            pair<int, int> s1 = slope(a[i].first, a[i].second, a[j].first, a[j].second);
            pair<int, int> c = cept(a[i].first, a[i].second, a[j].first, a[j].second);
            slopeInterceptCount[s1]++;
        }
    }
    long long x = 0;
    for (auto it = slopeInterceptCount.begin(); it != slopeInterceptCount.end(); it++) {
        int si = it->second;
        x += 1LL * si * (si - 1) / 2;
    }
    long long si = slopeInterceptCount.size();
    cout << si * (si - 1) / 2 - x;
}