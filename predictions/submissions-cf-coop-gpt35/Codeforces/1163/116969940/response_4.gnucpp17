#include <iostream>
#include <vector>
#include <unordered_map>

template<typename T>
inline void pb(std::vector<T>& v, const T& element) {
    v.push_back(element);
}

void solve() {
    int n;
    std::cin >> n;
    
    std::vector<int> freq(n + 1, 0);
    int ans = 0;
    std::unordered_map<int, int> cnt;
    std::set<int> cst;
    
    for (int i = 0; i < n; ++i) {
        int x;
        std::cin >> x;
        
        if (cnt[freq[x]]) {
            cnt[freq[x]]--;
        }
        freq[x]++;
        cnt[freq[x]]++;
        cst.insert(x);
        
        int f = freq[x];
        int s = 0;
        int w = cnt[f];
        int y = 0;
        
        for (int j = 1; j <= n; ++j) {
            if (cnt[j] > 0) {
                if (s == 0) {
                    s = j;
                    y = cnt[j];
                } else {
                    break;
                }
            }
        }
        
        if (cst.size() == 1) {
            ans = i;
        }
        if (std::max(w, y) == i + 1 && f == 1) {
            ans = i;
        }
        if (f * w + s * y == i + 1) {
            if (y == 1) {
                if (s == 1 || s - 1 == f) {
                    ans = i;
                }
            } else if (w == 1) {
                if (f == 1 || f - 1 == s) {
                    ans = i;
                }
            } else if (y == 1 && w == 1) {
                if (std::max(f, s) - 1 == std::min(f, s) || std::min(f, s) == 1) {
                    ans = i;
                }
            }
        }
    }
    
    ans++;
    std::cout << ans << std::endl;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(NULL);
    std::cout.precision(35);
    
    solve();
    
    return 0;
}