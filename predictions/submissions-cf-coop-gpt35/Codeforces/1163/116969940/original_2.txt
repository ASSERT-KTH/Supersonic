Code Analysis:
1. The code includes unnecessary header files that are not being used.
2. The code defines unnecessary macros such as `pb`, `ld`, `ll`, `lld`, `print`, `println`, and `show`.
3. The code uses `using namespace std;` twice, which is redundant.
4. The code uses `clock()` and `CLOCKS_PER_SEC` to measure time, but it doesn't provide any meaningful information as it is not being used effectively.
5. The code initializes an array `mp` of size 100005, but it is not clear why the size is chosen as such.
6. The code uses a `multiset` to store the frequency of elements, but it also uses a separate array `mp` to keep track of the frequency, which is redundant.
7. The code uses a `map` and a `set` to keep track of the counts and distinct elements, but it is not clear why both are needed.
8. The code uses multiple if conditions to check different cases, which can be simplified.

Optimization Strategy:
1. Remove unnecessary header files.
2. Remove unnecessary macros.
3. Remove redundant code for time measurement.
4. Simplify the logic for counting frequencies and distinct elements.
5. Simplify the logic for checking different cases.

Step-by-Step Explanation:
1. Remove unnecessary header files:
   - The code includes `<bits/stdc++.h>`, which is not necessary. Instead, include only the necessary header files such as `<iostream>`, `<map>`, `<set>`, and `<algorithm>`.

2. Remove unnecessary macros:
   - The code defines macros such as `pb`, `ld`, `ll`, `lld`, `print`, `println`, and `show`, which are not used in the code. Remove these macros to make the code cleaner and easier to read.

3. Remove redundant code for time measurement:
   - The code includes a `Time()` function that measures the time taken to run the program. However, it is not used effectively. Remove the function and the corresponding time measurement code to avoid unnecessary overhead.

4. Simplify the logic for counting frequencies and distinct elements:
   - Instead of using a `multiset` and a separate array `mp` to keep track of the frequencies, use only the map `cnt` to store the frequencies. Remove the `multiset` and the array `mp`.
   - Instead of using a separate `set` to keep track of distinct elements, use the `map` `cnt` to check if an element is distinct or not. Remove the `set` `cst`.
   - Update the code to increment the frequency of an element directly in the map `cnt`, and check if the frequency is 1 to determine if the element is distinct or not.

5. Simplify the logic for checking different cases:
   - Instead of using multiple if conditions to check different cases, simplify the logic to check the conditions in a single if statement.

Optimized Code: