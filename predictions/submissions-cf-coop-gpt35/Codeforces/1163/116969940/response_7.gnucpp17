#include <iostream>
#include <vector>
#include <unordered_map>
#include <set>
#include <cstring>

using namespace std;

void solve() {
    int n;
    cin >> n;

    int mp[100005] = {0};
    int ans = 0;
    int cnt[100005] = {0};
    set<int> cst;
    int minFreq = 1e9, secondMinFreq = 1e9;

    for (int i = 0; i < n; ++i) {
        int x;
        cin >> x;

        if (mp[x]) {
            cnt[mp[x]]--;
        }

        mp[x]++;
        cnt[mp[x]]++;
        cst.insert(x);

        if (mp[x] > 1) {
            cnt[mp[x] - 1]--;
        }

        minFreq = min(minFreq, mp[x]);
        if (mp[x] != minFreq) {
            secondMinFreq = min(secondMinFreq, mp[x]);
        }

        if (cst.size() == 1) {
            ans = i;
        }

        if (cnt[minFreq] == i + 1 && minFreq == 1) {
            ans = i;
        }

        if (minFreq * cnt[minFreq] + secondMinFreq * cnt[secondMinFreq] == i + 1) {
            if ((cnt[secondMinFreq] == 1 && (secondMinFreq == 1 || secondMinFreq - 1 == minFreq)) ||
                (cnt[minFreq] == 1 && (minFreq == 1 || minFreq - 1 == secondMinFreq)) ||
                (cnt[secondMinFreq] == 1 && cnt[minFreq] == 1 && (max(minFreq, secondMinFreq) - 1 == min(minFreq, secondMinFreq) || min(minFreq, secondMinFreq) == 1))) {
                ans = i;
            }
        }
    }

    ans++;
    cout << ans << endl;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);

    int t;
    solve();
    return 0;
}