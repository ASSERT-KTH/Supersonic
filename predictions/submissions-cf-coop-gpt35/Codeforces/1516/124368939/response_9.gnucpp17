#include <iostream>
#include <vector>
#include <cmath>

typedef long long int ll;

const ll MOD = 1e9 + 7;

ll modulo_pow(ll a, ll b) {
  ll result = 1;
  while (b > 0) {
    if (b & 1)
      result = (result * a) % MOD;
    a = (a * a) % MOD;
    b >>= 1;
  }
  return result;
}

void prefact(ll l, std::vector<ll>& fact) {
  fact[0] = 1;
  for (ll i = 1; i <= l; i++) {
    fact[i] = (fact[i - 1] * i) % MOD;
  }
}

void preinvfact(ll n, const std::vector<ll>& fact, std::vector<ll>& invfact) {
  invfact[0] = 1;
  for (int i = 1; i <= n; i++) {
    invfact[i] = modulo_pow(fact[i], MOD - 2);
  }
}

int main() {
  std::cin.tie(nullptr);
  int t;
  std::cin >> t;
  while (t--) {
    int n;
    std::cin >> n;
    std::vector<ll> v(n, 0);
    ll d = 0;
    for (int i = 0; i < n; i++) {
      std::cin >> v[i];
      d ^= v[i];
    }
    std::vector<ll> pref(n + 1);
    pref[0] = 0;
    for (int i = 1; i <= n; i++) {
      pref[i] = pref[i - 1] ^ v[i - 1];
    }
    std::vector<ll> suff(n + 2);
    suff[n + 1] = 0;
    for (int i = n; i >= 1; i--) {
      suff[i] = suff[i + 1] ^ v[i - 1];
    }
    int ans = 0;
    for (int i = 1; i <= n - 1; i++) {
      if (pref[i] == suff[i + 1]) {
        ans = 1;
        break;
      }
    }
    if (ans) {
      std::cout << "YES\n";
      continue;
    } else if (d == 0 && ans == 0) {
      std::cout << "NO\n";
      continue;
    }
    ll k = 0;
    ll c = 0;
    for (int i = 0; i < n; i++) {
      k ^= v[i];
      if (k == d) {
        k = 0;
        c++;
      }
    }
    if (k == 0 && c >= 3)
      std::cout << "YES\n";
    else
      std::cout << "NO\n";
  }
  return 0;
}