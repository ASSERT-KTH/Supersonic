#include <iostream>
#include <algorithm>
using namespace std;

int main() {
  long long s_n, s_m, t, N, M, x, min_n = 1, max_n, mid_n, min_m = 1, max_m,
                                  mid_m, ans = 0, col;
  cin >> N >> M;
  max_n = N;
  long long prev_n = 0;
  for (long long i = 1; i <= N; i++) {
    cin >> t;
    long long curr_n = prev_n + t;
    prev_n = curr_n;
  }
  long long prev_m = 0;
  for (long long j = 1; j <= M; j++) {
    cin >> t;
    long long curr_m = prev_m + t;
    prev_m = curr_m;
  }
  cin >> x;
  for (int n_i = 1; n_i <= N; n_i++) {
    min_m = 1;
    max_m = M;
    while (__builtin_expect(min_m <= max_m, 1)) {
      mid_m = (min_m + max_m) / 2;
      long long s_n = 10e10;
      for (int i = n_i; i <= N; i++)
        s_n = min(s_n, prev_n - prev_n[i - n_i]);
      long long s_m = 10e10;
      for (int i = mid_m; i <= M; i++)
        s_m = min(s_m, prev_m - prev_m[i - mid_m]);
      if (s_m * s_n <= x) {
        ans = max(ans, mid_m * n_i);
        min_m = mid_m + 1;
      } else
        max_m = mid_m - 1;
    }
  }
  cout << ans;
  return 0;
}