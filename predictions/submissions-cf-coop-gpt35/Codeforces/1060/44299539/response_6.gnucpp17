#include <iostream>
#include <vector>
using namespace std;

int main() {
  int N, M, x;
  cin >> N >> M;

  // Step 1: Calculate cumulative sums for n and m arrays
  vector<long long> n(N + 1), m(M + 1);
  for (int i = 1; i <= N; i++) {
    cin >> n[i];
    n[i] += n[i - 1];
  }
  for (int j = 1; j <= M; j++) {
    cin >> m[j];
    m[j] += m[j - 1];
  }

  cin >> x;
  long long ans = 0;

  // Step 3: Optimize binary search using prefix sums
  for (int n_i = 1; n_i <= N; n_i++) {
    int min_m = 1, max_m = M;
    while (min_m <= max_m) {
      int mid_m = (min_m + max_m) / 2;

      // Calculate s_n and s_m using prefix sums
      long long s_n = n[n_i] - n[n_i - 1];
      long long s_m = m[mid_m] - m[mid_m - 1];

      if (s_m * s_n <= x) {
        ans = max(ans, static_cast<long long>(mid_m * n_i));
        min_m = mid_m + 1;
      } else {
        max_m = mid_m - 1;
      }
    }
  }

  cout << ans;
  return 0;
}