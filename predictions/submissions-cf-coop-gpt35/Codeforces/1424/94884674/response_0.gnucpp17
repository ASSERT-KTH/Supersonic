#include <cstdio>
#include <cmath>
#include <cstring>

const int INF = 0x3f3f3f3f;
const double PI = acos(-1);
const double eps = 1e-8;
typedef unsigned long long ull;
typedef long long ll;

template <typename t> void read(t &x) {
  char ch = getchar();
  x = 0;
  int f = 1;
  while (!isdigit(ch)) {
    if (ch == '-')
      f = -1;
    ch = getchar();
  }
  while (isdigit(ch)) {
    x = (x << 3) + (x << 1) + (ch ^ 48);
    ch = getchar();
  }
  x = x * f;
}

#define pii pair<int, int>
#define X first
#define Y second
#define lowbit a &(-a)

using namespace std;

const int maxn = 1e6 + 10;
const int mod = 1e9 + 7;
bool prime[maxn];
int ans[maxn];

void euler(int n) {
  memset(prime, true, sizeof(prime));
  for (int i = 2; i <= sqrt(n); ++i) {
    if (prime[i]) {
      for (int j = i * i; j < n; j += i) {
        prime[j] = false;
      }
    }
  }
}

int main() {
  euler(maxn - 9);
  prime[1] = false;
  int count = 0;
  for (int i = 1; i <= maxn; ++i) {
    if (prime[i]) {
      count++;
    }
    ans[i] = count;
  }

  int t;
  read(t);
  while (t--) {
    int n;
    read(n);
    if (n <= 3) {
      printf("%d\n", n);
      continue;
    }
    int l = 1, r = ans[maxn];
    while (l <= r) {
      int mid = (r + l) / 2;
      if (prime[mid] * prime[mid] <= n)
        l = mid + 1;
      else
        r = mid - 1;
    }
    printf("%d\n", ans[n] - ans[prime[l]] + 1);
  }
  return 0;
}