#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

const int maxn = 1e6 + 10;
const int mod = 1e9 + 7;

vector<int> prime;
vector<bool> vis(maxn, false);

// Sieve of Atkin algorithm for finding prime numbers
void euler(int n) {
  for (int x = 1; x * x <= n; x++) {
    for (int y = 1; y * y <= n; y++) {
      int num = (4 * x * x) + (y * y);
      if (num <= n && (num % 12 == 1 || num % 12 == 5)) {
        vis[num] = !vis[num];
      }

      num = (3 * x * x) + (y * y);
      if (num <= n && num % 12 == 7) {
        vis[num] = !vis[num];
      }

      num = (3 * x * x) - (y * y);
      if (x > y && num <= n && num % 12 == 11) {
        vis[num] = !vis[num];
      }
    }
  }

  for (int r = 5; r * r <= n; r++) {
    if (vis[r]) {
      for (int i = r * r; i <= n; i += r * r) {
        vis[i] = false;
      }
    }
  }

  prime.push_back(2);
  prime.push_back(3);

  for (int i = 5; i <= n; i++) {
    if (vis[i]) {
      prime.push_back(i);
    }
  }
}

int main() {
  euler(maxn - 9);

  vector<int> ans(maxn, 0);
  for (int i = 1; i <= maxn; ++i) {
    ans[i] = ans[i - 1] + (int)(!vis[i]);
  }

  int t;
  scanf("%d", &t);
  while (t--) {
    int n;
    scanf("%d", &n);
    if (n <= 3) {
      printf("%d\n", n);
      continue;
    }
    int l = 1, r = prime.size() - 1;
    while (l + 1 < r) {
      int mid = (r + l) / 2;
      if ((ll)prime[mid] * prime[mid] <= (ll)n)
        l = mid;
      else
        r = mid;
    }
    printf("%d\n", ans[n] - ans[prime[l]] + 1);
  }
  return 0;
}