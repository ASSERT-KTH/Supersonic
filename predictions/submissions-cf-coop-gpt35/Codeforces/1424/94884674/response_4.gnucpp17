#include <iostream>
#include <cstring>
#include <cmath>
using namespace std;

const int INF = 0x3f3f3f3f;
const double PI = acos(-1);
const double eps = 1e-8;
typedef unsigned long long ull;
typedef long long ll;

template <typename t> void read(t &x) {
  cin >> x;
}

#define pii pair<int, int>
#define X first
#define Y second
#define lowbit a &(-a)

const int maxn = 1e6 + 10;
const int mod = 1e9 + 7;
bool isPrime[maxn];
int prime[maxn];
int ans[maxn];

void generatePrimes() {
  memset(isPrime, true, sizeof(isPrime));
  int limit = sqrt(maxn);
  for (int i = 2; i <= limit; ++i) {
    if (isPrime[i]) {
      for (int j = i * i; j <= maxn; j += i) {
        isPrime[j] = false;
      }
    }
  }
  prime[0] = 0;
  for (int i = 2; i <= maxn; ++i) {
    if (isPrime[i])
      prime[++prime[0]] = i;
  }
}

void precomputeAns() {
  ans[0] = 0;
  for (int i = 1; i <= maxn; ++i)
    ans[i] = ans[i - 1] + (int)(isPrime[i]);
}

int main() {
  generatePrimes();
  precomputeAns();
  
  int t;
  read(t);
  
  while (t--) {
    int n;
    read(n);
    
    if (n <= 3) {
      cout << n << endl;
      continue;
    }
    
    int l = 1, r = prime[0];
    while (l + 1 < r) {
      int mid = (r + l) / 2;
      if ((ll)prime[mid] * prime[mid] <= (ll)n)
        l = mid;
      else
        r = mid;
    }
    
    cout << ans[n] - ans[prime[l]] + 1 << endl;
  }
  
  return 0;
}