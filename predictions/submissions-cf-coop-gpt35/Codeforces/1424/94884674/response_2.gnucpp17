#include <bits/stdc++.h>
const int INF = 0x3f3f3f3f;
const double PI = acos(-1);
const double eps = 1e-8;
typedef unsigned long long ull;
typedef long long ll;
template <typename t> void read(t &x) {
  char ch = getchar();
  x = 0;
  int f = 1;
  while (!isdigit(ch)) {
    if (ch == '-')
      f = -1;
    ch = getchar();
  }
  while (isdigit(ch)) {
    x = (x << 3) + (x << 1) + (ch ^ 48);
    ch = getchar();
  }
  x = x * f;
}
#define pii pair<int, int>
#define X first
#define Y second
#define lowbit a &(-a)
using namespace std;
const int maxn = 1e6 + 10;
const int mod = 1e9 + 7;

bool vis[maxn];

void euler(int n) {
  memset(vis, 0, sizeof(vis));
  for (int i = 2; i * i < n; ++i) { // Optimization 2: Change loop condition
    if (!vis[i])
      for (int j = i * i; j < n; j += i) // Optimization 2: Start from i * i
        vis[j] = true;
  }
}

int main() {
  int t;
  read(t);
  while (t--) {
    int n;
    read(n);
    if (n <= 3) {
      printf("%d\n", n);
      continue;
    }
    int l = 1, r = n; // Optimization 1: Resize the range of the binary search
    while (l + 1 < r) {
      int mid = l + (r - l) / 2; // Optimization 4: Calculate mid-point
      if (!vis[mid])
        l = mid;
      else
        r = mid;
    }
    int ans = l; // Optimization 3: Remove ans array and use l directly
    printf("%d\n", ans + 1);
  }
  return 0;
}