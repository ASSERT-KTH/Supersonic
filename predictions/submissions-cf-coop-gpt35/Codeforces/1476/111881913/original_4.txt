Code Analysis:
The given code reads an integer `t` which represents the number of test cases. For each test case, it reads two integers `n` and `k`, followed by an array `v` of `n` unsigned long long integers. The code then calculates the minimum number of elements that need to be added to the array such that the sum of the elements is greater than `k` times the sum of the previous elements.

Potential Performance Bottlenecks:
1. The code uses a vector to store the array `v`, which involves memory allocation and deallocation for each test case. This can be optimized to avoid unnecessary memory operations.
2. The code calculates the sum of the elements in each iteration of the loop, which can be avoided by keeping track of the sum as a running total.
3. The code performs integer division and modulo operations, which can be expensive in terms of processor cycles.

Optimization Strategy:
1. Replace the vector `v` with a dynamically allocated array to avoid memory allocation and deallocation for each test case.
2. Keep track of the sum of the elements as a running total instead of recalculating it in each iteration.
3. Use integer arithmetic instead of floating-point arithmetic to avoid the need for division and modulo operations.
4. Avoid unnecessary conditional statements by simplifying the logic.

Step-by-Step Explanation:
1. Replace the vector `v` with a dynamically allocated array:
   - Change `vector<ull> v(n)` to `ull* v = new ull[n]`.
   - This avoids memory allocation and deallocation for each test case, improving performance.

2. Keep track of the sum of the elements as a running total:
   - Remove the line `ull sum = v[0]`.
   - Add a new variable `ull sum = 0` before the loop.
   - Inside the loop, update `sum` by adding `v[i]` to it.
   - This avoids recalculating the sum in each iteration, improving performance.

3. Use integer arithmetic instead of floating-point arithmetic:
   - Change the condition `if ((v[i] * 100) > sum * k)` to `if (v[i] > (sum * k) / 100)`.
   - This avoids the need for division and modulo operations, improving performance.

4. Simplify the logic:
   - Remove the conditional statement `if (x % k != 0)` and the corresponding else block.
   - Change `ans += (x / k) + 1; sum += (x / k + 1);` to `ans += (x + k - 1) / k; sum += (x + k - 1) / k;`.
   - This simplifies the logic and avoids unnecessary conditional statements.

Optimized Code Block:

```cpp
#include <bits/stdc++.h>
#define ull unsigned long long int
using namespace std;

int main() {
  int t;
  cin >> t;
  while (t--) {
    ull n, k;
    cin >> n >> k;
    ull* v = new ull[n];
    for (int i = 0; i < n; i++) {
      cin >> v[i];
    }
    ull ans = 0;
    ull sum = 0;
    for (int i = 0; i < n; i++) {
      sum += v[i];
      if (v[i] > (sum * k) / 100) {
        ull x = v[i] - (sum * k) / 100;
        ans += (x + k - 1) / k;
        sum += (x + k - 1) / k;
      }
    }
    cout << ans << endl;
    delete[] v;
  }
  return 0;
}
```

This optimized code eliminates the need for the vector, avoids unnecessary sum calculations, uses integer arithmetic instead of floating-point arithmetic, and simplifies the logic. It should provide improved performance and memory usage compared to the original code.