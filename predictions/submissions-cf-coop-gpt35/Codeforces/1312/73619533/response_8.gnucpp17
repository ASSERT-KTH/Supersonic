#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <set>
#include <map>

typedef long long ll;

const ll maxn = 1e6 + 5;
const ll N = 1e6;
const ll nax = 26;
const ll inf = 1000000007;

std::vector<ll> adj[nax][maxn];
std::vector<ll> good(maxn, 0);
std::vector<ll> seta;
std::vector<ll> tmp;
std::vector<ll> dp(maxn, inf);
std::vector<ll> segtree(4 * maxn);
std::vector<ll> lazy(4 * maxn);
std::vector<ll> value(maxn);

ll combine(ll x, ll y) {
    return std::min(x, y);
}

void build(ll node, ll l, ll r) {
    if (l == r) {
        segtree[node] = value[l];
        return;
    }
    ll mid = (l + r) / 2;
    build(node << 1, l, mid);
    build(node << 1 | 1, mid + 1, r);
    segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

void lazify(ll node, ll l, ll r) {
    if (lazy[node] != 0) {
        segtree[node] += lazy[node];
        if (l < r) {
            lazy[node << 1] += lazy[node];
            lazy[node << 1 | 1] += lazy[node];
        }
        lazy[node] = 0;
    }
}

void assign(ll node, ll l, ll r, ll idx, ll val) {
    lazify(node, l, r);
    if (l == r) {
        segtree[node] = val;
        return;
    }
    ll mid = (l + r) / 2;
    lazify(node << 1, l, mid);
    lazify(node << 1 | 1, mid + 1, r);
    if (l <= idx and idx <= mid)
        assign(node << 1, l, mid, idx, val);
    else
        assign(node << 1 | 1, mid + 1, r, idx, val);
    segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

void updateRange(ll node, ll l, ll r, ll a, ll b, ll val) {
    lazify(node, l, r);
    if (l > b || l > r || r < a)
        return;
    if (a <= l and r <= b) {
        segtree[node] += val;
        if (l < r) {
            lazy[node << 1] += val;
            lazy[node << 1 | 1] += val;
        }
        return;
    }
    ll mid = (l + r) / 2;
    updateRange(node << 1, l, mid, a, b, val);
    updateRange(node << 1 | 1, mid + 1, r, a, b, val);
    segtree[node] = combine(segtree[node << 1], segtree[node << 1 | 1]);
}

ll query(ll node, ll l, ll r, ll a, ll b) {
    lazify(node, l, r);
    if (l > b || a > r || l > r)
        return inf;
    if (a <= l and r <= b)
        return segtree[node];
    ll mid = (l + r) / 2;
    ll lq = query(node << 1, l, mid, a, b);
    ll rq = query(node << 1 | 1, mid + 1, r, a, b);
    return combine(lq, rq);
}

void dfs(ll node, ll par) {
    if (par != -1)
        dp[node] = std::min(dp[node], dp[par] + 1);
    if (good[node]) {
        updateRange(1, 1, N, 1, tmp.size(), 1);
        dp[node] = std::min(dp[node], query(1, 1, N, 1, tmp.size()));
    }
    tmp.push_back(dp[node]);
    assign(1, 1, N, tmp.size(), dp[node] + good[node]);
    for (ll i = 0; i < nax; i++) {
        if (!adj[i][node].empty()) {
            dfs(adj[i][node][0], node);
        }
    }
    assign(1, 1, N, tmp.size(), inf);
    tmp.pop_back();
}

void solve() {
    memset(adj, -1, sizeof adj);
    ll n, x, k;
    std::cin >> n;
    char c;
    for (ll i = 1; i <= N; i++) value[i] = inf;
    build(1, 1, N);
    for (ll i = 1; i <= n; i++) {
        std::cin >> x >> c;
        adj[c - 'a'][x].push_back(i);
    }
    std::cin >> k;
    for (ll i = 0; i < k; i++) {
        std::cin >> x;
        good[x] = 1;
        seta.push_back(x);
    }
    dp[0] = 0;
    dfs(0, -1);
    for (ll i = 0; i < k; i++) std::cout << dp[seta[i]] << " ";
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0);
    std::cout.tie(0);
    solve();
    return 0;
}