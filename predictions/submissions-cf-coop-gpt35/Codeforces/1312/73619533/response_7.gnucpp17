#include <iostream>
#include <vector>
#include <bitset>
#include <cstring>

const int SEGMENT_TREE_FACTOR = 4;
const int MAXN = 1e6 + 5;
const int N = 1e6;
const int NAX = 26;
const int HELL = 1e9 + 7;

typedef long long ll;
typedef std::pair<ll, ll> pp;

template<typename T>
class Tree {
public:
    Tree(std::vector<T>& values) : values_(values) {
        size_ = values_.size();
        segtree_ = new T[SEGMENT_TREE_FACTOR * size_];
        lazy_ = new T[SEGMENT_TREE_FACTOR * size_];
        build(1, 0, size_ - 1);
    }

    ~Tree() {
        delete[] segtree_;
        delete[] lazy_;
    }

    void updateRange(ll a, ll b, T val) {
        updateRange(1, 0, size_ - 1, a, b, val);
    }

    T query(ll a, ll b) {
        return query(1, 0, size_ - 1, a, b);
    }

private:
    void build(ll node, ll l, ll r) {
        if (l == r) {
            segtree_[node] = values_[l];
            return;
        }
        ll mid = (l + r) >> 1;
        build(node << 1, l, mid);
        build(node << 1 | 1, mid + 1, r);
        segtree_[node] = combine(segtree_[node << 1], segtree_[node << 1 | 1]);
    }

    void lazify(ll node, ll l, ll r) {
        if (lazy_[node] != 0) {
            segtree_[node] += lazy_[node];
            if (l < r) {
                lazy_[node << 1] += lazy_[node];
                lazy_[node << 1 | 1] += lazy_[node];
            }
            lazy_[node] = 0;
        }
    }

    void updateRange(ll node, ll l, ll r, ll a, ll b, T val) {
        lazify(node, l, r);
        if (l > b || l > r || r < a) {
            return;
        }
        if (a <= l && r <= b) {
            segtree_[node] += val;
            if (l < r) {
                lazy_[node << 1] += val;
                lazy_[node << 1 | 1] += val;
            }
            return;
        }
        ll mid = (l + r) >> 1;
        updateRange(node << 1, l, mid, a, b, val);
        updateRange(node << 1 | 1, mid + 1, r, a, b, val);
        segtree_[node] = combine(segtree_[node << 1], segtree_[node << 1 | 1]);
    }

    T query(ll node, ll l, ll r, ll a, ll b) {
        lazify(node, l, r);
        if (l > b || a > r || l > r) {
            return HELL;
        }
        if (a <= l && r <= b) {
            return segtree_[node];
        }
        ll mid = (l + r) >> 1;
        T lq = query(node << 1, l, mid, a, b);
        T rq = query(node << 1 | 1, mid + 1, r, a, b);
        return combine(lq, rq);
    }

    T combine(T x, T y) {
        return std::min(x, y);
    }

    std::vector<T>& values_;
    T* segtree_;
    T* lazy_;
    ll size_;
};

void dfs(ll node, ll par, std::vector<ll>& dp, std::bitset<MAXN>& good, Tree<ll>& tree, std::vector<ll>& tmp) {
  if (par != -1) {
    dp[node] = std::min(dp[node], dp[par] + 1);
  }
  if (good[node]) {
    tree.updateRange(0, tmp.size() - 1, 1);
    dp[node] = std::min(dp[node], tree.query(0, tmp.size() - 1));
  }
  tmp.push_back(dp[node]);
  tree.updateRange(tmp.size() - 1, tmp.size() - 1, dp[node] + good[node]);
  for (ll i = 0; i < NAX; i++) {
    if (adj[i][node] != -1) {
      dfs(adj[i][node], node, dp, good, tree, tmp);
    }
  }
  tree.updateRange(tmp.size() - 1, tmp.size() - 1, HELL);
  tmp.pop_back();
}

void solve() {
  memset(adj, -1, sizeof adj);
  ll n, x, k;
  std::cin >> n;
  char c;
  std::vector<ll> value(N + 1, HELL);
  std::vector<std::vector<ll>> adj(NAX, std::vector<ll>(MAXN, -1));
  std::vector<ll> dp(n + 1, HELL);
  std::bitset<MAXN> good;
  std::vector<ll> seta;
  seta.reserve(N);
  for (ll i = 1; i <= n; i++) {
    std::cin >> x >> c;
    adj[c - 'a'][x] = i;
  }
  std::cin >> k;
  for (ll i = 0; i < k; i++) {
    std::cin >> x;
    good[x] = 1;
    seta.push_back(x);
  }
  dp[0] = 0;
  std::vector<ll> tmp;
  tmp.reserve(N);
  Tree<ll> tree(dp);
  dfs(0, -1, dp, good, tree, tmp);
  for (ll i = 0; i < k; i++) {
    std::cout << dp[seta[i]] << " ";
  }
  std::cout << std::endl;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);

  int t = 1;
  while (t--) {
    solve();
  }
  return 0;
}