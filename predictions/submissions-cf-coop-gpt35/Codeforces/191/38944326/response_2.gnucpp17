#include <algorithm>
#include <cstdio>
#include <vector>

const int N = 100001;
int par[N], hev[N], dep[N], top[N], dif[N], bak[N];
int edg[N];
int ans[N][N];

void dfs(int u) {
  hev[u] = -1;
  for (int v = edg[u]; v != 0; v = edg[v]) {
    if (v == par[u]) continue;
    par[v] = u;
    dep[v] = dep[u] + 1;
    dfs(v);
    if (hev[u] == -1 || dif[v] > dif[hev[u]]) hev[u] = v;
  }
}

void dfs2(int u) {
  for (int v = edg[u]; v != 0; v = edg[v]) {
    if (v == par[u]) continue;
    top[v] = (v == hev[u]) ? top[u] : v;
    dfs2(v);
  }
}

void path(int u, int v) {
  while (true) {
    if (top[u] == top[v]) {
      if (dep[u] > dep[v]) std::swap(u, v);
      dif[u]++;
      dif[v]--;
      return;
    }
    if (dep[top[u]] > dep[top[v]]) std::swap(u, v);
    dif[top[v]]++;
    dif[v]--;
    bak[top[v]]++;
    v = par[top[v]];
  }
}

void dfs3(int u, int cnt) {
  for (int v = edg[u]; v != 0; v = edg[v]) {
    if (v == par[u]) continue;
    if (v == hev[u]) {
      ans[u][v] += cnt + dif[u];
      dfs3(v, cnt + dif[u]);
    } else {
      ans[u][v] += bak[v];
      dfs3(v, 0);
    }
  }
}

int main() {
  int n, k, u, v;
  std::scanf("%d\n", &n);

  std::fill_n(edg, n, 0);
  std::fill_n(dif, n, 0);
  std::fill_n(bak, n, 0);
  std::fill_n(&ans[0][0], N * N, 0);

  for (int i = 0; i < n - 1; i++) {
    std::scanf("%d%d", &u, &v);
    u--;
    v--;
    if (u > v) std::swap(u, v);
    edg[u] = v;
    edg[v] = u;
    ans[u][v] = 0;
  }
  par[0] = 0;
  dep[0] = 0;
  dfs(0);
  top[0] = 0;
  dfs2(0);

  std::scanf("%d\n", &k);
  while (k--) {
    std::scanf("%d%d", &u, &v);
    u--;
    v--;
    path(u, v);
  }

  dfs3(0, 0);

  std::printf("%d", ans[out[0].first][out[0].second]);
  for (int i = 1; i < n - 1; i++)
    std::printf(" %d", ans[out[i].first][out[i].second]);
  std::printf("\n");
}