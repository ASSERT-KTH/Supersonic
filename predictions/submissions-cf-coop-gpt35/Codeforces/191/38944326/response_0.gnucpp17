#include <algorithm>
#include <cstdio>
#include <unordered_map>
#include <utility>
#include <vector>
using namespace std;

const int N = 100001;

int dep[N];
int top[N];
int ans[N][N];

vector<int> edg[N];

void dfs(int u, int p, int d) {
  dep[u] = d;
  top[u] = u;
  for (int v : edg[u]) {
    if (v != p) {
      dfs(v, u, d + 1);
    }
  }
}

void path(int u, int v) {
  while (top[u] != top[v]) {
    if (dep[top[u]] > dep[top[v]]) {
      swap(u, v);
    }
    ans[top[v]][v]++;
    ans[v][top[v]]--;
    v = top[v];
    v = par[v];
  }
  if (dep[u] > dep[v]) {
    swap(u, v);
  }
  ans[u][v]++;
  ans[v][u]--;
}

int main() {
  int n, k, u, v;
  scanf("%d\n", &n);

  for (int i = 0; i < n - 1; i++) {
    scanf("%d%d", &u, &v);
    u--;
    v--;
    if (u > v)
      swap(u, v);
    edg[u].push_back(v);
    edg[v].push_back(u);
  }

  dfs(0, 0, 0);

  scanf("%d\n", &k);
  while (k--) {
    scanf("%d%d", &u, &v);
    u--;
    v--;
    path(u, v);
  }

  printf("%d", ans[0][1]);
  for (int i = 1; i < n - 1; i++)
    printf(" %d", ans[i][i + 1]);
  printf("\n");
}