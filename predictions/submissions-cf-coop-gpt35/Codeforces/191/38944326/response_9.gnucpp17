#include <algorithm>
#include <cstdio>
#include <utility>
#include <vector>
using namespace std;
const int N = 100001;
int par[N], hev[N], siz[N], dep[N], top[N], dif[N], bak[N];
vector<int> edg[N];
int ans[N][N];
void dfs(int u) {
  siz[u] = 1;
  hev[u] = -1;
  vector<int> stack;
  stack.push_back(u);
  while (!stack.empty()) {
    int node = stack.back();
    stack.pop_back();
    for (int v : edg[node]) {
      if (v == par[node])
        continue;
      par[v] = node;
      dep[v] = dep[node] + 1;
      stack.push_back(v);
      siz[u] += siz[v];
      if (hev[u] == -1 || siz[v] > siz[hev[u]])
        hev[u] = v;
    }
  }
}
void dfs2(int u) {
  vector<int> stack;
  stack.push_back(u);
  while (!stack.empty()) {
    int node = stack.back();
    stack.pop_back();
    for (int v : edg[node]) {
      if (v == par[node])
        continue;
      if (v == hev[node])
        top[v] = top[node];
      else
        top[v] = v;
      stack.push_back(v);
    }
  }
}
void path(int u, int v) {
  while (true) {
    if (top[u] == top[v]) {
      if (dep[u] > dep[v])
        swap(u, v);
      dif[u]++;
      dif[v]--;
      return;
    }
    if (dep[top[u]] > dep[top[v]])
      swap(u, v);
    dif[top[v]]++;
    dif[v]--;
    bak[top[v]]++;
    v = par[top[v]];
  }
}
void dfs3(int u, int cnt) {
  vector<int> stack;
  stack.push_back(u);
  while (!stack.empty()) {
    int node = stack.back();
    stack.pop_back();
    for (int v : edg[node]) {
      if (v == par[node])
        continue;
      if (v == hev[node]) {
        ans[min(node, v)][max(node, v)] += cnt + dif[node];
        stack.push_back(v);
        dfs3(v, cnt + dif[node]);
      } else {
        ans[min(node, v)][max(node, v)] += bak[v];
        stack.push_back(v);
        dfs3(v, 0);
      }
    }
  }
}
int main() {
  int n, k, u, v;
  scanf_s("%d\n", &n);
  for (int i = 0; i < n; i++)
    edg[i] = vector<int>();
  for (int i = 0; i < n - 1; i++) {
    scanf_s("%d%d", &u, &v);
    u--;
    v--;
    if (u > v)
      swap(u, v);
    edg[u].push_back(v);
    edg[v].push_back(u);
    out[i] = {u, v};
    ans[u][v] = 0;
  }
  par[0] = 0;
  dep[0] = 0;
  dfs(0);
  top[0] = 0;
  dfs2(0);
  fill_n(dif, n, 0);
  fill_n(bak, n, 0);
  scanf_s("%d\n", &k);
  while (k--) {
    scanf_s("%d%d", &u, &v);
    u--;
    v--;
    path(u, v);
  }
  dfs3(0, 0);
  printf_s("%d", ans[out[0].first][out[0].second]);
  for (int i = 1; i < n - 1; i++)
    printf_s(" %d", ans[out[i].first][out[i].second]);
  printf_s("\n");
}