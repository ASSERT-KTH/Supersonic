#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<long double, pii> muchie;
typedef tree<ll, null_type, less_equal<ll>, rb_tree_tag,
             tree_order_statistics_node_update>
    OST;
const ll NMAX = 100001;
const ll INF = (1LL << 60);
const ll HALF = (1LL << 59);
const ll MOD = 1000000007;
const ll BLOCK = 518;
const ll base = 31;
const ll nr_of_bits = 21;
const ll LIMIT = 1000;
int dp[BLOCK][NMAX];
int cnt[NMAX];
int lvl[NMAX][NMAX];
vector<int> v[NMAX];
int levelecu[NMAX][NMAX];
int mp[NMAX];
int l[NMAX];
int depth;
char cul[NMAX];
int cc[NMAX];

void DFS(int node, int p, int level, int lvl[][NMAX], int cnt[]) {
    lvl[level][++lvl[level][0]] = node;
    depth = max(depth, level);
    cnt[node] = v[node].size() - (node != 1);

    for (auto x : v[node]) {
        if (x == p)
            continue;
        DFS(x, node, level + 1, lvl, cnt);
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n, x, i;
    cin >> n >> x;
    int a = x;
    int b = n - x;

    for (i = 2; i <= n; i++) {
        cin >> x;
        v[x].push_back(i);
        v[i].push_back(x);
    }

    DFS(1, 0, 1, lvl, cnt);

    for (i = 1; i <= n; i++) {
        if (lvl[i][0] == 0)
            continue;
        levelecu[lvl[i][0]][++levelecu[lvl[i][0]][0]] = i;
        mp[lvl[i][0]]++;
    }

    int c = 0;
    dp[0][0] = 1;

    for (i = 1; i <= n; i++) {
        if (lvl[i][0] == 0)
            continue;

        ++c;
        cc[c] = lvl[i][0];
        int val = lvl[i][0];
        int freq = mp[val];

        for (int j = 0; j < val; j++) {
            l[j] = -1;
        }

        for (int j = 0; j <= a; j++) {
            if (dp[c - 1][j])
                l[j % val] = j;

            int rest = j % val;

            if (l[rest] != -1 && (j - l[rest]) / val <= freq) {
                dp[c][j] = 1;
            }
        }
    }

    if (dp[c][a]) {
        int cant = a;
        vector<int> sol;

        while (c > 0) {
            pii r = {cc[c], 0};
            c--;

            while (!dp[c][cant]) {
                cant -= r.first;
                r.second++;
            }

            while (r.second--)
                sol.push_back(r.first);
        }

        vector<int> alvl;

        for (auto x : sol) {
            alvl.push_back(levelecu[x][levelecu[x][0]--]);
        }

        for (auto x : alvl) {
            for (int j = 1; j <= lvl[x][0]; j++) {
                cul[lvl[x][j]] = 'a';
            }
        }

        cout << depth << "\n";

        for (int i = 1; i <= n; i++) {
            if (cul[i] != 'a')
                cul[i] = 'b';
            cout << cul[i];
        }

        cout << "\n";

        return 0;
    }

    for (int i = 1; i <= n; i++) {
        if (lvl[i][0] == 0)
            continue;
        int sz = lvl[i][0];

        if (sz <= a) {
            a -= sz;

            for (int j = 1; j <= lvl[i][0]; j++)
                cul[lvl[i][j]] = 'a';

            continue;
        }

        if (sz <= b) {
            b -= sz;

            for (int j = 1; j <= lvl[i][0]; j++)
                cul[lvl[i][j]] = 'b';

            continue;
        }

        if (a > b) {
            for (int j = 1; j <= lvl[i][0]; j++) {
                if (cnt[lvl[i][j]] > 0) {
                    cul[lvl[i][j]] = 'a';
                    a--;
                }
            }

            for (int j = 1; j <= lvl[i][0]; j++) {
                if (a && cul[lvl[i][j]] != 'a') {
                    cul[lvl[i][j]] = 'a';
                    a--;
                }
            }

            for (int j = 1; j <= lvl[i][0]; j++) {
                if (cul[lvl[i][j]] != 'a') {
                    cul[lvl[i][j]] = 'b';
                    b--;
                }
            }
        } else {
            for (int j = 1; j <= lvl[i][0]; j++) {
                if (cnt[lvl[i][j]] > 0) {
                    cul[lvl[i][j]] = 'b';
                    b--;
                }
            }

            for (int j = 1; j <= lvl[i][0]; j++) {
                if (b && cul[lvl[i][j]] != 'b') {
                    cul[lvl[i][j]] = 'b';
                    b--;
                }
            }

            for (int j = 1; j <= lvl[i][0]; j++) {
                if (cul[lvl[i][j]] != 'b') {
                    cul[lvl[i][j]] = 'a';
                    a--;
                }
            }
        }
    }

    cout << depth + 1 << "\n";

    for (int i = 1; i <= n; i++) {
        cout << cul[i];
    }

    cout << "\n";

    return 0;
}