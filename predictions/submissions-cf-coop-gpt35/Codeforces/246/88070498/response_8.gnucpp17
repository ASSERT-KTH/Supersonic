#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <limits>

typedef long long ll;
typedef long double ld;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;

inline bool isOdd(int n) {
    return (n % 2 != 0);
}

inline ll pow(ll n, ll m) {
    return std::pow(n, m);
}

int main() {
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);

    int n, m;
    std::cin >> n >> m;
    int a[n + 1];
    for (int i = 1; i <= n; i++) {
        std::cin >> a[i];
    }

    std::vector<std::vector<int>> ad(n + 1);
    std::vector<int> ad_index(n + 1, 0);
    for (int i = 0; i < m; i++) {
        int u, v;
        std::cin >> u >> v;
        ad[u].push_back(v);
        ad[v].push_back(u);
    }

    int mx = 0, mxColor = std::numeric_limits<int>::max();
    for (int color = 1; color <= n; color++) {
        std::set<int> mp;
        for (int i = ad_index[color] + 1; i < ad_index[color + 1]; i++) {
            int member = ad[color][i];
            for (auto &neighbour : ad[member]) {
                if (a[neighbour] != a[member]) {
                    mp.insert(a[neighbour]);
                }
            }
        }
        if (mp.size() == mx && color < mxColor) {
            mxColor = color;
        } else if (mp.size() > mx) {
            mx = mp.size();
            mxColor = color;
        }
        ad_index[color + 1] = ad_index[color] + sz(ad[color]);
    }

    std::cout << mxColor;

    return 0;
}