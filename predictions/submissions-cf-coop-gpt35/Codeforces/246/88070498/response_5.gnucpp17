#include <iostream>
#include <vector>
#include <unordered_map>
#include <climits>

typedef long long ll;
typedef long double ld;
typedef std::pair<int, int> pii;
typedef std::vector<int> vi;

int main() {
  std::ios_base::sync_with_stdio(0);
  std::cin.tie(0);
  std::cout.tie(0);

  int n, m;
  std::cin >> n >> m;

  int a[n + 1];
  std::vector<std::vector<int>> vk(n + 1);
  
  for (int i = 1; i <= n; i++) {
    std::cin >> a[i];
    vk[a[i]].push_back(i);
  }

  std::vector<std::vector<int>> ad(n + 1);
  
  while (m--) {
    int u, v;
    std::cin >> u >> v;
    ad[u].push_back(v);
    ad[v].push_back(u);
  }

  int mx = 0, mxColor = INT_MAX;
  std::vector<bool> mp(n + 1, false);
  
  for (int member = 1; member <= n; member++) {
    for (int neighbour : ad[member]) {
      if (a[neighbour] != a[member])
        mp[a[neighbour]] = true;
    }

    int count = 0;
    
    for (int color = 1; color <= n; color++) {
      if (mp[color])
        count++;
    }

    if (count == mx && a[member] < mxColor)
      mxColor = a[member];
    else if (count > mx) {
      mx = count;
      mxColor = a[member];
    }
    
    for (int neighbour : ad[member]) {
      if (a[neighbour] != a[member])
        mp[a[neighbour]] = false;
    }
  }

  std::cout << mxColor;

  return 0;
}