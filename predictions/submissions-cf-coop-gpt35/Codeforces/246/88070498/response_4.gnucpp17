#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <climits>

using namespace std;

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int n, m;
  cin >> n >> m;

  vector<int> a(n + 1);
  unordered_map<int, vector<int>> vk;
  
  for (int i = 1; i <= n; i++) {
    cin >> a[i];
    vk[a[i]].emplace_back(i);
  }

  vector<unordered_set<int>> ad(n + 1);

  while (m--) {
    int u, v;
    cin >> u >> v;
    ad[u].insert(v);
    ad[v].insert(u);
  }

  int mx = 0, mxColor = INT_MAX;

  for (auto color : vk) {
    unordered_set<int> mp;

    for (auto member : color.second) {
      for (auto neighbour : ad[member]) {
        if (a[neighbour] != a[member])
          mp.insert(a[neighbour]);
      }
    }

    if (mp.size() == mx && color.first < mxColor)
      mxColor = color.first;
    else if (mp.size() > mx) {
      mx = mp.size();
      mxColor = color.first;
    }
  }

  cout << mxColor;

  return 0;
}