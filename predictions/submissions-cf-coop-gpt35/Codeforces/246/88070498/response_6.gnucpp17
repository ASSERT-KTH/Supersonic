#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <climits>
using namespace std;

inline vector<int> all(const vector<int>& v) {
  return vector<int>(v.begin(), v.end());
}

inline void pb(vector<int>& v, int x) {
  v.push_back(x);
}

inline int sz(const vector<int>& x) {
  return static_cast<int>(x.size());
}

inline bool isOdd(int n) {
  return (n & 1);
}

inline long long pow(int n, int m) {
  return static_cast<long long>(powl(n, m));
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int n, m;
  cin >> n >> m;

  int* a = new int[n + 1];
  vector<vector<int>> vk(n + 1);
  for (int i = 1; i <= n; i++) {
    cin >> a[i];
    pb(vk[a[i]], i);
  }

  vector<vector<int>> ad(n + 1);
  while (m--) {
    int u, v;
    cin >> u >> v;
    pb(ad[u], v);
    pb(ad[v], u);
  }

  int mx = 0, mxColor = INT_MAX;
  for (int color = 1; color <= n; color++) {
    vector<bool> mp(n + 1, false);
    for (auto member : vk[color]) {
      for (auto neighbour : ad[member]) {
        if (a[neighbour] != a[member])
          mp[a[neighbour]] = true;
      }
    }
    if (mp.size() >= mx) {
      mx = mp.size();
      mxColor = color;
    }
  }

  cout << mxColor;

  delete[] a;

  return 0;
}