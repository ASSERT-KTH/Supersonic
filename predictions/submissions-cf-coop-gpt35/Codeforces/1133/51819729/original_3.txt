The given code appears to be a solution to a problem involving building a minimum spanning tree (MST) with some additional constraints. However, the code is quite long and contains a lot of unnecessary or redundant code and libraries. In order to optimize the code, we can focus on the following aspects:

1. Unnecessary Libraries: The code includes a large number of unnecessary libraries. We should remove the unused headers to reduce the compilation time and improve the efficiency of the code.

2. Unnecessary Macros: The code defines a large number of macros that are not used in the code. These macros should be removed to improve code readability and maintainability.

3. Unnecessary Data Structures: The code uses a DisjointSet data structure, which is not required for solving the problem. We can remove this data structure to simplify the code.

4. Redundant Computations: The code performs some redundant computations, such as sorting the neighbors of node 1 multiple times. We can optimize these computations to improve the efficiency of the code.

5. Unoptimized Graph Traversal: The code uses a recursive depth-first search (DFS) to traverse the graph. This can lead to stack overflow errors for large inputs. We can optimize the graph traversal by using an iterative approach or by using an optimized version of the DFS algorithm (e.g., using a stack instead of recursion).

6. Unnecessary Memory Allocation: The code uses dynamic memory allocation for some data structures, such as vectors and sets. We can optimize the memory allocation by using fixed-size arrays or preallocating memory for these data structures.

Based on these observations, let's proceed with optimizing the code step by step.

Step 1: Remove Unnecessary Libraries and Macros
```cpp
#pragma GCC optimize("Ofast")
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
```

Step 2: Remove Unnecessary Data Structures and Macros
```cpp
const int MAXN = 2e5 + 100;
const int MAX_NODE = MAXN;
int deg[MAXN];
int chose[MAXN];
int par[MAXN];
vector<int> g[MAXN], g_MST[MAXN];
vector<pair<int, int>> edge;
set<pair<int, int>> MST;
```

Step 3: Optimize Redundant Computations
```cpp
bool cmp(int u, int v) {
  return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
}

void build_tree(int u) {
  for (auto v : g_MST[u])
    if (par[v] == -1) {
      par[v] = u;
      build_tree(v);
    }
}

int Ares_KN() {
  int n, m, k;
  cin >> n >> m >> k;

  // ...

  if (cnt > k || MST.size() < n - 1)
    return !printf("NO");

  // ...

  return 0;
}
```

Step 4: Optimize Graph Traversal
```cpp
void dfs(int u) {
  stack<int> s;
  s.push(u);

  while (!s.empty()) {
    int v = s.top();
    s.pop();

    for (auto w : g[v])
      if (dsu.find(1) == dsu.find(w))
        continue;
      else {
        dsu.merge(dsu.find(1), dsu.find(w));
        if (v < w)
          MST.insert({v, w});
        else
          MST.insert({w, v});
        g_MST[v].push_back(w);
        g_MST[w].push_back(v);
        s.push(w);
      }
  }
}
```

Step 5: Optimize Memory Allocation
```cpp
int chose[MAXN];
int par[MAXN];
vector<int> g[MAXN], g_MST[MAXN];
vector<pair<int, int>> edge;
set<pair<int, int>> MST;
```

Step 6: Return Optimized Code
```cpp
#pragma GCC optimize("Ofast")
#include <algorithm>
#include <iostream>
#include <stack>
#include <vector>
using namespace std;

const int MAXN = 2e5 + 100;

int deg[MAXN];
int chose[MAXN];
int par[MAXN];
vector<int> g[MAXN], g_MST[MAXN];
vector<pair<int, int>> edge;
set<pair<int, int>> MST;

bool cmp(int u, int v) {
  return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
}

void dfs(int u) {
  stack<int> s;
  s.push(u);

  while (!s.empty()) {
    int v = s.top();
    s.pop();

    for (auto w : g[v])
      if (dsu.find(1) == dsu.find(w))
        continue;
      else {
        dsu.merge(dsu.find(1), dsu.find(w));
        if (v < w)
          MST.insert({v, w});
        else
          MST.insert({w, v});
        g_MST[v].push_back(w);
        g_MST[w].push_back(v);
        s.push(w);
      }
  }
}

void build_tree(int u) {
  for (auto v : g_MST[u])
    if (par[v] == -1) {
      par[v] = u;
      build_tree(v);
    }
}

int Ares_KN() {
  int n, m, k;
  cin >> n >> m >> k;

  if (deg[1] < k)
    return !printf("NO");

  sort(g[1].begin(), g[1].end(), cmp);

  int cnt = 0;
  for (auto v : g[1])
    if (deg[v] == 1)
      ++cnt;

  if (cnt > k)
    return !printf("NO");

  for (auto v : g[1])
    if (deg[v] == 1) {
      dsu.merge(dsu.find(1), dsu.find(v));
      MST.insert({1, v});
      g_MST[1].push_back(v);
      g_MST[v].push_back(1);
    } else if (dsu.find(1) != dsu.find(v)) {
      dsu.merge(dsu.find(1), dsu.find(v));
      MST.insert({