#include <algorithm>
#include <iostream>
#include <unordered_set>
#include <vector>
using namespace std;

const int MAXN = 2e5 + 100;
const int MOD = 1e9 + 7;

struct DisjointSet {
  vector<int> parent, rank;
  DisjointSet(int n) : parent(n), rank(n, 0) {
    for (int i = 0; i < n; ++i)
      make(i);
  }
  void make(int u) { parent[u] = u; };
  int find(int u) {
    if (parent[u] == u)
      return u;
    return parent[u] = find(parent[u]);
  }
  void merge(int u, int v) {
    u = find(u), v = find(v);
    if (u == v)
      return;
    if (rank[u] < rank[v])
      parent[u] = v;
    else if (rank[u] > rank[v])
      parent[v] = u;
    else
      parent[v] = u, ++rank[u];
  }
};

int deg[MAXN];
vector<int> g[MAXN], g_MST[MAXN];
vector<pair<int, int>> edge;
unordered_set<pair<int, int>> MST;

bool cmp(int u, int v) {
  return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
}

void build_tree(int u, vector<int>& par) {
  for (auto v : g_MST[u])
    if (par[v] == -1) {
      par[v] = u;
      build_tree(v, par);
    }
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);

  int n, m, k;
  cin >> n >> m >> k;

  while (m--) {
    int u, v;
    cin >> u >> v;
    g[u].push_back(v);
    g[v].push_back(u);
    ++deg[u];
    ++deg[v];
    edge.emplace_back(u, v);
  }

  if (deg[1] < k) {
    cout << "NO" << endl;
    return 0;
  }

  sort(g[1].begin(), g[1].end(), cmp);

  int cnt = 0;
  for (auto v : g[1])
    if (deg[v] == 1)
      ++cnt;

  if (cnt > k) {
    cout << "NO" << endl;
    return 0;
  }

  DisjointSet dsu(n + 1);

  for (auto v : g[1])
    if (deg[v] == 1) {
      dsu.merge(1, v);
      MST.insert({1, v});
      g_MST[1].push_back(v);
      g_MST[v].push_back(1);
    } else if (dsu.find(1) != dsu.find(v)) {
      dsu.merge(1, v);