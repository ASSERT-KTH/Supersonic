#include <algorithm>
#include <iostream>
#include <set>
#include <vector>
#include <unordered_set>
using namespace std;

struct DisjointSet {
  vector<int> parent, rank;

  DisjointSet(int n) {
    parent.resize(n);
    rank.resize(n);
    for (int i = 0; i < n; ++i)
      make(i);
  }

  void make(int u) {
    parent[u] = u;
    rank[u] = 0;
  }

  int find(int u) {
    if (parent[u] == u)
      return u;
    return parent[u] = find(parent[u]);
  }

  void merge(int u, int v) {
    u = find(u);
    v = find(v);
    if (u == v)
      return;
    if (rank[u] < rank[v])
      parent[u] = v;
    else if (rank[u] > rank[v])
      parent[v] = u;
    else {
      parent[v] = u;
      ++rank[u];
    }
  }
};

int Ares_KN() {
  int n, m, k;
  cin >> n >> m >> k;

  vector<int> deg(n + 1, 0);
  vector<int> chose(n + 1, false);
  vector<int> par(n + 1, -1);
  vector<vector<int>> g(n + 1), g_MST(n + 1);
  vector<pair<int, int>> edge;
  set<pair<int, int>> MST;

  while (m--) {
    int u, v;
    cin >> u >> v;
    g[u].push_back(v);
    g[v].push_back(u);
    ++deg[u];
    ++deg[v];
    edge.emplace_back(u, v);
  }

  if (deg[1] < k)
    return !printf("NO");

  int cnt = 0;
  for (auto v : g[1])
    if (deg[v] == 1)
      ++cnt;

  if (cnt > k)
    return !printf("NO");

  for (auto v : g[1])
    if (deg[v] == 1) {
      chose[v] = true;
      MST.insert({1, v});
      g_MST[1].push_back(v);
      g_MST[v].push_back(1);
    } else {
      if (cnt == k)
        break;
      chose[v] = true;
      DisjointSet dsu(n + 1);
      for (auto u : g[1])
        if (chose[u] && u != v)
          dsu.merge(1, u);

      function<void(int)> dfs = [&](int u) {
        for (auto v : g[u]) {
          if (dsu.find(1) == dsu.find(v))
            continue;
          dsu.merge(dsu.find(1), dsu.find(v));
          if (u < v)
            MST.insert({u, v});
          else
            MST.insert({v, u});
          g_MST[u].push_back(v);
          g_MST[v].push_back(u);
          dfs(v);
        }
      };

      dfs(v);
      ++cnt;
    }

  for (auto E : edge) {
    int u = E.first, v = E.second;
    if (u == 1 || v == 1)