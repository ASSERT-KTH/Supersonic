#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

const int MAXN = 2e5 + 100;

struct DisjointSet {
  vector<int> parent;
  vector<int> rank;

  DisjointSet(int n) {
    parent.resize(n);
    rank.resize(n);
    for (int i = 0; i < n; ++i) {
      parent[i] = i;
      rank[i] = 0;
    }
  }

  int find(int u) {
    if (parent[u] != u) {
      parent[u] = find(parent[u]);
    }
    return parent[u];
  }

  void merge(int u, int v) {
    u = find(u);
    v = find(v);
    if (u == v) return;
    if (rank[u] < rank[v]) {
      parent[u] = v;
    } else if (rank[u] > rank[v]) {
      parent[v] = u;
    } else {
      parent[v] = u;
      rank[u]++;
    }
  }
};

int main() {
  int n, m, k;
  cin >> n >> m >> k;

  vector<int> deg(n + 1, 0);
  vector<int> chose(n + 1, 0);
  vector<int> par(n + 1, -1);
  vector<vector<int>> g(n + 1);
  vector<vector<int>> g_MST(n + 1);
  vector<pair<int, int>> edge;
  vector<pair<int, int>> MST;

  while (m--) {
    int u, v;
    cin >> u >> v;
    g[u].push_back(v);
    g[v].push_back(u);
    deg[u]++;
    deg[v]++;
    edge.emplace_back(u, v);
  }

  if (deg[1] < k) {
    cout << "NO" << endl;
    return 0;
  }

  sort(g[1].begin(), g[1].end(), [&](int u, int v) {
    return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
  });

  int cnt = 0;
  for (auto v : g[1]) {
    if (deg[v] == 1) {
      cnt++;
    }
  }

  if (cnt > k) {
    cout << "NO" << endl;
    return 0;
  }

  for (auto v : g[1]) {
    if (deg[v] == 1) {
      chose[v] = 1;
      MST.emplace_back(1, v);
      g_MST[1].push_back(v);
      g_MST[v].push_back(1);
    } else {
      if (cnt == k) break;
      DisjointSet dsu(n + 1);
      dsu.merge(1, v);
      chose[v] = 1;
      dfs(v);
      cnt++;
    }
  }

  for (auto E : edge) {
    int u = E.first, v = E.second;
    if (u == 1 || v == 1) continue;
    if (dsu.find(u) == dsu.find(v)) continue;
    dsu.merge(u, v);
    MST.emplace_back(u, v);
    g_MST[u].push_back(v);
    g_MST[v].push_back(u);
  }

  if (cnt > k || MST.size() < n - 1) {
    cout << "NO" << endl;
    return 0;
  }

  if (cnt == k) {
    cout << "YES" << endl;
    for (auto x : MST) {
      cout << x.first << " " << x.second << endl;
    }
    return 0;
  }

  int root = 1;
  par[root] = root;
  build_tree(root);

  for (auto v : g[1]) {
    if (!chose[v]) {
      int p = par[v];
      if (p == 1) continue;
      MST.emplace_back(1, v);
      par[v] = 1;
      cnt++;
      if (cnt == k) break;
    }
  }

  cout << "YES" << endl;
  for (auto x : MST) {
    cout << x.first << " " << x.second << endl;
  }

  return 0;
}