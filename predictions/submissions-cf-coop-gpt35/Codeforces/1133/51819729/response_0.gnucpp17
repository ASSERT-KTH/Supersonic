Code Analysis:
- The code includes a lot of unnecessary header files, such as `<bitset>`, `<cassert>`, `<cmath>`, `<cstdio>`, `<cstdlib>`, `<cstring>`, `<iomanip>`, `<iostream>`, `<list>`, `<map>`, `<queue>`, `<random>`, `<set>`, `<stack>`, `<unordered_map>`, `<unordered_set>`, and `<vector>`. These should be removed to reduce unnecessary overhead.
- The code contains a large number of unnecessary macros and function definitions. These should be removed to simplify the code and improve readability.
- The code uses a lot of unnecessary data structures and functions, such as `DisjointSet`, `deg`, `chose`, `par`, `g`, `g_MST`, `edge`, `MST`, and `RNG`. These should be removed to reduce memory usage and improve performance.
- The code uses unnecessary sorting and comparison operations, such as `sort(g[1].begin(), g[1].end(), cmp)` and `if (u < v) MST.insert({u, v})`. These should be removed to improve efficiency.
- The code includes unnecessary input/output operations, such as `cin`, `cout`, and `printf`. These should be removed to improve performance.

Optimization Strategy:
1. Remove unnecessary header files.
2. Remove unnecessary macros and function definitions.
3. Remove unnecessary data structures and functions.
4. Remove unnecessary sorting and comparison operations.
5. Remove unnecessary input/output operations.

Step-by-Step Explanation:
1. Remove unnecessary header files:
   - Remove the following lines:
     ```cpp
     #include <bitset>
     #include <cassert>
     #include <chrono>
     #include <cmath>
     #include <cstdio>
     #include <cstdlib>
     #include <cstring>
     #include <iomanip>
     #include <iostream>
     #include <list>
     #include <map>
     #include <queue>
     #include <random>
     #include <set>
     #include <stack>
     #include <unordered_map>
     #include <unordered_set>
     #include <vector>
     ```

2. Remove unnecessary macros and function definitions:
   - Remove the following lines:
     ```cpp
     #define FOR(i, a, b) for (int i = (a), _b = (b); i <= _b; i++)
     #define FORD(i, a, b) for (int i = (a), _b = (b); i >= _b; i--)
     #define REP(i, a) for (int i = 0, _a = (a); i < _a; ++i)
     #define REPD(i, a) for (int i = (a)-1; i >= 0; --i)
     #define fi first
     #define se second
     #define PB push_back
     #define EB emplace_back
     #define MP make_pair
     #define prev KhanhNgan
     #define next MinhTu
     #define y0 chuquachula
     #define y1 tacadada
     #define left uzumakinaruto
     #define right uchihasasuke
     #define PI (2 * acos((double)0))
     #define sec(x) 1.0 / cos((x))
     #define asec(x) acos(1.0 / (x))
     template <class T> int getbit(T s, int i) { return (s >> i) & 1; }
     template <class T> T onbit(T s, int i) { return s | (T(1) << i); }
     template <class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }
     template <class T> int cntbit(T s) { return __builtin_popcountll(s); }
     template <class T> T gcd(T a, T b) {
       T r;
       while (b != 0) {
         r = a % b;
         a = b;
         b = r;
       }
       return a;
     }
     template <class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }
     template <class T> inline int minimize(T &a, const T &val) {
       return val < a ? a = val, 1 : 0;
     }
     template <class T> inline int maximize(T &a, const T &val) {
       return a < val ? a = val, 1 : 0;
     }
     #define IOS ios_base::sync_with_stdio(0), cin.tie(0);
     #define DEBUG(X)                                                               \
       { cerr << #X << " = " << (X) << endl; }
     #define ARR(X, L, R)                                                           \
       {                                                                            \
         cerr << #X << " = {";                                                      \
         FOR(_, L, R) cerr << ' ' << X[_];                                          \
         cerr << " }\n";                                                            \
       }
     #define SET(X)                                                                 \
       {                                                                            \
         cerr << "set " << #X << " = ";                                             \
         for (auto _ : X)                                                           \
           cerr << _ << ' ';                                                        \
         cerr << '\n';                                                              \
       }
     #define MAP(X)                                                                 \
       {                                                                            \
         cerr << "map " << #X << " = ";                                             \
         for (auto _ : X)                                                           \
           cerr << '(' << _.first << ' ' << _.second << ')' << '\n';                \
       }
     #define debugfunc(f, x) printf("%s(%g) = %g\n", #f, (x), (f(x)));
     #define debugfunc2(f, x, y)                                                    \
       printf("%s(%g,%g) = %g\n", #f, (x), (y), (f((x), (y))));
     #define sqr(x) ((x) * (x))
     #define unify(x) x.erase(unique(x.begin(), x.end()), x.end())
     #define __builtin_popcount __builtin_popcountll