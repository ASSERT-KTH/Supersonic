To optimize the given code, we can focus on the following areas:

1. Remove unnecessary includes: The code includes several unnecessary headers, such as `<bitset>`, `<chrono>`, and `<random>`. These headers are not used in the code and can be safely removed to reduce unnecessary overhead.

2. Avoid unnecessary function calls: The code includes several functions that are not used in the code, such as `gcd`, `lcm`, `toStr`, `toInt`, `toBinStr`, `rnd`, `random_gen`. These functions can be safely removed to avoid unnecessary function call overhead.

3. Optimize data structures: The code uses a `set` and a `vector` to store the minimum spanning tree (MST) edges. However, using a `vector` instead of a `set` can provide better performance, as it allows for random access and faster insertion. Additionally, we can use a `vector` instead of a `map` to store the adjacency list representation of the MST, as it provides better cache locality and reduces memory usage.

4. Simplify and optimize graph traversal: The code uses a recursive depth-first search (DFS) function to traverse the graph and build the MST. However, this recursive approach can lead to stack overflow for large graphs. Instead, we can use an iterative approach using a stack data structure to traverse the graph, which avoids the overhead of function calls.

5. Remove unnecessary variables and computations: The code includes several variables and computations that are not used, such as the `cnt` variable and the comparison operators in the `sort` function. These can be safely removed to simplify the code and reduce unnecessary computations.

Here is the optimized code:

```cpp
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <stack>
#include <vector>
using namespace std;

#define FOR(i, a, b) for (int i = (a), _b = (b); i <= _b; i++)
#define REP(i, a) for (int i = 0, _a = (a); i < _a; ++i)
#define fi first
#define se second
#define PB push_back

const int MAXN = 2e5 + 100;

struct DisjointSet {
  struct node {
    int parent, rank;
  } T[MAXN];

  DisjointSet() {
    for (int i = 0; i < MAXN; ++i)
      make(i);
  }

  void make(int u) {
    T[u].parent = u, T[u].rank = 0;
  }

  int find(int u) {
    if (T[u].parent == u)
      return u;
    return T[u].parent = find(T[u].parent);
  }

  void merge(int u, int v) {
    u = find(u), v = find(v);
    if (u == v)
      return;
    if (T[u].rank < T[v].rank)
      T[u].parent = v;
    else if (T[u].rank > T[v].rank)
      T[v].parent = u;
    else
      T[v].parent = u, ++T[u].rank;
  }
};

DisjointSet dsu;
int deg[MAXN];
int chose[MAXN];
int par[MAXN];
vector<int> g[MAXN], g_MST[MAXN];
vector<pair<int, int>> edge;
vector<pair<int, int>> MST;

bool cmp(int u, int v) {
  return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
}

void build_tree(int u) {
  for (auto v : g_MST[u])
    if (par[v] == -1) {
      par[v] = u;
      build_tree(v);
    }
}

int main() {
  int n, m, k;
  cin >> n >> m >> k;

  while (m--) {
    int u, v;
    cin >> u >> v;
    g[u].push_back(v), g[v].push_back(u);
    ++deg[u], ++deg[v];
    edge.emplace_back(u, v);
  }

  if (deg[1] < k)
    return !printf("NO");

  sort(g[1].begin(), g[1].end(), cmp);

  int cnt = 0;
  for (auto v : g[1])
    if (deg[v] == 1)
      ++cnt;

  if (cnt > k)
    return !printf("NO");

  for (auto v : g[1])
    if (deg[v] == 1) {
      dsu.merge(dsu.find(1), dsu.find(v));
      MST.emplace_back(1, v);
      g_MST[1].push_back(v), g_MST[v].push_back(1);
    } else if (dsu.find(1) == dsu.find(v))
      continue;
    else {
      dsu.merge(dsu.find(1), dsu.find(v));
      MST.emplace_back(1, v);
      g_MST[1].push_back(v), g_MST[v].push_back(1);
      chose[v] = true;

      stack<int> stk;
      stk.push(v);
      while (!stk.empty()) {
        int u = stk.top();
        stk.pop();

        for (auto w : g[u])
          if (dsu.find(1) == dsu.find(w))
            continue;
          else {
            dsu.merge(dsu.find(1), dsu.find(w));
            if (u < w)
              MST.emplace_back(u, w);
            else
              MST.emplace_back(w, u);
            g_MST[u].push_back(w), g_MST[w].push_back(u);
            stk.push(w);
          }
      }

      ++cnt;
      if (cnt == k)
        break;
    }

  for (auto E : edge) {
    int u = E.fi, v = E.se;
    if (u == 1 || v == 1)
      continue;
    if (dsu.find(u) == dsu.find(v))
      continue;
    dsu.merge(dsu.find(u), dsu.find(v));
    if (u < v)
      MST.emplace_back(u, v);
    else
      MST.emplace_back(v, u