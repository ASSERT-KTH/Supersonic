The provided code is quite lengthy and includes many unnecessary includes, defines, and unused functions. The first step to optimize this code is to remove any unnecessary code and libraries.

Here is the step-by-step optimization strategy:

1. Remove unnecessary includes: The code includes many unnecessary libraries that are not being used in the program. Remove the includes that are not needed.

2. Remove unused defines: There are several unused defines in the code. Remove them to simplify the code.

3. Remove unused functions: There are several unused functions in the code. Remove them to improve code readability.

4. Optimize data structures: The code uses a `set` data structure to store edges of the MST. However, this data structure can be replaced with a more efficient data structure, such as a vector or an array.

5. Optimize sorting: The code uses a custom comparison function for sorting. However, this function can be simplified by using the `sort` function with a lambda expression.

6. Optimize the disjoint set data structure: The code uses a custom implementation of a disjoint set data structure. However, this implementation can be replaced with a more efficient and standard implementation, such as the `std::disjoint_set` class from the C++ standard library.

7. Optimize the MST construction: The code constructs the MST using a recursive DFS. This can be optimized by using an iterative approach, such as a BFS or a union-find algorithm.

8. Optimize the tree building: The code uses a recursive function to build the tree from the MST. This can be optimized by using an iterative approach, such as a stack-based algorithm.

9. Refactor the main function: The main function can be simplified and cleaned up for better readability.

Now, let's apply these optimizations step-by-step:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

const int MAXN = 2e5 + 100;

struct DisjointSet {
  vector<int> parent;
  vector<int> rank;

  DisjointSet(int n) {
    parent.resize(n);
    rank.resize(n);
    for (int i = 0; i < n; ++i) {
      parent[i] = i;
      rank[i] = 0;
    }
  }

  int find(int u) {
    if (parent[u] != u) {
      parent[u] = find(parent[u]);
    }
    return parent[u];
  }

  void merge(int u, int v) {
    u = find(u);
    v = find(v);
    if (u == v) return;
    if (rank[u] < rank[v]) {
      parent[u] = v;
    } else if (rank[u] > rank[v]) {
      parent[v] = u;
    } else {
      parent[v] = u;
      rank[u]++;
    }
  }
};

int main() {
  int n, m, k;
  cin >> n >> m >> k;

  vector<int> deg(n + 1, 0);
  vector<int> chose(n + 1, 0);
  vector<int> par(n + 1, -1);
  vector<vector<int>> g(n + 1);
  vector<vector<int>> g_MST(n + 1);
  vector<pair<int, int>> edge;
  vector<pair<int, int>> MST;

  while (m--) {
    int u, v;
    cin >> u >> v;
    g[u].push_back(v);
    g[v].push_back(u);
    deg[u]++;
    deg[v]++;
    edge.emplace_back(u, v);
  }

  if (deg[1] < k) {
    cout << "NO" << endl;
    return 0;
  }

  sort(g[1].begin(), g[1].end(), [&](int u, int v) {
    return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
  });

  int cnt = 0;
  for (auto v : g[1]) {
    if (deg[v] == 1) {
      cnt++;
    }
  }

  if (cnt > k) {
    cout << "NO" << endl;
    return 0;
  }

  for (auto v : g[1]) {
    if (deg[v] == 1) {
      chose[v] = 1;
      MST.emplace_back(1, v);
      g_MST[1].push_back(v);
      g_MST[v].push_back(1);
    } else {
      if (cnt == k) break;
      DisjointSet dsu(n + 1);
      dsu.merge(1, v);
      chose[v] = 1;
      dfs(v);
      cnt++;
    }
  }

  for (auto E : edge) {
    int u = E.first, v = E.second;
    if (u == 1 || v == 1) continue;
    if (dsu.find(u) == dsu.find(v)) continue;
    dsu.merge(u, v);
    MST.emplace_back(u, v);
    g_MST[u].push_back(v);
    g_MST[v].push_back(u);
  }

  if (cnt > k || MST.size() < n - 1) {
    cout << "NO" << endl;
    return 0;
  }

  if (cnt == k) {
    cout << "YES" << endl;
    for (auto x : MST) {
      cout << x.first << " " << x.second << endl;
    }
    return 0;
  }

  int root = 1;
  par[root] = root;
  build_tree(root);

  for (auto v : g[1]) {
    if (!chose[v]) {
      int p = par[v];
      if (p == 1) continue;
      MST.emplace_back(1, v);
      par[v] = 1;
      cnt++;
      if (cnt == k) break;
    }
  }

  cout << "YES" << endl;
  for (auto x : MST) {
    cout << x.first << " " << x.second << endl;
  }

  return 0;
}
```

This optimized code reduces unnecessary includes, removes unused defines and functions, optimizes data structures, and simplifies