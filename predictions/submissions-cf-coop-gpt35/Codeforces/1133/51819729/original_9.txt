Analysis:

1. The code includes a large number of unnecessary header files. These header files may introduce unnecessary dependencies and increase compile time. We should remove the unused header files to improve code efficiency.

2. The code includes a large number of unnecessary macros. These macros are not used in the code and can be safely removed.

3. The code includes unnecessary functions such as `toStr`, `toInt`, `toBinStr`, `rnd`, and `random_gen`. These functions are not used in the code and can be safely removed.

4. The code uses a custom implementation of a disjoint set data structure (`DisjointSet`). However, the implementation is not efficient and can be improved. We should consider using a more efficient implementation of the disjoint set data structure, such as the Union-Find algorithm with path compression and union by rank.

5. The code uses a recursive depth-first search (DFS) algorithm (`dfs`) to find the minimum spanning tree (MST). However, the recursive implementation can be inefficient for large input sizes. We should consider using an iterative implementation of DFS or an alternative algorithm, such as Kruskal's algorithm, to find the MST.

6. The code uses a custom implementation of sorting the `g[1]` vector (`sort(g[1].begin(), g[1].end(), cmp)`). However, the custom sorting function (`cmp`) can be simplified and made more efficient.

Optimization Strategy:

1. Remove unnecessary header files: Remove the unnecessary header files to reduce unnecessary dependencies and compile time.

2. Remove unnecessary macros: Remove the unnecessary macros to simplify the code and improve readability.

3. Remove unnecessary functions: Remove the unnecessary functions (`toStr`, `toInt`, `toBinStr`, `rnd`, `random_gen`) to simplify the code and improve efficiency.

4. Use a more efficient disjoint set data structure: Replace the custom implementation of the disjoint set data structure with a more efficient implementation, such as the Union-Find algorithm with path compression and union by rank.

5. Use an alternative algorithm to find the MST: Replace the recursive depth-first search (DFS) algorithm with a more efficient algorithm, such as Kruskal's algorithm, to find the minimum spanning tree (MST).

6. Simplify and optimize the custom sorting function: Simplify the custom sorting function (`cmp`) to improve efficiency.

Step-by-Step Explanation:

1. Remove unnecessary header files: Remove the unnecessary header files to reduce unnecessary dependencies and compile time.

```cpp
#include <algorithm>
#include <cstdio>
#include <vector>
#include <set>
```

2. Remove unnecessary macros: Remove the unnecessary macros to simplify the code and improve readability.

```cpp
// Remove all unnecessary macros
```

3. Remove unnecessary functions: Remove the unnecessary functions (`toStr`, `toInt`, `toBinStr`, `rnd`, `random_gen`) to simplify the code and improve efficiency.

```cpp
// Remove all unnecessary functions
```

4. Use a more efficient disjoint set data structure: Replace the custom implementation of the disjoint set data structure with a more efficient implementation, such as the Union-Find algorithm with path compression and union by rank.

```cpp
const int MAX_NODE = MAXN;
struct DisjointSet {
  vector<int> parent, rank;
  
  DisjointSet(int n) {
    parent.resize(n+1);
    rank.resize(n+1);
    for (int i = 1; i <= n; ++i)
      make(i);
  }
  
  void make(int u) {
    parent[u] = u;
    rank[u] = 0;
  }
  
  int find(int u) {
    if (parent[u] == u)
      return u;
    return parent[u] = find(parent[u]);
  }
  
  void merge(int u, int v) {
    u = find(u);
    v = find(v);
    if (u == v)
      return;
    if (rank[u] < rank[v])
      parent[u] = v;
    else if (rank[u] > rank[v])
      parent[v] = u;
    else {
      parent[v] = u;
      ++rank[u];
    }
  }
};
DisjointSet dsu(MAXN);
```

5. Use an alternative algorithm to find the MST: Replace the recursive depth-first search (DFS) algorithm with a more efficient algorithm, such as Kruskal's algorithm, to find the minimum spanning tree (MST).

```cpp
void build_tree(int u) {
  stack<int> st;
  st.push(u);
  par[u] = u;
  
  while (!st.empty()) {
    int v = st.top();
    st.pop();
    
    for (auto x : g_MST[v]) {
      if (par[x] == -1) {
        par[x] = v;
        st.push(x);
      }
    }
  }
}
```

6. Simplify and optimize the custom sorting function: Simplify the custom sorting function (`cmp`) to improve efficiency.

```cpp
bool cmp(int u, int v) {
  return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
}
```

Optimized Code:

```cpp
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("avx")

#include <algorithm>
#include <cstdio>
#include <vector>
#include <set>
#include <stack>
using namespace std;

#define MAXN 200100

const int MAX_NODE = MAXN;
struct DisjointSet {
  vector<int> parent, rank;
  
  DisjointSet(int n) {
    parent.resize(n+1);
    rank.resize(n+1);
    for (int i = 1; i <= n; ++i)
      make(i);
  }
  
  void make(int u) {
    parent[u] = u;
    rank[u] = 0;
  }
  
  int find(int u) {
    if (parent[u] == u)
      return u;
    return parent[u] = find(parent[u]);
  }
  
  void merge(int u, int v) {
    u = find(u);
    v = find(v);
    if (u == v)
      return;
    if (rank[u] < rank[v])
      parent[u] = v;
    else if