Upon analyzing the code, I have identified several potential areas for optimization:

1. Redundant includes: The code includes several unnecessary headers, such as `<bitset>`, `<cassert>`, `<cmath>`, `<cstdio>`, `<cstdlib>`, `<cstring>`, `<iomanip>`, `<list>`, `<map>`, `<queue>`, `<random>`, `<set>`, `<stack>`, and `<unordered_map>`. These headers should be removed to reduce unnecessary memory usage and improve compilation time.

2. Unused macros: There are several unused macros in the code, such as `FOR`, `FORD`, `REP`, `REPD`, `fi`, `se`, `PB`, `EB`, `MP`, `prev`, `next`, `y0`, `y1`, `left`, `right`, `PI`, `sec`, `asec`, `debugfunc`, `debugfunc2`, `sqr`, `unify`, `__builtin_popcount`, `SZ`. These macros should be removed to reduce unnecessary preprocessing overhead.

3. Unnecessary global variables: The global variables `dsu`, `deg`, `chose`, `par`, `g`, `g_MST`, `edge`, and `MST` are not needed outside the `Ares_KN` function and should be moved inside the function to reduce memory usage and improve locality of data.

4. Redundant sorting: The `g[1]` vector is sorted unnecessarily using the `cmp` comparator function. Since the vector is already sorted in non-decreasing order, the sorting step can be removed to improve performance.

5. Unnecessary recursion: The `dfs` function is implemented recursively, which may lead to excessive function calls and stack usage. This can be optimized by using an iterative approach instead of recursion.

6. Unnecessary sets: The `MST` set is used to keep track of the edges in the minimum spanning tree. However, the order of the edges does not matter, so a simpler data structure like a vector or list can be used instead of a set, which can reduce memory usage and improve performance.

7. Redundant memory initialization: The `memset` function is used to initialize the `par` array to -1. However, this is unnecessary since the array is immediately overwritten in the `build_tree` function. The memory initialization step can be removed to improve performance.

8. Unnecessary memory allocation: The `res` vector is allocated but never used. This memory allocation step can be removed to reduce memory usage.

Based on these observations, I will now provide a step-by-step optimization strategy and the corresponding optimized code.

Optimization Strategy:

1. Remove unnecessary includes: Remove the unnecessary include statements for headers such as `<bitset>`, `<cassert>`, `<cmath>`, `<cstdio>`, `<cstdlib>`, `<cstring>`, `<iomanip>`, `<list>`, `<map>`, `<queue>`, `<random>`, `<set>`, `<stack>`, and `<unordered_map>`.

2. Remove unused macros: Remove the unused macros such as `FOR`, `FORD`, `REP`, `REPD`, `fi`, `se`, `PB`, `EB`, `MP`, `prev`, `next`, `y0`, `y1`, `left`, `right`, `PI`, `sec`, `asec`, `debugfunc`, `debugfunc2`, `sqr`, `unify`, `__builtin_popcount`, `SZ`.

3. Move global variables: Move the global variables `dsu`, `deg`, `chose`, `par`, `g`, `g_MST`, `edge`, and `MST` inside the `Ares_KN` function.

4. Remove redundant sorting: Remove the sorting of `g[1]` in the `Ares_KN` function.

5. Optimize recursion: Replace the recursive implementation of the `dfs` function with an iterative implementation.

6. Replace set with vector: Replace the `MST` set with a vector to store the edges of the minimum spanning tree.

7. Remove redundant memory initialization: Remove the memory initialization step for the `par` array in the `Ares_KN` function.

8. Remove unnecessary memory allocation: Remove the memory allocation for the `res` vector in the `Ares_KN` function.

Optimized Code:

```cpp
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

const int MAXN = 2e5 + 100;

struct DisjointSet {
  struct node {
    int parent, rank;
  } T[MAXN];

  DisjointSet() {
    for (int i = 0; i < MAXN; ++i)
      make(i);
  }

  void make(int u) {
    T[u].parent = u, T[u].rank = 0;
  }

  int find(int u) {
    if (T[u].parent == u)
      return u;
    return T[u].parent = find(T[u].parent);
  }

  void merge(int u, int v) {
    u = find(u), v = find(v);
    if (u == v)
      return;
    if (T[u].rank < T[v].rank)
      T[u].parent = v;
    else if (T[u].rank > T[v].rank)
      T[v].parent = u;
    else
      T[v].parent = u, ++T[u].rank;
  }
};

int deg[MAXN];
int chose[MAXN];
int par[MAXN];
vector<int> g[MAXN], g_MST[MAXN];
vector<pair<int, int>> edge;
vector<pair<int, int>> MST;

bool cmp(int u, int v) {
  return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
}

void dfs(int u) {
  vector<int> stack;
  stack.push_back(u);

  while (!stack.empty()) {
    int top = stack.back();
    stack.pop_back();

    for (auto v : g[top]) {
      if (dsu.find(1) == dsu.find(v))
        continue;
      else {
        dsu.merge(dsu.find(1), dsu.find(v));
        if (top < v)
          MST.push_back(make_pair(top, v));
        else
          MST.push_back