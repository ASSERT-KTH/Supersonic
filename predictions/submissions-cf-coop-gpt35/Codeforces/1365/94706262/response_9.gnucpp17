#include <iostream>
#include <vector>
#include <cstring>

using namespace std;

int t, n, m, G;
vector<vector<bool>> blocked;
bool visited[51][51] = {0};

bool block(int r, int c) {
  if (r > 1 && (maze[r - 1][c] == 'G' || maze[r - 1][c] == '.')) {
    maze[r - 1][c] = '#';
  }
  if (r < n && (maze[r + 1][c] == 'G' || maze[r + 1][c] == '.')) {
    maze[r + 1][c] = '#';
  }
  if (c > 1 && (maze[r][c - 1] == 'G' || maze[r][c - 1] == '.')) {
    maze[r][c - 1] = '#';
  }
  if (c < m && (maze[r][c + 1] == 'G' || maze[r][c + 1] == '.')) {
    maze[r][c + 1] = '#';
  }
  return true;
}

void dfs(int r, int c) {
  vector<pair<int, int>> stack;
  stack.push_back(make_pair(r, c));

  while (!stack.empty()) {
    pair<int, int> current = stack.back();
    stack.pop_back();

    int x = current.first;
    int y = current.second;

    if (x < 1 || y < 1 || x > n || y > m || visited[x][y] || maze[x][y] == '#')
      continue;

    visited[x][y] = true;

    if (maze[x][y] == 'G') {
      G--;
    }

    stack.push_back(make_pair(x + 1, y));
    stack.push_back(make_pair(x - 1, y));
    stack.push_back(make_pair(x, y + 1));
    stack.push_back(make_pair(x, y - 1));
  }
}

int main() {
  cin >> t;

  while (t--) {
    cin >> n >> m;
    bool flag = false;
    G = 0;
    blocked.assign(n + 1, vector<bool>(m + 1, false));
    memset(visited, 0, sizeof(visited));

    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= m; j++) {
        cin >> maze[i][j];
      }
    }

    for (int i = 1; i <= n && !flag; i++) {
      for (int j = 1; j <= m && !flag; j++) {
        if (maze[i][j] == 'B') {
          block(i, j);
        } else if (maze[i][j] == 'G') {
          G++;
        }
      }
    }

    if (flag) {
      cout << "No\n";
      continue;
    }

    dfs(n, m);

    if (G == 0) {
      cout << "Yes\n";
    } else {
      cout << "No\n";
    }
  }

  return 0;
}