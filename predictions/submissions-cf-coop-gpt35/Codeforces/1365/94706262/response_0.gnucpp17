#include <iostream>
#include <string.h>
using namespace std;

int t, n, m, G;
char maze[51][51] = {0};
bool visited[51][51] = {0};

bool block(int r, int c) {
  for (int dr = -1; dr <= 1; dr++) {
    for (int dc = -1; dc <= 1; dc++) {
      int nr = r + dr;
      int nc = c + dc;
      if (nr >= 1 && nr <= n && nc >= 1 && nc <= m) {
        if (maze[nr][nc] == 'G' || (nr == n && nc == m && G > 0)) {
          return false;
        }
        if (maze[nr][nc] == '.') {
          visited[nr][nc] = true;
        }
      }
    }
  }
  return true;
}

void dfs(int r, int c) {
  // Use a stack or queue to keep track of cells to visit
  stack<pair<int, int>> toVisit;
  toVisit.push(make_pair(r, c));

  while (!toVisit.empty()) {
    pair<int, int> cell = toVisit.top();
    toVisit.pop();
    r = cell.first;
    c = cell.second;

    if (r <= 0 || c <= 0 || r > n || c > m)
      continue;
    if (maze[r][c] == '#' || visited[r][c])
      continue;
    visited[r][c] = true;
    if (maze[r][c] == 'G') {
      G--;
    }
    // Add neighboring cells to the stack or queue
    toVisit.push(make_pair(r + 1, c));
    toVisit.push(make_pair(r - 1, c));
    toVisit.push(make_pair(r, c + 1));
    toVisit.push(make_pair(r, c - 1));
  }
}

int main() {
  cin >> t;
  while (t--) {
    cin >> n >> m;
    bool flag = false;
    G = 0;
    // No need to initialize visited array
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= m; j++) {
        cin >> maze[i][j];
      }
    }
    for (int i = 1; i <= n && !flag; i++) {
      for (int j = 1; j <= m && !flag; j++) {
        if (maze[i][j] == 'B') {
          if (!block(i, j)) {
            cout << "No\n";
            flag = true;
            break;
          }
        } else if (maze[i][j] == 'G') {
          G++;
        }
      }
    }
    if (flag) {
      continue;
    }
    dfs(n, m);
    if (G == 0) {
      cout << "Yes\n";
    } else {
      cout << "No\n";
    }
  }
  return 0;
}