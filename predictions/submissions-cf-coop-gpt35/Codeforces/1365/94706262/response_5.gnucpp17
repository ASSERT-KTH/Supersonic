#include <iostream>
#include <string.h>
using namespace std;

int t, n, m, G;
char maze[2501] = {0};
bool visited[2501] = {0};

bool block(int r, int c) {
  if (r - 1 >= 0) {
    if (maze[(r - 1) * m + c] == 'G') {
      return false;
    }
    if (maze[(r - 1) * m + c] == '.') {
      maze[(r - 1) * m + c] = '#';
    }
  }
  if (r + 1 < n) {
    if (maze[(r + 1) * m + c] == 'G') {
      return false;
    }
    if (maze[(r + 1) * m + c] == '.') {
      maze[(r + 1) * m + c] = '#';
    }
  }
  if (c - 1 >= 0) {
    if (maze[r * m + c - 1] == 'G') {
      return false;
    }
    if (maze[r * m + c - 1] == '.') {
      maze[r * m + c - 1] = '#';
    }
  }
  if (c + 1 < m) {
    if (maze[r * m + c + 1] == 'G') {
      return false;
    }
    if (maze[r * m + c + 1] == '.') {
      maze[r * m + c + 1] = '#';
    }
  }
  return true;
}

void dfs(int r, int c) {
  if (r < 0 || c < 0 || r >= n || c >= m)
    return;
  if (visited[r * m + c] || maze[r * m + c] == '#')
    return;
  visited[r * m + c] = true;
  if (maze[r * m + c] == 'G') {
    G--;
  }
  dfs(r + 1, c);
  dfs(r - 1, c);
  dfs(r, c + 1);
  dfs(r, c - 1);
}

int main() {
  #pragma GCC optimize("O2")
  cin >> t;
  while (t--) {
    cin >> n >> m;
    bool flag = false;
    G = 0;
    memset(visited, 0, sizeof(visited));
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        cin >> maze[i * m + j];
        if (maze[i * m + j] == 'G') {
          G++;
        }
      }
    }
    for (int i = 0; i < n && !flag; i++) {
      for (int j = 0; j < m && !flag; j++) {
        if (maze[i * m + j] == 'B') {
          if (!block(i, j)) {
            cout << "No\n";
            flag = true;
            break;
          }
        }
      }
    }
    if (flag) {
      continue;
    }
    dfs(n - 1, m - 1);
    if (G == 0) {
      cout << "Yes\n";
    } else {
      cout << "No\n";
    }
  }
  return 0;
}