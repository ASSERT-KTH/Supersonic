#include <iostream>
#include <string.h>
using namespace std;

const int MAX_N = 51;
char maze[MAX_N][MAX_N] = {0};

bool block(int r, int c, int n, int m) {
  if (r - 1 > 0) {
    if (maze[r - 1][c] == 'G' || (r - 1 == n && c == m)) {
      return false;
    }
    if (maze[r - 1][c] == '.') {
      maze[r - 1][c] = '#';
    }
  }
  if (r + 1 <= n) {
    if (maze[r + 1][c] == 'G' || (r + 1 == n && c == m)) {
      return false;
    }
    if (maze[r + 1][c] == '.') {
      maze[r + 1][c] = '#';
    }
  }
  if (c - 1 > 0) {
    if (maze[r][c - 1] == 'G' || (r == n && c - 1 == m)) {
      return false;
    }
    if (maze[r][c - 1] == '.') {
      maze[r][c - 1] = '#';
    }
  }
  if (c + 1 <= m) {
    if (maze[r][c + 1] == 'G' || (r == n && c + 1 == m)) {
      return false;
    }
    if (maze[r][c + 1] == '.') {
      maze[r][c + 1] = '#';
    }
  }
  return true;
}

void dfs(int n, int m) {
  int G = 0;
  bool visited[MAX_N][MAX_N] = {0};
  int stack[MAX_N * MAX_N][2];
  int top = 0;

  stack[top][0] = n;
  stack[top][1] = m;

  while (top >= 0) {
    int r = stack[top][0];
    int c = stack[top][1];
    top--;

    if (r <= 0 || c <= 0 || r > n || c > m)
      continue;
    if (maze[r][c] == '#' || visited[r][c])
      continue;
    visited[r][c] = true;

    if (maze[r][c] == 'G') {
      G--;
    }

    stack[++top][0] = r + 1;
    stack[top][1] = c;
    stack[++top][0] = r - 1;
    stack[top][1] = c;
    stack[++top][0] = r;
    stack[top][1] = c + 1;
    stack[++top][0] = r;
    stack[top][1] = c - 1;
  }
}

int main() {
  int t;
  cin >> t;

  while (t--) {
    int n, m;
    cin >> n >> m;

    bool flag = false;
    int G = 0;
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= m; j++) {
        cin >> maze[i][j];
      }
    }

    for (int i = 1; i <= n && !flag; i++) {
      for (int j = 1; j <= m && !flag; j++) {
        if (maze[i][j] == 'B') {
          if (!block(i, j, n, m)) {
            cout << "No\n";
            flag = true;
            break;
          }
        } else if (maze[i][j] == 'G') {
          G++;
        }
      }
    }

    if (flag) {
      continue;
    }

    dfs(n, m);

    if (G == 0) {
      cout << "Yes\n";
    } else {
      cout << "No\n";
    }
  }

  return 0;
}