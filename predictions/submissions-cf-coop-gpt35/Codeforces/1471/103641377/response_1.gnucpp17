#include <iostream>
#include <cmath>
#include <unordered_map>
#include <vector>

const int N = 1e6 + 5;

std::vector<int> preprocess() {
  std::vector<int> dp(N);
  dp[1] = 1;
  for (int num = 1; num < N; ++num) {
    for (int i = 2; i * i <= num; ++i) {
      if (num % i == 0) {
        if (dp[num / i] % i) {
          dp[num] = dp[num / i] * i;
        } else {
          dp[num] = dp[num / i] / i;
        }
        break;
      }
    }
    if (dp[num] == 0) {
      dp[num] = num;
    }
  }
  return dp;
}

void solve() {
  int n;
  std::cin >> n;
  std::unordered_map<int, int> mp;
  std::vector<int> a(n);
  for (int i = 0; i < n; ++i) {
    std::cin >> a[i];
    mp[a[i]]++;
  }
  int ans1 = 1;
  for (const auto& p : mp) {
    ans1 = std::max(ans1, p.second);
  }
  int ans2 = 0;
  for (const auto& p : mp) {
    if (p.second % 2 == 0 || p.first == 1) {
      ans2 += p.second;
    }
  }
  int q;
  std::cin >> q;
  while (q--) {
    int w;
    std::cin >> w;
    if (w == 0) {
      std::cout << ans1 << '\n';
    } else {
      std::cout << std::max(ans1, ans2) << '\n';
    }
  }
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);

  int t;
  std::cin >> t;
  while (t--) {
    solve();
  }

  return 0;
}