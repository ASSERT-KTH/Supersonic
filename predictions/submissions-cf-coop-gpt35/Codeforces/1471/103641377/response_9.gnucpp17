#include <iostream>
#include <unordered_map>
#include <cmath>
#include <chrono>

#define int long long

void preprocess(std::vector<int>& dp) {
    const int N = dp.size();
    dp[1] = 1;
    for (int num = 2; num < N; ++num) {
        for (int i = 2; i * i <= num; ++i) {
            if (num % i == 0) {
                if (dp[num / i] % i) {
                    dp[num] = dp[num / i] * i;
                } else {
                    dp[num] = dp[num / i] / i;
                }
                break;
            }
        }
        if (dp[num] == 0) {
            dp[num] = num;
        }
    }
}

void solve() {
    int n;
    scanf("%lld", &n);
    std::unordered_map<int, int> mp;
    std::vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        scanf("%lld", &a[i]);
        mp[a[i]]++;
    }
    
    int ans1 = 1;
    for (const auto& it : mp) {
        ans1 = std::max(ans1, it.second);
    }
    
    int ans2 = 0;
    for (const auto& it : mp) {
        if (it.second % 2 == 0 || it.first == 1) {
            ans2 += it.second;
        }
    }
    
    int q;
    scanf("%lld", &q);
    while (q--) {
        int w;
        scanf("%lld", &w);
        if (w == 0) {
            printf("%lld\n", ans1);
        } else {
            printf("%lld\n", std::max(ans1, ans2));
        }
    }
}

int32_t main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
    
    int t;
    scanf("%lld", &t);
    
    std::vector<int> dp(1000005);
    preprocess(dp);
    
    while (t--) {
        solve();
    }
    
    return 0;
}