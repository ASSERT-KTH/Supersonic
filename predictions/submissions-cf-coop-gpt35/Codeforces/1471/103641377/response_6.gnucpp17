#include <iostream>
#include <vector>
#include <unordered_map>
#include <cmath>
#include <chrono>
using namespace std;

void fio() {
  #ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  #endif
}

void preprocess(vector<int>& dp) {
  dp[1] = 1;
  for (int num = 2; num < dp.size(); ++num) {
    int temp = num;
    for (int i = 2; i <= sqrt(num); ++i) {
      if (temp % i == 0) {
        while (temp % i == 0)
          temp /= i;
        dp[num] = dp[temp] * i;
        break;
      }
    }
    if (dp[num] == 0)
      dp[num] = num;
  }
}

void solve() {
  int n;
  cin >> n;
  vector<int> a(n);
  for (int i = 0; i < n; ++i)
    cin >> a[i];

  int ans1 = 1;
  vector<int> freq(n, 0);
  for (int i = 0; i < n; ++i) {
    freq[a[i]]++;
    ans1 = max(ans1, freq[a[i]]);
  }

  int ans2 = 0;
  for (int f : freq) {
    if (f % 2 == 0 || f == 1)
      ans2 += f;
  }

  int q;
  cin >> q;
  vector<int> answers;
  while (q--) {
    int w;
    cin >> w;
    if (w == 0)
      answers.push_back(ans1);
    else
      answers.push_back(max(ans1, ans2));
  }

  for (int ans : answers)
    cout << ans << endl;
}

int main() {
  auto start = chrono::high_resolution_clock::now();
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  fio();

  const int N = 1e6 + 5;
  vector<int> dp(N);
  preprocess(dp);

  int t;
  cin >> t;
  while (t--)
    solve();

  auto end = chrono::high_resolution_clock::now();
  double tt = chrono::duration_cast<chrono::nanoseconds>(end - start).count();
  cout << "Executed in: " << fixed << tt * 1e-9 << setprecision(9) << " sec";

  return 0;
}