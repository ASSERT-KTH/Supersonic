#include <iostream>
#include <iomanip>
#include <cstring>
using namespace std;

const int MAX_N = 1005;
typedef long long int lli;
typedef pair<lli, lli> pll;

lli nc, nm, nv, mx, mc;
lli dp[MAX_N][MAX_N];

lli getAns(lli cntC, lli cntM, lli c, lli m, lli p, lli v) {
    pll state = {cntC, cntM};
    if (dp[state.first][state.second] != -1) {
        return dp[state.first][state.second];
    }
    
    if (c <= 0 && m <= 0) {
        return dp[state.first][state.second] = cntC + cntM + 1;
    }
    
    lli temp = 0;
    if (c > 0 && m > 0) {
        temp += c * getAns(cntC + 1, cntM, c - v, m + min(c / 2, v / 2), p + min(c / 2, v / 2), v)
                + m * getAns(cntC, cntM + 1, c + min(m / 2, v / 2), m - v, p + min(m / 2, v / 2), v)
                + (cntC + cntM + 1) * p;
    } else if (c > 0) {
        temp += c * getAns(cntC + 1, cntM, c - v, m, p + min(c, v), v)
                + (cntC + cntM + 1) * p;
    } else {
        temp += m * getAns(cntC, cntM + 1, c, m - v, p + min(m, v), v)
                + (cntC + cntM + 1) * p;
    }
    
    return dp[state.first][state.second] = temp;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    int t;
    cin >> t;
    
    while (t--) {
        lli c, m, p, v;
        cin >> c >> m >> p >> v;
        
        nc = c * 10000;
        nm = m * 10000;
        nv = v * 10000;
        mx = (nc + nv - 1) / nv + (nc + nm + nv - 1) / nv + 1;
        mc = (nc + nm + nv - 1) / nv;
        
        memset(dp, -1, sizeof(dp));
        cout << setprecision(15) << getAns(0, 0, nc, nm, p, nv) << endl;
    }
    
    return 0;
}