#include <iostream>
#include <iomanip>
#include <vector>

using namespace std;

long long int nc, nm, nv;
vector<vector<double>> dp;

double getAns(double c, double m, double p, double v) {
  int cntC = 0, cntM = 0;
  dp[0][0] = 0.0;

  for (int i = 0; i <= nc; i++) {
    for (int j = 0; j <= nm; j++) {
      if (i == 0 && j == 0) continue;
      
      double& temp = dp[i][j];
      temp = 0.0;

      if (c > 0.0 && m > 0.0) {
        temp += c * dp[i + 1][j] + m * dp[i][j + 1] + (cntC + cntM + 1) * p;
        temp += c * dp[i + 1][j] + m * dp[i][j + 1] + (cntC + cntM + 1) * p;
        temp += c * dp[i + 1][j] + m * dp[i][j + 1] + (cntC + cntM + 1) * p;
        temp += c * dp[i + 1][j] + m * dp[i][j + 1] + (cntC + cntM + 1) * p;
      } else if (c > 0.0) {
        temp += c * dp[i + 1][j] + (cntC + cntM + 1) * p;
      } else {
        temp += m * dp[i][j + 1] + (cntC + cntM + 1) * p;
      }

      temp /= (2.0 + c + m);
    }
  }

  return dp[0][0];
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;

  while (t--) {
    double c, m, p, v;
    cin >> c >> m >> p >> v;

    nc = c * 10000;
    nm = m * 10000;
    nv = v * 10000;

    dp.assign(nc + 1, vector<double>(nm + 1, -1.0));

    cout << fixed << setprecision(15) << getAns(c, m, p, v) << endl;
  }

  return 0;
}