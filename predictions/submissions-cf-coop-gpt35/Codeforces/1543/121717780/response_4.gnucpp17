#include <iostream>
#include <iomanip>
#include <vector>
using namespace std;

long long int nc, nm, nv, mx;
vector<double> dp;

double getAns(long long int cntC, long long int cntM, double c, double m, double p, double v) {
  if (c <= 0.0 && m <= 0.0) {
    return (double)(cntC + cntM + 1);
  }
  if (dp[cntC * mx + cntM] != 0.0) {
    return dp[cntC * mx + cntM];
  }
  double temp = 0.0;

  if (c > 0.0 && m > 0.0) {
    temp += c * getAns(cntC + 1, cntM, c - v, m + min(c / 2, v / 2), p + min(c / 2, v / 2), v) +
            m * getAns(cntC, cntM + 1, c + min(m / 2, v / 2), m - v, p + min(m / 2, v / 2), v) +
            (cntC + cntM + 1) * p;
  } else if (c > 0.0) {
    temp += c * getAns(cntC + 1, cntM, c - v, m, p + min(c, v), v) +
            (cntC + cntM + 1) * p;
  } else {
    temp += m * getAns(cntC, cntM + 1, c, m - v, p + min(m, v), v) +
            (cntC + cntM + 1) * p;
  }

  dp[cntC * mx + cntM] = temp;
  return temp;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;

  while (t--) {
    double c, m, p, v;
    cin >> c >> m >> p >> v;

    nc = c * 10000;
    nm = m * 10000;
    nv = v * 10000;
    mx = (nc + nv - 1) / nv + (nc + nm + nv - 1) / nv + 1;

    dp.resize(mx, 0.0);

    cout << fixed << getAns(0, 0, c, m, p, v) << endl;
  }

  return 0;
}