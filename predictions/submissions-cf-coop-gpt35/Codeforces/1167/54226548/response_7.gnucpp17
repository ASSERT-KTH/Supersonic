#include <iostream>
#include <vector>
#include <unordered_map>
#include <bitset>
using namespace std;

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(NULL);
  cout.tie(NULL);
  int n, m;
  cin >> n >> m;

  unordered_map<int, vector<int>> graph; // Use an adjacency list for the graph

  for (int i = 0; i < m; i++) {
    int l, a, b;
    cin >> l >> a;
    l--; // Adjust index to 0-based
    while (l-- > 0) {
      cin >> b;
      graph[a].push_back(b);
      graph[b].push_back(a);
      a = b;
    }
  }

  vector<int> ans(n + 1, 0); // Initialize ans array with 0s

  for (int i = 1; i <= n; i++) {
    if (ans[i] > 0) {
      cout << ans[i] << " ";
      continue;
    }

    int res = 0;
    bitset<500001> bs;
    bs.set(i);
    vector<int> stack;
    stack.push_back(i);

    while (!stack.empty()) {
      int now = stack.back();
      stack.pop_back();
      res++;
      ans[now] = res; // Update ans array during traversal

      for (int next : graph[now]) {
        if (!bs[next]) {
          bs.set(next);
          stack.push_back(next);
        }
      }
    }

    cout << res << " ";
  }

  cout << endl;
}