#include <iostream>
#include <vector>
using namespace std;

int n, m;
vector<int>* graph;
vector<bool> ans;

int answer(int& i) {
  if (ans[i])
    return ans[i];

  int stack[500001];
  int top = -1;
  stack[++top] = i;
  vector<int> list;
  bool visited[500001] = {false};
  visited[i] = true;

  while (top >= 0) {
    int now = stack[top--];
    list.push_back(now);
    for (int next : graph[now])
      if (!visited[next]) {
        visited[next] = true;
        stack[++top] = next;
      }
  }

  int res = list.size();
  for (int next : list)
    ans[next] = true;

  return res;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  cin >> n >> m;

  graph = new vector<int>[n+1];
  ans = vector<bool>(n+1, false);

  for (int i = 0; i < m; i++) {
    int l, a;
    cin >> l >> a;
    if (l < 0)
      continue;
    while (l-- > 0) {
      int b;
      cin >> b;
      graph[a].push_back(b);
      graph[b].push_back(a);
      a = b;
    }
  }

  for (int i = 1; i <= n; i++)
    cout << answer(i) << " ";
  cout << endl;

  delete[] graph;

  return 0;
}