The given code appears to be a program that reads a series of strings from the input and checks if each string is a duplicate. If a string is a duplicate, it appends a number to the string to make it unique and prints it.

Here are some potential optimizations that can be applied to this code:

1. Avoid unnecessary includes: The code includes the entire `<bits/stdc++.h>` header, which includes a large number of standard library headers. This can increase compilation time and unnecessarily bloat the code. It's better to include only the required headers.

2. Avoid using `using namespace std;`: This line brings all the identifiers from the `std` namespace into the global namespace. While it makes the code shorter, it can lead to name clashes and make the code harder to maintain. It's better to explicitly use the `std::` prefix for standard library identifiers.

3. Avoid using `typedef` for simple type aliases: The code defines type aliases for `long long`, `unsigned long long`, and `long double` using `typedef`. However, C++11 introduced the `using` keyword, which is more readable and flexible. It's better to use `using` instead of `typedef`.

4. Avoid unnecessary semicolon after `#define`: The code defines `endl` as `'\n'` followed by a semicolon. This is unnecessary and can lead to unexpected behavior. The semicolon should be removed.

5. Avoid unnecessary use of `const` variables: The code defines constants for positive infinity, negative infinity, and the value of pi. However, these constants are not used in the code and can be removed.

6. Optimize the `unordered_map` usage:
   - The `unordered_map` is currently set to reserve space for 2^18 elements. However, it's not clear if this number is optimal or chosen arbitrarily. It's better to profile the code and find the optimal value for the capacity.
   - The `max_load_factor()` function is called to set the maximum load factor to 0.25. Again, it's not clear if this value is optimal. Profiling can help determine the best load factor.
   - Instead of using `unordered_map::find()` followed by `unordered_map::insert()` or `unordered_map::operator[]` to insert a new string or increment the count, we can use `unordered_map::emplace()`. This function performs both operations in a single step, reducing the number of hash lookups.

7. Avoid repeated calculations in `bigMod()` and `invMod()`: The functions `bigMod()` and `invMod()` calculate `A * A` and `M - 2` in each iteration of the while loop. These calculations can be moved outside the loop to avoid redundancy.

8. Avoid using `while (n--)` loop: The code uses a `while` loop with a decrementing counter `n` to iterate over the input strings. It's more idiomatic and efficient to use a `for` loop with a loop variable that starts from `n` and decrements with each iteration.

9. Minimize the use of `std::endl`: The code uses `std::endl` to output a newline character and flush the output stream. However, flushing the stream after every output can significantly reduce performance. It's better to use `'\n'` to output a newline character and flush the output stream only when necessary.

Taking these optimizations into account, here is the optimized code:

```cpp
#include <iostream>
#include <string>
#include <unordered_map>

const int N = 200005;

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);

  int n;
  std::cin >> n;

  std::unordered_map<std::string, int> mp;
  mp.reserve(1 << 18);
  mp.max_load_factor(0.25);

  for (int i = 0; i < n; ++i) {
    std::string ar;
    std::cin >> ar;

    auto [it, inserted] = mp.emplace(ar, 0);
    if (inserted) {
      std::cout << "OK\n";
    } else {
      std::cout << ar << ++it->second << '\n';
    }
  }

  return 0;
}
```

These optimizations aim to improve the performance and readability of the code without changing its functionality.