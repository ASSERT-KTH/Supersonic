#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
#define endl '\n';
#define FASTER                                                                 \
  ios_base::sync_with_stdio(false);                                            \
  cin.tie(NULL);                                                               \
  cout.tie(NULL);
const ll POSITIVE_INFINITY = 9223372036854775807;
const ll NEGATIVE_INFINITY = -9223372036854775807;
const ll MOD = 1000000007;
const ld PI = acos(-1.0);
template <typename T> inline T bigMod(T A, T B, T M = MOD) {
  A %= M;
  T ret = 1;
  while (B) {
    if (B & 1)
      ret = (ret * A) % M;
    A = (A * A) % M;
    B = B >> 1;
  }
  return ret;
}
template <typename T> inline T invMod(T A, T M = MOD) {
  return bigMod(A, M - 2, M);
}
const int N = 200005;
int main() {
  FASTER;
  int n;
  cin >> n;
  
  // Step 1: Replace the unordered_map with a vector to store strings
  vector<string> strings;
  strings.reserve(n);
  
  // Step 2: Create a set to store the unique strings
  unordered_set<string> uniqueStrings;
  uniqueStrings.reserve(n);
  
  while (n--) {
    string ar;
    cin >> ar;
    
    // Step 3: Check if the string is already present in the set
    if (uniqueStrings.count(ar) == 0) {
      // The string is not present, add it to the set and vector
      uniqueStrings.insert(ar);
      strings.push_back(ar);
      
      // Step 4: Output "OK" for the new string
      cout << "OK\n";
    } else {
      // The string is already present, append its count to the string
      int count = 1;
      string newString;
      do {
        newString = ar + to_string(count);
        count++;
      } while (uniqueStrings.count(newString) != 0);
      
      // Add the new string to the set and vector
      uniqueStrings.insert(newString);
      strings.push_back(newString);
      
      // Step 5: Output the new string
      cout << newString << "\n";
    }
  }
  
  // Step 6: Print all the output strings at once
  for (const string& s : strings) {
    cout << s << "\n";
  }
  
  return 0;
}