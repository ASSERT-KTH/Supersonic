#include <iostream>
#include <cstdio>
#include <cstring>

using namespace std;

const int MAX_CHILDREN = 26;

struct TrieNode {
    TrieNode* children[MAX_CHILDREN];
    bool isEndOfWord;

    TrieNode() {
        memset(children, 0, sizeof(children));
        isEndOfWord = false;
    }
};

class Trie {
public:
    Trie() {
        root = new TrieNode();
    }

    void insert(const string& word) {
        TrieNode* curr = root;
        for (char c : word) {
            int index = c - 'a';
            if (curr->children[index] == nullptr) {
                curr->children[index] = new TrieNode();
            }
            curr = curr->children[index];
        }
        curr->isEndOfWord = true;
    }

    bool search(const string& word) {
        TrieNode* curr = root;
        for (char c : word) {
            int index = c - 'a';
            if (curr->children[index] == nullptr) {
                return false;
            }
            curr = curr->children[index];
        }
        return curr != nullptr && curr->isEndOfWord;
    }

private:
    TrieNode* root;
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n;
    scanf("%d", &n);

    Trie trie;
    while (n--) {
        char ar[101];
        scanf("%s", ar);
        string word(ar);

        if (trie.search(word)) {
            cout << word << trie[word] << "\n";
            trie.insert(word);
        } else {
            cout << "OK\n";
            trie.insert(word);
        }
    }

    return 0;
}