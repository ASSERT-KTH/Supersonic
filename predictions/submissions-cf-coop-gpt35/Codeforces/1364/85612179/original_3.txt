The provided code appears to be a C++ program that takes an integer `n` as input, followed by an array of `n` integers. The program then performs some operations on the input array and outputs the result.

Upon analyzing the code, I have identified the following potential areas for optimization:

1. Unnecessary imports: The code includes several unnecessary import statements, such as `#include <bits/stdc++.h>` and `#include <chrono>`. These imports can be removed to reduce compilation time and potentially improve performance.

2. Unnecessary typedefs: The code includes several typedefs that are not used in the program. These typedefs can be removed to simplify the code and improve readability.

3. Unnecessary data structures: The code uses unordered_map and map data structures, which may not be necessary for the given problem. Replacing these data structures with simpler alternatives, such as arrays or vectors, may improve performance.

4. Redundant computations: The code performs some redundant computations, such as repeatedly checking if an element exists in a set. These computations can be optimized to avoid unnecessary iterations.

5. Inefficient loops: The code uses a few loops that can potentially be optimized. For example, the loop that initializes the `ans` vector can be simplified by removing unnecessary conditions.

6. Lack of compiler optimizations: The code does not include any compiler optimization directives. Adding pragmas or compiler options to enable optimization flags can potentially improve the performance of the code.

Based on these observations, I propose the following optimization strategy:

1. Remove unnecessary imports: Remove the `#include <bits/stdc++.h>` and `#include <chrono>` statements from the code.

2. Remove unnecessary typedefs: Remove the unused typedefs from the code.

3. Replace unordered_map and map: Replace the unordered_map and map data structures with simpler alternatives, such as arrays or vectors, to improve performance.

4. Optimize redundant computations: Optimize the loop that checks if an element exists in a set by using a more efficient approach, such as binary search or a hash set.

5. Simplify loops: Simplify the loop that initializes the `ans` vector to remove unnecessary conditions and improve code readability.

6. Enable compiler optimizations: Add compiler optimization directives or flags to enable optimization during compilation.

Let's now proceed with optimizing the code step by step.