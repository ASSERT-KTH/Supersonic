#include <iostream>
#include <vector>

using namespace std;

void dfs(int s, int des, vector<int>& vec, vector<int>& arr) {
    vector<int> stack;
    stack.push_back(s);

    while (!stack.empty()) {
        int node = stack.back();
        stack.pop_back();

        if (node == des) {
            return;
        }

        if (!arr[node]) {
            arr[node] = 1;

            for (int i : vec[node]) {
                if (!arr[i]) {
                    stack.push_back(i);
                }
            }
        }
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int t;
    cin >> t;

    while (t--) {
        int n;
        cin >> n;

        vector<int> a(n + 1);
        for (int i = 1; i <= n; i++) {
            cin >> a[i];
        }

        vector<int> v;
        for (int i = 1; i <= n; i++) {
            if (i == 1 || i == n || (a[i - 1] < a[i]) != (a[i] < a[i + 1])) {
                v.push_back(a[i]);
            }
        }

        cout << v.size() << endl;
    }

    return 0;
}