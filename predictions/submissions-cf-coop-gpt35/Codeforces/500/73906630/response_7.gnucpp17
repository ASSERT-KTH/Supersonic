#include <iostream>
#include <vector>
#include <algorithm>

void initialize(int n, int* a, int* sz) {
  for (int i = 1; i <= n; i++) {
    a[i] = i;
    sz[i] = 1;
  }
}

int root(int i, int* a) {
  while (a[i] != i) {
    a[i] = a[a[i]];
    i = a[i];
  }
  return i;
}

void merge(int x, int y, int* a, int* sz) {
  int u = root(x, a);
  int v = root(y, a);
  if (sz[u] < sz[v]) {
    std::swap(u, v);
  }
  a[v] = a[u];
  sz[u] += sz[v];
}

int main() {
  std::ios::sync_with_stdio(0);
  std::cin.tie(0);
  std::cout.tie(0);

  int n;
  std::cin >> n;
  
  int* a = new int[n + 1];
  int* sz = new int[n + 1];
  
  initialize(n, a, sz);
  
  int* v = new int[n + 1];
  for (int i = 1; i <= n; i++) {
    std::cin >> v[i];
  }
  
  std::string* s = new std::string[n + 1];
  for (int i = 1; i <= n; i++) {
    std::cin >> s[i];
    for (int j = 1; j <= n; j++) {
      if (s[i][j] == '1') {
        if (root(i, a) != root(j, a)) {
          merge(i, j, a, sz);
        }
      }
    }
  }

  std::vector<std::vector<int>> v_e(n + 1);
  for (int i = 1; i <= n; i++) {
    v_e[root(i, a)].push_back(v[i]);
  }

  for (int i = 1; i <= n; i++) {
    std::sort(v_e[i].begin(), v_e[i].end());
  }

  for (int i = 1; i <= n; i++) {
    int x = root(i, a);
    std::cout << v_e[x][i - 1] << " ";
  }
  std::cout << std::endl;

  delete[] a;
  delete[] sz;
  delete[] v;
  delete[] s;

  return 0;
}