#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int N = 400;

int a[N], sz[N], rank[N];
int v[N + 1], ans[N];
vector<int> v_e[N];

void initialize() {
  for (int i = 1; i <= N; i++) {
    a[i] = i;
    sz[i] = 1;
    rank[i] = 0;
  }
}

int root(int i) {
  while (a[i] != i) {
    a[i] = a[a[i]];
    i = a[i];
  }
  return i;
}

void merge(int x, int y) {
  int u = root(x);
  int v = root(y);
  if (u != v) {
    if (rank[u] < rank[v]) {
      swap(u, v);
    }
    a[v] = a[u];
    sz[u] += sz[v];
    if (rank[u] == rank[v]) {
      rank[u]++;
    }
  }
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  int n;
  cin >> n;
  initialize();

  for (int i = 1; i <= n; i++) {
    cin >> v[i];
  }

  string s[n + 1];
  for (int i = 1; i <= n; i++) {
    cin >> s[i];
    for (int j = 1; j <= n; j++) {
      if (s[i][j - 1] == '1') {
        merge(i, j);
      }
    }
  }

  for (int i = 1; i <= n; i++) {
    v_e[root(i)].push_back(v[i]);
  }

  for (int i = 1; i <= n; i++) {
    sort(v_e[i].begin(), v_e[i].end());
  }

  for (int i = 1; i <= n; i++) {
    int x = root(i);
    cout << v_e[x][i - 1] << " ";
  }
  cout << endl;

  return 0;
}