#pragma GCC optimize("O3", "unroll-loops")
#pragma GCC target("avx2")
#include <bits/stdc++.h>
using namespace std;
#define ll long long

const int MAX_N = 1000000;

int n, m, k, ans;
int a[MAX_N], dp[MAX_N], prefixSum[MAX_N];

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  
  cin >> n >> m >> k;
  
  for (int i = 0; i < n; i++)
    cin >> a[i];
  
  // Precompute prefix sum
  prefixSum[0] = a[0];
  for (int i = 1; i < n; i++)
    prefixSum[i] = prefixSum[i-1] + a[i];
  
  for (int i = 0; i < n; i++) {
    int sum = prefixSum[i]; // Start sum from the ith element
    
    // Calculate the maximum sum of subarray of length at most m
    for (int j = i - 1; j >= 0 && i - j < m; j--) {
      dp[i] = max(dp[i], dp[j] + sum - k);
      sum += a[j];
    }
    
    ans = max(ans, dp[i]);
  }
  
  cout << ans;
  return 0;
}