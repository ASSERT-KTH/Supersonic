#include <bits/stdc++.h>
using namespace std;
using pii = pair<int, int>;
const int maxLig = (1e5) + 5;
const int maxCol = 12;
const int maxReq = (1e5) + 5;
const int sqr = 600;
int nbLig, nbCol, nbReq;
char grille[maxLig][maxCol];
int proc[maxLig][maxCol];
int tps = 0;
int go[maxLig][maxCol];
int blocRef[maxLig];
int lastProcessedRow = 0;

void comp(int lig, int col, int safeLig) {
  if (proc[lig][col] == tps)
    return;

  int nextLig, nextCol;
  while (true) {
    proc[lig][col] = tps;
    nextLig = lig;
    nextCol = col;

    if (grille[lig][col] == '<')
      --nextCol;
    else if (grille[lig][col] == '>')
      ++nextCol;
    else if (grille[lig][col] == '^')
      --nextLig;

    if (nextLig == safeLig || grille[nextLig][nextCol] == '~') {
      go[lig][col] = nextLig * maxCol + nextCol;
      break;
    } else if (grille[lig][col] != '^' && grille[lig][nextCol] != '^' &&
               grille[lig][col] != grille[lig][nextCol]) {
      go[lig][col] = 0;
      break;
    } else {
      lig = nextLig;
      col = nextCol;
    }
  }
}

pii getFin(int lig, int col) {
  int curr = lig * maxCol + col;
  while (go[curr / maxCol][curr % maxCol] != 0 && grille[curr / maxCol][curr % maxCol] != '~') {
    curr = go[curr / maxCol][curr % maxCol];
  }
  return {curr / maxCol, curr % maxCol};
}

bool compBloc(int bloc) {
  int deb = bloc * sqr, fin = min(nbLig, (bloc + 1) * sqr);
  if (deb > nbLig)
    return false;

  for (int lig = max(lastProcessedRow + 1, deb + 1); lig <= fin; ++lig) {
    blocRef[lig] = bloc;
    for (int col = 1; col <= nbCol; ++col) {
      comp(lig, col, deb);
    }
  }

  lastProcessedRow = fin;
  return true;
}

int main() {
  cin >> nbLig >> nbCol >> nbReq;
  fill_n(&grille[0][0], maxLig * maxCol, '~');

  for (int lig = 1; lig <= nbLig; ++lig) {
    for (int col = 1; col <= nbCol; ++col) {
      cin >> grille[lig][col];
    }
  }

  ++tps;
  for (int bloc = 0;; ++bloc) {
    if (!compBloc(bloc))
      break;
  }

  for (int req = 0; req < nbReq; ++req) {
    char mode;
    cin >> mode;
    int lig, col;
    cin >> lig >> col;

    if (mode == 'A') {
      pii res = getFin(lig, col);
      if (res == pii{0, 0})
        res = {-1, -1};
      cout << res.first << " " << res.second << "\n";
    } else {
      ++tps;
      char nv;
      cin >> nv;
      grille[lig][col] = nv;
      int bloc = blocRef[lig];
      compBloc(bloc);
      if (bloc)
        compBloc(bloc - 1);
    }
  }
}