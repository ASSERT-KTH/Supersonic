#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int N = 100005;
const int mod = 1000000007;

long long int f(int i, int k, int z, int arr[]) {
  long long int dp[N][6] = {0}; // Initialize dp array with zeros
  int n = arr[0]; // Get the size of arr
  long long int ans = arr[0]; // Initialize ans with arr[0]
  for (int j = 1; j <= k; j++) {
    for (int l = 0; l <= z && l <= n - j; l++) {
      long long int left = 0;
      long long int right = 0;
      if (l && i - j >= 0) {
        left = dp[i - 1][l - 1];
        dp[i][l] = max(dp[i][l], dp[i - 1][l - 1]);
      }
      if (i + j < n) {
        right = dp[i + 1][l];
        dp[i][l] = max(dp[i][l], dp[i + 1][l]);
      }
      ans = max(ans, arr[i] + left + right);
      dp[i][l] = max(dp[i][l], arr[i] + left + right);
    }
  }
  return ans;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    int n, k, z;
    cin >> n >> k >> z;
    int arr[n];
    for (int i = 0; i < n; i++) {
      cin >> arr[i];
    }
    long long int ans = f(0, k, z, arr);
    cout << ans << endl;
  }
  return 0;
}