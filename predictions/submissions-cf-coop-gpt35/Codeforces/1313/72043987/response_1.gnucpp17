#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <string.h>
#include <unordered_map>
#include <vector>
using namespace std;
#define COUT(x) cout << #x << " = " << (x) << " (L" << __LINE__ << ")" << endl
template <class T> void printvec(const vector<T> &v) {
  for (auto x : v) {
    cout << x << " ";
  }
  cout << endl;
}
template <class T> void printtree(const vector<vector<T>> &tree) {
  for (long long i = 0; i < tree.size(); ++i) {
    cout << i + 1 << ": ";
    printvec(tree[i]);
  }
}
template <class T, class U> void printmap(const map<T, U> &mp) {
  for (auto x : mp) {
    cout << x.first << "=>" << x.second << endl;
  }
}
template <class T> inline bool chmax(T &a, T b) {
  if (a < b) {
    a = b;
    return true;
  }
  return false;
}
template <class T> inline bool chmin(T &a, T b) {
  if (a > b) {
    a = b;
    return true;
  }
  return false;
}
#define rep(i, n) for (ll i = 0; i < n; ++i)
#define all(s) s.begin(), s.end()
#define fr first
#define sc second
#define mp make_pair
#define pb push_back
typedef long long ll;
typedef unsigned long long ull;
typedef pair<ll, ll> P;
typedef tuple<ll, ll, ll> triple;
typedef double D;
const ll INF = 1e9;
const ll MOD = 1000000007;
void solve() {}
int main(int argc, char **argv) {
  cin.tie(NULL);
  cout.tie(NULL);
  ios_base::sync_with_stdio(false);
  ll n, m, k;
  cin >> n >> m >> k;

  // Step 1: Memory Usage Optimization
  vector<ll> t(2 * n * 3);  // Using a simple 2D array

  rep(i, n) {
    ll l, r;
    cin >> l >> r;
    t[6 * i] = l;
    t[6 * i + 1] = 1;
    t[6 * i + 2] = i;
    t[6 * i + 3] = r + 1;
    t[6 * i + 4] = -1;
    t[6 * i + 5] = i;
  }

  sort(t.begin(), t.end());

  ll states_size = 1 << k;
  vector<ll> states(states_size, 0);
  vector<ll> streams;

  ll sz = 0;
  ll pi = t[2 * 0 + 2], ni;
  ll pp = t[2 * 0], np;
  
  // Step 2: Loop Optimization
  for (ll i = 0; i < 2 * n; ++i) {
    ni = t[3 * i + 2];
    np = t[3 * i];
    
    if (t[3 * i + 1] == -1) {
      --sz;
      ll gi = 0;
      while (streams[gi] != ni) {
        ++gi;
      }
      
      // Step 2: Loop Optimization
      for (ll b = 0; b < (1 << sz); ++b) {
        ll exp1 = ((b >> gi) << (gi + 1)) + (b % (1 << gi));
        ll exp2 = exp1 + (1 << gi);
        states[b] = max(states[exp1] + (__builtin_popcount(exp1) % 2) * (np - pp),
                     states[exp2] + (__builtin_popcount(exp2) % 2) * (np - pp));
      }

      streams.erase(streams.begin() + gi);
    } else {
      streams.push_back(ni);
      
      // Step 2: Loop Optimization
      for (ll b = 0; b < (1 << sz); ++b) {
        states[b] = states[b] + (__builtin_popcount(b) % 2) * (np - pp);
        states[b + (1 << sz)] = states[b] + (__builtin_popcount(b) % 2) * (np - pp);
      }

      ++sz;
    }

    pi = ni;
    pp = np;
  }

  cout << states[0] << " ";
}