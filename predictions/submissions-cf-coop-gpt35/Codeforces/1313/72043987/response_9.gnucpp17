#include <iostream>
#include <vector>
#include <map>
using namespace std;

template <class T> inline bool chmax(T &a, T b) {
  if (a < b) {
    a = b;
    return true;
  }
  return false;
}

int main(int argc, char **argv) {
  ios_base::sync_with_stdio(false);
  
  ll n, m, k;
  cin >> n >> m >> k;
  
  vector<pair<ll, pair<ll, ll>>> t(2 * n);
  for (ll i = 0; i < n; ++i) {
    ll l, r;
    cin >> l >> r;
    t[2 * i] = {l, {1, i}};
    t[2 * i + 1] = {r + 1, {-1, i}};
  }
  sort(t.begin(), t.end());
  
  vector<ll> states(1 << k);
  vector<ll> newstates(1 << k);
  ll sz = 0;
  ll pi = t[0].second.second, ni;
  ll pp = t[0].first, np;
  map<ll, ll> streams;
  
  for (ll i = 0; i < 2 * n; ++i) {
    ni = t[i].second.second;
    np = t[i].first;
    
    if (t[i].second.first == -1) {
      --sz;
      ll gi = streams[ni];
      auto it = streams.begin();
      while (it->second != gi) {
        ++it;
      }
      
      for (ll b = 0; b < (1 << sz); ++b) {
        ll exp1 = ((b >> gi) << (gi + 1)) + (b % (1 << gi));
        ll exp2 = exp1 + (1 << gi);
        newstates[b] =
            max(states[exp1] + (count_bits(exp1) % 2) * (np - pp),
                states[exp2] + (count_bits(exp2) % 2) * (np - pp));
      }
      
      swap(states, newstates);
      streams.erase(it);
    } else {
      streams[ni] = sz;
      
      for (ll b = 0; b < (1 << sz); ++b) {
        newstates[b] = states[b] + (count_bits(b) % 2) * (np - pp);
        newstates[b + (1 << sz)] =
            states[b] + (count_bits(b) % 2) * (np - pp);
      }
      
      swap(states, newstates);
      ++sz;
    }
    
    pi = ni;
    pp = np;
  }
  
  cout << states[0] << " ";
}