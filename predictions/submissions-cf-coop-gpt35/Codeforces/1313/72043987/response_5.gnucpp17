#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    long long n, m, k;
    cin >> n >> m >> k;
    
    vector<pair<long long, long long>> t(2 * n);
    for (int i = 0; i < n; i++) {
        long long l, r;
        cin >> l >> r;
        t[2 * i] = {l, 1};
        t[2 * i + 1] = {r + 1, -1};
    }
    
    sort(t.begin(), t.end());
    
    long long states[1 << k] = {0};
    long long newstates[1 << k] = {0};
    long long sz = 0;
    long long pi = t[0].second, ni;
    long long pp = t[0].first, np;
    vector<long long> streams;
    
    for (int i = 0; i < 2 * n; i++) {
        ni = t[i].second;
        np = t[i].first;
        
        if (t[i].second == -1) {
            --sz;
            long long gi = 0;
            while (streams[gi] != ni) {
                ++gi;
            }
            for (int b = 0; b < (1 << sz); b++) {
                long long exp1 = ((b >> gi) << (gi + 1)) + (b % (1 << gi));
                long long exp2 = exp1 + (1 << gi);
                long long popcount1 = (__builtin_popcount(exp1) % 2);
                long long popcount2 = (__builtin_popcount(exp2) % 2);
                newstates[b] = max(states[exp1] + popcount1 * (np - pp), states[exp2] + popcount2 * (np - pp));
            }
            copy(newstates, newstates + (1 << sz), states);
            streams.erase(streams.begin() + gi);
        } else {
            streams.push_back(ni);
            for (int b = 0; b < (1 << sz); b++) {
                long long popcount = (__builtin_popcount(b) % 2);
                newstates[b] = states[b] + popcount * (np - pp);
                newstates[b + (1 << sz)] = states[b] + popcount * (np - pp);
            }
            copy(newstates, newstates + (1 << (sz + 1)), states);
            ++sz;
        }
        
        pi = ni;
        pp = np;
    }
    
    cout << states[0] << " ";
    
    return 0;
}