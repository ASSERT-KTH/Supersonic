#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

typedef long long int ll;

const int N = 500009;
int a[N], l[N], r[N], res[N];

void update(int id, int l, int r, int pos, int x, vector<int>& node) {
  if (l > pos || r < pos)
    return;
  if (l == r) {
    node[id] = x;
    return;
  }
  int mid = (l + r) / 2;
  update(id * 2, l, mid, pos, x, node);
  update(id * 2 + 1, mid + 1, r, pos, x, node);
  node[id] = (node[id * 2] < node[id * 2 + 1] ? node[id * 2] : node[id * 2 + 1]);
}

int find(int id, int l, int r, int tr, int ph, int x, vector<int>& node) {
  if (tr > ph || l > ph || r < tr || node[id] > x)
    return 0;
  if (l == r)
    return r;
  int mid = (l + r) / 2;
  if (l >= tr && r <= ph) {
    if (node[id] > x)
      return 0;
    if (node[id * 2 + 1] <= x)
      return find(id * 2 + 1, mid + 1, r, tr, ph, x, node);
    else
      return find(id * 2, l, mid, tr, ph, x, node);
  }
  return (find(id * 2, l, mid, tr, ph, x, node) > find(id * 2 + 1, mid + 1, r, tr, ph, x, node) ? find(id * 2, l, mid, tr, ph, x, node) : find(id * 2 + 1, mid + 1, r, tr, ph, x, node));
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n;
  cin >> n;

  for (int i = 1; i <= n; i++)
    cin >> a[i];

  vector<int> node(4 * N);

  int id;
  id = 0;
  for (int i = 1; i <= n; i++) {
    id = find(1, 1, n, 1, i - 1, a[i], node);
    update(1, 1, n, i, a[i], node);
    l[i] = l[id] + a[i] * (i - id);
  }

  id = 0;
  for (int i = n; i >= 1; i--) {
    id = find(1, 1, n, 1, n - i, a[i], node);
    update(1, 1, n, i, a[i], node);
    r[i] = r[id] + a[i] * (id - i);
  }

  int pos = 1, minn = a[1];
  for (int i = 2; i <= n; i++) {
    if (l[i] + r[i] - a[i] < 0) {
      pos = i;
      minn = a[i];
    }
  }

  res[pos] = a[pos] = minn;
  for (int i = pos - 1; i >= 1; i--)
    res[i] = a[i] = (minn < a[i] ? minn : a[i]);
  for (int i = n - 1; i >= 1; i--)
    res[i] = a[i] = (minn < a[i] ? minn : a[i]);

  for (int i = 1; i <= n; i++)
    cout << res[i] << " ";

  return 0;
}