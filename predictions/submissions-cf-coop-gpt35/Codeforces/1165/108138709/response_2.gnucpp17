#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;

const int N = 2e5 + 7;

int n, m;
int k[N], t[N], sum;
vector<int> p, s[N];

inline ll read() {
    ll s = 0, w = 1;
    char ch = getchar();
    for (; !isdigit(ch); ch = getchar())
        if (ch == '-')
            w = -1;
    for (; isdigit(ch); ch = getchar())
        s = (s << 1) + (s << 3) + (ch ^ 48);
    return s * w;
}

inline void print(ll x, int op = 10) {
    if (!x) {
        putchar('0');
        if (op)
            putchar(op);
        return;
    }
    char F[40];
    ll tmp = x > 0 ? x : -x;
    if (x < 0)
        putchar('-');
    int cnt = 0;
    while (tmp > 0) {
        F[cnt++] = tmp % 10 + '0';
        tmp /= 10;
    }
    while (cnt > 0)
        putchar(F[--cnt]);
    if (op)
        putchar(op);
}

inline ll gcd(ll x, ll y) {
    while (y) {
        ll temp = y;
        y = x % y;
        x = temp;
    }
    return x;
}

ll qpow(ll a, ll b) {
    ll ans = 1;
    while (b) {
        if (b & 1)
            ans *= a;
        b >>= 1;
        a *= a;
    }
    return ans;
}

ll qpow(ll a, ll b, ll mod) {
    ll ans = 1;
    while (b) {
        if (b & 1)
            (ans *= a) %= mod;
        b >>= 1;
        (a *= a) %= mod;
    }
    return ans % mod;
}

bool check(int x) {
    memset(t, 0, sizeof(t));
    int now = x, ned = sum, cnt = 0;
    int i = lower_bound(p.begin(), p.end(), x) - p.begin();
    for (int i = min(N - 1, x); i >= 1; --i) {
        now = min(now, i);
        if (now == 0 or ned == 0)
            break;
        for (auto &it : s[i]) {
            int buy = min(now, k[it] - t[it]);
            t[it] += buy;
            ned -= buy;
            now -= buy;
            cnt += buy;
        }
    }
    return x - cnt >= ned * 2;
}

void solve() {
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; ++i) {
        scanf("%d", &k[i]);
        sum += k[i];
    }
    for (int i = 1; i <= m; ++i) {
        int d, t;
        scanf("%d%d", &d, &t);
        p.push_back(d);
        s[d].push_back(t);
    }
    sort(p.begin(), p.end());
    int l = 1, r = sum * 2, ans = 1;
    while (l <= r) {
        int mid = l + r >> 1;
        if (check(mid))
            ans = mid, r = mid - 1;
        else
            l = mid + 1;
    }
    printf("%d\n", ans);
}

int main() {
    solve();
    return 0;
}