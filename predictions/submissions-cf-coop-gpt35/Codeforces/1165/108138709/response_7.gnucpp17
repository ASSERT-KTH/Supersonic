#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

const int N = 2e5 + 7;

struct Node {
  ll val;
  int id;
  bool operator<(const Node &opt) const { return val < opt.val; }
};

int n, m;
vector<int> k(N), t(N), p, s[N];
int sum;

bool check(int x) {
  fill(t.begin(), t.end(), 0);
  int now = x, ned = sum, cnt = 0;
  
  int i = lower_bound(p.begin(), p.end(), x) - p.begin();
  for (; i >= 1 && now > 0 && ned > 0; i--) {
    now = min(now, i);
    for (auto it : s[i]) {
      int buy = min(now, k[it] - t[it]);
      t[it] += buy;
      ned -= buy;
      now -= buy;
      cnt += buy;
    }
  }
  
  return x - cnt >= ned * 2;
}

void solve() {
  n = read();
  m = read();
  
  for (int i = 1; i <= n; ++i) {
    k[i] = read();
    sum += k[i];
  }
  
  for (int i = 1; i <= m; ++i) {
    int d = read();
    int t = read();
    p.push_back(d);
    s[d].push_back(t);
  }
  
  sort(p.begin(), p.end());
  
  int l = 1, r = sum * 2, ans = 1;
  
  while (l <= r) {
    int mid = l + r >> 1;
    if (check(mid))
      ans = mid, r = mid - 1;
    else
      l = mid + 1;
  }
  
  print(ans);
}

int main() {
  solve();
  return 0;
}