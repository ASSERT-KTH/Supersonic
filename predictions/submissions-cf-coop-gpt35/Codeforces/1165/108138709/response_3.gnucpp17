#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

const int N = 2e5 + 7;
int n, m;
int k[N], t[N], sum;
int p[N], s[N][N];

bool check(int x) {
  memset(t, 0, sizeof(t));
  int now = x, ned = sum, cnt = 0;
  int i = lower_bound(p, p + m, x) - p;
  for (int i = x; i >= 1; --i) {
    now = min(now, i);
    if (now == 0 || ned == 0)
      break;
    for (int j = 0; j < s[i][0]; j++) {
      int it = s[i][j + 1];
      int buy = min(now, k[it] - t[it]);
      t[it] += buy;
      ned -= buy;
      now -= buy;
      cnt += buy;
    }
  }
  return x - cnt >= ned * 2;
}

void solve() {
  cin >> n >> m;
  for (int i = 1; i <= n; ++i) {
    cin >> k[i];
    sum += k[i];
  }
  for (int i = 0; i < m; ++i) {
    int d, t;
    cin >> d >> t;
    p[i] = d;
    s[d][++s[d][0]] = t;
  }
  sort(p, p + m);
  int l = 1, r = sum * 2, ans = 1;
  while (l <= r) {
    int mid = l + r >> 1;
    if (check(mid))
      ans = mid, r = mid - 1;
    else
      l = mid + 1;
  }
  cout << ans << endl;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  solve();
  return 0;
}