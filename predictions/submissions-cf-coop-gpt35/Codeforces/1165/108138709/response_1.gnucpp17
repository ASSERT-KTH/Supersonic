#include <iostream>
#include <vector>
#include <algorithm>

typedef long long ll;

inline ll read() {
  ll s = 0, w = 1;
  char ch = getchar();
  for (; !isdigit(ch); ch = getchar())
    if (ch == '-')
      w = -1;
  for (; isdigit(ch); ch = getchar())
    s = (s << 1) + (s << 3) + (ch ^ 48);
  return s * w;
}

inline void print(ll x, int op = 10) {
  if (!x) {
    putchar('0');
    if (op)
      putchar(op);
    return;
  }
  std::string str = std::to_string(x);
  if (x < 0)
    putchar('-');
  std::cout << str;
  if (op)
    putchar(op);
}

bool check(int x, const std::vector<int>& k, const std::vector<std::vector<int>>& s, const std::vector<int>& p, int sum) {
  std::vector<int> t(k.size(), 0);
  int now = x, ned = sum, cnt = 0;
  int i = std::lower_bound(p.begin(), p.end(), x) - p.begin();
  for (; i >= 0 && now > 0 && ned > 0; i--) {
    now = std::min(now, p[i]);
    for (auto &it : s[p[i]]) {
      int buy = std::min(now, k[it] - t[it]);
      t[it] += buy;
      ned -= buy;
      now -= buy;
      cnt += buy;
    }
  }
  return x - cnt >= ned * 2;
}

void solve() {
  int n = read(), m = read();
  std::vector<int> k(n + 1);
  int sum = 0;
  for (int i = 1; i <= n; ++i) {
    k[i] = read();
    sum += k[i];
  }

  std::vector<int> p, t(n + 1);
  std::vector<std::vector<int>> s(n + 1);

  for (int i = 1; i <= m; ++i) {
    int d = read(), t = read();
    p.push_back(d);
    s[d].push_back(t);
  }

  std::sort(p.begin(), p.end());

  int l = 1, r = sum * 2, ans = 1;
  while (l <= r) {
    int mid = l + r >> 1;
    if (check(mid, k, s, p, sum))
      ans = mid, r = mid - 1;
    else
      l = mid + 1;
  }
  print(ans);
}

int main() {
  solve();
  return 0;
}