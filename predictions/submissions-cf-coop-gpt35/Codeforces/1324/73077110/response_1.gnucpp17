#include <iostream>
#include <algorithm>
using namespace std;

void solve() {
  int n;
  cin >> n;
  int a[n], b[n];
  int v[2*n] = {0}, v1[2*n] = {0};

  for (int i = 0; i < n; ++i) {
    cin >> a[i];
  }
  for (int i = 0; i < n; ++i) {
    cin >> b[i];
    v[i] = a[i] - b[i];
    v1[i] = b[i] - a[i];
  }

  int count[2] = {0};
  for (int i = 0; i < n; ++i) {
    count[v[i] + n]++;
    count[v1[i] + n]++;
  }

  int prefix_sum[2*n + 1] = {0};
  for (int i = 1; i < 2*n + 1; ++i) {
    prefix_sum[i] = prefix_sum[i-1] + count[i-1];
  }

  int ans = 0;
  for (int i = 0; i < n; ++i) {
    ans += prefix_sum[2*n] - prefix_sum[v1[i] + n];
    if (v1[i] < 0) {
      ans--;
    }
  }

  cout << ans / 2 << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  int T = 1;
  while (T--) {
    solve();
  }

  return 0;
}