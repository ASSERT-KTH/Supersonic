#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
using namespace std;

#ifdef INFOARENA
ifstream in("bellmanford.in");
ofstream out("bellmanford.out");
#else
#define in cin
#define out cout
#endif

const int NMax = 1e7 + 5;

struct Block {
    int height;
    long long cost;
};

int main() {
    int N, M;
    in >> N >> M;
    vector<vector<Block>> blocks(N + 1);
    for (int i = 1; i <= N; ++i) {
        int K;
        in >> K;
        blocks[i].resize(K);
        for (int j = 0; j < K; ++j) {
            in >> blocks[i][j].height;
        }
        for (int j = 0; j < K; ++j) {
            in >> blocks[i][j].cost;
        }
    }
    int Q, curr = 0;
    in >> Q;
    vector<Block> selectedBlocks;
    for (int i = 1; i <= Q; ++i) {
        int id, mult;
        in >> id >> mult;
        for (int j = 0; j < blocks[id].size(); ++j) {
            selectedBlocks.push_back({blocks[id][j].height, 1LL * mult * blocks[id][j].cost});
        }
    }
    blocks.clear();
    sort(selectedBlocks.begin(), selectedBlocks.end(), [](const Block& b1, const Block& b2) {
        return b1.height < b2.height;
    });
    vector<long long> dp(M + 1);
    for (int i = 1, j = 0; i <= M; ++i) {
        while (j < selectedBlocks.size() && selectedBlocks[j].height <= i) {
            dp[i] = min(dp[i], dp[i - selectedBlocks[j].height] + selectedBlocks[j].cost);
            ++j;
        }
    }
    out << dp[M] << '\n';
    return 0;
}