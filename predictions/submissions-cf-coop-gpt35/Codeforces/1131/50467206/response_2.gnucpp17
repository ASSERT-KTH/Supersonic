#include <bits/stdc++.h>
using namespace std;
#if 1
#define pv(x) std::cerr << #x << " = " << (x) << "; ", std::cerr.flush()
#define pn std::cerr << std::endl
#else
#define pv(x)
#define pn
#endif
#ifdef INFOARENA
ifstream in("bellmanford.in");
ofstream out("bellmanford.out");
#else
#define in cin
#define out cout
#endif
using ll = long long;
using ull = unsigned long long;
using uint = unsigned int;
using ld = long double;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using pld = pair<ld, ld>;
#define pb push_back
const double PI =
    3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862;
const int inf_int = 1e9 + 5;
const ll inf_ll = 1e18 + 5;
const int NMax = 1e7 + 5;
const int dx[] = {-1, 0, 0, +1}, dy[] = {0, -1, +1, 0};
const double EPS = 1e-8;
int height[NMax];
ll cost[NMax], dp[NMax];
int main() {
  int N, M;
  in >> N >> M;
  int heightsOfBlock[N + 1][NMax];
  ll costsOfBlock[N + 1][NMax];
  for (int i = 1; i <= N; ++i) {
    int K;
    in >> K;
    for (int j = 1; j <= K; ++j) {
      int val;
      in >> val;
      heightsOfBlock[i][j] = val;
    }
    for (int j = 1; j <= K; ++j) {
      int val;
      in >> val;
      costsOfBlock[i][j] = val;
    }
  }
  int Q, curr = 0;
  in >> Q;
  for (int i = 1; i <= Q; ++i) {
    int id, mult;
    in >> id >> mult;
    int size = heightsOfBlock[id][0];
    for (int j = 1; j <= size; ++j) {
      int h = heightsOfBlock[id][j], c = costsOfBlock[id][j];
      height[++curr] = h;
      cost[curr] = 1LL * mult * c;
    }
  }
  vector<pair<int, ll>> stackPushLeft, stackPushRight;
  for (int i = 1; i <= M; ++i) {
    ll minLeft = dp[i - 1];
    while (stackPushLeft.size() &&
           i - height[i] + 1 <= stackPushLeft.back().first) {
      minLeft = min(minLeft, stackPushLeft.back().second);
      stackPushLeft.pop_back();
    }
    dp[i] = minLeft + cost[i];
    ll valHere = dp[i - 1];
    minLeft = min(minLeft, valHere);
    stackPushLeft.push_back({i, minLeft});
    int idx = -1;
    while (stackPushRight.size() &&
           ((idx = stackPushRight.back().first) || true) &&
           idx + height[idx] - 1 < i) {
      stackPushRight.pop_back();
    }
    if (stackPushRight.size()) {
      ll dpPlusCost = stackPushRight.back().second;
      dp[i] = min(dp[i], dpPlusCost);
    }
    ll dpPlusCost = dp[i - 1] + cost[i];
    if (stackPushRight.size()) {
      dpPlusCost = min(dpPlusCost, stackPushRight.back().second);
    }
    stackPushRight.push_back({i, dpPlusCost});
  }
  out << dp[M] << '\n';
  return 0;
}