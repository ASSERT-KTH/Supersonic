#include <iostream>
#include <vector>
#include <deque>

using namespace std;

const int NMax = 1e7 + 5;

int height[NMax];
long long cost[NMax];
long long dp[NMax];

int main() {
    int N, M;
    cin >> N >> M;

    vector<int> heightsOfBlock[N + 1];
    vector<int> costsOfBlock[N + 1];

    for (int i = 1; i <= N; ++i) {
        int K;
        cin >> K;

        for (int j = 1; j <= K; ++j) {
            int val;
            cin >> val;
            heightsOfBlock[i].push_back(val);
        }

        for (int j = 1; j <= K; ++j) {
            int val;
            cin >> val;
            costsOfBlock[i].push_back(val);
        }
    }

    int Q, curr = 0;
    cin >> Q;

    for (int i = 1; i <= Q; ++i) {
        int id, mult;
        cin >> id >> mult;

        for (int j = 0; j < (int)heightsOfBlock[id].size(); ++j) {
            int h = heightsOfBlock[id][j], c = costsOfBlock[id][j];
            height[++curr] = h;
            cost[curr] = 1LL * mult * c;
        }
    }

    heightsOfBlock->clear();
    costsOfBlock->clear();

    deque<pair<int, long long>> stackPushLeft;
    deque<pair<int, long long>> stackPushRight;

    for (int i = 1; i <= M; ++i) {
        long long minLeft = dp[i - 1];

        while (!stackPushLeft.empty() && i - height[i] + 1 <= stackPushLeft.back().first) {
            minLeft = min(minLeft, stackPushLeft.back().second);
            stackPushLeft.pop_back();
        }

        dp[i] = minLeft + cost[i];

        long long valHere = dp[i - 1];
        minLeft = min(minLeft, valHere);
        stackPushLeft.push_back({i, minLeft});

        int idx = -1;

        while (!stackPushRight.empty() && ((idx = stackPushRight.back().first) || true) && idx + height[idx] - 1 < i) {
            stackPushRight.pop_back();
        }

        if (!stackPushRight.empty()) {
            long long dpPlusCost = stackPushRight.back().second;
            dp[i] = min(dp[i], dpPlusCost);
        }

        long long dpPlusCost = dp[i - 1] + cost[i];

        if (!stackPushRight.empty()) {
            dpPlusCost = min(dpPlusCost, stackPushRight.back().second);
        }

        stackPushRight.push_back({i, dpPlusCost});
    }

    cout << dp[M] << '\n';

    return 0;
}