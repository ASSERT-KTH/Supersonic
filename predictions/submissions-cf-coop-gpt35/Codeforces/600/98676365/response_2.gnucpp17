#include <cstdio>
#include <cstring>

const int maxn = 1e5 + 7;
const int maxStackSize = maxn << 5;

int l[maxn << 5];
int r[maxn << 5];
int v[maxn << 5];
long long num[maxn << 5];
long long sum[maxn << 5];
int G[maxn][maxn];
long long ans[maxn];

void up(int id) {
  if (num[l[id]] > num[r[id]]) {
    num[id] = num[l[id]];
    v[id] = v[l[id]];
    sum[id] = sum[l[id]];
  } else if (num[l[id]] < num[r[id]]) {
    num[id] = num[r[id]];
    v[id] = v[r[id]];
    sum[id] = sum[r[id]];
  } else {
    num[id] = num[l[id]];
    v[id] = v[l[id]];
    sum[id] = sum[l[id]] + sum[r[id]];
  }
}

void modify(int &id, int l, int r, int p) {
  if (!id)
    id = p;
  if (l == r) {
    num[id] += 1;
    sum[id] = l;
    v[id] = l;
    return;
  }
  int mid = l + r >> 1;
  if (p <= mid)
    modify(l[id], l, mid, p);
  else
    modify(r[id], mid + 1, r, p);
  up(id);
}

int merge(int a, int b, int l, int r) {
  if (!a)
    return b;
  if (!b)
    return a;
  if (l == r) {
    v[a] = l;
    sum[a] = l;
    num[a] += num[b];
    return a;
  }
  int mid = l + r >> 1;
  int stack[maxStackSize], top = 0;
  stack[top++] = a;
  while (top > 0) {
    int id = stack[--top];
    int l = l[id];
    int r = r[id];
    int mid = l + r >> 1;
    if (l == r) {
      v[id] = l;
      sum[id] = l;
      num[id] += num[b];
    } else {
      l[id] = merge(l[l].l, l[b].l, l, mid);
      r[id] = merge(r[r].r, r[b].r, mid + 1, r);
      up(id);
      stack[top++] = l[l].l;
      stack[top++] = r[r].r;
    }
  }
  return a;
}

void dfs(int u, int fa) {
  int stack[maxStackSize], top = 0;
  stack[top++] = u;
  stack[top++] = fa;
  while (top > 0) {
    int fa = stack[--top];
    int u = stack[--top];
    for (int i = 0; i < maxn; i++) {
      if (G[u][i] && i != fa) {
        stack[top++] = i;
        stack[top++] = u;
      }
    }
    merge(u, v, 1, n);
  }
  modify(u, 1, n, cor[u]);
  ans[u] = sum[u];
}

void solve() {
  int n;
  scanf("%d", &n);

  for (int i = 1; i <= n; ++i) {
    scanf("%d", &cor[i]);
  }

  for (int i = 1, u, v; i < n; ++i) {
    scanf("%d %d", &u, &v);
    G[u][v] = 1;
    G[v][u] = 1;
  }

  dfs(1, 0);

  for (int i = 1; i <= n; ++i) {
    printf("%lld%c", ans[i], " \n"[i == n]);
  }
}

int main() {
  int _T = 1;
  while (_T--)
    solve();
  return 0;
}