#include <bits/stdc++.h>
using namespace std;
#define lson t[id].l
#define rson t[id].r
typedef long long ll;
template <class T> inline void read(T &x) {
  int f = 0;
  x = 0;
  char ch = getchar();
  for (; !isdigit(ch); ch = getchar())
    f |= (ch == '-');
  for (; isdigit(ch); ch = getchar())
    x = x * 10 + ch - '0';
  if (f)
    x = -x;
}
const int maxn = 1e5 + 7;
struct Seg {
  int l, r, v;
  ll num, sum;
} t[maxn << 5];
int n, tot, cor[maxn], rt[maxn];
ll ans[maxn];
int G[maxn][2];
void up(int id) {
  if (t[lson].num != t[rson].num || t[lson].sum != t[rson].sum) {
    t[id].num = t[lson].num;
    t[id].v = t[lson].v;
    t[id].sum = t[lson].sum + t[rson].sum;
  }
}
void modify(int &id, int l, int r, int p) {
  if (!id)
    id = ++tot;
  if (l == r) {
    t[id].num += 1;
    t[id].sum = l;
    t[id].v = l;
    return;
  }
  int mid = l + r >> 1;
  if (p <= mid)
    modify(lson, l, mid, p);
  else
    modify(rson, mid + 1, r, p);
  up(id);
}
void merge(int a, int b, int l, int r) {
  if (l == r) {
    t[a].v = l;
    t[a].sum = l;
    t[a].num += t[b].num;
    return;
  }
  int mid = l + r >> 1;
  merge(t[a].l, t[b].l, l, mid);
  merge(t[a].r, t[b].r, mid + 1, r);
  up(a);
}
void dfs() {
  stack<int> st;
  st.push(1);
  while (!st.empty()) {
    int u = st.top();
    st.pop();
    modify(u, 1, n, cor[u]);
    ans[u] = t[u].sum;
    for (int i = 1; i <= G[u][0]; ++i) {
      int v = G[u][i];
      merge(u, v, 1, n);
      st.push(v);
    }
  }
}
void solve() {
  read(n);
  tot = n;
  for (int i = 1; i <= n; ++i)
    read(cor[i]);
  for (int i = 1, u, v; i < n; ++i) {
    read(u), read(v);
    G[u][++G[u][0]] = v;
    G[v][++G[v][0]] = u;
  }
  dfs();
  for (int i = 1; i <= n; ++i) {
    printf("%lld%c", ans[i], " \n"[i == n]);
  }
}
int main() {
  int _T = 1;
  while (_T--)
    solve();
  return 0;
}