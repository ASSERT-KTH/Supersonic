#include <iostream>
#include <vector>
#include <map>
using namespace std;

const long long NR = 5e5 + 10, oo = 1e18 + 10, MOD = 1e9 + 7;
const long double pi = 2 * acos(0.0);

vector<long long> v[NR];
long long n, m, sz[NR], big[NR];
long long ans[NR], c[NR];

inline void push_back(vector<long long>& vec, long long val) {
    vec.push_back(val);
}

inline pair<long long, long long> make_pair(long long a, long long b) {
    return {a, b};
}

signed main() {
    long long i, j, x, y;
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    map<long long, long long> temp;
    cin >> n;
    for (i = 1; i <= n; ++i) {
        cin >> c[i];
    }
    for (i = 1; i < n; ++i) {
        cin >> x >> y;
        push_back(v[x], y);
        push_back(v[y], x);
    }

    // dfs1
    stack<pair<long long, long long>> dfs_stack;
    dfs_stack.push(make_pair(1, 0));
    while (!dfs_stack.empty()) {
        auto [nod, prt] = dfs_stack.top();
        dfs_stack.pop();
        sz[nod] = 1;
        for (auto it : v[nod]) {
            if (it == prt)
                continue;
            dfs_stack.push(make_pair(it, nod));
            sz[nod] += sz[it];
            big[nod] = max(big[nod], sz[it]);
        }
    }

    // dfs2
    long long l_max = 0;
    dfs_stack.push(make_pair(1, 0));
    while (!dfs_stack.empty()) {
        auto [nod, prt] = dfs_stack.top();
        dfs_stack.pop();
        long long nod_boss = -1, l = 0, max_ = 0, sum = 0;
        for (auto it : v[nod]) {
            if (it == prt)
                continue;
            if (big[nod] == sz[it]) {
                nod_boss = it;
                dfs_stack.push(make_pair(it, nod));
                sum = ans[it];
                max_ = l;
                break;
            }
        }
        temp[c[nod]] = temp[c[nod]] + 1;
        if (temp[c[nod]] == max_) {
            sum += c[nod];
        }
        if (temp[c[nod]] > max_) {
            max_ = temp[c[nod]];
            sum = c[nod];
        }
        for (auto it : v[nod]) {
            if (it == prt || it == nod_boss)
                continue;
            stack<pair<long long, long long>> temp_stack;
            temp_stack.push(make_pair(it, nod));
            while (!temp_stack.empty()) {
                auto [temp_nod, temp_prt] = temp_stack.top();
                temp_stack.pop();
                long long temp_max = 0, temp_sum = 0;
                for (auto it2 : v[temp_nod]) {
                    if (it2 == temp_prt)
                        continue;
                    temp_stack.push(make_pair(it2, temp_nod));
                    temp[it2] = temp[it2] + temp[it2];
                    if (temp[it2] == temp_max) {
                        temp_sum += temp[it2];
                    }
                    if (temp[it2] > temp_max) {
                        temp_max = temp[it2];
                        temp_sum = temp[it2];
                    }
                }
                if (temp_max > max_ || (temp_max == max_ && temp_sum > sum)) {
                    max_ = temp_max;
                    sum = temp_sum;
                }
            }
        }
        l_max = max_;
        ans[nod] = sum;
    }

    for (i = 1; i <= n; ++i)
        cout << ans[i] << ' ';
    cout << '\n';
    return 0;
}