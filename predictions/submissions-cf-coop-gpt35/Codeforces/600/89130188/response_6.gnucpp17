#include <iostream>
#include <vector>
#include <map>
#include <algorithm>

#define lll long long
#define NR 500010

using namespace std;

vector<lll> v[NR];
lll n, sz[NR], big[NR];
lll ans[NR], c[NR];

void dfs1(lll nod, lll prt) {
  sz[nod] = 1;
  vector<lll> stack;
  stack.push_back(nod);

  while (!stack.empty()) {
    lll curr = stack.back();
    stack.pop_back();

    for (lll i = 0; i < v[curr].size(); ++i) {
      lll it = v[curr][i];
      if (it == prt)
        continue;
      stack.push_back(it);
      dfs1(it, curr);
      sz[nod] += sz[it];
      big[nod] = max(big[nod], sz[it]);
    }
  }
}

void dfs2(lll nod, lll prt, vector<lll>& mapp, lll& l_max) {
  lll nod_boss = -1, l = 0, max_ = 0, sum = 0;
  vector<lll> stack;
  stack.push_back(nod);

  while (!stack.empty()) {
    lll curr = stack.back();
    stack.pop_back();

    if (big[nod] == sz[curr]) {
      nod_boss = curr;
      dfs2(curr, nod, mapp, l);
      sum = ans[curr];
      max_ = l;
      break;
    }

    mapp[c[curr]]++;
    if (mapp[c[curr]] == max_) {
      sum += c[curr];
    }
    if (mapp[c[curr]] > max_) {
      max_ = mapp[c[curr]];
      sum = c[curr];
    }

    for (lll i = 0; i < v[curr].size(); ++i) {
      lll it = v[curr][i];
      if (it == prt || it == nod_boss)
        continue;
      stack.push_back(it);
    }
  }

  while (!stack.empty()) {
    lll curr = stack.back();
    stack.pop_back();
    vector<lll> temp;
    dfs2(curr, nod, temp, l);
    for (lll i = 0; i < temp.size(); ++i) {
      lll it = temp[i];
      mapp[it] += temp[i + 1];
      if (mapp[it] == max_) {
        sum += it;
      }
      if (mapp[it] > max_) {
        max_ = mapp[it];
        sum = it;
      }
    }
  }

  l_max = max_;
  ans[nod] = sum;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

  cin >> n;
  for (lll i = 1; i <= n; ++i) {
    cin >> c[i];
  }

  for (lll i = 1; i < n; ++i) {
    lll x, y;
    cin >> x >> y;
    v[x].push_back(y);
    v[y].push_back(x);
  }

  dfs1(1, 0);

  vector<lll> temp;
  lll x;
  dfs2(1, 0, temp, x);

  for (lll i = 1; i <= n; ++i) {
    cout << ans[i] << ' ';
  }
  cout << '\n';

  return 0;
}