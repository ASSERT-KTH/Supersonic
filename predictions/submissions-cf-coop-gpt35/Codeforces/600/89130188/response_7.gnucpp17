#include <bits/stdc++.h>
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define lll long long
#define llf __float128
#define lld long double
using namespace std;
const lll NR = 5e5 + 10, oo = 1e18 + 10, MOD = 1e9 + 7;
const long double pi = 2 * acos(0.0);
vector<lll> v[NR];
lll n, m, sz[NR], big[NR];
lll ans[NR], c[NR], freq[NR]; // Change mapp to freq
void dfs1(lll nod, lll prt) {
  sz[nod] = 1;
  for (auto it : v[nod]) {
    if (it == prt)
      continue;
    dfs1(it, nod);
    sz[nod] += sz[it];
    big[nod] = max(big[nod], sz[it]);
  }
}
void dfs2(lll nod, lll prt, lll &l_max) { // Remove map argument
  lll nod_boss = -1, sum = 0;
  for (auto it : v[nod]) {
    if (it == prt)
      continue;
    if (big[nod] == sz[it]) {
      nod_boss = it;
      dfs2(it, nod, l_max);
      sum = ans[it];
      break;
    }
  }
  freq[c[nod]]++; // Update frequency
  if (freq[c[nod]] >= freq[ans[nod]]) { // Check for maximum frequency
    ans[nod] = c[nod];
    if (freq[c[nod]] > freq[ans[nod]]) {
      sum = c[nod];
    }
  }
  for (auto it : v[nod]) {
    if (it == prt || it == nod_boss)
      continue;
    dfs2(it, nod, l_max);
    if (freq[ans[it]] > freq[ans[nod]]) { // Propagate maximum frequency and sum
      ans[nod] = ans[it];
      sum = ans[it];
    } else if (freq[ans[it]] == freq[ans[nod]]) {
      sum += ans[it];
      ans[nod] = sum;
    }
  }
  l_max = freq[ans[nod]]; // Update maximum frequency
}
signed main() {
  lll i, j, x, y;
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  cin >> n;
  for (i = 1; i <= n; ++i) {
    cin >> c[i];
  }
  for (i = 1; i < n; ++i) {
    cin >> x >> y;
    v[x].pb(y);
    v[y].pb(x);
  }
  dfs1(1, 0);
  lll x = 0; // Change x to l_max
  dfs2(1, 0, x); // Pass l_max by reference
  for (i = 1; i <= n; ++i)
    cout << ans[i] << ' ';
  cout << '\n';
  return 0;
}