#include <iostream>
#include <vector>
#include <numeric>
using namespace std;
const long long MOD = 1e9 + 7;
long long getSum(long long n) { return n * (n + 1) / 2; }
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long n, x;
  cin >> n >> x;
  vector<long long> v(n);
  for (long long &x : v)
    cin >> x;
  vector<long long> u = v;
  n *= 2;
  vector<long long> z(n);
  std::partial_sum(u.begin(), u.end(), u.begin());
  for (long long i = 0; i < n; i++) {
    z[i] = v[i] * (v[i] + 1) / 2;
  }
  std::partial_sum(z.begin(), z.end(), z.begin());
  long long ans = 0;
  int start = 0;
  long long days = 0, sums = 0;
  while (start < v.size()) {
    days += v[start + e];
    sums += u[start + e] - u[start + s];
    e++;
    while (days > x) {
      if (days - v[start + s] < x) {
        break;
      }
      days -= v[start + s];
      sums -= u[start + s] - u[start + s];
      s++;
    }
    long long diff = days - x;
    ans = max(ans, sums - getSum(diff));
  }
  cout << ans;
  return 0;
}