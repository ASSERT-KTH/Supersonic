#pragma GCC target(                                                            \
    "sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include <iostream>
#define DEBUG
#define fi first
#define se second
#define pqueue priority_queue
#define pb(x) push_back(x)
#define all(x) x.begin(), x.end()
#define int long long
using namespace std;

const int maxn = 2e3 + 7;
int ul[maxn * maxn];
int ur[maxn * maxn];
int dl[maxn * maxn];
int dr[maxn * maxn];
char kek[maxn * maxn];

void solve() {
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      cin >> kek[i * m + j];
    }
  }
  int ans = 0;
  for (int i = 1; i < n; i++) {
    for (int j = 1; j < m; j++) {
      if (kek[i * m + j] == kek[(i - 1) * m + j] && kek[i * m + j] == kek[i * m + (j - 1)]) {
        ul[i * m + j] = min(ul[(i - 1) * m + j], ul[i * m + (j - 1)]) + 1;
      }
    }
  }
  for (int i = 1; i < n; i++) {
    for (int j = m - 2; j >= 0; j--) {
      if (kek[i * m + j] == kek[(i - 1) * m + j] && kek[i * m + j] == kek[i * m + (j + 1)]) {
        ur[i * m + j] = min(ur[(i - 1) * m + j], ur[i * m + (j + 1)]) + 1;
      }
    }
  }
  for (int i = n - 2; i >= 0; i--) {
    for (int j = 1; j < m; j++) {
      if (kek[i * m + j] == kek[(i + 1) * m + j] && kek[i * m + j] == kek[i * m + (j - 1)]) {
        dl[i * m + j] = min(dl[(i + 1) * m + j], dl[i * m + (j - 1)]) + 1;
      }
    }
  }
  for (int i = n - 2; i >= 0; i--) {
    for (int j = m - 2; j >= 0; j--) {
      if (kek[i * m + j] == kek[(i + 1) * m + j] && kek[i * m + j] == kek[i * m + (j + 1)]) {
        dr[i * m + j] = min(dr[(i + 1) * m + j], dr[i * m + (j + 1)]) + 1;
      }
    }
  }
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      ans += min(ul[i * m + j], min(ur[i * m + j], min(dl[i * m + j], dr[i * m + j]))) + 1;
    }
  }
  cout << ans << endl;
}

signed main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout << fixed << setprecision(8);
  int q = 1;
  while (q--)
    solve();
}