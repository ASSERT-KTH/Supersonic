#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include <iostream>
#define int long long
using namespace std;

const int maxn = 2e3 + 7;
int ul[maxn * maxn];
int ur[maxn * maxn];
int dl[maxn * maxn];
int dr[maxn * maxn];
string kek;

void solve() {
  int n, m;
  cin >> n >> m;
  cin >> kek;

  for (int i = 1; i < n; i++) {
    for (int j = 1; j < m; j++) {
      int index = i * m + j;
      if (kek[index] == kek[index - m] && kek[index] == kek[index - 1]) {
        ul[index] = min(ul[index - m], ul[index - 1]) + 1;
      }
    }
  }

  for (int i = 1; i < n; i++) {
    for (int j = m - 2; j >= 0; j--) {
      int index = i * m + j;
      if (kek[index] == kek[index - m] && kek[index] == kek[index + 1]) {
        ur[index] = min(ur[index - m], ur[index + 1]) + 1;
      }
    }
  }

  for (int i = n - 2; i >= 0; i--) {
    for (int j = 1; j < m; j++) {
      int index = i * m + j;
      if (kek[index] == kek[index + m] && kek[index] == kek[index - 1]) {
        dl[index] = min(dl[index + m], dl[index - 1]) + 1;
      }
    }
  }

  for (int i = n - 2; i >= 0; i--) {
    for (int j = m - 2; j >= 0; j--) {
      int index = i * m + j;
      if (kek[index] == kek[index + m] && kek[index] == kek[index + 1]) {
        dr[index] = min(dr[index + m], dr[index + 1]) + 1;
      }
    }
  }

  int ans = 0;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      int index = i * m + j;
      int min_val = min(ul[index], min(ur[index], min(dl[index], dr[index])));
      ans += min_val + 1;
    }
  }
  cout << ans << endl;
}

signed main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout << fixed << setprecision(8);
  int q = 1;
  while (q--)
    solve();
}