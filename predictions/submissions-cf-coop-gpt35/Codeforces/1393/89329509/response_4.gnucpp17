#pragma GCC target(                                                            \
    "sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include <iomanip>
#include <iostream>
#define DEBUG
#define fi first
#define se second
#define pqueue priority_queue
#define pb(x) push_back(x)
#define all(x) x.begin(), x.end()
#define int long long
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
const int inf = 1e9 + 228;
const ll infll = 1e18;
const ll MOD = 1e9 + 7;
const ld eps = 1e-8;
const int K = 31;
const ld eps2 = 1e-9;
const ll MOD2 = 998244353;
const ll dosz = 5e5;
const ll SZ = (1 << 18);
const ld PI = atan2l(0, -1);
void fast_io() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
}
const int maxn = 2e3 + 7;
void solve() {
  int n, m;
  cin >> n >> m;
  vector<vector<char>> kek(n, vector<char>(m));
  vector<vector<int>> ul(n, vector<int>(m));
  vector<vector<int>> ur(n, vector<int>(m));
  vector<vector<int>> dl(n, vector<int>(m));
  vector<vector<int>> dr(n, vector<int>(m));
  int idx = 0;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      cin >> kek[i][j];
      if (i > 0 && j > 0 && kek[i][j] == kek[i - 1][j] && kek[i][j] == kek[i][j - 1]) {
        int min_val = min(ul[i - 1][j], ul[i][j - 1]);
        ul[i][j] = min_val + 1;
      }
      idx++;
    }
  }
  for (int i = 0; i < n; i++) {
    for (int j = m - 1; j >= 0; j--) {
      if (i > 0 && j < m - 1 && kek[i][j] == kek[i - 1][j] && kek[i][j] == kek[i][j + 1]) {
        int min_val = min(ur[i - 1][j], ur[i][j + 1]);
        ur[i][j] = min_val + 1;
      }
    }
  }
  for (int i = n - 1; i >= 0; i--) {
    for (int j = 0; j < m; j++) {
      if (i < n - 1 && j > 0 && kek[i][j] == kek[i + 1][j] && kek[i][j] == kek[i][j - 1]) {
        int min_val = min(dl[i + 1][j], dl[i][j - 1]);
        dl[i][j] = min_val + 1;
      }
    }
  }
  for (int i = n - 1; i >= 0; i--) {
    for (int j = m - 1; j >= 0; j--) {
      if (i < n - 1 && j < m - 1 && kek[i][j] == kek[i + 1][j] && kek[i][j] == kek[i][j + 1]) {
        int min_val = min(dr[i + 1][j], dr[i][j + 1]);
        dr[i][j] = min_val + 1;
      }
    }
  }
  int ans = 0;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      ans += min(ul[i][j], min(ur[i][j], min(dl[i][j], dr[i][j]))) + 1;
    }
  }
  printf("%lld\n", ans);
}
signed main() {
  fast_io();
  cout << fixed << setprecision(8);
  int q = 1;
  while (q--) {
    solve();
  }
}