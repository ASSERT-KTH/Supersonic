#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("fast-math")
#include <iostream>
#include <vector>
#include <iomanip>
#define int long long

void solve() {
    int n, m;
    std::cin >> n >> m;
    std::vector<std::vector<int>> ul(n, std::vector<int>(m, 0));
    std::vector<std::vector<int>> ur(n, std::vector<int>(m, 0));
    std::vector<std::vector<int>> dl(n, std::vector<int>(m, 0));
    std::vector<std::vector<int>> dr(n, std::vector<int>(m, 0));
    std::vector<std::vector<char>> kek(n, std::vector<char>(m, 0));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            std::cin >> kek[i][j];
        }
    }
    for (int i = 1; i < n-1; i++) {
        for (int j = 1; j < m-1; j++) {
            if (kek[i][j] == kek[i - 1][j] && kek[i][j] == kek[i][j - 1]) {
                ul[i][j] = std::min(ul[i - 1][j], ul[i][j - 1]) + 1;
            }
        }
    }
    for (int i = 1; i < n-1; i++) {
        for (int j = m - 2; j >= 1; j--) {
            if (kek[i][j] == kek[i - 1][j] && kek[i][j] == kek[i][j + 1]) {
                ur[i][j] = std::min(ur[i - 1][j], ur[i][j + 1]) + 1;
            }
        }
    }
    for (int i = n - 2; i >= 1; i--) {
        for (int j = 1; j < m-1; j++) {
            if (kek[i][j] == kek[i + 1][j] && kek[i][j] == kek[i][j - 1]) {
                dl[i][j] = std::min(dl[i + 1][j], dl[i][j - 1]) + 1;
            }
        }
    }
    for (int i = n - 2; i >= 1; i--) {
        for (int j = m - 2; j >= 1; j--) {
            if (kek[i][j] == kek[i + 1][j] && kek[i][j] == kek[i][j + 1]) {
                dr[i][j] = std::min(dr[i + 1][j], dr[i][j + 1]) + 1;
            }
        }
    }
    int ans = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            ans += std::min(ul[i][j], std::min(ur[i][j], std::min(dl[i][j], dr[i][j]))) + 1;
        }
    }
    std::cout << ans << std::endl;
}

signed main() {
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout << std::fixed << std::setprecision(8);
    int q = 1;
    while (q--) {
        solve();
    }
    return 0;
}