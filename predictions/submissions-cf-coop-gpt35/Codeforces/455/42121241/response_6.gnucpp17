#include <algorithm>
#include <cmath>
#include <cstdio>

struct dat {
  static int n;
  int* A;
  int* freq;
  int size;

  dat() {
    A = new int[n];
    freq = new int[n];
    size = 0;
    std::fill(freq, freq + n, 0);
  }

  ~dat() {
    delete[] A;
    delete[] freq;
  }

  int count(int p, int x) const {
    int ans = 0;
    for (int i = 0; i < size; i++) {
      if (i == p)
        break;
      if (A[i] == x)
        ans++;
    }
    return ans;
  }

  void insert(int p, int x) {
    for (int i = size; i > p; i--) {
      A[i] = A[i - 1];
    }
    A[p] = x;
    freq[x]++;
    size++;
  }

  int erase(int p) {
    int x = A[p];
    for (int i = p; i < size - 1; i++) {
      A[i] = A[i + 1];
    }
    freq[x]--;
    size--;
    return x;
  }

  void push_back(int x) {
    A[size] = x;
    freq[x]++;
    size++;
  }

  void push_front(int x) {
    for (int i = size; i > 0; i--) {
      A[i] = A[i - 1];
    }
    A[0] = x;
    freq[x]++;
    size++;
  }

  int pop_back() {
    int x = A[size - 1];
    freq[x]--;
    size--;
    return x;
  }

  int pop_front() {
    int x = A[0];
    for (int i = 0; i < size - 1; i++) {
      A[i] = A[i + 1];
    }
    freq[x]--;
    size--;
    return x;
  }

  int get_size() const { return size; }

  void print() const {
    for (int i = 0; i < size; i++) {
      fprintf(stderr, "%3d", A[i]);
    }
    fprintf(stderr, "\n");
  }
};

int dat::n;

int main() {
  int n, m, last = 0;
  scanf("%d", &n);
  dat::n = ceil(sqrt(n << 2));
  dat* D = new dat;
  for (int i = 0; i < n; i++) {
    int x;
    scanf("%d", &x);
    D->push_back(x);
  }
  for (scanf("%d", &m); m > 0; m--) {
    int op, l, r, k;
    scanf("%d", &op);
    scanf(op == 1 ? "%d%d" : "%d%d%d", &l, &r, &k);
    l = (l + last - 1) % n;
    r = (r + last - 1) % n;
    k = (k + last - 1) % n;
    if (l > r)
      std::swap(l, r);
    if (op == 1)
      D->insert(l, D->erase(r));
    else {
      l = D->count(l, k);
      r = D->count(r, k);
      printf("%d\n", last = r - l);
    }
  }

  delete D;

  return 0;
}