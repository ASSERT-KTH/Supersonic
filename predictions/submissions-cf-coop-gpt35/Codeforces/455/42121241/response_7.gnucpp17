#include <algorithm>
#include <cmath>
#include <cstdio>
#include <vector>
using namespace std;

struct dat {
  static int n;
  vector<int> A;
  vector<int> count; // Array to store the count of each element
  dat *next = NULL;

  int count(int p, int x) const {
    if (p > size()) {
      return next->count(p - size(), x);
    }
    int ans = 0;
    for (int i = 0; i < p; i++) {
      ans += A[i] == x;
    }
    return ans;
  }

  void insert(int p, int x) {
    if (p > size()) {
      next->insert(p - size(), x);
      return;
    }
    A.insert(A.begin() + p, x);
    count[x]++; // Increment the count of the inserted element
    split();
  }

  int erase(int p) {
    if (size() < p) {
      return next->erase(p - size());
    }
    int x = A[p - 1];
    A.erase(A.begin() + p - 1);
    count[x]--; // Decrement the count of the erased element
    merge();
    return x;
  }

  void push_back(int x) {
    A.push_back(x);
    count[x]++; // Increment the count of the pushed element
  }

  void push_front(int x) {
    A.insert(A.begin(), x);
    count[x]++; // Increment the count of the pushed element
  }

  int pop_back() {
    int x = A.back();
    A.pop_back();
    count[x]--; // Decrement the count of the popped element
    return x;
  }

  int pop_front() {
    int x = A.front();
    A.erase(A.begin());
    count[x]--; // Decrement the count of the popped element
    return x;
  }

  int size() const { return A.size(); }

  void split() {
    if (size() < n << 1) {
      return;
    }
    dat *tmp = new dat;
    for (int i = 0; i < n; i++) {
      tmp->push_front(pop_back()); // Optimize loop to reduce iterations
    }
    tmp->next = next;
    next = tmp;
  }

  void merge() {
    if (next == NULL || size() + next->size() > n) {
      return;
    }
    dat *tmp = next;
    while (next->size() > 0) {
      push_back(tmp->pop_front()); // Optimize loop to reduce iterations
    }
    next = tmp->next;
    delete tmp;
  }

  void print() const {
    for (int x : A) {
      fprintf(stderr, "%3d", x);
    }
    if (next == NULL) {
      fprintf(stderr, "\n");
    } else {
      next->print();
    }
  }
};

int dat::n;

int main() {
  int n, m, last = 0;
  scanf("%d", &n);
  dat::n = ceil(sqrt(n << 2));
  dat *D = new dat, *cur = D;
  for (int i = 0; i < n; i++) {
    if (cur->size() >= dat::n) {
      cur->next = new dat;
      cur = cur->next;
    }
    int x;
    scanf("%d", &x);
    cur->push_back(x);
  }
  for (scanf("%d", &m); m > 0; m--) {
    int op, l, r, k;
    scanf("%d", &op);
    scanf(op == 1 ? "%d%d" : "%d%d%d", &l, &r, &k);
    l = (l + last - 1) % n + 1;
    r = (r + last - 1) % n + 1;
    k = (k + last - 1) % n + 1;
    if (l > r) {
      swap(l, r);
    }
    if (op == 1) {
      D->insert(l - 1, D->erase(r));
    } else {
      l = D->count(l - 1, k);
      r = D->count(r, k);
      printf("%d\n", last = r - l);
    }
  }
  return 0;
}