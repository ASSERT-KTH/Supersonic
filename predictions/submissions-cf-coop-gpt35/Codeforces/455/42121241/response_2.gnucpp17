#include <algorithm>
#include <cmath>
#include <cstdio>
#include <map>
using namespace std;

class CircularBuffer {
private:
  int* buffer;
  int start;
  int end;
  int capacity;

public:
  CircularBuffer(int capacity) : start(0), end(0), capacity(capacity) {
    buffer = new int[capacity];
  }

  ~CircularBuffer() {
    delete[] buffer;
  }

  void push_back(int x) {
    buffer[end] = x;
    end = (end + 1) % capacity;
  }

  void push_front(int x) {
    start = (start - 1 + capacity) % capacity;
    buffer[start] = x;
  }

  int pop_back() {
    end = (end - 1 + capacity) % capacity;
    return buffer[end];
  }

  int pop_front() {
    int result = buffer[start];
    start = (start + 1) % capacity;
    return result;
  }

  int& operator[](int index) {
    return buffer[(start + index) % capacity];
  }

  const int& operator[](int index) const {
    return buffer[(start + index) % capacity];
  }

  int size() const {
    return (end - start + capacity) % capacity;
  }
};

struct dat {
  static int n;
  int splitThreshold;
  CircularBuffer A;
  map<int, int> elementCount;
  dat* next = nullptr;

  int count(int p, int x) const {
    if (p > size()) {
      map<int, int>::const_iterator it = elementCount.find(x);
      if (it == elementCount.end())
        return next->count(p - size(), x);
      else
        return next->count(p - size(), x) + it->second;
    }
    int ans = 0;
    for (int i = 0; i < p; i++)
      ans += A[i] == x;
    return ans;
  }

  void update(int p, int x) {
    if (p > size()) {
      next->update(p - size(), x);
      return;
    }
    A.push_front(x);
    elementCount[x]++;
    split();
  }

  int erase(int p) {
    if (size() < p)
      return next->erase(p - size());
    int x = A[p - 1];
    A[p - 1] = A[size() - 1];
    A.pop_back();
    if (--elementCount[x] == 0)
      elementCount.erase(x);
    merge();
    return x;
  }

  void split() {
    if (size() < n << 1)
      return;
    dat* tmp = new dat;
    while (size() > n)
      tmp->A.push_front(pop_back());
    tmp->next = next;
    next = tmp;
  }

  void merge() {
    if (next == nullptr || size() + next->size() > n)
      return;
    while (next->size() > 0)
      push_back(next->pop_front());
    next = next->next;
  }

  int size() const {
    return A.size();
  }

  void push_back(int x) {
    A.push_back(x);
    elementCount[x]++;
  }

  int pop_back() {
    int x = A.pop_back();
    if (--elementCount[x] == 0)
      elementCount.erase(x);
    return x;
  }
};

int dat::n;

int main() {
  int n, m, last = 0;
  scanf("%d", &n);
  dat::n = ceil(sqrt(n << 2));
  dat* D = new dat;
  D->splitThreshold = dat::n;
  dat* cur = D;
  for (int i = 0; i < n; i++) {
    if (cur->size() >= dat::n) {
      cur->next = new dat;
      cur = cur->next;
      cur->splitThreshold = dat::n;
    }
    int x;
    scanf("%d", &x);
    cur->push_back(x);
  }
  for (scanf("%d", &m); m > 0; m--) {
    int op, l, r, k;
    scanf("%d", &op);
    scanf(op == 1 ? "%d%d" : "%d%d%d", &l, &r, &k);
    l = (l + last - 1) % n + 1;
    r = (r + last - 1) % n + 1;
    k = (k + last - 1) % n + 1;
    if (l > r)
      swap(l, r);
    if (op == 1)
      D->update(l - 1, D->erase(r));
    else {
      l = D->count(l - 1, k);
      r = D->count(r, k);
      printf("%d\n", last = r - l);
    }
  }
  delete D;
}