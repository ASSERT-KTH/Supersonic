#include <algorithm>
#include <cmath>
#include <cstdio>

struct dat {
  static int n;
  int* A;
  int* M;
  int* cumulativeCount;
  dat* next = nullptr;
  int size = 0;
  int printSize = 0;
  
  dat() {
    A = new int[n];
    M = new int[n];
    cumulativeCount = new int[n];
    std::fill(A, A + n, 0);
    std::fill(M, M + n, 0);
    std::fill(cumulativeCount, cumulativeCount + n, 0);
  }

  ~dat() {
    delete[] A;
    delete[] M;
    delete[] cumulativeCount;
  }

  int count(int p, int x) const {
    if (p > size) {
      int count = next->count(p - size, x);
      int cumulativeCountX = cumulativeCount[x];
      return count + cumulativeCountX;
    }
    int cumulativeCountX = cumulativeCount[x + p - 1] - cumulativeCount[x - 1];
    return cumulativeCountX;
  }

  void insert(int p, int x) {
    if (p > size) {
      next->insert(p - size, x);
      return;
    }
    std::copy_backward(A + p - 1, A + size, A + size + 1);
    A[p - 1] = x;
    M[x]++;
    size++;
    split();
  }

  int erase(int p) {
    if (size < p) {
      return next->erase(p - size);
    }
    int x = A[p - 1];
    std::copy(A + p, A + size, A + p - 1);
    M[x]--;
    if (M[x] == 0) {
      M[x] = 0;
    }
    size--;
    merge();
    return x;
  }

  void push_back(int x) {
    A[size] = x;
    M[x]++;
    size++;
  }

  void push_front(int x) {
    std::copy(A, A + size, A + 1);
    A[0] = x;
    M[x]++;
    size++;
    split();
  }

  int pop_back() {
    int x = A[size - 1];
    M[x]--;
    size--;
    return x;
  }

  int pop_front() {
    int x = A[0];
    std::copy(A + 1, A + size, A);
    M[x]--;
    size--;
    merge();
    return x;
  }

  void split() {
    if (size < n << 1) {
      return;
    }
    dat* tmp = new dat;
    std::copy(A + size - n, A + size, tmp->A);
    std::copy(M, M + n, tmp->M);
    std::copy(cumulativeCount, cumulativeCount + n, tmp->cumulativeCount);
    tmp->size = n;
    tmp->next = next;
    next = tmp;
    size -= n;
    std::fill(M, M + n, 0);
    std::fill(cumulativeCount, cumulativeCount + n, 0);
    for (int i = 0; i < size; i++) {
      M[A[i]]++;
      cumulativeCount[A[i]]++;
      if (i > 0) {
        cumulativeCount[A[i]] += cumulativeCount[A[i - 1]];
      }
    }
    next->merge();
  }

  void merge() {
    if (next == nullptr || size + next->size > n) {
      return;
    }
    std::copy(next->A, next->A + next->size, A + size);
    std::copy(next->M, next->M + n, M);
    std::copy(next->cumulativeCount, next->cumulativeCount + n, cumulativeCount);
    size += next->size;
    dat* tmp = next;
    next = next->next;
    delete tmp;
  }

  void printArray() const {
    for (int i = 0; i < printSize; i++) {
      fprintf(stderr, "%3d", A[i]);
    }
    if (next == nullptr) {
      fprintf(stderr, "\n");
    } else {
      next->printArray();
    }
  }
};

int dat::n;

int main() {
  int n, m, last = 0;
  scanf("%d", &n);
  dat::n = ceil(sqrt(n << 2));
  dat* D = new dat;
  dat* cur = D;
  for (int i = 0; i < n; i++) {
    if (cur->size >= dat::n) {
      cur->next = new dat;
      cur = cur->next;
    }
    int x;
    scanf("%d", &x);
    cur->push_back(x);
  }
  for (scanf("%d", &m); m > 0; m--) {
    int op, l, r, k;
    scanf("%d", &op);
    scanf(op == 1 ? "%d%d" : "%d%d%d", &l, &r, &k);
    l = (l + last - 1) % n + 1;
    r = (r + last - 1) % n + 1;
    k = (k + last - 1) % n + 1;
    if (l > r) {
      std::swap(l, r);
    }
    if (op == 1) {
      D->insert(l - 1, D->erase(r));
    } else {
      l = D->count(l - 1, k);
      r = D->count(r, k);
      printf("%d\n", last = r - l);
    }
  }

  delete D;

  return 0;
}