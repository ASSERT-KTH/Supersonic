#include <iostream>
#include <vector>
#include <algorithm>
#include <utility>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  const int MAXV = 61;
  int N;
  cin >> N;
  int a[N];
  for (int i = 0; i < N; i++) {
    cin >> a[i];
  }

  vector<int> pri;
  for (int v = 2; v < MAXV; v++) {
    bool ok = true;
    for (int p : pri) {
      if (v % p == 0) {
        ok = false;
        break;
      }
    }
    if (ok) {
      pri.push_back(v);
    }
  }

  int mask[MAXV] = {0};
  for (int v = 1; v < MAXV; v++) {
    for (int i = 0; i < pri.size(); i++) {
      if (v % pri[i] == 0) {
        mask[v] |= 1 << i;
      }
    }
  }

  pair<int, int> dp[1 << pri.size()];
  for (int m = 0; m < (1 << pri.size()); m++) {
    dp[m] = {INT_MAX, -1};
  }
  dp[0] = {-1, 0};

  for (int i = 0; i < N; i++) {
    for (int m = 0; m < (1 << pri.size()); m++) {
      if (dp[m].first < INT_MAX) {
        for (int v = 1; v < MAXV; v++) {
          if (!(mask[v] & m)) {
            int new_m = m ^ mask[v];
            pair<int, int> new_dp = {dp[m].first + abs(v - a[i]), v};
            if (new_dp < dp[new_m]) {
              dp[new_m] = new_dp;
            }
          }
        }
      }
    }
  }

  int b[N];
  int m = min_element(dp, dp + (1 << pri.size())) - dp;
  for (int i = N - 1; i >= 0; i--) {
    b[i] = dp[m].second;
    m ^= mask[b[i]];
  }

  for (int i = 0; i < N; i++) {
    cout << b[i] << " ";
  }
  cout << endl;

  return 0;
}