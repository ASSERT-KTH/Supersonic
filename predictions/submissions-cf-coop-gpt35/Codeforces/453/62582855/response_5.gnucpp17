#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
#include <array>

using namespace std;

int main() {
  const int MAXV = 61;
  int N;
  cin >> N;
  array<int, N> a;
  for (int i = 0; i < N; i++) {
    cin >> a[i];
  }

  array<int, MAXV> pri;
  int count = 0;
  for (int v = 2; v < MAXV; v++) {
    bool ok = true;
    for (int p : pri) {
      if (v % p == 0) {
        ok = false;
        break;
      }
    }
    if (ok) {
      pri[count++] = v;
    }
  }

  array<int, MAXV> mask;
  for (int v = 1; v < MAXV; v++) {
    mask[v] = 0;
    for (int i = 0; i < count; i++) {
      if (v % pri[i] == 0) {
        mask[v] |= (1 << i);
      }
    }
  }

  vector<vector<pair<int, int>>> dp(N + 1, vector<pair<int, int>>(1 << count, {INT_MAX, -1}));
  dp[0][0].first = -1;

  for (int i = 0; i < N; i++) {
    for (int m = 0; m < (1 << count); m++) {
      if (dp[i][m].first < INT_MAX) {
        for (int v = 1; v < MAXV; v++) {
          if (!(mask[v] & m)) {
            int new_m = m ^ mask[v];
            int new_cost = dp[i][m].first + abs(v - a[i]);
            if (new_cost < dp[i + 1][new_m].first) {
              dp[i + 1][new_m] = {new_cost, v};
            }
          }
        }
      }
    }
  }

  array<int, N> b;
  int m = min_element(dp.back().begin(), dp.back().end()) - dp.back().begin();
  for (int i = N - 1; i >= 0; i--) {
    b[i] = dp[i + 1][m].second;
    m ^= mask[b[i]];
  }

  for (int i = 0; i < N; i++) {
    cout << b[i] << " ";
  }
  cout << endl;

  return 0;
}