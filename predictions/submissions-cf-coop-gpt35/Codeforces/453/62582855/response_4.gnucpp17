#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>

using namespace std;

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout << fixed << setprecision(15);

  const int MAXV = 61;

  int N;
  cin >> N;

  vector<int> a(N);
  for (int i = 0; i < N; i++) {
    cin >> a[i];
  }

  vector<int> pri;
  vector<bool> isPrime(MAXV, true);

  for (int v = 2; v < MAXV; v++) {
    if (isPrime[v]) {
      pri.push_back(v);
      for (int j = v * v; j < MAXV; j += v) {
        isPrime[j] = false;
      }
    }
  }

  vector<int> mask(MAXV);
  for (int v = 1; v < MAXV; v++) {
    for (int i = 0; i < pri.size(); i++) {
      if (v % pri[i] == 0) {
        mask[v] |= 1 << i;
      }
    }
  }

  vector<vector<pair<int, int>>> dp(N + 1, vector<pair<int, int>>(1 << pri.size(), {INT_MAX, -1}));
  dp[0][0].first = -1;

  for (int i = 0; i < N; i++) {
    for (int m = 0; m < (1 << pri.size()); m++) {
      if (dp[i][m].first < INT_MAX) {
        for (int v = 1; v < MAXV; v++) {
          if (!(mask[v] & m)) {
            int newMask = m ^ mask[v];
            if (dp[i + 1][newMask].first > dp[i][m].first + abs(v - a[i])) {
              dp[i + 1][newMask] = {dp[i][m].first + abs(v - a[i]), v};
            }
          }
        }
      }
    }
  }

  vector<int> b(N);
  int minIdx = min_element(dp[N].begin(), dp[N].end()) - dp[N].begin();
  int m = minIdx;

  for (int i = N - 1; i >= 0; i--) {
    b[i] = dp[i + 1][m].second;
    m ^= mask[b[i]];
  }

  for (int i = 0; i < N; i++) {
    cout << b[i] << " ";
  }

  return 0;
}