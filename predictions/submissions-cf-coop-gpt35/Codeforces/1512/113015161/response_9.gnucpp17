#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <algorithm>
#include <cmath>

using namespace std;

const int mX = 1e7 + 12;
int c, a[mX];
ll mp[mX];

inline int min3(int a, int b, int c) {
    return min(a, min(b, c));
}

inline int max3(int a, int b, int c) {
    return max(a, max(b, c));
}

inline int min4(int a, int b, int c, int d) {
    return min(min(a, b), min(c, d));
}

inline int max4(int a, int b, int c, int d) {
    return max(max(a, b), max(c, d));
}

inline int max5(int a, int b, int c, int d, int e) {
    return max(max3(a, b, c), max(d, e));
}

inline int min5(int a, int b, int c, int d, int e) {
    return min(min3(a, b, c), min(d, e));
}

void sum_of_divisors(int a[]) {
    for (int i = 1; i <= 1e7; i++){
        for (int j = i; j <= 1e7; j += i)
            a[j] += i;
    }
    for (int i = 1e7; i >= 0; i--){
        if (a[i] <= 1e7)
            mp[a[i]] = i;
    }
}

void case_i(int c) {
    if (mp[c])
        printf("%lld\n", mp[c]);
    else
        printf("-1\n");
}

int main() {
    int _;
    scanf("%d", &_);
    while (_--) {
        sum_of_divisors(a);
        int c;
        scanf("%d", &c);
        case_i(c);
    }
    return 0;
}