#include <iostream>
#include <vector>
#include <map>
#include <queue>
#include <cmath>
using namespace std;

const int MAXN = 1e7 + 12;

void sum_of_divisors(vector<int>& a, map<int, int>& mp) {
    for (int i = 1; i <= MAXN; i++) {
        for (int j = i; j <= MAXN; j += i) {
            a[j] += i;
        }
    }
    for (int i = MAXN; i >= 0; i--) {
        if (a[i] <= MAXN) {
            mp[a[i]] = i;
        }
    }
}

void solve() {
    vector<int> a(MAXN, 0);
    map<int, int> mp;
    sum_of_divisors(a, mp);

    int t;
    cin >> t;
    while (t--) {
        int c;
        cin >> c;
        if (mp.count(c)) {
            cout << mp[c] << '\n';
        } else {
            cout << -1 << '\n';
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    solve();

    return 0;
}