#include <iostream>
#include <vector>

void sum_of_divisors(std::vector<int>& a) {
    int n = a.size() - 1;
    std::vector<int> spf(n + 1, 0);

    for (int i = 2; i <= n; i++) {
        if (spf[i] == 0) {
            for (int j = i; j <= n; j += i) {
                if (spf[j] == 0) {
                    spf[j] = i;
                }
            }
        }
    }

    for (int i = 2; i <= n; i++) {
        int p = spf[i];
        int k = 0;
        int x = i;
        while (x % p == 0) {
            x /= p;
            k++;
        }
        a[i] = (p == i) ? 1 + p : (a[x] / (p - 1)) * (p * k + 1);
    }
}

int main() {
    const int MAXN = 1e7 + 1;
    std::vector<int> a(MAXN);
    sum_of_divisors(a);

    int t;
    std::cin >> t;
    while (t--) {
        int c;
        std::cin >> c;
        if (c <= MAXN && a[c] != 0) {
            std::cout << a[c] << '\n';
        } else {
            std::cout << -1 << '\n';
        }
    }

    return 0;
}