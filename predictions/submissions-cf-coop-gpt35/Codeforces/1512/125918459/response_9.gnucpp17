#include <iostream>
#include <vector>
using namespace std;

const long long N = 10000001;

int main() {
  vector<long long> v1(N, 0);
  vector<long long> mp1(N, 0);

  // Calculate the sum of divisors
  for (int i = 1; i < N; i++) {
    for (int j = i; j < N; j += i) {
      v1[j] += i;
    }
  }

  // Store the index of the sum of divisors in mp1
  for (int i = 1; i < N; i++) {
    mp1[v1[i]] = i;
  }

  // Disable loop vectorization
  #pragma GCC optimize("no-tree-vectorize")

  int t;
  cin >> t;
  while (t--) {
    int c;
    cin >> c;
    if (c < N && mp1[c] != 0)
      cout << mp1[c];
    else
      cout << -1;
    cout << endl;
  }

  return 0;
}