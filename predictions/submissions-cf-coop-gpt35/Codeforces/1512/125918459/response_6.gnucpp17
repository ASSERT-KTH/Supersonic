#include <iostream>
#include <vector>
using namespace std;

const long long N = 10000001;

int main() {
  vector<long long> sumOfDivisors(N, 1);

  // Calculate sum of divisors using modified Sieve of Eratosthenes
  for (int i = 2; i < N; i++) {
    for (int j = i; j < N; j += i) {
      sumOfDivisors[j] += i;
    }
  }

  // Create mp1 vector and initialize with -1
  vector<long long> mp1(N, -1);

  // Assign indices to mp1 for valid sum of divisors
  for (int i = 1; i < N; i++) {
    if (sumOfDivisors[i] < N && mp1[sumOfDivisors[i]] == -1) {
      mp1[sumOfDivisors[i]] = i;
    }
  }

  int t;
  cin >> t;
  while (t--) {
    int c;
    cin >> c;
    cout << mp1[c] << endl;
  }
}