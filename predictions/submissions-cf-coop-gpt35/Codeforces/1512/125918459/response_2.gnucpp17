#include <iostream>
#include <vector>
using namespace std;

const long long N = 10000001;

int main() {
  vector<long long> v1(N, 0);
  vector<long long> mp1(N, 0);

  // Calculate the sum of divisors using prime factorization
  for (int i = 1; i < N; i++) {
    for (int j = i; j < N; j += i) {
      v1[j] += i;
    }
  }

  // Calculate the smallest number for each sum of divisors
  for (int i = 1; i < N; i++) {
    mp1[v1[i]] = i;
  }

  int t;
  cin >> t;

  // Loop unrolling for better performance
  while (t >= 4) {
    int c1, c2, c3, c4;
    cin >> c1 >> c2 >> c3 >> c4;

    cout << (mp1[c1] ? mp1[c1] : -1) << endl;
    cout << (mp1[c2] ? mp1[c2] : -1) << endl;
    cout << (mp1[c3] ? mp1[c3] : -1) << endl;
    cout << (mp1[c4] ? mp1[c4] : -1) << endl;

    t -= 4;
  }

  // Process remaining numbers
  while (t--) {
    int c;
    cin >> c;
    cout << (mp1[c] ? mp1[c] : -1) << endl;
  }

  return 0;
}