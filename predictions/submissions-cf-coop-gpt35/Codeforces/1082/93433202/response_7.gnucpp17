#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int md = 1e9 + 7;

int main() {
  cin.tie(0);
  cout.tie(0);
  ios::sync_with_stdio(0);

  int n;
  cin >> n;
  int t[n];
  int sum = 0;
  for (int i = 0; i < n; i++) {
    cin >> t[i];
    sum += t[i];
  }

  const int max_sum = 2 * n * (n - 1);

  if (sum > max_sum || sum < 2 * n - 2) {
    cout << "NO";
    return 0;
  }

  vector<int> one, two;
  one.reserve(n);
  two.reserve(n);

  for (int i = 0; i < n; i++) {
    if (t[i] == 1)
      one.push_back(i);
    else
      two.push_back(i);
  }

  vector<pair<int, int>> ans;
  ans.reserve(n);

  for (int i = 1; i < two.size(); i++) {
    ans.emplace_back(two[i - 1], two[i]);
    t[two[i - 1]]--;
    t[two[i]]--;
  }

  int f2 = min(2, static_cast<int>(one.size()));
  for (int i = 0; i < f2; i++) {
    if (i == 0)
      ans.emplace_back(one[i], two[0]), t[two[0]]--;
    else
      ans.emplace_back(one[i], two[two.size() - 1]), t[two[two.size() - 1]]--;
  }

  vector<pair<int, int>> q;
  q.reserve(two.size());
  for (auto x : two) {
    q.emplace_back(t[x], x);
  }
  sort(q.begin(), q.end(), greater<pair<int, int>>());

  for (int i = f2; i < one.size(); i++) {
    int x = q.back().second;
    q.pop_back();
    if (t[x] == 0) {
      cout << "NO";
      return 0;
    }
    ans.emplace_back(one[i], x);
    t[x]--;
    q.emplace_back(t[x], x);
    sort(q.begin(), q.end(), greater<pair<int, int>>());
  }

  cout << "YES " << two.size() + f2 - 1 << endl;
  cout << ans.size() << endl;
  for (auto x : ans)
    cout << x.first + 1 << " " << x.second + 1 << " ";

  return 0;
}