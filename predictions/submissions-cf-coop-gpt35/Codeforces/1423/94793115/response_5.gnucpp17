#include <iostream>
#include <vector>
#include <tuple>

using namespace std;

struct SegTree {
  vector<bool> sand, sor, lazy;
  int n;

  SegTree(int n_) {
    n = n_;
    sand.assign(2 * n, false);
    sor.assign(2 * n, false);
    lazy.assign(2 * n, false);
  }

  void upd(int id, bool v) {
    sand[id] |= v;
    sor[id] |= v;
    lazy[id] |= v;
  }

  void push(int id, int il, int ir) {
    if (lazy[id] == false)
      return;
    upd(il, lazy[id]);
    upd(ir, lazy[id]);
    lazy[id] = false;
  }

  void update(int x, int y, bool v, int id = 0, int l = 0, int r = -1) {
    if (r == -1)
      r = n;
    if (x <= l && r <= y) {
      upd(id, v);
      return;
    }
    if (x >= r || l >= y)
      return;
    int mid = (l + r) >> 1, il = id + 1, ir = id + 2 * (mid - l);
    push(id, il, ir);
    update(x, y, v, il, l, mid);
    update(x, y, v, ir, mid, r);
    sand[id] = sand[il] & sand[ir];
    sor[id] = sor[il] | sor[ir];
  }

  bool get(int x, int y, int id = 0, int l = 0, int r = -1) {
    if (r == -1)
      r = n;
    if (x <= l && r <= y) {
      return sand[id];
    }
    if (x >= r || l >= y)
      return true;
    int mid = (l + r) >> 1, il = id + 1, ir = id + 2 * (mid - l);
    push(id, il, ir);
    return get(x, y, il, l, mid) & get(x, y, ir, mid, r);
  }

  void print(int id = 0, int l = 0, int r = -1) {
    if (r == -1)
      r = n;
    if (r - l < 2) {
      cout << sand[id] << "\n";
      return;
    }
    int mid = (l + r) >> 1, il = id + 1, ir = id + 2 * (mid - l);
    push(id, il, ir);
    print(il, l, mid);
    print(ir, mid, r);
  }
};

struct Constraint {
  long long l, r;
  int v;
};

int main() {
  int k, q;
  cin >> k >> q;
  int n = 1 << k, mask = (1 << k) - 1;
  SegTree low(n), hig(n);
  vector<Constraint> cons;

  for (int i = 0; i < q; ++i) {
    long long l, r;
    int v;
    cin >> l >> r >> v;
    int la = l & mask, lb = (l >> k) & mask;
    int ra = r & mask, rb = (r >> k) & mask;
    if (lb + 1 < rb) {
      low.update(0, n, v);
    } else if (lb < rb) {
      low.update(la, n, v);
      low.update(0, ra + 1, v);
    } else {
      low.update(la, ra + 1, v);
    }
    hig.update(lb, rb + 1, v);
    cons.push_back({l, r, v});
  }

  auto cek = [&](int la, int ra, int lb, int rb, int v) {
    bool ok = true;
    bool resh = hig.get(lb, rb + 1);
    bool resl = low.get(la, ra + 1);
    ok &= (resl & resh) == v;
    return ok;
  };

  bool ok = true;
  for (auto &c : cons) {
    long long l, r;
    int v;
    tie(l, r, v) = c;
    int la = l & mask, lb = (l >> k) & mask;
    int ra = r & mask, rb = (r >> k) & mask;
    if (lb == rb) {
      ok &= cek(la, ra, lb, rb, v);
    } else {
      ok &= cek(la, n - 1, lb, lb, v);
      ok &= cek(0, ra, rb, rb, v);
      if (lb + 1 < rb) {
        ok &= cek(0, n - 1, lb + 1, rb - 1, v);
      }
    }
    if (!ok)
      break;
  }
  if (!ok) {
    cout << "impossible\n";
    return 0;
  }
  cout << "possible\n";
  low.print();
  hig.print();
  return 0;
}