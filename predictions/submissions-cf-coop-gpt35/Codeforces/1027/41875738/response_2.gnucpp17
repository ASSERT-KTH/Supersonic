#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define mp make_pair
using namespace std;
vector<pair<int, int>> edges;
int cost[200010];
ll root_cost[200010];
bool visited[200010];
ll temp;

void dfs(int source, ll root_cost) {
  visited[source] = true;
  temp = min(temp, (ll)cost[source]);
  root_cost += cost[source];
  for (int i = 0; i < edges.size(); i++) {
    if (edges[i].first == source && !visited[edges[i].second]) {
      dfs(edges[i].second, root_cost);
    }
  }
  cost[source] = temp;
  root_cost[source] = root_cost;
}

int main() {
  int n;
  cin >> n;
  for (int i = 1; i <= n; i++)
    scanf("%d", &cost[i]);
  for (int i = 1; i <= n; i++) {
    int x;
    scanf("%d", &x);
    edges.pb({x, i});
  }
  ll ans = 0;
  for (int i = 1; i <= n; i++) {
    if (!visited[i]) {
      temp = 10000000000;
      dfs(i, 0);
      ans += temp;
    }
  }
  for (int i = 0; i < edges.size(); i++) {
    int child = edges[i].second;
    int root = edges[i].first;
    if (root_cost[child] != root_cost[root]) {
      ans -= cost[root];
      cost[root] = 0;
    }
  }
  cout << ans << endl;
  return 0;
}