The given code appears to implement a graph algorithm that calculates the minimum cost of traversing the graph. However, there are several areas where the code can be optimized for better performance:

1. Unnecessary includes: The code includes the entire `bits/stdc++.h` header, which is not recommended in practice as it includes a large number of unnecessary headers. It is better to include only the necessary headers explicitly.

2. Redundant data structures: The code uses two vectors `v1` and `v2` to represent the graph. However, since the graph is represented as an adjacency list, there is no need for two separate vectors. A single vector of pairs can be used to represent the graph more efficiently.

3. Inefficient data structures: The code uses a stack to perform a depth-first search (DFS) and store the order of visited vertices. However, using a stack for this purpose is not necessary. Instead, a simple vector can be used, which will provide the same functionality with better performance.

4. Unnecessary global variables: The code uses several global variables, such as `temp`, `vis`, and `par`. It is generally better to avoid using global variables and instead pass them as parameters to functions.

5. Inefficient loop iterations: The code uses range-based for loops to iterate over vectors, which can introduce unnecessary overhead. Using integer-based loops can be more efficient in this case.

6. Inefficient memory allocation: The code initializes the `par` array with a size of 200010, even though only `n` elements are used. This can lead to unnecessary memory allocation and waste of resources.

7. Inefficient minimum calculation: The code uses a `temp` variable to calculate the minimum cost during the DFS. However, the `min` function can be used directly without the need for an intermediate variable.

8. Inefficient cost subtraction: The code subtracts the cost of a vertex from the total cost, but it does this in a nested loop, resulting in a time complexity of O(n^2). This can be optimized to O(n) by using a separate vector to store the total cost.

Based on these observations, we can now proceed with the optimization steps.