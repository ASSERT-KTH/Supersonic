#include <iostream>
#include <vector>
#include <stack>

using namespace std;

struct Node {
    int cost;
    int parent;
    bool visited;

    Node() : cost(0), parent(0), visited(false) {}
};

void dfs(vector<vector<int>>& graph, vector<Node>& nodes, stack<int>& st, int source) {
    nodes[source].visited = true;
    for (int i = 0; i < graph[source].size(); i++) {
        int child = graph[source][i];
        if (!nodes[child].visited) {
            dfs(graph, nodes, st, child);
        }
    }
    st.push(source);
}

void calculateMinCost(vector<vector<int>>& graph, vector<Node>& nodes, stack<int>& st, int source, int& ans) {
    int minCost = nodes[source].cost;
    nodes[source].visited = false;
    nodes[source].parent = source;
    for (int i = 0; i < graph[source].size(); i++) {
        int child = graph[source][i];
        if (nodes[child].visited) {
            calculateMinCost(graph, nodes, st, child, source);
            minCost = min(minCost, nodes[child].cost);
        }
    }
    nodes[source].cost = minCost;
    ans += minCost;
}

int main() {
    int n;
    scanf("%d", &n);

    vector<Node> nodes(n + 1);
    vector<vector<int>> graph(n + 1);

    for (int i = 1; i <= n; i++) {
        scanf("%d", &nodes[i].cost);
    }

    for (int i = 1; i <= n; i++) {
        int x;
        scanf("%d", &x);
        graph[i].push_back(x);
    }

    stack<int> st;
    for (int i = 1; i <= n; i++) {
        if (!nodes[i].visited) {
            dfs(graph, nodes, st, i);
        }
    }

    int ans = 0;
    while (!st.empty()) {
        int top = st.top();
        st.pop();
        if (nodes[top].visited) {
            calculateMinCost(graph, nodes, st, top, ans);
        }
    }

    for (int i = 1; i <= n; i++) {
        for (int j = 0; j < graph[i].size(); j++) {
            int child = graph[i][j];
            if (nodes[i].parent != nodes[child].parent) {
                ans -= nodes[nodes[i].parent].cost;
                nodes[nodes[i].parent].cost = 0;
            }
        }
    }

    printf("%d\n", ans);

    return 0;
}