#include <bits/stdc++.h>
#define ll long long int
#define pb push_back
#define mp make_pair
using namespace std;

vector<int> v1, v2;
int cost[200010];
int par[200010];
vector<int> st;
ll temp;

void dfs(int source) {
  st.pb(source);
  for (auto& node : v1[source]) {
    if (!vis[node]) {
      dfs(node);
    }
  }
}

void dfs2(int source, int val) {
  temp = min(temp, (ll)cost[source]);
  vis[source] = false;
  par[source] = val;
  for (auto& node : v2[source]) {
    if (vis[node]) {
      dfs2(node, val);
    }
  }
}

int main() {
  int n;
  cin >> n;
  
  v1.resize(n + 1);
  v2.resize(n + 1);
  
  for (int i = 0; i < 200010; i++)
    par[i] = i;
    
  for (int i = 1; i <= n; i++)
    scanf("%d", &cost[i]);
    
  for (int i = 1; i <= n; i++) {
    int x;
    scanf("%d", &x);
    v1[i].pb(x);
    v2[x].pb(i);
  }
  
  ll ans = 0;
  
  for (int i = 1; i <= n; i++) {
    if (!vis[i])
      dfs(i);
  }
  
  for (int i = st.size() - 1; i >= 0; i--) {
    int top = st[i];
    if (vis[top]) {
      temp = 10000000000;
      dfs2(top, top);
      cost[top] = temp;
      ans += temp;
    }
  }
  
  for (int i = 0; i < 200010; i++) {
    for (auto& child : v1[i]) {
      if (par[i] != par[child]) {
        ans -= cost[par[i]];
        cost[par[i]] = 0;
      }
    }
  }
  
  cout << ans << endl;
  return 0;
}