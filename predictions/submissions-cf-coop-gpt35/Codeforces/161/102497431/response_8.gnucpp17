#include <iostream>
#include <vector>
using namespace std;

const int N = 50005;
const int K = 505;

vector<int> g[N];
ll ans;
int n, k;
ll dp[N][K];

void dfs(int node) {
  vector<int> stack;
  vector<bool> visited(n, false);
  
  stack.push_back(node);
  visited[node] = true;
  
  while (!stack.empty()) {
    int curr = stack.back();
    stack.pop_back();
    
    for (auto u : g[curr]) {
      if (!visited[u]) {
        stack.push_back(u);
        visited[u] = true;
        
        for (int i = 1; i <= k; i++) {
          dp[u][i] += dp[curr][i - 1];
        }
      }
    }
    
    ans += dp[curr][k];
    ll tot = 0;
    
    for (int i = 1, j = k - 1; i < k; i++, j--) {
      for (auto u : g[curr]) {
        if (!visited[u]) {
          tot += (dp[u][i - 1]) * (dp[curr][j] - dp[u][j - 1]);
        }
      }
    }
    
    ans += tot >> 1;
    dp[curr][0] = 1LL;
  }
}

void work() {
  scanf("%d%d", &n, &k);
  
  for (int i = 0; i < n - 1; i++) {
    int u, v;
    scanf("%d%d", &u, &v);
    --u, --v;
    g[u].push_back(v);
    g[v].push_back(u);
  }
  
  dfs(0);
  printf("%lld\n", ans);
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  work();
  return 0;
}