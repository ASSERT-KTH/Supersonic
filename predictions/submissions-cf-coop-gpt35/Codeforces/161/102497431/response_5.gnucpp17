This code appears to be solving a graph problem using depth-first search (DFS). To optimize this code, we can focus on the following areas:

1. Use more efficient data structures:
   - Replace `vector<int>` with a fixed-size array for `g` and `dp` to avoid dynamic memory allocation overhead.
   - Replace `vector<int>` with `array<int, N>` for `z` in `z_func` to avoid dynamic memory allocation overhead.

2. Optimize loops:
   - Use range-based for loops instead of indexing loops where possible to avoid unnecessary index lookups and improve readability.
   - Combine loops together to reduce the number of passes over the data.

3. Minimize function calls and calculations:
   - Avoid unnecessary calculations by caching results that are used multiple times.
   - Reduce the number of function calls within loops.

4. Compiler optimizations:
   - Enable compiler optimizations using suitable compiler flags.
   - Use `#pragma` directives to provide hints to the compiler for loop unrolling or other optimizations.
