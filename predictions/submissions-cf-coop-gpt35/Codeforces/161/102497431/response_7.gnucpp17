#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
const ll MOD = 1e9 + 7;
const int iinf = 1 << 29;
const long long llinf = 1ll << 60;
const double PI = 3.14159265;

#define pb push_back
#define ff first
#define ss second

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll mrand(ll B) { return (ull)rng() % B; }

struct Point {
  ll x, y;
};

ll cross(Point p1, Point p2) {
  return p1.x * p2.y - p2.x * p1.y;
}

bool online(Point a, Point b, Point c) {
  Point p1{b.x - a.x, b.y - a.y};
  Point p2{c.x - a.x, c.y - a.y};
  return cross(p1, p2) == 0;
}

void z_func(vector<int>& z, vector<int>& s, int n) {
  int L = 0, R = 0;
  for (int i = 1; i < n; i++) {
    if (i > R) {
      L = R = i;
      while (R < n && s[R - L] == s[R])
        R++;
      z[i] = R - L;
      R--;
    } else {
      int k = i - L;
      if (z[k] < R - i + 1)
        z[i] = z[k];
      else {
        L = i;
        while (R < n && s[R - L] == s[R])
          R++;
        z[i] = R - L;
        R--;
      }
    }
  }
}

const int N = 50005;
const int K = 505;
vector<int> g[N];
ll ans;
int n, k;
ll dp[N][K];

void dfs(int node, int par) {
  for (auto& u : g[node]) {
    if (u == par)
      continue;
    dfs(u, node);
    for (int i = 1; i <= k; i++) {
      dp[node][i] += dp[u][i - 1];
    }
  }
  ans += dp[node][k];
  ll tot = 0;
  for (int i = 1, j = k - 1; i < k; i++, j--) {
    for (auto& u : g[node]) {
      if (u == par)
        continue;
      tot += (dp[u][i - 1]) * (dp[node][j] - dp[u][j - 1]);
    }
  }
  ans += tot >> 1;
  dp[node][0] = 1LL;
}

void work() {
  scanf("%d%d", &n, &k);
  for (int i = 0; i < n - 1; i++) {
    int u, v;
    scanf("%d%d", &u, &v);
    --u, --v;
    g[u].pb(v), g[v].pb(u);
  }
  dfs(0, -1);
  printf("%lld\n", ans);
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  work();
  return 0;
}