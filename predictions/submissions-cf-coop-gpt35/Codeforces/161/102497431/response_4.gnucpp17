#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <ctime>

using namespace std;

const int N = 50005;
const int K = 505;

vector<int> g[N];
int n, k;

inline void dfs(int node, int par, vector<vector<long long>>& dp, long long& ans) {
  for (int i = 0; i < g[node].size(); i++) {
    int u = g[node][i];
    if (u == par) continue;
    dfs(u, node, dp, ans);
    for (int j = 1; j <= k; j++) {
      dp[node][j] += dp[u][j - 1];
    }
  }
  ans += dp[node][k];
  long long tot = 0;
  for (int i = 1, j = k - 1; i < k; i++, j--) {
    for (int l = 0; l < g[node].size(); l++) {
      int u = g[node][l];
      if (u == par) continue;
      tot += (dp[u][i - 1]) * (dp[node][j] - dp[u][j - 1]);
    }
  }
  ans += tot >> 1;
  dp[node][0] = 1LL;
}

void work() {
  scanf("%d%d", &n, &k);
  for (int i = 0; i < n - 1; i++) {
    int u, v;
    scanf("%d%d", &u, &v);
    --u, --v;
    g[u].push_back(v), g[v].push_back(u);
  }
  vector<vector<long long>> dp(n, vector<long long>(k + 1, 0));
  long long ans = 0;
  dfs(0, -1, dp, ans);
  printf("%lld\n", ans);
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  work();
  return 0;
}