#include <algorithm>
#include <cstdio>
#include <set>
#include <vector>

const int MAXN = 2e5 + 5;

int N, M, K;
int A[MAXN];
int psum[MAXN];

std::vector<int> cache;

int func(int pos) {
  if (psum[pos] > M)
    return 0;

  int temp = M - psum[pos];
  int cnt = pos;

  std::multiset<int> sortedA(A + pos + 1, A + N + 1);

  for (int i = pos + K; i <= N; i += K) {
    auto it = sortedA.lower_bound(temp);
    if (it != sortedA.end()) {
      temp -= *it;
      cnt += K;
      sortedA.erase(it);
    } else {
      break;
    }
  }

  return cnt;
}

void solve(int testNum) {
  scanf("%d%d%d", &N, &M, &K);

  for (int i = 1; i <= N; ++i) {
    scanf("%d", &A[i]);
  }

  std::sort(A + 1, A + 1 + N);

  cache.resize(N + 1);
  for (int i = 0; i <= N; ++i) {
    cache[i] = func(i);
  }

  int cnt = *std::max_element(cache.begin(), cache.end());
  printf("%d\n", cnt);
}

int main() {
  int T;
  scanf("%d", &T);
  for (int t = 1; t <= T; ++t) {
    solve(t);
  }
  return 0;
}