#include <algorithm>
#include <cstdio>
#include <queue>
using namespace std;

const int MAXN = 2e5 + 5;

int N, M, K;
int A[MAXN];

int func(int pos) {
  int temp = M;
  int cnt = pos;
  priority_queue<int, vector<int>, greater<int>> pq; // Min heap

  for (int i = pos + K; i <= N; i += K) {
    if (A[i] > temp) {
      while (!pq.empty() && pq.top() <= temp) {
        temp -= pq.top();
        pq.pop();
        ++cnt;
      }
      break;
    } else {
      temp -= A[i];
      cnt += K;
      pq.push(A[i]);
    }
  }
  
  while (!pq.empty() && pq.top() <= temp) {
    temp -= pq.top();
    pq.pop();
    ++cnt;
  }

  return cnt;
}

void solve(int testNum) {
  scanf("%d%d%d", &N, &M, &K);
  for (int i = 1; i <= N; ++i) {
    scanf("%d", &A[i]);
  }

  int cnt = 0;
  for (int i = 0; i <= N; ++i) {
    cnt = max(cnt, func(i));
  }

  printf("%d\n", cnt);
}

int main() {
  int T;
  scanf("%d", &T);
  for (int t = 1; t <= T; ++t) {
    solve(t);
  }

  return 0;
}