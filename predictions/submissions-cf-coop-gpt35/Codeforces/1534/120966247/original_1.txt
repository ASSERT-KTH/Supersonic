Upon analyzing the given code, I have identified the following potential optimizations:

1. Use a more efficient data structure for the "vis" array:
   - The "vis" array is used to mark visited nodes during the depth-first search. Since the maximum value of "n" is 400,005, the "vis" array can be optimized by using a boolean array instead of an array of integers.
   - By using a boolean array, we can reduce the memory usage by a factor of 8, which can significantly improve performance.

2. Optimize the depth-first search:
   - The current depth-first search implementation uses a recursive approach. However, recursive function calls can be expensive in terms of stack usage and can lead to stack overflow errors for large values of "n".
   - To optimize this, we can convert the recursive implementation to an iterative one using a stack data structure.
   - By using an explicit stack, we can eliminate the function call overhead and reduce the stack usage, leading to improved performance and avoiding stack overflow errors.

3. Use a more efficient exponentiation function:
   - The current exponentiation function, "qmi", uses a loop to calculate the exponentiation of a number. However, this can be optimized using the exponentiation by squaring algorithm.
   - The exponentiation by squaring algorithm reduces the number of multiplications required to compute the power of a number by exploiting the properties of exponentiation.
   - By implementing the exponentiation by squaring algorithm, we can reduce the number of multiplications and improve the efficiency of the exponentiation operation.

With these optimizations in mind, I will now provide a step-by-step explanation of each optimization and provide the optimized code.