Upon analyzing the provided code, I have identified several potential areas for optimization:

1. Redundant includes: The code includes the entire `<bits/stdc++.h>` library, which is not necessary and can slow down compilation time. Instead, we should only include the necessary standard library headers.

2. Use of `vector` for `lp` and `sieve`: The `lp` and `sieve` vectors are used to store prime factors and sieve values, respectively. However, these vectors are not used in the `test()` function and can be moved to the `primefactor()` and `calc_sieve()` functions instead. This will reduce memory usage in the `test()` function.

3. Inefficient `lower_bound()` usage: The `total_sum` variable is calculated using `*lower_bound(all(pr), n)`. This operation has a time complexity of O(logN) and can be optimized to O(1) by using the `pr.back()` function instead.

4. Unnecessary `sum` variable: The `sum` variable is used to keep track of the sum of edges in the `edges` vector. However, this variable is redundant and can be removed. We can calculate the sum directly using the `total_sum` variable.

5. Inefficient loop structure: The nested loops used to generate the edges can be optimized. The outer loop iterates from 2 to n, and the inner loop iterates from i+1 to n. However, the inner loop can start from i+2, since j=i+1 has already been covered in the previous iteration of the outer loop.

6. Inefficient loop termination condition: The loop termination condition `if (m == 0) break;` is checked twice in the nested loops. This condition can be moved to the outer loop to avoid unnecessary checks.

Based on these optimizations, the following step-by-step explanation and optimized code are provided below.

Step-by-Step Explanation:

1. Remove the unnecessary includes of `<bits/stdc++.h>` and replace them with the necessary standard library headers, such as `<iostream>`, `<vector>`, and `<algorithm>`.

2. Move the `lp` and `sieve` vectors from the global scope to the `primefactor()` and `calc_sieve()` functions, respectively, since they are not used in the `test()` function.

3. Replace the usage of `*lower_bound(all(pr), n)` with `pr.back()` to get the last element of the `pr` vector, which is the required value.

4. Remove the `sum` variable since it is redundant. Instead, calculate the sum directly using the `total_sum` variable.

5. Optimize the loop structure in the nested loops by starting the inner loop from `i+2` instead of `i+1`, since `j=i+1` has already been covered in the previous iteration of the outer loop.

6. Move the loop termination condition `if (m == 0) break;` to the outer loop to avoid unnecessary checks in the nested loops.

Optimized Code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

#define int long long
#define pb push_back
#define ppb pop_back
#define mp make_pair
using pi = pair<int, int>;
using vi = vector<int>;
using vvi = vector<vector<int>>;
#define ff first
#define ss second
#define all(x) x.begin(), x.end()
#define sz(x) (int)(x).size()
const int NUM = 1000030;
const int N = 1000000;
vector<int> pr;

void primefactor();
void calc_sieve();
void test();

void calc_sieve() {
  vector<int> sieve(NUM + 1, 0);
  for (int x = 2; x <= NUM; x++) {
    if (sieve[x]) continue;
    for (int u = x; u <= NUM; u += x) {
      sieve[u] = x;
    }
  }
}

void primefactor() {
  vector<int> lp(N + 1, 0);
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (int j = 0; j < (int)pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
      lp[i * pr[j]] = pr[j];
  }
}

void test() {
  int n, m;
  cin >> n >> m;
  if (n == 2) {
    cout << 2 << " " << 2 << endl;
    cout << 1 << " " << 2 << " " << 2 << endl;
    return;
  }
  int total_sum = pr.back();
  cout << 2 << " " << total_sum << endl;
  vector<pair<pi, int>> edges;
  edges.pb(mp(mp(1, n), 2));
  for (int i = 2; i < n - 1; i++) {
    edges.pb(mp(mp(1, i), 1));
  }
  if (n - 1 != 1)
    edges.pb(mp(mp(1, n - 1), total_sum - (n - 2)));
  m -= sz(edges);

  for (int i = 2; i <= n && m > 0; i++) {
    for (int j = i + 2; j <= n && m > 0; j++) {
      edges.pb(mp(mp(i, j), max(total_sum - (n - 2), 2ll) + 1));
      m--;
    }
  }

  for (int i = 0; i < sz(edges); i++) {
    cout << edges[i].ff.ff << " " << edges[i].ff.ss << " " << edges[i].ss << "\n";
  }
}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  
  primefactor();
  int t = 1;
  while (t--)
    test();
  return 0;
}
```

By implementing these optimizations, the code should run more efficiently and utilize memory more effectively.