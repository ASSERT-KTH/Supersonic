Code Analysis:

1. The code includes unnecessary header files. The `bits/stdc++.h` header is not recommended as it includes a large number of standard library headers, which can slow down the compilation process and increase memory usage.
2. The `primefactor()` function calculates the prime factors of numbers up to `N` using the Sieve of Eratosthenes algorithm. However, it stores all the prime factors in the `pr` vector, which can take up a significant amount of memory. We can optimize this by storing only the smallest prime factor for each number in the `lp` vector.
3. The `calc_sieve()` function calculates the smallest prime factor for each number up to `NUM`. However, it also stores the smallest prime factor for each number in the `sieve` vector, which is not used in the code. This can be removed to reduce memory usage.
4. The `binpow()` function calculates the power of a number using the binary exponentiation algorithm. However, it does not take advantage of the `mod` parameter to perform calculations modulo `mod`. This can be optimized to reduce the number of calculations and prevent integer overflow.
5. The `gcd()` and `lcm()` functions calculate the greatest common divisor and least common multiple, respectively. These functions can be optimized by using the Euclidean algorithm for calculating the GCD and simplifying the calculation of the LCM.
6. The `comp()` function is not used in the code and can be removed.

Optimization Strategy:

1. Replace the `bits/stdc++.h` header with the necessary standard library headers that are actually used in the code. This will reduce the compilation time and memory usage.
2. Modify the `primefactor()` function to store only the smallest prime factor for each number in the `lp` vector. This will reduce the memory usage by eliminating the need to store all the prime factors in the `pr` vector.
3. Remove the `calc_sieve()` function as the `sieve` vector is not used in the code.
4. Optimize the `binpow()` function to perform calculations modulo `mod` by adding the modulo operation at each step of the calculation. This will prevent integer overflow and reduce the number of calculations.
5. Optimize the `gcd()` and `lcm()` functions using the Euclidean algorithm to calculate the GCD and simplify the calculation of the LCM.
6. Remove the `comp()` function as it is not used in the code.

Step-by-Step Explanation:

1. Replace the `bits/stdc++.h` header with the necessary standard library headers that are actually used in the code. This will reduce the compilation time and memory usage.

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
```

2. Modify the `primefactor()` function to store only the smallest prime factor for each number in the `lp` vector. This will reduce the memory usage by eliminating the need to store all the prime factors in the `pr` vector.

```cpp
void primefactor() {
  lp.resize(N + 1, 0);
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      for (int j = i * i; j <= N; j += i) {
        if (lp[j] == 0) {
          lp[j] = i;
        }
      }
    }
  }
}
```

3. Remove the `calc_sieve()` function as the `sieve` vector is not used in the code.

```cpp
// Remove the calc_sieve() function
```

4. Optimize the `binpow()` function to perform calculations modulo `mod` by adding the modulo operation at each step of the calculation. This will prevent integer overflow and reduce the number of calculations.

```cpp
int binpow(int a, int b) {
  int res = 1;
  while (b > 0) {
    if (b & 1)
      res = (res * a) % MOD; // Add modulo operation
    a = (a * a) % MOD; // Add modulo operation
    b >>= 1;
  }
  return res;
}

int binpow(int a, int b, int mod) {
  int res = 1;
  while (b > 0) {
    if (b & 1)
      res = (res * a) % mod; // Add modulo operation
    a = (a * a) % mod; // Add modulo operation
    b >>= 1;
  }
  return res % mod;
}
```

5. Optimize the `gcd()` and `lcm()` functions using the Euclidean algorithm to calculate the GCD and simplify the calculation of the LCM.

```cpp
int gcd(int a, int b) {
  while (b != 0) {
    int temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}

int lcm(int a, int b) {
  return (a / gcd(a, b)) * b;
}
```

6. Remove the `comp()` function as it is not used in the code.

```cpp
// Remove the comp() function
```

Optimized Code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

#define int long long
#define pb push_back
#define ppb pop_back
#define mp make_pair
using pi = pair<int, int>;
using vi = vector<int>;
using vvi = vector<vector<int>>;
#define ff first
#define ss second
#define all(x) x.begin(), x.end()
#define sz(x) (int)(x).size()
const int NUM = 1000030;
const int N = 1000000;

const int MOD = 1e9 + 7;

vector<int> lp;
void primefactor();
int binpow(int a, int b);
int binpow(int a, int b, int mod);
int gcd(int a, int b);
int lcm(int a, int b);
int inversemod(int a, int mod);

void test() {
  int n, m;
  cin >> n >> m;
  if (n == 2) {
    cout << 2 << " " << 2 << endl;
    cout << 1 << " " << 2 << " " << 2 << endl;
    return;
  }
  int total_sum = *lower_bound(all(lp), n);
  cout << 2 << " " << total_sum << endl;
  vector<pair<pi, int>> edges;
  int sum = 0;
  edges.pb(mp(mp(1, n), 2));
  sum = 2;
  for (int i = 2; i < n - 1; i++) {
    edges.pb(mp(mp(1, i), 1));
    sum++;
  }
  if (n - 1 != 1)
    edges.pb(mp(mp(1, n - 1), total_sum - sum));
  m -= sz(edges);
  for (int i = 2; i <= n; i++) {
    if (m == 0)
      break;
    for (int j = i + 1; j <= n; j++) {
      if (m == 0)
        break;
      edges.pb(mp(mp(i, j), max(total_sum - sum, 2ll) + 1));
      m--;
    }
  }
  for (int i = 0; i < sz(edges); i++) {
    cout << edges[i].ff.ff << " " << edges[i].ff.ss << " " << edges[i].ss
         << "\n";
  }
}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  primefactor();
  int t = 1;
  while (t--)
    test();
  return 0;
}

void primefactor() {
  lp.resize(N + 1, 0);
  for (int i = 2; i <= N; ++i) {
    if (lp[i] == 0) {
      lp[i] = i;
      for (int j = i * i; j <= N; j += i) {
        if (lp[j] == 0) {
          lp[j] = i;
        }
      }
    }
  }
}

int binpow(int a, int b) {
  int res = 1;
  while (b > 0) {
    if (b & 1)
      res = (res * a) % MOD;
    a = (a * a) % MOD;
    b >>= 1;
  }
  return res;
}

int binpow(int a, int b, int mod) {
  int res = 1;
  while (b > 0) {
    if (b & 1)
      res = (res * a) % mod;
    a = (a * a) % mod;
    b >>= 1;
  }
  return res % mod;
}

int gcd(int a, int b) {
  while (b != 0) {
    int temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}

int lcm(int a, int b) {
  return (a / gcd(a, b)) * b;
}

int inversemod(int a, int mod) {
  return binpow(a, mod - 2, mod);
}
```