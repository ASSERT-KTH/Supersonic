#include <iostream>
#include <vector>
#include <algorithm>
#include <sstream>
using namespace std;

#define int long long

void primefactor(vector<int>& pr) {
    const int N = 1000000;
    vector<int> lp(N + 1, 0);
    for (int i = 2; i <= N; ++i) {
        if (lp[i] == 0) {
            lp[i] = i;
            pr.push_back(i);
        }
        for (int j = 0; j < (int)pr.size() && pr[j] <= lp[i] && i * pr[j] <= N; ++j)
            lp[i * pr[j]] = pr[j];
    }
}

void test() {
    int n, m;
    cin >> n >> m;

    if (n == 2) {
        cout << 2 << " " << 2 << endl;
        cout << 1 << " " << 2 << " " << 2 << endl;
        return;
    }

    vector<int> pr;
    primefactor(pr);

    int total_sum = *lower_bound(pr.begin(), pr.end(), n);
    cout << 2 << " " << total_sum << endl;

    vector<pair<pair<int, int>, int>> edges;
    edges.reserve(n - 1 + m);

    edges.push_back(make_pair(make_pair(1, n), 2));
    int sum = n - 1;

    for (int i = 2; i <= n; i++) {
        if (m == 0)
            break;
        for (int j = i + 1; j <= n; j++) {
            if (m == 0)
                break;
            int weight = max(total_sum - sum, 2ll) + 1;
            edges.push_back(make_pair(make_pair(i, j), weight));
            m--;
        }
    }

    stringstream output;

    for (int i = 0; i < edges.size(); i++) {
        output << edges[i].first.first << " " << edges[i].first.second << " " << edges[i].second << "\n";
    }

    cout << output.str();
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int t = 1;
    while (t--)
        test();

    return 0;
}