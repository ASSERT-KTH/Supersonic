#include <iostream>
#include <vector>
#include <map>
using namespace std;

const int MX = 100005;
const int BLOCK = 1000;
const int NUM = MX / BLOCK + 1;

int count[NUM][2 * MX], a[MX], A[MX];
bool hasCount[NUM];
int unique[MX];
int N;

int get(int x) {
    return unique[x];
}

void upd(int p, int inc) {
    int v = a[p];
    for (int i = (p + BLOCK - 1) / BLOCK; i <= N / BLOCK; i++) {
        int c = count[i][v];
        if (hasCount[i] && c > 0) {
            hasCount[i] = false;
        }
        count[i][v] += inc;
        c = count[i][v];
        if (c > 0 && !hasCount[i]) {
            hasCount[i] = true;
        }
    }
}

int query(int x, int y) {
    int b = y / BLOCK;
    int ans = 0;
    if (x == 1) {
        ans = count[b][a[y]];
        for (int i = BLOCK * b + 1; i <= y; i++) {
            ans += a[i] == a[y];
        }
    } else {
        int mn = query(1, y);
        for (int i = BLOCK * b + 1; i <= y; i++) {
            int c = count[b][a[i]];
            ans += c == mn;
        }
    }
    return ans;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    
    cin >> N;
    for (int i = 1; i <= N; i++) {
        cin >> A[i];
        a[i] = get(A[i]);
        upd(i, 1);
    }
    
    int M;
    cin >> M;
    for (int i = 0; i < M; i++) {
        int t;
        cin >> t;
        if (t == 1) {
            int v, p;
            cin >> v >> p;
            upd(p, -1);
            A[p] = v;
            a[p] = get(v);
            upd(p, 1);
        } else {
            int x, y;
            cin >> x >> y;
            cout << query(x, y) << endl;
        }
    }
    
    return 0;
}