The given code seems to solve a problem involving a series of calculations. However, there are several areas where the code can be optimized for better performance and reduced memory usage.

1. Remove Unnecessary Includes: The code includes the entire `<bits/stdc++.h>` header file, which is not recommended. Instead, include only the necessary header files that are required for the code.

2. Remove Unused Macros: The code defines several macros that are not used anywhere in the code. Remove these macros to improve code readability.

3. Avoid Using `using namespace std;`: While it is convenient to use this statement, it is considered bad practice in larger codebases. Instead, use the `std::` prefix when referring to standard library functions and types.

4. Avoid Unnecessary I/O Operations: The code uses the `pe()` and `ps()` functions to print output. However, these functions are not required. Instead, use `cout` to print the output directly.

5. Avoid Recomputing Loop Invariants: The variable `t` is used both as a loop counter and as an input variable. Instead of reusing `t`, create a separate loop counter variable.

6. Use a more efficient algorithm: The current code uses a brute-force approach to solve the problem. Instead, we can use a more efficient algorithm to solve the problem in O(1) time complexity.

Based on the above analysis, here is the optimized code:

```cpp
#include <iostream>

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(NULL);

    int t;
    std::cin >> t;
    while (t--) {
        long long n, d;
        std::cin >> n >> d;
        
        if (d <= n) {
            std::cout << "YES\n";
        } else {
            long long max_q = (d - 1) / 2;
            long long max_t = max_q + 1;
            
            if (max_t <= n) {
                std::cout << "YES\n";
            } else {
                std::cout << "NO\n";
            }
        }
    }

    return 0;
}
```

In this optimized code, unnecessary includes, macros, and functions have been removed. The input/output operations have been simplified to use `cin` and `cout` directly. Additionally, an efficient algorithm has been used to solve the problem in O(1) time complexity.