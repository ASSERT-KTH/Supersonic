#include <algorithm>
#include <array>
#include <iostream>

template <typename T, size_t N>
std::istream &operator>>(std::istream &input, std::array<T, N> &arr) {
  for (T &a : arr)
    input >> a;
  return input;
}

template <size_t N>
void answer(const std::array<int, N> &arr) {
  for (size_t i = 0; i < N; ++i) {
    std::cout << arr[i];
    if (i != N - 1)
      std::cout << ' ';
  }
  std::cout << '\n';
}

template <size_t N>
void solve(std::array<int, N> &a, unsigned long long k) {
  const auto b = std::minmax_element(a.cbegin(), a.cend());
  const int min = *b.first;
  const int max = *b.second;
  const int diff = max - min;

  for (size_t i = 0; i < N; ++i)
    a[i] = max - a[i];

  if (k % 2 == 0) {
    for (size_t i = 0; i < N; ++i)
      a[i] = diff - a[i];
  }

  answer(a);
}

void test_case() {
  size_t n;
  std::cin >> n;
  unsigned long long k;
  std::cin >> k;
  std::array<int, n> a;
  std::cin >> a;
  solve(a, k);
}

int main() {
  size_t t;
  std::cin >> t;

  while (t-- > 0)
    test_case();

  return 0;
}