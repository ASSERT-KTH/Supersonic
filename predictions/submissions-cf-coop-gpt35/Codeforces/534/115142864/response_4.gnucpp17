#include <iostream>
#include <cstring>
using namespace std;

const int N = 1234;
const int MAX_D = 10;

long long dp[N][2 * MAX_D + 1]; // Reduced size of dp array

int v1, v2, t, d;

long long f(int tt, int speed) {
  if (tt == t) {
    if (speed == v2) {
      return v2;
    }
    return -1e10;
  }
  if (dp[tt][speed] != -1) {
    return dp[tt][speed];
  }
  long long x = -1e9;
  for (int i = 0; i <= d; ++i) {
    x = max(x, f(tt + 1, speed + i));
  }
  for (int i = d - 1; i >= 0; --i) {
    if (speed - i >= 0) {
      x = max(x, f(tt + 1, speed - i));
    }
  }
  return dp[tt][speed] = speed + x;
}

int main() {
  cin >> v1 >> v2 >> t >> d;
  memset(dp, -1, sizeof dp);
  cout << f(1, v1) << endl;
  return 0;
}