### Code Analysis

Upon analyzing the given code, I have identified the following areas that could potentially be optimized:

1. Unnecessary includes: The code includes the entire `bits/stdc++.h` library, which is not recommended. Instead, we should include only the necessary headers.

2. Redundant macros: The macros `el`, `PI`, `_test_`, `optimize()`, and `file()` are defined but not used in the code. These macros can be removed to simplify the code.

3. Global variables: The variables `n`, `a`, `ans`, `k`, `s`, and `m` are declared as global variables. It is generally better to avoid global variables as they can lead to code complexity and make it harder to reason about program state.

4. Sorting an array: The code sorts the array `a` using the `sort` function. However, since we are only interested in counting unique elements in the array, sorting is unnecessary.

5. Loop optimization: The second loop in the `_case_` function can be optimized. Currently, it iterates over the entire array, checking for specific conditions and inserting elements into a set. We can optimize this loop to eliminate unnecessary iterations and set operations.

6. Unused functions: The functions `gcd` and `lcm` are defined but not used in the code. These functions can be safely removed.

### Optimization Strategy

Based on the code analysis, here is the optimization strategy:

1. Remove unnecessary includes: Replace the `#include <bits/stdc++.h>` with the necessary headers `#include <iostream>`, `#include <set>`, and `#include <map>`.

2. Remove redundant macros: Remove the unused macros `el`, `PI`, `_test_`, `optimize()`, and `file()`.

3. Convert global variables to local variables: Declare the variables `n`, `a`, `ans`, `k`, `s`, and `m` as local variables inside the `_case_` function.

4. Remove sorting of the array: Since we are only interested in counting unique elements, sorting the array is unnecessary. Remove the `sort(a, a + n)` line.

5. Optimize the second loop in the `_case_` function: Instead of iterating over the entire array, we can optimize the loop to only iterate over unique elements. This eliminates the need for set operations and reduces the number of iterations.

6. Remove unused functions: Remove the unused functions `gcd` and `lcm`.

### Step-by-Step Explanation

1. Remove unnecessary includes:
   - Replace `#include <bits/stdc++.h>` with the necessary headers:
     ```cpp
     #include <iostream>
     #include <set>
     #include <map>
     ```

2. Remove redundant macros:
   - Remove the unused macros `el`, `PI`, `_test_`, `optimize()`, and `file()`.

3. Convert global variables to local variables:
   - Inside the `_case_` function, remove the global variable declarations:
     ```cpp
     int n, a[mx], ans, k;
     set<int> s;
     map<int, int> m;
     ```
     - Declare them as local variables:
       ```cpp
       int n;
       cin >> n;
       int a[n];
       int ans = 0;
       int k = 0;
       set<int> s;
       map<int, int> m;
       ```

4. Remove sorting of the array:
   - Remove the line `sort(a, a + n);` since we don't need to sort the array.

5. Optimize the second loop in the `_case_` function:
   - Instead of iterating over the entire array, we can optimize the loop to only iterate over unique elements.
   - Replace the second loop with the following code:
     ```cpp
     for (int i = 0; i < n; i++) {
       if (m[a[i]] == 0) {
         s.insert(a[i]);
         m[a[i]]++;
       }
     }
     ```

6. Remove unused functions:
   - Remove the unused functions `gcd` and `lcm`.

### Optimized Code Block

Here is the optimized code:

```cpp
#include <iostream>
#include <set>
#include <map>
using namespace std;

typedef long long ll;

const int mx = 1e6 + 123;

void _case_() {
  int n;
  cin >> n;
  int a[n];
  int ans = 0;
  int k = 0;
  set<int> s;
  map<int, int> m;

  for (int i = 0; i < n; i++) {
    cin >> a[i];
    if (m[a[i]] == 0) {
      s.insert(a[i]);
      m[a[i]]++;
    }
  }

  cout << s.size() << endl;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  _case_();

  return 0;
}
```

The optimized code maintains the functionality and output of the original code while improving performance and reducing memory usage.