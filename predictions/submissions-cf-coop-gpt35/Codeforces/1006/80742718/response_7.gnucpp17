#include <iostream>
#include <vector>
using namespace std;

const int MAX_N = 29;
int grid[MAX_N][MAX_N], xorSums[MAX_N][MAX_N][MAX_N][MAX_N];

int main() {
    int n, m, k;
    cin >> n >> m >> k;

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            cin >> grid[i][j];
        }
    }

    int ans = 0;
    for (int r1 = 1; r1 <= n; r1++) {
        for (int c1 = 1; c1 <= m; c1++) {
            for (int r2 = r1; r2 <= n; r2++) {
                for (int c2 = c1; c2 <= m; c2++) {
                    xorSums[r1][c1][r2][c2] = grid[r1][c1];
                    if (r1 != r2) {
                        xorSums[r1][c1][r2][c2] ^= xorSums[r1 + 1][c1][r2][c2];
                    }
                    if (c1 != c2) {
                        xorSums[r1][c1][r2][c2] ^= xorSums[r1][c1 + 1][r2][c2];
                    }
                    if (r1 != r2 && c1 != c2) {
                        xorSums[r1][c1][r2][c2] ^= xorSums[r1 + 1][c1 + 1][r2][c2];
                    }
                }
            }
        }
    }

    for (int r1 = 1; r1 <= n; r1++) {
        for (int c1 = 1; c1 <= m; c1++) {
            for (int r2 = n; r2 >= r1; r2--) {
                for (int c2 = m; c2 >= c1; c2--) {
                    if (xorSums[r1][c1][r2][c2] == k) {
                        ans++;
                    }
                    if (r1 != r2) {
                        xorSums[r1][c1][r2 - 1][c2] ^= xorSums[r1][c1][r2][c2];
                    }
                    if (c1 != c2) {
                        xorSums[r1][c1][r2][c2 - 1] ^= xorSums[r1][c1][r2][c2];
                    }
                    if (r1 != r2 && c1 != c2) {
                        xorSums[r1][c1][r2 - 1][c2 - 1] ^= xorSums[r1][c1][r2][c2];
                    }
                }
            }
        }
    }

    cout << ans << endl;

    return 0;
}