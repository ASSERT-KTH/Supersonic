#include <iostream>
#include <bitset>
#define int long long
using namespace std;

const int N = 3e5 + 7, K = 20, X = 42, M = 998244353;
int cnk[X][X];
int fact[N], defact[N];
int dp[1 << K][X];
int sz[1 << K];
int op[N][K], cl[N][K];
pair<int, int> lr[N];
pair<int, int> bad[K];
bool has[N];
bool f[N], f2[N];

int bpow(int a, int n) {
  if (n == 0)
    return 1;
  if (n == 1)
    return a % M;
  if (n % 2 == 0) {
    int mem = bpow(a, n / 2);
    return (mem * mem) % M;
  }
  return (a * bpow(a, n - 1)) % M;
}

int obr(int x) { return bpow(x, M - 2); }

void init() {
  memset(cnk, 0, sizeof(cnk));
  for (int n = 0; n < X; n++) {
    cnk[n][0] = 1;
    for (int k = 1; k <= n; k++) {
      cnk[n][k] = (cnk[n - 1][k] + cnk[n - 1][k - 1]) % M;
    }
  }
  fact[0] = 1;
  for (int i = 1; i < N; i++)
    fact[i] = (fact[i - 1] * i) % M;
  defact[N - 1] = obr(fact[N - 1]);
  for (int i = N - 2; i >= 0; i--) {
    defact[i] = (defact[i + 1] * (i + 1)) % M;
  }
}

int get_cnk(int n, int k) {
  if (k > n)
    return 0;
  if (k < 0)
    return 0;
  if (n < X)
    return cnk[n][k];
  return (((fact[n] * defact[k]) % M) * defact[n - k]) % M;
}

signed main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  memset(has, 0, sizeof(has));
  memset(dp, 0, sizeof(dp));
  memset(f, 0, sizeof(f));
  memset(f2, 0, sizeof(f2));
  init();

  int n, m;
  cin >> n >> m;

  for (int i = 0; i < n; i++) {
    cin >> lr[i].first >> lr[i].second;
    op[lr[i].first][i] = 1;
    cl[lr[i].second][i] = 1;
  }

  for (int i = 0; i < m; i++) {
    cin >> bad[i].first >> bad[i].second;
    bad[i].first--;
    bad[i].second--;
  }

  dp[0][0] = 1;
  sz[0] = 0;

  for (int mask = 1; mask < (1 << m); mask++) {
    int pos = __builtin_ctz(mask);
    int nmask = 0, alone = 0, x = bad[pos].first, nmask2 = 0, alone2 = 0;
    bitset<N> lol;
    int kek[N], kek2[N];
    int kek_len = 0, kek2_len = 0;

    for (int i = 0; i < m; i++) {
      if (mask & (1 << i)) {
        if (bad[i].first != x && bad[i].second != x) {
          nmask |= (1 << i);
        }
        lol[bad[i].first] = 1;
        lol[bad[i].second] = 1;
        if (bad[i].first == x && !f[bad[i].second]) {
          f[bad[i].second] = 1;
          kek[kek_len++] = bad[i].second;
        }
        if (bad[i].second == x && !f[bad[i].first]) {
          f[bad[i].first] = 1;
          kek[kek_len++] = bad[i].first;
        }
      }
    }

    for (int i = 0; i < m; i++) {
      if (mask & (1 << i)) {
        if (nmask & (1 << i)) {
          if (!f[bad[i].first] && !f[bad[i].second])
            nmask2 |= (1 << i);
        }
        if (f[bad[i].first] && bad[i].second != x && !f[bad[i].second] &&
            !f2[bad[i].second]) {
          f2[bad[i].second] = 1;
          kek2[kek2_len++] = bad[i].second;
        }