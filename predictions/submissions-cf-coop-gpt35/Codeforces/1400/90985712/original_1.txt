Upon analyzing the code, here are some potential optimizations that can be made:

1. Remove unnecessary includes: The code includes the entire `<bits/stdc++.h>` library, which is not recommended and can slow down the compilation process. It is better to include only the necessary headers.

2. Optimize memory usage: The code uses a lot of global variables and large arrays. We can optimize memory usage by reducing the size of arrays and using local variables instead of global ones wherever possible.

3. Avoid unnecessary computations: The code performs some unnecessary computations, such as calculating the factorial and inverse factorial for every iteration of the loop. We can precalculate these values and store them in arrays for faster access.

4. Use more efficient data structures: The code uses vectors and unordered sets, which can be inefficient for large inputs. We can replace them with more efficient data structures, such as arrays or bitsets, depending on the specific requirements.

5. Improve loop efficiency: The code contains nested loops that can be optimized by removing redundant iterations or using loop unrolling techniques.

6. Utilize compiler optimizations: We can suggest compiler optimizations or pragma directives to guide the compiler in optimizing certain parts of the code.

Now, let's proceed with the step-by-step explanation of each optimization.