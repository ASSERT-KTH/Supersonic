#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 5;

int n, vis[2 * N], ordn, cnt, cmp[2 * N], val[N];
vector<int> adj[2 * N], adjt[2 * N];

int m, st[N], sw[N][2];
vector<int> ord, stk;

// Convert variable index to node index
int v(int x) { return 2 * x; }
int nv(int x) { return 2 * x + 1; }

// Add edges to the graph
void add(int a, int b) {
  adj[a ^ 1].push_back(b);
  adj[b ^ 1].push_back(a);
  adjt[b].push_back(a ^ 1);
  adjt[a].push_back(b ^ 1);
}

// Depth-first search
void dfs(int x) {
  vis[x] = 1;
  for (int v : adj[x]) {
    if (!vis[v]) {
      dfs(v);
    }
  }
  ord.push_back(x);
}

// Depth-first search on the transposed graph
void dfst(int x) {
  cmp[x] = cnt;
  vis[x] = 0;
  for (int v : adjt[x]) {
    if (vis[v]) {
      dfst(v);
    }
  }
}

// Optimized run2sat function
bool run2sat() {
  for (int i = 1; i <= m; i++) {
    if (!vis[v(i)]) {
      dfs(v(i));
    }
    if (!vis[nv(i)]) {
      dfs(nv(i));
    }
  }
  
  for (int i = ord.size() - 1; i >= 0; i--) {
    if (vis[ord[i]]) {
      cnt++;
      dfst(ord[i]);
    }
  }
  
  for (int i = 1; i <= m; i++) {
    if (vis[v(i)]) {
      cnt++;
      dfst(v(i));
    }
  }
  
  for (int i = 1; i <= m; i++) {
    if (cmp[v(i)] == cmp[nv(i)]) {
      return false;
    }
    val[i] = cmp[v(i)] > cmp[nv(i)];
  }
  
  return true;
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0);
  
  cin >> n >> m;
  
  for (int i = 1; i <= n; i++) {
    cin >> st[i];
  }
  
  int q, a;
  for (int i = 1; i <= m; i++) {
    cin >> q;
    while (q--) {
      cin >> a;
      sw[a][0] ? sw[a][1] = i : sw[a][0] = i;
    }
  }
  
  for (int i = 1; i <= n; i++) {
    int p = sw[i][0];
    int q = sw[i][1];
    if (!st[i]) {
      adj[v(p) ^ 1].push_back(v(q));
      adj[v(q) ^ 1].push_back(v(p));
      adj[nv(p) ^ 1].push_back(nv(q));
      adj[nv(q) ^ 1].push_back(nv(p));
      adjt[v(q)].push_back(v(p) ^ 1);
      adjt[v(p)].push_back(v(q) ^ 1);
      adjt[nv(q)].push_back(nv(p) ^ 1);
      adjt[nv(p)].push_back(nv(q) ^ 1);
    } else {
      adj[nv(p) ^ 1].push_back(v(q));
      adj[v(q) ^ 1].push_back(nv(p));
      adj[v(p) ^ 1].push_back(nv(q));
      adj[nv(q) ^ 1].push_back(v(p));
      adjt[nv(p)].push_back(v(q) ^ 1);
      adjt[v(q)].push_back(nv(p) ^ 1);
      adjt[nv(q)].push_back(v(p) ^ 1);
      adjt[v(p)].push_back(nv(q) ^ 1);
    }
  }
  
  cout << (run2sat() ? "YES\n" : "NO\n");
  
  return 0;
}