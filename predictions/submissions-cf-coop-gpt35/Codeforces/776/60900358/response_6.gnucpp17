#include <iostream>
#include <vector>
using namespace std;

const int N = 1e5 + 5;
int n, ordn, cnt;
int* vis;
int* ord;
int* cmp;
int* val;
vector<int>* adj;
vector<int>* adjt;
int m;
int* st;
int** sw;
vector<int> stk;

int v(int x) { return 2 * x; }
int nv(int x) { return 2 * x + 1; }

void dfs(int x) {
  vis[x] = 1;
  stk.push_back(x);
  while (!stk.empty()) {
    int u = stk.back();
    stk.pop_back();
    for (auto v : adj[u]) {
      if (!vis[v]) {
        vis[v] = 1;
        stk.push_back(v);
      }
    }
  }
}

void dfst(int x) {
  cmp[x] = cnt;
  vis[x] = 0;
  stk.push_back(x);
  while (!stk.empty()) {
    int u = stk.back();
    stk.pop_back();
    for (auto v : adjt[u]) {
      if (vis[v]) {
        cmp[v] = cnt;
        vis[v] = 0;
        stk.push_back(v);
      }
    }
  }
}

bool run2sat() {
  for (int i = 1; i <= m; i++) {
    if (!vis[v(i)])
      dfs(v(i));
    if (!vis[nv(i)])
      dfs(nv(i));
  }
  for (int i = ordn - 1; i >= 0; i--)
    if (vis[ord[i]])
      cnt++, dfst(ord[i]);
  for (int i = m; i >= 0; i--)
    if (vis[ord[i]])
      cnt++, dfst(ord[i]);
  for (int i = 1; i <= m; i++) {
    if (cmp[v(i)] == cmp[nv(i)])
      return false;
    val[i] = cmp[v(i)] > cmp[nv(i)];
  }
  return true;
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0);
  cin >> n >> m;

  st = new int[n + 1];
  for (int i = 1; i <= n; i++)
    cin >> st[i];

  sw = new int*[n + 1];
  for (int i = 1; i <= n; i++) {
    sw[i] = new int[2];
    sw[i][0] = 0;
    sw[i][1] = 0;
  }

  int q, a;
  for (int i = 1; i <= m; i++) {
    cin >> q;
    while (q--) {
      cin >> a;
      sw[a][0] ? sw[a][1] = i : sw[a][0] = i;
    }
  }

  adj = new vector<int>[2 * m + 1];
  adjt = new vector<int>[2 * m + 1];
  vis = new int[2 * m + 1];
  ord = new int[2 * m + 1];
  cmp = new int[2 * m + 1];
  val = new int[m + 1];

  for (int i = 1; i <= n; i++) {
    int p = sw[i][0];
    int q = sw[i][1];
    if (!st[i]) {
      adj[v(p)].push_back(v(q));
      adj[v(q)].push_back(v(p));
      adj[nv(p)].push_back(nv(q));
      adj[nv(q)].push_back(nv(p));
      adjt[v(q)].push_back(v(p));
      adjt[v(p)].push_back(v(q));
      adjt[nv(q)].push_back(nv(p));
      adjt[nv(p)].push_back(nv(q));
    } else {
      adj[nv(p)].push_back(v(q));
      adj[v(q)].push_back(nv(p));
      adj[v(p)].push_back(nv(q));
      adj[nv(q)].push_back(v(p));
      adjt[nv(p)].push_back(v(q));
      adjt[v(q)].push_back(nv(p));
      adjt[v(p)].push_back(nv(q));
      adjt[nv(q)].push_back(v(p));
    }
  }

  run2sat() ? cout << "YES\n" : cout << "NO\n";

  delete[] st;
  for (int i = 1; i <= n; i++)
    delete[] sw[i];
  delete[] sw;
  delete[] adj;
  delete[] adjt;
  delete[] vis;
  delete[] ord;
  delete[] cmp;
  delete[] val;

  return 0;
}