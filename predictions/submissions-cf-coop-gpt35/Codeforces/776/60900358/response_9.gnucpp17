#include <iostream>
#include <bitset>
#include <vector>
using namespace std;
const int N = 1e5 + 5;
int n, vis[2 * N], ord[2 * N], ordn, cnt, cmp[2 * N], val[N];
int m, st[N], sw[N][2];
vector<int> stk;

struct Graph {
  bitset<2 * N> adj[2 * N], adjt[2 * N];
} graph;

int v(int x) { return x ^ 1; }

void add(int a, int b) {
  graph.adj[a ^ 1].set(b);
  graph.adj[b ^ 1].set(a);
  graph.adjt[b].set(a ^ 1);
  graph.adjt[a].set(b ^ 1);
}

void dfs(int x) {
  vis[x] = 1;
  stk.push_back(x);
  while (!stk.empty()) {
    int u = stk.back();
    stk.pop_back();
    for (int v = 0; v < 2 * N; v++) {
      if (!vis[v] && graph.adj[u].test(v)) {
        vis[v] = 1;
        stk.push_back(v);
      }
    }
  }
}

void dfst(int x) {
  cmp[x] = cnt;
  vis[x] = 0;
  stk.push_back(x);
  while (!stk.empty()) {
    int u = stk.back();
    stk.pop_back();
    for (int v = 0; v < 2 * N; v++) {
      if (vis[v] && graph.adjt[u].test(v)) {
        cmp[v] = cnt;
        vis[v] = 0;
        stk.push_back(v);
      }
    }
  }
}

bool run2sat() {
  for (int i = 1; i <= m; i++) {
    if (!vis[v(i)])
      dfs(v(i));
    if (!vis[v(i ^ 1)])
      dfs(v(i ^ 1));
  }
  for (int i = ordn - 1; i >= 0; i--)
    if (vis[ord[i]])
      cnt++, dfst(ord[i]);
  for (int i = m; i >= 0; i--)
    if (vis[ord[i]])
      cnt++, dfst(ord[i]);
  for (int i = 1; i <= m; i++) {
    if (cmp[v(i)] == cmp[v(i ^ 1)])
      return false;
    val[i] = cmp[v(i)] > cmp[v(i ^ 1)];
  }
  return true;
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0);

  cin >> n >> m;
  for (int i = 1; i <= n; i++)
    cin >> st[i];
  int q, a;
  for (int i = 1; i <= m; i++) {
    cin >> q;
    while (q--) {
      cin >> a;
      sw[a][0] ? sw[a][1] = i : sw[a][0] = i;
    }
  }
  for (int i = 1; i <= n; i++) {
    int p = sw[i][0];
    int q = sw[i][1];
    if (!st[i])
      add(v(p), v(q)), add(p, q);
    else
      add(p, v(q)), add(v(p), q);
  }
  cout << (run2sat() ? "YES\n" : "NO\n");

  return 0;
}