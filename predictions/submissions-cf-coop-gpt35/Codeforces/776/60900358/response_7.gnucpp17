#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 5;

int n, vis[2 * N], ordn, cnt, val[N];
vector<int> adj[2 * N];
int m, st[N], sw[N][2];
vector<int> stk;

int v(int x) { return 2 * x; }
int nv(int x) { return 2 * x + 1; }

void add(int a, int b) {
  adj[a ^ 1].push_back(b);
  adj[b ^ 1].push_back(a);
  adj[b].push_back(a ^ 1);
  adj[a].push_back(b ^ 1);
}

void dfs(int x, vector<int>& visited, stack<int>& finishStack) {
  visited[x] = 1;
  for (auto v : adj[x])
    if (!visited[v])
      dfs(v, visited, finishStack);
  finishStack.push(x);
}

void dfst(int x, int cnt, vector<int>& visited) {
  visited[x] = 0;
  for (auto v : adj[x])
    if (visited[v])
      dfst(v, cnt, visited);
}

bool run2sat() {
  vector<int> visited(2 * N, 0);
  stack<int> finishStack;

  for (int i = 1; i <= m; i++) {
    if (!visited[v(i)])
      dfs(v(i), visited, finishStack);
    if (!visited[nv(i)])
      dfs(nv(i), visited, finishStack);
  }

  cnt = 0;
  while (!finishStack.empty()) {
    int x = finishStack.top();
    finishStack.pop();
    if (visited[x])
      dfst(x, ++cnt, visited);
  }

  for (int i = 1; i <= m; i++) {
    if (visited[v(i)] == visited[nv(i)])
      return false;
  }

  return true;
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0);

  cin >> n >> m;

  for (int i = 1; i <= n; i++)
    cin >> st[i];

  int q, a;
  for (int i = 1; i <= m; i++) {
    cin >> q;
    while (q--) {
      cin >> a;
      sw[a][0] ? sw[a][1] = i : sw[a][0] = i;
    }
  }

  for (int i = 1; i <= n; i++) {
    int p = sw[i][0];
    int q = sw[i][1];
    if (!st[i])
      add(v(p), v(q)), add(nv(p), nv(q));
    else
      add(nv(p), v(q)), add(v(p), nv(q));
  }

  cout << (run2sat() ? "YES\n" : "NO\n");
}