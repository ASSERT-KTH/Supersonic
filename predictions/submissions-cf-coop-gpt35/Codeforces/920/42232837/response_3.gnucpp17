#include <bits/stdc++.h>
using namespace std;
const int maxn = 1.8e7;
bitset<maxn + 100> isPrime;
array<int, maxn + 100> pint, f;

void fac(int x) {
  f.fill(0);
  int idx = 0;
  for (int i = 0; i < pint.size() && pint[i] * pint[i] <= x; i++) {
    if (x % pint[i] != 0)
      continue;
    f[idx++] = pint[i];
    while (x % pint[i] == 0)
      x /= pint[i];
  }
  if (x != 1)
    f[idx++] = x;
}

int solve(int val) {
  int ret = 0;
  int lim = 1 << f.size();
  for (int j = 1; j < lim; j++) {
    int tp = 1, ct = 0;
    for (int i = 0, bit = 1; i < f.size(); i++, bit <<= 1) {
      if (j & bit) {
        tp *= f[i];
        ct++;
      }
    }
    ret += (ct % 2 ? 1 : -1) * val / tp;
  }
  return val - ret;
}

int cas, x, p, k;

int main() {
  isPrime.set();
  isPrime[0] = isPrime[1] = false;
  for (int i = 2; i <= maxn; i++)
    if (isPrime[i])
      for (int j = 2; j * i <= maxn; j++)
        isPrime[i * j] = false;
  int idx = 0;
  for (int i = 2; i <= maxn; i++)
    if (isPrime[i])
      pint[idx++] = i;
  cin >> cas;
  while (cas--) {
    scanf("%d%d%d", &x, &p, &k);
    fac(p);
    int a1 = solve(x), L = x + 1, R = maxn, ans = 0;
    while (L <= R) {
      int dist = R - L + 1;
      int mid = L + (dist / 2);
      int val = solve(mid) - a1;
      if (val >= k)
        R = mid - 1, ans = mid;
      else
        L = mid;
    }
    printf("%d\n", ans);
  }
  return 0;
}