#include <bits/stdc++.h>
using namespace std;

const int maxn = 1.8e7;
bitset<maxn/8> pr;
vector<long long> pint, f;

void fac(int x) {
  f.clear();
  for (auto i : pint) {
    if (x != 1 && x % i == 0) {
      f.push_back(i);
      while (x % i == 0)
        x /= i;
    }
    if (i * i > x)
      break;
  }
  if (x != 1)
    f.push_back(x);
}

int solve(int val) {
  int ret = val;
  for (auto prime : f) {
    int tp = prime;
    int sign = -1;
    while (tp <= val) {
      ret += sign * (val / tp);
      tp *= prime;
      sign *= -1;
    }
  }
  return ret;
}

int main() {
  pr.set();
  pr[0] = pr[1] = 0;
  for (int i = 2; i <= maxn; i++)
    if (pr[i])
      for (int j = 2; j * i <= maxn; j++)
        pr[i * j] = 0;
  for (int i = 2; i <= maxn; i++)
    if (pr[i])
      pint.push_back(i);
  int cas, x, p, k;
  cin >> cas;
  while (cas--) {
    scanf("%d%d%d", &x, &p, &k);
    fac(p);
    int a1 = solve(x), L = x + 1, R = maxn, ans = 0;
    while (L <= R) {
      int mid = L + (R - L) / 2;
      int val = solve(mid) - a1;
      if (val >= k)
        R = mid - 1, ans = mid;
      else
        L = mid + 1;
    }
    printf("%d\n", ans);
  }
  return 0;
}