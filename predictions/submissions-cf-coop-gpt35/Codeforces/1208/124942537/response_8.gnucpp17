#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>

using namespace std;

void solve() {
  int n;
  cin >> n;
  
  vector<int> a(n);
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  
  unordered_map<int, int> m;
  unordered_map<int, int> temp;
  
  // Reserve memory for unordered_map to avoid reallocation
  m.reserve(n);
  
  for (int i = 0; i < n; i++) {
    m[a[i]]++;
  }
  
  if (m.size() == n) {
    cout << 0 << "\n";
    return;
  }
  
  int mi = INT_MAX;
  temp = m;

  unordered_set<int> distinctElements;
  int left = 0;
  
  for (int right = 0; right < n; right++) {
    temp[a[right]]--;
    if (temp[a[right]] == 0) {
      temp.erase(a[right]);
    }
    
    distinctElements.insert(a[right]);
    
    while (left <= right && distinctElements.size() < (right - left + 1)) {
      temp[a[left]]++;
      if (temp[a[left]] == 1) {
        temp.erase(a[left]);
      }
      
      distinctElements.erase(a[left]);
      
      left++;
    }
    
    if (distinctElements.empty()) {
      mi = min(mi, right - left + 2);
    }
  }
  
  cout << mi << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int t = 1;
  while (t--) {
    solve();
  }
  
  cerr << "Time elapsed: " << clock() * 1000.0 / CLOCKS_PER_SEC << " ms\n";
  
  return 0;
}