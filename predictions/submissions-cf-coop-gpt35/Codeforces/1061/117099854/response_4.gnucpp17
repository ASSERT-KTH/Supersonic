#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;

const int mod = 1000000007;

vector<long long int> getDivisors(int x) {
  vector<long long int> divs;
  for (int i = 1; i <= sqrt(x); i++) {
    if (x % i == 0) {
      divs.push_back(i);
      if (i * i != x)
        divs.push_back(x / i);
    }
  }
  sort(divs.rbegin(), divs.rend());
  return divs;
}

void solve() {
  int n;
  cin >> n;
  vector<long long int> dp(n + 1, 0);
  dp[0] = 1;

  for (int i = 1; i <= n; i++) {
    int x;
    cin >> x;
    vector<long long int> divs = getDivisors(x);

    vector<long long int> prefix(n + 1, 0);
    for (auto x : divs) {
      prefix[x] += dp[x - 1];
      prefix[x] %= mod;
    }

    for (int i = 1; i <= n; i++) {
      dp[i] += prefix[i];
      dp[i] %= mod;
    }
  }

  long long int ans = 0;
  for (int i = 1; i <= n; i++) {
    ans += dp[i];
    ans %= mod;
  }

  cout << ans << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  solve();

  return 0;
}