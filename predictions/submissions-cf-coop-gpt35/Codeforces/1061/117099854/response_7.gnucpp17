#include <iostream>
#include <vector>
using namespace std;

const int mod = 1000000007;

void solve() {
  int n;
  cin >> n;
  vector<long long int> dp(n + 1);
  dp[0] = 1;
  
  for (int i = 1; i <= n; i++) {
    int x;
    cin >> x;
    
    vector<int> divs;
    divs.reserve(2 * x);
    
    for (int j = 1; j * j <= x; j++) {
      if (x % j == 0) {
        divs.push_back(j);
        if (j * j != x)
          divs.push_back(x / j);
      }
    }

    for (auto x : divs) {
      dp[x] += dp[x - 1];
      dp[x] -= (dp[x] >= mod) ? mod : 0; // Calculate modulo without division
    }
  }
  
  long long int ans = 0;
  for (int i = 1; i <= n; i++) {
    ans += dp[i];
    ans -= (ans >= mod) ? mod : 0; // Calculate modulo without division
  }
  
  cout << ans << endl;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  
  int t = 1;
  while (t--) {
    solve();
  }
}