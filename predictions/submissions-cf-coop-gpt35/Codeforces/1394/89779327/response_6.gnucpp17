#include <iostream>
#include <vector>
#include <algorithm>
#include <bitset>

const int N = 200200;
const int K = 10;
const int MOD = 1e9 + 7;

using namespace std;

int n, k;
int ban[K][K][K], slf[K][K];
bitset<K> used[K];
int cnt[K][K];
int res, all;
vector<pair<int, int>> v[N], g[N];
int sv[K][K];

void rec(int i) {
  if (i == k + 1) {
    res += 1;
    return;
  }
  for (int j = 0; j < i; j++) {
    if (used[i][j] || slf[i][j])
      continue;
    for (int h = i + 1; h <= k; h++) {
      sv[i][h] = used[h].to_ulong();
      used[h] |= bitset<K>(ban[i][j][h]);
    }
    all += cnt[i][j];
    rec(i + 1);
    all -= cnt[i][j];
    for (int h = i + 1; h <= k; h++) {
      used[h] = bitset<K>(sv[i][h]);
    }
  }
}

int main() {
  ios_base::sync_with_stdio(0);
  cin >> n >> k;
  for (int i = 1; i <= n; i++) {
    int m;
    cin >> m;
    for (int j = 0; j < m; j++) {
      int x, y, z;
      cin >> x >> y >> z;
      v[x].push_back({z, y});
    }
  }
  for (int i = 1; i <= n; i++) {
    sort(v[i].begin(), v[i].end());
    if (v[i].empty()) {
      cout << 0 << "\n";
      return 0;
    }
    int prev_size = -1;
    for (int j = 0; j < v[i].size(); j++) {
      if (v[i][j].first != prev_size) {
        g[i].push_back({v[i].size(), j});
        prev_size = v[i][j].first;
      }
    }
    for (int j = 0; j < g[i].size(); j++) {
      cnt[g[i][j].first][g[i][j].second] += 1;
      for (int h = 0; h < g[i].size(); h++) {
        if (h != j) {
          ban[g[i][j].first][g[i][j].second][g[i][h].first] |= (1 << g[i][h].second);
        }
      }
    }
  }
  rec(1);
  cout << res << "\n";
}