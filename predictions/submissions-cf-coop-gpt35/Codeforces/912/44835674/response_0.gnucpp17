#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

constexpr int maxN = 16;
constexpr ll MAX = 1e18;

int p[maxN];
int n;
std::vector<ll> A, B;

bool prime(int x) {
  if (x <= 1) return false;
  if (x <= 2) return true;
  if (x % 2 == 0) return false;
  for (int d = 3; d * d <= x; d += 2) {
    if (x % d == 0)
      return false;
  }
  return true;
}

void safe_mul(ll& a, int b) {
  if (a <= MAX / b)
    a *= b;
  else
    a = -1;
}

void gen_all(const std::vector<int>& src, std::vector<ll>& dest) {
  dest.reserve(1 << src.size());
  ll cur = 1;
  int ind = 0;
  std::vector<int> stack(src.size(), 0);
  while (true) {
    if (ind == src.size()) {
      dest.push_back(cur);
      if (stack[ind-1] == 0) break;
      stack[ind-1]--;
      cur /= src[ind-1];
      ind--;
    } else {
      if (stack[ind] == 0) {
        cur *= src[ind];
        stack[ind]++;
        ind++;
      } else {
        stack[ind]--;
        cur /= src[ind];
        ind++;
      }
    }
  }
}

ll cnt(ll val) {
  ll res = 0;
  for (cauto e : A) {
    if (e > val) break;
    int lo = 0, hi = B.size() - 1;
    while (lo <= hi) {
      int mid = (lo + hi) / 2;
      if (B[mid] > val / e) {
        hi = mid - 1;
      } else {
        lo = mid + 1;
      }
    }
    res += lo;
  }
  return res;
}

int main() {
  std::cin >> n;
  for (int i = 0; i < n; i++) {
    std::cin >> p[i];
  }

  {
    constexpr int B_sz = 9;
    std::vector<int> pA(p + B_sz, p + n);
    gen_all(pA, A);
    std::vector<int> pB(p, p + std::min(B_sz, n));
    gen_all(pB, B);
  }

  std::sort(A.begin(), A.end());
  std::sort(B.begin(), B.end());

  int k;
  std::cin >> k;
  
  ll l = 0, r = 1e18;
  while (l + 1 != r) {
    cauto m = (l + r) / 2;
    if (cnt(m) >= k)
      r = m;
    else
      l = m;
  }
  
  std::cout << r;
}