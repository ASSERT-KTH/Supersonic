#ifndef DBG
#define NDEBUG
#endif
#include <bits/stdc++.h>
using namespace std;
#define cn const
#define cauto cn auto
#define FOR(i, from, to) for (int i = (from); i <= (to); ++i)
#define FORN(i, n) FOR(i, 0, (n)-1)
#define endl "\n"
#define mp make_pair
#define pb push_back
#define F first
#define S second
#define X F
#define Y S
#define CONT(c) begin(c), end(c)
#define ARR(a, sz) (a), ((a) + (sz))
using ll = long long;
using ull = unsigned long long;
using uint = unsigned;
using dd = long double;
#ifdef DBG
cn bool dbg = true;
#else
cn bool dbg = false;
#endif
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
template <typename Key>
using ordered_set =
    __gnu_pbds::tree<Key, __gnu_pbds::null_type, less<Key>,
                     __gnu_pbds::rb_tree_tag,
                     __gnu_pbds::tree_order_statistics_node_update>;
template <typename Key, typename Value>
using ordered_map =
    __gnu_pbds::tree<Key, Value, less<Key>, __gnu_pbds::rb_tree_tag,
                     __gnu_pbds::tree_order_statistics_node_update>;
template <typename T> constexpr T sqr(const T &x) { return x * x; }
ll rd() {
  ll x;
  cin >> x;
  assert(cin);
  return x;
}
mt19937 gen(29);
cn int maxN = 16;
int p[maxN];
int n;
bool isPrime[maxN]; // Sieve of Eratosthenes
void sieve() {
  memset(isPrime, true, sizeof(isPrime));
  isPrime[0] = isPrime[1] = false;
  for (int i = 2; i * i <= maxN; ++i) {
    if (isPrime[i]) {
      for (int j = i * i; j <= maxN; j += i) {
        isPrime[j] = false;
      }
    }
  }
}
void gen_max_test() {
  freopen("input.txt", "w", stdout);
  cout << maxN << endl;
  int last = 1;
  FORN(i, maxN) {
    while (!isPrime[++last]) {
    }
    cout << last << " ";
  }
}
cn ll MAX = 1e18;
void karatsuba_mul(ll &a, int b) {
  ll a1 = a / 1000000000;
  ll a0 = a % 1000000000;
  ll b1 = b / 1000000000;
  ll b0 = b % 1000000000;

  ll z0 = a0 * b0;
  ll z2 = a1 * b1;
  ll z1 = (a0 + a1) * (b0 + b1) - z0 - z2;

  a = z2 * 1000000000000000000LL + z1 * 1000000000LL + z0;
}
void gen_all(cn vector<int> &src, vector<ll> &dest, ll cur = 1, int ind = 0) {
  if (ind == src.size()) {
    dest.pb(cur);
    return;
  }
  while (cur != -1) {
    gen_all(src, dest, cur, ind + 1);
    karatsuba_mul(cur, src[ind]);
    if (cur == -1) {
      break;
    }
  }
}
vector<ll> A, B;
ll cnt(ll val) {
  int ind = B.size() - 1;
  ll res = 0;
  for (cauto e : A) {
    if (e > val)
      break;
    int start = 0;
    int end = B.size() - 1;
    int mid;
    while (start <= end) {
      mid = start + (end - start) / 2;
      if (B[mid] > val / e) {
        end = mid - 1;
      } else {
        start = mid + 1;
      }
    }
    res += start;
  }
  return res;
}
int main() {
#ifdef MY
  freopen("input.txt", "r", stdin);
#else
#define TASKNAME ""
#endif
  if (!dbg) {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
  }
  cin >> n;
  FORN(i, n)
  cin >> p[i];
  {
    cn int B_sz = 9;
    vector<int> pA;
    FOR(i, B_sz, n - 1)
    pA.pb(p[i]);
    gen_all(pA, A);
    vector<int> pB;
    FORN(i, min(B_sz, n))
    pB.pb(p[i]);
    gen_all(pB, B);
  }
  cn int k = rd();
  ll l = 0, r = 1e18;
  while (l + 1 != r) {
    cauto m = (l + r) / 2;
    if (cnt(m) >= k)
      r = m;
    else
      l = m;
  }
  cout << r;
}