#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool is_prime(int x) {
  if (x <= 1) {
    return false;
  }
  for (int d = 2; d * d <= x; ++d) {
    if (x % d == 0) {
      return false;
    }
  }
  return true;
}

void gen_max_test() {
  freopen("input.txt", "w", stdout);
  int maxN = 16;
  cout << maxN << endl;
  int last = 1;
  for (int i = 0; i < maxN; ++i) {
    while (!is_prime(++last)) {
    }
    cout << last << " ";
  }
}

void gen_all(const vector<int>& src, vector<long long>& dest, long long cur = 1, int ind = 0) {
  if (ind == src.size()) {
    dest.push_back(cur);
    return;
  }
  while (cur != -1) {
    gen_all(src, dest, cur, ind + 1);
    if (cur <= LLONG_MAX / src[ind]) {
      cur *= src[ind];
    } else {
      cur = -1;
    }
  }
}

long long cnt(const vector<long long>& A, const vector<long long>& B, long long val) {
  int ind = B.size() - 1;
  long long res = 0;
  for (auto e : A) {
    if (e > val) {
      break;
    }
    res += upper_bound(B.begin(), B.end(), val / e) - B.begin();
  }
  return res;
}

int main() {
  int n;
  cin >> n;
  vector<int> p(n);
  for (int i = 0; i < n; ++i) {
    cin >> p[i];
  }
  {
    int B_sz = 9;
    vector<int> pA(p.begin() + B_sz, p.end());
    vector<long long> A, B;
    gen_all(pA, A);
    vector<int> pB(p.begin(), p.begin() + min(B_sz, n));
    gen_all(pB, B);
    sort(A.begin(), A.end());
    sort(B.begin(), B.end());
    int k;
    cin >> k;
    long long l = 0, r = 1e18;
    while (l + 1 != r) {
      long long m = (l + r) / 2;
      if (cnt(A, B, m) >= k) {
        r = m;
      } else {
        l = m;
      }
    }
    cout << r;
  }
  return 0;
}