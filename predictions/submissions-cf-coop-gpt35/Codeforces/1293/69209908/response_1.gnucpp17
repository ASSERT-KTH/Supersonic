#include <iostream>
#include <vector>
#include <utility>

using namespace std;

typedef long long ll;

ll dist(pair<ll, ll> a, pair<ll, ll> b) {
  return abs(a.first - b.first) + abs(a.second - b.second);
}

pair<ll, ll> next(pair<ll, ll> temp, ll ax, ll bx, ll ay, ll by) {
  return make_pair(ax * temp.first + bx, ay * temp.second + by);
}

int main() {
  ll xx, yy, ax, bx, ay, by, xs, ys, t;
  cin >> xx >> yy >> ax >> ay >> bx >> by >> xs >> ys >> t;

  pair<ll, ll> temp, tx;
  ll arr[100]; // Assuming the maximum number of positions is 100
  ll vs = 0;

  temp = make_pair(xx, yy);
  tx = make_pair(xs, ys);
  ll dea = dist(temp, tx);
  ll i = 0;
  if (dea <= t) {
    arr[i++] = temp;
  }
  temp = next(temp, ax, bx, ay, by);
  if (dist(tx, temp) > dea) {
    vs = 2;
  } else {
    vs = 1;
  }

  while (vs == 1) {
    dea = dist(tx, temp);
    arr[i++] = temp;
    temp = next(temp, ax, bx, ay, by);
    if (dea > t) {
      break;
    }
  }

  ll ans = 0;
  ll maxPositions = i;

  for (i = 0; i < maxPositions; i++) {
    ll dus = dist(tx, arr[i]);
    if (dus <= t) {
      ll j = i;
      while (j < maxPositions - 1) {
        j++;
        dus += dist(arr[j], arr[j - 1]);
        if (dus > t) {
          break;
        }
      }
      if (dus <= t) {
        ans = max(ans, j - i + 1);
      } else {
        ans = max(ans, j - i);
      }

      dus = dist(tx, arr[i]);
      j = i;
      while (j > 0) {
        j--;
        dus += dist(arr[j], arr[j + 1]);
        if (dus > t) {
          break;
        }
      }
      if (dus <= t) {
        ans = max(ans, i - j + 1);
      } else {
        ans = max(ans, i - j);
      }
    }
  }

  cout << ans;
  return 0;
}