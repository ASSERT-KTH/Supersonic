#include <iostream>
#include <vector>
#include <deque>
#include <algorithm>
#include <ctime>
using namespace std;

long long xx, yy, ax, bx, ay, by, xs, ys, t;

long long dist(pair<long long, long long> a, pair<long long, long long> b) {
  return abs(a.first - b.first) + abs(a.second - b.second);
}

pair<long long, long long> next(pair<long long, long long> temp) {
  return make_pair(ax * temp.first + bx, ay * temp.second + by);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  srand(time(NULL));

  cin >> xx >> yy >> ax >> ay >> bx >> by >> xs >> ys >> t;
  pair<long long, long long> temp, tx;
  deque<pair<long long, long long>> arr;
  long long vs = 0;
  temp = make_pair(xx, yy);
  tx = make_pair(xs, ys);
  long long dea = dist(temp, tx);
  if (dea <= t)
    arr.push_back(temp);
  temp = next(temp);
  if (dist(tx, temp) > dea)
    vs = 2;
  else
    vs = 1;
  while (vs == 1 || (vs == 2 && dist(tx, temp) <= t)) {
    dea = dist(tx, temp);
    arr.push_back(temp);
    temp = next(temp);
    if (vs == 1 && dea < dist(tx, temp))
      vs = 2;
  }
  long long ans = 0;
  int i = 0;
  int size = arr.size();
  while (i < size) {
    long long dus = dist(tx, arr[i]);
    long long j = i;
    while (j < size - 1 && dus <= t) {
      j++;
      dus += dist(arr[j], arr[j - 1]);
    }
    if (dus <= t)
      ans = max(ans, j - i + 1);
    else
      ans = max(ans, j - i);
    dus = dist(tx, arr[i]);
    j = i;
    while (j > 0 && dus <= t) {
      j--;
      dus += dist(arr[j], arr[j + 1]);
    }
    if (dus <= t)
      ans = max(ans, i - j + 1);
    else
      ans = max(ans, i - j);
    i++;
  }
  cout << ans;
}