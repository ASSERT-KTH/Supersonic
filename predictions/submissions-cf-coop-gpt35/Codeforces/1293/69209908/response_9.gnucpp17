#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

struct Point {
    long long x;
    long long y;
};

long long dist(const Point& a, const Point& b) {
    return abs(a.x - b.x) + abs(a.y - b.y);
}

Point next(const Point& temp, long long ax, long long bx, long long ay, long long by) {
    return {ax * temp.x + bx, ay * temp.y + by};
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    srand(time(NULL));

    long long xx, yy, ax, bx, ay, by, xs, ys, t;
    cin >> xx >> yy >> ax >> ay >> bx >> by >> xs >> ys >> t;

    Point temp = {xx, yy};
    Point tx = {xs, ys};
    Point* arr = new Point[1000000];
    int size = 0;
    long long dea = dist(temp, tx);
    if (dea <= t)
        arr[size++] = temp;
    temp = next(temp, ax, bx, ay, by);
    if (dist(tx, temp) > dea) {
        for (int i = 0; i < size; i++) {
            if (dist(tx, arr[i]) < dea) {
                arr[i] = temp;
            }
        }
    } else {
        for (int i = 0; i < size; i++) {
            arr[i] = temp;
        }
    }

    while (dist(tx, temp) <= t) {
        dea = dist(tx, temp);
        arr[size++] = temp;
        temp = next(temp, ax, bx, ay, by);
        for (int i = 0; i < size; i++) {
            if (dist(tx, arr[i]) < dea) {
                arr[i] = temp;
            }
        }
    }

    long long ans = 0;
    for (int i = 0; i < size; i++) {
        int j = i;
        long long dus = dist(tx, arr[i]);
        long long tx = dus;
        if (dus <= t) {
            while (j < size - 1 && dus <= t) {
                j++;
                dus += dist(arr[j], arr[j - 1]);
            }
            if (dus <= t)
                ans = max(ans, (long long)j - i + 1);
            else
                ans = max(ans, (long long)j - i);
            dus = tx;
            j = i;
            while (j > 0 && dus <= t) {
                j--;
                dus += dist(arr[j], arr[j + 1]);
            }
            if (dus <= t)
                ans = max(ans, (long long)i - j + 1);
            else
                ans = max(ans, (long long)i - j);
        }
    }

    cout << ans;

    delete[] arr;
}