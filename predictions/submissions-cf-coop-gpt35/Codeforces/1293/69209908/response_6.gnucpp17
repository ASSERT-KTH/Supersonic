#include <iostream>
#include <vector>

constexpr long long ax = 0, ay = 0, bx = 0, by = 0;

inline long long dist(const std::pair<long long, long long>& a, const std::pair<long long, long long>& b) {
  return (a.first - b.first) + (a.second - b.second);
}

inline std::pair<long long, long long> next(const std::pair<long long, long long>& temp) {
  return {ax * temp.first + bx, ay * temp.second + by};
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);

  long long xx, yy, xs, ys, t;
  std::cin >> xx >> yy >> ax >> ay >> bx >> by >> xs >> ys >> t;

  std::pair<long long, long long> temp = {xx, yy};
  std::pair<long long, long long> tx = {xs, ys};

  std::vector<std::pair<long long, long long>> arr;
  arr.reserve(1000); // Reserve memory for the maximum expected number of points

  long long dea = dist(temp, tx);
  if (dea <= t)
    arr.push_back(temp);

  temp = next(temp);
  int vs = (dist(tx, temp) > dea) ? 2 : 1;

  while (vs == 1 || (vs == 2 && dist(tx, temp) <= t)) {
    dea = dist(tx, temp);
    arr.push_back(temp);
    temp = next(temp);
    if (vs == 1 && dea < dist(tx, temp))
      vs = 2;
  }

  long long ans = 0;
  for (long long i = 0; i < static_cast<long long>(arr.size()); ++i) {
    long long j = i;
    long long dus = dist(tx, arr[i]);
    long long tx = dus;
    if (dus <= t) {
      while (j < static_cast<long long>(arr.size()) - 1 && dus <= t) {
        ++j;
        dus += dist(arr[j], arr[j - 1]);
      }
      if (dus <= t)
        ans = std::max(ans, j - i + 1);
      else
        ans = std::max(ans, j - i);
      dus = tx;
      j = i;
      while (j > 0 && dus <= t) {
        --j;
        dus += dist(arr[j], arr[j + 1]);
      }
      if (dus <= t)
        ans = std::max(ans, i - j + 1);
      else
        ans = std::max(ans, i - j);
    }
  }

  std::cout << ans;

  return 0;
}