#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

int main() {
    int xx, yy, ax, bx, ay, by, xs, ys, t;
    cin >> xx >> yy >> ax >> ay >> bx >> by >> xs >> ys >> t;

    int tempX = xx, tempY = yy;
    int tx = xs, ty = ys;
    int vs = 0;
    int dea = abs(tempX - tx) + abs(tempY - ty);
    vector<pair<int, int>> arr;
    if (dea <= t)
        arr.emplace_back(tempX, tempY);
    tempX = ax * tempX + bx;
    tempY = ay * tempY + by;
    if (abs(tx - tempX) + abs(ty - tempY) > dea)
        vs = 2;
    else
        vs = 1;

    while (vs == 1 || (vs == 2 && abs(tx - tempX) + abs(ty - tempY) <= t)) {
        dea = abs(tx - tempX) + abs(ty - tempY);
        arr.emplace_back(tempX, tempY);
        tempX = ax * tempX + bx;
        tempY = ay * tempY + by;
        if (vs == 1 && dea < abs(tx - tempX) + abs(ty - tempY))
            vs = 2;
    }

    int ans = 0;
    for (size_t i = 0; i < arr.size(); i++) {
        size_t j = i;
        int dus = abs(tx - arr[i].first) + abs(ty - arr[i].second);
        int tx = dus;
        if (dus <= t) {
            while (j < arr.size() - 1 && dus <= t) {
                ++j;
                dus += abs(arr[j].first - arr[j - 1].first) + abs(arr[j].second - arr[j - 1].second);
            }
            if (dus <= t)
                ans = max(ans, static_cast<int>(j - i + 1));
            else
                ans = max(ans, static_cast<int>(j - i));
            dus = tx;
            j = i;
            while (j > 0 && dus <= t) {
                --j;
                dus += abs(arr[j].first - arr[j + 1].first) + abs(arr[j].second - arr[j + 1].second);
            }
            if (dus <= t)
                ans = max(ans, static_cast<int>(i - j + 1));
            else
                ans = max(ans, static_cast<int>(i - j));
        }
    }

    cout << ans;

    return 0;
}