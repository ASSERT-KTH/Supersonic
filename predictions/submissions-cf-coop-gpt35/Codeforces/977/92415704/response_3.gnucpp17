#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const int MAXN = 200010;
vector<int> v[MAXN];
bool vis[MAXN];

void bfs(int u, int& nn, int& ne) {
    nn = 0;
    ne = 0;
    vis[u] = true;
    queue<int> q;
    q.push(u);
    while (!q.empty()) {
        u = q.front();
        q.pop();
        nn++;
        for (int i = 0; i < v[u].size(); i++) {
            int p = v[u][i];
            if (!vis[p]) {
                vis[p] = true;
                q.push(p);
            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        v[a].push_back(b);
        v[b].push_back(a);
    }

    int c = 0;
    for (int i = 1; i <= n; i++) {
        if (!vis[i]) {
            int nn, ne;
            bfs(i, nn, ne);
            if (nn == ne) {
                c++;
            }
        }
    }

    cout << c << "\n";
    return 0;
}