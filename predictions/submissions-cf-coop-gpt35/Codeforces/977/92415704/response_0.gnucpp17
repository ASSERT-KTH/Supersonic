#include <iostream>
#include <vector>
#include <queue>

using namespace std;

void bfs(const vector<vector<int>>& v, vector<bool>& vis, int& nn, int& ne, int u) {
  nn = 0;
  ne = 0;
  vis[u] = true;
  queue<int> q;
  q.push(u);
  while (!q.empty()) {
    u = q.front();
    q.pop();
    nn++;
    if (v[u].size() == 2)
      ne++;
    vis[u] = true;
    for (int p : v[u]) {
      if (!vis[p]) {
        vis[p] = true;
        q.push(p);
      }
    }
  }
}

int main() {
  int n, m, a, b, c = 0;
  cin >> n >> m;
  
  vector<vector<int>> v(n + 1);
  vector<bool> vis(n + 1, false);
  
  while (m--) {
    cin >> a >> b;
    v[a].emplace_back(b);
    v[b].emplace_back(a);
  }
  
  for (int i = 1; i <= n; i++) {
    if (!vis[i]) {
      int nn, ne;
      bfs(v, vis, nn, ne, i);
      if (nn == ne)
        c++;
    }
  }
  
  cout << c << endl;
  
  return 0;
}