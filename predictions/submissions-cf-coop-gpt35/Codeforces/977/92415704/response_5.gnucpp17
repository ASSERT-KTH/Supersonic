#include <bits/stdc++.h>
using namespace std;

struct Node {
  vector<int> neighbors;
  bool visited;
};

unordered_map<int, Node> graph;

int nn, ne;

void bfs(int u) {
  nn = 0, ne = 0;
  graph[u].visited = true;
  queue<int> q;
  q.push(u);
  while (!q.empty()) {
    u = q.front();
    q.pop();
    nn++;
    if (graph[u].neighbors.size() == 2)
      ne++;
    for (int p : graph[u].neighbors) {
      if (!graph[p].visited) {
        graph[p].visited = true;
        q.push(p);
      }
    }
  }
}

int main() {
  int n, m, a, b, c = 0;
  scanf("%d %d", &n, &m);
  while (m--) {
    scanf("%d %d", &a, &b);
    graph[a].neighbors.push_back(b);
    graph[b].neighbors.push_back(a);
  }
  for (auto& entry : graph) {
    if (!entry.second.visited) {
      bfs(entry.first);
      if (nn == ne)
        c++;
    }
  }
  printf("%d\n", c);
  return 0;
}