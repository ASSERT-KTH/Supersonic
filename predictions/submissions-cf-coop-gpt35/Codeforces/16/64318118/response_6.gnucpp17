#include <iostream>
#include <vector>
#include <iomanip>
#include <cmath>

void solve() {
    int n;
    std::cin >> n;

    std::vector<std::vector<double>> m(n, std::vector<double>(n, 0));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            std::cin >> m[i][j];
        }
    }

    double dp[1 << n] = {0};
    dp[(1 << n) - 1] = 1;

    for (int i = (1 << n) - 1; i >= 0; i--) {
        int ruby = 0;
        for (int g = 0; g < n; g++) {
            if ((i >> g) & 1) {
                ruby++;
            }
        }

        for (int j = 0; j < n; j++) {
            for (int k = j + 1; k < n; k++) {
                if (((i >> j) & 1) && ((i >> k) & 1)) {
                    int a = 0, b = 0;
                    for (int g = 0; g < n; g++) {
                        if (g != j && ((i >> g) & 1)) {
                            a += (1 << g);
                        }
                        if (g != k && ((i >> g) & 1)) {
                            b += (1 << g);
                        }
                    }
                    double factor = 2 * dp[i] / (ruby * (ruby - 1));
                    dp[b] += factor * m[j][k];
                    dp[a] += factor * m[k][j];
                }
            }
        }
    }

    for (int i = 0; i < n; i++) {
        std::cout << std::fixed << std::setprecision(6) << dp[1 << i] << ' ';
    }
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0);
    std::cout.tie(0);

    solve();

    return 0;
}