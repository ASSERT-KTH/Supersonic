#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <iostream>
#include <vector>
#include <iomanip>

using namespace std;

typedef long long ll;
typedef pair<ll, ll> pr;

vector<double> calculateProbabilities(int n, vector<vector<double>>& m) {
    vector<double> dp(1 << n, 0);
    dp[(1 << n) - 1] = 1;

    for (int i = (1 << n) - 1; i >= 0; i--) {
        for (int j = 0; j < n; j++) {
            for (int k = j + 1; k < n; k++) {
                if (((i >> j) & 1) && ((i >> k) & 1)) {
                    int a = 0, b = 0;
                    int ruby = 0;
                    for (int g = 0; g < n; g++) {
                        if (((i >> g) & 1))
                            ruby++;
                        if (g != j && ((i >> g) & 1))
                            a += (1 << g);
                        if (g != k && ((i >> g) & 1))
                            b += (1 << g);
                    }
                    dp[b] += 2 * dp[i] / (ruby * (ruby - 1)) * m[j][k];
                    dp[a] += 2 * dp[i] / (ruby * (ruby - 1)) * m[k][j];
                }
            }
        }
    }
    
    vector<double> probabilities(n);
    for (int i = 0; i < n; i++) {
        probabilities[i] = dp[1 << i];
    }
    
    return probabilities;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int n;
    cin >> n;
    vector<vector<double>> m(n, vector<double>(n, 0));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> m[i][j];
        }
    }

    vector<double> probabilities = calculateProbabilities(n, m);

    for (int i = 0; i < n; i++) {
        cout << fixed << setprecision(20) << probabilities[i] << ' ';
    }
    
    return 0;
}