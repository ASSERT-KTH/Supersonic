#include <iostream>
#include <cstring>
using namespace std;

typedef long long ll;
typedef unsigned long long ul;

const int len = 1000005;
const ll mod = 1000000007;

ul modpow(ul x, ul n, ul m) {
  if (n == 0)
    return 1UL % m;
  ul u = modpow(x, n / 2, m);
  u = (u * u) % m;
  if (n % 2 == 1)
    u = (u * x) % m;
  return u;
}

ul mod_(ll x, ll m) {
  if (x > 0)
    return x % m;
  else
    return (m - abs(x) % m) % m;
}

void make_prm(bool prm[]) {
  prm[0] = prm[1] = true;
  for (int first = 2; first <= len; first++) {
    if (!prm[first]) {
      for (int second = 2 * first; second <= len; second += first)
        prm[second] = true;
    }
  }
}

void make_factor(int n, ll factor[]) {
  int idx = 0;
  for (int i = 1; i * i <= n; i++) {
    if (n % i == 0) {
      factor[idx++] = i;
      factor[idx++] = n / i;
      if (i * i == n)
        idx--;
    }
  }
}

void make_pascalTri(int n, ul pascal_tri[][105]) {
  bool f = 0;
  memset(pascal_tri, 0, sizeof(pascal_tri));
  for (int i = 0; i <= n; i++) {
    pascal_tri[f][0] = 1;
    for (int j = 1; j <= i; j++) {
      pascal_tri[f][j] = pascal_tri[!f][j] + pascal_tri[!f][j - 1];
    }
    f = !f;
  }
}

ll gcd(ll a, ll b) {
  if (b == 0)
    return a;
  return gcd(b, a % b);
}

ll give_floor(ll n, ll a) {
  if (n % a == 0)
    return n / a;
  else {
    return n / a + 1;
  }
}

bool is_perfect(ll n) {
  ll i;
  for (i = 1; i * i < n; i++)
    ;
  return i * i == n;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);

  int n, k;
  cin >> n >> k;

  ll sm = 0, ans = 0;
  bool vis[len][2];
  memset(vis, false, sizeof(vis));
  ll adj[len][2];
  memset(adj, 0, sizeof(adj));

  for (int i = 1; i <= n - 1; i++) {
    ll u, v, x;
    cin >> u >> v >> x;
    if (x == 0)
      adj[u][0]++, adj[v][0]++;
  }

  for (int i = 1; i <= n; i++) {
    if (!vis[i][0]) {
      sm += modpow(adj[i][0], k, mod);
      sm = mod_(sm, mod);
    }
  }

  ans = modpow(n, k, mod);
  cout << mod_(ans - sm, mod) << endl;

  return 0;
}