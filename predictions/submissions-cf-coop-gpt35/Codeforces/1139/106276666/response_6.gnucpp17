#include <iostream>
#include <vector>
#include <stack>
using namespace std;

typedef long long ll;
typedef unsigned long long ul;

const int len = 1e6 + 5;
const ll mod = 1e9 + 7;

ul modpow(ul x, ul n, ul m) {
    if (n == 0)
        return 1UL % m;
    ul u = modpow(x, n / 2, m);
    u = (u * u) % m;
    if (n % 2 == 1)
        u = (u * x) % m;
    return u;
}

ul mod_(ll x, ll m) {
    if (x > 0)
        return x % m;
    else
        return (m - abs(x) % m) % m;
}

vector<int> adj[len];
bool vis[len];

int dfs(int start) {
    stack<int> st;
    int count = 0;
    st.push(start);
    while (!st.empty()) {
        int node = st.top();
        st.pop();
        if (!vis[node]) {
            vis[node] = true;
            count++;
            for (int neighbor : adj[node]) {
                if (!vis[neighbor]) {
                    st.push(neighbor);
                }
            }
        }
    }
    return count;
}

int main() {
    int n, k;
    int sm = 0, ans = 0;
    cin >> n >> k;
    for (int i = 1; i <= n - 1; i++) {
        int u, v, x;
        cin >> u >> v >> x;
        if (x == 0)
            adj[u].push_back(v), adj[v].push_back(u);
    }
    for (int i = 1; i <= n; i++) {
        if (!vis[i]) {
            int componentSize = dfs(i);
            sm += modpow(componentSize, k, mod);
            sm = mod_(sm, mod);
        }
    }
    ans = modpow(n, k, mod);
    cout << mod_(ans - sm, mod) << endl;
    return 0;
}