#include <iostream>
#include <vector>
using namespace std;

typedef long long ll;
typedef unsigned long long ul;

const int len = 1000005;
const ll mod = 1000000007;

bool prm[len];
bool vis[len];
vector<int> adj[len];

void make_prm() {
    prm[0] = prm[1] = true;
    for (int first = 2; first <= len; first++) {
        if (!prm[first]) {
            for (int second = 2 * first; second <= len; second += first)
                prm[second] = true;
        }
    }
}

ll modpow(ll x, ll n, ll m) {
    if (n == 0)
        return 1UL % m;
    ll u = modpow(x, n / 2, m);
    u = (u * u) % m;
    if (n % 2 == 1)
        u = (u * x) % m;
    return u;
}

ll mod_(ll x, ll m) {
    if (x > 0)
        return x % m;
    else
        return (m - abs(x) % m) % m;
}

ll dfs(ll n) {
    ll x = 0;
    vector<int> stack;
    stack.push_back(n);
    while (!stack.empty()) {
        int u = stack.back();
        stack.pop_back();
        if (!vis[u]) {
            vis[u] = true;
            x++;
            for (int v : adj[u]) {
                if (!vis[v])
                    stack.push_back(v);
            }
        }
    }
    return x;
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int n, k;
    cin >> n >> k;

    make_prm();

    ll sm = 0;
    for (int i = 1; i <= n - 1; i++) {
        int u, v, x;
        cin >> u >> v >> x;
        if (x == 0) {
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
    }

    for (int i = 1; i <= n; i++) {
        if (!vis[i]) {
            sm += modpow(dfs(i), k, mod);
            sm = mod_(sm, mod);
        }
    }

    ll ans = modpow(n, k, mod);
    cout << mod_(ans - sm, mod) << endl;

    return 0;
}