#include <iostream>
#include <vector>

using namespace std;

const int MAXN = 1000005;
const int MOD = 1000000007;

int n, k;
long long sm, ans;
bool vis[MAXN];
vector<int> adj[MAXN];

long long modpow(long long x, long long n, long long m) {
  if (n == 0)
    return 1LL % m;
  long long u = modpow(x, n / 2, m);
  u = (u * u) % m;
  if (n % 2 == 1)
    u = (u * x) % m;
  return u;
}

long long mod_(long long x, long long m) {
  if (x > 0)
    return x % m;
  else
    return (m - abs(x) % m) % m;
}

long long dfs(int n, int p, vector<bool>& visited) {
  if (visited[n])
    return 0;
  visited[n] = true;
  long long x = 0;
  for (auto u : adj[n]) {
    if (u != p)
      x += dfs(u, n, visited);
  }
  return x + 1;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);

  cin >> n >> k;
  for (int i = 1; i <= n - 1; i++) {
    int u, v, x;
    cin >> u >> v >> x;
    if (x == 0)
      adj[u].push_back(v), adj[v].push_back(u);
  }

  vector<bool> visited(n + 1, false);
  for (int i = 1; i <= n; i++) {
    if (!visited[i]) {
      sm += modpow(dfs(i, -1, visited), k, MOD);
      sm = mod_(sm, MOD);
    }
  }

  ans = modpow(n, k, MOD);
  cout << mod_(ans - sm, MOD) << endl;

  return 0;
}