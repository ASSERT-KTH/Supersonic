#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

typedef long long int ll;

bool isPowerOfTwo(ll x) {
  return x && (!(x & (x - 1)));
}

void fastio() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
}

long long binpow(long long a, long long b) {
  long long res = 1;
  while (b > 0) {
    if (b & 1)
      res = res * a;
    a = a * a;
    b >>= 1;
  }
  return res;
}

const int dx[] = {1, 0, -1, 0, 1, 1, -1, -1};
const int dy[] = {0, -1, 0, 1, 1, -1, -1, 1};

int main() {
  fastio();
  int tc = 1;
  cin >> tc;
  while (tc--) {
    int n;
    cin >> n;
    vector<ll> a(n), b(n);
    for (int i = 0; i < n; i++)
      cin >> a[i];
    for (int i = 0; i < n; i++)
      cin >> b[i];
    ll ma = *min_element(a.begin(), a.end());
    ll mo = *min_element(b.begin(), b.end());
    ll ans = 0;
    for (int i = 0; i < n; i++) {
      if (a[i] > ma && b[i] > mo) {
        int x = min(a[i] - ma, b[i] - mo);
        a[i] -= x;
        b[i] -= x;
        ans += x;
      }
      if (a[i] > ma)
        ans += a[i] - ma;
      else if (b[i] > mo)
        ans += b[i] - mo;
    }
    cout << ans << "\n";
  }
  return 0;
}