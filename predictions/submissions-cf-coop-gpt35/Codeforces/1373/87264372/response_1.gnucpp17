#include <iostream>
#include <vector>
#include <bitset>
using namespace std;

#define endl '\n'
#define REP(i, n) for (int i = 0; i < (n); ++i)

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;

const int MAXN = 0;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vi ar(n);
        REP(i, n) { cin >> ar[i]; }

        vector<ll> dp(3*(n + 1), 0ll);

        REP(i, n) {
            dp[i + 1] = dp[i] + (i & 1 ? 0 : ar[i]);
            if (i + 2 <= n)
                dp[i + 2] = max(dp[i], dp[i + 1]) + ar[(i & 1 ? i : i + 1)];
            dp[i + 1] = max({dp[i], dp[i + 1], dp[i + 2], dp[i + 1]}) + (i & 1 ? 0 : ar[i]);
        }

        ll max_val = max({dp[n], dp[n + 1], dp[n + 2]});
        cout << max_val << endl;
    }
    return 0;
}