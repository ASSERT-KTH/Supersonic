#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vll;

const int MOD = 1000000007;
const double EPS = 0.000000001;

int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    vi ar(n);
    for (int i = 0; i < n; ++i) {
      cin >> ar[i];
    }
    vll dp(n + 1, 0ll);
    for (int i = 0; i < n; ++i) {
      dp[i + 1] = dp[i] + (i & 1 ? 0 : ar[i]);
      if (i + 2 <= n) {
        dp[i + 2] = max(dp[i], dp[i + 1]) + ar[(i % 2 == 0 ? i + 1 : i)];
      }
      dp[i + 1] = max({dp[i], dp[i + 1], dp[i + 2], dp[i + 1]}) + (i & 1 ? 0 : ar[i]);
    }
    cout << max({dp[n], dp[n - 1], dp[n - 2]}) << '\n';
  }

  return 0;
}