#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;

typedef long long ll;

const int maxn = 100005;
ll arr1[maxn], arr2[maxn];
ll dp[maxn][3];
int n;

ll dpF() {
  for (int i = n - 1; i >= 0; i--) {
    ll op1 = 0LL, op2 = 0LL, op3 = 0LL;
    if (i != n - 1)
      op1 = arr1[i] + dp[i + 1][1];
    if (i != n - 1)
      op2 = arr2[i] + dp[i + 1][2];
    op3 = dp[i + 1][0];
    dp[i][0] = max({op1, op2, op3});
  }
  return dp[0][0];
}

void solve() {
  memset(dp, -1, sizeof(dp));
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> arr1[i];
  }
  for (int i = 0; i < n; i++) {
    cin >> arr2[i];
  }
  cout << dpF() << "\n";
}

int main() {
  int t;
  t = 1;
  for (int i = 0; i < t; i++) {
    solve();
  }
  return 0;
}