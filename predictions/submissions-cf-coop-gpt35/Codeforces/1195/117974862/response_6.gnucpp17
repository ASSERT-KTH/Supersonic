#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

const int maxn = 100005;

int n;
vector<int> arr1(maxn), arr2(maxn);
vector<vector<long long>> dp(maxn, vector<long long>(3));

long long dpF() {
    for (int i = n - 1; i >= 0; i--) {
        dp[i][0] = max({arr1[i] + dp[i + 1][1], arr2[i] + dp[i + 1][2], dp[i + 1][0]});
        dp[i][1] = max(arr2[i] + dp[i + 1][2], dp[i + 1][0]);
        dp[i][2] = max(arr1[i] + dp[i + 1][1], dp[i + 1][0]);
    }
    return dp[0][0];
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int t;
    t = 1;
    while (t--) {
        cin >> n;
        for (int i = 0; i < n; i++) {
            cin >> arr1[i];
        }
        for (int i = 0; i < n; i++) {
            cin >> arr2[i];
        }
        cout << dpF() << "\n";
    }

    return 0;
}