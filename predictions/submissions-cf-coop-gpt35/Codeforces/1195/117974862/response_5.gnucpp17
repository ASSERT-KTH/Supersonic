#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;

const int maxn = 100005;
int arr1[maxn], arr2[maxn];
int dp[maxn][3];
int n;

int dpF() {
    memset(dp, 0, sizeof(dp));
    dp[0][0] = 0;
    
    for (int i = 1; i <= n; i++) {
        dp[i][0] = max({dp[i-1][0], dp[i-1][1], dp[i-1][2]});
        dp[i][1] = max(dp[i-1][0] + arr1[i-1], dp[i-1][2] + arr1[i-1]);
        dp[i][2] = max(dp[i-1][0] + arr2[i-1], dp[i-1][1] + arr2[i-1]);
    }
    
    return max({dp[n][0], dp[n][1], dp[n][2]});
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int t;
    t = 1;
    for (int i = 0; i < t; i++) {
        cin >> n;
        for (int j = 0; j < n; j++) {
            cin >> arr1[j];
        }
        for (int j = 0; j < n; j++) {
            cin >> arr2[j];
        }
        cout << dpF() << "\n";
    }
    
    return 0;
}