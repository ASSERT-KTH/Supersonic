#include <iostream>
#include <vector>
#include <map>
#include <set>
#define fi first
#define se second
using namespace std;
const int MAXN = 200005;
struct node {
  int cnt, par, lev, inp;
  int chn, idx, col, adj;
};
int n, q;
vector<int> g[MAXN];
node a[MAXN];
int bit[2 * MAXN];
int chains = 0, timer = 0, colour = 0;
vector<int> chain[MAXN];
int col[MAXN][MAXN];
set<int> pos[MAXN][MAXN];
int root[MAXN];
void Init() {
  ios ::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cin >> n >> q;
  for (int i = 1; i < n; ++i) {
    int u, v;
    cin >> u >> v;
    g[u].push_back(v);
    g[v].push_back(u);
  }
  a[n].par = -1;
  a[n].lev = 1;
  a[n].chn = 0;
  a[n].idx = 0;
  root[0] = n;
  colour = n;
}
int query(int x) {
  int res = 0;
  for (int i = x; i >= 1; i -= i & (-i)) {
    res += bit[i];
  }
  return res;
}
void update(int x, int d) {
  for (int i = x; i < 2 * MAXN; i += i & (-i)) {
    bit[i] += d;
  }
}
void DFS(int u) {
  a[u].inp = ++timer;
  a[u].cnt = 1;
  for (int v : g[u]) {
    if (a[v].par == 0) {
      a[v].par = u;
      a[v].lev = a[u].lev + 1;
      DFS(v);
      a[u].cnt += a[v].cnt;
    }
  }
}
void HLD(int u) {
  chain[a[u].chn].push_back(u);
  col[a[u].chn][a[u].idx] = a[u].col;
  pos[a[u].chn][a[u].col].insert(a[u].idx);
  int heavy = 0, which = 0;
  for (int v : g[u]) {
    if (v != a[u].par and a[v].cnt > heavy) {
      heavy = a[v].cnt;
      which = v;
    }
  }
  if (heavy == 0 or which == 0)
    return;
  a[which].chn = a[u].chn;
  a[which].idx = a[u].idx + 1;
  for (int v : g[u]) {
    if (v == a[u].par)
      continue;
    if (v != which) {
      a[v].chn = ++chains;
      a[v].idx = 0;
    }
    HLD(v);
  }
}
void Simulate() {
  vector<int> indegree(n + 1, 0);
  for (int i = 1; i <= n; ++i) {
    a[i].adj = g[i].size();
    if (a[i].adj == 1)
      indegree[g[i][0]]++;
  }
  int row = 0;
  for (int i = 1; i <= n; ++i) {
    if (indegree[i] == 0) {
      a[i].col = ++row;
      int v = i;
      while (a[v].adj == 1) {
        a[g[v][0]].col = row;
        v = g[v][0];
      }
    }
  }
  for (int i = 1; i <= row; ++i) {
    update(i, 1);
  }
}
inline bool is_predecessor(int u, int v) {
  return (a[u].inp <= a[v].inp and a[v].inp < a[u].inp + a[u].cnt);
}
int LCA(int u, int v) {
  bool u_predecessor = is_predecessor(u, v);
  bool v_predecessor = is_predecessor(v, u);
  if (u_predecessor)
    return u;
  if (v_predecessor)
    return v;
  int t = a[u].chn;
  while (!is_predecessor(chain[t][0], v)) {
    t = a[a[chain[t][0]].par].chn;
  }
  int l = 0, r = chain[t].size() - 1, res = 0;
  while (l <= r) {
    int mid = (l + r) / 2;
    if (is_predecessor(chain[t][mid], u) and is_predecessor(chain[t][mid], v)) {
      res = mid;
      l = mid + 1;
    } else
      r = mid - 1;
  }
  return chain[t][res];
}
inline int get_colour(int u) {
  int c = a[u].chn, i = a[u].idx;
  return col[c][i];
}
void up(int u, int t) {
  while (true) {
    int c = a[u].chn;
    int i = a[u].idx;
    map<int, int>::iterator iter = col[c].lower_bound(i), jter = col[c].begin();
    if (c == a[t].chn and a[t].idx != 0) {
      jter = col[c].lower_bound(a[t].idx);