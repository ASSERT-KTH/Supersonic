#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
#include <cmath>
using namespace std;

typedef long long int ll;
typedef pair<ll, ll> pairs;

vector<vector<ll>> v;
vector<vector<ll>> lca;
vector<ll> sub;
vector<ll> cpar;
vector<ll> lv;
vector<ll> ans;

void dfs(ll root) {
    vector<ll> stack;
    stack.push_back(root);

    while (!stack.empty()) {
        ll node = stack.back();
        stack.pop_back();

        for (ll a : v[node]) {
            if (a != lca[node][0]) {
                stack.push_back(a);
                lca[a][0] = node;
                lv[a] = lv[node] + 1;
            }
        }
    }
}

void genlca(ll n) {
    lca.assign(n + 1, vector<ll>(21, -1));
    lv.assign(n + 1, 0);

    dfs(1);

    for (ll i = 1; i <= 20; i++) {
        for (ll j = 1; j <= n; j++) {
            if (lca[j][i - 1] != -1) {
                lca[j][i] = lca[lca[j][i - 1]][i - 1];
            }
        }
    }
}

ll getlca(ll a, ll b) {
    if (lv[a] > lv[b]) {
        swap(a, b);
    }
    ll d = lv[b] - lv[a];

    while (d > 0) {
        ll x = log2(d);
        b = lca[b][x];
        d -= (1 << x);
    }

    if (a == b) {
        return a;
    }

    for (ll i = 20; i >= 0; i--) {
        if (lca[a][i] != lca[b][i]) {
            a = lca[a][i];
            b = lca[b][i];
        }
    }

    return lca[a][0];
}

ll dist(ll a, ll b) {
    return lv[a] + lv[b] - 2 * lv[getlca(a, b)];
}

void decom(ll root, ll n) {
    ll nc = 0;
    vector<ll> stack;
    stack.push_back(root);

    while (!stack.empty()) {
        ll node = stack.back();
        stack.pop_back();
        nc++;

        for (ll a : v[node]) {
            if (a != lca[node][0]) {
                stack.push_back(a);
            }
        }
    }

    ll c = root;
    ll par = -1;

    while (true) {
        bool found = false;

        for (ll a : v[c]) {
            if (a != lca[c][0] && sub[a] > nc / 2) {
                found = true;
                par = c;
                c = a;
                break;
            }
        }

        if (!found) {
            break;
        }
    }

    for (ll a : v[c]) {
        v[a].erase(remove(v[a].begin(), v[a].end(), c), v[a].end());
        ll x = decom(a, n);
        cpar[x] = c;
    }
}

void update(ll par, ll node) {
    if (par == -1) {
        return;
    }

    ans[par] = min(ans[par], dist(node, par));
    update(cpar[par], node);
}

ll getans(ll par, ll node) {
    if (par == -1) {
        return INT_MAX;
    }

    return min(getans(cpar[par], node), ans[par] + dist(node, par));
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    ll n, m;
    cin >> n >> m;

    v.assign(n + 1, vector<ll>());
    ans.assign(n + 1, INT_MAX);
    lca.assign(n + 1, vector<ll>(21, -1));
    sub.assign(n + 1, 0);
    cpar.assign(n + 1, 0);

    for (ll i = 1; i < n; i++) {
        ll a, b;
        cin >> a >> b;
        v[a].push_back(b);
        v[b].push_back(a);
    }

    genlca(n);

    decom(1, n);

    cpar[1] = -1;
    ans[1] = 0;
    update(cpar[1], 1);

    while (m--) {
        ll a, b;
        cin >> a >> b;

        if (a == 1) {
            ans[b] = 0;
            update(cpar[b], b);
        } else {
            cout << getans(b, b) << "\n";
        }
    }

    return 0;
}