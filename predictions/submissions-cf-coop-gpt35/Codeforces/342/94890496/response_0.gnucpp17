#include <iostream>
#include <vector>
#include <cmath>
#include <limits>

#define ll long long int

using namespace std;

const int MAX_N = 100001;
const int MAX_LOG = 21;

vector<int> v[MAX_N], ct[MAX_N];
int sub[MAX_N], nc, cr, lca[MAX_N][MAX_LOG], cpar[MAX_N], lv[MAX_N];
ll ans[MAX_N];

void dfs(int node, int par, int lvl) {
  lv[node] = lvl;
  lca[node][0] = par;
  for (int i = 1; i < MAX_LOG; i++) {
    if (lca[node][i - 1] != -1) {
      lca[node][i] = lca[lca[node][i - 1]][i - 1];
    }
  }
  for (auto a : v[node]) {
    if (a != par) {
      dfs(a, node, lvl + 1);
    }
  }
}

void genlca() {
  memset(lca, -1, sizeof(lca));
  dfs(1, -1, 0);
}

int getlca(int a, int b) {
  if (lv[a] > lv[b]) {
    swap(a, b);
  }
  int d = lv[b] - lv[a];
  for (int i = MAX_LOG - 1; i >= 0; i--) {
    if ((1 << i) <= d) {
      b = lca[b][i];
      d -= (1 << i);
    }
  }
  if (a == b) {
    return a;
  }
  for (int i = MAX_LOG - 1; i >= 0; i--) {
    if (lca[a][i] != lca[b][i]) {
      a = lca[a][i];
      b = lca[b][i];
    }
  }
  return lca[a][0];
}

int dist(int a, int b) {
  return lv[a] + lv[b] - 2 * lv[getlca(a, b)];
}

void dfs(int node, int par) {
  nc++;
  sub[node] = 1;
  for (auto a : v[node]) {
    if (a != par) {
      dfs(a, node);
      sub[node] += sub[a];
    }
  }
}

int getcent(int node, int par) {
  for (auto a : v[node]) {
    if (a != par && sub[a] > nc / 2) {
      return getcent(a, node);
    }
  }
  return node;
}

int decom(int root) {
  nc = 0;
  dfs(root, -1);
  int c = getcent(root, -1);
  for (auto a : v[c]) {
    v[a].erase(find(v[a].begin(), v[a].end(), c));
    int x = decom(a);
    ct[c].push_back(x);
    ct[x].push_back(c);
    cpar[x] = c;
  }
  return c;
}

void update(int par, int node) {
  if (par == -1) {
    return;
  }
  ans[par] = min(ans[par], (ll)dist(node, par));
  update(cpar[par], node);
}

ll getans(int par, int node) {
  if (par == -1) {
    return numeric_limits<ll>::max();
  }
  return min(getans(cpar[par], node), ans[par] + dist(node, par));
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);

  int n, m;
  cin >> n >> m;

  for (int i = 1; i < n; i++) {
    int a, b;
    cin >> a >> b;
    v[a].push_back(b);
    v[b].push_back(a);
  }

  for (int i = 0; i <= n; i++) {
    ans[i] = numeric_limits<ll>::max();
  }

  genlca();
  cr = decom(1);
  cpar[cr] = -1;
  ans[1] = 0;
  update(cpar[1], 1);

  while (m--) {
    int a, b;
    cin >> a >> b;
    if (a == 1) {
      ans[b] = 0;
      update(cpar[b], b);
    } else {
      cout << getans(b, b) << "\n";
    }
  }

  return 0;
}