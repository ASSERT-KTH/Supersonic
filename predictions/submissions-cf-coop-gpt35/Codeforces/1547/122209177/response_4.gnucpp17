#include <iostream>
#include <vector>
#include <algorithm>

const int mod = 1e9 + 7;
const int INF = 1e18;
const int N = 4e5 + 5;

int* seg_tree = new int[4 * N + 5]();
int* a = new int[N]();

void build_tree(int tree_index, int strt_i, int end_i) {
  while (strt_i != end_i) {
    int mid = (strt_i + end_i) >> 1;
    build_tree(tree_index * 2, strt_i, mid);
    build_tree(tree_index * 2 + 1, mid + 1, end_i);
    seg_tree[tree_index] = std::__gcd(seg_tree[tree_index * 2], seg_tree[tree_index * 2 + 1]);
    return;
  }
}

int query(int tree_index, int strt_i, int end_i, int q_strt, int q_end) {
  while (true) {
    if (strt_i > q_end || end_i < q_strt)
      return 0;
    if (q_strt <= strt_i && q_end >= end_i)
      return seg_tree[tree_index];
    int mid = (strt_i + end_i) >> 1;
    int l = query(2 * tree_index, strt_i, mid, q_strt, q_end);
    if (l == 0) break;
    int r = query(2 * tree_index + 1, mid + 1, end_i, q_strt, q_end);
    if (r == 0) break;
    return std::__gcd(l, r);
  }
}

void solve() {
  int n;
  std::cin >> n;
  for (int i = 1; i <= n; i++) std::cin >> a[i], a[i + n] = a[i];
  build_tree(1, 1, 2 * n);
  int ans = 0, g = 0;
  for (int i = 1; i <= n; i++) g = std::__gcd(g, a[i]);
  for (int i = 1; i <= n; i++) {
    int r = 2 * n, l = i + 1, temp = INF, cnt = 0;
    if (a[i] == g)
      continue;
    while (l <= r) {
      int mid = (l + r) >> 1;
      int x = query(1, 1, 2 * n, l, mid);
      int y = std::__gcd(x, a[i]);
      if (y == g)
        temp = std::min(temp, mid - l + 1 + cnt), r = mid - 1;
      else
        a[i] = std::__gcd(a[i], x), cnt += mid - l + 1, l = mid + 1;
    }
    ans = std::max(ans, temp);
  }
  std::cout << ans << std::endl;
  return;
}

int main() {
  std::ios::sync_with_stdio(0);
  std::cin.tie(0);
  const int t = 1;
  for (int i = 1; i <= t; i++) {
    solve();
  }
  delete[] seg_tree;
  delete[] a;
  return 0;
}