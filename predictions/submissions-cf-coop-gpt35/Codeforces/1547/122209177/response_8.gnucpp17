#include <iostream>
#include <vector>
#include <algorithm>

typedef long long int ll;

void build_tree(std::vector<ll>& seg_tree, const std::vector<ll>& a, int tree_index, int strt_i, int end_i) {
  if (strt_i == end_i) {
    seg_tree[tree_index] = a[strt_i];
    return;
  }
  int mid = (strt_i + end_i) / 2;
  build_tree(seg_tree, a, tree_index * 2, strt_i, mid);
  build_tree(seg_tree, a, tree_index * 2 + 1, mid + 1, end_i);
  seg_tree[tree_index] = std::gcd(seg_tree[tree_index * 2], seg_tree[tree_index * 2 + 1]);
}

ll query(const std::vector<ll>& seg_tree, int tree_index, int strt_i, int end_i, int q_strt, int q_end) {
  if (strt_i > q_end || end_i < q_strt)
    return 0;
  if (q_strt <= strt_i && q_end >= end_i)
    return seg_tree[tree_index];
  int mid = (strt_i + end_i) / 2;
  ll l = query(seg_tree, 2 * tree_index, strt_i, mid, q_strt, q_end);
  ll r = query(seg_tree, 2 * tree_index + 1, mid + 1, end_i, q_strt, q_end);
  return std::gcd(l, r);
}

void solve() {
  int n;
  std::cin >> n;
  std::vector<ll> a(2 * n + 1);
  for (int i = 1; i <= n; i++) {
    std::cin >> a[i];
    a[i + n] = a[i];
  }
  std::vector<ll> seg_tree(4 * n + 5);
  build_tree(seg_tree, a, 1, 1, 2 * n);
  ll ans = 0, g = seg_tree[1];
  for (int i = 1; i <= n; i++) {
    if (a[i] == g)
      continue;
    int r = 2 * n, l = i + 1, temp = std::numeric_limits<ll>::max(), cnt = 0;
    while (l <= r) {
      int mid = (l + r) / 2;
      ll x = query(seg_tree, 1, 1, 2 * n, l, mid);
      ll y = std::gcd(x, a[i]);
      if (y == g)
        temp = std::min(temp, mid - l + 1 + cnt), r = mid - 1;
      else
        a[i] = std::gcd(a[i], x), cnt += mid - l + 1, l = mid + 1;
    }
    ans = std::max(ans, static_cast<ll>(temp));
  }
  std::cout << ans << std::endl;
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  int t;
  std::cin >> t;
  while (t--) {
    solve();
  }
  return 0;
}