#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

struct digraph {
    int n;
    vector<vector<int>> adj, adj2;
    digraph(int _n, vector<array<int, 2>>& e) {
        n = _n;
        adj = vector<vector<int>>(n);
        adj2 = vector<vector<int>>(n);
        for(auto& a : e) {
            adj[a[0]].push_back(a[1]);
            adj2[a[1]].push_back(a[0]);
        }
    }
    vector<int> toposort() {
        vector<int> d(n);
        priority_queue<int, vector<int>, greater<int>> qu;
        for(int i = 0; i < n; i++) {
            d[i] = adj2[i].size();
            if(d[i] == 0)
                qu.push(i);
        }
        vector<int> ans;
        while(!qu.empty()) {
            int u = qu.top();
            qu.pop();
            for(auto v : adj[u]) {
                --d[v];
                if(d[v] == 0)
                    qu.push(v);
            }
            ans.push_back(u);
        }
        if(ans.size() < n)
            ans.clear();
        return ans;
    }
};

void solve() {
    int n;
    cin >> n;
    vector<int> a(n), b(n);
    for(int i = 0; i < n; i++)
        cin >> a[i];
    for(int i = 0; i < n; i++)
        cin >> b[i];
    vector<array<int, 2>> e;
    for(int i = 0; i < n; i++)
        if(b[i] != -1)
            e.push_back({i, b[i] - 1});
    digraph g(n, e);
    int ans = 0;
    vector<int> t = g.toposort(), ans1, d;
    for(auto it = t.rbegin(); it != t.rend(); ++it) {
        int x = *it;
        if(a[x] > 0) {
            ans1.push_back(x);
            ans += a[x];
            if(b[x] >= 0) {
                int y = b[x] - 1;
                a[y] += a[x];
            }
        } else {
            d.push_back(x);
        }
    }
    for(auto x : d)
        ans += a[x], ans1.push_back(x);
    cout << ans << endl;
    for(auto& x : ans1)
        x += 1;
    for(int i = 0; i < n; i++) {
        cout << ans1[i];
        if(i < n - 1)
            cout << " ";
    }
    cout << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int T = 1;
    for(int _ = 0; _ < T; _++) {
        solve();
    }
    return 0;
}