#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

void solve() {
    int n;
    cin >> n;
    vector<int> a(n), b(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    for (int i = 0; i < n; i++) {
        cin >> b[i];
    }
    vector<vector<int>> adj(n);
    for (int i = 0; i < n; i++) {
        if (b[i] != -1) {
            adj[i].push_back(b[i] - 1);
        }
    }
    vector<int> inDegree(n, 0);
    for (int i = 0; i < n; i++) {
        for (int j : adj[i]) {
            inDegree[j]++;
        }
    }
    queue<int> q;
    for (int i = 0; i < n; i++) {
        if (inDegree[i] == 0) {
            q.push(i);
        }
    }
    vector<int> ans;
    int total = 0;
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        ans.push_back(u);
        total += a[u];
        if (b[u] != -1) {
            a[b[u] - 1] += a[u];
        }
        for (int v : adj[u]) {
            inDegree[v]--;
            if (inDegree[v] == 0) {
                q.push(v);
            }
        }
    }
    if (ans.size() < n) {
        ans.clear();
    }
    cout << total << endl;
    for (int i = 0; i < ans.size(); i++) {
        cout << ans[i] + 1 << " ";
    }
    cout << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int T = 1;
    for (int t = 0; t < T; t++) {
        solve();
    }
    return 0;
}