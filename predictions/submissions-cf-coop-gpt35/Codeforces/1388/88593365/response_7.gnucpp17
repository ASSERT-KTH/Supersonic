#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

struct digraph {
  int n;
  vector<vector<int>> adj;
  digraph(int _n, vector<pair<int, int>>& e) {
    n = _n;
    adj = vector<vector<int>>(n);
    for (auto& a : e) {
      adj[a.first].push_back(a.second);
    }
  }
  vector<int> toposort() {
    vector<int> d(n);
    queue<int> qu;
    for (int i = 0; i < n; i++) {
      d[i] = adj[i].size();
      if (d[i] == 0)
        qu.push(i);
    }
    vector<int> ans;
    while (!qu.empty()) {
      int u = qu.front();
      qu.pop();
      for (int v : adj[u]) {
        --d[v];
        if (d[v] == 0)
          qu.push(v);
      }
      ans.push_back(u);
    }
    if (ans.size() < n)
      ans.clear();
    return ans;
  }
};

void readInput(int& n, vector<int>& a, vector<int>& b) {
  cin >> n;
  a.resize(n);
  b.resize(n);
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  for (int i = 0; i < n; i++) {
    cin >> b[i];
  }
}

void solveProblem(int n, vector<int>& a, vector<int>& b) {
  vector<pair<int, int>> e;
  for (int i = 0; i < n; i++) {
    if (b[i] >= 0)
      e.push_back({i, b[i] - 1});
  }
  digraph g(n, e);
  int ans = 0;
  vector<int> t = g.toposort(), ans1, d;
  for (int x : t) {
    if (a[x] > 0) {
      ans1.push_back(x);
      ans += a[x];
      if (b[x] >= 0)
        a[b[x] - 1] += a[x];
    } else
      d.push_back(x);
  }
  reverse(d.begin(), d.end());
  for (int x : d)
    ans += a[x], ans1.push_back(x);
  cout << ans << endl;
  for (int& x : ans1)
    x++;
  for (int x : ans1)
    cout << x << " ";
  cout << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int T = 1;
  for (int _ = 0; _ < T; _++) {
    int n;