#include <bits/stdc++.h>
using namespace std;

int main() {
  int n;
  scanf("%d", &n);

  // Step 1: Resize vectors
  vector<long long> v(n);
  vector<long long> cnt(n), vis(n, 0);

  // Step 2: Calculate sum of all subarrays
  long long ans = 0, sum = 0;
  for (int i = 0; i < n; i++) {
    scanf("%lld", &v[i]);
    sum += v[i];
    ans += sum;
  }

  // Step 3: Replace map with unordered_map
  unordered_map<long long, long long> mp;
  mp[0] = 0;
  vis[0] = 1;
  long long mx = 0;

  // Step 4: Optimize loop using loop unrolling
  for (int i = 1; i < n; i += 2) {
    cnt[i] = cnt[i - 1] + v[i];
    cnt[i + 1] = cnt[i] + v[i + 1];

    if (vis[cnt[i]]) {
      long long l = max(0LL, mp[cnt[i]] - mx);
      long long r = n - i;
      if (mp[cnt[i]] - mx >= 0) {
        ans -= (l * r) + l + r;
        if (i - mp[cnt[i]] != n || !mx)
          ans--;
      }
      mx = max(mp[cnt[i]] + 1, mx);
    }

    mp[cnt[i]] = i;
    mp[cnt[i + 1]] = i + 1;
    vis[cnt[i]] = 1;
    vis[cnt[i + 1]] = 1;
  }

  // Step 5: Enable compiler optimizations

  printf("%lld\n", ans);
}