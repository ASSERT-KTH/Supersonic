#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);

  int n;
  std::cin >> n;

  long long ans = n * 1LL * (n + 1) / 2LL;

  long long curSum = 0;
  std::vector<long long> v(n + 1);
  std::vector<bool> visited(n + 1, false);

  for (int i = 1; i <= n; i++) {
    std::cin >> v[i];
  }

  long long mx = 0;

  for (int i = 1; i <= n; i++) {
    curSum += v[i];

    if (visited[curSum]) {
      long long l = std::max(0LL, i - mx);
      long long r = n - i;
      if (i - mx >= 0) {
        ans -= (l * r) + l + r;
        if (i - mx != n || !mx) {
          ans--;
        }
      }
      mx = std::max(i + 1, mx);
    }

    visited[curSum] = true;
  }

  std::cout << ans << "\n";

  return 0;
}