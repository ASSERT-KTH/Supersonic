#include <iostream>
#include <string>
using namespace std;

int kmp(const string& s) {
    int lps[s.size()] = {0};
    int n = s.size();
    int previous_index = 0;
    
    for (int i = 1; i < n;) {
        if (s[i] == s[previous_index]) {
            lps[i] = previous_index + 1;
            previous_index++;
            i++;
        } else {
            if (previous_index != 0) {
                previous_index = lps[previous_index - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
    
    return lps[n - 1];
}

int remainingStringLongestPallindrome(const string& s) {
    return kmp(s);
}

string longestPrefixSuffixPallindrome(const string& s) {
    int n = s.size();
    int length = kmp(s);
    int prefix_length = length;
    int remaining_length = n - (2 * length);
    int suffix_length = length;
    
    string ans = s.substr(0, prefix_length);
    string remaining = s.substr(prefix_length, remaining_length);
    int remaining_palindrome_length = remainingStringLongestPallindrome(remaining);
    ans += remaining.substr(0, remaining_palindrome_length);
    ans += s.substr(n - suffix_length, suffix_length);
    
    return ans;
}

int main() {
    int t;
    cin >> t;
    
    while (t--) {
        string str;
        cin >> str;
        
        string ans = longestPrefixSuffixPallindrome(str);
        cout << ans << endl;
    }
    
    return 0;
}