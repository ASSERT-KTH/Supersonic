#include <iostream>
#include <string>
#include <vector>
using namespace std;

int kmp(const string& s) {
  vector<int> lps(s.size(), 0);
  for (int i = 1; i < s.size(); i++) {
    int previous_index = lps[i - 1];
    while (previous_index > 0 && s[i] != s[previous_index]) {
      previous_index = lps[previous_index - 1];
    }
    lps[i] = previous_index + (s[i] == s[previous_index] ? 1 : 0);
  }
  return lps[lps.size() - 1];
}

string longestPrefixSuffixPalindrome(const string& str) {
  int length = 0;
  int n = str.size();
  for (int i = 0, j = n - 1; i < j; i++, j--) {
    if (str[i] != str[j]) {
      break;
    }
    length++;
  }
  
  string remaining = str.substr(length, (n - (2 * length)));
  if (!remaining.empty()) {
    int longest_prefix = kmp(remaining);
    string reversed_remaining(remaining.rbegin(), remaining.rend());
    int longest_suffix = kmp(reversed_remaining);
    if (longest_prefix > longest_suffix) {
      return str.substr(0, length) + remaining.substr(0, longest_prefix) + str.substr(n - length, length);
    } else {
      return str.substr(0, length) + reversed_remaining.substr(0, longest_suffix) + str.substr(n - length, length);
    }
  }
  
  return str.substr(0, length) + str.substr(n - length, length);
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    string str;
    cin >> str;
    string ans = longestPrefixSuffixPalindrome(str);
    cout << ans << endl;
  }
  return 0;
}