#include <iostream>
#include <string>
#include <algorithm>

int kmp(const std::string& s) {
  int n = s.size();
  int lps[n] = {0};
  for (int i = 1; i < n; i++) {
    int previous_index = lps[i - 1];
    char current_char = s[i];
    if (s[i] == s[previous_index]) {
      lps[i] = previous_index + 1;
    } else {
      while (previous_index > 0 && s[i] != s[previous_index]) {
        previous_index = lps[previous_index - 1];
      }
      lps[i] = previous_index;
    }
  }
  return lps[n - 1];
}

int remainingStringLongestPallindrome(const std::string& s) {
  int length = 0;
  int n = s.size();
  for (int i = 0, j = n - 1; i < j; i++, j--) {
    if (s[i] != s[j]) {
      break;
    }
    length++;
  }
  return length;
}

std::string longestPrefixSuffixPallindrome(const std::string& s) {
  int length = 0;
  int n = s.size();
  for (int i = 0, j = n - 1; i < j; i++, j--) {
    if (s[i] != s[j]) {
      break;
    }
    length++;
  }
  int start = length;
  int end = n - length - 1;
  std::string ans = s.substr(0, length);
  if (start > 0) {
    ans += s.substr(0, start);
  }
  if (end < n - 1) {
    ans += s.substr(end + 1);
  }
  ans += s.substr(n - length, length);
  return ans;
}

int main() {
  int t;
  std::cin >> t;
  while (t--) {
    std::string str;
    std::cin >> str;
    std::string ans = longestPrefixSuffixPallindrome(str);
    std::cout << ans << std::endl;
  }
}