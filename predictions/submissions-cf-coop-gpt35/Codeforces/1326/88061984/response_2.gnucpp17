#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int kmp(const string& s) {
    int n = s.size();
    int lps = 0;
  
    for (int i = 1; i < n; i++) {
        int previous_index = lps;
        while (previous_index > 0 && s[i] != s[previous_index]) {
            previous_index = lps[previous_index - 1];
        }
        lps = previous_index + (s[i] == s[previous_index] ? 1 : 0);
    }
  
    return lps;
}

string longestPrefixSuffixPalindrome(const string& s) {
    int length = 0;
    int n = s.size();
  
    for (int i = 0, j = n - 1; i < j; i++, j--) {
        if (s[i] != s[j]) {
            break;
        }
        length++;
    }
  
    string ans = s.substr(0, length);
    string remaining = s.substr(length, n - 2 * length);
  
    if (!remaining.empty()) {
        int longest_prefix_suffix = kmp(remaining);
        ans += remaining.substr(0, longest_prefix_suffix);
    }
  
    ans += s.substr(n - length, length);
  
    return ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int t;
    cin >> t;
  
    while (t--) {
        string str;
        cin >> str;
        string ans = longestPrefixSuffixPalindrome(str);
        cout << ans << endl;
    }

    return 0;
}