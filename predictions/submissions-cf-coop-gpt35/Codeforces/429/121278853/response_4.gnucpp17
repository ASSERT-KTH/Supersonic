#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>

typedef long long int ll;

void dfs(std::vector<std::vector<ll>>& g, std::vector<bool>& init, std::vector<bool>& goal, std::vector<ll>& res) {
  std::stack<ll> st;
  st.push(1);

  while (!st.empty()) {
    ll node = st.top();
    st.pop();

    if (init[node] != goal[node]) {
      init[node] ^= 1;
      res.push_back(node);
    }

    for (auto v : g[node]) {
      if (!init[v]) {
        st.push(v);
      }
    }
  }
}

void solve() {
  ll n;
  std::cin >> n;

  std::vector<std::vector<ll>> g(n + 1);
  for (ll i = 0; i < n - 1; i++) {
    ll a, b;
    std::cin >> a >> b;
    g[a].push_back(b);
    g[b].push_back(a);
  }

  std::vector<bool> init(n + 1);
  for (ll i = 1; i <= n; i++) {
    std::cin >> init[i];
  }

  std::vector<bool> goal(n + 1);
  for (ll i = 1; i <= n; i++) {
    std::cin >> goal[i];
  }

  std::vector<ll> res;
  dfs(g, init, goal, res);

  std::cout << res.size() << std::endl;
  for (auto v : res) {
    std::cout << v << std::endl;
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);

  solve();

  return 0;
}