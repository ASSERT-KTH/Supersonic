#include <iostream>
#include <vector>
using namespace std;

typedef long long int ll;

const int MAX = 200007;
const int MOD = int(1e9 + 7);

ll n, init[MAX], goal[MAX], ans;
vector<ll> g[MAX], res;

void dfs(ll node, ll par, vector<ll>& path, vector<ll>& prev) {
  if (prev[prev[node]]) {
    init[node] ^= 1;
  }
  if (init[node] != goal[node]) {
    ans++;
    res.push_back(node);
    prev[node] ^= 1;
  }
  for (ll v : g[node]) {
    if (v == par)
      continue;
    path.push_back(v);
    prev[v] = prev[node];
    dfs(v, node, path, prev);
    path.pop_back();
  }
}

void solve() {
  cin >> n;
  for (ll i = 0; i < n - 1; i++) {
    ll a, b;
    cin >> a >> b;
    g[a].push_back(b);
    g[b].push_back(a);
  }
  for (ll i = 0; i < n; i++) {
    cin >> init[i + 1];
  }
  for (ll i = 0; i < n; i++) {
    cin >> goal[i + 1];
  }

  vector<ll> path, prev(n + 1, 0);
  dfs(1, 0, path, prev);

  cout << ans << '\n';
  for (ll v : res) {
    cout << v << '\n';
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

  solve();

  return 0;
}