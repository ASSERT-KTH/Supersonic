#include <iostream>
#include <vector>
using namespace std;

typedef long long int ll;
typedef vector<ll> vll;

ll ans = 0;

void dfs(ll node, ll par, ll pre, ll ppre, vll& init, vll& goal, vector<vector<ll>>& g, vll& res) {
    if (ppre) {
        init[node] ^= 1;
    }
    if (init[node] != goal[node]) {
        ans++;
        res.push_back(node);
        ppre ^= 1;
    }
    for (auto v : g[node]) {
        if (v == par)
            continue;
        dfs(v, node, ppre, pre, init, goal, g, res);
    }
}

vll solve() {
    ll graphSize;
    cin >> graphSize;

    vector<vector<ll>> g(graphSize + 1);
    for (ll i = 0; i < graphSize - 1; i++) {
        ll a, b;
        cin >> a >> b;
        g[a].push_back(b);
        g[b].push_back(a);
    }

    vll init(graphSize + 1), goal(graphSize + 1);
    for (ll i = 1; i <= graphSize; i++) {
        cin >> init[i];
    }
    for (ll i = 1; i <= graphSize; i++) {
        cin >> goal[i];
    }

    vll res;
    dfs(1, 0, 0, 0, init, goal, g, res);

    cout << ans << endl;
    for (auto v : res) {
        cout << v << endl;
    }

    return res;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    solve();

    return 0;
}