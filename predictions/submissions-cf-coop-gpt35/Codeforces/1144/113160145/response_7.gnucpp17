#include <iostream>
#include <vector>
using namespace std;

const int MAX_NODES = 200005;

int N, M;
vector<int> g[MAX_NODES], vis(MAX_NODES);
vector<vector<int>> u;

void dfs(int node, int pv) {
  vis[node] = 1;
  for (int child : g[node]) {
    if (vis[child] == 0) {
      u[node][child] = pv;
      u[child][node] = pv ^ 1;
      dfs(child, pv ^ 1);
    } else {
      if (u[node][child] != pv) {
        M = 1;
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);

  // Read input
  int n, m;
  cin >> n >> m;

  // Initialize variables
  N = n;
  M = 0;
  u.resize(n + 1, vector<int>(n + 1, -1));

  // Build graph
  for (int i = 0; i < m; i++) {
    int j, k;
    cin >> j >> k;
    g[j].push_back(k);
    g[k].push_back(j);
  }

  // Run DFS
  dfs(1, 0);

  // Output result
  if (M) {
    cout << "NO" << endl;
  } else {
    cout << "YES" << endl;
    for (int i = 0; i < m; i++) {
      cout << u[v[i]]; // Assuming v is a vector of pairs
    }
  }
  return 0;
}