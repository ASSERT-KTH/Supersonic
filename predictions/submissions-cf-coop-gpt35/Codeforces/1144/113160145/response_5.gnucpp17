#include <iostream>
#include <vector>
#include <map>
using namespace std;

typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vpii;

void dfs(int node, int pv, vector<vi>& g, vector<int>& vis, map<pii, int>& u) {
  vis[node] = 1;
  for (int child : g[node]) {
    if (vis[child] == 0) {
      u[{node, child}] = pv;
      u[{child, node}] = pv ^ 1;
      dfs(child, pv ^ 1, g, vis, u);
    } else {
      if (u.find({node, child}) != u.end()) {
        if (u[{node, child}] != pv) {
          return;
        }
      } else {
        u[{node, child}] = pv;
        u[{child, node}] = pv ^ 1;
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  
  int n, m;
  cin >> n >> m;
  
  vector<vi> g(n + 1);
  vector<int> vis(n + 1);
  map<pii, int> u;
  
  for (int i = 0; i < m; i++) {
    int j, k;
    cin >> j >> k;
    g[j].push_back(k);
    g[k].push_back(j);
  }
  
  dfs(1, 0, g, vis, u);
  
  bool M = false;
  for (auto& edge : u) {
    if (edge.second != 0) {
      M = true;
      break;
    }
  }
  
  if (M) {
    cout << "NO" << endl;
  } else {
    cout << "YES" << endl;
    for (auto& edge : u) {
      cout << edge.second;
    }
    cout << endl;
  }
  
  return 0;
}