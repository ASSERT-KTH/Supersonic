#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int N = 2e2 + 10;

void solve() {
    int n;
    cin >> n;

    vector<int> a(n+1), b(n+1);
    for (int i = 1; i <= n; i++) {
        cin >> a[i] >> b[i];
    }

    double total = accumulate(b.begin() + 1, b.begin() + n + 1, 0.0);
    vector<vector<double>> dp(N, vector<double>(N, -1e18));
    dp[0][0] = 0;

    for (int i = 1; i <= n; i++) {
        int cap = a[i];
        for (int c = 100 * 100 + 10; c >= a[i]; c--) {
            for (int k = n; k >= 1; k--) {
                dp[c][k] = max(dp[c - a[i]][k - 1] + (double)b[i], dp[c][k]);
            }
        }
    }

    for (int k = 1; k <= n; k++) {
        double ans = -1e18;
        for (int c = 1; c <= 100 * 100 + 10; c++) {
            ans = max(min(dp[c][k] + (total - dp[c][k]) / 2.0, (double)c), ans);
        }
        cout << fixed << setprecision(20) << ans << " ";
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    solve();
    return 0;
}