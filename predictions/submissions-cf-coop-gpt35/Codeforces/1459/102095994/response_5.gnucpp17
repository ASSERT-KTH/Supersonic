#include <iostream>
#include <vector>
#include <iomanip>
#include <algorithm>

#define N 210
#define inf 1e18 + 10

using namespace std;

double** create_dp_array(int rows, int cols, double init_value) {
    double** dp = new double*[rows];
    for (int i = 0; i < rows; ++i) {
        dp[i] = new double[cols];
        for (int j = 0; j < cols; ++j) {
            dp[i][j] = init_value;
        }
    }
    return dp;
}

void destroy_dp_array(double** dp, int rows) {
    for (int i = 0; i < rows; ++i) {
        delete[] dp[i];
    }
    delete[] dp;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int n;
    cin >> n;
    int* a = new int[n+1];
    int* b = new int[n+1];
    for (int i = 1; i <= n; i++) {
        cin >> a[i] >> b[i];
    }

    double total = 0;
    for (int i = 1; i <= n; i++) {
        total += b[i];
    }

    double** dp = create_dp_array(N * N, N, -inf);
    dp[0][0] = 0;

    double ans = -inf;
    int cap = 0;
    for (int i = 1; i <= n; i++) {
        cap += a[i];
        for (int c = 100 * 100 + 10; c >= 1; c--) {
            for (int k = n; k >= 1; k--) {
                if (c >= a[i]) {
                    dp[c][k] = max(dp[c - a[i]][k - 1] + (double)b[i], dp[c][k]);
                }
            }
        }
    }

    for (int k = 1; k <= n; k++) {
        ans = -inf;
        for (int c = 1; c <= 100 * 100 + 10; c++) {
            ans = max(min(dp[c][k] + (total - dp[c][k]) / (double)2.0, (double)c), ans);
        }
        cout << fixed << setprecision(20) << ans << " ";
    }

    destroy_dp_array(dp, N * N);
    delete[] a;
    delete[] b;

    return 0;
}