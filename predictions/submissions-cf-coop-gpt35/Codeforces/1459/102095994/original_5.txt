Code Analysis:
- The code includes several unnecessary header files, such as `<algorithm>`, `<bits/stdc++.h>`, `<bitset>`, `<cctype>`, `<climits>`, `<cmath>`, `<cstdio>`, `<cstring>`, `<iterator>`, `<map>`, `<numeric>`, `<queue>`, `<set>`, `<stack>`, and `<stdlib.h>`. These header files are not being used in the code and can be removed to improve compile time.
- The code defines several macros, such as `double long double`, `int long long int`, `ll int`, `ibs`, `cti`, `bp`, `pb`, `koto_memory(a)`, `res(v)`, `timer`, and `deb(x)`. These macros make the code less readable and can be replaced with explicit code.
- The code uses a vector of vectors (`vvi`) to represent a two-dimensional array. This can be replaced with a simple dynamic array (`double**`) to reduce memory usage and improve cache performance.
- The code uses the `accumulate` function from the `<numeric>` header to calculate the sum of elements in an array. This can be replaced with a simple loop to avoid the overhead of function calls.
- The code uses the `per` macro to iterate in reverse order. This macro can be removed and replaced with a regular `for` loop.
- The code uses a fixed size array (`a[N]` and `b[N]`) to store input values. This limits the maximum size of the input and wastes memory when the input size is smaller than `N`. It would be more efficient to use a dynamic array or a vector.
- The code uses a fixed size array (`pos[N]`) that is never used. This array can be removed to reduce memory usage.
- The code uses the `std::accumulate` function to calculate the sum of elements in the `b` array. However, the `double total` variable is not used anywhere in the code. This calculation can be removed.

Optimization Strategy:
1. Remove unnecessary header files and macros to improve compile time and code readability.
2. Replace the `vvi` data structure with a dynamic array (`double**`) to reduce memory usage.
3. Replace the `accumulate` function with a simple loop to calculate the sum of elements in the `b` array.
4. Replace the `per` macro with a regular `for` loop to iterate in reverse order.
5. Replace the fixed size arrays (`a[N]`, `b[N]`, and `pos[N]`) with dynamic arrays or vectors to improve memory usage.
6. Remove the unused `total` variable and the calculation of the sum of elements in the `b` array.

Step-by-Step Explanation:
1. Remove unnecessary header files and macros:
   - Remove the following lines from the code:
     ```
     #include <algorithm>
     #include <bits/stdc++.h>
     #include <bitset>
     #include <cctype>
     #include <climits>
     #include <cmath>
     #include <cstdio>
     #include <cstring>
     #include <iterator>
     #include <map>
     #include <numeric>
     #include <queue>
     #include <set>
     #include <stack>
     #include <stdlib.h>
     ```
   - Replace the following macros with explicit code:
     - Replace `ibs` with `ios_base::sync_with_stdio(false)`
     - Replace `cti` with `cin.tie(0)`
     - Replace `bp` with `__builtin_popcount`
     - Replace `pb` with `emplace_back`
     - Replace `koto_memory(a)` with `cout << (sizeof(a) / 1048576.0) << " MB";`
     - Replace `res(v)` with `sort(all(v)); v.erase(unique(all(v)), v.end());`
     - Replace `timer` with `cerr << "Time elapsed : " << 1.0 * clock() / CLOCKS_PER_SEC << " sec " << endl;`
     - Replace `deb(x)` with `cout << endl << "[" << #x << " = " << x << "]" << endl;`

2. Replace `vvi` with `double**`:
   - Replace the line `using vvi = std::vector<vi>;` with `using vvi = double**;`
   - Replace the line `vvi dp(N * N, vi(N, -inf));` with `vvi dp = new double*[N * N]; for(int i = 0; i < N * N; ++i) dp[i] = new double[N];`
   - Replace the line `auto &tmp = dp;` with `vvi& tmp = dp;`
   - Replace the line `tmp[c][k] = max(dp[c - a[i]][k - 1] + (double)b[i], dp[c][k]);` with `tmp[c][k] = max(dp[c - a[i]][k - 1] + (double)b[i], dp[c][k]);`

3. Replace `accumulate` with a loop:
   - Replace the line `double total = accumulate(b + 1, b + 1 + n, 0);` with `double total = 0; for (int i = 1; i <= n; i++) total += b[i];`

4. Replace `per` with a regular `for` loop:
   - Replace the line `per(c, 100 * 100 + 10, 1) per(k, n, 1) if (c >= a[i]) {` with `for (int c = 100 * 100 + 10; c >= 1; c--) for (int k = n; k >= 1; k--) if (c >= a[i]) {`

5. Replace fixed size arrays with dynamic arrays or vectors:
   - Replace the line `int n, a[N], b[N], pos[N];` with `int n; cin >> n; int* a = new int[n+1]; int* b = new int[n+1];`
   - Remove the line `int xx = 0;`
   - Remove the line `int t; cin >> t;`
   - Remove the line `int32_t main() {`
   - Remove the line `return 0;`

6. Remove unused variable and calculation:
   - Remove the line `double total = 0;`
   - Remove the line `auto &tmp = dp;`

Optimized Code Block:
```c++
#include <iostream>
#include <vector>
#include <iomanip>
#include <algorithm>

#define N 210
#define inf 1e18 + 10

using namespace std;

double** create_dp_array(int rows, int cols, double init_value) {
    double** dp = new double*[rows];
    for (int i = 0; i < rows; ++i) {
        dp[i] = new double[cols];
        for (int j = 0; j < cols; ++j) {
            dp[i][j] = init_value;
        }
    }
    return dp;
}

void destroy_dp_array(double** dp, int rows) {
    for (int i = 0; i < rows; ++i) {
        delete[] dp[i];
    }
    delete[] dp;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int n;
    cin >> n;
    int* a = new int[n+1];
    int* b = new int[n+1];
    for (int i = 1; i <= n; i++) {
        cin >> a[i] >> b[i];
    }

    double total = 0;
    for (int i = 1; i <= n; i++) {
        total += b[i];
    }

    double** dp = create_dp_array(N * N, N, -inf);
    dp[0][0] = 0;

    double ans = -inf;
    int cap = 0;
    for (int i = 1; i <= n; i++) {
        cap += a[i];
        for (int c = 100 * 100 + 10; c >= 1; c--) {
            for (int k = n; k >= 1; k--) {
                if (c >= a[i]) {
                    dp[c][k] = max(dp[c - a[i]][k - 1] + (double)b[i], dp[c][k]);
                }
            }
        }
    }

    for (int k = 1; k <= n; k++) {
        ans = -inf;
        for (int c = 1; c <= 100 * 100 + 10; c++) {
            ans = max(min(dp[c][k] + (total - dp[c][k]) / (double)2.0, (double)c), ans);
        }
        cout << fixed << setprecision(20) << ans << " ";
    }

    destroy_dp_array(dp, N * N);
    delete[] a;
    delete[] b;

    return 0;
}
```