#include <iostream>
#include <vector>
using namespace std;

const long long mxn = 32 * 3e5;

class Trie {
public:
  Trie() {
    tr = new long long[2 * mxn];
    cnt = new long long[2 * mxn];
    tot = 1;
  }

  ~Trie() {
    delete[] tr;
    delete[] cnt;
  }

  void insert(long long x) {
    long long p = 1;
    ++cnt[p];
    for (long long i = 30; i >= 0; --i) {
      long long b = (x >> i) & 1;
      if (!tr[p * 2 + b]) {
        tr[p * 2 + b] = ++tot;
      }
      p = tr[p * 2 + b];
      ++cnt[p];
    }
    ++cnt[p];
  }

  long long query(long long x) {
    long long p = 1;
    --cnt[p];
    long long res = 0;
    for (long long i = 30; i >= 0; --i) {
      long long b = (x >> i) & 1;
      if (cnt[tr[p * 2 + b]]) {
        p = tr[p * 2 + b];
      } else {
        p = tr[p * 2 + !b];
        res += (1 << i);
      }
      --cnt[p];
    }
    --cnt[p];
    return res;
  }

private:
  long long* tr;
  long long* cnt;
  long long tot;
};

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  long long n;
  cin >> n;

  vector<long long> a(n);
  for (long long i = 0; i < n; ++i) {
    cin >> a[i];
  }

  Trie trie;
  for (long long i = 0; i < n; ++i) {
    long long b;
    cin >> b;
    trie.insert(b);
  }

  for (long long i = 0; i < n; ++i) {
    cout << trie.query(a[i]) << ' ';
  }
  cout << '\n';

  return 0;
}