#include <iostream>
#include <vector>

const int MAX_N = 32 * 3e5;
const int MAX_BITS = 31;

struct TrieNode {
    int children[2];
    int count;
};

class Trie {
private:
    std::vector<TrieNode> nodes;
    int totalNodes;

public:
    Trie() {
        nodes.resize(1);
        totalNodes = 1;
    }

    void insert(int x) {
        int p = 0;
        nodes[p].count++;
        for (int i = MAX_BITS; i >= 0; --i) {
            int b = (x >> i) & 1;
            if (nodes[p].children[b] == 0) {
                nodes[p].children[b] = totalNodes;
                nodes.push_back(TrieNode());
                totalNodes++;
            }
            p = nodes[p].children[b];
            nodes[p].count++;
        }
        nodes[p].count++;
    }

    int query(int x) {
        int p = 0;
        nodes[p].count--;
        int res = 0;
        for (int i = MAX_BITS; i >= 0; --i) {
            int b = (x >> i) & 1;
            if (nodes[nodes[p].children[b]].count > 0) {
                p = nodes[p].children[b];
            } else {
                p = nodes[p].children[!b];
                res += (1 << i);
            }
            nodes[p].count--;
        }
        nodes[p].count--;
        return res;
    }
};

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);

    int n;
    std::cin >> n;
    std::vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        std::cin >> a[i];
    }

    Trie trie;
    for (int i = 0; i < n; ++i) {
        int b;
        std::cin >> b;
        trie.insert(b);
    }

    for (int i = 0; i < n; ++i) {
        std::cout << trie.query(a[i]) << ' ';
    }
    std::cout << '\n';

    return 0;
}