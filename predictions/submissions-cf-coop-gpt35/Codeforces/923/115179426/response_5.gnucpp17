#include <iostream>
#include <vector>
using namespace std;

void insert(vector<vector<int>>& trie, vector<bool>& visited, int x) {
  int p = 1;
  visited[p] = true;
  for (int i = 30; i >= 0; --i) {
    int b = (x >> i) & 1;
    if (!visited[trie[p][b]]) {
      trie[p][b] = trie.size();
      trie.emplace_back(2, 0);
      visited.push_back(false);
    }
    p = trie[p][b];
    visited[p] = true;
  }
}

int query(vector<vector<int>>& trie, vector<bool>& visited, int x) {
  int p = 1;
  visited[p] = false;
  int res = 0;
  for (int i = 30; i >= 0; --i) {
    int b = (x >> i) & 1;
    if (visited[trie[p][b]]) {
      p = trie[p][b];
    } else {
      p = trie[p][!b];
      res += (1 << i);
    }
    visited[p] = false;
  }
  return res;
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  const int mxn = 32 * 3e5;
  int n;
  cin >> n;
  vector<int> a(n);
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
  }
  vector<vector<int>> trie(2, vector<int>(2));
  vector<bool> visited(2, false);
  for (int i = 0; i < n; ++i) {
    int b;
    cin >> b;
    insert(trie, visited, b);
  }
  for (int i = 0; i < n; ++i) {
    cout << query(trie, visited, a[i]) << ' ';
  }
  cout << '\n';
  return 0;
}