#include <bits/stdc++.h>
using namespace std;

const int N = 2e5 + 100;
vector<int> g[N], val(N), d(N), primes;
unordered_map<int, int> dp[N];
int ans = 0;

set<int> get(int x) {
    set<int> ret;
    while (d[x] > 1) {
        ret.insert(d[x]);
        x /= d[x];
    }
    if (x != 1)
        ret.insert(x);
    return ret;
}

struct max2 {
    int x = 0, y = 0;
    void rlx(int z) {
        if (z >= x)
            y = x, x = z;
        else if (z >= y)
            y = z;
    }
};

void dfs(int v, int p, const vector<int>& val) {
    set<int> cur = get(val[v]);
    vector<max2> t(cur.size());
    for (auto u : g[v]) {
        if (u == p)
            continue;
        dfs(u, v, val);
        int i = 0;
        for (int x : cur) {
            if (!dp[u].count(x))
                continue;
            t[i++].rlx(dp[u][x]);
        }
    }
    int i = 0;
    for (int x : cur) {
        ans = max(ans, t[i].x + t[i].y + 1);
        dp[v][x] = t[i++].x + 1;
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    for (int i = 2; i < N; i++) {
        if (d[i] == 0) {
            d[i] = i;
            primes.push_back(i);
        }
        for (auto x : primes) {
            if (x > d[i] || x * i >= N)
                break;
            d[x * i] = x;
        }
    }

    int n;
    cin >> n;
    for (int i = 0; i < n; i++)
        cin >> val[i];
    for (int i = 0, a, b; i < n - 1; i++) {
        cin >> a >> b;
        a--;
        b--;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    dfs(0, -1, val);
    cout << ans << '\n';

    return 0;
}