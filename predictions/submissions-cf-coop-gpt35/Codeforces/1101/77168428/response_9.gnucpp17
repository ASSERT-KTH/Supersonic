#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <cmath>
using namespace std;

const int N = 2e5 + 100;
int g[N][N], val[N], d[N], primes[N], dp[N][N];
int ans = 0;

vector<int> get(int x) {
  vector<int> ret;
  for (int i = 2; i * i <= x; i++) {
    if (x % i == 0) {
      ret.push_back(i);
      while (x % i == 0)
        x /= i;
    }
  }
  if (x != 1)
    ret.push_back(x);
  return ret;
}

struct max2 {
  int x = 0, y = 0;
  max2() {}
  void rlx(int z) {
    if (z >= x)
      y = x, x = z;
    else if (z >= y)
      y = z;
  }
  int sum() { return x + y; }
};

void dfs(int v, int p) {
  vector<int> cur = get(val[v]);
  max2 t[N];
  for (int u = 0; u < N; u++) {
    if (g[v][u] == 0 || u == p)
      continue;
    dfs(u, v);
    for (int i = 0; i < cur.size(); i++) {
      int x = cur[i];
      if (dp[u][x] == 0)
        continue;
      t[i].rlx(dp[u][x]);
    }
  }
  for (int i = 0; i < cur.size(); i++) {
    int x = cur[i];
    ans = max(ans, t[i].sum() + 1);
    dp[v][x] = t[i].sum() + 1;
  }
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  for (int i = 2; i < N; i++) {
    if (d[i] == 0) {
      d[i] = i;
      primes[i] = i;
    }
    for (int x = 2 * i; x < N; x += i) {
      if (primes[x] == 0)
        primes[x] = i;
    }
  }
  int n;
  cin >> n;
  for (int i = 0; i < n; i++)
    cin >> val[i];
  for (int i = 0, a, b; i < n - 1; i++) {
    cin >> a >> b;
    a--;
    b--;
    g[a][b] = 1;
    g[b][a] = 1;
  }
  dfs(0, -1);
  cout << ans << '\n';
  return 0;
}