#include <iostream>
#include <vector>
#include <map>
using namespace std;

#define N 200100

vector<int> g[N], val(N), d(N), primes;
int dp[N][20]; // Assuming maximum 20 prime factors

int ans = 0;

vector<int> get(int x) {
  vector<int> ret;
  while (x > 1) {
    ret.push_back(d[x]);
    x /= d[x];
  }
  return ret;
}

void dfs(int v, int p) {
  vector<int> cur = get(val[v]);
  vector<int> t(cur.size(), 0);
  for (auto u : g[v]) {
    if (u == p)
      continue;
    dfs(u, v);
    for (int i = 0; i < cur.size(); i++) {
      int x = cur[i];
      if (!dp[u][x])
        continue;
      t[i] = max(t[i], dp[u][x]);
    }
  }
  for (int i = 0; i < cur.size(); i++) {
    int x = cur[i];
    ans = max(ans, t[i] + 1);
    dp[v][x] = t[i] + 1;
  }
}

int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);

  for (int i = 2; i < N; i++) {
    if (d[i] == 0) {
      d[i] = i;
      primes.push_back(i);
    }
    for (auto x : primes) {
      if (x > d[i] || x * i >= N)
        break;
      d[x * i] = x;
    }
  }

  int n;
  cin >> n;

  for (int i = 0; i < n; i++)
    cin >> val[i];

  for (int i = 0, a, b; i < n - 1; i++) {
    cin >> a >> b;
    a--;
    b--;
    g[a].push_back(b);
    g[b].push_back(a);
  }

  dfs(0, -1);

  cout << ans << '\n';

  return 0;
}