#include <iostream>
#include <vector>
#include <map>
using namespace std;

const int N = 2e5 + 100;
vector<int> g[N], val(N), d(N), primes;
int dp[N][10]; // Assuming a maximum of 10 prime factors for any number
int ans = 0;

vector<int> get(int x) {
  vector<int> ret;
  for (int i = 2; i * i <= x; i++) {
    if (x % i == 0) {
      ret.push_back(i);
      while (x % i == 0)
        x /= i;
    }
  }
  if (x != 1)
    ret.push_back(x);
  return ret;
}

void dfs(int v, int p, int& max1, int& max2) {
  vector<int> cur = get(val[v]);
  for (auto u : g[v]) {
    if (u == p)
      continue;
    int t1 = 0, t2 = 0;
    dfs(u, v, t1, t2);
    for (int i = 0; i < cur.size(); i++) {
      int x = cur[i];
      if (dp[u][x] == 0)
        continue;
      if (dp[u][x] >= max1) {
        max2 = max1;
        max1 = dp[u][x];
      } else if (dp[u][x] > max2) {
        max2 = dp[u][x];
      }
    }
  }
  for (int i = 0; i < cur.size(); i++) {
    int x = cur[i];
    ans = max(ans, max1 + max2 + 1);
    dp[v][x] = max1 + 1;
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  for (int i = 2; i < N; i++) {
    if (d[i] == 0) {
      d[i] = i;
      primes.push_back(i);
    }
    for (auto x : primes) {
      if (x > d[i] || x * i >= N)
        break;
      d[x * i] = x;
    }
  }

  int n;
  cin >> n;
  for (int i = 0; i < n; i++)
    cin >> val[i];

  for (int i = 0, a, b; i < n - 1; i++) {
    cin >> a >> b;
    a--;
    b--;
    g[a].push_back(b);
    g[b].push_back(a);
  }

  int max1 = 0, max2 = 0;
  dfs(0, -1, max1, max2);
  cout << ans << '\n';

  return 0;
}