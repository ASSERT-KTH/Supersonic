#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

long long gcd(long long a, long long b) {
  if (b == 0)
    return a;
  else
    return gcd(b, a % b);
}

int binarySearch(int l, int h, int a[], int key) {
  int ans = -1;
  while (l <= h) {
    int m = (l + h) / 2;
    if (a[m] == key) {
      ans = m;
      break;
    } else if (a[m] < key)
      l = m + 1;
    else
      h = m - 1;
  }
  return ans;
}

long long bin(long long a, long long b, long long m) {
  a = a % m;
  long long res = 1;
  while (b > 0) {
    if (b & 1)
      res = res * a % m;
    a = a * a % m;
    b = b >> 1;
  }
  return res;
}

int combinations(int n, int r) {
  long long res = 1;
  r = min(r, n - r); // Optimization: Calculate smaller value of r
  for (int i = 0; i < r; i++) {
    res = res * (n - i);
    res = res / (i + 1);
  }
  return res;
}

int find(int i, vector<int>& p) {
  while (p[i] != i)
    i = p[i];
  return i;
}

void join(int u, int v, vector<int>& p) {
  int x = find(u, p);
  int y = find(v, p);
  p[x] = p[y];
}

void dfs(int root, vector<vector<int>>& ad, vector<int>& vis, vector<int>& cat, int m, int cc, vector<int>& ans, int flag) {
  vector<pair<int, int>> stack; // Stack to simulate recursive call stack
  stack.push_back(make_pair(root, 0));

  while (!stack.empty()) {
    int x = stack.back().first;
    int i = stack.back().second;
    stack.pop_back();

    if (i == 0) {
      vis[x] = 1;
      if (flag) {
        if (cat[x - 1] == 1) {
          cc++;
          m = max(m, cc);
        } else {
          m = max(m, cc);
          cc = 0;
        }
      } else {
        if (cat[x - 1] == 1) {
          cc++;
          m = max(m, cc);
        } else {
          cc = 0;
          m = max(m, cc);
        }
      }
      if (ad[x].size() == 1 && x != 1) {
        ans.push_back(m);
      }
    }

    if (i < ad[x].size()) {
      int next = ad[x][i];
      if (vis[next] == 0) {
        stack.push_back(make_pair(x, i + 1));
        stack.push_back(make_pair(next, 0));
      }
    }
  }
}

int main() {
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif

  int n, m;
  cin >> n >> m;

  int cat[n];
  for (int i = 0; i < n; i++) {
    cin >> cat[i];
  }

  int an = 0;
  if (n == 2) {
    if (cat[1] == 0 || cat[0] + cat[1] <= m)
      an++;
    cout << an << endl;
    return 0;
  }

  vector<vector<int>> ad(n + 1);
  for (int i = 0; i < n - 1; i++) {
    int x, y;
    cin >> x >> y;
    ad[x].push_back(y);
    ad[y].push_back(x);
  }

  vector<int> vis(n + 1, 0);
  vector<int> ans;
  dfs(1, ad, vis, cat, 0, 0, ans, cat[0]);

  for (int i = 0; i < ans.size(); i++) {
    if (ans[i] <= m)
      ++an;
  }

  cout << an << endl;
  return 0;
}