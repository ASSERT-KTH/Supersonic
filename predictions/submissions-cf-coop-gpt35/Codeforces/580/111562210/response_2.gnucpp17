#include <iostream>
#include <vector>
using namespace std;

long long gcd(long long a, long long b) {
  while (b != 0) {
    long long temp = b;
    b = a % b;
    a = temp;
  }
  return a;
}

int bsearch(int l, int h, int a[], int key) {
  int m, ans = -1;
  while (l <= h) {
    m = (l + h) / 2;
    if (a[m] == key) {
      ans = m;
      break;
    } else if (a[m] < key) {
      l = m + 1;
    } else {
      h = m - 1;
    }
  }
  return ans;
}

long long bin(long long a, long long b, long long m) {
  a = a & (m - 1);
  long long res = 1;
  while (b > 0) {
    if (b & 1) {
      res = res * a & (m - 1);
    }
    a = a * a & (m - 1);
    b = b >> 1;
  }
  return res;
}

int ncr(int n, int r) {
  vector<vector<long long>> dp(n + 1, vector<long long>(r + 1, 0));
  for (int i = 0; i <= n; i++) {
    dp[i][0] = 1;
  }
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= r; j++) {
      dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j]) % 1000000007;
    }
  }
  return dp[n][r];
}

int find(int i, vector<int> &p) {
  if (p[i] != i) {
    p[i] = find(p[i], p);
  }
  return p[i];
}

void join(int u, int v, vector<int> &p, vector<int> &rank) {
  int x = find(u, p);
  int y = find(v, p);
  if (rank[x] > rank[y]) {
    p[y] = x;
  } else {
    p[x] = y;
    if (rank[x] == rank[y]) {
      rank[y]++;
    }
  }
}

void dfs(int x, vector<int> ad[], vector<int> &vis, int cat[], int m, int cc,
         vector<int> &ans, int flag) {
  vis[x] = 1;
  if (flag) {
    if (cat[x - 1] == 1) {
      cc++;
      m = max(m, cc);
    } else {
      m = max(m, cc);
      cc = 0;
    }
  } else {
    if (cat[x - 1] == 1) {
      cc++;
      m = max(m, cc);
    } else {
      cc = 0;
      m = max(m, cc);
    }
  }
  if (ad[x].size() == 1 && x != 1) {
    ans.push_back(m);
  }
  for (int i = 0; i < ad[x].size(); i++) {
    if (vis[ad[x][i]] == 0) {
      dfs(ad[x][i], ad, vis, cat, m, cc, ans, cat[x - 1]);
    }
  }
}

int main() {
  int n, m;
  cin >> n >> m;
  int cat[n];
  for (int i = 0; i < n; i++) {
    cin >> cat[i];
  }
  int an = 0;
  if (n == 2) {
    if (cat[1] == 0 || cat[0] + cat[1] <= m) {
      an++;
    }
    cout << an << endl;
    return 0;
  }
  vector<int> ad[n + 1];
  for (int i = 0; i < n - 1; i++) {
    int x, y;
    cin >> x >> y;
    ad[x].push_back(y);
    ad[y].push_back(x);
  }
  vector<int> vis(n + 1, 0);
  vector<int> ans;
  dfs(1, ad, vis, cat, 0, 0, ans, cat[0]);
  for (int i = 0; i < ans.size(); i++) {
    if (ans[i] <= m) {
      an++;
    }
  }
  cout << an << endl;
  return 0;
}