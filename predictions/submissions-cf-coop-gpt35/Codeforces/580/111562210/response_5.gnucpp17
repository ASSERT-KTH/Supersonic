#include <iostream>
#include <vector>

int gcd(int a, int b) {
  if (b == 0)
    return a;
  else
    return gcd(b, a % b);
}

int bsearch(int l, int h, int a[], int key) {
  int ans = -1;
  while (l <= h) {
    int m = (l + h) / 2;
    if (a[m] == key) {
      ans = m;
      break;
    } else if (a[m] < key)
      l = m + 1;
    else
      h = m - 1;
  }
  return ans;
}

int bin(int a, int b, int m) {
  a = a % m;
  int res = 1;
  while (b > 0) {
    if (b & 1)
      res = (res * a) % m;
    a = (a * a) % m;
    b = b >> 1;
  }
  return res;
}

int ncr(int n, int r) {
  long long res = 1;
  for (int i = 0; i < r; i++) {
    res = (res * (n - i)) / (i + 1);
  }
  return res;
}

int find(int i, std::vector<int>& p) {
  if (p[i] != i) {
    p[i] = find(p[i], p);
  }
  return p[i];
}

void join(int u, int v, std::vector<int>& p) {
  int x = find(u, p);
  int y = find(v, p);
  p[x] = p[y];
}

void dfs(int x, std::vector<std::vector<int>>& ad, std::vector<int>& vis, int cat[], int m, int cc,
         std::vector<int>& ans, int flag) {
  vis[x] = 1;
  if (flag) {
    if (cat[x - 1] == 1) {
      cc++;
      m = std::max(m, cc);
    } else {
      m = std::max(m, cc);
      cc = 0;
    }
  } else {
    if (cat[x - 1] == 1) {
      cc++;
      m = std::max(m, cc);
    } else {
      cc = 0;
      m = std::max(m, cc);
    }
  }
  if (ad[x].size() == 1 && x != 1) {
    ans.push_back(m);
  }
  for (int i : ad[x]) {
    if (vis[i] == 0)
      dfs(i, ad, vis, cat, m, cc, ans, cat[x - 1]);
  }
}

int main() {
#ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif
  int n, m;
  std::cin >> n >> m;
  int cat[n];
  for (int i = 0; i < n; i++) {
    std::cin >> cat[i];
  }
  int an = 0;
  if (n == 2) {
    if (cat[1] == 0 || cat[0] + cat[1] <= m)
      an++;
    std::cout << an << std::endl;
    return 0;
  }
  std::vector<std::vector<int>> ad(n + 1);
  for (int i = 0; i < n - 1; i++) {
    int x, y;
    std::cin >> x >> y;
    ad[x].push_back(y);
    ad[y].push_back(x);
  }
  std::vector<int> vis(n + 1, 0);
  std::vector<int> ans;
  dfs(1, ad, vis, cat, 0, 0, ans, cat[0]);
  for (int i = 0; i < ans.size(); i++) {
    if (ans[i] <= m)
      ++an;
  }
  std::cout << an << std::endl;
  return 0;
}