#include <iostream>
#include <algorithm>
#include <utility>
using namespace std;

int main() {
    long long int T;
    cin >> T;
    while (T--) {
        long long int N;
        cin >> N;
        pair<long long int, long long int> v[N];

        for (long long int i = 0; i < N; i++) {
            long long int M;
            cin >> M;
            long long int start = 0;
            long long int j;
            long long int max_value = INT_MIN; // initialize max_value to the minimum possible value
            for (j = 0; j < M; j++) {
                long long int x;
                cin >> x;
                max_value = max(max_value, x - j + 1); // calculate max_value directly without storing intermediate values
            }
            long long int end = M + max_value;
            v[i] = make_pair(max_value, end); // store the pair directly in the array
        }

        // Perform counting sort based on the first element of the pairs
        long long int max_start = INT_MIN;
        for (long long int i = 0; i < N; i++) {
            max_start = max(max_start, v[i].first);
        }
        long long int count[max_start + 1] = {0}; // create a count array to store the frequency of each value
        for (long long int i = 0; i < N; i++) {
            count[v[i].first]++;
        }
        for (long long int i = 1; i <= max_start; i++) {
            count[i] += count[i - 1]; // calculate the cumulative frequency
        }

        pair<long long int, long long int> sorted_v[N];
        for (long long int i = N - 1; i >= 0; i--) {
            sorted_v[count[v[i].first] - 1] = v[i]; // place the pairs in the sorted order
            count[v[i].first]--;
        }

        long long int start = 0;
        long long int end = 0;
        for (long long int i = 0; i < N; i++) {
            if (sorted_v[i].first >= end) {
                long long int diff = sorted_v[i].first - end;
                start = start + diff;
                end = sorted_v[i].second;
            } else {
                long long int diff = end - sorted_v[i].first;
                end = sorted_v[i].second + diff;
            }
        }

        cout << start << "\n";
    }
    return 0;
}