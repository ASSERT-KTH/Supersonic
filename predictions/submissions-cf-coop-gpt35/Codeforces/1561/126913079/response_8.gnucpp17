#include <bits/stdc++.h>
using namespace std;

// Function to sort the vector using quicksort
void quicksort(vector<pair<long long int, long long int>>& v, long long int low, long long int high) {
  if (low < high) {
    long long int pivot = v[high].first;
    long long int i = low - 1;

    for (long long int j = low; j < high; j++) {
      if (v[j].first < pivot) {
        i++;
        swap(v[i], v[j]);
      }
    }

    swap(v[i + 1], v[high]);

    long long int pi = i + 1;

    quicksort(v, low, pi - 1);
    quicksort(v, pi + 1, high);
  }
}

int main() {
  long long int T;
  cin >> T;

  while (T--) {
    long long int N;
    cin >> N;

    vector<long long int> start_values;
    vector<long long int> end_values;

    for (long long int i = 0; i < N; i++) {
      long long int M;
      cin >> M;
      long long int start = 0;
      long long int j;
      long long int max_value = 0;

      for (j = 0; j < M; j++) {
        long long int x;
        cin >> x;
        long long int value = x - j + 1;
        max_value = max(max_value, value);
      }

      start = max(start, max_value);
      long long int end = M + start;

      start_values.push_back(start);
      end_values.push_back(end);
    }

    quicksort(start_values, 0, N - 1);

    long long int start = 0;
    long long int end = 0;

    for (long long int i = 0; i < N; i++) {
      if (start_values[i] >= end) {
        long long int diff = start_values[i] - end;
        start += diff;
        end = end_values[i];
      } else {
        long long int diff = end - start_values[i];
        end += diff + end_values[i];
      }
    }

    cout << start << "\n";
  }
}