#include <bits/stdc++.h>
using namespace std;

void radixSort(long long int arr[][2], long long int N) {
    // Find the maximum element to determine the number of digits
    long long int maxVal = LLONG_MIN;
    for (long long int i = 0; i < N; i++) {
        maxVal = max(maxVal, max(arr[i][0], arr[i][1]));
    }
    
    // Perform counting sort for each digit
    for (long long int exp = 1; maxVal/exp > 0; exp *= 10) {
        long long int count[10] = {0};
        long long int output[N][2];
        
        // Count the occurrences of each digit
        for (long long int i = 0; i < N; i++) {
            count[(arr[i][0]/exp) % 10]++;
        }
        
        // Compute the cumulative count
        for (long long int i = 1; i < 10; i++) {
            count[i] += count[i-1];
        }
        
        // Build the output array
        for (long long int i = N-1; i >= 0; i--) {
            output[count[(arr[i][0]/exp) % 10] - 1][0] = arr[i][0];
            output[count[(arr[i][0]/exp) % 10] - 1][1] = arr[i][1];
            count[(arr[i][0]/exp) % 10]--;
        }
        
        // Copy the sorted elements back to the original array
        for (long long int i = 0; i < N; i++) {
            arr[i][0] = output[i][0];
            arr[i][1] = output[i][1];
        }
    }
}

int main() {
    long long int T;
    cin >> T;
    while (T--) {
        long long int N;
        cin >> N;
        long long int v[N][2];
        for (long long int i = 0; i < N; i++) {
            long long int M;
            cin >> M;
            long long int start = 0;
            for (long long int j = 0; j < M; j++) {
                long long int x;
                cin >> x;
                start = max(start, x - j + 1);
            }
            long long int end = M + start;
            v[i][0] = start;
            v[i][1] = end;
        }
        radixSort(v, N);
        long long int start = 0;
        long long int end = 0;
        for (long long int i = 1; i < N; i++) {
            long long int diff = v[i][0] - end;
            start += diff;
            end = v[i][1];
        }
        cout << start << "\n";
    }
    return 0;
}