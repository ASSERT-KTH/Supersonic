#include <iostream>
#include <vector>
using namespace std;

vector<int> parent;
int n;
int hb;

int find_set(int ii, vector<int>& path) {
    int root = ii;
    while (root != parent[root]) {
        path.push_back(root);
        root = parent[root];
    }
    for (int node : path) {
        parent[node] = root;
    }
    return root;
}

void union_sets(int a, int b, vector<int>& ranks, vector<int>& representatives) {
    int aa = find_set(a, representatives);
    int bb = find_set(b, representatives);
    if (aa != bb) {
        if (ranks[aa] < ranks[bb]) {
            parent[aa] = bb;
        } else if (ranks[aa] > ranks[bb]) {
            parent[bb] = aa;
        } else {
            parent[bb] = aa;
            ranks[aa]++;
        }
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

#ifdef fileIO
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    cin >> n;

    parent.resize(n);
    vector<int> ranks(n, 0);
    vector<int> representatives;

    for (int i = 0; i < n; i++) {
        parent[i] = i;
    }

    for (int i = 1; i < n; i++) {
        int rd1, rd2;
        cin >> rd1 >> rd2;
        union_sets(rd1 - 1, rd2 - 1, ranks, representatives);
    }

    int currURoad = 0;
    hb = -1;

    for (int i = 0; i < n; i++) {
        if (parent[i] == i) {
            if (hb == -1) {
                hb = i;
            } else {
                cout << representatives[currURoad] + 1 << ' ' << i + 1 << ' ' << hb + 1 << ' ' << i + 1 << '\n';
                currURoad++;
            }
        }
    }

    return 0;
}