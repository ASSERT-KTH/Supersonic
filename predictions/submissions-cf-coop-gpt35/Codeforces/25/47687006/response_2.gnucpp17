#include <iostream>
#include <vector>
using namespace std;

vector<int> parent;
vector<int> rank;
vector<int> uselessRoads;
int n, hb, currURoad;

int find_set(int ii) {
  if (ii == parent[ii])
    return ii;
  return parent[ii] = find_set(parent[ii]);
}

void union_sets(int a, int b) {
  int aa = find_set(a);
  int bb = find_set(b);
  if (aa != bb) {
    if (rank[aa] < rank[bb])
      swap(aa, bb);
    parent[bb] = aa;
    if (rank[aa] == rank[bb])
      rank[aa]++;
  } else {
    uselessRoads.push_back(a);
    uselessRoads.push_back(b);
  }
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  cin >> n;

  parent.resize(n);
  rank.resize(n);
  for (int i = 0; i < n; i++) {
    parent[i] = i;
    rank[i] = 0;
  }

  for (int i = 1; i < n; i++) {
    int rd1, rd2;
    cin >> rd1 >> rd2;
    union_sets(rd1 - 1, rd2 - 1);
  }

  cout << uselessRoads.size() / 2 << '\n';

  hb = -1;
  for (int i = 0; i < n; i++) {
    if (parent[i] == i) {
      if (hb == -1) {
        hb = i;
      } else {
        cout << uselessRoads[currURoad * 2] + 1 << ' '
             << uselessRoads[currURoad * 2 + 1] + 1 << ' ' << hb + 1 << ' '
             << i + 1 << '\n';
        currURoad++;
      }
    }
  }

  return 0;
}