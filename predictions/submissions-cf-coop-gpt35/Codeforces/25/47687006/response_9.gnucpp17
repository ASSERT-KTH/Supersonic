#include <iostream>
#include <vector>
using namespace std;

vector<int> parent;
vector<pair<int, int>> uselessRoads;
int n, hb, currURoad;

int find_set(int ii) {
  int root = ii;
  while (root != parent[root]) {
    root = parent[root];
  }
  while (ii != root) {
    int next = parent[ii];
    parent[ii] = root;
    ii = next;
  }
  return root;
}

void union_sets(int a, int b) {
  int aa = find_set(a);
  int bb = find_set(b);
  if (aa != bb) {
    parent[bb] = aa;
  } else {
    uselessRoads.push_back({a, b});
  }
}

int main() {
  ios_base::sync_with_stdio(false);

#ifdef fileIO
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif

  cin >> n;
  parent.reserve(n);
  uselessRoads.reserve(n-1);

  for (int i = 0; i < n; i++) {
    parent.push_back(i);
  }

  for (int i = 1; i < n; i++) {
    int rd1, rd2;
    cin >> rd1 >> rd2;
    union_sets(rd1 - 1, rd2 - 1);
  }

  cout << uselessRoads.size() << '\n';

  hb = -1;
  for (const auto& road : uselessRoads) {
    if (parent[road.first] == road.first) {
      if (hb == -1) {
        hb = road.first;
      } else {
        cout << road.first + 1 << ' ' << road.second + 1 << ' ' << hb + 1 << ' ' << road.first + 1 << '\n';
      }
    }
  }

  return 0;
}