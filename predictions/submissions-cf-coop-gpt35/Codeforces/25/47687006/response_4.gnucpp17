#include <iostream>
#include <vector>
using namespace std;

int find_set(vector<int>& parent, int ii) {
  if (ii == parent[ii])
    return ii;
  return parent[ii] = find_set(parent, parent[ii]);
}

void union_sets(vector<int>& parent, int a, int b) {
  int aa = find_set(parent, a);
  int bb = find_set(parent, b);
  if (aa != bb)
    parent[bb] = aa;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
#ifdef fileIO
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif

  int n;
  cin >> n;

  vector<int> parent(n);
  for (int i = 0; i < n; i++)
    parent[i] = i;

  int rd1, rd2;
  for (int i = 1; i < n; i++) {
    cin >> rd1 >> rd2;
    union_sets(parent, rd1 - 1, rd2 - 1);
  }

  int uselessRoads = 0;
  for (int i = 0; i < n; i++) {
    if (parent[i] == i)
      uselessRoads++;
  }

  cout << uselessRoads << '\n';

  int hb = -1;
  for (int i = 0; i < n; i++) {
    if (parent[i] == i) {
      if (hb == -1)
        hb = i;
      else {
        cout << rd1 << ' ' << rd2 << ' ' << hb + 1 << ' ' << i + 1 << '\n';
      }
    }
  }
}