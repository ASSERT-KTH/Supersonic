#include <iostream>
#include <vector>
#include <utility>

using namespace std;

const int MAXN = 100000;
int parent[MAXN];
vector<pair<int, int>> uselessRoads;

int find_set(int ii) {
  if (ii != parent[ii])
    parent[ii] = find_set(parent[ii]);
  return parent[ii];
}

void union_sets(int &a, int &b) {
  a = find_set(a);
  b = find_set(b);
  if (a != b)
    parent[b] = a;
  else
    uselessRoads.push_back({a, b});
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int n;
  cin >> n;

  for (int i = 0; i < n; i++)
    parent[i] = i;

  for (int i = 1; i < n; i++) {
    int rd1, rd2;
    cin >> rd1 >> rd2;
    union_sets(rd1 - 1, rd2 - 1);
  }

  cout << uselessRoads.size() << '\n';

  int hb = -1;
  for (int i = 0; i < n; i++) {
    if (parent[i] == i) {
      if (hb == -1)
        hb = i;
      else {
        cout << uselessRoads[0].first + 1 << ' '
             << uselessRoads[0].second + 1 << ' ' << hb + 1 << ' '
             << i + 1 << '\n';
        uselessRoads.erase(uselessRoads.begin());
      }
    }
  }

  return 0;
}