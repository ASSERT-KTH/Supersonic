#include <iostream>
#include <vector>

using namespace std;

vector<int> parent;
vector<int> uselessRoads;
int16_t n, hb, currURoad;

int16_t find_set(int16_t ii) {
  if (ii == parent[ii])
    return ii;
  return parent[ii] = find_set(parent[ii]);
}

void union_sets(int16_t a, int16_t b) {
  int16_t aa = find_set(a);
  int16_t bb = find_set(b);
  if (aa != bb)
    parent[bb] = aa;
  else
    uselessRoads.emplace_back(a);
}

int main() {
  ios_base::sync_with_stdio(false);

#ifdef fileIO
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif

  cin >> n;
  parent.reserve(n);
  for (int16_t i = 0; i < n; i++)
    parent.emplace_back(i);

  for (int16_t i = 1; i < n; i++) {
    int16_t rd1, rd2;
    cin >> rd1 >> rd2;
    union_sets(rd1 - 1, rd2 - 1);
  }

  cout << uselessRoads.size() << '\n';
  
  hb = -1;
  for (int16_t i = 0; i < n; i++) {
    if (parent[i] == i) {
      if (hb == -1)
        hb = i;
      else {
        cout << uselessRoads[currURoad] + 1 << ' ' << i + 1 << ' ' << hb + 1 << ' '
             << i + 1 << '\n';
        currURoad++;
      }
    }
  }

  return 0;
}