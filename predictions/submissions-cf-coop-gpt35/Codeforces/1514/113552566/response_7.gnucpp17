#include <bits/stdc++.h>
typedef long long ll;
typedef long double ld;
#define FASTIO \
  ios_base::sync_with_stdio(false); \
  cin.tie(NULL); \
  cout.tie(NULL);
#define PRECISION std::cout << std::fixed << std::setprecision(20);
using namespace std;

struct SegTree {
  vector<int> tree, arr;
  vector<vector<int>> store;
  int n;
  SegTree(int n, vector<int> _arr) : n(n) {
    tree.resize(4 * n);
    store.resize(n + 1);
    arr = _arr;
    for (int i = 0; i < n; i++)
      store[arr[i]].push_back(i);
    build();
  }
  int merge(int lval, int rval, int sl, int sr) {
    int cntl = 0, cntr = 0;
    for (int i = sl; i <= sr; i++) {
      if (arr[i] == lval) cntl++;
      if (arr[i] == rval) cntr++;
    }
    if (cntl >= cntr) {
      return lval;
    } else {
      return rval;
    }
  }
  void build() {
    for (int i = 0; i < n; i++)
      tree[n + i] = arr[i];
    for (int i = n - 1; i > 0; i--)
      tree[i] = merge(tree[2 * i], tree[2 * i + 1], i, i + 1);
  }
  int query(int qs, int qe) { return query(qs, qe, 0, n, 1, qs, qe); }
  int query(int qs, int qe, int ss, int se, int si, int sl, int sr) {
    if (ss >= qs && se <= qe) {
      return tree[si];
    }
    int mid = ss + se >> 1;
    if (qe <= mid) {
      return query(qs, qe, ss, mid, 2 * si, sl, sr);
    } else if (qs >= mid) {
      return query(qs, qe, mid, se, 2 * si + 1, sl, sr);
    } else {
      return merge(query(qs, qe, ss, mid, 2 * si, sl, sr),
                   query(qs, qe, mid, se, 2 * si + 1, sl, sr), sl, sr);
    }
  }
};

void solve() {
  int n, q;
  cin >> n >> q;
  vector<int> arr(n);
  vector<vector<int>> store(n + 1);
  for (int i = 0; i < n; i++)
    cin >> arr[i], store[arr[i]].push_back(i);
  SegTree tree(n, arr);
  while (q--) {
    int l, r;
    cin >> l >> r;
    l--;
    r--;
    int x = tree.query(l, r);
    int mx = 0;
    for (int i = l; i <= r; i++) {
      if (arr[i] == x) mx++;
    }
    int len = (r - l + 1);
    int extra = len - mx;
    int left = max(0, mx - extra - 1);
    cout << 1 + left << "\n";
  }
}

int main() {
  FASTIO;
  PRECISION;
  int t = 1;
  for (int i = 1; i <= t; i++) {
    solve();
  }
}