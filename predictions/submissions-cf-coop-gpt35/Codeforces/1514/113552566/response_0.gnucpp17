#include <bits/stdc++.h>
typedef long long ll;
typedef long double ld;
#define FASTIO ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define PRECISION std::cout << std::fixed << std::setprecision(20);
using namespace std;

struct SegTree {
  vector<int>& arr;
  vector<vector<int>>& store;
  vector<int> tree;
  int n;

  SegTree(int n, vector<int>& _arr, vector<vector<int>>& _store) : n(n), arr(_arr), store(_store) {
    tree.resize(4 * n);
    build(0, n - 1, 0);
  }

  int merge(int lval, int rval, int sl, int sr) {
    int cntl = upper_bound(store[lval].begin(), store[lval].end(), sr) - lower_bound(store[lval].begin(), store[lval].end(), sl);
    int cntr = upper_bound(store[rval].begin(), store[rval].end(), sr) - lower_bound(store[rval].begin(), store[rval].end(), sl);
    if (cntl >= cntr) {
      return lval;
    } else {
      return rval;
    }
  }

  void build(int ss, int se, int si) {
    if (ss == se) {
      tree[si] = arr[ss];
    } else {
      int mid = ss + se >> 1;
      build(ss, mid, 2 * si + 1);
      build(mid + 1, se, 2 * si + 2);
      tree[si] = merge(tree[2 * si + 1], tree[2 * si + 2], ss, se);
    }
  }

  int query(int qs, int qe) {
    return query(qs, qe, 0, n - 1, 0);
  }

  int query(int qs, int qe, int ss, int se, int si) {
    if (ss >= qs && se <= qe) {
      return tree[si];
    }

    int mid = ss + se >> 1;
    if (qe <= mid) {
      return query(qs, qe, ss, mid, 2 * si + 1);
    } else if (qs >= mid + 1) {
      return query(qs, qe, mid + 1, se, 2 * si + 2);
    } else {
      return merge(query(qs, qe, ss, mid, 2 * si + 1),
                   query(qs, qe, mid + 1, se, 2 * si + 2), qs, qe);
    }
  }
};

void solve() {
  int n, q;
  cin >> n >> q;

  vector<int> arr(n);
  vector<vector<int>> store(n + 1);

  for (int i = 0; i < n; i++) {
    cin >> arr[i];
    store[arr[i]].push_back(i);
  }

  SegTree tree(n, arr, store);

  while (q--) {
    int l, r;
    cin >> l >> r;
    l--;
    r--;

    int x = tree.query(l, r);
    int mx = upper_bound(store[x].begin(), store[x].end(), r) - lower_bound(store[x].begin(), store[x].end(), l);
    int len = (r - l + 1);
    int extra = len - mx;
    int left = max(0, mx - extra - 1);

    cout << 1 + left << "\n";
  }
}

int main() {
  FASTIO;
  PRECISION;

  int t = 1;
  for (int i = 1; i <= t; i++) {
    solve();
  }
}