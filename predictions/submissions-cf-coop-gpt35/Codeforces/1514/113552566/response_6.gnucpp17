#include <bits/stdc++.h>
typedef long long ll;
typedef long double ld;
#define FASTIO ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define PRECISION std::cout << std::fixed << std::setprecision(20);
using namespace std;

struct SegTree {
  vector<int> tree, arr;
  vector<unordered_map<int, vector<int>>> indices; // Optimized data structure

  int n;

  SegTree(int n, vector<int> _arr) : n(n) {
    tree.resize(4 * n);
    indices.resize(n + 1);
    arr = _arr;
    for (int i = 0; i < n; i++)
      indices[arr[i]][i].push_back(i); // Storing indices in the optimized data structure
    build();
  }

  int merge(int lval, int rval, int sl, int sr) {
    int cntl = 0, cntr = 0;

    for (int i : indices[lval]) {
      if (i >= sl && i <= sr) {
        cntl++;
      }
    }

    for (int i : indices[rval]) {
      if (i >= sl && i <= sr) {
        cntr++;
      }
    }

    if (cntl >= cntr) {
      return lval;
    } else {
      return rval;
    }
  }

  void build() {
    build(0, n - 1, 0);
  }

  void build(int ss, int se, int si) {
    if (ss == se) {
      tree[si] = arr[ss];
    } else {
      int mid = ss + se >> 1;
      build(ss, mid, 2 * si + 1);
      build(mid + 1, se, 2 * si + 2);
      tree[si] = merge(tree[2 * si + 1], tree[2 * si + 2], ss, se);
    }
  }

  int query(int qs, int qe) {
    int sl = qs, sr = qe;
    int si = 0;

    while (true) {
      if (qs <= sl && qe >= sr) {
        return tree[si];
      }

      int mid = sl + sr >> 1;

      if (qe <= mid) {
        sr = mid;
        si = 2 * si + 1;
      } else if (qs >= mid + 1) {
        sl = mid + 1;
        si = 2 * si + 2;
      } else {
        return merge(query(qs, qe, sl, mid, 2 * si + 1),
                     query(qs, qe, mid + 1, sr, 2 * si + 2), sl, sr);
      }
    }
  }

  int query(int qs, int qe, int sl, int sr, int si) {
    if (sl >= qs && sr <= qe) {
      return tree[si];
    }
    int mid = sl + sr >> 1;
    if (qe <= mid) {
      return query(qs, qe, sl, mid, 2 * si + 1);
    } else if (qs >= mid + 1) {
      return query(qs, qe, mid + 1, sr, 2 * si + 2);
    } else {
      return merge(query(qs, qe, sl, mid, 2 * si + 1),
                   query(qs, qe, mid + 1, sr, 2 * si + 2), sl, sr);
    }
  }
};

void solve() {
  int n, q;
  cin >> n >> q;
  vector<int> arr(n);

  for (int i = 0; i < n; i++)
    cin >> arr[i];

  SegTree tree(n, arr);

  while (q--) {
    int l, r;
    cin >> l >> r;
    l--;
    r--;
    int x = tree.query(l, r);

    int cnt = 0;

    for (int i : tree.indices[x]) {
      if (i >= l && i <= r) {
        cnt++;
      }
    }

    int len = (r - l + 1);
    int extra = len - cnt;
    int left = max(0, cnt - extra - 1);
    cout << 1 + left << "\n";
  }
}

int main() {
  FASTIO;
  PRECISION;
  int t = 1;
  for (int i = 1; i <= t; i++) {
    solve();
  }
}