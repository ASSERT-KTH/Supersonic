#include <iostream>
#include <limits>
using namespace std;

const int INF = numeric_limits<int>::max();
const int N = 81;

int n, m, p;
int c[N * N]; // Use a 1-dimensional array to represent the graph edges

// Helper function to get the weight of the edge from node i to node j
int getWeight(int i, int j) {
    return c[i * N + j];
}

int main() {
    cin >> n >> p >> m;

    // Initialize the graph edges to infinity
    fill_n(c, N * N, INF);

    // Read the graph edges and store the minimum weights
    for (int i = 1, x, y, dis; i <= m; ++i) {
        cin >> x >> y >> dis;
        c[x * N + y] = min(dis, c[x * N + y]);
    }

    // Initialize the dynamic programming array
    int f[N][N][N][2];
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
            for (int k = 0; k <= p; ++k) {
                f[i][j][k][0] = f[i][j][k][1] = INF;
            }
        }
    }

    // Base case: distance from node i to itself is 0
    for (int i = 1; i <= n; ++i) {
        f[i][i][1][0] = f[i][i][1][1] = 0;
    }

    // Dynamic programming loop
    for (int d = 1; d < n; ++d) {
        for (int i = 1; i + d <= n; ++i) {
            int j = i + d;
            for (int k = 2; k <= p; ++k) {
                for (int i2 = i + 1; i2 < j; ++i2) {
                    int c_ii2 = getWeight(i, i2);
                    int c_ij = getWeight(i, j);
                    f[i][j][k][0] = min(f[i][j][k][0], f[i2][j][k - 1][0] + c_ii2);
                    f[i][j][k][0] = min(f[i][j][k][0], f[i2][j][k - 1][1] + c_ij);
                    f[i][j][k][0] = min(f[i][j][k][0], f[i2][j][k][0] + c_ii2);
                    f[i][j][k][0] = min(f[i][j][k][0], f[i2][j][k][1] + c_ij);
                }
                int c_ij = getWeight(i, j);
                f[i][j][k][0] = min(f[i][j][k][0], f[j][j][k - 1][0] + c_ij);
                f[i][j][k][0] = min(f[i][j][k][0], f[j][j][k][0] + c_ij);
                for (int j2 = j - 1; j2 > i; --j2) {
                    int c_jj2 = getWeight(j, j2);
                    int c_ji = getWeight(j, i);
                    f[i][j][k][1] = min(f[i][j][k][1], f[i][j2][k - 1][1] + c_jj2);
                    f[i][j][k][1] = min(f[i][j][k][1], f[i][j2][k - 1][0] + c_ji);
                    f[i][j][k][1] = min(f[i][j][k][1], f[i][j2][k][1] + c_jj2);
                    f[i][j][k][1] = min(f[i][j][k][1], f[i][j2][k][0] + c_ji);
                }
                int c_ji = getWeight(j, i);
                f[i][j][k][1] = min(f[i][j][k][1], f[i][i][k - 1][1] + c_ji);
                f[i][j][k][1] = min(f[i][j][k][1], f[i][i][k][1] + c_ji);
            }
        }
    }

    // Find the minimum cost from any node pair with p nodes visited
    int ans = INF;
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
            ans = min(ans, f[i][j][p][0]);
            ans = min(ans, f[i][j][p][1]);
        }
    }

    // Output the result
    cout << (ans == INF ? -1 : ans) << endl;

    return 0;
}