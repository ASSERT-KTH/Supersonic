#include <iostream>
#include <algorithm>
#include <vector>
#include <limits>

const int INF = std::numeric_limits<int>::max();
const int N = 81;

int main() {
  int n, p, m;
  std::cin >> n >> p >> m;

  std::vector<std::vector<int>> graph(n + 1, std::vector<int>(n + 1, INF));

  for (int i = 1; i <= n; ++i) {
    graph[i][i] = 0;
  }

  for (int i = 1, x, y, dis; i <= m; ++i) {
    std::cin >> x >> y >> dis;
    graph[x][y] = std::min(dis, graph[x][y]);
  }

  std::vector<std::vector<std::vector<std::vector<int>>>> dp(n + 1,
                                                              std::vector<std::vector<std::vector<int>>>(
                                                                  n + 1, std::vector<std::vector<int>>(
                                                                              p + 1, std::vector<int>(2, INF))));

  for (int i = 1; i <= n; ++i) {
    dp[i][i][1][0] = dp[i][i][1][1] = 0;
  }

  for (int d = 1; d < n; ++d) {
    for (int i = 1; i + d <= n; ++i) {
      int j = i + d;
      for (int k = 2; k <= p; ++k) {
        for (int i2 = i + 1; i2 < j; ++i2) {
          dp[i][j][k][0] = std::min(dp[i][j][k][0], dp[i2][j][k - 1][0] + graph[i][i2]);
          dp[i][j][k][0] = std::min(dp[i][j][k][0], dp[i2][j][k - 1][1] + graph[i][j]);
          dp[i][j][k][0] = std::min(dp[i][j][k][0], dp[i2][j][k][0] + graph[i][i2]);
          dp[i][j][k][0] = std::min(dp[i][j][k][0], dp[i2][j][k][1] + graph[i][j]);
        }
        dp[i][j][k][0] = std::min(dp[i][j][k][0], dp[j][j][k - 1][0] + graph[i][j]);
        dp[i][j][k][0] = std::min(dp[i][j][k][0], dp[j][j][k][0] + graph[i][j]);
        for (int j2 = j - 1; j2 > i; --j2) {
          dp[i][j][k][1] = std::min(dp[i][j][k][1], dp[i][j2][k - 1][1] + graph[j][j2]);
          dp[i][j][k][1] = std::min(dp[i][j][k][1], dp[i][j2][k - 1][0] + graph[j][i]);
          dp[i][j][k][1] = std::min(dp[i][j][k][1], dp[i][j2][k][1] + graph[j][j2]);
          dp[i][j][k][1] = std::min(dp[i][j][k][1], dp[i][j2][k][0] + graph[j][i]);
        }
        dp[i][j][k][1] = std::min(dp[i][j][k][1], dp[i][i][k - 1][1] + graph[j][i]);
        dp[i][j][k][1] = std::min(dp[i][j][k][1], dp[i][i][k][1] + graph[j][i]);
      }
    }
  }

  int ans = INF;
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j) {
      ans = std::min(ans, dp[i][j][p][0]);
      ans = std::min(ans, dp[i][j][p][1]);
    }
  }

  std::cout << (ans == INF ? -1 : ans) << std::endl;
  return 0;
}