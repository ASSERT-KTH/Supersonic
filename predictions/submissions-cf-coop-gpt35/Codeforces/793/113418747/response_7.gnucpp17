#include <iostream>
#include <vector>
using namespace std;

const int INF = 1000000007;
const int N = 81;

int n, m, p;
vector<vector<int>> c;
vector<vector<vector<int>>> f;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  cin >> n >> p >> m;

  c.resize(n + 1, vector<int>(n + 1, INF));

  for (int i = 1, x, y, dis; i <= m; ++i) {
    cin >> x >> y >> dis;
    c[x][y] = min(dis, c[x][y]);
  }

  f.resize(n + 1, vector<vector<int>>(n + 1, vector<int>(p + 1, INF)));

  for (int i = 1; i <= n; ++i) {
    f[i][i][1] = 0;
  }

  for (int d = 1; d < n; ++d) {
    for (int i = 1; i + d <= n; ++i) {
      int j = i + d;
      for (int k = 2; k <= p; ++k) {
        int minCost0 = INF;
        int minCost1 = INF;
        for (int i2 = j - 1; i2 > i; --i2) {
          minCost0 = min(minCost0, f[i2][j][k - 1] + c[i][i2]);
          minCost0 = min(minCost0, f[i2][j][k] + c[i][i2]);

          minCost1 = min(minCost1, f[i][i2][k - 1] + c[j][i2]);
          minCost1 = min(minCost1, f[i][i2][k] + c[j][i2]);
        }

        minCost0 = min(minCost0, f[j][j][k - 1] + c[i][j]);
        minCost0 = min(minCost0, f[j][j][k] + c[i][j]);

        minCost1 = min(minCost1, f[i][j][k - 1] + c[j][i]);
        minCost1 = min(minCost1, f[i][j][k] + c[j][i]);

        f[i][j][k][0] = minCost0;
        f[i][j][k][1] = minCost1;
      }
    }
  }

  int ans = INF;
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j) {
      ans = min(ans, f[i][j][p][0]);
      ans = min(ans, f[i][j][p][1]);
    }
  }

  cout << (ans == INF ? -1 : ans) << endl;

  return 0;
}