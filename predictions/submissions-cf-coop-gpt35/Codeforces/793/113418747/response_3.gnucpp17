#include <bits/stdc++.h>
using namespace std;
const int INF = 1000000007;
const int N = 81;
int n, m, p;
vector<pair<int, int>> adj[N]; // adjacency list representation

int f[N][N][N][2];

int main() {
  cin >> n >> p >> m;
  
  // Initialize adjacency list with INF as the initial value for all edges
  for (int i = 1; i <= n; ++i) {
    adj[i].resize(n + 1, {INF, INF});
  }
  
  // Read edge information and update adjacency list
  for (int i = 1, x, y, dis; i <= m; ++i) {
    scanf("%d%d%d", &x, &y, &dis);
    adj[x][y].first = min(dis, adj[x][y].first);
  }

  // Calculate minimum cost for each subproblem
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j) {
      for (int k = 0; k <= p; ++k) {
        f[i][j][k][0] = f[i][j][k][1] = INF;
      }
    }
  }

  for (int i = 1; i <= n; ++i) {
    f[i][i][1][0] = f[i][i][1][1] = 0;
  }

  for (int d = 1; d < n; ++d) {
    for (int i = 1; i + d <= n; ++i) {
      int j = i + d;
      for (int k = 2; k <= p; ++k) {
        int minCost0 = INF;
        int minCost1 = INF;

        for (int i2 = i + 1; i2 < j; ++i2) {
          minCost0 = min(minCost0, f[i2][j][k - 1][0] + adj[i][i2].first);
          minCost0 = min(minCost0, f[i2][j][k - 1][1] + adj[i][j].first);
          minCost0 = min(minCost0, f[i2][j][k][0] + adj[i][i2].first);
          minCost0 = min(minCost0, f[i2][j][k][1] + adj[i][j].first);
        }
        minCost0 = min(minCost0, f[j][j][k - 1][0] + adj[i][j].first);
        minCost0 = min(minCost0, f[j][j][k][0] + adj[i][j].first);

        for (int j2 = j - 1; j2 > i; --j2) {
          minCost1 = min(minCost1, f[i][j2][k - 1][1] + adj[j][j2].first);
          minCost1 = min(minCost1, f[i][j2][k - 1][0] + adj[j][i].first);
          minCost1 = min(minCost1, f[i][j2][k][1] + adj[j][j2].first);
          minCost1 = min(minCost1, f[i][j2][k][0] + adj[j][i].first);
        }
        minCost1 = min(minCost1, f[i][i][k - 1][1] + adj[j][i].first);
        minCost1 = min(minCost1, f[i][i][k][1] + adj[j][i].first);

        f[i][j][k][0] = minCost0;
        f[i][j][k][1] = minCost1;
      }
    }
  }

  int ans = INF;
  for (int i = 1; i <= n; ++i) {
    for (int j = 1; j <= n; ++j) {
      ans = min(ans, f[i][j][p][0]);
      ans = min(ans, f[i][j][p][1]);
    }
  }

  cout << (ans == INF ? -1 : ans) << endl;
}