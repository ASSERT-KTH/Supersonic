#include <algorithm>
#include <bitset>
#include <cmath>
#include <iostream>
#include <vector>
using namespace std;

bitset<1000010> flag;
vector<long long> k;

void Prem(vector<long long>& k);

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  
  int n;
  long long a;
  
  Prem(k);
  
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> a;
    
    // Check if a is a perfect square
    long long root = sqrt(a);
    if (root * root == a && flag[root]) {
      cout << "YES\n";
    } else {
      cout << "NO\n";
    }
  }
  
  return 0;
}

void Prem(vector<long long>& k) {
  // Store the squares of prime numbers
  for (int i = 2; i <= 1000; i++) {
    if (flag[i]) {
      k.push_back(i * i);
      
      // Mark all multiples of i as non-prime
      for (int j = i * i; j <= 1000000; j += i) {
        flag[j] = false;
      }
    }
  }
  
  // Handle prime numbers greater than 1000
  for (int i = 1001; i <= 1000000; i += 2) {
    if (flag[i]) {
      k.push_back(i * i);
    }
  }
}