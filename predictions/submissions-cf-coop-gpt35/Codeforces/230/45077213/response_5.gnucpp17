#include <algorithm>
#include <cmath>
#include <iostream>
#include <vector>
using namespace std;

bool *flag;

void Prem(int n, vector<long long> &k);

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);

  int n;
  long long a, temp;

  cin >> n;

  // Dynamically resize the flag array based on the maximum input value
  flag = new bool[n + 1];
  fill(flag, flag + n + 1, true);
  flag[1] = false;

  vector<long long> k;
  Prem(n, k);

  for (int i = 0; i < n; i++) {
    cin >> a;
    temp = (long long)sqrt(a); // Calculate the integer square root

    if (temp * temp != a)
      cout << "NO\n";
    else if (flag[temp] == false)
      cout << "NO\n";
    else
      cout << "YES\n";
  }

  delete[] flag;

  return 0;
}

void Prem(int n, vector<long long> &k) {
  int sqrt_n = (int)sqrt(n);

  for (int i = 2; i <= sqrt_n; i++) {
    if (flag[i]) {
      k.push_back(i);

      for (int j = 0; j < k.size(); j++) {
        if (i * k[j] > n)
          break;

        flag[i * k[j]] = false;

        if (i % k[j] == 0)
          break;
      }
    }
  }
}