#include <iostream>
#include <vector>

const int MAX_N = 1000010;
bool flag[MAX_N];
int primes[MAX_N];

void prem() {
    std::fill(flag, flag + MAX_N, true);
    flag[0] = flag[1] = false;
    int primeCount = 0;

    for (int i = 2; i < MAX_N; i++) {
        if (flag[i]) {
            primes[primeCount++] = i;
            for (int j = i * i; j < MAX_N; j += 2 * i) {
                flag[j] = false;
            }
        }
    }
}

bool isPerfectSquare(int n) {
    int root = sqrt(n);
    return root * root == n;
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);

    int n;
    std::cin >> n;

    prem();

    for (int i = 0; i < n; i++) {
        long long a;
        std::cin >> a;

        if (!isPerfectSquare(a) || !std::binary_search(primes, primes + MAX_N, (int)sqrt(a))) {
            std::cout << "NO\n";
        } else {
            std::cout << "YES\n";
        }
    }

    return 0;
}