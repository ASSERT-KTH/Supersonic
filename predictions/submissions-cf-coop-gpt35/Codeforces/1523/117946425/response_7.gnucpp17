#include <iostream>
#include <vector>
#include <bitset>
#include <algorithm>
#include <random>
#include <chrono>

using namespace std;

template <typename A, typename B>
ostream &operator<<(ostream &os, const pair<A, B> &p) {
  return os << '(' << p.first << ", " << p.second << ')';
}

template <typename T_container, typename T = typename enable_if<
                                    !is_same<T_container, string>::value,
                                    typename T_container::value_type>::type>
ostream &operator<<(ostream &os, const T_container &v) {
  os << '{';
  string sep;
  for (const T &x : v)
    os << sep << x, sep = ", ";
  return os << '}';
}

void dbg_out() { cerr << endl; }

template <typename Head, typename... Tail>
void dbg_out(Head H, Tail... T) {
  cerr << ' ' << H;
  dbg_out(T...);
}

#ifdef WA_DEBUG
#define dbg(...) cerr << "(" << #__VA_ARGS__ << "):", dbg_out(__VA_ARGS__)
#else
#define dbg(...)
#endif

using ll = long long;
using ull = unsigned long long;

#define pb push_back
#define fi first
#define se second
#define rep(i, a, b) for (int i = int(a); i <= (int)(b); i++)
#define per(i, a, b) for (int i = int(a); i >= (int)(b); i--)

const int mod = 1e9 + 7;
const int inf = 0x3f3f3f3f;
const int maxn = 1e5 + 10;
mt19937 rng((unsigned int)chrono::steady_clock::now().time_since_epoch().count());

int main() {
#ifndef WA_DEBUG
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
#endif
  int n, m, p;
  cin >> n >> m >> p;

  // Store the input numbers as a vector of bitsets
  vector<bitset<maxn>> a(n + 1);
  rep(i, 1, n) {
    for (int j = 0; j < m; j++) {
      char c;
      cin >> c;
      if (c == '1')
        a[i].set(j);
    }
  }

  // Shuffle the indices directly while iterating over the numbers
  vector<int> id(n + 1);
  iota(id.begin(), id.end(), 0);
  shuffle(id.begin() + 1, id.end(), rng);

  long long ans = 0;
  int num = 0;
  rep(i, 1, min(200, n)) {
    bitset<maxn> one;
    for (int j = 0; j < m; j++) {
      if (a[id[i]][j])
        one.set(j);
    }

    vector<int> dp(1 << one.count());
    rep(j, 1, n) {
      int tmp = (a[j] & one).count();
      dp[tmp]++;
    }

    rep(j, 0, one.count() - 1) {
      rep(k, 0, (1 << one.count()) - 1) {
        if (k & (1 << j))
          dp[k ^ (1 << j)] += dp[k];
      }
    }

    rep(k, 0, (1 << one.count()) - 1) {
      if (dp[k] >= (n + 1) / 2 && __builtin_popcount(k) > num) {
        num = __builtin_popcount(k);
        ans = 0;
        for (int j = 0; j < one.count(); j++) {
          if (k & (1 << j))
            ans += (1ll << one._Find_first(j));
        }
      }
    }
  }

  rep(i, 0, m - 1) {
    cout << ((ans >> i) & 1);
  }
  cout << '\n';
  return 0;
}