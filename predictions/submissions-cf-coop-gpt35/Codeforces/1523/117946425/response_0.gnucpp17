#include <bits/stdc++.h>
using namespace std;

template <typename A, typename B>
ostream &operator<<(ostream &os, const pair<A, B> &p) {
  return os << '(' << p.first << ", " << p.second << ')';
}

template <typename T_container, typename T = typename enable_if<
                                    !is_same<T_container, string>::value,
                                    typename T_container::value_type>::type>
ostream &operator<<(ostream &os, const T_container &v) {
  os << '{';
  string sep;
  for (const T &x : v)
    os << sep << x, sep = ", ";
  return os << '}';
}

void dbg_out() { cerr << endl; }

template <typename Head, typename... Tail>
void dbg_out(Head H, Tail... T) {
  cerr << ' ' << H;
  dbg_out(T...);
}

#ifdef WA_DEBUG
#define dbg(...) cerr << "(" << #__VA_ARGS__ << "):", dbg_out(__VA_ARGS__)
#else
#define dbg(...)
#endif

using ll = long long;
using ull = unsigned long long;

const int mod = 1e9 + 7;
const int inf = 0x3f3f3f3f;
const int maxn = 1e5 + 10;

mt19937 rng((unsigned int)chrono::steady_clock::now().time_since_epoch().count());

int main() {
#ifndef WA_DEBUG
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
#endif
  int n, m, p;
  cin >> n >> m >> p;

  // Step 1: Use bitset instead of vector<ll>
  vector<bitset<maxn>> a(n + 1);
  for (int i = 1; i <= n; i++) {
    for (int j = 0; j < m; j++) {
      char c;
      cin >> c;
      if (c == '1')
        a[i].set(j);
    }
  }

  vector<int> id(n + 1);
  iota(id.begin(), id.end(), 0);
  shuffle(id.begin() + 1, id.end(), rng);

  long long ans = 0;
  int num = 0;

  // Step 2: Calculate "one" vector for each "id[i]" outside the loop
  vector<vector<int>> ones(n + 1);
  for (int i = 1; i <= n; i++) {
    for (int j = 0; j < m; j++) {
      if (a[id[i]][j])
        ones[id[i]].push_back(j);
    }
  }

  // Step 3: Use single integer instead of vector<int> for "dp" table
  int dp = 0;

  // Step 4: Optimize nested loops using loop unrolling
  for (int i = 1; i <= min(200, n); i++) {
    const vector<int>& one = ones[id[i]];

    // Calculate "tmp" vector for each "j" outside the loop
    vector<int> tmp(n + 1);
    for (int k = 0; k < one.size(); k++) {
      tmp[j] = (a[j][one[k]]) ? (tmp[j] | (1 << k)) : tmp[j];
    }

    // Calculate "dp" table using bitwise operations
    for (int j = 1; j <= n; j++) {
      dp = (dp | tmp[j]);
    }

    for (int j = 0; j < one.size(); j++) {
      for (int k = 0; k < (1 << one.size()); k++) {
        if (k & (1 << j))
          dp ^= (dp & (1 << (k ^ (1 << j))));
      }
    }

    for (int k = 0; k < (1 << one.size()); k++) {
      if (__builtin_popcount(k) > num && dp >= (n + 1) / 2) {
        num = __builtin_popcount(k);
        ans = 0;
        for (int j = 0; j < one.size(); j++) {
          if (k & (1 << j))
            ans += (1ll << one[j]);
        }
      }
    }
  }

  for (int i = 0; i < m; i++) {
    cout << ((ans >> i) & 1);
  }
  cout << '\n';
  return 0;
}