#include <iostream>
#include <vector>
#include <algorithm>

void solve() {
  int a, b, n;
  int res = 0;
  std::cin >> a >> b >> n;

  std::vector<int> attack(n), health(n);

  auto max_attack = std::max_element(attack.begin(), attack.end());
  int k = std::distance(attack.begin(), max_attack);

  for (int i = 0; i < n; ++i) {
    std::cin >> attack[i] >> health[i];
  }

  for (int i = 0; i < n; ++i) {
    if (i == k)
      continue;
    int d = (health[i] + a - 1) / a;
    d = d * attack[i];
    res += d;
  }

  b = b - res;
  int x = (b + attack[k] - 1) / attack[k];
  int y = (health[k] + a - 1) / a;

  if (x >= y)
    std::cout << "YES\n";
  else
    std::cout << "NO\n";
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(0);

  int tt = 1;
  std::cin >> tt;

  while (tt--)
    solve();

  return 0;
}