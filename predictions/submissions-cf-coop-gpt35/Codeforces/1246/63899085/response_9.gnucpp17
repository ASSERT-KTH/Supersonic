#include <iostream>
#include <vector>
#include <map>
#include <cmath>
using namespace std;

#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")

const int MAX_N = 100001;

bool isPrime[MAX_N];
vector<int> primes;
int primeCount[MAX_N];

long long mul(long long a, long long b, long long mod) {
  long long ret = 0;
  a %= mod;
  while (b) {
    if (b & 1) {
      ret += a;
      if (ret >= mod) ret -= mod;
    }
    a <<= 1;
    if (a >= mod) a -= mod;
    b >>= 1;
  }
  return ret;
}

long long pow(long long a, long long b, long long mod) {
  long long ret = 1;
  a %= mod;
  while (b) {
    if (b & 1) {
      ret = mul(ret, a, mod);
    }
    a = mul(a, a, mod);
    b >>= 1;
  }
  return ret;
}

void getPrimes() {
  for (int i = 0; i <= MAX_N; i++) {
    isPrime[i] = true;
  }
  isPrime[0] = isPrime[1] = false;
  for (int i = 2; i * i <= MAX_N; i++) {
    if (isPrime[i]) {
      for (int j = i * i; j <= MAX_N; j += i) {
        isPrime[j] = false;
      }
    }
  }
  for (int i = 2; i <= MAX_N; i++) {
    if (isPrime[i]) {
      primes.push_back(i);
    }
  }
}

void factorize(int n) {
  for (auto p : primes) {
    if (p > n) break;
    while (n % p == 0) {
      primeCount[p]++;
      n /= p;
    }
  }
  if (n > 1) {
    primeCount[n]++;
  }
}

long long ans, cur;

void dfs(int idx, long long val) {
  if (idx == primes.size()) {
    long long a = val;
    long long b = cur / val;
    if (a <= MAX_N && b <= MAX_N && primeCount[a] && primeCount[b]) {
      if (a == b)
        ans += primeCount[a] * (primeCount[a] - 1);
      else
        ans += primeCount[a] * primeCount[b];
    }
  } else {
    dfs(idx + 1, val);
    for (int i = 1; i <= primeCount[primes[idx]]; i++) {
      dfs(idx + 1, val * primes[idx]);
      val *= primes[idx];
    }
  }
}

int main() {
  int n, k;
  cin >> n >> k;

  if (k == 2) {
    getPrimes();
    map<long long, long long> all;
    for (int i = 1; i <= n; i++) {
      int t;
      cin >> t;
      primeCount.clear();
      factorize(t);
      long long h = 1;
      for (auto x : primeCount) {
        if (x.second & 1) {
          h *= x.first;
        }
      }
      all[h]++;
    }
    for (auto x : all) {
      ans += x.second * (x.second - 1) / 2;
    }
  } else {
    for (int i = 1; i <= n; i++) {
      int t;
      cin >> t;
      primeCount[t]++;
    }
    long long x = 1;
    cur = 1;
    while (cur <= 10000000000LL) {
      primeCount.clear();
      factorize(cur);
      dfs(0, 1);
      x++;
      cur = 1;
      for (int j = 1; j <= k; j++) {
        cur *= x;
        if (cur > 1e10) {
          break;
        }
      }
    }
    ans /= 2;
  }
  cout << ans << endl;
  return 0;
}