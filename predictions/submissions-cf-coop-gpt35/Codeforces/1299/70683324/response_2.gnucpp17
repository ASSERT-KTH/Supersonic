#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("-ffloat-store")
#include <iostream>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <map>
#include <unordered_map>
#include <random>
using namespace std;

#define fo(i, n) for (int i = 0; i < (n); ++i)
#define repA(i, j, n) for (int i = (j); i <= (n); ++i)
#define repD(i, j, n) for (int i = (j); i >= (n); --i)
#define all(x) begin(x), end(x)
#define sz(x) static_cast<int>(x.size())
#define endl "\n"
typedef long long int lli;
typedef double mytype;
typedef pair<lli, lli> ii;
typedef vector<ii> vii;
typedef vector<lli> vi;
clock_t time_p = clock();
void aryanc403() {
#ifdef ARYANC403
  time_p = clock() - time_p;
  cerr << "Time Taken : " << (float)(time_p) / CLOCKS_PER_SEC << "\n";
#endif
}

lli seed;
mt19937 rng(seed = chrono::steady_clock::now().time_since_epoch().count());
inline lli rnd(lli l = 0, lli r = INF) {
  return uniform_int_distribution<lli>(l, r)(rng);
}

class CMP {
public:
  bool operator()(ii a, ii b) {
    return !(a.first < b.first || (a.first == b.first && a.second <= b.second));
  }
};

void add(vector<pair<lli, lli>>& m, lli x, lli cnt = 1) {
  auto jt = lower_bound(all(m), ii(x, 0), CMP());
  if (jt == m.end() || jt->first != x)
    m.insert(jt, {x, cnt});
  else
    jt->second += cnt;
}

void del(vector<pair<lli, lli>>& m, lli x, lli cnt = 1) {
  auto jt = lower_bound(all(m), ii(x, 0), CMP());
  if (jt->second <= cnt)
    m.erase(jt);
  else
    jt->second -= cnt;
}

bool cmp(const ii& a, const ii& b) {
  return a.first < b.first || (a.first == b.first && a.second < b.second);
}

const lli INF = 0xFFFFFFFFFFFFFFFL;
const lli mod = 1000000007L;
const lli maxN = 1000000L;

int main(void) {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cout << fixed << setprecision(10);

  lli T, n, i, j, k, in, cnt, l, r, u, v, x, y;
  lli m;
  string s;
  vi a;

  {
    cin >> n;
    a.clear();
    a.reserve(n);
    a.push_back(0);
    fo(i, n) {
      cin >> in;
      a.push_back(in + a.back());
    }
    vii c;
    vi dd(n + 1, 0);
    repD(i, n, 1) {
      add(c, {-i, a[i]});
      auto it = lower_bound(all(c), ii(a[i - 1], -INF), CMP());
      l = it - c.begin() - 1;
      dd[i] = -c[l].first;
    }
    i = 1;
    while (i <= n) {
      j = dd[i];
      const mytype m = (a[j] - a[i - 1]) / static_cast<mytype>(j - i + 1);
      repA(k, i, j) {
        cout << fixed << setprecision(9) << m << endl;
      }
      i = j + 1;
    }
  }

  aryanc403();
  return 0;
}