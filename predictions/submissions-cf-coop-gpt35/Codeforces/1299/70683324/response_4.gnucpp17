#include <iostream>
#include <unordered_map>
#include <vector>
#include <iomanip>

typedef long long int lli;
typedef double mytype;
typedef std::pair<lli, lli> ii;
typedef std::vector<ii> vii;
typedef std::vector<lli> vi;

void add(std::unordered_map<lli, lli> &m, lli x, lli cnt = 1) {
  auto jt = m.find(x);
  if (jt == m.end())
    m.insert({x, cnt});
  else
    jt->second += cnt;
}

void del(std::unordered_map<lli, lli> &m, lli x, lli cnt = 1) {
  auto jt = m.find(x);
  if (jt->second <= cnt)
    m.erase(jt);
  else
    jt->second -= cnt;
}

bool cmp(const ii &a, const ii &b) {
  return a.first < b.first || (a.first == b.first && a.second < b.second);
}

int main(void) {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(NULL);
  std::cout.tie(NULL);
  std::cout << std::fixed << std::setprecision(10);

  lli n, i, j, in;
  std::cin >> n;
  vi a(n + 1, 0);
  for (i = 1; i <= n; ++i) {
    std::cin >> in;
    a[i] = in + a[i - 1];
  }

  vii c;
  vi dd(n + 1, 0);
  for (i = n; i >= 1; --i) {
    ii z = {-i, a[i]};
    lli n = c.size();
    while (n > 1) {
      ii x = c[n - 2], y = c[n - 1];
      if ((x.second - y.second) * (z.first - y.first) >= (y.second - z.second) * (y.first - x.first))
        break;
      c.pop_back();
      n--;
    }
    c.push_back(z);

    lli l = 0, r = c.size();
    while (r - l > 1) {
      lli mi = (l + r) / 2;
      if (c[mi].first * (c[mi].second - c[mi - 1].second) +
              c[mi].second * (c[mi - 1].first - c[mi].first) >=
          a[i - 1] * (c[mi - 1].first - c[mi].first) -
              (c[mi].second - c[mi - 1].second) * (i - 1))
        l = mi;
      else
        r = mi;
    }
    dd[i] = -c[l].first;
  }

  i = 1;
  while (i <= n) {
    j = dd[i];
    const mytype m = static_cast<mytype>(a[j] - a[i - 1]) / (j - i + 1);
    while (i <= j) {
      std::cout << m << "\n";
      i++;
    }
  }

  return 0;
}