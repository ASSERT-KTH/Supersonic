#include <iostream>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <cmath>
#include <ctime>

using namespace std;

#define fo(i, n) for (int i = 0; i < (n); ++i)
#define repA(i, j, n) for (int i = (j); i <= (n); ++i)
#define repD(i, j, n) for (int i = (j); i >= (n); --i)

typedef long long int lli;
typedef double mytype;

void aryanc403()
{
#ifdef ARYANC403
    clock_t time_p = clock();
    time_p = clock() - time_p;
    cerr << "Time Taken : " << (float)(time_p) / CLOCKS_PER_SEC << "\n";
#endif
}

const lli INF = 0xFFFFFFFFFFFFFFFL;

inline lli rnd(lli l = 0, lli r = INF)
{
    return uniform_int_distribution<lli>(l, r)(rng);
}

void addLine(vector<pair<lli, lli>> &c, pair<lli, lli> z)
{
    int n = c.size();
    while (n > 1)
    {
        pair<lli, lli> x = c[n - 2], y = c[n - 1];
        if ((x.second - y.second) * (z.first - y.first) >= (y.second - z.second) * (y.first - x.first))
            break;
        c.pop_back();
        n--;
    }
    c.push_back(z);
}

int main(void)
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cout << std::fixed << std::setprecision(10);
    {
        int n;
        scanf("%d", &n);
        vector<int> a(n + 1);
        a[0] = 0;
        for (int i = 1; i <= n; i++)
        {
            int in;
            scanf("%d", &in);
            a[i] = in + a[i - 1];
        }
        vector<pair<lli, lli>> c;
        vector<int> dd(n + 1, 0);
        for (int i = n; i >= 1; i--)
        {
            addLine(c, {-i, a[i]});
            int l = 0, r = c.size();
            while (r - l > 1)
            {
                int mi = (l + r) / 2;
                if (c[mi].first * (c[mi].second - c[mi - 1].second) +
                        c[mi].second * (c[mi - 1].first - c[mi].first) >=
                    a[i - 1] * (c[mi - 1].first - c[mi].first) -
                        (c[mi].second - c[mi - 1].second) * (i - 1))
                    l = mi;
                else
                    r = mi;
            }
            dd[i] = -c[l].first;
        }
        int i = 1;
        while (i <= n)
        {
            int j = dd[i];
            const mytype m = (a[j] - a[i - 1]) / (mytype)(j - i + 1);
            while (i <= j)
            {
                printf("%.9lf\n", m);
                i++;
            }
        }
    }
    aryanc403();
    return 0;
}