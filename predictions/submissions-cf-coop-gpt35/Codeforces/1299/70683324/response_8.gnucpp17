#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

void aryanc403() {
    #ifdef ARYANC403
        time_p = clock() - time_p;
        cerr << "Time Taken : " << (float)(time_p) / CLOCKS_PER_SEC << "\n";
    #endif
}

void addLine(vector<pair<int, int>>& c, pair<int, int> z) {
    int n = c.size();
    while (n > 1) {
        auto x = c[n - 2], y = c[n - 1];
        if ((x.second - y.second) * (z.first - y.first) >= (y.second - z.second) * (y.first - x.first))
            break;
        c.pop_back();
        n--;
    }
    c.emplace_back(z);
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cout << fixed << setprecision(10);

    int n;
    cin >> n;

    vector<int> a(n + 1);
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
        a[i] += a[i - 1];
    }

    vector<pair<int, int>> c;
    vector<int> dd(n + 1, 0);

    for (int i = n; i >= 1; i--) {
        addLine(c, {-i, a[i]});
        int l = 0, r = c.size();
        while (r - l > 1) {
            int mi = (l + r) / 2;
            if (c[mi].first * (c[mi].second - c[mi - 1].second) +
                c[mi].second * (c[mi - 1].first - c[mi].first) >=
                a[i - 1] * (c[mi - 1].first - c[mi].first) -
                (c[mi].second - c[mi - 1].second) * (i - 1))
                l = mi;
            else
                r = mi;
        }
        dd[i] = -c[l].first;
    }

    int i = 1;
    while (i <= n) {
        int j = dd[i];
        const double m = (a[j] - a[i - 1]) / (double)(j - i + 1);
        while (i <= j) {
            printf("%.9lf\n", m);
            i++;
        }
    }

    aryanc403();
    return 0;
}