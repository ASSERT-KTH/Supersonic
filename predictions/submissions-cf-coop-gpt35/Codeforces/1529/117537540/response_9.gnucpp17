#include <iostream>
#include <vector>
#include <limits>

const long long INF = std::numeric_limits<long long>::max();

void dijkstra(int start, const std::vector<std::vector<int>>& matrix, std::vector<long long>& cost, std::vector<bool>& marked) {
    int N = matrix.size();
    cost.assign(N, INF);
    marked.assign(N, false);
    cost[start] = 0;

    while (true) {
        int cur = -1;
        for (int j = 0; j < N; j++) {
            if (!marked[j] && (cur == -1 || cost[j] < cost[cur])) {
                cur = j;
            }
        }

        if (cur == -1) {
            break;
        }

        marked[cur] = true;

        for (int j = 0; j < N; j++) {
            int sum = cost[cur] + j;
            int next = (cur + j) % N;
            if (sum < cost[next]) {
                cost[next] = sum;
            }
        }

        for (int j = 0; j < N; j++) {
            int price = matrix[cur][j];
            int next = (j + cost[cur]) % N;
            if (cost[cur] + price < cost[next]) {
                cost[next] = cost[cur] + price;
            }
        }
    }
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);

    int N, M;
    std::cin >> N >> M;

    std::vector<std::vector<int>> matrix(N, std::vector<int>(N, INF));

    for (int i = 0; i < M; i++) {
        int a, b, c;
        std::cin >> a >> b >> c;
        matrix[a][b] = c;
    }

    for (int i = 0; i < N; i++) {
        std::vector<long long> cost;
        std::vector<bool> marked;
        dijkstra(i, matrix, cost, marked);
        
        for (int j = 0; j < N; j++) {
            std::cout << (j == i ? 0 : cost[j]) << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}