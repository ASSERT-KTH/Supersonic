#include <iostream>
#include <vector>
#include <queue>

const int INF = 1e9 + 7;

void dijkstra(int start, int N, const std::vector<std::vector<int>>& matrix) {
    std::vector<int> cost(N, INF);
    cost[start] = 0;
    
    std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, std::greater<std::pair<int, int>>> pq;
    pq.push({0, start});
    
    while (!pq.empty()) {
        int cur = pq.top().second;
        int curCost = pq.top().first;
        pq.pop();
        
        if (curCost > cost[cur]) {
            continue;
        }
        
        for (int j = 0; j < N; j++) {
            int nextCost = matrix[cur][j];
            if (cost[cur] + nextCost < cost[j]) {
                cost[j] = cost[cur] + nextCost;
                pq.push({cost[j], j});
            }
        }
    }
    
    for (int i = 0; i < N; i++) {
        if (i == start)
            std::cout << 0 << " ";
        else
            std::cout << cost[i] << " ";
    }
    std::cout << std::endl;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    
    int N, M;
    std::cin >> N >> M;
    
    std::vector<std::vector<int>> matrix(N, std::vector<int>(N, INF));
    
    for (int i = 0; i < M; i++) {
        int a, b, c;
        std::cin >> a >> b >> c;
        matrix[a][b] = c;
    }
    
    for (int i = 0; i < N; i++) {
        dijkstra(i, N, matrix);
    }
    
    return 0;
}