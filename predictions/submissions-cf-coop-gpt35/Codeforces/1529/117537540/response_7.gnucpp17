#include <iostream>
#include <vector>
#include <queue>

typedef std::pair<long, long> pii;

void setIO(std::string name, int submit) {
  if (submit) {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    freopen((name + ".in").c_str(), "r", stdin);
    freopen((name + ".out").c_str(), "w", stdout);
  } else {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
  }
}

void dijkstra(int start, const std::vector<std::vector<int>>& matrix, std::vector<long long>& dist) {
  int N = matrix.size();
  std::priority_queue<pii, std::vector<pii>, std::greater<pii>> pq;
  dist[start] = 0;
  pq.push({0, start});
  while (!pq.empty()) {
    int cur = pq.top().second;
    int cur_dist = pq.top().first;
    pq.pop();
    if (dist[cur] < cur_dist) continue;
    for (int j = 0; j < N; j++) {
      int new_dist = dist[cur] + matrix[cur][j];
      if (new_dist < dist[j]) {
        dist[j] = new_dist;
        pq.push({new_dist, j});
      }
    }
  }
}

int main() {
  setIO("", 0);
  int N, M;
  std::cin >> N >> M;
  std::vector<std::vector<int>> matrix(N, std::vector<int>(N, 1 << 30));
  std::vector<long long> dist(N, 1e18);
  for (int i = 0; i < M; i++) {
    int a, b, c;
    std::cin >> a >> b >> c;
    matrix[a][b] = c;
  }
  for (int i = 0; i < N; i++) {
    dijkstra(i, matrix, dist);
    for (int j = 0; j < N; j++) {
      if (i == j)
        std::cout << 0 << " ";
      else
        std::cout << dist[j] << " ";
    }
    std::cout << '\n';
  }
  return 0;
}