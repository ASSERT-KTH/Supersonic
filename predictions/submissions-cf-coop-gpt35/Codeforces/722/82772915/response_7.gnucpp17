#include <iostream>
#include <vector>
using namespace std;

typedef long long ll;

const int N = 5e5 + 7;

vector<ll> a(N), sum(N), fk(N);
vector<bool> vis(N);
vector<int> par(N, -1);

int root(int v) {
  return par[v] < 0 ? v : (par[v] = root(par[v]));
}

void merge(int x, int y) {
  if ((x = root(x)) == (y = root(y))) {
    return;
  }
  ll& ans = fk[root(x)];
  ans = max(ans, sum[x] + sum[y]);
  if (par[y] < par[x]) {
    swap(x, y);
  }
  par[x] += par[y];
  par[y] = x;
  sum[x] += sum[y];
}

void run() {
  int n;
  cin >> n;

  a.resize(n + 1);
  sum.resize(n + 1);
  fk.resize(n + 1);
  vis.assign(n + 1, false);
  par.assign(n + 1, -1);

  for (int i = 1; i <= n; ++i) {
    cin >> a[i];
    sum[i] = a[i];
  }

  vector<int> q(n + 1);
  for (int i = 1; i <= n; ++i) {
    cin >> q[i];
  }

  for (int i = n; i >= 1; --i) {
    fk[i] = fk[i + 1];
    vis[q[i]] = true;
    fk[i] = max(fk[i], a[q[i]]);
    if (vis[q[i] - 1]) {
      merge(q[i], q[i] - 1);
    }
    if (vis[q[i] + 1]) {
      merge(q[i], q[i] + 1);
    }
  }

  for (int i = 1; i <= n; ++i) {
    cout << fk[i] << endl;
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  int tc = 1;
  while (tc--) {
    run();
  }
  return 0;
}