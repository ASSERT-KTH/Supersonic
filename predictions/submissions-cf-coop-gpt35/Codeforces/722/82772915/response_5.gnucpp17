#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int N = 5e5 + 7;

int ans, q[N];

int root(int v) {
  return par[v] < 0 ? v : (par[v] = root(par[v]));
}

void merge(int x, int y) {
  x = root(x);
  y = root(y);
  if (x == y) return;
  ans = max(ans, sum[x] + sum[y]);
  if (par[y] < par[x]) swap(x, y);
  par[x] += par[y];
  par[y] = x;
  sum[x] += sum[y];
}

void run() {
  int n;
  cin >> n;
  
  vector<int> a(n + 1);
  for (int i = 1; i <= n; ++i) {
    cin >> a[i];
  }
  
  fill(par, par + n + 1, -1);
  
  for (int i = 1; i <= n; ++i) {
    cin >> q[i];
  }
  
  ans = 0;
  int sum = 0;
  
  for (int i = n; i >= 1; --i) {
    int fk = ans;
    ans = max(ans, a[q[i]]);
    if (q[i] - 1 >= 1 && a[q[i] - 1]) merge(q[i], q[i] - 1);
    if (q[i] + 1 <= n && a[q[i] + 1]) merge(q[i], q[i] + 1);
    cout << fk << endl;
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int tc = 1;
  
  for (int i = 0; i < tc; ++i) {
    run();
  }
  
  return 0;
}