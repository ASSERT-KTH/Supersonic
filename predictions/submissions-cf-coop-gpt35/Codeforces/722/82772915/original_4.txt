Code Analysis:
1. The code includes a large number of unnecessary macros, which make the code less readable and may potentially impact performance. These macros should be removed or minimized.
2. The code includes unnecessary headers, such as `<bits/stdc++.h>`, which includes all standard headers. It is better to include only the necessary headers to reduce compilation time and avoid namespace pollution.
3. The code uses a mix of `cin` and `cout` for I/O operations, which can be slow. It is better to use `scanf` and `printf` for faster I/O.
4. The `root()` function uses the "union-find" algorithm to find the root of a set. However, the implementation can be simplified and optimized by using path compression and union by rank.

Optimization Strategy:
1. Remove unnecessary macros to improve code readability.
2. Remove unnecessary headers and use only the necessary ones.
3. Replace `cin` and `cout` with `scanf` and `printf` for faster I/O.
4. Optimize the `root()` function by using path compression and union by rank.
5. Eliminate unnecessary variables and redundant computations.
6. Simplify the code to improve readability and maintainability.

Step-by-Step Explanation:
1. Remove unnecessary macros:
   - Remove macros that are not used in the code, such as `max3`, `min3`, `sz`, `ld`, `minpq`, etc.
   - These macros make the code less readable and do not provide significant benefits in terms of performance.

2. Remove unnecessary headers:
   - Remove the `<bits/stdc++.h>` header, as it includes all standard headers and can cause namespace pollution.
   - Include only the necessary headers, such as `<iostream>`, `<vector>`, `<algorithm>`, `<string>`, `<utility>`, and `<cmath>`.

3. Replace `cin` and `cout` with `scanf` and `printf`:
   - Replace `cin` with `scanf` for faster input.
   - Replace `cout` with `printf` for faster output.
   - Update the I/O operations in the `run()` function accordingly.

4. Optimize the `root()` function:
   - Modify the `root()` function to use path compression and union by rank.
   - Path compression: During the find operation, update the parent of each visited node to the root.
   - Union by rank: Merge the smaller set into the larger set to minimize the height of the resulting tree.

5. Eliminate unnecessary variables and redundant computations:
   - Remove the `prec()` function, as it is empty and serves no purpose.
   - Remove the `fill()` function, as it is not used in the code.

6. Simplify the code:
   - Remove redundant comments and unnecessary spacing.
   - Simplify the logic of the `run()` function for better readability.

Optimized Code:

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <utility>
#include <cmath>
using namespace std;

const int N = 5e5 + 7;

int ans, a[N], vis[N], sum[N], fk[N], q[N];
int siz[N], par[N];

int root(int v) {
    if (par[v] < 0) return v;
    return (par[v] = root(par[v])); // Path compression
}

void merge(int x, int y) {
    if ((x = root(x)) == (y = root(y))) return;
    ans = max(ans, sum[x] + sum[y]);
    if (par[y] < par[x]) swap(x, y);
    par[x] += par[y];
    par[y] = x;
    sum[x] += sum[y];
}

void run() {
    int n;
    scanf("%d", &n);
    
    for (int i = 1; i <= n; ++i) {
        scanf("%d", &a[i]);
        sum[i] = a[i];
    }
    
    for (int i = 1; i <= n; ++i) {
        par[i] = -1;
    }
    
    for (int i = 1; i <= n; ++i) {
        scanf("%d", &q[i]);
        vis[q[i]] = 1;
    }
    
    ans = 0;
    
    for (int i = n; i >= 1; --i) {
        fk[i] = ans;
        ans = max(ans, a[q[i]]);
        if (vis[q[i] - 1]) merge(q[i], q[i] - 1);
        if (vis[q[i] + 1]) merge(q[i], q[i] + 1);
    }
    
    for (int i = 1; i <= n; ++i) {
        printf("%d\n", fk[i]);
    }
}

int main() {
    int tc = 1;
    
    for (int i = 0; i < tc; ++i) {
        run();
    }
    
    return 0;
}
```

This optimized code eliminates unnecessary macros, removes unnecessary headers, replaces `cin` and `cout` with `scanf` and `printf`, optimizes the `root()` function, eliminates unnecessary variables and redundant computations, and simplifies the code for improved readability.