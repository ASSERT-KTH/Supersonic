#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_set>
using namespace std;

const int N = 5e5 + 7;

void merge(vector<int>& par, vector<int>& sum, int x, int y, int& ans) {
    if ((x = par[x]) == (y = par[y]))
        return;
    ans = max(ans, sum[x] + sum[y]);
    if (par[y] < par[x])
        swap(x, y);
    par[x] += par[y];
    par[y] = x;
    sum[x] += sum[y];
}

void run() {
    int n;
    cin >> n;

    vector<int> a(n + 1);
    vector<int> sum(n + 1);
    vector<int> par(n + 1, -1);
    vector<int> q(n + 1);
    vector<int> vis(n + 1, 0);
    vector<int> fk(n + 1);

    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
        sum[i] = a[i];
    }

    for (int i = 1; i <= n; ++i)
        cin >> q[i];

    int ans = 0;

    for (int i = n; i >= 1; --i) {
        fk[i] = ans;
        vis[q[i]] = 1;
        ans = max(ans, a[q[i]]);
        if (vis[q[i] - 1])
            merge(par, sum, q[i], q[i] - 1, ans);
        if (vis[q[i] + 1])
            merge(par, sum, q[i], q[i] + 1, ans);
    }

    for (int i = 1; i <= n; ++i)
        cout << fk[i] << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    int tc = 1;
    for (int i = 0; i < tc; ++i)
        run();
    return 0;
}