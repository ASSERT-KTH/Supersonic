#include <iostream>
#include <chrono>

#ifdef PERVEEVM_LOCAL
#define debug(x) std::cerr << (#x) << ":\t" << (x) << std::endl
#else
#define debug(x) 238;
#endif

#define NAME "File"

using ll = long long;
using ld = long double;

#ifdef PERVEEVM_LOCAL
std::mt19937 rnd(238);
#else
std::mt19937 rnd(std::chrono::high_resolution_clock::now().time_since_epoch().count());
#endif

const double PI = atan2(0.0, -1.0);
const int INF = 0x3f3f3f3f;
const ll LINF = (ll)2e18;
const int N = 10100;

ll gcd(ll a, ll b) {
  if (b == 0) {
    return a;
  }
  return gcd(b, a % b);
}

ll lcm(ll a, ll b) {
  ll d = gcd(a, b);
  a /= d;
  if (a > LINF / b) {
    std::cout << "NO" << std::endl;
    exit(0);
  }
  return a * b;
}

ll gcdEx(ll a, ll b, ll &x, ll &y) {
  x = 1;
  y = 0;
  ll x1 = 0, y1 = 1, d = b;
  while (b) {
    ll q = a / b;
    std::tie(x, x1) = std::make_tuple(x1, x - q * x1);
    std::tie(y, y1) = std::make_tuple(y1, y - q * y1);
    std::tie(a, b) = std::make_tuple(b, a - q * b);
  }
  return d;
}

ll binmul(ll a, ll b, ll mod) {
  ll res = 0;
  while (b) {
    if (b & 1) {
      res = (res + a) % mod;
    }
    a = (a + a) % mod;
    b >>= 1;
  }
  return res;
}

ll solve(ll r1, ll mod1, ll r2, ll mod2) {
  ll g = gcd(mod1, mod2);
  if (r1 % g != r2 % g) {
    std::cout << "NO" << std::endl;
    exit(0);
  }
  ll a = mod1 / g;
  ll b = (r2 - r1) / g;
  ll c = mod2 / g;
  ll x, y;
  gcdEx(a, c, x, y);
  x = (x % c + c) % c;
  ll k = binmul(b, x, c);
  ll ans = (r1 + k * mod1) % lcm(mod1, mod2);
  return ans;
}

void run() {
  ll n, m;
  int k;
  std::cin >> n >> m >> k;
  ll a[N];
  for (int i = 0; i < k; ++i) {
    std::cin >> a[i];
  }
  ll l = a[0];
  for (int i = 1; i < k; ++i) {
    l = lcm(l, a[i]);
  }
  if (l > n) {
    std::cout << "NO" << std::endl;
    return;
  }
  std::pair<ll, ll> eq[N];
  for (int i = 0; i < k; ++i) {
    eq[i].second = a[i];
    eq[i].first = ((-i) % a[i] + a[i]) % a[i];
  }
  ll r1 = eq[0].first;
  ll mod1 = eq[0].second;
  for (int i = 1; i < k; ++i) {
    ll curMod = lcm(mod1, eq[i].second);
    ll curR = solve(r1, mod1, eq[i].first, eq[i].second);
    r1 = (curR % curMod + curMod) % curMod;
    mod1 = curMod;
  }
  if (r1 == 0) {
    r1 += mod1;
  }
  if (r1 + k - 1 > m) {
    std::cout << "NO" << std::endl;
    return;
  }
  for (int i = 0; i < k; ++i) {
    if (gcd(l, r1 + i) != a[i]) {
      std::cout << "NO" << std::endl;
      return;
    }
  }
  std::cout << "YES" << std::endl;
}

int main(void) {
  auto start = std::chrono::high_resolution_clock::now();
  run();
  auto end = std::chrono::high_resolution_clock::now();
#ifdef PERVEEVM_LOCAL
  std::cerr << "Execution time: "
            << std::chrono::duration_cast<std::chrono::milliseconds>(end -
                                                                     start)
                   .count()
            << " ms" << std::endl;
#endif
  return 0;
}