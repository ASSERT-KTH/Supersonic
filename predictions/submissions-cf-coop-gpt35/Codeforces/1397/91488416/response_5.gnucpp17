#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;
using ll = long long;
const unsigned int MOD = 1000000007;
const ll INF = 1e18;

void testcase();

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  testcase();

  return 0;
}

void testcase() {
  int n;
  cin >> n;
  vector<ll> vec;
  vec.reserve(n);
  ll sum = 0;

  for (int i = 0; i < n; i++) {
    ll temp;
    cin >> temp;
    vec.push_back(temp);
    sum += temp;
  }

  sort(vec.begin(), vec.end());

  ll c = 1;
  ll newcount = 0;
  ll count = 576460752303423487;
  unsigned int counter = static_cast<unsigned int>(pow(vec[n - 1], 1.0 / (n - 1))) + n;

  for (unsigned int i = 0; i < counter; i++) {
    newcount = 0;
    ll xx = 1;

    for (int j = 0; j < n; j++) {
      newcount += abs(xx - vec[j]);
      xx *= xx;
      if (newcount > count)
        break;
    }

    if (newcount < count)
      count = newcount;

    newcount = 0;
    if (count == 0)
      break;

    c++;
    xx *= c;
  }

  if (sum - n < count) {
    count = n;
  }

  if (sum < count) {
    count = sum;
  }

  cout << count << endl;
}