#include <iostream>
#include <cmath>
using namespace std;

using ll = long long;
const unsigned int MOD = 1000000007;
const ll INF = 1e18;

void testcase() {
  int n;
  cin >> n;

  ll sum = 0;
  ll maxVal = 0;

  for (int i = 0; i < n; i++) {
    ll temp;
    cin >> temp;
    sum += temp;
    maxVal = max(maxVal, temp);
  }

  ll count = INF;

  // Calculate the maximum possible value for counter
  ll counter = maxVal + n + 1;

  ll c = 1;

  // Loop through all possible values of c
  while (c < counter) {
    ll newcount = 0;
    ll xx = 1;

    for (int i = 0; i < n; i++) {
      newcount += abs(xx - maxVal);
      xx *= c;

      // If the current newcount is already greater than count, break out of the loop
      if (newcount > count) {
        break;
      }
    }

    // If the newcount is less than count, update count
    if (newcount < count) {
      count = newcount;
    }

    c++;
  }

  // Check if sum - n is less than count, update count if true
  if (sum - n < count) {
    count = n;
  }

  // Check if sum is less than count, update count if true
  if (sum < count) {
    count = sum;
  }

  cout << count << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  int t = 1;
  while (t--) {
    testcase();
  }

  return 0;
}