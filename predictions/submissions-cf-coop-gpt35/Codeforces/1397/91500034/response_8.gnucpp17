#include <iostream>
#include <algorithm>
#include <cmath>
#include <vector>

using namespace std;

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int n;
  cin >> n;

  vector<int> a(n);
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }

  sort(a.begin(), a.end());

  // Pre-calculate powers of c up to n
  vector<long long> powers(n);
  for (int i = 0; i < n; i++) {
    powers[i] = pow(a[n-1], i);
  }

  long long ans = 1e18; // Initialize ans with a large value

  // Binary search to find the minimum sum
  int low = 1, high = a[n-1];
  while (low <= high) {
    int mid = (low + high) / 2;

    long long sum = 0;
    for (int i = 0; i < n; i++) {
      sum += abs(powers[i] - a[i]);
    }

    ans = min(ans, sum);

    if (powers[n-1] < mid) {
      low = mid + 1;
    } else {
      high = mid - 1;
    }
  }

  cout << ans << endl;

  return 0;
}