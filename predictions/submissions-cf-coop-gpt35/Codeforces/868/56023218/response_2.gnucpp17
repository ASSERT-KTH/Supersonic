#include <iostream>
#include <vector>
#include <functional>
#include <algorithm>
using namespace std;
using ll = long long;

// Optimized cf190div1E Problem
ll cf190div1E_optimized(ll n, ll k, const vector<vector<ll>>& u) {
    vector<vector<ll>> W(n, vector<ll>(n, 0));
    for (ll w = 1; w <= n; ++w) {
        for (ll l = 0, r = l + w; r < n; ++l, ++r) {
            W[l][r] = u[l][r];
            if (w >= 2)
                W[l][r] += W[l + 1][r] + W[l][r - 1] - W[l + 1][r - 1];
        }
    }
    vector<vector<ll>> dp(k, vector<ll>(n, 0));
    for (ll i = 0; i < n; ++i)
        dp[0][i] = W[0][i];
    for (ll i = 1; i < k; ++i) {
        for (ll l = 0; l < n; ++l) {
            dp[i][l] = dp[i - 1][l];
            for (ll r = 0; r < l; ++r) {
                dp[i][l] = min(dp[i][l], dp[i - 1][r] + W[r + 1][l]);
            }
        }
    }
    return dp[k - 1][n - 1];
}

// Optimized cf438F Problem
ll cf438F_optimized(ll N, ll K, const vector<ll>& A) {
    ll L = 0, R = 0, sum = 1;
    vector<ll> appear(100010, 0);
    appear[A[0]] = 1;
    auto add = [&](ll idx) { sum += appear[A[idx]]++; };
    auto del = [&](ll idx) { sum -= --appear[A[idx]]; };
    for (ll l = 0; l < K - 1; ++l)
        add(++R);
    ll result = sum;
    for (ll r = K - 1; r < N; ++r) {
        add(++R);
        result = max(result, sum);
        del(L++);
    }
    return result;
}

int main() {
    ll N, K;
    cin >> N >> K;
    vector<ll> A(N);
    for (ll i = 0; i < N; ++i) {
        cin >> A[i];
        --A[i];
    }
    ll result = cf438F_optimized(N, K, A);
    cout << result << endl;
    return 0;
}