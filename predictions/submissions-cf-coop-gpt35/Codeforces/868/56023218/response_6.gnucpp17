#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>

using namespace std;

int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};

int INF = 1 << 30;
long long LLINF = 1LL << 60;
int MOD = 1000000007;

template <typename T, typename Compare = less<T>>
vector<vector<T>> divide_and_conquer(int h, int w, const function<T(int, int)>& f, const Compare& comp = Compare()) {
    T inf = numeric_limits<T>::max() / 10;
    vector<T> dp(w, inf);
    for (int i = 0; i < w; ++i) {
        dp[i] = f(0, i);
    }
    for (int i = 1; i < h; ++i) {
        vector<T> new_dp(w, inf);
        for (int j = 0; j < w; ++j) {
            T cost = inf;
            for (int k = 0; k < j; ++k) {
                cost = min(cost, dp[k] + f(k + 1, j));
            }
            new_dp[j] = cost;
        }
        dp = new_dp;
    }
    vector<vector<T>> result(h, vector<T>(w));
    for (int i = 0; i < h; ++i) {
        for (int j = 0; j < w; ++j) {
            result[i][j] = dp[j];
        }
    }
    return result;
}

void solve() {
    int N, K;
    cin >> N >> K;
    vector<int> A(N);
    for (int i = 0; i < N; ++i) {
        cin >> A[i];
        --A[i];
    }
    int L = 0, R = 0, sum = 0;
    vector<int> appear(100010);
    appear[A[0]]++;
    auto add = [&](int idx) { sum += appear[A[idx]]++; };
    auto del = [&](int idx) { sum -= --appear[A[idx]]; };
    function<int(int, int)> f = [&](int l, int r) {
        while (L > l)
            add(--L);
        while (L < l)
            del(L++);
        while (R < r)
            add(++R);
        while (R > r)
            del(R--);
        return sum;
    };
    auto dp = divide_and_conquer(K, N, f);
    cout << dp[K - 1][N - 1] << endl;
}

int main(void) {
    solve();
    return 0;
}