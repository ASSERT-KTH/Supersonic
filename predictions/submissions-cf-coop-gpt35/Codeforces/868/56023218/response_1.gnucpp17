#include <iostream>
#include <vector>
#include <limits>
#include <functional>

using namespace std;

const int INF = numeric_limits<int>::max() / 10;
const int MOD = 1000000007;

vector<vector<int>> divide_and_conquer(int h, int w, const function<int(int, int)>& f) {
    vector<vector<int>> dp(h, vector<int>(w, INF));
    function<void(int, int, int, int, int)> dfs = [&](int i, int l, int r, int optl, int optr) {
        if (l > r)
            return;
        int mid = (l + r) / 2, optm = -1;
        for (int j = optl; j <= min(mid, optr); ++j) {
            int cost = dp[i][j] + f(j + 1, mid);
            if (cost < dp[i + 1][mid]) {
                dp[i + 1][mid] = cost;
                optm = j;
            }
        }
        dfs(i, l, mid - 1, optl, optm);
        dfs(i, mid + 1, r, optm, optr);
    };

    for (int i = 0; i < w; ++i)
        dp[0][i] = f(0, i);

    for (int i = 1; i < h; ++i)
        for (int j = 0; j < w; ++j)
            dp[i][j] = INF;

    for (int i = 0; i < h - 1; ++i)
        dfs(i, 0, w - 1, 0, w - 1);

    return dp;
}

void solve() {
    int n, k;
    cin >> n >> k;
    vector<vector<int>> u(n, vector<int>(n));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            char c;
            cin >> c;
            u[i][j] = c - '0';
        }
    }

    vector<vector<int>> W(n, vector<int>(n));
    for (int w = 1; w <= n; ++w) {
        for (int l = 0, r = l + w; r < n; ++l, ++r) {
            W[l][r] = u[l][r];
            if (w >= 2)
                W[l][r] += W[l + 1][r] + W[l][r - 1] - W[l + 1][r - 1];
        }
    }

    auto f = [&](int i, int j) { return W[i][j]; };
    auto dp = divide_and_conquer(k, n, f);
    cout << dp[k - 1][n - 1] << endl;
}

int main() {
    solve();
    return 0;
}