#include <iostream>
#include <vector>
#include <limits>
#include <functional>
#include <algorithm>

typedef long long ll;

template <typename T, typename Compare = std::less<T>>
std::vector<std::vector<T>> divide_and_conquer(ll h, ll w, const std::function<T(ll, ll)> &f,
                                     const Compare &comp = Compare()) {
  const T inf = std::numeric_limits<T>::max() / 10;
  std::vector<std::vector<T>> dp(h, std::vector<T>(w, inf));
  std::function<void(ll, ll, ll, ll, ll)> dfs = [&](ll i, ll l, ll r, ll optl,
                                               ll optr) {
    if (l > r)
      return;
    ll mid = (l + r) / 2, optm = -1;
    for (ll j = optl; j <= std::min(mid, optr); ++j) {
      T cost = dp[i][j] + f(j + 1, mid);
      if (comp(cost, dp[i + 1][mid])) {
        dp[i + 1][mid] = cost;
        optm = j;
      }
    }
    dfs(i, l, mid - 1, optl, optm);
    dfs(i, mid + 1, r, optm, optr);
  };
  for (ll i = 0; i < w; i++) dp[0][i] = f(0, i);
  for (ll i = 1; i < h; i++) {
    for (ll j = 0; j < w; j++) {
      dp[i][j] = inf;
    }
  }
  for (ll i = 0; i < h - 1; i++) {
    dfs(i, 0, w - 1, 0, w - 1);
  }
  return dp;
}

namespace cf438F {
void solve() {
  ll N, K;
  std::cin >> N >> K;
  std::vector<ll> A(N);
  for (ll i = 0; i < N; i++) {
    std::cin >> A[i];
    --A[i];
  }
  ll L = 0, R = 0, sum = 0;
  std::vector<ll> appear(100010);
  appear[A[0]]++;
  auto add = [&](ll idx) { sum += appear[A[idx]]++; };
  auto del = [&](ll idx) { sum -= --appear[A[idx]]; };
  std::function<ll(ll, ll)> f = [&](ll l, ll r) {
    while (L > l)
      add(--L);
    while (L < l)
      del(L++);
    while (R < r)
      add(++R);
    while (R > r)
      del(R--);
    return sum;
  };
  auto dp = divide_and_conquer(K, N, f);
  std::cout << dp[K - 1][N - 1] << std::endl;
}
} // namespace cf438F

int main(void) {
  cf438F::solve();
  return 0;
}