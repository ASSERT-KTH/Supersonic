#include <iostream>
#include <vector>
#include <functional>
#include <limits>
#include <algorithm>

using ll = long long;
using PII = std::pair<ll, ll>;

template <typename T>
T &chmin(T &a, const T &b) { return a = std::min(a, b); }

template <typename T>
T &chmax(T &a, const T &b) { return a = std::max(a, b); }

template <class T, class S>
std::ostream &operator<<(std::ostream &out, const std::pair<T, S> &a) {
  out << '(' << a.first << ',' << a.second << ')';
  return out;
}

template <class T>
std::ostream &operator<<(std::ostream &out, const std::vector<T> &a) {
  out << '[';
  for (const T &i : a)
    out << i << ',';
  out << ']';
  return out;
}

int dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};
const int INF = 1 << 30;
const ll LLINF = 1LL << 60;
const ll MOD = 1000000007;

std::vector<std::vector<ll>> divide_and_conquer(ll h, ll w, const std::function<ll(ll, ll)> &f) {
  const ll inf = std::numeric_limits<ll>::max() / 10;
  std::vector<std::vector<ll>> dp(h, std::vector<ll>(w, inf));
  std::function<void(ll, ll, ll, ll, ll)> dfs = [&](ll i, ll l, ll r, ll optl, ll optr) {
    if (l > r)
      return;
    ll mid = (l + r) / 2, optm = -1;
    for (ll j = optl; j <= std::min(mid, optr); ++j) {
      ll cost = dp[i][j] + f(j + 1, mid);
      if (cost < dp[i + 1][mid]) {
        dp[i + 1][mid] = cost;
        optm = j;
      }
    }
    dfs(i, l, mid - 1, optl, optm);
    dfs(i, mid + 1, r, optm, optr);
  };
  for (ll i = 0; i < w; ++i) dp[0][i] = f(0, i);
  for (ll i = 1; i < h; ++i) {
    for (ll j = 0; j < w; ++j) {
      dp[i][j] = inf;
    }
  }
  for (ll i = 0; i < h - 1; ++i) {
    dfs(i, 0, w - 1, 0, w - 1);
  }
  return dp;
}

namespace cf190div1E {
void solve() {
  int n, k;
  std::cin >> n >> k;
  std::vector<std::vector<int>> u(n, std::vector<int>(n));
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < n; ++j) {
      std::cin >> u[i][j];
    }
  }
  std::vector<std::vector<int>> W(n, std::vector<int>(n));
  for (int w = 1; w <= n; ++w) {
    for (int l = 0, r = l + w; r < n; ++l, ++r) {
      W[l][r] = u[l][r];
      if (w >= 2) {
        W[l][r] += W[l + 1][r] + W[l][r - 1] - W[l + 1][r - 1];
      }
    }
  }
  auto f = [&](ll i, ll j) { return W[i][j]; };
  auto dp = divide_and_conquer<ll>(k, n, f);
  std::cout << dp[k - 1][n - 1] << '\n';
}
} // namespace cf190div1E

namespace cf438F {
void solve() {
  int N, K;
  std::cin >> N >> K;
  std::vector<int> A(N);
  for (int i = 0; i < N; ++i) {
    std::cin >> A[i];
    --A[i];
  }
  int L = 0, R = 0, sum = 0;
  std::vector<int> appear(100010);
  appear[A[0]]++;
  auto add = [&](int idx) { sum += appear[A[idx]]++; };
  auto del = [&](int idx) { sum -= --appear[A[idx]]; };
  std::function<int(int, int)> f = [&](int l, int r) {
    while (L > l)
      add(--L);
    while (L < l)
      del(L++);
    while (R < r)
      add(++R);
    while (R > r)
      del(R--);
    return sum;
  };
  auto dp = divide_and_conquer(K, N, f);
  std::cout << dp[K - 1][N - 1] << '\n';
}
} // namespace cf438F

int main() {
  cf438F::solve();
  return 0;
}