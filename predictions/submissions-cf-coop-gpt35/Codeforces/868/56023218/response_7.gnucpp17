template <typename T, typename Compare = less<T>>
vector<vector<T>> divide_and_conquer(ll h, ll w, const function<T(ll, ll)> &f,
                                     const Compare &comp = Compare()) {
  const T inf = numeric_limits<T>::max() / 10;
  vector<vector<T>> dp(h, vector<T>(w, inf));
  
  for (int i = 0; i < w; i++) {
    dp[0][i] = f(0, i);
  }

  for (int i = 1; i < h; i++) {
    for (int j = 0; j < w; j++) {
      dp[i][j] = inf;
    }
  }

  for (int i = 0; i < h - 1; i++) {
    for (int l = 0; l < w - 1; l++) {
      for (int r = l + 1; r < w; r++) {
        ll mid = (l + r) / 2, optm = -1;
        for (int j = 0; j <= min(mid, w - 1); j++) {
          T cost = dp[i][j] + f(j + 1, mid);
          if (comp(cost, dp[i + 1][mid])) {
            dp[i + 1][mid] = cost;
            optm = j;
          }
        }
        l = r;
      }
    }
  }

  return dp;
}