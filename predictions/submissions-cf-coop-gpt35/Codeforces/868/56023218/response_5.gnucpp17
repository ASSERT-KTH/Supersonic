#include <iostream>
#include <vector>
using namespace std;

template <typename T>
T &chmin(T &a, const T &b) { return a = min(a, b); }

template <typename T>
T &chmax(T &a, const T &b) { return a = max(a, b); }

int dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};

template <typename T, typename Compare = less<T>>
vector<vector<T>> divide_and_conquer(ll h, ll w, const function<T(ll, ll)> &f,
                                     const Compare &comp = Compare()) {
  const T inf = numeric_limits<T>::max() / 10;
  vector<vector<T>> dp(h, vector<T>(w, inf));
  for (ll i = 0; i < w; ++i) {
    dp[0][i] = f(0, i);
  }
  for (ll i = 1; i < h; ++i) {
    for (ll j = 0; j < w; ++j) {
      dp[i][j] = inf;
    }
  }
  for (ll i = 0; i < h - 1; ++i) {
    ll l = 0, r = w - 1;
    ll optl = 0, optr = w - 1;
    while (l <= r) {
      ll mid = (l + r) / 2;
      ll optm = -1;
      for (ll j = optl; j <= min(mid, optr); ++j) {
        T cost = dp[i][j] + f(j + 1, mid);
        if (comp(cost, dp[i + 1][mid])) {
          dp[i + 1][mid] = cost;
          optm = j;
        }
      }
      if (mid > l) {
        r = mid - 1;
        optr = optm;
      }
      if (mid < r) {
        l = mid + 1;
        optl = optm;
      }
    }
  }
  return dp;
}

namespace cf190div1E {
int u[4010][4010], W[4010][4010];

void solve() {
  int n, k;
  scanf("%d %d ", &n, &k);
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < n; ++j) {
      u[i][j] = getchar() - '0';
      getchar();
    }
  }
  for (int w = 1; w <= n; ++w) {
    for (int l = 0, r = l + w; r < n; ++l, ++r) {
      W[l][r] = u[l][r];
      if (w >= 2)
        W[l][r] += W[l + 1][r] + W[l][r - 1] - W[l + 1][r - 1];
    }
  }
  auto f = [&](ll i, ll j) { return W[i][j]; };
  auto dp = divide_and_conquer<ll>(k, n, f);
  cout << dp[k - 1][n - 1] << endl;
}
} // namespace cf190div1E

namespace cf438F {
void solve() {
  ll N, K;
  cin >> N >> K;
  vector<ll> A(N);
  for (int i = 0; i < N; ++i) {
    cin >> A[i];
    --A[i];
  }
  ll L = 0, R = 0, sum = 0;
  vector<ll> appear(100010);
  appear[A[0]]++;
  auto add = [&](ll idx) { sum += appear[A[idx]]++; };
  auto del = [&](ll idx) { sum -= --appear[A[idx]]; };
  auto f = [&](ll l, ll r) {
    while (L > l)
      add(--L);
    while (L < l)
      del(L++);
    while (R < r)
      add(++R);
    while (R > r)
      del(R--);
    return sum;
  };
  auto dp = divide_and_conquer(K, N, f);
  cout << dp[K - 1][N - 1] << endl;
}
} // namespace cf438F

signed main(void) {
  cf438F::solve();
  return 0;
}