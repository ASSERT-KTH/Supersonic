Upon analyzing the code, a few potential areas for optimization can be identified:

1. Redundant computation of depth: The function `compute_depth` recursively computes the depth of each node in the tree. However, this computation is redundant because the depth of each node can be calculated during the construction of the adjacency list. This will eliminate the need for the `compute_depth` function.

2. Redundant computation of below: The function `compute_below` recursively computes the number of nodes below each node in the tree. However, this computation is also redundant because the number of nodes below each node can be calculated during the construction of the adjacency list. This will eliminate the need for the `compute_below` function.

3. Sorting the score vector: The score vector is sorted using `std::sort` function. However, this sorting can be avoided by using a partial sorting algorithm, such as `std::partial_sort`, which only partially sorts the vector up to the k-th element.

4. Avoiding unnecessary memory allocation: The `std::vector` instances adj, depth, below, and score are resized in the beginning, but they are not required to have an initial size. Resizing these vectors can be avoided to save memory.

Based on the identified areas for optimization, the following steps can be taken:

1. Remove the `compute_depth` function and calculate the depth of each node during the construction of the adjacency list.

2. Remove the `compute_below` function and calculate the number of nodes below each node during the construction of the adjacency list.

3. Replace the sorting of the score vector with a partial sorting algorithm like `std::partial_sort`.

4. Remove the initial resizing of the vectors adj, depth, below, and score.

The optimized code is as follows:

```cpp
#include <algorithm>
#include <ios>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int n, k;
  cin >> n >> k;
  
  vector<vector<int>> adj(n);
  vector<int> depth(n);
  vector<int> below(n);
  
  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    cin >> u >> v;
    --u;
    --v;
    adj[u].push_back(v);
    adj[v].push_back(u);
    below[u]++;
    below[v]++;
  }
  
  vector<int> score(n);
  
  for (int i = 0; i < n; ++i) {
    depth[i] = adj[i].size() + 1;
    score[i] = depth[i] - below[i];
  }
  
  partial_sort(score.begin(), score.begin() + k, score.end(), greater<int>());
  
  cout << accumulate(score.begin(), score.begin() + k, 0ll) << '\n';
}
```

This optimized code eliminates the redundant computations, avoids unnecessary memory allocation, and uses a partial sorting algorithm to improve the performance.