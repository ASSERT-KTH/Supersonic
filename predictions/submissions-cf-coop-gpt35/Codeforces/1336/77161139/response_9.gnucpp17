#include <algorithm>
#include <ios>
#include <iostream>
#include <numeric>
#include <stack>
#include <vector>
using namespace std;

void compute_depth(vector<vector<int>>& adj, vector<int>& depth) {
  vector<bool> visited(depth.size(), false);
  stack<int> st;
  st.push(0);

  while (!st.empty()) {
    int u = st.top();
    st.pop();

    if (visited[u]) {
      continue;
    }

    visited[u] = true;

    for (int v : adj[u]) {
      if (!visited[v]) {
        depth[v] = depth[u] + 1;
        st.push(v);
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  int n, k;
  cin >> n >> k;

  vector<vector<int>> adj(n);
  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    std::cin >> u >> v;
    --u;
    --v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }

  vector<int> depth(n);
  compute_depth(adj, depth);

  vector<int> score(n);
  for (int i = 0; i < n; ++i) {
    score[i] = depth[i] - adj[i].size();
  }

  partial_sort(score.begin(), score.begin() + k, score.end(), greater<int>());
  cout << accumulate(score.begin(), score.begin() + k, 0ll) << '\n';
}