#include <algorithm>
#include <ios>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;

void compute_depth(int u, int p, const vector<vector<int>>& adj, vector<int>& depth) {
  int n = adj.size();
  for (int i = 0; i < n; ++i) {
    int u = i;
    int p = -1;
    while (true) {
      for (int v : adj[u]) {
        if (v != p) {
          depth[v] = depth[u] + 1;
          p = u;
          u = v;
          break;
        }
      }
      if (u == i) {
        break;
      }
    }
  }
}

void compute_below(int u, int p, const vector<vector<int>>& adj, vector<int>& below) {
  int n = adj.size();
  for (int i = 0; i < n; ++i) {
    int u = i;
    int p = -1;
    while (true) {
      for (int v : adj[u]) {
        if (v != p) {
          p = u;
          u = v;
          break;
        }
      }
      if (u == i) {
        break;
      }
      below[i] += below[u] + 1;
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  #pragma GCC optimize("O3")

  int n, k;
  cin >> n >> k;

  vector<vector<int>> adj(n);
  adj.reserve(n);
  vector<int> depth(n);
  depth.resize(n);
  vector<int> below(n);
  below.resize(n);
  vector<int> score(n);
  score.resize(n);

  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    cin >> u >> v;
    --u;
    --v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }

  compute_depth(0, -1, adj, depth);
  compute_below(0, -1, adj, below);

  for (int i = 0; i < n; ++i) {
    score[i] = depth[i] - below[i];
  }

  sort(score.begin(), score.end(), greater<int>());

  long long sum = accumulate(score.begin(), score.begin() + k, 0ll);
  cout << sum << '\n';

  return 0;
}