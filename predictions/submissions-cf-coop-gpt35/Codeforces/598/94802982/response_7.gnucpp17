#include <bits/stdc++.h>
using namespace std;
#define int long long
#define endl '\n';
const int nmmx = 31, kmx = 51;
unordered_map<string, int> dp; // Efficient data structure

int solve(int n, int m, int k) {
  string key = to_string(n) + "_" + to_string(m) + "_" + to_string(k);
  if (dp.find(key) != dp.end()) { // Check if result already present in dp
    return dp[key];
  }

  int ans = 1e18;
  if (n * m == k || !k) {
    ans = 0;
  } else {
    for (int i = 1; i <= n - 1; ++i) {
      for (int j = 0; j <= k; ++j) {
        ans = min(ans, m * m + solve(i, m, j) + solve(n - i, m, k - j));
      }
    }
    for (int i = 1; i <= m - 1; ++i) {
      for (int j = 0; j <= k; ++j) {
        ans = min(ans, n * n + solve(n, i, j) + solve(n, m - i, k - j));
      }
    }
  }

  dp[key] = ans; // Memoize the result
  return ans;
}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  dp.clear(); // Clear the hash table
  dp["0_0_0"] = 0; // Base case
  int t;
  cin >> t;
  while (t--) {
    int n, m, k;
    cin >> n >> m >> k;
    cout << solve(n, m, k) << endl;
  }
  return 0;
}