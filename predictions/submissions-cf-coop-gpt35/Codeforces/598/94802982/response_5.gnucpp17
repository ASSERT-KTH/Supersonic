#include <iostream>
#include <cstring>
typedef long long ll;
const int nmmx = 31, kmx = 51;
ll dp[nmmx][nmmx];
ll solve(int n, int m, int k) {
  ll &ans = dp[n][m];
  if (ans != -1)
    return ans;
  if (k == 0)
    return ans = 0;
  if (n * m == k)
    return ans = 0;
  ans = 1e18;
  int temp;
  for (int i = n - 1; i >= 1; --i) {
    for (int j = 0; j <= k; ++j) {
      temp = m * m + dp[i][m][j] + dp[n - i][m][k - j];
      ans = std::min(ans, temp);
      temp = m * m + dp[i][m][j-1] + dp[n - i][m][k - j+1];
      ans = std::min(ans, temp);
      temp = m * m + dp[i][m][j-2] + dp[n - i][m][k - j+2];
      ans = std::min(ans, temp);
      // ... Repeat for more iterations if needed
    }
  }
  for (int i = m - 1; i >= 1; --i) {
    for (int j = 0; j <= k; ++j) {
      temp = n * n + dp[n][i][j] + dp[n][m - i][k - j];
      ans = std::min(ans, temp);
      temp = n * n + dp[n][i][j-1] + dp[n][m - i][k - j+1];
      ans = std::min(ans, temp);
      temp = n * n + dp[n][i][j-2] + dp[n][m - i][k - j+2];
      ans = std::min(ans, temp);
      // ... Repeat for more iterations if needed
    }
  }
  return ans;
}
int main(int argc, char* argv[]) {
  std::memset(dp, -1, sizeof(dp[0][0]) * (nmmx) * (nmmx));
  solve(30, 30, 50);
  ll t = atoi(argv[1]);
  for (int t_case = 0; t_case < t; ++t_case) {
    ll n = atoi(argv[2 + 3 * t_case]);
    ll m = atoi(argv[3 + 3 * t_case]);
    ll k = atoi(argv[4 + 3 * t_case]);
    std::cout << solve(n, m, k) << std::endl;
  }
  return 0;
}