#include <iostream>
#include <unordered_set>
#include <vector>
using namespace std;
typedef long long int64;

int main() {
  int n;
  int64 S;
  cin >> n >> S;
  S *= 2L;
  vector<int64> x(n), y(n);
  for (int i = 0; i < n; ++i) {
    cin >> x[i] >> y[i];
  }
  unordered_set<int64> hashSet;
  for (int i = 0; i < n; ++i) {
    for (int j = i + 1; j < n; ++j) {
      int64 Nx = x[j] - x[i];
      int64 Ny = y[j] - y[i];
      int64 t = Nx * y[i] - Ny * x[i];
      if (hashSet.count(S - t) || hashSet.count(-S - t)) {
        cout << "Yes\n";
        cout << x[i] << " " << y[i] << "\n";
        cout << x[j] << " " << y[j] << "\n";
        for (int k = 0; k < n; ++k) {
          if (k != i && k != j) {
            if (Nx * y[k] - Ny * x[k] == S - t || Nx * y[k] - Ny * x[k] == -S - t) {
              cout << x[k] << " " << y[k] << "\n";
              break;
            }
          }
        }
        return 0;
      }
      hashSet.insert(t);
    }
  }
  cout << "No\n";
  return 0;
}