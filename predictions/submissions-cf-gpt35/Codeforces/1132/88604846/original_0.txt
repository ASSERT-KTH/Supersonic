```cpp
#include <iostream>
#include <vector>
#include <algorithm>

const long long INF64 = 1e18;

bool check(const std::vector<long long>& a, const std::vector<int>& b, int k, long long x) {
    int n = a.size();
    std::vector<std::vector<int>> qr(k);
    std::vector<long long> cur(a);

    for (int i = 0; i < n; i++) {
        long long t = cur[i] / b[i] + 1;
        cur[i] %= b[i];
        if (t < k)
            qr[t].push_back(i);
    }

    int lst = 0;
    for (int t = 0; t < k; t++) {
        while (lst < k && qr[lst].empty())
            ++lst;
        if (lst <= t)
            return false;
        if (lst == k)
            return true;
        int i = qr[lst].back();
        if (cur[i] + x < b[i]) {
            cur[i] += x;
            continue;
        }
        qr[lst].pop_back();
        long long nt = (cur[i] + x) / b[i];
        cur[i] = (cur[i] + x) % b[i];
        if (lst + nt < k)
            qr[lst + nt].push_back(i);
    }
    return true;
}

long long binarySearch(const std::vector<long long>& a, const std::vector<int>& b, int k) {
    long long l = 0, r = INF64;
    while (l < r - 1) {
        long long m = (l + r) / 2;
        if (check(a, b, k, m))
            r = m;
        else
            l = m;
    }
    if (!check(a, b, k, r))
        return -1;
    else
        return check(a, b, k, l) ? l : r;
}

int main() {
    int n, k;
    std::cin >> n >> k;
    std::vector<long long> a(n);
    std::vector<int> b(n);
    for (int i = 0; i < n; i++) {
        std::cin >> a[i];
    }
    for (int i = 0; i < n; i++) {
        std::cin >> b[i];
    }
    long long ans = binarySearch(a, b, k);
    std::cout << ans << std::endl;
    return 0;
}
```