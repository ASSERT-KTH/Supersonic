```c++
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 100005;
long long c[MAXN];
long long ans, cur;
bool judge[MAXN];
vector<long long> primes;
inline void getprime(int x) {
  judge[1] = true;
  for (int i = 2; i <= x; i++) {
    if (!judge[i])
      primes.push_back(i);
    for (auto p : primes) {
      if (i * p > x)
        break;
      judge[i * p] = true;
      if (i % p == 0)
        break;
    }
  }
}
void dfs(vector<pair<long long, int>> &cnt, int pos, long long val) {
  if (pos == cnt.size()) {
    long long a = val;
    long long b = cur / val;
    if (a <= 100000 && b <= 100000 && c[a] && c[b]) {
      if (a == b)
        ans += c[a] * (c[a] - 1);
      else
        ans += c[a] * c[b];
    }
  } else {
    auto [p, t] = cnt[pos];
    for (int i = 0; i <= t; i++) {
      dfs(cnt, pos + 1, val);
      val *= p;
    }
  }
}
void factorize(long long n, vector<pair<long long, int>> &cnt) {
  if (n == 1)
    return;
  if (!judge[n]) {
    cnt.emplace_back(n, 1);
    return;
  }
  for (auto x : primes) {
    if (x > n)
      break;
    if (n % x == 0) {
      int t = 0;
      while (n % x == 0) {
        n /= x;
        t++;
      }
      cnt.emplace_back(x, t);
    }
  }
  if (n != 1)
    cnt.emplace_back(n, 1);
}
int main() {
  int n, k;
  scanf("%d%d", &n, &k);
  if (k == 2) {
    map<long long, long long> all;
    getprime(100000);
    for (int i = 1; i <= n; i++) {
      int t;
      scanf("%d", &t);
      vector<pair<long long, int>> cnt;
      factorize(t, cnt);
      long long h = 1;
      for (auto [p, t] : cnt)
        if (t & 1)
          h *= p;
      all[h]++;
    }
    for (auto [_, t] : all)
      ans += t * (t - 1) / 2;
  } else {
    for (int i = 1; i <= n; i++) {
      int t;
      scanf("%d", &t);
      c[t]++;
    }
    long long x = 1;
    cur = 1;
    while (cur <= 10000000000LL) {
      vector<pair<long long, int>> cnt;
      factorize(x, cnt);
      dfs(cnt, 0, 1);
      x++;
      cur = 1;
      for (int j = 1; j <= k; j++) {
        cur *= x;
        if (cur > 1e10)
          break;
      }
    }
    ans /= 2;
  }
  printf("%lld\n", ans);
  return 0;
}
```