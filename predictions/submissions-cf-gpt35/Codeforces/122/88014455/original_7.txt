Here is the optimized version of your C++ program:

```cpp
#include <iostream>
#include <vector>
using namespace std;

bool checkDivisors(long long n) {
    vector<int> divisors = {4, 7, 44, 47, 74, 77, 444, 447, 474, 477, 744, 747, 774, 777};
    for (int i = 0; i < divisors.size(); i++) {
        if (n % divisors[i] == 0) {
            return true;
        }
    }
    return false;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    long long n;
    cin >> n;

    if (checkDivisors(n)) {
        cout << "YES\n";
    } else {
        cout << "NO\n";
    }

    return 0;
}
```

The optimizations made in this code include:
- Removing unnecessary headers (`bits/stdc++.h`) and using only the required ones (`iostream`, `vector`).
- Avoiding the usage of macros (`#define`) and replacing them with direct code.
- Removing unnecessary inline functions (`_min` and `_max`).
- Changing the divisors array to a local variable inside the `checkDivisors` function.
- Replacing the for-loop using `i` as a `long long` variable instead of `ll` type.
- Changing the return type of the `checkDivisors` function to `bool` for better clarity.
- Removing the unnecessary file input/output operations (`freopen`).
- Replacing the `For` macro with a regular `for` loop.
- Simplifying the code by using a separate function to check if the number is divisible by any of the divisors.