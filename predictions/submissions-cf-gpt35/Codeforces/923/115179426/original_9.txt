```cpp
#include <iostream>
#include <vector>
using namespace std;

struct TrieNode {
    int count;
    TrieNode* next[2];
    TrieNode() {
        count = 0;
        next[0] = nullptr;
        next[1] = nullptr;
    }
};

void insert(TrieNode* root, int x) {
    TrieNode* curr = root;
    curr->count++;
    for (int i = 30; i >= 0; i--) {
        int b = (x >> i) & 1;
        if (curr->next[b] == nullptr) {
            curr->next[b] = new TrieNode();
        }
        curr = curr->next[b];
        curr->count++;
    }
    curr->count++;
}

int query(TrieNode* root, int x) {
    TrieNode* curr = root;
    curr->count--;
    int res = 0;
    for (int i = 30; i >= 0; i--) {
        int b = (x >> i) & 1;
        if (curr->next[b] != nullptr && curr->next[b]->count > 0) {
            curr = curr->next[b];
        } else {
            curr = curr->next[!b];
            res += (1 << i);
        }
        curr->count--;
    }
    curr->count--;
    return res;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    const int mxn = 32 * 3e5;
    vector<vector<int>> tr(mxn, vector<int>(2));

    int n;
    cin >> n;

    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }

    vector<int> cnt(mxn);
    int tot = 1;

    TrieNode* root = new TrieNode();

    for (int i = 0; i < n; ++i) {
        int b;
        cin >> b;
        insert(root, b);
    }

    for (int i = 0; i < n; ++i) {
        cout << query(root, a[i]) << ' ';
    }
    cout << '\n';

    delete root;

    return 0;
}
```