```cpp
#include <iostream>
#include <vector>
using namespace std;

struct TrieNode {
    TrieNode* child[2];
    int count;
};

TrieNode* createNode() {
    TrieNode* newNode = new TrieNode;
    newNode->child[0] = newNode->child[1] = nullptr;
    newNode->count = 0;
    return newNode;
}

void insert(TrieNode* root, int num) {
    TrieNode* curr = root;
    curr->count++;
    for (int i = 30; i >= 0; --i) {
        int bit = (num >> i) & 1;
        if (curr->child[bit] == nullptr) {
            curr->child[bit] = createNode();
        }
        curr = curr->child[bit];
        curr->count++;
    }
}

int query(TrieNode* root, int num) {
    TrieNode* curr = root;
    curr->count--;
    int result = 0;
    for (int i = 30; i >= 0; --i) {
        int bit = (num >> i) & 1;
        if (curr->child[bit] != nullptr && curr->child[bit]->count > 0) {
            curr = curr->child[bit];
        } else {
            bit = !bit;
            curr = curr->child[bit];
            result += (1 << i);
        }
        curr->count--;
    }
    return result;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    const int mxn = 32 * 3e5;
    TrieNode* root = createNode();

    int n;
    cin >> n;

    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }

    for (int i = 0; i < n; ++i) {
        int b;
        cin >> b;
        insert(root, b);
    }

    for (int i = 0; i < n; ++i) {
        cout << query(root, a[i]) << ' ';
    }

    cout << '\n';

    delete root;

    return 0;
}
```