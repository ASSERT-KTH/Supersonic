#include <bits/stdc++.h>
using namespace std;

struct TrieNode {
    TrieNode* next[2];
    int count;
};

TrieNode* createNode() {
    TrieNode* node = new TrieNode();
    node->next[0] = nullptr;
    node->next[1] = nullptr;
    node->count = 0;
    return node;
}

void insert(TrieNode* root, int x) {
    TrieNode* node = root;
    node->count++;
    for (int i = 30; i >= 0; --i) {
        int bit = (x >> i) & 1;
        if (node->next[bit] == nullptr) {
            node->next[bit] = createNode();
        }
        node = node->next[bit];
        node->count++;
    }
}

int query(TrieNode* root, int x) {
    TrieNode* node = root;
    node->count--;
    int res = 0;
    for (int i = 30; i >= 0; --i) {
        int bit = (x >> i) & 1;
        if (node->next[bit] != nullptr && node->next[bit]->count > 0) {
            node = node->next[bit];
        } else {
            node = node->next[!bit];
            res += (1 << i);
        }
        node->count--;
    }
    return res;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    const int mxn = 32 * 3e5;
    TrieNode* root = createNode();
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    for (int i = 0; i < n; ++i) {
        int b;
        cin >> b;
        insert(root, b);
    }
    for (int i = 0; i < n; ++i) {
        cout << query(root, a[i]) << ' ';
    }
    cout << '\n';
    return 0;
}