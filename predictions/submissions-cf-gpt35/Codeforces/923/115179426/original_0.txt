```cpp
#include <iostream>
#include <vector>
using namespace std;

struct TrieNode {
    TrieNode* child[2];
    int count;
    TrieNode() {
        child[0] = nullptr;
        child[1] = nullptr;
        count = 0;
    }
};

void insert(TrieNode* root, int x) {
    TrieNode* curr = root;
    for (int i = 30; i >= 0; --i) {
        int b = (x >> i) & 1;
        if (curr->child[b] == nullptr) {
            curr->child[b] = new TrieNode();
        }
        curr = curr->child[b];
        curr->count++;
    }
}

int query(TrieNode* root, int x) {
    TrieNode* curr = root;
    int res = 0;
    for (int i = 30; i >= 0; --i) {
        int b = (x >> i) & 1;
        if (curr->child[!b] != nullptr && curr->child[!b]->count > 0) {
            curr = curr->child[!b];
            res += (1 << i);
        } else {
            curr = curr->child[b];
        }
        curr->count--;
    }
    return res;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    const int mxn = 32 * 3e5;
    TrieNode* root = new TrieNode();
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    for (int i = 0; i < n; ++i) {
        int b;
        cin >> b;
        insert(root, b);
    }
    for (int i = 0; i < n; ++i) {
        cout << query(root, a[i]) << ' ';
    }
    cout << '\n';
    return 0;
}
```