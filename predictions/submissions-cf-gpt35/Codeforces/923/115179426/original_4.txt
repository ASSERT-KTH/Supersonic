```cpp
#include <bits/stdc++.h>
using namespace std;

struct Node {
    int leftChild;
    int rightChild;
    int count;
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    const int MAX_N = 32 * 3e5;
    vector<Node> tr(MAX_N);
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    vector<int> cnt(MAX_N);
    int tot = 1;

    auto ins = [&](int x) {
        int p = 1;
        ++cnt[p];
        for (int i = 30; i >= 0; --i) {
            int b = (x >> i) & 1;
            if (b == 0) {
                if (tr[p].leftChild == 0) {
                    tr[p].leftChild = ++tot;
                }
                p = tr[p].leftChild;
            } else {
                if (tr[p].rightChild == 0) {
                    tr[p].rightChild = ++tot;
                }
                p = tr[p].rightChild;
            }
            ++cnt[p];
        }
        ++cnt[p];
    };

    auto qry = [&](int x) {
        int p = 1;
        --cnt[p];
        int res = 0;
        for (int i = 30; i >= 0; --i) {
            int b = (x >> i) & 1;
            if (b == 0) {
                if (cnt[tr[p].leftChild] > 0) {
                    p = tr[p].leftChild;
                } else {
                    p = tr[p].rightChild;
                    res += (1 << i);
                }
            } else {
                if (cnt[tr[p].rightChild] > 0) {
                    p = tr[p].rightChild;
                } else {
                    p = tr[p].leftChild;
                    res += (1 << i);
                }
            }
            --cnt[p];
        }
        --cnt[p];
        return res;
    };

    for (int i = 0; i < n; ++i) {
        int b;
        cin >> b;
        ins(b);
    }

    for (int i = 0; i < n; ++i) {
        cout << qry(a[i]) << ' ';
    }
    cout << '\n';
    return 0;
}
```