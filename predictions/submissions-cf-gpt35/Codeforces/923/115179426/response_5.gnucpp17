#include <iostream>
#include <vector>
using namespace std;

struct Node {
    int count;
    Node* child[2];
    Node() {
        count = 0;
        child[0] = nullptr;
        child[1] = nullptr;
    }
};

void insert(Node* root, int x) {
    Node* curr = root;
    for (int i = 30; i >= 0; i--) {
        int bit = (x >> i) & 1;
        if (curr->child[bit] == nullptr) {
            curr->child[bit] = new Node();
        }
        curr = curr->child[bit];
        curr->count++;
    }
}

int query(Node* root, int x) {
    Node* curr = root;
    int ans = 0;
    for (int i = 30; i >= 0; i--) {
        int bit = (x >> i) & 1;
        if (curr->child[bit] != nullptr && curr->child[bit]->count > 0) {
            curr = curr->child[bit];
        } else {
            curr = curr->child[bit ^ 1];
            ans += (1 << i);
        }
        curr->count--;
    }
    return ans;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    const int mxn = 32 * 3e5;
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    Node* root = new Node();
    for (int i = 0; i < n; ++i) {
        int b;
        cin >> b;
        insert(root, b);
    }
    for (int i = 0; i < n; ++i) {
        cout << query(root, a[i]) << ' ';
    }
    cout << '\n';
    return 0;
}