```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <cmath>
#include <chrono>
using namespace std;

const int N = 1e6 + 5;

vector<int> dp(N);

void preprocess() {
    dp[1] = 1;
    for (int num = 1; num < N; ++num) {
        for (int i = 2; i <= sqrt(num); ++i) {
            if (num % i == 0) {
                if (dp[num / i] % i)
                    dp[num] = dp[num / i] * i;
                else
                    dp[num] = dp[num / i] / i;
                break;
            }
        }
        if (dp[num] == 0)
            dp[num] = num;
    }
}

void solve() {
    int n;
    cin >> n;
    unordered_map<int, int> mp;
    mp.reserve(1024);
    mp.max_load_factor(0.25);
    vector<int> a(n);
    for (int i = 0; i < n; ++i)
        cin >> a[i];
    int ans1 = 1;
    for (int i = 0; i < n; ++i) {
        mp[dp[a[i]]]++;
        ans1 = max(ans1, mp[dp[a[i]]]);
    }
    int ans2 = 0;
    for (auto it : mp) {
        if (it.second % 2 == 0 || it.first == 1)
            ans2 += it.second;
    }
    int q;
    cin >> q;
    while (q--) {
        int w;
        cin >> w;
        if (w == 0)
            cout << ans1 << '\n';
        else
            cout << max(ans1, ans2) << '\n';
    }
}

int main() {
    auto start = chrono::high_resolution_clock::now();
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    preprocess();
    int t = 1;
    cin >> t;
    while (t--)
        solve();
    auto end = chrono::high_resolution_clock::now();
    double tt = chrono::duration_cast<chrono::nanoseconds>(end - start).count();
    cout << "\nExecuted in: " << fixed << tt * 1e-9 << setprecision(9) << " sec";
    return 0;
}
```