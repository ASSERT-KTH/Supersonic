#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

const int MAXN = 2e5 + 100;

struct DisjointSet {
  struct node {
    int parent, rank;
  } T[MAXN];

  DisjointSet() {
    for (int i = 0; i < MAXN; ++i)
      make(i);
  }

  void make(int u) {
    T[u].parent = u;
    T[u].rank = 0;
  }

  int find(int u) {
    if (T[u].parent == u)
      return u;
    return T[u].parent = find(T[u].parent);
  }

  void merge(int u, int v) {
    u = find(u);
    v = find(v);
    if (u == v)
      return;
    if (T[u].rank < T[v].rank)
      T[u].parent = v;
    else if (T[u].rank > T[v].rank)
      T[v].parent = u;
    else
      T[v].parent = u, ++T[u].rank;
  }
};

DisjointSet dsu;
int deg[MAXN];
int chose[MAXN];
int par[MAXN];
vector<int> g[MAXN], g_MST[MAXN];
vector<pair<int, int>> edge;
vector<pair<int, int>> MST;

bool cmp(int u, int v) {
  return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
}

void dfs(int u) {
  for (auto v : g[u]) {
    if (dsu.find(1) == dsu.find(v))
      continue;
    else {
      dsu.merge(dsu.find(1), dsu.find(v));
      if (u < v)
        MST.push_back(make_pair(u, v));
      else
        MST.push_back(make_pair(v, u));
      g_MST[u].push_back(v);
      g_MST[v].push_back(u);
      dfs(v);
    }
  }
}

void build_tree(int u) {
  for (auto v : g_MST[u]) {
    if (par[v] == -1) {
      par[v] = u;
      build_tree(v);
    }
  }
}

void Ares_KN() {
  int n, m, k;
  cin >> n >> m >> k;

  while (m--) {
    int u, v;
    cin >> u >> v;
    g[u].push_back(v);
    g[v].push_back(u);
    ++deg[u];
    ++deg[v];
    edge.push_back(make_pair(u, v));
  }

  if (deg[1] < k) {
    cout << "NO" << endl;
    return;
  }

  sort(g[1].begin(), g[1].end(), cmp);

  int cnt = 0;
  for (auto v : g[1]) {
    if (deg[v] == 1)
      ++cnt;
  }

  if (cnt > k) {
    cout << "NO" << endl;
    return;
  }

  for (auto v : g[1]) {
    if (deg[v] == 1) {
      dsu.merge(dsu.find(1), dsu.find(v));
      MST.push_back(make_pair(1, v));
      g_MST[1].push_back(v);
      g_MST[v].push_back(1);
    } else if (dsu.find(1) == dsu.find(v)) {
      continue;
    } else {
      dsu.merge(dsu.find(1), dsu.find(v));
      MST.push_back(make_pair(1, v));
      g_MST[1].push_back(v);
      g_MST[v].push_back(1);
      chose[v] = true;
      dfs(v);
      ++cnt;
      if (cnt == k)
        break;
    }
  }

  for (auto E : edge) {
    int u = E.first;
    int v = E.second;
    if (u == 1 || v == 1)
      continue;
    if (dsu.find(u) == dsu.find(v))
      continue;
    dsu.merge(dsu.find(u), dsu.find(v));
    if (u < v)
      MST.push_back(make_pair(u, v));
    else
      MST.push_back(make_pair(v, u));
    g_MST[u].push_back(v);
    g_MST[v].push_back(u);
  }

  if (cnt > k || MST.size() < n - 1) {
    cout << "NO" << endl;
    return;
  }

  if (cnt == k) {
    cout << "YES" << endl;
    for (auto x : MST)
      cout << x.first << " " << x.second << endl;
    return;
  }

  int root = 1;
  fill(par, par + n + 1, -1);
  par[1] = 1;
  build_tree(root);

  for (auto v : g[1]) {
    if (!chose[v]) {
      int p = par[v];
      if (p == 1)
        continue;
      if (v < p)
        MST.erase(find(MST.begin(), MST.end(), make_pair(v, p)));
      else
        MST.erase(find(MST.begin(), MST.end(), make_pair(p, v)));
      MST.push_back(make_pair(1, v));
      par[v] = 1;
      ++cnt;
      if (cnt == k)
        break;
    }
  }

  cout << "YES" << endl;
  for (auto x : MST)
    cout << x.first << " " << x.second << endl;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  Ares_KN();
  return 0;
}