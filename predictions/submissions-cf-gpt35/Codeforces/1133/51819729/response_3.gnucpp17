#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("avx")

#include <algorithm>
#include <bitset>
#include <cassert>
#include <chrono>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;

#define FOR(i, a, b) for (int i = (a), _b = (b); i <= _b; i++)
#define FORD(i, a, b) for (int i = (a), _b = (b); i >= _b; i--)
#define REP(i, a) for (int i = 0, _a = (a); i < _a; ++i)
#define REPD(i, a) for (int i = (a)-1; i >= 0; --i)
#define fi first
#define se second
#define PB push_back
#define EB emplace_back
#define MP make_pair
#define prev KhanhNgan
#define next MinhTu
#define y0 chuquachula
#define y1 tacadada
#define left uzumakinaruto
#define right uchihasasuke
#define PI (2 * acos((double)0))
#define sec(x) 1.0 / cos((x))
#define asec(x) acos(1.0 / (x))

template <class T> int getbit(T s, int i) { return (s >> i) & 1; }
template <class T> T onbit(T s, int i) { return s | (T(1) << i); }
template <class T> T offbit(T s, int i) { return s & (~(T(1) << i)); }
template <class T> int cntbit(T s) { return __builtin_popcountll(s); }
template <class T> T gcd(T a, T b) {
  T r;
  while (b != 0) {
    r = a % b;
    a = b;
    b = r;
  }
  return a;
}
template <class T> T lcm(T a, T b) { return a / gcd(a, b) * b; }

template <class T> inline int minimize(T &a, const T &val) {
  return val < a ? a = val, 1 : 0;
}
template <class T> inline int maximize(T &a, const T &val) {
  return a < val ? a = val, 1 : 0;
}

#define IOS ios_base::sync_with_stdio(0), cin.tie(0);

const int MAXN = 2e5 + 100;
const int MOD = 1e9 + 7;
const ll MAXV = 1e9;
const double eps = 1e-12;
const ll INF = 1e16;

inline string toStr(ll x) {
  string tmp = "";
  do
    tmp = char(x % 10 + '0') + tmp;
  while (x /= 10);
  return tmp;
}

inline ll toInt(string s) {
  ll res = 0;
  for (auto x : s)
    res = res * 10 + x - '0';
  return res;
}

inline string toBinStr(ll x) {
  string res = "";
  do
    res = (x % 2 ? "1" : "0") + res;
  while (x >>= 1LL);
  return res;
}

ll rnd(int k) {
  if (!k)
    return myrand() % MAXV + 1;
  ll t = myrand() % MAXV + 1;
  return (myrand() % t) + (MAXV - t);
}

ll random_gen(int sign) {
  ll x = rnd(myrand() % 2);
  ll s = myrand() % 2;
  s = !s ? 1 : -1;
  return sign == 1 ? x : sign == -1 ? -x : s * x;
}

const int MAX_NODE = MAXN;

struct DisjointSet {
  struct node {
    int parent, rank;
  } T[MAX_NODE];

  DisjointSet() {
    for (int i = 0; i < MAX_NODE; ++i)
      make(i);
  }

  void make(int u) { T[u].parent = u, T[u].rank = 0; };

  int find(int u) {
    if (T[u].parent == u)
      return u;
    return T[u].parent = find(T[u].parent);
  }

  void merge(int u, int v) {
    u = find(u), v = find(v);
    if (u == v)
      return;
    if (T[u].rank < T[v].rank)
      T[u].parent = v;
    else if (T[u].rank > T[v].rank)
      T[v].parent = u;
    else
      T[v].parent = u, ++T[u].rank;
  }
};

DisjointSet dsu;
int deg[MAXN];
int chose[MAXN];
int par[MAXN];
vector<int> g[MAXN], g_MST[MAXN];
vector<pii> edge;
set<pii> MST;

bool cmp(int u, int v) {
  return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
}

void dfs(int u) {
  for (auto v : g[u])
    if (dsu.find(1) == dsu.find(v))
      continue;
    else {
      dsu.merge(dsu.find(1), dsu.find(v));
      if (u < v)
        MST.insert({u, v});
      else
        MST.insert({v, u});
      g_MST[u].push_back(v), g_MST[v].push_back(u);
      dfs(v);
    }
}

void build_tree(int u) {
  for (auto v : g_MST[u])
    if (par[v] == -1)
      par[v] = u, build_tree(v);
}

int main() {
  int n, m, k;
  cin >> n >> m >> k;

  while (m--) {
    int u, v;
    cin >> u >> v;
    g[u].push_back(v), g[v].push_back(u);
    ++deg[u], ++deg[v];
    edge.emplace_back(u, v);
  }

  if (deg[1] < k)
    return !printf("NO");

  sort(g[1].begin(), g[1].end(), cmp);
  int cnt = 0;
  for (auto v : g[1])
    if (deg[v] == 1)
      ++cnt;

  if (cnt > k)
    return !printf("NO");

  for (auto v : g[1])
    if (deg[v] == 1) {
      dsu.merge(dsu.find(1), dsu.find(v));
      MST.insert({1, v});
      g_MST[1].push_back(v), g_MST[v].push_back(1);
    } else if (dsu.find(1) == dsu.find(v))
      continue;
    else {
      dsu.merge(dsu.find