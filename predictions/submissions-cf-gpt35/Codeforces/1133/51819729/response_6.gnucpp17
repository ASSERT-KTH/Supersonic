#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("Ofast,no-stack-protector")
#pragma GCC target("avx")
#include <algorithm>
#include <bitset>
#include <cassert>
#include <chrono>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <vector>
using namespace std;
#define FOR(i, a, b) for (int i = (a), _b = (b); i <= _b; i++)
#define REP(i, a) for (int i = 0, _a = (a); i < _a; ++i)
#define fi first
#define se second
#define PB push_back
#define EB emplace_back
#define MP make_pair
#define MAXN 200100
#define MOD 1000000007
typedef long long ll;
typedef pair<int, int> pii;
vector<int> g[MAXN], g_MST[MAXN];
vector<pii> edge;
int deg[MAXN], chose[MAXN], par[MAXN];
bitset<MAXN> visited;
int cnt = 0;
void dfs(int u) {
  visited[u] = 1;
  for (auto v : g[u]) {
    if (!visited[v]) {
      if (u < v) {
        g_MST[u].push_back(v);
        g_MST[v].push_back(u);
      }
      dfs(v);
    }
  }
}
void build_tree(int u) {
  visited[u] = 1;
  for (auto v : g_MST[u]) {
    if (!visited[v]) {
      par[v] = u;
      build_tree(v);
    }
  }
}
int main() {
  int n, m, k;
  scanf("%d%d%d", &n, &m, &k);
  REP(i, m) {
    int u, v;
    scanf("%d%d", &u, &v);
    g[u].push_back(v);
    g[v].push_back(u);
    ++deg[u];
    ++deg[v];
    edge.emplace_back(u, v);
  }
  if (deg[1] < k) {
    printf("NO");
    return 0;
  }
  sort(g[1].begin(), g[1].end(), [&](int u, int v) {
    return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
  });
  FOR(i, 1, n) {
    if (deg[i] == 1 && cnt < k) {
      chose[i] = 1;
      ++cnt;
      continue;
    }
    if (deg[i] == 1) {
      break;
    }
    visited.reset();
    dfs(i);
    if (g_MST[i].size() == 0) {
      continue;
    }
    if (deg[i] > 1 && cnt < k) {
      chose[i] = 1;
      ++cnt;
      break;
    }
  }
  if (cnt < k) {
    printf("NO");
    return 0;
  }
  visited.reset();
  dfs(1);
  for (auto E : edge) {
    int u, v;
    tie(u, v) = E;
    if (u == 1 || v == 1) {
      continue;
    }
    g_MST[u].push_back(v);
    g_MST[v].push_back(u);
  }
  visited.reset();
  par[1] = 1;
  build_tree(1);
  printf("YES\n");
  FOR(i, 1, n) {
    for (auto v : g_MST[i]) {
      if (i < v) {
        printf("%d %d\n", i, v);
      }
    }
  }
  return 0;
}