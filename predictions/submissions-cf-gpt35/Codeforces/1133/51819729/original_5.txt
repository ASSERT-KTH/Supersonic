```
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;

const int MAXN = 2e5 + 100;

int deg[MAXN];
int chose[MAXN];
int par[MAXN];
vector<int> g[MAXN], g_MST[MAXN];
vector<pair<int, int>> edge;
vector<pair<int, int>> MST;
bool cmp(int u, int v) {
  return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
}
void dfs(int u) {
  for (auto v : g[u])
    if (par[v] == -1)
      par[v] = u, dfs(v);
}
void build_tree(int u) {
  for (auto v : g_MST[u])
    if (par[v] == -1)
      par[v] = u, build_tree(v);
}

int main() {
  int n, m, k;
  scanf("%d%d%d", &n, &m, &k);
  while (m--) {
    int u, v;
    scanf("%d%d", &u, &v);
    g[u].push_back(v), g[v].push_back(u);
    ++deg[u], ++deg[v];
    edge.emplace_back(u, v);
  }
  if (deg[1] < k) {
    printf("NO");
    return 0;
  }
  sort(g[1].begin(), g[1].end(), cmp);
  int cnt = 0;
  for (auto v : g[1])
    if (deg[v] == 1)
      ++cnt;
  if (cnt > k) {
    printf("NO");
    return 0;
  }
  for (auto v : g[1])
    if (deg[v] == 1) {
      MST.push_back({1, v});
      g_MST[1].push_back(v), g_MST[v].push_back(1);
    } else if (cnt < k) {
      chose[v] = true, dfs(v);
      ++cnt;
    }
  for (auto E : edge) {
    int u = E.first, v = E.second;
    if (u == 1 || v == 1)
      continue;
    if (u < v)
      MST.push_back({u, v});
    else
      MST.push_back({v, u});
    g_MST[u].push_back(v), g_MST[v].push_back(u);
  }
  if (cnt > k || MST.size() < n - 1) {
    printf("NO");
    return 0;
  }
  if (cnt == k) {
    printf("YES\n");
    for (auto x : MST)
      printf("%d %d\n", x.first, x.second);
    return 0;
  }
  int root = 1;
  memset(par, -1, sizeof(par));
  par[1] = 1;
  build_tree(root);
  for (auto v : g[1])
    if (!chose[v]) {
      int p = par[v];
      if (p == 1)
        continue;
      if (v < p)
        MST.erase(find(MST.begin(), MST.end(), make_pair(v, p)));
      else
        MST.erase(find(MST.begin(), MST.end(), make_pair(p, v)));
      MST.push_back({1, v});
      par[v] = 1;
      ++cnt;
      if (cnt == k)
        break;
    }
  printf("YES\n");
  for (auto x : MST)
    printf("%d %d\n", x.first, x.second);
  return 0;
}
```