```cpp
#include <algorithm>
#include <iostream>
#include <vector>
#include <set>
#include <cstring>
using namespace std;

const int MAXN = 2e5 + 100;

int deg[MAXN];
int chose[MAXN];
int par[MAXN];
vector<int> g[MAXN], g_MST[MAXN];
vector<pair<int, int>> edge;
set<pair<int, int>> MST;

bool cmp(int u, int v) {
    return (deg[u] < deg[v]) || (deg[u] == deg[v] && u < v);
}

void dfs(int u) {
    for (auto v : g[u]) {
        if (dsu.find(1) == dsu.find(v))
            continue;
        else {
            dsu.merge(dsu.find(1), dsu.find(v));
            if (u < v)
                MST.insert({u, v});
            else
                MST.insert({v, u});
            g_MST[u].push_back(v);
            g_MST[v].push_back(u);
            dfs(v);
        }
    }
}

void build_tree(int u) {
    for (auto v : g_MST[u]) {
        if (par[v] == -1) {
            par[v] = u;
            build_tree(v);
        }
    }
}

int main() {
    int n, m, k;
    cin >> n >> m >> k;

    memset(deg, 0, sizeof(deg));
    memset(chose, 0, sizeof(chose));
    memset(par, -1, sizeof(par));
    for (int i = 1; i <= n; i++) {
        g[i].clear();
        g_MST[i].clear();
    }
    edge.clear();
    MST.clear();

    while (m--) {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
        ++deg[u];
        ++deg[v];
        edge.push_back(make_pair(u, v));
    }

    if (deg[1] < k) {
        cout << "NO" << endl;
        return 0;
    }

    sort(g[1].begin(), g[1].end(), cmp);
    int cnt = 0;
    for (auto v : g[1]) {
        if (deg[v] == 1)
            ++cnt;
    }

    if (cnt > k) {
        cout << "NO" << endl;
        return 0;
    }

    for (auto v : g[1]) {
        if (deg[v] == 1) {
            dsu.merge(dsu.find(1), dsu.find(v));
            MST.insert({1, v});
            g_MST[1].push_back(v);
            g_MST[v].push_back(1);
        } else if (dsu.find(1) == dsu.find(v)) {
            continue;
        } else {
            dsu.merge(dsu.find(1), dsu.find(v));
            MST.insert({1, v});
            g_MST[1].push_back(v);
            g_MST[v].push_back(1);
            chose[v] = true;
            dfs(v);
            ++cnt;
            if (cnt == k)
                break;
        }
    }

    for (auto E : edge) {
        int u = E.first;
        int v = E.second;
        if (u == 1 || v == 1)
            continue;
        if (dsu.find(u) == dsu.find(v))
            continue;
        dsu.merge(dsu.find(u), dsu.find(v));
        if (u < v)
            MST.insert({u, v});
        else
            MST.insert({v, u});
        g_MST[u].push_back(v);
        g_MST[v].push_back(u);
    }

    if (cnt > k || MST.size() < n - 1) {
        cout << "NO" << endl;
        return 0;
    }

    if (cnt == k) {
        cout << "YES" << endl;
        for (auto x : MST)
            cout << x.first << " " << x.second << endl;
        return 0;
    }

    int root = 1;
    par[1] = 1;
    build_tree(root);

    vector<pair<int, int>> res;
    for (auto v : g[1]) {
        if (!chose[v]) {
            int p = par[v];
            if (p == 1)
                continue;
            if (v < p)
                MST.erase({v, p});
            else
                MST.erase({p, v});
            MST.insert({1, v});
            par[v] = 1;
            ++cnt;
            if (cnt == k)
                break;
        }
    }

    cout << "YES" << endl;
    for (auto x : MST)
        cout << x.first << " " << x.second << endl;

    return 0;
}
```