```cpp
#include <bits/stdc++.h>
using namespace std;

#define js ios::sync_with_stdio(false); cin.tie(0); cout.tie(0)
#define all(__vv__) (__vv__).begin(), (__vv__).end()
#define endl "\n"
#define pai pair<int, int>
#define ms(__x__, __val__) memset(__x__, __val__, sizeof(__x__))
#define rep(i, sta, en) for (int i = sta; i <= en; ++i)
#define repp(i, sta, en) for (int i = sta; i >= en; --i)

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

inline ll read() {
    ll s = 0, w = 1;
    char ch = getchar();
    for (; !isdigit(ch); ch = getchar())
        if (ch == '-')
            w = -1;
    for (; isdigit(ch); ch = getchar())
        s = (s << 1) + (s << 3) + (ch ^ 48);
    return s * w;
}

inline void print(ll x, int op = 10) {
    if (!x) {
        putchar('0');
        if (op) putchar(op);
        return;
    }
    char F[40];
    ll tmp = x > 0 ? x : -x;
    if (x < 0) putchar('-');
    int cnt = 0;
    while (tmp > 0) {
        F[cnt++] = tmp % 10 + '0';
        tmp /= 10;
    }
    while (cnt > 0)
        putchar(F[--cnt]);
    if (op) putchar(op);
}

inline ll gcd(ll x, ll y) { return y ? gcd(y, x % y) : x; }

ll qpow(ll a, ll b) {
    ll ans = 1;
    while (b) {
        if (b & 1) ans *= a;
        b >>= 1;
        a *= a;
    }
    return ans;
}

ll qpow(ll a, ll b, ll mod) {
    ll ans = 1;
    while (b) {
        if (b & 1) (ans *= a) %= mod;
        b >>= 1;
        (a *= a) %= mod;
    }
    return ans % mod;
}

const int dir[][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};
const int MOD = 1e9 + 7;
const int INF = 0x3f3f3f3f;

struct Node {
    ll val;
    int id;
    bool operator<(const Node &opt) const { return val < opt.val; }
};

const int N = 2e5 + 7;
int n, m;
int k[N], t[N], sum;
vector<int> p, s[N];

bool check(int x) {
    ms(t, 0);
    int now = x, ned = sum, cnt = 0;
    int i = lower_bound(all(p), x) - p.begin();
    repp(i, min(N - 1, x), 1) {
        now = min(now, i);
        if (now == 0 or ned == 0) break;
        for (auto &it : s[i]) {
            int buy = min(now, k[it] - t[it]);
            t[it] += buy;
            ned -= buy;
            now -= buy;
            cnt += buy;
        }
    }
    return x - cnt >= ned * 2;
}

void solve() {
    n = read(), m = read();
    rep(i, 1, n) {
        k[i] = read();
        sum += k[i];
    }
    rep(i, 1, m) {
        int d = read(), t = read();
        p.push_back(d);
        s[d].push_back(t);
    }
    sort(all(p));
    int l = 1, r = sum * 2, ans = 1;
    while (l <= r) {
        int mid = l + r >> 1;
        if (check(mid)) ans = mid, r = mid - 1;
        else l = mid + 1;
    }
    print(ans);
}

int main() {
    js;
    solve();
    return 0;
}
```