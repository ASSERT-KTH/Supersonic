```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> prime_sieve(int n) {
    vector<bool> is_prime(n + 1, true);
    vector<int> primes;
    is_prime[0] = is_prime[1] = false;

    for (int i = 2; i <= n; i++) {
        if (is_prime[i]) {
            primes.push_back(i);
            for (int j = i * i; j <= n; j += i) {
                is_prime[j] = false;
            }
        }
    }

    return primes;
}

void test() {
    int n, m;
    cin >> n >> m;

    if (n == 2) {
        cout << 2 << " " << 2 << endl;
        cout << 1 << " " << 2 << " " << 2 << endl;
        return;
    }

    vector<int> primes = prime_sieve(n);
    int total_sum = *lower_bound(primes.begin(), primes.end(), n);

    cout << 2 << " " << total_sum << endl;

    vector<pair<pair<int, int>, int>> edges;
    int sum = 0;
    edges.push_back(make_pair(make_pair(1, n), 2));
    sum = 2;

    for (int i = 2; i < n - 1; i++) {
        edges.push_back(make_pair(make_pair(1, i), 1));
        sum++;
    }

    if (n - 1 != 1)
        edges.push_back(make_pair(make_pair(1, n - 1), total_sum - sum));

    m -= edges.size();

    for (int i = 2; i <= n; i++) {
        if (m == 0)
            break;

        for (int j = i + 1; j <= n; j++) {
            if (m == 0)
                break;

            edges.push_back(make_pair(make_pair(i, j), max(total_sum - sum, 2ll) + 1));
            m--;
        }
    }

    for (int i = 0; i < edges.size(); i++) {
        cout << edges[i].first.first << " " << edges[i].first.second << " " << edges[i].second << "\n";
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int t = 1;
    while (t--)
        test();

    return 0;
}
```