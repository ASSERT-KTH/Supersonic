#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

void test() {
  int n, m;
  cin >> n >> m;
  if (n == 2) {
    cout << 2 << " " << 2 << endl;
    cout << 1 << " " << 2 << " " << 2 << endl;
    return;
  }
  vector<pair<pair<int, int>, int>> edges;
  int total_sum = 0;
  for (int i = 2; i <= n; i++) {
    total_sum += i;
  }
  cout << 2 << " " << total_sum << endl;
  edges.push_back(make_pair(make_pair(1, n), 2));
  for (int i = 2; i < n - 1; i++) {
    edges.push_back(make_pair(make_pair(1, i), 1));
  }
  if (n - 1 != 1) {
    edges.push_back(make_pair(make_pair(1, n - 1), total_sum - (n - 1) + 1));
  }
  m -= edges.size();
  for (int i = 2; i <= n; i++) {
    if (m == 0)
      break;
    for (int j = i + 1; j <= n; j++) {
      if (m == 0)
        break;
      edges.push_back(make_pair(make_pair(i, j), max(total_sum - (n - 1) + 1, 2ll) + 1));
      m--;
    }
  }
  for (int i = 0; i < edges.size(); i++) {
    cout << edges[i].first.first << " " << edges[i].first.second << " " << edges[i].second << endl;
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int t = 1;
  while (t--)
    test();
  return 0;
}