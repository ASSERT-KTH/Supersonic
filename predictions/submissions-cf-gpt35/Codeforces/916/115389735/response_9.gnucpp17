#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> sieveOfEratosthenes(int n) {
    vector<bool> prime(n+1, true);
    vector<int> primes;
    
    for (int p=2; p*p<=n; p++) {
        if (prime[p]) {
            for (int i=p*p; i<=n; i+=p)
                prime[i] = false;
        }
    }
    
    for (int p=2; p<=n; p++) {
        if (prime[p])
            primes.push_back(p);
    }
    
    return primes;
}

void generateGraph(int n, int m) {
    vector<int> primes = sieveOfEratosthenes(n);
    
    if (n == 2) {
        cout << "2 2" << endl;
        cout << "1 2 2" << endl;
        return;
    }
    
    int total_sum = *lower_bound(primes.begin(), primes.end(), n);
    cout << "2 " << total_sum << endl;
    
    vector<pair<pair<int, int>, int>> edges;
    int sum = 0;
    edges.push_back(make_pair(make_pair(1, n), 2));
    sum = 2;
    
    for (int i = 2; i < n - 1; i++) {
        edges.push_back(make_pair(make_pair(1, i), 1));
        sum++;
    }
    
    if (n - 1 != 1)
        edges.push_back(make_pair(make_pair(1, n-1), total_sum - sum));
    
    m -= edges.size();
    
    for (int i = 2; i <= n; i++) {
        if (m == 0)
            break;
        for (int j = i + 1; j <= n; j++) {
            if (m == 0)
                break;
            edges.push_back(make_pair(make_pair(i, j), max(total_sum - sum, 2ll) + 1));
            m--;
        }
    }
    
    for (int i = 0; i < edges.size(); i++) {
        cout << edges[i].first.first << " " << edges[i].first.second << " " << edges[i].second << "\n";
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
  
    int t = 1;
    while (t--)
        generateGraph();
  
    return 0;
}