#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#include <bits/stdc++.h>
using namespace std;

const int MAXN = 400002;
const int MAXLOG = 20;

int a, ST, OPA = -1;
vector<int> l[MAXN], c[MAXN];
int skok[MAXN], o[MAXN], GR[MAXN][2], mxd[MAXN], mxp[MAXN], dp[MAXN][2], sz[MAXN], good[MAXN], zam[MAXN], iba = 0, eba = 0;
vector<int> gd, bd;

void dfs_size(int v, int p) {
    sz[v] = 1;
    for (int h : l[v]) {
        if (h == p || good[h])
            continue;
        dfs_size(h, v);
        sz[v] += sz[h];
    }
}

int find_centroid(int v, int p, int S) {
    int MX = S - sz[v];
    int num = -1;
    for (int h : l[v]) {
        if (h != p && !good[h]) {
            int x = find_centroid(h, v, S);
            if (num == -1 || abs(S - 2 * sz[x]) < abs(S - 2 * sz[num]))
                num = x;
            MX = max(MX, sz[x]);
        }
    }
    if (num == -1 || abs(S - 2 * sz[v]) < abs(S - 2 * sz[num]))
        return v;
    return num;
}

void decompose(int v) {
    dfs_size(v, -1);
    int c = find_centroid(v, -1, sz[v]);
    good[c] = 1;
    for (int h : l[c]) {
        if (!good[h])
            decompose(h);
    }
}

int CALC(int v, int p, int D) {
    mxd[v] = 1;
    sz[v] = 1;
    int c1 = 0, c2 = 0;
    for (int i = 0; i < l[v].size(); i++) {
        int h = l[v][i];
        if (h == p || good[h])
            continue;
        int x = CALC(h, v, D + 1);
        mxd[v] = max(mxd[v], x + 1);
        sz[v] += sz[h];
        if (x >= c1)
            c2 = c1, c1 = x;
        else if (x > c2)
            c2 = x;
    }
    mxp[v] = c1 + c2 + 1;
    return mxd[v];
}

void build_tree(int v, int p) {
    if (!good[v])
        c[p].push_back(v);
    for (int i = 0; i < l[v].size(); i++) {
        int h = l[v][i];
        if (h == p || good[h])
            continue;
        build_tree(h, v);
    }
}

void rnm(int v) {
    zam[v] = eba++;
    deque<int> dq = {v};
    for (; dq.size();) {
        int x = dq[0];
        dq.pop_front();
        for (int i = 0; i < l[x].size(); i++) {
            int h = l[x][i];
            if (zam[h] != -1)
                continue;
            dq.push_back(h);
            zam[h] = eba++;
        }
    }
}

void rnm2(int v) {
    zam[v] = iba++;
    deque<int> dq = {v};
    for (; dq.size();) {
        int x = dq[0];
        dq.pop_front();
        for (int i = 0; i < l[x].size(); i++) {
            int h = l[x][i];
            if (good[h])
                continue;
            zam[h] = iba++;
            dq.push_back(h);
        }
    }
}

int GA(int LEN) {
    if (o[LEN] != -1)
        return o[LEN];
    int d1, d2, w, rg;
    for (int q = ST; q >= 0; q--) {
        if (good[q]) {
            dp[q][0] = sz[q] / LEN;
            dp[q][1] = sz[q] % LEN;
            continue;
        }
        dp[q][0] = 0;
        d1 = d2 = 0, w = GR[q][0], rg = GR[q][1];
        for (; w <= rg; w++) {
            dp[q][0] += dp[w][0];
            if (dp[w][1] >= d1)
                d2 = d1, d1 = dp[w][1];
            else
                d2 = max(d2, dp[w][1]);
        }
        if (d1 + d2 + 1 < LEN)
            dp[q][1] = d1 + 1;
        else
            dp[q][0]++, dp[q][1] = 0;
    }
    return o[LEN] = dp[0][0];
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cin >> a;
    o[1] = a;
    ST = a - 1;
    for (int i = 1; i <= a; i++)
        skok[a / i]++;
    for (int &i : skok)
        i /= 2;
    for (int i = 0; i < a - 1; i++) {
        int x, y;
        cin >> x >> y;
        x--, y--;
        l[x].push_back(y);
        l[y].push_back(x);
    }
    decompose(0);
    for (int i = 0; i < a; i++)
        c[i].push_back(i);
    for (int i = 0; i < a; i++) {
        if (good[i])
            build_tree(i, -1);
        else
            build_tree(i, i);
    }
    rnm(0);
    for (int i = 0; i < a; i++)
        l[i].clear();
    for (int i = 0; i < a; i++) {
        for (int j = 0; j < c[i].size(); j++) {
            int x = c[i][j];
            l[zam[x]].push_back(zam[i]);
            l[zam[i]].push_back(zam[x]);
        }
    }
    for (int i = 0; i < a; i++)
        GR[i][0] = l[i].size() ? l[i][0] : a, GR[i][1] = l[i].size() ? l[i][l[i].size() - 1] : i;
    for (int i = 0; i < a; i++)
        good[i] = sz[i] == mxd[i], dp[i][1] = -1;
    int diam = 0;
    for (int i = 0; i < a; i++)
        mxp[i] = c[i].size() ? c[i].size() - 1 : 0, diam = max(diam, mxp[i]);
    o[diam] = 1;
    for (int i = diam + 1; i <= a; i++)
        o[i] = 0;
    int H = min(a - 1, (int) (sqrt(a * log2(a)) / 2)), I = 2;
    for (; I <= H; I++) {
        o[I] = GA(I);
        OPA = I / 2;
    }
    int tyt;
    for (; I <=