```cpp
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
using namespace std;
const int MAXN = 400005, LOGN = 20;
int a, OPA = -1, diam, ST, skok[MAXN], o[MAXN], zam[MAXN], GR[MAXN][2], mxd[MAXN], mxp[MAXN], dp[MAXN][2], sz[MAXN], good[MAXN], iba;
vector<int> l[MAXN], gd, bd;
void RIP_PAPA(int v, int p) {
  for (int q = 0; q < l[v].size(); q++) {
    if (l[v][q] == p) {
      l[v].erase(l[v].begin() + q);
      break;
    }
  }
  for (int h : l[v])
    RIP_PAPA(h, v);
}
void rnm(int v) {
  zam[v] = iba++;
  deque<int> dq = {v};
  for (; dq.size();) {
    int x = dq[0];
    dq.pop_front();
    for (int h : l[x]) {
      if (zam[h] != -1)
        continue;
      dq.push_back(h);
      zam[h] = iba++;
    }
  }
}
void rnm2(int v) {
  zam[v] = iba++;
  deque<int> dq = {v};
  for (; dq.size();) {
    int x = dq[0];
    dq.pop_front();
    for (int h : l[x]) {
      zam[h] = iba++;
      if (good[h])
        continue;
      dq.push_back(h);
    }
  }
}
int CALC(int v, int p, int D) {
  mxd[v] = 1;
  sz[v] = 1;
  int c1 = 0, c2 = 0;
  for (int h : l[v]) {
    if (h == p)
      continue;
    int x = CALC(h, v, D + 1);
    mxd[v] = max(mxd[v], x + 1);
    sz[v] += sz[h];
    if (x >= c1)
      c2 = c1, c1 = x;
    else if (x > c2)
      c2 = x;
  }
  mxp[v] = c1 + c2 + 1;
  return mxd[v];
}
int find_centroid(int v, int p) {
  int MX = 0, num = -1;
  for (int h : l[v]) {
    if (h != p && sz[h] > MX)
      MX = sz[h], num = h;
  }
  return MX > a / 2 ? find_centroid(num, v) : v;
}
void KROLIK(int v) {
  if (good[v])
    gd.push_back(v);
  else
    bd.push_back(v);
  for (int h : l[v]) {
    if (!good[h])
      KROLIK(h);
  }
}
int GA(int LEN) {
  if (o[LEN] != -1)
    return o[LEN];
  int d1, d2, w, rg;
  for (int q = ST; q >= 0; q--) {
    if (good[q]) {
      dp[q][0] = sz[q] / LEN;
      dp[q][1] = sz[q] % LEN;
      continue;
    }
    dp[q][0] = 0;
    d1 = d2 = 0, w = GR[q][0], rg = GR[q][1];
    for (; w <= rg; w++) {
      dp[q][0] += dp[w][0];
      if (dp[w][1] >= d1)
        d2 = d1, d1 = dp[w][1];
      else
        d2 = max(d2, dp[w][1]);
    }
    if (d1 + d2 + 1 < LEN)
      dp[q][1] = d1 + 1;
    else
      dp[q][0]++, dp[q][1] = 0;
  }
  return o[LEN] = dp[0][0];
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cin >> a;
  memset(o, -1, sizeof(o));
  memset(zam, -1, sizeof(zam));
  o[1] = a;
  ST = a - 1;
  for (int q = 1; q <= a; q++)
    skok[a / q]++;
  for (int &i : skok)
    i /= 2;
  vector<pair<int, int>> reb(a - 1);
  for (int q = 0; q < a - 1; q++) {
    int x, y;
    cin >> x >> y;
    x--, y--;
    reb[q] = {x, y};
    l[x].emplace_back(y);
    l[y].emplace_back(x);
  }
  rnm(0);
  for (int q = 0; q < a; q++)
    l[q].clear();
  for (auto p : reb) {
    l[zam[p.first]].emplace_back(zam[p.second]);
    l[zam[p.second]].emplace_back(zam[p.first]);
  }
  RIP_PAPA(0, -1);
  reb.clear();
  for (int q = 0; q < a; q++) {
    for (int h : l[q])
      reb.emplace_back(q, h);
  }
  CALC(0, -1, 1);
  for (int q = 0; q < a; q++)
    good[q] = sz[q] == mxd[q];
  memset(zam, -1, sizeof(zam));
  zam[0] = 0;
  diam = 0;
  for (int i = 1; i < a; ++i) {
    if (good[i])
      continue;
    int df = min(sz[i], a - sz[i]);
    if (df > diam) {
      diam = df;
      ST = i;
    }
  }
  if (!good[0])
    rnm2(0);
  else
    iba = 1;
  ST = iba - 1;
  for (int q = 0; q < a; q++) {
    if (zam[q] == -1)
      continue;
    sz[zam[q]] = sz[q];
    mxd[zam[q]] = mxd[q];
    mxp[zam[q]] = mxp[q];
  }
  for (int q = 0; q < a; q++)
    l[q].clear();
  for (auto p : reb) {
    if (min(zam[p.first], zam[p.second]) > -1) {
      l[zam[p.first]].emplace_back(zam[p.second]);
    }
  }
  for (int q = 0; q < a; q++) {
    GR[q][0] = l[q].size() ? l[q][0] : a;
    GR[q][1] = l[q].size() ? l[q].back() : q;
    assert(l[q].empty() || GR[q][1] - GR[q][0] + 1 == l[q].size());
  }
  for (int q = 0; q < a; q++)
    good[q] = sz[q] == mxd[q];
  for (int &i : mxp)
    diam = max(i, diam);
  o[diam] = 1;
  for (int q = diam + 1;