```c++
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int MAXN = 400005, MAXLOG = 20;

int n, sz[MAXN], mx[MAXN], anc[MAXN][MAXLOG], depth[MAXN], id[MAXN], node[MAXN], cur, diam, o[MAXN];
vector<int> g[MAXN], centroids, path;

void getsz(int v, int p) {
    sz[v] = 1;
    mx[v] = 0;
    for (int &u : g[v]) {
        if (u == p) continue;
        getsz(u, v);
        sz[v] += sz[u];
        mx[v] = max(mx[v], sz[u]);
    }
    mx[v] = max(mx[v], cur - sz[v]);
    if (mx[v] < mx[diam])
        diam = v;
}

void dfs(int v, int p) {
    anc[v][0] = p;
    for (int i = 1; i < MAXLOG; i++) {
        anc[v][i] = anc[anc[v][i-1]][i-1];
    }
    for (int &u : g[v]) {
        if (u == p) continue;
        depth[u] = depth[v] + 1;
        dfs(u, v);
    }
}

int lca(int x, int y) {
    if (depth[x] < depth[y]) swap(x, y);
    for (int i = MAXLOG-1; i >= 0; i--) {
        if (depth[anc[x][i]] >= depth[y]) x = anc[x][i];
    }
    if (x == y) return x;
    for (int i = MAXLOG-1; i >= 0; i--) {
        if (anc[x][i] != anc[y][i]) {
            x = anc[x][i];
            y = anc[y][i];
        }
    }
    return anc[x][0];
}

void getcentroids(int v, int p) {
    bool is_centroid = true;
    node[cur] = v;
    id[v] = cur++;
    sz[v] = 1;
    for (int &u : g[v]) {
        if (u == p) continue;
        getcentroids(u, v);
        sz[v] += sz[u];
        if (sz[u] > cur / 2) is_centroid = false;
    }
    if (cur - sz[v] > cur / 2) is_centroid = false;
    if (is_centroid) centroids.push_back(v);
}

void dfs2(int v, int p) {
    if (id[v] != -1) {
        path.push_back(id[v]);
    }
    for (int &u : g[v]) {
        if (u == p) continue;
        dfs2(u, v);
    }
}

int GA(int k) {
    if (o[k] != -1) return o[k];
    int res = n;
    for (int &c : centroids) {
        path.clear();
        dfs2(c, 0);
        int m = path.size();
        vector<int> pref(m+1, 0), suf(m+1, 0);
        for (int i = 0; i < m; i++) {
            pref[i+1] = pref[i] + (node[path[i]] <= k);
        }
        for (int i = m-1; i >= 0; i--) {
            suf[i] = suf[i+1] + (node[path[i]] <= k);
        }
        for (int i = 0; i < m; i++) {
            int ans = pref[i] + suf[i+1] + 1;
            if (node[path[i]] <= k) ans--;
            res = min(res, ans);
        }
    }
    return o[k] = res;
}

int main() {
    ios_base::sync_with_stdio(false); cin.tie(NULL);
    cin >> n;
    memset(id, -1, sizeof(id));
    memset(o, -1, sizeof(o));
    for (int i = 1; i < n; i++) {
        int u, v; cin >> u >> v; u--, v--;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    mx[diam] = n;
    getsz(0, -1);
    for (int &u : g[diam]) {
        centroids.clear();
        getcentroids(u, diam);
        for (int &c : centroids) {
            dfs(c, 0);
        }
    }
    int h = min(n-1, (int)(sqrt(n * log2(n)) / 2));
    for (int i = 1; i <= h; i++) {
        o[i] = GA(i);
    }
    for (int i = 1; i <= n; i++) {
        cout << max(0, o[i]) << '\n';
    }
    return 0;
} 
```