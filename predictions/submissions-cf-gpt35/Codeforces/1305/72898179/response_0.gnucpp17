#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <cmath>
using namespace std;

const int M = 1e6 + 105;
vector<int> p;
void sieve(int n) {
    vector<bool> bz(n+1, false);
    for (int i = 2; i <= n; i++) {
        if (!bz[i])
            p.push_back(i);
        for (int j = 0; j < p.size() && i * p[j] <= n; j++) {
            int k = i * p[j];
            bz[k] = true;
            if (i % p[j] == 0)
                break;
        }
    }
}

const int N = 2e5 + 5;
int n;
vector<long long> a;
vector<long long> u;
void fen(long long n) {
    u.clear();
    for (int i = 0; i < p.size() && (long long)p[i] * p[i] <= n; i++) {
        if (n % p[i] == 0) {
            u.push_back(p[i]);
            while (n % p[i] == 0)
                n /= p[i];
        }
    }
    if (n > 1)
        u.push_back(n);
}

map<long long, int> w;
long long ans;
void check(long long x) {
    long long s = 0;
    for (int i = 0; i < n; i++) {
        if (a[i] >= x) {
            long long y = a[i] % x;
            s += min(y, x - y);
        } else
            s += x - a[i];
        if (s > ans)
            return;
    }
    ans = s;
}

int main() {
    sieve(1e6);
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        long long x;
        scanf("%lld", &x);
        a.push_back(x);
    }
    random_shuffle(a.begin(), a.end());
    for (int i = 0; i < min(n, 1000); i++) {
        for (int j = -1; j <= 1; j++) {
            long long x = a[i] + j;
            if (x > 1) {
                fen(x);
                for (auto k : u)
                    w[k] = 1;
            }
        }
    }
    ans = n;
    for (auto it = w.begin(); it != w.end(); it++)
        check(it->first);
    printf("%lld\n", ans);
    return 0;
}