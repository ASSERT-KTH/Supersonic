```cpp
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;

const int M = 1e6 + 105;
const int N = 2e5 + 5;
int bz[M], p[M], p0;
int n;
long long a[N];
long long ans;

void sieve(int n) {
    for (int i = 2; i <= n; i++) {
        if (!bz[i]) p[++p0] = i;
        for (int j = 1; i * p[j] <= n; j++) {
            int k = i * p[j];
            bz[k] = 1;
            if (i % p[j] == 0) break;
        }
    }
}

void fen(long long n, vector<long long>& u) {
    u.clear();
    for (int i = 1; i <= p0 && (long long)p[i] * p[i] <= n; i++) {
        if (n % p[i] == 0) {
            u.push_back(p[i]);
            while (n % p[i] == 0) n /= p[i];
        }
    }
    if (n > 1) u.push_back(n);
}

void check(long long x) {
    long long s = 0;
    for (int i = 1; i <= n; i++) {
        if (a[i] >= x) {
            long long y = a[i] % x;
            s += min(y, x - y);
        } else {
            s += x - a[i];
        }
        if (s > ans) return;
    }
    ans = s;
}

int main() {
    sieve(1e6);
    cin >> n;
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
    }
    random_shuffle(a + 1, a + n + 1);
    vector<long long> u;
    map<long long, int> w;
    for (int i = 1; i <= min(n, 1000); i++) {
        for (int j = -1; j <= 1; j++) {
            long long x = a[i] + j;
            if (x > 1) {
                fen(x, u);
                for (int k = 0; k < u.size(); k++) {
                    w[u[k]] = 1;
                }
            }
        }
    }
    ans = n;
    for (auto it = w.begin(); it != w.end(); it++) {
        check(it->first);
    }
    cout << ans << endl;
    return 0;
}
```