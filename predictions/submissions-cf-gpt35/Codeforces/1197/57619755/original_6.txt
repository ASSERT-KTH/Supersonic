```cpp
#pragma GCC optimize("O3", "unroll-loops")
#pragma GCC target("avx2")
#include <bits/stdc++.h>
using namespace std;
#define ll long long
ll n, m, k, ans, sum, a[1005000], dp[1005000];
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cin >> n >> m >> k;
  for (int i = 1; i <= n; i++)
    cin >> a[i];
  for (int i = 1; i <= n; i++) {
    sum = a[i];
    for (int j = i - 1; j >= max(0, i - m); j--) {
      dp[i] = max(dp[i], dp[j] + sum - k);
      sum += a[j];
    }
    ans = max(ans, dp[i]);
  }
  cout << ans;
  return 0;
}
```

Explanation:
In the original code, the inner loop runs from `i-1` to `0` when `i - j <= m`. However, this causes an out-of-bounds access when `i <= m`. To fix this, I changed the condition of the inner loop to `i - j <= m` and `j` starts from `max(0, i - m)`. This ensures that `j` doesn't go below `0` when `i <= m`.