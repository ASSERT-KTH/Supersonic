#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
const long long MOD = 1e9 + 7;
long long getSum(long long n) {
  return n * (n + 1) / 2;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long n, x;
  cin >> n >> x;
  vector<long long> v(n);
  for (long long i = 0; i < n; i++)
    cin >> v[i];
  for (long long i = 0; i < n; i++) {
    v.push_back(v[i]);
  }
  n *= 2;
  vector<long long> u(n);
  u[0] = v[0];
  for (long long i = 1; i < n; i++) {
    u[i] = u[i - 1] + v[i];
  }
  vector<long long> z(n);
  z[0] = v[0] * (v[0] + 1) / 2;
  for (long long i = 1; i < n; i++) {
    z[i] = z[i - 1] + v[i] * (v[i] + 1) / 2;
  }
  long long ans = 0;
  int s = 0, e = 0;
  long long days = 0, sums = 0;
  while (e < v.size()) {
    days += v[e];
    sums += getSum(v[e]);
    e++;
    while (days > x) {
      if (days - v[s] < x) {
        break;
      }
      days -= v[s];
      sums -= getSum(v[s]);
      s++;
    }
    long long diff = max(days - x, 0LL);
    ans = max(ans, sums - z[s] + getSum(diff));
  }
  cout << ans;
  return 0;
}