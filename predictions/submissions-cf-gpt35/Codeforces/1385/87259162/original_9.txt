```cpp
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

void dfs(int node, vector<bool>& visited, vector<int>& ts, vector<vector<int>>& g) {
    visited[node] = true;
    for (int next : g[node]) {
        if (!visited[next]) {
            dfs(next, visited, ts, g);
        }
    }
    ts.push_back(node);
}

void compute(int n, int m, vector<vector<int>>& g, vector<pair<int, int>>& directed_edges, vector<pair<int, int>>& undirected_edges) {
    vector<bool> visited(n + 1, false);
    vector<int> ts;

    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            dfs(i, visited, ts, g);
        }
    }

    reverse(ts.begin(), ts.end());

    vector<int> topo_order(n + 1);
    for (int i = 0; i < n; i++) {
        topo_order[ts[i]] = i;
    }

    bool possible = true;
    for (auto& e : directed_edges) {
        if (topo_order[e.first] > topo_order[e.second]) {
            possible = false;
            break;
        }
    }

    if (!possible) {
        cout << "NO" << endl;
        return;
    }

    cout << "YES" << endl;
    for (auto& p : directed_edges) {
        cout << p.first << " " << p.second << endl;
    }
    for (auto& p : undirected_edges) {
        if (topo_order[p.first] < topo_order[p.second]) {
            cout << p.first << " " << p.second << endl;
        } else {
            cout << p.second << " " << p.first << endl;
        }
    }
}

void read_and_query() {
    int n, m;
    cin >> n >> m;

    vector<vector<int>> g(n + 1);
    vector<pair<int, int>> directed_edges;
    vector<pair<int, int>> undirected_edges;

    for (int i = 0; i < m; i++) {
        int t, u, v;
        cin >> t >> u >> v;
        if (t == 0) {
            undirected_edges.push_back({ u, v });
        } else {
            directed_edges.push_back({ u, v });
            g[u].push_back(v);
        }
    }

    compute(n, m, g, directed_edges, undirected_edges);
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        read_and_query();
    }
    return 0;
}
```