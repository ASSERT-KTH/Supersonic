#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int NMax = 1e7 + 5;

int main() {
  int N, M;
  cin >> N >> M;
  vector<vector<int>> heightsOfBlock(N + 1), costsOfBlock(N + 1);
  for (int i = 1; i <= N; ++i) {
    int K;
    cin >> K;
    heightsOfBlock[i].resize(K);
    costsOfBlock[i].resize(K);
    for (int j = 0; j < K; ++j) {
      cin >> heightsOfBlock[i][j];
    }
    for (int j = 0; j < K; ++j) {
      cin >> costsOfBlock[i][j];
    }
  }
  int Q, curr = 0;
  cin >> Q;
  vector<int> id(Q), mult(Q);
  for (int i = 0; i < Q; ++i) {
    cin >> id[i] >> mult[i];
    curr += heightsOfBlock[id[i]].size();
  }
  vector<int> height(curr + 1), cost(curr + 1);
  curr = 0;
  for (int i = 0; i < Q; ++i) {
    int blockId = id[i];
    int multVal = mult[i];
    int size = heightsOfBlock[blockId].size();
    for (int j = 0; j < size; ++j) {
      int h = heightsOfBlock[blockId][j];
      int c = costsOfBlock[blockId][j];
      height[++curr] = h;
      cost[curr] = 1LL * multVal * c;
    }
  }
  heightsOfBlock.clear();
  costsOfBlock.clear();
  vector<ll> dp(M + 1);
  vector<pair<int, ll>> stackPushLeft, stackPushRight;
  for (int i = 1; i <= M; ++i) {
    ll minLeft = dp[i - 1];
    while (!stackPushLeft.empty() &&
           i - height[i] + 1 <= stackPushLeft.back().first) {
      minLeft = min(minLeft, stackPushLeft.back().second);
      stackPushLeft.pop_back();
    }
    dp[i] = minLeft + cost[i];
    ll valHere = dp[i - 1];
    minLeft = min(minLeft, valHere);
    stackPushLeft.push_back({i, minLeft});
    int idx = -1;
    while (!stackPushRight.empty() &&
           ((idx = stackPushRight.back().first) || true) &&
           idx + height[idx] - 1 < i) {
      stackPushRight.pop_back();
    }
    if (!stackPushRight.empty()) {
      ll dpPlusCost = stackPushRight.back().second;
      dp[i] = min(dp[i], dpPlusCost);
    }
    ll dpPlusCost = dp[i - 1] + cost[i];
    if (!stackPushRight.empty()) {
      dpPlusCost = min(dpPlusCost, stackPushRight.back().second);
    }
    stackPushRight.push_back({i, dpPlusCost});
  }
  cout << dp[M] << '\n';
  return 0;
}