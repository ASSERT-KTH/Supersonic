#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int NMax = 1e7 + 5;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int N, M;
  cin >> N >> M;
  
  vector<vector<int>> heightsOfBlock(N + 1), costsOfBlock(N + 1);
  
  for (int i = 1; i <= N; ++i) {
    int K;
    cin >> K;
    heightsOfBlock[i].resize(K);
    costsOfBlock[i].resize(K);
    for (int j = 0; j < K; ++j) {
      cin >> heightsOfBlock[i][j];
    }
    for (int j = 0; j < K; ++j) {
      cin >> costsOfBlock[i][j];
    }
  }
  
  int Q, curr = 0;
  cin >> Q;
  vector<int> id(Q), mult(Q);
  for (int i = 0; i < Q; ++i) {
    cin >> id[i] >> mult[i];
    curr += heightsOfBlock[id[i]].size();
  }

  vector<int> height(curr + 1);
  vector<long long> cost(curr + 1);
  
  curr = 0;
  for (int i = 0; i < Q; ++i) {
    int blockId = id[i];
    int blockMult = mult[i];
    int K = heightsOfBlock[blockId].size();
    for (int j = 0; j < K; ++j) {
      height[++curr] = heightsOfBlock[blockId][j];
      cost[curr] = 1LL * blockMult * costsOfBlock[blockId][j];
    }
  }
  
  vector<long long> dp(M + 1);
  vector<pair<int, long long>> stackPushLeft, stackPushRight;
  
  for (int i = 1; i <= M; ++i) {
    long long minLeft = dp[i - 1];
    
    while (!stackPushLeft.empty() && i - height[i] + 1 <= stackPushLeft.back().first) {
      minLeft = min(minLeft, stackPushLeft.back().second);
      stackPushLeft.pop_back();
    }
    
    dp[i] = minLeft + cost[i];
    long long valHere = dp[i - 1];
    
    minLeft = min(minLeft, valHere);
    stackPushLeft.push_back({i, minLeft});
    
    int idx = -1;
    
    while (!stackPushRight.empty() && ((idx = stackPushRight.back().first) || true) && idx + height[idx] - 1 < i) {
      stackPushRight.pop_back();
    }
    
    if (!stackPushRight.empty()) {
      long long dpPlusCost = stackPushRight.back().second;
      dp[i] = min(dp[i], dpPlusCost);
    }
    
    long long dpPlusCost = dp[i - 1] + cost[i];
    
    if (!stackPushRight.empty()) {
      dpPlusCost = min(dpPlusCost, stackPushRight.back().second);
    }
    
    stackPushRight.push_back({i, dpPlusCost});
  }
  
  cout << dp[M] << '\n';
  
  return 0;
}