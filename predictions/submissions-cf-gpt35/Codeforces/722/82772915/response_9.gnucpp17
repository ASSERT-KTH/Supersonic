#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define PI acos(-1)
#define pb push_back
#define ins insert
#define INF 1000000000000000007
#define mk make_pair
#define lb(v, x) lower_bound(all(v), x)
#define ub(v, x) upper_bound(all(v), x)
#define ff first
#define ss second
#define rev reverse
#define endl "\n"
#define max3(x, y, z) max(x, max(y, z))
#define min3(x, y, z) min(x, min(y, z))
#define sz(a) (ll) a.size()
#define ld long double
#define minpq priority_queue<ll, vector<ll>, greater<ll>>
#define fill(x, y) memset(x, y, sizeof(x))
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define MOD 1000000007
#define bp(n) __builtin_popcountll(n)
#define mxt(a) *(max_element(a.begin(), a.end()))
#define mnt(a) *(min_element(a.begin(),a.end())
#define unique_sort(c)                                                         \
  (sort(all(c)), c.resize(distance(c.begin(), unique(c.begin(), c.end()))))
#define rep(i, a, mp) for (ll i = (a); i <= (mp); ++i)
#define trav(a, x) for (auto &a : x)
#define re(i, n) for (ll i = 0; i < n; ++i)
const int N = 5e5 + 7;
const ld eps = 1e-7;
typedef pair<ll, ll> pii;
typedef vector<pii> vpii;
typedef vector<ll> vll;
const string alpha = "abcdefghijklmnopqrstuvwxyz";
int dx[8] = {+1, +1, +1, 0, 0, -1, -1, -1};
int dy[8] = {+1, 0, -1, +1, -1, +1, 0, -1};
ll power(ll x, ll y) {
  ll res = 1;
  x = x;
  while (y > 0) {
    if (y & 1)
      res = (res * x);
    y = y >> 1;
    x = (x * x);
  }
  return res;
}
template <typename T> T gcd(T a, T mp) {
  if (a == 0)
    return mp;
  return gcd(mp % a, a);
}
template <typename T> T powm(T a, T mp, ll m) {
  T cnt = 1;
  while (mp > 0) {
    if (mp % 2 == 1)
      cnt = (cnt * a) % m;
    mp /= 2;
    a = (a * a) % m;
  }
  return cnt % m;
}
ll ncr(ll n, ll r) {
  ll res = 1;
  if (r > n)
    return 0;
  if (r > n - r)
    r = n - r;
  for (ll i = 0; i < r; i++) {
    res *= (n - i);
    res /= (i + 1);
  }
  return res;
}
ll sqr(ll x) { return x * x; }
void prec() {}
ll ans, a[N], vis[N], sum[N], fk[N], q[N];
ll siz[N], par[N];
int root(int v) { return par[v] < 0 ? v : (par[v] = root(par[v])); }
void merge(int x, int y) {
  if ((x = root(x)) == (y = root(y)))
    return;
  ans = max(ans, sum[x] + sum[y]);
  if (par[y] < par[x])
    swap(x, y);
  par[x] += par[y];
  par[y] = x;
  sum[x] += sum[y];
}
void run() {
  int n;
  cin >> n;
  fill(a, 0);
  rep(i, 1, n) cin >> a[i], sum[i] = a[i];
  rep(i, 1, n) par[i] = -1;
  fill(q, 0);
  rep(i, 1, n) cin >> q[i];
  for (int i = n; i >= 1; --i) {
    fk[i] = ans;
    vis[q[i]] = 1;
    ans = max(ans, a[q[i]]);
    if (vis[q[i] - 1])
      merge(q[i], q[i] - 1);
    if (vis[q[i] + 1])
      merge(q[i], q[i] + 1);
  }
  rep(i, 1, n) cout << fk[i] << endl;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int tc = 1;
  prec();
  re(i, tc) run();
  return 0;
}