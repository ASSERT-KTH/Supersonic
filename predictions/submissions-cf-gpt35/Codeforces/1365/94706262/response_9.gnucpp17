#include <iostream>
#include <cstring>
using namespace std;

const int MAX_N = 51;
const int MAX_M = 51;

int t, n, m, G;
char maze[MAX_N][MAX_M];
bool visited[MAX_N][MAX_M];
int dr[] = {-1, 1, 0, 0};
int dc[] = {0, 0, -1, 1};

bool block(int r, int c) {
  if (maze[r - 1][c] == 'G' || (r - 1 == n && c == m && G > 0)) {
    return false;
  }
  if (maze[r + 1][c] == 'G' || (r + 1 == n && c == m && G > 0)) {
    return false;
  }
  if (maze[r][c - 1] == 'G' || (r == n && c - 1 == m && G > 0)) {
    return false;
  }
  if (maze[r][c + 1] == 'G' || (r == n && c + 1 == m && G > 0)) {
    return false;
  }
  return true;
}

void dfs(int r, int c) {
  if (r <= 0 || c <= 0 || r > n || c > m)
    return;
  if (maze[r][c] == '#' || visited[r][c])
    return;
  visited[r][c] = true;
  if (maze[r][c] == 'G') {
    G--;
  }
  for (int i = 0; i < 4; i++) {
    dfs(r + dr[i], c + dc[i]);
  }
}

int main() {
  cin >> t;
  while (t--) {
    cin >> n >> m;
    bool flag = false;
    G = 0;
    memset(visited, false, sizeof(visited));
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= m; j++) {
        cin >> maze[i][j];
      }
    }
    for (int i = 1; i <= n && !flag; i++) {
      for (int j = 1; j <= m && !flag; j++) {
        if (maze[i][j] == 'B') {
          if (!block(i, j)) {
            cout << "No\n";
            flag = true;
            break;
          }
        } else if (maze[i][j] == 'G') {
          G++;
        }
      }
    }
    if (flag) {
      continue;
    }
    dfs(n, m);
    if (G == 0) {
      cout << "Yes\n";
    } else {
      cout << "No\n";
    }
  }
  return 0;
}