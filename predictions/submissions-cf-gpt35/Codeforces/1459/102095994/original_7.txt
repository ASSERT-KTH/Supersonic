```cpp
#include <bits/stdc++.h>
using namespace std;

const int N = 210;
const int MAX_CAP = 100 * 100 + 10;
const double INF = 1e18;

int n, a[N], b[N];
double dp[MAX_CAP][N];

void solve() {
  cin >> n;
  for (int i = 1; i <= n; i++) cin >> a[i] >> b[i];

  double total = accumulate(b + 1, b + n + 1, 0.0);
  for (int i = 0; i < MAX_CAP; i++)
    for (int j = 0; j < N; j++)
      dp[i][j] = -INF;
  dp[0][0] = 0;

  double ans = -INF;
  int cap = 0;
  for (int i = 1; i <= n; i++) {
    cap += a[i];
    for (int c = cap; c >= a[i]; c--) {
      for (int k = 1; k <= n; k++) {
        dp[c][k] = max(dp[c - a[i]][k - 1] + b[i], dp[c][k]);
      }
    }
  }

  for (int k = 1; k <= n; k++) {
    ans = -INF;
    for (int c = 1; c <= MAX_CAP; c++) {
      ans = max(min(dp[c][k] + (total - dp[c][k]) / 2.0, (double)c), ans);
    }
    cout << fixed << setprecision(20) << ans << " ";
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  solve();
  return 0;
}
```