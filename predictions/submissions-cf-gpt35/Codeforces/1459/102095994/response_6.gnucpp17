#include <algorithm>
#include <iostream>
#include <vector>
#include <numeric>
#include <iomanip>

const int N = 2e2 + 10;

void solve() {
  int n;
  std::cin >> n;
  
  std::vector<int> a(n + 1);
  std::vector<int> b(n + 1);
  
  for (int i = 1; i <= n; i++) {
    std::cin >> a[i] >> b[i];
  }
  
  double total = std::accumulate(b.begin() + 1, b.end(), 0);
  
  std::vector<std::vector<double>> dp(N * N, std::vector<double>(N, -1e18));
  dp[0][0] = 0;
  
  double ans = -1e18;
  int cap = 0;
  
  for (int i = 1; i <= n; i++) {
    auto &tmp = dp;
    cap += a[i];
    
    for (int c = 100 * 100 + 10; c >= 1; c--) {
      for (int k = n; k >= 1; k--) {
        if (c >= a[i]) {
          tmp[c][k] = std::max(dp[c - a[i]][k - 1] + static_cast<double>(b[i]), dp[c][k]);
        }
      }
    }
  }
  
  for (int k = 1; k <= n; k++) {
    ans = -1e18;
    auto &tmp = dp;
    
    for (int c = 1; c <= 100 * 100 + 10; c++) {
      ans = std::max(std::min(tmp[c][k] + (total - tmp[c][k]) / 2.0, static_cast<double>(c)), ans);
    }
    
    std::cout << std::fixed << std::setprecision(20) << ans << " ";
  }
}

int main() {
  solve();
  return 0;
}