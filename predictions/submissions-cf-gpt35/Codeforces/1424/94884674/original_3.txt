```cpp
#include <bits/stdc++.h>
const int INF = 0x3f3f3f3f;
const double PI = acos(-1);
const double eps = 1e-8;
typedef unsigned long long ull;
typedef long long ll;
template <typename t> void read(t &x) {
  char ch = getchar();
  x = 0;
  int f = 1;
  while (!isdigit(ch)) {
    if (ch == '-')
      f = -1;
    ch = getchar();
  }
  while (isdigit(ch)) {
    x = (x << 3) + (x << 1) + (ch ^ 48);
    ch = getchar();
  }
  x = x * f;
}
#define pii pair<int, int>
#define X first
#define Y second
#define lowbit a &(-a)
using namespace std;
const int maxn = 1e6 + 10;
const int mod = 1e9 + 7;
bool vis[maxn];
void euler(int n, vector<int>& primes) {
  primes.clear();
  primes.reserve(n / log(n));
  memset(vis, 0, sizeof(vis));
  for (int i = 2; i < n; ++i) {
    if (!vis[i])
      primes.push_back(i);
    for (int j = 0; j < primes.size() && i * primes[j] < n; ++j) {
      vis[i * primes[j]] = true;
      if (i % primes[j] == 0)
        break;
    }
  }
}
int ans[maxn];
int main() {
  vector<int> primes;
  euler(maxn - 9, primes);
  vis[1] = 1;
  for (int i = 1; i <= maxn; ++i)
    ans[i] = ans[i - 1] + (int)(!vis[i]);
  int t;
  read(t);
  while (t--) {
    int n;
    read(n);
    if (n <= 3) {
      printf("%d\n", n);
      continue;
    }
    int l = 0, r = primes.size();
    while (l + 1 < r) {
      int mid = (r + l) / 2;
      if ((ll)primes[mid] * primes[mid] <= (ll)n)
        l = mid;
      else
        r = mid;
    }
    printf("%d\n", ans[n] - ans[primes[l]] + 1);
  }
  return 0;
}
```