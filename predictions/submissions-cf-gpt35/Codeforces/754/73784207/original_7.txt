```cpp
#include <bits/stdc++.h>
using namespace std;
#define F first
#define S second
#define endl "\n"
#define pb push_back
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
template <class T> ostream &operator<<(ostream &os, const vector<T> &v) {
  for (T i : v)
    os << i << ", ";
  return os;
}
template <class T> ostream &operator<<(ostream &os, const set<T> &v) {
  for (T i : v)
    os << i << " ";
  return os;
}
template <class T> ostream &operator<<(ostream &os, const multiset<T> &v) {
  for (T i : v)
    os << i << " ";
  return os;
}
template <class T, class S>
ostream &operator<<(ostream &os, const pair<T, S> &v) {
  os << v.F << ' ' << v.S;
  return os;
}
template <class T, class S>
ostream &operator<<(ostream &os, const map<T, S> &v) {
  for (auto i : v)
    os << '(' << i.F << " => " << i.S << ')' << ' ';
  return os;
}
void fast() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
}
const int N = 6e5 + 5;
vector<pair<pll, int>> v;
map<ll, int> mp;
vector<ll> inv_map(N);
int n, k;
vector<int> segtree(4 * N, 0), lazy(4 * N, 0);
void spread(int node, int l, int r) {
  if (lazy[node] != 0) {
    segtree[node] += lazy[node];
    if (l != r) {
      lazy[2 * node + 1] += lazy[node];
      lazy[2 * node + 2] += lazy[node];
    }
  }
  lazy[node] = 0;
}
void update(int x, int y, int val, int node = 0, int l = 0, int r = N - 1) {
  spread(node, l, r);
  if (l > y || r < x || x > y)
    return;
  if (l >= x && r <= y) {
    lazy[node] += val;
    spread(node, l, r);
    return;
  }
  int mid = (l + r) >> 1;
  update(x, y, val, 2 * node + 1, l, mid);
  update(x, y, val, 2 * node + 2, mid + 1, r);
  segtree[node] = min(segtree[2 * node + 1], segtree[2 * node + 2]);
}
int query(int x, int y, int node = 0, int l = 0, int r = N - 1) {
  spread(node, l, r);
  if (l > y || r < x)
    return INT_MAX - 1;
  if (l >= x && r <= y) {
    return segtree[node];
  }
  int mid = (l + r) >> 1;
  return min(query(x, y, 2 * node + 1, l, mid),
             query(x, y, 2 * node + 2, mid + 1, r));
}
void solve() {
  sort(v.begin(), v.end());
  for (auto &i : v) {
    mp[i.F.F] = 0;
    mp[i.F.S] = 0;
  }
  int c = 0;
  for (auto &i : mp) {
    inv_map[c] = i.F;
    i.S = c++;
  }
  ll mx = 0, idx = -1;
  for (int i = 0; i < n; i++) {
    update(mp[v[i].F.F], mp[v[i].F.S], 1);
    int scaled_val = mp[v[i].F.F];
    int tt = -1;
    int s = scaled_val, e = c;
    while (s <= e) {
      int mid = (s + e) >> 1;
      int val = query(scaled_val, mid);
      if (val >= k) {
        tt = mid;
        s = mid + 1;
      } else
        e = mid - 1;
    }
    if (tt == -1)
      continue;
    ll temp = inv_map[tt] - v[i].F.F + 1;
    if (temp > mx) {
      mx = temp;
      idx = i;
    }
  }
  if (idx == -1) {
    cout << 0 << endl;
    for (int i = 1; i <= k; i++)
      cout << i << ' ';
    cout << endl;
    return;
  }
  ll l = v[idx].F.F, r = l + mx - 1;
  vector<int> ans;
  for (auto &i : v) {
    if (k == 0)
      break;
    if (i.F.F <= l && r <= i.F.S) {
      ans.pb(i.S);
      k--;
    }
  }
  sort(ans.begin(), ans.end());
  cout << mx << endl;
  for (int i : ans)
    cout << i << " ";
  cout << endl;
}
int main() {
  fast();
  cin >> n >> k;
  v.reserve(n);
  for (int i = 1; i <= n; i++) {
    ll a, b;
    cin >> a >> b;
    v.pb({{a, b}, i});
  }
  solve();
}
```