#include <bits/stdc++.h>
typedef long long int lli;
typedef unsigned long long int ulli;
typedef long double ldb;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
#define pb push_back
#define popb pop_back()
#define pf push_front
#define popf pop_front()
#define si size()
#define be begin()
#define en end()
#define all(v) v.be, v.en
#define le length()
#define mp make_pair
#define mt make_tuple
#define acc(v) accumulate(all(v), 0)
#define F first
#define S second
#define INF lli(1e19)
#define forz(i, n) for (lli i = 0; i < n; i++)
#define fore(i, m, n) for (lli i = m; i <= n; i++)
#define rforz(i, n) for (lli i = n - 1; i >= 0; i--)
#define rforzm(i, m, n) for (lli i = n - 1; i >= m; i--)
#define deci(n) fixed << setprecision(n)
#define high(n) __builtin_popcount(n)
#define highll(n) __builtin_popcountll(n)
#define parity(n) __builtin_parity(n)
#define ctz(n) __builtin_ctz(n)
#define lb lower_bound
#define ub upper_bound
#define er equal_range
#define maxe *max_element
#define mine *min_element
#define mod2 1000000007
#define mod 998244353
#define gcd __gcd
#define kira ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)
auto clk = clock();
mt19937_64
    rang(chrono::high_resolution_clock::now().time_since_epoch().count());
void run_time() {
#ifdef local
  cout << endl;
  cout << "Time elapsed: " << (double)(clock() - clk) / CLOCKS_PER_SEC << endl;
#endif
  return;
}
inline lli power(lli x, lli y, lli p = mod) {
  lli res = 1;
  x = x % p;
  while (y > 0) {
    if (y & 1)
      res = (res * x) % p;
    y = y >> 1;
    x = (x * x) % p;
  }
  return res;
}
inline lli modadd(lli a, lli b, lli m = mod) { return (a + b) % m; }
inline lli modmul(lli a, lli b, lli m = mod) { return ((a % m) * (b % m)) % m; }
inline lli modi(lli a, lli m = mod) { return power(a, m - 2, m); }

lli n, m, k;
vector<lli> a;

lli md(lli x) {
  if (x >= 0)
    return x;
  return -x;
}

lli maxSubArraySum(lli F) {
  lli max_so_far = (lli)INT_MIN, max_ending_here = 0;
  lli size = n;
  lli M = -31;
  for (lli i = 0; i < size; i++) {
    M = max(M, a[i]);
    max_ending_here = max_ending_here + a[i];
    if ((max_so_far < max_ending_here) and (M == F))
      max_so_far = max_ending_here;
    if (max_ending_here < 0 or M > F)
      max_ending_here = 0, M = -31;
  }
  return max_so_far;
}

int main() {
  kira;
  lli T = 1;
  while (T--) {
    cin >> n;
    a.resize(n);
    forz(i, n) cin >> a[i];
    lli R = 0;
    for (lli i = -30; i < 31; i++) {
      R = max(R, (maxSubArraySum(i) - i));
    }
    cout << R << endl;
  }
  return 0;
}