#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef long long int lli;

lli maxSubArraySum(const vector<lli>& a, lli F) {
    lli max_so_far = INT_MIN, max_ending_here = 0;
    lli size = a.size();
    lli M = -31;
    for (lli i = 0; i < size; i++) {
        M = max(M, a[i]);
        max_ending_here = max_ending_here + a[i];
        if ((max_so_far < max_ending_here) and (M == F))
            max_so_far = max_ending_here;
        if (max_ending_here < 0 or M > F)
            max_ending_here = 0, M = -31;
    }
    return max_so_far;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    lli T = 1;
    while (T--) {
        lli n;
        cin >> n;
        vector<lli> a(n);
        for (lli i = 0; i < n; i++) {
            cin >> a[i];
        }
        lli R = 0;
        for (lli i = -30; i < 31; i++) {
            R = max(R, (maxSubArraySum(a, i) - i));
        }
        cout << R << endl;
    }
    return 0;
}