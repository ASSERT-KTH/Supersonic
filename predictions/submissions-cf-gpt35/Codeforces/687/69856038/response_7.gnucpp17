#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

struct DSU {
    vector<int> parent;
    DSU(int n) {
        parent.resize(n);
        fill(parent.begin(), parent.end(), -1);
    }
    int find(int i) {
        return parent[i] < 0 ? i : (parent[i] = find(parent[i]));
    }
    bool join(int i, int j) {
        i = find(i);
        j = find(j);
        if (i == j)
            return false;
        if (parent[i] > parent[j])
            parent[i] = j;
        else {
            if (parent[i] == parent[j])
                parent[i]--;
            parent[j] = i;
        }
        return true;
    }
};

int main() {
    int n, m, q;
    scanf("%d%d%d", &n, &m, &q);
    vector<int> ii(m), jj(m), ww(m), hh(m);
    for (int h = 0; h < m; h++) {
        int i, j, w;
        scanf("%d%d%d", &i, &j, &w);
        i--, j--;
        ii[h] = i;
        jj[h] = j;
        ww[h] = w;
        hh[h] = h;
    }
    sort(hh.begin(), hh.end(), [&](int a, int b) { return ww[a] > ww[b]; });
    DSU dsu(n * 2);
    while (q-- > 0) {
        int l, r;
        scanf("%d%d", &l, &r);
        l--, r--;
        int w = -1;
        for (int h = 0; h < m; h++) {
            int h_ = hh[h];
            if (l <= h_ && h_ <= r) {
                int i = ii[h_];
                int j = jj[h_];
                int i0 = i << 1, i1 = i0 | 1;
                int j0 = j << 1, j1 = j0 | 1;
                if (dsu.join(i0, j1) && !dsu.join(i1, j0)) {
                    w = ww[h_];
                    break;
                }
            }
        }
        printf("%d\n", w);
    }
}