```
#include <algorithm>
#include <climits>
#include <cmath>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <tuple>
#include <vector>
#define LSOne(S) ((S) & -(S))
const long long P = 1e9 + 7;
const double EPS = 1e-11;
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    vector<long long> v(n);
    vector<long long> cnt(2e5 + 1, 0);
    for (int i = 0; i < n; i++) {
      cin >> v[i];
      cnt[v[i]]++;
    }
    vector<long long> dp(2e5 + 1, 0);
    long long best = 0;
    for (int i = 0; i < n; i++) {
      long long x = v[i];
      for (int j = 1; j * j <= x; j++) {
        if (x % j == 0) {
          dp[j] += cnt[x];
          if (x / j != j) {
            dp[x / j] += cnt[x];
          }
        }
      }
    }
    for (int i = 1; i <= 2e5; i++) {
      best = max(best, dp[i]);
    }
    cout << n - best << '\n';
  }
}
``` 

Explanation:
- Removed sorting of `v` as it is not required in the current implementation.
- Changed the inner loop to iterate over factors of the current element instead of iterating over all elements.
- Removed the `dp[1]` check as it is not necessary.
- Removed the loop to find the maximum value in `dp` and instead directly calculated the maximum value while iterating over `dp`.