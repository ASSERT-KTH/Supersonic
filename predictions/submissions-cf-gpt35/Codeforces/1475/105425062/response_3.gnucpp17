#include <algorithm>
#include <cmath>
#include <iostream>
#include <vector>

using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;

  while (t--) {
    int n;
    cin >> n;
    vector<int> v(n);
    vector<int> cnt(2e5 + 1, 0);
    for (int i = 0; i < n; i++) {
      cin >> v[i];
      cnt[v[i]]++;
    }
    sort(v.begin(), v.end());
    vector<int> dp(2e5 + 1, 0);
    int best = 0;
    for (int i = 0; i < v.size(); i++) {
      int curr = v[i];
      if (dp[curr] == 0) {
        int curr_cnt = cnt[curr];
        for (int j = 1; j <= sqrt(curr); j++) {
          if (curr % j == 0) {
            dp[j] += curr_cnt;
            if (j != curr / j) {
              dp[curr / j] += curr_cnt;
            }
          }
        }
      }
      best = max(best, dp[curr]);
    }
    cout << n - best << '\n';
  }
}