```cpp
#include <iostream>
#include <unordered_map>
using namespace std;
#define int long long
int n, m, a[100001];
unordered_map<int, int> was;
main() {
  ios_base::sync_with_stdio(0);
  cin >> n;
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
    was[a[i]] = i;
  }
  cin >> m;
  int first = 0, second = 0;
  while (m--) {
    int x;
    cin >> x;
    first += was[x] + 1;
    second += n - was[x];
  }
  cout << first << ' ' << second;
}
```
Explanation: 
1. Instead of using a plain array `was` to store the indices, I'm using an unordered_map which has constant time complexity for insertion and retrieval.
2. I'm adding the element to the unordered_map `was` while reading the input array `a` to avoid the second loop for storing the indices.
3. This optimization reduces the time complexity of the program from O(n^2) to O(n) and also reduces the memory usage.