```cpp
#include <bits/stdc++.h>
using namespace std;
#pragma GCC optimize("Ofast")
#define fs first
#define sc second
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define pb push_back
#define MP make_pair
#define sz(x) (int)x.size()
#define fastio ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define sqr(x) ((x) * (x))
const int N = 2e5 + 100;
vector<int> g[N], val(N), d(N), primes;
vector<vector<pair<int, int>>> dp(N);
int ans = 0;
vector<int> get(int x) {
  vector<int> ret;
  for (int i = 2; i * i <= x; i++) {
    if (x % i == 0) {
      ret.pb(i);
      while (x % i == 0)
        x /= i;
    }
  }
  if (x != 1)
    ret.pb(x);
  return ret;
}
struct max2 {
  int x = 0, y = 0;
  max2() {}
  void rlx(int z) {
    if (z >= x)
      y = x, x = z;
    else if (z >= y)
      y = z;
  }
  int sum() { return x + y; }
};
void dfs(int v, int p) {
  dp[v].resize(get(val[v]).size());
  for (auto u : g[v]) {
    if (u == p)
      continue;
    dfs(u, v);
    vector<int> cur = get(val[v]);
    vector<max2> t(sz(cur));
    vector<vector<pair<int, int>>> tmp_dp(sz(cur));
    for (int i = 0; i < sz(cur); i++) {
      int x = cur[i];
      if (!dp[u][i].empty()) {
        tmp_dp[i].pb(dp[u][i][0]);
        t[i].rlx(dp[u][i][0].sc);
      }
      if (dp[u][i].size() > 1) {
        tmp_dp[i].pb(dp[u][i][1]);
        t[i].rlx(dp[u][i][1].sc);
      }
    }
    for (int i = 0; i < sz(cur); i++) {
      int x = cur[i];
      for (auto y : tmp_dp[i]) {
        if (y.fs == p)
          continue;
        dp[v][i].pb(y);
      }
    }
    for (int i = 0; i < sz(cur); i++) {
      int x = cur[i];
      ans = max(ans, t[i].sum() + 1);
      dp[v][i].pb({u, t[i].x + 1});
    }
  }
}
signed main() {
  fastio;
  for (int i = 2; i < N; i++) {
    if (d[i] == 0) {
      d[i] = i;
      primes.pb(i);
    }
    for (auto x : primes) {
      if (x > d[i] || x * i >= N)
        break;
      d[x * i] = x;
    }
  }
  int n;
  cin >> n;
  for (int i = 0; i < n; i++)
    cin >> val[i];
  for (int i = 0, a, b; i < n - 1; i++) {
    cin >> a >> b;
    a--;
    b--;
    g[a].pb(b);
    g[b].pb(a);
  }
  dfs(0, -1);
  cout << ans << '\n';
}
```