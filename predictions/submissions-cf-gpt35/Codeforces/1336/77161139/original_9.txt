```cpp
#include <algorithm>
#include <iostream>
#include <vector>

void compute_depth(int u, int p, const std::vector<std::vector<int>>& adj, std::vector<int>& depth) {
  for (int v : adj[u]) {
    if (v != p) {
      depth[v] = depth[u] + 1;
      compute_depth(v, u, adj, depth);
    }
  }
}

void compute_below(int u, int p, const std::vector<std::vector<int>>& adj, std::vector<int>& below) {
  for (int v : adj[u]) {
    if (v != p) {
      compute_below(v, u, adj, below);
      below[u] += below[v] + 1;
    }
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);

  int n, k;
  std::cin >> n >> k;

  std::vector<std::vector<int>> adj(n);
  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    std::cin >> u >> v;
    --u;
    --v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }

  std::vector<int> depth(n);
  compute_depth(0, -1, adj, depth);

  std::vector<int> below(n);
  compute_below(0, -1, adj, below);

  std::vector<int> score(n);
  for (int i = 0; i < n; ++i) {
    score[i] = depth[i] - below[i];
  }

  std::sort(score.begin(), score.end(), std::greater<int>());

  long long sum = 0;
  for (int i = 0; i < k; ++i) {
    sum += score[i];
  }

  std::cout << sum << '\n';
}
```
