```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
#include <cmath>
using namespace std;
int main() {
  int N;
  cin >> N;
  vector<int> a(N);
  for (int i = 0; i < N; i++) {
    cin >> a[i];
  }
  vector<int> pri;
  const int MAXV = 61;
  for (int v = 2; v < MAXV; v++) {
    bool ok = true;
    for (int i = 0; i < pri.size(); i++) {
      if (v % pri[i] == 0) {
        ok = false;
        break;
      }
    }
    if (ok) {
      pri.push_back(v);
    }
  }
  vector<int> mask(MAXV);
  for (int v = 1; v < MAXV; v++) {
    for (int i = 0; i < pri.size(); i++) {
      if (v % pri[i] == 0) {
        mask[v] |= 1 << i;
      }
    }
  }
  vector<vector<pair<int, int>>> dp(N + 1, vector<pair<int, int>>(1 << pri.size(), {INT_MAX, -1}));
  dp[0][0].first = -1;
  for (int i = 0; i < N; i++) {
    for (int m = 0; m < (1 << pri.size()); m++) {
      if (dp[i][m].first < INT_MAX) {
        for (int v = 1; v < MAXV; v++) {
          if (!(mask[v] & m)) {
            int new_cost = dp[i][m].first + abs(v - a[i]);
            int new_mask = m ^ mask[v];
            if (new_cost < dp[i + 1][new_mask].first) {
              dp[i + 1][new_mask] = {new_cost, v};
            }
          }
        }
      }
    }
  }
  vector<int> b(N);
  int m = min_element(dp.back().begin(), dp.back().end()) - dp.back().begin();
  for (int i = N - 1; i >= 0; i--) {
    b[i] = dp[i + 1][m].second;
    m ^= mask[b[i]];
  }
  for (int i = 0; i < N; i++) {
    cout << b[i] << " ";
  }
  cout << endl;
  return 0;
}
```