```
#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define ll long long

void solve() {
  ll a, b, n;
  cin >> a >> b >> n;
  vector<ll> attack(n), health(n);
  for (int i = 0; i < n; i++) {
    cin >> attack[i];
  }
  for (int i = 0; i < n; i++) {
    cin >> health[i];
  }
  int k = max_element(attack.begin(), attack.end()) - attack.begin();
  ll res = 0;
  for (int i = 0; i < n; i++) {
    if (i == k) {
      continue;
    }
    ll d = (health[i] + a - 1) / a;
    d = d * attack[i];
    res += d;
  }
  if (res >= b) {
    cout << "NO\n";
    return;
  }
  b = b - res;
  ll x = (b + attack[k] - 1) / attack[k];
  ll y = (health[k] + a - 1) / a;
  if (x >= y) {
    cout << "YES\n";
  } else {
    cout << "NO\n";
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int tt;
  cin >> tt;
  while (tt--) {
    solve();
  }
}
``` 

I have made the following changes to optimize the code:
- Changed the array to vector for more efficient memory allocation.
- Replaced a for loop with the max_element function to find the maximum element in an array.
- Removed unnecessary variables and declarations.
- Improved output formatting by using '\n' instead of endl.