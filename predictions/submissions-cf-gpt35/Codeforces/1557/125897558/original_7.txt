```cpp
#include <iostream>
#include <iomanip>
#include <limits>
using namespace std;

int main() {
  int test;
  cin >> test;
  while (test--) {
    int n;
    cin >> n;
    int* arr = new int[n];
    long long int sum = 0;
    double min = numeric_limits<double>::lowest();
    for (int i = 0; i < n; i++) {
      cin >> arr[i];
      if (arr[i] > min)
        min = arr[i];
      sum += arr[i];
    }
    if (n > 1) {
      double ans = static_cast<double>(sum - min) / (n - 1) + min;
      cout << setprecision(8) << ans << endl;
    }
    delete[] arr;
  }
  return 0;
}
```

Explanation:
- Removed the include directive for `bits/stdc++.h` as it's not a standard C++ header.
- Replaced `INT_MIN` with `numeric_limits<double>::lowest()` for the initialization of `min`. `INT_MIN` is for integers and `numeric_limits<double>::lowest()` gives the lowest value possible for a `double`.
- Changed the dynamic allocation of the array `arr` to use `new` and `delete[]` instead of variable-length arrays, which are not supported by standard C++.
- Replaced the division `(sum - min) / (n - 1)` with `static_cast<double>(sum - min) / (n - 1)` to perform floating-point division and avoid truncation of the result.
- Added `delete[] arr` to properly deallocate the memory allocated with `new[]` to avoid memory leaks.