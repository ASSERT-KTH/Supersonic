```c++
#include <bits/stdc++.h>
using namespace std;
using ll = long long;

int dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};
const int INF = 1 << 30;
const ll LLINF = 1LL << 60;
const ll MOD = 1000000007;

template <typename T>
vector<vector<T>> divide_and_conquer(ll h, ll w, const function<T(ll, ll)> &f) {
  const T inf = numeric_limits<T>::max() / 10;
  vector<vector<T>> dp(h, vector<T>(w, inf));
  function<void(ll, ll, ll, ll, ll)> dfs = [&](ll i, ll l, ll r, ll optl,
                                               ll optr) {
    if (l > r)
      return;
    ll mid = (l + r) / 2, optm = -1;
    for (ll j = optl; j <= min(mid, optr); ++j) {
      T cost = dp[i][j] + f(j + 1, mid);
      if (cost < dp[i + 1][mid]) {
        dp[i + 1][mid] = cost;
        optm = j;
      }
    }
    dfs(i, l, mid - 1, optl, optm);
    dfs(i, mid + 1, r, optm, optr);
  };
  for (ll i = 0; i < w; ++i) dp[0][i] = f(0, i);
  for (ll i = 1; i < h; ++i) {
    for (ll j = 0; j < w; ++j) {
      dp[i][j] = inf;
    }
  }
  for (ll i = 0; i < h - 1; ++i) {
    dfs(i, 0, w - 1, 0, w - 1);
  }
  return dp;
}

int u[4010][4010], W[4010][4010];

void solve() {
  int n, k;
  scanf("%d %d ", &n, &k);
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < n; ++j) {
      u[i][j] = getchar() - '0';
      getchar();
    }
  }
  for (int w = 1; w <= n; ++w) {
    for (int l = 0, r = l + w; r < n; ++l, ++r) {
      W[l][r] = u[l][r];
      if (w >= 2) {
        W[l][r] += W[l + 1][r] + W[l][r - 1] - W[l + 1][r - 1];
      }
    }
  }
  auto f = [&](ll i, ll j) { return W[i][j]; };
  auto dp = divide_and_conquer<ll>(k, n, f);
  cout << dp[k - 1][n - 1] << endl;
}

signed main(void) {
  solve();
  return 0;
}
```