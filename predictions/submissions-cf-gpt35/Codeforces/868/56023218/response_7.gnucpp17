#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using PII = pair<ll, ll>;
#define FOR(i, a, n) for (ll i = (ll)a; i < (ll)n; ++i)
#define REP(i, n) FOR(i, 0, n)
#define ALL(x) x.begin(), x.end()

int dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};
const int INF = 1 << 30;
const ll LLINF = 1LL << 60;
const ll MOD = 1000000007;

int u[4010][4010], W[4010][4010];

int main(void) {
  int n, k;
  scanf("%d %d ", &n, &k);
  REP(i, n) {
    REP(j, n) {
      u[i][j] = getchar() - '0';
      getchar();
    }
  }
  FOR(w, 1, n + 1) {
    for (int l = 0, r = l + w; r < n; ++l, ++r) {
      W[l][r] = u[l][r];
      if (w >= 2)
        W[l][r] += W[l + 1][r] + W[l][r - 1] - W[l + 1][r - 1];
    }
  }
  ll dp[4010][4010];
  ll sum[4010];
  memset(dp, 0, sizeof(dp));
  REP(i, n) dp[0][i] = W[0][i];
  REP(i, k - 1) {
    REP(j, n) {
      sum[j] = dp[i][j] + W[j + 1][n - 1];
      if (j > 0) sum[j] = max(sum[j], sum[j - 1]);
    }
    dp[i + 1][n - 1] = sum[n - 1];
    for (int j = n - 2; j >= 0; --j) {
      dp[i + 1][j] = max(sum[j], dp[i + 1][j + 1]);
      sum[j] = max(sum[j], dp[i][j] + W[j + 1][n - 1]);
      if (j > 0) sum[j] = max(sum[j], sum[j - 1]);
    }
  }
  cout << dp[k - 1][0] << endl;
  return 0;
}