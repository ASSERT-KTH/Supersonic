#include <bits/stdc++.h>
using namespace std;

int dx[] = {0, 1, 0, -1}, dy[] = {1, 0, -1, 0};
const int INF = 1 << 30;

int main() {
  int N, K;
  cin >> N >> K;
  vector<int> A(N);
  for (int i = 0; i < N; i++) {
    cin >> A[i];
    --A[i];
  }
  int L = 0, R = 0, sum = 0;
  vector<int> appear(100010);
  appear[A[0]]++;
  auto add = [&](int idx) { sum += appear[A[idx]]++; };
  auto del = [&](int idx) { sum -= --appear[A[idx]]; };
  vector<vector<int>> dp(K, vector<int>(N));
  function<int(int, int)> f = [&](int l, int r) {
    while (L > l)
      add(--L);
    while (L < l)
      del(L++);
    while (R < r)
      add(++R);
    while (R > r)
      del(R--);
    return sum;
  };
  for (int i = 0; i < N; i++) {
    dp[0][i] = f(0, i);
  }
  for (int i = 1; i < K; i++) {
    for (int j = 0; j < N; j++) {
      dp[i][j] = INF;
      for (int k = 0; k < j; k++) {
        dp[i][j] = min(dp[i][j], dp[i - 1][k] + f(k + 1, j));
      }
    }
  }
  cout << dp[K - 1][N - 1] << endl;
  return 0;
}