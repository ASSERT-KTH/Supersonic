#include <bits/stdc++.h>

using namespace std;

const int maxN = 15000007;

vector<bool> primes(maxN, true);
vector<int> spf(maxN);

void sieve() {
    primes[0] = primes[1] = false;
    for (int i = 2; i < maxN; i++) {
        spf[i] = i;
    }
    for (int i = 2; i * i < maxN; i++) {
        if (primes[i]) {
            for (int j = i * i; j < maxN; j += i) {
                if (spf[j] == j) {
                    spf[j] = i;
                }
                primes[j] = false;
            }
        }
    }
}

unordered_map<int, int> countOfFactors;

void factorize(int n) {
    set<int> primeFactors;
    while (n != 1) {
        primeFactors.insert(spf[n]);
        n /= spf[n];
    }
    for (int i : primeFactors) {
        countOfFactors[i]++;
    }
}

void solve() {
    sieve();
    int n;
    cin >> n;
    vector<int> v(n);
    int gcdIs = 0;
    for (int i = 0; i < n; i++) {
        cin >> v[i];
        gcdIs = __gcd(gcdIs, v[i]);
    }
    for (int i = 0; i < n; i++) {
        v[i] /= gcdIs;
    }
    for (int eleInArray : v) {
        factorize(eleInArray);
    }
    int keep = 0;
    for (auto i : countOfFactors) {
        keep = max(keep, i.second);
    }
    keep ? (cout << n - keep) : (cout << "-1");
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    solve();
    return 0;
}