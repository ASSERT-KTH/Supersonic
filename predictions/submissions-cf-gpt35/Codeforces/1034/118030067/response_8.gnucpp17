#include <bits/stdc++.h>
using namespace std;

const int maxN = 15000007;
bitset<maxN> primes;
int spf[maxN];

void sieve() {
  primes.set();
  primes[0] = primes[1] = 0;
  
  for (int i = 2; i < maxN; i++) {
    spf[i] = i;
  }
  
  for (int i = 2; i * i < maxN; i++) {
    if (primes[i]) {
      for (int j = i * i; j < maxN; j += i) {
        primes[j] = 0;
        spf[j] = i;
      }
    }
  }
}

void solve() {
  sieve();
  
  int n;
  cin >> n;
  
  vector<int> v(n);
  int gcdIs = 0;
  
  for (int i = 0; i < n; i++) {
    cin >> v[i];
    gcdIs = __gcd(gcdIs, v[i]);
  }
  
  for (int i = 0; i < n; i++) {
    v[i] /= gcdIs;
  }
  
  unordered_map<int, int> countOfFactors;
  
  for (int eleInArray : v) {
    while (eleInArray != 1) {
      countOfFactors[spf[eleInArray]]++;
      eleInArray /= spf[eleInArray];
    }
  }
  
  int keep = 0;
  
  for (auto i : countOfFactors) {
    keep = max(keep, i.second);
  }
  
  keep ? (cout << n - keep) : (cout << -1);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  return solve(), 0;
}