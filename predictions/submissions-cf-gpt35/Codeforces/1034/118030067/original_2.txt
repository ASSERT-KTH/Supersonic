```cpp
#include <iostream>
#include <vector>
#include <unordered_map>
#include <set>
#include <bitset>
using namespace std;

const int maxN = 15000007;

bitset<maxN> primes;
int spf[maxN];
unordered_map<int, int> countOfFactors;

int gcd(int x, int y) {
    return y ? gcd(y, x % y) : x;
}

void sieve() {
    primes.set();
    primes[0] = primes[1] = 0;
    for (int i = 2; i < maxN; i++)
        spf[i] = i;

    for (int i = 4; i < maxN; i += 2) {
        if (i != 2)
            primes[i] = 0;
        spf[i] = 2;
    }

    for (int i = 3; i < maxN; i++) {
        if (primes[i]) {
            for (int j = i * i; j < maxN; j += i) {
                primes[j] = 0;
                spf[j] = i;
            }
        }
    }
}

void factorize(int n) {
    set<int> primeFactors;
    while (n != 1) {
        primeFactors.insert(spf[n]);
        n /= spf[n];
    }
    for (int i : primeFactors)
        countOfFactors[i]++;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    sieve();

    int n;
    cin >> n;
    vector<int> v(n);
    int gcdIs = 0;
    for (int i = 0; i < n; i++) {
        cin >> v[i];
        gcdIs = gcd(gcdIs, v[i]);
    }
    for (int i = 0; i < n; i++) {
        v[i] /= gcdIs;
    }
    for (int eleInArray : v) {
        factorize(eleInArray);
    }
    int keep = 0;
    for (auto i : countOfFactors) {
        keep = max(keep, i.second);
    }
    if (keep) {
        cout << n - keep;
    } else {
        cout << "-1";
    }

    return 0;
}
```