#include <iostream>
#include <vector>
#include <unordered_map>
#include <bitset>
using namespace std;

const int maxN = 15000007;

vector<int> spf(maxN);
vector<int> countOfFactors(maxN);

void sieve() {
  bitset<maxN> primes;
  primes.set();
  primes[0] = primes[1] = 0;
  for (int i = 2; i < maxN; i++)
    spf[i] = i;
  for (int i = 4; i < maxN; i += 2) {
    if (i != 2)
      primes[i] = 0;
    spf[i] = 2;
  }
  for (int i = 3; i < maxN; i++) {
    if (primes[i]) {
      for (int j = i * i; j < maxN; j += i) {
        primes[j] = 0;
        spf[j] = i;
      }
    }
  }
}

void factorize(int n) {
  unordered_map<int, int> primeFactors;
  while (n != 1) {
    primeFactors[spf[n]]++;
    n /= spf[n];
  }
  for (auto i : primeFactors)
    countOfFactors[i.first] += i.second;
}

int gcd(int x, int y) { return y ? gcd(y, x % y) : x; }

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  sieve();

  int n;
  cin >> n;
  vector<int> v(n);
  int gcdIs = 0;
  for (int i = 0; i < n; i++) {
    cin >> v[i];
    gcdIs = gcd(gcdIs, v[i]);
  }
  for (int i = 0; i < n; i++) {
    v[i] /= gcdIs;
  }
  for (int eleInArray : v) {
    factorize(eleInArray);
  }
  int keep = 0;
  for (auto i : countOfFactors) {
    keep = max(keep, i.second);
  }
  keep ? (cout << n - keep) : (cout << "-1");

  return 0;
}