#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
using namespace std;

const int MAXN = 200010;
vector<int> v1[MAXN], v2[MAXN];
int cost[MAXN];
int par[MAXN];
bool vis[MAXN];
stack<int> st;
int temp;

void dfs(int source) {
    vis[source] = true;
    for (int i = 0; i < v1[source].size(); i++) {
        if (!vis[v1[source][i]]) {
            dfs(v1[source][i]);
        }
    }
    st.push(source);
}

void dfs2(int source, int val) {
    temp = min(temp, cost[source]);
    vis[source] = false;
    par[source] = val;
    for (int i = 0; i < v2[source].size(); i++) {
        if (vis[v2[source][i]]) {
            dfs2(v2[source][i], val);
        }
    }
}

int main() {
    int n;
    cin >> n;
    for (int i = 0; i < MAXN; i++)
        par[i] = i;
    for (int i = 1; i <= n; i++) {
        cin >> cost[i];
    }
    for (int i = 1; i <= n; i++) {
        int x;
        cin >> x;
        v1[i].push_back(x);
        v2[x].push_back(i);
    }
    int ans = 0;
    for (int i = 1; i <= n; i++) {
        if (!vis[i])
            dfs(i);
    }
    while (!st.empty()) {
        int top = st.top();
        st.pop();
        if (vis[top]) {
            temp = 1000000000;
            dfs2(top, top);
            cost[top] = temp;
            ans += temp;
        }
    }
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j < v1[i].size(); j++) {
            int child = v1[i][j];
            if (par[i] != par[child]) {
                ans -= cost[par[i]];
                cost[par[i]] = 0;
            }
        }
    }
    cout << ans << endl;
    return 0;
}