```
#include <bits/stdc++.h>
using namespace std;
#define ll long long int
const ll mod = 1e9 + 7;
const ll N = 2e3 + 5;
ll n, m, cum[N][N][2], dp[N][N][2][2];
string arr[N];

int32_t main() {
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    cin >> n >> m;
    for(int i = 0; i < n; i++) cin >> arr[i];
    for(int i = n - 1; i >= 0; i--) {
        for(int j = m - 1; j >= 0; j--) {
            if(arr[i][j] == 'R') {
                cum[i][j][0] = cum[i + 1][j][0] + 1;
                cum[i][j][1] = cum[i][j + 1][1] + 1;
            }
            else {
                cum[i][j][0] = cum[i + 1][j][0];
                cum[i][j][1] = cum[i][j + 1][1];
            }
        }
    }
    dp[n - 1][m - 1][0][0] = dp[n - 1][m - 1][0][1] = (arr[n - 1][m - 1] == 'R' ? 0 : 1);
    for(int i = n - 1; i >= 0; i--) {
        for(int j = m - 1; j >= 0; j--) {
            if(i == n - 1 && j == m - 1) continue;
            if(arr[i][j] == 'R') {
                dp[i][j][0][0] = (dp[i + 1][j + 1][1][0] - dp[n - cum[i][j][0] + 1][j + 1][1][0] + dp[i + 1][j + 1][1][1] - dp[i + 1][m - cum[i][j][1] + 1][1][1] + 2 * mod) % mod;
                dp[i][j][0][1] = (dp[i + 1][j + 1][1][0] - dp[n - cum[i][j][0]][j + 1][1][0] + dp[i + 1][j + 1][1][1] - dp[i + 1][m - cum[i][j][1] + 2][1][1] + 2 * mod) % mod;
            }
            else {
                dp[i][j][0][0] = (dp[i + 1][j][0][0] + dp[i][j + 1][0][1]) % mod;
                dp[i][j][0][1] = (dp[i + 1][j][0][0] + dp[i][j + 1][0][1]) % mod;
            }
            dp[i][j][1][0] = (dp[i + 1][j][1][0] + dp[i][j][0][0]) % mod;
            dp[i][j][1][1] = (dp[i][j + 1][1][1] + dp[i][j][0][1]) % mod;
        }
    }
    cout << dp[0][0][0][1] << '\n';
    return 0;
}
```