#include <bits/stdc++.h>
using namespace std;

#define ll long long int
#define mod 1000000007

const ll inf = 9e18;

void solve() {
  ll n, m;
  cin >> n >> m;
  vector<string> arr(n);
  for (int i = 0; i < n; i++) cin >> arr[i];
  
  vector<vector<vector<ll>>> cum(n, vector<vector<ll>>(m, vector<ll>(2, 0)));
  vector<vector<vector<vector<ll>>>> dp(n,
                      vector<vector<vector<ll>>>(m, vector<vector<ll>>(2, vector<ll>(2, 0))));
  
  for(int i = n - 1; i >= 0; i--) {
    for(int j = 0; j < m; j++) {
      cum[i][j][0] = (i + 1 < n ? cum[i+1][j][0] : 0) + (arr[i][j] == 'R');
    }
  }
  
  for(int j = m - 1; j >= 0; j--) {
    for(int i = 0; i < n; i++) {
      cum[i][j][1] = (j + 1 < m ? cum[i][j+1][1] : 0) + (arr[i][j] == 'R');
    }
  }
  
  for(int i = n - 1; i >= 0; i--) {
    for(int j = m - 1; j >= 0; j--) {
      if (i == n - 1 || j == m - 1) {
        if (i == n - 1 && j == m - 1)
          dp[i][j][0][0] = dp[i][j][0][1] = (arr[i][j] == 'R' ? 0 : 1);
        else if (arr[i][j] != 'R')
          dp[i][j][0][0] = dp[i][j][0][1] =
              (dp[i + 1][j][0][0] + dp[i][j + 1][0][1]) % mod;
      } else {
        dp[i][j][0][0] =
            (dp[i + 1][j + 1][1][0] -
             dp[n - cum[i][j][0] + (arr[i][j] == 'R' ? 1 : 0)][j + 1][1][0] +
             dp[i + 1][j + 1][1][1] - dp[i + 1][m - cum[i][j][1]][1][1] +
             (2ll * mod)) %
            mod;
        dp[i][j][0][1] =
            (dp[i + 1][j + 1][1][0] - dp[n - cum[i][j][0]][j + 1][1][0] +
             dp[i + 1][j + 1][1][1] -
             dp[i + 1][m - cum[i][j][1] + (arr[i][j] == 'R' ? 1 : 0)][1][1] +
             (2ll * mod)) %
            mod;
      }
      dp[i][j][1][0] = (dp[i + 1][j][1][0] + dp[i][j][0][0]) % mod;
      dp[i][j][1][1] = (dp[i][j + 1][1][1] + dp[i][j][0][1]) % mod;
    }
  }
  cout << dp[0][0][0][1] << endl;
}

int main(void) {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int tes = 1;
  while (tes--) {
    solve();
  }
}