#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#define ll long long int
#define pb push_back
#define mod 1000000007
#define endl "\n"
const int MAXN = 2e3 + 1;
#define inarr(arr, n)                                                          \
  for (int i = 0; i < n; i++)                                                  \
    cin >> arr[i];
#define outarr(arr, n)                                                         \
  for (int i = 0; i < n; i++)                                                  \
    cout << arr[i] << ' ';
#define fr(i, a, b) for (int i = a; i < b; ++i)
#define frn(i, a, b) for (int i = a; i > b; --i)
#define mk make_pair
#define pii pair<int, int>
#define pll pair<ll, ll>

ll tes, n, m;
vector<string> arr(MAXN);
vector<vector<vector<ll>>> cum(MAXN, vector<vector<ll>>(MAXN, vector<ll>(2, 0)));
vector<vector<vector<vector<ll>>>> dp(MAXN, vector<vector<vector<ll>>>(MAXN, vector<vector<ll>>(2, vector<ll>(2, 0))));

ll power(ll x, ll y) {
  ll res = 1ll;
  while (y > 0) {
    if (y & 1)
      res = res * x;
    y >>= 1;
    x = x * x;
  }
  return res;
}

void solve() {
  cin >> n >> m;
  fr(i, 0, n) cin >> arr[i];
  frn(i, n - 1, -1) {
    fr(j, 0, m) {
      cum[i][j][0] = cum[i + 1][j][0];
      if (arr[i][j] == 'R')
        cum[i][j][0]++;
    }
  }

  frn(j, m - 1, -1) {
    fr(i, 0, n) {
      cum[i][j][1] = cum[i][j + 1][1];
      if (arr[i][j] == 'R')
        cum[i][j][1]++;
    }
  }

  frn(i, n - 1, -1) {
    frn(j, m - 1, -1) {
      if (i == n - 1 || j == m - 1) {
        if (i == n - 1 && j == m - 1)
          dp[i][j][0][0] = dp[i][j][0][1] = arr[i][j] == 'R' ? 0 : 1;
        else if (arr[i][j] != 'R')
          dp[i][j][0][0] = dp[i + 1][j][0][0] + dp[i][j + 1][0][1], dp[i][j][0][0] %= mod, dp[i][j][0][1] = dp[i + 1][j][0][0] + dp[i][j + 1][0][1], dp[i][j][0][1] %= mod;
      } else {
        dp[i][j][0][0] = (dp[i + 1][j + 1][1][0] - dp[n - cum[i][j][0] + (arr[i][j] == 'R' ? 1 : 0)][j + 1][1][0] + dp[i + 1][j + 1][1][1] - dp[i + 1][m - cum[i][j][1]][1][1] + (2ll * mod)) % mod;
        dp[i][j][0][1] = (dp[i + 1][j + 1][1][0] - dp[n - cum[i][j][0]][j + 1][1][0] + dp[i + 1][j + 1][1][1] - dp[i + 1][m - cum[i][j][1] + (arr[i][j] == 'R' ? 1 : 0)][1][1] + (2ll * mod)) % mod;
      }
      dp[i][j][1][0] = dp[i + 1][j][1][0] + dp[i][j][0][0], dp[i][j][1][0] %= mod;
      dp[i][j][1][1] = dp[i][j + 1][1][1] + dp[i][j][0][1], dp[i][j][1][1] %= mod;
    }
  }
  cout << dp[0][0][0][1] << endl;
}

int32_t main(void) {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  tes = 1;
  while (tes--) {
    solve();
  }
}