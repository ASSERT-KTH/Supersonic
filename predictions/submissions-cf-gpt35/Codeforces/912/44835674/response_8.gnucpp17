#include <bits/stdc++.h>
using namespace std;

using ll = long long;

bool prime(int x) {
  for (int d = 2; d * d <= x; ++d) {
    if (x % d == 0) {
      return false;
    }
  }
  return true;
}

vector<ll> gen_all(const vector<int>& src) {
  vector<ll> dest;
  ll cur = 1;
  int ind = 0;
  while (cur != -1) {
    if (ind == src.size()) {
      dest.push_back(cur);
      break;
    }
    gen_all(src, dest, cur, ind + 1);
    if (cur <= MAX / src[ind]) {
      cur *= src[ind];
    } else {
      cur = -1;
    }
  }
  return dest;
}

ll cnt(const vector<ll>& A, const vector<ll>& B, ll val) {
  int ind = B.size() - 1;
  ll res = 0;
  for (ll e : A) {
    if (e > val) {
      break;
    }
    res += upper_bound(B.begin(), B.end(), val / e) - B.begin();
  }
  return res;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  int n;
  cin >> n;
  vector<int> p(n);
  for (int& x : p) {
    cin >> x;
  }

  const int B_sz = 9;
  vector<int> pA(p.begin() + B_sz, p.end());
  vector<ll> A = gen_all(pA);

  vector<int> pB(p.begin(), p.begin() + min(B_sz, n));
  vector<ll> B = gen_all(pB);

  sort(A.begin(), A.end());
  sort(B.begin(), B.end());

  int k;
  cin >> k;

  ll l = 0, r = 1e18;
  while (l + 1 != r) {
    ll m = (l + r) / 2;
    if (cnt(A, B, m) >= k) {
      r = m;
    } else {
      l = m;
    }
  }

  cout << r;

  return 0;
}