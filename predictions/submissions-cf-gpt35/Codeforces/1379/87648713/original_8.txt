```cpp
#include <iostream>
#include <string>
using namespace std;

bool isPatternMatch(const string& s, int start, const string& p) {
    for (int i = 0; i < p.size(); i++) {
        if (s[start + i] != p[i]) {
            return false;
        }
    }
    return true;
}

int countPatternOccurrences(const string& s, const string& p) {
    int count = 0;
    for (int i = 0; i <= s.size() - p.size(); i++) {
        if (isPatternMatch(s, i, p)) {
            count++;
        }
    }
    return count;
}

string replacePattern(const string& s, int start, const string& p) {
    string replaced = s;
    for (int i = 0; i < p.size(); i++) {
        if (replaced[start + i] == '?') {
            replaced[start + i] = p[i];
        }
    }
    return replaced;
}

bool isPossible(const string& s, const string& p) {
    for (int i = 0; i <= s.size() - p.size(); i++) {
        if (isPatternMatch(s, i, p) && countPatternOccurrences(s, p) == 1) {
            return true;
        }
    }
    return false;
}

string solve(int t) {
    string result = "";
    while (t--) {
        int n;
        cin >> n;
        string s;
        cin >> s;
        bool found = false;
        for (int i = 0; i <= n - p.size(); i++) {
            if (s[i] == '?' || s[i] == 'a') {
                string replaced = replacePattern(s, i, p);
                if (isPatternMatch(replaced, i, p) && countPatternOccurrences(replaced, p) == 1) {
                    for (int j = 0; j < n; j++) {
                        if (replaced[j] == '?') {
                            replaced[j] = 'd';
                        }
                    }
                    result += "YES\n";
                    result += replaced + "\n";
                    found = true;
                    break;
                }
            }
        }
        if (!found) {
            result += "NO\n";
        }
    }
    return result;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int t;
    cin >> t;
    cout << solve(t);
    return 0;
}
```