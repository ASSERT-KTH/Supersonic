#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

typedef long long ll;

int main() {
  int q;
  cin >> q;
  while (q--) {
    int n, m;
    cin >> n >> m;
    
    vector<pair<ll, ll>> f(m);
    for (int i = 0; i < m; i++) {
      cin >> f[i].first >> f[i].second;
    }
    
    sort(f.begin(), f.end());
    
    vector<ll> suf(m + 1);
    suf[m] = 0;
    for (int i = m - 1; i >= 0; i--) {
      suf[i] = suf[i + 1] + f[i].first;
    }
    
    ll ans = 0;
    if (n <= m) {
      ans = suf[m - n];
    }
    
    for (int i = 0; i < m; i++) {
      ll temp = 0;
      int pos = lower_bound(f.begin(), f.end(), make_pair(f[i].second, 0LL)) - f.begin();
      
      if (pos <= m - n) {
        continue;
      }
      
      temp += suf[pos];
      int num = n - (m - pos);
      
      if (f[i].first < f[i].second) {
        temp += f[i].first;
        num--;
      }
      
      temp += num * f[i].second;
      ans = max(ans, temp);
    }
    
    cout << ans << endl;
  }
  
  return 0;
}