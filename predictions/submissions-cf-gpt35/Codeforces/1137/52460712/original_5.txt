```c++
#include <algorithm>
#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;

const int M = 100000 + 10, N = 50 * M;

int n, m, d, nscc, clo, top;
bool open[M][50 + 5], instk[N], vis[N];
int ops[N], idscc[N], dfn[N], lowlink[N], dp[N];
vector<int> e[N], escc[N], stk;

inline int read() {
  int x = 0, c = getchar();
  while (c < '0' || c > '9') c = getchar();
  while ('0' <= c && c <= '9') x = x * 10 + c - '0', c = getchar();
  return x;
}

void dn(int &x, int y) { if (y < x) x = y; }

void dfscc(int k) {
  dfn[k] = lowlink[k] = ++clo;
  instk[k] = true, stk.push_back(k);
  for (int &p : e[k]) {
    if (!dfn[p]) dfscc(p), dn(lowlink[k], lowlink[p]);
    else if (instk[p]) dn(lowlink[k], dfn[p]);
  }
  if (lowlink[k] == dfn[k]) {
    ++nscc;
    while (stk.back() != k) idscc[stk.back()] = nscc, instk[stk.back()] = false, stk.pop_back();
    idscc[stk.back()] = nscc, instk[stk.back()] = false, stk.pop_back();
  }
}

void getSCC(int n) {
  for (int k = 1; k <= n; ++k) if (!dfn[k]) dfscc(k);
  for (int k = 1; k <= n; ++k)
    for (int &p : e[k]) if (idscc[k] != idscc[p]) escc[idscc[k]].push_back(idscc[p]);
}

int dfsdp(int k) {
  if (vis[k]) return dp[k];
  vis[k] = true;
  for (auto p : escc[k]) dp[k] = max(dp[k], dfsdp(p));
  return dp[k] += ops[k];
}

int main() {
  n = read(), m = read(), d = read();
  for (int i = 1; i <= m; ++i) {
    int u = read(), v = read();
    for (int j = 1; j <= d; ++j) e[(u - 1) * d + j].push_back((v - 1) * d + j % d + 1);
  }
  for (int i = 1; i <= n; ++i) for (int j = 1; j <= d; ++j) open[i][j] = getchar() - '0';
  getSCC(n * d);
  for (int i = 1; i <= n; ++i) {
    int tmp[50], ntmp = 0;
    for (int j = 1; j <= d; ++j) if (open[i][j]) tmp[ntmp++] = idscc[(i - 1) * d + j];
    sort(tmp, tmp + ntmp);
    ntmp = unique(tmp, tmp + ntmp) - tmp;
    for (int j = 0; j < ntmp; ++j) ++ops[tmp[j]];
  }
  printf("%d\n", dfsdp(idscc[0]));
  return 0;
}
```