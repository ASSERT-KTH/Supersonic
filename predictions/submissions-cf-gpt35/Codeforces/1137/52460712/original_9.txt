```cpp
#include <algorithm>
#include <cstdio>
#include <vector>
using namespace std;
const int M = 100000 + 10, N = 50 * M;
int n, m, d, nscc, clo, dp[N], ops[N], dfn[N], lowlink[N], stk[N], top, idscc[N], vis[N];
bool open[M][50 + 5], instk[N];
vector<int> e[N], escc[N];
inline void dn(int &x, int y) {
  if (y < x)
    x = y;
}
inline char gc() {
  char c = getchar();
  if (c != '0' && c != '1')
    c = getchar();
  return c;
}
inline int id(int u, int t) { return (u - 1) * d + t; }
inline void dfscc(int k) {
  dfn[k] = lowlink[k] = ++clo;
  instk[stk[top++] = k] = true;
  for (int &p : e[k]) {
    if (!dfn[p])
      dfscc(p), dn(lowlink[k], lowlink[p]);
    else if (instk[p])
      dn(lowlink[k], dfn[p]);
  }
  if (lowlink[k] == dfn[k]) {
    ++nscc;
    while (top && stk[top] != k) {
      instk[stk[--top]] = false;
      idscc[stk[top]] = nscc;
    }
  }
}
inline void getSCC(int n) {
  for (int k = 1; k <= n; ++k)
    if (!dfn[k])
      dfscc(k);
  for (int k = 1; k <= n; ++k) {
    for (int &p : e[k]) {
      if (idscc[k] != idscc[p])
        escc[idscc[k]].push_back(idscc[p]);
    }
  }
}
inline int dfsdp(int k) {
  if (vis[k])
    return dp[k];
  vis[k] = 1;
  for (auto p : escc[k])
    dp[k] = max(dp[k], dfsdp(p));
  dp[k] += ops[k];
  return dp[k];
}
int main() {
  scanf("%d%d%d", &n, &m, &d);
  for (int i = 1; i <= m; ++i) {
    int u, v;
    scanf("%d%d", &u, &v);
    for (int j = 1; j <= d; ++j)
      e[id(u, j)].push_back(id(v, j % d + 1));
  }
  for (int i = 1; i <= n; ++i)
    for (int j = 1; j <= d; ++j)
      open[i][j] = gc() - '0';
  getSCC(n * d);
  for (int i = 1; i <= n; ++i) {
    int tmp[50], ntmp = 0;
    for (int j = 1; j <= d; ++j)
      if (open[i][j])
        tmp[ntmp++] = idscc[id(i, j)];
    sort(tmp, tmp + ntmp);
    ntmp = unique(tmp, tmp + ntmp) - tmp;
    for (int j = 0; j < ntmp; ++j)
      ++ops[tmp[j]];
  }
  printf("%d", dfsdp(idscc[id(1, 1)]));
  return 0;
}
```