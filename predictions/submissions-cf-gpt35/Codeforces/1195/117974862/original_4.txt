```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef long long ll;

ll dpF(int i, int last, const vector<ll>& arr1, const vector<ll>& arr2, vector<vector<ll>>& dp) {
  if (i == arr1.size())
    return 0LL;
  if (dp[i][last] != -1)
    return dp[i][last];
  ll op1 = 0LL, op2 = 0LL, op3 = 0LL;
  if (last != 1)
    op1 = arr1[i] + dpF(i + 1, 1, arr1, arr2, dp);
  if (last != 2)
    op2 = arr2[i] + dpF(i + 1, 2, arr1, arr2, dp);
  op3 = dpF(i + 1, last, arr1, arr2, dp);
  return dp[i][last] = max({op1, op2, op3});
}

ll solve(const vector<ll>& arr1, const vector<ll>& arr2) {
  vector<vector<ll>> dp(arr1.size(), vector<ll>(3, -1));
  return dpF(0, 0, arr1, arr2, dp);
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int t;
  cin >> t;
  while (t--) {
    int n;
    cin >> n;
    vector<ll> arr1(n), arr2(n);
    for (int i = 0; i < n; i++) {
      cin >> arr1[i];
    }
    for (int i = 0; i < n; i++) {
      cin >> arr2[i];
    }
    cout << solve(arr1, arr2) << "\n";
  }

  return 0;
}
```