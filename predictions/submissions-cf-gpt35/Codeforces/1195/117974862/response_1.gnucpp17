#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef long long ll;

ll dpF(vector<ll>& arr1, vector<ll>& arr2) {
  int n = arr1.size();
  vector<vector<ll>> dp(n, vector<ll>(3, 0));

  for (int i = n - 1; i >= 0; i--) {
    dp[i][0] = max({arr1[i] + dp[i + 1][1], arr2[i] + dp[i + 1][2], dp[i + 1][0]});
    dp[i][1] = max(arr2[i] + dp[i + 1][2], dp[i + 1][1]);
    dp[i][2] = max(arr1[i] + dp[i + 1][1], dp[i + 1][2]);
  }

  return dp[0][0];
}

void solve() {
  int n;
  cin >> n;

  vector<ll> arr1(n), arr2(n);
  for (int i = 0; i < n; i++) {
    cin >> arr1[i];
  }

  for (int i = 0; i < n; i++) {
    cin >> arr2[i];
  }

  cout << dpF(arr1, arr2) << "\n";
}

int main() {
  int t;
  cin >> t;

  for (int i = 0; i < t; i++) {
    solve();
  }

  return 0;
}