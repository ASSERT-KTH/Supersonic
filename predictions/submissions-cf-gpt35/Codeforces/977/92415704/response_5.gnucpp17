#include <iostream>
#include <vector>
#include <queue>

using namespace std;

vector<int> v[200010];
bool vis[200010];
int nn, ne;

void bfs(int u) {
  nn = 0, ne = 0;
  vis[u] = true;
  queue<int> q;
  q.push(u);
  
  while (!q.empty()) {
    u = q.front();
    q.pop();
    
    nn++;
    
    if (v[u].size() == 2)
      ne++;
    
    vis[u] = true;
    
    for (int i = 0; i < (int)v[u].size(); i++) {
      int p = v[u][i];
      if (!vis[p]) {
        vis[p] = 1;
        q.push(p);
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  
  int n, m, a, b, c = 0;
  cin >> n >> m;
  
  while (m--) {
    cin >> a >> b;
    v[a].push_back(b);
    v[b].push_back(a);
  }
  
  for (int i = 1; i <= n; i++) {
    if (!vis[i]) {
      bfs(i);
      if (nn == ne)
        c++;
    }
  }
  
  cout << c << endl;
  
  return 0;
}