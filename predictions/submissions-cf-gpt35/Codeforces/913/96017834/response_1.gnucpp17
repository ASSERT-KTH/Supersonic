#include <iostream>
#include <vector>
#include <unordered_set>

void answer(bool v) {
  constexpr const char *s[2] = {"No", "Yes"};
  std::cout << s[v] << '\n';
}

void solve(const std::vector<std::vector<size_t>> &g) {
  const size_t n = g.size();
  std::vector<bool> visited(n, false);
  
  for (size_t i = 0; i < n; ++i) {
    if (g[i].empty() || visited[i])
      continue;

    std::unordered_set<size_t> neighbors;
    for (const size_t x : g[i])
      neighbors.insert(x);

    unsigned k = 0;
    for (const size_t x : g[i])
      k += neighbors.count(x) == 0;
      
    if (k < 3) {
      answer(false);
      return;
    }
    
    visited[i] = true;
    for (const size_t x : g[i])
      visited[x] = true;
  }

  answer(true);
}

int main() {
  size_t n;
  std::cin >> n;
  std::vector<std::vector<size_t>> g(n);
  
  for (size_t i = 1; i < n; ++i) {
    unsigned p;
    std::cin >> p;
    g[p - 1].push_back(i);
  }
  
  solve(g);
  
  return 0;
}