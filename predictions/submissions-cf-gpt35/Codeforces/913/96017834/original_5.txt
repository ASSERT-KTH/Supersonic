```cpp
#include <iostream>
#include <vector>
#include <unordered_map>

void answer(bool v) {
    constexpr const char* s[2] = { "No", "Yes" };
    std::cout << s[v] << '\n';
}

void solve(const std::vector<std::vector<size_t>>& g) {
    const size_t n = g.size();
    std::unordered_map<size_t, bool> emptyMap; // Empty map to store empty nodes
    for (size_t i = 0; i < n; ++i) {
        if (g[i].empty())
            continue;
        unsigned k = 0;
        for (const size_t x : g[i]) {
            if (emptyMap.find(x) == emptyMap.end()) { // Check if node is already marked as empty
                if (g[x].empty()) {
                    emptyMap[x] = true; // Mark node as empty
                    ++k;
                }
            }
            else {
                ++k; // Increase k if the node is already marked as empty
            }
        }
        if (k < 3)
            return answer(false);
    }
    answer(true);
}

int main() {
    size_t n;
    std::cin >> n;
    std::vector<std::vector<size_t>> g(n);
    for (size_t i = 1; i < n; ++i) {
        unsigned p;
        std::cin >> p;
        g[p - 1].push_back(i);
    }
    solve(g);
    return 0;
}
```