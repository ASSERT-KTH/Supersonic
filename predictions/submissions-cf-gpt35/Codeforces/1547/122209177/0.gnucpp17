#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define ppb pop_back
#define rep(i, a, n) for (int i = a; i < n; i++)
#define repr(i, n, a) for (int i = n; i >= a; i--)
#define yes cout << "YES\n"
#define no cout << "NO\n"
#define dbg(x) cout << #x << " " << x << " "
#define F first
#define S second
#define endl "\n"
const int mod = 1e9 + 7;
const int INF = 1e18;
const int N = 2e5 + 5;
vector<int> seg_tree(4 * N + 5, 0);
int a[N];
void build_tree(int tree_index, int strt_i, int end_i) {
  if (strt_i == end_i) {
    seg_tree[tree_index] = a[strt_i];
    return;
  }
  int mid = (strt_i + end_i) / 2;
  build_tree(tree_index * 2, strt_i, mid);
  build_tree(tree_index * 2 + 1, mid + 1, end_i);
  seg_tree[tree_index] =
      __gcd(seg_tree[tree_index * 2], seg_tree[tree_index * 2 + 1]);
}
int query(int tree_index, int strt_i, int end_i, int q_strt, int q_end) {
  if (strt_i > q_end || end_i < q_strt)
    return 0;
  if (q_strt <= strt_i && q_end >= end_i)
    return seg_tree[tree_index];
  int mid = (strt_i + end_i) / 2;
  int l = query(2 * tree_index, strt_i, mid, q_strt, q_end);
  int r = query(2 * tree_index + 1, mid + 1, end_i, q_strt, q_end);
  return __gcd(l, r);
}
void solve() {
  int n;
  cin >> n;
  rep(i, 1, n + 1) cin >> a[i], a[i + n] = a[i];
  build_tree(1, 1, 2 * n);
  int ans = 0, g = 0;
  rep(i, 1, n + 1) g = __gcd(g, a[i]);
  rep(i, 1, n + 1) {
    int r = 2 * n, l = i + 1, temp = INF, cnt = 0;
    if (a[i] == g)
      continue;
    while (l <= r) {
      int mid = (l + r) / 2;
      int x = query(1, 1, 2 * n, l, mid);
      int y = __gcd(x, a[i]);
      if (y == g)
        temp = min(temp, mid - l + 1 + cnt), r = mid - 1;
      else
        a[i] = __gcd(a[i], x), cnt += mid - l + 1, l = mid + 1;
    }
    ans = max(ans, temp);
  }
  cout << ans << endl;
  return;
}
signed main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  int t = 1;
  cin >> t;
  rep(i, 1, t + 1) { solve(); }
  return 0;
}
