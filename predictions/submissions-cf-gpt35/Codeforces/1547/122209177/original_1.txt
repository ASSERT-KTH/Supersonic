```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int gcd(int a, int b){
    if(b == 0)
        return a;
    return gcd(b, a % b);
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    
    int t;
    cin >> t;
    
    while(t--){
        int n;
        cin >> n;
        
        vector<int> a(n), b(2 * n), prefix_gcd(n), suffix_gcd(n);
        
        for(int i = 0; i < n; i++){
            cin >> a[i];
            b[i] = b[i + n] = a[i];
        }
        
        prefix_gcd[0] = a[0];
        for(int i = 1; i < n; i++){
            prefix_gcd[i] = gcd(prefix_gcd[i - 1], a[i]);
        }
        
        suffix_gcd[n - 1] = a[n - 1];
        for(int i = n - 2; i >= 0; i--){
            suffix_gcd[i] = gcd(suffix_gcd[i + 1], a[i]);
        }
        
        int ans = 0;
        
        for(int i = 0; i < n; i++){
            int g = gcd(prefix_gcd[i - 1], suffix_gcd[i + 1]);
            if(g != a[i]){
                continue;
            }
            
            int l = i + 1, r = i + n, cnt = 0, temp = INT_MAX;
            
            while(l <= r){
                int mid = (l + r) / 2;
                
                int x = gcd(prefix_gcd[i - 1], prefix_gcd[mid - 1]);
                int y = gcd(x, suffix_gcd[mid]);
                
                if(y == g){
                    temp = min(temp, mid - i + 1 + cnt);
                    r = mid - 1;
                }else{
                    l = mid + 1;
                    cnt += mid - i + 1;
                }
            }
            
            ans = max(ans, temp);
        }
        
        cout << ans << endl;
    }
    
    return 0;
}
```