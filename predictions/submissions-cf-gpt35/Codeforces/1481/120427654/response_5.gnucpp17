#include <bits/stdc++.h>
using namespace std;
const int NMAX = 100001;
int dp[NMAX], cnt[NMAX], cul[NMAX];
vector<int> lvl[NMAX], v[NMAX], levelecu[NMAX];
int depth, cc[NMAX];
map<int, int> mp;
int n, x;

void DFS(int node, int p, int level) {
    lvl[level].push_back(node);
    depth = max(depth, level);
    for (auto x : v[node]) {
        if (x == p) continue;
        DFS(x, node, level + 1);
    }
}

int main() {
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    cin >> n >> x;
    int a = x, b = n - x;
    for (int i = 2; i <= n; i++) {
        int x; cin >> x;
        v[x].push_back(i);
        v[i].push_back(x);
    }
    for (int i = 1; i <= n; i++) {
        cnt[i] = v[i].size() - (i != 1);
    }
    DFS(1, 0, 1);
    for (int i = 1; i <= n; i++) {
        if (lvl[i].size() == 0) continue;
        levelecu[lvl[i].size()].push_back(i);
        mp[lvl[i].size()]++;
    }
    int c = 0;
    dp[0] = 1;
    for (auto x : mp) {
        ++c;
        cc[c] = x.first;
        int val = x.first, freq = x.second;
        for (int i = a; i >= 0; i--) {
            if (dp[i])
                dp[i % val] = 1;
            if (dp[i] && (i - val * freq) <= a && (i - val * freq) >= 0) {
                dp[i - val * freq] = 1;
            }
        }
    }
    if (dp[a]) {
        int cant = a;
        vector<int> sol;
        while (c > 0) {
            pii r = {cc[c], 0};
            c--;
            while (!dp[cant - r.first]) {
                cant -= r.first;
                r.second++;
            }
            while (r.second--) sol.push_back(r.first);
        }
        vector<int> alvl;
        for (auto x : sol) {
            alvl.push_back(levelecu[x].back());
            levelecu[x].pop_back();
        }
        for (auto x : alvl) {
            for (auto y : lvl[x]) {
                cul[y] = 'a';
            }
        }
        cout << depth << "\n";
        for (int i = 1; i <= n; i++) {
            if (cul[i] != 'a') cul[i] = 'b';
            cout << (char)cul[i];
        }
        return 0;
    }
    for (int i = 1; i <= n; i++) {
        if (lvl[i].size() == 0) continue;
        int sz = lvl[i].size();
        if (sz <= a) {
            a -= sz;
            for (auto x : lvl[i])
                cul[x] = 'a';
            continue;
        }
        if (sz <= b) {
            b -= sz;
            for (auto x : lvl[i])
                cul[x] = 'b';
            continue;
        }
        if (a > b) {
            for (auto x : lvl[i]) {
                if (cnt[x] > 0) {
                    cul[x] = 'a';
                    a--;
                }
            }
            for (auto x : lvl[i]) {
                if (a && cul[x] != 'a') {
                    cul[x] = 'a';
                    a--;
                }
            }
            for (auto x : lvl[i]) {
                if (cul[x] != 'a') {
                    cul[x] = 'b';
                    b--;
                }
            }
        }
        else {
            for (auto x : lvl[i]) {
                if (cnt[x] > 0) {
                    cul[x] = 'b';
                    b--;
                }
            }
            for (auto x : lvl[i]) {
                if (b && cul[x] != 'b') {
                    cul[x] = 'b';
                    b--;
                }
            }
            for (auto x : lvl[i]) {
                if (cul[x] != 'b') {
                    cul[x] = 'a';
                    a--;
                }
            }
        }
    }
    cout << depth + 1 << "\n";
    for (int i = 1; i <= n; i++) {
        cout << (char)cul[i];
    }
    return 0;
}