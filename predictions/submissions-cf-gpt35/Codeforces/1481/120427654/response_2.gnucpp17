#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
const ll NMAX = 100001;
const ll INF = (1LL << 60);
const ll BLOCK = 518;
int dp[BLOCK][NMAX];
int cnt[NMAX];
vector<int> lvl[NMAX];
vector<int> v[NMAX];
vector<int> levelecu[NMAX];
int depth;
char cul[NMAX];
void DFS(int node, int p, int level) {
  lvl[level].push_back(node);
  depth = max(depth, level);
  for (auto x : v[node]) {
    if (x == p) continue;
    DFS(x, node, level + 1);
  }
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n, x, i;
  cin >> n >> x;
  int a = x;
  int b = n - x;
  for (i = 2; i <= n; i++) {
    cin >> x;
    v[x].push_back(i);
    v[i].push_back(x);
  }
  for (i = 1; i <= n; i++) {
    cnt[i] = v[i].size() - (i != 1);
  }
  DFS(1, 0, 1);
  for (i = 1; i <= n; i++) {
    if (lvl[i].size() == 0) continue;
    levelecu[lvl[i].size()].push_back(i);
  }
  int c = 0;
  dp[0][0] = 1;
  for (auto &x : levelecu) {
    if (x.empty()) continue;
    ++c;
    int val = x.size();
    for (i = 0; i < val; i++) {
      for (auto &y : dp[c - 1]) {
        if (y) dp[c][y % val] = 1;
      }
    }
    for (i = 0; i <= a; i++) {
      if (dp[c][i % val] && (i - i % val) / val <= (int)x.size()) {
        dp[c][i] = 1;
      }
    }
  }
  if (dp[c][a]) {
    int cant = a;
    vector<int> sol;
    while (c > 0) {
      pii r = {levelecu[c].size(), 0};
      c--;
      while (!dp[c][cant]) {
        cant -= r.first;
        r.second++;
      }
      while (r.second--)
        sol.push_back(r.first);
    }
    vector<int> alvl;
    for (auto &x : sol) {
      alvl.push_back(levelecu[x].back());
      levelecu[x].pop_back();
    }
    for (auto &x : alvl) {
      for (auto &y : lvl[x]) {
        cul[y] = 'a';
      }
    }
    cout << depth << "\n";
    for (int i = 1; i <= n; i++) {
      if (cul[i] != 'a') cul[i] = 'b';
      cout << cul[i];
    }
    return 0;
  }
  for (auto &x : levelecu) {
    if (x.empty()) continue;
    int sz = x.size();
    if (sz <= a) {
      a -= sz;
      for (auto &y : x) {
        for (auto &z : lvl[y]) {
          cul[z] = 'a';
        }
      }
      continue;
    }
    if (sz <= b) {
      b -= sz;
      for (auto &y : x) {
        for (auto &z : lvl[y]) {
          cul[z] = 'b';
        }
      }
      continue;
    }
    if (a > b) {
      for (auto &y : x) {
        for (auto &z : lvl[y]) {
          if (cnt[z] > 0) {
            cul[z] = 'a';
            a--;
          }
        }
      }
      for (auto &y : x) {
        for (auto &z : lvl[y]) {
          if (a && cul[z] != 'a') {
            cul[z] = 'a';
            a--;
          }
        }
      }
      for (auto &y : x) {
        for (auto &z : lvl[y]) {
          if (cul[z] != 'a') {
            cul[z] = 'b';
            b--;
          }
        }
      }
    } else {
      for (auto &y : x) {
        for (auto &z : lvl[y]) {
          if (cnt[z] > 0) {
            cul[z] = 'b';
            b--;
          }
        }
      }
      for (auto &y : x) {
        for (auto &z : lvl[y]) {
          if (b && cul[z] != 'b') {
            cul[z] = 'b';
            b--;
          }
        }
      }
      for (auto &y : x) {
        for (auto &z : lvl[y]) {
          if (cul[z] != 'b') {
            cul[z] = 'a';
            a--;
          }
        }
      }
    }
  }
  cout << depth + 1 << "\n";
  for (int i = 1; i <= n; i++) {
    cout << cul[i];
  }
  return 0;
}