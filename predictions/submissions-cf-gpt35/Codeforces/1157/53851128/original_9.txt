```cpp
#include <algorithm>
#include <iostream>
#include <map>
#include <set>
#include <vector>

#define MOD (ll)(1e9 + 7)

typedef long long int ll;

void gi(ll &value) {
  std::cin >> value;
}

void gi(std::string &value) {
  std::cin >> value;
}

template <typename T>
void gi(T &value) {
  std::cin >> value;
}

template <typename T, typename... Args>
void gi(T &value, Args &... args) {
  std::cin >> value;
  gi(args...);
}

template <typename T>
void _po(const std::vector<T> &v) {
  for (const auto &t : v) {
    std::cout << t << " ";
  }
  std::cout << std::endl;
}

template <typename T>
void _po(const T &value) {
  std::cout << value << std::endl;
}

template <typename T, typename... Args>
void _po(const T &value, const Args &... args) {
  std::cout << value << " ";
  _po(args...);
}

template <typename... Args>
void po(const Args &... args) {
#ifdef __DEBUG__
  std::cout << "> ";
#endif
  _po(args...);
}

ll mod(ll n) {
  return (n % MOD + MOD) % MOD;
}

template <typename T>
bool in(T &v, std::set<T> &st) {
  return st.find(v) != st.end();
}

int main() {
  ll n;
  gi(n);
  std::vector<ll> va(n), vb(n);
  for (ll i = 0; i < n; ++i) {
    gi(va[i]);
  }
  for (ll i = 0; i < n; ++i) {
    gi(vb[i]);
  }
  std::multiset<ll> stb;
  for (ll i = 0; i < n; ++i) {
    stb.insert(vb[i] % n);
  }
  std::vector<ll> vc;
  for (auto i : va) {
    auto it = stb.lower_bound((n - i) % n);
    if (it != stb.end() && (*it + i) % n < (*stb.begin() + i) % n) {
      vc.push_back((*it + i) % n);
      stb.erase(it);
    } else {
      vc.push_back((*stb.begin() + i) % n);
      stb.erase(stb.begin());
    }
  }
  po(vc);
  return 0;
}
```