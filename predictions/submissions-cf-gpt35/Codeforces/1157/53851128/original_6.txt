```cpp
#include <algorithm>
#include <iostream>
#include <map>
#include <vector>
#define pb push_back
#define ins insert
#define es erase
#define fi first
#define se second
#define bg begin()
#define ed end()
#define ep empty()
#define vl vector<ll>
#define sl set<ll>
#define pll pair<ll, ll>
#define mpll map<ll, ll>
#define smx(a, b) a = max(a, b)
#define smn(a, b) a = min(a, b)
#define rep(i, a, b) for (ll i = a; i < b; ++i)
#define lgi(...)                                                               \
  ll __VA_ARGS__;                                                              \
  gi(__VA_ARGS__)
#define gcd(a, b) __gcd(a, b)
typedef long long int ll;
using namespace std;

template <typename T> void gi(T &value) { std::cin >> value; }
template <typename T, typename... Args> void gi(T &value, Args &... args) {
  std::cin >> value;
  gi(args...);
}

template <typename T> void _po(const vector<T> &v) {
  for (auto &t : v) {
    cout << t << " ";
  }
  cout << endl;
}

template <typename T> void _po(const T &value) {
  std::cout << value << std::endl;
}

template <typename T, typename... Args>
void _po(const T &value, const Args &... args) {
  std::cout << value << " ";
  _po(args...);
}

template <typename... Args> void po(const Args &... args) {
#ifdef __DEBUG__
  std::cout << "> ";
#endif
  _po(args...);
}

int main() {
  lgi(n);
  vl va, vb;
  va.reserve(n);
  vb.reserve(n);
  rep(i, 0, n) {
    lgi(t);
    va.pb(t);
  }
  rep(i, 0, n) {
    lgi(t);
    vb.pb(t);
  }
  mpll stb;
  rep(i, 0, n) { stb.ins({vb[i] % n, i}); }
  vl vc;
  vc.reserve(n);
  for (auto i : va) {
    auto it = stb.lower_bound({(n - i) % n, 0});
    if (it != stb.ed && (it->fi + i) % n < stb.bg->fi + i % n) {
      vc.pb((it->fi + i) % n);
      stb.es(it);
    } else {
      vc.pb((stb.bg->fi + i) % n);
      stb.es(stb.bg);
    }
  }
  po(vc);
  return 0;
}
```