#define __IceQuarze__
#ifdef __IceQuarze__
#include <algorithm>
#include <iostream>
#include <map>
#include <queue>
#include <vector>
#define pb push_back
#define eb emplace_back
#define ins insert
#define es erase
#define fi first
#define se second
#define bg begin()
#define ed end()
#define ep empty()
#define vl vector<ll>
#define sl set<ll>
#define pll pair<ll, ll>
#define msl multiset<ll>
#define mpll map<ll, ll>
#define smx(a, b) a = max(a, b)
#define smn(a, b) a = min(a, b)
#define rep(i, a, b) for (ll i = a; i < b; ++i)
#define repn(i, a, b, n)                                                       \
  for (ll i = a, ins_flag = (a < b); ins_flag ? i < b : i > b; i += n)
#define lgi(...)                                                               \
  ll __VA_ARGS__;                                                              \
  gi(__VA_ARGS__)
#define sgi(...)                                                               \
  string __VA_ARGS__;                                                          \
  gi(__VA_ARGS__)
#define gcd(a, b) __gcd(a, b)
typedef long long int ll;
using namespace std;
#define lb(...) lower_bound(__VA_ARGS__)
#define ub(...) upper_bound(__VA_ARGS__)
template <typename T> void gi(T &value) { std::cin >> value; }
template <typename T, typename... Args> void gi(T &value, Args &... args) {
  std::cin >> value;
  gi(args...);
}
template <typename T> void _po(const vector<T> &v) {
  for (auto &t : v) {
    cout << t << " ";
  }
  cout << endl;
}
template <typename T> void _po(const T &value) {
  std::cout << value << std::endl;
}
template <typename T, typename... Args>
void _po(const T &value, const Args &... args) {
  std::cout << value << " ";
  _po(args...);
}
template <typename... Args> void po(const Args &... args) {
#ifdef __DEBUG__
  std::cout << "> ";
#endif
  _po(args...);
}
template <typename T> void fs(T &v) { sort(v.begin(), v.end()); }
template <typename T, typename F> void fs(T &v, const F &f) {
  sort(v.begin(), v.end(), f);
}
#define MOD (ll)(1e9 + 7)
inline ll mod(ll n) { return (n % MOD + MOD) % MOD; }
template <typename T> bool in(T &v, std::set<T> &st) {
  return st.find(v) != st.end();
}
template <typename T> bool in(T &v) { return false; }
template <typename T, typename F, typename... Args>
bool in(T &v, F &x, Args &... args) {
  if (v == x) {
    return true;
  } else
    return in(v, args...);
}
#endif
int main() {
  lgi(n);
  vl va, vb;
  rep(i, 0, n) {
    lgi(t);
    va.pb(t);
  }
  rep(i, 0, n) {
    lgi(t);
    vb.pb(t);
  }
  msl stb;
  rep(i, 0, n) { stb.ins(vb[i] % n); }
  vl vc;
  for (auto i : va) {
    auto it = stb.lower_bound((n - i) % n);
    if (it != stb.ed && (*it + i) % n < (*stb.bg + i) % n) {
      vc.pb((*it + i) % n);
      stb.es(it);
    } else {
      vc.pb((*stb.bg + i) % n);
      stb.es(stb.bg);
    }
  }
  po(vc);
  return 0;
}
