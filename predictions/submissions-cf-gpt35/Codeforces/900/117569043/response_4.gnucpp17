#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <cmath>

using namespace std;

const int MOD = 1e9 + 7;

int power(int x, int y, int p) {
    int res = 1;
    x = x % p;
    while (y > 0) {
        if (y & 1) res = (res * x) % p;
        y = y >> 1;
        x = (x * x) % p;
    }
    return res;
}

vector<int> divisors(int n) {
    vector<int> v;
    for (int i = 2; i <= sqrt(n); i++) {
        if (n % i == 0) {
            if (n / i == i) v.push_back(i);
            else {
                v.push_back(i);
                v.push_back(n / i);
            }
        }
    }
    return v;
}

void solve() {
    int x, y;
    cin >> x >> y;

    if (y % x != 0) {
        cout << 0 << endl;
        return;
    }

    if (y / x == 1) {
        cout << 1 << endl;
        return;
    }

    int sum = y / x;
    int ans = power(2, sum - 1, MOD);
    ans = (ans - 1 + MOD) % MOD;

    vector<int> div = divisors(sum);
    sort(div.begin(), div.end());

    map<int, int> mp;

    for (int i = 0; i < div.size(); i++) {
        int cur = power(2, div[i] - 1, MOD);
        vector<int> div1 = divisors(div[i]);
        for (int p : div1) {
            cur = (cur - mp[p] + MOD) % MOD;
        }
        mp[div[i]] = (cur - 1 + MOD) % MOD;
        ans = (ans - (cur - 1) + MOD) % MOD;
    }

    cout << ans << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    solve();
    return 0;
}