```
#include <bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7;
const int MAXN = 1e6 + 5;
int pow2[MAXN], spf[MAXN];

void precompute() {
  pow2[0] = 1;
  for(int i = 1; i < MAXN; i++) {
    pow2[i] = (pow2[i-1] * 2) % mod;
  }
  for(int i = 2; i < MAXN; i += 2) {
    spf[i] = 2;
  }
  for(int i = 3; i * i < MAXN; i += 2) {
    if(spf[i] == 0) {
      for(int j = i * i; j < MAXN; j += i) {
        if(spf[j] == 0) {
          spf[j] = i;
        }
      }
    }
  }
}

vector<int> getDiv(int n) {
  vector<int> div;
  while(n != 1) {
    div.push_back(spf[n]);
    n /= spf[n];
  }
  return div;
}

void solve() {
  int x, y;
  cin >> x >> y;
  if(y % x != 0) {
    cout << 0 << endl;
    return;
  }
  if(y / x == 1) {
    cout << 1 << endl;
    return;
  }
  int sum = y / x;
  int ans = pow2[sum - 1] - 1;
  vector<int> div = getDiv(sum);
  sort(div.begin(), div.end());
  map<int, int> mp;
  for(int i = 0; i < div.size(); i++) {
    int cur = pow2[div[i] - 1];
    vector<int> div1 = getDiv(div[i]);
    for(int p : div1) {
      cur = (cur - mp[p] + mod) % mod;
    }
    mp[div[i]] = (cur - 1 + mod) % mod;
    ans = (ans - (cur - 1) + mod) % mod;
  }
  cout << ans << endl;
}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  precompute();
  solve();
  return 0;
}
``` 

I removed unnecessary macros and converted them to normal variables. I also precomputed the powers of 2 and smallest prime factors of numbers up to 1e6 and used them in the code. I also changed the divisors function to a function that returns the prime factorization of a number. I used a map to store the values of mp instead of a vector because mp can contain large values.