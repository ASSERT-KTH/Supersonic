#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

struct digraph {
  int n;
  vector<vector<int>> adj, adj2;
  digraph(int _n, vector<array<int, 2>> &e) {
    n = _n;
    adj = vector<vector<int>>(n);
    adj2 = vector<vector<int>>(n);
    for (auto a : e) {
      adj[a[0]].push_back(a[1]);
      adj2[a[1]].push_back(a[0]);
    }
  }
  vector<int> toposort() {
    vector<int> d(n);
    queue<int> qu;
    for (int i = 0; i < n; i++) {
      d[i] = adj2[i].size();
      if (d[i] == 0) qu.push(i);
    }
    vector<int> ans;
    while (!qu.empty()) {
      int u = qu.front();
      qu.pop();
      for (auto v : adj[u]) {
        --d[v];
        if (d[v] == 0) qu.push(v);
      }
      ans.push_back(u);
    }
    if (ans.size() < n) ans.clear();
    return ans;
  }
};

void solve() {
  int n;
  cin >> n;
  vector<int> a(n), b(n);
  for (int i = 0; i < n; i++) cin >> a[i];
  for (int i = 0; i < n; i++) cin >> b[i];
  vector<array<int, 2>> e;
  for (int i = 0; i < n; i++) {
    if (b[i] != -1) e.push_back({i, b[i] - 1});
  }
  digraph g(n, e);
  ll ans = 0;
  vector<int> t = g.toposort(), ans1, d;
  for (auto x : t) {
    if (a[x] > 0) {
      ans1.push_back(x);
      ans += a[x];
      if (b[x] >= 0) a[b[x] - 1] += a[x];
    } else
      d.push_back(x);
  }
  reverse(d.begin(), d.end());
  for (auto x : d) {
    ans += a[x];
    ans1.push_back(x);
  }
  cout << ans << "\n";
  for (int i = 0; i < n; i++) ans1[i] += 1;
  for (auto x : ans1) cout << x << " ";
  cout << "\n";
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int T = 1;
  while (T--) {
    solve();
  }
  return 0;
}