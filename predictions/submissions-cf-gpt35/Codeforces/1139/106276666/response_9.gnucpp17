#include <bits/stdc++.h>
#include <stdio.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ul;
const int len = 1e6 + 5;
const ll mod = 1e9 + 7;

vector<ll> adj[len];
bool vis[len];

ll modpow(ll x, ll n, ll m) {
  if (n == 0)
    return 1UL % m;
  ll u = modpow(x, n / 2, m);
  u = (u * u) % m;
  if (n % 2 == 1)
    u = (u * x) % m;
  return u;
}

ll mod_(ll x, ll m) {
  if (x > 0)
    return x % m;
  else
    return (m - abs(x) % m) % m;
}

void dfs(ll n, ll p, ll& count) {
  if (vis[n])
    return;
  vis[n] = true;
  for (auto u : adj[n]) {
    if (u != p)
      dfs(u, n, count);
  }
  count++;
}

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);

  ll n, k;
  cin >> n >> k;

  for (int i = 1; i <= n - 1; i++) {
    ll u, v, x;
    cin >> u >> v >> x;
    if (x == 0)
      adj[u].push_back(v), adj[v].push_back(u);
  }

  ll sm = 0;
  for (int i = 1; i <= n; i++) {
    if (!vis[i]) {
      ll count = 0;
      dfs(i, -1, count);
      sm += modpow(count, k, mod);
      sm = mod_(sm, mod);
    }
  }

  ll ans = modpow(n, k, mod);
  cout << mod_(ans - sm, mod) << "\n";

  return 0;
}