#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

unsigned int n, A, B, C, D;
unsigned int ans = 0;

inline unsigned int f(unsigned int x) {
  return A * x * x * x + B * x * x + C * x + D;
}

vector<bool> prime;
vector<unsigned int> primes;

void sieve(unsigned int n) {
  prime.resize(n + 1, true);
  prime[0] = prime[1] = false;
  for (unsigned int p = 2; p * p <= n; p++) {
    if (prime[p]) {
      for (unsigned int i = p * p; i <= n; i += p) {
        prime[i] = false;
      }
    }
  }
  for (unsigned int p = 2; p <= n; p++) {
    if (prime[p]) {
      primes.push_back(p);
    }
  }
}

unsigned int qwq(unsigned int x) {
  return x - x / 2 - x / 3 - x / 5 + x / 6 + x / 10 + x / 15 - x / 30;
}

int main() {
  cin >> n >> A >> B >> C >> D;
  
  sieve(sqrt(n));

  unsigned int i, j, x;
  for (i = 2; i <= n; i++) {
    if (i == 2 || i == 3 || i == 5 || prime[i]) {
      j = i;
      unsigned int F1 = f(i);
      while (j <= n) {
        ans += (n / j) * F1;
        if ((long long)j * i > n) {
          break;
        }
        j *= i;
      }
    }
  }

  cout << ans;
  return 0;
}