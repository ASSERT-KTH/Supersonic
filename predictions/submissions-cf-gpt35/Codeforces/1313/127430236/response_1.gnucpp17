#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  
  int n;
  cin >> n;
  
  vector<int> a(n + 1);
  for (int i = 1; i <= n; i++) {
    cin >> a[i];
  }
  
  vector<int> l(n + 1), r(n + 1), res(n + 1);
  vector<int> node(4 * n + 1);
  
  auto update = [&](int id, int l, int r, int pos, int x) {
    if (l > pos || r < pos) {
      return;
    }
    if (l == r) {
      node[id] = x;
      return;
    }
    int mid = (l + r) / 2;
    update(id * 2, l, mid, pos, x);
    update(id * 2 + 1, mid + 1, r, pos, x);
    node[id] = min(node[id * 2], node[id * 2 + 1]);
  };
  
  auto find = [&](int id, int l, int r, int tr, int ph, int x) {
    if (tr > ph || l > ph || r < tr || node[id] > x) {
      return 0;
    }
    if (l == r) {
      return r;
    }
    int mid = (l + r) / 2;
    if (l >= tr && r <= ph) {
      if (node[id] > x) {
        return 0;
      }
      if (node[id * 2 + 1] <= x) {
        return find(id * 2 + 1, mid + 1, r, tr, ph, x);
      }
      else {
        return find(id * 2, l, mid, tr, ph, x);
      }
    }
    return max(find(id * 2, l, mid, tr, ph, x), find(id * 2 + 1, mid + 1, r, tr, ph, x));
  };
  
  int id;
  id = 0;
  for (int i = 1; i <= n; i++) {
    id = find(1, 1, n, 1, i - 1, a[i]);
    update(1, 1, n, i, a[i]);
    l[i] = l[id] + a[i] * (i - id);
  }
  
  fill(node.begin(), node.end(), 0);
  
  reverse(a.begin() + 1, a.end());
  for (int i = 1; i <= n; i++) {
    id = find(1, 1, n, 1, i - 1, a[i]);
    update(1, 1, n, i, a[i]);
    r[i] = r[id] + a[i] * (i - id);
  }
  
  reverse(a.begin() + 1, a.end());
  
  int sum = 0, pos;
  for (int i = 1; i <= n; i++) {
    if (sum < l[i] + r[n - i + 1] - a[i]) {
      sum = l[i] + r[n - i + 1] - a[i];
      pos = i;
    }
  }
  
  int minn = a[pos];
  res[pos] = a[pos];
  for (int i = pos - 1; i >= 1; i--) {
    minn = min(minn, a[i]);
    res[i] = minn;
  }
  
  minn = a[pos];
  for (int i = pos + 1; i <= n; i++) {
    minn = min(minn, a[i]);
    res[i] = minn;
  }
  
  for (int i = 1; i <= n; i++) {
    cout << res[i] << " ";
  }
  
  return 0;
}