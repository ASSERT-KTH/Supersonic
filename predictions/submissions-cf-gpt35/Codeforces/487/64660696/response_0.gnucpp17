#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int maxLig = (1e5) + 5;
const int maxCol = 12;
const int maxReq = (1e5) + 5;
const int sqr = 600;

int nbLig, nbCol, nbReq;
vector<vector<char>> grille;
vector<vector<int>> proc;
int tps = 0;
vector<vector<pair<int, int>>> go;
vector<int> blocRef;

void comp(int lig, int col, int safeLig) {
    if (proc[lig][col] == tps)
        return;
    proc[lig][col] = tps;
    int nextLig = lig, nextCol = col;
    if (grille[lig][col] == '<')
        --nextCol;
    else if (grille[lig][col] == '>')
        ++nextCol;
    else if (grille[lig][col] == '^')
        --nextLig;
    if (nextLig == safeLig || grille[nextLig][nextCol] == '~') {
        go[lig][col] = {nextLig, nextCol};
    } else if (grille[lig][col] != '^' && grille[lig][nextCol] != '^' && grille[lig][col] != grille[lig][nextCol]) {
        go[lig][col] = {0, 0};
    } else {
        comp(nextLig, nextCol, safeLig);
        go[lig][col] = go[nextLig][nextCol];
    }
}

pair<int, int> getFin(int lig, int col) {
    while (grille[lig][col] != '~') {
        pair<int, int> e = go[lig][col];
        lig = e.first;
        col = e.second;
    }
    return {lig, col};
}

bool compBloc(int bloc) {
    int deb = bloc * sqr, fin = min(nbLig, (bloc + 1) * sqr);
    if (deb > nbLig)
        return false;
    for (int lig = deb + 1; lig <= fin; ++lig) {
        blocRef[lig] = bloc;
        for (int col = 1; col <= nbCol; ++col) {
            comp(lig, col, deb);
        }
    }
    return true;
}

int main() {
    cin >> nbLig >> nbCol >> nbReq;
    grille.resize(nbLig + 1, vector<char>(nbCol + 1, '~'));
    proc.resize(nbLig + 1, vector<int>(nbCol + 1, 0));
    go.resize(nbLig + 1, vector<pair<int, int>>(nbCol + 1, {0, 0}));
    blocRef.resize(nbLig + 1, 0);

    for (int lig = 1; lig <= nbLig; ++lig) {
        for (int col = 1; col <= nbCol; ++col) {
            cin >> grille[lig][col];
        }
    }

    ++tps;
    for (int bloc = 0;; ++bloc) {
        if (!compBloc(bloc))
            break;
    }

    for (int req = 0; req < nbReq; ++req) {
        char mode;
        cin >> mode;
        int lig, col;
        cin >> lig >> col;
        if (mode == 'A') {
            pair<int, int> res = getFin(lig, col);
            if (res == pair<int, int>{0, 0})
                res = {-1, -1};
            cout << res.first << " " << res.second << "\n";
        } else {
            ++tps;
            char nv;
            cin >> nv;
            grille[lig][col] = nv;
            int bloc = blocRef[lig];
            compBloc(bloc);
            if (bloc)
                compBloc(bloc - 1);
        }
    }

    return 0;
}