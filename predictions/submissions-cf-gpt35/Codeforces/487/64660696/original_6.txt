```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int maxLig = (1e5) + 5;
const int maxCol = 12;
const int maxReq = (1e5) + 5;
const int sqr = 600;

int nbLig, nbCol, nbReq;
vector<vector<char>> grille(maxLig, vector<char>(maxCol));
vector<vector<int>> proc(maxLig, vector<int>(maxCol));
int tps = 0;
vector<vector<pair<int, int>>> go(maxLig, vector<pair<int, int>>(maxCol));

void comp(int lig, int col, int safeLig) {
  if (proc[lig][col] == tps)
    return;
  proc[lig][col] = tps;
  int nextLig = lig, nextCol = col;
  if (grille[lig][col] == '<')
    --nextCol;
  else if (grille[lig][col] == '>')
    ++nextCol;
  else if (grille[lig][col] == '^')
    --nextLig;
  if (nextLig == safeLig || grille[nextLig][nextCol] == '~') {
    go[lig][col] = {nextLig, nextCol};
  } else if (grille[lig][col] != '^' && grille[lig][nextCol] != '^' &&
             grille[lig][col] != grille[lig][nextCol]) {
    go[lig][col] = {0, 0};
  } else {
    comp(nextLig, nextCol, safeLig);
    go[lig][col] = go[nextLig][nextCol];
  }
}

pair<int, int> getFin(int lig, int col) {
  while (grille[lig][col] != '~') {
    pair<int, int> e = go[lig][col];
    lig = e.first;
    col = e.second;
  }
  return {lig, col};
}

int main() {
  cin >> nbLig >> nbCol >> nbReq;
  for (int lig = 1; lig <= nbLig; ++lig) {
    for (int col = 1; col <= nbCol; ++col) {
      cin >> grille[lig][col];
    }
  }
  ++tps;
  int deb = 1, fin = min(nbLig, sqr);
  while (deb <= nbLig) {
    for (int lig = deb; lig <= fin; ++lig) {
      for (int col = 1; col <= nbCol; ++col) {
        comp(lig, col, deb);
      }
    }
    deb += sqr;
    fin = min(nbLig, fin + sqr);
  }
  for (int req = 0; req < nbReq; ++req) {
    char mode;
    cin >> mode;
    int lig, col;
    cin >> lig >> col;
    if (mode == 'A') {
      pair<int, int> res = getFin(lig, col);
      if (res == pair<int, int>{0, 0})
        res = {-1, -1};
      cout << res.first << " " << res.second << "\n";
    } else {
      ++tps;
      char nv;
      cin >> nv;
      grille[lig][col] = nv;
      int bloc = (lig - 1) / sqr;
      deb = bloc * sqr + 1;
      fin = min(nbLig, (bloc + 1) * sqr);
      while (deb <= fin) {
        for (int l = deb; l <= fin; ++l) {
          for (int c = 1; c <= nbCol; ++c) {
            comp(l, c, deb);
          }
        }
        deb += sqr;
        fin = min(nbLig, fin + sqr);
      }
      if (bloc)
        deb = (bloc - 1) * sqr + 1;
        fin = min(nbLig, bloc * sqr);
        while (deb <= fin) {
          for (int l = deb; l <= fin; ++l) {
            for (int c = 1; c <= nbCol; ++c) {
              comp(l, c, deb);
            }
          }
          deb += sqr;
          fin = min(nbLig, fin + sqr);
        }
    }
  }
}
```