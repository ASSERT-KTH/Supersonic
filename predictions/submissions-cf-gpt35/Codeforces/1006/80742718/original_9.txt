```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;

typedef long long ll;

const int N = 29;

int n, m;
ll k, ans;
ll grid[N][N];
map<ll, int> mp[N][N];

void solve(int row, int col, ll x, int num) {
    if (row < 1 || col < 1) return;
    if (num == 0) {
        ans += mp[row][col][x ^ k];
        return;
    }
    solve(row + 1, col, x ^ grid[row + 1][col], num - 1);
    solve(row, col + 1, x ^ grid[row][col + 1], num - 1);
}

int main() {
    std::ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    
    cin >> n >> m >> k;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            cin >> grid[i][j];
        }
    }
    
    int num = (n + m - 2 + 1) / 2;
    for (int i = 0; i < (1 << num); i++) {
        int row = 1, col = 1;
        ll x = grid[row][col];
        for (int j = 0; j < num; j++) {
            if (i & (1 << j)) {
                row++;
            } else {
                col++;
            }
            x ^= grid[row][col];
        }
        mp[row][col][x]++;
    }
    
    num = n + m - 2 - num;
    for (int i = 0; i < (1 << num); i++) {
        int row = n, col = m;
        ll x = grid[row][col];
        for (int j = 0; j < num; j++) {
            if (i & (1 << j)) {
                row--;
            } else {
                col--;
            }
            if (row < 1 || col < 1) break;
            x ^= grid[row][col];
        }
        solve(row, col, x, num);
    }
    
    cout << ans << endl;
    return 0;
}
```