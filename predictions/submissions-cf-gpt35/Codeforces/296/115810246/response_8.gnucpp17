#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
using namespace std;
typedef long long ll;

const int MAX_N = 100005;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n, m, k;
    cin >> n >> m >> k;

    ll arr[MAX_N];
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    vector<pair<pair<int, int>, ll>> queries;
    for (int i = 0; i < m; i++) {
        int a, b;
        ll c;
        cin >> a >> b >> c;
        queries.push_back(make_pair(make_pair(a - 1, b), c));
    }

    vector<pair<int, int>> operations;
    for (int i = 0; i < k; i++) {
        int x, y;
        cin >> x >> y;
        operations.push_back(make_pair(x - 1, y));
    }

    sort(queries.begin(), queries.end());

    ll ans[MAX_N];
    memset(ans, 0, sizeof(ans));

    int opIndex = 0;
    ll opCount = 0;
    for (int i = 0; i < m; i++) {
        while (opIndex < k && operations[opIndex].first == i) {
            opCount++;
            opIndex++;
        }
        ans[queries[i].first.first] += opCount * queries[i].second;
        ans[queries[i].first.second] -= opCount * queries[i].second;
    }

    for (int i = 1; i < n; i++) {
        ans[i] += ans[i - 1];
    }

    for (int i = 0; i < n; i++) {
        cout << ans[i] + arr[i] << " ";
    }
    cout << "\n";

    return 0;
}