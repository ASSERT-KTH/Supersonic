#include <iostream>
#include <map>
#include <set>
#include <vector>

void solve() {
  int n;
  std::cin >> n;
  std::multiset<int> st;
  std::map<int, int> mp;
  int ans = 0;
  std::map<int, int> cnt;
  std::set<int> cst;
  for (int i = 0; i < n; ++i) {
    int x;
    std::cin >> x;
    if (mp[x]) {
      auto idx = st.find(mp[x]);
      cnt[mp[x]]--;
      st.erase(idx);
    }
    mp[x]++;
    cnt[mp[x]]++;
    cst.insert(x);
    st.insert(mp[x]);
    auto f = *st.begin();
    auto sec = st.upper_bound(f);
    if (sec == st.end())
      sec--;
    auto s = *sec;
    int w = cnt[f], y = cnt[s];
    if (cst.size() == 1)
      ans = i;
    if (std::max(w, y) == i + 1 && f == 1)
      ans = i;
    if (f * w + s * y == i + 1) {
      if (y == 1) {
        if (s == 1 || s - 1 == f)
          ans = i;
      } else if (w == 1) {
        if (f == 1 || f - 1 == s)
          ans = i;
      } else if (y == 1 && w == 1) {
        if (std::max(f, s) - 1 == std::min(f, s) || std::min(f, s) == 1)
          ans = i;
      }
    }
  }
  ans++;
  std::cout << ans << std::endl;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);
  std::cout.precision(35);
  solve();
  return 0;
}