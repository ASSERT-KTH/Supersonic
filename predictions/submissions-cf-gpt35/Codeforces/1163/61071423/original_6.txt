```cpp
#include <iostream>
#include <vector>
#include <set>
#include <map>
using namespace std;

typedef pair<int, int> ip;

pair<int, int> slope(int x1, int y1, int x2, int y2) {
    int tmp1 = x2 - x1, tmp2 = y2 - y1;
    int tmp3 = __gcd(abs(tmp1), abs(tmp2));
    if (tmp1 == 0 && tmp2 == 0)
        return make_pair(0, 0);
    if (tmp1 == 0)
        return make_pair(1, 0);
    if (tmp2 == 0)
        return make_pair(0, 1);
    tmp1 /= tmp3, tmp2 /= tmp3;
    if (tmp1 < 0)
        tmp1 *= -1, tmp2 *= -1;
    return make_pair(tmp2, tmp1);
}

pair<int, int> cept(int x1, int y1, int x2, int y2) {
    int tmp1 = y2 * x1 - x2 * y1, tmp2 = x2 - x1;
    int tmp3 = __gcd(abs(tmp1), abs(tmp2));
    if (tmp1 == 0 && tmp2 == 0)
        return make_pair(0, 0);
    if (tmp1 == 0)
        return make_pair(0, 1);
    if (tmp2 == 0)
        return make_pair(x1, 0);
    tmp1 /= tmp3, tmp2 /= tmp3;
    if (tmp1 < 0)
        tmp1 *= -1, tmp2 *= -1;
    return make_pair(tmp1, tmp2);
}

int main() {
    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
    int n;
    cin >> n;
    vector<ip> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i].first >> a[i].second;
    }
    set<pair<ip, ip>> s;
    map<ip, set<pair<int, int>>> mp;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            ip s1 = slope(a[i].first, a[i].second, a[j].first, a[j].second);
            pair<int, int> c = cept(a[i].first, a[i].second, a[j].first, a[j].second);
            s.insert(make_pair(s1, c));
            mp[s1].insert(c);
        }
    }
    long long x = 0;
    for (auto i : mp) {
        int si = i.second.size();
        x += 1LL * si * (si - 1) / 2;
    }
    long long si = s.size();
    cout << si * (si - 1) / 2 - x;
}
```