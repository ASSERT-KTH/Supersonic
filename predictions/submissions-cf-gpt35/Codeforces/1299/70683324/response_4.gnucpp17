#include <iostream>
#include <vector>
#include <iomanip>
using namespace std;

typedef long long int lli;
typedef double mytype;
typedef pair<lli, lli> ii;
typedef vector<ii> vii;
typedef vector<lli> vi;

void addLine(vii &c, ii z) {
    lli n = c.size();
    while (n > 1) {
        ii x = c[n - 2], y = c[n - 1];
        if ((x.Y - y.Y) * (z.X - y.X) >= (y.Y - z.Y) * (y.X - x.X))
            break;
        c.pop_back();
        n--;
    }
    c.push_back(z);
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cout << fixed << setprecision(10);

    lli n;
    cin >> n;
    vi a(n + 1);
    for (lli i = 1; i <= n; i++) {
        cin >> a[i];
        a[i] += a[i-1];
    }

    vii c;
    vi dd(n + 1, 0);
    for (lli i = n; i >= 1; i--) {
        addLine(c, {-i, a[i]});
        lli l = 0, r = c.size();
        while (r - l > 1) {
            lli mi = (l + r) / 2;
            if (c[mi].X * (c[mi].Y - c[mi - 1].Y) + c[mi].Y * (c[mi - 1].X - c[mi].X) >= a[i - 1] * (c[mi - 1].X - c[mi].X) - (c[mi].Y - c[mi - 1].Y) * (i - 1))
                l = mi;
            else
                r = mi;
        }
        dd[i] = -c[l].X;
    }

    lli i = 1;
    while (i <= n) {
        lli j = dd[i];
        const mytype m = (a[j] - a[i - 1]) / static_cast<mytype>(j - i + 1);
        while (i <= j) {
            cout << m << endl;
            i++;
        }
    }

    return 0;
}