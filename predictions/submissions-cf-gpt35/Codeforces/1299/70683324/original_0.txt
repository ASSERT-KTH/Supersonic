```cpp
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("-ffloat-store")
#include <bits/stdc++.h>
#include <iostream>

using namespace std;
typedef long long int lli;
typedef double mytype;

class CMP {
public:
  bool operator()(pair<lli, lli> a, pair<lli, lli> b) {
    return !(a.first < b.first || (a.first == b.first && a.second <= b.second));
  }
};

void addLine(vector<pair<lli, lli>> &c, pair<lli, lli> z) {
  lli n = c.size();
  while (n > 1) {
    pair<lli, lli> x = c[n - 2], y = c[n - 1];
    if ((x.second - y.second) * (z.first - y.first) >= (y.second - z.second) * (y.first - x.first))
      break;
    c.pop_back();
    n--;
  }
  c.push_back(z);
}

int main(void) {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cout << fixed << setprecision(10);

  lli n, in;
  cin >> n;
  vector<lli> a(n + 1, 0);
  for (int i = 1; i <= n; i++) {
    cin >> in;
    a[i] = in + a[i - 1];
  }

  vector<pair<lli, lli>> c;
  vector<lli> dd(n + 1, 0);
  for (int i = n; i >= 1; i--) {
    addLine(c, {-i, a[i]});
    lli l = 0, r = c.size();
    while (r - l > 1) {
      lli mi = (l + r) / 2;
      if (c[mi].first * (c[mi].second - c[mi - 1].second) + c[mi].second * (c[mi - 1].first - c[mi].first) >=
          a[i - 1] * (c[mi - 1].first - c[mi].first) - (c[mi].second - c[mi - 1].second) * (i - 1))
        l = mi;
      else
        r = mi;
    }
    dd[i] = -c[l].first;
  }

  int i = 1;
  while (i <= n) {
    int j = dd[i];
    const mytype m = (a[j] - a[i - 1]) / (mytype)(j - i + 1);
    while (i <= j) {
      cout << m << endl;
      i++;
    }
  }

  return 0;
}
```