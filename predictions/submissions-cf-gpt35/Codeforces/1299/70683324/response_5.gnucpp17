#include <iostream>
#include <vector>
#include <iomanip>

using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cout << fixed << setprecision(10);

    int n;
    cin >> n;

    vector<int> a(n+1);
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
        a[i] += a[i-1];
    }

    vector<pair<int, int>> c;
    vector<int> dd(n + 1, 0);
    for (int i = n; i >= 1; --i) {
        pair<int, int> z = {-i, a[i]};
        int sz = c.size();
        while (sz > 1) {
            pair<int, int> x = c[sz - 2], y = c[sz - 1];
            if ((x.second - y.second) * (z.first - y.first) >= (y.second - z.second) * (y.first - x.first)) {
                break;
            }
            c.pop_back();
            sz--;
        }
        c.push_back(z);

        int l = 0, r = c.size();
        while (r - l > 1) {
            int mi = (l + r) / 2;
            if (c[mi].first * (c[mi].second - c[mi - 1].second) + c[mi].second * (c[mi - 1].first - c[mi].first) >= a[i - 1] * (c[mi - 1].first - c[mi].first) - (c[mi].second - c[mi - 1].second) * (i - 1)) {
                l = mi;
            } else {
                r = mi;
            }
        }
        dd[i] = -c[l].first;
    }

    int i = 1;
    while (i <= n) {
        int j = dd[i];
        double m = static_cast<double>(a[j] - a[i - 1]) / (j - i + 1);
        while (i <= j) {
            cout << m << endl;
            i++;
        }
    }

    return 0;
}