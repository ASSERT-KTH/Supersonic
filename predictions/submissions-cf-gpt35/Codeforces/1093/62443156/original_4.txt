```cpp
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  cout << boolalpha;
  int n, k;
  cin >> n >> k;
  vector<vector<int>> a(n, vector<int>(k));
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < k; ++j) {
      cin >> a[i][j];
    }
  }
  vector<pair<int, int>> trees(1 << k, {1e9, -1e9});
  for (int mask = 0; mask < (1 << k); ++mask) {
    for (int i = 0; i < n; ++i) {
      int val = 0;
      for (int j = 0; j < k; ++j) {
        if (mask & (1 << j)) {
          val += a[i][j];
        } else {
          val -= a[i][j];
        }
      }
      trees[mask].first = min(trees[mask].first, val);
      trees[mask].second = max(trees[mask].second, val);
    }
  }
  int q;
  cin >> q;
  while (q--) {
    int type;
    cin >> type;
    if (type == 1) {
      int i;
      cin >> i;
      --i;
      vector<int> b(k);
      for (int j = 0; j < k; ++j) {
        cin >> b[j];
      }
      for (int mask = 0; mask < (1 << k); ++mask) {
        int val = 0;
        for (int j = 0; j < k; ++j) {
          if (mask & (1 << j)) {
            val += b[j];
          } else {
            val -= b[j];
          }
        }
        trees[mask].first = min(trees[mask].first, val);
        trees[mask].second = max(trees[mask].second, val);
      }
    } else {
      int l, r;
      cin >> l >> r;
      --l, --r;
      int ans = -1e9;
      for (int mask = 0; mask < (1 << k); ++mask) {
        auto a = trees[mask];
        ans = max(ans, a.second - a.first);
      }
      cout << ans << '\n';
    }
  }
  return 0;
}
```