#include <bits/stdc++.h>
using namespace std;

const int N = 2e5 + 15;

int t;
int n, l, r, aux;
int a[N], b[N], col[N];

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

  cin >> t;
  while (t--) {
    cin >> n >> l >> r;

    for (int i = 1; i <= n; ++i) {
      cin >> aux;
      if (i <= l) {
        ++a[aux];
      } else {
        ++b[aux];
      }
      col[i] = aux;
    }

    sort(col + 1, col + n + 1);
    int unique_col = unique(col + 1, col + n + 1) - col - 1;

    int ans = 0;
    for (int i = 1; i <= unique_col; ++i) {
      int elim = min(a[col[i]], b[col[i]]);
      a[col[i]] -= elim;
      l -= elim;
      b[col[i]] -= elim;
      r -= elim;
    }

    ans += min(l, r);

    int odd_l = l & 1;
    int odd_r = r & 1;

    l /= 2;
    r /= 2;

    for (int i = 1; i <= unique_col; ++i) {
      if (a[col[i]] >= 2 && l > 0 && r > 0) {
        ans += 2;
        l--;
        r--;
        a[col[i]] -= 2;
      }
    }

    if (odd_l) {
      for (int i = 1; i <= unique_col; ++i) {
        if (a[col[i]] >= 1 && l > 0 && r > 0) {
          ans++;
          l--;
          r--;
          a[col[i]]--;
        }
      }
    } else if (odd_r) {
      for (int i = 1; i <= unique_col; ++i) {
        if (b[col[i]] >= 1 && l > 0 && r > 0) {
          ans++;
          l--;
          r--;
          b[col[i]]--;
        }
      }
    }

    cout << ans << '\n';

    memset(a, 0, sizeof(a));
    memset(b, 0, sizeof(b));
    memset(col, 0, sizeof(col));
  }

  return 0;
}