#include <bits/stdc++.h>
using namespace std;

typedef long long li;
typedef long double ld;
typedef pair<int, int> pt;

const int N = 250 * 1000 + 555;
const int M = 30 * 1000 * 1000 + 555;

int n;
pair<int, pt> qs[N];
int nodes_count = 0;
int nodes_sum[M];
int nodes_sval[M];
int nodes_l[M];
int nodes_r[M];

inline bool read() {
    if (!(cin >> n))
        return false;
    for (int i = 0; i < n; i++) {
        cin >> qs[i].first;
        if (qs[i].first > 1)
            cin >> qs[i].second.first;
        if (qs[i].first == 5)
            cin >> qs[i].second.second;
    }
    return true;
}

inline void upd(int t, int l1, int l2) {
    nodes_sum[t] = nodes_sum[nodes_l[t]] + nodes_sum[nodes_r[t]];
}

int getNode(int sum, int sval, int l, int r) {
    nodes_sum[nodes_count] = sum;
    nodes_sval[nodes_count] = sval;
    nodes_l[nodes_count] = l;
    nodes_r[nodes_count] = r;
    return nodes_count++;
}

int getsum(int t, int len) {
    if (nodes_sval[t] != -1)
        return len * nodes_sval[t];
    return nodes_sum[t];
}

int push(int t) {
    int pushed = nodes_sval[t];
    nodes_sval[t] = -1;
    return pushed;
}

int setVal(int t, int l, int r, int lf, int rg, int val, int pushed = -1) {
    int nt = getNode(nodes_sum[t], nodes_sval[t], nodes_l[t], nodes_r[t]);
    if (pushed != -1)
        nodes_sval[nt] = pushed;
    if (l == lf && r == rg) {
        nodes_sval[nt] = val;
        return nt;
    }
    int mid = (l + r) >> 1;
    pushed = push(nt);
    if (lf < mid)
        nodes_l[nt] = setVal(nodes_l[nt], l, mid, lf, min(mid, rg), val, pushed);
    else if (pushed != -1)
        nodes_l[nt] = nodes_l[nodes_r[nt]] = getNode(nodes_sum[nodes_r[nt]], pushed, nodes_l[nodes_r[nt]], nodes_r[nodes_r[nt]]);
    if (rg > mid)
        nodes_r[nt] = setVal(nodes_r[nt], mid, r, max(lf, mid), rg, val, pushed);
    else if (pushed != -1)
        nodes_r[nt] = nodes_r[nodes_l[nt]] = getNode(nodes_sum[nodes_l[nt]], pushed, nodes_l[nodes_l[nt]], nodes_r[nodes_l[nt]]);
    upd(nt, mid - l, r - mid);
    return nt;
}

int getPos(int t, int l, int r, int lf, int rg) {
    if (l == lf && r == rg) {
        if (l + 1 == r)
            return getsum(t, 1) ? l : -1;
        if (getsum(t, r - l) == 0)
            return -1;
    }
    if (nodes_sval[t] != -1)
        return nodes_sval[t] > 0 ? rg - 1 : -1;
    int mid = (l + r) >> 1;
    int ans = -1;
    if (rg > mid && ans == -1)
        ans = max(ans, getPos(nodes_r[t], mid, r, max(lf, mid), rg));
    if (lf < mid && ans == -1)
        ans = max(ans, getPos(nodes_l[t], l, mid, lf, min(mid, rg)));
    return ans;
}

int maxLen = -1;
bool sub(pair<int, int> &p, int pw) {
    if (pw >= p.first)
        return true;
    pw = p.first - pw - 1;
    int pos = getPos(p.second, 0, maxLen, 0, pw + 1);
    if (pos < 0)
        return true;
    int nt = setVal(p.second, 0, maxLen, pos, pos + 1, 0);
    if (pos < pw)
        nt = setVal(nt, 0, maxLen, pos + 1, pw + 1, 1);
    p = {p.first, nt};
    return getsum(nt, maxLen) == 0;
}

int dead[N];
pair<int, pair<int, int>> ps[N];

inline void solve() {
    int cnt = 0;
    maxLen = n + 3;
    for (int i = 0; i < n; i++) {
        int tp = qs[i].first;
        int a = qs[i].second.first, b = qs[i].second.second;
        a--, b--;
        if (tp == 1) {
            int id = cnt++;
            dead[id] = -2;
            ps[id] = {0, {1, getNode(0, -1, -1, -1)}};
            ps[id].second.second = setVal(ps[id].second.second, 0, maxLen, 0, 1, 1);
        } else if (tp == 2) {
            if (dead[a] < 0)
                ps[a].first++;
        } else if (tp == 3) {
            if (dead[a] < 0) {
                ps[a].second.second = setVal(ps[a].second.second, 0, maxLen, ps[a].second.first, ps[a].second.first + 1, 0);
                ps[a].second.first++;
            }
        } else if (tp == 4) {
            int id = cnt++;
            dead[id] = -2;
            ps[id] = ps[a];
            if (dead[a] >= 0)
                dead[id] = i;
        } else {
            if (dead[a] < 0 && dead[b] < 0) {
                if (sub(ps[a].second, ps[b].first))
                    dead[a] = i;
                if (sub(ps[b].second, ps[a].first))
                    dead[b] = i;
            }
        }
    }
    cout << cnt << endl;
    for (int i = 0; i < cnt; i++)
        cout << dead[i] + 1 << " ";
    cout << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    cout << fixed << setprecision(15);
    if (read()) {
        solve();
    }
    return 0;
}