```cpp
#include <iostream>
#include <vector>
using namespace std;

const int N = 250 * 1000 + 555;

int n;
vector<pair<int, pair<int, int>>> qs(N);

bool read() {
  if (!(cin >> n))
    return false;
  for (int i = 0; i < n; i++) {
    cin >> qs[i].first;
    if (qs[i].first > 1)
      cin >> qs[i].second.first;
    if (qs[i].first == 5)
      cin >> qs[i].second.second;
  }
  return true;
}

int maxLen = -1;
vector<int> dead(N, -2);
vector<pair<int, pair<int, vector<int>>>> ps(N);

void solve() {
  int cnt = 0;
  maxLen = n + 3;
  for (int i = 0; i < n; i++) {
    int tp = qs[i].first;
    int a = qs[i].second.first, b = qs[i].second.second;
    a--, b--;
    if (tp == 1) {
      int id = cnt++;
      dead[id] = -2;
      ps[id] = {0, {1, vector<int>(maxLen, 0)}};
      ps[id].second.second[0] = 1;
    } else if (tp == 2) {
      if (dead[a] < 0)
        ps[a].first++;
    } else if (tp == 3) {
      if (dead[a] < 0) {
        ps[a].second.second[ps[a].second.first] = 0;
        ps[a].second.first++;
      }
    } else if (tp == 4) {
      int id = cnt++;
      dead[id] = -2;
      ps[id] = ps[a];
      if (dead[a] >= 0)
        dead[id] = i;
    } else {
      if (dead[a] < 0 && dead[b] < 0) {
        bool sub_a = true, sub_b = true;
        int pw_a = ps[b].second.first;
        int pw_b = ps[a].second.first;
        if (pw_a < ps[b].first - pw_a - 1) {
          int pos = max_element(ps[b].second.second.begin(), ps[b].second.second.begin() + pw_a + 1) - ps[b].second.second.begin();
          if (ps[b].second.second[pos] == 0) {
            sub_a = false;
          } else {
            ps[b].second.second[pos] = 0;
            ps[b].second.second[pos + 1] = 1;
          }
        }
        if (pw_b < ps[a].first - pw_b - 1) {
          int pos = max_element(ps[a].second.second.begin(), ps[a].second.second.begin() + pw_b + 1) - ps[a].second.second.begin();
          if (ps[a].second.second[pos] == 0) {
            sub_b = false;
          } else {
            ps[a].second.second[pos] = 0;
            ps[a].second.second[pos + 1] = 1;
          }
        }
        if (sub_a)
          dead[a] = i;
        if (sub_b)
          dead[b] = i;
      }
    }
  }
  cout << cnt << endl;
  for (int i = 0; i < cnt; i++) {
    cout << dead[i] + 1 << " ";
  }
  cout << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0), cout.tie(0);
  cout << fixed << setprecision(15);
  if (read()) {
    solve();
  }
  return 0;
}
```