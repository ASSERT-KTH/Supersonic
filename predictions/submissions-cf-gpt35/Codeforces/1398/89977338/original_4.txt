```c++
#include <iostream>
#include <vector>
#include <cmath>
#include <cstring>
#include <algorithm>

typedef long long ll;
typedef std::vector<ll> poly;

struct CD {
  double r, i;
  CD(double r = 0, double i = 0) : r(r), i(i) {}
  double real() const { return r; }
  void operator/=(const int c) { r /= c, i /= c; }
};

CD operator*(const CD &a, const CD &b) {
  return CD(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r);
}

CD operator+(const CD &a, const CD &b) { return CD(a.r + b.r, a.i + b.i); }

CD operator-(const CD &a, const CD &b) { return CD(a.r - b.r, a.i - b.i); }

const double pi = acos(-1.0);

void dft(std::vector<CD> &a, int n, bool inv) {
  std::vector<int> R(n);
  for (int i = 0; i < n; i++) {
    R[i] = 0;
    for (int j = 0; j < 20; j++) {
      R[i] = (R[i] << 1) | ((i >> j) & 1);
    }
  }
  for (int i = 0; i < n; i++) {
    if (R[i] < i) {
      std::swap(a[R[i]], a[i]);
    }
  }
  for (int m = 2; m <= n; m *= 2) {
    double z = 2 * pi / m * (inv ? -1 : 1);
    CD wi = CD(cos(z), sin(z));
    for (int j = 0; j < n; j += m) {
      CD w(1);
      for (int k = j, k2 = j + m / 2; k2 < j + m; k++, k2++) {
        CD u = a[k];
        CD v = a[k2] * w;
        a[k] = u + v;
        a[k2] = u - v;
        w = w * wi;
      }
    }
  }
  if (inv)
    for (int i = 0; i < n; i++) {
      a[i] /= n;
    }
}

poly multiply(const poly &p1, const poly &p2) {
  int n = p1.size() + p2.size() + 1;
  int m = 1, cnt = 0;
  while (m <= n) {
    m += m;
    cnt++;
  }
  std::vector<CD> cp1(m), cp2(m);
  for (int i = 0; i < p1.size(); i++) {
    cp1[i].r = p1[i];
  }
  for (int i = 0; i < p2.size(); i++) {
    cp2[i].r = p2[i];
  }
  dft(cp1, m, false);
  dft(cp2, m, false);
  for (int i = 0; i < m; i++) {
    cp1[i] = cp1[i] * cp2[i];
  }
  dft(cp1, m, true);
  poly res(n - 2);
  for (int i = 0; i < n - 2; i++) {
    res[i] = (ll)floor(cp1[i].real() + 0.5);
  }
  return res;
}

void SieveOfEratosthenes(std::vector<int> &lp, std::vector<int> &pr) {
  int MAXN = lp.size() - 1;
  for (int i = 2; i <= MAXN; i++) {
    if (lp[i] == 0) {
      lp[i] = i;
      pr.push_back(i);
    }
    for (int j = 0; j < pr.size() && pr[j] <= lp[i] && i * pr[j] <= MAXN; ++j) {
      lp[i * pr[j]] = pr[j];
    }
  }
}

void div_rec(std::vector<ll> &r, std::vector<std::pair<ll, int>> &f, int k, ll c) {
  if (k == f.size()) {
    r.push_back(c);
    return;
  }
  for (int i = 0; i <= f[k].second; i++) {
    div_rec(r, f, k + 1, c);
    c *= f[k].first;
  }
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);

  int n, x, y;
  std::cin >> n >> x >> y;
  int OFFSET = x;
  poly l(2 * OFFSET + 1), r(2 * OFFSET + 1);
  for (int i = 0; i < n + 1; i++) {
    int X;
    std::cin >> X;
    l[X + OFFSET]++;
    r[-X + OFFSET]++;
  }
  poly p = multiply(l, r);
  std::vector<bool> can(2 * OFFSET);
  for (int i = 0; i < 2 * OFFSET; i++) {
    if (i + 2 * OFFSET < p.size() && p[i + 2 * OFFSET]) {
      can[i] = true;
    }
  }
  int q;
  std::cin >> q;
  std::vector<int> res(q + 1, -1);
  std::vector<std::vector<int>> g(MAXN + 1);
  for (int i = 0; i < q + 1; i++) {
    int X;
    std::cin >> X;
    if (g[X].empty()) {
      int it = X;
      std::vector<std::pair<ll, int>> aux;
      while (it != 1) {
        if (aux.empty() || aux.back().first != lp[it]) {
          aux.push_back({lp[it], 1});
        } else {
          aux.back().second++;
        }
        it /= lp[it];
      }
      div_rec(g[X], aux, 0, 1);
    }
    for (int j : g[X]) {
      ll need = j - 2 * y;
      if (need > 0 && need % 2 == 0 && can[need / 2]) {
        res[i] = std::max(res[i], j);
      }
    }
  }
  for (int i = 0; i < q; i++) {
    std::cout << res[i] << " ";
  }
  std::cout << res[q] << "\n";

  return 0;
}
```