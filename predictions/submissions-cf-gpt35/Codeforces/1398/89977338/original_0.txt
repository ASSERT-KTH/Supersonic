```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<ll, ll> ii;
#define db(x) cout << #x << " = " << x << "\n";
#define FIN ios::sync_with_stdio(false); cin.tie(0); cout.tie(0)
#define SZ(a) ((ll)(a).size())
#define pb push_back
#define fst first
#define snd second
const ll MAXN = 1 << 20;
ll n, x, y, lp[MAXN + 1], res[MAXN];
bool can[MAXN];
vector<ll> pr;
void SieveOfEratosthenes() {
  for (ll i = 2; i <= MAXN; i++) {
    if (lp[i] == 0)
      lp[i] = i, pr.pb(i);
    for (ll j = 0; j < SZ(pr) && pr[j] <= lp[i] && i * pr[j] <= MAXN; ++j)
      lp[i * pr[j]] = pr[j];
  }
}
void div_rec(vector<ll> &r, vector<ii> &f, ll k, ll c) {
  if (k == SZ(f)) {
    r.pb(c);
    return;
  }
  for (ll i = 0; i <= f[k].snd; i++) {
    div_rec(r, f, k + 1, c);
    c *= f[k].fst;
  }
}
typedef ll tf;
typedef vector<tf> poly;
struct CD {
  double r, i;
  CD(double r = 0, double i = 0) : r(r), i(i) {}
  double real() const { return r; }
  void operator/=(const ll c) { r /= c, i /= c; }
};
CD operator*(const CD &a, const CD &b) {
  return CD(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r);
}
CD operator+(const CD &a, const CD &b) { return CD(a.r + b.r, a.i + b.i); }
CD operator-(const CD &a, const CD &b) { return CD(a.r - b.r, a.i - b.i); }
const double pi = acos(-1.0);
CD cp1[MAXN + 9], cp2[MAXN + 9];
ll R[MAXN + 9];
void dft(CD *a, ll n, bool inv) {
  for (ll i = 0; i < n; i++) if (R[i] < i) swap(a[R[i]], a[i]);
  for (ll m = 2; m <= n; m *= 2) {
    double z = 2 * pi / m * (inv ? -1 : 1);
    CD wi = CD(cos(z), sin(z));
    for (ll j = 0; j < n; j += m) {
      CD w(1);
      for (ll k = j, k2 = j + m / 2; k2 < j + m; k++, k2++) {
        CD u = a[k];
        CD v = a[k2] * w;
        a[k] = u + v;
        a[k2] = u - v;
        w = w * wi;
      }
    }
  }
  if (inv)
    for (ll i = 0; i < n; i++) a[i] /= n;
}
poly multiply(poly &p1, poly &p2) {
  ll n = p1.size() + p2.size() + 1;
  ll m = 1, cnt = 0;
  while (m <= n)
    m += m, cnt++;
  for (ll i = 0; i < m; i++) {
    R[i] = 0;
    for (ll j = 0; j < cnt; j++) R[i] = (R[i] << 1) | ((i >> j) & 1);
  }
  for (ll i = 0; i < m; i++) cp1[i] = 0, cp2[i] = 0;
  for (ll i = 0; i < p1.size(); i++) cp1[i] = p1[i];
  for (ll i = 0; i < p2.size(); i++) cp2[i] = p2[i];
  dft(cp1, m, false);
  dft(cp2, m, false);
  for (ll i = 0; i < m; i++) cp1[i] = cp1[i] * cp2[i];
  dft(cp1, m, true);
  poly res;
  n -= 2;
  for (ll i = 0; i < n; i++) res.pb((tf)floor(cp1[i].real() + 0.5));
  return res;
}
vector<ll> g[MAXN];
int main() {
  FIN;
  SieveOfEratosthenes();
  cin >> n >> x >> y;
  ll OFFSET = x;
  poly l(2 * OFFSET + 1), r(2 * OFFSET + 1);
  for (ll i = 0; i < n + 1; i++) {
    ll X;
    cin >> X;
    l[X + OFFSET]++;
    r[-X + OFFSET]++;
  }
  poly p = multiply(l, r);
  for (ll i = 0; i < 2 * OFFSET; i++) if (i + 2 * OFFSET < SZ(p) && p[i + 2 * OFFSET])
      can[i] = 1;
  ll q;
  cin >> q;
  memset(res, -1, sizeof(res));
  for (ll _ = 0; _ < q + 1; _++) {
    ll X;
    cin >> X;
    if (!SZ(g[X])) {
      ll it = X;
      vector<ii> aux;
      while (it != 1) {
        if (!SZ(aux) || aux.back().fst != lp[it])
          aux.pb({lp[it], 1});
        else
          aux.back().snd++;
        it /= lp[it];
      }
      div_rec(g[X], aux, 0, 1);
    }
    for (ll i : g[X]) {
      ll need = i - 2 * y;
      if (need <= 0 || need % 2)
        continue;
      if (can[need / 2])
        res[_] = max(res[_], i);
    }
  }
  for (ll i = 0; i < q; i++) cout << res[i] << " \n"[i == q - 1];
}
```