#include <bits\stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define int long long
#define endl '\n'
#define fast                                                                   \
  ios_base::sync_with_stdio(false);                                            \
  cin.tie(NULL);                                                               \
  cout.tie(NULL);
#define line cout << "here - " << __LINE__ << "\n";
#define dbg(a) cout << #a << " --> " << (a) << "\n";
#define infi INT_MAX
#define rinfi INT_MIN
#define inf LLONG_MAX
#define rinf LLONG_MIN
#define ff first
#define ss second
using namespace std;
const int mx = 3e5 + 10;
vector<int> del[mx];
main() {
  fast int tc = 1, i, j, k;
  while (tc--) {
    int a, b;
    cin >> a >> b;
    vector<pair<int, int>> dif;
    vector<int> pre, suf;
    vector<pair<int, int>> v;
    int x, y;
    for (i = 0; i < a; i++) {
      cin >> x >> y;
      v.push_back({x, y});
      dif.push_back({y - x, i});
    }
    sort(dif.begin(), dif.end());
    for (i = 0; i < a; i++) {
      k = dif[i].ss;
      suf.push_back(v[k].ss);
      if (i)
        suf[i] += suf[i - 1];
    }
    for (i = a - 1; i >= 0; i--) {
      k = dif[i].ss;
      pre.push_back(v[k].ff);
    }
    for (i = 1; i < a; i++)
      pre[i] += pre[i - 1];
    reverse(pre.begin(), pre.end());
    for (i = 0; i < b; i++) {
      cin >> x >> y;
      k = v[x - 1].ss - v[x - 1].ff;
      int m = v[y - 1].ss - v[y - 1].ff;
      if (m <= k) {
        del[x].push_back(v[x - 1].ff + v[y - 1].ss);
        del[y].push_back(v[x - 1].ff + v[y - 1].ss);
      } else
        del[x].push_back(v[x - 1].ss + v[y - 1].ff),
            del[y].push_back(v[x - 1].ss + v[y - 1].ff);
      k = (int)del[x].size();
      if (k > 1LL)
        del[x][k - 1] += del[x][k - 2];
      k = (int)del[y].size();
      if (k > 1LL) {
        del[y][k - 1] += del[y][k - 2];
      }
    }
    for (i = 0; i < a; i++) {
      int ans = 0;
      k = v[i].ss - v[i].ff;
      k = upper_bound(dif.begin(), dif.end(), make_pair(k, inf)) - dif.begin();
      if (k - 1 >= 0)
        ans = suf[k - 1] + ((k - 1) * v[i].ff) - v[i].ss;
      if (k < a) {
        ans += pre[k] + (a - k) * v[i].ss;
      }
      if (del[i + 1].size())
        ans -= del[i + 1].back();
      cout << ans << endl;
    }
  }
}
