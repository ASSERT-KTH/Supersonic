#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    int tc = 1, i, j, k;
    while (tc--) {
        int a, b;
        cin >> a >> b;
        vector<pair<int, int>> v(a);
        vector<int> pre(a), suf(a);
        vector<pair<int, int>> dif(a);
        vector<vector<int>> del(a + 1);
        
        for (i = 0; i < a; i++) {
            cin >> v[i].first >> v[i].second;
            dif[i] = {v[i].second - v[i].first, i};
        }
        
        sort(dif.begin(), dif.end());
        
        for (i = 0; i < a; i++) {
            k = dif[i].second;
            suf[i] = v[k].second + (i > 0 ? suf[i - 1] : 0);
        }
        
        for (i = a - 1; i >= 0; i--) {
            k = dif[i].second;
            pre[a - 1 - i] = v[k].first + (i < a - 1 ? pre[a - 2 - i] : 0);
        }
        
        for (i = 0; i < b; i++) {
            int x, y;
            cin >> x >> y;
            k = v[x - 1].second - v[x - 1].first;
            int m = v[y - 1].second - v[y - 1].first;
            
            if (m <= k) {
                del[x].push_back(v[x - 1].first + v[y - 1].second);
                del[y].push_back(v[x - 1].first + v[y - 1].second);
            }
            else {
                del[x].push_back(v[x - 1].second + v[y - 1].first);
                del[y].push_back(v[x - 1].second + v[y - 1].first);
            }
            
            k = del[x].size();
            if (k > 1)
                del[x][k - 1] += del[x][k - 2];
            
            k = del[y].size();
            if (k > 1)
                del[y][k - 1] += del[y][k - 2];
        }
        
        for (i = 0; i < a; i++) {
            int ans = 0;
            k = v[i].second - v[i].first;
            auto it = upper_bound(dif.begin(), dif.end(), make_pair(k, a));
            k = it - dif.begin();
            
            if (k - 1 >= 0)
                ans = suf[k - 1] + ((k - 1) * v[i].first) - v[i].second;
            if (k < a)
                ans += pre[k] + (a - k) * v[i].second;
            
            if (!del[i + 1].empty())
                ans -= del[i + 1].back();
            
            cout << ans << endl;
        }
    }
    return 0;
}