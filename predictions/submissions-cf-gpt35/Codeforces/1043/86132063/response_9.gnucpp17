#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  int tc = 1;
  while (tc--) {
    int a, b;
    cin >> a >> b;
    vector<pair<int, int>> v(a);
    vector<int> pre(a), suf(a), del[a+1];
    
    for (int i = 0; i < a; i++) {
      cin >> v[i].first >> v[i].second;
    }
    
    sort(v.begin(), v.end(), [&](auto a, auto b) {
      return (a.second - a.first) < (b.second - b.first);
    });
    
    for (int i = 0; i < a; i++) {
      suf[i] = v[i].second;
      if (i) {
        suf[i] += suf[i - 1];
      }
    }
    
    for (int i = a - 1; i >= 0; i--) {
      pre[i] = v[i].first;
      if (i != a - 1) {
        pre[i] += pre[i + 1];
      }
    }
    
    for (int i = 0; i < b; i++) {
      int x, y;
      cin >> x >> y;
      
      int k = v[x - 1].second - v[x - 1].first;
      int m = v[y - 1].second - v[y - 1].first;
      
      if (m <= k) {
        del[x].push_back(v[x - 1].first + v[y - 1].second);
        del[y].push_back(v[x - 1].first + v[y - 1].second);
      } else {
        del[x].push_back(v[x - 1].second + v[y - 1].first);
        del[y].push_back(v[x - 1].second + v[y - 1].first);
      }
      
      int size_x = del[x].size();
      if (size_x > 1) {
        del[x][size_x - 1] += del[x][size_x - 2];
      }
      
      int size_y = del[y].size();
      if (size_y > 1) {
        del[y][size_y - 1] += del[y][size_y - 2];
      }
    }
    
    for (int i = 0; i < a; i++) {
      int ans = 0;
      int k = v[i].second - v[i].first;
      auto it = upper_bound(v.begin(), v.end(), make_pair(k, INT_MAX), [&](auto a, auto b) {
        return a.first < b.first;
      });
      int idx = distance(v.begin(), it);
      
      if (idx > 0) {
        ans = suf[idx - 1] + ((idx - 1) * v[i].first) - v[i].second;
      }
      
      if (idx < a) {
        ans += pre[idx] + (a - idx) * v[i].second;
      }
      
      if (!del[i + 1].empty()) {
        ans -= del[i + 1].back();
      }
      
      cout << ans << endl;
    }
  }
  
  return 0;
}