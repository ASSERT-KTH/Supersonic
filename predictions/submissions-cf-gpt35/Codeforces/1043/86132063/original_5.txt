```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int tc = 1, i, j, k;
    while (tc--) {
        int a, b;
        cin >> a >> b;
        
        vector<pair<int, int>> v;
        for (i = 0; i < a; i++) {
            int x, y;
            cin >> x >> y;
            v.push_back({x, y});
        }
        
        sort(v.begin(), v.end(), [](const pair<int, int>& p1, const pair<int, int>& p2) {
            return (p1.second - p1.first) < (p2.second - p2.first);
        });
        
        vector<int> suf(a), pre(a);
        suf[0] = v[0].second;
        for (i = 1; i < a; i++) {
            suf[i] = suf[i - 1] + v[i].second;
        }
        
        pre[a - 1] = v[a - 1].first;
        for (i = a - 2; i >= 0; i--) {
            pre[i] = pre[i + 1] + v[i].first;
        }
        
        vector<int> del[a + 1];
        for (i = 0; i < b; i++) {
            int x, y;
            cin >> x >> y;
            int k = v[x - 1].second - v[x - 1].first;
            int m = v[y - 1].second - v[y - 1].first;
            if (m <= k) {
                del[x].push_back(v[x - 1].first + v[y - 1].second);
                del[y].push_back(v[x - 1].first + v[y - 1].second);
            } else {
                del[x].push_back(v[x - 1].second + v[y - 1].first);
                del[y].push_back(v[x - 1].second + v[y - 1].first);
            }
            int sizeX = del[x].size();
            if (sizeX > 1) {
                del[x][sizeX - 1] += del[x][sizeX - 2];
            }
            int sizeY = del[y].size();
            if (sizeY > 1) {
                del[y][sizeY - 1] += del[y][sizeY - 2];
            }
        }
        
        for (i = 0; i < a; i++) {
            int ans = 0;
            int k = v[i].second - v[i].first;
            auto it = upper_bound(v.begin(), v.end(), make_pair(k, INT_MAX), [](const pair<int, int>& p, int val) {
                return p.second - p.first < val;
            });
            int idx = it - v.begin();
            if (idx - 1 >= 0) {
                ans = suf[idx - 1] + (idx - 1) * v[i].first - v[i].second;
            }
            if (idx < a) {
                ans += pre[idx] + (a - idx) * v[i].second;
            }
            if (!del[i + 1].empty()) {
                ans -= del[i + 1].back();
            }
            cout << ans << endl;
        }
    }
    return 0;
}
```