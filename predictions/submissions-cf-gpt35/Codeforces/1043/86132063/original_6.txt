```cpp
#include <bits/stdc++.h>
#define int long long
using namespace std;

const int mx = 3e5 + 10;

int del[mx][2];
int dif[mx][2];
int pre[mx];
int suf[mx];

int upperBound(int arr[][2], int n, int val) {
    int low = 0, high = n - 1;
    int ans = -1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid][0] <= val) {
            ans = mid;
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return ans;
}

int solve(int a, int b, vector<pair<int, int>>& v) {
    sort(v.begin(), v.end(), [](const pair<int, int>& p1, const pair<int, int>& p2) {
        return p1.second - p1.first < p2.second - p2.first;
    });

    for (int i = 0; i < a; i++) {
        dif[i][0] = v[i].second - v[i].first;
        dif[i][1] = i;
    }

    sort(dif, dif + a);

    suf[0] = v[dif[0][1]].second;
    for (int i = 1; i < a; i++) {
        suf[i] = suf[i - 1] + v[dif[i][1]].second;
    }

    pre[a - 1] = v[dif[a - 1][1]].first;
    for (int i = a - 2; i >= 0; i--) {
        pre[i] = pre[i + 1] + v[dif[i][1]].first;
    }

    int ans = 0;
    for (int i = 0; i < a; i++) {
        int k = v[i].second - v[i].first;
        int idx = upperBound(dif, a, k);
        if (idx > 0) {
            ans = suf[idx - 1] + ((idx - 1) * v[i].first) - v[i].second;
        }
        if (idx < a) {
            ans += pre[idx] + (a - idx) * v[i].second;
        }
        if (del[i + 1][0] > 0) {
            ans -= del[i + 1][1];
        }
        cout << ans << endl;
    }
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int tc = 1;
    while (tc--) {
        int a, b;
        cin >> a >> b;
        vector<pair<int, int>> v(a);
        for (int i = 0; i < a; i++) {
            cin >> v[i].first >> v[i].second;
        }
        memset(del, 0, sizeof(del));
        memset(dif, 0, sizeof(dif));
        memset(pre, 0, sizeof(pre));
        memset(suf, 0, sizeof(suf));
        solve(a, b, v);
    }
}
```