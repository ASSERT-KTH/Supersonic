#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int tc = 1, i, j, k;
    while (tc--) {
        int a, b;
        cin >> a >> b;
        vector<pair<int, int>> v(a);
        vector<int> dif(a), pre(a), suf(a);
        for (i = 0; i < a; i++) {
            cin >> v[i].first >> v[i].second;
            dif[i] = v[i].second - v[i].first;
        }
        sort(dif.begin(), dif.end());
        for (i = 0; i < a; i++) {
            suf[i] = v[dif[i].second].second;
            if (i)
                suf[i] += suf[i - 1];
        }
        for (i = a - 1; i >= 0; i--) {
            pre[i] = v[dif[i].second].first;
        }
        for (i = 1; i < a; i++)
            pre[i] += pre[i - 1];
        reverse(pre.begin(), pre.end());
        vector<vector<int>> del(a + 1);
        for (i = 0; i < b; i++) {
            int x, y;
            cin >> x >> y;
            int k = v[x - 1].second - v[x - 1].first;
            int m = v[y - 1].second - v[y - 1].first;
            if (m <= k) {
                del[x].push_back(v[x - 1].first + v[y - 1].second);
                del[y].push_back(v[x - 1].first + v[y - 1].second);
            } else
                del[x].push_back(v[x - 1].second + v[y - 1].first),
                    del[y].push_back(v[x - 1].second + v[y - 1].first);
            k = del[x].size();
            if (k > 1LL)
                del[x][k - 1] += del[x][k - 2];
            k = del[y].size();
            if (k > 1LL) {
                del[y][k - 1] += del[y][k - 2];
            }
        }
        for (i = 0; i < a; i++) {
            int ans = 0;
            int k = v[i].second - v[i].first;
            auto it = upper_bound(dif.begin(), dif.end(), k);
            if (it != dif.begin()) {
                int idx = it - dif.begin() - 1;
                ans = suf[idx] + (idx * v[i].first) - v[i].second;
            }
            if (it != dif.end()) {
                int idx = it - dif.begin();
                ans += pre[idx] + ((a - idx) * v[i].second);
            }
            if (!del[i + 1].empty())
                ans -= del[i + 1].back();
            cout << ans << endl;
        }
    }
    return 0;
}