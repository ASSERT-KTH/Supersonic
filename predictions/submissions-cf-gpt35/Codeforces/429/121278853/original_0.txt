```cpp
#include <iostream>
#include <vector>
using namespace std;

typedef vector<int> vi;
typedef vector<vi> vvi;

int n, ans;
vi init, goal, res;
vvi g;

void dfs(int node, int par, int pre, int ppre) {
    if (ppre) {
        init[node] ^= 1;
    }
    if (init[node] != goal[node]) {
        ans++;
        res.push_back(node);
        ppre ^= 1;
    }
    for (int v : g[node]) {
        if (v == par) {
            continue;
        }
        dfs(v, node, ppre, pre);
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n;

    g.resize(n + 1);
    init.resize(n + 1);
    goal.resize(n + 1);

    for (int i = 0; i < n - 1; i++) {
        int a, b;
        cin >> a >> b;
        g[a].push_back(b);
        g[b].push_back(a);
    }

    for (int i = 1; i <= n; i++) {
        cin >> init[i];
    }

    for (int i = 1; i <= n; i++) {
        cin >> goal[i];
    }

    dfs(1, 0, 0, 0);

    cout << ans << '\n';

    for (int v : res) {
        cout << v << '\n';
    }

    return 0;
}
```