#include <iostream>
#include <vector>
using namespace std;

typedef long long int ll;
vector<ll> g[100100];
vector<ll> res;

void dfs(ll node, ll par, ll pre, ll ppre, ll* init, ll* goal, ll& ans) {
    if (ppre) {
        init[node] ^= 1;
    }
    if (init[node] != goal[node]) {
        ans++;
        res.push_back(node);
        ppre ^= 1;
    }
    for (auto v : g[node]) {
        if (v == par)
            continue;
        dfs(v, node, ppre, pre, init, goal, ans);
    }
}

void solve() {
    ll n;
    cin >> n;
    ll init[100100], goal[100100], ans = 0;
    for (ll i = 0; i < n - 1; i++) {
        ll a, b;
        cin >> a >> b;
        g[a].push_back(b);
        g[b].push_back(a);
    }
    for (ll i = 1; i <= n; i++) {
        cin >> init[i];
    }
    for (ll i = 1; i <= n; i++) {
        cin >> goal[i];
    }
    dfs(1, 0, 0, 0, init, goal, ans);
    cout << ans << endl;
    for (auto v : res) {
        cout << v << endl;
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    solve();
    return 0;
}