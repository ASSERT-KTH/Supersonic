```cpp
#include <iostream>
#include <vector>
#include <limits>
#include <string>
using namespace std;

int getMinSteps(string s, int k) {
    int n = s.length();
    int m = 2 * n;

    vector<int> dp(m+1, numeric_limits<int>::max());
    vector<int> lazy(m+1, numeric_limits<int>::max());

    for (int i = 1; i <= n; i++) {
        if (i == 1)
            dp[i] = i;
        else
            dp[i] = dp[i-1] + i;

        if (i <= k + 1 && s[i - 1] == '1')
            lazy[i + 1] = i;
        else if (s[i - 1] == '1' && i >= k + 2) {
            int gg = dp[i - k - 1];
            lazy[i - k] = gg + i;
        }
    }

    int result = numeric_limits<int>::max();
    for (int i = n; i <= n; i++) {
        result = min(result, dp[i]);
    }

    return result;
}

int main() {
    int test = 1;
    while (test--) {
        int n, k;
        cin >> n >> k;
        string s;
        cin >> s;
        cout << getMinSteps(s, k) << endl;
    }
}
```