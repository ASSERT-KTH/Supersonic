#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <time.h>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#define ll long long
#define LINF 0x3f3f3f3f3f3f3f3f
#define INF 0x3f3f3f3f
#define PI 3.14159265
#define RAND (rand() * rand())
#define MAX(x, y) ((x) > (y) ? (x) : (y))
#define MIN(x, y) ((x) > (y) ? (y) : (x))
#define ABS(x) ((x) > 0 ? ((x) : -(x)))
#define CEIL(x, y) (((x) + (y)-1) / (y))
using namespace std;
const int MAXN = 2e5 + 5;
const ll MOD = 1e9 + 7;
int N, M, K, Q;
int A[MAXN];
int psum[MAXN];
int func(int pos) {
  int temp = M - psum[pos];
  int cnt = pos;
  for (int i = pos + K; i <= N; i += K) {
    if (A[i] > temp) {
      for (int j = i - K + 1; j <= N; ++j) {
        temp -= A[j];
        ++cnt;
      }
      break;
    } else {
      temp -= A[i];
      cnt += K;
    }
  }
  return cnt;
}
void solve(int testNum) {
  int i, j;
  scanf("%d%d%d", &N, &M, &K);
  for (i = 1; i <= N; ++i) {
    scanf("%d", &A[i]);
  }
  sort(A + 1, A + 1 + N);
  for (i = 1; i <= N; ++i)
    psum[i] = psum[i - 1] + A[i];
  if (psum[N] <= M) {
    printf("%d\n", N);
    return;
  }
  int cnt = 0;
  for (i = 0; i <= N; ++i) {
    cnt = max(cnt, func(i));
  }
  printf("%d\n", cnt);
  return;
}
int main() {
  int T;
  scanf("%d", &T);
  for (int t = 1; t <= T; ++t) {
    solve(t);
  }
  return 0;
}
