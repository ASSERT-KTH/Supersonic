#include <algorithm>
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

unordered_map<int, int> p, r, mp;

int get(int a, int c) {
  if (p[a] == a)
    return a;
  return p[a] = get(p[a], c);
}

void unite(int a, int b, int c) {
  if (p.count(a) == 0)
    p[a] = a;
  if (p.count(b) == 0)
    p[b] = b;
  a = get(a, c);
  b = get(b, c);
  if (a == b)
    return;
  if (r[a] == r[b])
    r[a]++;
  if (r[a] > r[b])
    p[b] = a;
  else
    p[a] = b;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b, c);
  }
  int q;
  cin >> q;
  while (q--) {
    int a, b;
    cin >> a >> b;
    if (p.size() > p.size())
      swap(a, b);
    if (mp.count(a * n + b)) {
      cout << mp[a * n + b] << endl;
      continue;
    }
    int res = 0;
    for (auto &c : p) {
      if (p.count(c.first) && p.count(c.first + n))
        res += get(a, c.first) == get(b, c.first);
    }
    mp[a * n + b] = res;
    cout << res << '\n';
  }
  return 0;
}