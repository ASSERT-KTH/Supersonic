#include <algorithm>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;

const int N = 1e5 + 1;
unordered_map<int, int> p[N];
unordered_map<int, int> r[N];
unordered_map<int, int> mp[N];

int get(int a, int c) {
  if (p[a][c] == a)
    return a;
  return p[a][c] = get(p[a][c], c);
}

void unite(int a, int b, int c) {
  if (!p[a].count(c))
    p[a][c] = a;
  if (!p[b].count(c))
    p[b][c] = b;

  a = get(a, c);
  b = get(b, c);

  if (a == b)
    return;

  if (r[a][c] == r[b][c])
    r[a][c]++;
  if (r[a][c] > r[b][c])
    p[b][c] = a;
  else
    p[a][c] = b;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int n, m;
  cin >> n >> m;

  for (int i = 0; i < m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b, c);
  }

  int q;
  cin >> q;

  while (q--) {
    int a, b;
    cin >> a >> b;
    if (p[a].size() > p[b].size())
      swap(a, b);
    if (mp[a].count(b)) {
      cout << mp[a][b] << endl;
      continue;
    }
    int res = 0;
    for (auto &c : p[a]) {
      if (p[b].count(c.first))
        res += (get(a, c.first) == get(b, c.first));
    }
    mp[a][b] = res;
    cout << res << '\n';
  }

  return 0;
}