#include <algorithm>
#include <assert.h>
#include <chrono>
#include <cstring>
#include <ctime>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <iomanip>
#include <iostream>
#include <map>
#include <math.h>
#include <queue>
#include <random>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#define try fck
#define ld double
#define pii pair<int, int>
#define pb push_back
#define left left228
#define ignore die
#define right right228
#define all(c) (c).begin(), (c).end()
#define fast                                                                   \
  ios_base::sync_with_stdio(0);                                                \
  cin.tie(0);                                                                  \
  cout.tie(0)
using namespace std;
const int N = 1e5 + 1, inf = 1e9, sq = 1e5, lg = 20;
map<int, int> p[N], r[N], mp[N];
int get(int a, int c) {
  if (p[a][c] == a)
    return a;
  return p[a][c] = get(p[a][c], c);
}
void unite(int a, int b, int c) {
  if (p[a].count(c))
    a = get(a, c);
  else
    p[a][c] = a;
  if (p[b].count(c))
    b = get(b, c);
  else
    p[b][c] = b;
  if (a == b)
    return;
  if (r[a][c] == r[b][c])
    r[a][c]++;
  if (r[a][c] > r[b][c])
    p[b][c] = a;
  else
    p[a][c] = b;
}
signed main() {
  fast;
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    unite(a, b, c);
  }
  int q;
  cin >> q;
  while (q--) {
    int a, b;
    cin >> a >> b;
    if (p[a].size() > p[b].size())
      swap(a, b);
    if (mp[a].count(b)) {
      cout << mp[a][b] << endl;
      continue;
    }
    int res = 0;
    for (auto &c : p[a]) {
      if (p[b].count(c.first))
        res += (get(a, c.first) == get(b, c.first));
    }
    mp[a][b] = res;
    cout << res << '\n';
  }
  exit(0);
}
