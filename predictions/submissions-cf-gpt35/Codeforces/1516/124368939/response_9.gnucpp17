#include <iostream>
#include <vector>
using namespace std;

bool checkPartition(vector<long long>& v, int n) {
    long long d = 0;
    for (int i = 0; i < n; i++) {
        d ^= v[i];
    }
    vector<long long> pref(n + 1, 0);
    for (int i = 1; i <= n; i++) {
        pref[i] = pref[i - 1] ^ v[i - 1];
    }
    vector<long long> suff(n + 2, 0);
    for (int i = n; i >= 1; i--) {
        suff[i] = suff[i + 1] ^ v[i - 1];
    }
    for (int i = 1; i <= n - 1; i++) {
        if (pref[i] == suff[i + 1]) {
            return true;
        }
    }
    if (d == 0) {
        long long k = 0;
        int c = 0;
        for (int i = 0; i < n; i++) {
            k ^= v[i];
            if (k == d) {
                k = 0;
                c++;
            }
        }
        if (k == 0 && c >= 3) {
            return true;
        }
    }
    return false;
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<long long> v(n, 0);
        for (int i = 0; i < n; i++) {
            cin >> v[i];
        }
        if (checkPartition(v, n)) {
            cout << "YES" << endl;
        } else {
            cout << "NO" << endl;
        }
    }
    return 0;
}