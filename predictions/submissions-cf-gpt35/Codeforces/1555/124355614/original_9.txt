```cpp
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 2e6 + 5;

struct Node {
  int t, push;
  Node() : t(0), push(0) {}
};

Node t[4 * N];

void makepush(int v, int tl, int tr) {
  if (!t[v].push)
    return;
  if (tl != tr) {
    t[v * 2].push += t[v].push;
    t[v * 2 + 1].push += t[v].push;
    t[v * 2].t += t[v].push;
    t[v * 2 + 1].t += t[v].push;
  }
  t[v].push = 0;
}

void add(int v, int tl, int tr, int l, int r, int x) {
  if (l > r)
    return;
  makepush(v, tl, tr);
  if (tl == l && tr == r) {
    t[v].t += x;
    t[v].push += x;
    return;
  }
  int tm = (tl + tr) / 2;
  add(v * 2, tl, tm, l, min(r, tm), x);
  add(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r, x);
  t[v].t = min(t[v * 2].t, t[v * 2 + 1].t);
}

int main() {
  ios_base ::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  int n, m;
  cin >> n >> m;
  vector<pair<int, pair<int, int>>> s;
  for (int i = 0; i < n; i++) {
    int l, r, w;
    cin >> l >> r >> w;
    s.push_back({w, {l, r - 1}});
  }
  sort(s.begin(), s.end(),
       [&](const pair<int, pair<int, int>> &x,
           const pair<int, pair<int, int>> &y) { return x.first < y.first; });
  int ptr = -1, ans = INT_MAX;
  for (int i = 0; i < n; i++) {
    if (i > 0)
      add(1, 1, m - 1, s[i - 1].second.first, s[i - 1].second.second, -1);
    while (ptr + 1 < n && t[1].t == 0) {
      ++ptr;
      add(1, 1, m - 1, s[ptr].second.first, s[ptr].second.second, +1);
    }
    if (t[1].t)
      ans = min(ans, s[ptr].first - s[i].first);
  }
  cout << ans;
}
```