```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int mod = 1e9 + 7;

struct Node {
    int sgtree;
    int slow;
};

vector<Node> sgtree;
vector<array<int, 3>> ve;
int n, m;

void dfs(int st, int en, int node, int rngst, int rngen, int value) {
    sgtree[node].sgtree += sgtree[node].slow;
    sgtree[2 * node].slow += sgtree[node].slow;
    sgtree[2 * node + 1].slow += sgtree[node].slow;
    sgtree[node].slow = 0;
    
    if (st >= rngst && en <= rngen) {
        sgtree[node].slow += value;
        sgtree[node].sgtree += sgtree[node].slow;
        sgtree[2 * node].slow += sgtree[node].slow;
        sgtree[2 * node + 1].slow += sgtree[node].slow;
        sgtree[node].slow = 0;
    } else if (en < rngst || st > rngen) {
        sgtree[node].slow += 0;
    } else {
        dfs(st, (st + en) / 2, 2 * node, rngst, rngen, value);
        dfs(((st + en) / 2) + 1, en, 2 * node + 1, rngst, rngen, value);
        sgtree[node].sgtree = min(sgtree[2 * node].sgtree + sgtree[2 * node].slow, sgtree[2 * node + 1].sgtree + sgtree[2 * node + 1].slow);
    }
}

void del(int i) {
    dfs(1, m - 1, 1, ve[i][1], ve[i][2], -1);
}

void add(int i) {
    dfs(1, m - 1, 1, ve[i][1], ve[i][2], 1);
}

int check() {
    return sgtree[1].sgtree + sgtree[1].slow;
}

void solve() {
    cin >> n >> m;
    
    if (m == 2) {
        cout << "0\n";
        return;
    }
    
    sgtree.resize(4 * m);
    ve.resize(n);
    
    for (int i = 0; i < n; i++) {
        int l, r, w;
        cin >> l >> r >> w;
        
        if (l == 1 && r == m) {
            cout << "0\n";
            return;
        }
        
        ve[i] = {w, l, r - 1};
    }
    
    sort(ve.begin(), ve.end());
    
    int i = 0, j = -1, ans = 1000000;
    
    while (j < ((int)ve.size() - 1)) {
        if (check() > 0) {
            del(i);
            ans = min(ans, ve[j][0] - ve[i][0]);
            i++;
        } else {
            j++;
            add(j);
        }
    }
    
    while (check() > 0) {
        del(i);
        ans = min(ans, ve[j][0] - ve[i][0]);
        i++;
    }
    
    cout << ans << '\n';
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    int t = 1;
    
    for (int tc = 1; tc <= t; tc++) {
        solve();
    }
    
    return 0;
}
```