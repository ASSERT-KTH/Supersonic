#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int MAXN = 1e6 + 5;

vector<int> sgtree(4 * MAXN);
vector<int> lazy(4 * MAXN);

void update(int node, int start, int end, int rangeStart, int rangeEnd, int value) {
    if (lazy[node] != 0) {
        sgtree[node] += lazy[node];
        if (start != end) {
            lazy[node * 2] += lazy[node];
            lazy[node * 2 + 1] += lazy[node];
        }
        lazy[node] = 0;
    }

    if (start > rangeEnd || end < rangeStart) {
        return;
    }

    if (start >= rangeStart && end <= rangeEnd) {
        sgtree[node] += value;
        if (start != end) {
            lazy[node * 2] += value;
            lazy[node * 2 + 1] += value;
        }
        return;
    }

    int mid = (start + end) / 2;
    update(node * 2, start, mid, rangeStart, rangeEnd, value);
    update(node * 2 + 1, mid + 1, end, rangeStart, rangeEnd, value);
    sgtree[node] = min(sgtree[node * 2], sgtree[node * 2 + 1]);
}

int query(int node, int start, int end, int rangeStart, int rangeEnd) {
    if (lazy[node] != 0) {
        sgtree[node] += lazy[node];
        if (start != end) {
            lazy[node * 2] += lazy[node];
            lazy[node * 2 + 1] += lazy[node];
        }
        lazy[node] = 0;
    }

    if (start > rangeEnd || end < rangeStart) {
        return INT_MAX;
    }

    if (start >= rangeStart && end <= rangeEnd) {
        return sgtree[node];
    }

    int mid = (start + end) / 2;
    int left = query(node * 2, start, mid, rangeStart, rangeEnd);
    int right = query(node * 2 + 1, mid + 1, end, rangeStart, rangeEnd);
    return min(left, right);
}

void solve() {
    int n, m;
    cin >> n >> m;
    if (m == 2) {
        cout << "0\n";
        return;
    }

    vector<pair<int, pair<int, int>>> ve;
    for (int i = 0; i < n; i++) {
        int l, r, w;
        cin >> l >> r >> w;
        if (l == 1 && r == m) {
            cout << "0\n";
            return;
        }
        ve.push_back({w, {l, r - 1}});
    }
    sort(ve.begin(), ve.end());

    int i = 0, j = -1, ans = 1e9;
    while (j < (int)ve.size() - 1) {
        if (query(1, 1, m - 1, 1, m - 1) > 0) {
            update(1, 1, m - 1, ve[i].second.first, ve[i].second.second, -1);
            ans = min(ans, ve[j].first - ve[i].first);
            i++;
        } else {
            j++;
            update(1, 1, m - 1, ve[j].second.first, ve[j].second.second, 1);
        }
    }

    while (query(1, 1, m - 1, 1, m - 1) > 0) {
        update(1, 1, m - 1, ve[i].second.first, ve[i].second.second, -1);
        ans = min(ans, ve[j].first - ve[i].first);
        i++;
    }

    cout << ans << '\n';
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int t = 1;
    for (int tc = 1; tc <= t; tc++) {
        solve();
    }
    return 0;
}