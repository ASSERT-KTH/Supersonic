```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

const long long INF = 1e18;
const int maxn = 100005;

void dijkstra(int n, int m) {
    std::vector<std::pair<int, int>> adj[maxn];
    std::vector<bool> processed(maxn, false);
    std::vector<long long> distance(maxn, INF);
    std::vector<int> p(maxn, -1);

    int x = 1;
    distance[x] = 0;
    std::priority_queue<std::pair<long long, int>> q;
    q.push({0, x});

    while (!q.empty()) {
        int a = q.top().second;
        q.pop();

        if (processed[a])
            continue;

        processed[a] = true;

        for (auto u : adj[a]) {
            int b = u.first, w = u.second;

            if (distance[a] + w < distance[b]) {
                distance[b] = distance[a] + w;
                p[b] = a;
                q.push({-distance[b], b});
            }
        }
    }

    if (p[n] == -1) {
        std::cout << "-1" << std::endl;
        return;
    }

    std::vector<int> path;
    for (int v = n; v != x; v = p[v]) {
        path.push_back(v);
    }
    path.push_back(x);
    std::reverse(path.begin(), path.end());

    for (auto i : path)
        std::cout << i << ' ';
    std::cout << std::endl;
}

int main() {
    int n, m;
    std::cin >> n >> m;

    if (m == 0) {
        std::cout << "-1" << std::endl;
        return 0;
    }

    for (int i = 0; i < m; i++) {
        int a, b, w;
        std::cin >> a >> b >> w;
        adj[a].push_back({b, w});
        adj[b].push_back({a, w});
    }

    dijkstra(n, m);

    return 0;
}
```