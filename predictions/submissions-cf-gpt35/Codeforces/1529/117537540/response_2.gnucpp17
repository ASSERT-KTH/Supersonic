#include <bits/stdc++.h>
using namespace std;
#define pii pair<long, long>
#define endl "\n"
#define long long long
#define v vector
long MOD = 1e9 + 7;

void setIO(string name, int submit) {
  if (submit) {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    freopen((name + ".in").c_str(), "r", stdin);
    freopen((name + ".out").c_str(), "w", stdout);
  } else {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
  }
}

int N, M;
int matrix[600][600];

void dijisktra(int start) {
  v<long> cost;
  cost.assign(N, 1e18);
  v<bool> marked;
  marked.assign(N, false);
  
  cost[start] = 0;

  while (true) {
    int cur = -1;
    for (int j = 0; j < N; j++) {
      if (!marked[j] && (cur == -1 || cost[j] < cost[cur]))
        cur = j;
    }
    if (cur == -1)
      break;
    marked[cur] = true;
    for (int j = 0; j < N; j++) {
      int price = matrix[cur][j];
      if (cost[cur] + price < cost[j]) {
        cost[j] = cost[cur] + price;
      }
    }
  }
  
  for (int i = 0; i < N; i++) {
    cout << cost[i] << " ";
  }
  cout << endl;
}

int main() {
  setIO("", 0);
  cin >> N >> M;
  
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
      matrix[i][j] = 1e9;
    }
  }
  
  for (int i = 0; i < M; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    matrix[a][b] = c;
  }
  
  for (int i = 0; i < N; i++) {
    dijisktra(i);
  }
  
  return 0;
}