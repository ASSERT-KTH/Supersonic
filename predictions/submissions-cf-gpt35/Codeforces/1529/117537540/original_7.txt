```cpp
#include <bits/stdc++.h>
using namespace std;

void dijisktra(int N, int M, int matrix[600][600]) {
  vector<long long> cost;
  cost.assign(N, 1e18);
  vector<bool> marked;
  marked.assign(N, false);
  for (int j = 0; j < N; j++) {
    if (cost[j] > matrix[0][j])
      cost[j] = matrix[0][j];
  }
  while (true) {
    int cur = -1;
    for (int j = 0; j < N; j++) {
      if (cur == -1) {
        if (!marked[j])
          cur = j;
      } else {
        if (!marked[j] && cost[cur] > cost[j])
          cur = j;
      }
    }
    if (cur == -1)
      break;
    marked[cur] = true;
    for (int j = 0; j < N; j++) {
      if (cost[(cur + j) % N] > cost[cur] + j) {
        cost[(cur + j) % N] = cost[cur] + j;
      }
    }
    for (int j = 0; j < N; j++) {
      int price = matrix[cur][j];
      if (cost[cur] + price < cost[((j + cost[cur])) % N]) {
        cost[((j + cost[cur])) % N] = cost[cur] + price;
      }
    }
  }
  for (int i = 0; i < N; i++) {
    if (i == 0)
      cout << 0 << " ";
    else
      cout << cost[i] << " ";
  }
  cout << endl;
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  
  int N, M;
  cin >> N >> M;
  
  int matrix[600][600];
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
      matrix[i][j] = 1 << 30;
    }
  }
  
  for (int i = 0; i < M; i++) {
    int a, b, c;
    cin >> a >> b >> c;
    matrix[a][b] = c;
  }
  
  for (int i = 0; i < N; i++) {
    dijisktra(N, M, matrix);
  }
  
  return 0;
}
```