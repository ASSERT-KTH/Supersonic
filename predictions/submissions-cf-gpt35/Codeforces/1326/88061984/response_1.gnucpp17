#include <iostream>
#include <vector>
#include <string>
using namespace std;

vector<int> computeLPS(string s) {
  vector<int> lps(s.size(), 0);
  int previous_index = 0;
  for (int i = 1; i < s.size(); i++) {
    if (s[i] == s[previous_index]) {
      previous_index++;
      lps[i] = previous_index;
    } else {
      if (previous_index != 0) {
        previous_index = lps[previous_index - 1];
        i--;
      } else {
        lps[i] = 0;
      }
    }
  }
  return lps;
}

int remainingStringLongestPalindrome(string s) {
  string t = s + "?" + s;
  vector<int> lps = computeLPS(t);
  return lps[lps.size() - 1];
}

string longestPrefixSuffixPalindrome(string s) {
  int length = 0;
  int n = s.size();
  for (int i = 0, j = n - 1; i < j; i++, j--) {
    if (s[i] != s[j]) {
      break;
    }
    length++;
  }
  string ans = s.substr(0, length);
  string remaining = s.substr(length, (n - (2 * length)));
  if (remaining.size()) {
    int longest_prefix = remainingStringLongestPalindrome(remaining);
    string reversed_remaining = remaining;
    reverse(reversed_remaining.begin(), reversed_remaining.end());
    int longest_suffix = remainingStringLongestPalindrome(reversed_remaining);
    if (longest_prefix > longest_suffix) {
      ans += remaining.substr(0, longest_prefix);
    } else {
      ans += reversed_remaining.substr(0, longest_suffix);
    }
  }
  ans += s.substr(n - length, length);
  return ans;
}

int main() {
  int t;
  cin >> t;
  while (t--) {
    string str;
    cin >> str;
    string ans = longestPrefixSuffixPalindrome(str);
    cout << ans << endl;
  }
  return 0;
}