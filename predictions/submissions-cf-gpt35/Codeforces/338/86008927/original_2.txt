```cpp
#include <bits/stdc++.h>
using namespace std;

#define fastIO ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0)

const int N = 10100;

int gcd(int a, int b) {
  if (b == 0) {
    return a;
  }
  return gcd(b, a % b);
}

int lcm(int a, int b) {
  int d = gcd(a, b);
  a /= d;
  if (a > INT_MAX / b) {
    printf("NO\n");
    exit(0);
  }
  return a * b;
}

int gcdEx(int a, int b, int& x, int& y) {
  if (b == 0) {
    x = 1;
    y = 0;
    return a;
  }
  int x1, y1;
  int d = gcdEx(b, a % b, x1, y1);
  x = y1;
  y = x1 - y1 * (a / b);
  return d;
}

int binmul(int a, int b, int mod) {
  if (b == 0) {
    return 0;
  }
  if (b % 2 == 0) {
    return binmul((a + a) % mod, b / 2, mod);
  } else {
    return (binmul(a, b - 1, mod) + a) % mod;
  }
}

int solve(int r1, int mod1, int r2, int mod2) {
  int g = gcd(mod1, mod2);
  if (r1 % g != r2 % g) {
    printf("NO\n");
    exit(0);
  }
  int a = mod1 / g;
  int b = (r2 - r1) / g;
  int c = mod2 / g;
  int x, y;
  gcdEx(a, c, x, y);
  x = (x % c + c) % c;
  int k = binmul(b, x, c);
  int ans = (r1 + k * mod1) % lcm(mod1, mod2);
  return ans;
}

int a[N];

void run() {
  int n, m;
  int k;
  scanf("%d%d%d", &n, &m, &k);
  for (int i = 0; i < k; ++i) {
    scanf("%d", &a[i]);
  }
  int l = a[0];
  for (int i = 1; i < k; ++i) {
    l = lcm(l, a[i]);
  }
  if (l > n) {
    printf("NO\n");
    return;
  }
  vector<pair<int, int>> eq(k);
  for (int i = 0; i < k; ++i) {
    eq[i].second = a[i];
    eq[i].first = ((-i) % a[i] + a[i]) % a[i];
  }
  int r1 = eq[0].first;
  int mod1 = eq[0].second;
  for (int i = 1; i < k; ++i) {
    int curMod = lcm(mod1, eq[i].second);
    int curR = solve(r1, mod1, eq[i].first, eq[i].second);
    r1 = (curR % curMod + curMod) % curMod;
    mod1 = curMod;
  }
  if (r1 == 0) {
    r1 += mod1;
  }
  if (r1 + k - 1 > m) {
    printf("NO\n");
    return;
  }
  for (int i = 0; i < k; ++i) {
    if (gcd(l, r1 + i) != a[i]) {
      printf("NO\n");
      return;
    }
  }
  printf("YES\n");
}

int main(void) {
  auto start = chrono::high_resolution_clock::now();
  run();
  auto end = chrono::high_resolution_clock::now();
  return 0;
}
```