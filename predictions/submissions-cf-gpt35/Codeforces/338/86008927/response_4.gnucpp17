#include <iostream>
#include <vector>
#include <chrono>

using namespace std;

#define debug(x) 238

typedef long long ll;

inline ll gcd(ll a, ll b) {
  while (b != 0) {
    ll temp = a % b;
    a = b;
    b = temp;
  }
  return a;
}

inline ll lcm(ll a, ll b) {
  return (a / gcd(a, b)) * b;
}

inline ll binmul(ll a, ll b, ll mod) {
  ll res = 0;
  a %= mod;
  while (b > 0) {
    if (b % 2 == 1)
      res = (res + a) % mod;
    a = (a + a) % mod;
    b /= 2;
  }
  return res;
}

inline ll solve(ll r1, ll mod1, ll r2, ll mod2) {
  ll g = gcd(mod1, mod2);
  if (r1 % g != r2 % g) {
    cout << "NO" << endl;
    exit(0);
  }
  ll a = mod1 / g;
  ll b = (r2 - r1) / g;
  ll c = mod2 / g;
  ll x, y;
  ll d = gcd(a, c, x, y);
  x = (x % c + c) % c;
  ll k = binmul(b, x, c);
  ll ans = (r1 + k * mod1) % lcm(mod1, mod2);
  return ans;
}

inline void run() {
  ll n, m;
  int k;
  cin >> n >> m >> k;
  vector<ll> a(k);
  for (int i = 0; i < k; ++i) {
    cin >> a[i];
  }
  ll l = a[0];
  for (int i = 1; i < k; ++i) {
    l = lcm(l, a[i]);
  }
  if (l > n) {
    cout << "NO" << endl;
    return;
  }
  vector<pair<ll, ll>> eq(k);
  for (int i = 0; i < k; ++i) {
    eq[i].second = a[i];
    eq[i].first = ((-i) % a[i] + a[i]) % a[i];
  }
  ll r1 = eq[0].first;
  ll mod1 = eq[0].second;
  for (int i = 1; i < k; ++i) {
    ll curMod = lcm(mod1, eq[i].second);
    ll curR = solve(r1, mod1, eq[i].first, eq[i].second);
    r1 = (curR % curMod + curMod) % curMod;
    mod1 = curMod;
  }
  if (r1 == 0) {
    r1 += mod1;
  }
  if (r1 + k - 1 > m) {
    cout << "NO" << endl;
    return;
  }
  for (int i = 0; i < k; ++i) {
    if (gcd(l, r1 + i) != a[i]) {
      cout << "NO" << endl;
      return;
    }
  }
  cout << "YES" << endl;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

  auto start = chrono::high_resolution_clock::now();
  run();
  auto end = chrono::high_resolution_clock::now();

  #ifdef PERVEEVM_LOCAL
  cerr << "Execution time: " << chrono::duration_cast<chrono::milliseconds>(end - start).count() << " ms" << endl;
  #endif

  return 0;
}